
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001dbd8  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aac  0801dea8  0801dea8  0002dea8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e954  0801e954  0002e954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e95c  0801e95c  0002e95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801e960  0801e960  0002e960  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002d4  24000000  0801e964  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000322c  240002d4  0801ec38  000302d4  2**2
                  ALLOC
  8 ._user_heap_stack 00000c00  24003500  0801ec38  00033500  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   0003a222  00000000  00000000  00030302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000632f  00000000  00000000  0006a524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002db0  00000000  00000000  00070858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002b28  00000000  00000000  00073608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0000ba48  00000000  00000000  00076130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0003ddd3  00000000  00000000  00081b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017f9bd  00000000  00000000  000bf94b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0023f308  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000da98  00000000  00000000  0023f358  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002d4 	.word	0x240002d4
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801de90 	.word	0x0801de90

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002d8 	.word	0x240002d8
 800030c:	0801de90 	.word	0x0801de90

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9ac 	b.w	8000aa8 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	468e      	mov	lr, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14d      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4694      	mov	ip, r2
 80007ea:	d969      	bls.n	80008c0 <__udivmoddi4+0xe8>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b152      	cbz	r2, 8000808 <__udivmoddi4+0x30>
 80007f2:	fa01 f302 	lsl.w	r3, r1, r2
 80007f6:	f1c2 0120 	rsb	r1, r2, #32
 80007fa:	fa20 f101 	lsr.w	r1, r0, r1
 80007fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000802:	ea41 0e03 	orr.w	lr, r1, r3
 8000806:	4094      	lsls	r4, r2
 8000808:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800080c:	0c21      	lsrs	r1, r4, #16
 800080e:	fbbe f6f8 	udiv	r6, lr, r8
 8000812:	fa1f f78c 	uxth.w	r7, ip
 8000816:	fb08 e316 	mls	r3, r8, r6, lr
 800081a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800081e:	fb06 f107 	mul.w	r1, r6, r7
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f106 30ff 	add.w	r0, r6, #4294967295
 800082e:	f080 811f 	bcs.w	8000a70 <__udivmoddi4+0x298>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 811c 	bls.w	8000a70 <__udivmoddi4+0x298>
 8000838:	3e02      	subs	r6, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	b2a4      	uxth	r4, r4
 8000840:	fbb3 f0f8 	udiv	r0, r3, r8
 8000844:	fb08 3310 	mls	r3, r8, r0, r3
 8000848:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800084c:	fb00 f707 	mul.w	r7, r0, r7
 8000850:	42a7      	cmp	r7, r4
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x92>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 33ff 	add.w	r3, r0, #4294967295
 800085c:	f080 810a 	bcs.w	8000a74 <__udivmoddi4+0x29c>
 8000860:	42a7      	cmp	r7, r4
 8000862:	f240 8107 	bls.w	8000a74 <__udivmoddi4+0x29c>
 8000866:	4464      	add	r4, ip
 8000868:	3802      	subs	r0, #2
 800086a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800086e:	1be4      	subs	r4, r4, r7
 8000870:	2600      	movs	r6, #0
 8000872:	b11d      	cbz	r5, 800087c <__udivmoddi4+0xa4>
 8000874:	40d4      	lsrs	r4, r2
 8000876:	2300      	movs	r3, #0
 8000878:	e9c5 4300 	strd	r4, r3, [r5]
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d909      	bls.n	800089a <__udivmoddi4+0xc2>
 8000886:	2d00      	cmp	r5, #0
 8000888:	f000 80ef 	beq.w	8000a6a <__udivmoddi4+0x292>
 800088c:	2600      	movs	r6, #0
 800088e:	e9c5 0100 	strd	r0, r1, [r5]
 8000892:	4630      	mov	r0, r6
 8000894:	4631      	mov	r1, r6
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	fab3 f683 	clz	r6, r3
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d14a      	bne.n	8000938 <__udivmoddi4+0x160>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d302      	bcc.n	80008ac <__udivmoddi4+0xd4>
 80008a6:	4282      	cmp	r2, r0
 80008a8:	f200 80f9 	bhi.w	8000a9e <__udivmoddi4+0x2c6>
 80008ac:	1a84      	subs	r4, r0, r2
 80008ae:	eb61 0303 	sbc.w	r3, r1, r3
 80008b2:	2001      	movs	r0, #1
 80008b4:	469e      	mov	lr, r3
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d0e0      	beq.n	800087c <__udivmoddi4+0xa4>
 80008ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80008be:	e7dd      	b.n	800087c <__udivmoddi4+0xa4>
 80008c0:	b902      	cbnz	r2, 80008c4 <__udivmoddi4+0xec>
 80008c2:	deff      	udf	#255	; 0xff
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	f040 8092 	bne.w	80009f2 <__udivmoddi4+0x21a>
 80008ce:	eba1 010c 	sub.w	r1, r1, ip
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	2601      	movs	r6, #1
 80008dc:	0c20      	lsrs	r0, r4, #16
 80008de:	fbb1 f3f7 	udiv	r3, r1, r7
 80008e2:	fb07 1113 	mls	r1, r7, r3, r1
 80008e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ea:	fb0e f003 	mul.w	r0, lr, r3
 80008ee:	4288      	cmp	r0, r1
 80008f0:	d908      	bls.n	8000904 <__udivmoddi4+0x12c>
 80008f2:	eb1c 0101 	adds.w	r1, ip, r1
 80008f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008fa:	d202      	bcs.n	8000902 <__udivmoddi4+0x12a>
 80008fc:	4288      	cmp	r0, r1
 80008fe:	f200 80cb 	bhi.w	8000a98 <__udivmoddi4+0x2c0>
 8000902:	4643      	mov	r3, r8
 8000904:	1a09      	subs	r1, r1, r0
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb1 f0f7 	udiv	r0, r1, r7
 800090c:	fb07 1110 	mls	r1, r7, r0, r1
 8000910:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000914:	fb0e fe00 	mul.w	lr, lr, r0
 8000918:	45a6      	cmp	lr, r4
 800091a:	d908      	bls.n	800092e <__udivmoddi4+0x156>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 31ff 	add.w	r1, r0, #4294967295
 8000924:	d202      	bcs.n	800092c <__udivmoddi4+0x154>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f200 80bb 	bhi.w	8000aa2 <__udivmoddi4+0x2ca>
 800092c:	4608      	mov	r0, r1
 800092e:	eba4 040e 	sub.w	r4, r4, lr
 8000932:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000936:	e79c      	b.n	8000872 <__udivmoddi4+0x9a>
 8000938:	f1c6 0720 	rsb	r7, r6, #32
 800093c:	40b3      	lsls	r3, r6
 800093e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000942:	ea4c 0c03 	orr.w	ip, ip, r3
 8000946:	fa20 f407 	lsr.w	r4, r0, r7
 800094a:	fa01 f306 	lsl.w	r3, r1, r6
 800094e:	431c      	orrs	r4, r3
 8000950:	40f9      	lsrs	r1, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fa00 f306 	lsl.w	r3, r0, r6
 800095a:	fbb1 f8f9 	udiv	r8, r1, r9
 800095e:	0c20      	lsrs	r0, r4, #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fb09 1118 	mls	r1, r9, r8, r1
 8000968:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800096c:	fb08 f00e 	mul.w	r0, r8, lr
 8000970:	4288      	cmp	r0, r1
 8000972:	fa02 f206 	lsl.w	r2, r2, r6
 8000976:	d90b      	bls.n	8000990 <__udivmoddi4+0x1b8>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000980:	f080 8088 	bcs.w	8000a94 <__udivmoddi4+0x2bc>
 8000984:	4288      	cmp	r0, r1
 8000986:	f240 8085 	bls.w	8000a94 <__udivmoddi4+0x2bc>
 800098a:	f1a8 0802 	sub.w	r8, r8, #2
 800098e:	4461      	add	r1, ip
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f9 	udiv	r0, r1, r9
 8000998:	fb09 1110 	mls	r1, r9, r0, r1
 800099c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a4:	458e      	cmp	lr, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x1e2>
 80009a8:	eb1c 0101 	adds.w	r1, ip, r1
 80009ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b0:	d26c      	bcs.n	8000a8c <__udivmoddi4+0x2b4>
 80009b2:	458e      	cmp	lr, r1
 80009b4:	d96a      	bls.n	8000a8c <__udivmoddi4+0x2b4>
 80009b6:	3802      	subs	r0, #2
 80009b8:	4461      	add	r1, ip
 80009ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009be:	fba0 9402 	umull	r9, r4, r0, r2
 80009c2:	eba1 010e 	sub.w	r1, r1, lr
 80009c6:	42a1      	cmp	r1, r4
 80009c8:	46c8      	mov	r8, r9
 80009ca:	46a6      	mov	lr, r4
 80009cc:	d356      	bcc.n	8000a7c <__udivmoddi4+0x2a4>
 80009ce:	d053      	beq.n	8000a78 <__udivmoddi4+0x2a0>
 80009d0:	b15d      	cbz	r5, 80009ea <__udivmoddi4+0x212>
 80009d2:	ebb3 0208 	subs.w	r2, r3, r8
 80009d6:	eb61 010e 	sbc.w	r1, r1, lr
 80009da:	fa01 f707 	lsl.w	r7, r1, r7
 80009de:	fa22 f306 	lsr.w	r3, r2, r6
 80009e2:	40f1      	lsrs	r1, r6
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ea:	2600      	movs	r6, #0
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4301      	orrs	r1, r0
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa1f fe8c 	uxth.w	lr, ip
 8000a0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a10:	fb07 3610 	mls	r6, r7, r0, r3
 8000a14:	0c0b      	lsrs	r3, r1, #16
 8000a16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	fa04 f402 	lsl.w	r4, r4, r2
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x260>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a2e:	d22f      	bcs.n	8000a90 <__udivmoddi4+0x2b8>
 8000a30:	429e      	cmp	r6, r3
 8000a32:	d92d      	bls.n	8000a90 <__udivmoddi4+0x2b8>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a40:	fb07 3316 	mls	r3, r7, r6, r3
 8000a44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a48:	fb06 f30e 	mul.w	r3, r6, lr
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x28a>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a58:	d216      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d914      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5e:	3e02      	subs	r6, #2
 8000a60:	4461      	add	r1, ip
 8000a62:	1ac9      	subs	r1, r1, r3
 8000a64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a68:	e738      	b.n	80008dc <__udivmoddi4+0x104>
 8000a6a:	462e      	mov	r6, r5
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	e705      	b.n	800087c <__udivmoddi4+0xa4>
 8000a70:	4606      	mov	r6, r0
 8000a72:	e6e3      	b.n	800083c <__udivmoddi4+0x64>
 8000a74:	4618      	mov	r0, r3
 8000a76:	e6f8      	b.n	800086a <__udivmoddi4+0x92>
 8000a78:	454b      	cmp	r3, r9
 8000a7a:	d2a9      	bcs.n	80009d0 <__udivmoddi4+0x1f8>
 8000a7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a84:	3801      	subs	r0, #1
 8000a86:	e7a3      	b.n	80009d0 <__udivmoddi4+0x1f8>
 8000a88:	4646      	mov	r6, r8
 8000a8a:	e7ea      	b.n	8000a62 <__udivmoddi4+0x28a>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	e794      	b.n	80009ba <__udivmoddi4+0x1e2>
 8000a90:	4640      	mov	r0, r8
 8000a92:	e7d1      	b.n	8000a38 <__udivmoddi4+0x260>
 8000a94:	46d0      	mov	r8, sl
 8000a96:	e77b      	b.n	8000990 <__udivmoddi4+0x1b8>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	e732      	b.n	8000904 <__udivmoddi4+0x12c>
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	e709      	b.n	80008b6 <__udivmoddi4+0xde>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	e742      	b.n	800092e <__udivmoddi4+0x156>

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/100)));
 8000ab8:	ed97 7a00 	vldr	s14, [r7]
 8000abc:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000b2c <setServo+0x80>
 8000ac0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ac4:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000b30 <setServo+0x84>
 8000ac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000acc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000b34 <setServo+0x88>
 8000ad0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ad8:	ee17 3a90 	vmov	r3, s15
 8000adc:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	2b03      	cmp	r3, #3
 8000ae4:	d81a      	bhi.n	8000b1c <setServo+0x70>
 8000ae6:	a201      	add	r2, pc, #4	; (adr r2, 8000aec <setServo+0x40>)
 8000ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aec:	08000afd 	.word	0x08000afd
 8000af0:	08000b05 	.word	0x08000b05
 8000af4:	08000b0d 	.word	0x08000b0d
 8000af8:	08000b15 	.word	0x08000b15
		case 1:
			TIM4->CCR4 = timerVal;
 8000afc:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <setServo+0x8c>)
 8000afe:	89fb      	ldrh	r3, [r7, #14]
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000b02:	e00c      	b.n	8000b1e <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000b04:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <setServo+0x8c>)
 8000b06:	89fb      	ldrh	r3, [r7, #14]
 8000b08:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000b0a:	e008      	b.n	8000b1e <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000b0c:	4a0a      	ldr	r2, [pc, #40]	; (8000b38 <setServo+0x8c>)
 8000b0e:	89fb      	ldrh	r3, [r7, #14]
 8000b10:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8000b12:	e004      	b.n	8000b1e <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000b14:	4a08      	ldr	r2, [pc, #32]	; (8000b38 <setServo+0x8c>)
 8000b16:	89fb      	ldrh	r3, [r7, #14]
 8000b18:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000b1a:	e000      	b.n	8000b1e <setServo+0x72>

		default:
			break;
 8000b1c:	bf00      	nop
	}
}
 8000b1e:	bf00      	nop
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	42c80000 	.word	0x42c80000
 8000b30:	457a0000 	.word	0x457a0000
 8000b34:	453b8000 	.word	0x453b8000
 8000b38:	40000800 	.word	0x40000800

08000b3c <setLEDs>:

void setLEDs(void) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08e      	sub	sp, #56	; 0x38
 8000b40:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000b42:	2300      	movs	r3, #0
 8000b44:	637b      	str	r3, [r7, #52]	; 0x34
 8000b46:	e181      	b.n	8000e4c <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8000b48:	4aa1      	ldr	r2, [pc, #644]	; (8000dd0 <setLEDs+0x294>)
 8000b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000b50:	2b03      	cmp	r3, #3
 8000b52:	f200 8177 	bhi.w	8000e44 <setLEDs+0x308>
 8000b56:	a201      	add	r2, pc, #4	; (adr r2, 8000b5c <setLEDs+0x20>)
 8000b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b5c:	08000b6d 	.word	0x08000b6d
 8000b60:	08000c1d 	.word	0x08000c1d
 8000b64:	08000ccd 	.word	0x08000ccd
 8000b68:	08000d7d 	.word	0x08000d7d
		case 0:
			for (int j = 0; j < 3; j++) {
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	633b      	str	r3, [r7, #48]	; 0x30
 8000b70:	e042      	b.n	8000bf8 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 8000b72:	2300      	movs	r3, #0
 8000b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000b76:	e039      	b.n	8000bec <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b78:	4996      	ldr	r1, [pc, #600]	; (8000dd4 <setLEDs+0x298>)
 8000b7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b7c:	4613      	mov	r3, r2
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	4413      	add	r3, r2
 8000b82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b84:	4413      	add	r3, r2
 8000b86:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b8a:	2180      	movs	r1, #128	; 0x80
 8000b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b8e:	fa41 f202 	asr.w	r2, r1, r2
 8000b92:	4013      	ands	r3, r2
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d013      	beq.n	8000bc0 <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b9a:	00da      	lsls	r2, r3, #3
 8000b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b9e:	18d1      	adds	r1, r2, r3
 8000ba0:	4a8b      	ldr	r2, [pc, #556]	; (8000dd0 <setLEDs+0x294>)
 8000ba2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ba4:	00db      	lsls	r3, r3, #3
 8000ba6:	4413      	add	r3, r2
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	4613      	mov	r3, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	4413      	add	r3, r2
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	440b      	add	r3, r1
 8000bb4:	3308      	adds	r3, #8
 8000bb6:	4a88      	ldr	r2, [pc, #544]	; (8000dd8 <setLEDs+0x29c>)
 8000bb8:	213c      	movs	r1, #60	; 0x3c
 8000bba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000bbe:	e012      	b.n	8000be6 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bc2:	00da      	lsls	r2, r3, #3
 8000bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc6:	18d1      	adds	r1, r2, r3
 8000bc8:	4a81      	ldr	r2, [pc, #516]	; (8000dd0 <setLEDs+0x294>)
 8000bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bcc:	00db      	lsls	r3, r3, #3
 8000bce:	4413      	add	r3, r2
 8000bd0:	685a      	ldr	r2, [r3, #4]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	4413      	add	r3, r2
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	440b      	add	r3, r1
 8000bdc:	3308      	adds	r3, #8
 8000bde:	4a7e      	ldr	r2, [pc, #504]	; (8000dd8 <setLEDs+0x29c>)
 8000be0:	211e      	movs	r1, #30
 8000be2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be8:	3301      	adds	r3, #1
 8000bea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bee:	2b07      	cmp	r3, #7
 8000bf0:	ddc2      	ble.n	8000b78 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	633b      	str	r3, [r7, #48]	; 0x30
 8000bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	ddb9      	ble.n	8000b72 <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000bfe:	2380      	movs	r3, #128	; 0x80
 8000c00:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c02:	e007      	b.n	8000c14 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000c04:	4a74      	ldr	r2, [pc, #464]	; (8000dd8 <setLEDs+0x29c>)
 8000c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c08:	2100      	movs	r1, #0
 8000c0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c10:	3301      	adds	r3, #1
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c16:	2bb1      	cmp	r3, #177	; 0xb1
 8000c18:	ddf4      	ble.n	8000c04 <setLEDs+0xc8>
			}
			break;
 8000c1a:	e114      	b.n	8000e46 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c20:	e042      	b.n	8000ca8 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
 8000c26:	e039      	b.n	8000c9c <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000c28:	496a      	ldr	r1, [pc, #424]	; (8000dd4 <setLEDs+0x298>)
 8000c2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	4413      	add	r3, r2
 8000c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c34:	4413      	add	r3, r2
 8000c36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c3a:	2180      	movs	r1, #128	; 0x80
 8000c3c:	6a3a      	ldr	r2, [r7, #32]
 8000c3e:	fa41 f202 	asr.w	r2, r1, r2
 8000c42:	4013      	ands	r3, r2
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d013      	beq.n	8000c70 <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4a:	00da      	lsls	r2, r3, #3
 8000c4c:	6a3b      	ldr	r3, [r7, #32]
 8000c4e:	18d1      	adds	r1, r2, r3
 8000c50:	4a5f      	ldr	r2, [pc, #380]	; (8000dd0 <setLEDs+0x294>)
 8000c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	4413      	add	r3, r2
 8000c58:	685a      	ldr	r2, [r3, #4]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	4413      	add	r3, r2
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	440b      	add	r3, r1
 8000c64:	3308      	adds	r3, #8
 8000c66:	4a5d      	ldr	r2, [pc, #372]	; (8000ddc <setLEDs+0x2a0>)
 8000c68:	213c      	movs	r1, #60	; 0x3c
 8000c6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c6e:	e012      	b.n	8000c96 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	00da      	lsls	r2, r3, #3
 8000c74:	6a3b      	ldr	r3, [r7, #32]
 8000c76:	18d1      	adds	r1, r2, r3
 8000c78:	4a55      	ldr	r2, [pc, #340]	; (8000dd0 <setLEDs+0x294>)
 8000c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c7c:	00db      	lsls	r3, r3, #3
 8000c7e:	4413      	add	r3, r2
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	4613      	mov	r3, r2
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	4413      	add	r3, r2
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	440b      	add	r3, r1
 8000c8c:	3308      	adds	r3, #8
 8000c8e:	4a53      	ldr	r2, [pc, #332]	; (8000ddc <setLEDs+0x2a0>)
 8000c90:	211e      	movs	r1, #30
 8000c92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	623b      	str	r3, [r7, #32]
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	2b07      	cmp	r3, #7
 8000ca0:	ddc2      	ble.n	8000c28 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	ddb9      	ble.n	8000c22 <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000cae:	2380      	movs	r3, #128	; 0x80
 8000cb0:	61fb      	str	r3, [r7, #28]
 8000cb2:	e007      	b.n	8000cc4 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000cb4:	4a49      	ldr	r2, [pc, #292]	; (8000ddc <setLEDs+0x2a0>)
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	2100      	movs	r1, #0
 8000cba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	61fb      	str	r3, [r7, #28]
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	2bb1      	cmp	r3, #177	; 0xb1
 8000cc8:	ddf4      	ble.n	8000cb4 <setLEDs+0x178>
			}
			break;
 8000cca:	e0bc      	b.n	8000e46 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000ccc:	2300      	movs	r3, #0
 8000cce:	61bb      	str	r3, [r7, #24]
 8000cd0:	e042      	b.n	8000d58 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
 8000cd6:	e039      	b.n	8000d4c <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000cd8:	493e      	ldr	r1, [pc, #248]	; (8000dd4 <setLEDs+0x298>)
 8000cda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cdc:	4613      	mov	r3, r2
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	4413      	add	r3, r2
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cea:	2180      	movs	r1, #128	; 0x80
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	fa41 f202 	asr.w	r2, r1, r2
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d013      	beq.n	8000d20 <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	00da      	lsls	r2, r3, #3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	18d1      	adds	r1, r2, r3
 8000d00:	4a33      	ldr	r2, [pc, #204]	; (8000dd0 <setLEDs+0x294>)
 8000d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d04:	00db      	lsls	r3, r3, #3
 8000d06:	4413      	add	r3, r2
 8000d08:	685a      	ldr	r2, [r3, #4]
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4413      	add	r3, r2
 8000d10:	00db      	lsls	r3, r3, #3
 8000d12:	440b      	add	r3, r1
 8000d14:	3308      	adds	r3, #8
 8000d16:	4a32      	ldr	r2, [pc, #200]	; (8000de0 <setLEDs+0x2a4>)
 8000d18:	213c      	movs	r1, #60	; 0x3c
 8000d1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000d1e:	e012      	b.n	8000d46 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	00da      	lsls	r2, r3, #3
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	18d1      	adds	r1, r2, r3
 8000d28:	4a29      	ldr	r2, [pc, #164]	; (8000dd0 <setLEDs+0x294>)
 8000d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d2c:	00db      	lsls	r3, r3, #3
 8000d2e:	4413      	add	r3, r2
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	4613      	mov	r3, r2
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	4413      	add	r3, r2
 8000d38:	00db      	lsls	r3, r3, #3
 8000d3a:	440b      	add	r3, r1
 8000d3c:	3308      	adds	r3, #8
 8000d3e:	4a28      	ldr	r2, [pc, #160]	; (8000de0 <setLEDs+0x2a4>)
 8000d40:	211e      	movs	r1, #30
 8000d42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	2b07      	cmp	r3, #7
 8000d50:	ddc2      	ble.n	8000cd8 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	3301      	adds	r3, #1
 8000d56:	61bb      	str	r3, [r7, #24]
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	ddb9      	ble.n	8000cd2 <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000d5e:	2338      	movs	r3, #56	; 0x38
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	e007      	b.n	8000d74 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000d64:	4a1e      	ldr	r2, [pc, #120]	; (8000de0 <setLEDs+0x2a4>)
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	2100      	movs	r1, #0
 8000d6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000d6e:	693b      	ldr	r3, [r7, #16]
 8000d70:	3301      	adds	r3, #1
 8000d72:	613b      	str	r3, [r7, #16]
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	2b69      	cmp	r3, #105	; 0x69
 8000d78:	ddf4      	ble.n	8000d64 <setLEDs+0x228>
			}
			break;
 8000d7a:	e064      	b.n	8000e46 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	e04e      	b.n	8000e20 <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	e045      	b.n	8000e14 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000d88:	4912      	ldr	r1, [pc, #72]	; (8000dd4 <setLEDs+0x298>)
 8000d8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	4413      	add	r3, r2
 8000d92:	68fa      	ldr	r2, [r7, #12]
 8000d94:	4413      	add	r3, r2
 8000d96:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d9a:	2180      	movs	r1, #128	; 0x80
 8000d9c:	68ba      	ldr	r2, [r7, #8]
 8000d9e:	fa41 f202 	asr.w	r2, r1, r2
 8000da2:	4013      	ands	r3, r2
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d01f      	beq.n	8000de8 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	00da      	lsls	r2, r3, #3
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	18d1      	adds	r1, r2, r3
 8000db0:	4a07      	ldr	r2, [pc, #28]	; (8000dd0 <setLEDs+0x294>)
 8000db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	4413      	add	r3, r2
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	440b      	add	r3, r1
 8000dc4:	3308      	adds	r3, #8
 8000dc6:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <setLEDs+0x2a8>)
 8000dc8:	213c      	movs	r1, #60	; 0x3c
 8000dca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000dce:	e01e      	b.n	8000e0e <setLEDs+0x2d2>
 8000dd0:	0801dfa8 	.word	0x0801dfa8
 8000dd4:	24000bd0 	.word	0x24000bd0
 8000dd8:	240002f0 	.word	0x240002f0
 8000ddc:	240005b8 	.word	0x240005b8
 8000de0:	24000880 	.word	0x24000880
 8000de4:	24000a28 	.word	0x24000a28
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	00da      	lsls	r2, r3, #3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	18d1      	adds	r1, r2, r3
 8000df0:	4a26      	ldr	r2, [pc, #152]	; (8000e8c <setLEDs+0x350>)
 8000df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	4413      	add	r3, r2
 8000df8:	685a      	ldr	r2, [r3, #4]
 8000dfa:	4613      	mov	r3, r2
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	4413      	add	r3, r2
 8000e00:	00db      	lsls	r3, r3, #3
 8000e02:	440b      	add	r3, r1
 8000e04:	3308      	adds	r3, #8
 8000e06:	4a22      	ldr	r2, [pc, #136]	; (8000e90 <setLEDs+0x354>)
 8000e08:	211e      	movs	r1, #30
 8000e0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	3301      	adds	r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	2b07      	cmp	r3, #7
 8000e18:	ddb6      	ble.n	8000d88 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3301      	adds	r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	ddad      	ble.n	8000d82 <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000e26:	2338      	movs	r3, #56	; 0x38
 8000e28:	607b      	str	r3, [r7, #4]
 8000e2a:	e007      	b.n	8000e3c <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000e2c:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <setLEDs+0x354>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2100      	movs	r1, #0
 8000e32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b69      	cmp	r3, #105	; 0x69
 8000e40:	ddf4      	ble.n	8000e2c <setLEDs+0x2f0>
			}
			break;
 8000e42:	e000      	b.n	8000e46 <setLEDs+0x30a>
		default:
			break;
 8000e44:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e48:	3301      	adds	r3, #1
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
 8000e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e4e:	2b0d      	cmp	r3, #13
 8000e50:	f77f ae7a 	ble.w	8000b48 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000e54:	23b2      	movs	r3, #178	; 0xb2
 8000e56:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <setLEDs+0x358>)
 8000e58:	210c      	movs	r1, #12
 8000e5a:	480f      	ldr	r0, [pc, #60]	; (8000e98 <setLEDs+0x35c>)
 8000e5c:	f00e f8b4 	bl	800efc8 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000e60:	23b2      	movs	r3, #178	; 0xb2
 8000e62:	4a0e      	ldr	r2, [pc, #56]	; (8000e9c <setLEDs+0x360>)
 8000e64:	2108      	movs	r1, #8
 8000e66:	480e      	ldr	r0, [pc, #56]	; (8000ea0 <setLEDs+0x364>)
 8000e68:	f00e f8ae 	bl	800efc8 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000e6c:	236a      	movs	r3, #106	; 0x6a
 8000e6e:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <setLEDs+0x368>)
 8000e70:	2104      	movs	r1, #4
 8000e72:	480d      	ldr	r0, [pc, #52]	; (8000ea8 <setLEDs+0x36c>)
 8000e74:	f00e f8a8 	bl	800efc8 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000e78:	236a      	movs	r3, #106	; 0x6a
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <setLEDs+0x354>)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	480a      	ldr	r0, [pc, #40]	; (8000ea8 <setLEDs+0x36c>)
 8000e80:	f00e f8a2 	bl	800efc8 <HAL_TIM_PWM_Start_DMA>

}
 8000e84:	bf00      	nop
 8000e86:	3738      	adds	r7, #56	; 0x38
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	0801dfa8 	.word	0x0801dfa8
 8000e90:	24000a28 	.word	0x24000a28
 8000e94:	240002f0 	.word	0x240002f0
 8000e98:	24001234 	.word	0x24001234
 8000e9c:	240005b8 	.word	0x240005b8
 8000ea0:	24001150 	.word	0x24001150
 8000ea4:	24000880 	.word	0x24000880
 8000ea8:	2400119c 	.word	0x2400119c

08000eac <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2102      	movs	r1, #2
 8000eb8:	482d      	ldr	r0, [pc, #180]	; (8000f70 <disarm+0xc4>)
 8000eba:	f007 f903 	bl	80080c4 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2102      	movs	r1, #2
 8000ec2:	482c      	ldr	r0, [pc, #176]	; (8000f74 <disarm+0xc8>)
 8000ec4:	f007 f8fe 	bl	80080c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ece:	482a      	ldr	r0, [pc, #168]	; (8000f78 <disarm+0xcc>)
 8000ed0:	f007 f8f8 	bl	80080c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000eda:	4827      	ldr	r0, [pc, #156]	; (8000f78 <disarm+0xcc>)
 8000edc:	f007 f8f2 	bl	80080c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ee6:	4824      	ldr	r0, [pc, #144]	; (8000f78 <disarm+0xcc>)
 8000ee8:	f007 f8ec 	bl	80080c4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2102      	movs	r1, #2
 8000ef0:	4822      	ldr	r0, [pc, #136]	; (8000f7c <disarm+0xd0>)
 8000ef2:	f007 f8e7 	bl	80080c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000efc:	4820      	ldr	r0, [pc, #128]	; (8000f80 <disarm+0xd4>)
 8000efe:	f007 f8e1 	bl	80080c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f08:	481d      	ldr	r0, [pc, #116]	; (8000f80 <disarm+0xd4>)
 8000f0a:	f007 f8db 	bl	80080c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f14:	481a      	ldr	r0, [pc, #104]	; (8000f80 <disarm+0xd4>)
 8000f16:	f007 f8d5 	bl	80080c4 <HAL_GPIO_WritePin>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000f1a:	210c      	movs	r1, #12
 8000f1c:	4819      	ldr	r0, [pc, #100]	; (8000f84 <disarm+0xd8>)
 8000f1e:	f00d ff37 	bl	800ed90 <HAL_TIM_PWM_Start>
  setServo(1, 0);
 8000f22:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8000f88 <disarm+0xdc>
 8000f26:	2001      	movs	r0, #1
 8000f28:	f7ff fdc0 	bl	8000aac <setServo>


  LED_Color_Data[7][0] = 255;
 8000f2c:	4b17      	ldr	r3, [pc, #92]	; (8000f8c <disarm+0xe0>)
 8000f2e:	22ff      	movs	r2, #255	; 0xff
 8000f30:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 8000f32:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <disarm+0xe0>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 8000f38:	4b14      	ldr	r3, [pc, #80]	; (8000f8c <disarm+0xe0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	65da      	str	r2, [r3, #92]	; 0x5c

  LED_Color_Data[2][0] = 255;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <disarm+0xe0>)
 8000f40:	22ff      	movs	r2, #255	; 0xff
 8000f42:	619a      	str	r2, [r3, #24]
  LED_Color_Data[2][1] = 0;
 8000f44:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <disarm+0xe0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	61da      	str	r2, [r3, #28]
  LED_Color_Data[2][2] = 0;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	; (8000f8c <disarm+0xe0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  setLEDs();
 8000f50:	f7ff fdf4 	bl	8000b3c <setLEDs>

  strcpy(state,"DISARMED");
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	490e      	ldr	r1, [pc, #56]	; (8000f90 <disarm+0xe4>)
 8000f58:	461a      	mov	r2, r3
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	cb03      	ldmia	r3!, {r0, r1}
 8000f5e:	6010      	str	r0, [r2, #0]
 8000f60:	6051      	str	r1, [r2, #4]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	7213      	strb	r3, [r2, #8]
  return 0;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	58020000 	.word	0x58020000
 8000f74:	58020400 	.word	0x58020400
 8000f78:	58021400 	.word	0x58021400
 8000f7c:	58021800 	.word	0x58021800
 8000f80:	58021000 	.word	0x58021000
 8000f84:	240011e8 	.word	0x240011e8
 8000f88:	00000000 	.word	0x00000000
 8000f8c:	24000bd0 	.word	0x24000bd0
 8000f90:	0801dea8 	.word	0x0801dea8

08000f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	f5ad 5d09 	sub.w	sp, sp, #8768	; 0x2240
 8000f9a:	b08c      	sub	sp, #48	; 0x30
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9e:	f002 f917 	bl	80031d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa2:	f000 f8d7 	bl	8001154 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000fa6:	f000 f94d 	bl	8001244 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000faa:	f000 fef9 	bl	8001da0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fae:	f000 fe97 	bl	8001ce0 <MX_DMA_Init>
  MX_SPI3_Init();
 8000fb2:	f000 fbcd 	bl	8001750 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8000fb6:	f000 fa5d 	bl	8001474 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8000fba:	f000 fe45 	bl	8001c48 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000fbe:	f000 f973 	bl	80012a8 <MX_ADC1_Init>
  MX_TIM4_Init();
 8000fc2:	f000 fcd7 	bl	8001974 <MX_TIM4_Init>
  MX_ADC3_Init();
 8000fc6:	f000 f9e7 	bl	8001398 <MX_ADC3_Init>
  MX_SPI2_Init();
 8000fca:	f000 fb6b 	bl	80016a4 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000fce:	f000 fab5 	bl	800153c <MX_I2C2_Init>
  MX_TIM2_Init();
 8000fd2:	f000 fc13 	bl	80017fc <MX_TIM2_Init>
  MX_TIM5_Init();
 8000fd6:	f000 fd49 	bl	8001a6c <MX_TIM5_Init>
  MX_TIM3_Init();
 8000fda:	f000 fc67 	bl	80018ac <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 8000fde:	f017 feab 	bl	8018d38 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000fe2:	f000 fb09 	bl	80015f8 <MX_SPI1_Init>
  MX_UART4_Init();
 8000fe6:	f000 fde3 	bl	8001bb0 <MX_UART4_Init>
  MX_FATFS_Init();
 8000fea:	f012 fcc3 	bl	8013974 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 8000fee:	f000 fae5 	bl	80015bc <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 8000ff2:	f000 fd95 	bl	8001b20 <MX_TIM13_Init>
  MX_TIM14_Init();
 8000ff6:	f000 fdb7 	bl	8001b68 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  char dummy[50];
  disarm(dummy);
 8000ffa:	f242 2338 	movw	r3, #8760	; 0x2238
 8000ffe:	443b      	add	r3, r7
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff53 	bl	8000eac <disarm>

  FATFS FatFs;
  FIL Fil;
  FRESULT FR_Status;
  FR_Status = f_mount(&FatFs, SDPath, 1);
 8001006:	4b4a      	ldr	r3, [pc, #296]	; (8001130 <main+0x19c>)
 8001008:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 800100c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001010:	443b      	add	r3, r7
 8001012:	2201      	movs	r2, #1
 8001014:	4947      	ldr	r1, [pc, #284]	; (8001134 <main+0x1a0>)
 8001016:	4618      	mov	r0, r3
 8001018:	f017 f882 	bl	8018120 <f_mount>
 800101c:	4603      	mov	r3, r0
 800101e:	f242 226f 	movw	r2, #8815	; 0x226f
 8001022:	443a      	add	r2, r7
 8001024:	7013      	strb	r3, [r2, #0]

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001026:	210c      	movs	r1, #12
 8001028:	4843      	ldr	r0, [pc, #268]	; (8001138 <main+0x1a4>)
 800102a:	f00d feb1 	bl	800ed90 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 800102e:	2201      	movs	r2, #1
 8001030:	2104      	movs	r1, #4
 8001032:	4842      	ldr	r0, [pc, #264]	; (800113c <main+0x1a8>)
 8001034:	f007 f846 	bl	80080c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001038:	2201      	movs	r2, #1
 800103a:	2108      	movs	r1, #8
 800103c:	483f      	ldr	r0, [pc, #252]	; (800113c <main+0x1a8>)
 800103e:	f007 f841 	bl	80080c4 <HAL_GPIO_WritePin>


  FR_Status = f_open(&Fil, "MyTextFile.txt", FA_CREATE_NEW);
 8001042:	4b3f      	ldr	r3, [pc, #252]	; (8001140 <main+0x1ac>)
 8001044:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001048:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800104c:	443b      	add	r3, r7
 800104e:	2204      	movs	r2, #4
 8001050:	493c      	ldr	r1, [pc, #240]	; (8001144 <main+0x1b0>)
 8001052:	4618      	mov	r0, r3
 8001054:	f017 f8aa 	bl	80181ac <f_open>
 8001058:	4603      	mov	r3, r0
 800105a:	f242 226f 	movw	r2, #8815	; 0x226f
 800105e:	443a      	add	r2, r7
 8001060:	7013      	strb	r3, [r2, #0]
  f_close(&Fil);
 8001062:	4b37      	ldr	r3, [pc, #220]	; (8001140 <main+0x1ac>)
 8001064:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001068:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800106c:	443b      	add	r3, r7
 800106e:	4618      	mov	r0, r3
 8001070:	f017 fc7a 	bl	8018968 <f_close>


  while(1){
	  HAL_ADC_Start(&hadc1); // start the adc
 8001074:	4834      	ldr	r0, [pc, #208]	; (8001148 <main+0x1b4>)
 8001076:	f002 fe6b 	bl	8003d50 <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc1, 100); // poll for conversion
 800107a:	2164      	movs	r1, #100	; 0x64
 800107c:	4832      	ldr	r0, [pc, #200]	; (8001148 <main+0x1b4>)
 800107e:	f002 ff65 	bl	8003f4c <HAL_ADC_PollForConversion>

	  uint16_t adc_val = HAL_ADC_GetValue(&hadc1); // get the adc value
 8001082:	4831      	ldr	r0, [pc, #196]	; (8001148 <main+0x1b4>)
 8001084:	f003 f856 	bl	8004134 <HAL_ADC_GetValue>
 8001088:	4603      	mov	r3, r0
 800108a:	f242 226c 	movw	r2, #8812	; 0x226c
 800108e:	443a      	add	r2, r7
 8001090:	8013      	strh	r3, [r2, #0]

	  char debug_data[100];
	  sprintf(debug_data, "%d, %d\n",HAL_GetTick(), adc_val);
 8001092:	f002 f923 	bl	80032dc <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	f242 236c 	movw	r3, #8812	; 0x226c
 800109c:	443b      	add	r3, r7
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	482a      	ldr	r0, [pc, #168]	; (800114c <main+0x1b8>)
 80010a2:	f242 2170 	movw	r1, #8816	; 0x2270
 80010a6:	4401      	add	r1, r0
 80010a8:	19c8      	adds	r0, r1, r7
 80010aa:	4929      	ldr	r1, [pc, #164]	; (8001150 <main+0x1bc>)
 80010ac:	f019 f9e6 	bl	801a47c <siprintf>
	  CDC_Transmit_HS(debug_data, strlen(debug_data));
 80010b0:	4b26      	ldr	r3, [pc, #152]	; (800114c <main+0x1b8>)
 80010b2:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80010b6:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80010ba:	443b      	add	r3, r7
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff f927 	bl	8000310 <strlen>
 80010c2:	4602      	mov	r2, r0
 80010c4:	4b21      	ldr	r3, [pc, #132]	; (800114c <main+0x1b8>)
 80010c6:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80010ca:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80010ce:	443b      	add	r3, r7
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f017 fef0 	bl	8018eb8 <CDC_Transmit_HS>
	  FR_Status = f_open(&Fil, "MyTextFile.txt", FA_OPEN_APPEND | FA_WRITE);
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <main+0x1ac>)
 80010da:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 80010de:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80010e2:	443b      	add	r3, r7
 80010e4:	2232      	movs	r2, #50	; 0x32
 80010e6:	4917      	ldr	r1, [pc, #92]	; (8001144 <main+0x1b0>)
 80010e8:	4618      	mov	r0, r3
 80010ea:	f017 f85f 	bl	80181ac <f_open>
 80010ee:	4603      	mov	r3, r0
 80010f0:	f242 226f 	movw	r2, #8815	; 0x226f
 80010f4:	443a      	add	r2, r7
 80010f6:	7013      	strb	r3, [r2, #0]
	  f_puts(debug_data, &Fil);
 80010f8:	4a11      	ldr	r2, [pc, #68]	; (8001140 <main+0x1ac>)
 80010fa:	f242 2370 	movw	r3, #8816	; 0x2270
 80010fe:	4413      	add	r3, r2
 8001100:	19da      	adds	r2, r3, r7
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <main+0x1b8>)
 8001104:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 8001108:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800110c:	443b      	add	r3, r7
 800110e:	4611      	mov	r1, r2
 8001110:	4618      	mov	r0, r3
 8001112:	f017 fcca 	bl	8018aaa <f_puts>
	  f_close(&Fil);
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <main+0x1ac>)
 8001118:	f503 5309 	add.w	r3, r3, #8768	; 0x2240
 800111c:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8001120:	443b      	add	r3, r7
 8001122:	4618      	mov	r0, r3
 8001124:	f017 fc20 	bl	8018968 <f_close>

	  HAL_ADC_Stop(&hadc1); // stop adc
 8001128:	4807      	ldr	r0, [pc, #28]	; (8001148 <main+0x1b4>)
 800112a:	f002 fedb 	bl	8003ee4 <HAL_ADC_Stop>
  while(1){
 800112e:	e7a1      	b.n	8001074 <main+0xe0>
 8001130:	ffffef90 	.word	0xffffef90
 8001134:	240016a4 	.word	0x240016a4
 8001138:	240011e8 	.word	0x240011e8
 800113c:	58021800 	.word	0x58021800
 8001140:	ffffdf60 	.word	0xffffdf60
 8001144:	0801debc 	.word	0x0801debc
 8001148:	24000c78 	.word	0x24000c78
 800114c:	ffffdd90 	.word	0xffffdd90
 8001150:	0801decc 	.word	0x0801decc

08001154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b09c      	sub	sp, #112	; 0x70
 8001158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115e:	224c      	movs	r2, #76	; 0x4c
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f018 fb34 	bl	80197d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2220      	movs	r2, #32
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f018 fb2e 	bl	80197d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001174:	2002      	movs	r0, #2
 8001176:	f008 fbb9 	bl	80098ec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	4b30      	ldr	r3, [pc, #192]	; (8001240 <SystemClock_Config+0xec>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001186:	4a2e      	ldr	r2, [pc, #184]	; (8001240 <SystemClock_Config+0xec>)
 8001188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800118c:	6193      	str	r3, [r2, #24]
 800118e:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <SystemClock_Config+0xec>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800119a:	bf00      	nop
 800119c:	4b28      	ldr	r3, [pc, #160]	; (8001240 <SystemClock_Config+0xec>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011a8:	d1f8      	bne.n	800119c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80011aa:	2322      	movs	r3, #34	; 0x22
 80011ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80011b2:	2340      	movs	r3, #64	; 0x40
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011b6:	2301      	movs	r3, #1
 80011b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ba:	2302      	movs	r3, #2
 80011bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011be:	2300      	movs	r3, #0
 80011c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011c2:	2304      	movs	r3, #4
 80011c4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80011c6:	230c      	movs	r3, #12
 80011c8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80011ce:	2303      	movs	r3, #3
 80011d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011d2:	2302      	movs	r3, #2
 80011d4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011d6:	230c      	movs	r3, #12
 80011d8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011da:	2300      	movs	r3, #0
 80011dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e6:	4618      	mov	r0, r3
 80011e8:	f008 fbca 	bl	8009980 <HAL_RCC_OscConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80011f2:	f000 ff39 	bl	8002068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f6:	233f      	movs	r3, #63	; 0x3f
 80011f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011fa:	2303      	movs	r3, #3
 80011fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011fe:	2300      	movs	r3, #0
 8001200:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001202:	2308      	movs	r3, #8
 8001204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001206:	2340      	movs	r3, #64	; 0x40
 8001208:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800120a:	2340      	movs	r3, #64	; 0x40
 800120c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800120e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001212:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001214:	2340      	movs	r3, #64	; 0x40
 8001216:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2101      	movs	r1, #1
 800121c:	4618      	mov	r0, r3
 800121e:	f008 ff89 	bl	800a134 <HAL_RCC_ClockConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001228:	f000 ff1e 	bl	8002068 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800122c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001230:	2100      	movs	r1, #0
 8001232:	2000      	movs	r0, #0
 8001234:	f009 f934 	bl	800a4a0 <HAL_RCC_MCOConfig>
}
 8001238:	bf00      	nop
 800123a:	3770      	adds	r7, #112	; 0x70
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	58024800 	.word	0x58024800

08001244 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b0ae      	sub	sp, #184	; 0xb8
 8001248:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800124a:	463b      	mov	r3, r7
 800124c:	22b8      	movs	r2, #184	; 0xb8
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f018 fabd 	bl	80197d0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001256:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001262:	2304      	movs	r3, #4
 8001264:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001266:	230c      	movs	r3, #12
 8001268:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800126a:	2304      	movs	r3, #4
 800126c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800126e:	2302      	movs	r3, #2
 8001270:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001272:	2302      	movs	r3, #2
 8001274:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001276:	23c0      	movs	r3, #192	; 0xc0
 8001278:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800127a:	2300      	movs	r3, #0
 800127c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001282:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001286:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001288:	2300      	movs	r3, #0
 800128a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800128e:	463b      	mov	r3, r7
 8001290:	4618      	mov	r0, r3
 8001292:	f009 fb45 	bl	800a920 <HAL_RCCEx_PeriphCLKConfig>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 800129c:	f000 fee4 	bl	8002068 <Error_Handler>
  }
}
 80012a0:	bf00      	nop
 80012a2:	37b8      	adds	r7, #184	; 0xb8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	; 0x30
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80012ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80012ba:	463b      	mov	r3, r7
 80012bc:	2224      	movs	r2, #36	; 0x24
 80012be:	2100      	movs	r1, #0
 80012c0:	4618      	mov	r0, r3
 80012c2:	f018 fa85 	bl	80197d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012c6:	4b31      	ldr	r3, [pc, #196]	; (800138c <MX_ADC1_Init+0xe4>)
 80012c8:	4a31      	ldr	r2, [pc, #196]	; (8001390 <MX_ADC1_Init+0xe8>)
 80012ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80012cc:	4b2f      	ldr	r3, [pc, #188]	; (800138c <MX_ADC1_Init+0xe4>)
 80012ce:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80012d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80012d4:	4b2d      	ldr	r3, [pc, #180]	; (800138c <MX_ADC1_Init+0xe4>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012da:	4b2c      	ldr	r3, [pc, #176]	; (800138c <MX_ADC1_Init+0xe4>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012e0:	4b2a      	ldr	r3, [pc, #168]	; (800138c <MX_ADC1_Init+0xe4>)
 80012e2:	2204      	movs	r2, #4
 80012e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <MX_ADC1_Init+0xe4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012ec:	4b27      	ldr	r3, [pc, #156]	; (800138c <MX_ADC1_Init+0xe4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <MX_ADC1_Init+0xe4>)
 80012f4:	2201      	movs	r2, #1
 80012f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012f8:	4b24      	ldr	r3, [pc, #144]	; (800138c <MX_ADC1_Init+0xe4>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001300:	4b22      	ldr	r3, [pc, #136]	; (800138c <MX_ADC1_Init+0xe4>)
 8001302:	2200      	movs	r2, #0
 8001304:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001306:	4b21      	ldr	r3, [pc, #132]	; (800138c <MX_ADC1_Init+0xe4>)
 8001308:	2200      	movs	r2, #0
 800130a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <MX_ADC1_Init+0xe4>)
 800130e:	2200      	movs	r2, #0
 8001310:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001312:	4b1e      	ldr	r3, [pc, #120]	; (800138c <MX_ADC1_Init+0xe4>)
 8001314:	2200      	movs	r2, #0
 8001316:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001318:	4b1c      	ldr	r3, [pc, #112]	; (800138c <MX_ADC1_Init+0xe4>)
 800131a:	2200      	movs	r2, #0
 800131c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800131e:	4b1b      	ldr	r3, [pc, #108]	; (800138c <MX_ADC1_Init+0xe4>)
 8001320:	2200      	movs	r2, #0
 8001322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001326:	4819      	ldr	r0, [pc, #100]	; (800138c <MX_ADC1_Init+0xe4>)
 8001328:	f002 fb0a 	bl	8003940 <HAL_ADC_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001332:	f000 fe99 	bl	8002068 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001336:	2300      	movs	r3, #0
 8001338:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800133e:	4619      	mov	r1, r3
 8001340:	4812      	ldr	r0, [pc, #72]	; (800138c <MX_ADC1_Init+0xe4>)
 8001342:	f003 feeb 	bl	800511c <HAL_ADCEx_MultiModeConfigChannel>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800134c:	f000 fe8c 	bl	8002068 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <MX_ADC1_Init+0xec>)
 8001352:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001354:	2306      	movs	r3, #6
 8001356:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001358:	2303      	movs	r3, #3
 800135a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800135c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001360:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001362:	2304      	movs	r3, #4
 8001364:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001370:	463b      	mov	r3, r7
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_ADC1_Init+0xe4>)
 8001376:	f002 feeb 	bl	8004150 <HAL_ADC_ConfigChannel>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001380:	f000 fe72 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	3730      	adds	r7, #48	; 0x30
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	24000c78 	.word	0x24000c78
 8001390:	40022000 	.word	0x40022000
 8001394:	3ac04000 	.word	0x3ac04000

08001398 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b08a      	sub	sp, #40	; 0x28
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800139e:	1d3b      	adds	r3, r7, #4
 80013a0:	2224      	movs	r2, #36	; 0x24
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f018 fa13 	bl	80197d0 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013aa:	4b2f      	ldr	r3, [pc, #188]	; (8001468 <MX_ADC3_Init+0xd0>)
 80013ac:	4a2f      	ldr	r2, [pc, #188]	; (800146c <MX_ADC3_Init+0xd4>)
 80013ae:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80013b0:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <MX_ADC3_Init+0xd0>)
 80013b2:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80013b6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013b8:	4b2b      	ldr	r3, [pc, #172]	; (8001468 <MX_ADC3_Init+0xd0>)
 80013ba:	2208      	movs	r2, #8
 80013bc:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 80013be:	4b2a      	ldr	r3, [pc, #168]	; (8001468 <MX_ADC3_Init+0xd0>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013c4:	4b28      	ldr	r3, [pc, #160]	; (8001468 <MX_ADC3_Init+0xd0>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ca:	4b27      	ldr	r3, [pc, #156]	; (8001468 <MX_ADC3_Init+0xd0>)
 80013cc:	2204      	movs	r2, #4
 80013ce:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80013d0:	4b25      	ldr	r3, [pc, #148]	; (8001468 <MX_ADC3_Init+0xd0>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80013d6:	4b24      	ldr	r3, [pc, #144]	; (8001468 <MX_ADC3_Init+0xd0>)
 80013d8:	2200      	movs	r2, #0
 80013da:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 80013dc:	4b22      	ldr	r3, [pc, #136]	; (8001468 <MX_ADC3_Init+0xd0>)
 80013de:	2201      	movs	r2, #1
 80013e0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013e2:	4b21      	ldr	r3, [pc, #132]	; (8001468 <MX_ADC3_Init+0xd0>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <MX_ADC3_Init+0xd0>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013f0:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <MX_ADC3_Init+0xd0>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <MX_ADC3_Init+0xd0>)
 80013f8:	2201      	movs	r2, #1
 80013fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 80013fe:	4b1a      	ldr	r3, [pc, #104]	; (8001468 <MX_ADC3_Init+0xd0>)
 8001400:	2200      	movs	r2, #0
 8001402:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <MX_ADC3_Init+0xd0>)
 8001406:	2200      	movs	r2, #0
 8001408:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800140a:	4b17      	ldr	r3, [pc, #92]	; (8001468 <MX_ADC3_Init+0xd0>)
 800140c:	2200      	movs	r2, #0
 800140e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <MX_ADC3_Init+0xd0>)
 8001412:	2200      	movs	r2, #0
 8001414:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001416:	4b14      	ldr	r3, [pc, #80]	; (8001468 <MX_ADC3_Init+0xd0>)
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800141e:	4812      	ldr	r0, [pc, #72]	; (8001468 <MX_ADC3_Init+0xd0>)
 8001420:	f002 fa8e 	bl	8003940 <HAL_ADC_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 800142a:	f000 fe1d 	bl	8002068 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800142e:	4b10      	ldr	r3, [pc, #64]	; (8001470 <MX_ADC3_Init+0xd8>)
 8001430:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001432:	2306      	movs	r3, #6
 8001434:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001436:	2300      	movs	r3, #0
 8001438:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800143a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800143e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001440:	2304      	movs	r3, #4
 8001442:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001448:	2300      	movs	r3, #0
 800144a:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_ADC3_Init+0xd0>)
 8001452:	f002 fe7d 	bl	8004150 <HAL_ADC_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 800145c:	f000 fe04 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001460:	bf00      	nop
 8001462:	3728      	adds	r7, #40	; 0x28
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}
 8001468:	24000ce8 	.word	0x24000ce8
 800146c:	58026000 	.word	0x58026000
 8001470:	04300002 	.word	0x04300002

08001474 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001478:	4b2e      	ldr	r3, [pc, #184]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 800147a:	4a2f      	ldr	r2, [pc, #188]	; (8001538 <MX_FDCAN3_Init+0xc4>)
 800147c:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001484:	4b2b      	ldr	r3, [pc, #172]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 800148a:	4b2a      	ldr	r3, [pc, #168]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 800148c:	2200      	movs	r2, #0
 800148e:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001490:	4b28      	ldr	r3, [pc, #160]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 8001492:	2200      	movs	r2, #0
 8001494:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001496:	4b27      	ldr	r3, [pc, #156]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 8001498:	2200      	movs	r2, #0
 800149a:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 800149c:	4b25      	ldr	r3, [pc, #148]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 800149e:	2210      	movs	r2, #16
 80014a0:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 80014a2:	4b24      	ldr	r3, [pc, #144]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 80014a8:	4b22      	ldr	r3, [pc, #136]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 80014aa:	2202      	movs	r2, #2
 80014ac:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 80014ae:	4b21      	ldr	r3, [pc, #132]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 80014b0:	2202      	movs	r2, #2
 80014b2:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 80014b4:	4b1f      	ldr	r3, [pc, #124]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 80014b6:	2201      	movs	r2, #1
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 80014ba:	4b1e      	ldr	r3, [pc, #120]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 80014bc:	2201      	movs	r2, #1
 80014be:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 80014c0:	4b1c      	ldr	r3, [pc, #112]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 80014c2:	2201      	movs	r2, #1
 80014c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 80014c6:	4b1b      	ldr	r3, [pc, #108]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 80014cc:	4b19      	ldr	r3, [pc, #100]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 80014d2:	4b18      	ldr	r3, [pc, #96]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 80014da:	2200      	movs	r2, #0
 80014dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 80014de:	4b15      	ldr	r3, [pc, #84]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 80014e6:	2204      	movs	r2, #4
 80014e8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80014f0:	4b10      	ldr	r3, [pc, #64]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 80014f2:	2204      	movs	r2, #4
 80014f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80014fc:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 80014fe:	2204      	movs	r2, #4
 8001500:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 8001504:	2200      	movs	r2, #0
 8001506:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001508:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 800150a:	2200      	movs	r2, #0
 800150c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 8001510:	2200      	movs	r2, #0
 8001512:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001514:	4b07      	ldr	r3, [pc, #28]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 8001516:	2200      	movs	r2, #0
 8001518:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 800151c:	2204      	movs	r2, #4
 800151e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <MX_FDCAN3_Init+0xc0>)
 8001522:	f006 f8c3 	bl	80076ac <HAL_FDCAN_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 800152c:	f000 fd9c 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}
 8001534:	24000e48 	.word	0x24000e48
 8001538:	4000d400 	.word	0x4000d400

0800153c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001540:	4b1b      	ldr	r3, [pc, #108]	; (80015b0 <MX_I2C2_Init+0x74>)
 8001542:	4a1c      	ldr	r2, [pc, #112]	; (80015b4 <MX_I2C2_Init+0x78>)
 8001544:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001546:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <MX_I2C2_Init+0x74>)
 8001548:	4a1b      	ldr	r2, [pc, #108]	; (80015b8 <MX_I2C2_Init+0x7c>)
 800154a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800154c:	4b18      	ldr	r3, [pc, #96]	; (80015b0 <MX_I2C2_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001552:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <MX_I2C2_Init+0x74>)
 8001554:	2201      	movs	r2, #1
 8001556:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001558:	4b15      	ldr	r3, [pc, #84]	; (80015b0 <MX_I2C2_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <MX_I2C2_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001564:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <MX_I2C2_Init+0x74>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <MX_I2C2_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001570:	4b0f      	ldr	r3, [pc, #60]	; (80015b0 <MX_I2C2_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001576:	480e      	ldr	r0, [pc, #56]	; (80015b0 <MX_I2C2_Init+0x74>)
 8001578:	f006 fdbe 	bl	80080f8 <HAL_I2C_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001582:	f000 fd71 	bl	8002068 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001586:	2100      	movs	r1, #0
 8001588:	4809      	ldr	r0, [pc, #36]	; (80015b0 <MX_I2C2_Init+0x74>)
 800158a:	f006 fe5f 	bl	800824c <HAL_I2CEx_ConfigAnalogFilter>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001594:	f000 fd68 	bl	8002068 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001598:	2100      	movs	r1, #0
 800159a:	4805      	ldr	r0, [pc, #20]	; (80015b0 <MX_I2C2_Init+0x74>)
 800159c:	f006 fea1 	bl	80082e2 <HAL_I2CEx_ConfigDigitalFilter>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80015a6:	f000 fd5f 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	24000ee8 	.word	0x24000ee8
 80015b4:	40005800 	.word	0x40005800
 80015b8:	20303e5d 	.word	0x20303e5d

080015bc <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <MX_SDMMC2_SD_Init+0x34>)
 80015c2:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <MX_SDMMC2_SD_Init+0x38>)
 80015c4:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <MX_SDMMC2_SD_Init+0x34>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <MX_SDMMC2_SD_Init+0x34>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <MX_SDMMC2_SD_Init+0x34>)
 80015d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015d8:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80015da:	4b05      	ldr	r3, [pc, #20]	; (80015f0 <MX_SDMMC2_SD_Init+0x34>)
 80015dc:	2200      	movs	r2, #0
 80015de:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 8;
 80015e0:	4b03      	ldr	r3, [pc, #12]	; (80015f0 <MX_SDMMC2_SD_Init+0x34>)
 80015e2:	2208      	movs	r2, #8
 80015e4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	24000f3c 	.word	0x24000f3c
 80015f4:	48022400 	.word	0x48022400

080015f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015fc:	4b27      	ldr	r3, [pc, #156]	; (800169c <MX_SPI1_Init+0xa4>)
 80015fe:	4a28      	ldr	r2, [pc, #160]	; (80016a0 <MX_SPI1_Init+0xa8>)
 8001600:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001602:	4b26      	ldr	r3, [pc, #152]	; (800169c <MX_SPI1_Init+0xa4>)
 8001604:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001608:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800160a:	4b24      	ldr	r3, [pc, #144]	; (800169c <MX_SPI1_Init+0xa4>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001610:	4b22      	ldr	r3, [pc, #136]	; (800169c <MX_SPI1_Init+0xa4>)
 8001612:	2207      	movs	r2, #7
 8001614:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001616:	4b21      	ldr	r3, [pc, #132]	; (800169c <MX_SPI1_Init+0xa4>)
 8001618:	2200      	movs	r2, #0
 800161a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800161c:	4b1f      	ldr	r3, [pc, #124]	; (800169c <MX_SPI1_Init+0xa4>)
 800161e:	2200      	movs	r2, #0
 8001620:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001622:	4b1e      	ldr	r3, [pc, #120]	; (800169c <MX_SPI1_Init+0xa4>)
 8001624:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001628:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800162a:	4b1c      	ldr	r3, [pc, #112]	; (800169c <MX_SPI1_Init+0xa4>)
 800162c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001630:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001632:	4b1a      	ldr	r3, [pc, #104]	; (800169c <MX_SPI1_Init+0xa4>)
 8001634:	2200      	movs	r2, #0
 8001636:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <MX_SPI1_Init+0xa4>)
 800163a:	2200      	movs	r2, #0
 800163c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800163e:	4b17      	ldr	r3, [pc, #92]	; (800169c <MX_SPI1_Init+0xa4>)
 8001640:	2200      	movs	r2, #0
 8001642:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001644:	4b15      	ldr	r3, [pc, #84]	; (800169c <MX_SPI1_Init+0xa4>)
 8001646:	2200      	movs	r2, #0
 8001648:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800164a:	4b14      	ldr	r3, [pc, #80]	; (800169c <MX_SPI1_Init+0xa4>)
 800164c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001650:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001652:	4b12      	ldr	r3, [pc, #72]	; (800169c <MX_SPI1_Init+0xa4>)
 8001654:	2200      	movs	r2, #0
 8001656:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001658:	4b10      	ldr	r3, [pc, #64]	; (800169c <MX_SPI1_Init+0xa4>)
 800165a:	2200      	movs	r2, #0
 800165c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800165e:	4b0f      	ldr	r3, [pc, #60]	; (800169c <MX_SPI1_Init+0xa4>)
 8001660:	2200      	movs	r2, #0
 8001662:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001664:	4b0d      	ldr	r3, [pc, #52]	; (800169c <MX_SPI1_Init+0xa4>)
 8001666:	2200      	movs	r2, #0
 8001668:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <MX_SPI1_Init+0xa4>)
 800166c:	2200      	movs	r2, #0
 800166e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001670:	4b0a      	ldr	r3, [pc, #40]	; (800169c <MX_SPI1_Init+0xa4>)
 8001672:	2200      	movs	r2, #0
 8001674:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <MX_SPI1_Init+0xa4>)
 8001678:	2200      	movs	r2, #0
 800167a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <MX_SPI1_Init+0xa4>)
 800167e:	2200      	movs	r2, #0
 8001680:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001682:	4b06      	ldr	r3, [pc, #24]	; (800169c <MX_SPI1_Init+0xa4>)
 8001684:	2200      	movs	r2, #0
 8001686:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001688:	4804      	ldr	r0, [pc, #16]	; (800169c <MX_SPI1_Init+0xa4>)
 800168a:	f00d f993 	bl	800e9b4 <HAL_SPI_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001694:	f000 fce8 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	bd80      	pop	{r7, pc}
 800169c:	24000fb8 	.word	0x24000fb8
 80016a0:	40013000 	.word	0x40013000

080016a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016a8:	4b27      	ldr	r3, [pc, #156]	; (8001748 <MX_SPI2_Init+0xa4>)
 80016aa:	4a28      	ldr	r2, [pc, #160]	; (800174c <MX_SPI2_Init+0xa8>)
 80016ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <MX_SPI2_Init+0xa4>)
 80016b0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80016b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016b6:	4b24      	ldr	r3, [pc, #144]	; (8001748 <MX_SPI2_Init+0xa4>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016bc:	4b22      	ldr	r3, [pc, #136]	; (8001748 <MX_SPI2_Init+0xa4>)
 80016be:	2207      	movs	r2, #7
 80016c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016c2:	4b21      	ldr	r3, [pc, #132]	; (8001748 <MX_SPI2_Init+0xa4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016c8:	4b1f      	ldr	r3, [pc, #124]	; (8001748 <MX_SPI2_Init+0xa4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016ce:	4b1e      	ldr	r3, [pc, #120]	; (8001748 <MX_SPI2_Init+0xa4>)
 80016d0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80016d6:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <MX_SPI2_Init+0xa4>)
 80016d8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80016dc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <MX_SPI2_Init+0xa4>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <MX_SPI2_Init+0xa4>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <MX_SPI2_Init+0xa4>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80016f0:	4b15      	ldr	r3, [pc, #84]	; (8001748 <MX_SPI2_Init+0xa4>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016f6:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_SPI2_Init+0xa4>)
 80016f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016fc:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016fe:	4b12      	ldr	r3, [pc, #72]	; (8001748 <MX_SPI2_Init+0xa4>)
 8001700:	2200      	movs	r2, #0
 8001702:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001704:	4b10      	ldr	r3, [pc, #64]	; (8001748 <MX_SPI2_Init+0xa4>)
 8001706:	2200      	movs	r2, #0
 8001708:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_SPI2_Init+0xa4>)
 800170c:	2200      	movs	r2, #0
 800170e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001710:	4b0d      	ldr	r3, [pc, #52]	; (8001748 <MX_SPI2_Init+0xa4>)
 8001712:	2200      	movs	r2, #0
 8001714:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001716:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_SPI2_Init+0xa4>)
 8001718:	2200      	movs	r2, #0
 800171a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800171c:	4b0a      	ldr	r3, [pc, #40]	; (8001748 <MX_SPI2_Init+0xa4>)
 800171e:	2200      	movs	r2, #0
 8001720:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001722:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_SPI2_Init+0xa4>)
 8001724:	2200      	movs	r2, #0
 8001726:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <MX_SPI2_Init+0xa4>)
 800172a:	2200      	movs	r2, #0
 800172c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_SPI2_Init+0xa4>)
 8001730:	2200      	movs	r2, #0
 8001732:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001734:	4804      	ldr	r0, [pc, #16]	; (8001748 <MX_SPI2_Init+0xa4>)
 8001736:	f00d f93d 	bl	800e9b4 <HAL_SPI_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001740:	f000 fc92 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	bd80      	pop	{r7, pc}
 8001748:	24001040 	.word	0x24001040
 800174c:	40003800 	.word	0x40003800

08001750 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <MX_SPI3_Init+0xa4>)
 8001756:	4a28      	ldr	r2, [pc, #160]	; (80017f8 <MX_SPI3_Init+0xa8>)
 8001758:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800175a:	4b26      	ldr	r3, [pc, #152]	; (80017f4 <MX_SPI3_Init+0xa4>)
 800175c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001760:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <MX_SPI3_Init+0xa4>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001768:	4b22      	ldr	r3, [pc, #136]	; (80017f4 <MX_SPI3_Init+0xa4>)
 800176a:	2207      	movs	r2, #7
 800176c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <MX_SPI3_Init+0xa4>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <MX_SPI3_Init+0xa4>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800177a:	4b1e      	ldr	r3, [pc, #120]	; (80017f4 <MX_SPI3_Init+0xa4>)
 800177c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001780:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <MX_SPI3_Init+0xa4>)
 8001784:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001788:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <MX_SPI3_Init+0xa4>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001790:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <MX_SPI3_Init+0xa4>)
 8001792:	2200      	movs	r2, #0
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <MX_SPI3_Init+0xa4>)
 8001798:	2200      	movs	r2, #0
 800179a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <MX_SPI3_Init+0xa4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_SPI3_Init+0xa4>)
 80017a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80017aa:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MX_SPI3_Init+0xa4>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80017b0:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <MX_SPI3_Init+0xa4>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_SPI3_Init+0xa4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80017bc:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <MX_SPI3_Init+0xa4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <MX_SPI3_Init+0xa4>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <MX_SPI3_Init+0xa4>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_SPI3_Init+0xa4>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <MX_SPI3_Init+0xa4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <MX_SPI3_Init+0xa4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80017e0:	4804      	ldr	r0, [pc, #16]	; (80017f4 <MX_SPI3_Init+0xa4>)
 80017e2:	f00d f8e7 	bl	800e9b4 <HAL_SPI_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80017ec:	f000 fc3c 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	240010c8 	.word	0x240010c8
 80017f8:	40003c00 	.word	0x40003c00

080017fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001802:	f107 031c 	add.w	r3, r7, #28
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800180e:	463b      	mov	r3, r7
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
 800181c:	615a      	str	r2, [r3, #20]
 800181e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001820:	4b21      	ldr	r3, [pc, #132]	; (80018a8 <MX_TIM2_Init+0xac>)
 8001822:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001826:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001828:	4b1f      	ldr	r3, [pc, #124]	; (80018a8 <MX_TIM2_Init+0xac>)
 800182a:	2200      	movs	r2, #0
 800182c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800182e:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <MX_TIM2_Init+0xac>)
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8001834:	4b1c      	ldr	r3, [pc, #112]	; (80018a8 <MX_TIM2_Init+0xac>)
 8001836:	225a      	movs	r2, #90	; 0x5a
 8001838:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183a:	4b1b      	ldr	r3, [pc, #108]	; (80018a8 <MX_TIM2_Init+0xac>)
 800183c:	2200      	movs	r2, #0
 800183e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <MX_TIM2_Init+0xac>)
 8001842:	2200      	movs	r2, #0
 8001844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001846:	4818      	ldr	r0, [pc, #96]	; (80018a8 <MX_TIM2_Init+0xac>)
 8001848:	f00d fa4a 	bl	800ece0 <HAL_TIM_PWM_Init>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001852:	f000 fc09 	bl	8002068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	4619      	mov	r1, r3
 8001864:	4810      	ldr	r0, [pc, #64]	; (80018a8 <MX_TIM2_Init+0xac>)
 8001866:	f00e fcd1 	bl	801020c <HAL_TIMEx_MasterConfigSynchronization>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001870:	f000 fbfa 	bl	8002068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001874:	2360      	movs	r3, #96	; 0x60
 8001876:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800187c:	2300      	movs	r3, #0
 800187e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001884:	463b      	mov	r3, r7
 8001886:	2208      	movs	r2, #8
 8001888:	4619      	mov	r1, r3
 800188a:	4807      	ldr	r0, [pc, #28]	; (80018a8 <MX_TIM2_Init+0xac>)
 800188c:	f00d fef0 	bl	800f670 <HAL_TIM_PWM_ConfigChannel>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001896:	f000 fbe7 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800189a:	4803      	ldr	r0, [pc, #12]	; (80018a8 <MX_TIM2_Init+0xac>)
 800189c:	f001 f91a 	bl	8002ad4 <HAL_TIM_MspPostInit>

}
 80018a0:	bf00      	nop
 80018a2:	3728      	adds	r7, #40	; 0x28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	24001150 	.word	0x24001150

080018ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b2:	f107 031c 	add.w	r3, r7, #28
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018be:	463b      	mov	r3, r7
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]
 80018c4:	605a      	str	r2, [r3, #4]
 80018c6:	609a      	str	r2, [r3, #8]
 80018c8:	60da      	str	r2, [r3, #12]
 80018ca:	611a      	str	r2, [r3, #16]
 80018cc:	615a      	str	r2, [r3, #20]
 80018ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018d0:	4b26      	ldr	r3, [pc, #152]	; (800196c <MX_TIM3_Init+0xc0>)
 80018d2:	4a27      	ldr	r2, [pc, #156]	; (8001970 <MX_TIM3_Init+0xc4>)
 80018d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80018d6:	4b25      	ldr	r3, [pc, #148]	; (800196c <MX_TIM3_Init+0xc0>)
 80018d8:	2200      	movs	r2, #0
 80018da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018dc:	4b23      	ldr	r3, [pc, #140]	; (800196c <MX_TIM3_Init+0xc0>)
 80018de:	2200      	movs	r2, #0
 80018e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 80018e2:	4b22      	ldr	r3, [pc, #136]	; (800196c <MX_TIM3_Init+0xc0>)
 80018e4:	225a      	movs	r2, #90	; 0x5a
 80018e6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e8:	4b20      	ldr	r3, [pc, #128]	; (800196c <MX_TIM3_Init+0xc0>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ee:	4b1f      	ldr	r3, [pc, #124]	; (800196c <MX_TIM3_Init+0xc0>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018f4:	481d      	ldr	r0, [pc, #116]	; (800196c <MX_TIM3_Init+0xc0>)
 80018f6:	f00d f9f3 	bl	800ece0 <HAL_TIM_PWM_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001900:	f000 fbb2 	bl	8002068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001904:	2300      	movs	r3, #0
 8001906:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	4619      	mov	r1, r3
 8001912:	4816      	ldr	r0, [pc, #88]	; (800196c <MX_TIM3_Init+0xc0>)
 8001914:	f00e fc7a 	bl	801020c <HAL_TIMEx_MasterConfigSynchronization>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800191e:	f000 fba3 	bl	8002068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001922:	2360      	movs	r3, #96	; 0x60
 8001924:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800192a:	2300      	movs	r3, #0
 800192c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001932:	463b      	mov	r3, r7
 8001934:	2200      	movs	r2, #0
 8001936:	4619      	mov	r1, r3
 8001938:	480c      	ldr	r0, [pc, #48]	; (800196c <MX_TIM3_Init+0xc0>)
 800193a:	f00d fe99 	bl	800f670 <HAL_TIM_PWM_ConfigChannel>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001944:	f000 fb90 	bl	8002068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001948:	463b      	mov	r3, r7
 800194a:	2204      	movs	r2, #4
 800194c:	4619      	mov	r1, r3
 800194e:	4807      	ldr	r0, [pc, #28]	; (800196c <MX_TIM3_Init+0xc0>)
 8001950:	f00d fe8e 	bl	800f670 <HAL_TIM_PWM_ConfigChannel>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800195a:	f000 fb85 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800195e:	4803      	ldr	r0, [pc, #12]	; (800196c <MX_TIM3_Init+0xc0>)
 8001960:	f001 f8b8 	bl	8002ad4 <HAL_TIM_MspPostInit>

}
 8001964:	bf00      	nop
 8001966:	3728      	adds	r7, #40	; 0x28
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	2400119c 	.word	0x2400119c
 8001970:	40000400 	.word	0x40000400

08001974 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b08a      	sub	sp, #40	; 0x28
 8001978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
 8001982:	605a      	str	r2, [r3, #4]
 8001984:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001986:	463b      	mov	r3, r7
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	609a      	str	r2, [r3, #8]
 8001990:	60da      	str	r2, [r3, #12]
 8001992:	611a      	str	r2, [r3, #16]
 8001994:	615a      	str	r2, [r3, #20]
 8001996:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001998:	4b32      	ldr	r3, [pc, #200]	; (8001a64 <MX_TIM4_Init+0xf0>)
 800199a:	4a33      	ldr	r2, [pc, #204]	; (8001a68 <MX_TIM4_Init+0xf4>)
 800199c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 29;
 800199e:	4b31      	ldr	r3, [pc, #196]	; (8001a64 <MX_TIM4_Init+0xf0>)
 80019a0:	221d      	movs	r2, #29
 80019a2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a4:	4b2f      	ldr	r3, [pc, #188]	; (8001a64 <MX_TIM4_Init+0xf0>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80019aa:	4b2e      	ldr	r3, [pc, #184]	; (8001a64 <MX_TIM4_Init+0xf0>)
 80019ac:	f242 720f 	movw	r2, #9999	; 0x270f
 80019b0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b2:	4b2c      	ldr	r3, [pc, #176]	; (8001a64 <MX_TIM4_Init+0xf0>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b8:	4b2a      	ldr	r3, [pc, #168]	; (8001a64 <MX_TIM4_Init+0xf0>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80019be:	4829      	ldr	r0, [pc, #164]	; (8001a64 <MX_TIM4_Init+0xf0>)
 80019c0:	f00d f98e 	bl	800ece0 <HAL_TIM_PWM_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80019ca:	f000 fb4d 	bl	8002068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	4821      	ldr	r0, [pc, #132]	; (8001a64 <MX_TIM4_Init+0xf0>)
 80019de:	f00e fc15 	bl	801020c <HAL_TIMEx_MasterConfigSynchronization>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80019e8:	f000 fb3e 	bl	8002068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ec:	2360      	movs	r3, #96	; 0x60
 80019ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019fc:	463b      	mov	r3, r7
 80019fe:	2200      	movs	r2, #0
 8001a00:	4619      	mov	r1, r3
 8001a02:	4818      	ldr	r0, [pc, #96]	; (8001a64 <MX_TIM4_Init+0xf0>)
 8001a04:	f00d fe34 	bl	800f670 <HAL_TIM_PWM_ConfigChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001a0e:	f000 fb2b 	bl	8002068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a12:	463b      	mov	r3, r7
 8001a14:	2204      	movs	r2, #4
 8001a16:	4619      	mov	r1, r3
 8001a18:	4812      	ldr	r0, [pc, #72]	; (8001a64 <MX_TIM4_Init+0xf0>)
 8001a1a:	f00d fe29 	bl	800f670 <HAL_TIM_PWM_ConfigChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001a24:	f000 fb20 	bl	8002068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a28:	463b      	mov	r3, r7
 8001a2a:	2208      	movs	r2, #8
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	480d      	ldr	r0, [pc, #52]	; (8001a64 <MX_TIM4_Init+0xf0>)
 8001a30:	f00d fe1e 	bl	800f670 <HAL_TIM_PWM_ConfigChannel>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8001a3a:	f000 fb15 	bl	8002068 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a3e:	463b      	mov	r3, r7
 8001a40:	220c      	movs	r2, #12
 8001a42:	4619      	mov	r1, r3
 8001a44:	4807      	ldr	r0, [pc, #28]	; (8001a64 <MX_TIM4_Init+0xf0>)
 8001a46:	f00d fe13 	bl	800f670 <HAL_TIM_PWM_ConfigChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8001a50:	f000 fb0a 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a54:	4803      	ldr	r0, [pc, #12]	; (8001a64 <MX_TIM4_Init+0xf0>)
 8001a56:	f001 f83d 	bl	8002ad4 <HAL_TIM_MspPostInit>

}
 8001a5a:	bf00      	nop
 8001a5c:	3728      	adds	r7, #40	; 0x28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	240011e8 	.word	0x240011e8
 8001a68:	40000800 	.word	0x40000800

08001a6c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a7e:	463b      	mov	r3, r7
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
 8001a8c:	615a      	str	r2, [r3, #20]
 8001a8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <MX_TIM5_Init+0xac>)
 8001a92:	4a22      	ldr	r2, [pc, #136]	; (8001b1c <MX_TIM5_Init+0xb0>)
 8001a94:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001a96:	4b20      	ldr	r3, [pc, #128]	; (8001b18 <MX_TIM5_Init+0xac>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9c:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <MX_TIM5_Init+0xac>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 8001aa2:	4b1d      	ldr	r3, [pc, #116]	; (8001b18 <MX_TIM5_Init+0xac>)
 8001aa4:	225a      	movs	r2, #90	; 0x5a
 8001aa6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa8:	4b1b      	ldr	r3, [pc, #108]	; (8001b18 <MX_TIM5_Init+0xac>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aae:	4b1a      	ldr	r3, [pc, #104]	; (8001b18 <MX_TIM5_Init+0xac>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001ab4:	4818      	ldr	r0, [pc, #96]	; (8001b18 <MX_TIM5_Init+0xac>)
 8001ab6:	f00d f913 	bl	800ece0 <HAL_TIM_PWM_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001ac0:	f000 fad2 	bl	8002068 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001acc:	f107 031c 	add.w	r3, r7, #28
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4811      	ldr	r0, [pc, #68]	; (8001b18 <MX_TIM5_Init+0xac>)
 8001ad4:	f00e fb9a 	bl	801020c <HAL_TIMEx_MasterConfigSynchronization>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001ade:	f000 fac3 	bl	8002068 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ae2:	2360      	movs	r3, #96	; 0x60
 8001ae4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001af2:	463b      	mov	r3, r7
 8001af4:	220c      	movs	r2, #12
 8001af6:	4619      	mov	r1, r3
 8001af8:	4807      	ldr	r0, [pc, #28]	; (8001b18 <MX_TIM5_Init+0xac>)
 8001afa:	f00d fdb9 	bl	800f670 <HAL_TIM_PWM_ConfigChannel>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001b04:	f000 fab0 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001b08:	4803      	ldr	r0, [pc, #12]	; (8001b18 <MX_TIM5_Init+0xac>)
 8001b0a:	f000 ffe3 	bl	8002ad4 <HAL_TIM_MspPostInit>

}
 8001b0e:	bf00      	nop
 8001b10:	3728      	adds	r7, #40	; 0x28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	24001234 	.word	0x24001234
 8001b1c:	40000c00 	.word	0x40000c00

08001b20 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <MX_TIM13_Init+0x40>)
 8001b26:	4a0f      	ldr	r2, [pc, #60]	; (8001b64 <MX_TIM13_Init+0x44>)
 8001b28:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 99;
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <MX_TIM13_Init+0x40>)
 8001b2c:	2263      	movs	r2, #99	; 0x63
 8001b2e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <MX_TIM13_Init+0x40>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <MX_TIM13_Init+0x40>)
 8001b38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b3c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <MX_TIM13_Init+0x40>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_TIM13_Init+0x40>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001b4a:	4805      	ldr	r0, [pc, #20]	; (8001b60 <MX_TIM13_Init+0x40>)
 8001b4c:	f00d f871 	bl	800ec32 <HAL_TIM_Base_Init>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001b56:	f000 fa87 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	24001280 	.word	0x24001280
 8001b64:	40001c00 	.word	0x40001c00

08001b68 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001b6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ba8 <MX_TIM14_Init+0x40>)
 8001b6e:	4a0f      	ldr	r2, [pc, #60]	; (8001bac <MX_TIM14_Init+0x44>)
 8001b70:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 99;
 8001b72:	4b0d      	ldr	r3, [pc, #52]	; (8001ba8 <MX_TIM14_Init+0x40>)
 8001b74:	2263      	movs	r2, #99	; 0x63
 8001b76:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b78:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <MX_TIM14_Init+0x40>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001b7e:	4b0a      	ldr	r3, [pc, #40]	; (8001ba8 <MX_TIM14_Init+0x40>)
 8001b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b84:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b86:	4b08      	ldr	r3, [pc, #32]	; (8001ba8 <MX_TIM14_Init+0x40>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8c:	4b06      	ldr	r3, [pc, #24]	; (8001ba8 <MX_TIM14_Init+0x40>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001b92:	4805      	ldr	r0, [pc, #20]	; (8001ba8 <MX_TIM14_Init+0x40>)
 8001b94:	f00d f84d 	bl	800ec32 <HAL_TIM_Base_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8001b9e:	f000 fa63 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8001ba2:	bf00      	nop
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	240012cc 	.word	0x240012cc
 8001bac:	40002000 	.word	0x40002000

08001bb0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001bb4:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <MX_UART4_Init+0x90>)
 8001bb6:	4a23      	ldr	r2, [pc, #140]	; (8001c44 <MX_UART4_Init+0x94>)
 8001bb8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001bba:	4b21      	ldr	r3, [pc, #132]	; (8001c40 <MX_UART4_Init+0x90>)
 8001bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bc0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <MX_UART4_Init+0x90>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001bc8:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <MX_UART4_Init+0x90>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001bce:	4b1c      	ldr	r3, [pc, #112]	; (8001c40 <MX_UART4_Init+0x90>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <MX_UART4_Init+0x90>)
 8001bd6:	220c      	movs	r2, #12
 8001bd8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bda:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <MX_UART4_Init+0x90>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be0:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <MX_UART4_Init+0x90>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001be6:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <MX_UART4_Init+0x90>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bec:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <MX_UART4_Init+0x90>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bf2:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <MX_UART4_Init+0x90>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001bf8:	4811      	ldr	r0, [pc, #68]	; (8001c40 <MX_UART4_Init+0x90>)
 8001bfa:	f00e fbc1 	bl	8010380 <HAL_UART_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001c04:	f000 fa30 	bl	8002068 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c08:	2100      	movs	r1, #0
 8001c0a:	480d      	ldr	r0, [pc, #52]	; (8001c40 <MX_UART4_Init+0x90>)
 8001c0c:	f00f fcc7 	bl	801159e <HAL_UARTEx_SetTxFifoThreshold>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001c16:	f000 fa27 	bl	8002068 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4808      	ldr	r0, [pc, #32]	; (8001c40 <MX_UART4_Init+0x90>)
 8001c1e:	f00f fcfc 	bl	801161a <HAL_UARTEx_SetRxFifoThreshold>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001c28:	f000 fa1e 	bl	8002068 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001c2c:	4804      	ldr	r0, [pc, #16]	; (8001c40 <MX_UART4_Init+0x90>)
 8001c2e:	f00f fc7d 	bl	801152c <HAL_UARTEx_DisableFifoMode>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001c38:	f000 fa16 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001c3c:	bf00      	nop
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	24001570 	.word	0x24001570
 8001c44:	40004c00 	.word	0x40004c00

08001c48 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001c4c:	4b22      	ldr	r3, [pc, #136]	; (8001cd8 <MX_USART6_UART_Init+0x90>)
 8001c4e:	4a23      	ldr	r2, [pc, #140]	; (8001cdc <MX_USART6_UART_Init+0x94>)
 8001c50:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001c52:	4b21      	ldr	r3, [pc, #132]	; (8001cd8 <MX_USART6_UART_Init+0x90>)
 8001c54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c58:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <MX_USART6_UART_Init+0x90>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001c60:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <MX_USART6_UART_Init+0x90>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001c66:	4b1c      	ldr	r3, [pc, #112]	; (8001cd8 <MX_USART6_UART_Init+0x90>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	; (8001cd8 <MX_USART6_UART_Init+0x90>)
 8001c6e:	220c      	movs	r2, #12
 8001c70:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c72:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <MX_USART6_UART_Init+0x90>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c78:	4b17      	ldr	r3, [pc, #92]	; (8001cd8 <MX_USART6_UART_Init+0x90>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c7e:	4b16      	ldr	r3, [pc, #88]	; (8001cd8 <MX_USART6_UART_Init+0x90>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <MX_USART6_UART_Init+0x90>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c8a:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <MX_USART6_UART_Init+0x90>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001c90:	4811      	ldr	r0, [pc, #68]	; (8001cd8 <MX_USART6_UART_Init+0x90>)
 8001c92:	f00e fb75 	bl	8010380 <HAL_UART_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8001c9c:	f000 f9e4 	bl	8002068 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	480d      	ldr	r0, [pc, #52]	; (8001cd8 <MX_USART6_UART_Init+0x90>)
 8001ca4:	f00f fc7b 	bl	801159e <HAL_UARTEx_SetTxFifoThreshold>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 8001cae:	f000 f9db 	bl	8002068 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4808      	ldr	r0, [pc, #32]	; (8001cd8 <MX_USART6_UART_Init+0x90>)
 8001cb6:	f00f fcb0 	bl	801161a <HAL_UARTEx_SetRxFifoThreshold>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8001cc0:	f000 f9d2 	bl	8002068 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8001cc4:	4804      	ldr	r0, [pc, #16]	; (8001cd8 <MX_USART6_UART_Init+0x90>)
 8001cc6:	f00f fc31 	bl	801152c <HAL_UARTEx_DisableFifoMode>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8001cd0:	f000 f9ca 	bl	8002068 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001cd4:	bf00      	nop
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	24001604 	.word	0x24001604
 8001cdc:	40011400 	.word	0x40011400

08001ce0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <MX_DMA_Init+0xbc>)
 8001ce8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cec:	4a2b      	ldr	r2, [pc, #172]	; (8001d9c <MX_DMA_Init+0xbc>)
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001cf6:	4b29      	ldr	r3, [pc, #164]	; (8001d9c <MX_DMA_Init+0xbc>)
 8001cf8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	607b      	str	r3, [r7, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d04:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <MX_DMA_Init+0xbc>)
 8001d06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d0a:	4a24      	ldr	r2, [pc, #144]	; (8001d9c <MX_DMA_Init+0xbc>)
 8001d0c:	f043 0302 	orr.w	r3, r3, #2
 8001d10:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001d14:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <MX_DMA_Init+0xbc>)
 8001d16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001d22:	2200      	movs	r2, #0
 8001d24:	2100      	movs	r1, #0
 8001d26:	200b      	movs	r0, #11
 8001d28:	f003 fbb5 	bl	8005496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d2c:	200b      	movs	r0, #11
 8001d2e:	f003 fbcc 	bl	80054ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001d32:	2200      	movs	r2, #0
 8001d34:	2100      	movs	r1, #0
 8001d36:	200c      	movs	r0, #12
 8001d38:	f003 fbad 	bl	8005496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d3c:	200c      	movs	r0, #12
 8001d3e:	f003 fbc4 	bl	80054ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	200d      	movs	r0, #13
 8001d48:	f003 fba5 	bl	8005496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001d4c:	200d      	movs	r0, #13
 8001d4e:	f003 fbbc 	bl	80054ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	200e      	movs	r0, #14
 8001d58:	f003 fb9d 	bl	8005496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001d5c:	200e      	movs	r0, #14
 8001d5e:	f003 fbb4 	bl	80054ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	200f      	movs	r0, #15
 8001d68:	f003 fb95 	bl	8005496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001d6c:	200f      	movs	r0, #15
 8001d6e:	f003 fbac 	bl	80054ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	2010      	movs	r0, #16
 8001d78:	f003 fb8d 	bl	8005496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d7c:	2010      	movs	r0, #16
 8001d7e:	f003 fba4 	bl	80054ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001d82:	2200      	movs	r2, #0
 8001d84:	2100      	movs	r1, #0
 8001d86:	2046      	movs	r0, #70	; 0x46
 8001d88:	f003 fb85 	bl	8005496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001d8c:	2046      	movs	r0, #70	; 0x46
 8001d8e:	f003 fb9c 	bl	80054ca <HAL_NVIC_EnableIRQ>

}
 8001d92:	bf00      	nop
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	58024400 	.word	0x58024400

08001da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b08c      	sub	sp, #48	; 0x30
 8001da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da6:	f107 031c 	add.w	r3, r7, #28
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001db6:	4ba4      	ldr	r3, [pc, #656]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dbc:	4aa2      	ldr	r2, [pc, #648]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001dbe:	f043 0310 	orr.w	r3, r3, #16
 8001dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dc6:	4ba0      	ldr	r3, [pc, #640]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	61bb      	str	r3, [r7, #24]
 8001dd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dd4:	4b9c      	ldr	r3, [pc, #624]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dda:	4a9b      	ldr	r2, [pc, #620]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001ddc:	f043 0320 	orr.w	r3, r3, #32
 8001de0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001de4:	4b98      	ldr	r3, [pc, #608]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dea:	f003 0320 	and.w	r3, r3, #32
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001df2:	4b95      	ldr	r3, [pc, #596]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df8:	4a93      	ldr	r2, [pc, #588]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
 8001dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e02:	4b91      	ldr	r3, [pc, #580]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e10:	4b8d      	ldr	r3, [pc, #564]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e16:	4a8c      	ldr	r2, [pc, #560]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e20:	4b89      	ldr	r3, [pc, #548]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	4b86      	ldr	r3, [pc, #536]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e34:	4a84      	ldr	r2, [pc, #528]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001e36:	f043 0302 	orr.w	r3, r3, #2
 8001e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e3e:	4b82      	ldr	r3, [pc, #520]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e4c:	4b7e      	ldr	r3, [pc, #504]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e52:	4a7d      	ldr	r2, [pc, #500]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e5c:	4b7a      	ldr	r3, [pc, #488]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e66:	607b      	str	r3, [r7, #4]
 8001e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e6a:	4b77      	ldr	r3, [pc, #476]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e70:	4a75      	ldr	r2, [pc, #468]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001e72:	f043 0308 	orr.w	r3, r3, #8
 8001e76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e7a:	4b73      	ldr	r3, [pc, #460]	; (8002048 <MX_GPIO_Init+0x2a8>)
 8001e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	603b      	str	r3, [r7, #0]
 8001e86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f241 5104 	movw	r1, #5380	; 0x1504
 8001e8e:	486f      	ldr	r0, [pc, #444]	; (800204c <MX_GPIO_Init+0x2ac>)
 8001e90:	f006 f918 	bl	80080c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8001e94:	2200      	movs	r2, #0
 8001e96:	f248 0102 	movw	r1, #32770	; 0x8002
 8001e9a:	486d      	ldr	r0, [pc, #436]	; (8002050 <MX_GPIO_Init+0x2b0>)
 8001e9c:	f006 f912 	bl	80080c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2130      	movs	r1, #48	; 0x30
 8001ea4:	486b      	ldr	r0, [pc, #428]	; (8002054 <MX_GPIO_Init+0x2b4>)
 8001ea6:	f006 f90d 	bl	80080c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2102      	movs	r1, #2
 8001eae:	486a      	ldr	r0, [pc, #424]	; (8002058 <MX_GPIO_Init+0x2b8>)
 8001eb0:	f006 f908 	bl	80080c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8001eba:	4868      	ldr	r0, [pc, #416]	; (800205c <MX_GPIO_Init+0x2bc>)
 8001ebc:	f006 f902 	bl	80080c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	210e      	movs	r1, #14
 8001ec4:	4866      	ldr	r0, [pc, #408]	; (8002060 <MX_GPIO_Init+0x2c0>)
 8001ec6:	f006 f8fd 	bl	80080c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f240 3101 	movw	r1, #769	; 0x301
 8001ed0:	4864      	ldr	r0, [pc, #400]	; (8002064 <MX_GPIO_Init+0x2c4>)
 8001ed2:	f006 f8f7 	bl	80080c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8001ed6:	f241 5304 	movw	r3, #5380	; 0x1504
 8001eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001edc:	2301      	movs	r3, #1
 8001ede:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ee8:	f107 031c 	add.w	r3, r7, #28
 8001eec:	4619      	mov	r1, r3
 8001eee:	4857      	ldr	r0, [pc, #348]	; (800204c <MX_GPIO_Init+0x2ac>)
 8001ef0:	f005 ff40 	bl	8007d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|GPIO_PIN_15;
 8001ef4:	f248 0302 	movw	r3, #32770	; 0x8002
 8001ef8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001efa:	2301      	movs	r3, #1
 8001efc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f02:	2300      	movs	r3, #0
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f06:	f107 031c 	add.w	r3, r7, #28
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4850      	ldr	r0, [pc, #320]	; (8002050 <MX_GPIO_Init+0x2b0>)
 8001f0e:	f005 ff31 	bl	8007d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f12:	2330      	movs	r3, #48	; 0x30
 8001f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f16:	2301      	movs	r3, #1
 8001f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f22:	f107 031c 	add.w	r3, r7, #28
 8001f26:	4619      	mov	r1, r3
 8001f28:	484a      	ldr	r0, [pc, #296]	; (8002054 <MX_GPIO_Init+0x2b4>)
 8001f2a:	f005 ff23 	bl	8007d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 8001f2e:	2302      	movs	r3, #2
 8001f30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f32:	2301      	movs	r3, #1
 8001f34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8001f3e:	f107 031c 	add.w	r3, r7, #28
 8001f42:	4619      	mov	r1, r3
 8001f44:	4844      	ldr	r0, [pc, #272]	; (8002058 <MX_GPIO_Init+0x2b8>)
 8001f46:	f005 ff15 	bl	8007d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f52:	2301      	movs	r3, #1
 8001f54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8001f56:	f107 031c 	add.w	r3, r7, #28
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	483e      	ldr	r0, [pc, #248]	; (8002058 <MX_GPIO_Init+0x2b8>)
 8001f5e:	f005 ff09 	bl	8007d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 8001f62:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8001f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f74:	f107 031c 	add.w	r3, r7, #28
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4838      	ldr	r0, [pc, #224]	; (800205c <MX_GPIO_Init+0x2bc>)
 8001f7c:	f005 fefa 	bl	8007d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 8001f80:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f8e:	f107 031c 	add.w	r3, r7, #28
 8001f92:	4619      	mov	r1, r3
 8001f94:	4831      	ldr	r0, [pc, #196]	; (800205c <MX_GPIO_Init+0x2bc>)
 8001f96:	f005 feed 	bl	8007d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8001fa6:	f107 031c 	add.w	r3, r7, #28
 8001faa:	4619      	mov	r1, r3
 8001fac:	482c      	ldr	r0, [pc, #176]	; (8002060 <MX_GPIO_Init+0x2c0>)
 8001fae:	f005 fee1 	bl	8007d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 8001fb2:	230e      	movs	r3, #14
 8001fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001fc2:	f107 031c 	add.w	r3, r7, #28
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4825      	ldr	r0, [pc, #148]	; (8002060 <MX_GPIO_Init+0x2c0>)
 8001fca:	f005 fed3 	bl	8007d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8001fce:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8001fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fdc:	f107 031c 	add.w	r3, r7, #28
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	481a      	ldr	r0, [pc, #104]	; (800204c <MX_GPIO_Init+0x2ac>)
 8001fe4:	f005 fec6 	bl	8007d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 8001fe8:	f240 3301 	movw	r3, #769	; 0x301
 8001fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ffa:	f107 031c 	add.w	r3, r7, #28
 8001ffe:	4619      	mov	r1, r3
 8002000:	4818      	ldr	r0, [pc, #96]	; (8002064 <MX_GPIO_Init+0x2c4>)
 8002002:	f005 feb7 	bl	8007d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002006:	2310      	movs	r3, #16
 8002008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800200a:	2300      	movs	r3, #0
 800200c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002012:	f107 031c 	add.w	r3, r7, #28
 8002016:	4619      	mov	r1, r3
 8002018:	4811      	ldr	r0, [pc, #68]	; (8002060 <MX_GPIO_Init+0x2c0>)
 800201a:	f005 feab 	bl	8007d74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800201e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202c:	2300      	movs	r3, #0
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002030:	2300      	movs	r3, #0
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_GPIO_Init+0x2b0>)
 800203c:	f005 fe9a 	bl	8007d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002040:	bf00      	nop
 8002042:	3730      	adds	r7, #48	; 0x30
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	58024400 	.word	0x58024400
 800204c:	58021000 	.word	0x58021000
 8002050:	58020000 	.word	0x58020000
 8002054:	58020800 	.word	0x58020800
 8002058:	58020400 	.word	0x58020400
 800205c:	58021400 	.word	0x58021400
 8002060:	58021800 	.word	0x58021800
 8002064:	58020c00 	.word	0x58020c00

08002068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800206c:	b672      	cpsid	i
}
 800206e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002070:	e7fe      	b.n	8002070 <Error_Handler+0x8>
	...

08002074 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800207a:	4b0a      	ldr	r3, [pc, #40]	; (80020a4 <HAL_MspInit+0x30>)
 800207c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002080:	4a08      	ldr	r2, [pc, #32]	; (80020a4 <HAL_MspInit+0x30>)
 8002082:	f043 0302 	orr.w	r3, r3, #2
 8002086:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <HAL_MspInit+0x30>)
 800208c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	58024400 	.word	0x58024400

080020a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08c      	sub	sp, #48	; 0x30
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 031c 	add.w	r3, r7, #28
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a5d      	ldr	r2, [pc, #372]	; (800223c <HAL_ADC_MspInit+0x194>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d159      	bne.n	800217e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80020ca:	4b5d      	ldr	r3, [pc, #372]	; (8002240 <HAL_ADC_MspInit+0x198>)
 80020cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020d0:	4a5b      	ldr	r2, [pc, #364]	; (8002240 <HAL_ADC_MspInit+0x198>)
 80020d2:	f043 0320 	orr.w	r3, r3, #32
 80020d6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80020da:	4b59      	ldr	r3, [pc, #356]	; (8002240 <HAL_ADC_MspInit+0x198>)
 80020dc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e8:	4b55      	ldr	r3, [pc, #340]	; (8002240 <HAL_ADC_MspInit+0x198>)
 80020ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ee:	4a54      	ldr	r2, [pc, #336]	; (8002240 <HAL_ADC_MspInit+0x198>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020f8:	4b51      	ldr	r3, [pc, #324]	; (8002240 <HAL_ADC_MspInit+0x198>)
 80020fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_INP14
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002106:	2304      	movs	r3, #4
 8002108:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800210a:	2303      	movs	r3, #3
 800210c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210e:	2300      	movs	r3, #0
 8002110:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002112:	f107 031c 	add.w	r3, r7, #28
 8002116:	4619      	mov	r1, r3
 8002118:	484a      	ldr	r0, [pc, #296]	; (8002244 <HAL_ADC_MspInit+0x19c>)
 800211a:	f005 fe2b 	bl	8007d74 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 800211e:	4b4a      	ldr	r3, [pc, #296]	; (8002248 <HAL_ADC_MspInit+0x1a0>)
 8002120:	4a4a      	ldr	r2, [pc, #296]	; (800224c <HAL_ADC_MspInit+0x1a4>)
 8002122:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002124:	4b48      	ldr	r3, [pc, #288]	; (8002248 <HAL_ADC_MspInit+0x1a0>)
 8002126:	2209      	movs	r2, #9
 8002128:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800212a:	4b47      	ldr	r3, [pc, #284]	; (8002248 <HAL_ADC_MspInit+0x1a0>)
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002130:	4b45      	ldr	r3, [pc, #276]	; (8002248 <HAL_ADC_MspInit+0x1a0>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002136:	4b44      	ldr	r3, [pc, #272]	; (8002248 <HAL_ADC_MspInit+0x1a0>)
 8002138:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800213c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800213e:	4b42      	ldr	r3, [pc, #264]	; (8002248 <HAL_ADC_MspInit+0x1a0>)
 8002140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002144:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002146:	4b40      	ldr	r3, [pc, #256]	; (8002248 <HAL_ADC_MspInit+0x1a0>)
 8002148:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800214c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800214e:	4b3e      	ldr	r3, [pc, #248]	; (8002248 <HAL_ADC_MspInit+0x1a0>)
 8002150:	2200      	movs	r2, #0
 8002152:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002154:	4b3c      	ldr	r3, [pc, #240]	; (8002248 <HAL_ADC_MspInit+0x1a0>)
 8002156:	2200      	movs	r2, #0
 8002158:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800215a:	4b3b      	ldr	r3, [pc, #236]	; (8002248 <HAL_ADC_MspInit+0x1a0>)
 800215c:	2200      	movs	r2, #0
 800215e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002160:	4839      	ldr	r0, [pc, #228]	; (8002248 <HAL_ADC_MspInit+0x1a0>)
 8002162:	f003 f9cd 	bl	8005500 <HAL_DMA_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 800216c:	f7ff ff7c 	bl	8002068 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a35      	ldr	r2, [pc, #212]	; (8002248 <HAL_ADC_MspInit+0x1a0>)
 8002174:	659a      	str	r2, [r3, #88]	; 0x58
 8002176:	4a34      	ldr	r2, [pc, #208]	; (8002248 <HAL_ADC_MspInit+0x1a0>)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800217c:	e059      	b.n	8002232 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a33      	ldr	r2, [pc, #204]	; (8002250 <HAL_ADC_MspInit+0x1a8>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d154      	bne.n	8002232 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002188:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <HAL_ADC_MspInit+0x198>)
 800218a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800218e:	4a2c      	ldr	r2, [pc, #176]	; (8002240 <HAL_ADC_MspInit+0x198>)
 8002190:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002194:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002198:	4b29      	ldr	r3, [pc, #164]	; (8002240 <HAL_ADC_MspInit+0x198>)
 800219a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800219e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a6:	4b26      	ldr	r3, [pc, #152]	; (8002240 <HAL_ADC_MspInit+0x198>)
 80021a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ac:	4a24      	ldr	r2, [pc, #144]	; (8002240 <HAL_ADC_MspInit+0x198>)
 80021ae:	f043 0304 	orr.w	r3, r3, #4
 80021b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021b6:	4b22      	ldr	r3, [pc, #136]	; (8002240 <HAL_ADC_MspInit+0x198>)
 80021b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021bc:	f003 0304 	and.w	r3, r3, #4
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80021c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80021c8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80021cc:	f001 f8b6 	bl	800333c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 80021d0:	4b20      	ldr	r3, [pc, #128]	; (8002254 <HAL_ADC_MspInit+0x1ac>)
 80021d2:	4a21      	ldr	r2, [pc, #132]	; (8002258 <HAL_ADC_MspInit+0x1b0>)
 80021d4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80021d6:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <HAL_ADC_MspInit+0x1ac>)
 80021d8:	2273      	movs	r2, #115	; 0x73
 80021da:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021dc:	4b1d      	ldr	r3, [pc, #116]	; (8002254 <HAL_ADC_MspInit+0x1ac>)
 80021de:	2200      	movs	r2, #0
 80021e0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e2:	4b1c      	ldr	r3, [pc, #112]	; (8002254 <HAL_ADC_MspInit+0x1ac>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80021e8:	4b1a      	ldr	r3, [pc, #104]	; (8002254 <HAL_ADC_MspInit+0x1ac>)
 80021ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021ee:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021f0:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_ADC_MspInit+0x1ac>)
 80021f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021f6:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021f8:	4b16      	ldr	r3, [pc, #88]	; (8002254 <HAL_ADC_MspInit+0x1ac>)
 80021fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021fe:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002200:	4b14      	ldr	r3, [pc, #80]	; (8002254 <HAL_ADC_MspInit+0x1ac>)
 8002202:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002206:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002208:	4b12      	ldr	r3, [pc, #72]	; (8002254 <HAL_ADC_MspInit+0x1ac>)
 800220a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800220e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002210:	4b10      	ldr	r3, [pc, #64]	; (8002254 <HAL_ADC_MspInit+0x1ac>)
 8002212:	2200      	movs	r2, #0
 8002214:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002216:	480f      	ldr	r0, [pc, #60]	; (8002254 <HAL_ADC_MspInit+0x1ac>)
 8002218:	f003 f972 	bl	8005500 <HAL_DMA_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002222:	f7ff ff21 	bl	8002068 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a0a      	ldr	r2, [pc, #40]	; (8002254 <HAL_ADC_MspInit+0x1ac>)
 800222a:	659a      	str	r2, [r3, #88]	; 0x58
 800222c:	4a09      	ldr	r2, [pc, #36]	; (8002254 <HAL_ADC_MspInit+0x1ac>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002232:	bf00      	nop
 8002234:	3730      	adds	r7, #48	; 0x30
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40022000 	.word	0x40022000
 8002240:	58024400 	.word	0x58024400
 8002244:	58020000 	.word	0x58020000
 8002248:	24000d58 	.word	0x24000d58
 800224c:	40020088 	.word	0x40020088
 8002250:	58026000 	.word	0x58026000
 8002254:	24000dd0 	.word	0x24000dd0
 8002258:	400204b8 	.word	0x400204b8

0800225c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b0b8      	sub	sp, #224	; 0xe0
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	22b8      	movs	r2, #184	; 0xb8
 800227a:	2100      	movs	r1, #0
 800227c:	4618      	mov	r0, r3
 800227e:	f017 faa7 	bl	80197d0 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a26      	ldr	r2, [pc, #152]	; (8002320 <HAL_FDCAN_MspInit+0xc4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d145      	bne.n	8002318 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800228c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002290:	f04f 0300 	mov.w	r3, #0
 8002294:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002298:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800229c:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800229e:	f107 0310 	add.w	r3, r7, #16
 80022a2:	4618      	mov	r0, r3
 80022a4:	f008 fb3c 	bl	800a920 <HAL_RCCEx_PeriphCLKConfig>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 80022ae:	f7ff fedb 	bl	8002068 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80022b2:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <HAL_FDCAN_MspInit+0xc8>)
 80022b4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80022b8:	4a1a      	ldr	r2, [pc, #104]	; (8002324 <HAL_FDCAN_MspInit+0xc8>)
 80022ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022be:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80022c2:	4b18      	ldr	r3, [pc, #96]	; (8002324 <HAL_FDCAN_MspInit+0xc8>)
 80022c4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80022c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022d0:	4b14      	ldr	r3, [pc, #80]	; (8002324 <HAL_FDCAN_MspInit+0xc8>)
 80022d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022d6:	4a13      	ldr	r2, [pc, #76]	; (8002324 <HAL_FDCAN_MspInit+0xc8>)
 80022d8:	f043 0320 	orr.w	r3, r3, #32
 80022dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022e0:	4b10      	ldr	r3, [pc, #64]	; (8002324 <HAL_FDCAN_MspInit+0xc8>)
 80022e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022e6:	f003 0320 	and.w	r3, r3, #32
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ee:	23c0      	movs	r3, #192	; 0xc0
 80022f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f4:	2302      	movs	r3, #2
 80022f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002300:	2300      	movs	r3, #0
 8002302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002306:	2302      	movs	r3, #2
 8002308:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800230c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002310:	4619      	mov	r1, r3
 8002312:	4805      	ldr	r0, [pc, #20]	; (8002328 <HAL_FDCAN_MspInit+0xcc>)
 8002314:	f005 fd2e 	bl	8007d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002318:	bf00      	nop
 800231a:	37e0      	adds	r7, #224	; 0xe0
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	4000d400 	.word	0x4000d400
 8002324:	58024400 	.word	0x58024400
 8002328:	58021400 	.word	0x58021400

0800232c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b0b8      	sub	sp, #224	; 0xe0
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002344:	f107 0310 	add.w	r3, r7, #16
 8002348:	22b8      	movs	r2, #184	; 0xb8
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f017 fa3f 	bl	80197d0 <memset>
  if(hi2c->Instance==I2C2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a2a      	ldr	r2, [pc, #168]	; (8002400 <HAL_I2C_MspInit+0xd4>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d14d      	bne.n	80023f8 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800235c:	f04f 0208 	mov.w	r2, #8
 8002360:	f04f 0300 	mov.w	r3, #0
 8002364:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002368:	2300      	movs	r3, #0
 800236a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800236e:	f107 0310 	add.w	r3, r7, #16
 8002372:	4618      	mov	r0, r3
 8002374:	f008 fad4 	bl	800a920 <HAL_RCCEx_PeriphCLKConfig>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d001      	beq.n	8002382 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800237e:	f7ff fe73 	bl	8002068 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002382:	4b20      	ldr	r3, [pc, #128]	; (8002404 <HAL_I2C_MspInit+0xd8>)
 8002384:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002388:	4a1e      	ldr	r2, [pc, #120]	; (8002404 <HAL_I2C_MspInit+0xd8>)
 800238a:	f043 0320 	orr.w	r3, r3, #32
 800238e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <HAL_I2C_MspInit+0xd8>)
 8002394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002398:	f003 0320 	and.w	r3, r3, #32
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023a0:	2303      	movs	r3, #3
 80023a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80023a6:	2312      	movs	r3, #18
 80023a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80023b8:	2304      	movs	r3, #4
 80023ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80023be:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023c2:	4619      	mov	r1, r3
 80023c4:	4810      	ldr	r0, [pc, #64]	; (8002408 <HAL_I2C_MspInit+0xdc>)
 80023c6:	f005 fcd5 	bl	8007d74 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <HAL_I2C_MspInit+0xd8>)
 80023cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023d0:	4a0c      	ldr	r2, [pc, #48]	; (8002404 <HAL_I2C_MspInit+0xd8>)
 80023d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023da:	4b0a      	ldr	r3, [pc, #40]	; (8002404 <HAL_I2C_MspInit+0xd8>)
 80023dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 80023e8:	2200      	movs	r2, #0
 80023ea:	2101      	movs	r1, #1
 80023ec:	2021      	movs	r0, #33	; 0x21
 80023ee:	f003 f852 	bl	8005496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80023f2:	2021      	movs	r0, #33	; 0x21
 80023f4:	f003 f869 	bl	80054ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80023f8:	bf00      	nop
 80023fa:	37e0      	adds	r7, #224	; 0xe0
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40005800 	.word	0x40005800
 8002404:	58024400 	.word	0x58024400
 8002408:	58021400 	.word	0x58021400

0800240c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b0ba      	sub	sp, #232	; 0xe8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002424:	f107 0318 	add.w	r3, r7, #24
 8002428:	22b8      	movs	r2, #184	; 0xb8
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f017 f9cf 	bl	80197d0 <memset>
  if(hsd->Instance==SDMMC2)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a5d      	ldr	r2, [pc, #372]	; (80025ac <HAL_SD_MspInit+0x1a0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	f040 80b3 	bne.w	80025a4 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 800243e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 800244a:	2300      	movs	r3, #0
 800244c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800244e:	f107 0318 	add.w	r3, r7, #24
 8002452:	4618      	mov	r0, r3
 8002454:	f008 fa64 	bl	800a920 <HAL_RCCEx_PeriphCLKConfig>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 800245e:	f7ff fe03 	bl	8002068 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002462:	4b53      	ldr	r3, [pc, #332]	; (80025b0 <HAL_SD_MspInit+0x1a4>)
 8002464:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002468:	4a51      	ldr	r2, [pc, #324]	; (80025b0 <HAL_SD_MspInit+0x1a4>)
 800246a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800246e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002472:	4b4f      	ldr	r3, [pc, #316]	; (80025b0 <HAL_SD_MspInit+0x1a4>)
 8002474:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002480:	4b4b      	ldr	r3, [pc, #300]	; (80025b0 <HAL_SD_MspInit+0x1a4>)
 8002482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002486:	4a4a      	ldr	r2, [pc, #296]	; (80025b0 <HAL_SD_MspInit+0x1a4>)
 8002488:	f043 0308 	orr.w	r3, r3, #8
 800248c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002490:	4b47      	ldr	r3, [pc, #284]	; (80025b0 <HAL_SD_MspInit+0x1a4>)
 8002492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002496:	f003 0308 	and.w	r3, r3, #8
 800249a:	613b      	str	r3, [r7, #16]
 800249c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800249e:	4b44      	ldr	r3, [pc, #272]	; (80025b0 <HAL_SD_MspInit+0x1a4>)
 80024a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a4:	4a42      	ldr	r2, [pc, #264]	; (80025b0 <HAL_SD_MspInit+0x1a4>)
 80024a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024ae:	4b40      	ldr	r3, [pc, #256]	; (80025b0 <HAL_SD_MspInit+0x1a4>)
 80024b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80024bc:	2340      	movs	r3, #64	; 0x40
 80024be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c2:	2302      	movs	r3, #2
 80024c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ce:	2303      	movs	r3, #3
 80024d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80024d4:	230b      	movs	r3, #11
 80024d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024de:	4619      	mov	r1, r3
 80024e0:	4834      	ldr	r0, [pc, #208]	; (80025b4 <HAL_SD_MspInit+0x1a8>)
 80024e2:	f005 fc47 	bl	8007d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80024e6:	2380      	movs	r3, #128	; 0x80
 80024e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ec:	2302      	movs	r3, #2
 80024ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024f2:	2301      	movs	r3, #1
 80024f4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f8:	2303      	movs	r3, #3
 80024fa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80024fe:	230b      	movs	r3, #11
 8002500:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002504:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002508:	4619      	mov	r1, r3
 800250a:	482a      	ldr	r0, [pc, #168]	; (80025b4 <HAL_SD_MspInit+0x1a8>)
 800250c:	f005 fc32 	bl	8007d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002514:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002518:	2302      	movs	r3, #2
 800251a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800251e:	2301      	movs	r3, #1
 8002520:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002524:	2303      	movs	r3, #3
 8002526:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 800252a:	230b      	movs	r3, #11
 800252c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002530:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002534:	4619      	mov	r1, r3
 8002536:	4820      	ldr	r0, [pc, #128]	; (80025b8 <HAL_SD_MspInit+0x1ac>)
 8002538:	f005 fc1c 	bl	8007d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800253c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002540:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002544:	2302      	movs	r3, #2
 8002546:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254a:	2300      	movs	r3, #0
 800254c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002550:	2303      	movs	r3, #3
 8002552:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002556:	230b      	movs	r3, #11
 8002558:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800255c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002560:	4619      	mov	r1, r3
 8002562:	4815      	ldr	r0, [pc, #84]	; (80025b8 <HAL_SD_MspInit+0x1ac>)
 8002564:	f005 fc06 	bl	8007d74 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002568:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800256c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002570:	2302      	movs	r3, #2
 8002572:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002582:	230a      	movs	r3, #10
 8002584:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002588:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800258c:	4619      	mov	r1, r3
 800258e:	480a      	ldr	r0, [pc, #40]	; (80025b8 <HAL_SD_MspInit+0x1ac>)
 8002590:	f005 fbf0 	bl	8007d74 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002594:	2200      	movs	r2, #0
 8002596:	2100      	movs	r1, #0
 8002598:	207c      	movs	r0, #124	; 0x7c
 800259a:	f002 ff7c 	bl	8005496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 800259e:	207c      	movs	r0, #124	; 0x7c
 80025a0:	f002 ff93 	bl	80054ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 80025a4:	bf00      	nop
 80025a6:	37e8      	adds	r7, #232	; 0xe8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	48022400 	.word	0x48022400
 80025b0:	58024400 	.word	0x58024400
 80025b4:	58020c00 	.word	0x58020c00
 80025b8:	58021800 	.word	0x58021800

080025bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08e      	sub	sp, #56	; 0x38
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a4f      	ldr	r2, [pc, #316]	; (8002718 <HAL_SPI_MspInit+0x15c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d12e      	bne.n	800263c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025de:	4b4f      	ldr	r3, [pc, #316]	; (800271c <HAL_SPI_MspInit+0x160>)
 80025e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025e4:	4a4d      	ldr	r2, [pc, #308]	; (800271c <HAL_SPI_MspInit+0x160>)
 80025e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80025ee:	4b4b      	ldr	r3, [pc, #300]	; (800271c <HAL_SPI_MspInit+0x160>)
 80025f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80025f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025f8:	623b      	str	r3, [r7, #32]
 80025fa:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fc:	4b47      	ldr	r3, [pc, #284]	; (800271c <HAL_SPI_MspInit+0x160>)
 80025fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002602:	4a46      	ldr	r2, [pc, #280]	; (800271c <HAL_SPI_MspInit+0x160>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800260c:	4b43      	ldr	r3, [pc, #268]	; (800271c <HAL_SPI_MspInit+0x160>)
 800260e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	61fb      	str	r3, [r7, #28]
 8002618:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800261a:	23e0      	movs	r3, #224	; 0xe0
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002626:	2300      	movs	r3, #0
 8002628:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800262a:	2305      	movs	r3, #5
 800262c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002632:	4619      	mov	r1, r3
 8002634:	483a      	ldr	r0, [pc, #232]	; (8002720 <HAL_SPI_MspInit+0x164>)
 8002636:	f005 fb9d 	bl	8007d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800263a:	e068      	b.n	800270e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a38      	ldr	r2, [pc, #224]	; (8002724 <HAL_SPI_MspInit+0x168>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d12f      	bne.n	80026a6 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002646:	4b35      	ldr	r3, [pc, #212]	; (800271c <HAL_SPI_MspInit+0x160>)
 8002648:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800264c:	4a33      	ldr	r2, [pc, #204]	; (800271c <HAL_SPI_MspInit+0x160>)
 800264e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002652:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002656:	4b31      	ldr	r3, [pc, #196]	; (800271c <HAL_SPI_MspInit+0x160>)
 8002658:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800265c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002660:	61bb      	str	r3, [r7, #24]
 8002662:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002664:	4b2d      	ldr	r3, [pc, #180]	; (800271c <HAL_SPI_MspInit+0x160>)
 8002666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800266a:	4a2c      	ldr	r2, [pc, #176]	; (800271c <HAL_SPI_MspInit+0x160>)
 800266c:	f043 0302 	orr.w	r3, r3, #2
 8002670:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002674:	4b29      	ldr	r3, [pc, #164]	; (800271c <HAL_SPI_MspInit+0x160>)
 8002676:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002682:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002686:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002688:	2302      	movs	r3, #2
 800268a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268c:	2300      	movs	r3, #0
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002690:	2300      	movs	r3, #0
 8002692:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002694:	2305      	movs	r3, #5
 8002696:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800269c:	4619      	mov	r1, r3
 800269e:	4822      	ldr	r0, [pc, #136]	; (8002728 <HAL_SPI_MspInit+0x16c>)
 80026a0:	f005 fb68 	bl	8007d74 <HAL_GPIO_Init>
}
 80026a4:	e033      	b.n	800270e <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a20      	ldr	r2, [pc, #128]	; (800272c <HAL_SPI_MspInit+0x170>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d12e      	bne.n	800270e <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80026b0:	4b1a      	ldr	r3, [pc, #104]	; (800271c <HAL_SPI_MspInit+0x160>)
 80026b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026b6:	4a19      	ldr	r2, [pc, #100]	; (800271c <HAL_SPI_MspInit+0x160>)
 80026b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026bc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80026c0:	4b16      	ldr	r3, [pc, #88]	; (800271c <HAL_SPI_MspInit+0x160>)
 80026c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80026c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ce:	4b13      	ldr	r3, [pc, #76]	; (800271c <HAL_SPI_MspInit+0x160>)
 80026d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026d4:	4a11      	ldr	r2, [pc, #68]	; (800271c <HAL_SPI_MspInit+0x160>)
 80026d6:	f043 0304 	orr.w	r3, r3, #4
 80026da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026de:	4b0f      	ldr	r3, [pc, #60]	; (800271c <HAL_SPI_MspInit+0x160>)
 80026e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026e4:	f003 0304 	and.w	r3, r3, #4
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80026ec:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f2:	2302      	movs	r3, #2
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fa:	2300      	movs	r3, #0
 80026fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026fe:	2306      	movs	r3, #6
 8002700:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002706:	4619      	mov	r1, r3
 8002708:	4809      	ldr	r0, [pc, #36]	; (8002730 <HAL_SPI_MspInit+0x174>)
 800270a:	f005 fb33 	bl	8007d74 <HAL_GPIO_Init>
}
 800270e:	bf00      	nop
 8002710:	3738      	adds	r7, #56	; 0x38
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40013000 	.word	0x40013000
 800271c:	58024400 	.word	0x58024400
 8002720:	58020000 	.word	0x58020000
 8002724:	40003800 	.word	0x40003800
 8002728:	58020400 	.word	0x58020400
 800272c:	40003c00 	.word	0x40003c00
 8002730:	58020800 	.word	0x58020800

08002734 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b08c      	sub	sp, #48	; 0x30
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800273c:	f107 031c 	add.w	r3, r7, #28
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002754:	d15d      	bne.n	8002812 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002756:	4b8e      	ldr	r3, [pc, #568]	; (8002990 <HAL_TIM_PWM_MspInit+0x25c>)
 8002758:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800275c:	4a8c      	ldr	r2, [pc, #560]	; (8002990 <HAL_TIM_PWM_MspInit+0x25c>)
 800275e:	f043 0301 	orr.w	r3, r3, #1
 8002762:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002766:	4b8a      	ldr	r3, [pc, #552]	; (8002990 <HAL_TIM_PWM_MspInit+0x25c>)
 8002768:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002774:	4b86      	ldr	r3, [pc, #536]	; (8002990 <HAL_TIM_PWM_MspInit+0x25c>)
 8002776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800277a:	4a85      	ldr	r2, [pc, #532]	; (8002990 <HAL_TIM_PWM_MspInit+0x25c>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002784:	4b82      	ldr	r3, [pc, #520]	; (8002990 <HAL_TIM_PWM_MspInit+0x25c>)
 8002786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002792:	2301      	movs	r3, #1
 8002794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002796:	2302      	movs	r3, #2
 8002798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279e:	2300      	movs	r3, #0
 80027a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027a2:	2301      	movs	r3, #1
 80027a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a6:	f107 031c 	add.w	r3, r7, #28
 80027aa:	4619      	mov	r1, r3
 80027ac:	4879      	ldr	r0, [pc, #484]	; (8002994 <HAL_TIM_PWM_MspInit+0x260>)
 80027ae:	f005 fae1 	bl	8007d74 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80027b2:	4b79      	ldr	r3, [pc, #484]	; (8002998 <HAL_TIM_PWM_MspInit+0x264>)
 80027b4:	4a79      	ldr	r2, [pc, #484]	; (800299c <HAL_TIM_PWM_MspInit+0x268>)
 80027b6:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80027b8:	4b77      	ldr	r3, [pc, #476]	; (8002998 <HAL_TIM_PWM_MspInit+0x264>)
 80027ba:	2214      	movs	r2, #20
 80027bc:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027be:	4b76      	ldr	r3, [pc, #472]	; (8002998 <HAL_TIM_PWM_MspInit+0x264>)
 80027c0:	2240      	movs	r2, #64	; 0x40
 80027c2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80027c4:	4b74      	ldr	r3, [pc, #464]	; (8002998 <HAL_TIM_PWM_MspInit+0x264>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80027ca:	4b73      	ldr	r3, [pc, #460]	; (8002998 <HAL_TIM_PWM_MspInit+0x264>)
 80027cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027d0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80027d2:	4b71      	ldr	r3, [pc, #452]	; (8002998 <HAL_TIM_PWM_MspInit+0x264>)
 80027d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80027d8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80027da:	4b6f      	ldr	r3, [pc, #444]	; (8002998 <HAL_TIM_PWM_MspInit+0x264>)
 80027dc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027e0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80027e2:	4b6d      	ldr	r3, [pc, #436]	; (8002998 <HAL_TIM_PWM_MspInit+0x264>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80027e8:	4b6b      	ldr	r3, [pc, #428]	; (8002998 <HAL_TIM_PWM_MspInit+0x264>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027ee:	4b6a      	ldr	r3, [pc, #424]	; (8002998 <HAL_TIM_PWM_MspInit+0x264>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80027f4:	4868      	ldr	r0, [pc, #416]	; (8002998 <HAL_TIM_PWM_MspInit+0x264>)
 80027f6:	f002 fe83 	bl	8005500 <HAL_DMA_Init>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d001      	beq.n	8002804 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8002800:	f7ff fc32 	bl	8002068 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a64      	ldr	r2, [pc, #400]	; (8002998 <HAL_TIM_PWM_MspInit+0x264>)
 8002808:	62da      	str	r2, [r3, #44]	; 0x2c
 800280a:	4a63      	ldr	r2, [pc, #396]	; (8002998 <HAL_TIM_PWM_MspInit+0x264>)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002810:	e119      	b.n	8002a46 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a62      	ldr	r2, [pc, #392]	; (80029a0 <HAL_TIM_PWM_MspInit+0x26c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d16d      	bne.n	80028f8 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800281c:	4b5c      	ldr	r3, [pc, #368]	; (8002990 <HAL_TIM_PWM_MspInit+0x25c>)
 800281e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002822:	4a5b      	ldr	r2, [pc, #364]	; (8002990 <HAL_TIM_PWM_MspInit+0x25c>)
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800282c:	4b58      	ldr	r3, [pc, #352]	; (8002990 <HAL_TIM_PWM_MspInit+0x25c>)
 800282e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	613b      	str	r3, [r7, #16]
 8002838:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 800283a:	4b5a      	ldr	r3, [pc, #360]	; (80029a4 <HAL_TIM_PWM_MspInit+0x270>)
 800283c:	4a5a      	ldr	r2, [pc, #360]	; (80029a8 <HAL_TIM_PWM_MspInit+0x274>)
 800283e:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8002840:	4b58      	ldr	r3, [pc, #352]	; (80029a4 <HAL_TIM_PWM_MspInit+0x270>)
 8002842:	2218      	movs	r2, #24
 8002844:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002846:	4b57      	ldr	r3, [pc, #348]	; (80029a4 <HAL_TIM_PWM_MspInit+0x270>)
 8002848:	2240      	movs	r2, #64	; 0x40
 800284a:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800284c:	4b55      	ldr	r3, [pc, #340]	; (80029a4 <HAL_TIM_PWM_MspInit+0x270>)
 800284e:	2200      	movs	r2, #0
 8002850:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002852:	4b54      	ldr	r3, [pc, #336]	; (80029a4 <HAL_TIM_PWM_MspInit+0x270>)
 8002854:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002858:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800285a:	4b52      	ldr	r3, [pc, #328]	; (80029a4 <HAL_TIM_PWM_MspInit+0x270>)
 800285c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002860:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002862:	4b50      	ldr	r3, [pc, #320]	; (80029a4 <HAL_TIM_PWM_MspInit+0x270>)
 8002864:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002868:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 800286a:	4b4e      	ldr	r3, [pc, #312]	; (80029a4 <HAL_TIM_PWM_MspInit+0x270>)
 800286c:	2200      	movs	r2, #0
 800286e:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002870:	4b4c      	ldr	r3, [pc, #304]	; (80029a4 <HAL_TIM_PWM_MspInit+0x270>)
 8002872:	2200      	movs	r2, #0
 8002874:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002876:	4b4b      	ldr	r3, [pc, #300]	; (80029a4 <HAL_TIM_PWM_MspInit+0x270>)
 8002878:	2200      	movs	r2, #0
 800287a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800287c:	4849      	ldr	r0, [pc, #292]	; (80029a4 <HAL_TIM_PWM_MspInit+0x270>)
 800287e:	f002 fe3f 	bl	8005500 <HAL_DMA_Init>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8002888:	f7ff fbee 	bl	8002068 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a45      	ldr	r2, [pc, #276]	; (80029a4 <HAL_TIM_PWM_MspInit+0x270>)
 8002890:	629a      	str	r2, [r3, #40]	; 0x28
 8002892:	4a44      	ldr	r2, [pc, #272]	; (80029a4 <HAL_TIM_PWM_MspInit+0x270>)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8002898:	4b44      	ldr	r3, [pc, #272]	; (80029ac <HAL_TIM_PWM_MspInit+0x278>)
 800289a:	4a45      	ldr	r2, [pc, #276]	; (80029b0 <HAL_TIM_PWM_MspInit+0x27c>)
 800289c:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 800289e:	4b43      	ldr	r3, [pc, #268]	; (80029ac <HAL_TIM_PWM_MspInit+0x278>)
 80028a0:	2217      	movs	r2, #23
 80028a2:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028a4:	4b41      	ldr	r3, [pc, #260]	; (80029ac <HAL_TIM_PWM_MspInit+0x278>)
 80028a6:	2240      	movs	r2, #64	; 0x40
 80028a8:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028aa:	4b40      	ldr	r3, [pc, #256]	; (80029ac <HAL_TIM_PWM_MspInit+0x278>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80028b0:	4b3e      	ldr	r3, [pc, #248]	; (80029ac <HAL_TIM_PWM_MspInit+0x278>)
 80028b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028b6:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028b8:	4b3c      	ldr	r3, [pc, #240]	; (80029ac <HAL_TIM_PWM_MspInit+0x278>)
 80028ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80028be:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028c0:	4b3a      	ldr	r3, [pc, #232]	; (80029ac <HAL_TIM_PWM_MspInit+0x278>)
 80028c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028c6:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 80028c8:	4b38      	ldr	r3, [pc, #224]	; (80029ac <HAL_TIM_PWM_MspInit+0x278>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80028ce:	4b37      	ldr	r3, [pc, #220]	; (80029ac <HAL_TIM_PWM_MspInit+0x278>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028d4:	4b35      	ldr	r3, [pc, #212]	; (80029ac <HAL_TIM_PWM_MspInit+0x278>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 80028da:	4834      	ldr	r0, [pc, #208]	; (80029ac <HAL_TIM_PWM_MspInit+0x278>)
 80028dc:	f002 fe10 	bl	8005500 <HAL_DMA_Init>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 80028e6:	f7ff fbbf 	bl	8002068 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	4a2f      	ldr	r2, [pc, #188]	; (80029ac <HAL_TIM_PWM_MspInit+0x278>)
 80028ee:	625a      	str	r2, [r3, #36]	; 0x24
 80028f0:	4a2e      	ldr	r2, [pc, #184]	; (80029ac <HAL_TIM_PWM_MspInit+0x278>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80028f6:	e0a6      	b.n	8002a46 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a2d      	ldr	r2, [pc, #180]	; (80029b4 <HAL_TIM_PWM_MspInit+0x280>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d15e      	bne.n	80029c0 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002902:	4b23      	ldr	r3, [pc, #140]	; (8002990 <HAL_TIM_PWM_MspInit+0x25c>)
 8002904:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002908:	4a21      	ldr	r2, [pc, #132]	; (8002990 <HAL_TIM_PWM_MspInit+0x25c>)
 800290a:	f043 0304 	orr.w	r3, r3, #4
 800290e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002912:	4b1f      	ldr	r3, [pc, #124]	; (8002990 <HAL_TIM_PWM_MspInit+0x25c>)
 8002914:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8002920:	4b25      	ldr	r3, [pc, #148]	; (80029b8 <HAL_TIM_PWM_MspInit+0x284>)
 8002922:	4a26      	ldr	r2, [pc, #152]	; (80029bc <HAL_TIM_PWM_MspInit+0x288>)
 8002924:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8002926:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <HAL_TIM_PWM_MspInit+0x284>)
 8002928:	221f      	movs	r2, #31
 800292a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800292c:	4b22      	ldr	r3, [pc, #136]	; (80029b8 <HAL_TIM_PWM_MspInit+0x284>)
 800292e:	2240      	movs	r2, #64	; 0x40
 8002930:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002932:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <HAL_TIM_PWM_MspInit+0x284>)
 8002934:	2200      	movs	r2, #0
 8002936:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002938:	4b1f      	ldr	r3, [pc, #124]	; (80029b8 <HAL_TIM_PWM_MspInit+0x284>)
 800293a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800293e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002940:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <HAL_TIM_PWM_MspInit+0x284>)
 8002942:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002946:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002948:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_TIM_PWM_MspInit+0x284>)
 800294a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800294e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_TIM_PWM_MspInit+0x284>)
 8002952:	2200      	movs	r2, #0
 8002954:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002956:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <HAL_TIM_PWM_MspInit+0x284>)
 8002958:	2200      	movs	r2, #0
 800295a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800295c:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <HAL_TIM_PWM_MspInit+0x284>)
 800295e:	2200      	movs	r2, #0
 8002960:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002962:	4815      	ldr	r0, [pc, #84]	; (80029b8 <HAL_TIM_PWM_MspInit+0x284>)
 8002964:	f002 fdcc 	bl	8005500 <HAL_DMA_Init>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 800296e:	f7ff fb7b 	bl	8002068 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a10      	ldr	r2, [pc, #64]	; (80029b8 <HAL_TIM_PWM_MspInit+0x284>)
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c
 8002978:	4a0f      	ldr	r2, [pc, #60]	; (80029b8 <HAL_TIM_PWM_MspInit+0x284>)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800297e:	2200      	movs	r2, #0
 8002980:	2100      	movs	r1, #0
 8002982:	201e      	movs	r0, #30
 8002984:	f002 fd87 	bl	8005496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002988:	201e      	movs	r0, #30
 800298a:	f002 fd9e 	bl	80054ca <HAL_NVIC_EnableIRQ>
}
 800298e:	e05a      	b.n	8002a46 <HAL_TIM_PWM_MspInit+0x312>
 8002990:	58024400 	.word	0x58024400
 8002994:	58020000 	.word	0x58020000
 8002998:	24001318 	.word	0x24001318
 800299c:	40020028 	.word	0x40020028
 80029a0:	40000400 	.word	0x40000400
 80029a4:	24001390 	.word	0x24001390
 80029a8:	40020058 	.word	0x40020058
 80029ac:	24001408 	.word	0x24001408
 80029b0:	40020070 	.word	0x40020070
 80029b4:	40000800 	.word	0x40000800
 80029b8:	24001480 	.word	0x24001480
 80029bc:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a22      	ldr	r2, [pc, #136]	; (8002a50 <HAL_TIM_PWM_MspInit+0x31c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d13d      	bne.n	8002a46 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80029ca:	4b22      	ldr	r3, [pc, #136]	; (8002a54 <HAL_TIM_PWM_MspInit+0x320>)
 80029cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029d0:	4a20      	ldr	r2, [pc, #128]	; (8002a54 <HAL_TIM_PWM_MspInit+0x320>)
 80029d2:	f043 0308 	orr.w	r3, r3, #8
 80029d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80029da:	4b1e      	ldr	r3, [pc, #120]	; (8002a54 <HAL_TIM_PWM_MspInit+0x320>)
 80029dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	60bb      	str	r3, [r7, #8]
 80029e6:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80029e8:	4b1b      	ldr	r3, [pc, #108]	; (8002a58 <HAL_TIM_PWM_MspInit+0x324>)
 80029ea:	4a1c      	ldr	r2, [pc, #112]	; (8002a5c <HAL_TIM_PWM_MspInit+0x328>)
 80029ec:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80029ee:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <HAL_TIM_PWM_MspInit+0x324>)
 80029f0:	223a      	movs	r2, #58	; 0x3a
 80029f2:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80029f4:	4b18      	ldr	r3, [pc, #96]	; (8002a58 <HAL_TIM_PWM_MspInit+0x324>)
 80029f6:	2240      	movs	r2, #64	; 0x40
 80029f8:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80029fa:	4b17      	ldr	r3, [pc, #92]	; (8002a58 <HAL_TIM_PWM_MspInit+0x324>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002a00:	4b15      	ldr	r3, [pc, #84]	; (8002a58 <HAL_TIM_PWM_MspInit+0x324>)
 8002a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a06:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a08:	4b13      	ldr	r3, [pc, #76]	; (8002a58 <HAL_TIM_PWM_MspInit+0x324>)
 8002a0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a0e:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a10:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <HAL_TIM_PWM_MspInit+0x324>)
 8002a12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a16:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 8002a18:	4b0f      	ldr	r3, [pc, #60]	; (8002a58 <HAL_TIM_PWM_MspInit+0x324>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <HAL_TIM_PWM_MspInit+0x324>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a24:	4b0c      	ldr	r3, [pc, #48]	; (8002a58 <HAL_TIM_PWM_MspInit+0x324>)
 8002a26:	2200      	movs	r2, #0
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8002a2a:	480b      	ldr	r0, [pc, #44]	; (8002a58 <HAL_TIM_PWM_MspInit+0x324>)
 8002a2c:	f002 fd68 	bl	8005500 <HAL_DMA_Init>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d001      	beq.n	8002a3a <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8002a36:	f7ff fb17 	bl	8002068 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a06      	ldr	r2, [pc, #24]	; (8002a58 <HAL_TIM_PWM_MspInit+0x324>)
 8002a3e:	631a      	str	r2, [r3, #48]	; 0x30
 8002a40:	4a05      	ldr	r2, [pc, #20]	; (8002a58 <HAL_TIM_PWM_MspInit+0x324>)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002a46:	bf00      	nop
 8002a48:	3730      	adds	r7, #48	; 0x30
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40000c00 	.word	0x40000c00
 8002a54:	58024400 	.word	0x58024400
 8002a58:	240014f8 	.word	0x240014f8
 8002a5c:	40020040 	.word	0x40020040

08002a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b085      	sub	sp, #20
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a16      	ldr	r2, [pc, #88]	; (8002ac8 <HAL_TIM_Base_MspInit+0x68>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d10f      	bne.n	8002a92 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002a72:	4b16      	ldr	r3, [pc, #88]	; (8002acc <HAL_TIM_Base_MspInit+0x6c>)
 8002a74:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a78:	4a14      	ldr	r2, [pc, #80]	; (8002acc <HAL_TIM_Base_MspInit+0x6c>)
 8002a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a7e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a82:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_TIM_Base_MspInit+0x6c>)
 8002a84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8c:	60fb      	str	r3, [r7, #12]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002a90:	e013      	b.n	8002aba <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM14)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a0e      	ldr	r2, [pc, #56]	; (8002ad0 <HAL_TIM_Base_MspInit+0x70>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d10e      	bne.n	8002aba <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002a9c:	4b0b      	ldr	r3, [pc, #44]	; (8002acc <HAL_TIM_Base_MspInit+0x6c>)
 8002a9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002aa2:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <HAL_TIM_Base_MspInit+0x6c>)
 8002aa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002aac:	4b07      	ldr	r3, [pc, #28]	; (8002acc <HAL_TIM_Base_MspInit+0x6c>)
 8002aae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab6:	60bb      	str	r3, [r7, #8]
 8002ab8:	68bb      	ldr	r3, [r7, #8]
}
 8002aba:	bf00      	nop
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40001c00 	.word	0x40001c00
 8002acc:	58024400 	.word	0x58024400
 8002ad0:	40002000 	.word	0x40002000

08002ad4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08c      	sub	sp, #48	; 0x30
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002adc:	f107 031c 	add.w	r3, r7, #28
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	605a      	str	r2, [r3, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
 8002ae8:	60da      	str	r2, [r3, #12]
 8002aea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002af4:	d120      	bne.n	8002b38 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af6:	4b52      	ldr	r3, [pc, #328]	; (8002c40 <HAL_TIM_MspPostInit+0x16c>)
 8002af8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002afc:	4a50      	ldr	r2, [pc, #320]	; (8002c40 <HAL_TIM_MspPostInit+0x16c>)
 8002afe:	f043 0302 	orr.w	r3, r3, #2
 8002b02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b06:	4b4e      	ldr	r3, [pc, #312]	; (8002c40 <HAL_TIM_MspPostInit+0x16c>)
 8002b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	61bb      	str	r3, [r7, #24]
 8002b12:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b1e:	2302      	movs	r3, #2
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b22:	2300      	movs	r3, #0
 8002b24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b26:	2301      	movs	r3, #1
 8002b28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2a:	f107 031c 	add.w	r3, r7, #28
 8002b2e:	4619      	mov	r1, r3
 8002b30:	4844      	ldr	r0, [pc, #272]	; (8002c44 <HAL_TIM_MspPostInit+0x170>)
 8002b32:	f005 f91f 	bl	8007d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002b36:	e07f      	b.n	8002c38 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a42      	ldr	r2, [pc, #264]	; (8002c48 <HAL_TIM_MspPostInit+0x174>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d11f      	bne.n	8002b82 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b42:	4b3f      	ldr	r3, [pc, #252]	; (8002c40 <HAL_TIM_MspPostInit+0x16c>)
 8002b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b48:	4a3d      	ldr	r2, [pc, #244]	; (8002c40 <HAL_TIM_MspPostInit+0x16c>)
 8002b4a:	f043 0302 	orr.w	r3, r3, #2
 8002b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b52:	4b3b      	ldr	r3, [pc, #236]	; (8002c40 <HAL_TIM_MspPostInit+0x16c>)
 8002b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b58:	f003 0302 	and.w	r3, r3, #2
 8002b5c:	617b      	str	r3, [r7, #20]
 8002b5e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002b60:	2330      	movs	r3, #48	; 0x30
 8002b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b64:	2302      	movs	r3, #2
 8002b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b68:	2302      	movs	r3, #2
 8002b6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b70:	2302      	movs	r3, #2
 8002b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b74:	f107 031c 	add.w	r3, r7, #28
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4832      	ldr	r0, [pc, #200]	; (8002c44 <HAL_TIM_MspPostInit+0x170>)
 8002b7c:	f005 f8fa 	bl	8007d74 <HAL_GPIO_Init>
}
 8002b80:	e05a      	b.n	8002c38 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a31      	ldr	r2, [pc, #196]	; (8002c4c <HAL_TIM_MspPostInit+0x178>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d131      	bne.n	8002bf0 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b8c:	4b2c      	ldr	r3, [pc, #176]	; (8002c40 <HAL_TIM_MspPostInit+0x16c>)
 8002b8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b92:	4a2b      	ldr	r2, [pc, #172]	; (8002c40 <HAL_TIM_MspPostInit+0x16c>)
 8002b94:	f043 0308 	orr.w	r3, r3, #8
 8002b98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b9c:	4b28      	ldr	r3, [pc, #160]	; (8002c40 <HAL_TIM_MspPostInit+0x16c>)
 8002b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ba2:	f003 0308 	and.w	r3, r3, #8
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8002baa:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8002bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bc0:	f107 031c 	add.w	r3, r7, #28
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4822      	ldr	r0, [pc, #136]	; (8002c50 <HAL_TIM_MspPostInit+0x17c>)
 8002bc8:	f005 f8d4 	bl	8007d74 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002bcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bde:	2302      	movs	r3, #2
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002be2:	f107 031c 	add.w	r3, r7, #28
 8002be6:	4619      	mov	r1, r3
 8002be8:	4819      	ldr	r0, [pc, #100]	; (8002c50 <HAL_TIM_MspPostInit+0x17c>)
 8002bea:	f005 f8c3 	bl	8007d74 <HAL_GPIO_Init>
}
 8002bee:	e023      	b.n	8002c38 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a17      	ldr	r2, [pc, #92]	; (8002c54 <HAL_TIM_MspPostInit+0x180>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d11e      	bne.n	8002c38 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfa:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <HAL_TIM_MspPostInit+0x16c>)
 8002bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c00:	4a0f      	ldr	r2, [pc, #60]	; (8002c40 <HAL_TIM_MspPostInit+0x16c>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c0a:	4b0d      	ldr	r3, [pc, #52]	; (8002c40 <HAL_TIM_MspPostInit+0x16c>)
 8002c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c18:	2308      	movs	r3, #8
 8002c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002c20:	2302      	movs	r3, #2
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c24:	2300      	movs	r3, #0
 8002c26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2c:	f107 031c 	add.w	r3, r7, #28
 8002c30:	4619      	mov	r1, r3
 8002c32:	4809      	ldr	r0, [pc, #36]	; (8002c58 <HAL_TIM_MspPostInit+0x184>)
 8002c34:	f005 f89e 	bl	8007d74 <HAL_GPIO_Init>
}
 8002c38:	bf00      	nop
 8002c3a:	3730      	adds	r7, #48	; 0x30
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	58024400 	.word	0x58024400
 8002c44:	58020400 	.word	0x58020400
 8002c48:	40000400 	.word	0x40000400
 8002c4c:	40000800 	.word	0x40000800
 8002c50:	58020c00 	.word	0x58020c00
 8002c54:	40000c00 	.word	0x40000c00
 8002c58:	58020000 	.word	0x58020000

08002c5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b0ba      	sub	sp, #232	; 0xe8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	60da      	str	r2, [r3, #12]
 8002c72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c74:	f107 0318 	add.w	r3, r7, #24
 8002c78:	22b8      	movs	r2, #184	; 0xb8
 8002c7a:	2100      	movs	r1, #0
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f016 fda7 	bl	80197d0 <memset>
  if(huart->Instance==UART4)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a4d      	ldr	r2, [pc, #308]	; (8002dbc <HAL_UART_MspInit+0x160>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d147      	bne.n	8002d1c <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002c8c:	f04f 0202 	mov.w	r2, #2
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c9e:	f107 0318 	add.w	r3, r7, #24
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f007 fe3c 	bl	800a920 <HAL_RCCEx_PeriphCLKConfig>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002cae:	f7ff f9db 	bl	8002068 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002cb2:	4b43      	ldr	r3, [pc, #268]	; (8002dc0 <HAL_UART_MspInit+0x164>)
 8002cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cb8:	4a41      	ldr	r2, [pc, #260]	; (8002dc0 <HAL_UART_MspInit+0x164>)
 8002cba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002cbe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002cc2:	4b3f      	ldr	r3, [pc, #252]	; (8002dc0 <HAL_UART_MspInit+0x164>)
 8002cc4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002cc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ccc:	617b      	str	r3, [r7, #20]
 8002cce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd0:	4b3b      	ldr	r3, [pc, #236]	; (8002dc0 <HAL_UART_MspInit+0x164>)
 8002cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cd6:	4a3a      	ldr	r2, [pc, #232]	; (8002dc0 <HAL_UART_MspInit+0x164>)
 8002cd8:	f043 0302 	orr.w	r3, r3, #2
 8002cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ce0:	4b37      	ldr	r3, [pc, #220]	; (8002dc0 <HAL_UART_MspInit+0x164>)
 8002ce2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	613b      	str	r3, [r7, #16]
 8002cec:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002cee:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002d08:	2308      	movs	r3, #8
 8002d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d0e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d12:	4619      	mov	r1, r3
 8002d14:	482b      	ldr	r0, [pc, #172]	; (8002dc4 <HAL_UART_MspInit+0x168>)
 8002d16:	f005 f82d 	bl	8007d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002d1a:	e04a      	b.n	8002db2 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a29      	ldr	r2, [pc, #164]	; (8002dc8 <HAL_UART_MspInit+0x16c>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d145      	bne.n	8002db2 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002d26:	f04f 0201 	mov.w	r2, #1
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d38:	f107 0318 	add.w	r3, r7, #24
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f007 fdef 	bl	800a920 <HAL_RCCEx_PeriphCLKConfig>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8002d48:	f7ff f98e 	bl	8002068 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d4c:	4b1c      	ldr	r3, [pc, #112]	; (8002dc0 <HAL_UART_MspInit+0x164>)
 8002d4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d52:	4a1b      	ldr	r2, [pc, #108]	; (8002dc0 <HAL_UART_MspInit+0x164>)
 8002d54:	f043 0320 	orr.w	r3, r3, #32
 8002d58:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002d5c:	4b18      	ldr	r3, [pc, #96]	; (8002dc0 <HAL_UART_MspInit+0x164>)
 8002d5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d6a:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <HAL_UART_MspInit+0x164>)
 8002d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d70:	4a13      	ldr	r2, [pc, #76]	; (8002dc0 <HAL_UART_MspInit+0x164>)
 8002d72:	f043 0304 	orr.w	r3, r3, #4
 8002d76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d7a:	4b11      	ldr	r3, [pc, #68]	; (8002dc0 <HAL_UART_MspInit+0x164>)
 8002d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d88:	23c0      	movs	r3, #192	; 0xc0
 8002d8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 8002da0:	2307      	movs	r3, #7
 8002da2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002da6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002daa:	4619      	mov	r1, r3
 8002dac:	4807      	ldr	r0, [pc, #28]	; (8002dcc <HAL_UART_MspInit+0x170>)
 8002dae:	f004 ffe1 	bl	8007d74 <HAL_GPIO_Init>
}
 8002db2:	bf00      	nop
 8002db4:	37e8      	adds	r7, #232	; 0xe8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40004c00 	.word	0x40004c00
 8002dc0:	58024400 	.word	0x58024400
 8002dc4:	58020400 	.word	0x58020400
 8002dc8:	40011400 	.word	0x40011400
 8002dcc:	58020800 	.word	0x58020800

08002dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dd4:	e7fe      	b.n	8002dd4 <NMI_Handler+0x4>

08002dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dda:	e7fe      	b.n	8002dda <HardFault_Handler+0x4>

08002ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002de0:	e7fe      	b.n	8002de0 <MemManage_Handler+0x4>

08002de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002de2:	b480      	push	{r7}
 8002de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002de6:	e7fe      	b.n	8002de6 <BusFault_Handler+0x4>

08002de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dec:	e7fe      	b.n	8002dec <UsageFault_Handler+0x4>

08002dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dee:	b480      	push	{r7}
 8002df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr

08002dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e00:	bf00      	nop
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e1c:	f000 fa4a 	bl	80032b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e20:	bf00      	nop
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002e28:	4802      	ldr	r0, [pc, #8]	; (8002e34 <DMA1_Stream0_IRQHandler+0x10>)
 8002e2a:	f003 f92d 	bl	8006088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	24001480 	.word	0x24001480

08002e38 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8002e3c:	4802      	ldr	r0, [pc, #8]	; (8002e48 <DMA1_Stream1_IRQHandler+0x10>)
 8002e3e:	f003 f923 	bl	8006088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	24001318 	.word	0x24001318

08002e4c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8002e50:	4802      	ldr	r0, [pc, #8]	; (8002e5c <DMA1_Stream2_IRQHandler+0x10>)
 8002e52:	f003 f919 	bl	8006088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	240014f8 	.word	0x240014f8

08002e60 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8002e64:	4802      	ldr	r0, [pc, #8]	; (8002e70 <DMA1_Stream3_IRQHandler+0x10>)
 8002e66:	f003 f90f 	bl	8006088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	24001390 	.word	0x24001390

08002e74 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8002e78:	4802      	ldr	r0, [pc, #8]	; (8002e84 <DMA1_Stream4_IRQHandler+0x10>)
 8002e7a:	f003 f905 	bl	8006088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002e7e:	bf00      	nop
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	24001408 	.word	0x24001408

08002e88 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002e8c:	4802      	ldr	r0, [pc, #8]	; (8002e98 <DMA1_Stream5_IRQHandler+0x10>)
 8002e8e:	f003 f8fb 	bl	8006088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	24000d58 	.word	0x24000d58

08002e9c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002ea0:	4802      	ldr	r0, [pc, #8]	; (8002eac <TIM4_IRQHandler+0x10>)
 8002ea2:	f00c fac5 	bl	800f430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002ea6:	bf00      	nop
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	240011e8 	.word	0x240011e8

08002eb0 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8002eb4:	4802      	ldr	r0, [pc, #8]	; (8002ec0 <I2C2_EV_IRQHandler+0x10>)
 8002eb6:	f005 f9af 	bl	8008218 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8002eba:	bf00      	nop
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	bf00      	nop
 8002ec0:	24000ee8 	.word	0x24000ee8

08002ec4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002ec8:	4802      	ldr	r0, [pc, #8]	; (8002ed4 <DMA2_Stream7_IRQHandler+0x10>)
 8002eca:	f003 f8dd 	bl	8006088 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	24000dd0 	.word	0x24000dd0

08002ed8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002edc:	4802      	ldr	r0, [pc, #8]	; (8002ee8 <OTG_HS_IRQHandler+0x10>)
 8002ede:	f005 fba5 	bl	800862c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	24002dc4 	.word	0x24002dc4

08002eec <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8002ef0:	4802      	ldr	r0, [pc, #8]	; (8002efc <SDMMC2_IRQHandler+0x10>)
 8002ef2:	f00a fb6b 	bl	800d5cc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	24000f3c 	.word	0x24000f3c

08002f00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return 1;
 8002f04:	2301      	movs	r3, #1
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <_kill>:

int _kill(int pid, int sig)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f1a:	f016 fc21 	bl	8019760 <__errno>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2216      	movs	r2, #22
 8002f22:	601a      	str	r2, [r3, #0]
  return -1;
 8002f24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3708      	adds	r7, #8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <_exit>:

void _exit (int status)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f38:	f04f 31ff 	mov.w	r1, #4294967295
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f7ff ffe7 	bl	8002f10 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f42:	e7fe      	b.n	8002f42 <_exit+0x12>

08002f44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b086      	sub	sp, #24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
 8002f54:	e00a      	b.n	8002f6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002f56:	f3af 8000 	nop.w
 8002f5a:	4601      	mov	r1, r0
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	1c5a      	adds	r2, r3, #1
 8002f60:	60ba      	str	r2, [r7, #8]
 8002f62:	b2ca      	uxtb	r2, r1
 8002f64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	697a      	ldr	r2, [r7, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	dbf0      	blt.n	8002f56 <_read+0x12>
  }

  return len;
 8002f74:	687b      	ldr	r3, [r7, #4]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3718      	adds	r7, #24
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002f7e:	b580      	push	{r7, lr}
 8002f80:	b086      	sub	sp, #24
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	60b9      	str	r1, [r7, #8]
 8002f88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	617b      	str	r3, [r7, #20]
 8002f8e:	e009      	b.n	8002fa4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	1c5a      	adds	r2, r3, #1
 8002f94:	60ba      	str	r2, [r7, #8]
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	dbf1      	blt.n	8002f90 <_write+0x12>
  }
  return len;
 8002fac:	687b      	ldr	r3, [r7, #4]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3718      	adds	r7, #24
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <_close>:

int _close(int file)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002fbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002fde:	605a      	str	r2, [r3, #4]
  return 0;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <_isatty>:

int _isatty(int file)
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b083      	sub	sp, #12
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ff6:	2301      	movs	r3, #1
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003004:	b480      	push	{r7}
 8003006:	b085      	sub	sp, #20
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
	...

08003020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003028:	4a14      	ldr	r2, [pc, #80]	; (800307c <_sbrk+0x5c>)
 800302a:	4b15      	ldr	r3, [pc, #84]	; (8003080 <_sbrk+0x60>)
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003034:	4b13      	ldr	r3, [pc, #76]	; (8003084 <_sbrk+0x64>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800303c:	4b11      	ldr	r3, [pc, #68]	; (8003084 <_sbrk+0x64>)
 800303e:	4a12      	ldr	r2, [pc, #72]	; (8003088 <_sbrk+0x68>)
 8003040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003042:	4b10      	ldr	r3, [pc, #64]	; (8003084 <_sbrk+0x64>)
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	429a      	cmp	r2, r3
 800304e:	d207      	bcs.n	8003060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003050:	f016 fb86 	bl	8019760 <__errno>
 8003054:	4603      	mov	r3, r0
 8003056:	220c      	movs	r2, #12
 8003058:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800305a:	f04f 33ff 	mov.w	r3, #4294967295
 800305e:	e009      	b.n	8003074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003060:	4b08      	ldr	r3, [pc, #32]	; (8003084 <_sbrk+0x64>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <_sbrk+0x64>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4413      	add	r3, r2
 800306e:	4a05      	ldr	r2, [pc, #20]	; (8003084 <_sbrk+0x64>)
 8003070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003072:	68fb      	ldr	r3, [r7, #12]
}
 8003074:	4618      	mov	r0, r3
 8003076:	3718      	adds	r7, #24
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	24050000 	.word	0x24050000
 8003080:	00000800 	.word	0x00000800
 8003084:	24001698 	.word	0x24001698
 8003088:	24003500 	.word	0x24003500

0800308c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800308c:	b480      	push	{r7}
 800308e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003090:	4b32      	ldr	r3, [pc, #200]	; (800315c <SystemInit+0xd0>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	4a31      	ldr	r2, [pc, #196]	; (800315c <SystemInit+0xd0>)
 8003098:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800309c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80030a0:	4b2f      	ldr	r3, [pc, #188]	; (8003160 <SystemInit+0xd4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	2b06      	cmp	r3, #6
 80030aa:	d807      	bhi.n	80030bc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80030ac:	4b2c      	ldr	r3, [pc, #176]	; (8003160 <SystemInit+0xd4>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f023 030f 	bic.w	r3, r3, #15
 80030b4:	4a2a      	ldr	r2, [pc, #168]	; (8003160 <SystemInit+0xd4>)
 80030b6:	f043 0307 	orr.w	r3, r3, #7
 80030ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80030bc:	4b29      	ldr	r3, [pc, #164]	; (8003164 <SystemInit+0xd8>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a28      	ldr	r2, [pc, #160]	; (8003164 <SystemInit+0xd8>)
 80030c2:	f043 0301 	orr.w	r3, r3, #1
 80030c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80030c8:	4b26      	ldr	r3, [pc, #152]	; (8003164 <SystemInit+0xd8>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80030ce:	4b25      	ldr	r3, [pc, #148]	; (8003164 <SystemInit+0xd8>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	4924      	ldr	r1, [pc, #144]	; (8003164 <SystemInit+0xd8>)
 80030d4:	4b24      	ldr	r3, [pc, #144]	; (8003168 <SystemInit+0xdc>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80030da:	4b21      	ldr	r3, [pc, #132]	; (8003160 <SystemInit+0xd4>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80030e6:	4b1e      	ldr	r3, [pc, #120]	; (8003160 <SystemInit+0xd4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f023 030f 	bic.w	r3, r3, #15
 80030ee:	4a1c      	ldr	r2, [pc, #112]	; (8003160 <SystemInit+0xd4>)
 80030f0:	f043 0307 	orr.w	r3, r3, #7
 80030f4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80030f6:	4b1b      	ldr	r3, [pc, #108]	; (8003164 <SystemInit+0xd8>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80030fc:	4b19      	ldr	r3, [pc, #100]	; (8003164 <SystemInit+0xd8>)
 80030fe:	2200      	movs	r2, #0
 8003100:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003102:	4b18      	ldr	r3, [pc, #96]	; (8003164 <SystemInit+0xd8>)
 8003104:	2200      	movs	r2, #0
 8003106:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003108:	4b16      	ldr	r3, [pc, #88]	; (8003164 <SystemInit+0xd8>)
 800310a:	4a18      	ldr	r2, [pc, #96]	; (800316c <SystemInit+0xe0>)
 800310c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800310e:	4b15      	ldr	r3, [pc, #84]	; (8003164 <SystemInit+0xd8>)
 8003110:	4a17      	ldr	r2, [pc, #92]	; (8003170 <SystemInit+0xe4>)
 8003112:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003114:	4b13      	ldr	r3, [pc, #76]	; (8003164 <SystemInit+0xd8>)
 8003116:	4a17      	ldr	r2, [pc, #92]	; (8003174 <SystemInit+0xe8>)
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800311a:	4b12      	ldr	r3, [pc, #72]	; (8003164 <SystemInit+0xd8>)
 800311c:	2200      	movs	r2, #0
 800311e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003120:	4b10      	ldr	r3, [pc, #64]	; (8003164 <SystemInit+0xd8>)
 8003122:	4a14      	ldr	r2, [pc, #80]	; (8003174 <SystemInit+0xe8>)
 8003124:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003126:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <SystemInit+0xd8>)
 8003128:	2200      	movs	r2, #0
 800312a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800312c:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <SystemInit+0xd8>)
 800312e:	4a11      	ldr	r2, [pc, #68]	; (8003174 <SystemInit+0xe8>)
 8003130:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003132:	4b0c      	ldr	r3, [pc, #48]	; (8003164 <SystemInit+0xd8>)
 8003134:	2200      	movs	r2, #0
 8003136:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003138:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <SystemInit+0xd8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a09      	ldr	r2, [pc, #36]	; (8003164 <SystemInit+0xd8>)
 800313e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003142:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003144:	4b07      	ldr	r3, [pc, #28]	; (8003164 <SystemInit+0xd8>)
 8003146:	2200      	movs	r2, #0
 8003148:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800314a:	4b0b      	ldr	r3, [pc, #44]	; (8003178 <SystemInit+0xec>)
 800314c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003150:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003152:	bf00      	nop
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr
 800315c:	e000ed00 	.word	0xe000ed00
 8003160:	52002000 	.word	0x52002000
 8003164:	58024400 	.word	0x58024400
 8003168:	eaf6ed7f 	.word	0xeaf6ed7f
 800316c:	02020200 	.word	0x02020200
 8003170:	01ff0000 	.word	0x01ff0000
 8003174:	01010280 	.word	0x01010280
 8003178:	52004000 	.word	0x52004000

0800317c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800317c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031b4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003180:	f7ff ff84 	bl	800308c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003184:	480c      	ldr	r0, [pc, #48]	; (80031b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003186:	490d      	ldr	r1, [pc, #52]	; (80031bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003188:	4a0d      	ldr	r2, [pc, #52]	; (80031c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800318a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800318c:	e002      	b.n	8003194 <LoopCopyDataInit>

0800318e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800318e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003192:	3304      	adds	r3, #4

08003194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003198:	d3f9      	bcc.n	800318e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800319a:	4a0a      	ldr	r2, [pc, #40]	; (80031c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800319c:	4c0a      	ldr	r4, [pc, #40]	; (80031c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800319e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031a0:	e001      	b.n	80031a6 <LoopFillZerobss>

080031a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031a4:	3204      	adds	r2, #4

080031a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031a8:	d3fb      	bcc.n	80031a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80031aa:	f016 fadf 	bl	801976c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031ae:	f7fd fef1 	bl	8000f94 <main>
  bx  lr
 80031b2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031b4:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80031b8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80031bc:	240002d4 	.word	0x240002d4
  ldr r2, =_sidata
 80031c0:	0801e964 	.word	0x0801e964
  ldr r2, =_sbss
 80031c4:	240002d4 	.word	0x240002d4
  ldr r4, =_ebss
 80031c8:	24003500 	.word	0x24003500

080031cc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031cc:	e7fe      	b.n	80031cc <ADC3_IRQHandler>
	...

080031d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031d6:	2003      	movs	r0, #3
 80031d8:	f002 f952 	bl	8005480 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031dc:	f007 f9ca 	bl	800a574 <HAL_RCC_GetSysClockFreq>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b15      	ldr	r3, [pc, #84]	; (8003238 <HAL_Init+0x68>)
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	0a1b      	lsrs	r3, r3, #8
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	4913      	ldr	r1, [pc, #76]	; (800323c <HAL_Init+0x6c>)
 80031ee:	5ccb      	ldrb	r3, [r1, r3]
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
 80031f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031fa:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <HAL_Init+0x68>)
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	4a0e      	ldr	r2, [pc, #56]	; (800323c <HAL_Init+0x6c>)
 8003204:	5cd3      	ldrb	r3, [r2, r3]
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	fa22 f303 	lsr.w	r3, r2, r3
 8003210:	4a0b      	ldr	r2, [pc, #44]	; (8003240 <HAL_Init+0x70>)
 8003212:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003214:	4a0b      	ldr	r2, [pc, #44]	; (8003244 <HAL_Init+0x74>)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800321a:	200f      	movs	r0, #15
 800321c:	f000 f814 	bl	8003248 <HAL_InitTick>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e002      	b.n	8003230 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800322a:	f7fe ff23 	bl	8002074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	58024400 	.word	0x58024400
 800323c:	0801e018 	.word	0x0801e018
 8003240:	24000004 	.word	0x24000004
 8003244:	24000000 	.word	0x24000000

08003248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003250:	4b15      	ldr	r3, [pc, #84]	; (80032a8 <HAL_InitTick+0x60>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e021      	b.n	80032a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800325c:	4b13      	ldr	r3, [pc, #76]	; (80032ac <HAL_InitTick+0x64>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4b11      	ldr	r3, [pc, #68]	; (80032a8 <HAL_InitTick+0x60>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	4619      	mov	r1, r3
 8003266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800326a:	fbb3 f3f1 	udiv	r3, r3, r1
 800326e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003272:	4618      	mov	r0, r3
 8003274:	f002 f937 	bl	80054e6 <HAL_SYSTICK_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e00e      	b.n	80032a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2b0f      	cmp	r3, #15
 8003286:	d80a      	bhi.n	800329e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003288:	2200      	movs	r2, #0
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	f04f 30ff 	mov.w	r0, #4294967295
 8003290:	f002 f901 	bl	8005496 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003294:	4a06      	ldr	r2, [pc, #24]	; (80032b0 <HAL_InitTick+0x68>)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800329a:	2300      	movs	r3, #0
 800329c:	e000      	b.n	80032a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	2400000c 	.word	0x2400000c
 80032ac:	24000000 	.word	0x24000000
 80032b0:	24000008 	.word	0x24000008

080032b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032b4:	b480      	push	{r7}
 80032b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_IncTick+0x20>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	461a      	mov	r2, r3
 80032be:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <HAL_IncTick+0x24>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4413      	add	r3, r2
 80032c4:	4a04      	ldr	r2, [pc, #16]	; (80032d8 <HAL_IncTick+0x24>)
 80032c6:	6013      	str	r3, [r2, #0]
}
 80032c8:	bf00      	nop
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	2400000c 	.word	0x2400000c
 80032d8:	2400169c 	.word	0x2400169c

080032dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032dc:	b480      	push	{r7}
 80032de:	af00      	add	r7, sp, #0
  return uwTick;
 80032e0:	4b03      	ldr	r3, [pc, #12]	; (80032f0 <HAL_GetTick+0x14>)
 80032e2:	681b      	ldr	r3, [r3, #0]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	2400169c 	.word	0x2400169c

080032f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80032fc:	f7ff ffee 	bl	80032dc <HAL_GetTick>
 8003300:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	d005      	beq.n	800331a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800330e:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <HAL_Delay+0x44>)
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4413      	add	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800331a:	bf00      	nop
 800331c:	f7ff ffde 	bl	80032dc <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	429a      	cmp	r2, r3
 800332a:	d8f7      	bhi.n	800331c <HAL_Delay+0x28>
  {
  }
}
 800332c:	bf00      	nop
 800332e:	bf00      	nop
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	2400000c 	.word	0x2400000c

0800333c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	43db      	mvns	r3, r3
 800334e:	401a      	ands	r2, r3
 8003350:	4904      	ldr	r1, [pc, #16]	; (8003364 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr
 8003364:	58000400 	.word	0x58000400

08003368 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	431a      	orrs	r2, r3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	609a      	str	r2, [r3, #8]
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	609a      	str	r2, [r3, #8]
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	3360      	adds	r3, #96	; 0x60
 80033e2:	461a      	mov	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4a10      	ldr	r2, [pc, #64]	; (8003430 <LL_ADC_SetOffset+0x60>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d10b      	bne.n	800340c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	4313      	orrs	r3, r2
 8003402:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800340a:	e00b      	b.n	8003424 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	430b      	orrs	r3, r1
 800341e:	431a      	orrs	r2, r3
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	601a      	str	r2, [r3, #0]
}
 8003424:	bf00      	nop
 8003426:	371c      	adds	r7, #28
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	58026000 	.word	0x58026000

08003434 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3360      	adds	r3, #96	; 0x60
 8003442:	461a      	mov	r2, r3
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003454:	4618      	mov	r0, r3
 8003456:	3714      	adds	r7, #20
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	60b9      	str	r1, [r7, #8]
 800346a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f003 031f 	and.w	r3, r3, #31
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	fa01 f303 	lsl.w	r3, r1, r3
 8003480:	431a      	orrs	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	611a      	str	r2, [r3, #16]
}
 8003486:	bf00      	nop
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003494:	b480      	push	{r7}
 8003496:	b087      	sub	sp, #28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	4a0c      	ldr	r2, [pc, #48]	; (80034d4 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d00e      	beq.n	80034c6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	3360      	adds	r3, #96	; 0x60
 80034ac:	461a      	mov	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	601a      	str	r2, [r3, #0]
  }
}
 80034c6:	bf00      	nop
 80034c8:	371c      	adds	r7, #28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	58026000 	.word	0x58026000

080034d8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	4a0c      	ldr	r2, [pc, #48]	; (8003518 <LL_ADC_SetOffsetSaturation+0x40>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d10e      	bne.n	800350a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3360      	adds	r3, #96	; 0x60
 80034f0:	461a      	mov	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	431a      	orrs	r2, r3
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 800350a:	bf00      	nop
 800350c:	371c      	adds	r7, #28
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	58026000 	.word	0x58026000

0800351c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800351c:	b480      	push	{r7}
 800351e:	b087      	sub	sp, #28
 8003520:	af00      	add	r7, sp, #0
 8003522:	60f8      	str	r0, [r7, #12]
 8003524:	60b9      	str	r1, [r7, #8]
 8003526:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	4a0c      	ldr	r2, [pc, #48]	; (800355c <LL_ADC_SetOffsetSign+0x40>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d10e      	bne.n	800354e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3360      	adds	r3, #96	; 0x60
 8003534:	461a      	mov	r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	431a      	orrs	r2, r3
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 800354e:	bf00      	nop
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	58026000 	.word	0x58026000

08003560 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003560:	b480      	push	{r7}
 8003562:	b087      	sub	sp, #28
 8003564:	af00      	add	r7, sp, #0
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	3360      	adds	r3, #96	; 0x60
 8003570:	461a      	mov	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4a0c      	ldr	r2, [pc, #48]	; (80035b0 <LL_ADC_SetOffsetState+0x50>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d108      	bne.n	8003594 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	431a      	orrs	r2, r3
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003592:	e007      	b.n	80035a4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	431a      	orrs	r2, r3
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	601a      	str	r2, [r3, #0]
}
 80035a4:	bf00      	nop
 80035a6:	371c      	adds	r7, #28
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr
 80035b0:	58026000 	.word	0x58026000

080035b4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d101      	bne.n	80035cc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80035c8:	2301      	movs	r3, #1
 80035ca:	e000      	b.n	80035ce <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80035da:	b480      	push	{r7}
 80035dc:	b087      	sub	sp, #28
 80035de:	af00      	add	r7, sp, #0
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	60b9      	str	r1, [r7, #8]
 80035e4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	3330      	adds	r3, #48	; 0x30
 80035ea:	461a      	mov	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	0a1b      	lsrs	r3, r3, #8
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	4413      	add	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	211f      	movs	r1, #31
 8003606:	fa01 f303 	lsl.w	r3, r1, r3
 800360a:	43db      	mvns	r3, r3
 800360c:	401a      	ands	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	0e9b      	lsrs	r3, r3, #26
 8003612:	f003 011f 	and.w	r1, r3, #31
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f003 031f 	and.w	r3, r3, #31
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	431a      	orrs	r2, r3
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003632:	b480      	push	{r7}
 8003634:	b087      	sub	sp, #28
 8003636:	af00      	add	r7, sp, #0
 8003638:	60f8      	str	r0, [r7, #12]
 800363a:	60b9      	str	r1, [r7, #8]
 800363c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	3314      	adds	r3, #20
 8003642:	461a      	mov	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	0e5b      	lsrs	r3, r3, #25
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	f003 0304 	and.w	r3, r3, #4
 800364e:	4413      	add	r3, r2
 8003650:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	0d1b      	lsrs	r3, r3, #20
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	2107      	movs	r1, #7
 8003660:	fa01 f303 	lsl.w	r3, r1, r3
 8003664:	43db      	mvns	r3, r3
 8003666:	401a      	ands	r2, r3
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	0d1b      	lsrs	r3, r3, #20
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	fa01 f303 	lsl.w	r3, r1, r3
 8003676:	431a      	orrs	r2, r3
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800367c:	bf00      	nop
 800367e:	371c      	adds	r7, #28
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4a1a      	ldr	r2, [pc, #104]	; (8003700 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d115      	bne.n	80036c8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036a8:	43db      	mvns	r3, r3
 80036aa:	401a      	ands	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f003 0318 	and.w	r3, r3, #24
 80036b2:	4914      	ldr	r1, [pc, #80]	; (8003704 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80036b4:	40d9      	lsrs	r1, r3
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	400b      	ands	r3, r1
 80036ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036be:	431a      	orrs	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80036c6:	e014      	b.n	80036f2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036d4:	43db      	mvns	r3, r3
 80036d6:	401a      	ands	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f003 0318 	and.w	r3, r3, #24
 80036de:	4909      	ldr	r1, [pc, #36]	; (8003704 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80036e0:	40d9      	lsrs	r1, r3
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	400b      	ands	r3, r1
 80036e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036ea:	431a      	orrs	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	58026000 	.word	0x58026000
 8003704:	000fffff 	.word	0x000fffff

08003708 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f003 031f 	and.w	r3, r3, #31
}
 8003718:	4618      	mov	r0, r3
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	4b04      	ldr	r3, [pc, #16]	; (8003760 <LL_ADC_DisableDeepPowerDown+0x20>)
 800374e:	4013      	ands	r3, r2
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	6093      	str	r3, [r2, #8]
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr
 8003760:	5fffffc0 	.word	0x5fffffc0

08003764 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003778:	d101      	bne.n	800377e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <LL_ADC_EnableInternalRegulator+0x24>)
 800379a:	4013      	ands	r3, r2
 800379c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	6fffffc0 	.word	0x6fffffc0

080037b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037c8:	d101      	bne.n	80037ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80037ca:	2301      	movs	r3, #1
 80037cc:	e000      	b.n	80037d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80037dc:	b480      	push	{r7}
 80037de:	b083      	sub	sp, #12
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	4b05      	ldr	r3, [pc, #20]	; (8003800 <LL_ADC_Enable+0x24>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	f043 0201 	orr.w	r2, r3, #1
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr
 8003800:	7fffffc0 	.word	0x7fffffc0

08003804 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003804:	b480      	push	{r7}
 8003806:	b083      	sub	sp, #12
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <LL_ADC_Disable+0x24>)
 8003812:	4013      	ands	r3, r2
 8003814:	f043 0202 	orr.w	r2, r3, #2
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	7fffffc0 	.word	0x7fffffc0

0800382c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b01      	cmp	r3, #1
 800383e:	d101      	bne.n	8003844 <LL_ADC_IsEnabled+0x18>
 8003840:	2301      	movs	r3, #1
 8003842:	e000      	b.n	8003846 <LL_ADC_IsEnabled+0x1a>
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b02      	cmp	r3, #2
 8003864:	d101      	bne.n	800386a <LL_ADC_IsDisableOngoing+0x18>
 8003866:	2301      	movs	r3, #1
 8003868:	e000      	b.n	800386c <LL_ADC_IsDisableOngoing+0x1a>
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <LL_ADC_REG_StartConversion+0x24>)
 8003886:	4013      	ands	r3, r2
 8003888:	f043 0204 	orr.w	r2, r3, #4
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr
 800389c:	7fffffc0 	.word	0x7fffffc0

080038a0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	4b05      	ldr	r3, [pc, #20]	; (80038c4 <LL_ADC_REG_StopConversion+0x24>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	f043 0210 	orr.w	r2, r3, #16
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	7fffffc0 	.word	0x7fffffc0

080038c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d101      	bne.n	80038e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	370c      	adds	r7, #12
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
	...

080038f0 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	4b05      	ldr	r3, [pc, #20]	; (8003914 <LL_ADC_INJ_StopConversion+0x24>)
 80038fe:	4013      	ands	r3, r2
 8003900:	f043 0220 	orr.w	r2, r3, #32
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	7fffffc0 	.word	0x7fffffc0

08003918 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b08      	cmp	r3, #8
 800392a:	d101      	bne.n	8003930 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003940:	b590      	push	{r4, r7, lr}
 8003942:	b089      	sub	sp, #36	; 0x24
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800394c:	2300      	movs	r3, #0
 800394e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d101      	bne.n	800395a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e1ee      	b.n	8003d38 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003964:	2b00      	cmp	r3, #0
 8003966:	d109      	bne.n	800397c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f7fe fb9d 	bl	80020a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2200      	movs	r2, #0
 8003978:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7ff feef 	bl	8003764 <LL_ADC_IsDeepPowerDownEnabled>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d004      	beq.n	8003996 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fed5 	bl	8003740 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff ff0a 	bl	80037b4 <LL_ADC_IsInternalRegulatorEnabled>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d114      	bne.n	80039d0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7ff feee 	bl	800378c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039b0:	4b8e      	ldr	r3, [pc, #568]	; (8003bec <HAL_ADC_Init+0x2ac>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	099b      	lsrs	r3, r3, #6
 80039b6:	4a8e      	ldr	r2, [pc, #568]	; (8003bf0 <HAL_ADC_Init+0x2b0>)
 80039b8:	fba2 2303 	umull	r2, r3, r2, r3
 80039bc:	099b      	lsrs	r3, r3, #6
 80039be:	3301      	adds	r3, #1
 80039c0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039c2:	e002      	b.n	80039ca <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1f9      	bne.n	80039c4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7ff feed 	bl	80037b4 <LL_ADC_IsInternalRegulatorEnabled>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d10d      	bne.n	80039fc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039e4:	f043 0210 	orr.w	r2, r3, #16
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80039f0:	f043 0201 	orr.w	r2, r3, #1
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4618      	mov	r0, r3
 8003a02:	f7ff ff61 	bl	80038c8 <LL_ADC_REG_IsConversionOngoing>
 8003a06:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f040 8188 	bne.w	8003d26 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f040 8184 	bne.w	8003d26 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a22:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003a26:	f043 0202 	orr.w	r2, r3, #2
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff fefa 	bl	800382c <LL_ADC_IsEnabled>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d136      	bne.n	8003aac <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a6c      	ldr	r2, [pc, #432]	; (8003bf4 <HAL_ADC_Init+0x2b4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_ADC_Init+0x112>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a6a      	ldr	r2, [pc, #424]	; (8003bf8 <HAL_ADC_Init+0x2b8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d10e      	bne.n	8003a70 <HAL_ADC_Init+0x130>
 8003a52:	4868      	ldr	r0, [pc, #416]	; (8003bf4 <HAL_ADC_Init+0x2b4>)
 8003a54:	f7ff feea 	bl	800382c <LL_ADC_IsEnabled>
 8003a58:	4604      	mov	r4, r0
 8003a5a:	4867      	ldr	r0, [pc, #412]	; (8003bf8 <HAL_ADC_Init+0x2b8>)
 8003a5c:	f7ff fee6 	bl	800382c <LL_ADC_IsEnabled>
 8003a60:	4603      	mov	r3, r0
 8003a62:	4323      	orrs	r3, r4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	bf0c      	ite	eq
 8003a68:	2301      	moveq	r3, #1
 8003a6a:	2300      	movne	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	e008      	b.n	8003a82 <HAL_ADC_Init+0x142>
 8003a70:	4862      	ldr	r0, [pc, #392]	; (8003bfc <HAL_ADC_Init+0x2bc>)
 8003a72:	f7ff fedb 	bl	800382c <LL_ADC_IsEnabled>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	bf0c      	ite	eq
 8003a7c:	2301      	moveq	r3, #1
 8003a7e:	2300      	movne	r3, #0
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d012      	beq.n	8003aac <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a5a      	ldr	r2, [pc, #360]	; (8003bf4 <HAL_ADC_Init+0x2b4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d004      	beq.n	8003a9a <HAL_ADC_Init+0x15a>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a58      	ldr	r2, [pc, #352]	; (8003bf8 <HAL_ADC_Init+0x2b8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d101      	bne.n	8003a9e <HAL_ADC_Init+0x15e>
 8003a9a:	4a59      	ldr	r2, [pc, #356]	; (8003c00 <HAL_ADC_Init+0x2c0>)
 8003a9c:	e000      	b.n	8003aa0 <HAL_ADC_Init+0x160>
 8003a9e:	4a59      	ldr	r2, [pc, #356]	; (8003c04 <HAL_ADC_Init+0x2c4>)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f7ff fc5e 	bl	8003368 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a52      	ldr	r2, [pc, #328]	; (8003bfc <HAL_ADC_Init+0x2bc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d129      	bne.n	8003b0a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	7e5b      	ldrb	r3, [r3, #25]
 8003aba:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003ac0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8003ac6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d013      	beq.n	8003af8 <HAL_ADC_Init+0x1b8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	2b0c      	cmp	r3, #12
 8003ad6:	d00d      	beq.n	8003af4 <HAL_ADC_Init+0x1b4>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	2b1c      	cmp	r3, #28
 8003ade:	d007      	beq.n	8003af0 <HAL_ADC_Init+0x1b0>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	2b18      	cmp	r3, #24
 8003ae6:	d101      	bne.n	8003aec <HAL_ADC_Init+0x1ac>
 8003ae8:	2318      	movs	r3, #24
 8003aea:	e006      	b.n	8003afa <HAL_ADC_Init+0x1ba>
 8003aec:	2300      	movs	r3, #0
 8003aee:	e004      	b.n	8003afa <HAL_ADC_Init+0x1ba>
 8003af0:	2310      	movs	r3, #16
 8003af2:	e002      	b.n	8003afa <HAL_ADC_Init+0x1ba>
 8003af4:	2308      	movs	r3, #8
 8003af6:	e000      	b.n	8003afa <HAL_ADC_Init+0x1ba>
 8003af8:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8003afa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b02:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
 8003b08:	e00e      	b.n	8003b28 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	7e5b      	ldrb	r3, [r3, #25]
 8003b0e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b14:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8003b1a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b22:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d106      	bne.n	8003b40 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	3b01      	subs	r3, #1
 8003b38:	045b      	lsls	r3, r3, #17
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d009      	beq.n	8003b5c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b54:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a26      	ldr	r2, [pc, #152]	; (8003bfc <HAL_ADC_Init+0x2bc>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d115      	bne.n	8003b92 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	4b26      	ldr	r3, [pc, #152]	; (8003c08 <HAL_ADC_Init+0x2c8>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	6812      	ldr	r2, [r2, #0]
 8003b74:	69b9      	ldr	r1, [r7, #24]
 8003b76:	430b      	orrs	r3, r1
 8003b78:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	430a      	orrs	r2, r1
 8003b8e:	611a      	str	r2, [r3, #16]
 8003b90:	e009      	b.n	8003ba6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	4b1c      	ldr	r3, [pc, #112]	; (8003c0c <HAL_ADC_Init+0x2cc>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	69b9      	ldr	r1, [r7, #24]
 8003ba2:	430b      	orrs	r3, r1
 8003ba4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7ff fe8c 	bl	80038c8 <LL_ADC_REG_IsConversionOngoing>
 8003bb0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7ff feae 	bl	8003918 <LL_ADC_INJ_IsConversionOngoing>
 8003bbc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f040 808e 	bne.w	8003ce2 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f040 808a 	bne.w	8003ce2 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <HAL_ADC_Init+0x2bc>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d11b      	bne.n	8003c10 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	7e1b      	ldrb	r3, [r3, #24]
 8003bdc:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003be4:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	e018      	b.n	8003c1e <HAL_ADC_Init+0x2de>
 8003bec:	24000000 	.word	0x24000000
 8003bf0:	053e2d63 	.word	0x053e2d63
 8003bf4:	40022000 	.word	0x40022000
 8003bf8:	40022100 	.word	0x40022100
 8003bfc:	58026000 	.word	0x58026000
 8003c00:	40022300 	.word	0x40022300
 8003c04:	58026300 	.word	0x58026300
 8003c08:	fff04007 	.word	0xfff04007
 8003c0c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	7e1b      	ldrb	r3, [r3, #24]
 8003c14:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	4b46      	ldr	r3, [pc, #280]	; (8003d40 <HAL_ADC_Init+0x400>)
 8003c26:	4013      	ands	r3, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	69b9      	ldr	r1, [r7, #24]
 8003c2e:	430b      	orrs	r3, r1
 8003c30:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d137      	bne.n	8003cac <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c40:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a3f      	ldr	r2, [pc, #252]	; (8003d44 <HAL_ADC_Init+0x404>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d116      	bne.n	8003c7a <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	4b3d      	ldr	r3, [pc, #244]	; (8003d48 <HAL_ADC_Init+0x408>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003c5e:	4311      	orrs	r1, r2
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c64:	4311      	orrs	r1, r2
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0201 	orr.w	r2, r2, #1
 8003c76:	611a      	str	r2, [r3, #16]
 8003c78:	e020      	b.n	8003cbc <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	691a      	ldr	r2, [r3, #16]
 8003c80:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <HAL_ADC_Init+0x40c>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003c88:	3a01      	subs	r2, #1
 8003c8a:	0411      	lsls	r1, r2, #16
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003c90:	4311      	orrs	r1, r2
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c96:	4311      	orrs	r1, r2
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f042 0201 	orr.w	r2, r2, #1
 8003ca8:	611a      	str	r2, [r3, #16]
 8003caa:	e007      	b.n	8003cbc <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 0201 	bic.w	r2, r2, #1
 8003cba:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	430a      	orrs	r2, r1
 8003cd0:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a1b      	ldr	r2, [pc, #108]	; (8003d44 <HAL_ADC_Init+0x404>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d002      	beq.n	8003ce2 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f001 f909 	bl	8004ef4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d10c      	bne.n	8003d04 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	f023 010f 	bic.w	r1, r3, #15
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	1e5a      	subs	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	631a      	str	r2, [r3, #48]	; 0x30
 8003d02:	e007      	b.n	8003d14 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 020f 	bic.w	r2, r2, #15
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d18:	f023 0303 	bic.w	r3, r3, #3
 8003d1c:	f043 0201 	orr.w	r2, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	661a      	str	r2, [r3, #96]	; 0x60
 8003d24:	e007      	b.n	8003d36 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d2a:	f043 0210 	orr.w	r2, r3, #16
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d36:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3724      	adds	r7, #36	; 0x24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd90      	pop	{r4, r7, pc}
 8003d40:	ffffbffc 	.word	0xffffbffc
 8003d44:	58026000 	.word	0x58026000
 8003d48:	fc00f81f 	.word	0xfc00f81f
 8003d4c:	fc00f81e 	.word	0xfc00f81e

08003d50 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a5c      	ldr	r2, [pc, #368]	; (8003ed0 <HAL_ADC_Start+0x180>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d004      	beq.n	8003d6c <HAL_ADC_Start+0x1c>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a5b      	ldr	r2, [pc, #364]	; (8003ed4 <HAL_ADC_Start+0x184>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d101      	bne.n	8003d70 <HAL_ADC_Start+0x20>
 8003d6c:	4b5a      	ldr	r3, [pc, #360]	; (8003ed8 <HAL_ADC_Start+0x188>)
 8003d6e:	e000      	b.n	8003d72 <HAL_ADC_Start+0x22>
 8003d70:	4b5a      	ldr	r3, [pc, #360]	; (8003edc <HAL_ADC_Start+0x18c>)
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff fcc8 	bl	8003708 <LL_ADC_GetMultimode>
 8003d78:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7ff fda2 	bl	80038c8 <LL_ADC_REG_IsConversionOngoing>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	f040 809a 	bne.w	8003ec0 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_ADC_Start+0x4a>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e095      	b.n	8003ec6 <HAL_ADC_Start+0x176>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 ffbc 	bl	8004d20 <ADC_Enable>
 8003da8:	4603      	mov	r3, r0
 8003daa:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003dac:	7dfb      	ldrb	r3, [r7, #23]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f040 8081 	bne.w	8003eb6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003db8:	4b49      	ldr	r3, [pc, #292]	; (8003ee0 <HAL_ADC_Start+0x190>)
 8003dba:	4013      	ands	r3, r2
 8003dbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a42      	ldr	r2, [pc, #264]	; (8003ed4 <HAL_ADC_Start+0x184>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d002      	beq.n	8003dd4 <HAL_ADC_Start+0x84>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	e000      	b.n	8003dd6 <HAL_ADC_Start+0x86>
 8003dd4:	4b3e      	ldr	r3, [pc, #248]	; (8003ed0 <HAL_ADC_Start+0x180>)
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d002      	beq.n	8003de4 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d105      	bne.n	8003df0 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003df4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dfc:	d106      	bne.n	8003e0c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e02:	f023 0206 	bic.w	r2, r3, #6
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	665a      	str	r2, [r3, #100]	; 0x64
 8003e0a:	e002      	b.n	8003e12 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	221c      	movs	r2, #28
 8003e18:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a2b      	ldr	r2, [pc, #172]	; (8003ed4 <HAL_ADC_Start+0x184>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d002      	beq.n	8003e32 <HAL_ADC_Start+0xe2>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	e000      	b.n	8003e34 <HAL_ADC_Start+0xe4>
 8003e32:	4b27      	ldr	r3, [pc, #156]	; (8003ed0 <HAL_ADC_Start+0x180>)
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d008      	beq.n	8003e4e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d005      	beq.n	8003e4e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	2b05      	cmp	r3, #5
 8003e46:	d002      	beq.n	8003e4e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	2b09      	cmp	r3, #9
 8003e4c:	d114      	bne.n	8003e78 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d007      	beq.n	8003e6c <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e60:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003e64:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fd01 	bl	8003878 <LL_ADC_REG_StartConversion>
 8003e76:	e025      	b.n	8003ec4 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	661a      	str	r2, [r3, #96]	; 0x60
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a12      	ldr	r2, [pc, #72]	; (8003ed4 <HAL_ADC_Start+0x184>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d002      	beq.n	8003e94 <HAL_ADC_Start+0x144>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	e000      	b.n	8003e96 <HAL_ADC_Start+0x146>
 8003e94:	4b0e      	ldr	r3, [pc, #56]	; (8003ed0 <HAL_ADC_Start+0x180>)
 8003e96:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00f      	beq.n	8003ec4 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003eac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	661a      	str	r2, [r3, #96]	; 0x60
 8003eb4:	e006      	b.n	8003ec4 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8003ebe:	e001      	b.n	8003ec4 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3718      	adds	r7, #24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	40022000 	.word	0x40022000
 8003ed4:	40022100 	.word	0x40022100
 8003ed8:	40022300 	.word	0x40022300
 8003edc:	58026300 	.word	0x58026300
 8003ee0:	fffff0fe 	.word	0xfffff0fe

08003ee4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d101      	bne.n	8003efa <HAL_ADC_Stop+0x16>
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	e021      	b.n	8003f3e <HAL_ADC_Stop+0x5a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003f02:	2103      	movs	r1, #3
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fe4f 	bl	8004ba8 <ADC_ConversionStop>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10f      	bne.n	8003f34 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f000 ff8d 	bl	8004e34 <ADC_Disable>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d107      	bne.n	8003f34 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f28:	4b07      	ldr	r3, [pc, #28]	; (8003f48 <HAL_ADC_Stop+0x64>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	f043 0201 	orr.w	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	661a      	str	r2, [r3, #96]	; 0x60
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8003f3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3710      	adds	r7, #16
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop
 8003f48:	ffffeefe 	.word	0xffffeefe

08003f4c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a72      	ldr	r2, [pc, #456]	; (8004124 <HAL_ADC_PollForConversion+0x1d8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d004      	beq.n	8003f6a <HAL_ADC_PollForConversion+0x1e>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a70      	ldr	r2, [pc, #448]	; (8004128 <HAL_ADC_PollForConversion+0x1dc>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d101      	bne.n	8003f6e <HAL_ADC_PollForConversion+0x22>
 8003f6a:	4b70      	ldr	r3, [pc, #448]	; (800412c <HAL_ADC_PollForConversion+0x1e0>)
 8003f6c:	e000      	b.n	8003f70 <HAL_ADC_PollForConversion+0x24>
 8003f6e:	4b70      	ldr	r3, [pc, #448]	; (8004130 <HAL_ADC_PollForConversion+0x1e4>)
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7ff fbc9 	bl	8003708 <LL_ADC_GetMultimode>
 8003f76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	2b08      	cmp	r3, #8
 8003f7e:	d102      	bne.n	8003f86 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003f80:	2308      	movs	r3, #8
 8003f82:	61fb      	str	r3, [r7, #28]
 8003f84:	e037      	b.n	8003ff6 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d005      	beq.n	8003f98 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	2b05      	cmp	r3, #5
 8003f90:	d002      	beq.n	8003f98 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2b09      	cmp	r3, #9
 8003f96:	d111      	bne.n	8003fbc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d007      	beq.n	8003fb6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003faa:	f043 0220 	orr.w	r2, r3, #32
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e0b1      	b.n	800411a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003fb6:	2304      	movs	r3, #4
 8003fb8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003fba:	e01c      	b.n	8003ff6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a58      	ldr	r2, [pc, #352]	; (8004124 <HAL_ADC_PollForConversion+0x1d8>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_ADC_PollForConversion+0x84>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a57      	ldr	r2, [pc, #348]	; (8004128 <HAL_ADC_PollForConversion+0x1dc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d101      	bne.n	8003fd4 <HAL_ADC_PollForConversion+0x88>
 8003fd0:	4b56      	ldr	r3, [pc, #344]	; (800412c <HAL_ADC_PollForConversion+0x1e0>)
 8003fd2:	e000      	b.n	8003fd6 <HAL_ADC_PollForConversion+0x8a>
 8003fd4:	4b56      	ldr	r3, [pc, #344]	; (8004130 <HAL_ADC_PollForConversion+0x1e4>)
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff fba4 	bl	8003724 <LL_ADC_GetMultiDMATransfer>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d007      	beq.n	8003ff2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fe6:	f043 0220 	orr.w	r2, r3, #32
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	661a      	str	r2, [r3, #96]	; 0x60
        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e093      	b.n	800411a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003ff2:	2304      	movs	r3, #4
 8003ff4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003ff6:	f7ff f971 	bl	80032dc <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003ffc:	e021      	b.n	8004042 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004004:	d01d      	beq.n	8004042 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8004006:	f7ff f969 	bl	80032dc <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	683a      	ldr	r2, [r7, #0]
 8004012:	429a      	cmp	r2, r3
 8004014:	d302      	bcc.n	800401c <HAL_ADC_PollForConversion+0xd0>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d112      	bne.n	8004042 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	4013      	ands	r3, r2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10b      	bne.n	8004042 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800402e:	f043 0204 	orr.w	r2, r3, #4
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	661a      	str	r2, [r3, #96]	; 0x60

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

          return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e06b      	b.n	800411a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	4013      	ands	r3, r2
 800404c:	2b00      	cmp	r3, #0
 800404e:	d0d6      	beq.n	8003ffe <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004054:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f7ff faa7 	bl	80035b4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d01c      	beq.n	80040a6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	7e5b      	ldrb	r3, [r3, #25]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d118      	bne.n	80040a6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b08      	cmp	r3, #8
 8004080:	d111      	bne.n	80040a6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004086:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	661a      	str	r2, [r3, #96]	; 0x60

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d105      	bne.n	80040a6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800409e:	f043 0201 	orr.w	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a1f      	ldr	r2, [pc, #124]	; (8004128 <HAL_ADC_PollForConversion+0x1dc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d002      	beq.n	80040b6 <HAL_ADC_PollForConversion+0x16a>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	e000      	b.n	80040b8 <HAL_ADC_PollForConversion+0x16c>
 80040b6:	4b1b      	ldr	r3, [pc, #108]	; (8004124 <HAL_ADC_PollForConversion+0x1d8>)
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	4293      	cmp	r3, r2
 80040be:	d008      	beq.n	80040d2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	2b05      	cmp	r3, #5
 80040ca:	d002      	beq.n	80040d2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	2b09      	cmp	r3, #9
 80040d0:	d104      	bne.n	80040dc <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	61bb      	str	r3, [r7, #24]
 80040da:	e00c      	b.n	80040f6 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a11      	ldr	r2, [pc, #68]	; (8004128 <HAL_ADC_PollForConversion+0x1dc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d002      	beq.n	80040ec <HAL_ADC_PollForConversion+0x1a0>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	e000      	b.n	80040ee <HAL_ADC_PollForConversion+0x1a2>
 80040ec:	4b0d      	ldr	r3, [pc, #52]	; (8004124 <HAL_ADC_PollForConversion+0x1d8>)
 80040ee:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d104      	bne.n	8004106 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2208      	movs	r2, #8
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	e008      	b.n	8004118 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8004106:	69bb      	ldr	r3, [r7, #24]
 8004108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d103      	bne.n	8004118 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	220c      	movs	r2, #12
 8004116:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3720      	adds	r7, #32
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	40022000 	.word	0x40022000
 8004128:	40022100 	.word	0x40022100
 800412c:	40022300 	.word	0x40022300
 8004130:	58026300 	.word	0x58026300

08004134 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004142:	4618      	mov	r0, r3
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr
	...

08004150 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004150:	b590      	push	{r4, r7, lr}
 8004152:	b0b9      	sub	sp, #228	; 0xe4
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004160:	2300      	movs	r3, #0
 8004162:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800416a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4aa9      	ldr	r2, [pc, #676]	; (8004418 <HAL_ADC_ConfigChannel+0x2c8>)
 8004172:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800417a:	2b01      	cmp	r3, #1
 800417c:	d102      	bne.n	8004184 <HAL_ADC_ConfigChannel+0x34>
 800417e:	2302      	movs	r3, #2
 8004180:	f000 bcfa 	b.w	8004b78 <HAL_ADC_ConfigChannel+0xa28>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f7ff fb99 	bl	80038c8 <LL_ADC_REG_IsConversionOngoing>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	f040 84de 	bne.w	8004b5a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a9e      	ldr	r2, [pc, #632]	; (800441c <HAL_ADC_ConfigChannel+0x2cc>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d033      	beq.n	8004210 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d108      	bne.n	80041c6 <HAL_ADC_ConfigChannel+0x76>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	0e9b      	lsrs	r3, r3, #26
 80041ba:	f003 031f 	and.w	r3, r3, #31
 80041be:	2201      	movs	r2, #1
 80041c0:	fa02 f303 	lsl.w	r3, r2, r3
 80041c4:	e01d      	b.n	8004202 <HAL_ADC_ConfigChannel+0xb2>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80041d2:	fa93 f3a3 	rbit	r3, r3
 80041d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80041da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80041de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80041e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80041ea:	2320      	movs	r3, #32
 80041ec:	e004      	b.n	80041f8 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80041ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041f2:	fab3 f383 	clz	r3, r3
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	f003 031f 	and.w	r3, r3, #31
 80041fc:	2201      	movs	r2, #1
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	6812      	ldr	r2, [r2, #0]
 8004206:	69d1      	ldr	r1, [r2, #28]
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	6812      	ldr	r2, [r2, #0]
 800420c:	430b      	orrs	r3, r1
 800420e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	6859      	ldr	r1, [r3, #4]
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	f7ff f9dc 	bl	80035da <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff fb4e 	bl	80038c8 <LL_ADC_REG_IsConversionOngoing>
 800422c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4618      	mov	r0, r3
 8004236:	f7ff fb6f 	bl	8003918 <LL_ADC_INJ_IsConversionOngoing>
 800423a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800423e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004242:	2b00      	cmp	r3, #0
 8004244:	f040 8270 	bne.w	8004728 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004248:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800424c:	2b00      	cmp	r3, #0
 800424e:	f040 826b 	bne.w	8004728 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6818      	ldr	r0, [r3, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	6819      	ldr	r1, [r3, #0]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	461a      	mov	r2, r3
 8004260:	f7ff f9e7 	bl	8003632 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a6c      	ldr	r2, [pc, #432]	; (800441c <HAL_ADC_ConfigChannel+0x2cc>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d10d      	bne.n	800428a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	695a      	ldr	r2, [r3, #20]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	08db      	lsrs	r3, r3, #3
 800427a:	f003 0303 	and.w	r3, r3, #3
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004288:	e032      	b.n	80042f0 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800428a:	4b65      	ldr	r3, [pc, #404]	; (8004420 <HAL_ADC_ConfigChannel+0x2d0>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004296:	d10b      	bne.n	80042b0 <HAL_ADC_ConfigChannel+0x160>
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	695a      	ldr	r2, [r3, #20]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	089b      	lsrs	r3, r3, #2
 80042a4:	f003 0307 	and.w	r3, r3, #7
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	e01d      	b.n	80042ec <HAL_ADC_ConfigChannel+0x19c>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f003 0310 	and.w	r3, r3, #16
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10b      	bne.n	80042d6 <HAL_ADC_ConfigChannel+0x186>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	695a      	ldr	r2, [r3, #20]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	089b      	lsrs	r3, r3, #2
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	fa02 f303 	lsl.w	r3, r2, r3
 80042d4:	e00a      	b.n	80042ec <HAL_ADC_ConfigChannel+0x19c>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	695a      	ldr	r2, [r3, #20]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	089b      	lsrs	r3, r3, #2
 80042e2:	f003 0304 	and.w	r3, r3, #4
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	2b04      	cmp	r3, #4
 80042f6:	d048      	beq.n	800438a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6818      	ldr	r0, [r3, #0]
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	6919      	ldr	r1, [r3, #16]
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004308:	f7ff f862 	bl	80033d0 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a42      	ldr	r2, [pc, #264]	; (800441c <HAL_ADC_ConfigChannel+0x2cc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d119      	bne.n	800434a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	6919      	ldr	r1, [r3, #16]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	461a      	mov	r2, r3
 8004324:	f7ff f8fa 	bl	800351c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6818      	ldr	r0, [r3, #0]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	6919      	ldr	r1, [r3, #16]
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d102      	bne.n	8004340 <HAL_ADC_ConfigChannel+0x1f0>
 800433a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800433e:	e000      	b.n	8004342 <HAL_ADC_ConfigChannel+0x1f2>
 8004340:	2300      	movs	r3, #0
 8004342:	461a      	mov	r2, r3
 8004344:	f7ff f8c8 	bl	80034d8 <LL_ADC_SetOffsetSaturation>
 8004348:	e1ee      	b.n	8004728 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	6919      	ldr	r1, [r3, #16]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004358:	2b01      	cmp	r3, #1
 800435a:	d102      	bne.n	8004362 <HAL_ADC_ConfigChannel+0x212>
 800435c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004360:	e000      	b.n	8004364 <HAL_ADC_ConfigChannel+0x214>
 8004362:	2300      	movs	r3, #0
 8004364:	461a      	mov	r2, r3
 8004366:	f7ff f895 	bl	8003494 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6818      	ldr	r0, [r3, #0]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6919      	ldr	r1, [r3, #16]
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	7e1b      	ldrb	r3, [r3, #24]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d102      	bne.n	8004380 <HAL_ADC_ConfigChannel+0x230>
 800437a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800437e:	e000      	b.n	8004382 <HAL_ADC_ConfigChannel+0x232>
 8004380:	2300      	movs	r3, #0
 8004382:	461a      	mov	r2, r3
 8004384:	f7ff f86c 	bl	8003460 <LL_ADC_SetDataRightShift>
 8004388:	e1ce      	b.n	8004728 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a23      	ldr	r2, [pc, #140]	; (800441c <HAL_ADC_ConfigChannel+0x2cc>)
 8004390:	4293      	cmp	r3, r2
 8004392:	f040 8181 	bne.w	8004698 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2100      	movs	r1, #0
 800439c:	4618      	mov	r0, r3
 800439e:	f7ff f849 	bl	8003434 <LL_ADC_GetOffsetChannel>
 80043a2:	4603      	mov	r3, r0
 80043a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10a      	bne.n	80043c2 <HAL_ADC_ConfigChannel+0x272>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2100      	movs	r1, #0
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7ff f83e 	bl	8003434 <LL_ADC_GetOffsetChannel>
 80043b8:	4603      	mov	r3, r0
 80043ba:	0e9b      	lsrs	r3, r3, #26
 80043bc:	f003 021f 	and.w	r2, r3, #31
 80043c0:	e01e      	b.n	8004400 <HAL_ADC_ConfigChannel+0x2b0>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2100      	movs	r1, #0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff f833 	bl	8003434 <LL_ADC_GetOffsetChannel>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80043d8:	fa93 f3a3 	rbit	r3, r3
 80043dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80043e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80043e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80043e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d101      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80043f0:	2320      	movs	r3, #32
 80043f2:	e004      	b.n	80043fe <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80043f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80043f8:	fab3 f383 	clz	r3, r3
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	461a      	mov	r2, r3
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10b      	bne.n	8004424 <HAL_ADC_ConfigChannel+0x2d4>
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	0e9b      	lsrs	r3, r3, #26
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	e01e      	b.n	8004456 <HAL_ADC_ConfigChannel+0x306>
 8004418:	47ff0000 	.word	0x47ff0000
 800441c:	58026000 	.word	0x58026000
 8004420:	5c001000 	.word	0x5c001000
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004430:	fa93 f3a3 	rbit	r3, r3
 8004434:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004438:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800443c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004440:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004448:	2320      	movs	r3, #32
 800444a:	e004      	b.n	8004456 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 800444c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004450:	fab3 f383 	clz	r3, r3
 8004454:	b2db      	uxtb	r3, r3
 8004456:	429a      	cmp	r2, r3
 8004458:	d106      	bne.n	8004468 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2200      	movs	r2, #0
 8004460:	2100      	movs	r1, #0
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff f87c 	bl	8003560 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2101      	movs	r1, #1
 800446e:	4618      	mov	r0, r3
 8004470:	f7fe ffe0 	bl	8003434 <LL_ADC_GetOffsetChannel>
 8004474:	4603      	mov	r3, r0
 8004476:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <HAL_ADC_ConfigChannel+0x344>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2101      	movs	r1, #1
 8004484:	4618      	mov	r0, r3
 8004486:	f7fe ffd5 	bl	8003434 <LL_ADC_GetOffsetChannel>
 800448a:	4603      	mov	r3, r0
 800448c:	0e9b      	lsrs	r3, r3, #26
 800448e:	f003 021f 	and.w	r2, r3, #31
 8004492:	e01e      	b.n	80044d2 <HAL_ADC_ConfigChannel+0x382>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2101      	movs	r1, #1
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe ffca 	bl	8003434 <LL_ADC_GetOffsetChannel>
 80044a0:	4603      	mov	r3, r0
 80044a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80044aa:	fa93 f3a3 	rbit	r3, r3
 80044ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80044b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80044b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80044ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80044c2:	2320      	movs	r3, #32
 80044c4:	e004      	b.n	80044d0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80044c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80044ca:	fab3 f383 	clz	r3, r3
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	461a      	mov	r2, r3
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d105      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x39a>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	0e9b      	lsrs	r3, r3, #26
 80044e4:	f003 031f 	and.w	r3, r3, #31
 80044e8:	e018      	b.n	800451c <HAL_ADC_ConfigChannel+0x3cc>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80044f6:	fa93 f3a3 	rbit	r3, r3
 80044fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80044fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004502:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004506:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800450e:	2320      	movs	r3, #32
 8004510:	e004      	b.n	800451c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8004512:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004516:	fab3 f383 	clz	r3, r3
 800451a:	b2db      	uxtb	r3, r3
 800451c:	429a      	cmp	r2, r3
 800451e:	d106      	bne.n	800452e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2200      	movs	r2, #0
 8004526:	2101      	movs	r1, #1
 8004528:	4618      	mov	r0, r3
 800452a:	f7ff f819 	bl	8003560 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2102      	movs	r1, #2
 8004534:	4618      	mov	r0, r3
 8004536:	f7fe ff7d 	bl	8003434 <LL_ADC_GetOffsetChannel>
 800453a:	4603      	mov	r3, r0
 800453c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <HAL_ADC_ConfigChannel+0x40a>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2102      	movs	r1, #2
 800454a:	4618      	mov	r0, r3
 800454c:	f7fe ff72 	bl	8003434 <LL_ADC_GetOffsetChannel>
 8004550:	4603      	mov	r3, r0
 8004552:	0e9b      	lsrs	r3, r3, #26
 8004554:	f003 021f 	and.w	r2, r3, #31
 8004558:	e01e      	b.n	8004598 <HAL_ADC_ConfigChannel+0x448>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2102      	movs	r1, #2
 8004560:	4618      	mov	r0, r3
 8004562:	f7fe ff67 	bl	8003434 <LL_ADC_GetOffsetChannel>
 8004566:	4603      	mov	r3, r0
 8004568:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004570:	fa93 f3a3 	rbit	r3, r3
 8004574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004578:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800457c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004580:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004588:	2320      	movs	r3, #32
 800458a:	e004      	b.n	8004596 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 800458c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004590:	fab3 f383 	clz	r3, r3
 8004594:	b2db      	uxtb	r3, r3
 8004596:	461a      	mov	r2, r3
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d105      	bne.n	80045b0 <HAL_ADC_ConfigChannel+0x460>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	0e9b      	lsrs	r3, r3, #26
 80045aa:	f003 031f 	and.w	r3, r3, #31
 80045ae:	e014      	b.n	80045da <HAL_ADC_ConfigChannel+0x48a>
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80045b8:	fa93 f3a3 	rbit	r3, r3
 80045bc:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80045be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80045c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80045cc:	2320      	movs	r3, #32
 80045ce:	e004      	b.n	80045da <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80045d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80045d4:	fab3 f383 	clz	r3, r3
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	429a      	cmp	r2, r3
 80045dc:	d106      	bne.n	80045ec <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2200      	movs	r2, #0
 80045e4:	2102      	movs	r1, #2
 80045e6:	4618      	mov	r0, r3
 80045e8:	f7fe ffba 	bl	8003560 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	2103      	movs	r1, #3
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe ff1e 	bl	8003434 <LL_ADC_GetOffsetChannel>
 80045f8:	4603      	mov	r3, r0
 80045fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <HAL_ADC_ConfigChannel+0x4c8>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2103      	movs	r1, #3
 8004608:	4618      	mov	r0, r3
 800460a:	f7fe ff13 	bl	8003434 <LL_ADC_GetOffsetChannel>
 800460e:	4603      	mov	r3, r0
 8004610:	0e9b      	lsrs	r3, r3, #26
 8004612:	f003 021f 	and.w	r2, r3, #31
 8004616:	e017      	b.n	8004648 <HAL_ADC_ConfigChannel+0x4f8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2103      	movs	r1, #3
 800461e:	4618      	mov	r0, r3
 8004620:	f7fe ff08 	bl	8003434 <LL_ADC_GetOffsetChannel>
 8004624:	4603      	mov	r3, r0
 8004626:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004628:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800462a:	fa93 f3a3 	rbit	r3, r3
 800462e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004630:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004632:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800463a:	2320      	movs	r3, #32
 800463c:	e003      	b.n	8004646 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800463e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004640:	fab3 f383 	clz	r3, r3
 8004644:	b2db      	uxtb	r3, r3
 8004646:	461a      	mov	r2, r3
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004650:	2b00      	cmp	r3, #0
 8004652:	d105      	bne.n	8004660 <HAL_ADC_ConfigChannel+0x510>
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	0e9b      	lsrs	r3, r3, #26
 800465a:	f003 031f 	and.w	r3, r3, #31
 800465e:	e011      	b.n	8004684 <HAL_ADC_ConfigChannel+0x534>
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004666:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004668:	fa93 f3a3 	rbit	r3, r3
 800466c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 800466e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004670:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004672:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004674:	2b00      	cmp	r3, #0
 8004676:	d101      	bne.n	800467c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004678:	2320      	movs	r3, #32
 800467a:	e003      	b.n	8004684 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 800467c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800467e:	fab3 f383 	clz	r3, r3
 8004682:	b2db      	uxtb	r3, r3
 8004684:	429a      	cmp	r2, r3
 8004686:	d14f      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2200      	movs	r2, #0
 800468e:	2103      	movs	r1, #3
 8004690:	4618      	mov	r0, r3
 8004692:	f7fe ff65 	bl	8003560 <LL_ADC_SetOffsetState>
 8004696:	e047      	b.n	8004728 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	069b      	lsls	r3, r3, #26
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d107      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046ba:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	069b      	lsls	r3, r3, #26
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d107      	bne.n	80046e0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046de:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	069b      	lsls	r3, r3, #26
 80046f0:	429a      	cmp	r2, r3
 80046f2:	d107      	bne.n	8004704 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004702:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800470a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	069b      	lsls	r3, r3, #26
 8004714:	429a      	cmp	r2, r3
 8004716:	d107      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004726:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff f87d 	bl	800382c <LL_ADC_IsEnabled>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	f040 8219 	bne.w	8004b6c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	461a      	mov	r2, r3
 8004748:	f7fe ff9e 	bl	8003688 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4aa1      	ldr	r2, [pc, #644]	; (80049d8 <HAL_ADC_ConfigChannel+0x888>)
 8004752:	4293      	cmp	r3, r2
 8004754:	f040 812e 	bne.w	80049b4 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10b      	bne.n	8004780 <HAL_ADC_ConfigChannel+0x630>
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	0e9b      	lsrs	r3, r3, #26
 800476e:	3301      	adds	r3, #1
 8004770:	f003 031f 	and.w	r3, r3, #31
 8004774:	2b09      	cmp	r3, #9
 8004776:	bf94      	ite	ls
 8004778:	2301      	movls	r3, #1
 800477a:	2300      	movhi	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	e019      	b.n	80047b4 <HAL_ADC_ConfigChannel+0x664>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004788:	fa93 f3a3 	rbit	r3, r3
 800478c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800478e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004790:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004794:	2b00      	cmp	r3, #0
 8004796:	d101      	bne.n	800479c <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004798:	2320      	movs	r3, #32
 800479a:	e003      	b.n	80047a4 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 800479c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800479e:	fab3 f383 	clz	r3, r3
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	3301      	adds	r3, #1
 80047a6:	f003 031f 	and.w	r3, r3, #31
 80047aa:	2b09      	cmp	r3, #9
 80047ac:	bf94      	ite	ls
 80047ae:	2301      	movls	r3, #1
 80047b0:	2300      	movhi	r3, #0
 80047b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d079      	beq.n	80048ac <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d107      	bne.n	80047d4 <HAL_ADC_ConfigChannel+0x684>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	0e9b      	lsrs	r3, r3, #26
 80047ca:	3301      	adds	r3, #1
 80047cc:	069b      	lsls	r3, r3, #26
 80047ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047d2:	e015      	b.n	8004800 <HAL_ADC_ConfigChannel+0x6b0>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047dc:	fa93 f3a3 	rbit	r3, r3
 80047e0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80047e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80047e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d101      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80047ec:	2320      	movs	r3, #32
 80047ee:	e003      	b.n	80047f8 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80047f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047f2:	fab3 f383 	clz	r3, r3
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	3301      	adds	r3, #1
 80047fa:	069b      	lsls	r3, r3, #26
 80047fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <HAL_ADC_ConfigChannel+0x6d0>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	0e9b      	lsrs	r3, r3, #26
 8004812:	3301      	adds	r3, #1
 8004814:	f003 031f 	and.w	r3, r3, #31
 8004818:	2101      	movs	r1, #1
 800481a:	fa01 f303 	lsl.w	r3, r1, r3
 800481e:	e017      	b.n	8004850 <HAL_ADC_ConfigChannel+0x700>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004828:	fa93 f3a3 	rbit	r3, r3
 800482c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800482e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004830:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004838:	2320      	movs	r3, #32
 800483a:	e003      	b.n	8004844 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 800483c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800483e:	fab3 f383 	clz	r3, r3
 8004842:	b2db      	uxtb	r3, r3
 8004844:	3301      	adds	r3, #1
 8004846:	f003 031f 	and.w	r3, r3, #31
 800484a:	2101      	movs	r1, #1
 800484c:	fa01 f303 	lsl.w	r3, r1, r3
 8004850:	ea42 0103 	orr.w	r1, r2, r3
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800485c:	2b00      	cmp	r3, #0
 800485e:	d10a      	bne.n	8004876 <HAL_ADC_ConfigChannel+0x726>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	0e9b      	lsrs	r3, r3, #26
 8004866:	3301      	adds	r3, #1
 8004868:	f003 021f 	and.w	r2, r3, #31
 800486c:	4613      	mov	r3, r2
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	4413      	add	r3, r2
 8004872:	051b      	lsls	r3, r3, #20
 8004874:	e018      	b.n	80048a8 <HAL_ADC_ConfigChannel+0x758>
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487e:	fa93 f3a3 	rbit	r3, r3
 8004882:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488a:	2b00      	cmp	r3, #0
 800488c:	d101      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 800488e:	2320      	movs	r3, #32
 8004890:	e003      	b.n	800489a <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004894:	fab3 f383 	clz	r3, r3
 8004898:	b2db      	uxtb	r3, r3
 800489a:	3301      	adds	r3, #1
 800489c:	f003 021f 	and.w	r2, r3, #31
 80048a0:	4613      	mov	r3, r2
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	4413      	add	r3, r2
 80048a6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048a8:	430b      	orrs	r3, r1
 80048aa:	e07e      	b.n	80049aa <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d107      	bne.n	80048c8 <HAL_ADC_ConfigChannel+0x778>
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	0e9b      	lsrs	r3, r3, #26
 80048be:	3301      	adds	r3, #1
 80048c0:	069b      	lsls	r3, r3, #26
 80048c2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048c6:	e015      	b.n	80048f4 <HAL_ADC_ConfigChannel+0x7a4>
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	fa93 f3a3 	rbit	r3, r3
 80048d4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80048d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80048da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 80048e0:	2320      	movs	r3, #32
 80048e2:	e003      	b.n	80048ec <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80048e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e6:	fab3 f383 	clz	r3, r3
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	3301      	adds	r3, #1
 80048ee:	069b      	lsls	r3, r3, #26
 80048f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d109      	bne.n	8004914 <HAL_ADC_ConfigChannel+0x7c4>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	0e9b      	lsrs	r3, r3, #26
 8004906:	3301      	adds	r3, #1
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	2101      	movs	r1, #1
 800490e:	fa01 f303 	lsl.w	r3, r1, r3
 8004912:	e017      	b.n	8004944 <HAL_ADC_ConfigChannel+0x7f4>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	fa93 f3a3 	rbit	r3, r3
 8004920:	61bb      	str	r3, [r7, #24]
  return result;
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004926:	6a3b      	ldr	r3, [r7, #32]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 800492c:	2320      	movs	r3, #32
 800492e:	e003      	b.n	8004938 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	fab3 f383 	clz	r3, r3
 8004936:	b2db      	uxtb	r3, r3
 8004938:	3301      	adds	r3, #1
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	2101      	movs	r1, #1
 8004940:	fa01 f303 	lsl.w	r3, r1, r3
 8004944:	ea42 0103 	orr.w	r1, r2, r3
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10d      	bne.n	8004970 <HAL_ADC_ConfigChannel+0x820>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	0e9b      	lsrs	r3, r3, #26
 800495a:	3301      	adds	r3, #1
 800495c:	f003 021f 	and.w	r2, r3, #31
 8004960:	4613      	mov	r3, r2
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	4413      	add	r3, r2
 8004966:	3b1e      	subs	r3, #30
 8004968:	051b      	lsls	r3, r3, #20
 800496a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800496e:	e01b      	b.n	80049a8 <HAL_ADC_ConfigChannel+0x858>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	fa93 f3a3 	rbit	r3, r3
 800497c:	60fb      	str	r3, [r7, #12]
  return result;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d101      	bne.n	800498c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004988:	2320      	movs	r3, #32
 800498a:	e003      	b.n	8004994 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	fab3 f383 	clz	r3, r3
 8004992:	b2db      	uxtb	r3, r3
 8004994:	3301      	adds	r3, #1
 8004996:	f003 021f 	and.w	r2, r3, #31
 800499a:	4613      	mov	r3, r2
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	4413      	add	r3, r2
 80049a0:	3b1e      	subs	r3, #30
 80049a2:	051b      	lsls	r3, r3, #20
 80049a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049a8:	430b      	orrs	r3, r1
 80049aa:	683a      	ldr	r2, [r7, #0]
 80049ac:	6892      	ldr	r2, [r2, #8]
 80049ae:	4619      	mov	r1, r3
 80049b0:	f7fe fe3f 	bl	8003632 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f280 80d7 	bge.w	8004b6c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a06      	ldr	r2, [pc, #24]	; (80049dc <HAL_ADC_ConfigChannel+0x88c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d004      	beq.n	80049d2 <HAL_ADC_ConfigChannel+0x882>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a04      	ldr	r2, [pc, #16]	; (80049e0 <HAL_ADC_ConfigChannel+0x890>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d10a      	bne.n	80049e8 <HAL_ADC_ConfigChannel+0x898>
 80049d2:	4b04      	ldr	r3, [pc, #16]	; (80049e4 <HAL_ADC_ConfigChannel+0x894>)
 80049d4:	e009      	b.n	80049ea <HAL_ADC_ConfigChannel+0x89a>
 80049d6:	bf00      	nop
 80049d8:	47ff0000 	.word	0x47ff0000
 80049dc:	40022000 	.word	0x40022000
 80049e0:	40022100 	.word	0x40022100
 80049e4:	40022300 	.word	0x40022300
 80049e8:	4b65      	ldr	r3, [pc, #404]	; (8004b80 <HAL_ADC_ConfigChannel+0xa30>)
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7fe fce2 	bl	80033b4 <LL_ADC_GetCommonPathInternalCh>
 80049f0:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a62      	ldr	r2, [pc, #392]	; (8004b84 <HAL_ADC_ConfigChannel+0xa34>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d004      	beq.n	8004a08 <HAL_ADC_ConfigChannel+0x8b8>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a61      	ldr	r2, [pc, #388]	; (8004b88 <HAL_ADC_ConfigChannel+0xa38>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d10e      	bne.n	8004a26 <HAL_ADC_ConfigChannel+0x8d6>
 8004a08:	485e      	ldr	r0, [pc, #376]	; (8004b84 <HAL_ADC_ConfigChannel+0xa34>)
 8004a0a:	f7fe ff0f 	bl	800382c <LL_ADC_IsEnabled>
 8004a0e:	4604      	mov	r4, r0
 8004a10:	485d      	ldr	r0, [pc, #372]	; (8004b88 <HAL_ADC_ConfigChannel+0xa38>)
 8004a12:	f7fe ff0b 	bl	800382c <LL_ADC_IsEnabled>
 8004a16:	4603      	mov	r3, r0
 8004a18:	4323      	orrs	r3, r4
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	bf0c      	ite	eq
 8004a1e:	2301      	moveq	r3, #1
 8004a20:	2300      	movne	r3, #0
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	e008      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x8e8>
 8004a26:	4859      	ldr	r0, [pc, #356]	; (8004b8c <HAL_ADC_ConfigChannel+0xa3c>)
 8004a28:	f7fe ff00 	bl	800382c <LL_ADC_IsEnabled>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	bf0c      	ite	eq
 8004a32:	2301      	moveq	r3, #1
 8004a34:	2300      	movne	r3, #0
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 8084 	beq.w	8004b46 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a53      	ldr	r2, [pc, #332]	; (8004b90 <HAL_ADC_ConfigChannel+0xa40>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d132      	bne.n	8004aae <HAL_ADC_ConfigChannel+0x95e>
 8004a48:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d12c      	bne.n	8004aae <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a4c      	ldr	r2, [pc, #304]	; (8004b8c <HAL_ADC_ConfigChannel+0xa3c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	f040 8086 	bne.w	8004b6c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a47      	ldr	r2, [pc, #284]	; (8004b84 <HAL_ADC_ConfigChannel+0xa34>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d004      	beq.n	8004a74 <HAL_ADC_ConfigChannel+0x924>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a46      	ldr	r2, [pc, #280]	; (8004b88 <HAL_ADC_ConfigChannel+0xa38>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d101      	bne.n	8004a78 <HAL_ADC_ConfigChannel+0x928>
 8004a74:	4a47      	ldr	r2, [pc, #284]	; (8004b94 <HAL_ADC_ConfigChannel+0xa44>)
 8004a76:	e000      	b.n	8004a7a <HAL_ADC_ConfigChannel+0x92a>
 8004a78:	4a41      	ldr	r2, [pc, #260]	; (8004b80 <HAL_ADC_ConfigChannel+0xa30>)
 8004a7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004a7e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a82:	4619      	mov	r1, r3
 8004a84:	4610      	mov	r0, r2
 8004a86:	f7fe fc82 	bl	800338e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a8a:	4b43      	ldr	r3, [pc, #268]	; (8004b98 <HAL_ADC_ConfigChannel+0xa48>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	099b      	lsrs	r3, r3, #6
 8004a90:	4a42      	ldr	r2, [pc, #264]	; (8004b9c <HAL_ADC_ConfigChannel+0xa4c>)
 8004a92:	fba2 2303 	umull	r2, r3, r2, r3
 8004a96:	099b      	lsrs	r3, r3, #6
 8004a98:	3301      	adds	r3, #1
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a9e:	e002      	b.n	8004aa6 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1f9      	bne.n	8004aa0 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004aac:	e05e      	b.n	8004b6c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a3b      	ldr	r2, [pc, #236]	; (8004ba0 <HAL_ADC_ConfigChannel+0xa50>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d120      	bne.n	8004afa <HAL_ADC_ConfigChannel+0x9aa>
 8004ab8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004abc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d11a      	bne.n	8004afa <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a30      	ldr	r2, [pc, #192]	; (8004b8c <HAL_ADC_ConfigChannel+0xa3c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d14e      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a2c      	ldr	r2, [pc, #176]	; (8004b84 <HAL_ADC_ConfigChannel+0xa34>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d004      	beq.n	8004ae2 <HAL_ADC_ConfigChannel+0x992>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a2a      	ldr	r2, [pc, #168]	; (8004b88 <HAL_ADC_ConfigChannel+0xa38>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d101      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x996>
 8004ae2:	4a2c      	ldr	r2, [pc, #176]	; (8004b94 <HAL_ADC_ConfigChannel+0xa44>)
 8004ae4:	e000      	b.n	8004ae8 <HAL_ADC_ConfigChannel+0x998>
 8004ae6:	4a26      	ldr	r2, [pc, #152]	; (8004b80 <HAL_ADC_ConfigChannel+0xa30>)
 8004ae8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004aec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004af0:	4619      	mov	r1, r3
 8004af2:	4610      	mov	r0, r2
 8004af4:	f7fe fc4b 	bl	800338e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004af8:	e038      	b.n	8004b6c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a29      	ldr	r2, [pc, #164]	; (8004ba4 <HAL_ADC_ConfigChannel+0xa54>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d133      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0xa1c>
 8004b04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d12d      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a1d      	ldr	r2, [pc, #116]	; (8004b8c <HAL_ADC_ConfigChannel+0xa3c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d128      	bne.n	8004b6c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a19      	ldr	r2, [pc, #100]	; (8004b84 <HAL_ADC_ConfigChannel+0xa34>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d004      	beq.n	8004b2e <HAL_ADC_ConfigChannel+0x9de>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a17      	ldr	r2, [pc, #92]	; (8004b88 <HAL_ADC_ConfigChannel+0xa38>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d101      	bne.n	8004b32 <HAL_ADC_ConfigChannel+0x9e2>
 8004b2e:	4a19      	ldr	r2, [pc, #100]	; (8004b94 <HAL_ADC_ConfigChannel+0xa44>)
 8004b30:	e000      	b.n	8004b34 <HAL_ADC_ConfigChannel+0x9e4>
 8004b32:	4a13      	ldr	r2, [pc, #76]	; (8004b80 <HAL_ADC_ConfigChannel+0xa30>)
 8004b34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	4610      	mov	r0, r2
 8004b40:	f7fe fc25 	bl	800338e <LL_ADC_SetCommonPathInternalCh>
 8004b44:	e012      	b.n	8004b6c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b4a:	f043 0220 	orr.w	r2, r3, #32
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004b58:	e008      	b.n	8004b6c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b5e:	f043 0220 	orr.w	r2, r3, #32
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004b74:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	37e4      	adds	r7, #228	; 0xe4
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd90      	pop	{r4, r7, pc}
 8004b80:	58026300 	.word	0x58026300
 8004b84:	40022000 	.word	0x40022000
 8004b88:	40022100 	.word	0x40022100
 8004b8c:	58026000 	.word	0x58026000
 8004b90:	c7520000 	.word	0xc7520000
 8004b94:	40022300 	.word	0x40022300
 8004b98:	24000000 	.word	0x24000000
 8004b9c:	053e2d63 	.word	0x053e2d63
 8004ba0:	c3210000 	.word	0xc3210000
 8004ba4:	cb840000 	.word	0xcb840000

08004ba8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fe fe82 	bl	80038c8 <LL_ADC_REG_IsConversionOngoing>
 8004bc4:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f7fe fea4 	bl	8003918 <LL_ADC_INJ_IsConversionOngoing>
 8004bd0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d103      	bne.n	8004be0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 8098 	beq.w	8004d10 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d02a      	beq.n	8004c44 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	7e5b      	ldrb	r3, [r3, #25]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d126      	bne.n	8004c44 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	7e1b      	ldrb	r3, [r3, #24]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d122      	bne.n	8004c44 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004c02:	e014      	b.n	8004c2e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	4a45      	ldr	r2, [pc, #276]	; (8004d1c <ADC_ConversionStop+0x174>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d90d      	bls.n	8004c28 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c10:	f043 0210 	orr.w	r2, r3, #16
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c1c:	f043 0201 	orr.w	r2, r3, #1
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e074      	b.n	8004d12 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	3301      	adds	r3, #1
 8004c2c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c38:	2b40      	cmp	r3, #64	; 0x40
 8004c3a:	d1e3      	bne.n	8004c04 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2240      	movs	r2, #64	; 0x40
 8004c42:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d014      	beq.n	8004c74 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fe fe3a 	bl	80038c8 <LL_ADC_REG_IsConversionOngoing>
 8004c54:	4603      	mov	r3, r0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00c      	beq.n	8004c74 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fe fdf7 	bl	8003852 <LL_ADC_IsDisableOngoing>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d104      	bne.n	8004c74 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fe fe16 	bl	80038a0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004c74:	69bb      	ldr	r3, [r7, #24]
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d014      	beq.n	8004ca4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fe fe4a 	bl	8003918 <LL_ADC_INJ_IsConversionOngoing>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00c      	beq.n	8004ca4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fe fddf 	bl	8003852 <LL_ADC_IsDisableOngoing>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d104      	bne.n	8004ca4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fe fe26 	bl	80038f0 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d005      	beq.n	8004cb6 <ADC_ConversionStop+0x10e>
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d105      	bne.n	8004cbc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004cb0:	230c      	movs	r3, #12
 8004cb2:	617b      	str	r3, [r7, #20]
        break;
 8004cb4:	e005      	b.n	8004cc2 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004cb6:	2308      	movs	r3, #8
 8004cb8:	617b      	str	r3, [r7, #20]
        break;
 8004cba:	e002      	b.n	8004cc2 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	617b      	str	r3, [r7, #20]
        break;
 8004cc0:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004cc2:	f7fe fb0b 	bl	80032dc <HAL_GetTick>
 8004cc6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004cc8:	e01b      	b.n	8004d02 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004cca:	f7fe fb07 	bl	80032dc <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b05      	cmp	r3, #5
 8004cd6:	d914      	bls.n	8004d02 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689a      	ldr	r2, [r3, #8]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00d      	beq.n	8004d02 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cea:	f043 0210 	orr.w	r2, r3, #16
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cf6:	f043 0201 	orr.w	r2, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e007      	b.n	8004d12 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	689a      	ldr	r2, [r3, #8]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1dc      	bne.n	8004cca <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3720      	adds	r7, #32
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	000cdbff 	.word	0x000cdbff

08004d20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fe fd7d 	bl	800382c <LL_ADC_IsEnabled>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d16e      	bne.n	8004e16 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	4b38      	ldr	r3, [pc, #224]	; (8004e20 <ADC_Enable+0x100>)
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00d      	beq.n	8004d62 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d4a:	f043 0210 	orr.w	r2, r3, #16
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d56:	f043 0201 	orr.w	r2, r3, #1
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e05a      	b.n	8004e18 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fe fd38 	bl	80037dc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004d6c:	f7fe fab6 	bl	80032dc <HAL_GetTick>
 8004d70:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a2b      	ldr	r2, [pc, #172]	; (8004e24 <ADC_Enable+0x104>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d004      	beq.n	8004d86 <ADC_Enable+0x66>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a29      	ldr	r2, [pc, #164]	; (8004e28 <ADC_Enable+0x108>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d101      	bne.n	8004d8a <ADC_Enable+0x6a>
 8004d86:	4b29      	ldr	r3, [pc, #164]	; (8004e2c <ADC_Enable+0x10c>)
 8004d88:	e000      	b.n	8004d8c <ADC_Enable+0x6c>
 8004d8a:	4b29      	ldr	r3, [pc, #164]	; (8004e30 <ADC_Enable+0x110>)
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f7fe fcbb 	bl	8003708 <LL_ADC_GetMultimode>
 8004d92:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a23      	ldr	r2, [pc, #140]	; (8004e28 <ADC_Enable+0x108>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d002      	beq.n	8004da4 <ADC_Enable+0x84>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	e000      	b.n	8004da6 <ADC_Enable+0x86>
 8004da4:	4b1f      	ldr	r3, [pc, #124]	; (8004e24 <ADC_Enable+0x104>)
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6812      	ldr	r2, [r2, #0]
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d02c      	beq.n	8004e08 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d130      	bne.n	8004e16 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004db4:	e028      	b.n	8004e08 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fe fd36 	bl	800382c <LL_ADC_IsEnabled>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d104      	bne.n	8004dd0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe fd06 	bl	80037dc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004dd0:	f7fe fa84 	bl	80032dc <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d914      	bls.n	8004e08 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0301 	and.w	r3, r3, #1
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d00d      	beq.n	8004e08 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004df0:	f043 0210 	orr.w	r2, r3, #16
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dfc:	f043 0201 	orr.w	r2, r3, #1
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e007      	b.n	8004e18 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d1cf      	bne.n	8004db6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	8000003f 	.word	0x8000003f
 8004e24:	40022000 	.word	0x40022000
 8004e28:	40022100 	.word	0x40022100
 8004e2c:	40022300 	.word	0x40022300
 8004e30:	58026300 	.word	0x58026300

08004e34 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fe fd06 	bl	8003852 <LL_ADC_IsDisableOngoing>
 8004e46:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fe fced 	bl	800382c <LL_ADC_IsEnabled>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d047      	beq.n	8004ee8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d144      	bne.n	8004ee8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f003 030d 	and.w	r3, r3, #13
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d10c      	bne.n	8004e86 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fe fcc7 	bl	8003804 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2203      	movs	r2, #3
 8004e7c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004e7e:	f7fe fa2d 	bl	80032dc <HAL_GetTick>
 8004e82:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004e84:	e029      	b.n	8004eda <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e8a:	f043 0210 	orr.w	r2, r3, #16
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	661a      	str	r2, [r3, #96]	; 0x60
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e96:	f043 0201 	orr.w	r2, r3, #1
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	665a      	str	r2, [r3, #100]	; 0x64
      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e023      	b.n	8004eea <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ea2:	f7fe fa1b 	bl	80032dc <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d914      	bls.n	8004eda <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00d      	beq.n	8004eda <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec2:	f043 0210 	orr.w	r2, r3, #16
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	661a      	str	r2, [r3, #96]	; 0x60

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ece:	f043 0201 	orr.w	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	665a      	str	r2, [r3, #100]	; 0x64

          return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e007      	b.n	8004eea <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1dc      	bne.n	8004ea2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b084      	sub	sp, #16
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a6c      	ldr	r2, [pc, #432]	; (80050b4 <ADC_ConfigureBoostMode+0x1c0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d004      	beq.n	8004f10 <ADC_ConfigureBoostMode+0x1c>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a6b      	ldr	r2, [pc, #428]	; (80050b8 <ADC_ConfigureBoostMode+0x1c4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d109      	bne.n	8004f24 <ADC_ConfigureBoostMode+0x30>
 8004f10:	4b6a      	ldr	r3, [pc, #424]	; (80050bc <ADC_ConfigureBoostMode+0x1c8>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bf14      	ite	ne
 8004f1c:	2301      	movne	r3, #1
 8004f1e:	2300      	moveq	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	e008      	b.n	8004f36 <ADC_ConfigureBoostMode+0x42>
 8004f24:	4b66      	ldr	r3, [pc, #408]	; (80050c0 <ADC_ConfigureBoostMode+0x1cc>)
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bf14      	ite	ne
 8004f30:	2301      	movne	r3, #1
 8004f32:	2300      	moveq	r3, #0
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d01c      	beq.n	8004f74 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004f3a:	f005 fc95 	bl	800a868 <HAL_RCC_GetHCLKFreq>
 8004f3e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f48:	d010      	beq.n	8004f6c <ADC_ConfigureBoostMode+0x78>
 8004f4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004f4e:	d873      	bhi.n	8005038 <ADC_ConfigureBoostMode+0x144>
 8004f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f54:	d002      	beq.n	8004f5c <ADC_ConfigureBoostMode+0x68>
 8004f56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004f5a:	d16d      	bne.n	8005038 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	0c1b      	lsrs	r3, r3, #16
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f68:	60fb      	str	r3, [r7, #12]
        break;
 8004f6a:	e068      	b.n	800503e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	089b      	lsrs	r3, r3, #2
 8004f70:	60fb      	str	r3, [r7, #12]
        break;
 8004f72:	e064      	b.n	800503e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004f74:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004f78:	f04f 0100 	mov.w	r1, #0
 8004f7c:	f006 fe70 	bl	800bc60 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f80:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004f8a:	d051      	beq.n	8005030 <ADC_ConfigureBoostMode+0x13c>
 8004f8c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004f90:	d854      	bhi.n	800503c <ADC_ConfigureBoostMode+0x148>
 8004f92:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004f96:	d047      	beq.n	8005028 <ADC_ConfigureBoostMode+0x134>
 8004f98:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004f9c:	d84e      	bhi.n	800503c <ADC_ConfigureBoostMode+0x148>
 8004f9e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004fa2:	d03d      	beq.n	8005020 <ADC_ConfigureBoostMode+0x12c>
 8004fa4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004fa8:	d848      	bhi.n	800503c <ADC_ConfigureBoostMode+0x148>
 8004faa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fae:	d033      	beq.n	8005018 <ADC_ConfigureBoostMode+0x124>
 8004fb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004fb4:	d842      	bhi.n	800503c <ADC_ConfigureBoostMode+0x148>
 8004fb6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004fba:	d029      	beq.n	8005010 <ADC_ConfigureBoostMode+0x11c>
 8004fbc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004fc0:	d83c      	bhi.n	800503c <ADC_ConfigureBoostMode+0x148>
 8004fc2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004fc6:	d01a      	beq.n	8004ffe <ADC_ConfigureBoostMode+0x10a>
 8004fc8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004fcc:	d836      	bhi.n	800503c <ADC_ConfigureBoostMode+0x148>
 8004fce:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004fd2:	d014      	beq.n	8004ffe <ADC_ConfigureBoostMode+0x10a>
 8004fd4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004fd8:	d830      	bhi.n	800503c <ADC_ConfigureBoostMode+0x148>
 8004fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fde:	d00e      	beq.n	8004ffe <ADC_ConfigureBoostMode+0x10a>
 8004fe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004fe4:	d82a      	bhi.n	800503c <ADC_ConfigureBoostMode+0x148>
 8004fe6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004fea:	d008      	beq.n	8004ffe <ADC_ConfigureBoostMode+0x10a>
 8004fec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ff0:	d824      	bhi.n	800503c <ADC_ConfigureBoostMode+0x148>
 8004ff2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ff6:	d002      	beq.n	8004ffe <ADC_ConfigureBoostMode+0x10a>
 8004ff8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ffc:	d11e      	bne.n	800503c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	0c9b      	lsrs	r3, r3, #18
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	fbb2 f3f3 	udiv	r3, r2, r3
 800500c:	60fb      	str	r3, [r7, #12]
        break;
 800500e:	e016      	b.n	800503e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	091b      	lsrs	r3, r3, #4
 8005014:	60fb      	str	r3, [r7, #12]
        break;
 8005016:	e012      	b.n	800503e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	095b      	lsrs	r3, r3, #5
 800501c:	60fb      	str	r3, [r7, #12]
        break;
 800501e:	e00e      	b.n	800503e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	099b      	lsrs	r3, r3, #6
 8005024:	60fb      	str	r3, [r7, #12]
        break;
 8005026:	e00a      	b.n	800503e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	09db      	lsrs	r3, r3, #7
 800502c:	60fb      	str	r3, [r7, #12]
        break;
 800502e:	e006      	b.n	800503e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	0a1b      	lsrs	r3, r3, #8
 8005034:	60fb      	str	r3, [r7, #12]
        break;
 8005036:	e002      	b.n	800503e <ADC_ConfigureBoostMode+0x14a>
        break;
 8005038:	bf00      	nop
 800503a:	e000      	b.n	800503e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800503c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	085b      	lsrs	r3, r3, #1
 8005042:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	4a1f      	ldr	r2, [pc, #124]	; (80050c4 <ADC_ConfigureBoostMode+0x1d0>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d808      	bhi.n	800505e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689a      	ldr	r2, [r3, #8]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800505a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 800505c:	e025      	b.n	80050aa <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	4a19      	ldr	r2, [pc, #100]	; (80050c8 <ADC_ConfigureBoostMode+0x1d4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d80a      	bhi.n	800507c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005078:	609a      	str	r2, [r3, #8]
}
 800507a:	e016      	b.n	80050aa <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4a13      	ldr	r2, [pc, #76]	; (80050cc <ADC_ConfigureBoostMode+0x1d8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d80a      	bhi.n	800509a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005096:	609a      	str	r2, [r3, #8]
}
 8005098:	e007      	b.n	80050aa <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80050a8:	609a      	str	r2, [r3, #8]
}
 80050aa:	bf00      	nop
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	40022000 	.word	0x40022000
 80050b8:	40022100 	.word	0x40022100
 80050bc:	40022300 	.word	0x40022300
 80050c0:	58026300 	.word	0x58026300
 80050c4:	005f5e10 	.word	0x005f5e10
 80050c8:	00bebc20 	.word	0x00bebc20
 80050cc:	017d7840 	.word	0x017d7840

080050d0 <LL_ADC_IsEnabled>:
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <LL_ADC_IsEnabled+0x18>
 80050e4:	2301      	movs	r3, #1
 80050e6:	e000      	b.n	80050ea <LL_ADC_IsEnabled+0x1a>
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	370c      	adds	r7, #12
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	2b04      	cmp	r3, #4
 8005108:	d101      	bne.n	800510e <LL_ADC_REG_IsConversionOngoing+0x18>
 800510a:	2301      	movs	r3, #1
 800510c:	e000      	b.n	8005110 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800511c:	b590      	push	{r4, r7, lr}
 800511e:	b0a3      	sub	sp, #140	; 0x8c
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005132:	2b01      	cmp	r3, #1
 8005134:	d101      	bne.n	800513a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005136:	2302      	movs	r3, #2
 8005138:	e0c1      	b.n	80052be <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8005142:	2300      	movs	r3, #0
 8005144:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005146:	2300      	movs	r3, #0
 8005148:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a5e      	ldr	r2, [pc, #376]	; (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d102      	bne.n	800515a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005154:	4b5d      	ldr	r3, [pc, #372]	; (80052cc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005156:	60fb      	str	r3, [r7, #12]
 8005158:	e001      	b.n	800515e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d10b      	bne.n	800517c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005168:	f043 0220 	orr.w	r2, r3, #32
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005178:	2301      	movs	r3, #1
 800517a:	e0a0      	b.n	80052be <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4618      	mov	r0, r3
 8005180:	f7ff ffb9 	bl	80050f6 <LL_ADC_REG_IsConversionOngoing>
 8005184:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4618      	mov	r0, r3
 800518e:	f7ff ffb2 	bl	80050f6 <LL_ADC_REG_IsConversionOngoing>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	f040 8081 	bne.w	800529c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800519a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d17c      	bne.n	800529c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a48      	ldr	r2, [pc, #288]	; (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d004      	beq.n	80051b6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a46      	ldr	r2, [pc, #280]	; (80052cc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d101      	bne.n	80051ba <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80051b6:	4b46      	ldr	r3, [pc, #280]	; (80052d0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80051b8:	e000      	b.n	80051bc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80051ba:	4b46      	ldr	r3, [pc, #280]	; (80052d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80051bc:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d039      	beq.n	800523a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80051c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80051d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a3a      	ldr	r2, [pc, #232]	; (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d004      	beq.n	80051ec <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a39      	ldr	r2, [pc, #228]	; (80052cc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d10e      	bne.n	800520a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80051ec:	4836      	ldr	r0, [pc, #216]	; (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80051ee:	f7ff ff6f 	bl	80050d0 <LL_ADC_IsEnabled>
 80051f2:	4604      	mov	r4, r0
 80051f4:	4835      	ldr	r0, [pc, #212]	; (80052cc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80051f6:	f7ff ff6b 	bl	80050d0 <LL_ADC_IsEnabled>
 80051fa:	4603      	mov	r3, r0
 80051fc:	4323      	orrs	r3, r4
 80051fe:	2b00      	cmp	r3, #0
 8005200:	bf0c      	ite	eq
 8005202:	2301      	moveq	r3, #1
 8005204:	2300      	movne	r3, #0
 8005206:	b2db      	uxtb	r3, r3
 8005208:	e008      	b.n	800521c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800520a:	4833      	ldr	r0, [pc, #204]	; (80052d8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800520c:	f7ff ff60 	bl	80050d0 <LL_ADC_IsEnabled>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	bf0c      	ite	eq
 8005216:	2301      	moveq	r3, #1
 8005218:	2300      	movne	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	d047      	beq.n	80052b0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005220:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	4b2d      	ldr	r3, [pc, #180]	; (80052dc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005226:	4013      	ands	r3, r2
 8005228:	683a      	ldr	r2, [r7, #0]
 800522a:	6811      	ldr	r1, [r2, #0]
 800522c:	683a      	ldr	r2, [r7, #0]
 800522e:	6892      	ldr	r2, [r2, #8]
 8005230:	430a      	orrs	r2, r1
 8005232:	431a      	orrs	r2, r3
 8005234:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005236:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005238:	e03a      	b.n	80052b0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800523a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005242:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005244:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a1f      	ldr	r2, [pc, #124]	; (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d004      	beq.n	800525a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a1d      	ldr	r2, [pc, #116]	; (80052cc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d10e      	bne.n	8005278 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800525a:	481b      	ldr	r0, [pc, #108]	; (80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800525c:	f7ff ff38 	bl	80050d0 <LL_ADC_IsEnabled>
 8005260:	4604      	mov	r4, r0
 8005262:	481a      	ldr	r0, [pc, #104]	; (80052cc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005264:	f7ff ff34 	bl	80050d0 <LL_ADC_IsEnabled>
 8005268:	4603      	mov	r3, r0
 800526a:	4323      	orrs	r3, r4
 800526c:	2b00      	cmp	r3, #0
 800526e:	bf0c      	ite	eq
 8005270:	2301      	moveq	r3, #1
 8005272:	2300      	movne	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	e008      	b.n	800528a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005278:	4817      	ldr	r0, [pc, #92]	; (80052d8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800527a:	f7ff ff29 	bl	80050d0 <LL_ADC_IsEnabled>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	bf0c      	ite	eq
 8005284:	2301      	moveq	r3, #1
 8005286:	2300      	movne	r3, #0
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d010      	beq.n	80052b0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800528e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	4b12      	ldr	r3, [pc, #72]	; (80052dc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005294:	4013      	ands	r3, r2
 8005296:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005298:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800529a:	e009      	b.n	80052b0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052a0:	f043 0220 	orr.w	r2, r3, #32
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80052ae:	e000      	b.n	80052b2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80052ba:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80052be:	4618      	mov	r0, r3
 80052c0:	378c      	adds	r7, #140	; 0x8c
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd90      	pop	{r4, r7, pc}
 80052c6:	bf00      	nop
 80052c8:	40022000 	.word	0x40022000
 80052cc:	40022100 	.word	0x40022100
 80052d0:	40022300 	.word	0x40022300
 80052d4:	58026300 	.word	0x58026300
 80052d8:	58026000 	.word	0x58026000
 80052dc:	fffff0e0 	.word	0xfffff0e0

080052e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f003 0307 	and.w	r3, r3, #7
 80052ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052f0:	4b0b      	ldr	r3, [pc, #44]	; (8005320 <__NVIC_SetPriorityGrouping+0x40>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052f6:	68ba      	ldr	r2, [r7, #8]
 80052f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052fc:	4013      	ands	r3, r2
 80052fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005308:	4b06      	ldr	r3, [pc, #24]	; (8005324 <__NVIC_SetPriorityGrouping+0x44>)
 800530a:	4313      	orrs	r3, r2
 800530c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800530e:	4a04      	ldr	r2, [pc, #16]	; (8005320 <__NVIC_SetPriorityGrouping+0x40>)
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	60d3      	str	r3, [r2, #12]
}
 8005314:	bf00      	nop
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	e000ed00 	.word	0xe000ed00
 8005324:	05fa0000 	.word	0x05fa0000

08005328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005328:	b480      	push	{r7}
 800532a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800532c:	4b04      	ldr	r3, [pc, #16]	; (8005340 <__NVIC_GetPriorityGrouping+0x18>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	0a1b      	lsrs	r3, r3, #8
 8005332:	f003 0307 	and.w	r3, r3, #7
}
 8005336:	4618      	mov	r0, r3
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	e000ed00 	.word	0xe000ed00

08005344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800534e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005352:	2b00      	cmp	r3, #0
 8005354:	db0b      	blt.n	800536e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005356:	88fb      	ldrh	r3, [r7, #6]
 8005358:	f003 021f 	and.w	r2, r3, #31
 800535c:	4907      	ldr	r1, [pc, #28]	; (800537c <__NVIC_EnableIRQ+0x38>)
 800535e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005362:	095b      	lsrs	r3, r3, #5
 8005364:	2001      	movs	r0, #1
 8005366:	fa00 f202 	lsl.w	r2, r0, r2
 800536a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	e000e100 	.word	0xe000e100

08005380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	4603      	mov	r3, r0
 8005388:	6039      	str	r1, [r7, #0]
 800538a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800538c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005390:	2b00      	cmp	r3, #0
 8005392:	db0a      	blt.n	80053aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	b2da      	uxtb	r2, r3
 8005398:	490c      	ldr	r1, [pc, #48]	; (80053cc <__NVIC_SetPriority+0x4c>)
 800539a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800539e:	0112      	lsls	r2, r2, #4
 80053a0:	b2d2      	uxtb	r2, r2
 80053a2:	440b      	add	r3, r1
 80053a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053a8:	e00a      	b.n	80053c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	b2da      	uxtb	r2, r3
 80053ae:	4908      	ldr	r1, [pc, #32]	; (80053d0 <__NVIC_SetPriority+0x50>)
 80053b0:	88fb      	ldrh	r3, [r7, #6]
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	3b04      	subs	r3, #4
 80053b8:	0112      	lsls	r2, r2, #4
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	440b      	add	r3, r1
 80053be:	761a      	strb	r2, [r3, #24]
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	e000e100 	.word	0xe000e100
 80053d0:	e000ed00 	.word	0xe000ed00

080053d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b089      	sub	sp, #36	; 0x24
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f003 0307 	and.w	r3, r3, #7
 80053e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	f1c3 0307 	rsb	r3, r3, #7
 80053ee:	2b04      	cmp	r3, #4
 80053f0:	bf28      	it	cs
 80053f2:	2304      	movcs	r3, #4
 80053f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	3304      	adds	r3, #4
 80053fa:	2b06      	cmp	r3, #6
 80053fc:	d902      	bls.n	8005404 <NVIC_EncodePriority+0x30>
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	3b03      	subs	r3, #3
 8005402:	e000      	b.n	8005406 <NVIC_EncodePriority+0x32>
 8005404:	2300      	movs	r3, #0
 8005406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005408:	f04f 32ff 	mov.w	r2, #4294967295
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	fa02 f303 	lsl.w	r3, r2, r3
 8005412:	43da      	mvns	r2, r3
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	401a      	ands	r2, r3
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800541c:	f04f 31ff 	mov.w	r1, #4294967295
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	fa01 f303 	lsl.w	r3, r1, r3
 8005426:	43d9      	mvns	r1, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800542c:	4313      	orrs	r3, r2
         );
}
 800542e:	4618      	mov	r0, r3
 8005430:	3724      	adds	r7, #36	; 0x24
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	3b01      	subs	r3, #1
 8005448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800544c:	d301      	bcc.n	8005452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800544e:	2301      	movs	r3, #1
 8005450:	e00f      	b.n	8005472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005452:	4a0a      	ldr	r2, [pc, #40]	; (800547c <SysTick_Config+0x40>)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3b01      	subs	r3, #1
 8005458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800545a:	210f      	movs	r1, #15
 800545c:	f04f 30ff 	mov.w	r0, #4294967295
 8005460:	f7ff ff8e 	bl	8005380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005464:	4b05      	ldr	r3, [pc, #20]	; (800547c <SysTick_Config+0x40>)
 8005466:	2200      	movs	r2, #0
 8005468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800546a:	4b04      	ldr	r3, [pc, #16]	; (800547c <SysTick_Config+0x40>)
 800546c:	2207      	movs	r2, #7
 800546e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
 800547a:	bf00      	nop
 800547c:	e000e010 	.word	0xe000e010

08005480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7ff ff29 	bl	80052e0 <__NVIC_SetPriorityGrouping>
}
 800548e:	bf00      	nop
 8005490:	3708      	adds	r7, #8
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}

08005496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b086      	sub	sp, #24
 800549a:	af00      	add	r7, sp, #0
 800549c:	4603      	mov	r3, r0
 800549e:	60b9      	str	r1, [r7, #8]
 80054a0:	607a      	str	r2, [r7, #4]
 80054a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80054a4:	f7ff ff40 	bl	8005328 <__NVIC_GetPriorityGrouping>
 80054a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	68b9      	ldr	r1, [r7, #8]
 80054ae:	6978      	ldr	r0, [r7, #20]
 80054b0:	f7ff ff90 	bl	80053d4 <NVIC_EncodePriority>
 80054b4:	4602      	mov	r2, r0
 80054b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80054ba:	4611      	mov	r1, r2
 80054bc:	4618      	mov	r0, r3
 80054be:	f7ff ff5f 	bl	8005380 <__NVIC_SetPriority>
}
 80054c2:	bf00      	nop
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}

080054ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b082      	sub	sp, #8
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	4603      	mov	r3, r0
 80054d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054d8:	4618      	mov	r0, r3
 80054da:	f7ff ff33 	bl	8005344 <__NVIC_EnableIRQ>
}
 80054de:	bf00      	nop
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b082      	sub	sp, #8
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff ffa4 	bl	800543c <SysTick_Config>
 80054f4:	4603      	mov	r3, r0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
	...

08005500 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005508:	f7fd fee8 	bl	80032dc <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d101      	bne.n	8005518 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e314      	b.n	8005b42 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a66      	ldr	r2, [pc, #408]	; (80056b8 <HAL_DMA_Init+0x1b8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d04a      	beq.n	80055b8 <HAL_DMA_Init+0xb8>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a65      	ldr	r2, [pc, #404]	; (80056bc <HAL_DMA_Init+0x1bc>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d045      	beq.n	80055b8 <HAL_DMA_Init+0xb8>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a63      	ldr	r2, [pc, #396]	; (80056c0 <HAL_DMA_Init+0x1c0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d040      	beq.n	80055b8 <HAL_DMA_Init+0xb8>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a62      	ldr	r2, [pc, #392]	; (80056c4 <HAL_DMA_Init+0x1c4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d03b      	beq.n	80055b8 <HAL_DMA_Init+0xb8>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a60      	ldr	r2, [pc, #384]	; (80056c8 <HAL_DMA_Init+0x1c8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d036      	beq.n	80055b8 <HAL_DMA_Init+0xb8>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a5f      	ldr	r2, [pc, #380]	; (80056cc <HAL_DMA_Init+0x1cc>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d031      	beq.n	80055b8 <HAL_DMA_Init+0xb8>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a5d      	ldr	r2, [pc, #372]	; (80056d0 <HAL_DMA_Init+0x1d0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d02c      	beq.n	80055b8 <HAL_DMA_Init+0xb8>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a5c      	ldr	r2, [pc, #368]	; (80056d4 <HAL_DMA_Init+0x1d4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d027      	beq.n	80055b8 <HAL_DMA_Init+0xb8>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a5a      	ldr	r2, [pc, #360]	; (80056d8 <HAL_DMA_Init+0x1d8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d022      	beq.n	80055b8 <HAL_DMA_Init+0xb8>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a59      	ldr	r2, [pc, #356]	; (80056dc <HAL_DMA_Init+0x1dc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d01d      	beq.n	80055b8 <HAL_DMA_Init+0xb8>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a57      	ldr	r2, [pc, #348]	; (80056e0 <HAL_DMA_Init+0x1e0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d018      	beq.n	80055b8 <HAL_DMA_Init+0xb8>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a56      	ldr	r2, [pc, #344]	; (80056e4 <HAL_DMA_Init+0x1e4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d013      	beq.n	80055b8 <HAL_DMA_Init+0xb8>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a54      	ldr	r2, [pc, #336]	; (80056e8 <HAL_DMA_Init+0x1e8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d00e      	beq.n	80055b8 <HAL_DMA_Init+0xb8>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a53      	ldr	r2, [pc, #332]	; (80056ec <HAL_DMA_Init+0x1ec>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d009      	beq.n	80055b8 <HAL_DMA_Init+0xb8>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a51      	ldr	r2, [pc, #324]	; (80056f0 <HAL_DMA_Init+0x1f0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d004      	beq.n	80055b8 <HAL_DMA_Init+0xb8>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a50      	ldr	r2, [pc, #320]	; (80056f4 <HAL_DMA_Init+0x1f4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d101      	bne.n	80055bc <HAL_DMA_Init+0xbc>
 80055b8:	2301      	movs	r3, #1
 80055ba:	e000      	b.n	80055be <HAL_DMA_Init+0xbe>
 80055bc:	2300      	movs	r3, #0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	f000 813c 	beq.w	800583c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a37      	ldr	r2, [pc, #220]	; (80056b8 <HAL_DMA_Init+0x1b8>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d04a      	beq.n	8005674 <HAL_DMA_Init+0x174>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a36      	ldr	r2, [pc, #216]	; (80056bc <HAL_DMA_Init+0x1bc>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d045      	beq.n	8005674 <HAL_DMA_Init+0x174>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a34      	ldr	r2, [pc, #208]	; (80056c0 <HAL_DMA_Init+0x1c0>)
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d040      	beq.n	8005674 <HAL_DMA_Init+0x174>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a33      	ldr	r2, [pc, #204]	; (80056c4 <HAL_DMA_Init+0x1c4>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d03b      	beq.n	8005674 <HAL_DMA_Init+0x174>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4a31      	ldr	r2, [pc, #196]	; (80056c8 <HAL_DMA_Init+0x1c8>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d036      	beq.n	8005674 <HAL_DMA_Init+0x174>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a30      	ldr	r2, [pc, #192]	; (80056cc <HAL_DMA_Init+0x1cc>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d031      	beq.n	8005674 <HAL_DMA_Init+0x174>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a2e      	ldr	r2, [pc, #184]	; (80056d0 <HAL_DMA_Init+0x1d0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d02c      	beq.n	8005674 <HAL_DMA_Init+0x174>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a2d      	ldr	r2, [pc, #180]	; (80056d4 <HAL_DMA_Init+0x1d4>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d027      	beq.n	8005674 <HAL_DMA_Init+0x174>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a2b      	ldr	r2, [pc, #172]	; (80056d8 <HAL_DMA_Init+0x1d8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d022      	beq.n	8005674 <HAL_DMA_Init+0x174>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a2a      	ldr	r2, [pc, #168]	; (80056dc <HAL_DMA_Init+0x1dc>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d01d      	beq.n	8005674 <HAL_DMA_Init+0x174>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a28      	ldr	r2, [pc, #160]	; (80056e0 <HAL_DMA_Init+0x1e0>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d018      	beq.n	8005674 <HAL_DMA_Init+0x174>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a27      	ldr	r2, [pc, #156]	; (80056e4 <HAL_DMA_Init+0x1e4>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d013      	beq.n	8005674 <HAL_DMA_Init+0x174>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a25      	ldr	r2, [pc, #148]	; (80056e8 <HAL_DMA_Init+0x1e8>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d00e      	beq.n	8005674 <HAL_DMA_Init+0x174>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a24      	ldr	r2, [pc, #144]	; (80056ec <HAL_DMA_Init+0x1ec>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d009      	beq.n	8005674 <HAL_DMA_Init+0x174>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a22      	ldr	r2, [pc, #136]	; (80056f0 <HAL_DMA_Init+0x1f0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d004      	beq.n	8005674 <HAL_DMA_Init+0x174>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a21      	ldr	r2, [pc, #132]	; (80056f4 <HAL_DMA_Init+0x1f4>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d108      	bne.n	8005686 <HAL_DMA_Init+0x186>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0201 	bic.w	r2, r2, #1
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	e007      	b.n	8005696 <HAL_DMA_Init+0x196>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0201 	bic.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005696:	e02f      	b.n	80056f8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005698:	f7fd fe20 	bl	80032dc <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	2b05      	cmp	r3, #5
 80056a4:	d928      	bls.n	80056f8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2220      	movs	r2, #32
 80056aa:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2203      	movs	r2, #3
 80056b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	e244      	b.n	8005b42 <HAL_DMA_Init+0x642>
 80056b8:	40020010 	.word	0x40020010
 80056bc:	40020028 	.word	0x40020028
 80056c0:	40020040 	.word	0x40020040
 80056c4:	40020058 	.word	0x40020058
 80056c8:	40020070 	.word	0x40020070
 80056cc:	40020088 	.word	0x40020088
 80056d0:	400200a0 	.word	0x400200a0
 80056d4:	400200b8 	.word	0x400200b8
 80056d8:	40020410 	.word	0x40020410
 80056dc:	40020428 	.word	0x40020428
 80056e0:	40020440 	.word	0x40020440
 80056e4:	40020458 	.word	0x40020458
 80056e8:	40020470 	.word	0x40020470
 80056ec:	40020488 	.word	0x40020488
 80056f0:	400204a0 	.word	0x400204a0
 80056f4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1c8      	bne.n	8005698 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4b84      	ldr	r3, [pc, #528]	; (8005924 <HAL_DMA_Init+0x424>)
 8005712:	4013      	ands	r3, r2
 8005714:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800571e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800572a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005736:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	2b04      	cmp	r3, #4
 800574a:	d107      	bne.n	800575c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	4313      	orrs	r3, r2
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	2b28      	cmp	r3, #40	; 0x28
 8005762:	d903      	bls.n	800576c <HAL_DMA_Init+0x26c>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b2e      	cmp	r3, #46	; 0x2e
 800576a:	d91f      	bls.n	80057ac <HAL_DMA_Init+0x2ac>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	2b3e      	cmp	r3, #62	; 0x3e
 8005772:	d903      	bls.n	800577c <HAL_DMA_Init+0x27c>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	2b42      	cmp	r3, #66	; 0x42
 800577a:	d917      	bls.n	80057ac <HAL_DMA_Init+0x2ac>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2b46      	cmp	r3, #70	; 0x46
 8005782:	d903      	bls.n	800578c <HAL_DMA_Init+0x28c>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	2b48      	cmp	r3, #72	; 0x48
 800578a:	d90f      	bls.n	80057ac <HAL_DMA_Init+0x2ac>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	2b4e      	cmp	r3, #78	; 0x4e
 8005792:	d903      	bls.n	800579c <HAL_DMA_Init+0x29c>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b52      	cmp	r3, #82	; 0x52
 800579a:	d907      	bls.n	80057ac <HAL_DMA_Init+0x2ac>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2b73      	cmp	r3, #115	; 0x73
 80057a2:	d905      	bls.n	80057b0 <HAL_DMA_Init+0x2b0>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	2b77      	cmp	r3, #119	; 0x77
 80057aa:	d801      	bhi.n	80057b0 <HAL_DMA_Init+0x2b0>
 80057ac:	2301      	movs	r3, #1
 80057ae:	e000      	b.n	80057b2 <HAL_DMA_Init+0x2b2>
 80057b0:	2300      	movs	r3, #0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057bc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	697a      	ldr	r2, [r7, #20]
 80057c4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695b      	ldr	r3, [r3, #20]
 80057cc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f023 0307 	bic.w	r3, r3, #7
 80057d4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4313      	orrs	r3, r2
 80057de:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d117      	bne.n	8005818 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00e      	beq.n	8005818 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f001 fdcc 	bl	8007398 <DMA_CheckFifoParam>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d008      	beq.n	8005818 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2240      	movs	r2, #64	; 0x40
 800580a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2201      	movs	r2, #1
 8005810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e194      	b.n	8005b42 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f001 fd07 	bl	8007234 <DMA_CalcBaseAndBitshift>
 8005826:	4603      	mov	r3, r0
 8005828:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	223f      	movs	r2, #63	; 0x3f
 8005834:	409a      	lsls	r2, r3
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	609a      	str	r2, [r3, #8]
 800583a:	e0ca      	b.n	80059d2 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a39      	ldr	r2, [pc, #228]	; (8005928 <HAL_DMA_Init+0x428>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d022      	beq.n	800588c <HAL_DMA_Init+0x38c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a38      	ldr	r2, [pc, #224]	; (800592c <HAL_DMA_Init+0x42c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d01d      	beq.n	800588c <HAL_DMA_Init+0x38c>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a36      	ldr	r2, [pc, #216]	; (8005930 <HAL_DMA_Init+0x430>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d018      	beq.n	800588c <HAL_DMA_Init+0x38c>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a35      	ldr	r2, [pc, #212]	; (8005934 <HAL_DMA_Init+0x434>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d013      	beq.n	800588c <HAL_DMA_Init+0x38c>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a33      	ldr	r2, [pc, #204]	; (8005938 <HAL_DMA_Init+0x438>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d00e      	beq.n	800588c <HAL_DMA_Init+0x38c>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a32      	ldr	r2, [pc, #200]	; (800593c <HAL_DMA_Init+0x43c>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d009      	beq.n	800588c <HAL_DMA_Init+0x38c>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a30      	ldr	r2, [pc, #192]	; (8005940 <HAL_DMA_Init+0x440>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d004      	beq.n	800588c <HAL_DMA_Init+0x38c>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a2f      	ldr	r2, [pc, #188]	; (8005944 <HAL_DMA_Init+0x444>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d101      	bne.n	8005890 <HAL_DMA_Init+0x390>
 800588c:	2301      	movs	r3, #1
 800588e:	e000      	b.n	8005892 <HAL_DMA_Init+0x392>
 8005890:	2300      	movs	r3, #0
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 8094 	beq.w	80059c0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a22      	ldr	r2, [pc, #136]	; (8005928 <HAL_DMA_Init+0x428>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d021      	beq.n	80058e6 <HAL_DMA_Init+0x3e6>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a21      	ldr	r2, [pc, #132]	; (800592c <HAL_DMA_Init+0x42c>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d01c      	beq.n	80058e6 <HAL_DMA_Init+0x3e6>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a1f      	ldr	r2, [pc, #124]	; (8005930 <HAL_DMA_Init+0x430>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d017      	beq.n	80058e6 <HAL_DMA_Init+0x3e6>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a1e      	ldr	r2, [pc, #120]	; (8005934 <HAL_DMA_Init+0x434>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d012      	beq.n	80058e6 <HAL_DMA_Init+0x3e6>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a1c      	ldr	r2, [pc, #112]	; (8005938 <HAL_DMA_Init+0x438>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d00d      	beq.n	80058e6 <HAL_DMA_Init+0x3e6>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a1b      	ldr	r2, [pc, #108]	; (800593c <HAL_DMA_Init+0x43c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d008      	beq.n	80058e6 <HAL_DMA_Init+0x3e6>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a19      	ldr	r2, [pc, #100]	; (8005940 <HAL_DMA_Init+0x440>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d003      	beq.n	80058e6 <HAL_DMA_Init+0x3e6>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a18      	ldr	r2, [pc, #96]	; (8005944 <HAL_DMA_Init+0x444>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	4b11      	ldr	r3, [pc, #68]	; (8005948 <HAL_DMA_Init+0x448>)
 8005904:	4013      	ands	r3, r2
 8005906:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	2b40      	cmp	r3, #64	; 0x40
 800590e:	d01d      	beq.n	800594c <HAL_DMA_Init+0x44c>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	2b80      	cmp	r3, #128	; 0x80
 8005916:	d102      	bne.n	800591e <HAL_DMA_Init+0x41e>
 8005918:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800591c:	e017      	b.n	800594e <HAL_DMA_Init+0x44e>
 800591e:	2300      	movs	r3, #0
 8005920:	e015      	b.n	800594e <HAL_DMA_Init+0x44e>
 8005922:	bf00      	nop
 8005924:	fe10803f 	.word	0xfe10803f
 8005928:	58025408 	.word	0x58025408
 800592c:	5802541c 	.word	0x5802541c
 8005930:	58025430 	.word	0x58025430
 8005934:	58025444 	.word	0x58025444
 8005938:	58025458 	.word	0x58025458
 800593c:	5802546c 	.word	0x5802546c
 8005940:	58025480 	.word	0x58025480
 8005944:	58025494 	.word	0x58025494
 8005948:	fffe000f 	.word	0xfffe000f
 800594c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	68d2      	ldr	r2, [r2, #12]
 8005952:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005954:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800595c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005964:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800596c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005974:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800597c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	4313      	orrs	r3, r2
 8005982:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	461a      	mov	r2, r3
 8005992:	4b6e      	ldr	r3, [pc, #440]	; (8005b4c <HAL_DMA_Init+0x64c>)
 8005994:	4413      	add	r3, r2
 8005996:	4a6e      	ldr	r2, [pc, #440]	; (8005b50 <HAL_DMA_Init+0x650>)
 8005998:	fba2 2303 	umull	r2, r3, r2, r3
 800599c:	091b      	lsrs	r3, r3, #4
 800599e:	009a      	lsls	r2, r3, #2
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f001 fc45 	bl	8007234 <DMA_CalcBaseAndBitshift>
 80059aa:	4603      	mov	r3, r0
 80059ac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b2:	f003 031f 	and.w	r3, r3, #31
 80059b6:	2201      	movs	r2, #1
 80059b8:	409a      	lsls	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	605a      	str	r2, [r3, #4]
 80059be:	e008      	b.n	80059d2 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2240      	movs	r2, #64	; 0x40
 80059c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2203      	movs	r2, #3
 80059ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e0b7      	b.n	8005b42 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a5f      	ldr	r2, [pc, #380]	; (8005b54 <HAL_DMA_Init+0x654>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d072      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a5d      	ldr	r2, [pc, #372]	; (8005b58 <HAL_DMA_Init+0x658>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d06d      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a5c      	ldr	r2, [pc, #368]	; (8005b5c <HAL_DMA_Init+0x65c>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d068      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a5a      	ldr	r2, [pc, #360]	; (8005b60 <HAL_DMA_Init+0x660>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d063      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a59      	ldr	r2, [pc, #356]	; (8005b64 <HAL_DMA_Init+0x664>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d05e      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a57      	ldr	r2, [pc, #348]	; (8005b68 <HAL_DMA_Init+0x668>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d059      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a56      	ldr	r2, [pc, #344]	; (8005b6c <HAL_DMA_Init+0x66c>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d054      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a54      	ldr	r2, [pc, #336]	; (8005b70 <HAL_DMA_Init+0x670>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d04f      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a53      	ldr	r2, [pc, #332]	; (8005b74 <HAL_DMA_Init+0x674>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d04a      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a51      	ldr	r2, [pc, #324]	; (8005b78 <HAL_DMA_Init+0x678>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d045      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a50      	ldr	r2, [pc, #320]	; (8005b7c <HAL_DMA_Init+0x67c>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d040      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a4e      	ldr	r2, [pc, #312]	; (8005b80 <HAL_DMA_Init+0x680>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d03b      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a4d      	ldr	r2, [pc, #308]	; (8005b84 <HAL_DMA_Init+0x684>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d036      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a4b      	ldr	r2, [pc, #300]	; (8005b88 <HAL_DMA_Init+0x688>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d031      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a4a      	ldr	r2, [pc, #296]	; (8005b8c <HAL_DMA_Init+0x68c>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d02c      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a48      	ldr	r2, [pc, #288]	; (8005b90 <HAL_DMA_Init+0x690>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d027      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a47      	ldr	r2, [pc, #284]	; (8005b94 <HAL_DMA_Init+0x694>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d022      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a45      	ldr	r2, [pc, #276]	; (8005b98 <HAL_DMA_Init+0x698>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d01d      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a44      	ldr	r2, [pc, #272]	; (8005b9c <HAL_DMA_Init+0x69c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d018      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a42      	ldr	r2, [pc, #264]	; (8005ba0 <HAL_DMA_Init+0x6a0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d013      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a41      	ldr	r2, [pc, #260]	; (8005ba4 <HAL_DMA_Init+0x6a4>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00e      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a3f      	ldr	r2, [pc, #252]	; (8005ba8 <HAL_DMA_Init+0x6a8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d009      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a3e      	ldr	r2, [pc, #248]	; (8005bac <HAL_DMA_Init+0x6ac>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d004      	beq.n	8005ac2 <HAL_DMA_Init+0x5c2>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a3c      	ldr	r2, [pc, #240]	; (8005bb0 <HAL_DMA_Init+0x6b0>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d101      	bne.n	8005ac6 <HAL_DMA_Init+0x5c6>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e000      	b.n	8005ac8 <HAL_DMA_Init+0x5c8>
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d032      	beq.n	8005b32 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f001 fcdf 	bl	8007490 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	2b80      	cmp	r3, #128	; 0x80
 8005ad8:	d102      	bne.n	8005ae0 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685a      	ldr	r2, [r3, #4]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ae8:	b2d2      	uxtb	r2, r2
 8005aea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005af4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d010      	beq.n	8005b20 <HAL_DMA_Init+0x620>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	2b08      	cmp	r3, #8
 8005b04:	d80c      	bhi.n	8005b20 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f001 fd5c 	bl	80075c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b10:	2200      	movs	r2, #0
 8005b12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005b1c:	605a      	str	r2, [r3, #4]
 8005b1e:	e008      	b.n	8005b32 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005b40:	2300      	movs	r3, #0
}
 8005b42:	4618      	mov	r0, r3
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	a7fdabf8 	.word	0xa7fdabf8
 8005b50:	cccccccd 	.word	0xcccccccd
 8005b54:	40020010 	.word	0x40020010
 8005b58:	40020028 	.word	0x40020028
 8005b5c:	40020040 	.word	0x40020040
 8005b60:	40020058 	.word	0x40020058
 8005b64:	40020070 	.word	0x40020070
 8005b68:	40020088 	.word	0x40020088
 8005b6c:	400200a0 	.word	0x400200a0
 8005b70:	400200b8 	.word	0x400200b8
 8005b74:	40020410 	.word	0x40020410
 8005b78:	40020428 	.word	0x40020428
 8005b7c:	40020440 	.word	0x40020440
 8005b80:	40020458 	.word	0x40020458
 8005b84:	40020470 	.word	0x40020470
 8005b88:	40020488 	.word	0x40020488
 8005b8c:	400204a0 	.word	0x400204a0
 8005b90:	400204b8 	.word	0x400204b8
 8005b94:	58025408 	.word	0x58025408
 8005b98:	5802541c 	.word	0x5802541c
 8005b9c:	58025430 	.word	0x58025430
 8005ba0:	58025444 	.word	0x58025444
 8005ba4:	58025458 	.word	0x58025458
 8005ba8:	5802546c 	.word	0x5802546c
 8005bac:	58025480 	.word	0x58025480
 8005bb0:	58025494 	.word	0x58025494

08005bb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b086      	sub	sp, #24
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
 8005bc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d101      	bne.n	8005bd0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005bcc:	2301      	movs	r3, #1
 8005bce:	e226      	b.n	800601e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d101      	bne.n	8005bde <HAL_DMA_Start_IT+0x2a>
 8005bda:	2302      	movs	r3, #2
 8005bdc:	e21f      	b.n	800601e <HAL_DMA_Start_IT+0x46a>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	f040 820a 	bne.w	8006008 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a68      	ldr	r2, [pc, #416]	; (8005da8 <HAL_DMA_Start_IT+0x1f4>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d04a      	beq.n	8005ca2 <HAL_DMA_Start_IT+0xee>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a66      	ldr	r2, [pc, #408]	; (8005dac <HAL_DMA_Start_IT+0x1f8>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d045      	beq.n	8005ca2 <HAL_DMA_Start_IT+0xee>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a65      	ldr	r2, [pc, #404]	; (8005db0 <HAL_DMA_Start_IT+0x1fc>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d040      	beq.n	8005ca2 <HAL_DMA_Start_IT+0xee>
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a63      	ldr	r2, [pc, #396]	; (8005db4 <HAL_DMA_Start_IT+0x200>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d03b      	beq.n	8005ca2 <HAL_DMA_Start_IT+0xee>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a62      	ldr	r2, [pc, #392]	; (8005db8 <HAL_DMA_Start_IT+0x204>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d036      	beq.n	8005ca2 <HAL_DMA_Start_IT+0xee>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a60      	ldr	r2, [pc, #384]	; (8005dbc <HAL_DMA_Start_IT+0x208>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d031      	beq.n	8005ca2 <HAL_DMA_Start_IT+0xee>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a5f      	ldr	r2, [pc, #380]	; (8005dc0 <HAL_DMA_Start_IT+0x20c>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d02c      	beq.n	8005ca2 <HAL_DMA_Start_IT+0xee>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a5d      	ldr	r2, [pc, #372]	; (8005dc4 <HAL_DMA_Start_IT+0x210>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d027      	beq.n	8005ca2 <HAL_DMA_Start_IT+0xee>
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4a5c      	ldr	r2, [pc, #368]	; (8005dc8 <HAL_DMA_Start_IT+0x214>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d022      	beq.n	8005ca2 <HAL_DMA_Start_IT+0xee>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a5a      	ldr	r2, [pc, #360]	; (8005dcc <HAL_DMA_Start_IT+0x218>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d01d      	beq.n	8005ca2 <HAL_DMA_Start_IT+0xee>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a59      	ldr	r2, [pc, #356]	; (8005dd0 <HAL_DMA_Start_IT+0x21c>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d018      	beq.n	8005ca2 <HAL_DMA_Start_IT+0xee>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a57      	ldr	r2, [pc, #348]	; (8005dd4 <HAL_DMA_Start_IT+0x220>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d013      	beq.n	8005ca2 <HAL_DMA_Start_IT+0xee>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a56      	ldr	r2, [pc, #344]	; (8005dd8 <HAL_DMA_Start_IT+0x224>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d00e      	beq.n	8005ca2 <HAL_DMA_Start_IT+0xee>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a54      	ldr	r2, [pc, #336]	; (8005ddc <HAL_DMA_Start_IT+0x228>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d009      	beq.n	8005ca2 <HAL_DMA_Start_IT+0xee>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a53      	ldr	r2, [pc, #332]	; (8005de0 <HAL_DMA_Start_IT+0x22c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d004      	beq.n	8005ca2 <HAL_DMA_Start_IT+0xee>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a51      	ldr	r2, [pc, #324]	; (8005de4 <HAL_DMA_Start_IT+0x230>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d108      	bne.n	8005cb4 <HAL_DMA_Start_IT+0x100>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f022 0201 	bic.w	r2, r2, #1
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	e007      	b.n	8005cc4 <HAL_DMA_Start_IT+0x110>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f022 0201 	bic.w	r2, r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	68b9      	ldr	r1, [r7, #8]
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f001 f906 	bl	8006edc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a34      	ldr	r2, [pc, #208]	; (8005da8 <HAL_DMA_Start_IT+0x1f4>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d04a      	beq.n	8005d70 <HAL_DMA_Start_IT+0x1bc>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a33      	ldr	r2, [pc, #204]	; (8005dac <HAL_DMA_Start_IT+0x1f8>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d045      	beq.n	8005d70 <HAL_DMA_Start_IT+0x1bc>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a31      	ldr	r2, [pc, #196]	; (8005db0 <HAL_DMA_Start_IT+0x1fc>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d040      	beq.n	8005d70 <HAL_DMA_Start_IT+0x1bc>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a30      	ldr	r2, [pc, #192]	; (8005db4 <HAL_DMA_Start_IT+0x200>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d03b      	beq.n	8005d70 <HAL_DMA_Start_IT+0x1bc>
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a2e      	ldr	r2, [pc, #184]	; (8005db8 <HAL_DMA_Start_IT+0x204>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d036      	beq.n	8005d70 <HAL_DMA_Start_IT+0x1bc>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a2d      	ldr	r2, [pc, #180]	; (8005dbc <HAL_DMA_Start_IT+0x208>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d031      	beq.n	8005d70 <HAL_DMA_Start_IT+0x1bc>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a2b      	ldr	r2, [pc, #172]	; (8005dc0 <HAL_DMA_Start_IT+0x20c>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d02c      	beq.n	8005d70 <HAL_DMA_Start_IT+0x1bc>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a2a      	ldr	r2, [pc, #168]	; (8005dc4 <HAL_DMA_Start_IT+0x210>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d027      	beq.n	8005d70 <HAL_DMA_Start_IT+0x1bc>
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a28      	ldr	r2, [pc, #160]	; (8005dc8 <HAL_DMA_Start_IT+0x214>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d022      	beq.n	8005d70 <HAL_DMA_Start_IT+0x1bc>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a27      	ldr	r2, [pc, #156]	; (8005dcc <HAL_DMA_Start_IT+0x218>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d01d      	beq.n	8005d70 <HAL_DMA_Start_IT+0x1bc>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a25      	ldr	r2, [pc, #148]	; (8005dd0 <HAL_DMA_Start_IT+0x21c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d018      	beq.n	8005d70 <HAL_DMA_Start_IT+0x1bc>
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a24      	ldr	r2, [pc, #144]	; (8005dd4 <HAL_DMA_Start_IT+0x220>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d013      	beq.n	8005d70 <HAL_DMA_Start_IT+0x1bc>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a22      	ldr	r2, [pc, #136]	; (8005dd8 <HAL_DMA_Start_IT+0x224>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d00e      	beq.n	8005d70 <HAL_DMA_Start_IT+0x1bc>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a21      	ldr	r2, [pc, #132]	; (8005ddc <HAL_DMA_Start_IT+0x228>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d009      	beq.n	8005d70 <HAL_DMA_Start_IT+0x1bc>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a1f      	ldr	r2, [pc, #124]	; (8005de0 <HAL_DMA_Start_IT+0x22c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d004      	beq.n	8005d70 <HAL_DMA_Start_IT+0x1bc>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a1e      	ldr	r2, [pc, #120]	; (8005de4 <HAL_DMA_Start_IT+0x230>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d101      	bne.n	8005d74 <HAL_DMA_Start_IT+0x1c0>
 8005d70:	2301      	movs	r3, #1
 8005d72:	e000      	b.n	8005d76 <HAL_DMA_Start_IT+0x1c2>
 8005d74:	2300      	movs	r3, #0
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d036      	beq.n	8005de8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f023 021e 	bic.w	r2, r3, #30
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f042 0216 	orr.w	r2, r2, #22
 8005d8c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d03e      	beq.n	8005e14 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f042 0208 	orr.w	r2, r2, #8
 8005da4:	601a      	str	r2, [r3, #0]
 8005da6:	e035      	b.n	8005e14 <HAL_DMA_Start_IT+0x260>
 8005da8:	40020010 	.word	0x40020010
 8005dac:	40020028 	.word	0x40020028
 8005db0:	40020040 	.word	0x40020040
 8005db4:	40020058 	.word	0x40020058
 8005db8:	40020070 	.word	0x40020070
 8005dbc:	40020088 	.word	0x40020088
 8005dc0:	400200a0 	.word	0x400200a0
 8005dc4:	400200b8 	.word	0x400200b8
 8005dc8:	40020410 	.word	0x40020410
 8005dcc:	40020428 	.word	0x40020428
 8005dd0:	40020440 	.word	0x40020440
 8005dd4:	40020458 	.word	0x40020458
 8005dd8:	40020470 	.word	0x40020470
 8005ddc:	40020488 	.word	0x40020488
 8005de0:	400204a0 	.word	0x400204a0
 8005de4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f023 020e 	bic.w	r2, r3, #14
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 020a 	orr.w	r2, r2, #10
 8005dfa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d007      	beq.n	8005e14 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f042 0204 	orr.w	r2, r2, #4
 8005e12:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a83      	ldr	r2, [pc, #524]	; (8006028 <HAL_DMA_Start_IT+0x474>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d072      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a82      	ldr	r2, [pc, #520]	; (800602c <HAL_DMA_Start_IT+0x478>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d06d      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a80      	ldr	r2, [pc, #512]	; (8006030 <HAL_DMA_Start_IT+0x47c>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d068      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a7f      	ldr	r2, [pc, #508]	; (8006034 <HAL_DMA_Start_IT+0x480>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d063      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a7d      	ldr	r2, [pc, #500]	; (8006038 <HAL_DMA_Start_IT+0x484>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d05e      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a7c      	ldr	r2, [pc, #496]	; (800603c <HAL_DMA_Start_IT+0x488>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d059      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a7a      	ldr	r2, [pc, #488]	; (8006040 <HAL_DMA_Start_IT+0x48c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d054      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a79      	ldr	r2, [pc, #484]	; (8006044 <HAL_DMA_Start_IT+0x490>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d04f      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a77      	ldr	r2, [pc, #476]	; (8006048 <HAL_DMA_Start_IT+0x494>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d04a      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a76      	ldr	r2, [pc, #472]	; (800604c <HAL_DMA_Start_IT+0x498>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d045      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a74      	ldr	r2, [pc, #464]	; (8006050 <HAL_DMA_Start_IT+0x49c>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d040      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a73      	ldr	r2, [pc, #460]	; (8006054 <HAL_DMA_Start_IT+0x4a0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d03b      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a71      	ldr	r2, [pc, #452]	; (8006058 <HAL_DMA_Start_IT+0x4a4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d036      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a70      	ldr	r2, [pc, #448]	; (800605c <HAL_DMA_Start_IT+0x4a8>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d031      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a6e      	ldr	r2, [pc, #440]	; (8006060 <HAL_DMA_Start_IT+0x4ac>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d02c      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a6d      	ldr	r2, [pc, #436]	; (8006064 <HAL_DMA_Start_IT+0x4b0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d027      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a6b      	ldr	r2, [pc, #428]	; (8006068 <HAL_DMA_Start_IT+0x4b4>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d022      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a6a      	ldr	r2, [pc, #424]	; (800606c <HAL_DMA_Start_IT+0x4b8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d01d      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a68      	ldr	r2, [pc, #416]	; (8006070 <HAL_DMA_Start_IT+0x4bc>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d018      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a67      	ldr	r2, [pc, #412]	; (8006074 <HAL_DMA_Start_IT+0x4c0>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d013      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a65      	ldr	r2, [pc, #404]	; (8006078 <HAL_DMA_Start_IT+0x4c4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d00e      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a64      	ldr	r2, [pc, #400]	; (800607c <HAL_DMA_Start_IT+0x4c8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d009      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a62      	ldr	r2, [pc, #392]	; (8006080 <HAL_DMA_Start_IT+0x4cc>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d004      	beq.n	8005f04 <HAL_DMA_Start_IT+0x350>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a61      	ldr	r2, [pc, #388]	; (8006084 <HAL_DMA_Start_IT+0x4d0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d101      	bne.n	8005f08 <HAL_DMA_Start_IT+0x354>
 8005f04:	2301      	movs	r3, #1
 8005f06:	e000      	b.n	8005f0a <HAL_DMA_Start_IT+0x356>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d01a      	beq.n	8005f44 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d007      	beq.n	8005f2c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f2a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d007      	beq.n	8005f44 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f42:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a37      	ldr	r2, [pc, #220]	; (8006028 <HAL_DMA_Start_IT+0x474>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d04a      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x430>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a36      	ldr	r2, [pc, #216]	; (800602c <HAL_DMA_Start_IT+0x478>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d045      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x430>
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a34      	ldr	r2, [pc, #208]	; (8006030 <HAL_DMA_Start_IT+0x47c>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d040      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x430>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a33      	ldr	r2, [pc, #204]	; (8006034 <HAL_DMA_Start_IT+0x480>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d03b      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x430>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a31      	ldr	r2, [pc, #196]	; (8006038 <HAL_DMA_Start_IT+0x484>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d036      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x430>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a30      	ldr	r2, [pc, #192]	; (800603c <HAL_DMA_Start_IT+0x488>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d031      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x430>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a2e      	ldr	r2, [pc, #184]	; (8006040 <HAL_DMA_Start_IT+0x48c>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d02c      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x430>
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a2d      	ldr	r2, [pc, #180]	; (8006044 <HAL_DMA_Start_IT+0x490>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d027      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x430>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a2b      	ldr	r2, [pc, #172]	; (8006048 <HAL_DMA_Start_IT+0x494>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d022      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x430>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a2a      	ldr	r2, [pc, #168]	; (800604c <HAL_DMA_Start_IT+0x498>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d01d      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x430>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a28      	ldr	r2, [pc, #160]	; (8006050 <HAL_DMA_Start_IT+0x49c>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d018      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x430>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a27      	ldr	r2, [pc, #156]	; (8006054 <HAL_DMA_Start_IT+0x4a0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d013      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x430>
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a25      	ldr	r2, [pc, #148]	; (8006058 <HAL_DMA_Start_IT+0x4a4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00e      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x430>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a24      	ldr	r2, [pc, #144]	; (800605c <HAL_DMA_Start_IT+0x4a8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d009      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x430>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a22      	ldr	r2, [pc, #136]	; (8006060 <HAL_DMA_Start_IT+0x4ac>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d004      	beq.n	8005fe4 <HAL_DMA_Start_IT+0x430>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a21      	ldr	r2, [pc, #132]	; (8006064 <HAL_DMA_Start_IT+0x4b0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d108      	bne.n	8005ff6 <HAL_DMA_Start_IT+0x442>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f042 0201 	orr.w	r2, r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	e012      	b.n	800601c <HAL_DMA_Start_IT+0x468>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f042 0201 	orr.w	r2, r2, #1
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	e009      	b.n	800601c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800600e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800601c:	7dfb      	ldrb	r3, [r7, #23]
}
 800601e:	4618      	mov	r0, r3
 8006020:	3718      	adds	r7, #24
 8006022:	46bd      	mov	sp, r7
 8006024:	bd80      	pop	{r7, pc}
 8006026:	bf00      	nop
 8006028:	40020010 	.word	0x40020010
 800602c:	40020028 	.word	0x40020028
 8006030:	40020040 	.word	0x40020040
 8006034:	40020058 	.word	0x40020058
 8006038:	40020070 	.word	0x40020070
 800603c:	40020088 	.word	0x40020088
 8006040:	400200a0 	.word	0x400200a0
 8006044:	400200b8 	.word	0x400200b8
 8006048:	40020410 	.word	0x40020410
 800604c:	40020428 	.word	0x40020428
 8006050:	40020440 	.word	0x40020440
 8006054:	40020458 	.word	0x40020458
 8006058:	40020470 	.word	0x40020470
 800605c:	40020488 	.word	0x40020488
 8006060:	400204a0 	.word	0x400204a0
 8006064:	400204b8 	.word	0x400204b8
 8006068:	58025408 	.word	0x58025408
 800606c:	5802541c 	.word	0x5802541c
 8006070:	58025430 	.word	0x58025430
 8006074:	58025444 	.word	0x58025444
 8006078:	58025458 	.word	0x58025458
 800607c:	5802546c 	.word	0x5802546c
 8006080:	58025480 	.word	0x58025480
 8006084:	58025494 	.word	0x58025494

08006088 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08a      	sub	sp, #40	; 0x28
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006090:	2300      	movs	r3, #0
 8006092:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006094:	4b67      	ldr	r3, [pc, #412]	; (8006234 <HAL_DMA_IRQHandler+0x1ac>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a67      	ldr	r2, [pc, #412]	; (8006238 <HAL_DMA_IRQHandler+0x1b0>)
 800609a:	fba2 2303 	umull	r2, r3, r2, r3
 800609e:	0a9b      	lsrs	r3, r3, #10
 80060a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060a6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ac:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80060ae:	6a3b      	ldr	r3, [r7, #32]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a5f      	ldr	r2, [pc, #380]	; (800623c <HAL_DMA_IRQHandler+0x1b4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d04a      	beq.n	800615a <HAL_DMA_IRQHandler+0xd2>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a5d      	ldr	r2, [pc, #372]	; (8006240 <HAL_DMA_IRQHandler+0x1b8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d045      	beq.n	800615a <HAL_DMA_IRQHandler+0xd2>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a5c      	ldr	r2, [pc, #368]	; (8006244 <HAL_DMA_IRQHandler+0x1bc>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d040      	beq.n	800615a <HAL_DMA_IRQHandler+0xd2>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4a5a      	ldr	r2, [pc, #360]	; (8006248 <HAL_DMA_IRQHandler+0x1c0>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d03b      	beq.n	800615a <HAL_DMA_IRQHandler+0xd2>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a59      	ldr	r2, [pc, #356]	; (800624c <HAL_DMA_IRQHandler+0x1c4>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d036      	beq.n	800615a <HAL_DMA_IRQHandler+0xd2>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a57      	ldr	r2, [pc, #348]	; (8006250 <HAL_DMA_IRQHandler+0x1c8>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d031      	beq.n	800615a <HAL_DMA_IRQHandler+0xd2>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a56      	ldr	r2, [pc, #344]	; (8006254 <HAL_DMA_IRQHandler+0x1cc>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d02c      	beq.n	800615a <HAL_DMA_IRQHandler+0xd2>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a54      	ldr	r2, [pc, #336]	; (8006258 <HAL_DMA_IRQHandler+0x1d0>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d027      	beq.n	800615a <HAL_DMA_IRQHandler+0xd2>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a53      	ldr	r2, [pc, #332]	; (800625c <HAL_DMA_IRQHandler+0x1d4>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d022      	beq.n	800615a <HAL_DMA_IRQHandler+0xd2>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a51      	ldr	r2, [pc, #324]	; (8006260 <HAL_DMA_IRQHandler+0x1d8>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d01d      	beq.n	800615a <HAL_DMA_IRQHandler+0xd2>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a50      	ldr	r2, [pc, #320]	; (8006264 <HAL_DMA_IRQHandler+0x1dc>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d018      	beq.n	800615a <HAL_DMA_IRQHandler+0xd2>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a4e      	ldr	r2, [pc, #312]	; (8006268 <HAL_DMA_IRQHandler+0x1e0>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d013      	beq.n	800615a <HAL_DMA_IRQHandler+0xd2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a4d      	ldr	r2, [pc, #308]	; (800626c <HAL_DMA_IRQHandler+0x1e4>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d00e      	beq.n	800615a <HAL_DMA_IRQHandler+0xd2>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a4b      	ldr	r2, [pc, #300]	; (8006270 <HAL_DMA_IRQHandler+0x1e8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d009      	beq.n	800615a <HAL_DMA_IRQHandler+0xd2>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a4a      	ldr	r2, [pc, #296]	; (8006274 <HAL_DMA_IRQHandler+0x1ec>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d004      	beq.n	800615a <HAL_DMA_IRQHandler+0xd2>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a48      	ldr	r2, [pc, #288]	; (8006278 <HAL_DMA_IRQHandler+0x1f0>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d101      	bne.n	800615e <HAL_DMA_IRQHandler+0xd6>
 800615a:	2301      	movs	r3, #1
 800615c:	e000      	b.n	8006160 <HAL_DMA_IRQHandler+0xd8>
 800615e:	2300      	movs	r3, #0
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 842b 	beq.w	80069bc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800616a:	f003 031f 	and.w	r3, r3, #31
 800616e:	2208      	movs	r2, #8
 8006170:	409a      	lsls	r2, r3
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	4013      	ands	r3, r2
 8006176:	2b00      	cmp	r3, #0
 8006178:	f000 80a2 	beq.w	80062c0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a2e      	ldr	r2, [pc, #184]	; (800623c <HAL_DMA_IRQHandler+0x1b4>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d04a      	beq.n	800621c <HAL_DMA_IRQHandler+0x194>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a2d      	ldr	r2, [pc, #180]	; (8006240 <HAL_DMA_IRQHandler+0x1b8>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d045      	beq.n	800621c <HAL_DMA_IRQHandler+0x194>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a2b      	ldr	r2, [pc, #172]	; (8006244 <HAL_DMA_IRQHandler+0x1bc>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d040      	beq.n	800621c <HAL_DMA_IRQHandler+0x194>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a2a      	ldr	r2, [pc, #168]	; (8006248 <HAL_DMA_IRQHandler+0x1c0>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d03b      	beq.n	800621c <HAL_DMA_IRQHandler+0x194>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a28      	ldr	r2, [pc, #160]	; (800624c <HAL_DMA_IRQHandler+0x1c4>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d036      	beq.n	800621c <HAL_DMA_IRQHandler+0x194>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a27      	ldr	r2, [pc, #156]	; (8006250 <HAL_DMA_IRQHandler+0x1c8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d031      	beq.n	800621c <HAL_DMA_IRQHandler+0x194>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a25      	ldr	r2, [pc, #148]	; (8006254 <HAL_DMA_IRQHandler+0x1cc>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d02c      	beq.n	800621c <HAL_DMA_IRQHandler+0x194>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a24      	ldr	r2, [pc, #144]	; (8006258 <HAL_DMA_IRQHandler+0x1d0>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d027      	beq.n	800621c <HAL_DMA_IRQHandler+0x194>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a22      	ldr	r2, [pc, #136]	; (800625c <HAL_DMA_IRQHandler+0x1d4>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d022      	beq.n	800621c <HAL_DMA_IRQHandler+0x194>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4a21      	ldr	r2, [pc, #132]	; (8006260 <HAL_DMA_IRQHandler+0x1d8>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d01d      	beq.n	800621c <HAL_DMA_IRQHandler+0x194>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a1f      	ldr	r2, [pc, #124]	; (8006264 <HAL_DMA_IRQHandler+0x1dc>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d018      	beq.n	800621c <HAL_DMA_IRQHandler+0x194>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	4a1e      	ldr	r2, [pc, #120]	; (8006268 <HAL_DMA_IRQHandler+0x1e0>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d013      	beq.n	800621c <HAL_DMA_IRQHandler+0x194>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a1c      	ldr	r2, [pc, #112]	; (800626c <HAL_DMA_IRQHandler+0x1e4>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d00e      	beq.n	800621c <HAL_DMA_IRQHandler+0x194>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a1b      	ldr	r2, [pc, #108]	; (8006270 <HAL_DMA_IRQHandler+0x1e8>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d009      	beq.n	800621c <HAL_DMA_IRQHandler+0x194>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a19      	ldr	r2, [pc, #100]	; (8006274 <HAL_DMA_IRQHandler+0x1ec>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d004      	beq.n	800621c <HAL_DMA_IRQHandler+0x194>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a18      	ldr	r2, [pc, #96]	; (8006278 <HAL_DMA_IRQHandler+0x1f0>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d12f      	bne.n	800627c <HAL_DMA_IRQHandler+0x1f4>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b00      	cmp	r3, #0
 8006228:	bf14      	ite	ne
 800622a:	2301      	movne	r3, #1
 800622c:	2300      	moveq	r3, #0
 800622e:	b2db      	uxtb	r3, r3
 8006230:	e02e      	b.n	8006290 <HAL_DMA_IRQHandler+0x208>
 8006232:	bf00      	nop
 8006234:	24000000 	.word	0x24000000
 8006238:	1b4e81b5 	.word	0x1b4e81b5
 800623c:	40020010 	.word	0x40020010
 8006240:	40020028 	.word	0x40020028
 8006244:	40020040 	.word	0x40020040
 8006248:	40020058 	.word	0x40020058
 800624c:	40020070 	.word	0x40020070
 8006250:	40020088 	.word	0x40020088
 8006254:	400200a0 	.word	0x400200a0
 8006258:	400200b8 	.word	0x400200b8
 800625c:	40020410 	.word	0x40020410
 8006260:	40020428 	.word	0x40020428
 8006264:	40020440 	.word	0x40020440
 8006268:	40020458 	.word	0x40020458
 800626c:	40020470 	.word	0x40020470
 8006270:	40020488 	.word	0x40020488
 8006274:	400204a0 	.word	0x400204a0
 8006278:	400204b8 	.word	0x400204b8
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f003 0308 	and.w	r3, r3, #8
 8006286:	2b00      	cmp	r3, #0
 8006288:	bf14      	ite	ne
 800628a:	2301      	movne	r3, #1
 800628c:	2300      	moveq	r3, #0
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	d015      	beq.n	80062c0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 0204 	bic.w	r2, r2, #4
 80062a2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a8:	f003 031f 	and.w	r3, r3, #31
 80062ac:	2208      	movs	r2, #8
 80062ae:	409a      	lsls	r2, r3
 80062b0:	6a3b      	ldr	r3, [r7, #32]
 80062b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062b8:	f043 0201 	orr.w	r2, r3, #1
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062c4:	f003 031f 	and.w	r3, r3, #31
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	fa22 f303 	lsr.w	r3, r2, r3
 80062ce:	f003 0301 	and.w	r3, r3, #1
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d06e      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a69      	ldr	r2, [pc, #420]	; (8006480 <HAL_DMA_IRQHandler+0x3f8>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d04a      	beq.n	8006376 <HAL_DMA_IRQHandler+0x2ee>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a67      	ldr	r2, [pc, #412]	; (8006484 <HAL_DMA_IRQHandler+0x3fc>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d045      	beq.n	8006376 <HAL_DMA_IRQHandler+0x2ee>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a66      	ldr	r2, [pc, #408]	; (8006488 <HAL_DMA_IRQHandler+0x400>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d040      	beq.n	8006376 <HAL_DMA_IRQHandler+0x2ee>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a64      	ldr	r2, [pc, #400]	; (800648c <HAL_DMA_IRQHandler+0x404>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d03b      	beq.n	8006376 <HAL_DMA_IRQHandler+0x2ee>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a63      	ldr	r2, [pc, #396]	; (8006490 <HAL_DMA_IRQHandler+0x408>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d036      	beq.n	8006376 <HAL_DMA_IRQHandler+0x2ee>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a61      	ldr	r2, [pc, #388]	; (8006494 <HAL_DMA_IRQHandler+0x40c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d031      	beq.n	8006376 <HAL_DMA_IRQHandler+0x2ee>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a60      	ldr	r2, [pc, #384]	; (8006498 <HAL_DMA_IRQHandler+0x410>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d02c      	beq.n	8006376 <HAL_DMA_IRQHandler+0x2ee>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a5e      	ldr	r2, [pc, #376]	; (800649c <HAL_DMA_IRQHandler+0x414>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d027      	beq.n	8006376 <HAL_DMA_IRQHandler+0x2ee>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a5d      	ldr	r2, [pc, #372]	; (80064a0 <HAL_DMA_IRQHandler+0x418>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d022      	beq.n	8006376 <HAL_DMA_IRQHandler+0x2ee>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a5b      	ldr	r2, [pc, #364]	; (80064a4 <HAL_DMA_IRQHandler+0x41c>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d01d      	beq.n	8006376 <HAL_DMA_IRQHandler+0x2ee>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a5a      	ldr	r2, [pc, #360]	; (80064a8 <HAL_DMA_IRQHandler+0x420>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d018      	beq.n	8006376 <HAL_DMA_IRQHandler+0x2ee>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a58      	ldr	r2, [pc, #352]	; (80064ac <HAL_DMA_IRQHandler+0x424>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d013      	beq.n	8006376 <HAL_DMA_IRQHandler+0x2ee>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a57      	ldr	r2, [pc, #348]	; (80064b0 <HAL_DMA_IRQHandler+0x428>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d00e      	beq.n	8006376 <HAL_DMA_IRQHandler+0x2ee>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a55      	ldr	r2, [pc, #340]	; (80064b4 <HAL_DMA_IRQHandler+0x42c>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d009      	beq.n	8006376 <HAL_DMA_IRQHandler+0x2ee>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a54      	ldr	r2, [pc, #336]	; (80064b8 <HAL_DMA_IRQHandler+0x430>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d004      	beq.n	8006376 <HAL_DMA_IRQHandler+0x2ee>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a52      	ldr	r2, [pc, #328]	; (80064bc <HAL_DMA_IRQHandler+0x434>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d10a      	bne.n	800638c <HAL_DMA_IRQHandler+0x304>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006380:	2b00      	cmp	r3, #0
 8006382:	bf14      	ite	ne
 8006384:	2301      	movne	r3, #1
 8006386:	2300      	moveq	r3, #0
 8006388:	b2db      	uxtb	r3, r3
 800638a:	e003      	b.n	8006394 <HAL_DMA_IRQHandler+0x30c>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2300      	movs	r3, #0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d00d      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800639c:	f003 031f 	and.w	r3, r3, #31
 80063a0:	2201      	movs	r2, #1
 80063a2:	409a      	lsls	r2, r3
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ac:	f043 0202 	orr.w	r2, r3, #2
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b8:	f003 031f 	and.w	r3, r3, #31
 80063bc:	2204      	movs	r2, #4
 80063be:	409a      	lsls	r2, r3
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	4013      	ands	r3, r2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f000 808f 	beq.w	80064e8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a2c      	ldr	r2, [pc, #176]	; (8006480 <HAL_DMA_IRQHandler+0x3f8>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d04a      	beq.n	800646a <HAL_DMA_IRQHandler+0x3e2>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a2a      	ldr	r2, [pc, #168]	; (8006484 <HAL_DMA_IRQHandler+0x3fc>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d045      	beq.n	800646a <HAL_DMA_IRQHandler+0x3e2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a29      	ldr	r2, [pc, #164]	; (8006488 <HAL_DMA_IRQHandler+0x400>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d040      	beq.n	800646a <HAL_DMA_IRQHandler+0x3e2>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a27      	ldr	r2, [pc, #156]	; (800648c <HAL_DMA_IRQHandler+0x404>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d03b      	beq.n	800646a <HAL_DMA_IRQHandler+0x3e2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a26      	ldr	r2, [pc, #152]	; (8006490 <HAL_DMA_IRQHandler+0x408>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d036      	beq.n	800646a <HAL_DMA_IRQHandler+0x3e2>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a24      	ldr	r2, [pc, #144]	; (8006494 <HAL_DMA_IRQHandler+0x40c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d031      	beq.n	800646a <HAL_DMA_IRQHandler+0x3e2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a23      	ldr	r2, [pc, #140]	; (8006498 <HAL_DMA_IRQHandler+0x410>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d02c      	beq.n	800646a <HAL_DMA_IRQHandler+0x3e2>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a21      	ldr	r2, [pc, #132]	; (800649c <HAL_DMA_IRQHandler+0x414>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d027      	beq.n	800646a <HAL_DMA_IRQHandler+0x3e2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a20      	ldr	r2, [pc, #128]	; (80064a0 <HAL_DMA_IRQHandler+0x418>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d022      	beq.n	800646a <HAL_DMA_IRQHandler+0x3e2>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a1e      	ldr	r2, [pc, #120]	; (80064a4 <HAL_DMA_IRQHandler+0x41c>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d01d      	beq.n	800646a <HAL_DMA_IRQHandler+0x3e2>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a1d      	ldr	r2, [pc, #116]	; (80064a8 <HAL_DMA_IRQHandler+0x420>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d018      	beq.n	800646a <HAL_DMA_IRQHandler+0x3e2>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1b      	ldr	r2, [pc, #108]	; (80064ac <HAL_DMA_IRQHandler+0x424>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d013      	beq.n	800646a <HAL_DMA_IRQHandler+0x3e2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a1a      	ldr	r2, [pc, #104]	; (80064b0 <HAL_DMA_IRQHandler+0x428>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00e      	beq.n	800646a <HAL_DMA_IRQHandler+0x3e2>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a18      	ldr	r2, [pc, #96]	; (80064b4 <HAL_DMA_IRQHandler+0x42c>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d009      	beq.n	800646a <HAL_DMA_IRQHandler+0x3e2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a17      	ldr	r2, [pc, #92]	; (80064b8 <HAL_DMA_IRQHandler+0x430>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d004      	beq.n	800646a <HAL_DMA_IRQHandler+0x3e2>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4a15      	ldr	r2, [pc, #84]	; (80064bc <HAL_DMA_IRQHandler+0x434>)
 8006466:	4293      	cmp	r3, r2
 8006468:	d12a      	bne.n	80064c0 <HAL_DMA_IRQHandler+0x438>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f003 0302 	and.w	r3, r3, #2
 8006474:	2b00      	cmp	r3, #0
 8006476:	bf14      	ite	ne
 8006478:	2301      	movne	r3, #1
 800647a:	2300      	moveq	r3, #0
 800647c:	b2db      	uxtb	r3, r3
 800647e:	e023      	b.n	80064c8 <HAL_DMA_IRQHandler+0x440>
 8006480:	40020010 	.word	0x40020010
 8006484:	40020028 	.word	0x40020028
 8006488:	40020040 	.word	0x40020040
 800648c:	40020058 	.word	0x40020058
 8006490:	40020070 	.word	0x40020070
 8006494:	40020088 	.word	0x40020088
 8006498:	400200a0 	.word	0x400200a0
 800649c:	400200b8 	.word	0x400200b8
 80064a0:	40020410 	.word	0x40020410
 80064a4:	40020428 	.word	0x40020428
 80064a8:	40020440 	.word	0x40020440
 80064ac:	40020458 	.word	0x40020458
 80064b0:	40020470 	.word	0x40020470
 80064b4:	40020488 	.word	0x40020488
 80064b8:	400204a0 	.word	0x400204a0
 80064bc:	400204b8 	.word	0x400204b8
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2300      	movs	r3, #0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d00d      	beq.n	80064e8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064d0:	f003 031f 	and.w	r3, r3, #31
 80064d4:	2204      	movs	r2, #4
 80064d6:	409a      	lsls	r2, r3
 80064d8:	6a3b      	ldr	r3, [r7, #32]
 80064da:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e0:	f043 0204 	orr.w	r2, r3, #4
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064ec:	f003 031f 	and.w	r3, r3, #31
 80064f0:	2210      	movs	r2, #16
 80064f2:	409a      	lsls	r2, r3
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	4013      	ands	r3, r2
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 80a6 	beq.w	800664a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a85      	ldr	r2, [pc, #532]	; (8006718 <HAL_DMA_IRQHandler+0x690>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d04a      	beq.n	800659e <HAL_DMA_IRQHandler+0x516>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a83      	ldr	r2, [pc, #524]	; (800671c <HAL_DMA_IRQHandler+0x694>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d045      	beq.n	800659e <HAL_DMA_IRQHandler+0x516>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a82      	ldr	r2, [pc, #520]	; (8006720 <HAL_DMA_IRQHandler+0x698>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d040      	beq.n	800659e <HAL_DMA_IRQHandler+0x516>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a80      	ldr	r2, [pc, #512]	; (8006724 <HAL_DMA_IRQHandler+0x69c>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d03b      	beq.n	800659e <HAL_DMA_IRQHandler+0x516>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a7f      	ldr	r2, [pc, #508]	; (8006728 <HAL_DMA_IRQHandler+0x6a0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d036      	beq.n	800659e <HAL_DMA_IRQHandler+0x516>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a7d      	ldr	r2, [pc, #500]	; (800672c <HAL_DMA_IRQHandler+0x6a4>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d031      	beq.n	800659e <HAL_DMA_IRQHandler+0x516>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a7c      	ldr	r2, [pc, #496]	; (8006730 <HAL_DMA_IRQHandler+0x6a8>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d02c      	beq.n	800659e <HAL_DMA_IRQHandler+0x516>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a7a      	ldr	r2, [pc, #488]	; (8006734 <HAL_DMA_IRQHandler+0x6ac>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d027      	beq.n	800659e <HAL_DMA_IRQHandler+0x516>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a79      	ldr	r2, [pc, #484]	; (8006738 <HAL_DMA_IRQHandler+0x6b0>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d022      	beq.n	800659e <HAL_DMA_IRQHandler+0x516>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a77      	ldr	r2, [pc, #476]	; (800673c <HAL_DMA_IRQHandler+0x6b4>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d01d      	beq.n	800659e <HAL_DMA_IRQHandler+0x516>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a76      	ldr	r2, [pc, #472]	; (8006740 <HAL_DMA_IRQHandler+0x6b8>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d018      	beq.n	800659e <HAL_DMA_IRQHandler+0x516>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a74      	ldr	r2, [pc, #464]	; (8006744 <HAL_DMA_IRQHandler+0x6bc>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d013      	beq.n	800659e <HAL_DMA_IRQHandler+0x516>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a73      	ldr	r2, [pc, #460]	; (8006748 <HAL_DMA_IRQHandler+0x6c0>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d00e      	beq.n	800659e <HAL_DMA_IRQHandler+0x516>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a71      	ldr	r2, [pc, #452]	; (800674c <HAL_DMA_IRQHandler+0x6c4>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d009      	beq.n	800659e <HAL_DMA_IRQHandler+0x516>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a70      	ldr	r2, [pc, #448]	; (8006750 <HAL_DMA_IRQHandler+0x6c8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d004      	beq.n	800659e <HAL_DMA_IRQHandler+0x516>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a6e      	ldr	r2, [pc, #440]	; (8006754 <HAL_DMA_IRQHandler+0x6cc>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d10a      	bne.n	80065b4 <HAL_DMA_IRQHandler+0x52c>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f003 0308 	and.w	r3, r3, #8
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	bf14      	ite	ne
 80065ac:	2301      	movne	r3, #1
 80065ae:	2300      	moveq	r3, #0
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	e009      	b.n	80065c8 <HAL_DMA_IRQHandler+0x540>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 0304 	and.w	r3, r3, #4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	bf14      	ite	ne
 80065c2:	2301      	movne	r3, #1
 80065c4:	2300      	moveq	r3, #0
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d03e      	beq.n	800664a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d0:	f003 031f 	and.w	r3, r3, #31
 80065d4:	2210      	movs	r2, #16
 80065d6:	409a      	lsls	r2, r3
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d018      	beq.n	800661c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d108      	bne.n	800660a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d024      	beq.n	800664a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	4798      	blx	r3
 8006608:	e01f      	b.n	800664a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800660e:	2b00      	cmp	r3, #0
 8006610:	d01b      	beq.n	800664a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	4798      	blx	r3
 800661a:	e016      	b.n	800664a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006626:	2b00      	cmp	r3, #0
 8006628:	d107      	bne.n	800663a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681a      	ldr	r2, [r3, #0]
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f022 0208 	bic.w	r2, r2, #8
 8006638:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800664e:	f003 031f 	and.w	r3, r3, #31
 8006652:	2220      	movs	r2, #32
 8006654:	409a      	lsls	r2, r3
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	4013      	ands	r3, r2
 800665a:	2b00      	cmp	r3, #0
 800665c:	f000 8110 	beq.w	8006880 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a2c      	ldr	r2, [pc, #176]	; (8006718 <HAL_DMA_IRQHandler+0x690>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d04a      	beq.n	8006700 <HAL_DMA_IRQHandler+0x678>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a2b      	ldr	r2, [pc, #172]	; (800671c <HAL_DMA_IRQHandler+0x694>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d045      	beq.n	8006700 <HAL_DMA_IRQHandler+0x678>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a29      	ldr	r2, [pc, #164]	; (8006720 <HAL_DMA_IRQHandler+0x698>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d040      	beq.n	8006700 <HAL_DMA_IRQHandler+0x678>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a28      	ldr	r2, [pc, #160]	; (8006724 <HAL_DMA_IRQHandler+0x69c>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d03b      	beq.n	8006700 <HAL_DMA_IRQHandler+0x678>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a26      	ldr	r2, [pc, #152]	; (8006728 <HAL_DMA_IRQHandler+0x6a0>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d036      	beq.n	8006700 <HAL_DMA_IRQHandler+0x678>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a25      	ldr	r2, [pc, #148]	; (800672c <HAL_DMA_IRQHandler+0x6a4>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d031      	beq.n	8006700 <HAL_DMA_IRQHandler+0x678>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a23      	ldr	r2, [pc, #140]	; (8006730 <HAL_DMA_IRQHandler+0x6a8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d02c      	beq.n	8006700 <HAL_DMA_IRQHandler+0x678>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a22      	ldr	r2, [pc, #136]	; (8006734 <HAL_DMA_IRQHandler+0x6ac>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d027      	beq.n	8006700 <HAL_DMA_IRQHandler+0x678>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a20      	ldr	r2, [pc, #128]	; (8006738 <HAL_DMA_IRQHandler+0x6b0>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d022      	beq.n	8006700 <HAL_DMA_IRQHandler+0x678>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a1f      	ldr	r2, [pc, #124]	; (800673c <HAL_DMA_IRQHandler+0x6b4>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d01d      	beq.n	8006700 <HAL_DMA_IRQHandler+0x678>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a1d      	ldr	r2, [pc, #116]	; (8006740 <HAL_DMA_IRQHandler+0x6b8>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d018      	beq.n	8006700 <HAL_DMA_IRQHandler+0x678>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a1c      	ldr	r2, [pc, #112]	; (8006744 <HAL_DMA_IRQHandler+0x6bc>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d013      	beq.n	8006700 <HAL_DMA_IRQHandler+0x678>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a1a      	ldr	r2, [pc, #104]	; (8006748 <HAL_DMA_IRQHandler+0x6c0>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d00e      	beq.n	8006700 <HAL_DMA_IRQHandler+0x678>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a19      	ldr	r2, [pc, #100]	; (800674c <HAL_DMA_IRQHandler+0x6c4>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d009      	beq.n	8006700 <HAL_DMA_IRQHandler+0x678>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a17      	ldr	r2, [pc, #92]	; (8006750 <HAL_DMA_IRQHandler+0x6c8>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d004      	beq.n	8006700 <HAL_DMA_IRQHandler+0x678>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a16      	ldr	r2, [pc, #88]	; (8006754 <HAL_DMA_IRQHandler+0x6cc>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d12b      	bne.n	8006758 <HAL_DMA_IRQHandler+0x6d0>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0310 	and.w	r3, r3, #16
 800670a:	2b00      	cmp	r3, #0
 800670c:	bf14      	ite	ne
 800670e:	2301      	movne	r3, #1
 8006710:	2300      	moveq	r3, #0
 8006712:	b2db      	uxtb	r3, r3
 8006714:	e02a      	b.n	800676c <HAL_DMA_IRQHandler+0x6e4>
 8006716:	bf00      	nop
 8006718:	40020010 	.word	0x40020010
 800671c:	40020028 	.word	0x40020028
 8006720:	40020040 	.word	0x40020040
 8006724:	40020058 	.word	0x40020058
 8006728:	40020070 	.word	0x40020070
 800672c:	40020088 	.word	0x40020088
 8006730:	400200a0 	.word	0x400200a0
 8006734:	400200b8 	.word	0x400200b8
 8006738:	40020410 	.word	0x40020410
 800673c:	40020428 	.word	0x40020428
 8006740:	40020440 	.word	0x40020440
 8006744:	40020458 	.word	0x40020458
 8006748:	40020470 	.word	0x40020470
 800674c:	40020488 	.word	0x40020488
 8006750:	400204a0 	.word	0x400204a0
 8006754:	400204b8 	.word	0x400204b8
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	bf14      	ite	ne
 8006766:	2301      	movne	r3, #1
 8006768:	2300      	moveq	r3, #0
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 8087 	beq.w	8006880 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006776:	f003 031f 	and.w	r3, r3, #31
 800677a:	2220      	movs	r2, #32
 800677c:	409a      	lsls	r2, r3
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b04      	cmp	r3, #4
 800678c:	d139      	bne.n	8006802 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0216 	bic.w	r2, r2, #22
 800679c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	695a      	ldr	r2, [r3, #20]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067ac:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d103      	bne.n	80067be <HAL_DMA_IRQHandler+0x736>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d007      	beq.n	80067ce <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f022 0208 	bic.w	r2, r2, #8
 80067cc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d2:	f003 031f 	and.w	r3, r3, #31
 80067d6:	223f      	movs	r2, #63	; 0x3f
 80067d8:	409a      	lsls	r2, r3
 80067da:	6a3b      	ldr	r3, [r7, #32]
 80067dc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 834a 	beq.w	8006e8c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	4798      	blx	r3
          }
          return;
 8006800:	e344      	b.n	8006e8c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d018      	beq.n	8006842 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d108      	bne.n	8006830 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006822:	2b00      	cmp	r3, #0
 8006824:	d02c      	beq.n	8006880 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	4798      	blx	r3
 800682e:	e027      	b.n	8006880 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d023      	beq.n	8006880 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	4798      	blx	r3
 8006840:	e01e      	b.n	8006880 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10f      	bne.n	8006870 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0210 	bic.w	r2, r2, #16
 800685e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006874:	2b00      	cmp	r3, #0
 8006876:	d003      	beq.n	8006880 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 8306 	beq.w	8006e96 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 8088 	beq.w	80069a8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2204      	movs	r2, #4
 800689c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a7a      	ldr	r2, [pc, #488]	; (8006a90 <HAL_DMA_IRQHandler+0xa08>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d04a      	beq.n	8006940 <HAL_DMA_IRQHandler+0x8b8>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a79      	ldr	r2, [pc, #484]	; (8006a94 <HAL_DMA_IRQHandler+0xa0c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d045      	beq.n	8006940 <HAL_DMA_IRQHandler+0x8b8>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a77      	ldr	r2, [pc, #476]	; (8006a98 <HAL_DMA_IRQHandler+0xa10>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d040      	beq.n	8006940 <HAL_DMA_IRQHandler+0x8b8>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a76      	ldr	r2, [pc, #472]	; (8006a9c <HAL_DMA_IRQHandler+0xa14>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d03b      	beq.n	8006940 <HAL_DMA_IRQHandler+0x8b8>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a74      	ldr	r2, [pc, #464]	; (8006aa0 <HAL_DMA_IRQHandler+0xa18>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d036      	beq.n	8006940 <HAL_DMA_IRQHandler+0x8b8>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a73      	ldr	r2, [pc, #460]	; (8006aa4 <HAL_DMA_IRQHandler+0xa1c>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d031      	beq.n	8006940 <HAL_DMA_IRQHandler+0x8b8>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a71      	ldr	r2, [pc, #452]	; (8006aa8 <HAL_DMA_IRQHandler+0xa20>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d02c      	beq.n	8006940 <HAL_DMA_IRQHandler+0x8b8>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a70      	ldr	r2, [pc, #448]	; (8006aac <HAL_DMA_IRQHandler+0xa24>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d027      	beq.n	8006940 <HAL_DMA_IRQHandler+0x8b8>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a6e      	ldr	r2, [pc, #440]	; (8006ab0 <HAL_DMA_IRQHandler+0xa28>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d022      	beq.n	8006940 <HAL_DMA_IRQHandler+0x8b8>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a6d      	ldr	r2, [pc, #436]	; (8006ab4 <HAL_DMA_IRQHandler+0xa2c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d01d      	beq.n	8006940 <HAL_DMA_IRQHandler+0x8b8>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a6b      	ldr	r2, [pc, #428]	; (8006ab8 <HAL_DMA_IRQHandler+0xa30>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d018      	beq.n	8006940 <HAL_DMA_IRQHandler+0x8b8>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a6a      	ldr	r2, [pc, #424]	; (8006abc <HAL_DMA_IRQHandler+0xa34>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d013      	beq.n	8006940 <HAL_DMA_IRQHandler+0x8b8>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a68      	ldr	r2, [pc, #416]	; (8006ac0 <HAL_DMA_IRQHandler+0xa38>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d00e      	beq.n	8006940 <HAL_DMA_IRQHandler+0x8b8>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a67      	ldr	r2, [pc, #412]	; (8006ac4 <HAL_DMA_IRQHandler+0xa3c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d009      	beq.n	8006940 <HAL_DMA_IRQHandler+0x8b8>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a65      	ldr	r2, [pc, #404]	; (8006ac8 <HAL_DMA_IRQHandler+0xa40>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d004      	beq.n	8006940 <HAL_DMA_IRQHandler+0x8b8>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a64      	ldr	r2, [pc, #400]	; (8006acc <HAL_DMA_IRQHandler+0xa44>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d108      	bne.n	8006952 <HAL_DMA_IRQHandler+0x8ca>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0201 	bic.w	r2, r2, #1
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	e007      	b.n	8006962 <HAL_DMA_IRQHandler+0x8da>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f022 0201 	bic.w	r2, r2, #1
 8006960:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3301      	adds	r3, #1
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696a:	429a      	cmp	r2, r3
 800696c:	d307      	bcc.n	800697e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 0301 	and.w	r3, r3, #1
 8006978:	2b00      	cmp	r3, #0
 800697a:	d1f2      	bne.n	8006962 <HAL_DMA_IRQHandler+0x8da>
 800697c:	e000      	b.n	8006980 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800697e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d004      	beq.n	8006998 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2203      	movs	r2, #3
 8006992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006996:	e003      	b.n	80069a0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 8272 	beq.w	8006e96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	4798      	blx	r3
 80069ba:	e26c      	b.n	8006e96 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a43      	ldr	r2, [pc, #268]	; (8006ad0 <HAL_DMA_IRQHandler+0xa48>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d022      	beq.n	8006a0c <HAL_DMA_IRQHandler+0x984>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a42      	ldr	r2, [pc, #264]	; (8006ad4 <HAL_DMA_IRQHandler+0xa4c>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d01d      	beq.n	8006a0c <HAL_DMA_IRQHandler+0x984>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a40      	ldr	r2, [pc, #256]	; (8006ad8 <HAL_DMA_IRQHandler+0xa50>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d018      	beq.n	8006a0c <HAL_DMA_IRQHandler+0x984>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a3f      	ldr	r2, [pc, #252]	; (8006adc <HAL_DMA_IRQHandler+0xa54>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d013      	beq.n	8006a0c <HAL_DMA_IRQHandler+0x984>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a3d      	ldr	r2, [pc, #244]	; (8006ae0 <HAL_DMA_IRQHandler+0xa58>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d00e      	beq.n	8006a0c <HAL_DMA_IRQHandler+0x984>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a3c      	ldr	r2, [pc, #240]	; (8006ae4 <HAL_DMA_IRQHandler+0xa5c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d009      	beq.n	8006a0c <HAL_DMA_IRQHandler+0x984>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a3a      	ldr	r2, [pc, #232]	; (8006ae8 <HAL_DMA_IRQHandler+0xa60>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d004      	beq.n	8006a0c <HAL_DMA_IRQHandler+0x984>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a39      	ldr	r2, [pc, #228]	; (8006aec <HAL_DMA_IRQHandler+0xa64>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d101      	bne.n	8006a10 <HAL_DMA_IRQHandler+0x988>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e000      	b.n	8006a12 <HAL_DMA_IRQHandler+0x98a>
 8006a10:	2300      	movs	r3, #0
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 823f 	beq.w	8006e96 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a24:	f003 031f 	and.w	r3, r3, #31
 8006a28:	2204      	movs	r2, #4
 8006a2a:	409a      	lsls	r2, r3
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	4013      	ands	r3, r2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 80cd 	beq.w	8006bd0 <HAL_DMA_IRQHandler+0xb48>
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f003 0304 	and.w	r3, r3, #4
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 80c7 	beq.w	8006bd0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a46:	f003 031f 	and.w	r3, r3, #31
 8006a4a:	2204      	movs	r2, #4
 8006a4c:	409a      	lsls	r2, r3
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d049      	beq.n	8006af0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d109      	bne.n	8006a7a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f000 8210 	beq.w	8006e90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a78:	e20a      	b.n	8006e90 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 8206 	beq.w	8006e90 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a8c:	e200      	b.n	8006e90 <HAL_DMA_IRQHandler+0xe08>
 8006a8e:	bf00      	nop
 8006a90:	40020010 	.word	0x40020010
 8006a94:	40020028 	.word	0x40020028
 8006a98:	40020040 	.word	0x40020040
 8006a9c:	40020058 	.word	0x40020058
 8006aa0:	40020070 	.word	0x40020070
 8006aa4:	40020088 	.word	0x40020088
 8006aa8:	400200a0 	.word	0x400200a0
 8006aac:	400200b8 	.word	0x400200b8
 8006ab0:	40020410 	.word	0x40020410
 8006ab4:	40020428 	.word	0x40020428
 8006ab8:	40020440 	.word	0x40020440
 8006abc:	40020458 	.word	0x40020458
 8006ac0:	40020470 	.word	0x40020470
 8006ac4:	40020488 	.word	0x40020488
 8006ac8:	400204a0 	.word	0x400204a0
 8006acc:	400204b8 	.word	0x400204b8
 8006ad0:	58025408 	.word	0x58025408
 8006ad4:	5802541c 	.word	0x5802541c
 8006ad8:	58025430 	.word	0x58025430
 8006adc:	58025444 	.word	0x58025444
 8006ae0:	58025458 	.word	0x58025458
 8006ae4:	5802546c 	.word	0x5802546c
 8006ae8:	58025480 	.word	0x58025480
 8006aec:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	f003 0320 	and.w	r3, r3, #32
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d160      	bne.n	8006bbc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a7f      	ldr	r2, [pc, #508]	; (8006cfc <HAL_DMA_IRQHandler+0xc74>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d04a      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xb12>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a7d      	ldr	r2, [pc, #500]	; (8006d00 <HAL_DMA_IRQHandler+0xc78>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d045      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xb12>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a7c      	ldr	r2, [pc, #496]	; (8006d04 <HAL_DMA_IRQHandler+0xc7c>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	d040      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xb12>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a7a      	ldr	r2, [pc, #488]	; (8006d08 <HAL_DMA_IRQHandler+0xc80>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d03b      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xb12>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a79      	ldr	r2, [pc, #484]	; (8006d0c <HAL_DMA_IRQHandler+0xc84>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d036      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xb12>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a77      	ldr	r2, [pc, #476]	; (8006d10 <HAL_DMA_IRQHandler+0xc88>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d031      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xb12>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a76      	ldr	r2, [pc, #472]	; (8006d14 <HAL_DMA_IRQHandler+0xc8c>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d02c      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xb12>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a74      	ldr	r2, [pc, #464]	; (8006d18 <HAL_DMA_IRQHandler+0xc90>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d027      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xb12>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a73      	ldr	r2, [pc, #460]	; (8006d1c <HAL_DMA_IRQHandler+0xc94>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d022      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xb12>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a71      	ldr	r2, [pc, #452]	; (8006d20 <HAL_DMA_IRQHandler+0xc98>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d01d      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xb12>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a70      	ldr	r2, [pc, #448]	; (8006d24 <HAL_DMA_IRQHandler+0xc9c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d018      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xb12>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a6e      	ldr	r2, [pc, #440]	; (8006d28 <HAL_DMA_IRQHandler+0xca0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d013      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xb12>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a6d      	ldr	r2, [pc, #436]	; (8006d2c <HAL_DMA_IRQHandler+0xca4>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d00e      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xb12>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a6b      	ldr	r2, [pc, #428]	; (8006d30 <HAL_DMA_IRQHandler+0xca8>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d009      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xb12>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a6a      	ldr	r2, [pc, #424]	; (8006d34 <HAL_DMA_IRQHandler+0xcac>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d004      	beq.n	8006b9a <HAL_DMA_IRQHandler+0xb12>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a68      	ldr	r2, [pc, #416]	; (8006d38 <HAL_DMA_IRQHandler+0xcb0>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d108      	bne.n	8006bac <HAL_DMA_IRQHandler+0xb24>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f022 0208 	bic.w	r2, r2, #8
 8006ba8:	601a      	str	r2, [r3, #0]
 8006baa:	e007      	b.n	8006bbc <HAL_DMA_IRQHandler+0xb34>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0204 	bic.w	r2, r2, #4
 8006bba:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f000 8165 	beq.w	8006e90 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bce:	e15f      	b.n	8006e90 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bd4:	f003 031f 	and.w	r3, r3, #31
 8006bd8:	2202      	movs	r2, #2
 8006bda:	409a      	lsls	r2, r3
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	4013      	ands	r3, r2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f000 80c5 	beq.w	8006d70 <HAL_DMA_IRQHandler+0xce8>
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	f003 0302 	and.w	r3, r3, #2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f000 80bf 	beq.w	8006d70 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf6:	f003 031f 	and.w	r3, r3, #31
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	409a      	lsls	r2, r3
 8006bfe:	69fb      	ldr	r3, [r7, #28]
 8006c00:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d018      	beq.n	8006c3e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d109      	bne.n	8006c2a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	f000 813a 	beq.w	8006e94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c28:	e134      	b.n	8006e94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	f000 8130 	beq.w	8006e94 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c3c:	e12a      	b.n	8006e94 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f003 0320 	and.w	r3, r3, #32
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	f040 8089 	bne.w	8006d5c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a2b      	ldr	r2, [pc, #172]	; (8006cfc <HAL_DMA_IRQHandler+0xc74>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d04a      	beq.n	8006cea <HAL_DMA_IRQHandler+0xc62>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a29      	ldr	r2, [pc, #164]	; (8006d00 <HAL_DMA_IRQHandler+0xc78>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d045      	beq.n	8006cea <HAL_DMA_IRQHandler+0xc62>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a28      	ldr	r2, [pc, #160]	; (8006d04 <HAL_DMA_IRQHandler+0xc7c>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d040      	beq.n	8006cea <HAL_DMA_IRQHandler+0xc62>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a26      	ldr	r2, [pc, #152]	; (8006d08 <HAL_DMA_IRQHandler+0xc80>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d03b      	beq.n	8006cea <HAL_DMA_IRQHandler+0xc62>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a25      	ldr	r2, [pc, #148]	; (8006d0c <HAL_DMA_IRQHandler+0xc84>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d036      	beq.n	8006cea <HAL_DMA_IRQHandler+0xc62>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a23      	ldr	r2, [pc, #140]	; (8006d10 <HAL_DMA_IRQHandler+0xc88>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d031      	beq.n	8006cea <HAL_DMA_IRQHandler+0xc62>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a22      	ldr	r2, [pc, #136]	; (8006d14 <HAL_DMA_IRQHandler+0xc8c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d02c      	beq.n	8006cea <HAL_DMA_IRQHandler+0xc62>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a20      	ldr	r2, [pc, #128]	; (8006d18 <HAL_DMA_IRQHandler+0xc90>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d027      	beq.n	8006cea <HAL_DMA_IRQHandler+0xc62>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a1f      	ldr	r2, [pc, #124]	; (8006d1c <HAL_DMA_IRQHandler+0xc94>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d022      	beq.n	8006cea <HAL_DMA_IRQHandler+0xc62>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a1d      	ldr	r2, [pc, #116]	; (8006d20 <HAL_DMA_IRQHandler+0xc98>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d01d      	beq.n	8006cea <HAL_DMA_IRQHandler+0xc62>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a1c      	ldr	r2, [pc, #112]	; (8006d24 <HAL_DMA_IRQHandler+0xc9c>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d018      	beq.n	8006cea <HAL_DMA_IRQHandler+0xc62>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a1a      	ldr	r2, [pc, #104]	; (8006d28 <HAL_DMA_IRQHandler+0xca0>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d013      	beq.n	8006cea <HAL_DMA_IRQHandler+0xc62>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a19      	ldr	r2, [pc, #100]	; (8006d2c <HAL_DMA_IRQHandler+0xca4>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d00e      	beq.n	8006cea <HAL_DMA_IRQHandler+0xc62>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a17      	ldr	r2, [pc, #92]	; (8006d30 <HAL_DMA_IRQHandler+0xca8>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d009      	beq.n	8006cea <HAL_DMA_IRQHandler+0xc62>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a16      	ldr	r2, [pc, #88]	; (8006d34 <HAL_DMA_IRQHandler+0xcac>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d004      	beq.n	8006cea <HAL_DMA_IRQHandler+0xc62>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a14      	ldr	r2, [pc, #80]	; (8006d38 <HAL_DMA_IRQHandler+0xcb0>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d128      	bne.n	8006d3c <HAL_DMA_IRQHandler+0xcb4>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0214 	bic.w	r2, r2, #20
 8006cf8:	601a      	str	r2, [r3, #0]
 8006cfa:	e027      	b.n	8006d4c <HAL_DMA_IRQHandler+0xcc4>
 8006cfc:	40020010 	.word	0x40020010
 8006d00:	40020028 	.word	0x40020028
 8006d04:	40020040 	.word	0x40020040
 8006d08:	40020058 	.word	0x40020058
 8006d0c:	40020070 	.word	0x40020070
 8006d10:	40020088 	.word	0x40020088
 8006d14:	400200a0 	.word	0x400200a0
 8006d18:	400200b8 	.word	0x400200b8
 8006d1c:	40020410 	.word	0x40020410
 8006d20:	40020428 	.word	0x40020428
 8006d24:	40020440 	.word	0x40020440
 8006d28:	40020458 	.word	0x40020458
 8006d2c:	40020470 	.word	0x40020470
 8006d30:	40020488 	.word	0x40020488
 8006d34:	400204a0 	.word	0x400204a0
 8006d38:	400204b8 	.word	0x400204b8
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f022 020a 	bic.w	r2, r2, #10
 8006d4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 8097 	beq.w	8006e94 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d6e:	e091      	b.n	8006e94 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d74:	f003 031f 	and.w	r3, r3, #31
 8006d78:	2208      	movs	r2, #8
 8006d7a:	409a      	lsls	r2, r3
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	4013      	ands	r3, r2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 8088 	beq.w	8006e96 <HAL_DMA_IRQHandler+0xe0e>
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	f003 0308 	and.w	r3, r3, #8
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 8082 	beq.w	8006e96 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	4a41      	ldr	r2, [pc, #260]	; (8006e9c <HAL_DMA_IRQHandler+0xe14>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d04a      	beq.n	8006e32 <HAL_DMA_IRQHandler+0xdaa>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a3f      	ldr	r2, [pc, #252]	; (8006ea0 <HAL_DMA_IRQHandler+0xe18>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d045      	beq.n	8006e32 <HAL_DMA_IRQHandler+0xdaa>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a3e      	ldr	r2, [pc, #248]	; (8006ea4 <HAL_DMA_IRQHandler+0xe1c>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d040      	beq.n	8006e32 <HAL_DMA_IRQHandler+0xdaa>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a3c      	ldr	r2, [pc, #240]	; (8006ea8 <HAL_DMA_IRQHandler+0xe20>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d03b      	beq.n	8006e32 <HAL_DMA_IRQHandler+0xdaa>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a3b      	ldr	r2, [pc, #236]	; (8006eac <HAL_DMA_IRQHandler+0xe24>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d036      	beq.n	8006e32 <HAL_DMA_IRQHandler+0xdaa>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	4a39      	ldr	r2, [pc, #228]	; (8006eb0 <HAL_DMA_IRQHandler+0xe28>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d031      	beq.n	8006e32 <HAL_DMA_IRQHandler+0xdaa>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4a38      	ldr	r2, [pc, #224]	; (8006eb4 <HAL_DMA_IRQHandler+0xe2c>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d02c      	beq.n	8006e32 <HAL_DMA_IRQHandler+0xdaa>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	4a36      	ldr	r2, [pc, #216]	; (8006eb8 <HAL_DMA_IRQHandler+0xe30>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d027      	beq.n	8006e32 <HAL_DMA_IRQHandler+0xdaa>
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a35      	ldr	r2, [pc, #212]	; (8006ebc <HAL_DMA_IRQHandler+0xe34>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d022      	beq.n	8006e32 <HAL_DMA_IRQHandler+0xdaa>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a33      	ldr	r2, [pc, #204]	; (8006ec0 <HAL_DMA_IRQHandler+0xe38>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d01d      	beq.n	8006e32 <HAL_DMA_IRQHandler+0xdaa>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a32      	ldr	r2, [pc, #200]	; (8006ec4 <HAL_DMA_IRQHandler+0xe3c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d018      	beq.n	8006e32 <HAL_DMA_IRQHandler+0xdaa>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a30      	ldr	r2, [pc, #192]	; (8006ec8 <HAL_DMA_IRQHandler+0xe40>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d013      	beq.n	8006e32 <HAL_DMA_IRQHandler+0xdaa>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a2f      	ldr	r2, [pc, #188]	; (8006ecc <HAL_DMA_IRQHandler+0xe44>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d00e      	beq.n	8006e32 <HAL_DMA_IRQHandler+0xdaa>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a2d      	ldr	r2, [pc, #180]	; (8006ed0 <HAL_DMA_IRQHandler+0xe48>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d009      	beq.n	8006e32 <HAL_DMA_IRQHandler+0xdaa>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a2c      	ldr	r2, [pc, #176]	; (8006ed4 <HAL_DMA_IRQHandler+0xe4c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d004      	beq.n	8006e32 <HAL_DMA_IRQHandler+0xdaa>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a2a      	ldr	r2, [pc, #168]	; (8006ed8 <HAL_DMA_IRQHandler+0xe50>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d108      	bne.n	8006e44 <HAL_DMA_IRQHandler+0xdbc>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 021c 	bic.w	r2, r2, #28
 8006e40:	601a      	str	r2, [r3, #0]
 8006e42:	e007      	b.n	8006e54 <HAL_DMA_IRQHandler+0xdcc>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 020e 	bic.w	r2, r2, #14
 8006e52:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e58:	f003 031f 	and.w	r3, r3, #31
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	409a      	lsls	r2, r3
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2200      	movs	r2, #0
 8006e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d009      	beq.n	8006e96 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e86:	6878      	ldr	r0, [r7, #4]
 8006e88:	4798      	blx	r3
 8006e8a:	e004      	b.n	8006e96 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006e8c:	bf00      	nop
 8006e8e:	e002      	b.n	8006e96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e90:	bf00      	nop
 8006e92:	e000      	b.n	8006e96 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e94:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e96:	3728      	adds	r7, #40	; 0x28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	40020010 	.word	0x40020010
 8006ea0:	40020028 	.word	0x40020028
 8006ea4:	40020040 	.word	0x40020040
 8006ea8:	40020058 	.word	0x40020058
 8006eac:	40020070 	.word	0x40020070
 8006eb0:	40020088 	.word	0x40020088
 8006eb4:	400200a0 	.word	0x400200a0
 8006eb8:	400200b8 	.word	0x400200b8
 8006ebc:	40020410 	.word	0x40020410
 8006ec0:	40020428 	.word	0x40020428
 8006ec4:	40020440 	.word	0x40020440
 8006ec8:	40020458 	.word	0x40020458
 8006ecc:	40020470 	.word	0x40020470
 8006ed0:	40020488 	.word	0x40020488
 8006ed4:	400204a0 	.word	0x400204a0
 8006ed8:	400204b8 	.word	0x400204b8

08006edc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
 8006ee8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eee:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ef4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a7f      	ldr	r2, [pc, #508]	; (80070f8 <DMA_SetConfig+0x21c>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d072      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a7d      	ldr	r2, [pc, #500]	; (80070fc <DMA_SetConfig+0x220>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d06d      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a7c      	ldr	r2, [pc, #496]	; (8007100 <DMA_SetConfig+0x224>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d068      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a7a      	ldr	r2, [pc, #488]	; (8007104 <DMA_SetConfig+0x228>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d063      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a79      	ldr	r2, [pc, #484]	; (8007108 <DMA_SetConfig+0x22c>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d05e      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a77      	ldr	r2, [pc, #476]	; (800710c <DMA_SetConfig+0x230>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d059      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a76      	ldr	r2, [pc, #472]	; (8007110 <DMA_SetConfig+0x234>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d054      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a74      	ldr	r2, [pc, #464]	; (8007114 <DMA_SetConfig+0x238>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d04f      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a73      	ldr	r2, [pc, #460]	; (8007118 <DMA_SetConfig+0x23c>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d04a      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a71      	ldr	r2, [pc, #452]	; (800711c <DMA_SetConfig+0x240>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d045      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a70      	ldr	r2, [pc, #448]	; (8007120 <DMA_SetConfig+0x244>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d040      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a6e      	ldr	r2, [pc, #440]	; (8007124 <DMA_SetConfig+0x248>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d03b      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a6d      	ldr	r2, [pc, #436]	; (8007128 <DMA_SetConfig+0x24c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d036      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a6b      	ldr	r2, [pc, #428]	; (800712c <DMA_SetConfig+0x250>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d031      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a6a      	ldr	r2, [pc, #424]	; (8007130 <DMA_SetConfig+0x254>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d02c      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a68      	ldr	r2, [pc, #416]	; (8007134 <DMA_SetConfig+0x258>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d027      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a67      	ldr	r2, [pc, #412]	; (8007138 <DMA_SetConfig+0x25c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d022      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a65      	ldr	r2, [pc, #404]	; (800713c <DMA_SetConfig+0x260>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d01d      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a64      	ldr	r2, [pc, #400]	; (8007140 <DMA_SetConfig+0x264>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d018      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a62      	ldr	r2, [pc, #392]	; (8007144 <DMA_SetConfig+0x268>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d013      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a61      	ldr	r2, [pc, #388]	; (8007148 <DMA_SetConfig+0x26c>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d00e      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a5f      	ldr	r2, [pc, #380]	; (800714c <DMA_SetConfig+0x270>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d009      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a5e      	ldr	r2, [pc, #376]	; (8007150 <DMA_SetConfig+0x274>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d004      	beq.n	8006fe6 <DMA_SetConfig+0x10a>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a5c      	ldr	r2, [pc, #368]	; (8007154 <DMA_SetConfig+0x278>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d101      	bne.n	8006fea <DMA_SetConfig+0x10e>
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e000      	b.n	8006fec <DMA_SetConfig+0x110>
 8006fea:	2300      	movs	r3, #0
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00d      	beq.n	800700c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006ff8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d004      	beq.n	800700c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800700a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a39      	ldr	r2, [pc, #228]	; (80070f8 <DMA_SetConfig+0x21c>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d04a      	beq.n	80070ac <DMA_SetConfig+0x1d0>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a38      	ldr	r2, [pc, #224]	; (80070fc <DMA_SetConfig+0x220>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d045      	beq.n	80070ac <DMA_SetConfig+0x1d0>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	4a36      	ldr	r2, [pc, #216]	; (8007100 <DMA_SetConfig+0x224>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d040      	beq.n	80070ac <DMA_SetConfig+0x1d0>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a35      	ldr	r2, [pc, #212]	; (8007104 <DMA_SetConfig+0x228>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d03b      	beq.n	80070ac <DMA_SetConfig+0x1d0>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a33      	ldr	r2, [pc, #204]	; (8007108 <DMA_SetConfig+0x22c>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d036      	beq.n	80070ac <DMA_SetConfig+0x1d0>
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a32      	ldr	r2, [pc, #200]	; (800710c <DMA_SetConfig+0x230>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d031      	beq.n	80070ac <DMA_SetConfig+0x1d0>
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a30      	ldr	r2, [pc, #192]	; (8007110 <DMA_SetConfig+0x234>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d02c      	beq.n	80070ac <DMA_SetConfig+0x1d0>
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a2f      	ldr	r2, [pc, #188]	; (8007114 <DMA_SetConfig+0x238>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d027      	beq.n	80070ac <DMA_SetConfig+0x1d0>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a2d      	ldr	r2, [pc, #180]	; (8007118 <DMA_SetConfig+0x23c>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d022      	beq.n	80070ac <DMA_SetConfig+0x1d0>
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a2c      	ldr	r2, [pc, #176]	; (800711c <DMA_SetConfig+0x240>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d01d      	beq.n	80070ac <DMA_SetConfig+0x1d0>
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a2a      	ldr	r2, [pc, #168]	; (8007120 <DMA_SetConfig+0x244>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d018      	beq.n	80070ac <DMA_SetConfig+0x1d0>
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a29      	ldr	r2, [pc, #164]	; (8007124 <DMA_SetConfig+0x248>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d013      	beq.n	80070ac <DMA_SetConfig+0x1d0>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a27      	ldr	r2, [pc, #156]	; (8007128 <DMA_SetConfig+0x24c>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d00e      	beq.n	80070ac <DMA_SetConfig+0x1d0>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a26      	ldr	r2, [pc, #152]	; (800712c <DMA_SetConfig+0x250>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d009      	beq.n	80070ac <DMA_SetConfig+0x1d0>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a24      	ldr	r2, [pc, #144]	; (8007130 <DMA_SetConfig+0x254>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d004      	beq.n	80070ac <DMA_SetConfig+0x1d0>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a23      	ldr	r2, [pc, #140]	; (8007134 <DMA_SetConfig+0x258>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d101      	bne.n	80070b0 <DMA_SetConfig+0x1d4>
 80070ac:	2301      	movs	r3, #1
 80070ae:	e000      	b.n	80070b2 <DMA_SetConfig+0x1d6>
 80070b0:	2300      	movs	r3, #0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d059      	beq.n	800716a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ba:	f003 031f 	and.w	r3, r3, #31
 80070be:	223f      	movs	r2, #63	; 0x3f
 80070c0:	409a      	lsls	r2, r3
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80070d4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	689b      	ldr	r3, [r3, #8]
 80070e2:	2b40      	cmp	r3, #64	; 0x40
 80070e4:	d138      	bne.n	8007158 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80070f6:	e086      	b.n	8007206 <DMA_SetConfig+0x32a>
 80070f8:	40020010 	.word	0x40020010
 80070fc:	40020028 	.word	0x40020028
 8007100:	40020040 	.word	0x40020040
 8007104:	40020058 	.word	0x40020058
 8007108:	40020070 	.word	0x40020070
 800710c:	40020088 	.word	0x40020088
 8007110:	400200a0 	.word	0x400200a0
 8007114:	400200b8 	.word	0x400200b8
 8007118:	40020410 	.word	0x40020410
 800711c:	40020428 	.word	0x40020428
 8007120:	40020440 	.word	0x40020440
 8007124:	40020458 	.word	0x40020458
 8007128:	40020470 	.word	0x40020470
 800712c:	40020488 	.word	0x40020488
 8007130:	400204a0 	.word	0x400204a0
 8007134:	400204b8 	.word	0x400204b8
 8007138:	58025408 	.word	0x58025408
 800713c:	5802541c 	.word	0x5802541c
 8007140:	58025430 	.word	0x58025430
 8007144:	58025444 	.word	0x58025444
 8007148:	58025458 	.word	0x58025458
 800714c:	5802546c 	.word	0x5802546c
 8007150:	58025480 	.word	0x58025480
 8007154:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68ba      	ldr	r2, [r7, #8]
 800715e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	60da      	str	r2, [r3, #12]
}
 8007168:	e04d      	b.n	8007206 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a29      	ldr	r2, [pc, #164]	; (8007214 <DMA_SetConfig+0x338>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d022      	beq.n	80071ba <DMA_SetConfig+0x2de>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a27      	ldr	r2, [pc, #156]	; (8007218 <DMA_SetConfig+0x33c>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d01d      	beq.n	80071ba <DMA_SetConfig+0x2de>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a26      	ldr	r2, [pc, #152]	; (800721c <DMA_SetConfig+0x340>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d018      	beq.n	80071ba <DMA_SetConfig+0x2de>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a24      	ldr	r2, [pc, #144]	; (8007220 <DMA_SetConfig+0x344>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d013      	beq.n	80071ba <DMA_SetConfig+0x2de>
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a23      	ldr	r2, [pc, #140]	; (8007224 <DMA_SetConfig+0x348>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d00e      	beq.n	80071ba <DMA_SetConfig+0x2de>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a21      	ldr	r2, [pc, #132]	; (8007228 <DMA_SetConfig+0x34c>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d009      	beq.n	80071ba <DMA_SetConfig+0x2de>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a20      	ldr	r2, [pc, #128]	; (800722c <DMA_SetConfig+0x350>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d004      	beq.n	80071ba <DMA_SetConfig+0x2de>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a1e      	ldr	r2, [pc, #120]	; (8007230 <DMA_SetConfig+0x354>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d101      	bne.n	80071be <DMA_SetConfig+0x2e2>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e000      	b.n	80071c0 <DMA_SetConfig+0x2e4>
 80071be:	2300      	movs	r3, #0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d020      	beq.n	8007206 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071c8:	f003 031f 	and.w	r3, r3, #31
 80071cc:	2201      	movs	r2, #1
 80071ce:	409a      	lsls	r2, r3
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	2b40      	cmp	r3, #64	; 0x40
 80071e2:	d108      	bne.n	80071f6 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	60da      	str	r2, [r3, #12]
}
 80071f4:	e007      	b.n	8007206 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	60da      	str	r2, [r3, #12]
}
 8007206:	bf00      	nop
 8007208:	371c      	adds	r7, #28
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	58025408 	.word	0x58025408
 8007218:	5802541c 	.word	0x5802541c
 800721c:	58025430 	.word	0x58025430
 8007220:	58025444 	.word	0x58025444
 8007224:	58025458 	.word	0x58025458
 8007228:	5802546c 	.word	0x5802546c
 800722c:	58025480 	.word	0x58025480
 8007230:	58025494 	.word	0x58025494

08007234 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a42      	ldr	r2, [pc, #264]	; (800734c <DMA_CalcBaseAndBitshift+0x118>)
 8007242:	4293      	cmp	r3, r2
 8007244:	d04a      	beq.n	80072dc <DMA_CalcBaseAndBitshift+0xa8>
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a41      	ldr	r2, [pc, #260]	; (8007350 <DMA_CalcBaseAndBitshift+0x11c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d045      	beq.n	80072dc <DMA_CalcBaseAndBitshift+0xa8>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a3f      	ldr	r2, [pc, #252]	; (8007354 <DMA_CalcBaseAndBitshift+0x120>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d040      	beq.n	80072dc <DMA_CalcBaseAndBitshift+0xa8>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a3e      	ldr	r2, [pc, #248]	; (8007358 <DMA_CalcBaseAndBitshift+0x124>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d03b      	beq.n	80072dc <DMA_CalcBaseAndBitshift+0xa8>
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a3c      	ldr	r2, [pc, #240]	; (800735c <DMA_CalcBaseAndBitshift+0x128>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d036      	beq.n	80072dc <DMA_CalcBaseAndBitshift+0xa8>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a3b      	ldr	r2, [pc, #236]	; (8007360 <DMA_CalcBaseAndBitshift+0x12c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d031      	beq.n	80072dc <DMA_CalcBaseAndBitshift+0xa8>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a39      	ldr	r2, [pc, #228]	; (8007364 <DMA_CalcBaseAndBitshift+0x130>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d02c      	beq.n	80072dc <DMA_CalcBaseAndBitshift+0xa8>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a38      	ldr	r2, [pc, #224]	; (8007368 <DMA_CalcBaseAndBitshift+0x134>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d027      	beq.n	80072dc <DMA_CalcBaseAndBitshift+0xa8>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a36      	ldr	r2, [pc, #216]	; (800736c <DMA_CalcBaseAndBitshift+0x138>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d022      	beq.n	80072dc <DMA_CalcBaseAndBitshift+0xa8>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a35      	ldr	r2, [pc, #212]	; (8007370 <DMA_CalcBaseAndBitshift+0x13c>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d01d      	beq.n	80072dc <DMA_CalcBaseAndBitshift+0xa8>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a33      	ldr	r2, [pc, #204]	; (8007374 <DMA_CalcBaseAndBitshift+0x140>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d018      	beq.n	80072dc <DMA_CalcBaseAndBitshift+0xa8>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a32      	ldr	r2, [pc, #200]	; (8007378 <DMA_CalcBaseAndBitshift+0x144>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d013      	beq.n	80072dc <DMA_CalcBaseAndBitshift+0xa8>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a30      	ldr	r2, [pc, #192]	; (800737c <DMA_CalcBaseAndBitshift+0x148>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d00e      	beq.n	80072dc <DMA_CalcBaseAndBitshift+0xa8>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4a2f      	ldr	r2, [pc, #188]	; (8007380 <DMA_CalcBaseAndBitshift+0x14c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d009      	beq.n	80072dc <DMA_CalcBaseAndBitshift+0xa8>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4a2d      	ldr	r2, [pc, #180]	; (8007384 <DMA_CalcBaseAndBitshift+0x150>)
 80072ce:	4293      	cmp	r3, r2
 80072d0:	d004      	beq.n	80072dc <DMA_CalcBaseAndBitshift+0xa8>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	4a2c      	ldr	r2, [pc, #176]	; (8007388 <DMA_CalcBaseAndBitshift+0x154>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d101      	bne.n	80072e0 <DMA_CalcBaseAndBitshift+0xac>
 80072dc:	2301      	movs	r3, #1
 80072de:	e000      	b.n	80072e2 <DMA_CalcBaseAndBitshift+0xae>
 80072e0:	2300      	movs	r3, #0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d024      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	3b10      	subs	r3, #16
 80072ee:	4a27      	ldr	r2, [pc, #156]	; (800738c <DMA_CalcBaseAndBitshift+0x158>)
 80072f0:	fba2 2303 	umull	r2, r3, r2, r3
 80072f4:	091b      	lsrs	r3, r3, #4
 80072f6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	f003 0307 	and.w	r3, r3, #7
 80072fe:	4a24      	ldr	r2, [pc, #144]	; (8007390 <DMA_CalcBaseAndBitshift+0x15c>)
 8007300:	5cd3      	ldrb	r3, [r2, r3]
 8007302:	461a      	mov	r2, r3
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2b03      	cmp	r3, #3
 800730c:	d908      	bls.n	8007320 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	461a      	mov	r2, r3
 8007314:	4b1f      	ldr	r3, [pc, #124]	; (8007394 <DMA_CalcBaseAndBitshift+0x160>)
 8007316:	4013      	ands	r3, r2
 8007318:	1d1a      	adds	r2, r3, #4
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	659a      	str	r2, [r3, #88]	; 0x58
 800731e:	e00d      	b.n	800733c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	461a      	mov	r2, r3
 8007326:	4b1b      	ldr	r3, [pc, #108]	; (8007394 <DMA_CalcBaseAndBitshift+0x160>)
 8007328:	4013      	ands	r3, r2
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	6593      	str	r3, [r2, #88]	; 0x58
 800732e:	e005      	b.n	800733c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007340:	4618      	mov	r0, r3
 8007342:	3714      	adds	r7, #20
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	40020010 	.word	0x40020010
 8007350:	40020028 	.word	0x40020028
 8007354:	40020040 	.word	0x40020040
 8007358:	40020058 	.word	0x40020058
 800735c:	40020070 	.word	0x40020070
 8007360:	40020088 	.word	0x40020088
 8007364:	400200a0 	.word	0x400200a0
 8007368:	400200b8 	.word	0x400200b8
 800736c:	40020410 	.word	0x40020410
 8007370:	40020428 	.word	0x40020428
 8007374:	40020440 	.word	0x40020440
 8007378:	40020458 	.word	0x40020458
 800737c:	40020470 	.word	0x40020470
 8007380:	40020488 	.word	0x40020488
 8007384:	400204a0 	.word	0x400204a0
 8007388:	400204b8 	.word	0x400204b8
 800738c:	aaaaaaab 	.word	0xaaaaaaab
 8007390:	0801e028 	.word	0x0801e028
 8007394:	fffffc00 	.word	0xfffffc00

08007398 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007398:	b480      	push	{r7}
 800739a:	b085      	sub	sp, #20
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073a0:	2300      	movs	r3, #0
 80073a2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d120      	bne.n	80073ee <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073b0:	2b03      	cmp	r3, #3
 80073b2:	d858      	bhi.n	8007466 <DMA_CheckFifoParam+0xce>
 80073b4:	a201      	add	r2, pc, #4	; (adr r2, 80073bc <DMA_CheckFifoParam+0x24>)
 80073b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ba:	bf00      	nop
 80073bc:	080073cd 	.word	0x080073cd
 80073c0:	080073df 	.word	0x080073df
 80073c4:	080073cd 	.word	0x080073cd
 80073c8:	08007467 	.word	0x08007467
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d048      	beq.n	800746a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80073d8:	2301      	movs	r3, #1
 80073da:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073dc:	e045      	b.n	800746a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80073e6:	d142      	bne.n	800746e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80073e8:	2301      	movs	r3, #1
 80073ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80073ec:	e03f      	b.n	800746e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073f6:	d123      	bne.n	8007440 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fc:	2b03      	cmp	r3, #3
 80073fe:	d838      	bhi.n	8007472 <DMA_CheckFifoParam+0xda>
 8007400:	a201      	add	r2, pc, #4	; (adr r2, 8007408 <DMA_CheckFifoParam+0x70>)
 8007402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007406:	bf00      	nop
 8007408:	08007419 	.word	0x08007419
 800740c:	0800741f 	.word	0x0800741f
 8007410:	08007419 	.word	0x08007419
 8007414:	08007431 	.word	0x08007431
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	73fb      	strb	r3, [r7, #15]
        break;
 800741c:	e030      	b.n	8007480 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007422:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d025      	beq.n	8007476 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800742e:	e022      	b.n	8007476 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007434:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007438:	d11f      	bne.n	800747a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800743a:	2301      	movs	r3, #1
 800743c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800743e:	e01c      	b.n	800747a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007444:	2b02      	cmp	r3, #2
 8007446:	d902      	bls.n	800744e <DMA_CheckFifoParam+0xb6>
 8007448:	2b03      	cmp	r3, #3
 800744a:	d003      	beq.n	8007454 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800744c:	e018      	b.n	8007480 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800744e:	2301      	movs	r3, #1
 8007450:	73fb      	strb	r3, [r7, #15]
        break;
 8007452:	e015      	b.n	8007480 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007458:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d00e      	beq.n	800747e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	73fb      	strb	r3, [r7, #15]
    break;
 8007464:	e00b      	b.n	800747e <DMA_CheckFifoParam+0xe6>
        break;
 8007466:	bf00      	nop
 8007468:	e00a      	b.n	8007480 <DMA_CheckFifoParam+0xe8>
        break;
 800746a:	bf00      	nop
 800746c:	e008      	b.n	8007480 <DMA_CheckFifoParam+0xe8>
        break;
 800746e:	bf00      	nop
 8007470:	e006      	b.n	8007480 <DMA_CheckFifoParam+0xe8>
        break;
 8007472:	bf00      	nop
 8007474:	e004      	b.n	8007480 <DMA_CheckFifoParam+0xe8>
        break;
 8007476:	bf00      	nop
 8007478:	e002      	b.n	8007480 <DMA_CheckFifoParam+0xe8>
        break;
 800747a:	bf00      	nop
 800747c:	e000      	b.n	8007480 <DMA_CheckFifoParam+0xe8>
    break;
 800747e:	bf00      	nop
    }
  }

  return status;
 8007480:	7bfb      	ldrb	r3, [r7, #15]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3714      	adds	r7, #20
 8007486:	46bd      	mov	sp, r7
 8007488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop

08007490 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007490:	b480      	push	{r7}
 8007492:	b085      	sub	sp, #20
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a38      	ldr	r2, [pc, #224]	; (8007584 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d022      	beq.n	80074ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a36      	ldr	r2, [pc, #216]	; (8007588 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d01d      	beq.n	80074ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a35      	ldr	r2, [pc, #212]	; (800758c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d018      	beq.n	80074ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a33      	ldr	r2, [pc, #204]	; (8007590 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d013      	beq.n	80074ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a32      	ldr	r2, [pc, #200]	; (8007594 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80074cc:	4293      	cmp	r3, r2
 80074ce:	d00e      	beq.n	80074ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a30      	ldr	r2, [pc, #192]	; (8007598 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d009      	beq.n	80074ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4a2f      	ldr	r2, [pc, #188]	; (800759c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d004      	beq.n	80074ee <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a2d      	ldr	r2, [pc, #180]	; (80075a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d101      	bne.n	80074f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e000      	b.n	80074f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80074f2:	2300      	movs	r3, #0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d01a      	beq.n	800752e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	3b08      	subs	r3, #8
 8007500:	4a28      	ldr	r2, [pc, #160]	; (80075a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007502:	fba2 2303 	umull	r2, r3, r2, r3
 8007506:	091b      	lsrs	r3, r3, #4
 8007508:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800750a:	68fa      	ldr	r2, [r7, #12]
 800750c:	4b26      	ldr	r3, [pc, #152]	; (80075a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800750e:	4413      	add	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	461a      	mov	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	4a24      	ldr	r2, [pc, #144]	; (80075ac <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800751c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f003 031f 	and.w	r3, r3, #31
 8007524:	2201      	movs	r2, #1
 8007526:	409a      	lsls	r2, r3
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800752c:	e024      	b.n	8007578 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	b2db      	uxtb	r3, r3
 8007534:	3b10      	subs	r3, #16
 8007536:	4a1e      	ldr	r2, [pc, #120]	; (80075b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007538:	fba2 2303 	umull	r2, r3, r2, r3
 800753c:	091b      	lsrs	r3, r3, #4
 800753e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	4a1c      	ldr	r2, [pc, #112]	; (80075b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d806      	bhi.n	8007556 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	4a1b      	ldr	r2, [pc, #108]	; (80075b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d902      	bls.n	8007556 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	3308      	adds	r3, #8
 8007554:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	4b18      	ldr	r3, [pc, #96]	; (80075bc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	461a      	mov	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	4a16      	ldr	r2, [pc, #88]	; (80075c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007568:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f003 031f 	and.w	r3, r3, #31
 8007570:	2201      	movs	r2, #1
 8007572:	409a      	lsls	r2, r3
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007578:	bf00      	nop
 800757a:	3714      	adds	r7, #20
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	58025408 	.word	0x58025408
 8007588:	5802541c 	.word	0x5802541c
 800758c:	58025430 	.word	0x58025430
 8007590:	58025444 	.word	0x58025444
 8007594:	58025458 	.word	0x58025458
 8007598:	5802546c 	.word	0x5802546c
 800759c:	58025480 	.word	0x58025480
 80075a0:	58025494 	.word	0x58025494
 80075a4:	cccccccd 	.word	0xcccccccd
 80075a8:	16009600 	.word	0x16009600
 80075ac:	58025880 	.word	0x58025880
 80075b0:	aaaaaaab 	.word	0xaaaaaaab
 80075b4:	400204b8 	.word	0x400204b8
 80075b8:	4002040f 	.word	0x4002040f
 80075bc:	10008200 	.word	0x10008200
 80075c0:	40020880 	.word	0x40020880

080075c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b085      	sub	sp, #20
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d04a      	beq.n	8007670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2b08      	cmp	r3, #8
 80075de:	d847      	bhi.n	8007670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a25      	ldr	r2, [pc, #148]	; (800767c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d022      	beq.n	8007630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a24      	ldr	r2, [pc, #144]	; (8007680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d01d      	beq.n	8007630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	4a22      	ldr	r2, [pc, #136]	; (8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d018      	beq.n	8007630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a21      	ldr	r2, [pc, #132]	; (8007688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d013      	beq.n	8007630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a1f      	ldr	r2, [pc, #124]	; (800768c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d00e      	beq.n	8007630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a1e      	ldr	r2, [pc, #120]	; (8007690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d009      	beq.n	8007630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a1c      	ldr	r2, [pc, #112]	; (8007694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d004      	beq.n	8007630 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a1b      	ldr	r2, [pc, #108]	; (8007698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d101      	bne.n	8007634 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007630:	2301      	movs	r3, #1
 8007632:	e000      	b.n	8007636 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007634:	2300      	movs	r3, #0
 8007636:	2b00      	cmp	r3, #0
 8007638:	d00a      	beq.n	8007650 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	4b17      	ldr	r3, [pc, #92]	; (800769c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	461a      	mov	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a15      	ldr	r2, [pc, #84]	; (80076a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800764c:	671a      	str	r2, [r3, #112]	; 0x70
 800764e:	e009      	b.n	8007664 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	4b14      	ldr	r3, [pc, #80]	; (80076a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007654:	4413      	add	r3, r2
 8007656:	009b      	lsls	r3, r3, #2
 8007658:	461a      	mov	r2, r3
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a11      	ldr	r2, [pc, #68]	; (80076a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8007662:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	3b01      	subs	r3, #1
 8007668:	2201      	movs	r2, #1
 800766a:	409a      	lsls	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007670:	bf00      	nop
 8007672:	3714      	adds	r7, #20
 8007674:	46bd      	mov	sp, r7
 8007676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767a:	4770      	bx	lr
 800767c:	58025408 	.word	0x58025408
 8007680:	5802541c 	.word	0x5802541c
 8007684:	58025430 	.word	0x58025430
 8007688:	58025444 	.word	0x58025444
 800768c:	58025458 	.word	0x58025458
 8007690:	5802546c 	.word	0x5802546c
 8007694:	58025480 	.word	0x58025480
 8007698:	58025494 	.word	0x58025494
 800769c:	1600963f 	.word	0x1600963f
 80076a0:	58025940 	.word	0x58025940
 80076a4:	1000823f 	.word	0x1000823f
 80076a8:	40020940 	.word	0x40020940

080076ac <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b098      	sub	sp, #96	; 0x60
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80076b4:	4a84      	ldr	r2, [pc, #528]	; (80078c8 <HAL_FDCAN_Init+0x21c>)
 80076b6:	f107 030c 	add.w	r3, r7, #12
 80076ba:	4611      	mov	r1, r2
 80076bc:	224c      	movs	r2, #76	; 0x4c
 80076be:	4618      	mov	r0, r3
 80076c0:	f012 f878 	bl	80197b4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d101      	bne.n	80076ce <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e1c6      	b.n	8007a5c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a7e      	ldr	r2, [pc, #504]	; (80078cc <HAL_FDCAN_Init+0x220>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d106      	bne.n	80076e6 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80076e0:	461a      	mov	r2, r3
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80076ec:	b2db      	uxtb	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d106      	bne.n	8007700 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7fa fdae 	bl	800225c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	699a      	ldr	r2, [r3, #24]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	f022 0210 	bic.w	r2, r2, #16
 800770e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007710:	f7fb fde4 	bl	80032dc <HAL_GetTick>
 8007714:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007716:	e014      	b.n	8007742 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007718:	f7fb fde0 	bl	80032dc <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b0a      	cmp	r3, #10
 8007724:	d90d      	bls.n	8007742 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800772c:	f043 0201 	orr.w	r2, r3, #1
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2203      	movs	r2, #3
 800773a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	e18c      	b.n	8007a5c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	f003 0308 	and.w	r3, r3, #8
 800774c:	2b08      	cmp	r3, #8
 800774e:	d0e3      	beq.n	8007718 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	699a      	ldr	r2, [r3, #24]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0201 	orr.w	r2, r2, #1
 800775e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007760:	f7fb fdbc 	bl	80032dc <HAL_GetTick>
 8007764:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007766:	e014      	b.n	8007792 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007768:	f7fb fdb8 	bl	80032dc <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	2b0a      	cmp	r3, #10
 8007774:	d90d      	bls.n	8007792 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800777c:	f043 0201 	orr.w	r2, r3, #1
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2203      	movs	r2, #3
 800778a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e164      	b.n	8007a5c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	2b00      	cmp	r3, #0
 800779e:	d0e3      	beq.n	8007768 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	699a      	ldr	r2, [r3, #24]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f042 0202 	orr.w	r2, r2, #2
 80077ae:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	7c1b      	ldrb	r3, [r3, #16]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d108      	bne.n	80077ca <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699a      	ldr	r2, [r3, #24]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077c6:	619a      	str	r2, [r3, #24]
 80077c8:	e007      	b.n	80077da <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	699a      	ldr	r2, [r3, #24]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077d8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	7c5b      	ldrb	r3, [r3, #17]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d108      	bne.n	80077f4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	699a      	ldr	r2, [r3, #24]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077f0:	619a      	str	r2, [r3, #24]
 80077f2:	e007      	b.n	8007804 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	699a      	ldr	r2, [r3, #24]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007802:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	7c9b      	ldrb	r3, [r3, #18]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d108      	bne.n	800781e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	699a      	ldr	r2, [r3, #24]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800781a:	619a      	str	r2, [r3, #24]
 800781c:	e007      	b.n	800782e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	699a      	ldr	r2, [r3, #24]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800782c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	699b      	ldr	r3, [r3, #24]
 8007834:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	689a      	ldr	r2, [r3, #8]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	699a      	ldr	r2, [r3, #24]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007852:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	691a      	ldr	r2, [r3, #16]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 0210 	bic.w	r2, r2, #16
 8007862:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d108      	bne.n	800787e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699a      	ldr	r2, [r3, #24]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f042 0204 	orr.w	r2, r2, #4
 800787a:	619a      	str	r2, [r3, #24]
 800787c:	e030      	b.n	80078e0 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d02c      	beq.n	80078e0 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	68db      	ldr	r3, [r3, #12]
 800788a:	2b02      	cmp	r3, #2
 800788c:	d020      	beq.n	80078d0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	699a      	ldr	r2, [r3, #24]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800789c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	691a      	ldr	r2, [r3, #16]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f042 0210 	orr.w	r2, r2, #16
 80078ac:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	2b03      	cmp	r3, #3
 80078b4:	d114      	bne.n	80078e0 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	699a      	ldr	r2, [r3, #24]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f042 0220 	orr.w	r2, r2, #32
 80078c4:	619a      	str	r2, [r3, #24]
 80078c6:	e00b      	b.n	80078e0 <HAL_FDCAN_Init+0x234>
 80078c8:	0801ded8 	.word	0x0801ded8
 80078cc:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	699a      	ldr	r2, [r3, #24]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f042 0220 	orr.w	r2, r2, #32
 80078de:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	699b      	ldr	r3, [r3, #24]
 80078e4:	3b01      	subs	r3, #1
 80078e6:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	69db      	ldr	r3, [r3, #28]
 80078ec:	3b01      	subs	r3, #1
 80078ee:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80078f0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80078f8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	695b      	ldr	r3, [r3, #20]
 8007900:	3b01      	subs	r3, #1
 8007902:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007908:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800790a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	689b      	ldr	r3, [r3, #8]
 8007910:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007914:	d115      	bne.n	8007942 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007920:	3b01      	subs	r3, #1
 8007922:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007924:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800792a:	3b01      	subs	r3, #1
 800792c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800792e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	3b01      	subs	r3, #1
 8007938:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800793e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007940:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	430a      	orrs	r2, r1
 800795c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007968:	4413      	add	r3, r2
 800796a:	2b00      	cmp	r3, #0
 800796c:	d011      	beq.n	8007992 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007976:	f023 0107 	bic.w	r1, r3, #7
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	3360      	adds	r3, #96	; 0x60
 8007982:	443b      	add	r3, r7
 8007984:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	430a      	orrs	r2, r1
 800798e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007996:	2b00      	cmp	r3, #0
 8007998:	d011      	beq.n	80079be <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80079a2:	f023 0107 	bic.w	r1, r3, #7
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	3360      	adds	r3, #96	; 0x60
 80079ae:	443b      	add	r3, r7
 80079b0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d012      	beq.n	80079ec <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80079ce:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80079d6:	009b      	lsls	r3, r3, #2
 80079d8:	3360      	adds	r3, #96	; 0x60
 80079da:	443b      	add	r3, r7
 80079dc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80079e0:	011a      	lsls	r2, r3, #4
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d012      	beq.n	8007a1a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80079fc:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	3360      	adds	r3, #96	; 0x60
 8007a08:	443b      	add	r3, r7
 8007a0a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007a0e:	021a      	lsls	r2, r3, #8
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	430a      	orrs	r2, r1
 8007a16:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a11      	ldr	r2, [pc, #68]	; (8007a64 <HAL_FDCAN_Init+0x3b8>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d107      	bne.n	8007a34 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	689a      	ldr	r2, [r3, #8]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f022 0203 	bic.w	r2, r2, #3
 8007a32:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f80b 	bl	8007a68 <FDCAN_CalcultateRamBlockAddresses>
 8007a52:	4603      	mov	r3, r0
 8007a54:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007a58:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3760      	adds	r7, #96	; 0x60
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}
 8007a64:	4000a000 	.word	0x4000a000

08007a68 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b085      	sub	sp, #20
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a74:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007a7e:	4ba7      	ldr	r3, [pc, #668]	; (8007d1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a80:	4013      	ands	r3, r2
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	0091      	lsls	r1, r2, #2
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	6812      	ldr	r2, [r2, #0]
 8007a8a:	430b      	orrs	r3, r1
 8007a8c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a98:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa0:	041a      	lsls	r2, r3, #16
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	430a      	orrs	r2, r1
 8007aa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab0:	68ba      	ldr	r2, [r7, #8]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007abe:	4b97      	ldr	r3, [pc, #604]	; (8007d1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ac0:	4013      	ands	r3, r2
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	0091      	lsls	r1, r2, #2
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	6812      	ldr	r2, [r2, #0]
 8007aca:	430b      	orrs	r3, r1
 8007acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ad8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ae0:	041a      	lsls	r2, r3, #16
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	430a      	orrs	r2, r1
 8007ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007af0:	005b      	lsls	r3, r3, #1
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	4413      	add	r3, r2
 8007af6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007b00:	4b86      	ldr	r3, [pc, #536]	; (8007d1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b02:	4013      	ands	r3, r2
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	0091      	lsls	r1, r2, #2
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	6812      	ldr	r2, [r2, #0]
 8007b0c:	430b      	orrs	r3, r1
 8007b0e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007b1a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b22:	041a      	lsls	r2, r3, #16
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007b36:	fb02 f303 	mul.w	r3, r2, r3
 8007b3a:	68ba      	ldr	r2, [r7, #8]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007b48:	4b74      	ldr	r3, [pc, #464]	; (8007d1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	0091      	lsls	r1, r2, #2
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	6812      	ldr	r2, [r2, #0]
 8007b54:	430b      	orrs	r3, r1
 8007b56:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007b62:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b6a:	041a      	lsls	r2, r3, #16
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	430a      	orrs	r2, r1
 8007b72:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b7a:	687a      	ldr	r2, [r7, #4]
 8007b7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007b7e:	fb02 f303 	mul.w	r3, r2, r3
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	4413      	add	r3, r2
 8007b86:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007b90:	4b62      	ldr	r3, [pc, #392]	; (8007d1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007b92:	4013      	ands	r3, r2
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	0091      	lsls	r1, r2, #2
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	6812      	ldr	r2, [r2, #0]
 8007b9c:	430b      	orrs	r3, r1
 8007b9e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007baa:	fb02 f303 	mul.w	r3, r2, r3
 8007bae:	68ba      	ldr	r2, [r7, #8]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007bbc:	4b57      	ldr	r3, [pc, #348]	; (8007d1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	68ba      	ldr	r2, [r7, #8]
 8007bc2:	0091      	lsls	r1, r2, #2
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	6812      	ldr	r2, [r2, #0]
 8007bc8:	430b      	orrs	r3, r1
 8007bca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bd6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bde:	041a      	lsls	r2, r3, #16
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bee:	005b      	lsls	r3, r3, #1
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007bfe:	4b47      	ldr	r3, [pc, #284]	; (8007d1c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007c00:	4013      	ands	r3, r2
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	0091      	lsls	r1, r2, #2
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	6812      	ldr	r2, [r2, #0]
 8007c0a:	430b      	orrs	r3, r1
 8007c0c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007c18:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c20:	041a      	lsls	r2, r3, #16
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	430a      	orrs	r2, r1
 8007c28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007c34:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c3c:	061a      	lsls	r2, r3, #24
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	430a      	orrs	r2, r1
 8007c44:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c4c:	4b34      	ldr	r3, [pc, #208]	; (8007d20 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007c4e:	4413      	add	r3, r2
 8007c50:	009a      	lsls	r2, r3, #2
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	441a      	add	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c6e:	00db      	lsls	r3, r3, #3
 8007c70:	441a      	add	r2, r3
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c7e:	6879      	ldr	r1, [r7, #4]
 8007c80:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007c82:	fb01 f303 	mul.w	r3, r1, r3
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	441a      	add	r2, r3
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c96:	6879      	ldr	r1, [r7, #4]
 8007c98:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007c9a:	fb01 f303 	mul.w	r3, r1, r3
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	441a      	add	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cae:	6879      	ldr	r1, [r7, #4]
 8007cb0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007cb2:	fb01 f303 	mul.w	r3, r1, r3
 8007cb6:	009b      	lsls	r3, r3, #2
 8007cb8:	441a      	add	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cca:	00db      	lsls	r3, r3, #3
 8007ccc:	441a      	add	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cde:	6879      	ldr	r1, [r7, #4]
 8007ce0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007ce2:	fb01 f303 	mul.w	r3, r1, r3
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	441a      	add	r2, r3
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007cfe:	fb01 f303 	mul.w	r3, r1, r3
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	441a      	add	r2, r3
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d12:	4a04      	ldr	r2, [pc, #16]	; (8007d24 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d915      	bls.n	8007d44 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007d18:	e006      	b.n	8007d28 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007d1a:	bf00      	nop
 8007d1c:	ffff0003 	.word	0xffff0003
 8007d20:	10002b00 	.word	0x10002b00
 8007d24:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007d2e:	f043 0220 	orr.w	r2, r3, #32
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2203      	movs	r2, #3
 8007d3c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e010      	b.n	8007d66 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d48:	60fb      	str	r3, [r7, #12]
 8007d4a:	e005      	b.n	8007d58 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	3304      	adds	r3, #4
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d5e:	68fa      	ldr	r2, [r7, #12]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d3f3      	bcc.n	8007d4c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr
 8007d72:	bf00      	nop

08007d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b089      	sub	sp, #36	; 0x24
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007d82:	4b86      	ldr	r3, [pc, #536]	; (8007f9c <HAL_GPIO_Init+0x228>)
 8007d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d86:	e18c      	b.n	80080a2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	2101      	movs	r1, #1
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	fa01 f303 	lsl.w	r3, r1, r3
 8007d94:	4013      	ands	r3, r2
 8007d96:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 817e 	beq.w	800809c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f003 0303 	and.w	r3, r3, #3
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d005      	beq.n	8007db8 <HAL_GPIO_Init+0x44>
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f003 0303 	and.w	r3, r3, #3
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d130      	bne.n	8007e1a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	005b      	lsls	r3, r3, #1
 8007dc2:	2203      	movs	r2, #3
 8007dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8007dc8:	43db      	mvns	r3, r3
 8007dca:	69ba      	ldr	r2, [r7, #24]
 8007dcc:	4013      	ands	r3, r2
 8007dce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	68da      	ldr	r2, [r3, #12]
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ddc:	69ba      	ldr	r2, [r7, #24]
 8007dde:	4313      	orrs	r3, r2
 8007de0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	69ba      	ldr	r2, [r7, #24]
 8007de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007dee:	2201      	movs	r2, #1
 8007df0:	69fb      	ldr	r3, [r7, #28]
 8007df2:	fa02 f303 	lsl.w	r3, r2, r3
 8007df6:	43db      	mvns	r3, r3
 8007df8:	69ba      	ldr	r2, [r7, #24]
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	091b      	lsrs	r3, r3, #4
 8007e04:	f003 0201 	and.w	r2, r3, #1
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e0e:	69ba      	ldr	r2, [r7, #24]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f003 0303 	and.w	r3, r3, #3
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d017      	beq.n	8007e56 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	68db      	ldr	r3, [r3, #12]
 8007e2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007e2c:	69fb      	ldr	r3, [r7, #28]
 8007e2e:	005b      	lsls	r3, r3, #1
 8007e30:	2203      	movs	r2, #3
 8007e32:	fa02 f303 	lsl.w	r3, r2, r3
 8007e36:	43db      	mvns	r3, r3
 8007e38:	69ba      	ldr	r2, [r7, #24]
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	689a      	ldr	r2, [r3, #8]
 8007e42:	69fb      	ldr	r3, [r7, #28]
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4a:	69ba      	ldr	r2, [r7, #24]
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f003 0303 	and.w	r3, r3, #3
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d123      	bne.n	8007eaa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007e62:	69fb      	ldr	r3, [r7, #28]
 8007e64:	08da      	lsrs	r2, r3, #3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	3208      	adds	r2, #8
 8007e6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	f003 0307 	and.w	r3, r3, #7
 8007e76:	009b      	lsls	r3, r3, #2
 8007e78:	220f      	movs	r2, #15
 8007e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7e:	43db      	mvns	r3, r3
 8007e80:	69ba      	ldr	r2, [r7, #24]
 8007e82:	4013      	ands	r3, r2
 8007e84:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	691a      	ldr	r2, [r3, #16]
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	f003 0307 	and.w	r3, r3, #7
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	fa02 f303 	lsl.w	r3, r2, r3
 8007e96:	69ba      	ldr	r2, [r7, #24]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	08da      	lsrs	r2, r3, #3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	3208      	adds	r2, #8
 8007ea4:	69b9      	ldr	r1, [r7, #24]
 8007ea6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	005b      	lsls	r3, r3, #1
 8007eb4:	2203      	movs	r2, #3
 8007eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eba:	43db      	mvns	r3, r3
 8007ebc:	69ba      	ldr	r2, [r7, #24]
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f003 0203 	and.w	r2, r3, #3
 8007eca:	69fb      	ldr	r3, [r7, #28]
 8007ecc:	005b      	lsls	r3, r3, #1
 8007ece:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed2:	69ba      	ldr	r2, [r7, #24]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	69ba      	ldr	r2, [r7, #24]
 8007edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f000 80d8 	beq.w	800809c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007eec:	4b2c      	ldr	r3, [pc, #176]	; (8007fa0 <HAL_GPIO_Init+0x22c>)
 8007eee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ef2:	4a2b      	ldr	r2, [pc, #172]	; (8007fa0 <HAL_GPIO_Init+0x22c>)
 8007ef4:	f043 0302 	orr.w	r3, r3, #2
 8007ef8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007efc:	4b28      	ldr	r3, [pc, #160]	; (8007fa0 <HAL_GPIO_Init+0x22c>)
 8007efe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f02:	f003 0302 	and.w	r3, r3, #2
 8007f06:	60fb      	str	r3, [r7, #12]
 8007f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f0a:	4a26      	ldr	r2, [pc, #152]	; (8007fa4 <HAL_GPIO_Init+0x230>)
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	089b      	lsrs	r3, r3, #2
 8007f10:	3302      	adds	r3, #2
 8007f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	f003 0303 	and.w	r3, r3, #3
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	220f      	movs	r2, #15
 8007f22:	fa02 f303 	lsl.w	r3, r2, r3
 8007f26:	43db      	mvns	r3, r3
 8007f28:	69ba      	ldr	r2, [r7, #24]
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4a1d      	ldr	r2, [pc, #116]	; (8007fa8 <HAL_GPIO_Init+0x234>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d04a      	beq.n	8007fcc <HAL_GPIO_Init+0x258>
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	4a1c      	ldr	r2, [pc, #112]	; (8007fac <HAL_GPIO_Init+0x238>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d02b      	beq.n	8007f96 <HAL_GPIO_Init+0x222>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	4a1b      	ldr	r2, [pc, #108]	; (8007fb0 <HAL_GPIO_Init+0x23c>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d025      	beq.n	8007f92 <HAL_GPIO_Init+0x21e>
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a1a      	ldr	r2, [pc, #104]	; (8007fb4 <HAL_GPIO_Init+0x240>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d01f      	beq.n	8007f8e <HAL_GPIO_Init+0x21a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a19      	ldr	r2, [pc, #100]	; (8007fb8 <HAL_GPIO_Init+0x244>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d019      	beq.n	8007f8a <HAL_GPIO_Init+0x216>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a18      	ldr	r2, [pc, #96]	; (8007fbc <HAL_GPIO_Init+0x248>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d013      	beq.n	8007f86 <HAL_GPIO_Init+0x212>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a17      	ldr	r2, [pc, #92]	; (8007fc0 <HAL_GPIO_Init+0x24c>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d00d      	beq.n	8007f82 <HAL_GPIO_Init+0x20e>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a16      	ldr	r2, [pc, #88]	; (8007fc4 <HAL_GPIO_Init+0x250>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d007      	beq.n	8007f7e <HAL_GPIO_Init+0x20a>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a15      	ldr	r2, [pc, #84]	; (8007fc8 <HAL_GPIO_Init+0x254>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d101      	bne.n	8007f7a <HAL_GPIO_Init+0x206>
 8007f76:	2309      	movs	r3, #9
 8007f78:	e029      	b.n	8007fce <HAL_GPIO_Init+0x25a>
 8007f7a:	230a      	movs	r3, #10
 8007f7c:	e027      	b.n	8007fce <HAL_GPIO_Init+0x25a>
 8007f7e:	2307      	movs	r3, #7
 8007f80:	e025      	b.n	8007fce <HAL_GPIO_Init+0x25a>
 8007f82:	2306      	movs	r3, #6
 8007f84:	e023      	b.n	8007fce <HAL_GPIO_Init+0x25a>
 8007f86:	2305      	movs	r3, #5
 8007f88:	e021      	b.n	8007fce <HAL_GPIO_Init+0x25a>
 8007f8a:	2304      	movs	r3, #4
 8007f8c:	e01f      	b.n	8007fce <HAL_GPIO_Init+0x25a>
 8007f8e:	2303      	movs	r3, #3
 8007f90:	e01d      	b.n	8007fce <HAL_GPIO_Init+0x25a>
 8007f92:	2302      	movs	r3, #2
 8007f94:	e01b      	b.n	8007fce <HAL_GPIO_Init+0x25a>
 8007f96:	2301      	movs	r3, #1
 8007f98:	e019      	b.n	8007fce <HAL_GPIO_Init+0x25a>
 8007f9a:	bf00      	nop
 8007f9c:	58000080 	.word	0x58000080
 8007fa0:	58024400 	.word	0x58024400
 8007fa4:	58000400 	.word	0x58000400
 8007fa8:	58020000 	.word	0x58020000
 8007fac:	58020400 	.word	0x58020400
 8007fb0:	58020800 	.word	0x58020800
 8007fb4:	58020c00 	.word	0x58020c00
 8007fb8:	58021000 	.word	0x58021000
 8007fbc:	58021400 	.word	0x58021400
 8007fc0:	58021800 	.word	0x58021800
 8007fc4:	58021c00 	.word	0x58021c00
 8007fc8:	58022400 	.word	0x58022400
 8007fcc:	2300      	movs	r3, #0
 8007fce:	69fa      	ldr	r2, [r7, #28]
 8007fd0:	f002 0203 	and.w	r2, r2, #3
 8007fd4:	0092      	lsls	r2, r2, #2
 8007fd6:	4093      	lsls	r3, r2
 8007fd8:	69ba      	ldr	r2, [r7, #24]
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007fde:	4938      	ldr	r1, [pc, #224]	; (80080c0 <HAL_GPIO_Init+0x34c>)
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	089b      	lsrs	r3, r3, #2
 8007fe4:	3302      	adds	r3, #2
 8007fe6:	69ba      	ldr	r2, [r7, #24]
 8007fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007fec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	43db      	mvns	r3, r3
 8007ff8:	69ba      	ldr	r2, [r7, #24]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d003      	beq.n	8008012 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	4313      	orrs	r3, r2
 8008010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008012:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800801a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	43db      	mvns	r3, r3
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	4013      	ands	r3, r2
 800802a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d003      	beq.n	8008040 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8008038:	69ba      	ldr	r2, [r7, #24]
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	4313      	orrs	r3, r2
 800803e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008040:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	43db      	mvns	r3, r3
 8008052:	69ba      	ldr	r2, [r7, #24]
 8008054:	4013      	ands	r3, r2
 8008056:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d003      	beq.n	800806c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8008064:	69ba      	ldr	r2, [r7, #24]
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	4313      	orrs	r3, r2
 800806a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	69ba      	ldr	r2, [r7, #24]
 8008070:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	43db      	mvns	r3, r3
 800807c:	69ba      	ldr	r2, [r7, #24]
 800807e:	4013      	ands	r3, r2
 8008080:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800808a:	2b00      	cmp	r3, #0
 800808c:	d003      	beq.n	8008096 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800808e:	69ba      	ldr	r2, [r7, #24]
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	4313      	orrs	r3, r2
 8008094:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	69ba      	ldr	r2, [r7, #24]
 800809a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	3301      	adds	r3, #1
 80080a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	fa22 f303 	lsr.w	r3, r2, r3
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f47f ae6b 	bne.w	8007d88 <HAL_GPIO_Init+0x14>
  }
}
 80080b2:	bf00      	nop
 80080b4:	bf00      	nop
 80080b6:	3724      	adds	r7, #36	; 0x24
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	58000400 	.word	0x58000400

080080c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	460b      	mov	r3, r1
 80080ce:	807b      	strh	r3, [r7, #2]
 80080d0:	4613      	mov	r3, r2
 80080d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80080d4:	787b      	ldrb	r3, [r7, #1]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d003      	beq.n	80080e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80080da:	887a      	ldrh	r2, [r7, #2]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80080e0:	e003      	b.n	80080ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80080e2:	887b      	ldrh	r3, [r7, #2]
 80080e4:	041a      	lsls	r2, r3, #16
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	619a      	str	r2, [r3, #24]
}
 80080ea:	bf00      	nop
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
	...

080080f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e07f      	b.n	800820a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d106      	bne.n	8008124 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7fa f904 	bl	800232c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2224      	movs	r2, #36	; 0x24
 8008128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f022 0201 	bic.w	r2, r2, #1
 800813a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	685a      	ldr	r2, [r3, #4]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008148:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	689a      	ldr	r2, [r3, #8]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008158:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	2b01      	cmp	r3, #1
 8008160:	d107      	bne.n	8008172 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	689a      	ldr	r2, [r3, #8]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800816e:	609a      	str	r2, [r3, #8]
 8008170:	e006      	b.n	8008180 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	689a      	ldr	r2, [r3, #8]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800817e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	2b02      	cmp	r3, #2
 8008186:	d104      	bne.n	8008192 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008190:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6859      	ldr	r1, [r3, #4]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	4b1d      	ldr	r3, [pc, #116]	; (8008214 <HAL_I2C_Init+0x11c>)
 800819e:	430b      	orrs	r3, r1
 80081a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	68da      	ldr	r2, [r3, #12]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80081b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	691a      	ldr	r2, [r3, #16]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	695b      	ldr	r3, [r3, #20]
 80081ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	699b      	ldr	r3, [r3, #24]
 80081c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	430a      	orrs	r2, r1
 80081ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	69d9      	ldr	r1, [r3, #28]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6a1a      	ldr	r2, [r3, #32]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	430a      	orrs	r2, r1
 80081da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	681a      	ldr	r2, [r3, #0]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f042 0201 	orr.w	r2, r2, #1
 80081ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2220      	movs	r2, #32
 80081f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	2200      	movs	r2, #0
 80081fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008208:	2300      	movs	r3, #0
}
 800820a:	4618      	mov	r0, r3
 800820c:	3708      	adds	r7, #8
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	02008000 	.word	0x02008000

08008218 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	699b      	ldr	r3, [r3, #24]
 8008226:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008234:	2b00      	cmp	r3, #0
 8008236:	d005      	beq.n	8008244 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800823c:	68ba      	ldr	r2, [r7, #8]
 800823e:	68f9      	ldr	r1, [r7, #12]
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	4798      	blx	r3
  }
}
 8008244:	bf00      	nop
 8008246:	3710      	adds	r7, #16
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800825c:	b2db      	uxtb	r3, r3
 800825e:	2b20      	cmp	r3, #32
 8008260:	d138      	bne.n	80082d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008268:	2b01      	cmp	r3, #1
 800826a:	d101      	bne.n	8008270 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800826c:	2302      	movs	r3, #2
 800826e:	e032      	b.n	80082d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2201      	movs	r2, #1
 8008274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2224      	movs	r2, #36	; 0x24
 800827c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	681a      	ldr	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f022 0201 	bic.w	r2, r2, #1
 800828e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800829e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	6819      	ldr	r1, [r3, #0]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	683a      	ldr	r2, [r7, #0]
 80082ac:	430a      	orrs	r2, r1
 80082ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f042 0201 	orr.w	r2, r2, #1
 80082be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2220      	movs	r2, #32
 80082c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80082d0:	2300      	movs	r3, #0
 80082d2:	e000      	b.n	80082d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80082d4:	2302      	movs	r3, #2
  }
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	370c      	adds	r7, #12
 80082da:	46bd      	mov	sp, r7
 80082dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e0:	4770      	bx	lr

080082e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80082e2:	b480      	push	{r7}
 80082e4:	b085      	sub	sp, #20
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
 80082ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b20      	cmp	r3, #32
 80082f6:	d139      	bne.n	800836c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d101      	bne.n	8008306 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008302:	2302      	movs	r3, #2
 8008304:	e033      	b.n	800836e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2224      	movs	r2, #36	; 0x24
 8008312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f022 0201 	bic.w	r2, r2, #1
 8008324:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008334:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	021b      	lsls	r3, r3, #8
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	4313      	orrs	r3, r2
 800833e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f042 0201 	orr.w	r2, r2, #1
 8008356:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2220      	movs	r2, #32
 800835c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	e000      	b.n	800836e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800836c:	2302      	movs	r3, #2
  }
}
 800836e:	4618      	mov	r0, r3
 8008370:	3714      	adds	r7, #20
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800837a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800837c:	b08f      	sub	sp, #60	; 0x3c
 800837e:	af0a      	add	r7, sp, #40	; 0x28
 8008380:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d101      	bne.n	800838c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	e116      	b.n	80085ba <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d106      	bne.n	80083ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f010 fece 	bl	8019148 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2203      	movs	r2, #3
 80083b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d102      	bne.n	80083c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f00a f89d 	bl	801250a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	603b      	str	r3, [r7, #0]
 80083d6:	687e      	ldr	r6, [r7, #4]
 80083d8:	466d      	mov	r5, sp
 80083da:	f106 0410 	add.w	r4, r6, #16
 80083de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80083e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80083e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80083ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80083ee:	1d33      	adds	r3, r6, #4
 80083f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083f2:	6838      	ldr	r0, [r7, #0]
 80083f4:	f009 ff68 	bl	80122c8 <USB_CoreInit>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d005      	beq.n	800840a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	2202      	movs	r2, #2
 8008402:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e0d7      	b.n	80085ba <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2100      	movs	r1, #0
 8008410:	4618      	mov	r0, r3
 8008412:	f00a f88b 	bl	801252c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008416:	2300      	movs	r3, #0
 8008418:	73fb      	strb	r3, [r7, #15]
 800841a:	e04a      	b.n	80084b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800841c:	7bfa      	ldrb	r2, [r7, #15]
 800841e:	6879      	ldr	r1, [r7, #4]
 8008420:	4613      	mov	r3, r2
 8008422:	00db      	lsls	r3, r3, #3
 8008424:	4413      	add	r3, r2
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	440b      	add	r3, r1
 800842a:	333d      	adds	r3, #61	; 0x3d
 800842c:	2201      	movs	r2, #1
 800842e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008430:	7bfa      	ldrb	r2, [r7, #15]
 8008432:	6879      	ldr	r1, [r7, #4]
 8008434:	4613      	mov	r3, r2
 8008436:	00db      	lsls	r3, r3, #3
 8008438:	4413      	add	r3, r2
 800843a:	009b      	lsls	r3, r3, #2
 800843c:	440b      	add	r3, r1
 800843e:	333c      	adds	r3, #60	; 0x3c
 8008440:	7bfa      	ldrb	r2, [r7, #15]
 8008442:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008444:	7bfa      	ldrb	r2, [r7, #15]
 8008446:	7bfb      	ldrb	r3, [r7, #15]
 8008448:	b298      	uxth	r0, r3
 800844a:	6879      	ldr	r1, [r7, #4]
 800844c:	4613      	mov	r3, r2
 800844e:	00db      	lsls	r3, r3, #3
 8008450:	4413      	add	r3, r2
 8008452:	009b      	lsls	r3, r3, #2
 8008454:	440b      	add	r3, r1
 8008456:	3356      	adds	r3, #86	; 0x56
 8008458:	4602      	mov	r2, r0
 800845a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800845c:	7bfa      	ldrb	r2, [r7, #15]
 800845e:	6879      	ldr	r1, [r7, #4]
 8008460:	4613      	mov	r3, r2
 8008462:	00db      	lsls	r3, r3, #3
 8008464:	4413      	add	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	440b      	add	r3, r1
 800846a:	3340      	adds	r3, #64	; 0x40
 800846c:	2200      	movs	r2, #0
 800846e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008470:	7bfa      	ldrb	r2, [r7, #15]
 8008472:	6879      	ldr	r1, [r7, #4]
 8008474:	4613      	mov	r3, r2
 8008476:	00db      	lsls	r3, r3, #3
 8008478:	4413      	add	r3, r2
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	440b      	add	r3, r1
 800847e:	3344      	adds	r3, #68	; 0x44
 8008480:	2200      	movs	r2, #0
 8008482:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008484:	7bfa      	ldrb	r2, [r7, #15]
 8008486:	6879      	ldr	r1, [r7, #4]
 8008488:	4613      	mov	r3, r2
 800848a:	00db      	lsls	r3, r3, #3
 800848c:	4413      	add	r3, r2
 800848e:	009b      	lsls	r3, r3, #2
 8008490:	440b      	add	r3, r1
 8008492:	3348      	adds	r3, #72	; 0x48
 8008494:	2200      	movs	r2, #0
 8008496:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008498:	7bfa      	ldrb	r2, [r7, #15]
 800849a:	6879      	ldr	r1, [r7, #4]
 800849c:	4613      	mov	r3, r2
 800849e:	00db      	lsls	r3, r3, #3
 80084a0:	4413      	add	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	440b      	add	r3, r1
 80084a6:	334c      	adds	r3, #76	; 0x4c
 80084a8:	2200      	movs	r2, #0
 80084aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084ac:	7bfb      	ldrb	r3, [r7, #15]
 80084ae:	3301      	adds	r3, #1
 80084b0:	73fb      	strb	r3, [r7, #15]
 80084b2:	7bfa      	ldrb	r2, [r7, #15]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	429a      	cmp	r2, r3
 80084ba:	d3af      	bcc.n	800841c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084bc:	2300      	movs	r3, #0
 80084be:	73fb      	strb	r3, [r7, #15]
 80084c0:	e044      	b.n	800854c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80084c2:	7bfa      	ldrb	r2, [r7, #15]
 80084c4:	6879      	ldr	r1, [r7, #4]
 80084c6:	4613      	mov	r3, r2
 80084c8:	00db      	lsls	r3, r3, #3
 80084ca:	4413      	add	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	440b      	add	r3, r1
 80084d0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80084d4:	2200      	movs	r2, #0
 80084d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80084d8:	7bfa      	ldrb	r2, [r7, #15]
 80084da:	6879      	ldr	r1, [r7, #4]
 80084dc:	4613      	mov	r3, r2
 80084de:	00db      	lsls	r3, r3, #3
 80084e0:	4413      	add	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	440b      	add	r3, r1
 80084e6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80084ea:	7bfa      	ldrb	r2, [r7, #15]
 80084ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80084ee:	7bfa      	ldrb	r2, [r7, #15]
 80084f0:	6879      	ldr	r1, [r7, #4]
 80084f2:	4613      	mov	r3, r2
 80084f4:	00db      	lsls	r3, r3, #3
 80084f6:	4413      	add	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	440b      	add	r3, r1
 80084fc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008500:	2200      	movs	r2, #0
 8008502:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008504:	7bfa      	ldrb	r2, [r7, #15]
 8008506:	6879      	ldr	r1, [r7, #4]
 8008508:	4613      	mov	r3, r2
 800850a:	00db      	lsls	r3, r3, #3
 800850c:	4413      	add	r3, r2
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	440b      	add	r3, r1
 8008512:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8008516:	2200      	movs	r2, #0
 8008518:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800851a:	7bfa      	ldrb	r2, [r7, #15]
 800851c:	6879      	ldr	r1, [r7, #4]
 800851e:	4613      	mov	r3, r2
 8008520:	00db      	lsls	r3, r3, #3
 8008522:	4413      	add	r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	440b      	add	r3, r1
 8008528:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800852c:	2200      	movs	r2, #0
 800852e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008530:	7bfa      	ldrb	r2, [r7, #15]
 8008532:	6879      	ldr	r1, [r7, #4]
 8008534:	4613      	mov	r3, r2
 8008536:	00db      	lsls	r3, r3, #3
 8008538:	4413      	add	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	440b      	add	r3, r1
 800853e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008542:	2200      	movs	r2, #0
 8008544:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008546:	7bfb      	ldrb	r3, [r7, #15]
 8008548:	3301      	adds	r3, #1
 800854a:	73fb      	strb	r3, [r7, #15]
 800854c:	7bfa      	ldrb	r2, [r7, #15]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	429a      	cmp	r2, r3
 8008554:	d3b5      	bcc.n	80084c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	603b      	str	r3, [r7, #0]
 800855c:	687e      	ldr	r6, [r7, #4]
 800855e:	466d      	mov	r5, sp
 8008560:	f106 0410 	add.w	r4, r6, #16
 8008564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800856a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800856c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008570:	e885 0003 	stmia.w	r5, {r0, r1}
 8008574:	1d33      	adds	r3, r6, #4
 8008576:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008578:	6838      	ldr	r0, [r7, #0]
 800857a:	f00a f823 	bl	80125c4 <USB_DevInit>
 800857e:	4603      	mov	r3, r0
 8008580:	2b00      	cmp	r3, #0
 8008582:	d005      	beq.n	8008590 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2202      	movs	r2, #2
 8008588:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e014      	b.n	80085ba <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2200      	movs	r2, #0
 8008594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d102      	bne.n	80085ae <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f001 f96f 	bl	800988c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	4618      	mov	r0, r3
 80085b4:	f00b f865 	bl	8013682 <USB_DevDisconnect>

  return HAL_OK;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3714      	adds	r7, #20
 80085be:	46bd      	mov	sp, r7
 80085c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d101      	bne.n	80085de <HAL_PCD_Start+0x1c>
 80085da:	2302      	movs	r3, #2
 80085dc:	e022      	b.n	8008624 <HAL_PCD_Start+0x62>
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d109      	bne.n	8008606 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80085f6:	2b01      	cmp	r3, #1
 80085f8:	d105      	bne.n	8008606 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4618      	mov	r0, r3
 800860c:	f009 ff6c 	bl	80124e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4618      	mov	r0, r3
 8008616:	f00b f813 	bl	8013640 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800862c:	b590      	push	{r4, r7, lr}
 800862e:	b08d      	sub	sp, #52	; 0x34
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863a:	6a3b      	ldr	r3, [r7, #32]
 800863c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4618      	mov	r0, r3
 8008644:	f00b f8d1 	bl	80137ea <USB_GetMode>
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	f040 84b7 	bne.w	8008fbe <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4618      	mov	r0, r3
 8008656:	f00b f835 	bl	80136c4 <USB_ReadInterrupts>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	f000 84ad 	beq.w	8008fbc <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8008662:	69fb      	ldr	r3, [r7, #28]
 8008664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	0a1b      	lsrs	r3, r3, #8
 800866c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	f00b f822 	bl	80136c4 <USB_ReadInterrupts>
 8008680:	4603      	mov	r3, r0
 8008682:	f003 0302 	and.w	r3, r3, #2
 8008686:	2b02      	cmp	r3, #2
 8008688:	d107      	bne.n	800869a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	695a      	ldr	r2, [r3, #20]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	f002 0202 	and.w	r2, r2, #2
 8008698:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4618      	mov	r0, r3
 80086a0:	f00b f810 	bl	80136c4 <USB_ReadInterrupts>
 80086a4:	4603      	mov	r3, r0
 80086a6:	f003 0310 	and.w	r3, r3, #16
 80086aa:	2b10      	cmp	r3, #16
 80086ac:	d161      	bne.n	8008772 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	699a      	ldr	r2, [r3, #24]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f022 0210 	bic.w	r2, r2, #16
 80086bc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80086be:	6a3b      	ldr	r3, [r7, #32]
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80086c4:	69bb      	ldr	r3, [r7, #24]
 80086c6:	f003 020f 	and.w	r2, r3, #15
 80086ca:	4613      	mov	r3, r2
 80086cc:	00db      	lsls	r3, r3, #3
 80086ce:	4413      	add	r3, r2
 80086d0:	009b      	lsls	r3, r3, #2
 80086d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	4413      	add	r3, r2
 80086da:	3304      	adds	r3, #4
 80086dc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	0c5b      	lsrs	r3, r3, #17
 80086e2:	f003 030f 	and.w	r3, r3, #15
 80086e6:	2b02      	cmp	r3, #2
 80086e8:	d124      	bne.n	8008734 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80086ea:	69ba      	ldr	r2, [r7, #24]
 80086ec:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80086f0:	4013      	ands	r3, r2
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d035      	beq.n	8008762 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80086fa:	69bb      	ldr	r3, [r7, #24]
 80086fc:	091b      	lsrs	r3, r3, #4
 80086fe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008700:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008704:	b29b      	uxth	r3, r3
 8008706:	461a      	mov	r2, r3
 8008708:	6a38      	ldr	r0, [r7, #32]
 800870a:	f00a fe47 	bl	801339c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	68da      	ldr	r2, [r3, #12]
 8008712:	69bb      	ldr	r3, [r7, #24]
 8008714:	091b      	lsrs	r3, r3, #4
 8008716:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800871a:	441a      	add	r2, r3
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008720:	697b      	ldr	r3, [r7, #20]
 8008722:	695a      	ldr	r2, [r3, #20]
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	091b      	lsrs	r3, r3, #4
 8008728:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800872c:	441a      	add	r2, r3
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	615a      	str	r2, [r3, #20]
 8008732:	e016      	b.n	8008762 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008734:	69bb      	ldr	r3, [r7, #24]
 8008736:	0c5b      	lsrs	r3, r3, #17
 8008738:	f003 030f 	and.w	r3, r3, #15
 800873c:	2b06      	cmp	r3, #6
 800873e:	d110      	bne.n	8008762 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008746:	2208      	movs	r2, #8
 8008748:	4619      	mov	r1, r3
 800874a:	6a38      	ldr	r0, [r7, #32]
 800874c:	f00a fe26 	bl	801339c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	695a      	ldr	r2, [r3, #20]
 8008754:	69bb      	ldr	r3, [r7, #24]
 8008756:	091b      	lsrs	r3, r3, #4
 8008758:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800875c:	441a      	add	r2, r3
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	699a      	ldr	r2, [r3, #24]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f042 0210 	orr.w	r2, r2, #16
 8008770:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4618      	mov	r0, r3
 8008778:	f00a ffa4 	bl	80136c4 <USB_ReadInterrupts>
 800877c:	4603      	mov	r3, r0
 800877e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008782:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008786:	f040 80a7 	bne.w	80088d8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800878a:	2300      	movs	r3, #0
 800878c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4618      	mov	r0, r3
 8008794:	f00a ffa9 	bl	80136ea <USB_ReadDevAllOutEpInterrupt>
 8008798:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800879a:	e099      	b.n	80088d0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	f000 808e 	beq.w	80088c4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ae:	b2d2      	uxtb	r2, r2
 80087b0:	4611      	mov	r1, r2
 80087b2:	4618      	mov	r0, r3
 80087b4:	f00a ffcd 	bl	8013752 <USB_ReadDevOutEPInterrupt>
 80087b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	f003 0301 	and.w	r3, r3, #1
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00c      	beq.n	80087de <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d0:	461a      	mov	r2, r3
 80087d2:	2301      	movs	r3, #1
 80087d4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80087d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fed1 	bl	8009580 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	f003 0308 	and.w	r3, r3, #8
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d00c      	beq.n	8008802 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80087e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ea:	015a      	lsls	r2, r3, #5
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	4413      	add	r3, r2
 80087f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f4:	461a      	mov	r2, r3
 80087f6:	2308      	movs	r3, #8
 80087f8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80087fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 ffa7 	bl	8009750 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	f003 0310 	and.w	r3, r3, #16
 8008808:	2b00      	cmp	r3, #0
 800880a:	d008      	beq.n	800881e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	015a      	lsls	r2, r3, #5
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	4413      	add	r3, r2
 8008814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008818:	461a      	mov	r2, r3
 800881a:	2310      	movs	r3, #16
 800881c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	f003 0302 	and.w	r3, r3, #2
 8008824:	2b00      	cmp	r3, #0
 8008826:	d030      	beq.n	800888a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	695b      	ldr	r3, [r3, #20]
 800882c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008830:	2b80      	cmp	r3, #128	; 0x80
 8008832:	d109      	bne.n	8008848 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	69fa      	ldr	r2, [r7, #28]
 800883e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008846:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800884a:	4613      	mov	r3, r2
 800884c:	00db      	lsls	r3, r3, #3
 800884e:	4413      	add	r3, r2
 8008850:	009b      	lsls	r3, r3, #2
 8008852:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008856:	687a      	ldr	r2, [r7, #4]
 8008858:	4413      	add	r3, r2
 800885a:	3304      	adds	r3, #4
 800885c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	78db      	ldrb	r3, [r3, #3]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d108      	bne.n	8008878 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	2200      	movs	r2, #0
 800886a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886e:	b2db      	uxtb	r3, r3
 8008870:	4619      	mov	r1, r3
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f010 fd60 	bl	8019338 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800887a:	015a      	lsls	r2, r3, #5
 800887c:	69fb      	ldr	r3, [r7, #28]
 800887e:	4413      	add	r3, r2
 8008880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008884:	461a      	mov	r2, r3
 8008886:	2302      	movs	r3, #2
 8008888:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	f003 0320 	and.w	r3, r3, #32
 8008890:	2b00      	cmp	r3, #0
 8008892:	d008      	beq.n	80088a6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	015a      	lsls	r2, r3, #5
 8008898:	69fb      	ldr	r3, [r7, #28]
 800889a:	4413      	add	r3, r2
 800889c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a0:	461a      	mov	r2, r3
 80088a2:	2320      	movs	r3, #32
 80088a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d009      	beq.n	80088c4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80088b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b2:	015a      	lsls	r2, r3, #5
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	4413      	add	r3, r2
 80088b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088bc:	461a      	mov	r2, r3
 80088be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80088c2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	3301      	adds	r3, #1
 80088c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80088ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088cc:	085b      	lsrs	r3, r3, #1
 80088ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80088d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	f47f af62 	bne.w	800879c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4618      	mov	r0, r3
 80088de:	f00a fef1 	bl	80136c4 <USB_ReadInterrupts>
 80088e2:	4603      	mov	r3, r0
 80088e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80088ec:	f040 80db 	bne.w	8008aa6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4618      	mov	r0, r3
 80088f6:	f00a ff12 	bl	801371e <USB_ReadDevAllInEpInterrupt>
 80088fa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80088fc:	2300      	movs	r3, #0
 80088fe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008900:	e0cd      	b.n	8008a9e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	2b00      	cmp	r3, #0
 800890a:	f000 80c2 	beq.w	8008a92 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008914:	b2d2      	uxtb	r2, r2
 8008916:	4611      	mov	r1, r2
 8008918:	4618      	mov	r0, r3
 800891a:	f00a ff38 	bl	801378e <USB_ReadDevInEPInterrupt>
 800891e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	f003 0301 	and.w	r3, r3, #1
 8008926:	2b00      	cmp	r3, #0
 8008928:	d057      	beq.n	80089da <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892c:	f003 030f 	and.w	r3, r3, #15
 8008930:	2201      	movs	r2, #1
 8008932:	fa02 f303 	lsl.w	r3, r2, r3
 8008936:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800893e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	43db      	mvns	r3, r3
 8008944:	69f9      	ldr	r1, [r7, #28]
 8008946:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800894a:	4013      	ands	r3, r2
 800894c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	4413      	add	r3, r2
 8008956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800895a:	461a      	mov	r2, r3
 800895c:	2301      	movs	r3, #1
 800895e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d132      	bne.n	80089ce <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008968:	6879      	ldr	r1, [r7, #4]
 800896a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800896c:	4613      	mov	r3, r2
 800896e:	00db      	lsls	r3, r3, #3
 8008970:	4413      	add	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	440b      	add	r3, r1
 8008976:	3348      	adds	r3, #72	; 0x48
 8008978:	6819      	ldr	r1, [r3, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800897e:	4613      	mov	r3, r2
 8008980:	00db      	lsls	r3, r3, #3
 8008982:	4413      	add	r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	4403      	add	r3, r0
 8008988:	3344      	adds	r3, #68	; 0x44
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4419      	add	r1, r3
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008992:	4613      	mov	r3, r2
 8008994:	00db      	lsls	r3, r3, #3
 8008996:	4413      	add	r3, r2
 8008998:	009b      	lsls	r3, r3, #2
 800899a:	4403      	add	r3, r0
 800899c:	3348      	adds	r3, #72	; 0x48
 800899e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d113      	bne.n	80089ce <HAL_PCD_IRQHandler+0x3a2>
 80089a6:	6879      	ldr	r1, [r7, #4]
 80089a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089aa:	4613      	mov	r3, r2
 80089ac:	00db      	lsls	r3, r3, #3
 80089ae:	4413      	add	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	440b      	add	r3, r1
 80089b4:	334c      	adds	r3, #76	; 0x4c
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d108      	bne.n	80089ce <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6818      	ldr	r0, [r3, #0]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80089c6:	461a      	mov	r2, r3
 80089c8:	2101      	movs	r1, #1
 80089ca:	f00a ff41 	bl	8013850 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80089ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	4619      	mov	r1, r3
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f010 fc2a 	bl	801922e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	f003 0308 	and.w	r3, r3, #8
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d008      	beq.n	80089f6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80089e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089e6:	015a      	lsls	r2, r3, #5
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	4413      	add	r3, r2
 80089ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f0:	461a      	mov	r2, r3
 80089f2:	2308      	movs	r3, #8
 80089f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	f003 0310 	and.w	r3, r3, #16
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d008      	beq.n	8008a12 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a02:	015a      	lsls	r2, r3, #5
 8008a04:	69fb      	ldr	r3, [r7, #28]
 8008a06:	4413      	add	r3, r2
 8008a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	2310      	movs	r3, #16
 8008a10:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d008      	beq.n	8008a2e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a28:	461a      	mov	r2, r3
 8008a2a:	2340      	movs	r3, #64	; 0x40
 8008a2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	f003 0302 	and.w	r3, r3, #2
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d023      	beq.n	8008a80 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008a38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a3a:	6a38      	ldr	r0, [r7, #32]
 8008a3c:	f009 ff20 	bl	8012880 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008a40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a42:	4613      	mov	r3, r2
 8008a44:	00db      	lsls	r3, r3, #3
 8008a46:	4413      	add	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	3338      	adds	r3, #56	; 0x38
 8008a4c:	687a      	ldr	r2, [r7, #4]
 8008a4e:	4413      	add	r3, r2
 8008a50:	3304      	adds	r3, #4
 8008a52:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	78db      	ldrb	r3, [r3, #3]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d108      	bne.n	8008a6e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f010 fc77 	bl	801935c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a70:	015a      	lsls	r2, r3, #5
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	4413      	add	r3, r2
 8008a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d003      	beq.n	8008a92 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008a8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	f000 fcea 	bl	8009466 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a94:	3301      	adds	r3, #1
 8008a96:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9a:	085b      	lsrs	r3, r3, #1
 8008a9c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	f47f af2e 	bne.w	8008902 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f00a fe0a 	bl	80136c4 <USB_ReadInterrupts>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ab6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008aba:	d122      	bne.n	8008b02 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	69fa      	ldr	r2, [r7, #28]
 8008ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008aca:	f023 0301 	bic.w	r3, r3, #1
 8008ace:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d108      	bne.n	8008aec <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008ae2:	2100      	movs	r1, #0
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fef5 	bl	80098d4 <HAL_PCDEx_LPM_Callback>
 8008aea:	e002      	b.n	8008af2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f010 fc15 	bl	801931c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	695a      	ldr	r2, [r3, #20]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4618      	mov	r0, r3
 8008b08:	f00a fddc 	bl	80136c4 <USB_ReadInterrupts>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008b16:	d112      	bne.n	8008b3e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f003 0301 	and.w	r3, r3, #1
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d102      	bne.n	8008b2e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f010 fbd1 	bl	80192d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	695a      	ldr	r2, [r3, #20]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008b3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f00a fdbe 	bl	80136c4 <USB_ReadInterrupts>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b52:	d121      	bne.n	8008b98 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	695a      	ldr	r2, [r3, #20]
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008b62:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d111      	bne.n	8008b92 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b7c:	089b      	lsrs	r3, r3, #2
 8008b7e:	f003 020f 	and.w	r2, r3, #15
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008b88:	2101      	movs	r1, #1
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fea2 	bl	80098d4 <HAL_PCDEx_LPM_Callback>
 8008b90:	e002      	b.n	8008b98 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f010 fb9c 	bl	80192d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f00a fd91 	bl	80136c4 <USB_ReadInterrupts>
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bac:	f040 80b7 	bne.w	8008d1e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	69fa      	ldr	r2, [r7, #28]
 8008bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008bbe:	f023 0301 	bic.w	r3, r3, #1
 8008bc2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	2110      	movs	r1, #16
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f009 fe58 	bl	8012880 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008bd4:	e046      	b.n	8008c64 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bd8:	015a      	lsls	r2, r3, #5
 8008bda:	69fb      	ldr	r3, [r7, #28]
 8008bdc:	4413      	add	r3, r2
 8008bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be2:	461a      	mov	r2, r3
 8008be4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008be8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bec:	015a      	lsls	r2, r3, #5
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bfa:	0151      	lsls	r1, r2, #5
 8008bfc:	69fa      	ldr	r2, [r7, #28]
 8008bfe:	440a      	add	r2, r1
 8008c00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c08:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c0c:	015a      	lsls	r2, r3, #5
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c16:	461a      	mov	r2, r3
 8008c18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c1c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c20:	015a      	lsls	r2, r3, #5
 8008c22:	69fb      	ldr	r3, [r7, #28]
 8008c24:	4413      	add	r3, r2
 8008c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c2e:	0151      	lsls	r1, r2, #5
 8008c30:	69fa      	ldr	r2, [r7, #28]
 8008c32:	440a      	add	r2, r1
 8008c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c3c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c40:	015a      	lsls	r2, r3, #5
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	4413      	add	r3, r2
 8008c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c4e:	0151      	lsls	r1, r2, #5
 8008c50:	69fa      	ldr	r2, [r7, #28]
 8008c52:	440a      	add	r2, r1
 8008c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c58:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c5c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c60:	3301      	adds	r3, #1
 8008c62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d3b3      	bcc.n	8008bd6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008c6e:	69fb      	ldr	r3, [r7, #28]
 8008c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	69fa      	ldr	r2, [r7, #28]
 8008c78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c7c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008c80:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d016      	beq.n	8008cb8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008c94:	69fa      	ldr	r2, [r7, #28]
 8008c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c9a:	f043 030b 	orr.w	r3, r3, #11
 8008c9e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008ca2:	69fb      	ldr	r3, [r7, #28]
 8008ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008caa:	69fa      	ldr	r2, [r7, #28]
 8008cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cb0:	f043 030b 	orr.w	r3, r3, #11
 8008cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8008cb6:	e015      	b.n	8008ce4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008cb8:	69fb      	ldr	r3, [r7, #28]
 8008cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cbe:	695a      	ldr	r2, [r3, #20]
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	f242 032b 	movw	r3, #8235	; 0x202b
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	69fa      	ldr	r2, [r7, #28]
 8008cda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cde:	f043 030b 	orr.w	r3, r3, #11
 8008ce2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	69fa      	ldr	r2, [r7, #28]
 8008cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cf2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008cf6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	6818      	ldr	r0, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	68db      	ldr	r3, [r3, #12]
 8008d00:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008d08:	461a      	mov	r2, r3
 8008d0a:	f00a fda1 	bl	8013850 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	695a      	ldr	r2, [r3, #20]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008d1c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	4618      	mov	r0, r3
 8008d24:	f00a fcce 	bl	80136c4 <USB_ReadInterrupts>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d32:	d124      	bne.n	8008d7e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f00a fd65 	bl	8013808 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	4618      	mov	r0, r3
 8008d44:	f009 fe19 	bl	801297a <USB_GetDevSpeed>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681c      	ldr	r4, [r3, #0]
 8008d54:	f001 fd88 	bl	800a868 <HAL_RCC_GetHCLKFreq>
 8008d58:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	461a      	mov	r2, r3
 8008d62:	4620      	mov	r0, r4
 8008d64:	f009 fb1e 	bl	80123a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008d68:	6878      	ldr	r0, [r7, #4]
 8008d6a:	f010 fa88 	bl	801927e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	695a      	ldr	r2, [r3, #20]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008d7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f00a fc9e 	bl	80136c4 <USB_ReadInterrupts>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	f003 0308 	and.w	r3, r3, #8
 8008d8e:	2b08      	cmp	r3, #8
 8008d90:	d10a      	bne.n	8008da8 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f010 fa65 	bl	8019262 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	695a      	ldr	r2, [r3, #20]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f002 0208 	and.w	r2, r2, #8
 8008da6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4618      	mov	r0, r3
 8008dae:	f00a fc89 	bl	80136c4 <USB_ReadInterrupts>
 8008db2:	4603      	mov	r3, r0
 8008db4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008db8:	2b80      	cmp	r3, #128	; 0x80
 8008dba:	d122      	bne.n	8008e02 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008dbc:	6a3b      	ldr	r3, [r7, #32]
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008dc4:	6a3b      	ldr	r3, [r7, #32]
 8008dc6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008dc8:	2301      	movs	r3, #1
 8008dca:	627b      	str	r3, [r7, #36]	; 0x24
 8008dcc:	e014      	b.n	8008df8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008dce:	6879      	ldr	r1, [r7, #4]
 8008dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	00db      	lsls	r3, r3, #3
 8008dd6:	4413      	add	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	440b      	add	r3, r1
 8008ddc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d105      	bne.n	8008df2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de8:	b2db      	uxtb	r3, r3
 8008dea:	4619      	mov	r1, r3
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 fb09 	bl	8009404 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df4:	3301      	adds	r3, #1
 8008df6:	627b      	str	r3, [r7, #36]	; 0x24
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d3e5      	bcc.n	8008dce <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4618      	mov	r0, r3
 8008e08:	f00a fc5c 	bl	80136c4 <USB_ReadInterrupts>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e16:	d13b      	bne.n	8008e90 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e18:	2301      	movs	r3, #1
 8008e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e1c:	e02b      	b.n	8008e76 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e20:	015a      	lsls	r2, r3, #5
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	4413      	add	r3, r2
 8008e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e2e:	6879      	ldr	r1, [r7, #4]
 8008e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e32:	4613      	mov	r3, r2
 8008e34:	00db      	lsls	r3, r3, #3
 8008e36:	4413      	add	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	440b      	add	r3, r1
 8008e3c:	3340      	adds	r3, #64	; 0x40
 8008e3e:	781b      	ldrb	r3, [r3, #0]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d115      	bne.n	8008e70 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008e44:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	da12      	bge.n	8008e70 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008e4a:	6879      	ldr	r1, [r7, #4]
 8008e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e4e:	4613      	mov	r3, r2
 8008e50:	00db      	lsls	r3, r3, #3
 8008e52:	4413      	add	r3, r2
 8008e54:	009b      	lsls	r3, r3, #2
 8008e56:	440b      	add	r3, r1
 8008e58:	333f      	adds	r3, #63	; 0x3f
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 faca 	bl	8009404 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e72:	3301      	adds	r3, #1
 8008e74:	627b      	str	r3, [r7, #36]	; 0x24
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d3ce      	bcc.n	8008e1e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	695a      	ldr	r2, [r3, #20]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008e8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f00a fc15 	bl	80136c4 <USB_ReadInterrupts>
 8008e9a:	4603      	mov	r3, r0
 8008e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ea0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ea4:	d155      	bne.n	8008f52 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8008eaa:	e045      	b.n	8008f38 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eae:	015a      	lsls	r2, r3, #5
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	4413      	add	r3, r2
 8008eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008ebc:	6879      	ldr	r1, [r7, #4]
 8008ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	00db      	lsls	r3, r3, #3
 8008ec4:	4413      	add	r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	440b      	add	r3, r1
 8008eca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008ece:	781b      	ldrb	r3, [r3, #0]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d12e      	bne.n	8008f32 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008ed4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	da2b      	bge.n	8008f32 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008ee6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008eea:	429a      	cmp	r2, r3
 8008eec:	d121      	bne.n	8008f32 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008eee:	6879      	ldr	r1, [r7, #4]
 8008ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ef2:	4613      	mov	r3, r2
 8008ef4:	00db      	lsls	r3, r3, #3
 8008ef6:	4413      	add	r3, r2
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	440b      	add	r3, r1
 8008efc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008f00:	2201      	movs	r2, #1
 8008f02:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008f04:	6a3b      	ldr	r3, [r7, #32]
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008f0c:	6a3b      	ldr	r3, [r7, #32]
 8008f0e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008f10:	6a3b      	ldr	r3, [r7, #32]
 8008f12:	695b      	ldr	r3, [r3, #20]
 8008f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d10a      	bne.n	8008f32 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	69fa      	ldr	r2, [r7, #28]
 8008f26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008f2e:	6053      	str	r3, [r2, #4]
            break;
 8008f30:	e007      	b.n	8008f42 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f34:	3301      	adds	r3, #1
 8008f36:	627b      	str	r3, [r7, #36]	; 0x24
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f3e:	429a      	cmp	r2, r3
 8008f40:	d3b4      	bcc.n	8008eac <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	695a      	ldr	r2, [r3, #20]
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008f50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4618      	mov	r0, r3
 8008f58:	f00a fbb4 	bl	80136c4 <USB_ReadInterrupts>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f66:	d10a      	bne.n	8008f7e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f010 fa09 	bl	8019380 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	695a      	ldr	r2, [r3, #20]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008f7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4618      	mov	r0, r3
 8008f84:	f00a fb9e 	bl	80136c4 <USB_ReadInterrupts>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	f003 0304 	and.w	r3, r3, #4
 8008f8e:	2b04      	cmp	r3, #4
 8008f90:	d115      	bne.n	8008fbe <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	685b      	ldr	r3, [r3, #4]
 8008f98:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008f9a:	69bb      	ldr	r3, [r7, #24]
 8008f9c:	f003 0304 	and.w	r3, r3, #4
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d002      	beq.n	8008faa <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f010 f9f9 	bl	801939c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	6859      	ldr	r1, [r3, #4]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	69ba      	ldr	r2, [r7, #24]
 8008fb6:	430a      	orrs	r2, r1
 8008fb8:	605a      	str	r2, [r3, #4]
 8008fba:	e000      	b.n	8008fbe <HAL_PCD_IRQHandler+0x992>
      return;
 8008fbc:	bf00      	nop
    }
  }
}
 8008fbe:	3734      	adds	r7, #52	; 0x34
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd90      	pop	{r4, r7, pc}

08008fc4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	460b      	mov	r3, r1
 8008fce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008fd6:	2b01      	cmp	r3, #1
 8008fd8:	d101      	bne.n	8008fde <HAL_PCD_SetAddress+0x1a>
 8008fda:	2302      	movs	r3, #2
 8008fdc:	e013      	b.n	8009006 <HAL_PCD_SetAddress+0x42>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2201      	movs	r2, #1
 8008fe2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	78fa      	ldrb	r2, [r7, #3]
 8008fea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	78fa      	ldrb	r2, [r7, #3]
 8008ff4:	4611      	mov	r1, r2
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f00a fafc 	bl	80135f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}

0800900e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800900e:	b580      	push	{r7, lr}
 8009010:	b084      	sub	sp, #16
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
 8009016:	4608      	mov	r0, r1
 8009018:	4611      	mov	r1, r2
 800901a:	461a      	mov	r2, r3
 800901c:	4603      	mov	r3, r0
 800901e:	70fb      	strb	r3, [r7, #3]
 8009020:	460b      	mov	r3, r1
 8009022:	803b      	strh	r3, [r7, #0]
 8009024:	4613      	mov	r3, r2
 8009026:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009028:	2300      	movs	r3, #0
 800902a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800902c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009030:	2b00      	cmp	r3, #0
 8009032:	da0f      	bge.n	8009054 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009034:	78fb      	ldrb	r3, [r7, #3]
 8009036:	f003 020f 	and.w	r2, r3, #15
 800903a:	4613      	mov	r3, r2
 800903c:	00db      	lsls	r3, r3, #3
 800903e:	4413      	add	r3, r2
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	3338      	adds	r3, #56	; 0x38
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	4413      	add	r3, r2
 8009048:	3304      	adds	r3, #4
 800904a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2201      	movs	r2, #1
 8009050:	705a      	strb	r2, [r3, #1]
 8009052:	e00f      	b.n	8009074 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009054:	78fb      	ldrb	r3, [r7, #3]
 8009056:	f003 020f 	and.w	r2, r3, #15
 800905a:	4613      	mov	r3, r2
 800905c:	00db      	lsls	r3, r3, #3
 800905e:	4413      	add	r3, r2
 8009060:	009b      	lsls	r3, r3, #2
 8009062:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	4413      	add	r3, r2
 800906a:	3304      	adds	r3, #4
 800906c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	2200      	movs	r2, #0
 8009072:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009074:	78fb      	ldrb	r3, [r7, #3]
 8009076:	f003 030f 	and.w	r3, r3, #15
 800907a:	b2da      	uxtb	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009080:	883a      	ldrh	r2, [r7, #0]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	78ba      	ldrb	r2, [r7, #2]
 800908a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	785b      	ldrb	r3, [r3, #1]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d004      	beq.n	800909e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	b29a      	uxth	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800909e:	78bb      	ldrb	r3, [r7, #2]
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d102      	bne.n	80090aa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d101      	bne.n	80090b8 <HAL_PCD_EP_Open+0xaa>
 80090b4:	2302      	movs	r3, #2
 80090b6:	e00e      	b.n	80090d6 <HAL_PCD_EP_Open+0xc8>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2201      	movs	r2, #1
 80090bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68f9      	ldr	r1, [r7, #12]
 80090c6:	4618      	mov	r0, r3
 80090c8:	f009 fc7c 	bl	80129c4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80090d4:	7afb      	ldrb	r3, [r7, #11]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}

080090de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80090de:	b580      	push	{r7, lr}
 80090e0:	b084      	sub	sp, #16
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	6078      	str	r0, [r7, #4]
 80090e6:	460b      	mov	r3, r1
 80090e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80090ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	da0f      	bge.n	8009112 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090f2:	78fb      	ldrb	r3, [r7, #3]
 80090f4:	f003 020f 	and.w	r2, r3, #15
 80090f8:	4613      	mov	r3, r2
 80090fa:	00db      	lsls	r3, r3, #3
 80090fc:	4413      	add	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	3338      	adds	r3, #56	; 0x38
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	4413      	add	r3, r2
 8009106:	3304      	adds	r3, #4
 8009108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	2201      	movs	r2, #1
 800910e:	705a      	strb	r2, [r3, #1]
 8009110:	e00f      	b.n	8009132 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009112:	78fb      	ldrb	r3, [r7, #3]
 8009114:	f003 020f 	and.w	r2, r3, #15
 8009118:	4613      	mov	r3, r2
 800911a:	00db      	lsls	r3, r3, #3
 800911c:	4413      	add	r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	4413      	add	r3, r2
 8009128:	3304      	adds	r3, #4
 800912a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2200      	movs	r2, #0
 8009130:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009132:	78fb      	ldrb	r3, [r7, #3]
 8009134:	f003 030f 	and.w	r3, r3, #15
 8009138:	b2da      	uxtb	r2, r3
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009144:	2b01      	cmp	r3, #1
 8009146:	d101      	bne.n	800914c <HAL_PCD_EP_Close+0x6e>
 8009148:	2302      	movs	r3, #2
 800914a:	e00e      	b.n	800916a <HAL_PCD_EP_Close+0x8c>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	68f9      	ldr	r1, [r7, #12]
 800915a:	4618      	mov	r0, r3
 800915c:	f009 fcba 	bl	8012ad4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2200      	movs	r2, #0
 8009164:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009168:	2300      	movs	r3, #0
}
 800916a:	4618      	mov	r0, r3
 800916c:	3710      	adds	r7, #16
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}

08009172 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b086      	sub	sp, #24
 8009176:	af00      	add	r7, sp, #0
 8009178:	60f8      	str	r0, [r7, #12]
 800917a:	607a      	str	r2, [r7, #4]
 800917c:	603b      	str	r3, [r7, #0]
 800917e:	460b      	mov	r3, r1
 8009180:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009182:	7afb      	ldrb	r3, [r7, #11]
 8009184:	f003 020f 	and.w	r2, r3, #15
 8009188:	4613      	mov	r3, r2
 800918a:	00db      	lsls	r3, r3, #3
 800918c:	4413      	add	r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009194:	68fa      	ldr	r2, [r7, #12]
 8009196:	4413      	add	r3, r2
 8009198:	3304      	adds	r3, #4
 800919a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	687a      	ldr	r2, [r7, #4]
 80091a0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80091a2:	697b      	ldr	r3, [r7, #20]
 80091a4:	683a      	ldr	r2, [r7, #0]
 80091a6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	2200      	movs	r2, #0
 80091ac:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2200      	movs	r2, #0
 80091b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80091b4:	7afb      	ldrb	r3, [r7, #11]
 80091b6:	f003 030f 	and.w	r3, r3, #15
 80091ba:	b2da      	uxtb	r2, r3
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d102      	bne.n	80091ce <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6818      	ldr	r0, [r3, #0]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	461a      	mov	r2, r3
 80091da:	6979      	ldr	r1, [r7, #20]
 80091dc:	f009 fd56 	bl	8012c8c <USB_EPStartXfer>

  return HAL_OK;
 80091e0:	2300      	movs	r3, #0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3718      	adds	r7, #24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80091ea:	b480      	push	{r7}
 80091ec:	b083      	sub	sp, #12
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
 80091f2:	460b      	mov	r3, r1
 80091f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80091f6:	78fb      	ldrb	r3, [r7, #3]
 80091f8:	f003 020f 	and.w	r2, r3, #15
 80091fc:	6879      	ldr	r1, [r7, #4]
 80091fe:	4613      	mov	r3, r2
 8009200:	00db      	lsls	r3, r3, #3
 8009202:	4413      	add	r3, r2
 8009204:	009b      	lsls	r3, r3, #2
 8009206:	440b      	add	r3, r1
 8009208:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800920c:	681b      	ldr	r3, [r3, #0]
}
 800920e:	4618      	mov	r0, r3
 8009210:	370c      	adds	r7, #12
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr

0800921a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b086      	sub	sp, #24
 800921e:	af00      	add	r7, sp, #0
 8009220:	60f8      	str	r0, [r7, #12]
 8009222:	607a      	str	r2, [r7, #4]
 8009224:	603b      	str	r3, [r7, #0]
 8009226:	460b      	mov	r3, r1
 8009228:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800922a:	7afb      	ldrb	r3, [r7, #11]
 800922c:	f003 020f 	and.w	r2, r3, #15
 8009230:	4613      	mov	r3, r2
 8009232:	00db      	lsls	r3, r3, #3
 8009234:	4413      	add	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	3338      	adds	r3, #56	; 0x38
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	4413      	add	r3, r2
 800923e:	3304      	adds	r3, #4
 8009240:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	2200      	movs	r2, #0
 8009252:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	2201      	movs	r2, #1
 8009258:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800925a:	7afb      	ldrb	r3, [r7, #11]
 800925c:	f003 030f 	and.w	r3, r3, #15
 8009260:	b2da      	uxtb	r2, r3
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	68db      	ldr	r3, [r3, #12]
 800926a:	2b01      	cmp	r3, #1
 800926c:	d102      	bne.n	8009274 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	6818      	ldr	r0, [r3, #0]
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	68db      	ldr	r3, [r3, #12]
 800927c:	b2db      	uxtb	r3, r3
 800927e:	461a      	mov	r2, r3
 8009280:	6979      	ldr	r1, [r7, #20]
 8009282:	f009 fd03 	bl	8012c8c <USB_EPStartXfer>

  return HAL_OK;
 8009286:	2300      	movs	r3, #0
}
 8009288:	4618      	mov	r0, r3
 800928a:	3718      	adds	r7, #24
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b084      	sub	sp, #16
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	460b      	mov	r3, r1
 800929a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800929c:	78fb      	ldrb	r3, [r7, #3]
 800929e:	f003 020f 	and.w	r2, r3, #15
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d901      	bls.n	80092ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80092aa:	2301      	movs	r3, #1
 80092ac:	e050      	b.n	8009350 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80092ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	da0f      	bge.n	80092d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092b6:	78fb      	ldrb	r3, [r7, #3]
 80092b8:	f003 020f 	and.w	r2, r3, #15
 80092bc:	4613      	mov	r3, r2
 80092be:	00db      	lsls	r3, r3, #3
 80092c0:	4413      	add	r3, r2
 80092c2:	009b      	lsls	r3, r3, #2
 80092c4:	3338      	adds	r3, #56	; 0x38
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	4413      	add	r3, r2
 80092ca:	3304      	adds	r3, #4
 80092cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	2201      	movs	r2, #1
 80092d2:	705a      	strb	r2, [r3, #1]
 80092d4:	e00d      	b.n	80092f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80092d6:	78fa      	ldrb	r2, [r7, #3]
 80092d8:	4613      	mov	r3, r2
 80092da:	00db      	lsls	r3, r3, #3
 80092dc:	4413      	add	r3, r2
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	4413      	add	r3, r2
 80092e8:	3304      	adds	r3, #4
 80092ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2200      	movs	r2, #0
 80092f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2201      	movs	r2, #1
 80092f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80092f8:	78fb      	ldrb	r3, [r7, #3]
 80092fa:	f003 030f 	and.w	r3, r3, #15
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800930a:	2b01      	cmp	r3, #1
 800930c:	d101      	bne.n	8009312 <HAL_PCD_EP_SetStall+0x82>
 800930e:	2302      	movs	r3, #2
 8009310:	e01e      	b.n	8009350 <HAL_PCD_EP_SetStall+0xc0>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68f9      	ldr	r1, [r7, #12]
 8009320:	4618      	mov	r0, r3
 8009322:	f00a f893 	bl	801344c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009326:	78fb      	ldrb	r3, [r7, #3]
 8009328:	f003 030f 	and.w	r3, r3, #15
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10a      	bne.n	8009346 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6818      	ldr	r0, [r3, #0]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	68db      	ldr	r3, [r3, #12]
 8009338:	b2d9      	uxtb	r1, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009340:	461a      	mov	r2, r3
 8009342:	f00a fa85 	bl	8013850 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
 8009360:	460b      	mov	r3, r1
 8009362:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009364:	78fb      	ldrb	r3, [r7, #3]
 8009366:	f003 020f 	and.w	r2, r3, #15
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	429a      	cmp	r2, r3
 8009370:	d901      	bls.n	8009376 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009372:	2301      	movs	r3, #1
 8009374:	e042      	b.n	80093fc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009376:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800937a:	2b00      	cmp	r3, #0
 800937c:	da0f      	bge.n	800939e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800937e:	78fb      	ldrb	r3, [r7, #3]
 8009380:	f003 020f 	and.w	r2, r3, #15
 8009384:	4613      	mov	r3, r2
 8009386:	00db      	lsls	r3, r3, #3
 8009388:	4413      	add	r3, r2
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	3338      	adds	r3, #56	; 0x38
 800938e:	687a      	ldr	r2, [r7, #4]
 8009390:	4413      	add	r3, r2
 8009392:	3304      	adds	r3, #4
 8009394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2201      	movs	r2, #1
 800939a:	705a      	strb	r2, [r3, #1]
 800939c:	e00f      	b.n	80093be <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800939e:	78fb      	ldrb	r3, [r7, #3]
 80093a0:	f003 020f 	and.w	r2, r3, #15
 80093a4:	4613      	mov	r3, r2
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	4413      	add	r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	4413      	add	r3, r2
 80093b4:	3304      	adds	r3, #4
 80093b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	2200      	movs	r2, #0
 80093bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80093c4:	78fb      	ldrb	r3, [r7, #3]
 80093c6:	f003 030f 	and.w	r3, r3, #15
 80093ca:	b2da      	uxtb	r2, r3
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80093d6:	2b01      	cmp	r3, #1
 80093d8:	d101      	bne.n	80093de <HAL_PCD_EP_ClrStall+0x86>
 80093da:	2302      	movs	r3, #2
 80093dc:	e00e      	b.n	80093fc <HAL_PCD_EP_ClrStall+0xa4>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2201      	movs	r2, #1
 80093e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68f9      	ldr	r1, [r7, #12]
 80093ec:	4618      	mov	r0, r3
 80093ee:	f00a f89b 	bl	8013528 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80093fa:	2300      	movs	r3, #0
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	3710      	adds	r7, #16
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}

08009404 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b084      	sub	sp, #16
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
 800940c:	460b      	mov	r3, r1
 800940e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009410:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009414:	2b00      	cmp	r3, #0
 8009416:	da0c      	bge.n	8009432 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009418:	78fb      	ldrb	r3, [r7, #3]
 800941a:	f003 020f 	and.w	r2, r3, #15
 800941e:	4613      	mov	r3, r2
 8009420:	00db      	lsls	r3, r3, #3
 8009422:	4413      	add	r3, r2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	3338      	adds	r3, #56	; 0x38
 8009428:	687a      	ldr	r2, [r7, #4]
 800942a:	4413      	add	r3, r2
 800942c:	3304      	adds	r3, #4
 800942e:	60fb      	str	r3, [r7, #12]
 8009430:	e00c      	b.n	800944c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009432:	78fb      	ldrb	r3, [r7, #3]
 8009434:	f003 020f 	and.w	r2, r3, #15
 8009438:	4613      	mov	r3, r2
 800943a:	00db      	lsls	r3, r3, #3
 800943c:	4413      	add	r3, r2
 800943e:	009b      	lsls	r3, r3, #2
 8009440:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	4413      	add	r3, r2
 8009448:	3304      	adds	r3, #4
 800944a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	68f9      	ldr	r1, [r7, #12]
 8009452:	4618      	mov	r0, r3
 8009454:	f009 feba 	bl	80131cc <USB_EPStopXfer>
 8009458:	4603      	mov	r3, r0
 800945a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800945c:	7afb      	ldrb	r3, [r7, #11]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b08a      	sub	sp, #40	; 0x28
 800946a:	af02      	add	r7, sp, #8
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	4613      	mov	r3, r2
 800947e:	00db      	lsls	r3, r3, #3
 8009480:	4413      	add	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	3338      	adds	r3, #56	; 0x38
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	4413      	add	r3, r2
 800948a:	3304      	adds	r3, #4
 800948c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	695a      	ldr	r2, [r3, #20]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	691b      	ldr	r3, [r3, #16]
 8009496:	429a      	cmp	r2, r3
 8009498:	d901      	bls.n	800949e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800949a:	2301      	movs	r3, #1
 800949c:	e06c      	b.n	8009578 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	691a      	ldr	r2, [r3, #16]
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	695b      	ldr	r3, [r3, #20]
 80094a6:	1ad3      	subs	r3, r2, r3
 80094a8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	69fa      	ldr	r2, [r7, #28]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d902      	bls.n	80094ba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	689b      	ldr	r3, [r3, #8]
 80094b8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80094ba:	69fb      	ldr	r3, [r7, #28]
 80094bc:	3303      	adds	r3, #3
 80094be:	089b      	lsrs	r3, r3, #2
 80094c0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80094c2:	e02b      	b.n	800951c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	691a      	ldr	r2, [r3, #16]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	1ad3      	subs	r3, r2, r3
 80094ce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	69fa      	ldr	r2, [r7, #28]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d902      	bls.n	80094e0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80094e0:	69fb      	ldr	r3, [r7, #28]
 80094e2:	3303      	adds	r3, #3
 80094e4:	089b      	lsrs	r3, r3, #2
 80094e6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	68d9      	ldr	r1, [r3, #12]
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	69fb      	ldr	r3, [r7, #28]
 80094f2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80094f8:	b2db      	uxtb	r3, r3
 80094fa:	9300      	str	r3, [sp, #0]
 80094fc:	4603      	mov	r3, r0
 80094fe:	6978      	ldr	r0, [r7, #20]
 8009500:	f009 ff0e 	bl	8013320 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	68da      	ldr	r2, [r3, #12]
 8009508:	69fb      	ldr	r3, [r7, #28]
 800950a:	441a      	add	r2, r3
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	695a      	ldr	r2, [r3, #20]
 8009514:	69fb      	ldr	r3, [r7, #28]
 8009516:	441a      	add	r2, r3
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	015a      	lsls	r2, r3, #5
 8009520:	693b      	ldr	r3, [r7, #16]
 8009522:	4413      	add	r3, r2
 8009524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009528:	699b      	ldr	r3, [r3, #24]
 800952a:	b29b      	uxth	r3, r3
 800952c:	69ba      	ldr	r2, [r7, #24]
 800952e:	429a      	cmp	r2, r3
 8009530:	d809      	bhi.n	8009546 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	695a      	ldr	r2, [r3, #20]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800953a:	429a      	cmp	r2, r3
 800953c:	d203      	bcs.n	8009546 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	691b      	ldr	r3, [r3, #16]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1be      	bne.n	80094c4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	691a      	ldr	r2, [r3, #16]
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	695b      	ldr	r3, [r3, #20]
 800954e:	429a      	cmp	r2, r3
 8009550:	d811      	bhi.n	8009576 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	f003 030f 	and.w	r3, r3, #15
 8009558:	2201      	movs	r2, #1
 800955a:	fa02 f303 	lsl.w	r3, r2, r3
 800955e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	43db      	mvns	r3, r3
 800956c:	6939      	ldr	r1, [r7, #16]
 800956e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009572:	4013      	ands	r3, r2
 8009574:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009576:	2300      	movs	r3, #0
}
 8009578:	4618      	mov	r0, r3
 800957a:	3720      	adds	r7, #32
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b088      	sub	sp, #32
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	333c      	adds	r3, #60	; 0x3c
 8009598:	3304      	adds	r3, #4
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	015a      	lsls	r2, r3, #5
 80095a2:	69bb      	ldr	r3, [r7, #24]
 80095a4:	4413      	add	r3, r2
 80095a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095aa:	689b      	ldr	r3, [r3, #8]
 80095ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d17b      	bne.n	80096ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	f003 0308 	and.w	r3, r3, #8
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d015      	beq.n	80095ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	4a61      	ldr	r2, [pc, #388]	; (8009748 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	f240 80b9 	bls.w	800973c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f000 80b3 	beq.w	800973c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	015a      	lsls	r2, r3, #5
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	4413      	add	r3, r2
 80095de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e2:	461a      	mov	r2, r3
 80095e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095e8:	6093      	str	r3, [r2, #8]
 80095ea:	e0a7      	b.n	800973c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80095ec:	693b      	ldr	r3, [r7, #16]
 80095ee:	f003 0320 	and.w	r3, r3, #32
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d009      	beq.n	800960a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80095f6:	683b      	ldr	r3, [r7, #0]
 80095f8:	015a      	lsls	r2, r3, #5
 80095fa:	69bb      	ldr	r3, [r7, #24]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009602:	461a      	mov	r2, r3
 8009604:	2320      	movs	r3, #32
 8009606:	6093      	str	r3, [r2, #8]
 8009608:	e098      	b.n	800973c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009610:	2b00      	cmp	r3, #0
 8009612:	f040 8093 	bne.w	800973c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	4a4b      	ldr	r2, [pc, #300]	; (8009748 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d90f      	bls.n	800963e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800961e:	693b      	ldr	r3, [r7, #16]
 8009620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00a      	beq.n	800963e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	015a      	lsls	r2, r3, #5
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	4413      	add	r3, r2
 8009630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009634:	461a      	mov	r2, r3
 8009636:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800963a:	6093      	str	r3, [r2, #8]
 800963c:	e07e      	b.n	800973c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	4613      	mov	r3, r2
 8009642:	00db      	lsls	r3, r3, #3
 8009644:	4413      	add	r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	4413      	add	r3, r2
 8009650:	3304      	adds	r3, #4
 8009652:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6a1a      	ldr	r2, [r3, #32]
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	0159      	lsls	r1, r3, #5
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	440b      	add	r3, r1
 8009660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009664:	691b      	ldr	r3, [r3, #16]
 8009666:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800966a:	1ad2      	subs	r2, r2, r3
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d114      	bne.n	80096a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	691b      	ldr	r3, [r3, #16]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d109      	bne.n	8009692 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6818      	ldr	r0, [r3, #0]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009688:	461a      	mov	r2, r3
 800968a:	2101      	movs	r1, #1
 800968c:	f00a f8e0 	bl	8013850 <USB_EP0_OutStart>
 8009690:	e006      	b.n	80096a0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	68da      	ldr	r2, [r3, #12]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	695b      	ldr	r3, [r3, #20]
 800969a:	441a      	add	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	4619      	mov	r1, r3
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f00f fda6 	bl	80191f8 <HAL_PCD_DataOutStageCallback>
 80096ac:	e046      	b.n	800973c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	4a26      	ldr	r2, [pc, #152]	; (800974c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d124      	bne.n	8009700 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00a      	beq.n	80096d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	015a      	lsls	r2, r3, #5
 80096c4:	69bb      	ldr	r3, [r7, #24]
 80096c6:	4413      	add	r3, r2
 80096c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096cc:	461a      	mov	r2, r3
 80096ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096d2:	6093      	str	r3, [r2, #8]
 80096d4:	e032      	b.n	800973c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	f003 0320 	and.w	r3, r3, #32
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d008      	beq.n	80096f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	015a      	lsls	r2, r3, #5
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	4413      	add	r3, r2
 80096e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096ec:	461a      	mov	r2, r3
 80096ee:	2320      	movs	r3, #32
 80096f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	b2db      	uxtb	r3, r3
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f00f fd7d 	bl	80191f8 <HAL_PCD_DataOutStageCallback>
 80096fe:	e01d      	b.n	800973c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d114      	bne.n	8009730 <PCD_EP_OutXfrComplete_int+0x1b0>
 8009706:	6879      	ldr	r1, [r7, #4]
 8009708:	683a      	ldr	r2, [r7, #0]
 800970a:	4613      	mov	r3, r2
 800970c:	00db      	lsls	r3, r3, #3
 800970e:	4413      	add	r3, r2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	440b      	add	r3, r1
 8009714:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d108      	bne.n	8009730 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6818      	ldr	r0, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009728:	461a      	mov	r2, r3
 800972a:	2100      	movs	r1, #0
 800972c:	f00a f890 	bl	8013850 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	b2db      	uxtb	r3, r3
 8009734:	4619      	mov	r1, r3
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f00f fd5e 	bl	80191f8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3720      	adds	r7, #32
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	4f54300a 	.word	0x4f54300a
 800974c:	4f54310a 	.word	0x4f54310a

08009750 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b086      	sub	sp, #24
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
 8009758:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	333c      	adds	r3, #60	; 0x3c
 8009768:	3304      	adds	r3, #4
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	015a      	lsls	r2, r3, #5
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	4413      	add	r3, r2
 8009776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800977a:	689b      	ldr	r3, [r3, #8]
 800977c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	4a15      	ldr	r2, [pc, #84]	; (80097d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d90e      	bls.n	80097a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800978c:	2b00      	cmp	r3, #0
 800978e:	d009      	beq.n	80097a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	015a      	lsls	r2, r3, #5
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	4413      	add	r3, r2
 8009798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800979c:	461a      	mov	r2, r3
 800979e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f00f fd15 	bl	80191d4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	4a0a      	ldr	r2, [pc, #40]	; (80097d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d90c      	bls.n	80097cc <PCD_EP_OutSetupPacket_int+0x7c>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d108      	bne.n	80097cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6818      	ldr	r0, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80097c4:	461a      	mov	r2, r3
 80097c6:	2101      	movs	r1, #1
 80097c8:	f00a f842 	bl	8013850 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3718      	adds	r7, #24
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	4f54300a 	.word	0x4f54300a

080097dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80097dc:	b480      	push	{r7}
 80097de:	b085      	sub	sp, #20
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	460b      	mov	r3, r1
 80097e6:	70fb      	strb	r3, [r7, #3]
 80097e8:	4613      	mov	r3, r2
 80097ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80097f4:	78fb      	ldrb	r3, [r7, #3]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d107      	bne.n	800980a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80097fa:	883b      	ldrh	r3, [r7, #0]
 80097fc:	0419      	lsls	r1, r3, #16
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	430a      	orrs	r2, r1
 8009806:	629a      	str	r2, [r3, #40]	; 0x28
 8009808:	e028      	b.n	800985c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009810:	0c1b      	lsrs	r3, r3, #16
 8009812:	68ba      	ldr	r2, [r7, #8]
 8009814:	4413      	add	r3, r2
 8009816:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009818:	2300      	movs	r3, #0
 800981a:	73fb      	strb	r3, [r7, #15]
 800981c:	e00d      	b.n	800983a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	7bfb      	ldrb	r3, [r7, #15]
 8009824:	3340      	adds	r3, #64	; 0x40
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	4413      	add	r3, r2
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	0c1b      	lsrs	r3, r3, #16
 800982e:	68ba      	ldr	r2, [r7, #8]
 8009830:	4413      	add	r3, r2
 8009832:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009834:	7bfb      	ldrb	r3, [r7, #15]
 8009836:	3301      	adds	r3, #1
 8009838:	73fb      	strb	r3, [r7, #15]
 800983a:	7bfa      	ldrb	r2, [r7, #15]
 800983c:	78fb      	ldrb	r3, [r7, #3]
 800983e:	3b01      	subs	r3, #1
 8009840:	429a      	cmp	r2, r3
 8009842:	d3ec      	bcc.n	800981e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009844:	883b      	ldrh	r3, [r7, #0]
 8009846:	0418      	lsls	r0, r3, #16
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6819      	ldr	r1, [r3, #0]
 800984c:	78fb      	ldrb	r3, [r7, #3]
 800984e:	3b01      	subs	r3, #1
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	4302      	orrs	r2, r0
 8009854:	3340      	adds	r3, #64	; 0x40
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	440b      	add	r3, r1
 800985a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800985c:	2300      	movs	r3, #0
}
 800985e:	4618      	mov	r0, r3
 8009860:	3714      	adds	r7, #20
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800986a:	b480      	push	{r7}
 800986c:	b083      	sub	sp, #12
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	460b      	mov	r3, r1
 8009874:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	887a      	ldrh	r2, [r7, #2]
 800987c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800987e:	2300      	movs	r3, #0
}
 8009880:	4618      	mov	r0, r3
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	699b      	ldr	r3, [r3, #24]
 80098ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80098ba:	4b05      	ldr	r3, [pc, #20]	; (80098d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80098bc:	4313      	orrs	r3, r2
 80098be:	68fa      	ldr	r2, [r7, #12]
 80098c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	10000003 	.word	0x10000003

080098d4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80098e0:	bf00      	nop
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80098f4:	4b19      	ldr	r3, [pc, #100]	; (800995c <HAL_PWREx_ConfigSupply+0x70>)
 80098f6:	68db      	ldr	r3, [r3, #12]
 80098f8:	f003 0304 	and.w	r3, r3, #4
 80098fc:	2b04      	cmp	r3, #4
 80098fe:	d00a      	beq.n	8009916 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009900:	4b16      	ldr	r3, [pc, #88]	; (800995c <HAL_PWREx_ConfigSupply+0x70>)
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	f003 0307 	and.w	r3, r3, #7
 8009908:	687a      	ldr	r2, [r7, #4]
 800990a:	429a      	cmp	r2, r3
 800990c:	d001      	beq.n	8009912 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e01f      	b.n	8009952 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	e01d      	b.n	8009952 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009916:	4b11      	ldr	r3, [pc, #68]	; (800995c <HAL_PWREx_ConfigSupply+0x70>)
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	f023 0207 	bic.w	r2, r3, #7
 800991e:	490f      	ldr	r1, [pc, #60]	; (800995c <HAL_PWREx_ConfigSupply+0x70>)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4313      	orrs	r3, r2
 8009924:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009926:	f7f9 fcd9 	bl	80032dc <HAL_GetTick>
 800992a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800992c:	e009      	b.n	8009942 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800992e:	f7f9 fcd5 	bl	80032dc <HAL_GetTick>
 8009932:	4602      	mov	r2, r0
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	1ad3      	subs	r3, r2, r3
 8009938:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800993c:	d901      	bls.n	8009942 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e007      	b.n	8009952 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009942:	4b06      	ldr	r3, [pc, #24]	; (800995c <HAL_PWREx_ConfigSupply+0x70>)
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800994a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800994e:	d1ee      	bne.n	800992e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	58024800 	.word	0x58024800

08009960 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009960:	b480      	push	{r7}
 8009962:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009964:	4b05      	ldr	r3, [pc, #20]	; (800997c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	4a04      	ldr	r2, [pc, #16]	; (800997c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800996a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800996e:	60d3      	str	r3, [r2, #12]
}
 8009970:	bf00      	nop
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	58024800 	.word	0x58024800

08009980 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b08c      	sub	sp, #48	; 0x30
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d101      	bne.n	8009992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800998e:	2301      	movs	r3, #1
 8009990:	e3c8      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 0301 	and.w	r3, r3, #1
 800999a:	2b00      	cmp	r3, #0
 800999c:	f000 8087 	beq.w	8009aae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099a0:	4b88      	ldr	r3, [pc, #544]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099aa:	4b86      	ldr	r3, [pc, #536]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 80099ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ae:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80099b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b2:	2b10      	cmp	r3, #16
 80099b4:	d007      	beq.n	80099c6 <HAL_RCC_OscConfig+0x46>
 80099b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b8:	2b18      	cmp	r3, #24
 80099ba:	d110      	bne.n	80099de <HAL_RCC_OscConfig+0x5e>
 80099bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099be:	f003 0303 	and.w	r3, r3, #3
 80099c2:	2b02      	cmp	r3, #2
 80099c4:	d10b      	bne.n	80099de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099c6:	4b7f      	ldr	r3, [pc, #508]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d06c      	beq.n	8009aac <HAL_RCC_OscConfig+0x12c>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d168      	bne.n	8009aac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	e3a2      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099e6:	d106      	bne.n	80099f6 <HAL_RCC_OscConfig+0x76>
 80099e8:	4b76      	ldr	r3, [pc, #472]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a75      	ldr	r2, [pc, #468]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 80099ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099f2:	6013      	str	r3, [r2, #0]
 80099f4:	e02e      	b.n	8009a54 <HAL_RCC_OscConfig+0xd4>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d10c      	bne.n	8009a18 <HAL_RCC_OscConfig+0x98>
 80099fe:	4b71      	ldr	r3, [pc, #452]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a70      	ldr	r2, [pc, #448]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a08:	6013      	str	r3, [r2, #0]
 8009a0a:	4b6e      	ldr	r3, [pc, #440]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a6d      	ldr	r2, [pc, #436]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a14:	6013      	str	r3, [r2, #0]
 8009a16:	e01d      	b.n	8009a54 <HAL_RCC_OscConfig+0xd4>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a20:	d10c      	bne.n	8009a3c <HAL_RCC_OscConfig+0xbc>
 8009a22:	4b68      	ldr	r3, [pc, #416]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a67      	ldr	r2, [pc, #412]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a2c:	6013      	str	r3, [r2, #0]
 8009a2e:	4b65      	ldr	r3, [pc, #404]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a64      	ldr	r2, [pc, #400]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a38:	6013      	str	r3, [r2, #0]
 8009a3a:	e00b      	b.n	8009a54 <HAL_RCC_OscConfig+0xd4>
 8009a3c:	4b61      	ldr	r3, [pc, #388]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a60      	ldr	r2, [pc, #384]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a46:	6013      	str	r3, [r2, #0]
 8009a48:	4b5e      	ldr	r3, [pc, #376]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a5d      	ldr	r2, [pc, #372]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	685b      	ldr	r3, [r3, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d013      	beq.n	8009a84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a5c:	f7f9 fc3e 	bl	80032dc <HAL_GetTick>
 8009a60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a62:	e008      	b.n	8009a76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a64:	f7f9 fc3a 	bl	80032dc <HAL_GetTick>
 8009a68:	4602      	mov	r2, r0
 8009a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	2b64      	cmp	r3, #100	; 0x64
 8009a70:	d901      	bls.n	8009a76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e356      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a76:	4b53      	ldr	r3, [pc, #332]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d0f0      	beq.n	8009a64 <HAL_RCC_OscConfig+0xe4>
 8009a82:	e014      	b.n	8009aae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a84:	f7f9 fc2a 	bl	80032dc <HAL_GetTick>
 8009a88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a8a:	e008      	b.n	8009a9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a8c:	f7f9 fc26 	bl	80032dc <HAL_GetTick>
 8009a90:	4602      	mov	r2, r0
 8009a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a94:	1ad3      	subs	r3, r2, r3
 8009a96:	2b64      	cmp	r3, #100	; 0x64
 8009a98:	d901      	bls.n	8009a9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	e342      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a9e:	4b49      	ldr	r3, [pc, #292]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d1f0      	bne.n	8009a8c <HAL_RCC_OscConfig+0x10c>
 8009aaa:	e000      	b.n	8009aae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f003 0302 	and.w	r3, r3, #2
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f000 808c 	beq.w	8009bd4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009abc:	4b41      	ldr	r3, [pc, #260]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009abe:	691b      	ldr	r3, [r3, #16]
 8009ac0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ac4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ac6:	4b3f      	ldr	r3, [pc, #252]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009acc:	6a3b      	ldr	r3, [r7, #32]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d007      	beq.n	8009ae2 <HAL_RCC_OscConfig+0x162>
 8009ad2:	6a3b      	ldr	r3, [r7, #32]
 8009ad4:	2b18      	cmp	r3, #24
 8009ad6:	d137      	bne.n	8009b48 <HAL_RCC_OscConfig+0x1c8>
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	f003 0303 	and.w	r3, r3, #3
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d132      	bne.n	8009b48 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ae2:	4b38      	ldr	r3, [pc, #224]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f003 0304 	and.w	r3, r3, #4
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d005      	beq.n	8009afa <HAL_RCC_OscConfig+0x17a>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d101      	bne.n	8009afa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e314      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009afa:	4b32      	ldr	r3, [pc, #200]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f023 0219 	bic.w	r2, r3, #25
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	492f      	ldr	r1, [pc, #188]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b0c:	f7f9 fbe6 	bl	80032dc <HAL_GetTick>
 8009b10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b12:	e008      	b.n	8009b26 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b14:	f7f9 fbe2 	bl	80032dc <HAL_GetTick>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1c:	1ad3      	subs	r3, r2, r3
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d901      	bls.n	8009b26 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009b22:	2303      	movs	r3, #3
 8009b24:	e2fe      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b26:	4b27      	ldr	r3, [pc, #156]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f003 0304 	and.w	r3, r3, #4
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d0f0      	beq.n	8009b14 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b32:	4b24      	ldr	r3, [pc, #144]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	061b      	lsls	r3, r3, #24
 8009b40:	4920      	ldr	r1, [pc, #128]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009b42:	4313      	orrs	r3, r2
 8009b44:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b46:	e045      	b.n	8009bd4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d026      	beq.n	8009b9e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009b50:	4b1c      	ldr	r3, [pc, #112]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f023 0219 	bic.w	r2, r3, #25
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	68db      	ldr	r3, [r3, #12]
 8009b5c:	4919      	ldr	r1, [pc, #100]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b62:	f7f9 fbbb 	bl	80032dc <HAL_GetTick>
 8009b66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b68:	e008      	b.n	8009b7c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b6a:	f7f9 fbb7 	bl	80032dc <HAL_GetTick>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b72:	1ad3      	subs	r3, r2, r3
 8009b74:	2b02      	cmp	r3, #2
 8009b76:	d901      	bls.n	8009b7c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	e2d3      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b7c:	4b11      	ldr	r3, [pc, #68]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f003 0304 	and.w	r3, r3, #4
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d0f0      	beq.n	8009b6a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b88:	4b0e      	ldr	r3, [pc, #56]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	691b      	ldr	r3, [r3, #16]
 8009b94:	061b      	lsls	r3, r3, #24
 8009b96:	490b      	ldr	r1, [pc, #44]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	604b      	str	r3, [r1, #4]
 8009b9c:	e01a      	b.n	8009bd4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b9e:	4b09      	ldr	r3, [pc, #36]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a08      	ldr	r2, [pc, #32]	; (8009bc4 <HAL_RCC_OscConfig+0x244>)
 8009ba4:	f023 0301 	bic.w	r3, r3, #1
 8009ba8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009baa:	f7f9 fb97 	bl	80032dc <HAL_GetTick>
 8009bae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009bb0:	e00a      	b.n	8009bc8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009bb2:	f7f9 fb93 	bl	80032dc <HAL_GetTick>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d903      	bls.n	8009bc8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e2af      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
 8009bc4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009bc8:	4b96      	ldr	r3, [pc, #600]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 0304 	and.w	r3, r3, #4
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1ee      	bne.n	8009bb2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 0310 	and.w	r3, r3, #16
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d06a      	beq.n	8009cb6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009be0:	4b90      	ldr	r3, [pc, #576]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009be8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009bea:	4b8e      	ldr	r3, [pc, #568]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bee:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009bf0:	69bb      	ldr	r3, [r7, #24]
 8009bf2:	2b08      	cmp	r3, #8
 8009bf4:	d007      	beq.n	8009c06 <HAL_RCC_OscConfig+0x286>
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	2b18      	cmp	r3, #24
 8009bfa:	d11b      	bne.n	8009c34 <HAL_RCC_OscConfig+0x2b4>
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	f003 0303 	and.w	r3, r3, #3
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d116      	bne.n	8009c34 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c06:	4b87      	ldr	r3, [pc, #540]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d005      	beq.n	8009c1e <HAL_RCC_OscConfig+0x29e>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	69db      	ldr	r3, [r3, #28]
 8009c16:	2b80      	cmp	r3, #128	; 0x80
 8009c18:	d001      	beq.n	8009c1e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e282      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c1e:	4b81      	ldr	r3, [pc, #516]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6a1b      	ldr	r3, [r3, #32]
 8009c2a:	061b      	lsls	r3, r3, #24
 8009c2c:	497d      	ldr	r1, [pc, #500]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c32:	e040      	b.n	8009cb6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	69db      	ldr	r3, [r3, #28]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d023      	beq.n	8009c84 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009c3c:	4b79      	ldr	r3, [pc, #484]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a78      	ldr	r2, [pc, #480]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c48:	f7f9 fb48 	bl	80032dc <HAL_GetTick>
 8009c4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c4e:	e008      	b.n	8009c62 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009c50:	f7f9 fb44 	bl	80032dc <HAL_GetTick>
 8009c54:	4602      	mov	r2, r0
 8009c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c58:	1ad3      	subs	r3, r2, r3
 8009c5a:	2b02      	cmp	r3, #2
 8009c5c:	d901      	bls.n	8009c62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009c5e:	2303      	movs	r3, #3
 8009c60:	e260      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c62:	4b70      	ldr	r3, [pc, #448]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d0f0      	beq.n	8009c50 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c6e:	4b6d      	ldr	r3, [pc, #436]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a1b      	ldr	r3, [r3, #32]
 8009c7a:	061b      	lsls	r3, r3, #24
 8009c7c:	4969      	ldr	r1, [pc, #420]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	60cb      	str	r3, [r1, #12]
 8009c82:	e018      	b.n	8009cb6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009c84:	4b67      	ldr	r3, [pc, #412]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a66      	ldr	r2, [pc, #408]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009c8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c90:	f7f9 fb24 	bl	80032dc <HAL_GetTick>
 8009c94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009c96:	e008      	b.n	8009caa <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009c98:	f7f9 fb20 	bl	80032dc <HAL_GetTick>
 8009c9c:	4602      	mov	r2, r0
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca0:	1ad3      	subs	r3, r2, r3
 8009ca2:	2b02      	cmp	r3, #2
 8009ca4:	d901      	bls.n	8009caa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	e23c      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009caa:	4b5e      	ldr	r3, [pc, #376]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d1f0      	bne.n	8009c98 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f003 0308 	and.w	r3, r3, #8
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d036      	beq.n	8009d30 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	695b      	ldr	r3, [r3, #20]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d019      	beq.n	8009cfe <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009cca:	4b56      	ldr	r3, [pc, #344]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009ccc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cce:	4a55      	ldr	r2, [pc, #340]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009cd0:	f043 0301 	orr.w	r3, r3, #1
 8009cd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cd6:	f7f9 fb01 	bl	80032dc <HAL_GetTick>
 8009cda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009cdc:	e008      	b.n	8009cf0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009cde:	f7f9 fafd 	bl	80032dc <HAL_GetTick>
 8009ce2:	4602      	mov	r2, r0
 8009ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce6:	1ad3      	subs	r3, r2, r3
 8009ce8:	2b02      	cmp	r3, #2
 8009cea:	d901      	bls.n	8009cf0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009cec:	2303      	movs	r3, #3
 8009cee:	e219      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009cf0:	4b4c      	ldr	r3, [pc, #304]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cf4:	f003 0302 	and.w	r3, r3, #2
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d0f0      	beq.n	8009cde <HAL_RCC_OscConfig+0x35e>
 8009cfc:	e018      	b.n	8009d30 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009cfe:	4b49      	ldr	r3, [pc, #292]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d02:	4a48      	ldr	r2, [pc, #288]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009d04:	f023 0301 	bic.w	r3, r3, #1
 8009d08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d0a:	f7f9 fae7 	bl	80032dc <HAL_GetTick>
 8009d0e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d10:	e008      	b.n	8009d24 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d12:	f7f9 fae3 	bl	80032dc <HAL_GetTick>
 8009d16:	4602      	mov	r2, r0
 8009d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	d901      	bls.n	8009d24 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e1ff      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d24:	4b3f      	ldr	r3, [pc, #252]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d28:	f003 0302 	and.w	r3, r3, #2
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d1f0      	bne.n	8009d12 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f003 0320 	and.w	r3, r3, #32
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d036      	beq.n	8009daa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d019      	beq.n	8009d78 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009d44:	4b37      	ldr	r3, [pc, #220]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	4a36      	ldr	r2, [pc, #216]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009d4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009d50:	f7f9 fac4 	bl	80032dc <HAL_GetTick>
 8009d54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d56:	e008      	b.n	8009d6a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d58:	f7f9 fac0 	bl	80032dc <HAL_GetTick>
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	2b02      	cmp	r3, #2
 8009d64:	d901      	bls.n	8009d6a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009d66:	2303      	movs	r3, #3
 8009d68:	e1dc      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d6a:	4b2e      	ldr	r3, [pc, #184]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d0f0      	beq.n	8009d58 <HAL_RCC_OscConfig+0x3d8>
 8009d76:	e018      	b.n	8009daa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009d78:	4b2a      	ldr	r3, [pc, #168]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	4a29      	ldr	r2, [pc, #164]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009d7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d82:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009d84:	f7f9 faaa 	bl	80032dc <HAL_GetTick>
 8009d88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d8a:	e008      	b.n	8009d9e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d8c:	f7f9 faa6 	bl	80032dc <HAL_GetTick>
 8009d90:	4602      	mov	r2, r0
 8009d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d94:	1ad3      	subs	r3, r2, r3
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d901      	bls.n	8009d9e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	e1c2      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d9e:	4b21      	ldr	r3, [pc, #132]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1f0      	bne.n	8009d8c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	f003 0304 	and.w	r3, r3, #4
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	f000 8086 	beq.w	8009ec4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009db8:	4b1b      	ldr	r3, [pc, #108]	; (8009e28 <HAL_RCC_OscConfig+0x4a8>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4a1a      	ldr	r2, [pc, #104]	; (8009e28 <HAL_RCC_OscConfig+0x4a8>)
 8009dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009dc4:	f7f9 fa8a 	bl	80032dc <HAL_GetTick>
 8009dc8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009dca:	e008      	b.n	8009dde <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009dcc:	f7f9 fa86 	bl	80032dc <HAL_GetTick>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	2b64      	cmp	r3, #100	; 0x64
 8009dd8:	d901      	bls.n	8009dde <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	e1a2      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009dde:	4b12      	ldr	r3, [pc, #72]	; (8009e28 <HAL_RCC_OscConfig+0x4a8>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d0f0      	beq.n	8009dcc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	689b      	ldr	r3, [r3, #8]
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d106      	bne.n	8009e00 <HAL_RCC_OscConfig+0x480>
 8009df2:	4b0c      	ldr	r3, [pc, #48]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df6:	4a0b      	ldr	r2, [pc, #44]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009df8:	f043 0301 	orr.w	r3, r3, #1
 8009dfc:	6713      	str	r3, [r2, #112]	; 0x70
 8009dfe:	e032      	b.n	8009e66 <HAL_RCC_OscConfig+0x4e6>
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d111      	bne.n	8009e2c <HAL_RCC_OscConfig+0x4ac>
 8009e08:	4b06      	ldr	r3, [pc, #24]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e0c:	4a05      	ldr	r2, [pc, #20]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009e0e:	f023 0301 	bic.w	r3, r3, #1
 8009e12:	6713      	str	r3, [r2, #112]	; 0x70
 8009e14:	4b03      	ldr	r3, [pc, #12]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e18:	4a02      	ldr	r2, [pc, #8]	; (8009e24 <HAL_RCC_OscConfig+0x4a4>)
 8009e1a:	f023 0304 	bic.w	r3, r3, #4
 8009e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8009e20:	e021      	b.n	8009e66 <HAL_RCC_OscConfig+0x4e6>
 8009e22:	bf00      	nop
 8009e24:	58024400 	.word	0x58024400
 8009e28:	58024800 	.word	0x58024800
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	689b      	ldr	r3, [r3, #8]
 8009e30:	2b05      	cmp	r3, #5
 8009e32:	d10c      	bne.n	8009e4e <HAL_RCC_OscConfig+0x4ce>
 8009e34:	4b83      	ldr	r3, [pc, #524]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e38:	4a82      	ldr	r2, [pc, #520]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009e3a:	f043 0304 	orr.w	r3, r3, #4
 8009e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8009e40:	4b80      	ldr	r3, [pc, #512]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e44:	4a7f      	ldr	r2, [pc, #508]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009e46:	f043 0301 	orr.w	r3, r3, #1
 8009e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8009e4c:	e00b      	b.n	8009e66 <HAL_RCC_OscConfig+0x4e6>
 8009e4e:	4b7d      	ldr	r3, [pc, #500]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e52:	4a7c      	ldr	r2, [pc, #496]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009e54:	f023 0301 	bic.w	r3, r3, #1
 8009e58:	6713      	str	r3, [r2, #112]	; 0x70
 8009e5a:	4b7a      	ldr	r3, [pc, #488]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e5e:	4a79      	ldr	r2, [pc, #484]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009e60:	f023 0304 	bic.w	r3, r3, #4
 8009e64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	689b      	ldr	r3, [r3, #8]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d015      	beq.n	8009e9a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e6e:	f7f9 fa35 	bl	80032dc <HAL_GetTick>
 8009e72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e74:	e00a      	b.n	8009e8c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009e76:	f7f9 fa31 	bl	80032dc <HAL_GetTick>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	1ad3      	subs	r3, r2, r3
 8009e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d901      	bls.n	8009e8c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	e14b      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009e8c:	4b6d      	ldr	r3, [pc, #436]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e90:	f003 0302 	and.w	r3, r3, #2
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d0ee      	beq.n	8009e76 <HAL_RCC_OscConfig+0x4f6>
 8009e98:	e014      	b.n	8009ec4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e9a:	f7f9 fa1f 	bl	80032dc <HAL_GetTick>
 8009e9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ea0:	e00a      	b.n	8009eb8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ea2:	f7f9 fa1b 	bl	80032dc <HAL_GetTick>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	1ad3      	subs	r3, r2, r3
 8009eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d901      	bls.n	8009eb8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	e135      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009eb8:	4b62      	ldr	r3, [pc, #392]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ebc:	f003 0302 	and.w	r3, r3, #2
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1ee      	bne.n	8009ea2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 812a 	beq.w	800a122 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009ece:	4b5d      	ldr	r3, [pc, #372]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ed6:	2b18      	cmp	r3, #24
 8009ed8:	f000 80ba 	beq.w	800a050 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	f040 8095 	bne.w	800a010 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009ee6:	4b57      	ldr	r3, [pc, #348]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a56      	ldr	r2, [pc, #344]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009eec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ef2:	f7f9 f9f3 	bl	80032dc <HAL_GetTick>
 8009ef6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ef8:	e008      	b.n	8009f0c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009efa:	f7f9 f9ef 	bl	80032dc <HAL_GetTick>
 8009efe:	4602      	mov	r2, r0
 8009f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f02:	1ad3      	subs	r3, r2, r3
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	d901      	bls.n	8009f0c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009f08:	2303      	movs	r3, #3
 8009f0a:	e10b      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f0c:	4b4d      	ldr	r3, [pc, #308]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d1f0      	bne.n	8009efa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009f18:	4b4a      	ldr	r3, [pc, #296]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009f1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009f1c:	4b4a      	ldr	r3, [pc, #296]	; (800a048 <HAL_RCC_OscConfig+0x6c8>)
 8009f1e:	4013      	ands	r3, r2
 8009f20:	687a      	ldr	r2, [r7, #4]
 8009f22:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009f28:	0112      	lsls	r2, r2, #4
 8009f2a:	430a      	orrs	r2, r1
 8009f2c:	4945      	ldr	r1, [pc, #276]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	628b      	str	r3, [r1, #40]	; 0x28
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f36:	3b01      	subs	r3, #1
 8009f38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f40:	3b01      	subs	r3, #1
 8009f42:	025b      	lsls	r3, r3, #9
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	431a      	orrs	r2, r3
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f4c:	3b01      	subs	r3, #1
 8009f4e:	041b      	lsls	r3, r3, #16
 8009f50:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f54:	431a      	orrs	r2, r3
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	061b      	lsls	r3, r3, #24
 8009f5e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f62:	4938      	ldr	r1, [pc, #224]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009f64:	4313      	orrs	r3, r2
 8009f66:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009f68:	4b36      	ldr	r3, [pc, #216]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f6c:	4a35      	ldr	r2, [pc, #212]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009f6e:	f023 0301 	bic.w	r3, r3, #1
 8009f72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009f74:	4b33      	ldr	r3, [pc, #204]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f78:	4b34      	ldr	r3, [pc, #208]	; (800a04c <HAL_RCC_OscConfig+0x6cc>)
 8009f7a:	4013      	ands	r3, r2
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009f80:	00d2      	lsls	r2, r2, #3
 8009f82:	4930      	ldr	r1, [pc, #192]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009f84:	4313      	orrs	r3, r2
 8009f86:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009f88:	4b2e      	ldr	r3, [pc, #184]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f8c:	f023 020c 	bic.w	r2, r3, #12
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f94:	492b      	ldr	r1, [pc, #172]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009f96:	4313      	orrs	r3, r2
 8009f98:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009f9a:	4b2a      	ldr	r3, [pc, #168]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f9e:	f023 0202 	bic.w	r2, r3, #2
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fa6:	4927      	ldr	r1, [pc, #156]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009fa8:	4313      	orrs	r3, r2
 8009faa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009fac:	4b25      	ldr	r3, [pc, #148]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb0:	4a24      	ldr	r2, [pc, #144]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fb8:	4b22      	ldr	r3, [pc, #136]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fbc:	4a21      	ldr	r2, [pc, #132]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009fc4:	4b1f      	ldr	r3, [pc, #124]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc8:	4a1e      	ldr	r2, [pc, #120]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009fca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009fce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009fd0:	4b1c      	ldr	r3, [pc, #112]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fd4:	4a1b      	ldr	r2, [pc, #108]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009fd6:	f043 0301 	orr.w	r3, r3, #1
 8009fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009fdc:	4b19      	ldr	r3, [pc, #100]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a18      	ldr	r2, [pc, #96]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 8009fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fe8:	f7f9 f978 	bl	80032dc <HAL_GetTick>
 8009fec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009fee:	e008      	b.n	800a002 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ff0:	f7f9 f974 	bl	80032dc <HAL_GetTick>
 8009ff4:	4602      	mov	r2, r0
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff8:	1ad3      	subs	r3, r2, r3
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d901      	bls.n	800a002 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009ffe:	2303      	movs	r3, #3
 800a000:	e090      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a002:	4b10      	ldr	r3, [pc, #64]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d0f0      	beq.n	8009ff0 <HAL_RCC_OscConfig+0x670>
 800a00e:	e088      	b.n	800a122 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a010:	4b0c      	ldr	r3, [pc, #48]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a0b      	ldr	r2, [pc, #44]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 800a016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a01a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a01c:	f7f9 f95e 	bl	80032dc <HAL_GetTick>
 800a020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a022:	e008      	b.n	800a036 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a024:	f7f9 f95a 	bl	80032dc <HAL_GetTick>
 800a028:	4602      	mov	r2, r0
 800a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02c:	1ad3      	subs	r3, r2, r3
 800a02e:	2b02      	cmp	r3, #2
 800a030:	d901      	bls.n	800a036 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a032:	2303      	movs	r3, #3
 800a034:	e076      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a036:	4b03      	ldr	r3, [pc, #12]	; (800a044 <HAL_RCC_OscConfig+0x6c4>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1f0      	bne.n	800a024 <HAL_RCC_OscConfig+0x6a4>
 800a042:	e06e      	b.n	800a122 <HAL_RCC_OscConfig+0x7a2>
 800a044:	58024400 	.word	0x58024400
 800a048:	fffffc0c 	.word	0xfffffc0c
 800a04c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a050:	4b36      	ldr	r3, [pc, #216]	; (800a12c <HAL_RCC_OscConfig+0x7ac>)
 800a052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a054:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a056:	4b35      	ldr	r3, [pc, #212]	; (800a12c <HAL_RCC_OscConfig+0x7ac>)
 800a058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a05a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a060:	2b01      	cmp	r3, #1
 800a062:	d031      	beq.n	800a0c8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	f003 0203 	and.w	r2, r3, #3
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a06e:	429a      	cmp	r2, r3
 800a070:	d12a      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	091b      	lsrs	r3, r3, #4
 800a076:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a07e:	429a      	cmp	r2, r3
 800a080:	d122      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a08c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a08e:	429a      	cmp	r2, r3
 800a090:	d11a      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	0a5b      	lsrs	r3, r3, #9
 800a096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a09e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d111      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	0c1b      	lsrs	r3, r3, #16
 800a0a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d108      	bne.n	800a0c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	0e1b      	lsrs	r3, r3, #24
 800a0ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d001      	beq.n	800a0cc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e02b      	b.n	800a124 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a0cc:	4b17      	ldr	r3, [pc, #92]	; (800a12c <HAL_RCC_OscConfig+0x7ac>)
 800a0ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d0:	08db      	lsrs	r3, r3, #3
 800a0d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a0d6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d01f      	beq.n	800a122 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a0e2:	4b12      	ldr	r3, [pc, #72]	; (800a12c <HAL_RCC_OscConfig+0x7ac>)
 800a0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0e6:	4a11      	ldr	r2, [pc, #68]	; (800a12c <HAL_RCC_OscConfig+0x7ac>)
 800a0e8:	f023 0301 	bic.w	r3, r3, #1
 800a0ec:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a0ee:	f7f9 f8f5 	bl	80032dc <HAL_GetTick>
 800a0f2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a0f4:	bf00      	nop
 800a0f6:	f7f9 f8f1 	bl	80032dc <HAL_GetTick>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d0f9      	beq.n	800a0f6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a102:	4b0a      	ldr	r3, [pc, #40]	; (800a12c <HAL_RCC_OscConfig+0x7ac>)
 800a104:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a106:	4b0a      	ldr	r3, [pc, #40]	; (800a130 <HAL_RCC_OscConfig+0x7b0>)
 800a108:	4013      	ands	r3, r2
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a10e:	00d2      	lsls	r2, r2, #3
 800a110:	4906      	ldr	r1, [pc, #24]	; (800a12c <HAL_RCC_OscConfig+0x7ac>)
 800a112:	4313      	orrs	r3, r2
 800a114:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a116:	4b05      	ldr	r3, [pc, #20]	; (800a12c <HAL_RCC_OscConfig+0x7ac>)
 800a118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a11a:	4a04      	ldr	r2, [pc, #16]	; (800a12c <HAL_RCC_OscConfig+0x7ac>)
 800a11c:	f043 0301 	orr.w	r3, r3, #1
 800a120:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a122:	2300      	movs	r3, #0
}
 800a124:	4618      	mov	r0, r3
 800a126:	3730      	adds	r7, #48	; 0x30
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}
 800a12c:	58024400 	.word	0x58024400
 800a130:	ffff0007 	.word	0xffff0007

0800a134 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b086      	sub	sp, #24
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d101      	bne.n	800a148 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	e19c      	b.n	800a482 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a148:	4b8a      	ldr	r3, [pc, #552]	; (800a374 <HAL_RCC_ClockConfig+0x240>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f003 030f 	and.w	r3, r3, #15
 800a150:	683a      	ldr	r2, [r7, #0]
 800a152:	429a      	cmp	r2, r3
 800a154:	d910      	bls.n	800a178 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a156:	4b87      	ldr	r3, [pc, #540]	; (800a374 <HAL_RCC_ClockConfig+0x240>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f023 020f 	bic.w	r2, r3, #15
 800a15e:	4985      	ldr	r1, [pc, #532]	; (800a374 <HAL_RCC_ClockConfig+0x240>)
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	4313      	orrs	r3, r2
 800a164:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a166:	4b83      	ldr	r3, [pc, #524]	; (800a374 <HAL_RCC_ClockConfig+0x240>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	f003 030f 	and.w	r3, r3, #15
 800a16e:	683a      	ldr	r2, [r7, #0]
 800a170:	429a      	cmp	r2, r3
 800a172:	d001      	beq.n	800a178 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	e184      	b.n	800a482 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f003 0304 	and.w	r3, r3, #4
 800a180:	2b00      	cmp	r3, #0
 800a182:	d010      	beq.n	800a1a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	691a      	ldr	r2, [r3, #16]
 800a188:	4b7b      	ldr	r3, [pc, #492]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a190:	429a      	cmp	r2, r3
 800a192:	d908      	bls.n	800a1a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a194:	4b78      	ldr	r3, [pc, #480]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a196:	699b      	ldr	r3, [r3, #24]
 800a198:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	691b      	ldr	r3, [r3, #16]
 800a1a0:	4975      	ldr	r1, [pc, #468]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 0308 	and.w	r3, r3, #8
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d010      	beq.n	800a1d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	695a      	ldr	r2, [r3, #20]
 800a1b6:	4b70      	ldr	r3, [pc, #448]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a1b8:	69db      	ldr	r3, [r3, #28]
 800a1ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1be:	429a      	cmp	r2, r3
 800a1c0:	d908      	bls.n	800a1d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a1c2:	4b6d      	ldr	r3, [pc, #436]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a1c4:	69db      	ldr	r3, [r3, #28]
 800a1c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	695b      	ldr	r3, [r3, #20]
 800a1ce:	496a      	ldr	r1, [pc, #424]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a1d0:	4313      	orrs	r3, r2
 800a1d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f003 0310 	and.w	r3, r3, #16
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d010      	beq.n	800a202 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	699a      	ldr	r2, [r3, #24]
 800a1e4:	4b64      	ldr	r3, [pc, #400]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a1e6:	69db      	ldr	r3, [r3, #28]
 800a1e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d908      	bls.n	800a202 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a1f0:	4b61      	ldr	r3, [pc, #388]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a1f2:	69db      	ldr	r3, [r3, #28]
 800a1f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	699b      	ldr	r3, [r3, #24]
 800a1fc:	495e      	ldr	r1, [pc, #376]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a1fe:	4313      	orrs	r3, r2
 800a200:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f003 0320 	and.w	r3, r3, #32
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d010      	beq.n	800a230 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	69da      	ldr	r2, [r3, #28]
 800a212:	4b59      	ldr	r3, [pc, #356]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d908      	bls.n	800a230 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a21e:	4b56      	ldr	r3, [pc, #344]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	69db      	ldr	r3, [r3, #28]
 800a22a:	4953      	ldr	r1, [pc, #332]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a22c:	4313      	orrs	r3, r2
 800a22e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f003 0302 	and.w	r3, r3, #2
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d010      	beq.n	800a25e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	68da      	ldr	r2, [r3, #12]
 800a240:	4b4d      	ldr	r3, [pc, #308]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a242:	699b      	ldr	r3, [r3, #24]
 800a244:	f003 030f 	and.w	r3, r3, #15
 800a248:	429a      	cmp	r2, r3
 800a24a:	d908      	bls.n	800a25e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a24c:	4b4a      	ldr	r3, [pc, #296]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a24e:	699b      	ldr	r3, [r3, #24]
 800a250:	f023 020f 	bic.w	r2, r3, #15
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	4947      	ldr	r1, [pc, #284]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a25a:	4313      	orrs	r3, r2
 800a25c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f003 0301 	and.w	r3, r3, #1
 800a266:	2b00      	cmp	r3, #0
 800a268:	d055      	beq.n	800a316 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a26a:	4b43      	ldr	r3, [pc, #268]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a26c:	699b      	ldr	r3, [r3, #24]
 800a26e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	4940      	ldr	r1, [pc, #256]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a278:	4313      	orrs	r3, r2
 800a27a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	2b02      	cmp	r3, #2
 800a282:	d107      	bne.n	800a294 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a284:	4b3c      	ldr	r3, [pc, #240]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d121      	bne.n	800a2d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	e0f6      	b.n	800a482 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	2b03      	cmp	r3, #3
 800a29a:	d107      	bne.n	800a2ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a29c:	4b36      	ldr	r3, [pc, #216]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d115      	bne.n	800a2d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a2a8:	2301      	movs	r3, #1
 800a2aa:	e0ea      	b.n	800a482 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d107      	bne.n	800a2c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a2b4:	4b30      	ldr	r3, [pc, #192]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d109      	bne.n	800a2d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	e0de      	b.n	800a482 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a2c4:	4b2c      	ldr	r3, [pc, #176]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f003 0304 	and.w	r3, r3, #4
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d101      	bne.n	800a2d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e0d6      	b.n	800a482 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a2d4:	4b28      	ldr	r3, [pc, #160]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	f023 0207 	bic.w	r2, r3, #7
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	685b      	ldr	r3, [r3, #4]
 800a2e0:	4925      	ldr	r1, [pc, #148]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2e6:	f7f8 fff9 	bl	80032dc <HAL_GetTick>
 800a2ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a2ec:	e00a      	b.n	800a304 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a2ee:	f7f8 fff5 	bl	80032dc <HAL_GetTick>
 800a2f2:	4602      	mov	r2, r0
 800a2f4:	697b      	ldr	r3, [r7, #20]
 800a2f6:	1ad3      	subs	r3, r2, r3
 800a2f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d901      	bls.n	800a304 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a300:	2303      	movs	r3, #3
 800a302:	e0be      	b.n	800a482 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a304:	4b1c      	ldr	r3, [pc, #112]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a306:	691b      	ldr	r3, [r3, #16]
 800a308:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	685b      	ldr	r3, [r3, #4]
 800a310:	00db      	lsls	r3, r3, #3
 800a312:	429a      	cmp	r2, r3
 800a314:	d1eb      	bne.n	800a2ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f003 0302 	and.w	r3, r3, #2
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d010      	beq.n	800a344 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	68da      	ldr	r2, [r3, #12]
 800a326:	4b14      	ldr	r3, [pc, #80]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	f003 030f 	and.w	r3, r3, #15
 800a32e:	429a      	cmp	r2, r3
 800a330:	d208      	bcs.n	800a344 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a332:	4b11      	ldr	r3, [pc, #68]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a334:	699b      	ldr	r3, [r3, #24]
 800a336:	f023 020f 	bic.w	r2, r3, #15
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	490e      	ldr	r1, [pc, #56]	; (800a378 <HAL_RCC_ClockConfig+0x244>)
 800a340:	4313      	orrs	r3, r2
 800a342:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a344:	4b0b      	ldr	r3, [pc, #44]	; (800a374 <HAL_RCC_ClockConfig+0x240>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f003 030f 	and.w	r3, r3, #15
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d214      	bcs.n	800a37c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a352:	4b08      	ldr	r3, [pc, #32]	; (800a374 <HAL_RCC_ClockConfig+0x240>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f023 020f 	bic.w	r2, r3, #15
 800a35a:	4906      	ldr	r1, [pc, #24]	; (800a374 <HAL_RCC_ClockConfig+0x240>)
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	4313      	orrs	r3, r2
 800a360:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a362:	4b04      	ldr	r3, [pc, #16]	; (800a374 <HAL_RCC_ClockConfig+0x240>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f003 030f 	and.w	r3, r3, #15
 800a36a:	683a      	ldr	r2, [r7, #0]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	d005      	beq.n	800a37c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a370:	2301      	movs	r3, #1
 800a372:	e086      	b.n	800a482 <HAL_RCC_ClockConfig+0x34e>
 800a374:	52002000 	.word	0x52002000
 800a378:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f003 0304 	and.w	r3, r3, #4
 800a384:	2b00      	cmp	r3, #0
 800a386:	d010      	beq.n	800a3aa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	691a      	ldr	r2, [r3, #16]
 800a38c:	4b3f      	ldr	r3, [pc, #252]	; (800a48c <HAL_RCC_ClockConfig+0x358>)
 800a38e:	699b      	ldr	r3, [r3, #24]
 800a390:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a394:	429a      	cmp	r2, r3
 800a396:	d208      	bcs.n	800a3aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a398:	4b3c      	ldr	r3, [pc, #240]	; (800a48c <HAL_RCC_ClockConfig+0x358>)
 800a39a:	699b      	ldr	r3, [r3, #24]
 800a39c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	691b      	ldr	r3, [r3, #16]
 800a3a4:	4939      	ldr	r1, [pc, #228]	; (800a48c <HAL_RCC_ClockConfig+0x358>)
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f003 0308 	and.w	r3, r3, #8
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d010      	beq.n	800a3d8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	695a      	ldr	r2, [r3, #20]
 800a3ba:	4b34      	ldr	r3, [pc, #208]	; (800a48c <HAL_RCC_ClockConfig+0x358>)
 800a3bc:	69db      	ldr	r3, [r3, #28]
 800a3be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d208      	bcs.n	800a3d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a3c6:	4b31      	ldr	r3, [pc, #196]	; (800a48c <HAL_RCC_ClockConfig+0x358>)
 800a3c8:	69db      	ldr	r3, [r3, #28]
 800a3ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	492e      	ldr	r1, [pc, #184]	; (800a48c <HAL_RCC_ClockConfig+0x358>)
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 0310 	and.w	r3, r3, #16
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d010      	beq.n	800a406 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	699a      	ldr	r2, [r3, #24]
 800a3e8:	4b28      	ldr	r3, [pc, #160]	; (800a48c <HAL_RCC_ClockConfig+0x358>)
 800a3ea:	69db      	ldr	r3, [r3, #28]
 800a3ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a3f0:	429a      	cmp	r2, r3
 800a3f2:	d208      	bcs.n	800a406 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a3f4:	4b25      	ldr	r3, [pc, #148]	; (800a48c <HAL_RCC_ClockConfig+0x358>)
 800a3f6:	69db      	ldr	r3, [r3, #28]
 800a3f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	699b      	ldr	r3, [r3, #24]
 800a400:	4922      	ldr	r1, [pc, #136]	; (800a48c <HAL_RCC_ClockConfig+0x358>)
 800a402:	4313      	orrs	r3, r2
 800a404:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f003 0320 	and.w	r3, r3, #32
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d010      	beq.n	800a434 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	69da      	ldr	r2, [r3, #28]
 800a416:	4b1d      	ldr	r3, [pc, #116]	; (800a48c <HAL_RCC_ClockConfig+0x358>)
 800a418:	6a1b      	ldr	r3, [r3, #32]
 800a41a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a41e:	429a      	cmp	r2, r3
 800a420:	d208      	bcs.n	800a434 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a422:	4b1a      	ldr	r3, [pc, #104]	; (800a48c <HAL_RCC_ClockConfig+0x358>)
 800a424:	6a1b      	ldr	r3, [r3, #32]
 800a426:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	69db      	ldr	r3, [r3, #28]
 800a42e:	4917      	ldr	r1, [pc, #92]	; (800a48c <HAL_RCC_ClockConfig+0x358>)
 800a430:	4313      	orrs	r3, r2
 800a432:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a434:	f000 f89e 	bl	800a574 <HAL_RCC_GetSysClockFreq>
 800a438:	4602      	mov	r2, r0
 800a43a:	4b14      	ldr	r3, [pc, #80]	; (800a48c <HAL_RCC_ClockConfig+0x358>)
 800a43c:	699b      	ldr	r3, [r3, #24]
 800a43e:	0a1b      	lsrs	r3, r3, #8
 800a440:	f003 030f 	and.w	r3, r3, #15
 800a444:	4912      	ldr	r1, [pc, #72]	; (800a490 <HAL_RCC_ClockConfig+0x35c>)
 800a446:	5ccb      	ldrb	r3, [r1, r3]
 800a448:	f003 031f 	and.w	r3, r3, #31
 800a44c:	fa22 f303 	lsr.w	r3, r2, r3
 800a450:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a452:	4b0e      	ldr	r3, [pc, #56]	; (800a48c <HAL_RCC_ClockConfig+0x358>)
 800a454:	699b      	ldr	r3, [r3, #24]
 800a456:	f003 030f 	and.w	r3, r3, #15
 800a45a:	4a0d      	ldr	r2, [pc, #52]	; (800a490 <HAL_RCC_ClockConfig+0x35c>)
 800a45c:	5cd3      	ldrb	r3, [r2, r3]
 800a45e:	f003 031f 	and.w	r3, r3, #31
 800a462:	693a      	ldr	r2, [r7, #16]
 800a464:	fa22 f303 	lsr.w	r3, r2, r3
 800a468:	4a0a      	ldr	r2, [pc, #40]	; (800a494 <HAL_RCC_ClockConfig+0x360>)
 800a46a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a46c:	4a0a      	ldr	r2, [pc, #40]	; (800a498 <HAL_RCC_ClockConfig+0x364>)
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a472:	4b0a      	ldr	r3, [pc, #40]	; (800a49c <HAL_RCC_ClockConfig+0x368>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4618      	mov	r0, r3
 800a478:	f7f8 fee6 	bl	8003248 <HAL_InitTick>
 800a47c:	4603      	mov	r3, r0
 800a47e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a480:	7bfb      	ldrb	r3, [r7, #15]
}
 800a482:	4618      	mov	r0, r3
 800a484:	3718      	adds	r7, #24
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}
 800a48a:	bf00      	nop
 800a48c:	58024400 	.word	0x58024400
 800a490:	0801e018 	.word	0x0801e018
 800a494:	24000004 	.word	0x24000004
 800a498:	24000000 	.word	0x24000000
 800a49c:	24000008 	.word	0x24000008

0800a4a0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b08c      	sub	sp, #48	; 0x30
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	60f8      	str	r0, [r7, #12]
 800a4a8:	60b9      	str	r1, [r7, #8]
 800a4aa:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d12a      	bne.n	800a508 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a4b2:	4b2d      	ldr	r3, [pc, #180]	; (800a568 <HAL_RCC_MCOConfig+0xc8>)
 800a4b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4b8:	4a2b      	ldr	r2, [pc, #172]	; (800a568 <HAL_RCC_MCOConfig+0xc8>)
 800a4ba:	f043 0301 	orr.w	r3, r3, #1
 800a4be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a4c2:	4b29      	ldr	r3, [pc, #164]	; (800a568 <HAL_RCC_MCOConfig+0xc8>)
 800a4c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a4c8:	f003 0301 	and.w	r3, r3, #1
 800a4cc:	61bb      	str	r3, [r7, #24]
 800a4ce:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a4d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4d6:	2302      	movs	r3, #2
 800a4d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a4da:	2303      	movs	r3, #3
 800a4dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4de:	2300      	movs	r3, #0
 800a4e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a4e6:	f107 031c 	add.w	r3, r7, #28
 800a4ea:	4619      	mov	r1, r3
 800a4ec:	481f      	ldr	r0, [pc, #124]	; (800a56c <HAL_RCC_MCOConfig+0xcc>)
 800a4ee:	f7fd fc41 	bl	8007d74 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a4f2:	4b1d      	ldr	r3, [pc, #116]	; (800a568 <HAL_RCC_MCOConfig+0xc8>)
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a4fa:	68b9      	ldr	r1, [r7, #8]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	430b      	orrs	r3, r1
 800a500:	4919      	ldr	r1, [pc, #100]	; (800a568 <HAL_RCC_MCOConfig+0xc8>)
 800a502:	4313      	orrs	r3, r2
 800a504:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a506:	e02a      	b.n	800a55e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a508:	4b17      	ldr	r3, [pc, #92]	; (800a568 <HAL_RCC_MCOConfig+0xc8>)
 800a50a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a50e:	4a16      	ldr	r2, [pc, #88]	; (800a568 <HAL_RCC_MCOConfig+0xc8>)
 800a510:	f043 0304 	orr.w	r3, r3, #4
 800a514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a518:	4b13      	ldr	r3, [pc, #76]	; (800a568 <HAL_RCC_MCOConfig+0xc8>)
 800a51a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a51e:	f003 0304 	and.w	r3, r3, #4
 800a522:	617b      	str	r3, [r7, #20]
 800a524:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a526:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a52a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a52c:	2302      	movs	r3, #2
 800a52e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a530:	2303      	movs	r3, #3
 800a532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a534:	2300      	movs	r3, #0
 800a536:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a538:	2300      	movs	r3, #0
 800a53a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a53c:	f107 031c 	add.w	r3, r7, #28
 800a540:	4619      	mov	r1, r3
 800a542:	480b      	ldr	r0, [pc, #44]	; (800a570 <HAL_RCC_MCOConfig+0xd0>)
 800a544:	f7fd fc16 	bl	8007d74 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a548:	4b07      	ldr	r3, [pc, #28]	; (800a568 <HAL_RCC_MCOConfig+0xc8>)
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	01d9      	lsls	r1, r3, #7
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	430b      	orrs	r3, r1
 800a558:	4903      	ldr	r1, [pc, #12]	; (800a568 <HAL_RCC_MCOConfig+0xc8>)
 800a55a:	4313      	orrs	r3, r2
 800a55c:	610b      	str	r3, [r1, #16]
}
 800a55e:	bf00      	nop
 800a560:	3730      	adds	r7, #48	; 0x30
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	58024400 	.word	0x58024400
 800a56c:	58020000 	.word	0x58020000
 800a570:	58020800 	.word	0x58020800

0800a574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a574:	b480      	push	{r7}
 800a576:	b089      	sub	sp, #36	; 0x24
 800a578:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a57a:	4bb3      	ldr	r3, [pc, #716]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a57c:	691b      	ldr	r3, [r3, #16]
 800a57e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a582:	2b18      	cmp	r3, #24
 800a584:	f200 8155 	bhi.w	800a832 <HAL_RCC_GetSysClockFreq+0x2be>
 800a588:	a201      	add	r2, pc, #4	; (adr r2, 800a590 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a58a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a58e:	bf00      	nop
 800a590:	0800a5f5 	.word	0x0800a5f5
 800a594:	0800a833 	.word	0x0800a833
 800a598:	0800a833 	.word	0x0800a833
 800a59c:	0800a833 	.word	0x0800a833
 800a5a0:	0800a833 	.word	0x0800a833
 800a5a4:	0800a833 	.word	0x0800a833
 800a5a8:	0800a833 	.word	0x0800a833
 800a5ac:	0800a833 	.word	0x0800a833
 800a5b0:	0800a61b 	.word	0x0800a61b
 800a5b4:	0800a833 	.word	0x0800a833
 800a5b8:	0800a833 	.word	0x0800a833
 800a5bc:	0800a833 	.word	0x0800a833
 800a5c0:	0800a833 	.word	0x0800a833
 800a5c4:	0800a833 	.word	0x0800a833
 800a5c8:	0800a833 	.word	0x0800a833
 800a5cc:	0800a833 	.word	0x0800a833
 800a5d0:	0800a621 	.word	0x0800a621
 800a5d4:	0800a833 	.word	0x0800a833
 800a5d8:	0800a833 	.word	0x0800a833
 800a5dc:	0800a833 	.word	0x0800a833
 800a5e0:	0800a833 	.word	0x0800a833
 800a5e4:	0800a833 	.word	0x0800a833
 800a5e8:	0800a833 	.word	0x0800a833
 800a5ec:	0800a833 	.word	0x0800a833
 800a5f0:	0800a627 	.word	0x0800a627
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5f4:	4b94      	ldr	r3, [pc, #592]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 0320 	and.w	r3, r3, #32
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d009      	beq.n	800a614 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a600:	4b91      	ldr	r3, [pc, #580]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	08db      	lsrs	r3, r3, #3
 800a606:	f003 0303 	and.w	r3, r3, #3
 800a60a:	4a90      	ldr	r2, [pc, #576]	; (800a84c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a60c:	fa22 f303 	lsr.w	r3, r2, r3
 800a610:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a612:	e111      	b.n	800a838 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a614:	4b8d      	ldr	r3, [pc, #564]	; (800a84c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a616:	61bb      	str	r3, [r7, #24]
      break;
 800a618:	e10e      	b.n	800a838 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a61a:	4b8d      	ldr	r3, [pc, #564]	; (800a850 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a61c:	61bb      	str	r3, [r7, #24]
      break;
 800a61e:	e10b      	b.n	800a838 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a620:	4b8c      	ldr	r3, [pc, #560]	; (800a854 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a622:	61bb      	str	r3, [r7, #24]
      break;
 800a624:	e108      	b.n	800a838 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a626:	4b88      	ldr	r3, [pc, #544]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62a:	f003 0303 	and.w	r3, r3, #3
 800a62e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a630:	4b85      	ldr	r3, [pc, #532]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a634:	091b      	lsrs	r3, r3, #4
 800a636:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a63a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a63c:	4b82      	ldr	r3, [pc, #520]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a640:	f003 0301 	and.w	r3, r3, #1
 800a644:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a646:	4b80      	ldr	r3, [pc, #512]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a64a:	08db      	lsrs	r3, r3, #3
 800a64c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	fb02 f303 	mul.w	r3, r2, r3
 800a656:	ee07 3a90 	vmov	s15, r3
 800a65a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a65e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	2b00      	cmp	r3, #0
 800a666:	f000 80e1 	beq.w	800a82c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	f000 8083 	beq.w	800a778 <HAL_RCC_GetSysClockFreq+0x204>
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	2b02      	cmp	r3, #2
 800a676:	f200 80a1 	bhi.w	800a7bc <HAL_RCC_GetSysClockFreq+0x248>
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d003      	beq.n	800a688 <HAL_RCC_GetSysClockFreq+0x114>
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	2b01      	cmp	r3, #1
 800a684:	d056      	beq.n	800a734 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a686:	e099      	b.n	800a7bc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a688:	4b6f      	ldr	r3, [pc, #444]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 0320 	and.w	r3, r3, #32
 800a690:	2b00      	cmp	r3, #0
 800a692:	d02d      	beq.n	800a6f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a694:	4b6c      	ldr	r3, [pc, #432]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	08db      	lsrs	r3, r3, #3
 800a69a:	f003 0303 	and.w	r3, r3, #3
 800a69e:	4a6b      	ldr	r2, [pc, #428]	; (800a84c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a6a0:	fa22 f303 	lsr.w	r3, r2, r3
 800a6a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	ee07 3a90 	vmov	s15, r3
 800a6ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6b0:	693b      	ldr	r3, [r7, #16]
 800a6b2:	ee07 3a90 	vmov	s15, r3
 800a6b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6be:	4b62      	ldr	r3, [pc, #392]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6c6:	ee07 3a90 	vmov	s15, r3
 800a6ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a858 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a6ee:	e087      	b.n	800a800 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	ee07 3a90 	vmov	s15, r3
 800a6f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a85c <HAL_RCC_GetSysClockFreq+0x2e8>
 800a6fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a702:	4b51      	ldr	r3, [pc, #324]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a70a:	ee07 3a90 	vmov	s15, r3
 800a70e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a712:	ed97 6a02 	vldr	s12, [r7, #8]
 800a716:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a858 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a71a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a71e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a72a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a72e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a732:	e065      	b.n	800a800 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a734:	693b      	ldr	r3, [r7, #16]
 800a736:	ee07 3a90 	vmov	s15, r3
 800a73a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a73e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a860 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a746:	4b40      	ldr	r3, [pc, #256]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a74e:	ee07 3a90 	vmov	s15, r3
 800a752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a756:	ed97 6a02 	vldr	s12, [r7, #8]
 800a75a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a858 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a75e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a76a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a76e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a772:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a776:	e043      	b.n	800a800 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	ee07 3a90 	vmov	s15, r3
 800a77e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a782:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a864 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a786:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a78a:	4b2f      	ldr	r3, [pc, #188]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a78e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a792:	ee07 3a90 	vmov	s15, r3
 800a796:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a79a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a79e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a858 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a7ba:	e021      	b.n	800a800 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7bc:	693b      	ldr	r3, [r7, #16]
 800a7be:	ee07 3a90 	vmov	s15, r3
 800a7c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a860 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a7ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ce:	4b1e      	ldr	r3, [pc, #120]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7d6:	ee07 3a90 	vmov	s15, r3
 800a7da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7de:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a858 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a7fe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a800:	4b11      	ldr	r3, [pc, #68]	; (800a848 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a804:	0a5b      	lsrs	r3, r3, #9
 800a806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a80a:	3301      	adds	r3, #1
 800a80c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a80e:	683b      	ldr	r3, [r7, #0]
 800a810:	ee07 3a90 	vmov	s15, r3
 800a814:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a818:	edd7 6a07 	vldr	s13, [r7, #28]
 800a81c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a824:	ee17 3a90 	vmov	r3, s15
 800a828:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a82a:	e005      	b.n	800a838 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a82c:	2300      	movs	r3, #0
 800a82e:	61bb      	str	r3, [r7, #24]
      break;
 800a830:	e002      	b.n	800a838 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a832:	4b07      	ldr	r3, [pc, #28]	; (800a850 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a834:	61bb      	str	r3, [r7, #24]
      break;
 800a836:	bf00      	nop
  }

  return sysclockfreq;
 800a838:	69bb      	ldr	r3, [r7, #24]
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3724      	adds	r7, #36	; 0x24
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop
 800a848:	58024400 	.word	0x58024400
 800a84c:	03d09000 	.word	0x03d09000
 800a850:	003d0900 	.word	0x003d0900
 800a854:	02faf080 	.word	0x02faf080
 800a858:	46000000 	.word	0x46000000
 800a85c:	4c742400 	.word	0x4c742400
 800a860:	4a742400 	.word	0x4a742400
 800a864:	4c3ebc20 	.word	0x4c3ebc20

0800a868 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a86e:	f7ff fe81 	bl	800a574 <HAL_RCC_GetSysClockFreq>
 800a872:	4602      	mov	r2, r0
 800a874:	4b10      	ldr	r3, [pc, #64]	; (800a8b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a876:	699b      	ldr	r3, [r3, #24]
 800a878:	0a1b      	lsrs	r3, r3, #8
 800a87a:	f003 030f 	and.w	r3, r3, #15
 800a87e:	490f      	ldr	r1, [pc, #60]	; (800a8bc <HAL_RCC_GetHCLKFreq+0x54>)
 800a880:	5ccb      	ldrb	r3, [r1, r3]
 800a882:	f003 031f 	and.w	r3, r3, #31
 800a886:	fa22 f303 	lsr.w	r3, r2, r3
 800a88a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a88c:	4b0a      	ldr	r3, [pc, #40]	; (800a8b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a88e:	699b      	ldr	r3, [r3, #24]
 800a890:	f003 030f 	and.w	r3, r3, #15
 800a894:	4a09      	ldr	r2, [pc, #36]	; (800a8bc <HAL_RCC_GetHCLKFreq+0x54>)
 800a896:	5cd3      	ldrb	r3, [r2, r3]
 800a898:	f003 031f 	and.w	r3, r3, #31
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	fa22 f303 	lsr.w	r3, r2, r3
 800a8a2:	4a07      	ldr	r2, [pc, #28]	; (800a8c0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a8a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a8a6:	4a07      	ldr	r2, [pc, #28]	; (800a8c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a8ac:	4b04      	ldr	r3, [pc, #16]	; (800a8c0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}
 800a8b8:	58024400 	.word	0x58024400
 800a8bc:	0801e018 	.word	0x0801e018
 800a8c0:	24000004 	.word	0x24000004
 800a8c4:	24000000 	.word	0x24000000

0800a8c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a8cc:	f7ff ffcc 	bl	800a868 <HAL_RCC_GetHCLKFreq>
 800a8d0:	4602      	mov	r2, r0
 800a8d2:	4b06      	ldr	r3, [pc, #24]	; (800a8ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800a8d4:	69db      	ldr	r3, [r3, #28]
 800a8d6:	091b      	lsrs	r3, r3, #4
 800a8d8:	f003 0307 	and.w	r3, r3, #7
 800a8dc:	4904      	ldr	r1, [pc, #16]	; (800a8f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a8de:	5ccb      	ldrb	r3, [r1, r3]
 800a8e0:	f003 031f 	and.w	r3, r3, #31
 800a8e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	58024400 	.word	0x58024400
 800a8f0:	0801e018 	.word	0x0801e018

0800a8f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a8f8:	f7ff ffb6 	bl	800a868 <HAL_RCC_GetHCLKFreq>
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	4b06      	ldr	r3, [pc, #24]	; (800a918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a900:	69db      	ldr	r3, [r3, #28]
 800a902:	0a1b      	lsrs	r3, r3, #8
 800a904:	f003 0307 	and.w	r3, r3, #7
 800a908:	4904      	ldr	r1, [pc, #16]	; (800a91c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a90a:	5ccb      	ldrb	r3, [r1, r3]
 800a90c:	f003 031f 	and.w	r3, r3, #31
 800a910:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a914:	4618      	mov	r0, r3
 800a916:	bd80      	pop	{r7, pc}
 800a918:	58024400 	.word	0x58024400
 800a91c:	0801e018 	.word	0x0801e018

0800a920 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a924:	b0c6      	sub	sp, #280	; 0x118
 800a926:	af00      	add	r7, sp, #0
 800a928:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a92c:	2300      	movs	r3, #0
 800a92e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a932:	2300      	movs	r3, #0
 800a934:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a938:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a940:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a944:	2500      	movs	r5, #0
 800a946:	ea54 0305 	orrs.w	r3, r4, r5
 800a94a:	d049      	beq.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a94c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a950:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a952:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a956:	d02f      	beq.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a958:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a95c:	d828      	bhi.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a95e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a962:	d01a      	beq.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a964:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a968:	d822      	bhi.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d003      	beq.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a96e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a972:	d007      	beq.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a974:	e01c      	b.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a976:	4bab      	ldr	r3, [pc, #684]	; (800ac24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97a:	4aaa      	ldr	r2, [pc, #680]	; (800ac24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a97c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a980:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a982:	e01a      	b.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a988:	3308      	adds	r3, #8
 800a98a:	2102      	movs	r1, #2
 800a98c:	4618      	mov	r0, r3
 800a98e:	f002 fa49 	bl	800ce24 <RCCEx_PLL2_Config>
 800a992:	4603      	mov	r3, r0
 800a994:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a998:	e00f      	b.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a99a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a99e:	3328      	adds	r3, #40	; 0x28
 800a9a0:	2102      	movs	r1, #2
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f002 faf0 	bl	800cf88 <RCCEx_PLL3_Config>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a9ae:	e004      	b.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a9b6:	e000      	b.n	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a9b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d10a      	bne.n	800a9d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a9c2:	4b98      	ldr	r3, [pc, #608]	; (800ac24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a9d0:	4a94      	ldr	r2, [pc, #592]	; (800ac24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9d2:	430b      	orrs	r3, r1
 800a9d4:	6513      	str	r3, [r2, #80]	; 0x50
 800a9d6:	e003      	b.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a9e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9e8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a9ec:	f04f 0900 	mov.w	r9, #0
 800a9f0:	ea58 0309 	orrs.w	r3, r8, r9
 800a9f4:	d047      	beq.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a9f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9fc:	2b04      	cmp	r3, #4
 800a9fe:	d82a      	bhi.n	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800aa00:	a201      	add	r2, pc, #4	; (adr r2, 800aa08 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800aa02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa06:	bf00      	nop
 800aa08:	0800aa1d 	.word	0x0800aa1d
 800aa0c:	0800aa2b 	.word	0x0800aa2b
 800aa10:	0800aa41 	.word	0x0800aa41
 800aa14:	0800aa5f 	.word	0x0800aa5f
 800aa18:	0800aa5f 	.word	0x0800aa5f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa1c:	4b81      	ldr	r3, [pc, #516]	; (800ac24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa20:	4a80      	ldr	r2, [pc, #512]	; (800ac24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa28:	e01a      	b.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa2e:	3308      	adds	r3, #8
 800aa30:	2100      	movs	r1, #0
 800aa32:	4618      	mov	r0, r3
 800aa34:	f002 f9f6 	bl	800ce24 <RCCEx_PLL2_Config>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa3e:	e00f      	b.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa44:	3328      	adds	r3, #40	; 0x28
 800aa46:	2100      	movs	r1, #0
 800aa48:	4618      	mov	r0, r3
 800aa4a:	f002 fa9d 	bl	800cf88 <RCCEx_PLL3_Config>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa54:	e004      	b.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa56:	2301      	movs	r3, #1
 800aa58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa5c:	e000      	b.n	800aa60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800aa5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d10a      	bne.n	800aa7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aa68:	4b6e      	ldr	r3, [pc, #440]	; (800ac24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa6c:	f023 0107 	bic.w	r1, r3, #7
 800aa70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa76:	4a6b      	ldr	r2, [pc, #428]	; (800ac24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa78:	430b      	orrs	r3, r1
 800aa7a:	6513      	str	r3, [r2, #80]	; 0x50
 800aa7c:	e003      	b.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa7e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa82:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800aa86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa8e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800aa92:	f04f 0b00 	mov.w	fp, #0
 800aa96:	ea5a 030b 	orrs.w	r3, sl, fp
 800aa9a:	d05b      	beq.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800aa9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800aaa4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800aaa8:	d03b      	beq.n	800ab22 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800aaaa:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800aaae:	d834      	bhi.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aab0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aab4:	d037      	beq.n	800ab26 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800aab6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aaba:	d82e      	bhi.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aabc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aac0:	d033      	beq.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800aac2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800aac6:	d828      	bhi.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aac8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aacc:	d01a      	beq.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800aace:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aad2:	d822      	bhi.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d003      	beq.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800aad8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aadc:	d007      	beq.n	800aaee <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800aade:	e01c      	b.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aae0:	4b50      	ldr	r3, [pc, #320]	; (800ac24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aae4:	4a4f      	ldr	r2, [pc, #316]	; (800ac24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aae6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aaea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aaec:	e01e      	b.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aaee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf2:	3308      	adds	r3, #8
 800aaf4:	2100      	movs	r1, #0
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f002 f994 	bl	800ce24 <RCCEx_PLL2_Config>
 800aafc:	4603      	mov	r3, r0
 800aafe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ab02:	e013      	b.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab08:	3328      	adds	r3, #40	; 0x28
 800ab0a:	2100      	movs	r1, #0
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f002 fa3b 	bl	800cf88 <RCCEx_PLL3_Config>
 800ab12:	4603      	mov	r3, r0
 800ab14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab18:	e008      	b.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ab1a:	2301      	movs	r3, #1
 800ab1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab20:	e004      	b.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ab22:	bf00      	nop
 800ab24:	e002      	b.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ab26:	bf00      	nop
 800ab28:	e000      	b.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800ab2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10b      	bne.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ab34:	4b3b      	ldr	r3, [pc, #236]	; (800ac24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab38:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ab3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab40:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ab44:	4a37      	ldr	r2, [pc, #220]	; (800ac24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab46:	430b      	orrs	r3, r1
 800ab48:	6593      	str	r3, [r2, #88]	; 0x58
 800ab4a:	e003      	b.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ab54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ab60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ab64:	2300      	movs	r3, #0
 800ab66:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ab6a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ab6e:	460b      	mov	r3, r1
 800ab70:	4313      	orrs	r3, r2
 800ab72:	d05d      	beq.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ab74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab78:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ab7c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800ab80:	d03b      	beq.n	800abfa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800ab82:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800ab86:	d834      	bhi.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ab88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab8c:	d037      	beq.n	800abfe <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800ab8e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ab92:	d82e      	bhi.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ab94:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab98:	d033      	beq.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800ab9a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ab9e:	d828      	bhi.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800aba0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800aba4:	d01a      	beq.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800aba6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800abaa:	d822      	bhi.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800abac:	2b00      	cmp	r3, #0
 800abae:	d003      	beq.n	800abb8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800abb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800abb4:	d007      	beq.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800abb6:	e01c      	b.n	800abf2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abb8:	4b1a      	ldr	r3, [pc, #104]	; (800ac24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800abba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abbc:	4a19      	ldr	r2, [pc, #100]	; (800ac24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800abbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800abc4:	e01e      	b.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abca:	3308      	adds	r3, #8
 800abcc:	2100      	movs	r1, #0
 800abce:	4618      	mov	r0, r3
 800abd0:	f002 f928 	bl	800ce24 <RCCEx_PLL2_Config>
 800abd4:	4603      	mov	r3, r0
 800abd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800abda:	e013      	b.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800abdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abe0:	3328      	adds	r3, #40	; 0x28
 800abe2:	2100      	movs	r1, #0
 800abe4:	4618      	mov	r0, r3
 800abe6:	f002 f9cf 	bl	800cf88 <RCCEx_PLL3_Config>
 800abea:	4603      	mov	r3, r0
 800abec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800abf0:	e008      	b.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800abf8:	e004      	b.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800abfa:	bf00      	nop
 800abfc:	e002      	b.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800abfe:	bf00      	nop
 800ac00:	e000      	b.n	800ac04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800ac02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d10d      	bne.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ac0c:	4b05      	ldr	r3, [pc, #20]	; (800ac24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac10:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ac14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac18:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ac1c:	4a01      	ldr	r2, [pc, #4]	; (800ac24 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac1e:	430b      	orrs	r3, r1
 800ac20:	6593      	str	r3, [r2, #88]	; 0x58
 800ac22:	e005      	b.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800ac24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800ac30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac38:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ac3c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ac40:	2300      	movs	r3, #0
 800ac42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac46:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ac4a:	460b      	mov	r3, r1
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	d03a      	beq.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800ac50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac56:	2b30      	cmp	r3, #48	; 0x30
 800ac58:	d01f      	beq.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800ac5a:	2b30      	cmp	r3, #48	; 0x30
 800ac5c:	d819      	bhi.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ac5e:	2b20      	cmp	r3, #32
 800ac60:	d00c      	beq.n	800ac7c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800ac62:	2b20      	cmp	r3, #32
 800ac64:	d815      	bhi.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d019      	beq.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ac6a:	2b10      	cmp	r3, #16
 800ac6c:	d111      	bne.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac6e:	4baa      	ldr	r3, [pc, #680]	; (800af18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac72:	4aa9      	ldr	r2, [pc, #676]	; (800af18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ac7a:	e011      	b.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac80:	3308      	adds	r3, #8
 800ac82:	2102      	movs	r1, #2
 800ac84:	4618      	mov	r0, r3
 800ac86:	f002 f8cd 	bl	800ce24 <RCCEx_PLL2_Config>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ac90:	e006      	b.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac98:	e002      	b.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ac9a:	bf00      	nop
 800ac9c:	e000      	b.n	800aca0 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ac9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aca0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10a      	bne.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800aca8:	4b9b      	ldr	r3, [pc, #620]	; (800af18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acac:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800acb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acb6:	4a98      	ldr	r2, [pc, #608]	; (800af18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800acb8:	430b      	orrs	r3, r1
 800acba:	64d3      	str	r3, [r2, #76]	; 0x4c
 800acbc:	e003      	b.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acbe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acc2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800acc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acce:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800acd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800acd6:	2300      	movs	r3, #0
 800acd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800acdc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ace0:	460b      	mov	r3, r1
 800ace2:	4313      	orrs	r3, r2
 800ace4:	d051      	beq.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ace6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acf0:	d035      	beq.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800acf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800acf6:	d82e      	bhi.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800acf8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800acfc:	d031      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800acfe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ad02:	d828      	bhi.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ad04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad08:	d01a      	beq.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ad0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad0e:	d822      	bhi.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d003      	beq.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ad14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad18:	d007      	beq.n	800ad2a <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ad1a:	e01c      	b.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad1c:	4b7e      	ldr	r3, [pc, #504]	; (800af18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad20:	4a7d      	ldr	r2, [pc, #500]	; (800af18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad26:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ad28:	e01c      	b.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad2e:	3308      	adds	r3, #8
 800ad30:	2100      	movs	r1, #0
 800ad32:	4618      	mov	r0, r3
 800ad34:	f002 f876 	bl	800ce24 <RCCEx_PLL2_Config>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ad3e:	e011      	b.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad44:	3328      	adds	r3, #40	; 0x28
 800ad46:	2100      	movs	r1, #0
 800ad48:	4618      	mov	r0, r3
 800ad4a:	f002 f91d 	bl	800cf88 <RCCEx_PLL3_Config>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ad54:	e006      	b.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad5c:	e002      	b.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ad5e:	bf00      	nop
 800ad60:	e000      	b.n	800ad64 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800ad62:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d10a      	bne.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ad6c:	4b6a      	ldr	r3, [pc, #424]	; (800af18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad70:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ad74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad7a:	4a67      	ldr	r2, [pc, #412]	; (800af18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad7c:	430b      	orrs	r3, r1
 800ad7e:	6513      	str	r3, [r2, #80]	; 0x50
 800ad80:	e003      	b.n	800ad8a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad86:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ad8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad92:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800ad96:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ada0:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800ada4:	460b      	mov	r3, r1
 800ada6:	4313      	orrs	r3, r2
 800ada8:	d053      	beq.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800adaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800adb4:	d033      	beq.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800adb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800adba:	d82c      	bhi.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800adbc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800adc0:	d02f      	beq.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800adc2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800adc6:	d826      	bhi.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800adc8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800adcc:	d02b      	beq.n	800ae26 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800adce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800add2:	d820      	bhi.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800add4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800add8:	d012      	beq.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800adda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800adde:	d81a      	bhi.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d022      	beq.n	800ae2a <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ade4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ade8:	d115      	bne.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800adea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adee:	3308      	adds	r3, #8
 800adf0:	2101      	movs	r1, #1
 800adf2:	4618      	mov	r0, r3
 800adf4:	f002 f816 	bl	800ce24 <RCCEx_PLL2_Config>
 800adf8:	4603      	mov	r3, r0
 800adfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800adfe:	e015      	b.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae04:	3328      	adds	r3, #40	; 0x28
 800ae06:	2101      	movs	r1, #1
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f002 f8bd 	bl	800cf88 <RCCEx_PLL3_Config>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ae14:	e00a      	b.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae16:	2301      	movs	r3, #1
 800ae18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae1c:	e006      	b.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ae1e:	bf00      	nop
 800ae20:	e004      	b.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ae22:	bf00      	nop
 800ae24:	e002      	b.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ae26:	bf00      	nop
 800ae28:	e000      	b.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ae2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d10a      	bne.n	800ae4a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ae34:	4b38      	ldr	r3, [pc, #224]	; (800af18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae38:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ae3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae42:	4a35      	ldr	r2, [pc, #212]	; (800af18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae44:	430b      	orrs	r3, r1
 800ae46:	6513      	str	r3, [r2, #80]	; 0x50
 800ae48:	e003      	b.n	800ae52 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae4e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ae52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800ae5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ae62:	2300      	movs	r3, #0
 800ae64:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae68:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	4313      	orrs	r3, r2
 800ae70:	d058      	beq.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800ae72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ae7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae7e:	d033      	beq.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800ae80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ae84:	d82c      	bhi.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ae86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae8a:	d02f      	beq.n	800aeec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800ae8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae90:	d826      	bhi.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ae92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae96:	d02b      	beq.n	800aef0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800ae98:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ae9c:	d820      	bhi.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ae9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aea2:	d012      	beq.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800aea4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aea8:	d81a      	bhi.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d022      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800aeae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aeb2:	d115      	bne.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aeb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb8:	3308      	adds	r3, #8
 800aeba:	2101      	movs	r1, #1
 800aebc:	4618      	mov	r0, r3
 800aebe:	f001 ffb1 	bl	800ce24 <RCCEx_PLL2_Config>
 800aec2:	4603      	mov	r3, r0
 800aec4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aec8:	e015      	b.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aeca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aece:	3328      	adds	r3, #40	; 0x28
 800aed0:	2101      	movs	r1, #1
 800aed2:	4618      	mov	r0, r3
 800aed4:	f002 f858 	bl	800cf88 <RCCEx_PLL3_Config>
 800aed8:	4603      	mov	r3, r0
 800aeda:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aede:	e00a      	b.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aee6:	e006      	b.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aee8:	bf00      	nop
 800aeea:	e004      	b.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aeec:	bf00      	nop
 800aeee:	e002      	b.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aef0:	bf00      	nop
 800aef2:	e000      	b.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800aef4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aef6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d10e      	bne.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800aefe:	4b06      	ldr	r3, [pc, #24]	; (800af18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af02:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800af06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800af0e:	4a02      	ldr	r2, [pc, #8]	; (800af18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af10:	430b      	orrs	r3, r1
 800af12:	6593      	str	r3, [r2, #88]	; 0x58
 800af14:	e006      	b.n	800af24 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800af16:	bf00      	nop
 800af18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800af24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800af30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af34:	2300      	movs	r3, #0
 800af36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800af3a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800af3e:	460b      	mov	r3, r1
 800af40:	4313      	orrs	r3, r2
 800af42:	d037      	beq.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800af44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800af4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af4e:	d00e      	beq.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800af50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af54:	d816      	bhi.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800af56:	2b00      	cmp	r3, #0
 800af58:	d018      	beq.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800af5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800af5e:	d111      	bne.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af60:	4bc4      	ldr	r3, [pc, #784]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af64:	4ac3      	ldr	r2, [pc, #780]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800af6c:	e00f      	b.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af72:	3308      	adds	r3, #8
 800af74:	2101      	movs	r1, #1
 800af76:	4618      	mov	r0, r3
 800af78:	f001 ff54 	bl	800ce24 <RCCEx_PLL2_Config>
 800af7c:	4603      	mov	r3, r0
 800af7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800af82:	e004      	b.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af84:	2301      	movs	r3, #1
 800af86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af8a:	e000      	b.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800af8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10a      	bne.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800af96:	4bb7      	ldr	r3, [pc, #732]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af9a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800af9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afa4:	4ab3      	ldr	r2, [pc, #716]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afa6:	430b      	orrs	r3, r1
 800afa8:	6513      	str	r3, [r2, #80]	; 0x50
 800afaa:	e003      	b.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afb0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800afb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800afc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800afc4:	2300      	movs	r3, #0
 800afc6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800afca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800afce:	460b      	mov	r3, r1
 800afd0:	4313      	orrs	r3, r2
 800afd2:	d039      	beq.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800afd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800afda:	2b03      	cmp	r3, #3
 800afdc:	d81c      	bhi.n	800b018 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800afde:	a201      	add	r2, pc, #4	; (adr r2, 800afe4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800afe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe4:	0800b021 	.word	0x0800b021
 800afe8:	0800aff5 	.word	0x0800aff5
 800afec:	0800b003 	.word	0x0800b003
 800aff0:	0800b021 	.word	0x0800b021
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aff4:	4b9f      	ldr	r3, [pc, #636]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aff8:	4a9e      	ldr	r2, [pc, #632]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800affa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800affe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b000:	e00f      	b.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b006:	3308      	adds	r3, #8
 800b008:	2102      	movs	r1, #2
 800b00a:	4618      	mov	r0, r3
 800b00c:	f001 ff0a 	bl	800ce24 <RCCEx_PLL2_Config>
 800b010:	4603      	mov	r3, r0
 800b012:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b016:	e004      	b.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b018:	2301      	movs	r3, #1
 800b01a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b01e:	e000      	b.n	800b022 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b020:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b022:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b026:	2b00      	cmp	r3, #0
 800b028:	d10a      	bne.n	800b040 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b02a:	4b92      	ldr	r3, [pc, #584]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b02c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b02e:	f023 0103 	bic.w	r1, r3, #3
 800b032:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b036:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b038:	4a8e      	ldr	r2, [pc, #568]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b03a:	430b      	orrs	r3, r1
 800b03c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b03e:	e003      	b.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b040:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b044:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b050:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b054:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b058:	2300      	movs	r3, #0
 800b05a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b05e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b062:	460b      	mov	r3, r1
 800b064:	4313      	orrs	r3, r2
 800b066:	f000 8099 	beq.w	800b19c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b06a:	4b83      	ldr	r3, [pc, #524]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a82      	ldr	r2, [pc, #520]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b074:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b076:	f7f8 f931 	bl	80032dc <HAL_GetTick>
 800b07a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b07e:	e00b      	b.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b080:	f7f8 f92c 	bl	80032dc <HAL_GetTick>
 800b084:	4602      	mov	r2, r0
 800b086:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b08a:	1ad3      	subs	r3, r2, r3
 800b08c:	2b64      	cmp	r3, #100	; 0x64
 800b08e:	d903      	bls.n	800b098 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b090:	2303      	movs	r3, #3
 800b092:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b096:	e005      	b.n	800b0a4 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b098:	4b77      	ldr	r3, [pc, #476]	; (800b278 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d0ed      	beq.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b0a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d173      	bne.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b0ac:	4b71      	ldr	r3, [pc, #452]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0b8:	4053      	eors	r3, r2
 800b0ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d015      	beq.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b0c2:	4b6c      	ldr	r3, [pc, #432]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0ca:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b0ce:	4b69      	ldr	r3, [pc, #420]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0d2:	4a68      	ldr	r2, [pc, #416]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0d8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b0da:	4b66      	ldr	r3, [pc, #408]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0de:	4a65      	ldr	r2, [pc, #404]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b0e4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b0e6:	4a63      	ldr	r2, [pc, #396]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b0e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b0ec:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b0ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0fa:	d118      	bne.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0fc:	f7f8 f8ee 	bl	80032dc <HAL_GetTick>
 800b100:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b104:	e00d      	b.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b106:	f7f8 f8e9 	bl	80032dc <HAL_GetTick>
 800b10a:	4602      	mov	r2, r0
 800b10c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b110:	1ad2      	subs	r2, r2, r3
 800b112:	f241 3388 	movw	r3, #5000	; 0x1388
 800b116:	429a      	cmp	r2, r3
 800b118:	d903      	bls.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b11a:	2303      	movs	r3, #3
 800b11c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b120:	e005      	b.n	800b12e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b122:	4b54      	ldr	r3, [pc, #336]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b126:	f003 0302 	and.w	r3, r3, #2
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d0eb      	beq.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b12e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b132:	2b00      	cmp	r3, #0
 800b134:	d129      	bne.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b13a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b13e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b142:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b146:	d10e      	bne.n	800b166 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b148:	4b4a      	ldr	r3, [pc, #296]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b154:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b158:	091a      	lsrs	r2, r3, #4
 800b15a:	4b48      	ldr	r3, [pc, #288]	; (800b27c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b15c:	4013      	ands	r3, r2
 800b15e:	4a45      	ldr	r2, [pc, #276]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b160:	430b      	orrs	r3, r1
 800b162:	6113      	str	r3, [r2, #16]
 800b164:	e005      	b.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b166:	4b43      	ldr	r3, [pc, #268]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b168:	691b      	ldr	r3, [r3, #16]
 800b16a:	4a42      	ldr	r2, [pc, #264]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b16c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b170:	6113      	str	r3, [r2, #16]
 800b172:	4b40      	ldr	r3, [pc, #256]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b174:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b17a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b17e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b182:	4a3c      	ldr	r2, [pc, #240]	; (800b274 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b184:	430b      	orrs	r3, r1
 800b186:	6713      	str	r3, [r2, #112]	; 0x70
 800b188:	e008      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b18a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b18e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b192:	e003      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b194:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b198:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b19c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a4:	f002 0301 	and.w	r3, r2, #1
 800b1a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b1b2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	f000 808f 	beq.w	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b1be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b1c4:	2b28      	cmp	r3, #40	; 0x28
 800b1c6:	d871      	bhi.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b1c8:	a201      	add	r2, pc, #4	; (adr r2, 800b1d0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ce:	bf00      	nop
 800b1d0:	0800b2b5 	.word	0x0800b2b5
 800b1d4:	0800b2ad 	.word	0x0800b2ad
 800b1d8:	0800b2ad 	.word	0x0800b2ad
 800b1dc:	0800b2ad 	.word	0x0800b2ad
 800b1e0:	0800b2ad 	.word	0x0800b2ad
 800b1e4:	0800b2ad 	.word	0x0800b2ad
 800b1e8:	0800b2ad 	.word	0x0800b2ad
 800b1ec:	0800b2ad 	.word	0x0800b2ad
 800b1f0:	0800b281 	.word	0x0800b281
 800b1f4:	0800b2ad 	.word	0x0800b2ad
 800b1f8:	0800b2ad 	.word	0x0800b2ad
 800b1fc:	0800b2ad 	.word	0x0800b2ad
 800b200:	0800b2ad 	.word	0x0800b2ad
 800b204:	0800b2ad 	.word	0x0800b2ad
 800b208:	0800b2ad 	.word	0x0800b2ad
 800b20c:	0800b2ad 	.word	0x0800b2ad
 800b210:	0800b297 	.word	0x0800b297
 800b214:	0800b2ad 	.word	0x0800b2ad
 800b218:	0800b2ad 	.word	0x0800b2ad
 800b21c:	0800b2ad 	.word	0x0800b2ad
 800b220:	0800b2ad 	.word	0x0800b2ad
 800b224:	0800b2ad 	.word	0x0800b2ad
 800b228:	0800b2ad 	.word	0x0800b2ad
 800b22c:	0800b2ad 	.word	0x0800b2ad
 800b230:	0800b2b5 	.word	0x0800b2b5
 800b234:	0800b2ad 	.word	0x0800b2ad
 800b238:	0800b2ad 	.word	0x0800b2ad
 800b23c:	0800b2ad 	.word	0x0800b2ad
 800b240:	0800b2ad 	.word	0x0800b2ad
 800b244:	0800b2ad 	.word	0x0800b2ad
 800b248:	0800b2ad 	.word	0x0800b2ad
 800b24c:	0800b2ad 	.word	0x0800b2ad
 800b250:	0800b2b5 	.word	0x0800b2b5
 800b254:	0800b2ad 	.word	0x0800b2ad
 800b258:	0800b2ad 	.word	0x0800b2ad
 800b25c:	0800b2ad 	.word	0x0800b2ad
 800b260:	0800b2ad 	.word	0x0800b2ad
 800b264:	0800b2ad 	.word	0x0800b2ad
 800b268:	0800b2ad 	.word	0x0800b2ad
 800b26c:	0800b2ad 	.word	0x0800b2ad
 800b270:	0800b2b5 	.word	0x0800b2b5
 800b274:	58024400 	.word	0x58024400
 800b278:	58024800 	.word	0x58024800
 800b27c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b280:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b284:	3308      	adds	r3, #8
 800b286:	2101      	movs	r1, #1
 800b288:	4618      	mov	r0, r3
 800b28a:	f001 fdcb 	bl	800ce24 <RCCEx_PLL2_Config>
 800b28e:	4603      	mov	r3, r0
 800b290:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b294:	e00f      	b.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b29a:	3328      	adds	r3, #40	; 0x28
 800b29c:	2101      	movs	r1, #1
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f001 fe72 	bl	800cf88 <RCCEx_PLL3_Config>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b2aa:	e004      	b.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b2b2:	e000      	b.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b2b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d10a      	bne.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b2be:	4bbf      	ldr	r3, [pc, #764]	; (800b5bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2c2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b2c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2cc:	4abb      	ldr	r2, [pc, #748]	; (800b5bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b2ce:	430b      	orrs	r3, r1
 800b2d0:	6553      	str	r3, [r2, #84]	; 0x54
 800b2d2:	e003      	b.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b2dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e4:	f002 0302 	and.w	r3, r2, #2
 800b2e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b2f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	d041      	beq.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b2fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b302:	2b05      	cmp	r3, #5
 800b304:	d824      	bhi.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b306:	a201      	add	r2, pc, #4	; (adr r2, 800b30c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b30c:	0800b359 	.word	0x0800b359
 800b310:	0800b325 	.word	0x0800b325
 800b314:	0800b33b 	.word	0x0800b33b
 800b318:	0800b359 	.word	0x0800b359
 800b31c:	0800b359 	.word	0x0800b359
 800b320:	0800b359 	.word	0x0800b359
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b324:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b328:	3308      	adds	r3, #8
 800b32a:	2101      	movs	r1, #1
 800b32c:	4618      	mov	r0, r3
 800b32e:	f001 fd79 	bl	800ce24 <RCCEx_PLL2_Config>
 800b332:	4603      	mov	r3, r0
 800b334:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b338:	e00f      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33e:	3328      	adds	r3, #40	; 0x28
 800b340:	2101      	movs	r1, #1
 800b342:	4618      	mov	r0, r3
 800b344:	f001 fe20 	bl	800cf88 <RCCEx_PLL3_Config>
 800b348:	4603      	mov	r3, r0
 800b34a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b34e:	e004      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b356:	e000      	b.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b35a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d10a      	bne.n	800b378 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b362:	4b96      	ldr	r3, [pc, #600]	; (800b5bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b366:	f023 0107 	bic.w	r1, r3, #7
 800b36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b36e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b370:	4a92      	ldr	r2, [pc, #584]	; (800b5bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b372:	430b      	orrs	r3, r1
 800b374:	6553      	str	r3, [r2, #84]	; 0x54
 800b376:	e003      	b.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b378:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b37c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b388:	f002 0304 	and.w	r3, r2, #4
 800b38c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b390:	2300      	movs	r3, #0
 800b392:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b396:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b39a:	460b      	mov	r3, r1
 800b39c:	4313      	orrs	r3, r2
 800b39e:	d044      	beq.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3a8:	2b05      	cmp	r3, #5
 800b3aa:	d825      	bhi.n	800b3f8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b3ac:	a201      	add	r2, pc, #4	; (adr r2, 800b3b4 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b3ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3b2:	bf00      	nop
 800b3b4:	0800b401 	.word	0x0800b401
 800b3b8:	0800b3cd 	.word	0x0800b3cd
 800b3bc:	0800b3e3 	.word	0x0800b3e3
 800b3c0:	0800b401 	.word	0x0800b401
 800b3c4:	0800b401 	.word	0x0800b401
 800b3c8:	0800b401 	.word	0x0800b401
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3d0:	3308      	adds	r3, #8
 800b3d2:	2101      	movs	r1, #1
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	f001 fd25 	bl	800ce24 <RCCEx_PLL2_Config>
 800b3da:	4603      	mov	r3, r0
 800b3dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b3e0:	e00f      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3e6:	3328      	adds	r3, #40	; 0x28
 800b3e8:	2101      	movs	r1, #1
 800b3ea:	4618      	mov	r0, r3
 800b3ec:	f001 fdcc 	bl	800cf88 <RCCEx_PLL3_Config>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b3f6:	e004      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3fe:	e000      	b.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b400:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b402:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b406:	2b00      	cmp	r3, #0
 800b408:	d10b      	bne.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b40a:	4b6c      	ldr	r3, [pc, #432]	; (800b5bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b40c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b40e:	f023 0107 	bic.w	r1, r3, #7
 800b412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b41a:	4a68      	ldr	r2, [pc, #416]	; (800b5bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b41c:	430b      	orrs	r3, r1
 800b41e:	6593      	str	r3, [r2, #88]	; 0x58
 800b420:	e003      	b.n	800b42a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b422:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b426:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b42a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b432:	f002 0320 	and.w	r3, r2, #32
 800b436:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b43a:	2300      	movs	r3, #0
 800b43c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b440:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b444:	460b      	mov	r3, r1
 800b446:	4313      	orrs	r3, r2
 800b448:	d055      	beq.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b44a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b44e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b452:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b456:	d033      	beq.n	800b4c0 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b458:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b45c:	d82c      	bhi.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b45e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b462:	d02f      	beq.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b468:	d826      	bhi.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b46a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b46e:	d02b      	beq.n	800b4c8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b470:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b474:	d820      	bhi.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b476:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b47a:	d012      	beq.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b47c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b480:	d81a      	bhi.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b482:	2b00      	cmp	r3, #0
 800b484:	d022      	beq.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b486:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b48a:	d115      	bne.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b48c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b490:	3308      	adds	r3, #8
 800b492:	2100      	movs	r1, #0
 800b494:	4618      	mov	r0, r3
 800b496:	f001 fcc5 	bl	800ce24 <RCCEx_PLL2_Config>
 800b49a:	4603      	mov	r3, r0
 800b49c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b4a0:	e015      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b4a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4a6:	3328      	adds	r3, #40	; 0x28
 800b4a8:	2102      	movs	r1, #2
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f001 fd6c 	bl	800cf88 <RCCEx_PLL3_Config>
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b4b6:	e00a      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b4be:	e006      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b4c0:	bf00      	nop
 800b4c2:	e004      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b4c4:	bf00      	nop
 800b4c6:	e002      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b4c8:	bf00      	nop
 800b4ca:	e000      	b.n	800b4ce <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b4cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4ce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d10b      	bne.n	800b4ee <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b4d6:	4b39      	ldr	r3, [pc, #228]	; (800b5bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4da:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b4de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b4e6:	4a35      	ldr	r2, [pc, #212]	; (800b5bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b4e8:	430b      	orrs	r3, r1
 800b4ea:	6553      	str	r3, [r2, #84]	; 0x54
 800b4ec:	e003      	b.n	800b4f6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4f2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b4f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b502:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b506:	2300      	movs	r3, #0
 800b508:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b50c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b510:	460b      	mov	r3, r1
 800b512:	4313      	orrs	r3, r2
 800b514:	d058      	beq.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b516:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b51a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b51e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b522:	d033      	beq.n	800b58c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b524:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b528:	d82c      	bhi.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b52a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b52e:	d02f      	beq.n	800b590 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b534:	d826      	bhi.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b536:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b53a:	d02b      	beq.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b53c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b540:	d820      	bhi.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b542:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b546:	d012      	beq.n	800b56e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b548:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b54c:	d81a      	bhi.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d022      	beq.n	800b598 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b552:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b556:	d115      	bne.n	800b584 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b55c:	3308      	adds	r3, #8
 800b55e:	2100      	movs	r1, #0
 800b560:	4618      	mov	r0, r3
 800b562:	f001 fc5f 	bl	800ce24 <RCCEx_PLL2_Config>
 800b566:	4603      	mov	r3, r0
 800b568:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b56c:	e015      	b.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b56e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b572:	3328      	adds	r3, #40	; 0x28
 800b574:	2102      	movs	r1, #2
 800b576:	4618      	mov	r0, r3
 800b578:	f001 fd06 	bl	800cf88 <RCCEx_PLL3_Config>
 800b57c:	4603      	mov	r3, r0
 800b57e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b582:	e00a      	b.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b584:	2301      	movs	r3, #1
 800b586:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b58a:	e006      	b.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b58c:	bf00      	nop
 800b58e:	e004      	b.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b590:	bf00      	nop
 800b592:	e002      	b.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b594:	bf00      	nop
 800b596:	e000      	b.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b598:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b59a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d10e      	bne.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b5a2:	4b06      	ldr	r3, [pc, #24]	; (800b5bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b5a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5a6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b5b2:	4a02      	ldr	r2, [pc, #8]	; (800b5bc <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b5b4:	430b      	orrs	r3, r1
 800b5b6:	6593      	str	r3, [r2, #88]	; 0x58
 800b5b8:	e006      	b.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b5ba:	bf00      	nop
 800b5bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b5c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b5d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b5d8:	2300      	movs	r3, #0
 800b5da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b5de:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	4313      	orrs	r3, r2
 800b5e6:	d055      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b5e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b5f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b5f4:	d033      	beq.n	800b65e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b5f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b5fa:	d82c      	bhi.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b5fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b600:	d02f      	beq.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b606:	d826      	bhi.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b608:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b60c:	d02b      	beq.n	800b666 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b60e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b612:	d820      	bhi.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b614:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b618:	d012      	beq.n	800b640 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b61a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b61e:	d81a      	bhi.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b620:	2b00      	cmp	r3, #0
 800b622:	d022      	beq.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b624:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b628:	d115      	bne.n	800b656 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b62a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b62e:	3308      	adds	r3, #8
 800b630:	2100      	movs	r1, #0
 800b632:	4618      	mov	r0, r3
 800b634:	f001 fbf6 	bl	800ce24 <RCCEx_PLL2_Config>
 800b638:	4603      	mov	r3, r0
 800b63a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b63e:	e015      	b.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b644:	3328      	adds	r3, #40	; 0x28
 800b646:	2102      	movs	r1, #2
 800b648:	4618      	mov	r0, r3
 800b64a:	f001 fc9d 	bl	800cf88 <RCCEx_PLL3_Config>
 800b64e:	4603      	mov	r3, r0
 800b650:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b654:	e00a      	b.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b65c:	e006      	b.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b65e:	bf00      	nop
 800b660:	e004      	b.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b662:	bf00      	nop
 800b664:	e002      	b.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b666:	bf00      	nop
 800b668:	e000      	b.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b66a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b66c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b670:	2b00      	cmp	r3, #0
 800b672:	d10b      	bne.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b674:	4ba0      	ldr	r3, [pc, #640]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b678:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b67c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b680:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b684:	4a9c      	ldr	r2, [pc, #624]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b686:	430b      	orrs	r3, r1
 800b688:	6593      	str	r3, [r2, #88]	; 0x58
 800b68a:	e003      	b.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b68c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b690:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b694:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69c:	f002 0308 	and.w	r3, r2, #8
 800b6a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b6aa:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	4313      	orrs	r3, r2
 800b6b2:	d01e      	beq.n	800b6f2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b6b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6c0:	d10c      	bne.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c6:	3328      	adds	r3, #40	; 0x28
 800b6c8:	2102      	movs	r1, #2
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f001 fc5c 	bl	800cf88 <RCCEx_PLL3_Config>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d002      	beq.n	800b6dc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b6dc:	4b86      	ldr	r3, [pc, #536]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b6e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6ec:	4a82      	ldr	r2, [pc, #520]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6ee:	430b      	orrs	r3, r1
 800b6f0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fa:	f002 0310 	and.w	r3, r2, #16
 800b6fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b702:	2300      	movs	r3, #0
 800b704:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b708:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b70c:	460b      	mov	r3, r1
 800b70e:	4313      	orrs	r3, r2
 800b710:	d01e      	beq.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b71a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b71e:	d10c      	bne.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b724:	3328      	adds	r3, #40	; 0x28
 800b726:	2102      	movs	r1, #2
 800b728:	4618      	mov	r0, r3
 800b72a:	f001 fc2d 	bl	800cf88 <RCCEx_PLL3_Config>
 800b72e:	4603      	mov	r3, r0
 800b730:	2b00      	cmp	r3, #0
 800b732:	d002      	beq.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b734:	2301      	movs	r3, #1
 800b736:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b73a:	4b6f      	ldr	r3, [pc, #444]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b73c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b73e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b746:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b74a:	4a6b      	ldr	r2, [pc, #428]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b74c:	430b      	orrs	r3, r1
 800b74e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b750:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b758:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b75c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b75e:	2300      	movs	r3, #0
 800b760:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b762:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b766:	460b      	mov	r3, r1
 800b768:	4313      	orrs	r3, r2
 800b76a:	d03e      	beq.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b76c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b770:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b774:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b778:	d022      	beq.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b77a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b77e:	d81b      	bhi.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b780:	2b00      	cmp	r3, #0
 800b782:	d003      	beq.n	800b78c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b788:	d00b      	beq.n	800b7a2 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b78a:	e015      	b.n	800b7b8 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b78c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b790:	3308      	adds	r3, #8
 800b792:	2100      	movs	r1, #0
 800b794:	4618      	mov	r0, r3
 800b796:	f001 fb45 	bl	800ce24 <RCCEx_PLL2_Config>
 800b79a:	4603      	mov	r3, r0
 800b79c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b7a0:	e00f      	b.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7a6:	3328      	adds	r3, #40	; 0x28
 800b7a8:	2102      	movs	r1, #2
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f001 fbec 	bl	800cf88 <RCCEx_PLL3_Config>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b7b6:	e004      	b.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b7be:	e000      	b.n	800b7c2 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b7c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d10b      	bne.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b7ca:	4b4b      	ldr	r3, [pc, #300]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7ce:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b7d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b7da:	4a47      	ldr	r2, [pc, #284]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b7dc:	430b      	orrs	r3, r1
 800b7de:	6593      	str	r3, [r2, #88]	; 0x58
 800b7e0:	e003      	b.n	800b7ea <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b7ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b7f6:	673b      	str	r3, [r7, #112]	; 0x70
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	677b      	str	r3, [r7, #116]	; 0x74
 800b7fc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b800:	460b      	mov	r3, r1
 800b802:	4313      	orrs	r3, r2
 800b804:	d03b      	beq.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b806:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b80a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b80e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b812:	d01f      	beq.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b814:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b818:	d818      	bhi.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b81a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b81e:	d003      	beq.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b820:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b824:	d007      	beq.n	800b836 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b826:	e011      	b.n	800b84c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b828:	4b33      	ldr	r3, [pc, #204]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b82c:	4a32      	ldr	r2, [pc, #200]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b82e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b834:	e00f      	b.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b836:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b83a:	3328      	adds	r3, #40	; 0x28
 800b83c:	2101      	movs	r1, #1
 800b83e:	4618      	mov	r0, r3
 800b840:	f001 fba2 	bl	800cf88 <RCCEx_PLL3_Config>
 800b844:	4603      	mov	r3, r0
 800b846:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b84a:	e004      	b.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b84c:	2301      	movs	r3, #1
 800b84e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b852:	e000      	b.n	800b856 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b854:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b856:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d10b      	bne.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b85e:	4b26      	ldr	r3, [pc, #152]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b862:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b866:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b86a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b86e:	4a22      	ldr	r2, [pc, #136]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b870:	430b      	orrs	r3, r1
 800b872:	6553      	str	r3, [r2, #84]	; 0x54
 800b874:	e003      	b.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b876:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b87a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b87e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b886:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b88a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b88c:	2300      	movs	r3, #0
 800b88e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b890:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b894:	460b      	mov	r3, r1
 800b896:	4313      	orrs	r3, r2
 800b898:	d034      	beq.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b89a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b89e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d003      	beq.n	800b8ac <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b8a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8a8:	d007      	beq.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b8aa:	e011      	b.n	800b8d0 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b8ac:	4b12      	ldr	r3, [pc, #72]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b8ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8b0:	4a11      	ldr	r2, [pc, #68]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b8b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b8b8:	e00e      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b8ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8be:	3308      	adds	r3, #8
 800b8c0:	2102      	movs	r1, #2
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f001 faae 	bl	800ce24 <RCCEx_PLL2_Config>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b8ce:	e003      	b.n	800b8d8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b8d0:	2301      	movs	r3, #1
 800b8d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b8d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d10d      	bne.n	800b8fc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b8e0:	4b05      	ldr	r3, [pc, #20]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b8e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8ee:	4a02      	ldr	r2, [pc, #8]	; (800b8f8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b8f0:	430b      	orrs	r3, r1
 800b8f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b8f4:	e006      	b.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b8f6:	bf00      	nop
 800b8f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b900:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b910:	663b      	str	r3, [r7, #96]	; 0x60
 800b912:	2300      	movs	r3, #0
 800b914:	667b      	str	r3, [r7, #100]	; 0x64
 800b916:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b91a:	460b      	mov	r3, r1
 800b91c:	4313      	orrs	r3, r2
 800b91e:	d00c      	beq.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b924:	3328      	adds	r3, #40	; 0x28
 800b926:	2102      	movs	r1, #2
 800b928:	4618      	mov	r0, r3
 800b92a:	f001 fb2d 	bl	800cf88 <RCCEx_PLL3_Config>
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	d002      	beq.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b934:	2301      	movs	r3, #1
 800b936:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b93a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b942:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b946:	65bb      	str	r3, [r7, #88]	; 0x58
 800b948:	2300      	movs	r3, #0
 800b94a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b94c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b950:	460b      	mov	r3, r1
 800b952:	4313      	orrs	r3, r2
 800b954:	d036      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b95a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b95c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b960:	d018      	beq.n	800b994 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b966:	d811      	bhi.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b96c:	d014      	beq.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b96e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b972:	d80b      	bhi.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b974:	2b00      	cmp	r3, #0
 800b976:	d011      	beq.n	800b99c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b97c:	d106      	bne.n	800b98c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b97e:	4bb7      	ldr	r3, [pc, #732]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b982:	4ab6      	ldr	r2, [pc, #728]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b988:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b98a:	e008      	b.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b98c:	2301      	movs	r3, #1
 800b98e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b992:	e004      	b.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b994:	bf00      	nop
 800b996:	e002      	b.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b998:	bf00      	nop
 800b99a:	e000      	b.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b99c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b99e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d10a      	bne.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b9a6:	4bad      	ldr	r3, [pc, #692]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9aa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b9ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9b4:	4aa9      	ldr	r2, [pc, #676]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9b6:	430b      	orrs	r3, r1
 800b9b8:	6553      	str	r3, [r2, #84]	; 0x54
 800b9ba:	e003      	b.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9cc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b9d0:	653b      	str	r3, [r7, #80]	; 0x50
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	657b      	str	r3, [r7, #84]	; 0x54
 800b9d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b9da:	460b      	mov	r3, r1
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	d009      	beq.n	800b9f4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b9e0:	4b9e      	ldr	r3, [pc, #632]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b9e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9ee:	4a9b      	ldr	r2, [pc, #620]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b9f0:	430b      	orrs	r3, r1
 800b9f2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b9f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9fc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800ba00:	64bb      	str	r3, [r7, #72]	; 0x48
 800ba02:	2300      	movs	r3, #0
 800ba04:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ba06:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800ba0a:	460b      	mov	r3, r1
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	d009      	beq.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ba10:	4b92      	ldr	r3, [pc, #584]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba14:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800ba18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba1e:	4a8f      	ldr	r2, [pc, #572]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba20:	430b      	orrs	r3, r1
 800ba22:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ba24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2c:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800ba30:	643b      	str	r3, [r7, #64]	; 0x40
 800ba32:	2300      	movs	r3, #0
 800ba34:	647b      	str	r3, [r7, #68]	; 0x44
 800ba36:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800ba3a:	460b      	mov	r3, r1
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	d00e      	beq.n	800ba5e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ba40:	4b86      	ldr	r3, [pc, #536]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba42:	691b      	ldr	r3, [r3, #16]
 800ba44:	4a85      	ldr	r2, [pc, #532]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ba4a:	6113      	str	r3, [r2, #16]
 800ba4c:	4b83      	ldr	r3, [pc, #524]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba4e:	6919      	ldr	r1, [r3, #16]
 800ba50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800ba58:	4a80      	ldr	r2, [pc, #512]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba5a:	430b      	orrs	r3, r1
 800ba5c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ba5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba66:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800ba6a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba70:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800ba74:	460b      	mov	r3, r1
 800ba76:	4313      	orrs	r3, r2
 800ba78:	d009      	beq.n	800ba8e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ba7a:	4b78      	ldr	r3, [pc, #480]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba7e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ba82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba88:	4a74      	ldr	r2, [pc, #464]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800ba8a:	430b      	orrs	r3, r1
 800ba8c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ba8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba96:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800ba9a:	633b      	str	r3, [r7, #48]	; 0x30
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	637b      	str	r3, [r7, #52]	; 0x34
 800baa0:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800baa4:	460b      	mov	r3, r1
 800baa6:	4313      	orrs	r3, r2
 800baa8:	d00a      	beq.n	800bac0 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800baaa:	4b6c      	ldr	r3, [pc, #432]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800baac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baae:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800baba:	4a68      	ldr	r2, [pc, #416]	; (800bc5c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800babc:	430b      	orrs	r3, r1
 800babe:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac8:	2100      	movs	r1, #0
 800baca:	62b9      	str	r1, [r7, #40]	; 0x28
 800bacc:	f003 0301 	and.w	r3, r3, #1
 800bad0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bad2:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bad6:	460b      	mov	r3, r1
 800bad8:	4313      	orrs	r3, r2
 800bada:	d011      	beq.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800badc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bae0:	3308      	adds	r3, #8
 800bae2:	2100      	movs	r1, #0
 800bae4:	4618      	mov	r0, r3
 800bae6:	f001 f99d 	bl	800ce24 <RCCEx_PLL2_Config>
 800baea:	4603      	mov	r3, r0
 800baec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800baf0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d003      	beq.n	800bb00 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800baf8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bafc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bb00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb08:	2100      	movs	r1, #0
 800bb0a:	6239      	str	r1, [r7, #32]
 800bb0c:	f003 0302 	and.w	r3, r3, #2
 800bb10:	627b      	str	r3, [r7, #36]	; 0x24
 800bb12:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bb16:	460b      	mov	r3, r1
 800bb18:	4313      	orrs	r3, r2
 800bb1a:	d011      	beq.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb20:	3308      	adds	r3, #8
 800bb22:	2101      	movs	r1, #1
 800bb24:	4618      	mov	r0, r3
 800bb26:	f001 f97d 	bl	800ce24 <RCCEx_PLL2_Config>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d003      	beq.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bb40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb48:	2100      	movs	r1, #0
 800bb4a:	61b9      	str	r1, [r7, #24]
 800bb4c:	f003 0304 	and.w	r3, r3, #4
 800bb50:	61fb      	str	r3, [r7, #28]
 800bb52:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bb56:	460b      	mov	r3, r1
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	d011      	beq.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb60:	3308      	adds	r3, #8
 800bb62:	2102      	movs	r1, #2
 800bb64:	4618      	mov	r0, r3
 800bb66:	f001 f95d 	bl	800ce24 <RCCEx_PLL2_Config>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bb70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d003      	beq.n	800bb80 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bb80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb88:	2100      	movs	r1, #0
 800bb8a:	6139      	str	r1, [r7, #16]
 800bb8c:	f003 0308 	and.w	r3, r3, #8
 800bb90:	617b      	str	r3, [r7, #20]
 800bb92:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bb96:	460b      	mov	r3, r1
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	d011      	beq.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bba0:	3328      	adds	r3, #40	; 0x28
 800bba2:	2100      	movs	r1, #0
 800bba4:	4618      	mov	r0, r3
 800bba6:	f001 f9ef 	bl	800cf88 <RCCEx_PLL3_Config>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800bbb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d003      	beq.n	800bbc0 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbbc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bbc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc8:	2100      	movs	r1, #0
 800bbca:	60b9      	str	r1, [r7, #8]
 800bbcc:	f003 0310 	and.w	r3, r3, #16
 800bbd0:	60fb      	str	r3, [r7, #12]
 800bbd2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	d011      	beq.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbe0:	3328      	adds	r3, #40	; 0x28
 800bbe2:	2101      	movs	r1, #1
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f001 f9cf 	bl	800cf88 <RCCEx_PLL3_Config>
 800bbea:	4603      	mov	r3, r0
 800bbec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bbf0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d003      	beq.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbf8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bbfc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bc00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc08:	2100      	movs	r1, #0
 800bc0a:	6039      	str	r1, [r7, #0]
 800bc0c:	f003 0320 	and.w	r3, r3, #32
 800bc10:	607b      	str	r3, [r7, #4]
 800bc12:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bc16:	460b      	mov	r3, r1
 800bc18:	4313      	orrs	r3, r2
 800bc1a:	d011      	beq.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc20:	3328      	adds	r3, #40	; 0x28
 800bc22:	2102      	movs	r1, #2
 800bc24:	4618      	mov	r0, r3
 800bc26:	f001 f9af 	bl	800cf88 <RCCEx_PLL3_Config>
 800bc2a:	4603      	mov	r3, r0
 800bc2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bc30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d003      	beq.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bc3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800bc40:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d101      	bne.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	e000      	b.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800bc54:	46bd      	mov	sp, r7
 800bc56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bc5a:	bf00      	nop
 800bc5c:	58024400 	.word	0x58024400

0800bc60 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b090      	sub	sp, #64	; 0x40
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bc6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc6e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bc72:	430b      	orrs	r3, r1
 800bc74:	f040 8094 	bne.w	800bda0 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bc78:	4b9b      	ldr	r3, [pc, #620]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc7c:	f003 0307 	and.w	r3, r3, #7
 800bc80:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bc82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc84:	2b04      	cmp	r3, #4
 800bc86:	f200 8087 	bhi.w	800bd98 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bc8a:	a201      	add	r2, pc, #4	; (adr r2, 800bc90 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc90:	0800bca5 	.word	0x0800bca5
 800bc94:	0800bccd 	.word	0x0800bccd
 800bc98:	0800bcf5 	.word	0x0800bcf5
 800bc9c:	0800bd91 	.word	0x0800bd91
 800bca0:	0800bd1d 	.word	0x0800bd1d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bca4:	4b90      	ldr	r3, [pc, #576]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bcb0:	d108      	bne.n	800bcc4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bcb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f000 ff62 	bl	800cb80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bcc0:	f000 bc93 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcc8:	f000 bc8f 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bccc:	4b86      	ldr	r3, [pc, #536]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bcd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bcd8:	d108      	bne.n	800bcec <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bcda:	f107 0318 	add.w	r3, r7, #24
 800bcde:	4618      	mov	r0, r3
 800bce0:	f000 fca6 	bl	800c630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bce4:	69bb      	ldr	r3, [r7, #24]
 800bce6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bce8:	f000 bc7f 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bcec:	2300      	movs	r3, #0
 800bcee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcf0:	f000 bc7b 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bcf4:	4b7c      	ldr	r3, [pc, #496]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bcfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd00:	d108      	bne.n	800bd14 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd02:	f107 030c 	add.w	r3, r7, #12
 800bd06:	4618      	mov	r0, r3
 800bd08:	f000 fde6 	bl	800c8d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bd10:	f000 bc6b 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bd14:	2300      	movs	r3, #0
 800bd16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd18:	f000 bc67 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bd1c:	4b72      	ldr	r3, [pc, #456]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd24:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bd26:	4b70      	ldr	r3, [pc, #448]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f003 0304 	and.w	r3, r3, #4
 800bd2e:	2b04      	cmp	r3, #4
 800bd30:	d10c      	bne.n	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bd32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d109      	bne.n	800bd4c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd38:	4b6b      	ldr	r3, [pc, #428]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	08db      	lsrs	r3, r3, #3
 800bd3e:	f003 0303 	and.w	r3, r3, #3
 800bd42:	4a6a      	ldr	r2, [pc, #424]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bd44:	fa22 f303 	lsr.w	r3, r2, r3
 800bd48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd4a:	e01f      	b.n	800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bd4c:	4b66      	ldr	r3, [pc, #408]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd58:	d106      	bne.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bd5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd60:	d102      	bne.n	800bd68 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bd62:	4b63      	ldr	r3, [pc, #396]	; (800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bd64:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd66:	e011      	b.n	800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bd68:	4b5f      	ldr	r3, [pc, #380]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd74:	d106      	bne.n	800bd84 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bd76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd7c:	d102      	bne.n	800bd84 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bd7e:	4b5d      	ldr	r3, [pc, #372]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd80:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd82:	e003      	b.n	800bd8c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bd84:	2300      	movs	r3, #0
 800bd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bd88:	f000 bc2f 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bd8c:	f000 bc2d 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bd90:	4b59      	ldr	r3, [pc, #356]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bd92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd94:	f000 bc29 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd9c:	f000 bc25 	b.w	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bda0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bda4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bda8:	430b      	orrs	r3, r1
 800bdaa:	f040 80a7 	bne.w	800befc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bdae:	4b4e      	ldr	r3, [pc, #312]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bdb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bdb2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bdb6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bdb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bdbe:	d054      	beq.n	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bdc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdc2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bdc6:	f200 808b 	bhi.w	800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdcc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bdd0:	f000 8083 	beq.w	800beda <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bdd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdd6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bdda:	f200 8081 	bhi.w	800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bde4:	d02f      	beq.n	800be46 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bdec:	d878      	bhi.n	800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d004      	beq.n	800bdfe <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bdf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bdfa:	d012      	beq.n	800be22 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800bdfc:	e070      	b.n	800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bdfe:	4b3a      	ldr	r3, [pc, #232]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be0a:	d107      	bne.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be10:	4618      	mov	r0, r3
 800be12:	f000 feb5 	bl	800cb80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be1a:	e3e6      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be1c:	2300      	movs	r3, #0
 800be1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be20:	e3e3      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be22:	4b31      	ldr	r3, [pc, #196]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be2e:	d107      	bne.n	800be40 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be30:	f107 0318 	add.w	r3, r7, #24
 800be34:	4618      	mov	r0, r3
 800be36:	f000 fbfb 	bl	800c630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be3e:	e3d4      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be40:	2300      	movs	r3, #0
 800be42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be44:	e3d1      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be46:	4b28      	ldr	r3, [pc, #160]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be52:	d107      	bne.n	800be64 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be54:	f107 030c 	add.w	r3, r7, #12
 800be58:	4618      	mov	r0, r3
 800be5a:	f000 fd3d 	bl	800c8d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be62:	e3c2      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be64:	2300      	movs	r3, #0
 800be66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be68:	e3bf      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be6a:	4b1f      	ldr	r3, [pc, #124]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be72:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be74:	4b1c      	ldr	r3, [pc, #112]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f003 0304 	and.w	r3, r3, #4
 800be7c:	2b04      	cmp	r3, #4
 800be7e:	d10c      	bne.n	800be9a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800be80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be82:	2b00      	cmp	r3, #0
 800be84:	d109      	bne.n	800be9a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be86:	4b18      	ldr	r3, [pc, #96]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	08db      	lsrs	r3, r3, #3
 800be8c:	f003 0303 	and.w	r3, r3, #3
 800be90:	4a16      	ldr	r2, [pc, #88]	; (800beec <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800be92:	fa22 f303 	lsr.w	r3, r2, r3
 800be96:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be98:	e01e      	b.n	800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be9a:	4b13      	ldr	r3, [pc, #76]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bea6:	d106      	bne.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800bea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800beae:	d102      	bne.n	800beb6 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800beb0:	4b0f      	ldr	r3, [pc, #60]	; (800bef0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800beb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800beb4:	e010      	b.n	800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800beb6:	4b0c      	ldr	r3, [pc, #48]	; (800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bebe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bec2:	d106      	bne.n	800bed2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800bec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800beca:	d102      	bne.n	800bed2 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800becc:	4b09      	ldr	r3, [pc, #36]	; (800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bece:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bed0:	e002      	b.n	800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bed2:	2300      	movs	r3, #0
 800bed4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bed6:	e388      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bed8:	e387      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800beda:	4b07      	ldr	r3, [pc, #28]	; (800bef8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bedc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bede:	e384      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bee0:	2300      	movs	r3, #0
 800bee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bee4:	e381      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bee6:	bf00      	nop
 800bee8:	58024400 	.word	0x58024400
 800beec:	03d09000 	.word	0x03d09000
 800bef0:	003d0900 	.word	0x003d0900
 800bef4:	02faf080 	.word	0x02faf080
 800bef8:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800befc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf00:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bf04:	430b      	orrs	r3, r1
 800bf06:	f040 809c 	bne.w	800c042 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bf0a:	4b9e      	ldr	r3, [pc, #632]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf0e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bf12:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bf14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf16:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf1a:	d054      	beq.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800bf1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf22:	f200 808b 	bhi.w	800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bf26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf28:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bf2c:	f000 8083 	beq.w	800c036 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800bf30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bf36:	f200 8081 	bhi.w	800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf40:	d02f      	beq.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800bf42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf48:	d878      	bhi.n	800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bf4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d004      	beq.n	800bf5a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800bf50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bf56:	d012      	beq.n	800bf7e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800bf58:	e070      	b.n	800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf5a:	4b8a      	ldr	r3, [pc, #552]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf62:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf66:	d107      	bne.n	800bf78 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f000 fe07 	bl	800cb80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf76:	e338      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf78:	2300      	movs	r3, #0
 800bf7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf7c:	e335      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf7e:	4b81      	ldr	r3, [pc, #516]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf8a:	d107      	bne.n	800bf9c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf8c:	f107 0318 	add.w	r3, r7, #24
 800bf90:	4618      	mov	r0, r3
 800bf92:	f000 fb4d 	bl	800c630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf9a:	e326      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfa0:	e323      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bfa2:	4b78      	ldr	r3, [pc, #480]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfaa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfae:	d107      	bne.n	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfb0:	f107 030c 	add.w	r3, r7, #12
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f000 fc8f 	bl	800c8d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfbe:	e314      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfc4:	e311      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bfc6:	4b6f      	ldr	r3, [pc, #444]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bfce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bfd0:	4b6c      	ldr	r3, [pc, #432]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	f003 0304 	and.w	r3, r3, #4
 800bfd8:	2b04      	cmp	r3, #4
 800bfda:	d10c      	bne.n	800bff6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800bfdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d109      	bne.n	800bff6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfe2:	4b68      	ldr	r3, [pc, #416]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	08db      	lsrs	r3, r3, #3
 800bfe8:	f003 0303 	and.w	r3, r3, #3
 800bfec:	4a66      	ldr	r2, [pc, #408]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bfee:	fa22 f303 	lsr.w	r3, r2, r3
 800bff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bff4:	e01e      	b.n	800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bff6:	4b63      	ldr	r3, [pc, #396]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c002:	d106      	bne.n	800c012 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c006:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c00a:	d102      	bne.n	800c012 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c00c:	4b5f      	ldr	r3, [pc, #380]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c00e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c010:	e010      	b.n	800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c012:	4b5c      	ldr	r3, [pc, #368]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c01a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c01e:	d106      	bne.n	800c02e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c022:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c026:	d102      	bne.n	800c02e <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c028:	4b59      	ldr	r3, [pc, #356]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c02a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c02c:	e002      	b.n	800c034 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c02e:	2300      	movs	r3, #0
 800c030:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c032:	e2da      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c034:	e2d9      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c036:	4b57      	ldr	r3, [pc, #348]	; (800c194 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c038:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c03a:	e2d6      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c03c:	2300      	movs	r3, #0
 800c03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c040:	e2d3      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c042:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c046:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c04a:	430b      	orrs	r3, r1
 800c04c:	f040 80a7 	bne.w	800c19e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c050:	4b4c      	ldr	r3, [pc, #304]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c052:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c054:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c058:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c05c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c060:	d055      	beq.n	800c10e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c068:	f200 8096 	bhi.w	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c06e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c072:	f000 8084 	beq.w	800c17e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c078:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c07c:	f200 808c 	bhi.w	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c086:	d030      	beq.n	800c0ea <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c08a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c08e:	f200 8083 	bhi.w	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c094:	2b00      	cmp	r3, #0
 800c096:	d004      	beq.n	800c0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c09e:	d012      	beq.n	800c0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c0a0:	e07a      	b.n	800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c0a2:	4b38      	ldr	r3, [pc, #224]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0ae:	d107      	bne.n	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f000 fd63 	bl	800cb80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c0ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0be:	e294      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0c4:	e291      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0c6:	4b2f      	ldr	r3, [pc, #188]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0d2:	d107      	bne.n	800c0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0d4:	f107 0318 	add.w	r3, r7, #24
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f000 faa9 	bl	800c630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c0de:	69bb      	ldr	r3, [r7, #24]
 800c0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0e2:	e282      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0e8:	e27f      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c0ea:	4b26      	ldr	r3, [pc, #152]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0f6:	d107      	bne.n	800c108 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0f8:	f107 030c 	add.w	r3, r7, #12
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	f000 fbeb 	bl	800c8d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c106:	e270      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c108:	2300      	movs	r3, #0
 800c10a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c10c:	e26d      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c10e:	4b1d      	ldr	r3, [pc, #116]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c112:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c116:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c118:	4b1a      	ldr	r3, [pc, #104]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f003 0304 	and.w	r3, r3, #4
 800c120:	2b04      	cmp	r3, #4
 800c122:	d10c      	bne.n	800c13e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c126:	2b00      	cmp	r3, #0
 800c128:	d109      	bne.n	800c13e <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c12a:	4b16      	ldr	r3, [pc, #88]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	08db      	lsrs	r3, r3, #3
 800c130:	f003 0303 	and.w	r3, r3, #3
 800c134:	4a14      	ldr	r2, [pc, #80]	; (800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c136:	fa22 f303 	lsr.w	r3, r2, r3
 800c13a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c13c:	e01e      	b.n	800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c13e:	4b11      	ldr	r3, [pc, #68]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c146:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c14a:	d106      	bne.n	800c15a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c14e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c152:	d102      	bne.n	800c15a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c154:	4b0d      	ldr	r3, [pc, #52]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c156:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c158:	e010      	b.n	800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c15a:	4b0a      	ldr	r3, [pc, #40]	; (800c184 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c162:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c166:	d106      	bne.n	800c176 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c168:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c16a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c16e:	d102      	bne.n	800c176 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c170:	4b07      	ldr	r3, [pc, #28]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c172:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c174:	e002      	b.n	800c17c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c176:	2300      	movs	r3, #0
 800c178:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c17a:	e236      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c17c:	e235      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c17e:	4b05      	ldr	r3, [pc, #20]	; (800c194 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c180:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c182:	e232      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c184:	58024400 	.word	0x58024400
 800c188:	03d09000 	.word	0x03d09000
 800c18c:	003d0900 	.word	0x003d0900
 800c190:	02faf080 	.word	0x02faf080
 800c194:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c198:	2300      	movs	r3, #0
 800c19a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c19c:	e225      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c19e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1a2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c1a6:	430b      	orrs	r3, r1
 800c1a8:	f040 8085 	bne.w	800c2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c1ac:	4b9c      	ldr	r3, [pc, #624]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1b0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c1b4:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c1bc:	d06b      	beq.n	800c296 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c1c4:	d874      	bhi.n	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c1cc:	d056      	beq.n	800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c1d4:	d86c      	bhi.n	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c1dc:	d03b      	beq.n	800c256 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c1e4:	d864      	bhi.n	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1ec:	d021      	beq.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1f4:	d85c      	bhi.n	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c1f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d004      	beq.n	800c206 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c202:	d004      	beq.n	800c20e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c204:	e054      	b.n	800c2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c206:	f7fe fb5f 	bl	800a8c8 <HAL_RCC_GetPCLK1Freq>
 800c20a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c20c:	e1ed      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c20e:	4b84      	ldr	r3, [pc, #528]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c21a:	d107      	bne.n	800c22c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c21c:	f107 0318 	add.w	r3, r7, #24
 800c220:	4618      	mov	r0, r3
 800c222:	f000 fa05 	bl	800c630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c22a:	e1de      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c22c:	2300      	movs	r3, #0
 800c22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c230:	e1db      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c232:	4b7b      	ldr	r3, [pc, #492]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c23a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c23e:	d107      	bne.n	800c250 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c240:	f107 030c 	add.w	r3, r7, #12
 800c244:	4618      	mov	r0, r3
 800c246:	f000 fb47 	bl	800c8d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c24e:	e1cc      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c250:	2300      	movs	r3, #0
 800c252:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c254:	e1c9      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c256:	4b72      	ldr	r3, [pc, #456]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	f003 0304 	and.w	r3, r3, #4
 800c25e:	2b04      	cmp	r3, #4
 800c260:	d109      	bne.n	800c276 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c262:	4b6f      	ldr	r3, [pc, #444]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	08db      	lsrs	r3, r3, #3
 800c268:	f003 0303 	and.w	r3, r3, #3
 800c26c:	4a6d      	ldr	r2, [pc, #436]	; (800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c26e:	fa22 f303 	lsr.w	r3, r2, r3
 800c272:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c274:	e1b9      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c276:	2300      	movs	r3, #0
 800c278:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c27a:	e1b6      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c27c:	4b68      	ldr	r3, [pc, #416]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c288:	d102      	bne.n	800c290 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c28a:	4b67      	ldr	r3, [pc, #412]	; (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c28c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c28e:	e1ac      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c290:	2300      	movs	r3, #0
 800c292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c294:	e1a9      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c296:	4b62      	ldr	r3, [pc, #392]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c29e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2a2:	d102      	bne.n	800c2aa <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c2a4:	4b61      	ldr	r3, [pc, #388]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2a8:	e19f      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2ae:	e19c      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2b4:	e199      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c2b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2ba:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c2be:	430b      	orrs	r3, r1
 800c2c0:	d173      	bne.n	800c3aa <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c2c2:	4b57      	ldr	r3, [pc, #348]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c2ca:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2d2:	d02f      	beq.n	800c334 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2da:	d863      	bhi.n	800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c2dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d004      	beq.n	800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2e8:	d012      	beq.n	800c310 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c2ea:	e05b      	b.n	800c3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2ec:	4b4c      	ldr	r3, [pc, #304]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2f8:	d107      	bne.n	800c30a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2fa:	f107 0318 	add.w	r3, r7, #24
 800c2fe:	4618      	mov	r0, r3
 800c300:	f000 f996 	bl	800c630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c308:	e16f      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c30a:	2300      	movs	r3, #0
 800c30c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c30e:	e16c      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c310:	4b43      	ldr	r3, [pc, #268]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c31c:	d107      	bne.n	800c32e <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c31e:	f107 030c 	add.w	r3, r7, #12
 800c322:	4618      	mov	r0, r3
 800c324:	f000 fad8 	bl	800c8d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c328:	697b      	ldr	r3, [r7, #20]
 800c32a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c32c:	e15d      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c32e:	2300      	movs	r3, #0
 800c330:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c332:	e15a      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c334:	4b3a      	ldr	r3, [pc, #232]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c338:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c33c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c33e:	4b38      	ldr	r3, [pc, #224]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 0304 	and.w	r3, r3, #4
 800c346:	2b04      	cmp	r3, #4
 800c348:	d10c      	bne.n	800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c34a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d109      	bne.n	800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c350:	4b33      	ldr	r3, [pc, #204]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	08db      	lsrs	r3, r3, #3
 800c356:	f003 0303 	and.w	r3, r3, #3
 800c35a:	4a32      	ldr	r2, [pc, #200]	; (800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c35c:	fa22 f303 	lsr.w	r3, r2, r3
 800c360:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c362:	e01e      	b.n	800c3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c364:	4b2e      	ldr	r3, [pc, #184]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c36c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c370:	d106      	bne.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c374:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c378:	d102      	bne.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c37a:	4b2b      	ldr	r3, [pc, #172]	; (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c37c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c37e:	e010      	b.n	800c3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c380:	4b27      	ldr	r3, [pc, #156]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c388:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c38c:	d106      	bne.n	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c394:	d102      	bne.n	800c39c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c396:	4b25      	ldr	r3, [pc, #148]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c398:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c39a:	e002      	b.n	800c3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c39c:	2300      	movs	r3, #0
 800c39e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c3a0:	e123      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c3a2:	e122      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3a8:	e11f      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c3aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3ae:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c3b2:	430b      	orrs	r3, r1
 800c3b4:	d13c      	bne.n	800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c3b6:	4b1a      	ldr	r3, [pc, #104]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c3b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3be:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d004      	beq.n	800c3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c3c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3cc:	d012      	beq.n	800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c3ce:	e023      	b.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3d0:	4b13      	ldr	r3, [pc, #76]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c3d2:	681b      	ldr	r3, [r3, #0]
 800c3d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3dc:	d107      	bne.n	800c3ee <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f000 fbcc 	bl	800cb80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3ec:	e0fd      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3f2:	e0fa      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3f4:	4b0a      	ldr	r3, [pc, #40]	; (800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c400:	d107      	bne.n	800c412 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c402:	f107 0318 	add.w	r3, r7, #24
 800c406:	4618      	mov	r0, r3
 800c408:	f000 f912 	bl	800c630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c40c:	6a3b      	ldr	r3, [r7, #32]
 800c40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c410:	e0eb      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c412:	2300      	movs	r3, #0
 800c414:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c416:	e0e8      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c418:	2300      	movs	r3, #0
 800c41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c41c:	e0e5      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c41e:	bf00      	nop
 800c420:	58024400 	.word	0x58024400
 800c424:	03d09000 	.word	0x03d09000
 800c428:	003d0900 	.word	0x003d0900
 800c42c:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c430:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c434:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c438:	430b      	orrs	r3, r1
 800c43a:	f040 8085 	bne.w	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c43e:	4b6d      	ldr	r3, [pc, #436]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c442:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c446:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c44a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c44e:	d06b      	beq.n	800c528 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c452:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c456:	d874      	bhi.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c45e:	d056      	beq.n	800c50e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c466:	d86c      	bhi.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c46e:	d03b      	beq.n	800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c472:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c476:	d864      	bhi.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c47e:	d021      	beq.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c486:	d85c      	bhi.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d004      	beq.n	800c498 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c48e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c490:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c494:	d004      	beq.n	800c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c496:	e054      	b.n	800c542 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c498:	f000 f8b4 	bl	800c604 <HAL_RCCEx_GetD3PCLK1Freq>
 800c49c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c49e:	e0a4      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4a0:	4b54      	ldr	r3, [pc, #336]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4ac:	d107      	bne.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4ae:	f107 0318 	add.w	r3, r7, #24
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f000 f8bc 	bl	800c630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4bc:	e095      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4c2:	e092      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4c4:	4b4b      	ldr	r3, [pc, #300]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4d0:	d107      	bne.n	800c4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4d2:	f107 030c 	add.w	r3, r7, #12
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f000 f9fe 	bl	800c8d8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c4dc:	693b      	ldr	r3, [r7, #16]
 800c4de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4e0:	e083      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4e6:	e080      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c4e8:	4b42      	ldr	r3, [pc, #264]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f003 0304 	and.w	r3, r3, #4
 800c4f0:	2b04      	cmp	r3, #4
 800c4f2:	d109      	bne.n	800c508 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4f4:	4b3f      	ldr	r3, [pc, #252]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	08db      	lsrs	r3, r3, #3
 800c4fa:	f003 0303 	and.w	r3, r3, #3
 800c4fe:	4a3e      	ldr	r2, [pc, #248]	; (800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c500:	fa22 f303 	lsr.w	r3, r2, r3
 800c504:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c506:	e070      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c508:	2300      	movs	r3, #0
 800c50a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c50c:	e06d      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c50e:	4b39      	ldr	r3, [pc, #228]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c51a:	d102      	bne.n	800c522 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c51c:	4b37      	ldr	r3, [pc, #220]	; (800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c520:	e063      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c522:	2300      	movs	r3, #0
 800c524:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c526:	e060      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c528:	4b32      	ldr	r3, [pc, #200]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c530:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c534:	d102      	bne.n	800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c536:	4b32      	ldr	r3, [pc, #200]	; (800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c538:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c53a:	e056      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c53c:	2300      	movs	r3, #0
 800c53e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c540:	e053      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c542:	2300      	movs	r3, #0
 800c544:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c546:	e050      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c54c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c550:	430b      	orrs	r3, r1
 800c552:	d148      	bne.n	800c5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c554:	4b27      	ldr	r3, [pc, #156]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c556:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c558:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c55c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c564:	d02a      	beq.n	800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c56c:	d838      	bhi.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c570:	2b00      	cmp	r3, #0
 800c572:	d004      	beq.n	800c57e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c576:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c57a:	d00d      	beq.n	800c598 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c57c:	e030      	b.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c57e:	4b1d      	ldr	r3, [pc, #116]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c586:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c58a:	d102      	bne.n	800c592 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c58c:	4b1c      	ldr	r3, [pc, #112]	; (800c600 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c58e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c590:	e02b      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c592:	2300      	movs	r3, #0
 800c594:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c596:	e028      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c598:	4b16      	ldr	r3, [pc, #88]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5a4:	d107      	bne.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f000 fae8 	bl	800cb80 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5b4:	e019      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ba:	e016      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5bc:	4b0d      	ldr	r3, [pc, #52]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5c8:	d107      	bne.n	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5ca:	f107 0318 	add.w	r3, r7, #24
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f000 f82e 	bl	800c630 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c5d4:	69fb      	ldr	r3, [r7, #28]
 800c5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5d8:	e007      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5de:	e004      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e4:	e001      	b.n	800c5ea <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c5ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3740      	adds	r7, #64	; 0x40
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	58024400 	.word	0x58024400
 800c5f8:	03d09000 	.word	0x03d09000
 800c5fc:	003d0900 	.word	0x003d0900
 800c600:	02faf080 	.word	0x02faf080

0800c604 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c608:	f7fe f92e 	bl	800a868 <HAL_RCC_GetHCLKFreq>
 800c60c:	4602      	mov	r2, r0
 800c60e:	4b06      	ldr	r3, [pc, #24]	; (800c628 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c610:	6a1b      	ldr	r3, [r3, #32]
 800c612:	091b      	lsrs	r3, r3, #4
 800c614:	f003 0307 	and.w	r3, r3, #7
 800c618:	4904      	ldr	r1, [pc, #16]	; (800c62c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c61a:	5ccb      	ldrb	r3, [r1, r3]
 800c61c:	f003 031f 	and.w	r3, r3, #31
 800c620:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c624:	4618      	mov	r0, r3
 800c626:	bd80      	pop	{r7, pc}
 800c628:	58024400 	.word	0x58024400
 800c62c:	0801e018 	.word	0x0801e018

0800c630 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c630:	b480      	push	{r7}
 800c632:	b089      	sub	sp, #36	; 0x24
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c638:	4ba1      	ldr	r3, [pc, #644]	; (800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c63a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c63c:	f003 0303 	and.w	r3, r3, #3
 800c640:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c642:	4b9f      	ldr	r3, [pc, #636]	; (800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c646:	0b1b      	lsrs	r3, r3, #12
 800c648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c64c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c64e:	4b9c      	ldr	r3, [pc, #624]	; (800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c652:	091b      	lsrs	r3, r3, #4
 800c654:	f003 0301 	and.w	r3, r3, #1
 800c658:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c65a:	4b99      	ldr	r3, [pc, #612]	; (800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c65c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c65e:	08db      	lsrs	r3, r3, #3
 800c660:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c664:	693a      	ldr	r2, [r7, #16]
 800c666:	fb02 f303 	mul.w	r3, r2, r3
 800c66a:	ee07 3a90 	vmov	s15, r3
 800c66e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c672:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	f000 8111 	beq.w	800c8a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c67e:	69bb      	ldr	r3, [r7, #24]
 800c680:	2b02      	cmp	r3, #2
 800c682:	f000 8083 	beq.w	800c78c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c686:	69bb      	ldr	r3, [r7, #24]
 800c688:	2b02      	cmp	r3, #2
 800c68a:	f200 80a1 	bhi.w	800c7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d003      	beq.n	800c69c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c694:	69bb      	ldr	r3, [r7, #24]
 800c696:	2b01      	cmp	r3, #1
 800c698:	d056      	beq.n	800c748 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c69a:	e099      	b.n	800c7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c69c:	4b88      	ldr	r3, [pc, #544]	; (800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f003 0320 	and.w	r3, r3, #32
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d02d      	beq.n	800c704 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6a8:	4b85      	ldr	r3, [pc, #532]	; (800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	08db      	lsrs	r3, r3, #3
 800c6ae:	f003 0303 	and.w	r3, r3, #3
 800c6b2:	4a84      	ldr	r2, [pc, #528]	; (800c8c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c6b4:	fa22 f303 	lsr.w	r3, r2, r3
 800c6b8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c6ba:	68bb      	ldr	r3, [r7, #8]
 800c6bc:	ee07 3a90 	vmov	s15, r3
 800c6c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	ee07 3a90 	vmov	s15, r3
 800c6ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c6d2:	4b7b      	ldr	r3, [pc, #492]	; (800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6da:	ee07 3a90 	vmov	s15, r3
 800c6de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c6e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c6e6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c8c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c6ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c6ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c6f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c6f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c6fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c702:	e087      	b.n	800c814 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c704:	697b      	ldr	r3, [r7, #20]
 800c706:	ee07 3a90 	vmov	s15, r3
 800c70a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c70e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c8cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c712:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c716:	4b6a      	ldr	r3, [pc, #424]	; (800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c71a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c71e:	ee07 3a90 	vmov	s15, r3
 800c722:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c726:	ed97 6a03 	vldr	s12, [r7, #12]
 800c72a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c8c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c72e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c732:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c736:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c73a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c73e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c742:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c746:	e065      	b.n	800c814 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c748:	697b      	ldr	r3, [r7, #20]
 800c74a:	ee07 3a90 	vmov	s15, r3
 800c74e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c752:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c8d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c75a:	4b59      	ldr	r3, [pc, #356]	; (800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c75e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c762:	ee07 3a90 	vmov	s15, r3
 800c766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c76a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c76e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c8c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c77a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c77e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c782:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c786:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c78a:	e043      	b.n	800c814 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	ee07 3a90 	vmov	s15, r3
 800c792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c796:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c8d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c79a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c79e:	4b48      	ldr	r3, [pc, #288]	; (800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7a6:	ee07 3a90 	vmov	s15, r3
 800c7aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7b2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c8c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c7ce:	e021      	b.n	800c814 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c7d0:	697b      	ldr	r3, [r7, #20]
 800c7d2:	ee07 3a90 	vmov	s15, r3
 800c7d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7da:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c8d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c7de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7e2:	4b37      	ldr	r3, [pc, #220]	; (800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c7e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ea:	ee07 3a90 	vmov	s15, r3
 800c7ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7f6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c8c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c7fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c80a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c80e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c812:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c814:	4b2a      	ldr	r3, [pc, #168]	; (800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c818:	0a5b      	lsrs	r3, r3, #9
 800c81a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c81e:	ee07 3a90 	vmov	s15, r3
 800c822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c826:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c82a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c82e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c83a:	ee17 2a90 	vmov	r2, s15
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c842:	4b1f      	ldr	r3, [pc, #124]	; (800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c846:	0c1b      	lsrs	r3, r3, #16
 800c848:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c84c:	ee07 3a90 	vmov	s15, r3
 800c850:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c854:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c858:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c85c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c860:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c868:	ee17 2a90 	vmov	r2, s15
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c870:	4b13      	ldr	r3, [pc, #76]	; (800c8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c874:	0e1b      	lsrs	r3, r3, #24
 800c876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c87a:	ee07 3a90 	vmov	s15, r3
 800c87e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c886:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c88a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c88e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c896:	ee17 2a90 	vmov	r2, s15
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c89e:	e008      	b.n	800c8b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	609a      	str	r2, [r3, #8]
}
 800c8b2:	bf00      	nop
 800c8b4:	3724      	adds	r7, #36	; 0x24
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop
 800c8c0:	58024400 	.word	0x58024400
 800c8c4:	03d09000 	.word	0x03d09000
 800c8c8:	46000000 	.word	0x46000000
 800c8cc:	4c742400 	.word	0x4c742400
 800c8d0:	4a742400 	.word	0x4a742400
 800c8d4:	4c3ebc20 	.word	0x4c3ebc20

0800c8d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c8d8:	b480      	push	{r7}
 800c8da:	b089      	sub	sp, #36	; 0x24
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c8e0:	4ba1      	ldr	r3, [pc, #644]	; (800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8e4:	f003 0303 	and.w	r3, r3, #3
 800c8e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c8ea:	4b9f      	ldr	r3, [pc, #636]	; (800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ee:	0d1b      	lsrs	r3, r3, #20
 800c8f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c8f6:	4b9c      	ldr	r3, [pc, #624]	; (800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8fa:	0a1b      	lsrs	r3, r3, #8
 800c8fc:	f003 0301 	and.w	r3, r3, #1
 800c900:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c902:	4b99      	ldr	r3, [pc, #612]	; (800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c906:	08db      	lsrs	r3, r3, #3
 800c908:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c90c:	693a      	ldr	r2, [r7, #16]
 800c90e:	fb02 f303 	mul.w	r3, r2, r3
 800c912:	ee07 3a90 	vmov	s15, r3
 800c916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c91a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c91e:	697b      	ldr	r3, [r7, #20]
 800c920:	2b00      	cmp	r3, #0
 800c922:	f000 8111 	beq.w	800cb48 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	2b02      	cmp	r3, #2
 800c92a:	f000 8083 	beq.w	800ca34 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c92e:	69bb      	ldr	r3, [r7, #24]
 800c930:	2b02      	cmp	r3, #2
 800c932:	f200 80a1 	bhi.w	800ca78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d003      	beq.n	800c944 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d056      	beq.n	800c9f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c942:	e099      	b.n	800ca78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c944:	4b88      	ldr	r3, [pc, #544]	; (800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	f003 0320 	and.w	r3, r3, #32
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d02d      	beq.n	800c9ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c950:	4b85      	ldr	r3, [pc, #532]	; (800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	08db      	lsrs	r3, r3, #3
 800c956:	f003 0303 	and.w	r3, r3, #3
 800c95a:	4a84      	ldr	r2, [pc, #528]	; (800cb6c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c95c:	fa22 f303 	lsr.w	r3, r2, r3
 800c960:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	ee07 3a90 	vmov	s15, r3
 800c968:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	ee07 3a90 	vmov	s15, r3
 800c972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c97a:	4b7b      	ldr	r3, [pc, #492]	; (800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c97e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c982:	ee07 3a90 	vmov	s15, r3
 800c986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c98a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c98e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cb70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c99a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c99e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c9aa:	e087      	b.n	800cabc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	ee07 3a90 	vmov	s15, r3
 800c9b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9b6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cb74 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c9ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9be:	4b6a      	ldr	r3, [pc, #424]	; (800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9c6:	ee07 3a90 	vmov	s15, r3
 800c9ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9d2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cb70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c9d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9ee:	e065      	b.n	800cabc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	ee07 3a90 	vmov	s15, r3
 800c9f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9fa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cb78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c9fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca02:	4b59      	ldr	r3, [pc, #356]	; (800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca0a:	ee07 3a90 	vmov	s15, r3
 800ca0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca12:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca16:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cb70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca32:	e043      	b.n	800cabc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	ee07 3a90 	vmov	s15, r3
 800ca3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca3e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cb7c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ca42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca46:	4b48      	ldr	r3, [pc, #288]	; (800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca4e:	ee07 3a90 	vmov	s15, r3
 800ca52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca56:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca5a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cb70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ca5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca76:	e021      	b.n	800cabc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	ee07 3a90 	vmov	s15, r3
 800ca7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca82:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cb78 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ca86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca8a:	4b37      	ldr	r3, [pc, #220]	; (800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ca8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ca8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca92:	ee07 3a90 	vmov	s15, r3
 800ca96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca9a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca9e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cb70 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800caa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800caba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cabc:	4b2a      	ldr	r3, [pc, #168]	; (800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cabe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cac0:	0a5b      	lsrs	r3, r3, #9
 800cac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cac6:	ee07 3a90 	vmov	s15, r3
 800caca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cad2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cad6:	edd7 6a07 	vldr	s13, [r7, #28]
 800cada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cae2:	ee17 2a90 	vmov	r2, s15
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800caea:	4b1f      	ldr	r3, [pc, #124]	; (800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caee:	0c1b      	lsrs	r3, r3, #16
 800caf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caf4:	ee07 3a90 	vmov	s15, r3
 800caf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cafc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb00:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb04:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb10:	ee17 2a90 	vmov	r2, s15
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cb18:	4b13      	ldr	r3, [pc, #76]	; (800cb68 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb1c:	0e1b      	lsrs	r3, r3, #24
 800cb1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb22:	ee07 3a90 	vmov	s15, r3
 800cb26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb32:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb3e:	ee17 2a90 	vmov	r2, s15
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cb46:	e008      	b.n	800cb5a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2200      	movs	r2, #0
 800cb52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2200      	movs	r2, #0
 800cb58:	609a      	str	r2, [r3, #8]
}
 800cb5a:	bf00      	nop
 800cb5c:	3724      	adds	r7, #36	; 0x24
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb64:	4770      	bx	lr
 800cb66:	bf00      	nop
 800cb68:	58024400 	.word	0x58024400
 800cb6c:	03d09000 	.word	0x03d09000
 800cb70:	46000000 	.word	0x46000000
 800cb74:	4c742400 	.word	0x4c742400
 800cb78:	4a742400 	.word	0x4a742400
 800cb7c:	4c3ebc20 	.word	0x4c3ebc20

0800cb80 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cb80:	b480      	push	{r7}
 800cb82:	b089      	sub	sp, #36	; 0x24
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb88:	4ba0      	ldr	r3, [pc, #640]	; (800ce0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb8c:	f003 0303 	and.w	r3, r3, #3
 800cb90:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cb92:	4b9e      	ldr	r3, [pc, #632]	; (800ce0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb96:	091b      	lsrs	r3, r3, #4
 800cb98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb9c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cb9e:	4b9b      	ldr	r3, [pc, #620]	; (800ce0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba2:	f003 0301 	and.w	r3, r3, #1
 800cba6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cba8:	4b98      	ldr	r3, [pc, #608]	; (800ce0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbac:	08db      	lsrs	r3, r3, #3
 800cbae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cbb2:	693a      	ldr	r2, [r7, #16]
 800cbb4:	fb02 f303 	mul.w	r3, r2, r3
 800cbb8:	ee07 3a90 	vmov	s15, r3
 800cbbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbc0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	f000 8111 	beq.w	800cdee <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cbcc:	69bb      	ldr	r3, [r7, #24]
 800cbce:	2b02      	cmp	r3, #2
 800cbd0:	f000 8083 	beq.w	800ccda <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cbd4:	69bb      	ldr	r3, [r7, #24]
 800cbd6:	2b02      	cmp	r3, #2
 800cbd8:	f200 80a1 	bhi.w	800cd1e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d003      	beq.n	800cbea <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d056      	beq.n	800cc96 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cbe8:	e099      	b.n	800cd1e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbea:	4b88      	ldr	r3, [pc, #544]	; (800ce0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f003 0320 	and.w	r3, r3, #32
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d02d      	beq.n	800cc52 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbf6:	4b85      	ldr	r3, [pc, #532]	; (800ce0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	08db      	lsrs	r3, r3, #3
 800cbfc:	f003 0303 	and.w	r3, r3, #3
 800cc00:	4a83      	ldr	r2, [pc, #524]	; (800ce10 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cc02:	fa22 f303 	lsr.w	r3, r2, r3
 800cc06:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc08:	68bb      	ldr	r3, [r7, #8]
 800cc0a:	ee07 3a90 	vmov	s15, r3
 800cc0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc12:	697b      	ldr	r3, [r7, #20]
 800cc14:	ee07 3a90 	vmov	s15, r3
 800cc18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc20:	4b7a      	ldr	r3, [pc, #488]	; (800ce0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc28:	ee07 3a90 	vmov	s15, r3
 800cc2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc30:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc34:	eddf 5a77 	vldr	s11, [pc, #476]	; 800ce14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc4c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cc50:	e087      	b.n	800cd62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	ee07 3a90 	vmov	s15, r3
 800cc58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc5c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800ce18 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cc60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc64:	4b69      	ldr	r3, [pc, #420]	; (800ce0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc6c:	ee07 3a90 	vmov	s15, r3
 800cc70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc74:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc78:	eddf 5a66 	vldr	s11, [pc, #408]	; 800ce14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cc7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc94:	e065      	b.n	800cd62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	ee07 3a90 	vmov	s15, r3
 800cc9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cca0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800ce1c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cca4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cca8:	4b58      	ldr	r3, [pc, #352]	; (800ce0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccb0:	ee07 3a90 	vmov	s15, r3
 800ccb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccb8:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccbc:	eddf 5a55 	vldr	s11, [pc, #340]	; 800ce14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ccc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cccc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccd8:	e043      	b.n	800cd62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ccda:	697b      	ldr	r3, [r7, #20]
 800ccdc:	ee07 3a90 	vmov	s15, r3
 800cce0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cce4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800ce20 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cce8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccec:	4b47      	ldr	r3, [pc, #284]	; (800ce0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ccee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccf4:	ee07 3a90 	vmov	s15, r3
 800ccf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccfc:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd00:	eddf 5a44 	vldr	s11, [pc, #272]	; 800ce14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd1c:	e021      	b.n	800cd62 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	ee07 3a90 	vmov	s15, r3
 800cd24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd28:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800ce18 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cd2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd30:	4b36      	ldr	r3, [pc, #216]	; (800ce0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd38:	ee07 3a90 	vmov	s15, r3
 800cd3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd40:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd44:	eddf 5a33 	vldr	s11, [pc, #204]	; 800ce14 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cd48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd60:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cd62:	4b2a      	ldr	r3, [pc, #168]	; (800ce0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd66:	0a5b      	lsrs	r3, r3, #9
 800cd68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd6c:	ee07 3a90 	vmov	s15, r3
 800cd70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd78:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd7c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd88:	ee17 2a90 	vmov	r2, s15
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cd90:	4b1e      	ldr	r3, [pc, #120]	; (800ce0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd94:	0c1b      	lsrs	r3, r3, #16
 800cd96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd9a:	ee07 3a90 	vmov	s15, r3
 800cd9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cda2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cda6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdaa:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdb6:	ee17 2a90 	vmov	r2, s15
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cdbe:	4b13      	ldr	r3, [pc, #76]	; (800ce0c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdc2:	0e1b      	lsrs	r3, r3, #24
 800cdc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdc8:	ee07 3a90 	vmov	s15, r3
 800cdcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdd8:	edd7 6a07 	vldr	s13, [r7, #28]
 800cddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cde0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cde4:	ee17 2a90 	vmov	r2, s15
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cdec:	e008      	b.n	800ce00 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	609a      	str	r2, [r3, #8]
}
 800ce00:	bf00      	nop
 800ce02:	3724      	adds	r7, #36	; 0x24
 800ce04:	46bd      	mov	sp, r7
 800ce06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0a:	4770      	bx	lr
 800ce0c:	58024400 	.word	0x58024400
 800ce10:	03d09000 	.word	0x03d09000
 800ce14:	46000000 	.word	0x46000000
 800ce18:	4c742400 	.word	0x4c742400
 800ce1c:	4a742400 	.word	0x4a742400
 800ce20:	4c3ebc20 	.word	0x4c3ebc20

0800ce24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b084      	sub	sp, #16
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ce2e:	2300      	movs	r3, #0
 800ce30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800ce32:	4b53      	ldr	r3, [pc, #332]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800ce34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce36:	f003 0303 	and.w	r3, r3, #3
 800ce3a:	2b03      	cmp	r3, #3
 800ce3c:	d101      	bne.n	800ce42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	e099      	b.n	800cf76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800ce42:	4b4f      	ldr	r3, [pc, #316]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4a4e      	ldr	r2, [pc, #312]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800ce48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ce4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ce4e:	f7f6 fa45 	bl	80032dc <HAL_GetTick>
 800ce52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce54:	e008      	b.n	800ce68 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800ce56:	f7f6 fa41 	bl	80032dc <HAL_GetTick>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	1ad3      	subs	r3, r2, r3
 800ce60:	2b02      	cmp	r3, #2
 800ce62:	d901      	bls.n	800ce68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ce64:	2303      	movs	r3, #3
 800ce66:	e086      	b.n	800cf76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ce68:	4b45      	ldr	r3, [pc, #276]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d1f0      	bne.n	800ce56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ce74:	4b42      	ldr	r3, [pc, #264]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800ce76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	031b      	lsls	r3, r3, #12
 800ce82:	493f      	ldr	r1, [pc, #252]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800ce84:	4313      	orrs	r3, r2
 800ce86:	628b      	str	r3, [r1, #40]	; 0x28
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	3b01      	subs	r3, #1
 800ce8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	689b      	ldr	r3, [r3, #8]
 800ce96:	3b01      	subs	r3, #1
 800ce98:	025b      	lsls	r3, r3, #9
 800ce9a:	b29b      	uxth	r3, r3
 800ce9c:	431a      	orrs	r2, r3
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	68db      	ldr	r3, [r3, #12]
 800cea2:	3b01      	subs	r3, #1
 800cea4:	041b      	lsls	r3, r3, #16
 800cea6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ceaa:	431a      	orrs	r2, r3
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	691b      	ldr	r3, [r3, #16]
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	061b      	lsls	r3, r3, #24
 800ceb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ceb8:	4931      	ldr	r1, [pc, #196]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800ceba:	4313      	orrs	r3, r2
 800cebc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cebe:	4b30      	ldr	r3, [pc, #192]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800cec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	695b      	ldr	r3, [r3, #20]
 800ceca:	492d      	ldr	r1, [pc, #180]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800cecc:	4313      	orrs	r3, r2
 800cece:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ced0:	4b2b      	ldr	r3, [pc, #172]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800ced2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced4:	f023 0220 	bic.w	r2, r3, #32
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	699b      	ldr	r3, [r3, #24]
 800cedc:	4928      	ldr	r1, [pc, #160]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800cede:	4313      	orrs	r3, r2
 800cee0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cee2:	4b27      	ldr	r3, [pc, #156]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800cee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee6:	4a26      	ldr	r2, [pc, #152]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800cee8:	f023 0310 	bic.w	r3, r3, #16
 800ceec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ceee:	4b24      	ldr	r3, [pc, #144]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800cef0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cef2:	4b24      	ldr	r3, [pc, #144]	; (800cf84 <RCCEx_PLL2_Config+0x160>)
 800cef4:	4013      	ands	r3, r2
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	69d2      	ldr	r2, [r2, #28]
 800cefa:	00d2      	lsls	r2, r2, #3
 800cefc:	4920      	ldr	r1, [pc, #128]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800cefe:	4313      	orrs	r3, r2
 800cf00:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cf02:	4b1f      	ldr	r3, [pc, #124]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800cf04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf06:	4a1e      	ldr	r2, [pc, #120]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800cf08:	f043 0310 	orr.w	r3, r3, #16
 800cf0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d106      	bne.n	800cf22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cf14:	4b1a      	ldr	r3, [pc, #104]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800cf16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf18:	4a19      	ldr	r2, [pc, #100]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800cf1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf20:	e00f      	b.n	800cf42 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	d106      	bne.n	800cf36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cf28:	4b15      	ldr	r3, [pc, #84]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800cf2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf2c:	4a14      	ldr	r2, [pc, #80]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800cf2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cf32:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cf34:	e005      	b.n	800cf42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cf36:	4b12      	ldr	r3, [pc, #72]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800cf38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf3a:	4a11      	ldr	r2, [pc, #68]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800cf3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cf42:	4b0f      	ldr	r3, [pc, #60]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	4a0e      	ldr	r2, [pc, #56]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800cf48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cf4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cf4e:	f7f6 f9c5 	bl	80032dc <HAL_GetTick>
 800cf52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf54:	e008      	b.n	800cf68 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cf56:	f7f6 f9c1 	bl	80032dc <HAL_GetTick>
 800cf5a:	4602      	mov	r2, r0
 800cf5c:	68bb      	ldr	r3, [r7, #8]
 800cf5e:	1ad3      	subs	r3, r2, r3
 800cf60:	2b02      	cmp	r3, #2
 800cf62:	d901      	bls.n	800cf68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cf64:	2303      	movs	r3, #3
 800cf66:	e006      	b.n	800cf76 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cf68:	4b05      	ldr	r3, [pc, #20]	; (800cf80 <RCCEx_PLL2_Config+0x15c>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d0f0      	beq.n	800cf56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cf74:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf76:	4618      	mov	r0, r3
 800cf78:	3710      	adds	r7, #16
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	58024400 	.word	0x58024400
 800cf84:	ffff0007 	.word	0xffff0007

0800cf88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b084      	sub	sp, #16
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
 800cf90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cf92:	2300      	movs	r3, #0
 800cf94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cf96:	4b53      	ldr	r3, [pc, #332]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800cf98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf9a:	f003 0303 	and.w	r3, r3, #3
 800cf9e:	2b03      	cmp	r3, #3
 800cfa0:	d101      	bne.n	800cfa6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	e099      	b.n	800d0da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cfa6:	4b4f      	ldr	r3, [pc, #316]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	4a4e      	ldr	r2, [pc, #312]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800cfac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cfb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cfb2:	f7f6 f993 	bl	80032dc <HAL_GetTick>
 800cfb6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cfb8:	e008      	b.n	800cfcc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cfba:	f7f6 f98f 	bl	80032dc <HAL_GetTick>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	1ad3      	subs	r3, r2, r3
 800cfc4:	2b02      	cmp	r3, #2
 800cfc6:	d901      	bls.n	800cfcc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cfc8:	2303      	movs	r3, #3
 800cfca:	e086      	b.n	800d0da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cfcc:	4b45      	ldr	r3, [pc, #276]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d1f0      	bne.n	800cfba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cfd8:	4b42      	ldr	r3, [pc, #264]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800cfda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cfdc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	051b      	lsls	r3, r3, #20
 800cfe6:	493f      	ldr	r1, [pc, #252]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	628b      	str	r3, [r1, #40]	; 0x28
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	3b01      	subs	r3, #1
 800cff2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	689b      	ldr	r3, [r3, #8]
 800cffa:	3b01      	subs	r3, #1
 800cffc:	025b      	lsls	r3, r3, #9
 800cffe:	b29b      	uxth	r3, r3
 800d000:	431a      	orrs	r2, r3
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	68db      	ldr	r3, [r3, #12]
 800d006:	3b01      	subs	r3, #1
 800d008:	041b      	lsls	r3, r3, #16
 800d00a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d00e:	431a      	orrs	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	691b      	ldr	r3, [r3, #16]
 800d014:	3b01      	subs	r3, #1
 800d016:	061b      	lsls	r3, r3, #24
 800d018:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d01c:	4931      	ldr	r1, [pc, #196]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800d01e:	4313      	orrs	r3, r2
 800d020:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d022:	4b30      	ldr	r3, [pc, #192]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800d024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d026:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	695b      	ldr	r3, [r3, #20]
 800d02e:	492d      	ldr	r1, [pc, #180]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800d030:	4313      	orrs	r3, r2
 800d032:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d034:	4b2b      	ldr	r3, [pc, #172]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800d036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d038:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	699b      	ldr	r3, [r3, #24]
 800d040:	4928      	ldr	r1, [pc, #160]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800d042:	4313      	orrs	r3, r2
 800d044:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d046:	4b27      	ldr	r3, [pc, #156]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800d048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d04a:	4a26      	ldr	r2, [pc, #152]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800d04c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d050:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d052:	4b24      	ldr	r3, [pc, #144]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800d054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d056:	4b24      	ldr	r3, [pc, #144]	; (800d0e8 <RCCEx_PLL3_Config+0x160>)
 800d058:	4013      	ands	r3, r2
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	69d2      	ldr	r2, [r2, #28]
 800d05e:	00d2      	lsls	r2, r2, #3
 800d060:	4920      	ldr	r1, [pc, #128]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800d062:	4313      	orrs	r3, r2
 800d064:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d066:	4b1f      	ldr	r3, [pc, #124]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800d068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d06a:	4a1e      	ldr	r2, [pc, #120]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800d06c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d070:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d072:	683b      	ldr	r3, [r7, #0]
 800d074:	2b00      	cmp	r3, #0
 800d076:	d106      	bne.n	800d086 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d078:	4b1a      	ldr	r3, [pc, #104]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800d07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d07c:	4a19      	ldr	r2, [pc, #100]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800d07e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d082:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d084:	e00f      	b.n	800d0a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	2b01      	cmp	r3, #1
 800d08a:	d106      	bne.n	800d09a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d08c:	4b15      	ldr	r3, [pc, #84]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800d08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d090:	4a14      	ldr	r2, [pc, #80]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800d092:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d096:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d098:	e005      	b.n	800d0a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d09a:	4b12      	ldr	r3, [pc, #72]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800d09c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d09e:	4a11      	ldr	r2, [pc, #68]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800d0a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d0a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d0a6:	4b0f      	ldr	r3, [pc, #60]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	4a0e      	ldr	r2, [pc, #56]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800d0ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0b2:	f7f6 f913 	bl	80032dc <HAL_GetTick>
 800d0b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d0b8:	e008      	b.n	800d0cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d0ba:	f7f6 f90f 	bl	80032dc <HAL_GetTick>
 800d0be:	4602      	mov	r2, r0
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	1ad3      	subs	r3, r2, r3
 800d0c4:	2b02      	cmp	r3, #2
 800d0c6:	d901      	bls.n	800d0cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d0c8:	2303      	movs	r3, #3
 800d0ca:	e006      	b.n	800d0da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d0cc:	4b05      	ldr	r3, [pc, #20]	; (800d0e4 <RCCEx_PLL3_Config+0x15c>)
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d0f0      	beq.n	800d0ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d0d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0da:	4618      	mov	r0, r3
 800d0dc:	3710      	adds	r7, #16
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	bd80      	pop	{r7, pc}
 800d0e2:	bf00      	nop
 800d0e4:	58024400 	.word	0x58024400
 800d0e8:	ffff0007 	.word	0xffff0007

0800d0ec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b08a      	sub	sp, #40	; 0x28
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d101      	bne.n	800d0fe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e075      	b.n	800d1ea <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d104:	b2db      	uxtb	r3, r3
 800d106:	2b00      	cmp	r3, #0
 800d108:	d105      	bne.n	800d116 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2200      	movs	r2, #0
 800d10e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d110:	6878      	ldr	r0, [r7, #4]
 800d112:	f7f5 f97b 	bl	800240c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	2204      	movs	r2, #4
 800d11a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f000 f868 	bl	800d1f4 <HAL_SD_InitCard>
 800d124:	4603      	mov	r3, r0
 800d126:	2b00      	cmp	r3, #0
 800d128:	d001      	beq.n	800d12e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d12a:	2301      	movs	r3, #1
 800d12c:	e05d      	b.n	800d1ea <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d12e:	f107 0308 	add.w	r3, r7, #8
 800d132:	4619      	mov	r1, r3
 800d134:	6878      	ldr	r0, [r7, #4]
 800d136:	f000 fdaf 	bl	800dc98 <HAL_SD_GetCardStatus>
 800d13a:	4603      	mov	r3, r0
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d001      	beq.n	800d144 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d140:	2301      	movs	r3, #1
 800d142:	e052      	b.n	800d1ea <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d144:	7e3b      	ldrb	r3, [r7, #24]
 800d146:	b2db      	uxtb	r3, r3
 800d148:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d14a:	7e7b      	ldrb	r3, [r7, #25]
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d154:	2b01      	cmp	r3, #1
 800d156:	d10a      	bne.n	800d16e <HAL_SD_Init+0x82>
 800d158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d102      	bne.n	800d164 <HAL_SD_Init+0x78>
 800d15e:	6a3b      	ldr	r3, [r7, #32]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d004      	beq.n	800d16e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d16a:	659a      	str	r2, [r3, #88]	; 0x58
 800d16c:	e00b      	b.n	800d186 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d172:	2b01      	cmp	r3, #1
 800d174:	d104      	bne.n	800d180 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d17c:	659a      	str	r2, [r3, #88]	; 0x58
 800d17e:	e002      	b.n	800d186 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	68db      	ldr	r3, [r3, #12]
 800d18a:	4619      	mov	r1, r3
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f000 fe6d 	bl	800de6c <HAL_SD_ConfigWideBusOperation>
 800d192:	4603      	mov	r3, r0
 800d194:	2b00      	cmp	r3, #0
 800d196:	d001      	beq.n	800d19c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d198:	2301      	movs	r3, #1
 800d19a:	e026      	b.n	800d1ea <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d19c:	f7f6 f89e 	bl	80032dc <HAL_GetTick>
 800d1a0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d1a2:	e011      	b.n	800d1c8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d1a4:	f7f6 f89a 	bl	80032dc <HAL_GetTick>
 800d1a8:	4602      	mov	r2, r0
 800d1aa:	69fb      	ldr	r3, [r7, #28]
 800d1ac:	1ad3      	subs	r3, r2, r3
 800d1ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1b2:	d109      	bne.n	800d1c8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d1ba:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	2201      	movs	r2, #1
 800d1c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d1c4:	2303      	movs	r3, #3
 800d1c6:	e010      	b.n	800d1ea <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 ff61 	bl	800e090 <HAL_SD_GetCardState>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2b04      	cmp	r3, #4
 800d1d2:	d1e7      	bne.n	800d1a4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	2200      	movs	r2, #0
 800d1de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2201      	movs	r2, #1
 800d1e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d1e8:	2300      	movs	r3, #0
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3728      	adds	r7, #40	; 0x28
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}
	...

0800d1f4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d1f4:	b590      	push	{r4, r7, lr}
 800d1f6:	b08d      	sub	sp, #52	; 0x34
 800d1f8:	af02      	add	r7, sp, #8
 800d1fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d200:	2300      	movs	r3, #0
 800d202:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d204:	2300      	movs	r3, #0
 800d206:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d208:	2300      	movs	r3, #0
 800d20a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d20c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d210:	f04f 0100 	mov.w	r1, #0
 800d214:	f7fe fd24 	bl	800bc60 <HAL_RCCEx_GetPeriphCLKFreq>
 800d218:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d21a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d109      	bne.n	800d234 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	2201      	movs	r2, #1
 800d224:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d22e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d230:	2301      	movs	r3, #1
 800d232:	e070      	b.n	800d316 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d236:	0a1b      	lsrs	r3, r3, #8
 800d238:	4a39      	ldr	r2, [pc, #228]	; (800d320 <HAL_SD_InitCard+0x12c>)
 800d23a:	fba2 2303 	umull	r2, r3, r2, r3
 800d23e:	091b      	lsrs	r3, r3, #4
 800d240:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681c      	ldr	r4, [r3, #0]
 800d246:	466a      	mov	r2, sp
 800d248:	f107 0318 	add.w	r3, r7, #24
 800d24c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d250:	e882 0003 	stmia.w	r2, {r0, r1}
 800d254:	f107 030c 	add.w	r3, r7, #12
 800d258:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d25a:	4620      	mov	r0, r4
 800d25c:	f004 fa6a 	bl	8011734 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	4618      	mov	r0, r3
 800d266:	f004 faad 	bl	80117c4 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d005      	beq.n	800d27c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d270:	69fb      	ldr	r3, [r7, #28]
 800d272:	005b      	lsls	r3, r3, #1
 800d274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d276:	fbb2 f3f3 	udiv	r3, r2, r3
 800d27a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d007      	beq.n	800d292 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d282:	4a28      	ldr	r2, [pc, #160]	; (800d324 <HAL_SD_InitCard+0x130>)
 800d284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d286:	fbb2 f3f3 	udiv	r3, r2, r3
 800d28a:	3301      	adds	r3, #1
 800d28c:	4618      	mov	r0, r3
 800d28e:	f7f6 f831 	bl	80032f4 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 ffea 	bl	800e26c <SD_PowerON>
 800d298:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d29a:	6a3b      	ldr	r3, [r7, #32]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d00b      	beq.n	800d2b8 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2ac:	6a3b      	ldr	r3, [r7, #32]
 800d2ae:	431a      	orrs	r2, r3
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e02e      	b.n	800d316 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f000 ff09 	bl	800e0d0 <SD_InitCard>
 800d2be:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2c0:	6a3b      	ldr	r3, [r7, #32]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d00b      	beq.n	800d2de <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d2d2:	6a3b      	ldr	r3, [r7, #32]
 800d2d4:	431a      	orrs	r2, r3
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	e01b      	b.n	800d316 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f004 fb02 	bl	80118f0 <SDMMC_CmdBlockLength>
 800d2ec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d2ee:	6a3b      	ldr	r3, [r7, #32]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d00f      	beq.n	800d314 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	4a0b      	ldr	r2, [pc, #44]	; (800d328 <HAL_SD_InitCard+0x134>)
 800d2fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d300:	6a3b      	ldr	r3, [r7, #32]
 800d302:	431a      	orrs	r2, r3
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2201      	movs	r2, #1
 800d30c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d310:	2301      	movs	r3, #1
 800d312:	e000      	b.n	800d316 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d314:	2300      	movs	r3, #0
}
 800d316:	4618      	mov	r0, r3
 800d318:	372c      	adds	r7, #44	; 0x2c
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd90      	pop	{r4, r7, pc}
 800d31e:	bf00      	nop
 800d320:	014f8b59 	.word	0x014f8b59
 800d324:	00012110 	.word	0x00012110
 800d328:	1fe00fff 	.word	0x1fe00fff

0800d32c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b08c      	sub	sp, #48	; 0x30
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	607a      	str	r2, [r7, #4]
 800d338:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d107      	bne.n	800d354 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d348:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d350:	2301      	movs	r3, #1
 800d352:	e08d      	b.n	800d470 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d35a:	b2db      	uxtb	r3, r3
 800d35c:	2b01      	cmp	r3, #1
 800d35e:	f040 8086 	bne.w	800d46e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	2200      	movs	r2, #0
 800d366:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d368:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	441a      	add	r2, r3
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d372:	429a      	cmp	r2, r3
 800d374:	d907      	bls.n	800d386 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d37a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d382:	2301      	movs	r3, #1
 800d384:	e074      	b.n	800d470 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2203      	movs	r2, #3
 800d38a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	2200      	movs	r2, #0
 800d394:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	68ba      	ldr	r2, [r7, #8]
 800d39a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	025a      	lsls	r2, r3, #9
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d002      	beq.n	800d3b2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ae:	025b      	lsls	r3, r3, #9
 800d3b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d3b6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	025b      	lsls	r3, r3, #9
 800d3bc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d3be:	2390      	movs	r3, #144	; 0x90
 800d3c0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d3c2:	2302      	movs	r3, #2
 800d3c4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	f107 0210 	add.w	r2, r7, #16
 800d3d6:	4611      	mov	r1, r2
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f004 fa5d 	bl	8011898 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	68da      	ldr	r2, [r3, #12]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d3ec:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	68ba      	ldr	r2, [r7, #8]
 800d3f4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2201      	movs	r2, #1
 800d3fc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	2b01      	cmp	r3, #1
 800d402:	d90a      	bls.n	800d41a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2282      	movs	r2, #130	; 0x82
 800d408:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d410:	4618      	mov	r0, r3
 800d412:	f004 fab3 	bl	801197c <SDMMC_CmdReadMultiBlock>
 800d416:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d418:	e009      	b.n	800d42e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2281      	movs	r2, #129	; 0x81
 800d41e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d426:	4618      	mov	r0, r3
 800d428:	f004 fa85 	bl	8011936 <SDMMC_CmdReadSingleBlock>
 800d42c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d430:	2b00      	cmp	r3, #0
 800d432:	d012      	beq.n	800d45a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	4a0f      	ldr	r2, [pc, #60]	; (800d478 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d43a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d442:	431a      	orrs	r2, r3
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	2201      	movs	r2, #1
 800d44c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2200      	movs	r2, #0
 800d454:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d456:	2301      	movs	r3, #1
 800d458:	e00a      	b.n	800d470 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d468:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d46a:	2300      	movs	r3, #0
 800d46c:	e000      	b.n	800d470 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d46e:	2302      	movs	r3, #2
  }
}
 800d470:	4618      	mov	r0, r3
 800d472:	3730      	adds	r7, #48	; 0x30
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}
 800d478:	1fe00fff 	.word	0x1fe00fff

0800d47c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b08c      	sub	sp, #48	; 0x30
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	60b9      	str	r1, [r7, #8]
 800d486:	607a      	str	r2, [r7, #4]
 800d488:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d107      	bne.n	800d4a4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d498:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	e08d      	b.n	800d5c0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d4aa:	b2db      	uxtb	r3, r3
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	f040 8086 	bne.w	800d5be <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d4b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	441a      	add	r2, r3
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d907      	bls.n	800d4d6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d4d2:	2301      	movs	r3, #1
 800d4d4:	e074      	b.n	800d5c0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	2203      	movs	r2, #3
 800d4da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	68ba      	ldr	r2, [r7, #8]
 800d4ea:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d4ec:	683b      	ldr	r3, [r7, #0]
 800d4ee:	025a      	lsls	r2, r3, #9
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f8:	2b01      	cmp	r3, #1
 800d4fa:	d002      	beq.n	800d502 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fe:	025b      	lsls	r3, r3, #9
 800d500:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d502:	f04f 33ff 	mov.w	r3, #4294967295
 800d506:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d508:	683b      	ldr	r3, [r7, #0]
 800d50a:	025b      	lsls	r3, r3, #9
 800d50c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d50e:	2390      	movs	r3, #144	; 0x90
 800d510:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d512:	2300      	movs	r3, #0
 800d514:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d516:	2300      	movs	r3, #0
 800d518:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d51a:	2300      	movs	r3, #0
 800d51c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	f107 0210 	add.w	r2, r7, #16
 800d526:	4611      	mov	r1, r2
 800d528:	4618      	mov	r0, r3
 800d52a:	f004 f9b5 	bl	8011898 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	68da      	ldr	r2, [r3, #12]
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d53c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	68ba      	ldr	r2, [r7, #8]
 800d544:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	2201      	movs	r2, #1
 800d54c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	2b01      	cmp	r3, #1
 800d552:	d90a      	bls.n	800d56a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	22a0      	movs	r2, #160	; 0xa0
 800d558:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d560:	4618      	mov	r0, r3
 800d562:	f004 fa51 	bl	8011a08 <SDMMC_CmdWriteMultiBlock>
 800d566:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d568:	e009      	b.n	800d57e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	2290      	movs	r2, #144	; 0x90
 800d56e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d576:	4618      	mov	r0, r3
 800d578:	f004 fa23 	bl	80119c2 <SDMMC_CmdWriteSingleBlock>
 800d57c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d580:	2b00      	cmp	r3, #0
 800d582:	d012      	beq.n	800d5aa <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	4a0f      	ldr	r2, [pc, #60]	; (800d5c8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d58a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d592:	431a      	orrs	r2, r3
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2201      	movs	r2, #1
 800d59c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	2200      	movs	r2, #0
 800d5a4:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	e00a      	b.n	800d5c0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d5b8:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	e000      	b.n	800d5c0 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d5be:	2302      	movs	r3, #2
  }
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3730      	adds	r7, #48	; 0x30
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	1fe00fff 	.word	0x1fe00fff

0800d5cc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d008      	beq.n	800d5fa <HAL_SD_IRQHandler+0x2e>
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	f003 0308 	and.w	r3, r3, #8
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d003      	beq.n	800d5fa <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f001 f926 	bl	800e844 <SD_Read_IT>
 800d5f8:	e19a      	b.n	800d930 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d604:	2b00      	cmp	r3, #0
 800d606:	f000 80ac 	beq.w	800d762 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d612:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681a      	ldr	r2, [r3, #0]
 800d61e:	4b59      	ldr	r3, [pc, #356]	; (800d784 <HAL_SD_IRQHandler+0x1b8>)
 800d620:	400b      	ands	r3, r1
 800d622:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d632:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	68da      	ldr	r2, [r3, #12]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d642:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	f003 0308 	and.w	r3, r3, #8
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d038      	beq.n	800d6c0 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d64e:	68fb      	ldr	r3, [r7, #12]
 800d650:	f003 0302 	and.w	r3, r3, #2
 800d654:	2b00      	cmp	r3, #0
 800d656:	d104      	bne.n	800d662 <HAL_SD_IRQHandler+0x96>
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f003 0320 	and.w	r3, r3, #32
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d011      	beq.n	800d686 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	4618      	mov	r0, r3
 800d668:	f004 f9f2 	bl	8011a50 <SDMMC_CmdStopTransfer>
 800d66c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	2b00      	cmp	r3, #0
 800d672:	d008      	beq.n	800d686 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	431a      	orrs	r2, r3
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	f000 f95b 	bl	800d93c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	4a3f      	ldr	r2, [pc, #252]	; (800d788 <HAL_SD_IRQHandler+0x1bc>)
 800d68c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	2201      	movs	r2, #1
 800d692:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2200      	movs	r2, #0
 800d69a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f003 0301 	and.w	r3, r3, #1
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d104      	bne.n	800d6b0 <HAL_SD_IRQHandler+0xe4>
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	f003 0302 	and.w	r3, r3, #2
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d003      	beq.n	800d6b8 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f006 f9fb 	bl	8013aac <HAL_SD_RxCpltCallback>
 800d6b6:	e13b      	b.n	800d930 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f006 f9ed 	bl	8013a98 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d6be:	e137      	b.n	800d930 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	f000 8132 	beq.w	800d930 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f003 0302 	and.w	r3, r3, #2
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d104      	bne.n	800d6f8 <HAL_SD_IRQHandler+0x12c>
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	f003 0320 	and.w	r3, r3, #32
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d011      	beq.n	800d71c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	f004 f9a7 	bl	8011a50 <SDMMC_CmdStopTransfer>
 800d702:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d704:	68bb      	ldr	r3, [r7, #8]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d008      	beq.n	800d71c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	431a      	orrs	r2, r3
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f000 f910 	bl	800d93c <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2201      	movs	r2, #1
 800d720:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	f003 0310 	and.w	r3, r3, #16
 800d730:	2b00      	cmp	r3, #0
 800d732:	d104      	bne.n	800d73e <HAL_SD_IRQHandler+0x172>
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f003 0320 	and.w	r3, r3, #32
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d002      	beq.n	800d744 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f006 f9aa 	bl	8013a98 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	f003 0301 	and.w	r3, r3, #1
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d105      	bne.n	800d75a <HAL_SD_IRQHandler+0x18e>
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	f003 0302 	and.w	r3, r3, #2
 800d754:	2b00      	cmp	r3, #0
 800d756:	f000 80eb 	beq.w	800d930 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d75a:	6878      	ldr	r0, [r7, #4]
 800d75c:	f006 f9a6 	bl	8013aac <HAL_SD_RxCpltCallback>
}
 800d760:	e0e6      	b.n	800d930 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d00d      	beq.n	800d78c <HAL_SD_IRQHandler+0x1c0>
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	f003 0308 	and.w	r3, r3, #8
 800d776:	2b00      	cmp	r3, #0
 800d778:	d008      	beq.n	800d78c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f001 f8a8 	bl	800e8d0 <SD_Write_IT>
 800d780:	e0d6      	b.n	800d930 <HAL_SD_IRQHandler+0x364>
 800d782:	bf00      	nop
 800d784:	ffff3ec5 	.word	0xffff3ec5
 800d788:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d792:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d796:	2b00      	cmp	r3, #0
 800d798:	f000 809d 	beq.w	800d8d6 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a2:	f003 0302 	and.w	r3, r3, #2
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d005      	beq.n	800d7b6 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7ae:	f043 0202 	orr.w	r2, r3, #2
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7bc:	f003 0308 	and.w	r3, r3, #8
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d005      	beq.n	800d7d0 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7c8:	f043 0208 	orr.w	r2, r3, #8
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7d6:	f003 0320 	and.w	r3, r3, #32
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d005      	beq.n	800d7ea <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7e2:	f043 0220 	orr.w	r2, r3, #32
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7f0:	f003 0310 	and.w	r3, r3, #16
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d005      	beq.n	800d804 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7fc:	f043 0210 	orr.w	r2, r3, #16
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	4a4b      	ldr	r2, [pc, #300]	; (800d938 <HAL_SD_IRQHandler+0x36c>)
 800d80a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d81a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	68da      	ldr	r2, [r3, #12]
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d82a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d83a:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	68da      	ldr	r2, [r3, #12]
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d84a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4618      	mov	r0, r3
 800d852:	f004 f8fd 	bl	8011a50 <SDMMC_CmdStopTransfer>
 800d856:	4602      	mov	r2, r0
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d85c:	431a      	orrs	r2, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	68da      	ldr	r2, [r3, #12]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d870:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d87a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	f003 0308 	and.w	r3, r3, #8
 800d882:	2b00      	cmp	r3, #0
 800d884:	d00a      	beq.n	800d89c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2201      	movs	r2, #1
 800d88a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2200      	movs	r2, #0
 800d892:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f000 f851 	bl	800d93c <HAL_SD_ErrorCallback>
}
 800d89a:	e049      	b.n	800d930 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d044      	beq.n	800d930 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d040      	beq.n	800d930 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d8bc:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f000 f834 	bl	800d93c <HAL_SD_ErrorCallback>
}
 800d8d4:	e02c      	b.n	800d930 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d8dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d025      	beq.n	800d930 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8ec:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8f4:	f003 0304 	and.w	r3, r3, #4
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d10c      	bne.n	800d916 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f003 0320 	and.w	r3, r3, #32
 800d902:	2b00      	cmp	r3, #0
 800d904:	d003      	beq.n	800d90e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f001 f84a 	bl	800e9a0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d90c:	e010      	b.n	800d930 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d90e:	6878      	ldr	r0, [r7, #4]
 800d910:	f001 f832 	bl	800e978 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d914:	e00c      	b.n	800d930 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	f003 0320 	and.w	r3, r3, #32
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d003      	beq.n	800d928 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f001 f833 	bl	800e98c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d926:	e003      	b.n	800d930 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d928:	6878      	ldr	r0, [r7, #4]
 800d92a:	f001 f81b 	bl	800e964 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d92e:	e7ff      	b.n	800d930 <HAL_SD_IRQHandler+0x364>
 800d930:	bf00      	nop
 800d932:	3710      	adds	r7, #16
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}
 800d938:	18000f3a 	.word	0x18000f3a

0800d93c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d93c:	b480      	push	{r7}
 800d93e:	b083      	sub	sp, #12
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d944:	bf00      	nop
 800d946:	370c      	adds	r7, #12
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr

0800d950 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d950:	b480      	push	{r7}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
 800d958:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d95e:	0f9b      	lsrs	r3, r3, #30
 800d960:	b2da      	uxtb	r2, r3
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d96a:	0e9b      	lsrs	r3, r3, #26
 800d96c:	b2db      	uxtb	r3, r3
 800d96e:	f003 030f 	and.w	r3, r3, #15
 800d972:	b2da      	uxtb	r2, r3
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d97c:	0e1b      	lsrs	r3, r3, #24
 800d97e:	b2db      	uxtb	r3, r3
 800d980:	f003 0303 	and.w	r3, r3, #3
 800d984:	b2da      	uxtb	r2, r3
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d98e:	0c1b      	lsrs	r3, r3, #16
 800d990:	b2da      	uxtb	r2, r3
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d99a:	0a1b      	lsrs	r3, r3, #8
 800d99c:	b2da      	uxtb	r2, r3
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9b0:	0d1b      	lsrs	r3, r3, #20
 800d9b2:	b29a      	uxth	r2, r3
 800d9b4:	683b      	ldr	r3, [r7, #0]
 800d9b6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9bc:	0c1b      	lsrs	r3, r3, #16
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	f003 030f 	and.w	r3, r3, #15
 800d9c4:	b2da      	uxtb	r2, r3
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9ce:	0bdb      	lsrs	r3, r3, #15
 800d9d0:	b2db      	uxtb	r3, r3
 800d9d2:	f003 0301 	and.w	r3, r3, #1
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	683b      	ldr	r3, [r7, #0]
 800d9da:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9e0:	0b9b      	lsrs	r3, r3, #14
 800d9e2:	b2db      	uxtb	r3, r3
 800d9e4:	f003 0301 	and.w	r3, r3, #1
 800d9e8:	b2da      	uxtb	r2, r3
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9f2:	0b5b      	lsrs	r3, r3, #13
 800d9f4:	b2db      	uxtb	r3, r3
 800d9f6:	f003 0301 	and.w	r3, r3, #1
 800d9fa:	b2da      	uxtb	r2, r3
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da04:	0b1b      	lsrs	r3, r3, #12
 800da06:	b2db      	uxtb	r3, r3
 800da08:	f003 0301 	and.w	r3, r3, #1
 800da0c:	b2da      	uxtb	r2, r3
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	2200      	movs	r2, #0
 800da16:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d163      	bne.n	800dae8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da24:	009a      	lsls	r2, r3, #2
 800da26:	f640 73fc 	movw	r3, #4092	; 0xffc
 800da2a:	4013      	ands	r3, r2
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800da30:	0f92      	lsrs	r2, r2, #30
 800da32:	431a      	orrs	r2, r3
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da3c:	0edb      	lsrs	r3, r3, #27
 800da3e:	b2db      	uxtb	r3, r3
 800da40:	f003 0307 	and.w	r3, r3, #7
 800da44:	b2da      	uxtb	r2, r3
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da4e:	0e1b      	lsrs	r3, r3, #24
 800da50:	b2db      	uxtb	r3, r3
 800da52:	f003 0307 	and.w	r3, r3, #7
 800da56:	b2da      	uxtb	r2, r3
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da60:	0d5b      	lsrs	r3, r3, #21
 800da62:	b2db      	uxtb	r3, r3
 800da64:	f003 0307 	and.w	r3, r3, #7
 800da68:	b2da      	uxtb	r2, r3
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da72:	0c9b      	lsrs	r3, r3, #18
 800da74:	b2db      	uxtb	r3, r3
 800da76:	f003 0307 	and.w	r3, r3, #7
 800da7a:	b2da      	uxtb	r2, r3
 800da7c:	683b      	ldr	r3, [r7, #0]
 800da7e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da84:	0bdb      	lsrs	r3, r3, #15
 800da86:	b2db      	uxtb	r3, r3
 800da88:	f003 0307 	and.w	r3, r3, #7
 800da8c:	b2da      	uxtb	r2, r3
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	691b      	ldr	r3, [r3, #16]
 800da96:	1c5a      	adds	r2, r3, #1
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	7e1b      	ldrb	r3, [r3, #24]
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	f003 0307 	and.w	r3, r3, #7
 800daa6:	3302      	adds	r3, #2
 800daa8:	2201      	movs	r2, #1
 800daaa:	fa02 f303 	lsl.w	r3, r2, r3
 800daae:	687a      	ldr	r2, [r7, #4]
 800dab0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800dab2:	fb03 f202 	mul.w	r2, r3, r2
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	7a1b      	ldrb	r3, [r3, #8]
 800dabe:	b2db      	uxtb	r3, r3
 800dac0:	f003 030f 	and.w	r3, r3, #15
 800dac4:	2201      	movs	r2, #1
 800dac6:	409a      	lsls	r2, r3
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800dad4:	0a52      	lsrs	r2, r2, #9
 800dad6:	fb03 f202 	mul.w	r2, r3, r2
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dae4:	655a      	str	r2, [r3, #84]	; 0x54
 800dae6:	e031      	b.n	800db4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daec:	2b01      	cmp	r3, #1
 800daee:	d11d      	bne.n	800db2c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800daf4:	041b      	lsls	r3, r3, #16
 800daf6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dafe:	0c1b      	lsrs	r3, r3, #16
 800db00:	431a      	orrs	r2, r3
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	691b      	ldr	r3, [r3, #16]
 800db0a:	3301      	adds	r3, #1
 800db0c:	029a      	lsls	r2, r3, #10
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db20:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	655a      	str	r2, [r3, #84]	; 0x54
 800db2a:	e00f      	b.n	800db4c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	4a58      	ldr	r2, [pc, #352]	; (800dc94 <HAL_SD_GetCardCSD+0x344>)
 800db32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db38:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2201      	movs	r2, #1
 800db44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800db48:	2301      	movs	r3, #1
 800db4a:	e09d      	b.n	800dc88 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db50:	0b9b      	lsrs	r3, r3, #14
 800db52:	b2db      	uxtb	r3, r3
 800db54:	f003 0301 	and.w	r3, r3, #1
 800db58:	b2da      	uxtb	r2, r3
 800db5a:	683b      	ldr	r3, [r7, #0]
 800db5c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db62:	09db      	lsrs	r3, r3, #7
 800db64:	b2db      	uxtb	r3, r3
 800db66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db6a:	b2da      	uxtb	r2, r3
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db74:	b2db      	uxtb	r3, r3
 800db76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db7a:	b2da      	uxtb	r2, r3
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db84:	0fdb      	lsrs	r3, r3, #31
 800db86:	b2da      	uxtb	r2, r3
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800db90:	0f5b      	lsrs	r3, r3, #29
 800db92:	b2db      	uxtb	r3, r3
 800db94:	f003 0303 	and.w	r3, r3, #3
 800db98:	b2da      	uxtb	r2, r3
 800db9a:	683b      	ldr	r3, [r7, #0]
 800db9c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dba2:	0e9b      	lsrs	r3, r3, #26
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	f003 0307 	and.w	r3, r3, #7
 800dbaa:	b2da      	uxtb	r2, r3
 800dbac:	683b      	ldr	r3, [r7, #0]
 800dbae:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbb4:	0d9b      	lsrs	r3, r3, #22
 800dbb6:	b2db      	uxtb	r3, r3
 800dbb8:	f003 030f 	and.w	r3, r3, #15
 800dbbc:	b2da      	uxtb	r2, r3
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbc6:	0d5b      	lsrs	r3, r3, #21
 800dbc8:	b2db      	uxtb	r3, r3
 800dbca:	f003 0301 	and.w	r3, r3, #1
 800dbce:	b2da      	uxtb	r2, r3
 800dbd0:	683b      	ldr	r3, [r7, #0]
 800dbd2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800dbd6:	683b      	ldr	r3, [r7, #0]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbe2:	0c1b      	lsrs	r3, r3, #16
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	f003 0301 	and.w	r3, r3, #1
 800dbea:	b2da      	uxtb	r2, r3
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dbf6:	0bdb      	lsrs	r3, r3, #15
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	f003 0301 	and.w	r3, r3, #1
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc0a:	0b9b      	lsrs	r3, r3, #14
 800dc0c:	b2db      	uxtb	r3, r3
 800dc0e:	f003 0301 	and.w	r3, r3, #1
 800dc12:	b2da      	uxtb	r2, r3
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc1e:	0b5b      	lsrs	r3, r3, #13
 800dc20:	b2db      	uxtb	r3, r3
 800dc22:	f003 0301 	and.w	r3, r3, #1
 800dc26:	b2da      	uxtb	r2, r3
 800dc28:	683b      	ldr	r3, [r7, #0]
 800dc2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc32:	0b1b      	lsrs	r3, r3, #12
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	f003 0301 	and.w	r3, r3, #1
 800dc3a:	b2da      	uxtb	r2, r3
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc46:	0a9b      	lsrs	r3, r3, #10
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	f003 0303 	and.w	r3, r3, #3
 800dc4e:	b2da      	uxtb	r2, r3
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc5a:	0a1b      	lsrs	r3, r3, #8
 800dc5c:	b2db      	uxtb	r3, r3
 800dc5e:	f003 0303 	and.w	r3, r3, #3
 800dc62:	b2da      	uxtb	r2, r3
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dc6e:	085b      	lsrs	r3, r3, #1
 800dc70:	b2db      	uxtb	r3, r3
 800dc72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc76:	b2da      	uxtb	r2, r3
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	2201      	movs	r2, #1
 800dc82:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dc86:	2300      	movs	r3, #0
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	370c      	adds	r7, #12
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc92:	4770      	bx	lr
 800dc94:	1fe00fff 	.word	0x1fe00fff

0800dc98 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b094      	sub	sp, #80	; 0x50
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
 800dca0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dca2:	2300      	movs	r3, #0
 800dca4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dcae:	b2db      	uxtb	r3, r3
 800dcb0:	2b03      	cmp	r3, #3
 800dcb2:	d101      	bne.n	800dcb8 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800dcb4:	2301      	movs	r3, #1
 800dcb6:	e0a7      	b.n	800de08 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dcb8:	f107 0308 	add.w	r3, r7, #8
 800dcbc:	4619      	mov	r1, r3
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 fb62 	bl	800e388 <SD_SendSDStatus>
 800dcc4:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dcc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d011      	beq.n	800dcf0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	4a4f      	ldr	r2, [pc, #316]	; (800de10 <HAL_SD_GetCardStatus+0x178>)
 800dcd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dcd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dcda:	431a      	orrs	r2, r3
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2201      	movs	r2, #1
 800dce4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dce8:	2301      	movs	r3, #1
 800dcea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dcee:	e070      	b.n	800ddd2 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	099b      	lsrs	r3, r3, #6
 800dcf4:	b2db      	uxtb	r3, r3
 800dcf6:	f003 0303 	and.w	r3, r3, #3
 800dcfa:	b2da      	uxtb	r2, r3
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	095b      	lsrs	r3, r3, #5
 800dd04:	b2db      	uxtb	r3, r3
 800dd06:	f003 0301 	and.w	r3, r3, #1
 800dd0a:	b2da      	uxtb	r2, r3
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	0a1b      	lsrs	r3, r3, #8
 800dd14:	b29b      	uxth	r3, r3
 800dd16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dd1a:	b29a      	uxth	r2, r3
 800dd1c:	68bb      	ldr	r3, [r7, #8]
 800dd1e:	0e1b      	lsrs	r3, r3, #24
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	4313      	orrs	r3, r2
 800dd24:	b29a      	uxth	r2, r3
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	061a      	lsls	r2, r3, #24
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	021b      	lsls	r3, r3, #8
 800dd32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd36:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	0a1b      	lsrs	r3, r3, #8
 800dd3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dd40:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	0e1b      	lsrs	r3, r3, #24
 800dd46:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	b2da      	uxtb	r2, r3
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	0a1b      	lsrs	r3, r3, #8
 800dd58:	b2da      	uxtb	r2, r3
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	0d1b      	lsrs	r3, r3, #20
 800dd62:	b2db      	uxtb	r3, r3
 800dd64:	f003 030f 	and.w	r3, r3, #15
 800dd68:	b2da      	uxtb	r2, r3
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	0c1b      	lsrs	r3, r3, #16
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dd78:	b29a      	uxth	r2, r3
 800dd7a:	697b      	ldr	r3, [r7, #20]
 800dd7c:	b29b      	uxth	r3, r3
 800dd7e:	b2db      	uxtb	r3, r3
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	4313      	orrs	r3, r2
 800dd84:	b29a      	uxth	r2, r3
 800dd86:	683b      	ldr	r3, [r7, #0]
 800dd88:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	0a9b      	lsrs	r3, r3, #10
 800dd8e:	b2db      	uxtb	r3, r3
 800dd90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd94:	b2da      	uxtb	r2, r3
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	0a1b      	lsrs	r3, r3, #8
 800dd9e:	b2db      	uxtb	r3, r3
 800dda0:	f003 0303 	and.w	r3, r3, #3
 800dda4:	b2da      	uxtb	r2, r3
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	091b      	lsrs	r3, r3, #4
 800ddae:	b2db      	uxtb	r3, r3
 800ddb0:	f003 030f 	and.w	r3, r3, #15
 800ddb4:	b2da      	uxtb	r2, r3
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	b2db      	uxtb	r3, r3
 800ddbe:	f003 030f 	and.w	r3, r3, #15
 800ddc2:	b2da      	uxtb	r2, r3
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800ddc8:	69bb      	ldr	r3, [r7, #24]
 800ddca:	0e1b      	lsrs	r3, r3, #24
 800ddcc:	b2da      	uxtb	r2, r3
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ddda:	4618      	mov	r0, r3
 800dddc:	f003 fd88 	bl	80118f0 <SDMMC_CmdBlockLength>
 800dde0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dde2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d00d      	beq.n	800de04 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	4a08      	ldr	r2, [pc, #32]	; (800de10 <HAL_SD_GetCardStatus+0x178>)
 800ddee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ddf4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800ddfe:	2301      	movs	r3, #1
 800de00:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800de04:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3750      	adds	r7, #80	; 0x50
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}
 800de10:	1fe00fff 	.word	0x1fe00fff

0800de14 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800de14:	b480      	push	{r7}
 800de16:	b083      	sub	sp, #12
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800de4a:	683b      	ldr	r3, [r7, #0]
 800de4c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800de5e:	2300      	movs	r3, #0
}
 800de60:	4618      	mov	r0, r3
 800de62:	370c      	adds	r7, #12
 800de64:	46bd      	mov	sp, r7
 800de66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6a:	4770      	bx	lr

0800de6c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800de6c:	b590      	push	{r4, r7, lr}
 800de6e:	b08d      	sub	sp, #52	; 0x34
 800de70:	af02      	add	r7, sp, #8
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800de76:	2300      	movs	r3, #0
 800de78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	2203      	movs	r2, #3
 800de80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de88:	2b03      	cmp	r3, #3
 800de8a:	d02e      	beq.n	800deea <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de92:	d106      	bne.n	800dea2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	635a      	str	r2, [r3, #52]	; 0x34
 800dea0:	e029      	b.n	800def6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dea8:	d10a      	bne.n	800dec0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 fb64 	bl	800e578 <SD_WideBus_Enable>
 800deb0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800deb6:	6a3b      	ldr	r3, [r7, #32]
 800deb8:	431a      	orrs	r2, r3
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	635a      	str	r2, [r3, #52]	; 0x34
 800debe:	e01a      	b.n	800def6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d10a      	bne.n	800dedc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f000 fba1 	bl	800e60e <SD_WideBus_Disable>
 800decc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ded2:	6a3b      	ldr	r3, [r7, #32]
 800ded4:	431a      	orrs	r2, r3
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	635a      	str	r2, [r3, #52]	; 0x34
 800deda:	e00c      	b.n	800def6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dee0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	635a      	str	r2, [r3, #52]	; 0x34
 800dee8:	e005      	b.n	800def6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800deee:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800defa:	2b00      	cmp	r3, #0
 800defc:	d007      	beq.n	800df0e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	4a5f      	ldr	r2, [pc, #380]	; (800e080 <HAL_SD_ConfigWideBusOperation+0x214>)
 800df04:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800df06:	2301      	movs	r3, #1
 800df08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800df0c:	e096      	b.n	800e03c <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800df0e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800df12:	f04f 0100 	mov.w	r1, #0
 800df16:	f7fd fea3 	bl	800bc60 <HAL_RCCEx_GetPeriphCLKFreq>
 800df1a:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800df1c:	69fb      	ldr	r3, [r7, #28]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	f000 8083 	beq.w	800e02a <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	689b      	ldr	r3, [r3, #8]
 800df2e:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	691b      	ldr	r3, [r3, #16]
 800df38:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	695a      	ldr	r2, [r3, #20]
 800df3e:	69fb      	ldr	r3, [r7, #28]
 800df40:	4950      	ldr	r1, [pc, #320]	; (800e084 <HAL_SD_ConfigWideBusOperation+0x218>)
 800df42:	fba1 1303 	umull	r1, r3, r1, r3
 800df46:	0e1b      	lsrs	r3, r3, #24
 800df48:	429a      	cmp	r2, r3
 800df4a:	d303      	bcc.n	800df54 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	695b      	ldr	r3, [r3, #20]
 800df50:	61bb      	str	r3, [r7, #24]
 800df52:	e05a      	b.n	800e00a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800df5c:	d103      	bne.n	800df66 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	695b      	ldr	r3, [r3, #20]
 800df62:	61bb      	str	r3, [r7, #24]
 800df64:	e051      	b.n	800e00a <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df6e:	d126      	bne.n	800dfbe <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	695b      	ldr	r3, [r3, #20]
 800df74:	2b00      	cmp	r3, #0
 800df76:	d10e      	bne.n	800df96 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800df78:	69fb      	ldr	r3, [r7, #28]
 800df7a:	4a43      	ldr	r2, [pc, #268]	; (800e088 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800df7c:	4293      	cmp	r3, r2
 800df7e:	d906      	bls.n	800df8e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	4a40      	ldr	r2, [pc, #256]	; (800e084 <HAL_SD_ConfigWideBusOperation+0x218>)
 800df84:	fba2 2303 	umull	r2, r3, r2, r3
 800df88:	0e5b      	lsrs	r3, r3, #25
 800df8a:	61bb      	str	r3, [r7, #24]
 800df8c:	e03d      	b.n	800e00a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	695b      	ldr	r3, [r3, #20]
 800df92:	61bb      	str	r3, [r7, #24]
 800df94:	e039      	b.n	800e00a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	695b      	ldr	r3, [r3, #20]
 800df9a:	005b      	lsls	r3, r3, #1
 800df9c:	69fa      	ldr	r2, [r7, #28]
 800df9e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfa2:	4a39      	ldr	r2, [pc, #228]	; (800e088 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	d906      	bls.n	800dfb6 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	4a36      	ldr	r2, [pc, #216]	; (800e084 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dfac:	fba2 2303 	umull	r2, r3, r2, r3
 800dfb0:	0e5b      	lsrs	r3, r3, #25
 800dfb2:	61bb      	str	r3, [r7, #24]
 800dfb4:	e029      	b.n	800e00a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	695b      	ldr	r3, [r3, #20]
 800dfba:	61bb      	str	r3, [r7, #24]
 800dfbc:	e025      	b.n	800e00a <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	695b      	ldr	r3, [r3, #20]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d10e      	bne.n	800dfe4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800dfc6:	69fb      	ldr	r3, [r7, #28]
 800dfc8:	4a30      	ldr	r2, [pc, #192]	; (800e08c <HAL_SD_ConfigWideBusOperation+0x220>)
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	d906      	bls.n	800dfdc <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800dfce:	69fb      	ldr	r3, [r7, #28]
 800dfd0:	4a2c      	ldr	r2, [pc, #176]	; (800e084 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dfd2:	fba2 2303 	umull	r2, r3, r2, r3
 800dfd6:	0e1b      	lsrs	r3, r3, #24
 800dfd8:	61bb      	str	r3, [r7, #24]
 800dfda:	e016      	b.n	800e00a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	695b      	ldr	r3, [r3, #20]
 800dfe0:	61bb      	str	r3, [r7, #24]
 800dfe2:	e012      	b.n	800e00a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	695b      	ldr	r3, [r3, #20]
 800dfe8:	005b      	lsls	r3, r3, #1
 800dfea:	69fa      	ldr	r2, [r7, #28]
 800dfec:	fbb2 f3f3 	udiv	r3, r2, r3
 800dff0:	4a26      	ldr	r2, [pc, #152]	; (800e08c <HAL_SD_ConfigWideBusOperation+0x220>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d906      	bls.n	800e004 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800dff6:	69fb      	ldr	r3, [r7, #28]
 800dff8:	4a22      	ldr	r2, [pc, #136]	; (800e084 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dffa:	fba2 2303 	umull	r2, r3, r2, r3
 800dffe:	0e1b      	lsrs	r3, r3, #24
 800e000:	61bb      	str	r3, [r7, #24]
 800e002:	e002      	b.n	800e00a <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	695b      	ldr	r3, [r3, #20]
 800e008:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681c      	ldr	r4, [r3, #0]
 800e00e:	466a      	mov	r2, sp
 800e010:	f107 0314 	add.w	r3, r7, #20
 800e014:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e018:	e882 0003 	stmia.w	r2, {r0, r1}
 800e01c:	f107 0308 	add.w	r3, r7, #8
 800e020:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e022:	4620      	mov	r0, r4
 800e024:	f003 fb86 	bl	8011734 <SDMMC_Init>
 800e028:	e008      	b.n	800e03c <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e02e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800e036:	2301      	movs	r3, #1
 800e038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e044:	4618      	mov	r0, r3
 800e046:	f003 fc53 	bl	80118f0 <SDMMC_CmdBlockLength>
 800e04a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e04c:	6a3b      	ldr	r3, [r7, #32]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d00c      	beq.n	800e06c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	4a0a      	ldr	r2, [pc, #40]	; (800e080 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e058:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e05e:	6a3b      	ldr	r3, [r7, #32]
 800e060:	431a      	orrs	r2, r3
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e066:	2301      	movs	r3, #1
 800e068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2201      	movs	r2, #1
 800e070:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e074:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e078:	4618      	mov	r0, r3
 800e07a:	372c      	adds	r7, #44	; 0x2c
 800e07c:	46bd      	mov	sp, r7
 800e07e:	bd90      	pop	{r4, r7, pc}
 800e080:	1fe00fff 	.word	0x1fe00fff
 800e084:	55e63b89 	.word	0x55e63b89
 800e088:	02faf080 	.word	0x02faf080
 800e08c:	017d7840 	.word	0x017d7840

0800e090 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b086      	sub	sp, #24
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e098:	2300      	movs	r3, #0
 800e09a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e09c:	f107 030c 	add.w	r3, r7, #12
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f000 fa40 	bl	800e528 <SD_SendStatus>
 800e0a8:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d005      	beq.n	800e0bc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	431a      	orrs	r2, r3
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	0a5b      	lsrs	r3, r3, #9
 800e0c0:	f003 030f 	and.w	r3, r3, #15
 800e0c4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e0c6:	693b      	ldr	r3, [r7, #16]
}
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	3718      	adds	r7, #24
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b090      	sub	sp, #64	; 0x40
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e0dc:	f7f5 f8fe 	bl	80032dc <HAL_GetTick>
 800e0e0:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f003 fb7d 	bl	80117e6 <SDMMC_GetPowerState>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d102      	bne.n	800e0f8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e0f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e0f6:	e0b5      	b.n	800e264 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0fc:	2b03      	cmp	r3, #3
 800e0fe:	d02e      	beq.n	800e15e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	4618      	mov	r0, r3
 800e106:	f003 fdc8 	bl	8011c9a <SDMMC_CmdSendCID>
 800e10a:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e10c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d001      	beq.n	800e116 <SD_InitCard+0x46>
    {
      return errorstate;
 800e112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e114:	e0a6      	b.n	800e264 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2100      	movs	r1, #0
 800e11c:	4618      	mov	r0, r3
 800e11e:	f003 fba8 	bl	8011872 <SDMMC_GetResponse>
 800e122:	4602      	mov	r2, r0
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	2104      	movs	r1, #4
 800e12e:	4618      	mov	r0, r3
 800e130:	f003 fb9f 	bl	8011872 <SDMMC_GetResponse>
 800e134:	4602      	mov	r2, r0
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	2108      	movs	r1, #8
 800e140:	4618      	mov	r0, r3
 800e142:	f003 fb96 	bl	8011872 <SDMMC_GetResponse>
 800e146:	4602      	mov	r2, r0
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	210c      	movs	r1, #12
 800e152:	4618      	mov	r0, r3
 800e154:	f003 fb8d 	bl	8011872 <SDMMC_GetResponse>
 800e158:	4602      	mov	r2, r0
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e162:	2b03      	cmp	r3, #3
 800e164:	d01d      	beq.n	800e1a2 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e166:	e019      	b.n	800e19c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f107 020a 	add.w	r2, r7, #10
 800e170:	4611      	mov	r1, r2
 800e172:	4618      	mov	r0, r3
 800e174:	f003 fdd0 	bl	8011d18 <SDMMC_CmdSetRelAdd>
 800e178:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d001      	beq.n	800e184 <SD_InitCard+0xb4>
      {
        return errorstate;
 800e180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e182:	e06f      	b.n	800e264 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e184:	f7f5 f8aa 	bl	80032dc <HAL_GetTick>
 800e188:	4602      	mov	r2, r0
 800e18a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e18c:	1ad3      	subs	r3, r2, r3
 800e18e:	f241 3287 	movw	r2, #4999	; 0x1387
 800e192:	4293      	cmp	r3, r2
 800e194:	d902      	bls.n	800e19c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e196:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e19a:	e063      	b.n	800e264 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e19c:	897b      	ldrh	r3, [r7, #10]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d0e2      	beq.n	800e168 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1a6:	2b03      	cmp	r3, #3
 800e1a8:	d036      	beq.n	800e218 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e1aa:	897b      	ldrh	r3, [r7, #10]
 800e1ac:	461a      	mov	r2, r3
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1ba:	041b      	lsls	r3, r3, #16
 800e1bc:	4619      	mov	r1, r3
 800e1be:	4610      	mov	r0, r2
 800e1c0:	f003 fd8a 	bl	8011cd8 <SDMMC_CmdSendCSD>
 800e1c4:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d001      	beq.n	800e1d0 <SD_InitCard+0x100>
    {
      return errorstate;
 800e1cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e1ce:	e049      	b.n	800e264 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	2100      	movs	r1, #0
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f003 fb4b 	bl	8011872 <SDMMC_GetResponse>
 800e1dc:	4602      	mov	r2, r0
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	2104      	movs	r1, #4
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	f003 fb42 	bl	8011872 <SDMMC_GetResponse>
 800e1ee:	4602      	mov	r2, r0
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	2108      	movs	r1, #8
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f003 fb39 	bl	8011872 <SDMMC_GetResponse>
 800e200:	4602      	mov	r2, r0
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	210c      	movs	r1, #12
 800e20c:	4618      	mov	r0, r3
 800e20e:	f003 fb30 	bl	8011872 <SDMMC_GetResponse>
 800e212:	4602      	mov	r2, r0
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	2104      	movs	r1, #4
 800e21e:	4618      	mov	r0, r3
 800e220:	f003 fb27 	bl	8011872 <SDMMC_GetResponse>
 800e224:	4603      	mov	r3, r0
 800e226:	0d1a      	lsrs	r2, r3, #20
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e22c:	f107 030c 	add.w	r3, r7, #12
 800e230:	4619      	mov	r1, r3
 800e232:	6878      	ldr	r0, [r7, #4]
 800e234:	f7ff fb8c 	bl	800d950 <HAL_SD_GetCardCSD>
 800e238:	4603      	mov	r3, r0
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d002      	beq.n	800e244 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e23e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e242:	e00f      	b.n	800e264 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681a      	ldr	r2, [r3, #0]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e24c:	041b      	lsls	r3, r3, #16
 800e24e:	4619      	mov	r1, r3
 800e250:	4610      	mov	r0, r2
 800e252:	f003 fc39 	bl	8011ac8 <SDMMC_CmdSelDesel>
 800e256:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d001      	beq.n	800e262 <SD_InitCard+0x192>
  {
    return errorstate;
 800e25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e260:	e000      	b.n	800e264 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e262:	2300      	movs	r3, #0
}
 800e264:	4618      	mov	r0, r3
 800e266:	3740      	adds	r7, #64	; 0x40
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b086      	sub	sp, #24
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e274:	2300      	movs	r3, #0
 800e276:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e278:	2300      	movs	r3, #0
 800e27a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e27c:	2300      	movs	r3, #0
 800e27e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4618      	mov	r0, r3
 800e286:	f003 fc42 	bl	8011b0e <SDMMC_CmdGoIdleState>
 800e28a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e28c:	68fb      	ldr	r3, [r7, #12]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d001      	beq.n	800e296 <SD_PowerON+0x2a>
  {
    return errorstate;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	e072      	b.n	800e37c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	4618      	mov	r0, r3
 800e29c:	f003 fc55 	bl	8011b4a <SDMMC_CmdOperCond>
 800e2a0:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e2a8:	d10d      	bne.n	800e2c6 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f003 fc2a 	bl	8011b0e <SDMMC_CmdGoIdleState>
 800e2ba:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d004      	beq.n	800e2cc <SD_PowerON+0x60>
    {
      return errorstate;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	e05a      	b.n	800e37c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2201      	movs	r2, #1
 800e2ca:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e2d0:	2b01      	cmp	r3, #1
 800e2d2:	d137      	bne.n	800e344 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	2100      	movs	r1, #0
 800e2da:	4618      	mov	r0, r3
 800e2dc:	f003 fc55 	bl	8011b8a <SDMMC_CmdAppCommand>
 800e2e0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d02d      	beq.n	800e344 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e2e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e2ec:	e046      	b.n	800e37c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	2100      	movs	r1, #0
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f003 fc48 	bl	8011b8a <SDMMC_CmdAppCommand>
 800e2fa:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d001      	beq.n	800e306 <SD_PowerON+0x9a>
    {
      return errorstate;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	e03a      	b.n	800e37c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	491e      	ldr	r1, [pc, #120]	; (800e384 <SD_PowerON+0x118>)
 800e30c:	4618      	mov	r0, r3
 800e30e:	f003 fc5f 	bl	8011bd0 <SDMMC_CmdAppOperCommand>
 800e312:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d002      	beq.n	800e320 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e31a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e31e:	e02d      	b.n	800e37c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	2100      	movs	r1, #0
 800e326:	4618      	mov	r0, r3
 800e328:	f003 faa3 	bl	8011872 <SDMMC_GetResponse>
 800e32c:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e32e:	697b      	ldr	r3, [r7, #20]
 800e330:	0fdb      	lsrs	r3, r3, #31
 800e332:	2b01      	cmp	r3, #1
 800e334:	d101      	bne.n	800e33a <SD_PowerON+0xce>
 800e336:	2301      	movs	r3, #1
 800e338:	e000      	b.n	800e33c <SD_PowerON+0xd0>
 800e33a:	2300      	movs	r3, #0
 800e33c:	613b      	str	r3, [r7, #16]

    count++;
 800e33e:	68bb      	ldr	r3, [r7, #8]
 800e340:	3301      	adds	r3, #1
 800e342:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d802      	bhi.n	800e354 <SD_PowerON+0xe8>
 800e34e:	693b      	ldr	r3, [r7, #16]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d0cc      	beq.n	800e2ee <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e354:	68bb      	ldr	r3, [r7, #8]
 800e356:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d902      	bls.n	800e364 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e35e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e362:	e00b      	b.n	800e37c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2200      	movs	r2, #0
 800e368:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e370:	2b00      	cmp	r3, #0
 800e372:	d002      	beq.n	800e37a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	2201      	movs	r2, #1
 800e378:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e37a:	2300      	movs	r3, #0
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3718      	adds	r7, #24
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}
 800e384:	c1100000 	.word	0xc1100000

0800e388 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b08c      	sub	sp, #48	; 0x30
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
 800e390:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e392:	f7f4 ffa3 	bl	80032dc <HAL_GetTick>
 800e396:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	2100      	movs	r1, #0
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f003 fa65 	bl	8011872 <SDMMC_GetResponse>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3b2:	d102      	bne.n	800e3ba <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e3b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3b8:	e0b0      	b.n	800e51c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	2140      	movs	r1, #64	; 0x40
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f003 fa95 	bl	80118f0 <SDMMC_CmdBlockLength>
 800e3c6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3c8:	6a3b      	ldr	r3, [r7, #32]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d005      	beq.n	800e3da <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e3d6:	6a3b      	ldr	r3, [r7, #32]
 800e3d8:	e0a0      	b.n	800e51c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681a      	ldr	r2, [r3, #0]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3e2:	041b      	lsls	r3, r3, #16
 800e3e4:	4619      	mov	r1, r3
 800e3e6:	4610      	mov	r0, r2
 800e3e8:	f003 fbcf 	bl	8011b8a <SDMMC_CmdAppCommand>
 800e3ec:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3ee:	6a3b      	ldr	r3, [r7, #32]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d005      	beq.n	800e400 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e3fc:	6a3b      	ldr	r3, [r7, #32]
 800e3fe:	e08d      	b.n	800e51c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e400:	f04f 33ff 	mov.w	r3, #4294967295
 800e404:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e406:	2340      	movs	r3, #64	; 0x40
 800e408:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e40a:	2360      	movs	r3, #96	; 0x60
 800e40c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e40e:	2302      	movs	r3, #2
 800e410:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e412:	2300      	movs	r3, #0
 800e414:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e416:	2301      	movs	r3, #1
 800e418:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f107 0208 	add.w	r2, r7, #8
 800e422:	4611      	mov	r1, r2
 800e424:	4618      	mov	r0, r3
 800e426:	f003 fa37 	bl	8011898 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	4618      	mov	r0, r3
 800e430:	f003 fcb7 	bl	8011da2 <SDMMC_CmdStatusRegister>
 800e434:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e436:	6a3b      	ldr	r3, [r7, #32]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d02b      	beq.n	800e494 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e444:	6a3b      	ldr	r3, [r7, #32]
 800e446:	e069      	b.n	800e51c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e44e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e452:	2b00      	cmp	r3, #0
 800e454:	d013      	beq.n	800e47e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e456:	2300      	movs	r3, #0
 800e458:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e45a:	e00d      	b.n	800e478 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	4618      	mov	r0, r3
 800e462:	f003 f991 	bl	8011788 <SDMMC_ReadFIFO>
 800e466:	4602      	mov	r2, r0
 800e468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46a:	601a      	str	r2, [r3, #0]
        pData++;
 800e46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e46e:	3304      	adds	r3, #4
 800e470:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e474:	3301      	adds	r3, #1
 800e476:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47a:	2b07      	cmp	r3, #7
 800e47c:	d9ee      	bls.n	800e45c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e47e:	f7f4 ff2d 	bl	80032dc <HAL_GetTick>
 800e482:	4602      	mov	r2, r0
 800e484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e486:	1ad3      	subs	r3, r2, r3
 800e488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e48c:	d102      	bne.n	800e494 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e48e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e492:	e043      	b.n	800e51c <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e49a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d0d2      	beq.n	800e448 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4a8:	f003 0308 	and.w	r3, r3, #8
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d001      	beq.n	800e4b4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e4b0:	2308      	movs	r3, #8
 800e4b2:	e033      	b.n	800e51c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	681b      	ldr	r3, [r3, #0]
 800e4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4ba:	f003 0302 	and.w	r3, r3, #2
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d001      	beq.n	800e4c6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e4c2:	2302      	movs	r3, #2
 800e4c4:	e02a      	b.n	800e51c <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4cc:	f003 0320 	and.w	r3, r3, #32
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d017      	beq.n	800e504 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e4d4:	2320      	movs	r3, #32
 800e4d6:	e021      	b.n	800e51c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	4618      	mov	r0, r3
 800e4de:	f003 f953 	bl	8011788 <SDMMC_ReadFIFO>
 800e4e2:	4602      	mov	r2, r0
 800e4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4e6:	601a      	str	r2, [r3, #0]
    pData++;
 800e4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ea:	3304      	adds	r3, #4
 800e4ec:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e4ee:	f7f4 fef5 	bl	80032dc <HAL_GetTick>
 800e4f2:	4602      	mov	r2, r0
 800e4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f6:	1ad3      	subs	r3, r2, r3
 800e4f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4fc:	d102      	bne.n	800e504 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e4fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e502:	e00b      	b.n	800e51c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e50a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1e2      	bne.n	800e4d8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	4a03      	ldr	r2, [pc, #12]	; (800e524 <SD_SendSDStatus+0x19c>)
 800e518:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e51a:	2300      	movs	r3, #0
}
 800e51c:	4618      	mov	r0, r3
 800e51e:	3730      	adds	r7, #48	; 0x30
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	18000f3a 	.word	0x18000f3a

0800e528 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d102      	bne.n	800e53e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e538:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e53c:	e018      	b.n	800e570 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	681a      	ldr	r2, [r3, #0]
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e546:	041b      	lsls	r3, r3, #16
 800e548:	4619      	mov	r1, r3
 800e54a:	4610      	mov	r0, r2
 800e54c:	f003 fc06 	bl	8011d5c <SDMMC_CmdSendStatus>
 800e550:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	2b00      	cmp	r3, #0
 800e556:	d001      	beq.n	800e55c <SD_SendStatus+0x34>
  {
    return errorstate;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	e009      	b.n	800e570 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	2100      	movs	r1, #0
 800e562:	4618      	mov	r0, r3
 800e564:	f003 f985 	bl	8011872 <SDMMC_GetResponse>
 800e568:	4602      	mov	r2, r0
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e56e:	2300      	movs	r3, #0
}
 800e570:	4618      	mov	r0, r3
 800e572:	3710      	adds	r7, #16
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e578:	b580      	push	{r7, lr}
 800e57a:	b086      	sub	sp, #24
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e580:	2300      	movs	r3, #0
 800e582:	60fb      	str	r3, [r7, #12]
 800e584:	2300      	movs	r3, #0
 800e586:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	2100      	movs	r1, #0
 800e58e:	4618      	mov	r0, r3
 800e590:	f003 f96f 	bl	8011872 <SDMMC_GetResponse>
 800e594:	4603      	mov	r3, r0
 800e596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e59a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e59e:	d102      	bne.n	800e5a6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e5a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e5a4:	e02f      	b.n	800e606 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e5a6:	f107 030c 	add.w	r3, r7, #12
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f000 f879 	bl	800e6a4 <SD_FindSCR>
 800e5b2:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d001      	beq.n	800e5be <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	e023      	b.n	800e606 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	d01c      	beq.n	800e602 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681a      	ldr	r2, [r3, #0]
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5d0:	041b      	lsls	r3, r3, #16
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	f003 fad8 	bl	8011b8a <SDMMC_CmdAppCommand>
 800e5da:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e5dc:	697b      	ldr	r3, [r7, #20]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d001      	beq.n	800e5e6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	e00f      	b.n	800e606 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	2102      	movs	r1, #2
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f003 fb0f 	bl	8011c10 <SDMMC_CmdBusWidth>
 800e5f2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d001      	beq.n	800e5fe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	e003      	b.n	800e606 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e5fe:	2300      	movs	r3, #0
 800e600:	e001      	b.n	800e606 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e602:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e606:	4618      	mov	r0, r3
 800e608:	3718      	adds	r7, #24
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}

0800e60e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e60e:	b580      	push	{r7, lr}
 800e610:	b086      	sub	sp, #24
 800e612:	af00      	add	r7, sp, #0
 800e614:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e616:	2300      	movs	r3, #0
 800e618:	60fb      	str	r3, [r7, #12]
 800e61a:	2300      	movs	r3, #0
 800e61c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2100      	movs	r1, #0
 800e624:	4618      	mov	r0, r3
 800e626:	f003 f924 	bl	8011872 <SDMMC_GetResponse>
 800e62a:	4603      	mov	r3, r0
 800e62c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e630:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e634:	d102      	bne.n	800e63c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e636:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e63a:	e02f      	b.n	800e69c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e63c:	f107 030c 	add.w	r3, r7, #12
 800e640:	4619      	mov	r1, r3
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f000 f82e 	bl	800e6a4 <SD_FindSCR>
 800e648:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d001      	beq.n	800e654 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	e023      	b.n	800e69c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d01c      	beq.n	800e698 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681a      	ldr	r2, [r3, #0]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e666:	041b      	lsls	r3, r3, #16
 800e668:	4619      	mov	r1, r3
 800e66a:	4610      	mov	r0, r2
 800e66c:	f003 fa8d 	bl	8011b8a <SDMMC_CmdAppCommand>
 800e670:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	2b00      	cmp	r3, #0
 800e676:	d001      	beq.n	800e67c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e678:	697b      	ldr	r3, [r7, #20]
 800e67a:	e00f      	b.n	800e69c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	2100      	movs	r1, #0
 800e682:	4618      	mov	r0, r3
 800e684:	f003 fac4 	bl	8011c10 <SDMMC_CmdBusWidth>
 800e688:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d001      	beq.n	800e694 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	e003      	b.n	800e69c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e694:	2300      	movs	r3, #0
 800e696:	e001      	b.n	800e69c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e698:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e69c:	4618      	mov	r0, r3
 800e69e:	3718      	adds	r7, #24
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}

0800e6a4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b08e      	sub	sp, #56	; 0x38
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
 800e6ac:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e6ae:	f7f4 fe15 	bl	80032dc <HAL_GetTick>
 800e6b2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	60bb      	str	r3, [r7, #8]
 800e6bc:	2300      	movs	r3, #0
 800e6be:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e6c0:	683b      	ldr	r3, [r7, #0]
 800e6c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	2108      	movs	r1, #8
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	f003 f910 	bl	80118f0 <SDMMC_CmdBlockLength>
 800e6d0:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d001      	beq.n	800e6dc <SD_FindSCR+0x38>
  {
    return errorstate;
 800e6d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6da:	e0ad      	b.n	800e838 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681a      	ldr	r2, [r3, #0]
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6e4:	041b      	lsls	r3, r3, #16
 800e6e6:	4619      	mov	r1, r3
 800e6e8:	4610      	mov	r0, r2
 800e6ea:	f003 fa4e 	bl	8011b8a <SDMMC_CmdAppCommand>
 800e6ee:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d001      	beq.n	800e6fa <SD_FindSCR+0x56>
  {
    return errorstate;
 800e6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f8:	e09e      	b.n	800e838 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e6fa:	f04f 33ff 	mov.w	r3, #4294967295
 800e6fe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e700:	2308      	movs	r3, #8
 800e702:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e704:	2330      	movs	r3, #48	; 0x30
 800e706:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e708:	2302      	movs	r3, #2
 800e70a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e70c:	2300      	movs	r3, #0
 800e70e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e710:	2301      	movs	r3, #1
 800e712:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	f107 0210 	add.w	r2, r7, #16
 800e71c:	4611      	mov	r1, r2
 800e71e:	4618      	mov	r0, r3
 800e720:	f003 f8ba 	bl	8011898 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	4618      	mov	r0, r3
 800e72a:	f003 fa94 	bl	8011c56 <SDMMC_CmdSendSCR>
 800e72e:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e732:	2b00      	cmp	r3, #0
 800e734:	d027      	beq.n	800e786 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e738:	e07e      	b.n	800e838 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e740:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e744:	2b00      	cmp	r3, #0
 800e746:	d113      	bne.n	800e770 <SD_FindSCR+0xcc>
 800e748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d110      	bne.n	800e770 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	4618      	mov	r0, r3
 800e754:	f003 f818 	bl	8011788 <SDMMC_ReadFIFO>
 800e758:	4603      	mov	r3, r0
 800e75a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4618      	mov	r0, r3
 800e762:	f003 f811 	bl	8011788 <SDMMC_ReadFIFO>
 800e766:	4603      	mov	r3, r0
 800e768:	60fb      	str	r3, [r7, #12]
      index++;
 800e76a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e76c:	3301      	adds	r3, #1
 800e76e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e770:	f7f4 fdb4 	bl	80032dc <HAL_GetTick>
 800e774:	4602      	mov	r2, r0
 800e776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e778:	1ad3      	subs	r3, r2, r3
 800e77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e77e:	d102      	bne.n	800e786 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e780:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e784:	e058      	b.n	800e838 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e78c:	f240 532a 	movw	r3, #1322	; 0x52a
 800e790:	4013      	ands	r3, r2
 800e792:	2b00      	cmp	r3, #0
 800e794:	d0d1      	beq.n	800e73a <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e79c:	f003 0308 	and.w	r3, r3, #8
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d005      	beq.n	800e7b0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	2208      	movs	r2, #8
 800e7aa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e7ac:	2308      	movs	r3, #8
 800e7ae:	e043      	b.n	800e838 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7b6:	f003 0302 	and.w	r3, r3, #2
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d005      	beq.n	800e7ca <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	2202      	movs	r2, #2
 800e7c4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e7c6:	2302      	movs	r3, #2
 800e7c8:	e036      	b.n	800e838 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7d0:	f003 0320 	and.w	r3, r3, #32
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d005      	beq.n	800e7e4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	2220      	movs	r2, #32
 800e7de:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e7e0:	2320      	movs	r3, #32
 800e7e2:	e029      	b.n	800e838 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	4a15      	ldr	r2, [pc, #84]	; (800e840 <SD_FindSCR+0x19c>)
 800e7ea:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	061a      	lsls	r2, r3, #24
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	021b      	lsls	r3, r3, #8
 800e7f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e7f8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	0a1b      	lsrs	r3, r3, #8
 800e7fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e802:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	0e1b      	lsrs	r3, r3, #24
 800e808:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e80a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e80c:	601a      	str	r2, [r3, #0]
    scr++;
 800e80e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e810:	3304      	adds	r3, #4
 800e812:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	061a      	lsls	r2, r3, #24
 800e818:	68bb      	ldr	r3, [r7, #8]
 800e81a:	021b      	lsls	r3, r3, #8
 800e81c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e820:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	0a1b      	lsrs	r3, r3, #8
 800e826:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e82a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e82c:	68bb      	ldr	r3, [r7, #8]
 800e82e:	0e1b      	lsrs	r3, r3, #24
 800e830:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e834:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e836:	2300      	movs	r3, #0
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3738      	adds	r7, #56	; 0x38
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}
 800e840:	18000f3a 	.word	0x18000f3a

0800e844 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b086      	sub	sp, #24
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e850:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e856:	2b1f      	cmp	r3, #31
 800e858:	d936      	bls.n	800e8c8 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e85a:	2300      	movs	r3, #0
 800e85c:	617b      	str	r3, [r7, #20]
 800e85e:	e027      	b.n	800e8b0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4618      	mov	r0, r3
 800e866:	f002 ff8f 	bl	8011788 <SDMMC_ReadFIFO>
 800e86a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	b2da      	uxtb	r2, r3
 800e870:	693b      	ldr	r3, [r7, #16]
 800e872:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	3301      	adds	r3, #1
 800e878:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	0a1b      	lsrs	r3, r3, #8
 800e87e:	b2da      	uxtb	r2, r3
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	3301      	adds	r3, #1
 800e888:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	0c1b      	lsrs	r3, r3, #16
 800e88e:	b2da      	uxtb	r2, r3
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e894:	693b      	ldr	r3, [r7, #16]
 800e896:	3301      	adds	r3, #1
 800e898:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	0e1b      	lsrs	r3, r3, #24
 800e89e:	b2da      	uxtb	r2, r3
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e8aa:	697b      	ldr	r3, [r7, #20]
 800e8ac:	3301      	adds	r3, #1
 800e8ae:	617b      	str	r3, [r7, #20]
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	2b07      	cmp	r3, #7
 800e8b4:	d9d4      	bls.n	800e860 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	693a      	ldr	r2, [r7, #16]
 800e8ba:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e8c0:	f1a3 0220 	sub.w	r2, r3, #32
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e8c8:	bf00      	nop
 800e8ca:	3718      	adds	r7, #24
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}

0800e8d0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b086      	sub	sp, #24
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	69db      	ldr	r3, [r3, #28]
 800e8dc:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6a1b      	ldr	r3, [r3, #32]
 800e8e2:	2b1f      	cmp	r3, #31
 800e8e4:	d93a      	bls.n	800e95c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	617b      	str	r3, [r7, #20]
 800e8ea:	e02b      	b.n	800e944 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e8f2:	693b      	ldr	r3, [r7, #16]
 800e8f4:	3301      	adds	r3, #1
 800e8f6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	021a      	lsls	r2, r3, #8
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	4313      	orrs	r3, r2
 800e902:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	3301      	adds	r3, #1
 800e908:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e90a:	693b      	ldr	r3, [r7, #16]
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	041a      	lsls	r2, r3, #16
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	4313      	orrs	r3, r2
 800e914:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	3301      	adds	r3, #1
 800e91a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	781b      	ldrb	r3, [r3, #0]
 800e920:	061a      	lsls	r2, r3, #24
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	4313      	orrs	r3, r2
 800e926:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	3301      	adds	r3, #1
 800e92c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	f107 020c 	add.w	r2, r7, #12
 800e936:	4611      	mov	r1, r2
 800e938:	4618      	mov	r0, r3
 800e93a:	f002 ff32 	bl	80117a2 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	3301      	adds	r3, #1
 800e942:	617b      	str	r3, [r7, #20]
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	2b07      	cmp	r3, #7
 800e948:	d9d0      	bls.n	800e8ec <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	693a      	ldr	r2, [r7, #16]
 800e94e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6a1b      	ldr	r3, [r3, #32]
 800e954:	f1a3 0220 	sub.w	r2, r3, #32
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	621a      	str	r2, [r3, #32]
  }
}
 800e95c:	bf00      	nop
 800e95e:	3718      	adds	r7, #24
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e964:	b480      	push	{r7}
 800e966:	b083      	sub	sp, #12
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e96c:	bf00      	nop
 800e96e:	370c      	adds	r7, #12
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr

0800e978 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e978:	b480      	push	{r7}
 800e97a:	b083      	sub	sp, #12
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e980:	bf00      	nop
 800e982:	370c      	adds	r7, #12
 800e984:	46bd      	mov	sp, r7
 800e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98a:	4770      	bx	lr

0800e98c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e98c:	b480      	push	{r7}
 800e98e:	b083      	sub	sp, #12
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e994:	bf00      	nop
 800e996:	370c      	adds	r7, #12
 800e998:	46bd      	mov	sp, r7
 800e99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99e:	4770      	bx	lr

0800e9a0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e9a0:	b480      	push	{r7}
 800e9a2:	b083      	sub	sp, #12
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e9a8:	bf00      	nop
 800e9aa:	370c      	adds	r7, #12
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b2:	4770      	bx	lr

0800e9b4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d101      	bne.n	800e9c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e9c2:	2301      	movs	r3, #1
 800e9c4:	e10f      	b.n	800ebe6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4a87      	ldr	r2, [pc, #540]	; (800ebf0 <HAL_SPI_Init+0x23c>)
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d00f      	beq.n	800e9f6 <HAL_SPI_Init+0x42>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	4a86      	ldr	r2, [pc, #536]	; (800ebf4 <HAL_SPI_Init+0x240>)
 800e9dc:	4293      	cmp	r3, r2
 800e9de:	d00a      	beq.n	800e9f6 <HAL_SPI_Init+0x42>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	4a84      	ldr	r2, [pc, #528]	; (800ebf8 <HAL_SPI_Init+0x244>)
 800e9e6:	4293      	cmp	r3, r2
 800e9e8:	d005      	beq.n	800e9f6 <HAL_SPI_Init+0x42>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	68db      	ldr	r3, [r3, #12]
 800e9ee:	2b0f      	cmp	r3, #15
 800e9f0:	d901      	bls.n	800e9f6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	e0f7      	b.n	800ebe6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f000 f900 	bl	800ebfc <SPI_GetPacketSize>
 800e9fc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	4a7b      	ldr	r2, [pc, #492]	; (800ebf0 <HAL_SPI_Init+0x23c>)
 800ea04:	4293      	cmp	r3, r2
 800ea06:	d00c      	beq.n	800ea22 <HAL_SPI_Init+0x6e>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4a79      	ldr	r2, [pc, #484]	; (800ebf4 <HAL_SPI_Init+0x240>)
 800ea0e:	4293      	cmp	r3, r2
 800ea10:	d007      	beq.n	800ea22 <HAL_SPI_Init+0x6e>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	4a78      	ldr	r2, [pc, #480]	; (800ebf8 <HAL_SPI_Init+0x244>)
 800ea18:	4293      	cmp	r3, r2
 800ea1a:	d002      	beq.n	800ea22 <HAL_SPI_Init+0x6e>
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	2b08      	cmp	r3, #8
 800ea20:	d811      	bhi.n	800ea46 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ea26:	4a72      	ldr	r2, [pc, #456]	; (800ebf0 <HAL_SPI_Init+0x23c>)
 800ea28:	4293      	cmp	r3, r2
 800ea2a:	d009      	beq.n	800ea40 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	4a70      	ldr	r2, [pc, #448]	; (800ebf4 <HAL_SPI_Init+0x240>)
 800ea32:	4293      	cmp	r3, r2
 800ea34:	d004      	beq.n	800ea40 <HAL_SPI_Init+0x8c>
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	4a6f      	ldr	r2, [pc, #444]	; (800ebf8 <HAL_SPI_Init+0x244>)
 800ea3c:	4293      	cmp	r3, r2
 800ea3e:	d104      	bne.n	800ea4a <HAL_SPI_Init+0x96>
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	2b10      	cmp	r3, #16
 800ea44:	d901      	bls.n	800ea4a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ea46:	2301      	movs	r3, #1
 800ea48:	e0cd      	b.n	800ebe6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ea50:	b2db      	uxtb	r3, r3
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d106      	bne.n	800ea64 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f7f3 fdac 	bl	80025bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2202      	movs	r2, #2
 800ea68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	681a      	ldr	r2, [r3, #0]
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f022 0201 	bic.w	r2, r2, #1
 800ea7a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	689b      	ldr	r3, [r3, #8]
 800ea82:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800ea86:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	699b      	ldr	r3, [r3, #24]
 800ea8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ea90:	d119      	bne.n	800eac6 <HAL_SPI_Init+0x112>
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	685b      	ldr	r3, [r3, #4]
 800ea96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea9a:	d103      	bne.n	800eaa4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d008      	beq.n	800eab6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d10c      	bne.n	800eac6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800eab0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800eab4:	d107      	bne.n	800eac6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	681a      	ldr	r2, [r3, #0]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800eac4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	685b      	ldr	r3, [r3, #4]
 800eaca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d00f      	beq.n	800eaf2 <HAL_SPI_Init+0x13e>
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	68db      	ldr	r3, [r3, #12]
 800ead6:	2b06      	cmp	r3, #6
 800ead8:	d90b      	bls.n	800eaf2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	430a      	orrs	r2, r1
 800eaee:	601a      	str	r2, [r3, #0]
 800eaf0:	e007      	b.n	800eb02 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	681a      	ldr	r2, [r3, #0]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800eb00:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	69da      	ldr	r2, [r3, #28]
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb0a:	431a      	orrs	r2, r3
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	431a      	orrs	r2, r3
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb14:	ea42 0103 	orr.w	r1, r2, r3
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	68da      	ldr	r2, [r3, #12]
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	430a      	orrs	r2, r1
 800eb22:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb2c:	431a      	orrs	r2, r3
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb32:	431a      	orrs	r2, r3
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	699b      	ldr	r3, [r3, #24]
 800eb38:	431a      	orrs	r2, r3
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	691b      	ldr	r3, [r3, #16]
 800eb3e:	431a      	orrs	r2, r3
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	695b      	ldr	r3, [r3, #20]
 800eb44:	431a      	orrs	r2, r3
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6a1b      	ldr	r3, [r3, #32]
 800eb4a:	431a      	orrs	r2, r3
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	431a      	orrs	r2, r3
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb56:	431a      	orrs	r2, r3
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	689b      	ldr	r3, [r3, #8]
 800eb5c:	431a      	orrs	r2, r3
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eb62:	ea42 0103 	orr.w	r1, r2, r3
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	430a      	orrs	r2, r1
 800eb70:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	685b      	ldr	r3, [r3, #4]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d113      	bne.n	800eba2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	689b      	ldr	r3, [r3, #8]
 800eb80:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb8c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	689b      	ldr	r3, [r3, #8]
 800eb94:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eba0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	f022 0201 	bic.w	r2, r2, #1
 800ebb0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	685b      	ldr	r3, [r3, #4]
 800ebb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d00a      	beq.n	800ebd4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	68db      	ldr	r3, [r3, #12]
 800ebc4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	430a      	orrs	r2, r1
 800ebd2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2201      	movs	r2, #1
 800ebe0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ebe4:	2300      	movs	r3, #0
}
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	3710      	adds	r7, #16
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}
 800ebee:	bf00      	nop
 800ebf0:	40013000 	.word	0x40013000
 800ebf4:	40003800 	.word	0x40003800
 800ebf8:	40003c00 	.word	0x40003c00

0800ebfc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ebfc:	b480      	push	{r7}
 800ebfe:	b085      	sub	sp, #20
 800ec00:	af00      	add	r7, sp, #0
 800ec02:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec08:	095b      	lsrs	r3, r3, #5
 800ec0a:	3301      	adds	r3, #1
 800ec0c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	68db      	ldr	r3, [r3, #12]
 800ec12:	3301      	adds	r3, #1
 800ec14:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ec16:	68bb      	ldr	r3, [r7, #8]
 800ec18:	3307      	adds	r3, #7
 800ec1a:	08db      	lsrs	r3, r3, #3
 800ec1c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ec1e:	68bb      	ldr	r3, [r7, #8]
 800ec20:	68fa      	ldr	r2, [r7, #12]
 800ec22:	fb02 f303 	mul.w	r3, r2, r3
}
 800ec26:	4618      	mov	r0, r3
 800ec28:	3714      	adds	r7, #20
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec30:	4770      	bx	lr

0800ec32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ec32:	b580      	push	{r7, lr}
 800ec34:	b082      	sub	sp, #8
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d101      	bne.n	800ec44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ec40:	2301      	movs	r3, #1
 800ec42:	e049      	b.n	800ecd8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d106      	bne.n	800ec5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2200      	movs	r2, #0
 800ec54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ec58:	6878      	ldr	r0, [r7, #4]
 800ec5a:	f7f3 ff01 	bl	8002a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2202      	movs	r2, #2
 800ec62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681a      	ldr	r2, [r3, #0]
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	3304      	adds	r3, #4
 800ec6e:	4619      	mov	r1, r3
 800ec70:	4610      	mov	r0, r2
 800ec72:	f000 ff29 	bl	800fac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2201      	movs	r2, #1
 800ec7a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2201      	movs	r2, #1
 800ec82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2201      	movs	r2, #1
 800ec8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	2201      	movs	r2, #1
 800ec92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2201      	movs	r2, #1
 800ec9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	2201      	movs	r2, #1
 800eca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	2201      	movs	r2, #1
 800ecaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	2201      	movs	r2, #1
 800ecb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	2201      	movs	r2, #1
 800ecba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2201      	movs	r2, #1
 800ecc2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2201      	movs	r2, #1
 800ecca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ecd6:	2300      	movs	r3, #0
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3708      	adds	r7, #8
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	bd80      	pop	{r7, pc}

0800ece0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d101      	bne.n	800ecf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ecee:	2301      	movs	r3, #1
 800ecf0:	e049      	b.n	800ed86 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ecf8:	b2db      	uxtb	r3, r3
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d106      	bne.n	800ed0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2200      	movs	r2, #0
 800ed02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ed06:	6878      	ldr	r0, [r7, #4]
 800ed08:	f7f3 fd14 	bl	8002734 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2202      	movs	r2, #2
 800ed10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681a      	ldr	r2, [r3, #0]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	3304      	adds	r3, #4
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	4610      	mov	r0, r2
 800ed20:	f000 fed2 	bl	800fac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2201      	movs	r2, #1
 800ed28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2201      	movs	r2, #1
 800ed30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2201      	movs	r2, #1
 800ed38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2201      	movs	r2, #1
 800ed40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2201      	movs	r2, #1
 800ed48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2201      	movs	r2, #1
 800ed50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	2201      	movs	r2, #1
 800ed58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	2201      	movs	r2, #1
 800ed60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	2201      	movs	r2, #1
 800ed68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2201      	movs	r2, #1
 800ed70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	2201      	movs	r2, #1
 800ed78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2201      	movs	r2, #1
 800ed80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ed84:	2300      	movs	r3, #0
}
 800ed86:	4618      	mov	r0, r3
 800ed88:	3708      	adds	r7, #8
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	bd80      	pop	{r7, pc}
	...

0800ed90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b084      	sub	sp, #16
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d109      	bne.n	800edb4 <HAL_TIM_PWM_Start+0x24>
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800eda6:	b2db      	uxtb	r3, r3
 800eda8:	2b01      	cmp	r3, #1
 800edaa:	bf14      	ite	ne
 800edac:	2301      	movne	r3, #1
 800edae:	2300      	moveq	r3, #0
 800edb0:	b2db      	uxtb	r3, r3
 800edb2:	e03c      	b.n	800ee2e <HAL_TIM_PWM_Start+0x9e>
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	2b04      	cmp	r3, #4
 800edb8:	d109      	bne.n	800edce <HAL_TIM_PWM_Start+0x3e>
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800edc0:	b2db      	uxtb	r3, r3
 800edc2:	2b01      	cmp	r3, #1
 800edc4:	bf14      	ite	ne
 800edc6:	2301      	movne	r3, #1
 800edc8:	2300      	moveq	r3, #0
 800edca:	b2db      	uxtb	r3, r3
 800edcc:	e02f      	b.n	800ee2e <HAL_TIM_PWM_Start+0x9e>
 800edce:	683b      	ldr	r3, [r7, #0]
 800edd0:	2b08      	cmp	r3, #8
 800edd2:	d109      	bne.n	800ede8 <HAL_TIM_PWM_Start+0x58>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800edda:	b2db      	uxtb	r3, r3
 800eddc:	2b01      	cmp	r3, #1
 800edde:	bf14      	ite	ne
 800ede0:	2301      	movne	r3, #1
 800ede2:	2300      	moveq	r3, #0
 800ede4:	b2db      	uxtb	r3, r3
 800ede6:	e022      	b.n	800ee2e <HAL_TIM_PWM_Start+0x9e>
 800ede8:	683b      	ldr	r3, [r7, #0]
 800edea:	2b0c      	cmp	r3, #12
 800edec:	d109      	bne.n	800ee02 <HAL_TIM_PWM_Start+0x72>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800edf4:	b2db      	uxtb	r3, r3
 800edf6:	2b01      	cmp	r3, #1
 800edf8:	bf14      	ite	ne
 800edfa:	2301      	movne	r3, #1
 800edfc:	2300      	moveq	r3, #0
 800edfe:	b2db      	uxtb	r3, r3
 800ee00:	e015      	b.n	800ee2e <HAL_TIM_PWM_Start+0x9e>
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	2b10      	cmp	r3, #16
 800ee06:	d109      	bne.n	800ee1c <HAL_TIM_PWM_Start+0x8c>
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ee0e:	b2db      	uxtb	r3, r3
 800ee10:	2b01      	cmp	r3, #1
 800ee12:	bf14      	ite	ne
 800ee14:	2301      	movne	r3, #1
 800ee16:	2300      	moveq	r3, #0
 800ee18:	b2db      	uxtb	r3, r3
 800ee1a:	e008      	b.n	800ee2e <HAL_TIM_PWM_Start+0x9e>
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee22:	b2db      	uxtb	r3, r3
 800ee24:	2b01      	cmp	r3, #1
 800ee26:	bf14      	ite	ne
 800ee28:	2301      	movne	r3, #1
 800ee2a:	2300      	moveq	r3, #0
 800ee2c:	b2db      	uxtb	r3, r3
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d001      	beq.n	800ee36 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800ee32:	2301      	movs	r3, #1
 800ee34:	e0ab      	b.n	800ef8e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee36:	683b      	ldr	r3, [r7, #0]
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d104      	bne.n	800ee46 <HAL_TIM_PWM_Start+0xb6>
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	2202      	movs	r2, #2
 800ee40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ee44:	e023      	b.n	800ee8e <HAL_TIM_PWM_Start+0xfe>
 800ee46:	683b      	ldr	r3, [r7, #0]
 800ee48:	2b04      	cmp	r3, #4
 800ee4a:	d104      	bne.n	800ee56 <HAL_TIM_PWM_Start+0xc6>
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	2202      	movs	r2, #2
 800ee50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ee54:	e01b      	b.n	800ee8e <HAL_TIM_PWM_Start+0xfe>
 800ee56:	683b      	ldr	r3, [r7, #0]
 800ee58:	2b08      	cmp	r3, #8
 800ee5a:	d104      	bne.n	800ee66 <HAL_TIM_PWM_Start+0xd6>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2202      	movs	r2, #2
 800ee60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ee64:	e013      	b.n	800ee8e <HAL_TIM_PWM_Start+0xfe>
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	2b0c      	cmp	r3, #12
 800ee6a:	d104      	bne.n	800ee76 <HAL_TIM_PWM_Start+0xe6>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	2202      	movs	r2, #2
 800ee70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ee74:	e00b      	b.n	800ee8e <HAL_TIM_PWM_Start+0xfe>
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	2b10      	cmp	r3, #16
 800ee7a:	d104      	bne.n	800ee86 <HAL_TIM_PWM_Start+0xf6>
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2202      	movs	r2, #2
 800ee80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ee84:	e003      	b.n	800ee8e <HAL_TIM_PWM_Start+0xfe>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2202      	movs	r2, #2
 800ee8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	2201      	movs	r2, #1
 800ee94:	6839      	ldr	r1, [r7, #0]
 800ee96:	4618      	mov	r0, r3
 800ee98:	f001 f992 	bl	80101c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	4a3d      	ldr	r2, [pc, #244]	; (800ef98 <HAL_TIM_PWM_Start+0x208>)
 800eea2:	4293      	cmp	r3, r2
 800eea4:	d013      	beq.n	800eece <HAL_TIM_PWM_Start+0x13e>
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	4a3c      	ldr	r2, [pc, #240]	; (800ef9c <HAL_TIM_PWM_Start+0x20c>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d00e      	beq.n	800eece <HAL_TIM_PWM_Start+0x13e>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	4a3a      	ldr	r2, [pc, #232]	; (800efa0 <HAL_TIM_PWM_Start+0x210>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d009      	beq.n	800eece <HAL_TIM_PWM_Start+0x13e>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	681b      	ldr	r3, [r3, #0]
 800eebe:	4a39      	ldr	r2, [pc, #228]	; (800efa4 <HAL_TIM_PWM_Start+0x214>)
 800eec0:	4293      	cmp	r3, r2
 800eec2:	d004      	beq.n	800eece <HAL_TIM_PWM_Start+0x13e>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	4a37      	ldr	r2, [pc, #220]	; (800efa8 <HAL_TIM_PWM_Start+0x218>)
 800eeca:	4293      	cmp	r3, r2
 800eecc:	d101      	bne.n	800eed2 <HAL_TIM_PWM_Start+0x142>
 800eece:	2301      	movs	r3, #1
 800eed0:	e000      	b.n	800eed4 <HAL_TIM_PWM_Start+0x144>
 800eed2:	2300      	movs	r3, #0
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d007      	beq.n	800eee8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eee6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4a2a      	ldr	r2, [pc, #168]	; (800ef98 <HAL_TIM_PWM_Start+0x208>)
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d02c      	beq.n	800ef4c <HAL_TIM_PWM_Start+0x1bc>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	681b      	ldr	r3, [r3, #0]
 800eef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eefa:	d027      	beq.n	800ef4c <HAL_TIM_PWM_Start+0x1bc>
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	4a2a      	ldr	r2, [pc, #168]	; (800efac <HAL_TIM_PWM_Start+0x21c>)
 800ef02:	4293      	cmp	r3, r2
 800ef04:	d022      	beq.n	800ef4c <HAL_TIM_PWM_Start+0x1bc>
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4a29      	ldr	r2, [pc, #164]	; (800efb0 <HAL_TIM_PWM_Start+0x220>)
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d01d      	beq.n	800ef4c <HAL_TIM_PWM_Start+0x1bc>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	4a27      	ldr	r2, [pc, #156]	; (800efb4 <HAL_TIM_PWM_Start+0x224>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d018      	beq.n	800ef4c <HAL_TIM_PWM_Start+0x1bc>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	4a1f      	ldr	r2, [pc, #124]	; (800ef9c <HAL_TIM_PWM_Start+0x20c>)
 800ef20:	4293      	cmp	r3, r2
 800ef22:	d013      	beq.n	800ef4c <HAL_TIM_PWM_Start+0x1bc>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	4a23      	ldr	r2, [pc, #140]	; (800efb8 <HAL_TIM_PWM_Start+0x228>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d00e      	beq.n	800ef4c <HAL_TIM_PWM_Start+0x1bc>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	4a1b      	ldr	r2, [pc, #108]	; (800efa0 <HAL_TIM_PWM_Start+0x210>)
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d009      	beq.n	800ef4c <HAL_TIM_PWM_Start+0x1bc>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	4a1f      	ldr	r2, [pc, #124]	; (800efbc <HAL_TIM_PWM_Start+0x22c>)
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d004      	beq.n	800ef4c <HAL_TIM_PWM_Start+0x1bc>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	4a1e      	ldr	r2, [pc, #120]	; (800efc0 <HAL_TIM_PWM_Start+0x230>)
 800ef48:	4293      	cmp	r3, r2
 800ef4a:	d115      	bne.n	800ef78 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	689a      	ldr	r2, [r3, #8]
 800ef52:	4b1c      	ldr	r3, [pc, #112]	; (800efc4 <HAL_TIM_PWM_Start+0x234>)
 800ef54:	4013      	ands	r3, r2
 800ef56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	2b06      	cmp	r3, #6
 800ef5c:	d015      	beq.n	800ef8a <HAL_TIM_PWM_Start+0x1fa>
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef64:	d011      	beq.n	800ef8a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	681a      	ldr	r2, [r3, #0]
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	f042 0201 	orr.w	r2, r2, #1
 800ef74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef76:	e008      	b.n	800ef8a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	681a      	ldr	r2, [r3, #0]
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f042 0201 	orr.w	r2, r2, #1
 800ef86:	601a      	str	r2, [r3, #0]
 800ef88:	e000      	b.n	800ef8c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ef8c:	2300      	movs	r3, #0
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3710      	adds	r7, #16
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
 800ef96:	bf00      	nop
 800ef98:	40010000 	.word	0x40010000
 800ef9c:	40010400 	.word	0x40010400
 800efa0:	40014000 	.word	0x40014000
 800efa4:	40014400 	.word	0x40014400
 800efa8:	40014800 	.word	0x40014800
 800efac:	40000400 	.word	0x40000400
 800efb0:	40000800 	.word	0x40000800
 800efb4:	40000c00 	.word	0x40000c00
 800efb8:	40001800 	.word	0x40001800
 800efbc:	4000e000 	.word	0x4000e000
 800efc0:	4000e400 	.word	0x4000e400
 800efc4:	00010007 	.word	0x00010007

0800efc8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b086      	sub	sp, #24
 800efcc:	af00      	add	r7, sp, #0
 800efce:	60f8      	str	r0, [r7, #12]
 800efd0:	60b9      	str	r1, [r7, #8]
 800efd2:	607a      	str	r2, [r7, #4]
 800efd4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800efd6:	2300      	movs	r3, #0
 800efd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d109      	bne.n	800eff4 <HAL_TIM_PWM_Start_DMA+0x2c>
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800efe6:	b2db      	uxtb	r3, r3
 800efe8:	2b02      	cmp	r3, #2
 800efea:	bf0c      	ite	eq
 800efec:	2301      	moveq	r3, #1
 800efee:	2300      	movne	r3, #0
 800eff0:	b2db      	uxtb	r3, r3
 800eff2:	e03c      	b.n	800f06e <HAL_TIM_PWM_Start_DMA+0xa6>
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	2b04      	cmp	r3, #4
 800eff8:	d109      	bne.n	800f00e <HAL_TIM_PWM_Start_DMA+0x46>
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f000:	b2db      	uxtb	r3, r3
 800f002:	2b02      	cmp	r3, #2
 800f004:	bf0c      	ite	eq
 800f006:	2301      	moveq	r3, #1
 800f008:	2300      	movne	r3, #0
 800f00a:	b2db      	uxtb	r3, r3
 800f00c:	e02f      	b.n	800f06e <HAL_TIM_PWM_Start_DMA+0xa6>
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	2b08      	cmp	r3, #8
 800f012:	d109      	bne.n	800f028 <HAL_TIM_PWM_Start_DMA+0x60>
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f01a:	b2db      	uxtb	r3, r3
 800f01c:	2b02      	cmp	r3, #2
 800f01e:	bf0c      	ite	eq
 800f020:	2301      	moveq	r3, #1
 800f022:	2300      	movne	r3, #0
 800f024:	b2db      	uxtb	r3, r3
 800f026:	e022      	b.n	800f06e <HAL_TIM_PWM_Start_DMA+0xa6>
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	2b0c      	cmp	r3, #12
 800f02c:	d109      	bne.n	800f042 <HAL_TIM_PWM_Start_DMA+0x7a>
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f034:	b2db      	uxtb	r3, r3
 800f036:	2b02      	cmp	r3, #2
 800f038:	bf0c      	ite	eq
 800f03a:	2301      	moveq	r3, #1
 800f03c:	2300      	movne	r3, #0
 800f03e:	b2db      	uxtb	r3, r3
 800f040:	e015      	b.n	800f06e <HAL_TIM_PWM_Start_DMA+0xa6>
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	2b10      	cmp	r3, #16
 800f046:	d109      	bne.n	800f05c <HAL_TIM_PWM_Start_DMA+0x94>
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f04e:	b2db      	uxtb	r3, r3
 800f050:	2b02      	cmp	r3, #2
 800f052:	bf0c      	ite	eq
 800f054:	2301      	moveq	r3, #1
 800f056:	2300      	movne	r3, #0
 800f058:	b2db      	uxtb	r3, r3
 800f05a:	e008      	b.n	800f06e <HAL_TIM_PWM_Start_DMA+0xa6>
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f062:	b2db      	uxtb	r3, r3
 800f064:	2b02      	cmp	r3, #2
 800f066:	bf0c      	ite	eq
 800f068:	2301      	moveq	r3, #1
 800f06a:	2300      	movne	r3, #0
 800f06c:	b2db      	uxtb	r3, r3
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d001      	beq.n	800f076 <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f072:	2302      	movs	r3, #2
 800f074:	e1ba      	b.n	800f3ec <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f076:	68bb      	ldr	r3, [r7, #8]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d109      	bne.n	800f090 <HAL_TIM_PWM_Start_DMA+0xc8>
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f082:	b2db      	uxtb	r3, r3
 800f084:	2b01      	cmp	r3, #1
 800f086:	bf0c      	ite	eq
 800f088:	2301      	moveq	r3, #1
 800f08a:	2300      	movne	r3, #0
 800f08c:	b2db      	uxtb	r3, r3
 800f08e:	e03c      	b.n	800f10a <HAL_TIM_PWM_Start_DMA+0x142>
 800f090:	68bb      	ldr	r3, [r7, #8]
 800f092:	2b04      	cmp	r3, #4
 800f094:	d109      	bne.n	800f0aa <HAL_TIM_PWM_Start_DMA+0xe2>
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f09c:	b2db      	uxtb	r3, r3
 800f09e:	2b01      	cmp	r3, #1
 800f0a0:	bf0c      	ite	eq
 800f0a2:	2301      	moveq	r3, #1
 800f0a4:	2300      	movne	r3, #0
 800f0a6:	b2db      	uxtb	r3, r3
 800f0a8:	e02f      	b.n	800f10a <HAL_TIM_PWM_Start_DMA+0x142>
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	2b08      	cmp	r3, #8
 800f0ae:	d109      	bne.n	800f0c4 <HAL_TIM_PWM_Start_DMA+0xfc>
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f0b6:	b2db      	uxtb	r3, r3
 800f0b8:	2b01      	cmp	r3, #1
 800f0ba:	bf0c      	ite	eq
 800f0bc:	2301      	moveq	r3, #1
 800f0be:	2300      	movne	r3, #0
 800f0c0:	b2db      	uxtb	r3, r3
 800f0c2:	e022      	b.n	800f10a <HAL_TIM_PWM_Start_DMA+0x142>
 800f0c4:	68bb      	ldr	r3, [r7, #8]
 800f0c6:	2b0c      	cmp	r3, #12
 800f0c8:	d109      	bne.n	800f0de <HAL_TIM_PWM_Start_DMA+0x116>
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f0d0:	b2db      	uxtb	r3, r3
 800f0d2:	2b01      	cmp	r3, #1
 800f0d4:	bf0c      	ite	eq
 800f0d6:	2301      	moveq	r3, #1
 800f0d8:	2300      	movne	r3, #0
 800f0da:	b2db      	uxtb	r3, r3
 800f0dc:	e015      	b.n	800f10a <HAL_TIM_PWM_Start_DMA+0x142>
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	2b10      	cmp	r3, #16
 800f0e2:	d109      	bne.n	800f0f8 <HAL_TIM_PWM_Start_DMA+0x130>
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	2b01      	cmp	r3, #1
 800f0ee:	bf0c      	ite	eq
 800f0f0:	2301      	moveq	r3, #1
 800f0f2:	2300      	movne	r3, #0
 800f0f4:	b2db      	uxtb	r3, r3
 800f0f6:	e008      	b.n	800f10a <HAL_TIM_PWM_Start_DMA+0x142>
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	2b01      	cmp	r3, #1
 800f102:	bf0c      	ite	eq
 800f104:	2301      	moveq	r3, #1
 800f106:	2300      	movne	r3, #0
 800f108:	b2db      	uxtb	r3, r3
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d034      	beq.n	800f178 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d002      	beq.n	800f11a <HAL_TIM_PWM_Start_DMA+0x152>
 800f114:	887b      	ldrh	r3, [r7, #2]
 800f116:	2b00      	cmp	r3, #0
 800f118:	d101      	bne.n	800f11e <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f11a:	2301      	movs	r3, #1
 800f11c:	e166      	b.n	800f3ec <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d104      	bne.n	800f12e <HAL_TIM_PWM_Start_DMA+0x166>
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2202      	movs	r2, #2
 800f128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f12c:	e026      	b.n	800f17c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f12e:	68bb      	ldr	r3, [r7, #8]
 800f130:	2b04      	cmp	r3, #4
 800f132:	d104      	bne.n	800f13e <HAL_TIM_PWM_Start_DMA+0x176>
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	2202      	movs	r2, #2
 800f138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f13c:	e01e      	b.n	800f17c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	2b08      	cmp	r3, #8
 800f142:	d104      	bne.n	800f14e <HAL_TIM_PWM_Start_DMA+0x186>
 800f144:	68fb      	ldr	r3, [r7, #12]
 800f146:	2202      	movs	r2, #2
 800f148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f14c:	e016      	b.n	800f17c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f14e:	68bb      	ldr	r3, [r7, #8]
 800f150:	2b0c      	cmp	r3, #12
 800f152:	d104      	bne.n	800f15e <HAL_TIM_PWM_Start_DMA+0x196>
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	2202      	movs	r2, #2
 800f158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f15c:	e00e      	b.n	800f17c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	2b10      	cmp	r3, #16
 800f162:	d104      	bne.n	800f16e <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	2202      	movs	r2, #2
 800f168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f16c:	e006      	b.n	800f17c <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2202      	movs	r2, #2
 800f172:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f176:	e001      	b.n	800f17c <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f178:	2301      	movs	r3, #1
 800f17a:	e137      	b.n	800f3ec <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f17c:	68bb      	ldr	r3, [r7, #8]
 800f17e:	2b0c      	cmp	r3, #12
 800f180:	f200 80ae 	bhi.w	800f2e0 <HAL_TIM_PWM_Start_DMA+0x318>
 800f184:	a201      	add	r2, pc, #4	; (adr r2, 800f18c <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f186:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f18a:	bf00      	nop
 800f18c:	0800f1c1 	.word	0x0800f1c1
 800f190:	0800f2e1 	.word	0x0800f2e1
 800f194:	0800f2e1 	.word	0x0800f2e1
 800f198:	0800f2e1 	.word	0x0800f2e1
 800f19c:	0800f209 	.word	0x0800f209
 800f1a0:	0800f2e1 	.word	0x0800f2e1
 800f1a4:	0800f2e1 	.word	0x0800f2e1
 800f1a8:	0800f2e1 	.word	0x0800f2e1
 800f1ac:	0800f251 	.word	0x0800f251
 800f1b0:	0800f2e1 	.word	0x0800f2e1
 800f1b4:	0800f2e1 	.word	0x0800f2e1
 800f1b8:	0800f2e1 	.word	0x0800f2e1
 800f1bc:	0800f299 	.word	0x0800f299
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1c4:	4a8b      	ldr	r2, [pc, #556]	; (800f3f4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f1c6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1cc:	4a8a      	ldr	r2, [pc, #552]	; (800f3f8 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f1ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1d4:	4a89      	ldr	r2, [pc, #548]	; (800f3fc <HAL_TIM_PWM_Start_DMA+0x434>)
 800f1d6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f1dc:	6879      	ldr	r1, [r7, #4]
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	3334      	adds	r3, #52	; 0x34
 800f1e4:	461a      	mov	r2, r3
 800f1e6:	887b      	ldrh	r3, [r7, #2]
 800f1e8:	f7f6 fce4 	bl	8005bb4 <HAL_DMA_Start_IT>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d001      	beq.n	800f1f6 <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	e0fa      	b.n	800f3ec <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	68da      	ldr	r2, [r3, #12]
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	681b      	ldr	r3, [r3, #0]
 800f200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f204:	60da      	str	r2, [r3, #12]
      break;
 800f206:	e06e      	b.n	800f2e6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f20c:	4a79      	ldr	r2, [pc, #484]	; (800f3f4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f20e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f214:	4a78      	ldr	r2, [pc, #480]	; (800f3f8 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f216:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f21c:	4a77      	ldr	r2, [pc, #476]	; (800f3fc <HAL_TIM_PWM_Start_DMA+0x434>)
 800f21e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f224:	6879      	ldr	r1, [r7, #4]
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	3338      	adds	r3, #56	; 0x38
 800f22c:	461a      	mov	r2, r3
 800f22e:	887b      	ldrh	r3, [r7, #2]
 800f230:	f7f6 fcc0 	bl	8005bb4 <HAL_DMA_Start_IT>
 800f234:	4603      	mov	r3, r0
 800f236:	2b00      	cmp	r3, #0
 800f238:	d001      	beq.n	800f23e <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f23a:	2301      	movs	r3, #1
 800f23c:	e0d6      	b.n	800f3ec <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	68da      	ldr	r2, [r3, #12]
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f24c:	60da      	str	r2, [r3, #12]
      break;
 800f24e:	e04a      	b.n	800f2e6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f254:	4a67      	ldr	r2, [pc, #412]	; (800f3f4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f256:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f25c:	4a66      	ldr	r2, [pc, #408]	; (800f3f8 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f25e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f260:	68fb      	ldr	r3, [r7, #12]
 800f262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f264:	4a65      	ldr	r2, [pc, #404]	; (800f3fc <HAL_TIM_PWM_Start_DMA+0x434>)
 800f266:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f26c:	6879      	ldr	r1, [r7, #4]
 800f26e:	68fb      	ldr	r3, [r7, #12]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	333c      	adds	r3, #60	; 0x3c
 800f274:	461a      	mov	r2, r3
 800f276:	887b      	ldrh	r3, [r7, #2]
 800f278:	f7f6 fc9c 	bl	8005bb4 <HAL_DMA_Start_IT>
 800f27c:	4603      	mov	r3, r0
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d001      	beq.n	800f286 <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f282:	2301      	movs	r3, #1
 800f284:	e0b2      	b.n	800f3ec <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	68da      	ldr	r2, [r3, #12]
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f294:	60da      	str	r2, [r3, #12]
      break;
 800f296:	e026      	b.n	800f2e6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f29c:	4a55      	ldr	r2, [pc, #340]	; (800f3f4 <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f29e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2a4:	4a54      	ldr	r2, [pc, #336]	; (800f3f8 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f2a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2ac:	4a53      	ldr	r2, [pc, #332]	; (800f3fc <HAL_TIM_PWM_Start_DMA+0x434>)
 800f2ae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f2b4:	6879      	ldr	r1, [r7, #4]
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	3340      	adds	r3, #64	; 0x40
 800f2bc:	461a      	mov	r2, r3
 800f2be:	887b      	ldrh	r3, [r7, #2]
 800f2c0:	f7f6 fc78 	bl	8005bb4 <HAL_DMA_Start_IT>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d001      	beq.n	800f2ce <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f2ca:	2301      	movs	r3, #1
 800f2cc:	e08e      	b.n	800f3ec <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	68da      	ldr	r2, [r3, #12]
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f2dc:	60da      	str	r2, [r3, #12]
      break;
 800f2de:	e002      	b.n	800f2e6 <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	75fb      	strb	r3, [r7, #23]
      break;
 800f2e4:	bf00      	nop
  }

  if (status == HAL_OK)
 800f2e6:	7dfb      	ldrb	r3, [r7, #23]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d17e      	bne.n	800f3ea <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	68b9      	ldr	r1, [r7, #8]
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f000 ff63 	bl	80101c0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	4a40      	ldr	r2, [pc, #256]	; (800f400 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f300:	4293      	cmp	r3, r2
 800f302:	d013      	beq.n	800f32c <HAL_TIM_PWM_Start_DMA+0x364>
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	4a3e      	ldr	r2, [pc, #248]	; (800f404 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f30a:	4293      	cmp	r3, r2
 800f30c:	d00e      	beq.n	800f32c <HAL_TIM_PWM_Start_DMA+0x364>
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	4a3d      	ldr	r2, [pc, #244]	; (800f408 <HAL_TIM_PWM_Start_DMA+0x440>)
 800f314:	4293      	cmp	r3, r2
 800f316:	d009      	beq.n	800f32c <HAL_TIM_PWM_Start_DMA+0x364>
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	4a3b      	ldr	r2, [pc, #236]	; (800f40c <HAL_TIM_PWM_Start_DMA+0x444>)
 800f31e:	4293      	cmp	r3, r2
 800f320:	d004      	beq.n	800f32c <HAL_TIM_PWM_Start_DMA+0x364>
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	4a3a      	ldr	r2, [pc, #232]	; (800f410 <HAL_TIM_PWM_Start_DMA+0x448>)
 800f328:	4293      	cmp	r3, r2
 800f32a:	d101      	bne.n	800f330 <HAL_TIM_PWM_Start_DMA+0x368>
 800f32c:	2301      	movs	r3, #1
 800f32e:	e000      	b.n	800f332 <HAL_TIM_PWM_Start_DMA+0x36a>
 800f330:	2300      	movs	r3, #0
 800f332:	2b00      	cmp	r3, #0
 800f334:	d007      	beq.n	800f346 <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f344:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	4a2d      	ldr	r2, [pc, #180]	; (800f400 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f34c:	4293      	cmp	r3, r2
 800f34e:	d02c      	beq.n	800f3aa <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f358:	d027      	beq.n	800f3aa <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	681b      	ldr	r3, [r3, #0]
 800f35e:	4a2d      	ldr	r2, [pc, #180]	; (800f414 <HAL_TIM_PWM_Start_DMA+0x44c>)
 800f360:	4293      	cmp	r3, r2
 800f362:	d022      	beq.n	800f3aa <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	4a2b      	ldr	r2, [pc, #172]	; (800f418 <HAL_TIM_PWM_Start_DMA+0x450>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d01d      	beq.n	800f3aa <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	681b      	ldr	r3, [r3, #0]
 800f372:	4a2a      	ldr	r2, [pc, #168]	; (800f41c <HAL_TIM_PWM_Start_DMA+0x454>)
 800f374:	4293      	cmp	r3, r2
 800f376:	d018      	beq.n	800f3aa <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f378:	68fb      	ldr	r3, [r7, #12]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	4a21      	ldr	r2, [pc, #132]	; (800f404 <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f37e:	4293      	cmp	r3, r2
 800f380:	d013      	beq.n	800f3aa <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	4a26      	ldr	r2, [pc, #152]	; (800f420 <HAL_TIM_PWM_Start_DMA+0x458>)
 800f388:	4293      	cmp	r3, r2
 800f38a:	d00e      	beq.n	800f3aa <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	4a1d      	ldr	r2, [pc, #116]	; (800f408 <HAL_TIM_PWM_Start_DMA+0x440>)
 800f392:	4293      	cmp	r3, r2
 800f394:	d009      	beq.n	800f3aa <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	4a22      	ldr	r2, [pc, #136]	; (800f424 <HAL_TIM_PWM_Start_DMA+0x45c>)
 800f39c:	4293      	cmp	r3, r2
 800f39e:	d004      	beq.n	800f3aa <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	4a20      	ldr	r2, [pc, #128]	; (800f428 <HAL_TIM_PWM_Start_DMA+0x460>)
 800f3a6:	4293      	cmp	r3, r2
 800f3a8:	d115      	bne.n	800f3d6 <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	689a      	ldr	r2, [r3, #8]
 800f3b0:	4b1e      	ldr	r3, [pc, #120]	; (800f42c <HAL_TIM_PWM_Start_DMA+0x464>)
 800f3b2:	4013      	ands	r3, r2
 800f3b4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	2b06      	cmp	r3, #6
 800f3ba:	d015      	beq.n	800f3e8 <HAL_TIM_PWM_Start_DMA+0x420>
 800f3bc:	693b      	ldr	r3, [r7, #16]
 800f3be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f3c2:	d011      	beq.n	800f3e8 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	681a      	ldr	r2, [r3, #0]
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	f042 0201 	orr.w	r2, r2, #1
 800f3d2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3d4:	e008      	b.n	800f3e8 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	f042 0201 	orr.w	r2, r2, #1
 800f3e4:	601a      	str	r2, [r3, #0]
 800f3e6:	e000      	b.n	800f3ea <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f3e8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800f3ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3718      	adds	r7, #24
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bd80      	pop	{r7, pc}
 800f3f4:	0800f9b7 	.word	0x0800f9b7
 800f3f8:	0800fa5f 	.word	0x0800fa5f
 800f3fc:	0800f925 	.word	0x0800f925
 800f400:	40010000 	.word	0x40010000
 800f404:	40010400 	.word	0x40010400
 800f408:	40014000 	.word	0x40014000
 800f40c:	40014400 	.word	0x40014400
 800f410:	40014800 	.word	0x40014800
 800f414:	40000400 	.word	0x40000400
 800f418:	40000800 	.word	0x40000800
 800f41c:	40000c00 	.word	0x40000c00
 800f420:	40001800 	.word	0x40001800
 800f424:	4000e000 	.word	0x4000e000
 800f428:	4000e400 	.word	0x4000e400
 800f42c:	00010007 	.word	0x00010007

0800f430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b082      	sub	sp, #8
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	691b      	ldr	r3, [r3, #16]
 800f43e:	f003 0302 	and.w	r3, r3, #2
 800f442:	2b02      	cmp	r3, #2
 800f444:	d122      	bne.n	800f48c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	68db      	ldr	r3, [r3, #12]
 800f44c:	f003 0302 	and.w	r3, r3, #2
 800f450:	2b02      	cmp	r3, #2
 800f452:	d11b      	bne.n	800f48c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	f06f 0202 	mvn.w	r2, #2
 800f45c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2201      	movs	r2, #1
 800f462:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	699b      	ldr	r3, [r3, #24]
 800f46a:	f003 0303 	and.w	r3, r3, #3
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d003      	beq.n	800f47a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f000 fa24 	bl	800f8c0 <HAL_TIM_IC_CaptureCallback>
 800f478:	e005      	b.n	800f486 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 fa16 	bl	800f8ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f000 fa27 	bl	800f8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	2200      	movs	r2, #0
 800f48a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	691b      	ldr	r3, [r3, #16]
 800f492:	f003 0304 	and.w	r3, r3, #4
 800f496:	2b04      	cmp	r3, #4
 800f498:	d122      	bne.n	800f4e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	f003 0304 	and.w	r3, r3, #4
 800f4a4:	2b04      	cmp	r3, #4
 800f4a6:	d11b      	bne.n	800f4e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	681b      	ldr	r3, [r3, #0]
 800f4ac:	f06f 0204 	mvn.w	r2, #4
 800f4b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	2202      	movs	r2, #2
 800f4b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	699b      	ldr	r3, [r3, #24]
 800f4be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d003      	beq.n	800f4ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f4c6:	6878      	ldr	r0, [r7, #4]
 800f4c8:	f000 f9fa 	bl	800f8c0 <HAL_TIM_IC_CaptureCallback>
 800f4cc:	e005      	b.n	800f4da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f4ce:	6878      	ldr	r0, [r7, #4]
 800f4d0:	f000 f9ec 	bl	800f8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f000 f9fd 	bl	800f8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	2200      	movs	r2, #0
 800f4de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	691b      	ldr	r3, [r3, #16]
 800f4e6:	f003 0308 	and.w	r3, r3, #8
 800f4ea:	2b08      	cmp	r3, #8
 800f4ec:	d122      	bne.n	800f534 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	68db      	ldr	r3, [r3, #12]
 800f4f4:	f003 0308 	and.w	r3, r3, #8
 800f4f8:	2b08      	cmp	r3, #8
 800f4fa:	d11b      	bne.n	800f534 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	f06f 0208 	mvn.w	r2, #8
 800f504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	2204      	movs	r2, #4
 800f50a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	69db      	ldr	r3, [r3, #28]
 800f512:	f003 0303 	and.w	r3, r3, #3
 800f516:	2b00      	cmp	r3, #0
 800f518:	d003      	beq.n	800f522 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f000 f9d0 	bl	800f8c0 <HAL_TIM_IC_CaptureCallback>
 800f520:	e005      	b.n	800f52e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f522:	6878      	ldr	r0, [r7, #4]
 800f524:	f000 f9c2 	bl	800f8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f000 f9d3 	bl	800f8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	2200      	movs	r2, #0
 800f532:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	691b      	ldr	r3, [r3, #16]
 800f53a:	f003 0310 	and.w	r3, r3, #16
 800f53e:	2b10      	cmp	r3, #16
 800f540:	d122      	bne.n	800f588 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	68db      	ldr	r3, [r3, #12]
 800f548:	f003 0310 	and.w	r3, r3, #16
 800f54c:	2b10      	cmp	r3, #16
 800f54e:	d11b      	bne.n	800f588 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	f06f 0210 	mvn.w	r2, #16
 800f558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2208      	movs	r2, #8
 800f55e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	69db      	ldr	r3, [r3, #28]
 800f566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d003      	beq.n	800f576 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	f000 f9a6 	bl	800f8c0 <HAL_TIM_IC_CaptureCallback>
 800f574:	e005      	b.n	800f582 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f000 f998 	bl	800f8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f57c:	6878      	ldr	r0, [r7, #4]
 800f57e:	f000 f9a9 	bl	800f8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	2200      	movs	r2, #0
 800f586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	691b      	ldr	r3, [r3, #16]
 800f58e:	f003 0301 	and.w	r3, r3, #1
 800f592:	2b01      	cmp	r3, #1
 800f594:	d10e      	bne.n	800f5b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	68db      	ldr	r3, [r3, #12]
 800f59c:	f003 0301 	and.w	r3, r3, #1
 800f5a0:	2b01      	cmp	r3, #1
 800f5a2:	d107      	bne.n	800f5b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	681b      	ldr	r3, [r3, #0]
 800f5a8:	f06f 0201 	mvn.w	r2, #1
 800f5ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f5ae:	6878      	ldr	r0, [r7, #4]
 800f5b0:	f000 f972 	bl	800f898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	691b      	ldr	r3, [r3, #16]
 800f5ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5be:	2b80      	cmp	r3, #128	; 0x80
 800f5c0:	d10e      	bne.n	800f5e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	681b      	ldr	r3, [r3, #0]
 800f5c6:	68db      	ldr	r3, [r3, #12]
 800f5c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5cc:	2b80      	cmp	r3, #128	; 0x80
 800f5ce:	d107      	bne.n	800f5e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f5d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f5da:	6878      	ldr	r0, [r7, #4]
 800f5dc:	f000 febc 	bl	8010358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	691b      	ldr	r3, [r3, #16]
 800f5e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f5ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f5ee:	d10e      	bne.n	800f60e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	68db      	ldr	r3, [r3, #12]
 800f5f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f5fa:	2b80      	cmp	r3, #128	; 0x80
 800f5fc:	d107      	bne.n	800f60e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	681b      	ldr	r3, [r3, #0]
 800f602:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f606:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f000 feaf 	bl	801036c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	691b      	ldr	r3, [r3, #16]
 800f614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f618:	2b40      	cmp	r3, #64	; 0x40
 800f61a:	d10e      	bne.n	800f63a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	68db      	ldr	r3, [r3, #12]
 800f622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f626:	2b40      	cmp	r3, #64	; 0x40
 800f628:	d107      	bne.n	800f63a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f634:	6878      	ldr	r0, [r7, #4]
 800f636:	f000 f961 	bl	800f8fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	691b      	ldr	r3, [r3, #16]
 800f640:	f003 0320 	and.w	r3, r3, #32
 800f644:	2b20      	cmp	r3, #32
 800f646:	d10e      	bne.n	800f666 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	68db      	ldr	r3, [r3, #12]
 800f64e:	f003 0320 	and.w	r3, r3, #32
 800f652:	2b20      	cmp	r3, #32
 800f654:	d107      	bne.n	800f666 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	f06f 0220 	mvn.w	r2, #32
 800f65e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	f000 fe6f 	bl	8010344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f666:	bf00      	nop
 800f668:	3708      	adds	r7, #8
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}
	...

0800f670 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f670:	b580      	push	{r7, lr}
 800f672:	b086      	sub	sp, #24
 800f674:	af00      	add	r7, sp, #0
 800f676:	60f8      	str	r0, [r7, #12]
 800f678:	60b9      	str	r1, [r7, #8]
 800f67a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f67c:	2300      	movs	r3, #0
 800f67e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f686:	2b01      	cmp	r3, #1
 800f688:	d101      	bne.n	800f68e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f68a:	2302      	movs	r3, #2
 800f68c:	e0ff      	b.n	800f88e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	2201      	movs	r2, #1
 800f692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2b14      	cmp	r3, #20
 800f69a:	f200 80f0 	bhi.w	800f87e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f69e:	a201      	add	r2, pc, #4	; (adr r2, 800f6a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f6a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6a4:	0800f6f9 	.word	0x0800f6f9
 800f6a8:	0800f87f 	.word	0x0800f87f
 800f6ac:	0800f87f 	.word	0x0800f87f
 800f6b0:	0800f87f 	.word	0x0800f87f
 800f6b4:	0800f739 	.word	0x0800f739
 800f6b8:	0800f87f 	.word	0x0800f87f
 800f6bc:	0800f87f 	.word	0x0800f87f
 800f6c0:	0800f87f 	.word	0x0800f87f
 800f6c4:	0800f77b 	.word	0x0800f77b
 800f6c8:	0800f87f 	.word	0x0800f87f
 800f6cc:	0800f87f 	.word	0x0800f87f
 800f6d0:	0800f87f 	.word	0x0800f87f
 800f6d4:	0800f7bb 	.word	0x0800f7bb
 800f6d8:	0800f87f 	.word	0x0800f87f
 800f6dc:	0800f87f 	.word	0x0800f87f
 800f6e0:	0800f87f 	.word	0x0800f87f
 800f6e4:	0800f7fd 	.word	0x0800f7fd
 800f6e8:	0800f87f 	.word	0x0800f87f
 800f6ec:	0800f87f 	.word	0x0800f87f
 800f6f0:	0800f87f 	.word	0x0800f87f
 800f6f4:	0800f83d 	.word	0x0800f83d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	68b9      	ldr	r1, [r7, #8]
 800f6fe:	4618      	mov	r0, r3
 800f700:	f000 fa88 	bl	800fc14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	699a      	ldr	r2, [r3, #24]
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	681b      	ldr	r3, [r3, #0]
 800f70e:	f042 0208 	orr.w	r2, r2, #8
 800f712:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	699a      	ldr	r2, [r3, #24]
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	f022 0204 	bic.w	r2, r2, #4
 800f722:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	6999      	ldr	r1, [r3, #24]
 800f72a:	68bb      	ldr	r3, [r7, #8]
 800f72c:	691a      	ldr	r2, [r3, #16]
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	430a      	orrs	r2, r1
 800f734:	619a      	str	r2, [r3, #24]
      break;
 800f736:	e0a5      	b.n	800f884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	681b      	ldr	r3, [r3, #0]
 800f73c:	68b9      	ldr	r1, [r7, #8]
 800f73e:	4618      	mov	r0, r3
 800f740:	f000 faf8 	bl	800fd34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	699a      	ldr	r2, [r3, #24]
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f752:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	699a      	ldr	r2, [r3, #24]
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f762:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	6999      	ldr	r1, [r3, #24]
 800f76a:	68bb      	ldr	r3, [r7, #8]
 800f76c:	691b      	ldr	r3, [r3, #16]
 800f76e:	021a      	lsls	r2, r3, #8
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	430a      	orrs	r2, r1
 800f776:	619a      	str	r2, [r3, #24]
      break;
 800f778:	e084      	b.n	800f884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	68b9      	ldr	r1, [r7, #8]
 800f780:	4618      	mov	r0, r3
 800f782:	f000 fb61 	bl	800fe48 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	69da      	ldr	r2, [r3, #28]
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	f042 0208 	orr.w	r2, r2, #8
 800f794:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	69da      	ldr	r2, [r3, #28]
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	f022 0204 	bic.w	r2, r2, #4
 800f7a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	69d9      	ldr	r1, [r3, #28]
 800f7ac:	68bb      	ldr	r3, [r7, #8]
 800f7ae:	691a      	ldr	r2, [r3, #16]
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	430a      	orrs	r2, r1
 800f7b6:	61da      	str	r2, [r3, #28]
      break;
 800f7b8:	e064      	b.n	800f884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	681b      	ldr	r3, [r3, #0]
 800f7be:	68b9      	ldr	r1, [r7, #8]
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	f000 fbc9 	bl	800ff58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	69da      	ldr	r2, [r3, #28]
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f7d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	69da      	ldr	r2, [r3, #28]
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f7e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	69d9      	ldr	r1, [r3, #28]
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	691b      	ldr	r3, [r3, #16]
 800f7f0:	021a      	lsls	r2, r3, #8
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	430a      	orrs	r2, r1
 800f7f8:	61da      	str	r2, [r3, #28]
      break;
 800f7fa:	e043      	b.n	800f884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	68b9      	ldr	r1, [r7, #8]
 800f802:	4618      	mov	r0, r3
 800f804:	f000 fc12 	bl	801002c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	f042 0208 	orr.w	r2, r2, #8
 800f816:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	681b      	ldr	r3, [r3, #0]
 800f822:	f022 0204 	bic.w	r2, r2, #4
 800f826:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	691a      	ldr	r2, [r3, #16]
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	430a      	orrs	r2, r1
 800f838:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f83a:	e023      	b.n	800f884 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	68b9      	ldr	r1, [r7, #8]
 800f842:	4618      	mov	r0, r3
 800f844:	f000 fc56 	bl	80100f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f856:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f866:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f86e:	68bb      	ldr	r3, [r7, #8]
 800f870:	691b      	ldr	r3, [r3, #16]
 800f872:	021a      	lsls	r2, r3, #8
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	681b      	ldr	r3, [r3, #0]
 800f878:	430a      	orrs	r2, r1
 800f87a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f87c:	e002      	b.n	800f884 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f87e:	2301      	movs	r3, #1
 800f880:	75fb      	strb	r3, [r7, #23]
      break;
 800f882:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	2200      	movs	r2, #0
 800f888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f88c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f88e:	4618      	mov	r0, r3
 800f890:	3718      	adds	r7, #24
 800f892:	46bd      	mov	sp, r7
 800f894:	bd80      	pop	{r7, pc}
 800f896:	bf00      	nop

0800f898 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f898:	b480      	push	{r7}
 800f89a:	b083      	sub	sp, #12
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f8a0:	bf00      	nop
 800f8a2:	370c      	adds	r7, #12
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8aa:	4770      	bx	lr

0800f8ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b083      	sub	sp, #12
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f8b4:	bf00      	nop
 800f8b6:	370c      	adds	r7, #12
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8be:	4770      	bx	lr

0800f8c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b083      	sub	sp, #12
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f8c8:	bf00      	nop
 800f8ca:	370c      	adds	r7, #12
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8d2:	4770      	bx	lr

0800f8d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f8d4:	b480      	push	{r7}
 800f8d6:	b083      	sub	sp, #12
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f8dc:	bf00      	nop
 800f8de:	370c      	adds	r7, #12
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8e6:	4770      	bx	lr

0800f8e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800f8e8:	b480      	push	{r7}
 800f8ea:	b083      	sub	sp, #12
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800f8f0:	bf00      	nop
 800f8f2:	370c      	adds	r7, #12
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8fa:	4770      	bx	lr

0800f8fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f8fc:	b480      	push	{r7}
 800f8fe:	b083      	sub	sp, #12
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f904:	bf00      	nop
 800f906:	370c      	adds	r7, #12
 800f908:	46bd      	mov	sp, r7
 800f90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f90e:	4770      	bx	lr

0800f910 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800f910:	b480      	push	{r7}
 800f912:	b083      	sub	sp, #12
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800f918:	bf00      	nop
 800f91a:	370c      	adds	r7, #12
 800f91c:	46bd      	mov	sp, r7
 800f91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f922:	4770      	bx	lr

0800f924 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b084      	sub	sp, #16
 800f928:	af00      	add	r7, sp, #0
 800f92a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f930:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f936:	687a      	ldr	r2, [r7, #4]
 800f938:	429a      	cmp	r2, r3
 800f93a:	d107      	bne.n	800f94c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	2201      	movs	r2, #1
 800f940:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	2201      	movs	r2, #1
 800f946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f94a:	e02a      	b.n	800f9a2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f950:	687a      	ldr	r2, [r7, #4]
 800f952:	429a      	cmp	r2, r3
 800f954:	d107      	bne.n	800f966 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2202      	movs	r2, #2
 800f95a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	2201      	movs	r2, #1
 800f960:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f964:	e01d      	b.n	800f9a2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f96a:	687a      	ldr	r2, [r7, #4]
 800f96c:	429a      	cmp	r2, r3
 800f96e:	d107      	bne.n	800f980 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2204      	movs	r2, #4
 800f974:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2201      	movs	r2, #1
 800f97a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f97e:	e010      	b.n	800f9a2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f984:	687a      	ldr	r2, [r7, #4]
 800f986:	429a      	cmp	r2, r3
 800f988:	d107      	bne.n	800f99a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f98a:	68fb      	ldr	r3, [r7, #12]
 800f98c:	2208      	movs	r2, #8
 800f98e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	2201      	movs	r2, #1
 800f994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f998:	e003      	b.n	800f9a2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	2201      	movs	r2, #1
 800f99e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800f9a2:	68f8      	ldr	r0, [r7, #12]
 800f9a4:	f7ff ffb4 	bl	800f910 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	771a      	strb	r2, [r3, #28]
}
 800f9ae:	bf00      	nop
 800f9b0:	3710      	adds	r7, #16
 800f9b2:	46bd      	mov	sp, r7
 800f9b4:	bd80      	pop	{r7, pc}

0800f9b6 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800f9b6:	b580      	push	{r7, lr}
 800f9b8:	b084      	sub	sp, #16
 800f9ba:	af00      	add	r7, sp, #0
 800f9bc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9c2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9c8:	687a      	ldr	r2, [r7, #4]
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d10b      	bne.n	800f9e6 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	2201      	movs	r2, #1
 800f9d2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	69db      	ldr	r3, [r3, #28]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d136      	bne.n	800fa4a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	2201      	movs	r2, #1
 800f9e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f9e4:	e031      	b.n	800fa4a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9ea:	687a      	ldr	r2, [r7, #4]
 800f9ec:	429a      	cmp	r2, r3
 800f9ee:	d10b      	bne.n	800fa08 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	2202      	movs	r2, #2
 800f9f4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	69db      	ldr	r3, [r3, #28]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d125      	bne.n	800fa4a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	2201      	movs	r2, #1
 800fa02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fa06:	e020      	b.n	800fa4a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa0c:	687a      	ldr	r2, [r7, #4]
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d10b      	bne.n	800fa2a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	2204      	movs	r2, #4
 800fa16:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	69db      	ldr	r3, [r3, #28]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d114      	bne.n	800fa4a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fa20:	68fb      	ldr	r3, [r7, #12]
 800fa22:	2201      	movs	r2, #1
 800fa24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fa28:	e00f      	b.n	800fa4a <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa2e:	687a      	ldr	r2, [r7, #4]
 800fa30:	429a      	cmp	r2, r3
 800fa32:	d10a      	bne.n	800fa4a <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	2208      	movs	r2, #8
 800fa38:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	69db      	ldr	r3, [r3, #28]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d103      	bne.n	800fa4a <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	2201      	movs	r2, #1
 800fa46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fa4a:	68f8      	ldr	r0, [r7, #12]
 800fa4c:	f7ff ff42 	bl	800f8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa50:	68fb      	ldr	r3, [r7, #12]
 800fa52:	2200      	movs	r2, #0
 800fa54:	771a      	strb	r2, [r3, #28]
}
 800fa56:	bf00      	nop
 800fa58:	3710      	adds	r7, #16
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	bd80      	pop	{r7, pc}

0800fa5e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fa5e:	b580      	push	{r7, lr}
 800fa60:	b084      	sub	sp, #16
 800fa62:	af00      	add	r7, sp, #0
 800fa64:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa6a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa70:	687a      	ldr	r2, [r7, #4]
 800fa72:	429a      	cmp	r2, r3
 800fa74:	d103      	bne.n	800fa7e <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	2201      	movs	r2, #1
 800fa7a:	771a      	strb	r2, [r3, #28]
 800fa7c:	e019      	b.n	800fab2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa82:	687a      	ldr	r2, [r7, #4]
 800fa84:	429a      	cmp	r2, r3
 800fa86:	d103      	bne.n	800fa90 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	2202      	movs	r2, #2
 800fa8c:	771a      	strb	r2, [r3, #28]
 800fa8e:	e010      	b.n	800fab2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fa94:	687a      	ldr	r2, [r7, #4]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d103      	bne.n	800faa2 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	2204      	movs	r2, #4
 800fa9e:	771a      	strb	r2, [r3, #28]
 800faa0:	e007      	b.n	800fab2 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800faa6:	687a      	ldr	r2, [r7, #4]
 800faa8:	429a      	cmp	r2, r3
 800faaa:	d102      	bne.n	800fab2 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	2208      	movs	r2, #8
 800fab0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800fab2:	68f8      	ldr	r0, [r7, #12]
 800fab4:	f7ff ff18 	bl	800f8e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	2200      	movs	r2, #0
 800fabc:	771a      	strb	r2, [r3, #28]
}
 800fabe:	bf00      	nop
 800fac0:	3710      	adds	r7, #16
 800fac2:	46bd      	mov	sp, r7
 800fac4:	bd80      	pop	{r7, pc}
	...

0800fac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fac8:	b480      	push	{r7}
 800faca:	b085      	sub	sp, #20
 800facc:	af00      	add	r7, sp, #0
 800face:	6078      	str	r0, [r7, #4]
 800fad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	4a44      	ldr	r2, [pc, #272]	; (800fbec <TIM_Base_SetConfig+0x124>)
 800fadc:	4293      	cmp	r3, r2
 800fade:	d013      	beq.n	800fb08 <TIM_Base_SetConfig+0x40>
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fae6:	d00f      	beq.n	800fb08 <TIM_Base_SetConfig+0x40>
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	4a41      	ldr	r2, [pc, #260]	; (800fbf0 <TIM_Base_SetConfig+0x128>)
 800faec:	4293      	cmp	r3, r2
 800faee:	d00b      	beq.n	800fb08 <TIM_Base_SetConfig+0x40>
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	4a40      	ldr	r2, [pc, #256]	; (800fbf4 <TIM_Base_SetConfig+0x12c>)
 800faf4:	4293      	cmp	r3, r2
 800faf6:	d007      	beq.n	800fb08 <TIM_Base_SetConfig+0x40>
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	4a3f      	ldr	r2, [pc, #252]	; (800fbf8 <TIM_Base_SetConfig+0x130>)
 800fafc:	4293      	cmp	r3, r2
 800fafe:	d003      	beq.n	800fb08 <TIM_Base_SetConfig+0x40>
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	4a3e      	ldr	r2, [pc, #248]	; (800fbfc <TIM_Base_SetConfig+0x134>)
 800fb04:	4293      	cmp	r3, r2
 800fb06:	d108      	bne.n	800fb1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fb0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	685b      	ldr	r3, [r3, #4]
 800fb14:	68fa      	ldr	r2, [r7, #12]
 800fb16:	4313      	orrs	r3, r2
 800fb18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	4a33      	ldr	r2, [pc, #204]	; (800fbec <TIM_Base_SetConfig+0x124>)
 800fb1e:	4293      	cmp	r3, r2
 800fb20:	d027      	beq.n	800fb72 <TIM_Base_SetConfig+0xaa>
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb28:	d023      	beq.n	800fb72 <TIM_Base_SetConfig+0xaa>
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	4a30      	ldr	r2, [pc, #192]	; (800fbf0 <TIM_Base_SetConfig+0x128>)
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	d01f      	beq.n	800fb72 <TIM_Base_SetConfig+0xaa>
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	4a2f      	ldr	r2, [pc, #188]	; (800fbf4 <TIM_Base_SetConfig+0x12c>)
 800fb36:	4293      	cmp	r3, r2
 800fb38:	d01b      	beq.n	800fb72 <TIM_Base_SetConfig+0xaa>
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	4a2e      	ldr	r2, [pc, #184]	; (800fbf8 <TIM_Base_SetConfig+0x130>)
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	d017      	beq.n	800fb72 <TIM_Base_SetConfig+0xaa>
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	4a2d      	ldr	r2, [pc, #180]	; (800fbfc <TIM_Base_SetConfig+0x134>)
 800fb46:	4293      	cmp	r3, r2
 800fb48:	d013      	beq.n	800fb72 <TIM_Base_SetConfig+0xaa>
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	4a2c      	ldr	r2, [pc, #176]	; (800fc00 <TIM_Base_SetConfig+0x138>)
 800fb4e:	4293      	cmp	r3, r2
 800fb50:	d00f      	beq.n	800fb72 <TIM_Base_SetConfig+0xaa>
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	4a2b      	ldr	r2, [pc, #172]	; (800fc04 <TIM_Base_SetConfig+0x13c>)
 800fb56:	4293      	cmp	r3, r2
 800fb58:	d00b      	beq.n	800fb72 <TIM_Base_SetConfig+0xaa>
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	4a2a      	ldr	r2, [pc, #168]	; (800fc08 <TIM_Base_SetConfig+0x140>)
 800fb5e:	4293      	cmp	r3, r2
 800fb60:	d007      	beq.n	800fb72 <TIM_Base_SetConfig+0xaa>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	4a29      	ldr	r2, [pc, #164]	; (800fc0c <TIM_Base_SetConfig+0x144>)
 800fb66:	4293      	cmp	r3, r2
 800fb68:	d003      	beq.n	800fb72 <TIM_Base_SetConfig+0xaa>
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	4a28      	ldr	r2, [pc, #160]	; (800fc10 <TIM_Base_SetConfig+0x148>)
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	d108      	bne.n	800fb84 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fb78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	68db      	ldr	r3, [r3, #12]
 800fb7e:	68fa      	ldr	r2, [r7, #12]
 800fb80:	4313      	orrs	r3, r2
 800fb82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800fb8a:	683b      	ldr	r3, [r7, #0]
 800fb8c:	695b      	ldr	r3, [r3, #20]
 800fb8e:	4313      	orrs	r3, r2
 800fb90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	68fa      	ldr	r2, [r7, #12]
 800fb96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fb98:	683b      	ldr	r3, [r7, #0]
 800fb9a:	689a      	ldr	r2, [r3, #8]
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	681a      	ldr	r2, [r3, #0]
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	4a10      	ldr	r2, [pc, #64]	; (800fbec <TIM_Base_SetConfig+0x124>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d00f      	beq.n	800fbd0 <TIM_Base_SetConfig+0x108>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	4a12      	ldr	r2, [pc, #72]	; (800fbfc <TIM_Base_SetConfig+0x134>)
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	d00b      	beq.n	800fbd0 <TIM_Base_SetConfig+0x108>
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	4a11      	ldr	r2, [pc, #68]	; (800fc00 <TIM_Base_SetConfig+0x138>)
 800fbbc:	4293      	cmp	r3, r2
 800fbbe:	d007      	beq.n	800fbd0 <TIM_Base_SetConfig+0x108>
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	4a10      	ldr	r2, [pc, #64]	; (800fc04 <TIM_Base_SetConfig+0x13c>)
 800fbc4:	4293      	cmp	r3, r2
 800fbc6:	d003      	beq.n	800fbd0 <TIM_Base_SetConfig+0x108>
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	4a0f      	ldr	r2, [pc, #60]	; (800fc08 <TIM_Base_SetConfig+0x140>)
 800fbcc:	4293      	cmp	r3, r2
 800fbce:	d103      	bne.n	800fbd8 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	691a      	ldr	r2, [r3, #16]
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	2201      	movs	r2, #1
 800fbdc:	615a      	str	r2, [r3, #20]
}
 800fbde:	bf00      	nop
 800fbe0:	3714      	adds	r7, #20
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe8:	4770      	bx	lr
 800fbea:	bf00      	nop
 800fbec:	40010000 	.word	0x40010000
 800fbf0:	40000400 	.word	0x40000400
 800fbf4:	40000800 	.word	0x40000800
 800fbf8:	40000c00 	.word	0x40000c00
 800fbfc:	40010400 	.word	0x40010400
 800fc00:	40014000 	.word	0x40014000
 800fc04:	40014400 	.word	0x40014400
 800fc08:	40014800 	.word	0x40014800
 800fc0c:	4000e000 	.word	0x4000e000
 800fc10:	4000e400 	.word	0x4000e400

0800fc14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fc14:	b480      	push	{r7}
 800fc16:	b087      	sub	sp, #28
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	6a1b      	ldr	r3, [r3, #32]
 800fc22:	f023 0201 	bic.w	r2, r3, #1
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6a1b      	ldr	r3, [r3, #32]
 800fc2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	685b      	ldr	r3, [r3, #4]
 800fc34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	699b      	ldr	r3, [r3, #24]
 800fc3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800fc3c:	68fa      	ldr	r2, [r7, #12]
 800fc3e:	4b37      	ldr	r3, [pc, #220]	; (800fd1c <TIM_OC1_SetConfig+0x108>)
 800fc40:	4013      	ands	r3, r2
 800fc42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	f023 0303 	bic.w	r3, r3, #3
 800fc4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	68fa      	ldr	r2, [r7, #12]
 800fc52:	4313      	orrs	r3, r2
 800fc54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fc56:	697b      	ldr	r3, [r7, #20]
 800fc58:	f023 0302 	bic.w	r3, r3, #2
 800fc5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	689b      	ldr	r3, [r3, #8]
 800fc62:	697a      	ldr	r2, [r7, #20]
 800fc64:	4313      	orrs	r3, r2
 800fc66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	4a2d      	ldr	r2, [pc, #180]	; (800fd20 <TIM_OC1_SetConfig+0x10c>)
 800fc6c:	4293      	cmp	r3, r2
 800fc6e:	d00f      	beq.n	800fc90 <TIM_OC1_SetConfig+0x7c>
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	4a2c      	ldr	r2, [pc, #176]	; (800fd24 <TIM_OC1_SetConfig+0x110>)
 800fc74:	4293      	cmp	r3, r2
 800fc76:	d00b      	beq.n	800fc90 <TIM_OC1_SetConfig+0x7c>
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	4a2b      	ldr	r2, [pc, #172]	; (800fd28 <TIM_OC1_SetConfig+0x114>)
 800fc7c:	4293      	cmp	r3, r2
 800fc7e:	d007      	beq.n	800fc90 <TIM_OC1_SetConfig+0x7c>
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	4a2a      	ldr	r2, [pc, #168]	; (800fd2c <TIM_OC1_SetConfig+0x118>)
 800fc84:	4293      	cmp	r3, r2
 800fc86:	d003      	beq.n	800fc90 <TIM_OC1_SetConfig+0x7c>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	4a29      	ldr	r2, [pc, #164]	; (800fd30 <TIM_OC1_SetConfig+0x11c>)
 800fc8c:	4293      	cmp	r3, r2
 800fc8e:	d10c      	bne.n	800fcaa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800fc90:	697b      	ldr	r3, [r7, #20]
 800fc92:	f023 0308 	bic.w	r3, r3, #8
 800fc96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	68db      	ldr	r3, [r3, #12]
 800fc9c:	697a      	ldr	r2, [r7, #20]
 800fc9e:	4313      	orrs	r3, r2
 800fca0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800fca2:	697b      	ldr	r3, [r7, #20]
 800fca4:	f023 0304 	bic.w	r3, r3, #4
 800fca8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	4a1c      	ldr	r2, [pc, #112]	; (800fd20 <TIM_OC1_SetConfig+0x10c>)
 800fcae:	4293      	cmp	r3, r2
 800fcb0:	d00f      	beq.n	800fcd2 <TIM_OC1_SetConfig+0xbe>
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	4a1b      	ldr	r2, [pc, #108]	; (800fd24 <TIM_OC1_SetConfig+0x110>)
 800fcb6:	4293      	cmp	r3, r2
 800fcb8:	d00b      	beq.n	800fcd2 <TIM_OC1_SetConfig+0xbe>
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	4a1a      	ldr	r2, [pc, #104]	; (800fd28 <TIM_OC1_SetConfig+0x114>)
 800fcbe:	4293      	cmp	r3, r2
 800fcc0:	d007      	beq.n	800fcd2 <TIM_OC1_SetConfig+0xbe>
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	4a19      	ldr	r2, [pc, #100]	; (800fd2c <TIM_OC1_SetConfig+0x118>)
 800fcc6:	4293      	cmp	r3, r2
 800fcc8:	d003      	beq.n	800fcd2 <TIM_OC1_SetConfig+0xbe>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	4a18      	ldr	r2, [pc, #96]	; (800fd30 <TIM_OC1_SetConfig+0x11c>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d111      	bne.n	800fcf6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800fcd2:	693b      	ldr	r3, [r7, #16]
 800fcd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fcd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800fcda:	693b      	ldr	r3, [r7, #16]
 800fcdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	695b      	ldr	r3, [r3, #20]
 800fce6:	693a      	ldr	r2, [r7, #16]
 800fce8:	4313      	orrs	r3, r2
 800fcea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	699b      	ldr	r3, [r3, #24]
 800fcf0:	693a      	ldr	r2, [r7, #16]
 800fcf2:	4313      	orrs	r3, r2
 800fcf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	693a      	ldr	r2, [r7, #16]
 800fcfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	68fa      	ldr	r2, [r7, #12]
 800fd00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	685a      	ldr	r2, [r3, #4]
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	697a      	ldr	r2, [r7, #20]
 800fd0e:	621a      	str	r2, [r3, #32]
}
 800fd10:	bf00      	nop
 800fd12:	371c      	adds	r7, #28
 800fd14:	46bd      	mov	sp, r7
 800fd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1a:	4770      	bx	lr
 800fd1c:	fffeff8f 	.word	0xfffeff8f
 800fd20:	40010000 	.word	0x40010000
 800fd24:	40010400 	.word	0x40010400
 800fd28:	40014000 	.word	0x40014000
 800fd2c:	40014400 	.word	0x40014400
 800fd30:	40014800 	.word	0x40014800

0800fd34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fd34:	b480      	push	{r7}
 800fd36:	b087      	sub	sp, #28
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6a1b      	ldr	r3, [r3, #32]
 800fd42:	f023 0210 	bic.w	r2, r3, #16
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	6a1b      	ldr	r3, [r3, #32]
 800fd4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	685b      	ldr	r3, [r3, #4]
 800fd54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	699b      	ldr	r3, [r3, #24]
 800fd5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fd5c:	68fa      	ldr	r2, [r7, #12]
 800fd5e:	4b34      	ldr	r3, [pc, #208]	; (800fe30 <TIM_OC2_SetConfig+0xfc>)
 800fd60:	4013      	ands	r3, r2
 800fd62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800fd6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fd6c:	683b      	ldr	r3, [r7, #0]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	021b      	lsls	r3, r3, #8
 800fd72:	68fa      	ldr	r2, [r7, #12]
 800fd74:	4313      	orrs	r3, r2
 800fd76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fd78:	697b      	ldr	r3, [r7, #20]
 800fd7a:	f023 0320 	bic.w	r3, r3, #32
 800fd7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fd80:	683b      	ldr	r3, [r7, #0]
 800fd82:	689b      	ldr	r3, [r3, #8]
 800fd84:	011b      	lsls	r3, r3, #4
 800fd86:	697a      	ldr	r2, [r7, #20]
 800fd88:	4313      	orrs	r3, r2
 800fd8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	4a29      	ldr	r2, [pc, #164]	; (800fe34 <TIM_OC2_SetConfig+0x100>)
 800fd90:	4293      	cmp	r3, r2
 800fd92:	d003      	beq.n	800fd9c <TIM_OC2_SetConfig+0x68>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	4a28      	ldr	r2, [pc, #160]	; (800fe38 <TIM_OC2_SetConfig+0x104>)
 800fd98:	4293      	cmp	r3, r2
 800fd9a:	d10d      	bne.n	800fdb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800fd9c:	697b      	ldr	r3, [r7, #20]
 800fd9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fda2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800fda4:	683b      	ldr	r3, [r7, #0]
 800fda6:	68db      	ldr	r3, [r3, #12]
 800fda8:	011b      	lsls	r3, r3, #4
 800fdaa:	697a      	ldr	r2, [r7, #20]
 800fdac:	4313      	orrs	r3, r2
 800fdae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fdb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	4a1e      	ldr	r2, [pc, #120]	; (800fe34 <TIM_OC2_SetConfig+0x100>)
 800fdbc:	4293      	cmp	r3, r2
 800fdbe:	d00f      	beq.n	800fde0 <TIM_OC2_SetConfig+0xac>
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	4a1d      	ldr	r2, [pc, #116]	; (800fe38 <TIM_OC2_SetConfig+0x104>)
 800fdc4:	4293      	cmp	r3, r2
 800fdc6:	d00b      	beq.n	800fde0 <TIM_OC2_SetConfig+0xac>
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	4a1c      	ldr	r2, [pc, #112]	; (800fe3c <TIM_OC2_SetConfig+0x108>)
 800fdcc:	4293      	cmp	r3, r2
 800fdce:	d007      	beq.n	800fde0 <TIM_OC2_SetConfig+0xac>
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	4a1b      	ldr	r2, [pc, #108]	; (800fe40 <TIM_OC2_SetConfig+0x10c>)
 800fdd4:	4293      	cmp	r3, r2
 800fdd6:	d003      	beq.n	800fde0 <TIM_OC2_SetConfig+0xac>
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	4a1a      	ldr	r2, [pc, #104]	; (800fe44 <TIM_OC2_SetConfig+0x110>)
 800fddc:	4293      	cmp	r3, r2
 800fdde:	d113      	bne.n	800fe08 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fde6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800fde8:	693b      	ldr	r3, [r7, #16]
 800fdea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800fdee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	695b      	ldr	r3, [r3, #20]
 800fdf4:	009b      	lsls	r3, r3, #2
 800fdf6:	693a      	ldr	r2, [r7, #16]
 800fdf8:	4313      	orrs	r3, r2
 800fdfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	699b      	ldr	r3, [r3, #24]
 800fe00:	009b      	lsls	r3, r3, #2
 800fe02:	693a      	ldr	r2, [r7, #16]
 800fe04:	4313      	orrs	r3, r2
 800fe06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	693a      	ldr	r2, [r7, #16]
 800fe0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	68fa      	ldr	r2, [r7, #12]
 800fe12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	685a      	ldr	r2, [r3, #4]
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	697a      	ldr	r2, [r7, #20]
 800fe20:	621a      	str	r2, [r3, #32]
}
 800fe22:	bf00      	nop
 800fe24:	371c      	adds	r7, #28
 800fe26:	46bd      	mov	sp, r7
 800fe28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe2c:	4770      	bx	lr
 800fe2e:	bf00      	nop
 800fe30:	feff8fff 	.word	0xfeff8fff
 800fe34:	40010000 	.word	0x40010000
 800fe38:	40010400 	.word	0x40010400
 800fe3c:	40014000 	.word	0x40014000
 800fe40:	40014400 	.word	0x40014400
 800fe44:	40014800 	.word	0x40014800

0800fe48 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b087      	sub	sp, #28
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	6a1b      	ldr	r3, [r3, #32]
 800fe56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	6a1b      	ldr	r3, [r3, #32]
 800fe62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	685b      	ldr	r3, [r3, #4]
 800fe68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	69db      	ldr	r3, [r3, #28]
 800fe6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fe70:	68fa      	ldr	r2, [r7, #12]
 800fe72:	4b33      	ldr	r3, [pc, #204]	; (800ff40 <TIM_OC3_SetConfig+0xf8>)
 800fe74:	4013      	ands	r3, r2
 800fe76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	f023 0303 	bic.w	r3, r3, #3
 800fe7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	68fa      	ldr	r2, [r7, #12]
 800fe86:	4313      	orrs	r3, r2
 800fe88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fe90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	689b      	ldr	r3, [r3, #8]
 800fe96:	021b      	lsls	r3, r3, #8
 800fe98:	697a      	ldr	r2, [r7, #20]
 800fe9a:	4313      	orrs	r3, r2
 800fe9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	4a28      	ldr	r2, [pc, #160]	; (800ff44 <TIM_OC3_SetConfig+0xfc>)
 800fea2:	4293      	cmp	r3, r2
 800fea4:	d003      	beq.n	800feae <TIM_OC3_SetConfig+0x66>
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	4a27      	ldr	r2, [pc, #156]	; (800ff48 <TIM_OC3_SetConfig+0x100>)
 800feaa:	4293      	cmp	r3, r2
 800feac:	d10d      	bne.n	800feca <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800feb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	68db      	ldr	r3, [r3, #12]
 800feba:	021b      	lsls	r3, r3, #8
 800febc:	697a      	ldr	r2, [r7, #20]
 800febe:	4313      	orrs	r3, r2
 800fec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800fec2:	697b      	ldr	r3, [r7, #20]
 800fec4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800fec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	4a1d      	ldr	r2, [pc, #116]	; (800ff44 <TIM_OC3_SetConfig+0xfc>)
 800fece:	4293      	cmp	r3, r2
 800fed0:	d00f      	beq.n	800fef2 <TIM_OC3_SetConfig+0xaa>
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	4a1c      	ldr	r2, [pc, #112]	; (800ff48 <TIM_OC3_SetConfig+0x100>)
 800fed6:	4293      	cmp	r3, r2
 800fed8:	d00b      	beq.n	800fef2 <TIM_OC3_SetConfig+0xaa>
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	4a1b      	ldr	r2, [pc, #108]	; (800ff4c <TIM_OC3_SetConfig+0x104>)
 800fede:	4293      	cmp	r3, r2
 800fee0:	d007      	beq.n	800fef2 <TIM_OC3_SetConfig+0xaa>
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	4a1a      	ldr	r2, [pc, #104]	; (800ff50 <TIM_OC3_SetConfig+0x108>)
 800fee6:	4293      	cmp	r3, r2
 800fee8:	d003      	beq.n	800fef2 <TIM_OC3_SetConfig+0xaa>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	4a19      	ldr	r2, [pc, #100]	; (800ff54 <TIM_OC3_SetConfig+0x10c>)
 800feee:	4293      	cmp	r3, r2
 800fef0:	d113      	bne.n	800ff1a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800fef2:	693b      	ldr	r3, [r7, #16]
 800fef4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800fef8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800fefa:	693b      	ldr	r3, [r7, #16]
 800fefc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ff00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	695b      	ldr	r3, [r3, #20]
 800ff06:	011b      	lsls	r3, r3, #4
 800ff08:	693a      	ldr	r2, [r7, #16]
 800ff0a:	4313      	orrs	r3, r2
 800ff0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	699b      	ldr	r3, [r3, #24]
 800ff12:	011b      	lsls	r3, r3, #4
 800ff14:	693a      	ldr	r2, [r7, #16]
 800ff16:	4313      	orrs	r3, r2
 800ff18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	693a      	ldr	r2, [r7, #16]
 800ff1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	68fa      	ldr	r2, [r7, #12]
 800ff24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	685a      	ldr	r2, [r3, #4]
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	697a      	ldr	r2, [r7, #20]
 800ff32:	621a      	str	r2, [r3, #32]
}
 800ff34:	bf00      	nop
 800ff36:	371c      	adds	r7, #28
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr
 800ff40:	fffeff8f 	.word	0xfffeff8f
 800ff44:	40010000 	.word	0x40010000
 800ff48:	40010400 	.word	0x40010400
 800ff4c:	40014000 	.word	0x40014000
 800ff50:	40014400 	.word	0x40014400
 800ff54:	40014800 	.word	0x40014800

0800ff58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b087      	sub	sp, #28
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
 800ff60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	6a1b      	ldr	r3, [r3, #32]
 800ff66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	6a1b      	ldr	r3, [r3, #32]
 800ff72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	685b      	ldr	r3, [r3, #4]
 800ff78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	69db      	ldr	r3, [r3, #28]
 800ff7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ff80:	68fa      	ldr	r2, [r7, #12]
 800ff82:	4b24      	ldr	r3, [pc, #144]	; (8010014 <TIM_OC4_SetConfig+0xbc>)
 800ff84:	4013      	ands	r3, r2
 800ff86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ff8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ff90:	683b      	ldr	r3, [r7, #0]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	021b      	lsls	r3, r3, #8
 800ff96:	68fa      	ldr	r2, [r7, #12]
 800ff98:	4313      	orrs	r3, r2
 800ff9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ff9c:	693b      	ldr	r3, [r7, #16]
 800ff9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ffa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ffa4:	683b      	ldr	r3, [r7, #0]
 800ffa6:	689b      	ldr	r3, [r3, #8]
 800ffa8:	031b      	lsls	r3, r3, #12
 800ffaa:	693a      	ldr	r2, [r7, #16]
 800ffac:	4313      	orrs	r3, r2
 800ffae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	4a19      	ldr	r2, [pc, #100]	; (8010018 <TIM_OC4_SetConfig+0xc0>)
 800ffb4:	4293      	cmp	r3, r2
 800ffb6:	d00f      	beq.n	800ffd8 <TIM_OC4_SetConfig+0x80>
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	4a18      	ldr	r2, [pc, #96]	; (801001c <TIM_OC4_SetConfig+0xc4>)
 800ffbc:	4293      	cmp	r3, r2
 800ffbe:	d00b      	beq.n	800ffd8 <TIM_OC4_SetConfig+0x80>
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	4a17      	ldr	r2, [pc, #92]	; (8010020 <TIM_OC4_SetConfig+0xc8>)
 800ffc4:	4293      	cmp	r3, r2
 800ffc6:	d007      	beq.n	800ffd8 <TIM_OC4_SetConfig+0x80>
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	4a16      	ldr	r2, [pc, #88]	; (8010024 <TIM_OC4_SetConfig+0xcc>)
 800ffcc:	4293      	cmp	r3, r2
 800ffce:	d003      	beq.n	800ffd8 <TIM_OC4_SetConfig+0x80>
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	4a15      	ldr	r2, [pc, #84]	; (8010028 <TIM_OC4_SetConfig+0xd0>)
 800ffd4:	4293      	cmp	r3, r2
 800ffd6:	d109      	bne.n	800ffec <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ffd8:	697b      	ldr	r3, [r7, #20]
 800ffda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ffde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	695b      	ldr	r3, [r3, #20]
 800ffe4:	019b      	lsls	r3, r3, #6
 800ffe6:	697a      	ldr	r2, [r7, #20]
 800ffe8:	4313      	orrs	r3, r2
 800ffea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	697a      	ldr	r2, [r7, #20]
 800fff0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	68fa      	ldr	r2, [r7, #12]
 800fff6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fff8:	683b      	ldr	r3, [r7, #0]
 800fffa:	685a      	ldr	r2, [r3, #4]
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	693a      	ldr	r2, [r7, #16]
 8010004:	621a      	str	r2, [r3, #32]
}
 8010006:	bf00      	nop
 8010008:	371c      	adds	r7, #28
 801000a:	46bd      	mov	sp, r7
 801000c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010010:	4770      	bx	lr
 8010012:	bf00      	nop
 8010014:	feff8fff 	.word	0xfeff8fff
 8010018:	40010000 	.word	0x40010000
 801001c:	40010400 	.word	0x40010400
 8010020:	40014000 	.word	0x40014000
 8010024:	40014400 	.word	0x40014400
 8010028:	40014800 	.word	0x40014800

0801002c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801002c:	b480      	push	{r7}
 801002e:	b087      	sub	sp, #28
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	6a1b      	ldr	r3, [r3, #32]
 801003a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	6a1b      	ldr	r3, [r3, #32]
 8010046:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	685b      	ldr	r3, [r3, #4]
 801004c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010054:	68fa      	ldr	r2, [r7, #12]
 8010056:	4b21      	ldr	r3, [pc, #132]	; (80100dc <TIM_OC5_SetConfig+0xb0>)
 8010058:	4013      	ands	r3, r2
 801005a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801005c:	683b      	ldr	r3, [r7, #0]
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	68fa      	ldr	r2, [r7, #12]
 8010062:	4313      	orrs	r3, r2
 8010064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801006c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	689b      	ldr	r3, [r3, #8]
 8010072:	041b      	lsls	r3, r3, #16
 8010074:	693a      	ldr	r2, [r7, #16]
 8010076:	4313      	orrs	r3, r2
 8010078:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	4a18      	ldr	r2, [pc, #96]	; (80100e0 <TIM_OC5_SetConfig+0xb4>)
 801007e:	4293      	cmp	r3, r2
 8010080:	d00f      	beq.n	80100a2 <TIM_OC5_SetConfig+0x76>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	4a17      	ldr	r2, [pc, #92]	; (80100e4 <TIM_OC5_SetConfig+0xb8>)
 8010086:	4293      	cmp	r3, r2
 8010088:	d00b      	beq.n	80100a2 <TIM_OC5_SetConfig+0x76>
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	4a16      	ldr	r2, [pc, #88]	; (80100e8 <TIM_OC5_SetConfig+0xbc>)
 801008e:	4293      	cmp	r3, r2
 8010090:	d007      	beq.n	80100a2 <TIM_OC5_SetConfig+0x76>
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	4a15      	ldr	r2, [pc, #84]	; (80100ec <TIM_OC5_SetConfig+0xc0>)
 8010096:	4293      	cmp	r3, r2
 8010098:	d003      	beq.n	80100a2 <TIM_OC5_SetConfig+0x76>
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	4a14      	ldr	r2, [pc, #80]	; (80100f0 <TIM_OC5_SetConfig+0xc4>)
 801009e:	4293      	cmp	r3, r2
 80100a0:	d109      	bne.n	80100b6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80100a8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80100aa:	683b      	ldr	r3, [r7, #0]
 80100ac:	695b      	ldr	r3, [r3, #20]
 80100ae:	021b      	lsls	r3, r3, #8
 80100b0:	697a      	ldr	r2, [r7, #20]
 80100b2:	4313      	orrs	r3, r2
 80100b4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	697a      	ldr	r2, [r7, #20]
 80100ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	68fa      	ldr	r2, [r7, #12]
 80100c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80100c2:	683b      	ldr	r3, [r7, #0]
 80100c4:	685a      	ldr	r2, [r3, #4]
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	693a      	ldr	r2, [r7, #16]
 80100ce:	621a      	str	r2, [r3, #32]
}
 80100d0:	bf00      	nop
 80100d2:	371c      	adds	r7, #28
 80100d4:	46bd      	mov	sp, r7
 80100d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100da:	4770      	bx	lr
 80100dc:	fffeff8f 	.word	0xfffeff8f
 80100e0:	40010000 	.word	0x40010000
 80100e4:	40010400 	.word	0x40010400
 80100e8:	40014000 	.word	0x40014000
 80100ec:	40014400 	.word	0x40014400
 80100f0:	40014800 	.word	0x40014800

080100f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80100f4:	b480      	push	{r7}
 80100f6:	b087      	sub	sp, #28
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
 80100fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	6a1b      	ldr	r3, [r3, #32]
 8010102:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	6a1b      	ldr	r3, [r3, #32]
 801010e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	685b      	ldr	r3, [r3, #4]
 8010114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801011a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801011c:	68fa      	ldr	r2, [r7, #12]
 801011e:	4b22      	ldr	r3, [pc, #136]	; (80101a8 <TIM_OC6_SetConfig+0xb4>)
 8010120:	4013      	ands	r3, r2
 8010122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	021b      	lsls	r3, r3, #8
 801012a:	68fa      	ldr	r2, [r7, #12]
 801012c:	4313      	orrs	r3, r2
 801012e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010130:	693b      	ldr	r3, [r7, #16]
 8010132:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010136:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010138:	683b      	ldr	r3, [r7, #0]
 801013a:	689b      	ldr	r3, [r3, #8]
 801013c:	051b      	lsls	r3, r3, #20
 801013e:	693a      	ldr	r2, [r7, #16]
 8010140:	4313      	orrs	r3, r2
 8010142:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	4a19      	ldr	r2, [pc, #100]	; (80101ac <TIM_OC6_SetConfig+0xb8>)
 8010148:	4293      	cmp	r3, r2
 801014a:	d00f      	beq.n	801016c <TIM_OC6_SetConfig+0x78>
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	4a18      	ldr	r2, [pc, #96]	; (80101b0 <TIM_OC6_SetConfig+0xbc>)
 8010150:	4293      	cmp	r3, r2
 8010152:	d00b      	beq.n	801016c <TIM_OC6_SetConfig+0x78>
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	4a17      	ldr	r2, [pc, #92]	; (80101b4 <TIM_OC6_SetConfig+0xc0>)
 8010158:	4293      	cmp	r3, r2
 801015a:	d007      	beq.n	801016c <TIM_OC6_SetConfig+0x78>
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	4a16      	ldr	r2, [pc, #88]	; (80101b8 <TIM_OC6_SetConfig+0xc4>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d003      	beq.n	801016c <TIM_OC6_SetConfig+0x78>
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	4a15      	ldr	r2, [pc, #84]	; (80101bc <TIM_OC6_SetConfig+0xc8>)
 8010168:	4293      	cmp	r3, r2
 801016a:	d109      	bne.n	8010180 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010172:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010174:	683b      	ldr	r3, [r7, #0]
 8010176:	695b      	ldr	r3, [r3, #20]
 8010178:	029b      	lsls	r3, r3, #10
 801017a:	697a      	ldr	r2, [r7, #20]
 801017c:	4313      	orrs	r3, r2
 801017e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	697a      	ldr	r2, [r7, #20]
 8010184:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	68fa      	ldr	r2, [r7, #12]
 801018a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	685a      	ldr	r2, [r3, #4]
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	693a      	ldr	r2, [r7, #16]
 8010198:	621a      	str	r2, [r3, #32]
}
 801019a:	bf00      	nop
 801019c:	371c      	adds	r7, #28
 801019e:	46bd      	mov	sp, r7
 80101a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a4:	4770      	bx	lr
 80101a6:	bf00      	nop
 80101a8:	feff8fff 	.word	0xfeff8fff
 80101ac:	40010000 	.word	0x40010000
 80101b0:	40010400 	.word	0x40010400
 80101b4:	40014000 	.word	0x40014000
 80101b8:	40014400 	.word	0x40014400
 80101bc:	40014800 	.word	0x40014800

080101c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80101c0:	b480      	push	{r7}
 80101c2:	b087      	sub	sp, #28
 80101c4:	af00      	add	r7, sp, #0
 80101c6:	60f8      	str	r0, [r7, #12]
 80101c8:	60b9      	str	r1, [r7, #8]
 80101ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	f003 031f 	and.w	r3, r3, #31
 80101d2:	2201      	movs	r2, #1
 80101d4:	fa02 f303 	lsl.w	r3, r2, r3
 80101d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	6a1a      	ldr	r2, [r3, #32]
 80101de:	697b      	ldr	r3, [r7, #20]
 80101e0:	43db      	mvns	r3, r3
 80101e2:	401a      	ands	r2, r3
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	6a1a      	ldr	r2, [r3, #32]
 80101ec:	68bb      	ldr	r3, [r7, #8]
 80101ee:	f003 031f 	and.w	r3, r3, #31
 80101f2:	6879      	ldr	r1, [r7, #4]
 80101f4:	fa01 f303 	lsl.w	r3, r1, r3
 80101f8:	431a      	orrs	r2, r3
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	621a      	str	r2, [r3, #32]
}
 80101fe:	bf00      	nop
 8010200:	371c      	adds	r7, #28
 8010202:	46bd      	mov	sp, r7
 8010204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010208:	4770      	bx	lr
	...

0801020c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801020c:	b480      	push	{r7}
 801020e:	b085      	sub	sp, #20
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
 8010214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801021c:	2b01      	cmp	r3, #1
 801021e:	d101      	bne.n	8010224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010220:	2302      	movs	r3, #2
 8010222:	e077      	b.n	8010314 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	2201      	movs	r2, #1
 8010228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2202      	movs	r2, #2
 8010230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	689b      	ldr	r3, [r3, #8]
 8010242:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	4a35      	ldr	r2, [pc, #212]	; (8010320 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801024a:	4293      	cmp	r3, r2
 801024c:	d004      	beq.n	8010258 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	4a34      	ldr	r2, [pc, #208]	; (8010324 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010254:	4293      	cmp	r3, r2
 8010256:	d108      	bne.n	801026a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801025e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	685b      	ldr	r3, [r3, #4]
 8010264:	68fa      	ldr	r2, [r7, #12]
 8010266:	4313      	orrs	r3, r2
 8010268:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010270:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	68fa      	ldr	r2, [r7, #12]
 8010278:	4313      	orrs	r3, r2
 801027a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	68fa      	ldr	r2, [r7, #12]
 8010282:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	4a25      	ldr	r2, [pc, #148]	; (8010320 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801028a:	4293      	cmp	r3, r2
 801028c:	d02c      	beq.n	80102e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010296:	d027      	beq.n	80102e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	4a22      	ldr	r2, [pc, #136]	; (8010328 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 801029e:	4293      	cmp	r3, r2
 80102a0:	d022      	beq.n	80102e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	4a21      	ldr	r2, [pc, #132]	; (801032c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80102a8:	4293      	cmp	r3, r2
 80102aa:	d01d      	beq.n	80102e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	4a1f      	ldr	r2, [pc, #124]	; (8010330 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80102b2:	4293      	cmp	r3, r2
 80102b4:	d018      	beq.n	80102e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	4a1a      	ldr	r2, [pc, #104]	; (8010324 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80102bc:	4293      	cmp	r3, r2
 80102be:	d013      	beq.n	80102e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	4a1b      	ldr	r2, [pc, #108]	; (8010334 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80102c6:	4293      	cmp	r3, r2
 80102c8:	d00e      	beq.n	80102e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	4a1a      	ldr	r2, [pc, #104]	; (8010338 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80102d0:	4293      	cmp	r3, r2
 80102d2:	d009      	beq.n	80102e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	4a18      	ldr	r2, [pc, #96]	; (801033c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80102da:	4293      	cmp	r3, r2
 80102dc:	d004      	beq.n	80102e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	4a17      	ldr	r2, [pc, #92]	; (8010340 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80102e4:	4293      	cmp	r3, r2
 80102e6:	d10c      	bne.n	8010302 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80102ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80102f0:	683b      	ldr	r3, [r7, #0]
 80102f2:	689b      	ldr	r3, [r3, #8]
 80102f4:	68ba      	ldr	r2, [r7, #8]
 80102f6:	4313      	orrs	r3, r2
 80102f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	68ba      	ldr	r2, [r7, #8]
 8010300:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	2201      	movs	r2, #1
 8010306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	2200      	movs	r2, #0
 801030e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8010312:	2300      	movs	r3, #0
}
 8010314:	4618      	mov	r0, r3
 8010316:	3714      	adds	r7, #20
 8010318:	46bd      	mov	sp, r7
 801031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031e:	4770      	bx	lr
 8010320:	40010000 	.word	0x40010000
 8010324:	40010400 	.word	0x40010400
 8010328:	40000400 	.word	0x40000400
 801032c:	40000800 	.word	0x40000800
 8010330:	40000c00 	.word	0x40000c00
 8010334:	40001800 	.word	0x40001800
 8010338:	40014000 	.word	0x40014000
 801033c:	4000e000 	.word	0x4000e000
 8010340:	4000e400 	.word	0x4000e400

08010344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8010344:	b480      	push	{r7}
 8010346:	b083      	sub	sp, #12
 8010348:	af00      	add	r7, sp, #0
 801034a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801034c:	bf00      	nop
 801034e:	370c      	adds	r7, #12
 8010350:	46bd      	mov	sp, r7
 8010352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010356:	4770      	bx	lr

08010358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8010358:	b480      	push	{r7}
 801035a:	b083      	sub	sp, #12
 801035c:	af00      	add	r7, sp, #0
 801035e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8010360:	bf00      	nop
 8010362:	370c      	adds	r7, #12
 8010364:	46bd      	mov	sp, r7
 8010366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036a:	4770      	bx	lr

0801036c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801036c:	b480      	push	{r7}
 801036e:	b083      	sub	sp, #12
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8010374:	bf00      	nop
 8010376:	370c      	adds	r7, #12
 8010378:	46bd      	mov	sp, r7
 801037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801037e:	4770      	bx	lr

08010380 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010380:	b580      	push	{r7, lr}
 8010382:	b082      	sub	sp, #8
 8010384:	af00      	add	r7, sp, #0
 8010386:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d101      	bne.n	8010392 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801038e:	2301      	movs	r3, #1
 8010390:	e042      	b.n	8010418 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010398:	2b00      	cmp	r3, #0
 801039a:	d106      	bne.n	80103aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	2200      	movs	r2, #0
 80103a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80103a4:	6878      	ldr	r0, [r7, #4]
 80103a6:	f7f2 fc59 	bl	8002c5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	2224      	movs	r2, #36	; 0x24
 80103ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	681b      	ldr	r3, [r3, #0]
 80103b6:	681a      	ldr	r2, [r3, #0]
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	f022 0201 	bic.w	r2, r2, #1
 80103c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80103c2:	6878      	ldr	r0, [r7, #4]
 80103c4:	f000 f82c 	bl	8010420 <UART_SetConfig>
 80103c8:	4603      	mov	r3, r0
 80103ca:	2b01      	cmp	r3, #1
 80103cc:	d101      	bne.n	80103d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80103ce:	2301      	movs	r3, #1
 80103d0:	e022      	b.n	8010418 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d002      	beq.n	80103e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80103da:	6878      	ldr	r0, [r7, #4]
 80103dc:	f000 fe8c 	bl	80110f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	685a      	ldr	r2, [r3, #4]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80103ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	689a      	ldr	r2, [r3, #8]
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80103fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	681a      	ldr	r2, [r3, #0]
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	f042 0201 	orr.w	r2, r2, #1
 801040e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010410:	6878      	ldr	r0, [r7, #4]
 8010412:	f000 ff13 	bl	801123c <UART_CheckIdleState>
 8010416:	4603      	mov	r3, r0
}
 8010418:	4618      	mov	r0, r3
 801041a:	3708      	adds	r7, #8
 801041c:	46bd      	mov	sp, r7
 801041e:	bd80      	pop	{r7, pc}

08010420 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010420:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010424:	b092      	sub	sp, #72	; 0x48
 8010426:	af00      	add	r7, sp, #0
 8010428:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801042a:	2300      	movs	r3, #0
 801042c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010430:	697b      	ldr	r3, [r7, #20]
 8010432:	689a      	ldr	r2, [r3, #8]
 8010434:	697b      	ldr	r3, [r7, #20]
 8010436:	691b      	ldr	r3, [r3, #16]
 8010438:	431a      	orrs	r2, r3
 801043a:	697b      	ldr	r3, [r7, #20]
 801043c:	695b      	ldr	r3, [r3, #20]
 801043e:	431a      	orrs	r2, r3
 8010440:	697b      	ldr	r3, [r7, #20]
 8010442:	69db      	ldr	r3, [r3, #28]
 8010444:	4313      	orrs	r3, r2
 8010446:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010448:	697b      	ldr	r3, [r7, #20]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	681a      	ldr	r2, [r3, #0]
 801044e:	4bbe      	ldr	r3, [pc, #760]	; (8010748 <UART_SetConfig+0x328>)
 8010450:	4013      	ands	r3, r2
 8010452:	697a      	ldr	r2, [r7, #20]
 8010454:	6812      	ldr	r2, [r2, #0]
 8010456:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010458:	430b      	orrs	r3, r1
 801045a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801045c:	697b      	ldr	r3, [r7, #20]
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	685b      	ldr	r3, [r3, #4]
 8010462:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010466:	697b      	ldr	r3, [r7, #20]
 8010468:	68da      	ldr	r2, [r3, #12]
 801046a:	697b      	ldr	r3, [r7, #20]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	430a      	orrs	r2, r1
 8010470:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010472:	697b      	ldr	r3, [r7, #20]
 8010474:	699b      	ldr	r3, [r3, #24]
 8010476:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010478:	697b      	ldr	r3, [r7, #20]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	4ab3      	ldr	r2, [pc, #716]	; (801074c <UART_SetConfig+0x32c>)
 801047e:	4293      	cmp	r3, r2
 8010480:	d004      	beq.n	801048c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010482:	697b      	ldr	r3, [r7, #20]
 8010484:	6a1b      	ldr	r3, [r3, #32]
 8010486:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010488:	4313      	orrs	r3, r2
 801048a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	689a      	ldr	r2, [r3, #8]
 8010492:	4baf      	ldr	r3, [pc, #700]	; (8010750 <UART_SetConfig+0x330>)
 8010494:	4013      	ands	r3, r2
 8010496:	697a      	ldr	r2, [r7, #20]
 8010498:	6812      	ldr	r2, [r2, #0]
 801049a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801049c:	430b      	orrs	r3, r1
 801049e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80104a0:	697b      	ldr	r3, [r7, #20]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104a6:	f023 010f 	bic.w	r1, r3, #15
 80104aa:	697b      	ldr	r3, [r7, #20]
 80104ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80104ae:	697b      	ldr	r3, [r7, #20]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	430a      	orrs	r2, r1
 80104b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80104b6:	697b      	ldr	r3, [r7, #20]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	4aa6      	ldr	r2, [pc, #664]	; (8010754 <UART_SetConfig+0x334>)
 80104bc:	4293      	cmp	r3, r2
 80104be:	d177      	bne.n	80105b0 <UART_SetConfig+0x190>
 80104c0:	4ba5      	ldr	r3, [pc, #660]	; (8010758 <UART_SetConfig+0x338>)
 80104c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80104c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80104c8:	2b28      	cmp	r3, #40	; 0x28
 80104ca:	d86d      	bhi.n	80105a8 <UART_SetConfig+0x188>
 80104cc:	a201      	add	r2, pc, #4	; (adr r2, 80104d4 <UART_SetConfig+0xb4>)
 80104ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104d2:	bf00      	nop
 80104d4:	08010579 	.word	0x08010579
 80104d8:	080105a9 	.word	0x080105a9
 80104dc:	080105a9 	.word	0x080105a9
 80104e0:	080105a9 	.word	0x080105a9
 80104e4:	080105a9 	.word	0x080105a9
 80104e8:	080105a9 	.word	0x080105a9
 80104ec:	080105a9 	.word	0x080105a9
 80104f0:	080105a9 	.word	0x080105a9
 80104f4:	08010581 	.word	0x08010581
 80104f8:	080105a9 	.word	0x080105a9
 80104fc:	080105a9 	.word	0x080105a9
 8010500:	080105a9 	.word	0x080105a9
 8010504:	080105a9 	.word	0x080105a9
 8010508:	080105a9 	.word	0x080105a9
 801050c:	080105a9 	.word	0x080105a9
 8010510:	080105a9 	.word	0x080105a9
 8010514:	08010589 	.word	0x08010589
 8010518:	080105a9 	.word	0x080105a9
 801051c:	080105a9 	.word	0x080105a9
 8010520:	080105a9 	.word	0x080105a9
 8010524:	080105a9 	.word	0x080105a9
 8010528:	080105a9 	.word	0x080105a9
 801052c:	080105a9 	.word	0x080105a9
 8010530:	080105a9 	.word	0x080105a9
 8010534:	08010591 	.word	0x08010591
 8010538:	080105a9 	.word	0x080105a9
 801053c:	080105a9 	.word	0x080105a9
 8010540:	080105a9 	.word	0x080105a9
 8010544:	080105a9 	.word	0x080105a9
 8010548:	080105a9 	.word	0x080105a9
 801054c:	080105a9 	.word	0x080105a9
 8010550:	080105a9 	.word	0x080105a9
 8010554:	08010599 	.word	0x08010599
 8010558:	080105a9 	.word	0x080105a9
 801055c:	080105a9 	.word	0x080105a9
 8010560:	080105a9 	.word	0x080105a9
 8010564:	080105a9 	.word	0x080105a9
 8010568:	080105a9 	.word	0x080105a9
 801056c:	080105a9 	.word	0x080105a9
 8010570:	080105a9 	.word	0x080105a9
 8010574:	080105a1 	.word	0x080105a1
 8010578:	2301      	movs	r3, #1
 801057a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801057e:	e326      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010580:	2304      	movs	r3, #4
 8010582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010586:	e322      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010588:	2308      	movs	r3, #8
 801058a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801058e:	e31e      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010590:	2310      	movs	r3, #16
 8010592:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010596:	e31a      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010598:	2320      	movs	r3, #32
 801059a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801059e:	e316      	b.n	8010bce <UART_SetConfig+0x7ae>
 80105a0:	2340      	movs	r3, #64	; 0x40
 80105a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105a6:	e312      	b.n	8010bce <UART_SetConfig+0x7ae>
 80105a8:	2380      	movs	r3, #128	; 0x80
 80105aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105ae:	e30e      	b.n	8010bce <UART_SetConfig+0x7ae>
 80105b0:	697b      	ldr	r3, [r7, #20]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	4a69      	ldr	r2, [pc, #420]	; (801075c <UART_SetConfig+0x33c>)
 80105b6:	4293      	cmp	r3, r2
 80105b8:	d130      	bne.n	801061c <UART_SetConfig+0x1fc>
 80105ba:	4b67      	ldr	r3, [pc, #412]	; (8010758 <UART_SetConfig+0x338>)
 80105bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105be:	f003 0307 	and.w	r3, r3, #7
 80105c2:	2b05      	cmp	r3, #5
 80105c4:	d826      	bhi.n	8010614 <UART_SetConfig+0x1f4>
 80105c6:	a201      	add	r2, pc, #4	; (adr r2, 80105cc <UART_SetConfig+0x1ac>)
 80105c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105cc:	080105e5 	.word	0x080105e5
 80105d0:	080105ed 	.word	0x080105ed
 80105d4:	080105f5 	.word	0x080105f5
 80105d8:	080105fd 	.word	0x080105fd
 80105dc:	08010605 	.word	0x08010605
 80105e0:	0801060d 	.word	0x0801060d
 80105e4:	2300      	movs	r3, #0
 80105e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105ea:	e2f0      	b.n	8010bce <UART_SetConfig+0x7ae>
 80105ec:	2304      	movs	r3, #4
 80105ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105f2:	e2ec      	b.n	8010bce <UART_SetConfig+0x7ae>
 80105f4:	2308      	movs	r3, #8
 80105f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80105fa:	e2e8      	b.n	8010bce <UART_SetConfig+0x7ae>
 80105fc:	2310      	movs	r3, #16
 80105fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010602:	e2e4      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010604:	2320      	movs	r3, #32
 8010606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801060a:	e2e0      	b.n	8010bce <UART_SetConfig+0x7ae>
 801060c:	2340      	movs	r3, #64	; 0x40
 801060e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010612:	e2dc      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010614:	2380      	movs	r3, #128	; 0x80
 8010616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801061a:	e2d8      	b.n	8010bce <UART_SetConfig+0x7ae>
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	4a4f      	ldr	r2, [pc, #316]	; (8010760 <UART_SetConfig+0x340>)
 8010622:	4293      	cmp	r3, r2
 8010624:	d130      	bne.n	8010688 <UART_SetConfig+0x268>
 8010626:	4b4c      	ldr	r3, [pc, #304]	; (8010758 <UART_SetConfig+0x338>)
 8010628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801062a:	f003 0307 	and.w	r3, r3, #7
 801062e:	2b05      	cmp	r3, #5
 8010630:	d826      	bhi.n	8010680 <UART_SetConfig+0x260>
 8010632:	a201      	add	r2, pc, #4	; (adr r2, 8010638 <UART_SetConfig+0x218>)
 8010634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010638:	08010651 	.word	0x08010651
 801063c:	08010659 	.word	0x08010659
 8010640:	08010661 	.word	0x08010661
 8010644:	08010669 	.word	0x08010669
 8010648:	08010671 	.word	0x08010671
 801064c:	08010679 	.word	0x08010679
 8010650:	2300      	movs	r3, #0
 8010652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010656:	e2ba      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010658:	2304      	movs	r3, #4
 801065a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801065e:	e2b6      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010660:	2308      	movs	r3, #8
 8010662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010666:	e2b2      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010668:	2310      	movs	r3, #16
 801066a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801066e:	e2ae      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010670:	2320      	movs	r3, #32
 8010672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010676:	e2aa      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010678:	2340      	movs	r3, #64	; 0x40
 801067a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801067e:	e2a6      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010680:	2380      	movs	r3, #128	; 0x80
 8010682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010686:	e2a2      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010688:	697b      	ldr	r3, [r7, #20]
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	4a35      	ldr	r2, [pc, #212]	; (8010764 <UART_SetConfig+0x344>)
 801068e:	4293      	cmp	r3, r2
 8010690:	d130      	bne.n	80106f4 <UART_SetConfig+0x2d4>
 8010692:	4b31      	ldr	r3, [pc, #196]	; (8010758 <UART_SetConfig+0x338>)
 8010694:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010696:	f003 0307 	and.w	r3, r3, #7
 801069a:	2b05      	cmp	r3, #5
 801069c:	d826      	bhi.n	80106ec <UART_SetConfig+0x2cc>
 801069e:	a201      	add	r2, pc, #4	; (adr r2, 80106a4 <UART_SetConfig+0x284>)
 80106a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106a4:	080106bd 	.word	0x080106bd
 80106a8:	080106c5 	.word	0x080106c5
 80106ac:	080106cd 	.word	0x080106cd
 80106b0:	080106d5 	.word	0x080106d5
 80106b4:	080106dd 	.word	0x080106dd
 80106b8:	080106e5 	.word	0x080106e5
 80106bc:	2300      	movs	r3, #0
 80106be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106c2:	e284      	b.n	8010bce <UART_SetConfig+0x7ae>
 80106c4:	2304      	movs	r3, #4
 80106c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106ca:	e280      	b.n	8010bce <UART_SetConfig+0x7ae>
 80106cc:	2308      	movs	r3, #8
 80106ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106d2:	e27c      	b.n	8010bce <UART_SetConfig+0x7ae>
 80106d4:	2310      	movs	r3, #16
 80106d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106da:	e278      	b.n	8010bce <UART_SetConfig+0x7ae>
 80106dc:	2320      	movs	r3, #32
 80106de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106e2:	e274      	b.n	8010bce <UART_SetConfig+0x7ae>
 80106e4:	2340      	movs	r3, #64	; 0x40
 80106e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106ea:	e270      	b.n	8010bce <UART_SetConfig+0x7ae>
 80106ec:	2380      	movs	r3, #128	; 0x80
 80106ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80106f2:	e26c      	b.n	8010bce <UART_SetConfig+0x7ae>
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	4a1b      	ldr	r2, [pc, #108]	; (8010768 <UART_SetConfig+0x348>)
 80106fa:	4293      	cmp	r3, r2
 80106fc:	d142      	bne.n	8010784 <UART_SetConfig+0x364>
 80106fe:	4b16      	ldr	r3, [pc, #88]	; (8010758 <UART_SetConfig+0x338>)
 8010700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010702:	f003 0307 	and.w	r3, r3, #7
 8010706:	2b05      	cmp	r3, #5
 8010708:	d838      	bhi.n	801077c <UART_SetConfig+0x35c>
 801070a:	a201      	add	r2, pc, #4	; (adr r2, 8010710 <UART_SetConfig+0x2f0>)
 801070c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010710:	08010729 	.word	0x08010729
 8010714:	08010731 	.word	0x08010731
 8010718:	08010739 	.word	0x08010739
 801071c:	08010741 	.word	0x08010741
 8010720:	0801076d 	.word	0x0801076d
 8010724:	08010775 	.word	0x08010775
 8010728:	2300      	movs	r3, #0
 801072a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801072e:	e24e      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010730:	2304      	movs	r3, #4
 8010732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010736:	e24a      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010738:	2308      	movs	r3, #8
 801073a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801073e:	e246      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010740:	2310      	movs	r3, #16
 8010742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010746:	e242      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010748:	cfff69f3 	.word	0xcfff69f3
 801074c:	58000c00 	.word	0x58000c00
 8010750:	11fff4ff 	.word	0x11fff4ff
 8010754:	40011000 	.word	0x40011000
 8010758:	58024400 	.word	0x58024400
 801075c:	40004400 	.word	0x40004400
 8010760:	40004800 	.word	0x40004800
 8010764:	40004c00 	.word	0x40004c00
 8010768:	40005000 	.word	0x40005000
 801076c:	2320      	movs	r3, #32
 801076e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010772:	e22c      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010774:	2340      	movs	r3, #64	; 0x40
 8010776:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801077a:	e228      	b.n	8010bce <UART_SetConfig+0x7ae>
 801077c:	2380      	movs	r3, #128	; 0x80
 801077e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010782:	e224      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	4ab1      	ldr	r2, [pc, #708]	; (8010a50 <UART_SetConfig+0x630>)
 801078a:	4293      	cmp	r3, r2
 801078c:	d176      	bne.n	801087c <UART_SetConfig+0x45c>
 801078e:	4bb1      	ldr	r3, [pc, #708]	; (8010a54 <UART_SetConfig+0x634>)
 8010790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010792:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010796:	2b28      	cmp	r3, #40	; 0x28
 8010798:	d86c      	bhi.n	8010874 <UART_SetConfig+0x454>
 801079a:	a201      	add	r2, pc, #4	; (adr r2, 80107a0 <UART_SetConfig+0x380>)
 801079c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107a0:	08010845 	.word	0x08010845
 80107a4:	08010875 	.word	0x08010875
 80107a8:	08010875 	.word	0x08010875
 80107ac:	08010875 	.word	0x08010875
 80107b0:	08010875 	.word	0x08010875
 80107b4:	08010875 	.word	0x08010875
 80107b8:	08010875 	.word	0x08010875
 80107bc:	08010875 	.word	0x08010875
 80107c0:	0801084d 	.word	0x0801084d
 80107c4:	08010875 	.word	0x08010875
 80107c8:	08010875 	.word	0x08010875
 80107cc:	08010875 	.word	0x08010875
 80107d0:	08010875 	.word	0x08010875
 80107d4:	08010875 	.word	0x08010875
 80107d8:	08010875 	.word	0x08010875
 80107dc:	08010875 	.word	0x08010875
 80107e0:	08010855 	.word	0x08010855
 80107e4:	08010875 	.word	0x08010875
 80107e8:	08010875 	.word	0x08010875
 80107ec:	08010875 	.word	0x08010875
 80107f0:	08010875 	.word	0x08010875
 80107f4:	08010875 	.word	0x08010875
 80107f8:	08010875 	.word	0x08010875
 80107fc:	08010875 	.word	0x08010875
 8010800:	0801085d 	.word	0x0801085d
 8010804:	08010875 	.word	0x08010875
 8010808:	08010875 	.word	0x08010875
 801080c:	08010875 	.word	0x08010875
 8010810:	08010875 	.word	0x08010875
 8010814:	08010875 	.word	0x08010875
 8010818:	08010875 	.word	0x08010875
 801081c:	08010875 	.word	0x08010875
 8010820:	08010865 	.word	0x08010865
 8010824:	08010875 	.word	0x08010875
 8010828:	08010875 	.word	0x08010875
 801082c:	08010875 	.word	0x08010875
 8010830:	08010875 	.word	0x08010875
 8010834:	08010875 	.word	0x08010875
 8010838:	08010875 	.word	0x08010875
 801083c:	08010875 	.word	0x08010875
 8010840:	0801086d 	.word	0x0801086d
 8010844:	2301      	movs	r3, #1
 8010846:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801084a:	e1c0      	b.n	8010bce <UART_SetConfig+0x7ae>
 801084c:	2304      	movs	r3, #4
 801084e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010852:	e1bc      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010854:	2308      	movs	r3, #8
 8010856:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801085a:	e1b8      	b.n	8010bce <UART_SetConfig+0x7ae>
 801085c:	2310      	movs	r3, #16
 801085e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010862:	e1b4      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010864:	2320      	movs	r3, #32
 8010866:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801086a:	e1b0      	b.n	8010bce <UART_SetConfig+0x7ae>
 801086c:	2340      	movs	r3, #64	; 0x40
 801086e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010872:	e1ac      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010874:	2380      	movs	r3, #128	; 0x80
 8010876:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801087a:	e1a8      	b.n	8010bce <UART_SetConfig+0x7ae>
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	4a75      	ldr	r2, [pc, #468]	; (8010a58 <UART_SetConfig+0x638>)
 8010882:	4293      	cmp	r3, r2
 8010884:	d130      	bne.n	80108e8 <UART_SetConfig+0x4c8>
 8010886:	4b73      	ldr	r3, [pc, #460]	; (8010a54 <UART_SetConfig+0x634>)
 8010888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801088a:	f003 0307 	and.w	r3, r3, #7
 801088e:	2b05      	cmp	r3, #5
 8010890:	d826      	bhi.n	80108e0 <UART_SetConfig+0x4c0>
 8010892:	a201      	add	r2, pc, #4	; (adr r2, 8010898 <UART_SetConfig+0x478>)
 8010894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010898:	080108b1 	.word	0x080108b1
 801089c:	080108b9 	.word	0x080108b9
 80108a0:	080108c1 	.word	0x080108c1
 80108a4:	080108c9 	.word	0x080108c9
 80108a8:	080108d1 	.word	0x080108d1
 80108ac:	080108d9 	.word	0x080108d9
 80108b0:	2300      	movs	r3, #0
 80108b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108b6:	e18a      	b.n	8010bce <UART_SetConfig+0x7ae>
 80108b8:	2304      	movs	r3, #4
 80108ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108be:	e186      	b.n	8010bce <UART_SetConfig+0x7ae>
 80108c0:	2308      	movs	r3, #8
 80108c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108c6:	e182      	b.n	8010bce <UART_SetConfig+0x7ae>
 80108c8:	2310      	movs	r3, #16
 80108ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ce:	e17e      	b.n	8010bce <UART_SetConfig+0x7ae>
 80108d0:	2320      	movs	r3, #32
 80108d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108d6:	e17a      	b.n	8010bce <UART_SetConfig+0x7ae>
 80108d8:	2340      	movs	r3, #64	; 0x40
 80108da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108de:	e176      	b.n	8010bce <UART_SetConfig+0x7ae>
 80108e0:	2380      	movs	r3, #128	; 0x80
 80108e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108e6:	e172      	b.n	8010bce <UART_SetConfig+0x7ae>
 80108e8:	697b      	ldr	r3, [r7, #20]
 80108ea:	681b      	ldr	r3, [r3, #0]
 80108ec:	4a5b      	ldr	r2, [pc, #364]	; (8010a5c <UART_SetConfig+0x63c>)
 80108ee:	4293      	cmp	r3, r2
 80108f0:	d130      	bne.n	8010954 <UART_SetConfig+0x534>
 80108f2:	4b58      	ldr	r3, [pc, #352]	; (8010a54 <UART_SetConfig+0x634>)
 80108f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108f6:	f003 0307 	and.w	r3, r3, #7
 80108fa:	2b05      	cmp	r3, #5
 80108fc:	d826      	bhi.n	801094c <UART_SetConfig+0x52c>
 80108fe:	a201      	add	r2, pc, #4	; (adr r2, 8010904 <UART_SetConfig+0x4e4>)
 8010900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010904:	0801091d 	.word	0x0801091d
 8010908:	08010925 	.word	0x08010925
 801090c:	0801092d 	.word	0x0801092d
 8010910:	08010935 	.word	0x08010935
 8010914:	0801093d 	.word	0x0801093d
 8010918:	08010945 	.word	0x08010945
 801091c:	2300      	movs	r3, #0
 801091e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010922:	e154      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010924:	2304      	movs	r3, #4
 8010926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801092a:	e150      	b.n	8010bce <UART_SetConfig+0x7ae>
 801092c:	2308      	movs	r3, #8
 801092e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010932:	e14c      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010934:	2310      	movs	r3, #16
 8010936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801093a:	e148      	b.n	8010bce <UART_SetConfig+0x7ae>
 801093c:	2320      	movs	r3, #32
 801093e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010942:	e144      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010944:	2340      	movs	r3, #64	; 0x40
 8010946:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801094a:	e140      	b.n	8010bce <UART_SetConfig+0x7ae>
 801094c:	2380      	movs	r3, #128	; 0x80
 801094e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010952:	e13c      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	4a41      	ldr	r2, [pc, #260]	; (8010a60 <UART_SetConfig+0x640>)
 801095a:	4293      	cmp	r3, r2
 801095c:	f040 8082 	bne.w	8010a64 <UART_SetConfig+0x644>
 8010960:	4b3c      	ldr	r3, [pc, #240]	; (8010a54 <UART_SetConfig+0x634>)
 8010962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010964:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010968:	2b28      	cmp	r3, #40	; 0x28
 801096a:	d86d      	bhi.n	8010a48 <UART_SetConfig+0x628>
 801096c:	a201      	add	r2, pc, #4	; (adr r2, 8010974 <UART_SetConfig+0x554>)
 801096e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010972:	bf00      	nop
 8010974:	08010a19 	.word	0x08010a19
 8010978:	08010a49 	.word	0x08010a49
 801097c:	08010a49 	.word	0x08010a49
 8010980:	08010a49 	.word	0x08010a49
 8010984:	08010a49 	.word	0x08010a49
 8010988:	08010a49 	.word	0x08010a49
 801098c:	08010a49 	.word	0x08010a49
 8010990:	08010a49 	.word	0x08010a49
 8010994:	08010a21 	.word	0x08010a21
 8010998:	08010a49 	.word	0x08010a49
 801099c:	08010a49 	.word	0x08010a49
 80109a0:	08010a49 	.word	0x08010a49
 80109a4:	08010a49 	.word	0x08010a49
 80109a8:	08010a49 	.word	0x08010a49
 80109ac:	08010a49 	.word	0x08010a49
 80109b0:	08010a49 	.word	0x08010a49
 80109b4:	08010a29 	.word	0x08010a29
 80109b8:	08010a49 	.word	0x08010a49
 80109bc:	08010a49 	.word	0x08010a49
 80109c0:	08010a49 	.word	0x08010a49
 80109c4:	08010a49 	.word	0x08010a49
 80109c8:	08010a49 	.word	0x08010a49
 80109cc:	08010a49 	.word	0x08010a49
 80109d0:	08010a49 	.word	0x08010a49
 80109d4:	08010a31 	.word	0x08010a31
 80109d8:	08010a49 	.word	0x08010a49
 80109dc:	08010a49 	.word	0x08010a49
 80109e0:	08010a49 	.word	0x08010a49
 80109e4:	08010a49 	.word	0x08010a49
 80109e8:	08010a49 	.word	0x08010a49
 80109ec:	08010a49 	.word	0x08010a49
 80109f0:	08010a49 	.word	0x08010a49
 80109f4:	08010a39 	.word	0x08010a39
 80109f8:	08010a49 	.word	0x08010a49
 80109fc:	08010a49 	.word	0x08010a49
 8010a00:	08010a49 	.word	0x08010a49
 8010a04:	08010a49 	.word	0x08010a49
 8010a08:	08010a49 	.word	0x08010a49
 8010a0c:	08010a49 	.word	0x08010a49
 8010a10:	08010a49 	.word	0x08010a49
 8010a14:	08010a41 	.word	0x08010a41
 8010a18:	2301      	movs	r3, #1
 8010a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a1e:	e0d6      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010a20:	2304      	movs	r3, #4
 8010a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a26:	e0d2      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010a28:	2308      	movs	r3, #8
 8010a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a2e:	e0ce      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010a30:	2310      	movs	r3, #16
 8010a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a36:	e0ca      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010a38:	2320      	movs	r3, #32
 8010a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a3e:	e0c6      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010a40:	2340      	movs	r3, #64	; 0x40
 8010a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a46:	e0c2      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010a48:	2380      	movs	r3, #128	; 0x80
 8010a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a4e:	e0be      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010a50:	40011400 	.word	0x40011400
 8010a54:	58024400 	.word	0x58024400
 8010a58:	40007800 	.word	0x40007800
 8010a5c:	40007c00 	.word	0x40007c00
 8010a60:	40011800 	.word	0x40011800
 8010a64:	697b      	ldr	r3, [r7, #20]
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	4aad      	ldr	r2, [pc, #692]	; (8010d20 <UART_SetConfig+0x900>)
 8010a6a:	4293      	cmp	r3, r2
 8010a6c:	d176      	bne.n	8010b5c <UART_SetConfig+0x73c>
 8010a6e:	4bad      	ldr	r3, [pc, #692]	; (8010d24 <UART_SetConfig+0x904>)
 8010a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010a76:	2b28      	cmp	r3, #40	; 0x28
 8010a78:	d86c      	bhi.n	8010b54 <UART_SetConfig+0x734>
 8010a7a:	a201      	add	r2, pc, #4	; (adr r2, 8010a80 <UART_SetConfig+0x660>)
 8010a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a80:	08010b25 	.word	0x08010b25
 8010a84:	08010b55 	.word	0x08010b55
 8010a88:	08010b55 	.word	0x08010b55
 8010a8c:	08010b55 	.word	0x08010b55
 8010a90:	08010b55 	.word	0x08010b55
 8010a94:	08010b55 	.word	0x08010b55
 8010a98:	08010b55 	.word	0x08010b55
 8010a9c:	08010b55 	.word	0x08010b55
 8010aa0:	08010b2d 	.word	0x08010b2d
 8010aa4:	08010b55 	.word	0x08010b55
 8010aa8:	08010b55 	.word	0x08010b55
 8010aac:	08010b55 	.word	0x08010b55
 8010ab0:	08010b55 	.word	0x08010b55
 8010ab4:	08010b55 	.word	0x08010b55
 8010ab8:	08010b55 	.word	0x08010b55
 8010abc:	08010b55 	.word	0x08010b55
 8010ac0:	08010b35 	.word	0x08010b35
 8010ac4:	08010b55 	.word	0x08010b55
 8010ac8:	08010b55 	.word	0x08010b55
 8010acc:	08010b55 	.word	0x08010b55
 8010ad0:	08010b55 	.word	0x08010b55
 8010ad4:	08010b55 	.word	0x08010b55
 8010ad8:	08010b55 	.word	0x08010b55
 8010adc:	08010b55 	.word	0x08010b55
 8010ae0:	08010b3d 	.word	0x08010b3d
 8010ae4:	08010b55 	.word	0x08010b55
 8010ae8:	08010b55 	.word	0x08010b55
 8010aec:	08010b55 	.word	0x08010b55
 8010af0:	08010b55 	.word	0x08010b55
 8010af4:	08010b55 	.word	0x08010b55
 8010af8:	08010b55 	.word	0x08010b55
 8010afc:	08010b55 	.word	0x08010b55
 8010b00:	08010b45 	.word	0x08010b45
 8010b04:	08010b55 	.word	0x08010b55
 8010b08:	08010b55 	.word	0x08010b55
 8010b0c:	08010b55 	.word	0x08010b55
 8010b10:	08010b55 	.word	0x08010b55
 8010b14:	08010b55 	.word	0x08010b55
 8010b18:	08010b55 	.word	0x08010b55
 8010b1c:	08010b55 	.word	0x08010b55
 8010b20:	08010b4d 	.word	0x08010b4d
 8010b24:	2301      	movs	r3, #1
 8010b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b2a:	e050      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010b2c:	2304      	movs	r3, #4
 8010b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b32:	e04c      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010b34:	2308      	movs	r3, #8
 8010b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b3a:	e048      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010b3c:	2310      	movs	r3, #16
 8010b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b42:	e044      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010b44:	2320      	movs	r3, #32
 8010b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b4a:	e040      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010b4c:	2340      	movs	r3, #64	; 0x40
 8010b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b52:	e03c      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010b54:	2380      	movs	r3, #128	; 0x80
 8010b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b5a:	e038      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010b5c:	697b      	ldr	r3, [r7, #20]
 8010b5e:	681b      	ldr	r3, [r3, #0]
 8010b60:	4a71      	ldr	r2, [pc, #452]	; (8010d28 <UART_SetConfig+0x908>)
 8010b62:	4293      	cmp	r3, r2
 8010b64:	d130      	bne.n	8010bc8 <UART_SetConfig+0x7a8>
 8010b66:	4b6f      	ldr	r3, [pc, #444]	; (8010d24 <UART_SetConfig+0x904>)
 8010b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b6a:	f003 0307 	and.w	r3, r3, #7
 8010b6e:	2b05      	cmp	r3, #5
 8010b70:	d826      	bhi.n	8010bc0 <UART_SetConfig+0x7a0>
 8010b72:	a201      	add	r2, pc, #4	; (adr r2, 8010b78 <UART_SetConfig+0x758>)
 8010b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b78:	08010b91 	.word	0x08010b91
 8010b7c:	08010b99 	.word	0x08010b99
 8010b80:	08010ba1 	.word	0x08010ba1
 8010b84:	08010ba9 	.word	0x08010ba9
 8010b88:	08010bb1 	.word	0x08010bb1
 8010b8c:	08010bb9 	.word	0x08010bb9
 8010b90:	2302      	movs	r3, #2
 8010b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b96:	e01a      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010b98:	2304      	movs	r3, #4
 8010b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b9e:	e016      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010ba0:	2308      	movs	r3, #8
 8010ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ba6:	e012      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010ba8:	2310      	movs	r3, #16
 8010baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bae:	e00e      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010bb0:	2320      	movs	r3, #32
 8010bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bb6:	e00a      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010bb8:	2340      	movs	r3, #64	; 0x40
 8010bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bbe:	e006      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010bc0:	2380      	movs	r3, #128	; 0x80
 8010bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bc6:	e002      	b.n	8010bce <UART_SetConfig+0x7ae>
 8010bc8:	2380      	movs	r3, #128	; 0x80
 8010bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	4a55      	ldr	r2, [pc, #340]	; (8010d28 <UART_SetConfig+0x908>)
 8010bd4:	4293      	cmp	r3, r2
 8010bd6:	f040 80f8 	bne.w	8010dca <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010bda:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010bde:	2b20      	cmp	r3, #32
 8010be0:	dc46      	bgt.n	8010c70 <UART_SetConfig+0x850>
 8010be2:	2b02      	cmp	r3, #2
 8010be4:	db75      	blt.n	8010cd2 <UART_SetConfig+0x8b2>
 8010be6:	3b02      	subs	r3, #2
 8010be8:	2b1e      	cmp	r3, #30
 8010bea:	d872      	bhi.n	8010cd2 <UART_SetConfig+0x8b2>
 8010bec:	a201      	add	r2, pc, #4	; (adr r2, 8010bf4 <UART_SetConfig+0x7d4>)
 8010bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bf2:	bf00      	nop
 8010bf4:	08010c77 	.word	0x08010c77
 8010bf8:	08010cd3 	.word	0x08010cd3
 8010bfc:	08010c7f 	.word	0x08010c7f
 8010c00:	08010cd3 	.word	0x08010cd3
 8010c04:	08010cd3 	.word	0x08010cd3
 8010c08:	08010cd3 	.word	0x08010cd3
 8010c0c:	08010c8f 	.word	0x08010c8f
 8010c10:	08010cd3 	.word	0x08010cd3
 8010c14:	08010cd3 	.word	0x08010cd3
 8010c18:	08010cd3 	.word	0x08010cd3
 8010c1c:	08010cd3 	.word	0x08010cd3
 8010c20:	08010cd3 	.word	0x08010cd3
 8010c24:	08010cd3 	.word	0x08010cd3
 8010c28:	08010cd3 	.word	0x08010cd3
 8010c2c:	08010c9f 	.word	0x08010c9f
 8010c30:	08010cd3 	.word	0x08010cd3
 8010c34:	08010cd3 	.word	0x08010cd3
 8010c38:	08010cd3 	.word	0x08010cd3
 8010c3c:	08010cd3 	.word	0x08010cd3
 8010c40:	08010cd3 	.word	0x08010cd3
 8010c44:	08010cd3 	.word	0x08010cd3
 8010c48:	08010cd3 	.word	0x08010cd3
 8010c4c:	08010cd3 	.word	0x08010cd3
 8010c50:	08010cd3 	.word	0x08010cd3
 8010c54:	08010cd3 	.word	0x08010cd3
 8010c58:	08010cd3 	.word	0x08010cd3
 8010c5c:	08010cd3 	.word	0x08010cd3
 8010c60:	08010cd3 	.word	0x08010cd3
 8010c64:	08010cd3 	.word	0x08010cd3
 8010c68:	08010cd3 	.word	0x08010cd3
 8010c6c:	08010cc5 	.word	0x08010cc5
 8010c70:	2b40      	cmp	r3, #64	; 0x40
 8010c72:	d02a      	beq.n	8010cca <UART_SetConfig+0x8aa>
 8010c74:	e02d      	b.n	8010cd2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010c76:	f7fb fcc5 	bl	800c604 <HAL_RCCEx_GetD3PCLK1Freq>
 8010c7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010c7c:	e02f      	b.n	8010cde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c82:	4618      	mov	r0, r3
 8010c84:	f7fb fcd4 	bl	800c630 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c8c:	e027      	b.n	8010cde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010c8e:	f107 0318 	add.w	r3, r7, #24
 8010c92:	4618      	mov	r0, r3
 8010c94:	f7fb fe20 	bl	800c8d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010c98:	69fb      	ldr	r3, [r7, #28]
 8010c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010c9c:	e01f      	b.n	8010cde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010c9e:	4b21      	ldr	r3, [pc, #132]	; (8010d24 <UART_SetConfig+0x904>)
 8010ca0:	681b      	ldr	r3, [r3, #0]
 8010ca2:	f003 0320 	and.w	r3, r3, #32
 8010ca6:	2b00      	cmp	r3, #0
 8010ca8:	d009      	beq.n	8010cbe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010caa:	4b1e      	ldr	r3, [pc, #120]	; (8010d24 <UART_SetConfig+0x904>)
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	08db      	lsrs	r3, r3, #3
 8010cb0:	f003 0303 	and.w	r3, r3, #3
 8010cb4:	4a1d      	ldr	r2, [pc, #116]	; (8010d2c <UART_SetConfig+0x90c>)
 8010cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8010cba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010cbc:	e00f      	b.n	8010cde <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010cbe:	4b1b      	ldr	r3, [pc, #108]	; (8010d2c <UART_SetConfig+0x90c>)
 8010cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010cc2:	e00c      	b.n	8010cde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010cc4:	4b1a      	ldr	r3, [pc, #104]	; (8010d30 <UART_SetConfig+0x910>)
 8010cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010cc8:	e009      	b.n	8010cde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010cce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010cd0:	e005      	b.n	8010cde <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010cd6:	2301      	movs	r3, #1
 8010cd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010cdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010cde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	f000 81ee 	beq.w	80110c2 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010ce6:	697b      	ldr	r3, [r7, #20]
 8010ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cea:	4a12      	ldr	r2, [pc, #72]	; (8010d34 <UART_SetConfig+0x914>)
 8010cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010cf0:	461a      	mov	r2, r3
 8010cf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010cf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8010cf8:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	685a      	ldr	r2, [r3, #4]
 8010cfe:	4613      	mov	r3, r2
 8010d00:	005b      	lsls	r3, r3, #1
 8010d02:	4413      	add	r3, r2
 8010d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d06:	429a      	cmp	r2, r3
 8010d08:	d305      	bcc.n	8010d16 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	685b      	ldr	r3, [r3, #4]
 8010d0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010d10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010d12:	429a      	cmp	r2, r3
 8010d14:	d910      	bls.n	8010d38 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010d16:	2301      	movs	r3, #1
 8010d18:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010d1c:	e1d1      	b.n	80110c2 <UART_SetConfig+0xca2>
 8010d1e:	bf00      	nop
 8010d20:	40011c00 	.word	0x40011c00
 8010d24:	58024400 	.word	0x58024400
 8010d28:	58000c00 	.word	0x58000c00
 8010d2c:	03d09000 	.word	0x03d09000
 8010d30:	003d0900 	.word	0x003d0900
 8010d34:	0801e030 	.word	0x0801e030
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	60bb      	str	r3, [r7, #8]
 8010d3e:	60fa      	str	r2, [r7, #12]
 8010d40:	697b      	ldr	r3, [r7, #20]
 8010d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d44:	4ac0      	ldr	r2, [pc, #768]	; (8011048 <UART_SetConfig+0xc28>)
 8010d46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010d4a:	b29b      	uxth	r3, r3
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	603b      	str	r3, [r7, #0]
 8010d50:	607a      	str	r2, [r7, #4]
 8010d52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010d5a:	f7ef fced 	bl	8000738 <__aeabi_uldivmod>
 8010d5e:	4602      	mov	r2, r0
 8010d60:	460b      	mov	r3, r1
 8010d62:	4610      	mov	r0, r2
 8010d64:	4619      	mov	r1, r3
 8010d66:	f04f 0200 	mov.w	r2, #0
 8010d6a:	f04f 0300 	mov.w	r3, #0
 8010d6e:	020b      	lsls	r3, r1, #8
 8010d70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010d74:	0202      	lsls	r2, r0, #8
 8010d76:	6979      	ldr	r1, [r7, #20]
 8010d78:	6849      	ldr	r1, [r1, #4]
 8010d7a:	0849      	lsrs	r1, r1, #1
 8010d7c:	2000      	movs	r0, #0
 8010d7e:	460c      	mov	r4, r1
 8010d80:	4605      	mov	r5, r0
 8010d82:	eb12 0804 	adds.w	r8, r2, r4
 8010d86:	eb43 0905 	adc.w	r9, r3, r5
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	685b      	ldr	r3, [r3, #4]
 8010d8e:	2200      	movs	r2, #0
 8010d90:	469a      	mov	sl, r3
 8010d92:	4693      	mov	fp, r2
 8010d94:	4652      	mov	r2, sl
 8010d96:	465b      	mov	r3, fp
 8010d98:	4640      	mov	r0, r8
 8010d9a:	4649      	mov	r1, r9
 8010d9c:	f7ef fccc 	bl	8000738 <__aeabi_uldivmod>
 8010da0:	4602      	mov	r2, r0
 8010da2:	460b      	mov	r3, r1
 8010da4:	4613      	mov	r3, r2
 8010da6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010daa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010dae:	d308      	bcc.n	8010dc2 <UART_SetConfig+0x9a2>
 8010db0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010db2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010db6:	d204      	bcs.n	8010dc2 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010dbe:	60da      	str	r2, [r3, #12]
 8010dc0:	e17f      	b.n	80110c2 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8010dc2:	2301      	movs	r3, #1
 8010dc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010dc8:	e17b      	b.n	80110c2 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010dca:	697b      	ldr	r3, [r7, #20]
 8010dcc:	69db      	ldr	r3, [r3, #28]
 8010dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010dd2:	f040 80bd 	bne.w	8010f50 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8010dd6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010dda:	2b20      	cmp	r3, #32
 8010ddc:	dc48      	bgt.n	8010e70 <UART_SetConfig+0xa50>
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	db7b      	blt.n	8010eda <UART_SetConfig+0xaba>
 8010de2:	2b20      	cmp	r3, #32
 8010de4:	d879      	bhi.n	8010eda <UART_SetConfig+0xaba>
 8010de6:	a201      	add	r2, pc, #4	; (adr r2, 8010dec <UART_SetConfig+0x9cc>)
 8010de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dec:	08010e77 	.word	0x08010e77
 8010df0:	08010e7f 	.word	0x08010e7f
 8010df4:	08010edb 	.word	0x08010edb
 8010df8:	08010edb 	.word	0x08010edb
 8010dfc:	08010e87 	.word	0x08010e87
 8010e00:	08010edb 	.word	0x08010edb
 8010e04:	08010edb 	.word	0x08010edb
 8010e08:	08010edb 	.word	0x08010edb
 8010e0c:	08010e97 	.word	0x08010e97
 8010e10:	08010edb 	.word	0x08010edb
 8010e14:	08010edb 	.word	0x08010edb
 8010e18:	08010edb 	.word	0x08010edb
 8010e1c:	08010edb 	.word	0x08010edb
 8010e20:	08010edb 	.word	0x08010edb
 8010e24:	08010edb 	.word	0x08010edb
 8010e28:	08010edb 	.word	0x08010edb
 8010e2c:	08010ea7 	.word	0x08010ea7
 8010e30:	08010edb 	.word	0x08010edb
 8010e34:	08010edb 	.word	0x08010edb
 8010e38:	08010edb 	.word	0x08010edb
 8010e3c:	08010edb 	.word	0x08010edb
 8010e40:	08010edb 	.word	0x08010edb
 8010e44:	08010edb 	.word	0x08010edb
 8010e48:	08010edb 	.word	0x08010edb
 8010e4c:	08010edb 	.word	0x08010edb
 8010e50:	08010edb 	.word	0x08010edb
 8010e54:	08010edb 	.word	0x08010edb
 8010e58:	08010edb 	.word	0x08010edb
 8010e5c:	08010edb 	.word	0x08010edb
 8010e60:	08010edb 	.word	0x08010edb
 8010e64:	08010edb 	.word	0x08010edb
 8010e68:	08010edb 	.word	0x08010edb
 8010e6c:	08010ecd 	.word	0x08010ecd
 8010e70:	2b40      	cmp	r3, #64	; 0x40
 8010e72:	d02e      	beq.n	8010ed2 <UART_SetConfig+0xab2>
 8010e74:	e031      	b.n	8010eda <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010e76:	f7f9 fd27 	bl	800a8c8 <HAL_RCC_GetPCLK1Freq>
 8010e7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010e7c:	e033      	b.n	8010ee6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010e7e:	f7f9 fd39 	bl	800a8f4 <HAL_RCC_GetPCLK2Freq>
 8010e82:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010e84:	e02f      	b.n	8010ee6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	f7fb fbd0 	bl	800c630 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e94:	e027      	b.n	8010ee6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010e96:	f107 0318 	add.w	r3, r7, #24
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7fb fd1c 	bl	800c8d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010ea0:	69fb      	ldr	r3, [r7, #28]
 8010ea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ea4:	e01f      	b.n	8010ee6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010ea6:	4b69      	ldr	r3, [pc, #420]	; (801104c <UART_SetConfig+0xc2c>)
 8010ea8:	681b      	ldr	r3, [r3, #0]
 8010eaa:	f003 0320 	and.w	r3, r3, #32
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	d009      	beq.n	8010ec6 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010eb2:	4b66      	ldr	r3, [pc, #408]	; (801104c <UART_SetConfig+0xc2c>)
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	08db      	lsrs	r3, r3, #3
 8010eb8:	f003 0303 	and.w	r3, r3, #3
 8010ebc:	4a64      	ldr	r2, [pc, #400]	; (8011050 <UART_SetConfig+0xc30>)
 8010ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8010ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010ec4:	e00f      	b.n	8010ee6 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8010ec6:	4b62      	ldr	r3, [pc, #392]	; (8011050 <UART_SetConfig+0xc30>)
 8010ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010eca:	e00c      	b.n	8010ee6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010ecc:	4b61      	ldr	r3, [pc, #388]	; (8011054 <UART_SetConfig+0xc34>)
 8010ece:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ed0:	e009      	b.n	8010ee6 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010ed8:	e005      	b.n	8010ee6 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8010eda:	2300      	movs	r3, #0
 8010edc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010ede:	2301      	movs	r3, #1
 8010ee0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010ee4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	f000 80ea 	beq.w	80110c2 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010eee:	697b      	ldr	r3, [r7, #20]
 8010ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ef2:	4a55      	ldr	r2, [pc, #340]	; (8011048 <UART_SetConfig+0xc28>)
 8010ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ef8:	461a      	mov	r2, r3
 8010efa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010efc:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f00:	005a      	lsls	r2, r3, #1
 8010f02:	697b      	ldr	r3, [r7, #20]
 8010f04:	685b      	ldr	r3, [r3, #4]
 8010f06:	085b      	lsrs	r3, r3, #1
 8010f08:	441a      	add	r2, r3
 8010f0a:	697b      	ldr	r3, [r7, #20]
 8010f0c:	685b      	ldr	r3, [r3, #4]
 8010f0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f12:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f16:	2b0f      	cmp	r3, #15
 8010f18:	d916      	bls.n	8010f48 <UART_SetConfig+0xb28>
 8010f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f20:	d212      	bcs.n	8010f48 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f24:	b29b      	uxth	r3, r3
 8010f26:	f023 030f 	bic.w	r3, r3, #15
 8010f2a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f2e:	085b      	lsrs	r3, r3, #1
 8010f30:	b29b      	uxth	r3, r3
 8010f32:	f003 0307 	and.w	r3, r3, #7
 8010f36:	b29a      	uxth	r2, r3
 8010f38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010f3a:	4313      	orrs	r3, r2
 8010f3c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010f44:	60da      	str	r2, [r3, #12]
 8010f46:	e0bc      	b.n	80110c2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010f48:	2301      	movs	r3, #1
 8010f4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010f4e:	e0b8      	b.n	80110c2 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010f50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010f54:	2b20      	cmp	r3, #32
 8010f56:	dc4b      	bgt.n	8010ff0 <UART_SetConfig+0xbd0>
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	f2c0 8087 	blt.w	801106c <UART_SetConfig+0xc4c>
 8010f5e:	2b20      	cmp	r3, #32
 8010f60:	f200 8084 	bhi.w	801106c <UART_SetConfig+0xc4c>
 8010f64:	a201      	add	r2, pc, #4	; (adr r2, 8010f6c <UART_SetConfig+0xb4c>)
 8010f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f6a:	bf00      	nop
 8010f6c:	08010ff7 	.word	0x08010ff7
 8010f70:	08010fff 	.word	0x08010fff
 8010f74:	0801106d 	.word	0x0801106d
 8010f78:	0801106d 	.word	0x0801106d
 8010f7c:	08011007 	.word	0x08011007
 8010f80:	0801106d 	.word	0x0801106d
 8010f84:	0801106d 	.word	0x0801106d
 8010f88:	0801106d 	.word	0x0801106d
 8010f8c:	08011017 	.word	0x08011017
 8010f90:	0801106d 	.word	0x0801106d
 8010f94:	0801106d 	.word	0x0801106d
 8010f98:	0801106d 	.word	0x0801106d
 8010f9c:	0801106d 	.word	0x0801106d
 8010fa0:	0801106d 	.word	0x0801106d
 8010fa4:	0801106d 	.word	0x0801106d
 8010fa8:	0801106d 	.word	0x0801106d
 8010fac:	08011027 	.word	0x08011027
 8010fb0:	0801106d 	.word	0x0801106d
 8010fb4:	0801106d 	.word	0x0801106d
 8010fb8:	0801106d 	.word	0x0801106d
 8010fbc:	0801106d 	.word	0x0801106d
 8010fc0:	0801106d 	.word	0x0801106d
 8010fc4:	0801106d 	.word	0x0801106d
 8010fc8:	0801106d 	.word	0x0801106d
 8010fcc:	0801106d 	.word	0x0801106d
 8010fd0:	0801106d 	.word	0x0801106d
 8010fd4:	0801106d 	.word	0x0801106d
 8010fd8:	0801106d 	.word	0x0801106d
 8010fdc:	0801106d 	.word	0x0801106d
 8010fe0:	0801106d 	.word	0x0801106d
 8010fe4:	0801106d 	.word	0x0801106d
 8010fe8:	0801106d 	.word	0x0801106d
 8010fec:	0801105f 	.word	0x0801105f
 8010ff0:	2b40      	cmp	r3, #64	; 0x40
 8010ff2:	d037      	beq.n	8011064 <UART_SetConfig+0xc44>
 8010ff4:	e03a      	b.n	801106c <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010ff6:	f7f9 fc67 	bl	800a8c8 <HAL_RCC_GetPCLK1Freq>
 8010ffa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010ffc:	e03c      	b.n	8011078 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010ffe:	f7f9 fc79 	bl	800a8f4 <HAL_RCC_GetPCLK2Freq>
 8011002:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011004:	e038      	b.n	8011078 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011006:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801100a:	4618      	mov	r0, r3
 801100c:	f7fb fb10 	bl	800c630 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011014:	e030      	b.n	8011078 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011016:	f107 0318 	add.w	r3, r7, #24
 801101a:	4618      	mov	r0, r3
 801101c:	f7fb fc5c 	bl	800c8d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011020:	69fb      	ldr	r3, [r7, #28]
 8011022:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011024:	e028      	b.n	8011078 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011026:	4b09      	ldr	r3, [pc, #36]	; (801104c <UART_SetConfig+0xc2c>)
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	f003 0320 	and.w	r3, r3, #32
 801102e:	2b00      	cmp	r3, #0
 8011030:	d012      	beq.n	8011058 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011032:	4b06      	ldr	r3, [pc, #24]	; (801104c <UART_SetConfig+0xc2c>)
 8011034:	681b      	ldr	r3, [r3, #0]
 8011036:	08db      	lsrs	r3, r3, #3
 8011038:	f003 0303 	and.w	r3, r3, #3
 801103c:	4a04      	ldr	r2, [pc, #16]	; (8011050 <UART_SetConfig+0xc30>)
 801103e:	fa22 f303 	lsr.w	r3, r2, r3
 8011042:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011044:	e018      	b.n	8011078 <UART_SetConfig+0xc58>
 8011046:	bf00      	nop
 8011048:	0801e030 	.word	0x0801e030
 801104c:	58024400 	.word	0x58024400
 8011050:	03d09000 	.word	0x03d09000
 8011054:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011058:	4b24      	ldr	r3, [pc, #144]	; (80110ec <UART_SetConfig+0xccc>)
 801105a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801105c:	e00c      	b.n	8011078 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801105e:	4b24      	ldr	r3, [pc, #144]	; (80110f0 <UART_SetConfig+0xcd0>)
 8011060:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011062:	e009      	b.n	8011078 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011064:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011068:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801106a:	e005      	b.n	8011078 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 801106c:	2300      	movs	r3, #0
 801106e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011070:	2301      	movs	r3, #1
 8011072:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011076:	bf00      	nop
    }

    if (pclk != 0U)
 8011078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801107a:	2b00      	cmp	r3, #0
 801107c:	d021      	beq.n	80110c2 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801107e:	697b      	ldr	r3, [r7, #20]
 8011080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011082:	4a1c      	ldr	r2, [pc, #112]	; (80110f4 <UART_SetConfig+0xcd4>)
 8011084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011088:	461a      	mov	r2, r3
 801108a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801108c:	fbb3 f2f2 	udiv	r2, r3, r2
 8011090:	697b      	ldr	r3, [r7, #20]
 8011092:	685b      	ldr	r3, [r3, #4]
 8011094:	085b      	lsrs	r3, r3, #1
 8011096:	441a      	add	r2, r3
 8011098:	697b      	ldr	r3, [r7, #20]
 801109a:	685b      	ldr	r3, [r3, #4]
 801109c:	fbb2 f3f3 	udiv	r3, r2, r3
 80110a0:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80110a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110a4:	2b0f      	cmp	r3, #15
 80110a6:	d909      	bls.n	80110bc <UART_SetConfig+0xc9c>
 80110a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80110ae:	d205      	bcs.n	80110bc <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80110b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110b2:	b29a      	uxth	r2, r3
 80110b4:	697b      	ldr	r3, [r7, #20]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	60da      	str	r2, [r3, #12]
 80110ba:	e002      	b.n	80110c2 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80110bc:	2301      	movs	r3, #1
 80110be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80110c2:	697b      	ldr	r3, [r7, #20]
 80110c4:	2201      	movs	r2, #1
 80110c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80110ca:	697b      	ldr	r3, [r7, #20]
 80110cc:	2201      	movs	r2, #1
 80110ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80110d2:	697b      	ldr	r3, [r7, #20]
 80110d4:	2200      	movs	r2, #0
 80110d6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80110d8:	697b      	ldr	r3, [r7, #20]
 80110da:	2200      	movs	r2, #0
 80110dc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80110de:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80110e2:	4618      	mov	r0, r3
 80110e4:	3748      	adds	r7, #72	; 0x48
 80110e6:	46bd      	mov	sp, r7
 80110e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80110ec:	03d09000 	.word	0x03d09000
 80110f0:	003d0900 	.word	0x003d0900
 80110f4:	0801e030 	.word	0x0801e030

080110f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80110f8:	b480      	push	{r7}
 80110fa:	b083      	sub	sp, #12
 80110fc:	af00      	add	r7, sp, #0
 80110fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011104:	f003 0301 	and.w	r3, r3, #1
 8011108:	2b00      	cmp	r3, #0
 801110a:	d00a      	beq.n	8011122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	681b      	ldr	r3, [r3, #0]
 8011110:	685b      	ldr	r3, [r3, #4]
 8011112:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	430a      	orrs	r2, r1
 8011120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011126:	f003 0302 	and.w	r3, r3, #2
 801112a:	2b00      	cmp	r3, #0
 801112c:	d00a      	beq.n	8011144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	685b      	ldr	r3, [r3, #4]
 8011134:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	430a      	orrs	r2, r1
 8011142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011148:	f003 0304 	and.w	r3, r3, #4
 801114c:	2b00      	cmp	r3, #0
 801114e:	d00a      	beq.n	8011166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	685b      	ldr	r3, [r3, #4]
 8011156:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	681b      	ldr	r3, [r3, #0]
 8011162:	430a      	orrs	r2, r1
 8011164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801116a:	f003 0308 	and.w	r3, r3, #8
 801116e:	2b00      	cmp	r3, #0
 8011170:	d00a      	beq.n	8011188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	681b      	ldr	r3, [r3, #0]
 8011176:	685b      	ldr	r3, [r3, #4]
 8011178:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	430a      	orrs	r2, r1
 8011186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801118c:	f003 0310 	and.w	r3, r3, #16
 8011190:	2b00      	cmp	r3, #0
 8011192:	d00a      	beq.n	80111aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	689b      	ldr	r3, [r3, #8]
 801119a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	681b      	ldr	r3, [r3, #0]
 80111a6:	430a      	orrs	r2, r1
 80111a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111ae:	f003 0320 	and.w	r3, r3, #32
 80111b2:	2b00      	cmp	r3, #0
 80111b4:	d00a      	beq.n	80111cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	689b      	ldr	r3, [r3, #8]
 80111bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	430a      	orrs	r2, r1
 80111ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d01a      	beq.n	801120e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	685b      	ldr	r3, [r3, #4]
 80111de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	430a      	orrs	r2, r1
 80111ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80111f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80111f6:	d10a      	bne.n	801120e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	685b      	ldr	r3, [r3, #4]
 80111fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	430a      	orrs	r2, r1
 801120c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011216:	2b00      	cmp	r3, #0
 8011218:	d00a      	beq.n	8011230 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	685b      	ldr	r3, [r3, #4]
 8011220:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	681b      	ldr	r3, [r3, #0]
 801122c:	430a      	orrs	r2, r1
 801122e:	605a      	str	r2, [r3, #4]
  }
}
 8011230:	bf00      	nop
 8011232:	370c      	adds	r7, #12
 8011234:	46bd      	mov	sp, r7
 8011236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801123a:	4770      	bx	lr

0801123c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b098      	sub	sp, #96	; 0x60
 8011240:	af02      	add	r7, sp, #8
 8011242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2200      	movs	r2, #0
 8011248:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801124c:	f7f2 f846 	bl	80032dc <HAL_GetTick>
 8011250:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	f003 0308 	and.w	r3, r3, #8
 801125c:	2b08      	cmp	r3, #8
 801125e:	d12f      	bne.n	80112c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011260:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011264:	9300      	str	r3, [sp, #0]
 8011266:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011268:	2200      	movs	r2, #0
 801126a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f000 f88e 	bl	8011390 <UART_WaitOnFlagUntilTimeout>
 8011274:	4603      	mov	r3, r0
 8011276:	2b00      	cmp	r3, #0
 8011278:	d022      	beq.n	80112c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011282:	e853 3f00 	ldrex	r3, [r3]
 8011286:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801128a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801128e:	653b      	str	r3, [r7, #80]	; 0x50
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	461a      	mov	r2, r3
 8011296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011298:	647b      	str	r3, [r7, #68]	; 0x44
 801129a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801129c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801129e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80112a0:	e841 2300 	strex	r3, r2, [r1]
 80112a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80112a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d1e6      	bne.n	801127a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2220      	movs	r2, #32
 80112b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2200      	movs	r2, #0
 80112b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80112bc:	2303      	movs	r3, #3
 80112be:	e063      	b.n	8011388 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	f003 0304 	and.w	r3, r3, #4
 80112ca:	2b04      	cmp	r3, #4
 80112cc:	d149      	bne.n	8011362 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80112ce:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80112d2:	9300      	str	r3, [sp, #0]
 80112d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80112d6:	2200      	movs	r2, #0
 80112d8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f000 f857 	bl	8011390 <UART_WaitOnFlagUntilTimeout>
 80112e2:	4603      	mov	r3, r0
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d03c      	beq.n	8011362 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80112ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112f0:	e853 3f00 	ldrex	r3, [r3]
 80112f4:	623b      	str	r3, [r7, #32]
   return(result);
 80112f6:	6a3b      	ldr	r3, [r7, #32]
 80112f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80112fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	461a      	mov	r2, r3
 8011304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011306:	633b      	str	r3, [r7, #48]	; 0x30
 8011308:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801130a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801130c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801130e:	e841 2300 	strex	r3, r2, [r1]
 8011312:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011316:	2b00      	cmp	r3, #0
 8011318:	d1e6      	bne.n	80112e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	3308      	adds	r3, #8
 8011320:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011322:	693b      	ldr	r3, [r7, #16]
 8011324:	e853 3f00 	ldrex	r3, [r3]
 8011328:	60fb      	str	r3, [r7, #12]
   return(result);
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	f023 0301 	bic.w	r3, r3, #1
 8011330:	64bb      	str	r3, [r7, #72]	; 0x48
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	3308      	adds	r3, #8
 8011338:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801133a:	61fa      	str	r2, [r7, #28]
 801133c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801133e:	69b9      	ldr	r1, [r7, #24]
 8011340:	69fa      	ldr	r2, [r7, #28]
 8011342:	e841 2300 	strex	r3, r2, [r1]
 8011346:	617b      	str	r3, [r7, #20]
   return(result);
 8011348:	697b      	ldr	r3, [r7, #20]
 801134a:	2b00      	cmp	r3, #0
 801134c:	d1e5      	bne.n	801131a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	2220      	movs	r2, #32
 8011352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	2200      	movs	r2, #0
 801135a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801135e:	2303      	movs	r3, #3
 8011360:	e012      	b.n	8011388 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2220      	movs	r2, #32
 8011366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	2220      	movs	r2, #32
 801136e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	2200      	movs	r2, #0
 8011376:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	2200      	movs	r2, #0
 801137c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	2200      	movs	r2, #0
 8011382:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011386:	2300      	movs	r3, #0
}
 8011388:	4618      	mov	r0, r3
 801138a:	3758      	adds	r7, #88	; 0x58
 801138c:	46bd      	mov	sp, r7
 801138e:	bd80      	pop	{r7, pc}

08011390 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b084      	sub	sp, #16
 8011394:	af00      	add	r7, sp, #0
 8011396:	60f8      	str	r0, [r7, #12]
 8011398:	60b9      	str	r1, [r7, #8]
 801139a:	603b      	str	r3, [r7, #0]
 801139c:	4613      	mov	r3, r2
 801139e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80113a0:	e049      	b.n	8011436 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80113a2:	69bb      	ldr	r3, [r7, #24]
 80113a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113a8:	d045      	beq.n	8011436 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80113aa:	f7f1 ff97 	bl	80032dc <HAL_GetTick>
 80113ae:	4602      	mov	r2, r0
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	1ad3      	subs	r3, r2, r3
 80113b4:	69ba      	ldr	r2, [r7, #24]
 80113b6:	429a      	cmp	r2, r3
 80113b8:	d302      	bcc.n	80113c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80113ba:	69bb      	ldr	r3, [r7, #24]
 80113bc:	2b00      	cmp	r3, #0
 80113be:	d101      	bne.n	80113c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80113c0:	2303      	movs	r3, #3
 80113c2:	e048      	b.n	8011456 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	681b      	ldr	r3, [r3, #0]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	f003 0304 	and.w	r3, r3, #4
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d031      	beq.n	8011436 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80113d2:	68fb      	ldr	r3, [r7, #12]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	69db      	ldr	r3, [r3, #28]
 80113d8:	f003 0308 	and.w	r3, r3, #8
 80113dc:	2b08      	cmp	r3, #8
 80113de:	d110      	bne.n	8011402 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	2208      	movs	r2, #8
 80113e6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80113e8:	68f8      	ldr	r0, [r7, #12]
 80113ea:	f000 f839 	bl	8011460 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	2208      	movs	r2, #8
 80113f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	2200      	movs	r2, #0
 80113fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80113fe:	2301      	movs	r3, #1
 8011400:	e029      	b.n	8011456 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	69db      	ldr	r3, [r3, #28]
 8011408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801140c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011410:	d111      	bne.n	8011436 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801141a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801141c:	68f8      	ldr	r0, [r7, #12]
 801141e:	f000 f81f 	bl	8011460 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	2220      	movs	r2, #32
 8011426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	2200      	movs	r2, #0
 801142e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011432:	2303      	movs	r3, #3
 8011434:	e00f      	b.n	8011456 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	681b      	ldr	r3, [r3, #0]
 801143a:	69da      	ldr	r2, [r3, #28]
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	4013      	ands	r3, r2
 8011440:	68ba      	ldr	r2, [r7, #8]
 8011442:	429a      	cmp	r2, r3
 8011444:	bf0c      	ite	eq
 8011446:	2301      	moveq	r3, #1
 8011448:	2300      	movne	r3, #0
 801144a:	b2db      	uxtb	r3, r3
 801144c:	461a      	mov	r2, r3
 801144e:	79fb      	ldrb	r3, [r7, #7]
 8011450:	429a      	cmp	r2, r3
 8011452:	d0a6      	beq.n	80113a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011454:	2300      	movs	r3, #0
}
 8011456:	4618      	mov	r0, r3
 8011458:	3710      	adds	r7, #16
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}
	...

08011460 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011460:	b480      	push	{r7}
 8011462:	b095      	sub	sp, #84	; 0x54
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801146e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011470:	e853 3f00 	ldrex	r3, [r3]
 8011474:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011478:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801147c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	461a      	mov	r2, r3
 8011484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011486:	643b      	str	r3, [r7, #64]	; 0x40
 8011488:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801148a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801148c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801148e:	e841 2300 	strex	r3, r2, [r1]
 8011492:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011496:	2b00      	cmp	r3, #0
 8011498:	d1e6      	bne.n	8011468 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	3308      	adds	r3, #8
 80114a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114a2:	6a3b      	ldr	r3, [r7, #32]
 80114a4:	e853 3f00 	ldrex	r3, [r3]
 80114a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80114aa:	69fa      	ldr	r2, [r7, #28]
 80114ac:	4b1e      	ldr	r3, [pc, #120]	; (8011528 <UART_EndRxTransfer+0xc8>)
 80114ae:	4013      	ands	r3, r2
 80114b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	3308      	adds	r3, #8
 80114b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80114ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80114bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80114c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114c2:	e841 2300 	strex	r3, r2, [r1]
 80114c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80114c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d1e5      	bne.n	801149a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80114ce:	687b      	ldr	r3, [r7, #4]
 80114d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114d2:	2b01      	cmp	r3, #1
 80114d4:	d118      	bne.n	8011508 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114dc:	68fb      	ldr	r3, [r7, #12]
 80114de:	e853 3f00 	ldrex	r3, [r3]
 80114e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	f023 0310 	bic.w	r3, r3, #16
 80114ea:	647b      	str	r3, [r7, #68]	; 0x44
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	461a      	mov	r2, r3
 80114f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114f4:	61bb      	str	r3, [r7, #24]
 80114f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114f8:	6979      	ldr	r1, [r7, #20]
 80114fa:	69ba      	ldr	r2, [r7, #24]
 80114fc:	e841 2300 	strex	r3, r2, [r1]
 8011500:	613b      	str	r3, [r7, #16]
   return(result);
 8011502:	693b      	ldr	r3, [r7, #16]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d1e6      	bne.n	80114d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	2220      	movs	r2, #32
 801150c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	2200      	movs	r2, #0
 8011514:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	2200      	movs	r2, #0
 801151a:	675a      	str	r2, [r3, #116]	; 0x74
}
 801151c:	bf00      	nop
 801151e:	3754      	adds	r7, #84	; 0x54
 8011520:	46bd      	mov	sp, r7
 8011522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011526:	4770      	bx	lr
 8011528:	effffffe 	.word	0xeffffffe

0801152c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801152c:	b480      	push	{r7}
 801152e:	b085      	sub	sp, #20
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801153a:	2b01      	cmp	r3, #1
 801153c:	d101      	bne.n	8011542 <HAL_UARTEx_DisableFifoMode+0x16>
 801153e:	2302      	movs	r3, #2
 8011540:	e027      	b.n	8011592 <HAL_UARTEx_DisableFifoMode+0x66>
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	2201      	movs	r2, #1
 8011546:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2224      	movs	r2, #36	; 0x24
 801154e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	681b      	ldr	r3, [r3, #0]
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	681a      	ldr	r2, [r3, #0]
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	f022 0201 	bic.w	r2, r2, #1
 8011568:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011570:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2200      	movs	r2, #0
 8011576:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	68fa      	ldr	r2, [r7, #12]
 801157e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	2220      	movs	r2, #32
 8011584:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	2200      	movs	r2, #0
 801158c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011590:	2300      	movs	r3, #0
}
 8011592:	4618      	mov	r0, r3
 8011594:	3714      	adds	r7, #20
 8011596:	46bd      	mov	sp, r7
 8011598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801159c:	4770      	bx	lr

0801159e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801159e:	b580      	push	{r7, lr}
 80115a0:	b084      	sub	sp, #16
 80115a2:	af00      	add	r7, sp, #0
 80115a4:	6078      	str	r0, [r7, #4]
 80115a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80115ae:	2b01      	cmp	r3, #1
 80115b0:	d101      	bne.n	80115b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80115b2:	2302      	movs	r3, #2
 80115b4:	e02d      	b.n	8011612 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	2201      	movs	r2, #1
 80115ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	2224      	movs	r2, #36	; 0x24
 80115c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	681a      	ldr	r2, [r3, #0]
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	681b      	ldr	r3, [r3, #0]
 80115d8:	f022 0201 	bic.w	r2, r2, #1
 80115dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	681b      	ldr	r3, [r3, #0]
 80115e2:	689b      	ldr	r3, [r3, #8]
 80115e4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	683a      	ldr	r2, [r7, #0]
 80115ee:	430a      	orrs	r2, r1
 80115f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80115f2:	6878      	ldr	r0, [r7, #4]
 80115f4:	f000 f850 	bl	8011698 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	68fa      	ldr	r2, [r7, #12]
 80115fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	2220      	movs	r2, #32
 8011604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	2200      	movs	r2, #0
 801160c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011610:	2300      	movs	r3, #0
}
 8011612:	4618      	mov	r0, r3
 8011614:	3710      	adds	r7, #16
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}

0801161a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801161a:	b580      	push	{r7, lr}
 801161c:	b084      	sub	sp, #16
 801161e:	af00      	add	r7, sp, #0
 8011620:	6078      	str	r0, [r7, #4]
 8011622:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801162a:	2b01      	cmp	r3, #1
 801162c:	d101      	bne.n	8011632 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801162e:	2302      	movs	r3, #2
 8011630:	e02d      	b.n	801168e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2201      	movs	r2, #1
 8011636:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2224      	movs	r2, #36	; 0x24
 801163e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	681a      	ldr	r2, [r3, #0]
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	f022 0201 	bic.w	r2, r2, #1
 8011658:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	689b      	ldr	r3, [r3, #8]
 8011660:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	683a      	ldr	r2, [r7, #0]
 801166a:	430a      	orrs	r2, r1
 801166c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801166e:	6878      	ldr	r0, [r7, #4]
 8011670:	f000 f812 	bl	8011698 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	68fa      	ldr	r2, [r7, #12]
 801167a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2220      	movs	r2, #32
 8011680:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2200      	movs	r2, #0
 8011688:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801168c:	2300      	movs	r3, #0
}
 801168e:	4618      	mov	r0, r3
 8011690:	3710      	adds	r7, #16
 8011692:	46bd      	mov	sp, r7
 8011694:	bd80      	pop	{r7, pc}
	...

08011698 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011698:	b480      	push	{r7}
 801169a:	b085      	sub	sp, #20
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d108      	bne.n	80116ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	2201      	movs	r2, #1
 80116ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80116b0:	687b      	ldr	r3, [r7, #4]
 80116b2:	2201      	movs	r2, #1
 80116b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80116b8:	e031      	b.n	801171e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80116ba:	2310      	movs	r3, #16
 80116bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80116be:	2310      	movs	r3, #16
 80116c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	689b      	ldr	r3, [r3, #8]
 80116c8:	0e5b      	lsrs	r3, r3, #25
 80116ca:	b2db      	uxtb	r3, r3
 80116cc:	f003 0307 	and.w	r3, r3, #7
 80116d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	689b      	ldr	r3, [r3, #8]
 80116d8:	0f5b      	lsrs	r3, r3, #29
 80116da:	b2db      	uxtb	r3, r3
 80116dc:	f003 0307 	and.w	r3, r3, #7
 80116e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80116e2:	7bbb      	ldrb	r3, [r7, #14]
 80116e4:	7b3a      	ldrb	r2, [r7, #12]
 80116e6:	4911      	ldr	r1, [pc, #68]	; (801172c <UARTEx_SetNbDataToProcess+0x94>)
 80116e8:	5c8a      	ldrb	r2, [r1, r2]
 80116ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80116ee:	7b3a      	ldrb	r2, [r7, #12]
 80116f0:	490f      	ldr	r1, [pc, #60]	; (8011730 <UARTEx_SetNbDataToProcess+0x98>)
 80116f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80116f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80116f8:	b29a      	uxth	r2, r3
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011700:	7bfb      	ldrb	r3, [r7, #15]
 8011702:	7b7a      	ldrb	r2, [r7, #13]
 8011704:	4909      	ldr	r1, [pc, #36]	; (801172c <UARTEx_SetNbDataToProcess+0x94>)
 8011706:	5c8a      	ldrb	r2, [r1, r2]
 8011708:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801170c:	7b7a      	ldrb	r2, [r7, #13]
 801170e:	4908      	ldr	r1, [pc, #32]	; (8011730 <UARTEx_SetNbDataToProcess+0x98>)
 8011710:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011712:	fb93 f3f2 	sdiv	r3, r3, r2
 8011716:	b29a      	uxth	r2, r3
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801171e:	bf00      	nop
 8011720:	3714      	adds	r7, #20
 8011722:	46bd      	mov	sp, r7
 8011724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011728:	4770      	bx	lr
 801172a:	bf00      	nop
 801172c:	0801e048 	.word	0x0801e048
 8011730:	0801e050 	.word	0x0801e050

08011734 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011734:	b084      	sub	sp, #16
 8011736:	b480      	push	{r7}
 8011738:	b085      	sub	sp, #20
 801173a:	af00      	add	r7, sp, #0
 801173c:	6078      	str	r0, [r7, #4]
 801173e:	f107 001c 	add.w	r0, r7, #28
 8011742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011746:	2300      	movs	r3, #0
 8011748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 801174a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 801174c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801174e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011752:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011754:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011756:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 801175a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 801175c:	68fa      	ldr	r2, [r7, #12]
 801175e:	4313      	orrs	r3, r2
 8011760:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	685a      	ldr	r2, [r3, #4]
 8011766:	4b07      	ldr	r3, [pc, #28]	; (8011784 <SDMMC_Init+0x50>)
 8011768:	4013      	ands	r3, r2
 801176a:	68fa      	ldr	r2, [r7, #12]
 801176c:	431a      	orrs	r2, r3
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011772:	2300      	movs	r3, #0
}
 8011774:	4618      	mov	r0, r3
 8011776:	3714      	adds	r7, #20
 8011778:	46bd      	mov	sp, r7
 801177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177e:	b004      	add	sp, #16
 8011780:	4770      	bx	lr
 8011782:	bf00      	nop
 8011784:	ffc02c00 	.word	0xffc02c00

08011788 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011788:	b480      	push	{r7}
 801178a:	b083      	sub	sp, #12
 801178c:	af00      	add	r7, sp, #0
 801178e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011796:	4618      	mov	r0, r3
 8011798:	370c      	adds	r7, #12
 801179a:	46bd      	mov	sp, r7
 801179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117a0:	4770      	bx	lr

080117a2 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80117a2:	b480      	push	{r7}
 80117a4:	b083      	sub	sp, #12
 80117a6:	af00      	add	r7, sp, #0
 80117a8:	6078      	str	r0, [r7, #4]
 80117aa:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	681a      	ldr	r2, [r3, #0]
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80117b6:	2300      	movs	r3, #0
}
 80117b8:	4618      	mov	r0, r3
 80117ba:	370c      	adds	r7, #12
 80117bc:	46bd      	mov	sp, r7
 80117be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117c2:	4770      	bx	lr

080117c4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80117c4:	b480      	push	{r7}
 80117c6:	b083      	sub	sp, #12
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	f043 0203 	orr.w	r2, r3, #3
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80117d8:	2300      	movs	r3, #0
}
 80117da:	4618      	mov	r0, r3
 80117dc:	370c      	adds	r7, #12
 80117de:	46bd      	mov	sp, r7
 80117e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e4:	4770      	bx	lr

080117e6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80117e6:	b480      	push	{r7}
 80117e8:	b083      	sub	sp, #12
 80117ea:	af00      	add	r7, sp, #0
 80117ec:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	f003 0303 	and.w	r3, r3, #3
}
 80117f6:	4618      	mov	r0, r3
 80117f8:	370c      	adds	r7, #12
 80117fa:	46bd      	mov	sp, r7
 80117fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011800:	4770      	bx	lr
	...

08011804 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011804:	b480      	push	{r7}
 8011806:	b085      	sub	sp, #20
 8011808:	af00      	add	r7, sp, #0
 801180a:	6078      	str	r0, [r7, #4]
 801180c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801180e:	2300      	movs	r3, #0
 8011810:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	681a      	ldr	r2, [r3, #0]
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801181a:	683b      	ldr	r3, [r7, #0]
 801181c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801181e:	683b      	ldr	r3, [r7, #0]
 8011820:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011822:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011824:	683b      	ldr	r3, [r7, #0]
 8011826:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011828:	431a      	orrs	r2, r3
                       Command->CPSM);
 801182a:	683b      	ldr	r3, [r7, #0]
 801182c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801182e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011830:	68fa      	ldr	r2, [r7, #12]
 8011832:	4313      	orrs	r3, r2
 8011834:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	68da      	ldr	r2, [r3, #12]
 801183a:	4b06      	ldr	r3, [pc, #24]	; (8011854 <SDMMC_SendCommand+0x50>)
 801183c:	4013      	ands	r3, r2
 801183e:	68fa      	ldr	r2, [r7, #12]
 8011840:	431a      	orrs	r2, r3
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011846:	2300      	movs	r3, #0
}
 8011848:	4618      	mov	r0, r3
 801184a:	3714      	adds	r7, #20
 801184c:	46bd      	mov	sp, r7
 801184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011852:	4770      	bx	lr
 8011854:	fffee0c0 	.word	0xfffee0c0

08011858 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011858:	b480      	push	{r7}
 801185a:	b083      	sub	sp, #12
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	691b      	ldr	r3, [r3, #16]
 8011864:	b2db      	uxtb	r3, r3
}
 8011866:	4618      	mov	r0, r3
 8011868:	370c      	adds	r7, #12
 801186a:	46bd      	mov	sp, r7
 801186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011870:	4770      	bx	lr

08011872 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011872:	b480      	push	{r7}
 8011874:	b085      	sub	sp, #20
 8011876:	af00      	add	r7, sp, #0
 8011878:	6078      	str	r0, [r7, #4]
 801187a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	3314      	adds	r3, #20
 8011880:	461a      	mov	r2, r3
 8011882:	683b      	ldr	r3, [r7, #0]
 8011884:	4413      	add	r3, r2
 8011886:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	681b      	ldr	r3, [r3, #0]
}
 801188c:	4618      	mov	r0, r3
 801188e:	3714      	adds	r7, #20
 8011890:	46bd      	mov	sp, r7
 8011892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011896:	4770      	bx	lr

08011898 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8011898:	b480      	push	{r7}
 801189a:	b085      	sub	sp, #20
 801189c:	af00      	add	r7, sp, #0
 801189e:	6078      	str	r0, [r7, #4]
 80118a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80118a2:	2300      	movs	r3, #0
 80118a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	681a      	ldr	r2, [r3, #0]
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80118ae:	683b      	ldr	r3, [r7, #0]
 80118b0:	685a      	ldr	r2, [r3, #4]
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80118b6:	683b      	ldr	r3, [r7, #0]
 80118b8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80118ba:	683b      	ldr	r3, [r7, #0]
 80118bc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80118be:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80118c0:	683b      	ldr	r3, [r7, #0]
 80118c2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 80118c4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80118ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80118cc:	68fa      	ldr	r2, [r7, #12]
 80118ce:	4313      	orrs	r3, r2
 80118d0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	431a      	orrs	r2, r3
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80118e2:	2300      	movs	r3, #0

}
 80118e4:	4618      	mov	r0, r3
 80118e6:	3714      	adds	r7, #20
 80118e8:	46bd      	mov	sp, r7
 80118ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ee:	4770      	bx	lr

080118f0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80118f0:	b580      	push	{r7, lr}
 80118f2:	b088      	sub	sp, #32
 80118f4:	af00      	add	r7, sp, #0
 80118f6:	6078      	str	r0, [r7, #4]
 80118f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80118fa:	683b      	ldr	r3, [r7, #0]
 80118fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80118fe:	2310      	movs	r3, #16
 8011900:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011906:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011908:	2300      	movs	r3, #0
 801190a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801190c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011910:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011912:	f107 0308 	add.w	r3, r7, #8
 8011916:	4619      	mov	r1, r3
 8011918:	6878      	ldr	r0, [r7, #4]
 801191a:	f7ff ff73 	bl	8011804 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801191e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011922:	2110      	movs	r1, #16
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f000 fa5f 	bl	8011de8 <SDMMC_GetCmdResp1>
 801192a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801192c:	69fb      	ldr	r3, [r7, #28]
}
 801192e:	4618      	mov	r0, r3
 8011930:	3720      	adds	r7, #32
 8011932:	46bd      	mov	sp, r7
 8011934:	bd80      	pop	{r7, pc}

08011936 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011936:	b580      	push	{r7, lr}
 8011938:	b088      	sub	sp, #32
 801193a:	af00      	add	r7, sp, #0
 801193c:	6078      	str	r0, [r7, #4]
 801193e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011940:	683b      	ldr	r3, [r7, #0]
 8011942:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011944:	2311      	movs	r3, #17
 8011946:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011948:	f44f 7380 	mov.w	r3, #256	; 0x100
 801194c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801194e:	2300      	movs	r3, #0
 8011950:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011952:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011956:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011958:	f107 0308 	add.w	r3, r7, #8
 801195c:	4619      	mov	r1, r3
 801195e:	6878      	ldr	r0, [r7, #4]
 8011960:	f7ff ff50 	bl	8011804 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011964:	f241 3288 	movw	r2, #5000	; 0x1388
 8011968:	2111      	movs	r1, #17
 801196a:	6878      	ldr	r0, [r7, #4]
 801196c:	f000 fa3c 	bl	8011de8 <SDMMC_GetCmdResp1>
 8011970:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011972:	69fb      	ldr	r3, [r7, #28]
}
 8011974:	4618      	mov	r0, r3
 8011976:	3720      	adds	r7, #32
 8011978:	46bd      	mov	sp, r7
 801197a:	bd80      	pop	{r7, pc}

0801197c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b088      	sub	sp, #32
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011986:	683b      	ldr	r3, [r7, #0]
 8011988:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 801198a:	2312      	movs	r3, #18
 801198c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801198e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011992:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011994:	2300      	movs	r3, #0
 8011996:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011998:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801199c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801199e:	f107 0308 	add.w	r3, r7, #8
 80119a2:	4619      	mov	r1, r3
 80119a4:	6878      	ldr	r0, [r7, #4]
 80119a6:	f7ff ff2d 	bl	8011804 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80119aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80119ae:	2112      	movs	r1, #18
 80119b0:	6878      	ldr	r0, [r7, #4]
 80119b2:	f000 fa19 	bl	8011de8 <SDMMC_GetCmdResp1>
 80119b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80119b8:	69fb      	ldr	r3, [r7, #28]
}
 80119ba:	4618      	mov	r0, r3
 80119bc:	3720      	adds	r7, #32
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}

080119c2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80119c2:	b580      	push	{r7, lr}
 80119c4:	b088      	sub	sp, #32
 80119c6:	af00      	add	r7, sp, #0
 80119c8:	6078      	str	r0, [r7, #4]
 80119ca:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80119cc:	683b      	ldr	r3, [r7, #0]
 80119ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80119d0:	2318      	movs	r3, #24
 80119d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80119d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80119d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80119da:	2300      	movs	r3, #0
 80119dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80119de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80119e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80119e4:	f107 0308 	add.w	r3, r7, #8
 80119e8:	4619      	mov	r1, r3
 80119ea:	6878      	ldr	r0, [r7, #4]
 80119ec:	f7ff ff0a 	bl	8011804 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80119f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80119f4:	2118      	movs	r1, #24
 80119f6:	6878      	ldr	r0, [r7, #4]
 80119f8:	f000 f9f6 	bl	8011de8 <SDMMC_GetCmdResp1>
 80119fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80119fe:	69fb      	ldr	r3, [r7, #28]
}
 8011a00:	4618      	mov	r0, r3
 8011a02:	3720      	adds	r7, #32
 8011a04:	46bd      	mov	sp, r7
 8011a06:	bd80      	pop	{r7, pc}

08011a08 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b088      	sub	sp, #32
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011a12:	683b      	ldr	r3, [r7, #0]
 8011a14:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011a16:	2319      	movs	r3, #25
 8011a18:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011a1e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a20:	2300      	movs	r3, #0
 8011a22:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a28:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a2a:	f107 0308 	add.w	r3, r7, #8
 8011a2e:	4619      	mov	r1, r3
 8011a30:	6878      	ldr	r0, [r7, #4]
 8011a32:	f7ff fee7 	bl	8011804 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a3a:	2119      	movs	r1, #25
 8011a3c:	6878      	ldr	r0, [r7, #4]
 8011a3e:	f000 f9d3 	bl	8011de8 <SDMMC_GetCmdResp1>
 8011a42:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a44:	69fb      	ldr	r3, [r7, #28]
}
 8011a46:	4618      	mov	r0, r3
 8011a48:	3720      	adds	r7, #32
 8011a4a:	46bd      	mov	sp, r7
 8011a4c:	bd80      	pop	{r7, pc}
	...

08011a50 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b088      	sub	sp, #32
 8011a54:	af00      	add	r7, sp, #0
 8011a56:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011a58:	2300      	movs	r3, #0
 8011a5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011a5c:	230c      	movs	r3, #12
 8011a5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011a64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a66:	2300      	movs	r3, #0
 8011a68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a6e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	68db      	ldr	r3, [r3, #12]
 8011a74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	68db      	ldr	r3, [r3, #12]
 8011a80:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a88:	f107 0308 	add.w	r3, r7, #8
 8011a8c:	4619      	mov	r1, r3
 8011a8e:	6878      	ldr	r0, [r7, #4]
 8011a90:	f7ff feb8 	bl	8011804 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011a94:	4a0b      	ldr	r2, [pc, #44]	; (8011ac4 <SDMMC_CmdStopTransfer+0x74>)
 8011a96:	210c      	movs	r1, #12
 8011a98:	6878      	ldr	r0, [r7, #4]
 8011a9a:	f000 f9a5 	bl	8011de8 <SDMMC_GetCmdResp1>
 8011a9e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011aa0:	687b      	ldr	r3, [r7, #4]
 8011aa2:	68db      	ldr	r3, [r3, #12]
 8011aa4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011aac:	69fb      	ldr	r3, [r7, #28]
 8011aae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011ab2:	d101      	bne.n	8011ab8 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8011ab8:	69fb      	ldr	r3, [r7, #28]
}
 8011aba:	4618      	mov	r0, r3
 8011abc:	3720      	adds	r7, #32
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bd80      	pop	{r7, pc}
 8011ac2:	bf00      	nop
 8011ac4:	05f5e100 	.word	0x05f5e100

08011ac8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8011ac8:	b580      	push	{r7, lr}
 8011aca:	b088      	sub	sp, #32
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
 8011ad0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011ad2:	683b      	ldr	r3, [r7, #0]
 8011ad4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011ad6:	2307      	movs	r3, #7
 8011ad8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ada:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ade:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ae0:	2300      	movs	r3, #0
 8011ae2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ae4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ae8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011aea:	f107 0308 	add.w	r3, r7, #8
 8011aee:	4619      	mov	r1, r3
 8011af0:	6878      	ldr	r0, [r7, #4]
 8011af2:	f7ff fe87 	bl	8011804 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8011afa:	2107      	movs	r1, #7
 8011afc:	6878      	ldr	r0, [r7, #4]
 8011afe:	f000 f973 	bl	8011de8 <SDMMC_GetCmdResp1>
 8011b02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b04:	69fb      	ldr	r3, [r7, #28]
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3720      	adds	r7, #32
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	bd80      	pop	{r7, pc}

08011b0e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011b0e:	b580      	push	{r7, lr}
 8011b10:	b088      	sub	sp, #32
 8011b12:	af00      	add	r7, sp, #0
 8011b14:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011b16:	2300      	movs	r3, #0
 8011b18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011b1a:	2300      	movs	r3, #0
 8011b1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b22:	2300      	movs	r3, #0
 8011b24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b2c:	f107 0308 	add.w	r3, r7, #8
 8011b30:	4619      	mov	r1, r3
 8011b32:	6878      	ldr	r0, [r7, #4]
 8011b34:	f7ff fe66 	bl	8011804 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011b38:	6878      	ldr	r0, [r7, #4]
 8011b3a:	f000 fb97 	bl	801226c <SDMMC_GetCmdError>
 8011b3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b40:	69fb      	ldr	r3, [r7, #28]
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	3720      	adds	r7, #32
 8011b46:	46bd      	mov	sp, r7
 8011b48:	bd80      	pop	{r7, pc}

08011b4a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011b4a:	b580      	push	{r7, lr}
 8011b4c:	b088      	sub	sp, #32
 8011b4e:	af00      	add	r7, sp, #0
 8011b50:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011b52:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011b56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011b58:	2308      	movs	r3, #8
 8011b5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011b5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b62:	2300      	movs	r3, #0
 8011b64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b6c:	f107 0308 	add.w	r3, r7, #8
 8011b70:	4619      	mov	r1, r3
 8011b72:	6878      	ldr	r0, [r7, #4]
 8011b74:	f7ff fe46 	bl	8011804 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f000 fb29 	bl	80121d0 <SDMMC_GetCmdResp7>
 8011b7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b80:	69fb      	ldr	r3, [r7, #28]
}
 8011b82:	4618      	mov	r0, r3
 8011b84:	3720      	adds	r7, #32
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bd80      	pop	{r7, pc}

08011b8a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011b8a:	b580      	push	{r7, lr}
 8011b8c:	b088      	sub	sp, #32
 8011b8e:	af00      	add	r7, sp, #0
 8011b90:	6078      	str	r0, [r7, #4]
 8011b92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011b94:	683b      	ldr	r3, [r7, #0]
 8011b96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011b98:	2337      	movs	r3, #55	; 0x37
 8011b9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011b9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ba2:	2300      	movs	r3, #0
 8011ba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ba6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011baa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011bac:	f107 0308 	add.w	r3, r7, #8
 8011bb0:	4619      	mov	r1, r3
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	f7ff fe26 	bl	8011804 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011bbc:	2137      	movs	r1, #55	; 0x37
 8011bbe:	6878      	ldr	r0, [r7, #4]
 8011bc0:	f000 f912 	bl	8011de8 <SDMMC_GetCmdResp1>
 8011bc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011bc6:	69fb      	ldr	r3, [r7, #28]
}
 8011bc8:	4618      	mov	r0, r3
 8011bca:	3720      	adds	r7, #32
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}

08011bd0 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011bd0:	b580      	push	{r7, lr}
 8011bd2:	b088      	sub	sp, #32
 8011bd4:	af00      	add	r7, sp, #0
 8011bd6:	6078      	str	r0, [r7, #4]
 8011bd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011bda:	683b      	ldr	r3, [r7, #0]
 8011bdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011bde:	2329      	movs	r3, #41	; 0x29
 8011be0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011be2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011be6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011be8:	2300      	movs	r3, #0
 8011bea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011bf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011bf2:	f107 0308 	add.w	r3, r7, #8
 8011bf6:	4619      	mov	r1, r3
 8011bf8:	6878      	ldr	r0, [r7, #4]
 8011bfa:	f7ff fe03 	bl	8011804 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011bfe:	6878      	ldr	r0, [r7, #4]
 8011c00:	f000 fa2e 	bl	8012060 <SDMMC_GetCmdResp3>
 8011c04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c06:	69fb      	ldr	r3, [r7, #28]
}
 8011c08:	4618      	mov	r0, r3
 8011c0a:	3720      	adds	r7, #32
 8011c0c:	46bd      	mov	sp, r7
 8011c0e:	bd80      	pop	{r7, pc}

08011c10 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b088      	sub	sp, #32
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
 8011c18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011c1a:	683b      	ldr	r3, [r7, #0]
 8011c1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011c1e:	2306      	movs	r3, #6
 8011c20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c28:	2300      	movs	r3, #0
 8011c2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c32:	f107 0308 	add.w	r3, r7, #8
 8011c36:	4619      	mov	r1, r3
 8011c38:	6878      	ldr	r0, [r7, #4]
 8011c3a:	f7ff fde3 	bl	8011804 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c42:	2106      	movs	r1, #6
 8011c44:	6878      	ldr	r0, [r7, #4]
 8011c46:	f000 f8cf 	bl	8011de8 <SDMMC_GetCmdResp1>
 8011c4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c4c:	69fb      	ldr	r3, [r7, #28]
}
 8011c4e:	4618      	mov	r0, r3
 8011c50:	3720      	adds	r7, #32
 8011c52:	46bd      	mov	sp, r7
 8011c54:	bd80      	pop	{r7, pc}

08011c56 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011c56:	b580      	push	{r7, lr}
 8011c58:	b088      	sub	sp, #32
 8011c5a:	af00      	add	r7, sp, #0
 8011c5c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011c5e:	2300      	movs	r3, #0
 8011c60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011c62:	2333      	movs	r3, #51	; 0x33
 8011c64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c76:	f107 0308 	add.w	r3, r7, #8
 8011c7a:	4619      	mov	r1, r3
 8011c7c:	6878      	ldr	r0, [r7, #4]
 8011c7e:	f7ff fdc1 	bl	8011804 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8011c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c86:	2133      	movs	r1, #51	; 0x33
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	f000 f8ad 	bl	8011de8 <SDMMC_GetCmdResp1>
 8011c8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c90:	69fb      	ldr	r3, [r7, #28]
}
 8011c92:	4618      	mov	r0, r3
 8011c94:	3720      	adds	r7, #32
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bd80      	pop	{r7, pc}

08011c9a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011c9a:	b580      	push	{r7, lr}
 8011c9c:	b088      	sub	sp, #32
 8011c9e:	af00      	add	r7, sp, #0
 8011ca0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011ca6:	2302      	movs	r3, #2
 8011ca8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011caa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011cae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011cb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011cb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011cba:	f107 0308 	add.w	r3, r7, #8
 8011cbe:	4619      	mov	r1, r3
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f7ff fd9f 	bl	8011804 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011cc6:	6878      	ldr	r0, [r7, #4]
 8011cc8:	f000 f980 	bl	8011fcc <SDMMC_GetCmdResp2>
 8011ccc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011cce:	69fb      	ldr	r3, [r7, #28]
}
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	3720      	adds	r7, #32
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}

08011cd8 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b088      	sub	sp, #32
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011ce6:	2309      	movs	r3, #9
 8011ce8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011cea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011cee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011cf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011cf8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011cfa:	f107 0308 	add.w	r3, r7, #8
 8011cfe:	4619      	mov	r1, r3
 8011d00:	6878      	ldr	r0, [r7, #4]
 8011d02:	f7ff fd7f 	bl	8011804 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f000 f960 	bl	8011fcc <SDMMC_GetCmdResp2>
 8011d0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d0e:	69fb      	ldr	r3, [r7, #28]
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3720      	adds	r7, #32
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}

08011d18 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b088      	sub	sp, #32
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
 8011d20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011d22:	2300      	movs	r3, #0
 8011d24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011d26:	2303      	movs	r3, #3
 8011d28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d30:	2300      	movs	r3, #0
 8011d32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d3a:	f107 0308 	add.w	r3, r7, #8
 8011d3e:	4619      	mov	r1, r3
 8011d40:	6878      	ldr	r0, [r7, #4]
 8011d42:	f7ff fd5f 	bl	8011804 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011d46:	683a      	ldr	r2, [r7, #0]
 8011d48:	2103      	movs	r1, #3
 8011d4a:	6878      	ldr	r0, [r7, #4]
 8011d4c:	f000 f9c8 	bl	80120e0 <SDMMC_GetCmdResp6>
 8011d50:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d52:	69fb      	ldr	r3, [r7, #28]
}
 8011d54:	4618      	mov	r0, r3
 8011d56:	3720      	adds	r7, #32
 8011d58:	46bd      	mov	sp, r7
 8011d5a:	bd80      	pop	{r7, pc}

08011d5c <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011d5c:	b580      	push	{r7, lr}
 8011d5e:	b088      	sub	sp, #32
 8011d60:	af00      	add	r7, sp, #0
 8011d62:	6078      	str	r0, [r7, #4]
 8011d64:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011d66:	683b      	ldr	r3, [r7, #0]
 8011d68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011d6a:	230d      	movs	r3, #13
 8011d6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d74:	2300      	movs	r3, #0
 8011d76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d7e:	f107 0308 	add.w	r3, r7, #8
 8011d82:	4619      	mov	r1, r3
 8011d84:	6878      	ldr	r0, [r7, #4]
 8011d86:	f7ff fd3d 	bl	8011804 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d8e:	210d      	movs	r1, #13
 8011d90:	6878      	ldr	r0, [r7, #4]
 8011d92:	f000 f829 	bl	8011de8 <SDMMC_GetCmdResp1>
 8011d96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d98:	69fb      	ldr	r3, [r7, #28]
}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3720      	adds	r7, #32
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bd80      	pop	{r7, pc}

08011da2 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8011da2:	b580      	push	{r7, lr}
 8011da4:	b088      	sub	sp, #32
 8011da6:	af00      	add	r7, sp, #0
 8011da8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011daa:	2300      	movs	r3, #0
 8011dac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8011dae:	230d      	movs	r3, #13
 8011db0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011db2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011db6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011db8:	2300      	movs	r3, #0
 8011dba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011dc0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011dc2:	f107 0308 	add.w	r3, r7, #8
 8011dc6:	4619      	mov	r1, r3
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f7ff fd1b 	bl	8011804 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8011dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8011dd2:	210d      	movs	r1, #13
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f000 f807 	bl	8011de8 <SDMMC_GetCmdResp1>
 8011dda:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ddc:	69fb      	ldr	r3, [r7, #28]
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	3720      	adds	r7, #32
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}
	...

08011de8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b088      	sub	sp, #32
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	60f8      	str	r0, [r7, #12]
 8011df0:	460b      	mov	r3, r1
 8011df2:	607a      	str	r2, [r7, #4]
 8011df4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8011df6:	4b70      	ldr	r3, [pc, #448]	; (8011fb8 <SDMMC_GetCmdResp1+0x1d0>)
 8011df8:	681b      	ldr	r3, [r3, #0]
 8011dfa:	4a70      	ldr	r2, [pc, #448]	; (8011fbc <SDMMC_GetCmdResp1+0x1d4>)
 8011dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8011e00:	0a5a      	lsrs	r2, r3, #9
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	fb02 f303 	mul.w	r3, r2, r3
 8011e08:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011e0a:	69fb      	ldr	r3, [r7, #28]
 8011e0c:	1e5a      	subs	r2, r3, #1
 8011e0e:	61fa      	str	r2, [r7, #28]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d102      	bne.n	8011e1a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011e14:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011e18:	e0c9      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8011e1a:	68fb      	ldr	r3, [r7, #12]
 8011e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e1e:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8011e20:	69ba      	ldr	r2, [r7, #24]
 8011e22:	4b67      	ldr	r3, [pc, #412]	; (8011fc0 <SDMMC_GetCmdResp1+0x1d8>)
 8011e24:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d0ef      	beq.n	8011e0a <SDMMC_GetCmdResp1+0x22>
 8011e2a:	69bb      	ldr	r3, [r7, #24]
 8011e2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d1ea      	bne.n	8011e0a <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e38:	f003 0304 	and.w	r3, r3, #4
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d004      	beq.n	8011e4a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	2204      	movs	r2, #4
 8011e44:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011e46:	2304      	movs	r3, #4
 8011e48:	e0b1      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011e4e:	f003 0301 	and.w	r3, r3, #1
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d004      	beq.n	8011e60 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	2201      	movs	r2, #1
 8011e5a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	e0a6      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	4a58      	ldr	r2, [pc, #352]	; (8011fc4 <SDMMC_GetCmdResp1+0x1dc>)
 8011e64:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011e66:	68f8      	ldr	r0, [r7, #12]
 8011e68:	f7ff fcf6 	bl	8011858 <SDMMC_GetCommandResponse>
 8011e6c:	4603      	mov	r3, r0
 8011e6e:	461a      	mov	r2, r3
 8011e70:	7afb      	ldrb	r3, [r7, #11]
 8011e72:	4293      	cmp	r3, r2
 8011e74:	d001      	beq.n	8011e7a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011e76:	2301      	movs	r3, #1
 8011e78:	e099      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011e7a:	2100      	movs	r1, #0
 8011e7c:	68f8      	ldr	r0, [r7, #12]
 8011e7e:	f7ff fcf8 	bl	8011872 <SDMMC_GetResponse>
 8011e82:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011e84:	697a      	ldr	r2, [r7, #20]
 8011e86:	4b50      	ldr	r3, [pc, #320]	; (8011fc8 <SDMMC_GetCmdResp1+0x1e0>)
 8011e88:	4013      	ands	r3, r2
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d101      	bne.n	8011e92 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8011e8e:	2300      	movs	r3, #0
 8011e90:	e08d      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011e92:	697b      	ldr	r3, [r7, #20]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	da02      	bge.n	8011e9e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011e98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011e9c:	e087      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d001      	beq.n	8011eac <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011ea8:	2340      	movs	r3, #64	; 0x40
 8011eaa:	e080      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8011eac:	697b      	ldr	r3, [r7, #20]
 8011eae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d001      	beq.n	8011eba <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011eb6:	2380      	movs	r3, #128	; 0x80
 8011eb8:	e079      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011eba:	697b      	ldr	r3, [r7, #20]
 8011ebc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d002      	beq.n	8011eca <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ec8:	e071      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011eca:	697b      	ldr	r3, [r7, #20]
 8011ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d002      	beq.n	8011eda <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011ed8:	e069      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011eda:	697b      	ldr	r3, [r7, #20]
 8011edc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d002      	beq.n	8011eea <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011ee8:	e061      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011eea:	697b      	ldr	r3, [r7, #20]
 8011eec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d002      	beq.n	8011efa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011ef4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011ef8:	e059      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011efa:	697b      	ldr	r3, [r7, #20]
 8011efc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d002      	beq.n	8011f0a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011f04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f08:	e051      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011f0a:	697b      	ldr	r3, [r7, #20]
 8011f0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d002      	beq.n	8011f1a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011f18:	e049      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011f1a:	697b      	ldr	r3, [r7, #20]
 8011f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011f20:	2b00      	cmp	r3, #0
 8011f22:	d002      	beq.n	8011f2a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011f24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011f28:	e041      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011f2a:	697b      	ldr	r3, [r7, #20]
 8011f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d002      	beq.n	8011f3a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011f34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011f38:	e039      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011f3a:	697b      	ldr	r3, [r7, #20]
 8011f3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d002      	beq.n	8011f4a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011f44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011f48:	e031      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011f4a:	697b      	ldr	r3, [r7, #20]
 8011f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d002      	beq.n	8011f5a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011f54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011f58:	e029      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011f5a:	697b      	ldr	r3, [r7, #20]
 8011f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d002      	beq.n	8011f6a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8011f64:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011f68:	e021      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011f6a:	697b      	ldr	r3, [r7, #20]
 8011f6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d002      	beq.n	8011f7a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8011f74:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011f78:	e019      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011f7a:	697b      	ldr	r3, [r7, #20]
 8011f7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d002      	beq.n	8011f8a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8011f84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011f88:	e011      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011f8a:	697b      	ldr	r3, [r7, #20]
 8011f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d002      	beq.n	8011f9a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8011f94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011f98:	e009      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011f9a:	697b      	ldr	r3, [r7, #20]
 8011f9c:	f003 0308 	and.w	r3, r3, #8
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d002      	beq.n	8011faa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8011fa4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8011fa8:	e001      	b.n	8011fae <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011faa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011fae:	4618      	mov	r0, r3
 8011fb0:	3720      	adds	r7, #32
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	bd80      	pop	{r7, pc}
 8011fb6:	bf00      	nop
 8011fb8:	24000000 	.word	0x24000000
 8011fbc:	10624dd3 	.word	0x10624dd3
 8011fc0:	00200045 	.word	0x00200045
 8011fc4:	002000c5 	.word	0x002000c5
 8011fc8:	fdffe008 	.word	0xfdffe008

08011fcc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011fcc:	b480      	push	{r7}
 8011fce:	b085      	sub	sp, #20
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011fd4:	4b1f      	ldr	r3, [pc, #124]	; (8012054 <SDMMC_GetCmdResp2+0x88>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	4a1f      	ldr	r2, [pc, #124]	; (8012058 <SDMMC_GetCmdResp2+0x8c>)
 8011fda:	fba2 2303 	umull	r2, r3, r2, r3
 8011fde:	0a5b      	lsrs	r3, r3, #9
 8011fe0:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fe4:	fb02 f303 	mul.w	r3, r2, r3
 8011fe8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	1e5a      	subs	r2, r3, #1
 8011fee:	60fa      	str	r2, [r7, #12]
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d102      	bne.n	8011ffa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011ff4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011ff8:	e026      	b.n	8012048 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ffe:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012000:	68bb      	ldr	r3, [r7, #8]
 8012002:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012006:	2b00      	cmp	r3, #0
 8012008:	d0ef      	beq.n	8011fea <SDMMC_GetCmdResp2+0x1e>
 801200a:	68bb      	ldr	r3, [r7, #8]
 801200c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012010:	2b00      	cmp	r3, #0
 8012012:	d1ea      	bne.n	8011fea <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012018:	f003 0304 	and.w	r3, r3, #4
 801201c:	2b00      	cmp	r3, #0
 801201e:	d004      	beq.n	801202a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	2204      	movs	r2, #4
 8012024:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012026:	2304      	movs	r3, #4
 8012028:	e00e      	b.n	8012048 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801202e:	f003 0301 	and.w	r3, r3, #1
 8012032:	2b00      	cmp	r3, #0
 8012034:	d004      	beq.n	8012040 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	2201      	movs	r2, #1
 801203a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801203c:	2301      	movs	r3, #1
 801203e:	e003      	b.n	8012048 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	4a06      	ldr	r2, [pc, #24]	; (801205c <SDMMC_GetCmdResp2+0x90>)
 8012044:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012046:	2300      	movs	r3, #0
}
 8012048:	4618      	mov	r0, r3
 801204a:	3714      	adds	r7, #20
 801204c:	46bd      	mov	sp, r7
 801204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012052:	4770      	bx	lr
 8012054:	24000000 	.word	0x24000000
 8012058:	10624dd3 	.word	0x10624dd3
 801205c:	002000c5 	.word	0x002000c5

08012060 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012060:	b480      	push	{r7}
 8012062:	b085      	sub	sp, #20
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012068:	4b1a      	ldr	r3, [pc, #104]	; (80120d4 <SDMMC_GetCmdResp3+0x74>)
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	4a1a      	ldr	r2, [pc, #104]	; (80120d8 <SDMMC_GetCmdResp3+0x78>)
 801206e:	fba2 2303 	umull	r2, r3, r2, r3
 8012072:	0a5b      	lsrs	r3, r3, #9
 8012074:	f241 3288 	movw	r2, #5000	; 0x1388
 8012078:	fb02 f303 	mul.w	r3, r2, r3
 801207c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	1e5a      	subs	r2, r3, #1
 8012082:	60fa      	str	r2, [r7, #12]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d102      	bne.n	801208e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012088:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801208c:	e01b      	b.n	80120c6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012092:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012094:	68bb      	ldr	r3, [r7, #8]
 8012096:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801209a:	2b00      	cmp	r3, #0
 801209c:	d0ef      	beq.n	801207e <SDMMC_GetCmdResp3+0x1e>
 801209e:	68bb      	ldr	r3, [r7, #8]
 80120a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d1ea      	bne.n	801207e <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120ac:	f003 0304 	and.w	r3, r3, #4
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d004      	beq.n	80120be <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	2204      	movs	r2, #4
 80120b8:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80120ba:	2304      	movs	r3, #4
 80120bc:	e003      	b.n	80120c6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	4a06      	ldr	r2, [pc, #24]	; (80120dc <SDMMC_GetCmdResp3+0x7c>)
 80120c2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80120c4:	2300      	movs	r3, #0
}
 80120c6:	4618      	mov	r0, r3
 80120c8:	3714      	adds	r7, #20
 80120ca:	46bd      	mov	sp, r7
 80120cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120d0:	4770      	bx	lr
 80120d2:	bf00      	nop
 80120d4:	24000000 	.word	0x24000000
 80120d8:	10624dd3 	.word	0x10624dd3
 80120dc:	002000c5 	.word	0x002000c5

080120e0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b088      	sub	sp, #32
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	60f8      	str	r0, [r7, #12]
 80120e8:	460b      	mov	r3, r1
 80120ea:	607a      	str	r2, [r7, #4]
 80120ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80120ee:	4b35      	ldr	r3, [pc, #212]	; (80121c4 <SDMMC_GetCmdResp6+0xe4>)
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	4a35      	ldr	r2, [pc, #212]	; (80121c8 <SDMMC_GetCmdResp6+0xe8>)
 80120f4:	fba2 2303 	umull	r2, r3, r2, r3
 80120f8:	0a5b      	lsrs	r3, r3, #9
 80120fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80120fe:	fb02 f303 	mul.w	r3, r2, r3
 8012102:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012104:	69fb      	ldr	r3, [r7, #28]
 8012106:	1e5a      	subs	r2, r3, #1
 8012108:	61fa      	str	r2, [r7, #28]
 801210a:	2b00      	cmp	r3, #0
 801210c:	d102      	bne.n	8012114 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801210e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012112:	e052      	b.n	80121ba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012118:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801211a:	69bb      	ldr	r3, [r7, #24]
 801211c:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012120:	2b00      	cmp	r3, #0
 8012122:	d0ef      	beq.n	8012104 <SDMMC_GetCmdResp6+0x24>
 8012124:	69bb      	ldr	r3, [r7, #24]
 8012126:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801212a:	2b00      	cmp	r3, #0
 801212c:	d1ea      	bne.n	8012104 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801212e:	68fb      	ldr	r3, [r7, #12]
 8012130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012132:	f003 0304 	and.w	r3, r3, #4
 8012136:	2b00      	cmp	r3, #0
 8012138:	d004      	beq.n	8012144 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	2204      	movs	r2, #4
 801213e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012140:	2304      	movs	r3, #4
 8012142:	e03a      	b.n	80121ba <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012148:	f003 0301 	and.w	r3, r3, #1
 801214c:	2b00      	cmp	r3, #0
 801214e:	d004      	beq.n	801215a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012150:	68fb      	ldr	r3, [r7, #12]
 8012152:	2201      	movs	r2, #1
 8012154:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012156:	2301      	movs	r3, #1
 8012158:	e02f      	b.n	80121ba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801215a:	68f8      	ldr	r0, [r7, #12]
 801215c:	f7ff fb7c 	bl	8011858 <SDMMC_GetCommandResponse>
 8012160:	4603      	mov	r3, r0
 8012162:	461a      	mov	r2, r3
 8012164:	7afb      	ldrb	r3, [r7, #11]
 8012166:	4293      	cmp	r3, r2
 8012168:	d001      	beq.n	801216e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801216a:	2301      	movs	r3, #1
 801216c:	e025      	b.n	80121ba <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	4a16      	ldr	r2, [pc, #88]	; (80121cc <SDMMC_GetCmdResp6+0xec>)
 8012172:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012174:	2100      	movs	r1, #0
 8012176:	68f8      	ldr	r0, [r7, #12]
 8012178:	f7ff fb7b 	bl	8011872 <SDMMC_GetResponse>
 801217c:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 801217e:	697b      	ldr	r3, [r7, #20]
 8012180:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012184:	2b00      	cmp	r3, #0
 8012186:	d106      	bne.n	8012196 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8012188:	697b      	ldr	r3, [r7, #20]
 801218a:	0c1b      	lsrs	r3, r3, #16
 801218c:	b29a      	uxth	r2, r3
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8012192:	2300      	movs	r3, #0
 8012194:	e011      	b.n	80121ba <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801219c:	2b00      	cmp	r3, #0
 801219e:	d002      	beq.n	80121a6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80121a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80121a4:	e009      	b.n	80121ba <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d002      	beq.n	80121b6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80121b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121b4:	e001      	b.n	80121ba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80121b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80121ba:	4618      	mov	r0, r3
 80121bc:	3720      	adds	r7, #32
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}
 80121c2:	bf00      	nop
 80121c4:	24000000 	.word	0x24000000
 80121c8:	10624dd3 	.word	0x10624dd3
 80121cc:	002000c5 	.word	0x002000c5

080121d0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80121d0:	b480      	push	{r7}
 80121d2:	b085      	sub	sp, #20
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80121d8:	4b22      	ldr	r3, [pc, #136]	; (8012264 <SDMMC_GetCmdResp7+0x94>)
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	4a22      	ldr	r2, [pc, #136]	; (8012268 <SDMMC_GetCmdResp7+0x98>)
 80121de:	fba2 2303 	umull	r2, r3, r2, r3
 80121e2:	0a5b      	lsrs	r3, r3, #9
 80121e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80121e8:	fb02 f303 	mul.w	r3, r2, r3
 80121ec:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	1e5a      	subs	r2, r3, #1
 80121f2:	60fa      	str	r2, [r7, #12]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d102      	bne.n	80121fe <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80121f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80121fc:	e02c      	b.n	8012258 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012202:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012204:	68bb      	ldr	r3, [r7, #8]
 8012206:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801220a:	2b00      	cmp	r3, #0
 801220c:	d0ef      	beq.n	80121ee <SDMMC_GetCmdResp7+0x1e>
 801220e:	68bb      	ldr	r3, [r7, #8]
 8012210:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012214:	2b00      	cmp	r3, #0
 8012216:	d1ea      	bne.n	80121ee <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801221c:	f003 0304 	and.w	r3, r3, #4
 8012220:	2b00      	cmp	r3, #0
 8012222:	d004      	beq.n	801222e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	2204      	movs	r2, #4
 8012228:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801222a:	2304      	movs	r3, #4
 801222c:	e014      	b.n	8012258 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012232:	f003 0301 	and.w	r3, r3, #1
 8012236:	2b00      	cmp	r3, #0
 8012238:	d004      	beq.n	8012244 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	2201      	movs	r2, #1
 801223e:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012240:	2301      	movs	r3, #1
 8012242:	e009      	b.n	8012258 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801224c:	2b00      	cmp	r3, #0
 801224e:	d002      	beq.n	8012256 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	2240      	movs	r2, #64	; 0x40
 8012254:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012256:	2300      	movs	r3, #0

}
 8012258:	4618      	mov	r0, r3
 801225a:	3714      	adds	r7, #20
 801225c:	46bd      	mov	sp, r7
 801225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012262:	4770      	bx	lr
 8012264:	24000000 	.word	0x24000000
 8012268:	10624dd3 	.word	0x10624dd3

0801226c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 801226c:	b480      	push	{r7}
 801226e:	b085      	sub	sp, #20
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012274:	4b11      	ldr	r3, [pc, #68]	; (80122bc <SDMMC_GetCmdError+0x50>)
 8012276:	681b      	ldr	r3, [r3, #0]
 8012278:	4a11      	ldr	r2, [pc, #68]	; (80122c0 <SDMMC_GetCmdError+0x54>)
 801227a:	fba2 2303 	umull	r2, r3, r2, r3
 801227e:	0a5b      	lsrs	r3, r3, #9
 8012280:	f241 3288 	movw	r2, #5000	; 0x1388
 8012284:	fb02 f303 	mul.w	r3, r2, r3
 8012288:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	1e5a      	subs	r2, r3, #1
 801228e:	60fa      	str	r2, [r7, #12]
 8012290:	2b00      	cmp	r3, #0
 8012292:	d102      	bne.n	801229a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012294:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012298:	e009      	b.n	80122ae <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801229e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d0f1      	beq.n	801228a <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	4a06      	ldr	r2, [pc, #24]	; (80122c4 <SDMMC_GetCmdError+0x58>)
 80122aa:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80122ac:	2300      	movs	r3, #0
}
 80122ae:	4618      	mov	r0, r3
 80122b0:	3714      	adds	r7, #20
 80122b2:	46bd      	mov	sp, r7
 80122b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b8:	4770      	bx	lr
 80122ba:	bf00      	nop
 80122bc:	24000000 	.word	0x24000000
 80122c0:	10624dd3 	.word	0x10624dd3
 80122c4:	002000c5 	.word	0x002000c5

080122c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80122c8:	b084      	sub	sp, #16
 80122ca:	b580      	push	{r7, lr}
 80122cc:	b084      	sub	sp, #16
 80122ce:	af00      	add	r7, sp, #0
 80122d0:	6078      	str	r0, [r7, #4]
 80122d2:	f107 001c 	add.w	r0, r7, #28
 80122d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80122da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122dc:	2b01      	cmp	r3, #1
 80122de:	d120      	bne.n	8012322 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	68da      	ldr	r2, [r3, #12]
 80122f0:	4b2a      	ldr	r3, [pc, #168]	; (801239c <USB_CoreInit+0xd4>)
 80122f2:	4013      	ands	r3, r2
 80122f4:	687a      	ldr	r2, [r7, #4]
 80122f6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	68db      	ldr	r3, [r3, #12]
 80122fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012304:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012306:	2b01      	cmp	r3, #1
 8012308:	d105      	bne.n	8012316 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	68db      	ldr	r3, [r3, #12]
 801230e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012316:	6878      	ldr	r0, [r7, #4]
 8012318:	f001 faf8 	bl	801390c <USB_CoreReset>
 801231c:	4603      	mov	r3, r0
 801231e:	73fb      	strb	r3, [r7, #15]
 8012320:	e01a      	b.n	8012358 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	68db      	ldr	r3, [r3, #12]
 8012326:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801232e:	6878      	ldr	r0, [r7, #4]
 8012330:	f001 faec 	bl	801390c <USB_CoreReset>
 8012334:	4603      	mov	r3, r0
 8012336:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801233a:	2b00      	cmp	r3, #0
 801233c:	d106      	bne.n	801234c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801233e:	687b      	ldr	r3, [r7, #4]
 8012340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012342:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	639a      	str	r2, [r3, #56]	; 0x38
 801234a:	e005      	b.n	8012358 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012350:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012354:	687b      	ldr	r3, [r7, #4]
 8012356:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801235a:	2b01      	cmp	r3, #1
 801235c:	d116      	bne.n	801238c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012362:	b29a      	uxth	r2, r3
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801236c:	4b0c      	ldr	r3, [pc, #48]	; (80123a0 <USB_CoreInit+0xd8>)
 801236e:	4313      	orrs	r3, r2
 8012370:	687a      	ldr	r2, [r7, #4]
 8012372:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	689b      	ldr	r3, [r3, #8]
 8012378:	f043 0206 	orr.w	r2, r3, #6
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	689b      	ldr	r3, [r3, #8]
 8012384:	f043 0220 	orr.w	r2, r3, #32
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801238c:	7bfb      	ldrb	r3, [r7, #15]
}
 801238e:	4618      	mov	r0, r3
 8012390:	3710      	adds	r7, #16
 8012392:	46bd      	mov	sp, r7
 8012394:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012398:	b004      	add	sp, #16
 801239a:	4770      	bx	lr
 801239c:	ffbdffbf 	.word	0xffbdffbf
 80123a0:	03ee0000 	.word	0x03ee0000

080123a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80123a4:	b480      	push	{r7}
 80123a6:	b087      	sub	sp, #28
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	60f8      	str	r0, [r7, #12]
 80123ac:	60b9      	str	r1, [r7, #8]
 80123ae:	4613      	mov	r3, r2
 80123b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80123b2:	79fb      	ldrb	r3, [r7, #7]
 80123b4:	2b02      	cmp	r3, #2
 80123b6:	d165      	bne.n	8012484 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80123b8:	68bb      	ldr	r3, [r7, #8]
 80123ba:	4a41      	ldr	r2, [pc, #260]	; (80124c0 <USB_SetTurnaroundTime+0x11c>)
 80123bc:	4293      	cmp	r3, r2
 80123be:	d906      	bls.n	80123ce <USB_SetTurnaroundTime+0x2a>
 80123c0:	68bb      	ldr	r3, [r7, #8]
 80123c2:	4a40      	ldr	r2, [pc, #256]	; (80124c4 <USB_SetTurnaroundTime+0x120>)
 80123c4:	4293      	cmp	r3, r2
 80123c6:	d202      	bcs.n	80123ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80123c8:	230f      	movs	r3, #15
 80123ca:	617b      	str	r3, [r7, #20]
 80123cc:	e062      	b.n	8012494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80123ce:	68bb      	ldr	r3, [r7, #8]
 80123d0:	4a3c      	ldr	r2, [pc, #240]	; (80124c4 <USB_SetTurnaroundTime+0x120>)
 80123d2:	4293      	cmp	r3, r2
 80123d4:	d306      	bcc.n	80123e4 <USB_SetTurnaroundTime+0x40>
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	4a3b      	ldr	r2, [pc, #236]	; (80124c8 <USB_SetTurnaroundTime+0x124>)
 80123da:	4293      	cmp	r3, r2
 80123dc:	d202      	bcs.n	80123e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80123de:	230e      	movs	r3, #14
 80123e0:	617b      	str	r3, [r7, #20]
 80123e2:	e057      	b.n	8012494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	4a38      	ldr	r2, [pc, #224]	; (80124c8 <USB_SetTurnaroundTime+0x124>)
 80123e8:	4293      	cmp	r3, r2
 80123ea:	d306      	bcc.n	80123fa <USB_SetTurnaroundTime+0x56>
 80123ec:	68bb      	ldr	r3, [r7, #8]
 80123ee:	4a37      	ldr	r2, [pc, #220]	; (80124cc <USB_SetTurnaroundTime+0x128>)
 80123f0:	4293      	cmp	r3, r2
 80123f2:	d202      	bcs.n	80123fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80123f4:	230d      	movs	r3, #13
 80123f6:	617b      	str	r3, [r7, #20]
 80123f8:	e04c      	b.n	8012494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80123fa:	68bb      	ldr	r3, [r7, #8]
 80123fc:	4a33      	ldr	r2, [pc, #204]	; (80124cc <USB_SetTurnaroundTime+0x128>)
 80123fe:	4293      	cmp	r3, r2
 8012400:	d306      	bcc.n	8012410 <USB_SetTurnaroundTime+0x6c>
 8012402:	68bb      	ldr	r3, [r7, #8]
 8012404:	4a32      	ldr	r2, [pc, #200]	; (80124d0 <USB_SetTurnaroundTime+0x12c>)
 8012406:	4293      	cmp	r3, r2
 8012408:	d802      	bhi.n	8012410 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801240a:	230c      	movs	r3, #12
 801240c:	617b      	str	r3, [r7, #20]
 801240e:	e041      	b.n	8012494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	4a2f      	ldr	r2, [pc, #188]	; (80124d0 <USB_SetTurnaroundTime+0x12c>)
 8012414:	4293      	cmp	r3, r2
 8012416:	d906      	bls.n	8012426 <USB_SetTurnaroundTime+0x82>
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	4a2e      	ldr	r2, [pc, #184]	; (80124d4 <USB_SetTurnaroundTime+0x130>)
 801241c:	4293      	cmp	r3, r2
 801241e:	d802      	bhi.n	8012426 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012420:	230b      	movs	r3, #11
 8012422:	617b      	str	r3, [r7, #20]
 8012424:	e036      	b.n	8012494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012426:	68bb      	ldr	r3, [r7, #8]
 8012428:	4a2a      	ldr	r2, [pc, #168]	; (80124d4 <USB_SetTurnaroundTime+0x130>)
 801242a:	4293      	cmp	r3, r2
 801242c:	d906      	bls.n	801243c <USB_SetTurnaroundTime+0x98>
 801242e:	68bb      	ldr	r3, [r7, #8]
 8012430:	4a29      	ldr	r2, [pc, #164]	; (80124d8 <USB_SetTurnaroundTime+0x134>)
 8012432:	4293      	cmp	r3, r2
 8012434:	d802      	bhi.n	801243c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012436:	230a      	movs	r3, #10
 8012438:	617b      	str	r3, [r7, #20]
 801243a:	e02b      	b.n	8012494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801243c:	68bb      	ldr	r3, [r7, #8]
 801243e:	4a26      	ldr	r2, [pc, #152]	; (80124d8 <USB_SetTurnaroundTime+0x134>)
 8012440:	4293      	cmp	r3, r2
 8012442:	d906      	bls.n	8012452 <USB_SetTurnaroundTime+0xae>
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	4a25      	ldr	r2, [pc, #148]	; (80124dc <USB_SetTurnaroundTime+0x138>)
 8012448:	4293      	cmp	r3, r2
 801244a:	d202      	bcs.n	8012452 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801244c:	2309      	movs	r3, #9
 801244e:	617b      	str	r3, [r7, #20]
 8012450:	e020      	b.n	8012494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	4a21      	ldr	r2, [pc, #132]	; (80124dc <USB_SetTurnaroundTime+0x138>)
 8012456:	4293      	cmp	r3, r2
 8012458:	d306      	bcc.n	8012468 <USB_SetTurnaroundTime+0xc4>
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	4a20      	ldr	r2, [pc, #128]	; (80124e0 <USB_SetTurnaroundTime+0x13c>)
 801245e:	4293      	cmp	r3, r2
 8012460:	d802      	bhi.n	8012468 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012462:	2308      	movs	r3, #8
 8012464:	617b      	str	r3, [r7, #20]
 8012466:	e015      	b.n	8012494 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	4a1d      	ldr	r2, [pc, #116]	; (80124e0 <USB_SetTurnaroundTime+0x13c>)
 801246c:	4293      	cmp	r3, r2
 801246e:	d906      	bls.n	801247e <USB_SetTurnaroundTime+0xda>
 8012470:	68bb      	ldr	r3, [r7, #8]
 8012472:	4a1c      	ldr	r2, [pc, #112]	; (80124e4 <USB_SetTurnaroundTime+0x140>)
 8012474:	4293      	cmp	r3, r2
 8012476:	d202      	bcs.n	801247e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012478:	2307      	movs	r3, #7
 801247a:	617b      	str	r3, [r7, #20]
 801247c:	e00a      	b.n	8012494 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801247e:	2306      	movs	r3, #6
 8012480:	617b      	str	r3, [r7, #20]
 8012482:	e007      	b.n	8012494 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012484:	79fb      	ldrb	r3, [r7, #7]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d102      	bne.n	8012490 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801248a:	2309      	movs	r3, #9
 801248c:	617b      	str	r3, [r7, #20]
 801248e:	e001      	b.n	8012494 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012490:	2309      	movs	r3, #9
 8012492:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	68db      	ldr	r3, [r3, #12]
 8012498:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	68da      	ldr	r2, [r3, #12]
 80124a4:	697b      	ldr	r3, [r7, #20]
 80124a6:	029b      	lsls	r3, r3, #10
 80124a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80124ac:	431a      	orrs	r2, r3
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80124b2:	2300      	movs	r3, #0
}
 80124b4:	4618      	mov	r0, r3
 80124b6:	371c      	adds	r7, #28
 80124b8:	46bd      	mov	sp, r7
 80124ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124be:	4770      	bx	lr
 80124c0:	00d8acbf 	.word	0x00d8acbf
 80124c4:	00e4e1c0 	.word	0x00e4e1c0
 80124c8:	00f42400 	.word	0x00f42400
 80124cc:	01067380 	.word	0x01067380
 80124d0:	011a499f 	.word	0x011a499f
 80124d4:	01312cff 	.word	0x01312cff
 80124d8:	014ca43f 	.word	0x014ca43f
 80124dc:	016e3600 	.word	0x016e3600
 80124e0:	01a6ab1f 	.word	0x01a6ab1f
 80124e4:	01e84800 	.word	0x01e84800

080124e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80124e8:	b480      	push	{r7}
 80124ea:	b083      	sub	sp, #12
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	689b      	ldr	r3, [r3, #8]
 80124f4:	f043 0201 	orr.w	r2, r3, #1
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80124fc:	2300      	movs	r3, #0
}
 80124fe:	4618      	mov	r0, r3
 8012500:	370c      	adds	r7, #12
 8012502:	46bd      	mov	sp, r7
 8012504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012508:	4770      	bx	lr

0801250a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801250a:	b480      	push	{r7}
 801250c:	b083      	sub	sp, #12
 801250e:	af00      	add	r7, sp, #0
 8012510:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	689b      	ldr	r3, [r3, #8]
 8012516:	f023 0201 	bic.w	r2, r3, #1
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801251e:	2300      	movs	r3, #0
}
 8012520:	4618      	mov	r0, r3
 8012522:	370c      	adds	r7, #12
 8012524:	46bd      	mov	sp, r7
 8012526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252a:	4770      	bx	lr

0801252c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801252c:	b580      	push	{r7, lr}
 801252e:	b084      	sub	sp, #16
 8012530:	af00      	add	r7, sp, #0
 8012532:	6078      	str	r0, [r7, #4]
 8012534:	460b      	mov	r3, r1
 8012536:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012538:	2300      	movs	r3, #0
 801253a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	68db      	ldr	r3, [r3, #12]
 8012540:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012548:	78fb      	ldrb	r3, [r7, #3]
 801254a:	2b01      	cmp	r3, #1
 801254c:	d115      	bne.n	801257a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	68db      	ldr	r3, [r3, #12]
 8012552:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801255a:	2001      	movs	r0, #1
 801255c:	f7f0 feca 	bl	80032f4 <HAL_Delay>
      ms++;
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	3301      	adds	r3, #1
 8012564:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012566:	6878      	ldr	r0, [r7, #4]
 8012568:	f001 f93f 	bl	80137ea <USB_GetMode>
 801256c:	4603      	mov	r3, r0
 801256e:	2b01      	cmp	r3, #1
 8012570:	d01e      	beq.n	80125b0 <USB_SetCurrentMode+0x84>
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	2b31      	cmp	r3, #49	; 0x31
 8012576:	d9f0      	bls.n	801255a <USB_SetCurrentMode+0x2e>
 8012578:	e01a      	b.n	80125b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 801257a:	78fb      	ldrb	r3, [r7, #3]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d115      	bne.n	80125ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	68db      	ldr	r3, [r3, #12]
 8012584:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 801258c:	2001      	movs	r0, #1
 801258e:	f7f0 feb1 	bl	80032f4 <HAL_Delay>
      ms++;
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	3301      	adds	r3, #1
 8012596:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012598:	6878      	ldr	r0, [r7, #4]
 801259a:	f001 f926 	bl	80137ea <USB_GetMode>
 801259e:	4603      	mov	r3, r0
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d005      	beq.n	80125b0 <USB_SetCurrentMode+0x84>
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	2b31      	cmp	r3, #49	; 0x31
 80125a8:	d9f0      	bls.n	801258c <USB_SetCurrentMode+0x60>
 80125aa:	e001      	b.n	80125b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80125ac:	2301      	movs	r3, #1
 80125ae:	e005      	b.n	80125bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	2b32      	cmp	r3, #50	; 0x32
 80125b4:	d101      	bne.n	80125ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80125b6:	2301      	movs	r3, #1
 80125b8:	e000      	b.n	80125bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80125ba:	2300      	movs	r3, #0
}
 80125bc:	4618      	mov	r0, r3
 80125be:	3710      	adds	r7, #16
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}

080125c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80125c4:	b084      	sub	sp, #16
 80125c6:	b580      	push	{r7, lr}
 80125c8:	b086      	sub	sp, #24
 80125ca:	af00      	add	r7, sp, #0
 80125cc:	6078      	str	r0, [r7, #4]
 80125ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80125d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80125d6:	2300      	movs	r3, #0
 80125d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80125de:	2300      	movs	r3, #0
 80125e0:	613b      	str	r3, [r7, #16]
 80125e2:	e009      	b.n	80125f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80125e4:	687a      	ldr	r2, [r7, #4]
 80125e6:	693b      	ldr	r3, [r7, #16]
 80125e8:	3340      	adds	r3, #64	; 0x40
 80125ea:	009b      	lsls	r3, r3, #2
 80125ec:	4413      	add	r3, r2
 80125ee:	2200      	movs	r2, #0
 80125f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80125f2:	693b      	ldr	r3, [r7, #16]
 80125f4:	3301      	adds	r3, #1
 80125f6:	613b      	str	r3, [r7, #16]
 80125f8:	693b      	ldr	r3, [r7, #16]
 80125fa:	2b0e      	cmp	r3, #14
 80125fc:	d9f2      	bls.n	80125e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80125fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012600:	2b00      	cmp	r3, #0
 8012602:	d11c      	bne.n	801263e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801260a:	685b      	ldr	r3, [r3, #4]
 801260c:	68fa      	ldr	r2, [r7, #12]
 801260e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012612:	f043 0302 	orr.w	r3, r3, #2
 8012616:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801261c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	601a      	str	r2, [r3, #0]
 801263c:	e005      	b.n	801264a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012642:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012650:	461a      	mov	r2, r3
 8012652:	2300      	movs	r3, #0
 8012654:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801265c:	4619      	mov	r1, r3
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012664:	461a      	mov	r2, r3
 8012666:	680b      	ldr	r3, [r1, #0]
 8012668:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801266a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801266c:	2b01      	cmp	r3, #1
 801266e:	d10c      	bne.n	801268a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012672:	2b00      	cmp	r3, #0
 8012674:	d104      	bne.n	8012680 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012676:	2100      	movs	r1, #0
 8012678:	6878      	ldr	r0, [r7, #4]
 801267a:	f000 f965 	bl	8012948 <USB_SetDevSpeed>
 801267e:	e008      	b.n	8012692 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012680:	2101      	movs	r1, #1
 8012682:	6878      	ldr	r0, [r7, #4]
 8012684:	f000 f960 	bl	8012948 <USB_SetDevSpeed>
 8012688:	e003      	b.n	8012692 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801268a:	2103      	movs	r1, #3
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f000 f95b 	bl	8012948 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012692:	2110      	movs	r1, #16
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f000 f8f3 	bl	8012880 <USB_FlushTxFifo>
 801269a:	4603      	mov	r3, r0
 801269c:	2b00      	cmp	r3, #0
 801269e:	d001      	beq.n	80126a4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80126a0:	2301      	movs	r3, #1
 80126a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80126a4:	6878      	ldr	r0, [r7, #4]
 80126a6:	f000 f91f 	bl	80128e8 <USB_FlushRxFifo>
 80126aa:	4603      	mov	r3, r0
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d001      	beq.n	80126b4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80126b0:	2301      	movs	r3, #1
 80126b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126ba:	461a      	mov	r2, r3
 80126bc:	2300      	movs	r3, #0
 80126be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126c6:	461a      	mov	r2, r3
 80126c8:	2300      	movs	r3, #0
 80126ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126d2:	461a      	mov	r2, r3
 80126d4:	2300      	movs	r3, #0
 80126d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80126d8:	2300      	movs	r3, #0
 80126da:	613b      	str	r3, [r7, #16]
 80126dc:	e043      	b.n	8012766 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80126de:	693b      	ldr	r3, [r7, #16]
 80126e0:	015a      	lsls	r2, r3, #5
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	4413      	add	r3, r2
 80126e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80126f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80126f4:	d118      	bne.n	8012728 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80126f6:	693b      	ldr	r3, [r7, #16]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d10a      	bne.n	8012712 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80126fc:	693b      	ldr	r3, [r7, #16]
 80126fe:	015a      	lsls	r2, r3, #5
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	4413      	add	r3, r2
 8012704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012708:	461a      	mov	r2, r3
 801270a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801270e:	6013      	str	r3, [r2, #0]
 8012710:	e013      	b.n	801273a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012712:	693b      	ldr	r3, [r7, #16]
 8012714:	015a      	lsls	r2, r3, #5
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	4413      	add	r3, r2
 801271a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801271e:	461a      	mov	r2, r3
 8012720:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012724:	6013      	str	r3, [r2, #0]
 8012726:	e008      	b.n	801273a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012728:	693b      	ldr	r3, [r7, #16]
 801272a:	015a      	lsls	r2, r3, #5
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	4413      	add	r3, r2
 8012730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012734:	461a      	mov	r2, r3
 8012736:	2300      	movs	r3, #0
 8012738:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801273a:	693b      	ldr	r3, [r7, #16]
 801273c:	015a      	lsls	r2, r3, #5
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	4413      	add	r3, r2
 8012742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012746:	461a      	mov	r2, r3
 8012748:	2300      	movs	r3, #0
 801274a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801274c:	693b      	ldr	r3, [r7, #16]
 801274e:	015a      	lsls	r2, r3, #5
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	4413      	add	r3, r2
 8012754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012758:	461a      	mov	r2, r3
 801275a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801275e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012760:	693b      	ldr	r3, [r7, #16]
 8012762:	3301      	adds	r3, #1
 8012764:	613b      	str	r3, [r7, #16]
 8012766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012768:	693a      	ldr	r2, [r7, #16]
 801276a:	429a      	cmp	r2, r3
 801276c:	d3b7      	bcc.n	80126de <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801276e:	2300      	movs	r3, #0
 8012770:	613b      	str	r3, [r7, #16]
 8012772:	e043      	b.n	80127fc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012774:	693b      	ldr	r3, [r7, #16]
 8012776:	015a      	lsls	r2, r3, #5
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	4413      	add	r3, r2
 801277c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801278a:	d118      	bne.n	80127be <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801278c:	693b      	ldr	r3, [r7, #16]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d10a      	bne.n	80127a8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012792:	693b      	ldr	r3, [r7, #16]
 8012794:	015a      	lsls	r2, r3, #5
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	4413      	add	r3, r2
 801279a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801279e:	461a      	mov	r2, r3
 80127a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80127a4:	6013      	str	r3, [r2, #0]
 80127a6:	e013      	b.n	80127d0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80127a8:	693b      	ldr	r3, [r7, #16]
 80127aa:	015a      	lsls	r2, r3, #5
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	4413      	add	r3, r2
 80127b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127b4:	461a      	mov	r2, r3
 80127b6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80127ba:	6013      	str	r3, [r2, #0]
 80127bc:	e008      	b.n	80127d0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80127be:	693b      	ldr	r3, [r7, #16]
 80127c0:	015a      	lsls	r2, r3, #5
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	4413      	add	r3, r2
 80127c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127ca:	461a      	mov	r2, r3
 80127cc:	2300      	movs	r3, #0
 80127ce:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80127d0:	693b      	ldr	r3, [r7, #16]
 80127d2:	015a      	lsls	r2, r3, #5
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	4413      	add	r3, r2
 80127d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127dc:	461a      	mov	r2, r3
 80127de:	2300      	movs	r3, #0
 80127e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80127e2:	693b      	ldr	r3, [r7, #16]
 80127e4:	015a      	lsls	r2, r3, #5
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	4413      	add	r3, r2
 80127ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127ee:	461a      	mov	r2, r3
 80127f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80127f4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80127f6:	693b      	ldr	r3, [r7, #16]
 80127f8:	3301      	adds	r3, #1
 80127fa:	613b      	str	r3, [r7, #16]
 80127fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127fe:	693a      	ldr	r2, [r7, #16]
 8012800:	429a      	cmp	r2, r3
 8012802:	d3b7      	bcc.n	8012774 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801280a:	691b      	ldr	r3, [r3, #16]
 801280c:	68fa      	ldr	r2, [r7, #12]
 801280e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012812:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012816:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	2200      	movs	r2, #0
 801281c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012824:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012828:	2b00      	cmp	r3, #0
 801282a:	d105      	bne.n	8012838 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	699b      	ldr	r3, [r3, #24]
 8012830:	f043 0210 	orr.w	r2, r3, #16
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	699a      	ldr	r2, [r3, #24]
 801283c:	4b0e      	ldr	r3, [pc, #56]	; (8012878 <USB_DevInit+0x2b4>)
 801283e:	4313      	orrs	r3, r2
 8012840:	687a      	ldr	r2, [r7, #4]
 8012842:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012846:	2b00      	cmp	r3, #0
 8012848:	d005      	beq.n	8012856 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	699b      	ldr	r3, [r3, #24]
 801284e:	f043 0208 	orr.w	r2, r3, #8
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012858:	2b01      	cmp	r3, #1
 801285a:	d105      	bne.n	8012868 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	699a      	ldr	r2, [r3, #24]
 8012860:	4b06      	ldr	r3, [pc, #24]	; (801287c <USB_DevInit+0x2b8>)
 8012862:	4313      	orrs	r3, r2
 8012864:	687a      	ldr	r2, [r7, #4]
 8012866:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012868:	7dfb      	ldrb	r3, [r7, #23]
}
 801286a:	4618      	mov	r0, r3
 801286c:	3718      	adds	r7, #24
 801286e:	46bd      	mov	sp, r7
 8012870:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012874:	b004      	add	sp, #16
 8012876:	4770      	bx	lr
 8012878:	803c3800 	.word	0x803c3800
 801287c:	40000004 	.word	0x40000004

08012880 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012880:	b480      	push	{r7}
 8012882:	b085      	sub	sp, #20
 8012884:	af00      	add	r7, sp, #0
 8012886:	6078      	str	r0, [r7, #4]
 8012888:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801288a:	2300      	movs	r3, #0
 801288c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	3301      	adds	r3, #1
 8012892:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	4a13      	ldr	r2, [pc, #76]	; (80128e4 <USB_FlushTxFifo+0x64>)
 8012898:	4293      	cmp	r3, r2
 801289a:	d901      	bls.n	80128a0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 801289c:	2303      	movs	r3, #3
 801289e:	e01b      	b.n	80128d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	691b      	ldr	r3, [r3, #16]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	daf2      	bge.n	801288e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80128a8:	2300      	movs	r3, #0
 80128aa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	019b      	lsls	r3, r3, #6
 80128b0:	f043 0220 	orr.w	r2, r3, #32
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	3301      	adds	r3, #1
 80128bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	4a08      	ldr	r2, [pc, #32]	; (80128e4 <USB_FlushTxFifo+0x64>)
 80128c2:	4293      	cmp	r3, r2
 80128c4:	d901      	bls.n	80128ca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80128c6:	2303      	movs	r3, #3
 80128c8:	e006      	b.n	80128d8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	691b      	ldr	r3, [r3, #16]
 80128ce:	f003 0320 	and.w	r3, r3, #32
 80128d2:	2b20      	cmp	r3, #32
 80128d4:	d0f0      	beq.n	80128b8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80128d6:	2300      	movs	r3, #0
}
 80128d8:	4618      	mov	r0, r3
 80128da:	3714      	adds	r7, #20
 80128dc:	46bd      	mov	sp, r7
 80128de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e2:	4770      	bx	lr
 80128e4:	00030d40 	.word	0x00030d40

080128e8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80128e8:	b480      	push	{r7}
 80128ea:	b085      	sub	sp, #20
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80128f0:	2300      	movs	r3, #0
 80128f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80128f4:	68fb      	ldr	r3, [r7, #12]
 80128f6:	3301      	adds	r3, #1
 80128f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	4a11      	ldr	r2, [pc, #68]	; (8012944 <USB_FlushRxFifo+0x5c>)
 80128fe:	4293      	cmp	r3, r2
 8012900:	d901      	bls.n	8012906 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012902:	2303      	movs	r3, #3
 8012904:	e018      	b.n	8012938 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	691b      	ldr	r3, [r3, #16]
 801290a:	2b00      	cmp	r3, #0
 801290c:	daf2      	bge.n	80128f4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801290e:	2300      	movs	r3, #0
 8012910:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2210      	movs	r2, #16
 8012916:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	3301      	adds	r3, #1
 801291c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	4a08      	ldr	r2, [pc, #32]	; (8012944 <USB_FlushRxFifo+0x5c>)
 8012922:	4293      	cmp	r3, r2
 8012924:	d901      	bls.n	801292a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012926:	2303      	movs	r3, #3
 8012928:	e006      	b.n	8012938 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	691b      	ldr	r3, [r3, #16]
 801292e:	f003 0310 	and.w	r3, r3, #16
 8012932:	2b10      	cmp	r3, #16
 8012934:	d0f0      	beq.n	8012918 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012936:	2300      	movs	r3, #0
}
 8012938:	4618      	mov	r0, r3
 801293a:	3714      	adds	r7, #20
 801293c:	46bd      	mov	sp, r7
 801293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012942:	4770      	bx	lr
 8012944:	00030d40 	.word	0x00030d40

08012948 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012948:	b480      	push	{r7}
 801294a:	b085      	sub	sp, #20
 801294c:	af00      	add	r7, sp, #0
 801294e:	6078      	str	r0, [r7, #4]
 8012950:	460b      	mov	r3, r1
 8012952:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801295e:	681a      	ldr	r2, [r3, #0]
 8012960:	78fb      	ldrb	r3, [r7, #3]
 8012962:	68f9      	ldr	r1, [r7, #12]
 8012964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012968:	4313      	orrs	r3, r2
 801296a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801296c:	2300      	movs	r3, #0
}
 801296e:	4618      	mov	r0, r3
 8012970:	3714      	adds	r7, #20
 8012972:	46bd      	mov	sp, r7
 8012974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012978:	4770      	bx	lr

0801297a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801297a:	b480      	push	{r7}
 801297c:	b087      	sub	sp, #28
 801297e:	af00      	add	r7, sp, #0
 8012980:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012986:	693b      	ldr	r3, [r7, #16]
 8012988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801298c:	689b      	ldr	r3, [r3, #8]
 801298e:	f003 0306 	and.w	r3, r3, #6
 8012992:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d102      	bne.n	80129a0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801299a:	2300      	movs	r3, #0
 801299c:	75fb      	strb	r3, [r7, #23]
 801299e:	e00a      	b.n	80129b6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	2b02      	cmp	r3, #2
 80129a4:	d002      	beq.n	80129ac <USB_GetDevSpeed+0x32>
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	2b06      	cmp	r3, #6
 80129aa:	d102      	bne.n	80129b2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80129ac:	2302      	movs	r3, #2
 80129ae:	75fb      	strb	r3, [r7, #23]
 80129b0:	e001      	b.n	80129b6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80129b2:	230f      	movs	r3, #15
 80129b4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80129b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80129b8:	4618      	mov	r0, r3
 80129ba:	371c      	adds	r7, #28
 80129bc:	46bd      	mov	sp, r7
 80129be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c2:	4770      	bx	lr

080129c4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80129c4:	b480      	push	{r7}
 80129c6:	b085      	sub	sp, #20
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
 80129cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80129d2:	683b      	ldr	r3, [r7, #0]
 80129d4:	781b      	ldrb	r3, [r3, #0]
 80129d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80129d8:	683b      	ldr	r3, [r7, #0]
 80129da:	785b      	ldrb	r3, [r3, #1]
 80129dc:	2b01      	cmp	r3, #1
 80129de:	d139      	bne.n	8012a54 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129e6:	69da      	ldr	r2, [r3, #28]
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	781b      	ldrb	r3, [r3, #0]
 80129ec:	f003 030f 	and.w	r3, r3, #15
 80129f0:	2101      	movs	r1, #1
 80129f2:	fa01 f303 	lsl.w	r3, r1, r3
 80129f6:	b29b      	uxth	r3, r3
 80129f8:	68f9      	ldr	r1, [r7, #12]
 80129fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80129fe:	4313      	orrs	r3, r2
 8012a00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012a02:	68bb      	ldr	r3, [r7, #8]
 8012a04:	015a      	lsls	r2, r3, #5
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	4413      	add	r3, r2
 8012a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d153      	bne.n	8012ac0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012a18:	68bb      	ldr	r3, [r7, #8]
 8012a1a:	015a      	lsls	r2, r3, #5
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	4413      	add	r3, r2
 8012a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a24:	681a      	ldr	r2, [r3, #0]
 8012a26:	683b      	ldr	r3, [r7, #0]
 8012a28:	689b      	ldr	r3, [r3, #8]
 8012a2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012a2e:	683b      	ldr	r3, [r7, #0]
 8012a30:	791b      	ldrb	r3, [r3, #4]
 8012a32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012a34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012a36:	68bb      	ldr	r3, [r7, #8]
 8012a38:	059b      	lsls	r3, r3, #22
 8012a3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012a3c:	431a      	orrs	r2, r3
 8012a3e:	68bb      	ldr	r3, [r7, #8]
 8012a40:	0159      	lsls	r1, r3, #5
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	440b      	add	r3, r1
 8012a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a4a:	4619      	mov	r1, r3
 8012a4c:	4b20      	ldr	r3, [pc, #128]	; (8012ad0 <USB_ActivateEndpoint+0x10c>)
 8012a4e:	4313      	orrs	r3, r2
 8012a50:	600b      	str	r3, [r1, #0]
 8012a52:	e035      	b.n	8012ac0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a5a:	69da      	ldr	r2, [r3, #28]
 8012a5c:	683b      	ldr	r3, [r7, #0]
 8012a5e:	781b      	ldrb	r3, [r3, #0]
 8012a60:	f003 030f 	and.w	r3, r3, #15
 8012a64:	2101      	movs	r1, #1
 8012a66:	fa01 f303 	lsl.w	r3, r1, r3
 8012a6a:	041b      	lsls	r3, r3, #16
 8012a6c:	68f9      	ldr	r1, [r7, #12]
 8012a6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012a72:	4313      	orrs	r3, r2
 8012a74:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012a76:	68bb      	ldr	r3, [r7, #8]
 8012a78:	015a      	lsls	r2, r3, #5
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	4413      	add	r3, r2
 8012a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a82:	681b      	ldr	r3, [r3, #0]
 8012a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	d119      	bne.n	8012ac0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	015a      	lsls	r2, r3, #5
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	4413      	add	r3, r2
 8012a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a98:	681a      	ldr	r2, [r3, #0]
 8012a9a:	683b      	ldr	r3, [r7, #0]
 8012a9c:	689b      	ldr	r3, [r3, #8]
 8012a9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012aa2:	683b      	ldr	r3, [r7, #0]
 8012aa4:	791b      	ldrb	r3, [r3, #4]
 8012aa6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012aa8:	430b      	orrs	r3, r1
 8012aaa:	431a      	orrs	r2, r3
 8012aac:	68bb      	ldr	r3, [r7, #8]
 8012aae:	0159      	lsls	r1, r3, #5
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	440b      	add	r3, r1
 8012ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ab8:	4619      	mov	r1, r3
 8012aba:	4b05      	ldr	r3, [pc, #20]	; (8012ad0 <USB_ActivateEndpoint+0x10c>)
 8012abc:	4313      	orrs	r3, r2
 8012abe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012ac0:	2300      	movs	r3, #0
}
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	3714      	adds	r7, #20
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012acc:	4770      	bx	lr
 8012ace:	bf00      	nop
 8012ad0:	10008000 	.word	0x10008000

08012ad4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012ad4:	b480      	push	{r7}
 8012ad6:	b085      	sub	sp, #20
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
 8012adc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012ae2:	683b      	ldr	r3, [r7, #0]
 8012ae4:	781b      	ldrb	r3, [r3, #0]
 8012ae6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012ae8:	683b      	ldr	r3, [r7, #0]
 8012aea:	785b      	ldrb	r3, [r3, #1]
 8012aec:	2b01      	cmp	r3, #1
 8012aee:	d161      	bne.n	8012bb4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	015a      	lsls	r2, r3, #5
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	4413      	add	r3, r2
 8012af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012b02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012b06:	d11f      	bne.n	8012b48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012b08:	68bb      	ldr	r3, [r7, #8]
 8012b0a:	015a      	lsls	r2, r3, #5
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	4413      	add	r3, r2
 8012b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	68ba      	ldr	r2, [r7, #8]
 8012b18:	0151      	lsls	r1, r2, #5
 8012b1a:	68fa      	ldr	r2, [r7, #12]
 8012b1c:	440a      	add	r2, r1
 8012b1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012b26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012b28:	68bb      	ldr	r3, [r7, #8]
 8012b2a:	015a      	lsls	r2, r3, #5
 8012b2c:	68fb      	ldr	r3, [r7, #12]
 8012b2e:	4413      	add	r3, r2
 8012b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	68ba      	ldr	r2, [r7, #8]
 8012b38:	0151      	lsls	r1, r2, #5
 8012b3a:	68fa      	ldr	r2, [r7, #12]
 8012b3c:	440a      	add	r2, r1
 8012b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012b46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012b50:	683b      	ldr	r3, [r7, #0]
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	f003 030f 	and.w	r3, r3, #15
 8012b58:	2101      	movs	r1, #1
 8012b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8012b5e:	b29b      	uxth	r3, r3
 8012b60:	43db      	mvns	r3, r3
 8012b62:	68f9      	ldr	r1, [r7, #12]
 8012b64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012b68:	4013      	ands	r3, r2
 8012b6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012b72:	69da      	ldr	r2, [r3, #28]
 8012b74:	683b      	ldr	r3, [r7, #0]
 8012b76:	781b      	ldrb	r3, [r3, #0]
 8012b78:	f003 030f 	and.w	r3, r3, #15
 8012b7c:	2101      	movs	r1, #1
 8012b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8012b82:	b29b      	uxth	r3, r3
 8012b84:	43db      	mvns	r3, r3
 8012b86:	68f9      	ldr	r1, [r7, #12]
 8012b88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012b8c:	4013      	ands	r3, r2
 8012b8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012b90:	68bb      	ldr	r3, [r7, #8]
 8012b92:	015a      	lsls	r2, r3, #5
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	4413      	add	r3, r2
 8012b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b9c:	681a      	ldr	r2, [r3, #0]
 8012b9e:	68bb      	ldr	r3, [r7, #8]
 8012ba0:	0159      	lsls	r1, r3, #5
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	440b      	add	r3, r1
 8012ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012baa:	4619      	mov	r1, r3
 8012bac:	4b35      	ldr	r3, [pc, #212]	; (8012c84 <USB_DeactivateEndpoint+0x1b0>)
 8012bae:	4013      	ands	r3, r2
 8012bb0:	600b      	str	r3, [r1, #0]
 8012bb2:	e060      	b.n	8012c76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012bb4:	68bb      	ldr	r3, [r7, #8]
 8012bb6:	015a      	lsls	r2, r3, #5
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	4413      	add	r3, r2
 8012bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012bca:	d11f      	bne.n	8012c0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012bcc:	68bb      	ldr	r3, [r7, #8]
 8012bce:	015a      	lsls	r2, r3, #5
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	4413      	add	r3, r2
 8012bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	68ba      	ldr	r2, [r7, #8]
 8012bdc:	0151      	lsls	r1, r2, #5
 8012bde:	68fa      	ldr	r2, [r7, #12]
 8012be0:	440a      	add	r2, r1
 8012be2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012be6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012bea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012bec:	68bb      	ldr	r3, [r7, #8]
 8012bee:	015a      	lsls	r2, r3, #5
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	4413      	add	r3, r2
 8012bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	68ba      	ldr	r2, [r7, #8]
 8012bfc:	0151      	lsls	r1, r2, #5
 8012bfe:	68fa      	ldr	r2, [r7, #12]
 8012c00:	440a      	add	r2, r1
 8012c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012c0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	781b      	ldrb	r3, [r3, #0]
 8012c18:	f003 030f 	and.w	r3, r3, #15
 8012c1c:	2101      	movs	r1, #1
 8012c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8012c22:	041b      	lsls	r3, r3, #16
 8012c24:	43db      	mvns	r3, r3
 8012c26:	68f9      	ldr	r1, [r7, #12]
 8012c28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012c2c:	4013      	ands	r3, r2
 8012c2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c36:	69da      	ldr	r2, [r3, #28]
 8012c38:	683b      	ldr	r3, [r7, #0]
 8012c3a:	781b      	ldrb	r3, [r3, #0]
 8012c3c:	f003 030f 	and.w	r3, r3, #15
 8012c40:	2101      	movs	r1, #1
 8012c42:	fa01 f303 	lsl.w	r3, r1, r3
 8012c46:	041b      	lsls	r3, r3, #16
 8012c48:	43db      	mvns	r3, r3
 8012c4a:	68f9      	ldr	r1, [r7, #12]
 8012c4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012c50:	4013      	ands	r3, r2
 8012c52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012c54:	68bb      	ldr	r3, [r7, #8]
 8012c56:	015a      	lsls	r2, r3, #5
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	4413      	add	r3, r2
 8012c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c60:	681a      	ldr	r2, [r3, #0]
 8012c62:	68bb      	ldr	r3, [r7, #8]
 8012c64:	0159      	lsls	r1, r3, #5
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	440b      	add	r3, r1
 8012c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c6e:	4619      	mov	r1, r3
 8012c70:	4b05      	ldr	r3, [pc, #20]	; (8012c88 <USB_DeactivateEndpoint+0x1b4>)
 8012c72:	4013      	ands	r3, r2
 8012c74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8012c76:	2300      	movs	r3, #0
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	3714      	adds	r7, #20
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c82:	4770      	bx	lr
 8012c84:	ec337800 	.word	0xec337800
 8012c88:	eff37800 	.word	0xeff37800

08012c8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012c8c:	b580      	push	{r7, lr}
 8012c8e:	b08a      	sub	sp, #40	; 0x28
 8012c90:	af02      	add	r7, sp, #8
 8012c92:	60f8      	str	r0, [r7, #12]
 8012c94:	60b9      	str	r1, [r7, #8]
 8012c96:	4613      	mov	r3, r2
 8012c98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8012c9e:	68bb      	ldr	r3, [r7, #8]
 8012ca0:	781b      	ldrb	r3, [r3, #0]
 8012ca2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012ca4:	68bb      	ldr	r3, [r7, #8]
 8012ca6:	785b      	ldrb	r3, [r3, #1]
 8012ca8:	2b01      	cmp	r3, #1
 8012caa:	f040 8181 	bne.w	8012fb0 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012cae:	68bb      	ldr	r3, [r7, #8]
 8012cb0:	691b      	ldr	r3, [r3, #16]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d132      	bne.n	8012d1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012cb6:	69bb      	ldr	r3, [r7, #24]
 8012cb8:	015a      	lsls	r2, r3, #5
 8012cba:	69fb      	ldr	r3, [r7, #28]
 8012cbc:	4413      	add	r3, r2
 8012cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cc2:	691a      	ldr	r2, [r3, #16]
 8012cc4:	69bb      	ldr	r3, [r7, #24]
 8012cc6:	0159      	lsls	r1, r3, #5
 8012cc8:	69fb      	ldr	r3, [r7, #28]
 8012cca:	440b      	add	r3, r1
 8012ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cd0:	4619      	mov	r1, r3
 8012cd2:	4ba5      	ldr	r3, [pc, #660]	; (8012f68 <USB_EPStartXfer+0x2dc>)
 8012cd4:	4013      	ands	r3, r2
 8012cd6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012cd8:	69bb      	ldr	r3, [r7, #24]
 8012cda:	015a      	lsls	r2, r3, #5
 8012cdc:	69fb      	ldr	r3, [r7, #28]
 8012cde:	4413      	add	r3, r2
 8012ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ce4:	691b      	ldr	r3, [r3, #16]
 8012ce6:	69ba      	ldr	r2, [r7, #24]
 8012ce8:	0151      	lsls	r1, r2, #5
 8012cea:	69fa      	ldr	r2, [r7, #28]
 8012cec:	440a      	add	r2, r1
 8012cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012cf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012cf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012cf8:	69bb      	ldr	r3, [r7, #24]
 8012cfa:	015a      	lsls	r2, r3, #5
 8012cfc:	69fb      	ldr	r3, [r7, #28]
 8012cfe:	4413      	add	r3, r2
 8012d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d04:	691a      	ldr	r2, [r3, #16]
 8012d06:	69bb      	ldr	r3, [r7, #24]
 8012d08:	0159      	lsls	r1, r3, #5
 8012d0a:	69fb      	ldr	r3, [r7, #28]
 8012d0c:	440b      	add	r3, r1
 8012d0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d12:	4619      	mov	r1, r3
 8012d14:	4b95      	ldr	r3, [pc, #596]	; (8012f6c <USB_EPStartXfer+0x2e0>)
 8012d16:	4013      	ands	r3, r2
 8012d18:	610b      	str	r3, [r1, #16]
 8012d1a:	e092      	b.n	8012e42 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012d1c:	69bb      	ldr	r3, [r7, #24]
 8012d1e:	015a      	lsls	r2, r3, #5
 8012d20:	69fb      	ldr	r3, [r7, #28]
 8012d22:	4413      	add	r3, r2
 8012d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d28:	691a      	ldr	r2, [r3, #16]
 8012d2a:	69bb      	ldr	r3, [r7, #24]
 8012d2c:	0159      	lsls	r1, r3, #5
 8012d2e:	69fb      	ldr	r3, [r7, #28]
 8012d30:	440b      	add	r3, r1
 8012d32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d36:	4619      	mov	r1, r3
 8012d38:	4b8c      	ldr	r3, [pc, #560]	; (8012f6c <USB_EPStartXfer+0x2e0>)
 8012d3a:	4013      	ands	r3, r2
 8012d3c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012d3e:	69bb      	ldr	r3, [r7, #24]
 8012d40:	015a      	lsls	r2, r3, #5
 8012d42:	69fb      	ldr	r3, [r7, #28]
 8012d44:	4413      	add	r3, r2
 8012d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d4a:	691a      	ldr	r2, [r3, #16]
 8012d4c:	69bb      	ldr	r3, [r7, #24]
 8012d4e:	0159      	lsls	r1, r3, #5
 8012d50:	69fb      	ldr	r3, [r7, #28]
 8012d52:	440b      	add	r3, r1
 8012d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d58:	4619      	mov	r1, r3
 8012d5a:	4b83      	ldr	r3, [pc, #524]	; (8012f68 <USB_EPStartXfer+0x2dc>)
 8012d5c:	4013      	ands	r3, r2
 8012d5e:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8012d60:	69bb      	ldr	r3, [r7, #24]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d11a      	bne.n	8012d9c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8012d66:	68bb      	ldr	r3, [r7, #8]
 8012d68:	691a      	ldr	r2, [r3, #16]
 8012d6a:	68bb      	ldr	r3, [r7, #8]
 8012d6c:	689b      	ldr	r3, [r3, #8]
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	d903      	bls.n	8012d7a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8012d72:	68bb      	ldr	r3, [r7, #8]
 8012d74:	689a      	ldr	r2, [r3, #8]
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012d7a:	69bb      	ldr	r3, [r7, #24]
 8012d7c:	015a      	lsls	r2, r3, #5
 8012d7e:	69fb      	ldr	r3, [r7, #28]
 8012d80:	4413      	add	r3, r2
 8012d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d86:	691b      	ldr	r3, [r3, #16]
 8012d88:	69ba      	ldr	r2, [r7, #24]
 8012d8a:	0151      	lsls	r1, r2, #5
 8012d8c:	69fa      	ldr	r2, [r7, #28]
 8012d8e:	440a      	add	r2, r1
 8012d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012d98:	6113      	str	r3, [r2, #16]
 8012d9a:	e01b      	b.n	8012dd4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012d9c:	69bb      	ldr	r3, [r7, #24]
 8012d9e:	015a      	lsls	r2, r3, #5
 8012da0:	69fb      	ldr	r3, [r7, #28]
 8012da2:	4413      	add	r3, r2
 8012da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012da8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8012daa:	68bb      	ldr	r3, [r7, #8]
 8012dac:	6919      	ldr	r1, [r3, #16]
 8012dae:	68bb      	ldr	r3, [r7, #8]
 8012db0:	689b      	ldr	r3, [r3, #8]
 8012db2:	440b      	add	r3, r1
 8012db4:	1e59      	subs	r1, r3, #1
 8012db6:	68bb      	ldr	r3, [r7, #8]
 8012db8:	689b      	ldr	r3, [r3, #8]
 8012dba:	fbb1 f3f3 	udiv	r3, r1, r3
 8012dbe:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8012dc0:	4b6b      	ldr	r3, [pc, #428]	; (8012f70 <USB_EPStartXfer+0x2e4>)
 8012dc2:	400b      	ands	r3, r1
 8012dc4:	69b9      	ldr	r1, [r7, #24]
 8012dc6:	0148      	lsls	r0, r1, #5
 8012dc8:	69f9      	ldr	r1, [r7, #28]
 8012dca:	4401      	add	r1, r0
 8012dcc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012dd0:	4313      	orrs	r3, r2
 8012dd2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012dd4:	69bb      	ldr	r3, [r7, #24]
 8012dd6:	015a      	lsls	r2, r3, #5
 8012dd8:	69fb      	ldr	r3, [r7, #28]
 8012dda:	4413      	add	r3, r2
 8012ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012de0:	691a      	ldr	r2, [r3, #16]
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	691b      	ldr	r3, [r3, #16]
 8012de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012dea:	69b9      	ldr	r1, [r7, #24]
 8012dec:	0148      	lsls	r0, r1, #5
 8012dee:	69f9      	ldr	r1, [r7, #28]
 8012df0:	4401      	add	r1, r0
 8012df2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012df6:	4313      	orrs	r3, r2
 8012df8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8012dfa:	68bb      	ldr	r3, [r7, #8]
 8012dfc:	791b      	ldrb	r3, [r3, #4]
 8012dfe:	2b01      	cmp	r3, #1
 8012e00:	d11f      	bne.n	8012e42 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012e02:	69bb      	ldr	r3, [r7, #24]
 8012e04:	015a      	lsls	r2, r3, #5
 8012e06:	69fb      	ldr	r3, [r7, #28]
 8012e08:	4413      	add	r3, r2
 8012e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e0e:	691b      	ldr	r3, [r3, #16]
 8012e10:	69ba      	ldr	r2, [r7, #24]
 8012e12:	0151      	lsls	r1, r2, #5
 8012e14:	69fa      	ldr	r2, [r7, #28]
 8012e16:	440a      	add	r2, r1
 8012e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e1c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012e20:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012e22:	69bb      	ldr	r3, [r7, #24]
 8012e24:	015a      	lsls	r2, r3, #5
 8012e26:	69fb      	ldr	r3, [r7, #28]
 8012e28:	4413      	add	r3, r2
 8012e2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e2e:	691b      	ldr	r3, [r3, #16]
 8012e30:	69ba      	ldr	r2, [r7, #24]
 8012e32:	0151      	lsls	r1, r2, #5
 8012e34:	69fa      	ldr	r2, [r7, #28]
 8012e36:	440a      	add	r2, r1
 8012e38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012e40:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8012e42:	79fb      	ldrb	r3, [r7, #7]
 8012e44:	2b01      	cmp	r3, #1
 8012e46:	d14b      	bne.n	8012ee0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012e48:	68bb      	ldr	r3, [r7, #8]
 8012e4a:	69db      	ldr	r3, [r3, #28]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d009      	beq.n	8012e64 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012e50:	69bb      	ldr	r3, [r7, #24]
 8012e52:	015a      	lsls	r2, r3, #5
 8012e54:	69fb      	ldr	r3, [r7, #28]
 8012e56:	4413      	add	r3, r2
 8012e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e5c:	461a      	mov	r2, r3
 8012e5e:	68bb      	ldr	r3, [r7, #8]
 8012e60:	69db      	ldr	r3, [r3, #28]
 8012e62:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8012e64:	68bb      	ldr	r3, [r7, #8]
 8012e66:	791b      	ldrb	r3, [r3, #4]
 8012e68:	2b01      	cmp	r3, #1
 8012e6a:	d128      	bne.n	8012ebe <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012e6c:	69fb      	ldr	r3, [r7, #28]
 8012e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e72:	689b      	ldr	r3, [r3, #8]
 8012e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d110      	bne.n	8012e9e <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012e7c:	69bb      	ldr	r3, [r7, #24]
 8012e7e:	015a      	lsls	r2, r3, #5
 8012e80:	69fb      	ldr	r3, [r7, #28]
 8012e82:	4413      	add	r3, r2
 8012e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	69ba      	ldr	r2, [r7, #24]
 8012e8c:	0151      	lsls	r1, r2, #5
 8012e8e:	69fa      	ldr	r2, [r7, #28]
 8012e90:	440a      	add	r2, r1
 8012e92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012e9a:	6013      	str	r3, [r2, #0]
 8012e9c:	e00f      	b.n	8012ebe <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012e9e:	69bb      	ldr	r3, [r7, #24]
 8012ea0:	015a      	lsls	r2, r3, #5
 8012ea2:	69fb      	ldr	r3, [r7, #28]
 8012ea4:	4413      	add	r3, r2
 8012ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	69ba      	ldr	r2, [r7, #24]
 8012eae:	0151      	lsls	r1, r2, #5
 8012eb0:	69fa      	ldr	r2, [r7, #28]
 8012eb2:	440a      	add	r2, r1
 8012eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012ebc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012ebe:	69bb      	ldr	r3, [r7, #24]
 8012ec0:	015a      	lsls	r2, r3, #5
 8012ec2:	69fb      	ldr	r3, [r7, #28]
 8012ec4:	4413      	add	r3, r2
 8012ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	69ba      	ldr	r2, [r7, #24]
 8012ece:	0151      	lsls	r1, r2, #5
 8012ed0:	69fa      	ldr	r2, [r7, #28]
 8012ed2:	440a      	add	r2, r1
 8012ed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ed8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012edc:	6013      	str	r3, [r2, #0]
 8012ede:	e16a      	b.n	80131b6 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012ee0:	69bb      	ldr	r3, [r7, #24]
 8012ee2:	015a      	lsls	r2, r3, #5
 8012ee4:	69fb      	ldr	r3, [r7, #28]
 8012ee6:	4413      	add	r3, r2
 8012ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	69ba      	ldr	r2, [r7, #24]
 8012ef0:	0151      	lsls	r1, r2, #5
 8012ef2:	69fa      	ldr	r2, [r7, #28]
 8012ef4:	440a      	add	r2, r1
 8012ef6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012efa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012efe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012f00:	68bb      	ldr	r3, [r7, #8]
 8012f02:	791b      	ldrb	r3, [r3, #4]
 8012f04:	2b01      	cmp	r3, #1
 8012f06:	d015      	beq.n	8012f34 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012f08:	68bb      	ldr	r3, [r7, #8]
 8012f0a:	691b      	ldr	r3, [r3, #16]
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	f000 8152 	beq.w	80131b6 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012f12:	69fb      	ldr	r3, [r7, #28]
 8012f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012f1a:	68bb      	ldr	r3, [r7, #8]
 8012f1c:	781b      	ldrb	r3, [r3, #0]
 8012f1e:	f003 030f 	and.w	r3, r3, #15
 8012f22:	2101      	movs	r1, #1
 8012f24:	fa01 f303 	lsl.w	r3, r1, r3
 8012f28:	69f9      	ldr	r1, [r7, #28]
 8012f2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012f2e:	4313      	orrs	r3, r2
 8012f30:	634b      	str	r3, [r1, #52]	; 0x34
 8012f32:	e140      	b.n	80131b6 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012f34:	69fb      	ldr	r3, [r7, #28]
 8012f36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f3a:	689b      	ldr	r3, [r3, #8]
 8012f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d117      	bne.n	8012f74 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012f44:	69bb      	ldr	r3, [r7, #24]
 8012f46:	015a      	lsls	r2, r3, #5
 8012f48:	69fb      	ldr	r3, [r7, #28]
 8012f4a:	4413      	add	r3, r2
 8012f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	69ba      	ldr	r2, [r7, #24]
 8012f54:	0151      	lsls	r1, r2, #5
 8012f56:	69fa      	ldr	r2, [r7, #28]
 8012f58:	440a      	add	r2, r1
 8012f5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012f62:	6013      	str	r3, [r2, #0]
 8012f64:	e016      	b.n	8012f94 <USB_EPStartXfer+0x308>
 8012f66:	bf00      	nop
 8012f68:	e007ffff 	.word	0xe007ffff
 8012f6c:	fff80000 	.word	0xfff80000
 8012f70:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012f74:	69bb      	ldr	r3, [r7, #24]
 8012f76:	015a      	lsls	r2, r3, #5
 8012f78:	69fb      	ldr	r3, [r7, #28]
 8012f7a:	4413      	add	r3, r2
 8012f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	69ba      	ldr	r2, [r7, #24]
 8012f84:	0151      	lsls	r1, r2, #5
 8012f86:	69fa      	ldr	r2, [r7, #28]
 8012f88:	440a      	add	r2, r1
 8012f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012f92:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8012f94:	68bb      	ldr	r3, [r7, #8]
 8012f96:	68d9      	ldr	r1, [r3, #12]
 8012f98:	68bb      	ldr	r3, [r7, #8]
 8012f9a:	781a      	ldrb	r2, [r3, #0]
 8012f9c:	68bb      	ldr	r3, [r7, #8]
 8012f9e:	691b      	ldr	r3, [r3, #16]
 8012fa0:	b298      	uxth	r0, r3
 8012fa2:	79fb      	ldrb	r3, [r7, #7]
 8012fa4:	9300      	str	r3, [sp, #0]
 8012fa6:	4603      	mov	r3, r0
 8012fa8:	68f8      	ldr	r0, [r7, #12]
 8012faa:	f000 f9b9 	bl	8013320 <USB_WritePacket>
 8012fae:	e102      	b.n	80131b6 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012fb0:	69bb      	ldr	r3, [r7, #24]
 8012fb2:	015a      	lsls	r2, r3, #5
 8012fb4:	69fb      	ldr	r3, [r7, #28]
 8012fb6:	4413      	add	r3, r2
 8012fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fbc:	691a      	ldr	r2, [r3, #16]
 8012fbe:	69bb      	ldr	r3, [r7, #24]
 8012fc0:	0159      	lsls	r1, r3, #5
 8012fc2:	69fb      	ldr	r3, [r7, #28]
 8012fc4:	440b      	add	r3, r1
 8012fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fca:	4619      	mov	r1, r3
 8012fcc:	4b7c      	ldr	r3, [pc, #496]	; (80131c0 <USB_EPStartXfer+0x534>)
 8012fce:	4013      	ands	r3, r2
 8012fd0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012fd2:	69bb      	ldr	r3, [r7, #24]
 8012fd4:	015a      	lsls	r2, r3, #5
 8012fd6:	69fb      	ldr	r3, [r7, #28]
 8012fd8:	4413      	add	r3, r2
 8012fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fde:	691a      	ldr	r2, [r3, #16]
 8012fe0:	69bb      	ldr	r3, [r7, #24]
 8012fe2:	0159      	lsls	r1, r3, #5
 8012fe4:	69fb      	ldr	r3, [r7, #28]
 8012fe6:	440b      	add	r3, r1
 8012fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012fec:	4619      	mov	r1, r3
 8012fee:	4b75      	ldr	r3, [pc, #468]	; (80131c4 <USB_EPStartXfer+0x538>)
 8012ff0:	4013      	ands	r3, r2
 8012ff2:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8012ff4:	69bb      	ldr	r3, [r7, #24]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d12f      	bne.n	801305a <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8012ffa:	68bb      	ldr	r3, [r7, #8]
 8012ffc:	691b      	ldr	r3, [r3, #16]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d003      	beq.n	801300a <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	689a      	ldr	r2, [r3, #8]
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 801300a:	68bb      	ldr	r3, [r7, #8]
 801300c:	689a      	ldr	r2, [r3, #8]
 801300e:	68bb      	ldr	r3, [r7, #8]
 8013010:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013012:	69bb      	ldr	r3, [r7, #24]
 8013014:	015a      	lsls	r2, r3, #5
 8013016:	69fb      	ldr	r3, [r7, #28]
 8013018:	4413      	add	r3, r2
 801301a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801301e:	691a      	ldr	r2, [r3, #16]
 8013020:	68bb      	ldr	r3, [r7, #8]
 8013022:	6a1b      	ldr	r3, [r3, #32]
 8013024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013028:	69b9      	ldr	r1, [r7, #24]
 801302a:	0148      	lsls	r0, r1, #5
 801302c:	69f9      	ldr	r1, [r7, #28]
 801302e:	4401      	add	r1, r0
 8013030:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013034:	4313      	orrs	r3, r2
 8013036:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013038:	69bb      	ldr	r3, [r7, #24]
 801303a:	015a      	lsls	r2, r3, #5
 801303c:	69fb      	ldr	r3, [r7, #28]
 801303e:	4413      	add	r3, r2
 8013040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013044:	691b      	ldr	r3, [r3, #16]
 8013046:	69ba      	ldr	r2, [r7, #24]
 8013048:	0151      	lsls	r1, r2, #5
 801304a:	69fa      	ldr	r2, [r7, #28]
 801304c:	440a      	add	r2, r1
 801304e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013052:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013056:	6113      	str	r3, [r2, #16]
 8013058:	e05f      	b.n	801311a <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 801305a:	68bb      	ldr	r3, [r7, #8]
 801305c:	691b      	ldr	r3, [r3, #16]
 801305e:	2b00      	cmp	r3, #0
 8013060:	d123      	bne.n	80130aa <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013062:	69bb      	ldr	r3, [r7, #24]
 8013064:	015a      	lsls	r2, r3, #5
 8013066:	69fb      	ldr	r3, [r7, #28]
 8013068:	4413      	add	r3, r2
 801306a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801306e:	691a      	ldr	r2, [r3, #16]
 8013070:	68bb      	ldr	r3, [r7, #8]
 8013072:	689b      	ldr	r3, [r3, #8]
 8013074:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013078:	69b9      	ldr	r1, [r7, #24]
 801307a:	0148      	lsls	r0, r1, #5
 801307c:	69f9      	ldr	r1, [r7, #28]
 801307e:	4401      	add	r1, r0
 8013080:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013084:	4313      	orrs	r3, r2
 8013086:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013088:	69bb      	ldr	r3, [r7, #24]
 801308a:	015a      	lsls	r2, r3, #5
 801308c:	69fb      	ldr	r3, [r7, #28]
 801308e:	4413      	add	r3, r2
 8013090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013094:	691b      	ldr	r3, [r3, #16]
 8013096:	69ba      	ldr	r2, [r7, #24]
 8013098:	0151      	lsls	r1, r2, #5
 801309a:	69fa      	ldr	r2, [r7, #28]
 801309c:	440a      	add	r2, r1
 801309e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80130a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80130a6:	6113      	str	r3, [r2, #16]
 80130a8:	e037      	b.n	801311a <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80130aa:	68bb      	ldr	r3, [r7, #8]
 80130ac:	691a      	ldr	r2, [r3, #16]
 80130ae:	68bb      	ldr	r3, [r7, #8]
 80130b0:	689b      	ldr	r3, [r3, #8]
 80130b2:	4413      	add	r3, r2
 80130b4:	1e5a      	subs	r2, r3, #1
 80130b6:	68bb      	ldr	r3, [r7, #8]
 80130b8:	689b      	ldr	r3, [r3, #8]
 80130ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80130be:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80130c0:	68bb      	ldr	r3, [r7, #8]
 80130c2:	689b      	ldr	r3, [r3, #8]
 80130c4:	8afa      	ldrh	r2, [r7, #22]
 80130c6:	fb03 f202 	mul.w	r2, r3, r2
 80130ca:	68bb      	ldr	r3, [r7, #8]
 80130cc:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80130ce:	69bb      	ldr	r3, [r7, #24]
 80130d0:	015a      	lsls	r2, r3, #5
 80130d2:	69fb      	ldr	r3, [r7, #28]
 80130d4:	4413      	add	r3, r2
 80130d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130da:	691a      	ldr	r2, [r3, #16]
 80130dc:	8afb      	ldrh	r3, [r7, #22]
 80130de:	04d9      	lsls	r1, r3, #19
 80130e0:	4b39      	ldr	r3, [pc, #228]	; (80131c8 <USB_EPStartXfer+0x53c>)
 80130e2:	400b      	ands	r3, r1
 80130e4:	69b9      	ldr	r1, [r7, #24]
 80130e6:	0148      	lsls	r0, r1, #5
 80130e8:	69f9      	ldr	r1, [r7, #28]
 80130ea:	4401      	add	r1, r0
 80130ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80130f0:	4313      	orrs	r3, r2
 80130f2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80130f4:	69bb      	ldr	r3, [r7, #24]
 80130f6:	015a      	lsls	r2, r3, #5
 80130f8:	69fb      	ldr	r3, [r7, #28]
 80130fa:	4413      	add	r3, r2
 80130fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013100:	691a      	ldr	r2, [r3, #16]
 8013102:	68bb      	ldr	r3, [r7, #8]
 8013104:	6a1b      	ldr	r3, [r3, #32]
 8013106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801310a:	69b9      	ldr	r1, [r7, #24]
 801310c:	0148      	lsls	r0, r1, #5
 801310e:	69f9      	ldr	r1, [r7, #28]
 8013110:	4401      	add	r1, r0
 8013112:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013116:	4313      	orrs	r3, r2
 8013118:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801311a:	79fb      	ldrb	r3, [r7, #7]
 801311c:	2b01      	cmp	r3, #1
 801311e:	d10d      	bne.n	801313c <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	68db      	ldr	r3, [r3, #12]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d009      	beq.n	801313c <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	68d9      	ldr	r1, [r3, #12]
 801312c:	69bb      	ldr	r3, [r7, #24]
 801312e:	015a      	lsls	r2, r3, #5
 8013130:	69fb      	ldr	r3, [r7, #28]
 8013132:	4413      	add	r3, r2
 8013134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013138:	460a      	mov	r2, r1
 801313a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801313c:	68bb      	ldr	r3, [r7, #8]
 801313e:	791b      	ldrb	r3, [r3, #4]
 8013140:	2b01      	cmp	r3, #1
 8013142:	d128      	bne.n	8013196 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013144:	69fb      	ldr	r3, [r7, #28]
 8013146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801314a:	689b      	ldr	r3, [r3, #8]
 801314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013150:	2b00      	cmp	r3, #0
 8013152:	d110      	bne.n	8013176 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013154:	69bb      	ldr	r3, [r7, #24]
 8013156:	015a      	lsls	r2, r3, #5
 8013158:	69fb      	ldr	r3, [r7, #28]
 801315a:	4413      	add	r3, r2
 801315c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	69ba      	ldr	r2, [r7, #24]
 8013164:	0151      	lsls	r1, r2, #5
 8013166:	69fa      	ldr	r2, [r7, #28]
 8013168:	440a      	add	r2, r1
 801316a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801316e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013172:	6013      	str	r3, [r2, #0]
 8013174:	e00f      	b.n	8013196 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013176:	69bb      	ldr	r3, [r7, #24]
 8013178:	015a      	lsls	r2, r3, #5
 801317a:	69fb      	ldr	r3, [r7, #28]
 801317c:	4413      	add	r3, r2
 801317e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	69ba      	ldr	r2, [r7, #24]
 8013186:	0151      	lsls	r1, r2, #5
 8013188:	69fa      	ldr	r2, [r7, #28]
 801318a:	440a      	add	r2, r1
 801318c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013194:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013196:	69bb      	ldr	r3, [r7, #24]
 8013198:	015a      	lsls	r2, r3, #5
 801319a:	69fb      	ldr	r3, [r7, #28]
 801319c:	4413      	add	r3, r2
 801319e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	69ba      	ldr	r2, [r7, #24]
 80131a6:	0151      	lsls	r1, r2, #5
 80131a8:	69fa      	ldr	r2, [r7, #28]
 80131aa:	440a      	add	r2, r1
 80131ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80131b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80131b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80131b6:	2300      	movs	r3, #0
}
 80131b8:	4618      	mov	r0, r3
 80131ba:	3720      	adds	r7, #32
 80131bc:	46bd      	mov	sp, r7
 80131be:	bd80      	pop	{r7, pc}
 80131c0:	fff80000 	.word	0xfff80000
 80131c4:	e007ffff 	.word	0xe007ffff
 80131c8:	1ff80000 	.word	0x1ff80000

080131cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80131cc:	b480      	push	{r7}
 80131ce:	b087      	sub	sp, #28
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
 80131d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80131d6:	2300      	movs	r3, #0
 80131d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80131da:	2300      	movs	r3, #0
 80131dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	785b      	ldrb	r3, [r3, #1]
 80131e6:	2b01      	cmp	r3, #1
 80131e8:	d14a      	bne.n	8013280 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80131ea:	683b      	ldr	r3, [r7, #0]
 80131ec:	781b      	ldrb	r3, [r3, #0]
 80131ee:	015a      	lsls	r2, r3, #5
 80131f0:	693b      	ldr	r3, [r7, #16]
 80131f2:	4413      	add	r3, r2
 80131f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80131fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013202:	f040 8086 	bne.w	8013312 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013206:	683b      	ldr	r3, [r7, #0]
 8013208:	781b      	ldrb	r3, [r3, #0]
 801320a:	015a      	lsls	r2, r3, #5
 801320c:	693b      	ldr	r3, [r7, #16]
 801320e:	4413      	add	r3, r2
 8013210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	683a      	ldr	r2, [r7, #0]
 8013218:	7812      	ldrb	r2, [r2, #0]
 801321a:	0151      	lsls	r1, r2, #5
 801321c:	693a      	ldr	r2, [r7, #16]
 801321e:	440a      	add	r2, r1
 8013220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013224:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013228:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 801322a:	683b      	ldr	r3, [r7, #0]
 801322c:	781b      	ldrb	r3, [r3, #0]
 801322e:	015a      	lsls	r2, r3, #5
 8013230:	693b      	ldr	r3, [r7, #16]
 8013232:	4413      	add	r3, r2
 8013234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013238:	681b      	ldr	r3, [r3, #0]
 801323a:	683a      	ldr	r2, [r7, #0]
 801323c:	7812      	ldrb	r2, [r2, #0]
 801323e:	0151      	lsls	r1, r2, #5
 8013240:	693a      	ldr	r2, [r7, #16]
 8013242:	440a      	add	r2, r1
 8013244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013248:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801324c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	3301      	adds	r3, #1
 8013252:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	f242 7210 	movw	r2, #10000	; 0x2710
 801325a:	4293      	cmp	r3, r2
 801325c:	d902      	bls.n	8013264 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801325e:	2301      	movs	r3, #1
 8013260:	75fb      	strb	r3, [r7, #23]
          break;
 8013262:	e056      	b.n	8013312 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8013264:	683b      	ldr	r3, [r7, #0]
 8013266:	781b      	ldrb	r3, [r3, #0]
 8013268:	015a      	lsls	r2, r3, #5
 801326a:	693b      	ldr	r3, [r7, #16]
 801326c:	4413      	add	r3, r2
 801326e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801327c:	d0e7      	beq.n	801324e <USB_EPStopXfer+0x82>
 801327e:	e048      	b.n	8013312 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	781b      	ldrb	r3, [r3, #0]
 8013284:	015a      	lsls	r2, r3, #5
 8013286:	693b      	ldr	r3, [r7, #16]
 8013288:	4413      	add	r3, r2
 801328a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013298:	d13b      	bne.n	8013312 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801329a:	683b      	ldr	r3, [r7, #0]
 801329c:	781b      	ldrb	r3, [r3, #0]
 801329e:	015a      	lsls	r2, r3, #5
 80132a0:	693b      	ldr	r3, [r7, #16]
 80132a2:	4413      	add	r3, r2
 80132a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	683a      	ldr	r2, [r7, #0]
 80132ac:	7812      	ldrb	r2, [r2, #0]
 80132ae:	0151      	lsls	r1, r2, #5
 80132b0:	693a      	ldr	r2, [r7, #16]
 80132b2:	440a      	add	r2, r1
 80132b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80132b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80132bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80132be:	683b      	ldr	r3, [r7, #0]
 80132c0:	781b      	ldrb	r3, [r3, #0]
 80132c2:	015a      	lsls	r2, r3, #5
 80132c4:	693b      	ldr	r3, [r7, #16]
 80132c6:	4413      	add	r3, r2
 80132c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	683a      	ldr	r2, [r7, #0]
 80132d0:	7812      	ldrb	r2, [r2, #0]
 80132d2:	0151      	lsls	r1, r2, #5
 80132d4:	693a      	ldr	r2, [r7, #16]
 80132d6:	440a      	add	r2, r1
 80132d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80132dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80132e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	3301      	adds	r3, #1
 80132e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80132ee:	4293      	cmp	r3, r2
 80132f0:	d902      	bls.n	80132f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80132f2:	2301      	movs	r3, #1
 80132f4:	75fb      	strb	r3, [r7, #23]
          break;
 80132f6:	e00c      	b.n	8013312 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	781b      	ldrb	r3, [r3, #0]
 80132fc:	015a      	lsls	r2, r3, #5
 80132fe:	693b      	ldr	r3, [r7, #16]
 8013300:	4413      	add	r3, r2
 8013302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013306:	681b      	ldr	r3, [r3, #0]
 8013308:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801330c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013310:	d0e7      	beq.n	80132e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8013312:	7dfb      	ldrb	r3, [r7, #23]
}
 8013314:	4618      	mov	r0, r3
 8013316:	371c      	adds	r7, #28
 8013318:	46bd      	mov	sp, r7
 801331a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331e:	4770      	bx	lr

08013320 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013320:	b480      	push	{r7}
 8013322:	b089      	sub	sp, #36	; 0x24
 8013324:	af00      	add	r7, sp, #0
 8013326:	60f8      	str	r0, [r7, #12]
 8013328:	60b9      	str	r1, [r7, #8]
 801332a:	4611      	mov	r1, r2
 801332c:	461a      	mov	r2, r3
 801332e:	460b      	mov	r3, r1
 8013330:	71fb      	strb	r3, [r7, #7]
 8013332:	4613      	mov	r3, r2
 8013334:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801333a:	68bb      	ldr	r3, [r7, #8]
 801333c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801333e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013342:	2b00      	cmp	r3, #0
 8013344:	d123      	bne.n	801338e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013346:	88bb      	ldrh	r3, [r7, #4]
 8013348:	3303      	adds	r3, #3
 801334a:	089b      	lsrs	r3, r3, #2
 801334c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801334e:	2300      	movs	r3, #0
 8013350:	61bb      	str	r3, [r7, #24]
 8013352:	e018      	b.n	8013386 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013354:	79fb      	ldrb	r3, [r7, #7]
 8013356:	031a      	lsls	r2, r3, #12
 8013358:	697b      	ldr	r3, [r7, #20]
 801335a:	4413      	add	r3, r2
 801335c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013360:	461a      	mov	r2, r3
 8013362:	69fb      	ldr	r3, [r7, #28]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	6013      	str	r3, [r2, #0]
      pSrc++;
 8013368:	69fb      	ldr	r3, [r7, #28]
 801336a:	3301      	adds	r3, #1
 801336c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801336e:	69fb      	ldr	r3, [r7, #28]
 8013370:	3301      	adds	r3, #1
 8013372:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8013374:	69fb      	ldr	r3, [r7, #28]
 8013376:	3301      	adds	r3, #1
 8013378:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801337a:	69fb      	ldr	r3, [r7, #28]
 801337c:	3301      	adds	r3, #1
 801337e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8013380:	69bb      	ldr	r3, [r7, #24]
 8013382:	3301      	adds	r3, #1
 8013384:	61bb      	str	r3, [r7, #24]
 8013386:	69ba      	ldr	r2, [r7, #24]
 8013388:	693b      	ldr	r3, [r7, #16]
 801338a:	429a      	cmp	r2, r3
 801338c:	d3e2      	bcc.n	8013354 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801338e:	2300      	movs	r3, #0
}
 8013390:	4618      	mov	r0, r3
 8013392:	3724      	adds	r7, #36	; 0x24
 8013394:	46bd      	mov	sp, r7
 8013396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339a:	4770      	bx	lr

0801339c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801339c:	b480      	push	{r7}
 801339e:	b08b      	sub	sp, #44	; 0x2c
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	60f8      	str	r0, [r7, #12]
 80133a4:	60b9      	str	r1, [r7, #8]
 80133a6:	4613      	mov	r3, r2
 80133a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133aa:	68fb      	ldr	r3, [r7, #12]
 80133ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80133ae:	68bb      	ldr	r3, [r7, #8]
 80133b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80133b2:	88fb      	ldrh	r3, [r7, #6]
 80133b4:	089b      	lsrs	r3, r3, #2
 80133b6:	b29b      	uxth	r3, r3
 80133b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80133ba:	88fb      	ldrh	r3, [r7, #6]
 80133bc:	f003 0303 	and.w	r3, r3, #3
 80133c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80133c2:	2300      	movs	r3, #0
 80133c4:	623b      	str	r3, [r7, #32]
 80133c6:	e014      	b.n	80133f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80133c8:	69bb      	ldr	r3, [r7, #24]
 80133ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80133ce:	681a      	ldr	r2, [r3, #0]
 80133d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80133d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133d6:	3301      	adds	r3, #1
 80133d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80133da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133dc:	3301      	adds	r3, #1
 80133de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80133e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133e2:	3301      	adds	r3, #1
 80133e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80133e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133e8:	3301      	adds	r3, #1
 80133ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80133ec:	6a3b      	ldr	r3, [r7, #32]
 80133ee:	3301      	adds	r3, #1
 80133f0:	623b      	str	r3, [r7, #32]
 80133f2:	6a3a      	ldr	r2, [r7, #32]
 80133f4:	697b      	ldr	r3, [r7, #20]
 80133f6:	429a      	cmp	r2, r3
 80133f8:	d3e6      	bcc.n	80133c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80133fa:	8bfb      	ldrh	r3, [r7, #30]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d01e      	beq.n	801343e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013400:	2300      	movs	r3, #0
 8013402:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013404:	69bb      	ldr	r3, [r7, #24]
 8013406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801340a:	461a      	mov	r2, r3
 801340c:	f107 0310 	add.w	r3, r7, #16
 8013410:	6812      	ldr	r2, [r2, #0]
 8013412:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013414:	693a      	ldr	r2, [r7, #16]
 8013416:	6a3b      	ldr	r3, [r7, #32]
 8013418:	b2db      	uxtb	r3, r3
 801341a:	00db      	lsls	r3, r3, #3
 801341c:	fa22 f303 	lsr.w	r3, r2, r3
 8013420:	b2da      	uxtb	r2, r3
 8013422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013424:	701a      	strb	r2, [r3, #0]
      i++;
 8013426:	6a3b      	ldr	r3, [r7, #32]
 8013428:	3301      	adds	r3, #1
 801342a:	623b      	str	r3, [r7, #32]
      pDest++;
 801342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801342e:	3301      	adds	r3, #1
 8013430:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013432:	8bfb      	ldrh	r3, [r7, #30]
 8013434:	3b01      	subs	r3, #1
 8013436:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013438:	8bfb      	ldrh	r3, [r7, #30]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d1ea      	bne.n	8013414 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013440:	4618      	mov	r0, r3
 8013442:	372c      	adds	r7, #44	; 0x2c
 8013444:	46bd      	mov	sp, r7
 8013446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801344a:	4770      	bx	lr

0801344c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801344c:	b480      	push	{r7}
 801344e:	b085      	sub	sp, #20
 8013450:	af00      	add	r7, sp, #0
 8013452:	6078      	str	r0, [r7, #4]
 8013454:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801345a:	683b      	ldr	r3, [r7, #0]
 801345c:	781b      	ldrb	r3, [r3, #0]
 801345e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	785b      	ldrb	r3, [r3, #1]
 8013464:	2b01      	cmp	r3, #1
 8013466:	d12c      	bne.n	80134c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013468:	68bb      	ldr	r3, [r7, #8]
 801346a:	015a      	lsls	r2, r3, #5
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	4413      	add	r3, r2
 8013470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	2b00      	cmp	r3, #0
 8013478:	db12      	blt.n	80134a0 <USB_EPSetStall+0x54>
 801347a:	68bb      	ldr	r3, [r7, #8]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d00f      	beq.n	80134a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013480:	68bb      	ldr	r3, [r7, #8]
 8013482:	015a      	lsls	r2, r3, #5
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	4413      	add	r3, r2
 8013488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801348c:	681b      	ldr	r3, [r3, #0]
 801348e:	68ba      	ldr	r2, [r7, #8]
 8013490:	0151      	lsls	r1, r2, #5
 8013492:	68fa      	ldr	r2, [r7, #12]
 8013494:	440a      	add	r2, r1
 8013496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801349a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801349e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80134a0:	68bb      	ldr	r3, [r7, #8]
 80134a2:	015a      	lsls	r2, r3, #5
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	4413      	add	r3, r2
 80134a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	68ba      	ldr	r2, [r7, #8]
 80134b0:	0151      	lsls	r1, r2, #5
 80134b2:	68fa      	ldr	r2, [r7, #12]
 80134b4:	440a      	add	r2, r1
 80134b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80134be:	6013      	str	r3, [r2, #0]
 80134c0:	e02b      	b.n	801351a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80134c2:	68bb      	ldr	r3, [r7, #8]
 80134c4:	015a      	lsls	r2, r3, #5
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	4413      	add	r3, r2
 80134ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	db12      	blt.n	80134fa <USB_EPSetStall+0xae>
 80134d4:	68bb      	ldr	r3, [r7, #8]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d00f      	beq.n	80134fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80134da:	68bb      	ldr	r3, [r7, #8]
 80134dc:	015a      	lsls	r2, r3, #5
 80134de:	68fb      	ldr	r3, [r7, #12]
 80134e0:	4413      	add	r3, r2
 80134e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80134e6:	681b      	ldr	r3, [r3, #0]
 80134e8:	68ba      	ldr	r2, [r7, #8]
 80134ea:	0151      	lsls	r1, r2, #5
 80134ec:	68fa      	ldr	r2, [r7, #12]
 80134ee:	440a      	add	r2, r1
 80134f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80134f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80134f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80134fa:	68bb      	ldr	r3, [r7, #8]
 80134fc:	015a      	lsls	r2, r3, #5
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	4413      	add	r3, r2
 8013502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	68ba      	ldr	r2, [r7, #8]
 801350a:	0151      	lsls	r1, r2, #5
 801350c:	68fa      	ldr	r2, [r7, #12]
 801350e:	440a      	add	r2, r1
 8013510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013514:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013518:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801351a:	2300      	movs	r3, #0
}
 801351c:	4618      	mov	r0, r3
 801351e:	3714      	adds	r7, #20
 8013520:	46bd      	mov	sp, r7
 8013522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013526:	4770      	bx	lr

08013528 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013528:	b480      	push	{r7}
 801352a:	b085      	sub	sp, #20
 801352c:	af00      	add	r7, sp, #0
 801352e:	6078      	str	r0, [r7, #4]
 8013530:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	781b      	ldrb	r3, [r3, #0]
 801353a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801353c:	683b      	ldr	r3, [r7, #0]
 801353e:	785b      	ldrb	r3, [r3, #1]
 8013540:	2b01      	cmp	r3, #1
 8013542:	d128      	bne.n	8013596 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	015a      	lsls	r2, r3, #5
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	4413      	add	r3, r2
 801354c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	68ba      	ldr	r2, [r7, #8]
 8013554:	0151      	lsls	r1, r2, #5
 8013556:	68fa      	ldr	r2, [r7, #12]
 8013558:	440a      	add	r2, r1
 801355a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801355e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013562:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013564:	683b      	ldr	r3, [r7, #0]
 8013566:	791b      	ldrb	r3, [r3, #4]
 8013568:	2b03      	cmp	r3, #3
 801356a:	d003      	beq.n	8013574 <USB_EPClearStall+0x4c>
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	791b      	ldrb	r3, [r3, #4]
 8013570:	2b02      	cmp	r3, #2
 8013572:	d138      	bne.n	80135e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013574:	68bb      	ldr	r3, [r7, #8]
 8013576:	015a      	lsls	r2, r3, #5
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	4413      	add	r3, r2
 801357c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013580:	681b      	ldr	r3, [r3, #0]
 8013582:	68ba      	ldr	r2, [r7, #8]
 8013584:	0151      	lsls	r1, r2, #5
 8013586:	68fa      	ldr	r2, [r7, #12]
 8013588:	440a      	add	r2, r1
 801358a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801358e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013592:	6013      	str	r3, [r2, #0]
 8013594:	e027      	b.n	80135e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013596:	68bb      	ldr	r3, [r7, #8]
 8013598:	015a      	lsls	r2, r3, #5
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	4413      	add	r3, r2
 801359e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135a2:	681b      	ldr	r3, [r3, #0]
 80135a4:	68ba      	ldr	r2, [r7, #8]
 80135a6:	0151      	lsls	r1, r2, #5
 80135a8:	68fa      	ldr	r2, [r7, #12]
 80135aa:	440a      	add	r2, r1
 80135ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80135b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80135b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	791b      	ldrb	r3, [r3, #4]
 80135ba:	2b03      	cmp	r3, #3
 80135bc:	d003      	beq.n	80135c6 <USB_EPClearStall+0x9e>
 80135be:	683b      	ldr	r3, [r7, #0]
 80135c0:	791b      	ldrb	r3, [r3, #4]
 80135c2:	2b02      	cmp	r3, #2
 80135c4:	d10f      	bne.n	80135e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80135c6:	68bb      	ldr	r3, [r7, #8]
 80135c8:	015a      	lsls	r2, r3, #5
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	4413      	add	r3, r2
 80135ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	68ba      	ldr	r2, [r7, #8]
 80135d6:	0151      	lsls	r1, r2, #5
 80135d8:	68fa      	ldr	r2, [r7, #12]
 80135da:	440a      	add	r2, r1
 80135dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80135e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80135e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80135e6:	2300      	movs	r3, #0
}
 80135e8:	4618      	mov	r0, r3
 80135ea:	3714      	adds	r7, #20
 80135ec:	46bd      	mov	sp, r7
 80135ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f2:	4770      	bx	lr

080135f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80135f4:	b480      	push	{r7}
 80135f6:	b085      	sub	sp, #20
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	460b      	mov	r3, r1
 80135fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	68fa      	ldr	r2, [r7, #12]
 801360e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013612:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013616:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801361e:	681a      	ldr	r2, [r3, #0]
 8013620:	78fb      	ldrb	r3, [r7, #3]
 8013622:	011b      	lsls	r3, r3, #4
 8013624:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013628:	68f9      	ldr	r1, [r7, #12]
 801362a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801362e:	4313      	orrs	r3, r2
 8013630:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013632:	2300      	movs	r3, #0
}
 8013634:	4618      	mov	r0, r3
 8013636:	3714      	adds	r7, #20
 8013638:	46bd      	mov	sp, r7
 801363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801363e:	4770      	bx	lr

08013640 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013640:	b480      	push	{r7}
 8013642:	b085      	sub	sp, #20
 8013644:	af00      	add	r7, sp, #0
 8013646:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	68fa      	ldr	r2, [r7, #12]
 8013656:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801365a:	f023 0303 	bic.w	r3, r3, #3
 801365e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013660:	68fb      	ldr	r3, [r7, #12]
 8013662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013666:	685b      	ldr	r3, [r3, #4]
 8013668:	68fa      	ldr	r2, [r7, #12]
 801366a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801366e:	f023 0302 	bic.w	r3, r3, #2
 8013672:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013674:	2300      	movs	r3, #0
}
 8013676:	4618      	mov	r0, r3
 8013678:	3714      	adds	r7, #20
 801367a:	46bd      	mov	sp, r7
 801367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013680:	4770      	bx	lr

08013682 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013682:	b480      	push	{r7}
 8013684:	b085      	sub	sp, #20
 8013686:	af00      	add	r7, sp, #0
 8013688:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	68fa      	ldr	r2, [r7, #12]
 8013698:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801369c:	f023 0303 	bic.w	r3, r3, #3
 80136a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80136a2:	68fb      	ldr	r3, [r7, #12]
 80136a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136a8:	685b      	ldr	r3, [r3, #4]
 80136aa:	68fa      	ldr	r2, [r7, #12]
 80136ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80136b0:	f043 0302 	orr.w	r3, r3, #2
 80136b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80136b6:	2300      	movs	r3, #0
}
 80136b8:	4618      	mov	r0, r3
 80136ba:	3714      	adds	r7, #20
 80136bc:	46bd      	mov	sp, r7
 80136be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136c2:	4770      	bx	lr

080136c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80136c4:	b480      	push	{r7}
 80136c6:	b085      	sub	sp, #20
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	695b      	ldr	r3, [r3, #20]
 80136d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	699b      	ldr	r3, [r3, #24]
 80136d6:	68fa      	ldr	r2, [r7, #12]
 80136d8:	4013      	ands	r3, r2
 80136da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80136dc:	68fb      	ldr	r3, [r7, #12]
}
 80136de:	4618      	mov	r0, r3
 80136e0:	3714      	adds	r7, #20
 80136e2:	46bd      	mov	sp, r7
 80136e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136e8:	4770      	bx	lr

080136ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80136ea:	b480      	push	{r7}
 80136ec:	b085      	sub	sp, #20
 80136ee:	af00      	add	r7, sp, #0
 80136f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136fc:	699b      	ldr	r3, [r3, #24]
 80136fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013706:	69db      	ldr	r3, [r3, #28]
 8013708:	68ba      	ldr	r2, [r7, #8]
 801370a:	4013      	ands	r3, r2
 801370c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	0c1b      	lsrs	r3, r3, #16
}
 8013712:	4618      	mov	r0, r3
 8013714:	3714      	adds	r7, #20
 8013716:	46bd      	mov	sp, r7
 8013718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801371c:	4770      	bx	lr

0801371e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801371e:	b480      	push	{r7}
 8013720:	b085      	sub	sp, #20
 8013722:	af00      	add	r7, sp, #0
 8013724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013730:	699b      	ldr	r3, [r3, #24]
 8013732:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801373a:	69db      	ldr	r3, [r3, #28]
 801373c:	68ba      	ldr	r2, [r7, #8]
 801373e:	4013      	ands	r3, r2
 8013740:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013742:	68bb      	ldr	r3, [r7, #8]
 8013744:	b29b      	uxth	r3, r3
}
 8013746:	4618      	mov	r0, r3
 8013748:	3714      	adds	r7, #20
 801374a:	46bd      	mov	sp, r7
 801374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013750:	4770      	bx	lr

08013752 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013752:	b480      	push	{r7}
 8013754:	b085      	sub	sp, #20
 8013756:	af00      	add	r7, sp, #0
 8013758:	6078      	str	r0, [r7, #4]
 801375a:	460b      	mov	r3, r1
 801375c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013762:	78fb      	ldrb	r3, [r7, #3]
 8013764:	015a      	lsls	r2, r3, #5
 8013766:	68fb      	ldr	r3, [r7, #12]
 8013768:	4413      	add	r3, r2
 801376a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801376e:	689b      	ldr	r3, [r3, #8]
 8013770:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013778:	695b      	ldr	r3, [r3, #20]
 801377a:	68ba      	ldr	r2, [r7, #8]
 801377c:	4013      	ands	r3, r2
 801377e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013780:	68bb      	ldr	r3, [r7, #8]
}
 8013782:	4618      	mov	r0, r3
 8013784:	3714      	adds	r7, #20
 8013786:	46bd      	mov	sp, r7
 8013788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378c:	4770      	bx	lr

0801378e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801378e:	b480      	push	{r7}
 8013790:	b087      	sub	sp, #28
 8013792:	af00      	add	r7, sp, #0
 8013794:	6078      	str	r0, [r7, #4]
 8013796:	460b      	mov	r3, r1
 8013798:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801379e:	697b      	ldr	r3, [r7, #20]
 80137a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137a4:	691b      	ldr	r3, [r3, #16]
 80137a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80137a8:	697b      	ldr	r3, [r7, #20]
 80137aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80137b2:	78fb      	ldrb	r3, [r7, #3]
 80137b4:	f003 030f 	and.w	r3, r3, #15
 80137b8:	68fa      	ldr	r2, [r7, #12]
 80137ba:	fa22 f303 	lsr.w	r3, r2, r3
 80137be:	01db      	lsls	r3, r3, #7
 80137c0:	b2db      	uxtb	r3, r3
 80137c2:	693a      	ldr	r2, [r7, #16]
 80137c4:	4313      	orrs	r3, r2
 80137c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80137c8:	78fb      	ldrb	r3, [r7, #3]
 80137ca:	015a      	lsls	r2, r3, #5
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	4413      	add	r3, r2
 80137d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137d4:	689b      	ldr	r3, [r3, #8]
 80137d6:	693a      	ldr	r2, [r7, #16]
 80137d8:	4013      	ands	r3, r2
 80137da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80137dc:	68bb      	ldr	r3, [r7, #8]
}
 80137de:	4618      	mov	r0, r3
 80137e0:	371c      	adds	r7, #28
 80137e2:	46bd      	mov	sp, r7
 80137e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137e8:	4770      	bx	lr

080137ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80137ea:	b480      	push	{r7}
 80137ec:	b083      	sub	sp, #12
 80137ee:	af00      	add	r7, sp, #0
 80137f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	695b      	ldr	r3, [r3, #20]
 80137f6:	f003 0301 	and.w	r3, r3, #1
}
 80137fa:	4618      	mov	r0, r3
 80137fc:	370c      	adds	r7, #12
 80137fe:	46bd      	mov	sp, r7
 8013800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013804:	4770      	bx	lr
	...

08013808 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013808:	b480      	push	{r7}
 801380a:	b085      	sub	sp, #20
 801380c:	af00      	add	r7, sp, #0
 801380e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801381a:	681a      	ldr	r2, [r3, #0]
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013822:	4619      	mov	r1, r3
 8013824:	4b09      	ldr	r3, [pc, #36]	; (801384c <USB_ActivateSetup+0x44>)
 8013826:	4013      	ands	r3, r2
 8013828:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013830:	685b      	ldr	r3, [r3, #4]
 8013832:	68fa      	ldr	r2, [r7, #12]
 8013834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801383c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801383e:	2300      	movs	r3, #0
}
 8013840:	4618      	mov	r0, r3
 8013842:	3714      	adds	r7, #20
 8013844:	46bd      	mov	sp, r7
 8013846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801384a:	4770      	bx	lr
 801384c:	fffff800 	.word	0xfffff800

08013850 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013850:	b480      	push	{r7}
 8013852:	b087      	sub	sp, #28
 8013854:	af00      	add	r7, sp, #0
 8013856:	60f8      	str	r0, [r7, #12]
 8013858:	460b      	mov	r3, r1
 801385a:	607a      	str	r2, [r7, #4]
 801385c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801385e:	68fb      	ldr	r3, [r7, #12]
 8013860:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	333c      	adds	r3, #60	; 0x3c
 8013866:	3304      	adds	r3, #4
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801386c:	693b      	ldr	r3, [r7, #16]
 801386e:	4a26      	ldr	r2, [pc, #152]	; (8013908 <USB_EP0_OutStart+0xb8>)
 8013870:	4293      	cmp	r3, r2
 8013872:	d90a      	bls.n	801388a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013874:	697b      	ldr	r3, [r7, #20]
 8013876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013884:	d101      	bne.n	801388a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013886:	2300      	movs	r3, #0
 8013888:	e037      	b.n	80138fa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013890:	461a      	mov	r2, r3
 8013892:	2300      	movs	r3, #0
 8013894:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013896:	697b      	ldr	r3, [r7, #20]
 8013898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801389c:	691b      	ldr	r3, [r3, #16]
 801389e:	697a      	ldr	r2, [r7, #20]
 80138a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80138a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80138aa:	697b      	ldr	r3, [r7, #20]
 80138ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138b0:	691b      	ldr	r3, [r3, #16]
 80138b2:	697a      	ldr	r2, [r7, #20]
 80138b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138b8:	f043 0318 	orr.w	r3, r3, #24
 80138bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80138be:	697b      	ldr	r3, [r7, #20]
 80138c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138c4:	691b      	ldr	r3, [r3, #16]
 80138c6:	697a      	ldr	r2, [r7, #20]
 80138c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138cc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80138d0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80138d2:	7afb      	ldrb	r3, [r7, #11]
 80138d4:	2b01      	cmp	r3, #1
 80138d6:	d10f      	bne.n	80138f8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80138d8:	697b      	ldr	r3, [r7, #20]
 80138da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138de:	461a      	mov	r2, r3
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80138e4:	697b      	ldr	r3, [r7, #20]
 80138e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	697a      	ldr	r2, [r7, #20]
 80138ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80138f2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80138f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80138f8:	2300      	movs	r3, #0
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	371c      	adds	r7, #28
 80138fe:	46bd      	mov	sp, r7
 8013900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013904:	4770      	bx	lr
 8013906:	bf00      	nop
 8013908:	4f54300a 	.word	0x4f54300a

0801390c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801390c:	b480      	push	{r7}
 801390e:	b085      	sub	sp, #20
 8013910:	af00      	add	r7, sp, #0
 8013912:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013914:	2300      	movs	r3, #0
 8013916:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013918:	68fb      	ldr	r3, [r7, #12]
 801391a:	3301      	adds	r3, #1
 801391c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	4a13      	ldr	r2, [pc, #76]	; (8013970 <USB_CoreReset+0x64>)
 8013922:	4293      	cmp	r3, r2
 8013924:	d901      	bls.n	801392a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013926:	2303      	movs	r3, #3
 8013928:	e01b      	b.n	8013962 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	691b      	ldr	r3, [r3, #16]
 801392e:	2b00      	cmp	r3, #0
 8013930:	daf2      	bge.n	8013918 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013932:	2300      	movs	r3, #0
 8013934:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	691b      	ldr	r3, [r3, #16]
 801393a:	f043 0201 	orr.w	r2, r3, #1
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	3301      	adds	r3, #1
 8013946:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	4a09      	ldr	r2, [pc, #36]	; (8013970 <USB_CoreReset+0x64>)
 801394c:	4293      	cmp	r3, r2
 801394e:	d901      	bls.n	8013954 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013950:	2303      	movs	r3, #3
 8013952:	e006      	b.n	8013962 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	691b      	ldr	r3, [r3, #16]
 8013958:	f003 0301 	and.w	r3, r3, #1
 801395c:	2b01      	cmp	r3, #1
 801395e:	d0f0      	beq.n	8013942 <USB_CoreReset+0x36>

  return HAL_OK;
 8013960:	2300      	movs	r3, #0
}
 8013962:	4618      	mov	r0, r3
 8013964:	3714      	adds	r7, #20
 8013966:	46bd      	mov	sp, r7
 8013968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801396c:	4770      	bx	lr
 801396e:	bf00      	nop
 8013970:	00030d40 	.word	0x00030d40

08013974 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013974:	b580      	push	{r7, lr}
 8013976:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013978:	4904      	ldr	r1, [pc, #16]	; (801398c <MX_FATFS_Init+0x18>)
 801397a:	4805      	ldr	r0, [pc, #20]	; (8013990 <MX_FATFS_Init+0x1c>)
 801397c:	f005 f906 	bl	8018b8c <FATFS_LinkDriver>
 8013980:	4603      	mov	r3, r0
 8013982:	461a      	mov	r2, r3
 8013984:	4b03      	ldr	r3, [pc, #12]	; (8013994 <MX_FATFS_Init+0x20>)
 8013986:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013988:	bf00      	nop
 801398a:	bd80      	pop	{r7, pc}
 801398c:	240016a4 	.word	0x240016a4
 8013990:	0801e058 	.word	0x0801e058
 8013994:	240016a0 	.word	0x240016a0

08013998 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8013998:	b480      	push	{r7}
 801399a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 801399c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 801399e:	4618      	mov	r0, r3
 80139a0:	46bd      	mov	sp, r7
 80139a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a6:	4770      	bx	lr

080139a8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b082      	sub	sp, #8
 80139ac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80139ae:	2300      	movs	r3, #0
 80139b0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80139b2:	f000 f885 	bl	8013ac0 <BSP_SD_IsDetected>
 80139b6:	4603      	mov	r3, r0
 80139b8:	2b01      	cmp	r3, #1
 80139ba:	d001      	beq.n	80139c0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80139bc:	2302      	movs	r3, #2
 80139be:	e012      	b.n	80139e6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80139c0:	480b      	ldr	r0, [pc, #44]	; (80139f0 <BSP_SD_Init+0x48>)
 80139c2:	f7f9 fb93 	bl	800d0ec <HAL_SD_Init>
 80139c6:	4603      	mov	r3, r0
 80139c8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80139ca:	79fb      	ldrb	r3, [r7, #7]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d109      	bne.n	80139e4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80139d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80139d4:	4806      	ldr	r0, [pc, #24]	; (80139f0 <BSP_SD_Init+0x48>)
 80139d6:	f7fa fa49 	bl	800de6c <HAL_SD_ConfigWideBusOperation>
 80139da:	4603      	mov	r3, r0
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d001      	beq.n	80139e4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80139e0:	2301      	movs	r3, #1
 80139e2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80139e4:	79fb      	ldrb	r3, [r7, #7]
}
 80139e6:	4618      	mov	r0, r3
 80139e8:	3708      	adds	r7, #8
 80139ea:	46bd      	mov	sp, r7
 80139ec:	bd80      	pop	{r7, pc}
 80139ee:	bf00      	nop
 80139f0:	24000f3c 	.word	0x24000f3c

080139f4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80139f4:	b580      	push	{r7, lr}
 80139f6:	b086      	sub	sp, #24
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	60f8      	str	r0, [r7, #12]
 80139fc:	60b9      	str	r1, [r7, #8]
 80139fe:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013a00:	2300      	movs	r3, #0
 8013a02:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	68ba      	ldr	r2, [r7, #8]
 8013a08:	68f9      	ldr	r1, [r7, #12]
 8013a0a:	4806      	ldr	r0, [pc, #24]	; (8013a24 <BSP_SD_ReadBlocks_DMA+0x30>)
 8013a0c:	f7f9 fc8e 	bl	800d32c <HAL_SD_ReadBlocks_DMA>
 8013a10:	4603      	mov	r3, r0
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d001      	beq.n	8013a1a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013a16:	2301      	movs	r3, #1
 8013a18:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013a1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	3718      	adds	r7, #24
 8013a20:	46bd      	mov	sp, r7
 8013a22:	bd80      	pop	{r7, pc}
 8013a24:	24000f3c 	.word	0x24000f3c

08013a28 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b086      	sub	sp, #24
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	60f8      	str	r0, [r7, #12]
 8013a30:	60b9      	str	r1, [r7, #8]
 8013a32:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013a34:	2300      	movs	r3, #0
 8013a36:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	68ba      	ldr	r2, [r7, #8]
 8013a3c:	68f9      	ldr	r1, [r7, #12]
 8013a3e:	4806      	ldr	r0, [pc, #24]	; (8013a58 <BSP_SD_WriteBlocks_DMA+0x30>)
 8013a40:	f7f9 fd1c 	bl	800d47c <HAL_SD_WriteBlocks_DMA>
 8013a44:	4603      	mov	r3, r0
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d001      	beq.n	8013a4e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013a4a:	2301      	movs	r3, #1
 8013a4c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013a50:	4618      	mov	r0, r3
 8013a52:	3718      	adds	r7, #24
 8013a54:	46bd      	mov	sp, r7
 8013a56:	bd80      	pop	{r7, pc}
 8013a58:	24000f3c 	.word	0x24000f3c

08013a5c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013a5c:	b580      	push	{r7, lr}
 8013a5e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013a60:	4805      	ldr	r0, [pc, #20]	; (8013a78 <BSP_SD_GetCardState+0x1c>)
 8013a62:	f7fa fb15 	bl	800e090 <HAL_SD_GetCardState>
 8013a66:	4603      	mov	r3, r0
 8013a68:	2b04      	cmp	r3, #4
 8013a6a:	bf14      	ite	ne
 8013a6c:	2301      	movne	r3, #1
 8013a6e:	2300      	moveq	r3, #0
 8013a70:	b2db      	uxtb	r3, r3
}
 8013a72:	4618      	mov	r0, r3
 8013a74:	bd80      	pop	{r7, pc}
 8013a76:	bf00      	nop
 8013a78:	24000f3c 	.word	0x24000f3c

08013a7c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013a7c:	b580      	push	{r7, lr}
 8013a7e:	b082      	sub	sp, #8
 8013a80:	af00      	add	r7, sp, #0
 8013a82:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 8013a84:	6879      	ldr	r1, [r7, #4]
 8013a86:	4803      	ldr	r0, [pc, #12]	; (8013a94 <BSP_SD_GetCardInfo+0x18>)
 8013a88:	f7fa f9c4 	bl	800de14 <HAL_SD_GetCardInfo>
}
 8013a8c:	bf00      	nop
 8013a8e:	3708      	adds	r7, #8
 8013a90:	46bd      	mov	sp, r7
 8013a92:	bd80      	pop	{r7, pc}
 8013a94:	24000f3c 	.word	0x24000f3c

08013a98 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b082      	sub	sp, #8
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013aa0:	f000 f984 	bl	8013dac <BSP_SD_WriteCpltCallback>
}
 8013aa4:	bf00      	nop
 8013aa6:	3708      	adds	r7, #8
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bd80      	pop	{r7, pc}

08013aac <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b082      	sub	sp, #8
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013ab4:	f000 f986 	bl	8013dc4 <BSP_SD_ReadCpltCallback>
}
 8013ab8:	bf00      	nop
 8013aba:	3708      	adds	r7, #8
 8013abc:	46bd      	mov	sp, r7
 8013abe:	bd80      	pop	{r7, pc}

08013ac0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013ac0:	b480      	push	{r7}
 8013ac2:	b083      	sub	sp, #12
 8013ac4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013ac6:	2301      	movs	r3, #1
 8013ac8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 8013aca:	79fb      	ldrb	r3, [r7, #7]
 8013acc:	b2db      	uxtb	r3, r3
}
 8013ace:	4618      	mov	r0, r3
 8013ad0:	370c      	adds	r7, #12
 8013ad2:	46bd      	mov	sp, r7
 8013ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad8:	4770      	bx	lr

08013ada <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013ada:	b580      	push	{r7, lr}
 8013adc:	b084      	sub	sp, #16
 8013ade:	af00      	add	r7, sp, #0
 8013ae0:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8013ae2:	f7ef fbfb 	bl	80032dc <HAL_GetTick>
 8013ae6:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8013ae8:	e006      	b.n	8013af8 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013aea:	f7ff ffb7 	bl	8013a5c <BSP_SD_GetCardState>
 8013aee:	4603      	mov	r3, r0
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d101      	bne.n	8013af8 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013af4:	2300      	movs	r3, #0
 8013af6:	e009      	b.n	8013b0c <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8013af8:	f7ef fbf0 	bl	80032dc <HAL_GetTick>
 8013afc:	4602      	mov	r2, r0
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	1ad3      	subs	r3, r2, r3
 8013b02:	687a      	ldr	r2, [r7, #4]
 8013b04:	429a      	cmp	r2, r3
 8013b06:	d8f0      	bhi.n	8013aea <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013b08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	3710      	adds	r7, #16
 8013b10:	46bd      	mov	sp, r7
 8013b12:	bd80      	pop	{r7, pc}

08013b14 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b082      	sub	sp, #8
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	4603      	mov	r3, r0
 8013b1c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013b1e:	4b0b      	ldr	r3, [pc, #44]	; (8013b4c <SD_CheckStatus+0x38>)
 8013b20:	2201      	movs	r2, #1
 8013b22:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013b24:	f7ff ff9a 	bl	8013a5c <BSP_SD_GetCardState>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d107      	bne.n	8013b3e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013b2e:	4b07      	ldr	r3, [pc, #28]	; (8013b4c <SD_CheckStatus+0x38>)
 8013b30:	781b      	ldrb	r3, [r3, #0]
 8013b32:	b2db      	uxtb	r3, r3
 8013b34:	f023 0301 	bic.w	r3, r3, #1
 8013b38:	b2da      	uxtb	r2, r3
 8013b3a:	4b04      	ldr	r3, [pc, #16]	; (8013b4c <SD_CheckStatus+0x38>)
 8013b3c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013b3e:	4b03      	ldr	r3, [pc, #12]	; (8013b4c <SD_CheckStatus+0x38>)
 8013b40:	781b      	ldrb	r3, [r3, #0]
 8013b42:	b2db      	uxtb	r3, r3
}
 8013b44:	4618      	mov	r0, r3
 8013b46:	3708      	adds	r7, #8
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd80      	pop	{r7, pc}
 8013b4c:	2400000d 	.word	0x2400000d

08013b50 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b082      	sub	sp, #8
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	4603      	mov	r3, r0
 8013b58:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013b5a:	f7ff ff25 	bl	80139a8 <BSP_SD_Init>
 8013b5e:	4603      	mov	r3, r0
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d107      	bne.n	8013b74 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8013b64:	79fb      	ldrb	r3, [r7, #7]
 8013b66:	4618      	mov	r0, r3
 8013b68:	f7ff ffd4 	bl	8013b14 <SD_CheckStatus>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	461a      	mov	r2, r3
 8013b70:	4b04      	ldr	r3, [pc, #16]	; (8013b84 <SD_initialize+0x34>)
 8013b72:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013b74:	4b03      	ldr	r3, [pc, #12]	; (8013b84 <SD_initialize+0x34>)
 8013b76:	781b      	ldrb	r3, [r3, #0]
 8013b78:	b2db      	uxtb	r3, r3
}
 8013b7a:	4618      	mov	r0, r3
 8013b7c:	3708      	adds	r7, #8
 8013b7e:	46bd      	mov	sp, r7
 8013b80:	bd80      	pop	{r7, pc}
 8013b82:	bf00      	nop
 8013b84:	2400000d 	.word	0x2400000d

08013b88 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b082      	sub	sp, #8
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	4603      	mov	r3, r0
 8013b90:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013b92:	79fb      	ldrb	r3, [r7, #7]
 8013b94:	4618      	mov	r0, r3
 8013b96:	f7ff ffbd 	bl	8013b14 <SD_CheckStatus>
 8013b9a:	4603      	mov	r3, r0
}
 8013b9c:	4618      	mov	r0, r3
 8013b9e:	3708      	adds	r7, #8
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}

08013ba4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b086      	sub	sp, #24
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	60b9      	str	r1, [r7, #8]
 8013bac:	607a      	str	r2, [r7, #4]
 8013bae:	603b      	str	r3, [r7, #0]
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013bb4:	2301      	movs	r3, #1
 8013bb6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013bb8:	f247 5030 	movw	r0, #30000	; 0x7530
 8013bbc:	f7ff ff8d 	bl	8013ada <SD_CheckStatusWithTimeout>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	da01      	bge.n	8013bca <SD_read+0x26>
  {
    return res;
 8013bc6:	7dfb      	ldrb	r3, [r7, #23]
 8013bc8:	e03b      	b.n	8013c42 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8013bca:	683a      	ldr	r2, [r7, #0]
 8013bcc:	6879      	ldr	r1, [r7, #4]
 8013bce:	68b8      	ldr	r0, [r7, #8]
 8013bd0:	f7ff ff10 	bl	80139f4 <BSP_SD_ReadBlocks_DMA>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d132      	bne.n	8013c40 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8013bda:	4b1c      	ldr	r3, [pc, #112]	; (8013c4c <SD_read+0xa8>)
 8013bdc:	2200      	movs	r2, #0
 8013bde:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8013be0:	f7ef fb7c 	bl	80032dc <HAL_GetTick>
 8013be4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013be6:	bf00      	nop
 8013be8:	4b18      	ldr	r3, [pc, #96]	; (8013c4c <SD_read+0xa8>)
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d108      	bne.n	8013c02 <SD_read+0x5e>
 8013bf0:	f7ef fb74 	bl	80032dc <HAL_GetTick>
 8013bf4:	4602      	mov	r2, r0
 8013bf6:	693b      	ldr	r3, [r7, #16]
 8013bf8:	1ad3      	subs	r3, r2, r3
 8013bfa:	f247 522f 	movw	r2, #29999	; 0x752f
 8013bfe:	4293      	cmp	r3, r2
 8013c00:	d9f2      	bls.n	8013be8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8013c02:	4b12      	ldr	r3, [pc, #72]	; (8013c4c <SD_read+0xa8>)
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d102      	bne.n	8013c10 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8013c0a:	2301      	movs	r3, #1
 8013c0c:	75fb      	strb	r3, [r7, #23]
 8013c0e:	e017      	b.n	8013c40 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8013c10:	4b0e      	ldr	r3, [pc, #56]	; (8013c4c <SD_read+0xa8>)
 8013c12:	2200      	movs	r2, #0
 8013c14:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013c16:	f7ef fb61 	bl	80032dc <HAL_GetTick>
 8013c1a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013c1c:	e007      	b.n	8013c2e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013c1e:	f7ff ff1d 	bl	8013a5c <BSP_SD_GetCardState>
 8013c22:	4603      	mov	r3, r0
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d102      	bne.n	8013c2e <SD_read+0x8a>
          {
            res = RES_OK;
 8013c28:	2300      	movs	r3, #0
 8013c2a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8013c2c:	e008      	b.n	8013c40 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013c2e:	f7ef fb55 	bl	80032dc <HAL_GetTick>
 8013c32:	4602      	mov	r2, r0
 8013c34:	693b      	ldr	r3, [r7, #16]
 8013c36:	1ad3      	subs	r3, r2, r3
 8013c38:	f247 522f 	movw	r2, #29999	; 0x752f
 8013c3c:	4293      	cmp	r3, r2
 8013c3e:	d9ee      	bls.n	8013c1e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8013c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c42:	4618      	mov	r0, r3
 8013c44:	3718      	adds	r7, #24
 8013c46:	46bd      	mov	sp, r7
 8013c48:	bd80      	pop	{r7, pc}
 8013c4a:	bf00      	nop
 8013c4c:	240016ac 	.word	0x240016ac

08013c50 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b086      	sub	sp, #24
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	60b9      	str	r1, [r7, #8]
 8013c58:	607a      	str	r2, [r7, #4]
 8013c5a:	603b      	str	r3, [r7, #0]
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013c60:	2301      	movs	r3, #1
 8013c62:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8013c64:	4b24      	ldr	r3, [pc, #144]	; (8013cf8 <SD_write+0xa8>)
 8013c66:	2200      	movs	r2, #0
 8013c68:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013c6a:	f247 5030 	movw	r0, #30000	; 0x7530
 8013c6e:	f7ff ff34 	bl	8013ada <SD_CheckStatusWithTimeout>
 8013c72:	4603      	mov	r3, r0
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	da01      	bge.n	8013c7c <SD_write+0x2c>
  {
    return res;
 8013c78:	7dfb      	ldrb	r3, [r7, #23]
 8013c7a:	e038      	b.n	8013cee <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8013c7c:	683a      	ldr	r2, [r7, #0]
 8013c7e:	6879      	ldr	r1, [r7, #4]
 8013c80:	68b8      	ldr	r0, [r7, #8]
 8013c82:	f7ff fed1 	bl	8013a28 <BSP_SD_WriteBlocks_DMA>
 8013c86:	4603      	mov	r3, r0
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d12f      	bne.n	8013cec <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8013c8c:	f7ef fb26 	bl	80032dc <HAL_GetTick>
 8013c90:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013c92:	bf00      	nop
 8013c94:	4b18      	ldr	r3, [pc, #96]	; (8013cf8 <SD_write+0xa8>)
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d108      	bne.n	8013cae <SD_write+0x5e>
 8013c9c:	f7ef fb1e 	bl	80032dc <HAL_GetTick>
 8013ca0:	4602      	mov	r2, r0
 8013ca2:	693b      	ldr	r3, [r7, #16]
 8013ca4:	1ad3      	subs	r3, r2, r3
 8013ca6:	f247 522f 	movw	r2, #29999	; 0x752f
 8013caa:	4293      	cmp	r3, r2
 8013cac:	d9f2      	bls.n	8013c94 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8013cae:	4b12      	ldr	r3, [pc, #72]	; (8013cf8 <SD_write+0xa8>)
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d102      	bne.n	8013cbc <SD_write+0x6c>
      {
        res = RES_ERROR;
 8013cb6:	2301      	movs	r3, #1
 8013cb8:	75fb      	strb	r3, [r7, #23]
 8013cba:	e017      	b.n	8013cec <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8013cbc:	4b0e      	ldr	r3, [pc, #56]	; (8013cf8 <SD_write+0xa8>)
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013cc2:	f7ef fb0b 	bl	80032dc <HAL_GetTick>
 8013cc6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013cc8:	e007      	b.n	8013cda <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013cca:	f7ff fec7 	bl	8013a5c <BSP_SD_GetCardState>
 8013cce:	4603      	mov	r3, r0
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d102      	bne.n	8013cda <SD_write+0x8a>
          {
            res = RES_OK;
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	75fb      	strb	r3, [r7, #23]
            break;
 8013cd8:	e008      	b.n	8013cec <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013cda:	f7ef faff 	bl	80032dc <HAL_GetTick>
 8013cde:	4602      	mov	r2, r0
 8013ce0:	693b      	ldr	r3, [r7, #16]
 8013ce2:	1ad3      	subs	r3, r2, r3
 8013ce4:	f247 522f 	movw	r2, #29999	; 0x752f
 8013ce8:	4293      	cmp	r3, r2
 8013cea:	d9ee      	bls.n	8013cca <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8013cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cee:	4618      	mov	r0, r3
 8013cf0:	3718      	adds	r7, #24
 8013cf2:	46bd      	mov	sp, r7
 8013cf4:	bd80      	pop	{r7, pc}
 8013cf6:	bf00      	nop
 8013cf8:	240016a8 	.word	0x240016a8

08013cfc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013cfc:	b580      	push	{r7, lr}
 8013cfe:	b08c      	sub	sp, #48	; 0x30
 8013d00:	af00      	add	r7, sp, #0
 8013d02:	4603      	mov	r3, r0
 8013d04:	603a      	str	r2, [r7, #0]
 8013d06:	71fb      	strb	r3, [r7, #7]
 8013d08:	460b      	mov	r3, r1
 8013d0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013d0c:	2301      	movs	r3, #1
 8013d0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013d12:	4b25      	ldr	r3, [pc, #148]	; (8013da8 <SD_ioctl+0xac>)
 8013d14:	781b      	ldrb	r3, [r3, #0]
 8013d16:	b2db      	uxtb	r3, r3
 8013d18:	f003 0301 	and.w	r3, r3, #1
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d001      	beq.n	8013d24 <SD_ioctl+0x28>
 8013d20:	2303      	movs	r3, #3
 8013d22:	e03c      	b.n	8013d9e <SD_ioctl+0xa2>

  switch (cmd)
 8013d24:	79bb      	ldrb	r3, [r7, #6]
 8013d26:	2b03      	cmp	r3, #3
 8013d28:	d834      	bhi.n	8013d94 <SD_ioctl+0x98>
 8013d2a:	a201      	add	r2, pc, #4	; (adr r2, 8013d30 <SD_ioctl+0x34>)
 8013d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d30:	08013d41 	.word	0x08013d41
 8013d34:	08013d49 	.word	0x08013d49
 8013d38:	08013d61 	.word	0x08013d61
 8013d3c:	08013d7b 	.word	0x08013d7b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013d40:	2300      	movs	r3, #0
 8013d42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013d46:	e028      	b.n	8013d9a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013d48:	f107 0308 	add.w	r3, r7, #8
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f7ff fe95 	bl	8013a7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013d52:	6a3a      	ldr	r2, [r7, #32]
 8013d54:	683b      	ldr	r3, [r7, #0]
 8013d56:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013d58:	2300      	movs	r3, #0
 8013d5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013d5e:	e01c      	b.n	8013d9a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013d60:	f107 0308 	add.w	r3, r7, #8
 8013d64:	4618      	mov	r0, r3
 8013d66:	f7ff fe89 	bl	8013a7c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d6c:	b29a      	uxth	r2, r3
 8013d6e:	683b      	ldr	r3, [r7, #0]
 8013d70:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013d72:	2300      	movs	r3, #0
 8013d74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013d78:	e00f      	b.n	8013d9a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013d7a:	f107 0308 	add.w	r3, r7, #8
 8013d7e:	4618      	mov	r0, r3
 8013d80:	f7ff fe7c 	bl	8013a7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d86:	0a5a      	lsrs	r2, r3, #9
 8013d88:	683b      	ldr	r3, [r7, #0]
 8013d8a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013d92:	e002      	b.n	8013d9a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013d94:	2304      	movs	r3, #4
 8013d96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8013d9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013d9e:	4618      	mov	r0, r3
 8013da0:	3730      	adds	r7, #48	; 0x30
 8013da2:	46bd      	mov	sp, r7
 8013da4:	bd80      	pop	{r7, pc}
 8013da6:	bf00      	nop
 8013da8:	2400000d 	.word	0x2400000d

08013dac <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8013dac:	b480      	push	{r7}
 8013dae:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8013db0:	4b03      	ldr	r3, [pc, #12]	; (8013dc0 <BSP_SD_WriteCpltCallback+0x14>)
 8013db2:	2201      	movs	r2, #1
 8013db4:	601a      	str	r2, [r3, #0]
}
 8013db6:	bf00      	nop
 8013db8:	46bd      	mov	sp, r7
 8013dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbe:	4770      	bx	lr
 8013dc0:	240016a8 	.word	0x240016a8

08013dc4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8013dc4:	b480      	push	{r7}
 8013dc6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8013dc8:	4b03      	ldr	r3, [pc, #12]	; (8013dd8 <BSP_SD_ReadCpltCallback+0x14>)
 8013dca:	2201      	movs	r2, #1
 8013dcc:	601a      	str	r2, [r3, #0]
}
 8013dce:	bf00      	nop
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd6:	4770      	bx	lr
 8013dd8:	240016ac 	.word	0x240016ac

08013ddc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b084      	sub	sp, #16
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
 8013de4:	460b      	mov	r3, r1
 8013de6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013de8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013dec:	f005 fc74 	bl	80196d8 <USBD_static_malloc>
 8013df0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013df2:	68fb      	ldr	r3, [r7, #12]
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d109      	bne.n	8013e0c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013df8:	687b      	ldr	r3, [r7, #4]
 8013dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	32b0      	adds	r2, #176	; 0xb0
 8013e02:	2100      	movs	r1, #0
 8013e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8013e08:	2302      	movs	r3, #2
 8013e0a:	e0d4      	b.n	8013fb6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8013e0c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8013e10:	2100      	movs	r1, #0
 8013e12:	68f8      	ldr	r0, [r7, #12]
 8013e14:	f005 fcdc 	bl	80197d0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	32b0      	adds	r2, #176	; 0xb0
 8013e22:	68f9      	ldr	r1, [r7, #12]
 8013e24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	32b0      	adds	r2, #176	; 0xb0
 8013e32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8013e36:	687b      	ldr	r3, [r7, #4]
 8013e38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	7c1b      	ldrb	r3, [r3, #16]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d138      	bne.n	8013eb6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013e44:	4b5e      	ldr	r3, [pc, #376]	; (8013fc0 <USBD_CDC_Init+0x1e4>)
 8013e46:	7819      	ldrb	r1, [r3, #0]
 8013e48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013e4c:	2202      	movs	r2, #2
 8013e4e:	6878      	ldr	r0, [r7, #4]
 8013e50:	f005 fb1f 	bl	8019492 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013e54:	4b5a      	ldr	r3, [pc, #360]	; (8013fc0 <USBD_CDC_Init+0x1e4>)
 8013e56:	781b      	ldrb	r3, [r3, #0]
 8013e58:	f003 020f 	and.w	r2, r3, #15
 8013e5c:	6879      	ldr	r1, [r7, #4]
 8013e5e:	4613      	mov	r3, r2
 8013e60:	009b      	lsls	r3, r3, #2
 8013e62:	4413      	add	r3, r2
 8013e64:	009b      	lsls	r3, r3, #2
 8013e66:	440b      	add	r3, r1
 8013e68:	3324      	adds	r3, #36	; 0x24
 8013e6a:	2201      	movs	r2, #1
 8013e6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8013e6e:	4b55      	ldr	r3, [pc, #340]	; (8013fc4 <USBD_CDC_Init+0x1e8>)
 8013e70:	7819      	ldrb	r1, [r3, #0]
 8013e72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013e76:	2202      	movs	r2, #2
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f005 fb0a 	bl	8019492 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013e7e:	4b51      	ldr	r3, [pc, #324]	; (8013fc4 <USBD_CDC_Init+0x1e8>)
 8013e80:	781b      	ldrb	r3, [r3, #0]
 8013e82:	f003 020f 	and.w	r2, r3, #15
 8013e86:	6879      	ldr	r1, [r7, #4]
 8013e88:	4613      	mov	r3, r2
 8013e8a:	009b      	lsls	r3, r3, #2
 8013e8c:	4413      	add	r3, r2
 8013e8e:	009b      	lsls	r3, r3, #2
 8013e90:	440b      	add	r3, r1
 8013e92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013e96:	2201      	movs	r2, #1
 8013e98:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013e9a:	4b4b      	ldr	r3, [pc, #300]	; (8013fc8 <USBD_CDC_Init+0x1ec>)
 8013e9c:	781b      	ldrb	r3, [r3, #0]
 8013e9e:	f003 020f 	and.w	r2, r3, #15
 8013ea2:	6879      	ldr	r1, [r7, #4]
 8013ea4:	4613      	mov	r3, r2
 8013ea6:	009b      	lsls	r3, r3, #2
 8013ea8:	4413      	add	r3, r2
 8013eaa:	009b      	lsls	r3, r3, #2
 8013eac:	440b      	add	r3, r1
 8013eae:	3326      	adds	r3, #38	; 0x26
 8013eb0:	2210      	movs	r2, #16
 8013eb2:	801a      	strh	r2, [r3, #0]
 8013eb4:	e035      	b.n	8013f22 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8013eb6:	4b42      	ldr	r3, [pc, #264]	; (8013fc0 <USBD_CDC_Init+0x1e4>)
 8013eb8:	7819      	ldrb	r1, [r3, #0]
 8013eba:	2340      	movs	r3, #64	; 0x40
 8013ebc:	2202      	movs	r2, #2
 8013ebe:	6878      	ldr	r0, [r7, #4]
 8013ec0:	f005 fae7 	bl	8019492 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013ec4:	4b3e      	ldr	r3, [pc, #248]	; (8013fc0 <USBD_CDC_Init+0x1e4>)
 8013ec6:	781b      	ldrb	r3, [r3, #0]
 8013ec8:	f003 020f 	and.w	r2, r3, #15
 8013ecc:	6879      	ldr	r1, [r7, #4]
 8013ece:	4613      	mov	r3, r2
 8013ed0:	009b      	lsls	r3, r3, #2
 8013ed2:	4413      	add	r3, r2
 8013ed4:	009b      	lsls	r3, r3, #2
 8013ed6:	440b      	add	r3, r1
 8013ed8:	3324      	adds	r3, #36	; 0x24
 8013eda:	2201      	movs	r2, #1
 8013edc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8013ede:	4b39      	ldr	r3, [pc, #228]	; (8013fc4 <USBD_CDC_Init+0x1e8>)
 8013ee0:	7819      	ldrb	r1, [r3, #0]
 8013ee2:	2340      	movs	r3, #64	; 0x40
 8013ee4:	2202      	movs	r2, #2
 8013ee6:	6878      	ldr	r0, [r7, #4]
 8013ee8:	f005 fad3 	bl	8019492 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013eec:	4b35      	ldr	r3, [pc, #212]	; (8013fc4 <USBD_CDC_Init+0x1e8>)
 8013eee:	781b      	ldrb	r3, [r3, #0]
 8013ef0:	f003 020f 	and.w	r2, r3, #15
 8013ef4:	6879      	ldr	r1, [r7, #4]
 8013ef6:	4613      	mov	r3, r2
 8013ef8:	009b      	lsls	r3, r3, #2
 8013efa:	4413      	add	r3, r2
 8013efc:	009b      	lsls	r3, r3, #2
 8013efe:	440b      	add	r3, r1
 8013f00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013f04:	2201      	movs	r2, #1
 8013f06:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013f08:	4b2f      	ldr	r3, [pc, #188]	; (8013fc8 <USBD_CDC_Init+0x1ec>)
 8013f0a:	781b      	ldrb	r3, [r3, #0]
 8013f0c:	f003 020f 	and.w	r2, r3, #15
 8013f10:	6879      	ldr	r1, [r7, #4]
 8013f12:	4613      	mov	r3, r2
 8013f14:	009b      	lsls	r3, r3, #2
 8013f16:	4413      	add	r3, r2
 8013f18:	009b      	lsls	r3, r3, #2
 8013f1a:	440b      	add	r3, r1
 8013f1c:	3326      	adds	r3, #38	; 0x26
 8013f1e:	2210      	movs	r2, #16
 8013f20:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013f22:	4b29      	ldr	r3, [pc, #164]	; (8013fc8 <USBD_CDC_Init+0x1ec>)
 8013f24:	7819      	ldrb	r1, [r3, #0]
 8013f26:	2308      	movs	r3, #8
 8013f28:	2203      	movs	r2, #3
 8013f2a:	6878      	ldr	r0, [r7, #4]
 8013f2c:	f005 fab1 	bl	8019492 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8013f30:	4b25      	ldr	r3, [pc, #148]	; (8013fc8 <USBD_CDC_Init+0x1ec>)
 8013f32:	781b      	ldrb	r3, [r3, #0]
 8013f34:	f003 020f 	and.w	r2, r3, #15
 8013f38:	6879      	ldr	r1, [r7, #4]
 8013f3a:	4613      	mov	r3, r2
 8013f3c:	009b      	lsls	r3, r3, #2
 8013f3e:	4413      	add	r3, r2
 8013f40:	009b      	lsls	r3, r3, #2
 8013f42:	440b      	add	r3, r1
 8013f44:	3324      	adds	r3, #36	; 0x24
 8013f46:	2201      	movs	r2, #1
 8013f48:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	2200      	movs	r2, #0
 8013f4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013f58:	687a      	ldr	r2, [r7, #4]
 8013f5a:	33b0      	adds	r3, #176	; 0xb0
 8013f5c:	009b      	lsls	r3, r3, #2
 8013f5e:	4413      	add	r3, r2
 8013f60:	685b      	ldr	r3, [r3, #4]
 8013f62:	681b      	ldr	r3, [r3, #0]
 8013f64:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	2200      	movs	r2, #0
 8013f6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8013f6e:	68fb      	ldr	r3, [r7, #12]
 8013f70:	2200      	movs	r2, #0
 8013f72:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d101      	bne.n	8013f84 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8013f80:	2302      	movs	r3, #2
 8013f82:	e018      	b.n	8013fb6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	7c1b      	ldrb	r3, [r3, #16]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d10a      	bne.n	8013fa2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013f8c:	4b0d      	ldr	r3, [pc, #52]	; (8013fc4 <USBD_CDC_Init+0x1e8>)
 8013f8e:	7819      	ldrb	r1, [r3, #0]
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013f96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013f9a:	6878      	ldr	r0, [r7, #4]
 8013f9c:	f005 fb68 	bl	8019670 <USBD_LL_PrepareReceive>
 8013fa0:	e008      	b.n	8013fb4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013fa2:	4b08      	ldr	r3, [pc, #32]	; (8013fc4 <USBD_CDC_Init+0x1e8>)
 8013fa4:	7819      	ldrb	r1, [r3, #0]
 8013fa6:	68fb      	ldr	r3, [r7, #12]
 8013fa8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013fac:	2340      	movs	r3, #64	; 0x40
 8013fae:	6878      	ldr	r0, [r7, #4]
 8013fb0:	f005 fb5e 	bl	8019670 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013fb4:	2300      	movs	r3, #0
}
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	3710      	adds	r7, #16
 8013fba:	46bd      	mov	sp, r7
 8013fbc:	bd80      	pop	{r7, pc}
 8013fbe:	bf00      	nop
 8013fc0:	24000097 	.word	0x24000097
 8013fc4:	24000098 	.word	0x24000098
 8013fc8:	24000099 	.word	0x24000099

08013fcc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b082      	sub	sp, #8
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	6078      	str	r0, [r7, #4]
 8013fd4:	460b      	mov	r3, r1
 8013fd6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8013fd8:	4b3a      	ldr	r3, [pc, #232]	; (80140c4 <USBD_CDC_DeInit+0xf8>)
 8013fda:	781b      	ldrb	r3, [r3, #0]
 8013fdc:	4619      	mov	r1, r3
 8013fde:	6878      	ldr	r0, [r7, #4]
 8013fe0:	f005 fa7d 	bl	80194de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8013fe4:	4b37      	ldr	r3, [pc, #220]	; (80140c4 <USBD_CDC_DeInit+0xf8>)
 8013fe6:	781b      	ldrb	r3, [r3, #0]
 8013fe8:	f003 020f 	and.w	r2, r3, #15
 8013fec:	6879      	ldr	r1, [r7, #4]
 8013fee:	4613      	mov	r3, r2
 8013ff0:	009b      	lsls	r3, r3, #2
 8013ff2:	4413      	add	r3, r2
 8013ff4:	009b      	lsls	r3, r3, #2
 8013ff6:	440b      	add	r3, r1
 8013ff8:	3324      	adds	r3, #36	; 0x24
 8013ffa:	2200      	movs	r2, #0
 8013ffc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8013ffe:	4b32      	ldr	r3, [pc, #200]	; (80140c8 <USBD_CDC_DeInit+0xfc>)
 8014000:	781b      	ldrb	r3, [r3, #0]
 8014002:	4619      	mov	r1, r3
 8014004:	6878      	ldr	r0, [r7, #4]
 8014006:	f005 fa6a 	bl	80194de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801400a:	4b2f      	ldr	r3, [pc, #188]	; (80140c8 <USBD_CDC_DeInit+0xfc>)
 801400c:	781b      	ldrb	r3, [r3, #0]
 801400e:	f003 020f 	and.w	r2, r3, #15
 8014012:	6879      	ldr	r1, [r7, #4]
 8014014:	4613      	mov	r3, r2
 8014016:	009b      	lsls	r3, r3, #2
 8014018:	4413      	add	r3, r2
 801401a:	009b      	lsls	r3, r3, #2
 801401c:	440b      	add	r3, r1
 801401e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014022:	2200      	movs	r2, #0
 8014024:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014026:	4b29      	ldr	r3, [pc, #164]	; (80140cc <USBD_CDC_DeInit+0x100>)
 8014028:	781b      	ldrb	r3, [r3, #0]
 801402a:	4619      	mov	r1, r3
 801402c:	6878      	ldr	r0, [r7, #4]
 801402e:	f005 fa56 	bl	80194de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014032:	4b26      	ldr	r3, [pc, #152]	; (80140cc <USBD_CDC_DeInit+0x100>)
 8014034:	781b      	ldrb	r3, [r3, #0]
 8014036:	f003 020f 	and.w	r2, r3, #15
 801403a:	6879      	ldr	r1, [r7, #4]
 801403c:	4613      	mov	r3, r2
 801403e:	009b      	lsls	r3, r3, #2
 8014040:	4413      	add	r3, r2
 8014042:	009b      	lsls	r3, r3, #2
 8014044:	440b      	add	r3, r1
 8014046:	3324      	adds	r3, #36	; 0x24
 8014048:	2200      	movs	r2, #0
 801404a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801404c:	4b1f      	ldr	r3, [pc, #124]	; (80140cc <USBD_CDC_DeInit+0x100>)
 801404e:	781b      	ldrb	r3, [r3, #0]
 8014050:	f003 020f 	and.w	r2, r3, #15
 8014054:	6879      	ldr	r1, [r7, #4]
 8014056:	4613      	mov	r3, r2
 8014058:	009b      	lsls	r3, r3, #2
 801405a:	4413      	add	r3, r2
 801405c:	009b      	lsls	r3, r3, #2
 801405e:	440b      	add	r3, r1
 8014060:	3326      	adds	r3, #38	; 0x26
 8014062:	2200      	movs	r2, #0
 8014064:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	32b0      	adds	r2, #176	; 0xb0
 8014070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d01f      	beq.n	80140b8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801407e:	687a      	ldr	r2, [r7, #4]
 8014080:	33b0      	adds	r3, #176	; 0xb0
 8014082:	009b      	lsls	r3, r3, #2
 8014084:	4413      	add	r3, r2
 8014086:	685b      	ldr	r3, [r3, #4]
 8014088:	685b      	ldr	r3, [r3, #4]
 801408a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	32b0      	adds	r2, #176	; 0xb0
 8014096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801409a:	4618      	mov	r0, r3
 801409c:	f005 fb2a 	bl	80196f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	32b0      	adds	r2, #176	; 0xb0
 80140aa:	2100      	movs	r1, #0
 80140ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	2200      	movs	r2, #0
 80140b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80140b8:	2300      	movs	r3, #0
}
 80140ba:	4618      	mov	r0, r3
 80140bc:	3708      	adds	r7, #8
 80140be:	46bd      	mov	sp, r7
 80140c0:	bd80      	pop	{r7, pc}
 80140c2:	bf00      	nop
 80140c4:	24000097 	.word	0x24000097
 80140c8:	24000098 	.word	0x24000098
 80140cc:	24000099 	.word	0x24000099

080140d0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b086      	sub	sp, #24
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
 80140d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	32b0      	adds	r2, #176	; 0xb0
 80140e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80140e8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80140ea:	2300      	movs	r3, #0
 80140ec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80140ee:	2300      	movs	r3, #0
 80140f0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80140f2:	2300      	movs	r3, #0
 80140f4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80140f6:	693b      	ldr	r3, [r7, #16]
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d101      	bne.n	8014100 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80140fc:	2303      	movs	r3, #3
 80140fe:	e0bf      	b.n	8014280 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014100:	683b      	ldr	r3, [r7, #0]
 8014102:	781b      	ldrb	r3, [r3, #0]
 8014104:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014108:	2b00      	cmp	r3, #0
 801410a:	d050      	beq.n	80141ae <USBD_CDC_Setup+0xde>
 801410c:	2b20      	cmp	r3, #32
 801410e:	f040 80af 	bne.w	8014270 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014112:	683b      	ldr	r3, [r7, #0]
 8014114:	88db      	ldrh	r3, [r3, #6]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d03a      	beq.n	8014190 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801411a:	683b      	ldr	r3, [r7, #0]
 801411c:	781b      	ldrb	r3, [r3, #0]
 801411e:	b25b      	sxtb	r3, r3
 8014120:	2b00      	cmp	r3, #0
 8014122:	da1b      	bge.n	801415c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801412a:	687a      	ldr	r2, [r7, #4]
 801412c:	33b0      	adds	r3, #176	; 0xb0
 801412e:	009b      	lsls	r3, r3, #2
 8014130:	4413      	add	r3, r2
 8014132:	685b      	ldr	r3, [r3, #4]
 8014134:	689b      	ldr	r3, [r3, #8]
 8014136:	683a      	ldr	r2, [r7, #0]
 8014138:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801413a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801413c:	683a      	ldr	r2, [r7, #0]
 801413e:	88d2      	ldrh	r2, [r2, #6]
 8014140:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014142:	683b      	ldr	r3, [r7, #0]
 8014144:	88db      	ldrh	r3, [r3, #6]
 8014146:	2b07      	cmp	r3, #7
 8014148:	bf28      	it	cs
 801414a:	2307      	movcs	r3, #7
 801414c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801414e:	693b      	ldr	r3, [r7, #16]
 8014150:	89fa      	ldrh	r2, [r7, #14]
 8014152:	4619      	mov	r1, r3
 8014154:	6878      	ldr	r0, [r7, #4]
 8014156:	f001 fd89 	bl	8015c6c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801415a:	e090      	b.n	801427e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801415c:	683b      	ldr	r3, [r7, #0]
 801415e:	785a      	ldrb	r2, [r3, #1]
 8014160:	693b      	ldr	r3, [r7, #16]
 8014162:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014166:	683b      	ldr	r3, [r7, #0]
 8014168:	88db      	ldrh	r3, [r3, #6]
 801416a:	2b3f      	cmp	r3, #63	; 0x3f
 801416c:	d803      	bhi.n	8014176 <USBD_CDC_Setup+0xa6>
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	88db      	ldrh	r3, [r3, #6]
 8014172:	b2da      	uxtb	r2, r3
 8014174:	e000      	b.n	8014178 <USBD_CDC_Setup+0xa8>
 8014176:	2240      	movs	r2, #64	; 0x40
 8014178:	693b      	ldr	r3, [r7, #16]
 801417a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801417e:	6939      	ldr	r1, [r7, #16]
 8014180:	693b      	ldr	r3, [r7, #16]
 8014182:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014186:	461a      	mov	r2, r3
 8014188:	6878      	ldr	r0, [r7, #4]
 801418a:	f001 fd9b 	bl	8015cc4 <USBD_CtlPrepareRx>
      break;
 801418e:	e076      	b.n	801427e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014196:	687a      	ldr	r2, [r7, #4]
 8014198:	33b0      	adds	r3, #176	; 0xb0
 801419a:	009b      	lsls	r3, r3, #2
 801419c:	4413      	add	r3, r2
 801419e:	685b      	ldr	r3, [r3, #4]
 80141a0:	689b      	ldr	r3, [r3, #8]
 80141a2:	683a      	ldr	r2, [r7, #0]
 80141a4:	7850      	ldrb	r0, [r2, #1]
 80141a6:	2200      	movs	r2, #0
 80141a8:	6839      	ldr	r1, [r7, #0]
 80141aa:	4798      	blx	r3
      break;
 80141ac:	e067      	b.n	801427e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80141ae:	683b      	ldr	r3, [r7, #0]
 80141b0:	785b      	ldrb	r3, [r3, #1]
 80141b2:	2b0b      	cmp	r3, #11
 80141b4:	d851      	bhi.n	801425a <USBD_CDC_Setup+0x18a>
 80141b6:	a201      	add	r2, pc, #4	; (adr r2, 80141bc <USBD_CDC_Setup+0xec>)
 80141b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141bc:	080141ed 	.word	0x080141ed
 80141c0:	08014269 	.word	0x08014269
 80141c4:	0801425b 	.word	0x0801425b
 80141c8:	0801425b 	.word	0x0801425b
 80141cc:	0801425b 	.word	0x0801425b
 80141d0:	0801425b 	.word	0x0801425b
 80141d4:	0801425b 	.word	0x0801425b
 80141d8:	0801425b 	.word	0x0801425b
 80141dc:	0801425b 	.word	0x0801425b
 80141e0:	0801425b 	.word	0x0801425b
 80141e4:	08014217 	.word	0x08014217
 80141e8:	08014241 	.word	0x08014241
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80141f2:	b2db      	uxtb	r3, r3
 80141f4:	2b03      	cmp	r3, #3
 80141f6:	d107      	bne.n	8014208 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80141f8:	f107 030a 	add.w	r3, r7, #10
 80141fc:	2202      	movs	r2, #2
 80141fe:	4619      	mov	r1, r3
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	f001 fd33 	bl	8015c6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014206:	e032      	b.n	801426e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014208:	6839      	ldr	r1, [r7, #0]
 801420a:	6878      	ldr	r0, [r7, #4]
 801420c:	f001 fcbd 	bl	8015b8a <USBD_CtlError>
            ret = USBD_FAIL;
 8014210:	2303      	movs	r3, #3
 8014212:	75fb      	strb	r3, [r7, #23]
          break;
 8014214:	e02b      	b.n	801426e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801421c:	b2db      	uxtb	r3, r3
 801421e:	2b03      	cmp	r3, #3
 8014220:	d107      	bne.n	8014232 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014222:	f107 030d 	add.w	r3, r7, #13
 8014226:	2201      	movs	r2, #1
 8014228:	4619      	mov	r1, r3
 801422a:	6878      	ldr	r0, [r7, #4]
 801422c:	f001 fd1e 	bl	8015c6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014230:	e01d      	b.n	801426e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014232:	6839      	ldr	r1, [r7, #0]
 8014234:	6878      	ldr	r0, [r7, #4]
 8014236:	f001 fca8 	bl	8015b8a <USBD_CtlError>
            ret = USBD_FAIL;
 801423a:	2303      	movs	r3, #3
 801423c:	75fb      	strb	r3, [r7, #23]
          break;
 801423e:	e016      	b.n	801426e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014246:	b2db      	uxtb	r3, r3
 8014248:	2b03      	cmp	r3, #3
 801424a:	d00f      	beq.n	801426c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801424c:	6839      	ldr	r1, [r7, #0]
 801424e:	6878      	ldr	r0, [r7, #4]
 8014250:	f001 fc9b 	bl	8015b8a <USBD_CtlError>
            ret = USBD_FAIL;
 8014254:	2303      	movs	r3, #3
 8014256:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014258:	e008      	b.n	801426c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801425a:	6839      	ldr	r1, [r7, #0]
 801425c:	6878      	ldr	r0, [r7, #4]
 801425e:	f001 fc94 	bl	8015b8a <USBD_CtlError>
          ret = USBD_FAIL;
 8014262:	2303      	movs	r3, #3
 8014264:	75fb      	strb	r3, [r7, #23]
          break;
 8014266:	e002      	b.n	801426e <USBD_CDC_Setup+0x19e>
          break;
 8014268:	bf00      	nop
 801426a:	e008      	b.n	801427e <USBD_CDC_Setup+0x1ae>
          break;
 801426c:	bf00      	nop
      }
      break;
 801426e:	e006      	b.n	801427e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8014270:	6839      	ldr	r1, [r7, #0]
 8014272:	6878      	ldr	r0, [r7, #4]
 8014274:	f001 fc89 	bl	8015b8a <USBD_CtlError>
      ret = USBD_FAIL;
 8014278:	2303      	movs	r3, #3
 801427a:	75fb      	strb	r3, [r7, #23]
      break;
 801427c:	bf00      	nop
  }

  return (uint8_t)ret;
 801427e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014280:	4618      	mov	r0, r3
 8014282:	3718      	adds	r7, #24
 8014284:	46bd      	mov	sp, r7
 8014286:	bd80      	pop	{r7, pc}

08014288 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014288:	b580      	push	{r7, lr}
 801428a:	b084      	sub	sp, #16
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
 8014290:	460b      	mov	r3, r1
 8014292:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801429a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	32b0      	adds	r2, #176	; 0xb0
 80142a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d101      	bne.n	80142b2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80142ae:	2303      	movs	r3, #3
 80142b0:	e065      	b.n	801437e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	32b0      	adds	r2, #176	; 0xb0
 80142bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80142c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80142c2:	78fb      	ldrb	r3, [r7, #3]
 80142c4:	f003 020f 	and.w	r2, r3, #15
 80142c8:	6879      	ldr	r1, [r7, #4]
 80142ca:	4613      	mov	r3, r2
 80142cc:	009b      	lsls	r3, r3, #2
 80142ce:	4413      	add	r3, r2
 80142d0:	009b      	lsls	r3, r3, #2
 80142d2:	440b      	add	r3, r1
 80142d4:	3318      	adds	r3, #24
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d02f      	beq.n	801433c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80142dc:	78fb      	ldrb	r3, [r7, #3]
 80142de:	f003 020f 	and.w	r2, r3, #15
 80142e2:	6879      	ldr	r1, [r7, #4]
 80142e4:	4613      	mov	r3, r2
 80142e6:	009b      	lsls	r3, r3, #2
 80142e8:	4413      	add	r3, r2
 80142ea:	009b      	lsls	r3, r3, #2
 80142ec:	440b      	add	r3, r1
 80142ee:	3318      	adds	r3, #24
 80142f0:	681a      	ldr	r2, [r3, #0]
 80142f2:	78fb      	ldrb	r3, [r7, #3]
 80142f4:	f003 010f 	and.w	r1, r3, #15
 80142f8:	68f8      	ldr	r0, [r7, #12]
 80142fa:	460b      	mov	r3, r1
 80142fc:	00db      	lsls	r3, r3, #3
 80142fe:	440b      	add	r3, r1
 8014300:	009b      	lsls	r3, r3, #2
 8014302:	4403      	add	r3, r0
 8014304:	3344      	adds	r3, #68	; 0x44
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	fbb2 f1f3 	udiv	r1, r2, r3
 801430c:	fb01 f303 	mul.w	r3, r1, r3
 8014310:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014312:	2b00      	cmp	r3, #0
 8014314:	d112      	bne.n	801433c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014316:	78fb      	ldrb	r3, [r7, #3]
 8014318:	f003 020f 	and.w	r2, r3, #15
 801431c:	6879      	ldr	r1, [r7, #4]
 801431e:	4613      	mov	r3, r2
 8014320:	009b      	lsls	r3, r3, #2
 8014322:	4413      	add	r3, r2
 8014324:	009b      	lsls	r3, r3, #2
 8014326:	440b      	add	r3, r1
 8014328:	3318      	adds	r3, #24
 801432a:	2200      	movs	r2, #0
 801432c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801432e:	78f9      	ldrb	r1, [r7, #3]
 8014330:	2300      	movs	r3, #0
 8014332:	2200      	movs	r2, #0
 8014334:	6878      	ldr	r0, [r7, #4]
 8014336:	f005 f97a 	bl	801962e <USBD_LL_Transmit>
 801433a:	e01f      	b.n	801437c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801433c:	68bb      	ldr	r3, [r7, #8]
 801433e:	2200      	movs	r2, #0
 8014340:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801434a:	687a      	ldr	r2, [r7, #4]
 801434c:	33b0      	adds	r3, #176	; 0xb0
 801434e:	009b      	lsls	r3, r3, #2
 8014350:	4413      	add	r3, r2
 8014352:	685b      	ldr	r3, [r3, #4]
 8014354:	691b      	ldr	r3, [r3, #16]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d010      	beq.n	801437c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014360:	687a      	ldr	r2, [r7, #4]
 8014362:	33b0      	adds	r3, #176	; 0xb0
 8014364:	009b      	lsls	r3, r3, #2
 8014366:	4413      	add	r3, r2
 8014368:	685b      	ldr	r3, [r3, #4]
 801436a:	691b      	ldr	r3, [r3, #16]
 801436c:	68ba      	ldr	r2, [r7, #8]
 801436e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014372:	68ba      	ldr	r2, [r7, #8]
 8014374:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8014378:	78fa      	ldrb	r2, [r7, #3]
 801437a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801437c:	2300      	movs	r3, #0
}
 801437e:	4618      	mov	r0, r3
 8014380:	3710      	adds	r7, #16
 8014382:	46bd      	mov	sp, r7
 8014384:	bd80      	pop	{r7, pc}

08014386 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014386:	b580      	push	{r7, lr}
 8014388:	b084      	sub	sp, #16
 801438a:	af00      	add	r7, sp, #0
 801438c:	6078      	str	r0, [r7, #4]
 801438e:	460b      	mov	r3, r1
 8014390:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	32b0      	adds	r2, #176	; 0xb0
 801439c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80143a8:	687b      	ldr	r3, [r7, #4]
 80143aa:	32b0      	adds	r2, #176	; 0xb0
 80143ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d101      	bne.n	80143b8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80143b4:	2303      	movs	r3, #3
 80143b6:	e01a      	b.n	80143ee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80143b8:	78fb      	ldrb	r3, [r7, #3]
 80143ba:	4619      	mov	r1, r3
 80143bc:	6878      	ldr	r0, [r7, #4]
 80143be:	f005 f978 	bl	80196b2 <USBD_LL_GetRxDataSize>
 80143c2:	4602      	mov	r2, r0
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80143d0:	687a      	ldr	r2, [r7, #4]
 80143d2:	33b0      	adds	r3, #176	; 0xb0
 80143d4:	009b      	lsls	r3, r3, #2
 80143d6:	4413      	add	r3, r2
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	68db      	ldr	r3, [r3, #12]
 80143dc:	68fa      	ldr	r2, [r7, #12]
 80143de:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80143e2:	68fa      	ldr	r2, [r7, #12]
 80143e4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80143e8:	4611      	mov	r1, r2
 80143ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80143ec:	2300      	movs	r3, #0
}
 80143ee:	4618      	mov	r0, r3
 80143f0:	3710      	adds	r7, #16
 80143f2:	46bd      	mov	sp, r7
 80143f4:	bd80      	pop	{r7, pc}

080143f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80143f6:	b580      	push	{r7, lr}
 80143f8:	b084      	sub	sp, #16
 80143fa:	af00      	add	r7, sp, #0
 80143fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	32b0      	adds	r2, #176	; 0xb0
 8014408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801440c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d101      	bne.n	8014418 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014414:	2303      	movs	r3, #3
 8014416:	e025      	b.n	8014464 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801441e:	687a      	ldr	r2, [r7, #4]
 8014420:	33b0      	adds	r3, #176	; 0xb0
 8014422:	009b      	lsls	r3, r3, #2
 8014424:	4413      	add	r3, r2
 8014426:	685b      	ldr	r3, [r3, #4]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d01a      	beq.n	8014462 <USBD_CDC_EP0_RxReady+0x6c>
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014432:	2bff      	cmp	r3, #255	; 0xff
 8014434:	d015      	beq.n	8014462 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801443c:	687a      	ldr	r2, [r7, #4]
 801443e:	33b0      	adds	r3, #176	; 0xb0
 8014440:	009b      	lsls	r3, r3, #2
 8014442:	4413      	add	r3, r2
 8014444:	685b      	ldr	r3, [r3, #4]
 8014446:	689b      	ldr	r3, [r3, #8]
 8014448:	68fa      	ldr	r2, [r7, #12]
 801444a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801444e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014450:	68fa      	ldr	r2, [r7, #12]
 8014452:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014456:	b292      	uxth	r2, r2
 8014458:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	22ff      	movs	r2, #255	; 0xff
 801445e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014462:	2300      	movs	r3, #0
}
 8014464:	4618      	mov	r0, r3
 8014466:	3710      	adds	r7, #16
 8014468:	46bd      	mov	sp, r7
 801446a:	bd80      	pop	{r7, pc}

0801446c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801446c:	b580      	push	{r7, lr}
 801446e:	b086      	sub	sp, #24
 8014470:	af00      	add	r7, sp, #0
 8014472:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014474:	2182      	movs	r1, #130	; 0x82
 8014476:	4818      	ldr	r0, [pc, #96]	; (80144d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014478:	f000 fd4f 	bl	8014f1a <USBD_GetEpDesc>
 801447c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801447e:	2101      	movs	r1, #1
 8014480:	4815      	ldr	r0, [pc, #84]	; (80144d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014482:	f000 fd4a 	bl	8014f1a <USBD_GetEpDesc>
 8014486:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014488:	2181      	movs	r1, #129	; 0x81
 801448a:	4813      	ldr	r0, [pc, #76]	; (80144d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801448c:	f000 fd45 	bl	8014f1a <USBD_GetEpDesc>
 8014490:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014492:	697b      	ldr	r3, [r7, #20]
 8014494:	2b00      	cmp	r3, #0
 8014496:	d002      	beq.n	801449e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014498:	697b      	ldr	r3, [r7, #20]
 801449a:	2210      	movs	r2, #16
 801449c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801449e:	693b      	ldr	r3, [r7, #16]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d006      	beq.n	80144b2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80144a4:	693b      	ldr	r3, [r7, #16]
 80144a6:	2200      	movs	r2, #0
 80144a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80144ac:	711a      	strb	r2, [r3, #4]
 80144ae:	2200      	movs	r2, #0
 80144b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80144b2:	68fb      	ldr	r3, [r7, #12]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d006      	beq.n	80144c6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	2200      	movs	r2, #0
 80144bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80144c0:	711a      	strb	r2, [r3, #4]
 80144c2:	2200      	movs	r2, #0
 80144c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	2243      	movs	r2, #67	; 0x43
 80144ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80144cc:	4b02      	ldr	r3, [pc, #8]	; (80144d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80144ce:	4618      	mov	r0, r3
 80144d0:	3718      	adds	r7, #24
 80144d2:	46bd      	mov	sp, r7
 80144d4:	bd80      	pop	{r7, pc}
 80144d6:	bf00      	nop
 80144d8:	24000054 	.word	0x24000054

080144dc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b086      	sub	sp, #24
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80144e4:	2182      	movs	r1, #130	; 0x82
 80144e6:	4818      	ldr	r0, [pc, #96]	; (8014548 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80144e8:	f000 fd17 	bl	8014f1a <USBD_GetEpDesc>
 80144ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80144ee:	2101      	movs	r1, #1
 80144f0:	4815      	ldr	r0, [pc, #84]	; (8014548 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80144f2:	f000 fd12 	bl	8014f1a <USBD_GetEpDesc>
 80144f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80144f8:	2181      	movs	r1, #129	; 0x81
 80144fa:	4813      	ldr	r0, [pc, #76]	; (8014548 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80144fc:	f000 fd0d 	bl	8014f1a <USBD_GetEpDesc>
 8014500:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014502:	697b      	ldr	r3, [r7, #20]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d002      	beq.n	801450e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014508:	697b      	ldr	r3, [r7, #20]
 801450a:	2210      	movs	r2, #16
 801450c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801450e:	693b      	ldr	r3, [r7, #16]
 8014510:	2b00      	cmp	r3, #0
 8014512:	d006      	beq.n	8014522 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014514:	693b      	ldr	r3, [r7, #16]
 8014516:	2200      	movs	r2, #0
 8014518:	711a      	strb	r2, [r3, #4]
 801451a:	2200      	movs	r2, #0
 801451c:	f042 0202 	orr.w	r2, r2, #2
 8014520:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d006      	beq.n	8014536 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	2200      	movs	r2, #0
 801452c:	711a      	strb	r2, [r3, #4]
 801452e:	2200      	movs	r2, #0
 8014530:	f042 0202 	orr.w	r2, r2, #2
 8014534:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	2243      	movs	r2, #67	; 0x43
 801453a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801453c:	4b02      	ldr	r3, [pc, #8]	; (8014548 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801453e:	4618      	mov	r0, r3
 8014540:	3718      	adds	r7, #24
 8014542:	46bd      	mov	sp, r7
 8014544:	bd80      	pop	{r7, pc}
 8014546:	bf00      	nop
 8014548:	24000054 	.word	0x24000054

0801454c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801454c:	b580      	push	{r7, lr}
 801454e:	b086      	sub	sp, #24
 8014550:	af00      	add	r7, sp, #0
 8014552:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014554:	2182      	movs	r1, #130	; 0x82
 8014556:	4818      	ldr	r0, [pc, #96]	; (80145b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014558:	f000 fcdf 	bl	8014f1a <USBD_GetEpDesc>
 801455c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801455e:	2101      	movs	r1, #1
 8014560:	4815      	ldr	r0, [pc, #84]	; (80145b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014562:	f000 fcda 	bl	8014f1a <USBD_GetEpDesc>
 8014566:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014568:	2181      	movs	r1, #129	; 0x81
 801456a:	4813      	ldr	r0, [pc, #76]	; (80145b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801456c:	f000 fcd5 	bl	8014f1a <USBD_GetEpDesc>
 8014570:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014572:	697b      	ldr	r3, [r7, #20]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d002      	beq.n	801457e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014578:	697b      	ldr	r3, [r7, #20]
 801457a:	2210      	movs	r2, #16
 801457c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801457e:	693b      	ldr	r3, [r7, #16]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d006      	beq.n	8014592 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014584:	693b      	ldr	r3, [r7, #16]
 8014586:	2200      	movs	r2, #0
 8014588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801458c:	711a      	strb	r2, [r3, #4]
 801458e:	2200      	movs	r2, #0
 8014590:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	2b00      	cmp	r3, #0
 8014596:	d006      	beq.n	80145a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	2200      	movs	r2, #0
 801459c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80145a0:	711a      	strb	r2, [r3, #4]
 80145a2:	2200      	movs	r2, #0
 80145a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	2243      	movs	r2, #67	; 0x43
 80145aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80145ac:	4b02      	ldr	r3, [pc, #8]	; (80145b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80145ae:	4618      	mov	r0, r3
 80145b0:	3718      	adds	r7, #24
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}
 80145b6:	bf00      	nop
 80145b8:	24000054 	.word	0x24000054

080145bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80145bc:	b480      	push	{r7}
 80145be:	b083      	sub	sp, #12
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	220a      	movs	r2, #10
 80145c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80145ca:	4b03      	ldr	r3, [pc, #12]	; (80145d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80145cc:	4618      	mov	r0, r3
 80145ce:	370c      	adds	r7, #12
 80145d0:	46bd      	mov	sp, r7
 80145d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145d6:	4770      	bx	lr
 80145d8:	24000010 	.word	0x24000010

080145dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80145dc:	b480      	push	{r7}
 80145de:	b083      	sub	sp, #12
 80145e0:	af00      	add	r7, sp, #0
 80145e2:	6078      	str	r0, [r7, #4]
 80145e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d101      	bne.n	80145f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80145ec:	2303      	movs	r3, #3
 80145ee:	e009      	b.n	8014604 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80145f6:	687a      	ldr	r2, [r7, #4]
 80145f8:	33b0      	adds	r3, #176	; 0xb0
 80145fa:	009b      	lsls	r3, r3, #2
 80145fc:	4413      	add	r3, r2
 80145fe:	683a      	ldr	r2, [r7, #0]
 8014600:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014602:	2300      	movs	r3, #0
}
 8014604:	4618      	mov	r0, r3
 8014606:	370c      	adds	r7, #12
 8014608:	46bd      	mov	sp, r7
 801460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801460e:	4770      	bx	lr

08014610 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014610:	b480      	push	{r7}
 8014612:	b087      	sub	sp, #28
 8014614:	af00      	add	r7, sp, #0
 8014616:	60f8      	str	r0, [r7, #12]
 8014618:	60b9      	str	r1, [r7, #8]
 801461a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801461c:	68fb      	ldr	r3, [r7, #12]
 801461e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	32b0      	adds	r2, #176	; 0xb0
 8014626:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801462a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801462c:	697b      	ldr	r3, [r7, #20]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d101      	bne.n	8014636 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014632:	2303      	movs	r3, #3
 8014634:	e008      	b.n	8014648 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014636:	697b      	ldr	r3, [r7, #20]
 8014638:	68ba      	ldr	r2, [r7, #8]
 801463a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801463e:	697b      	ldr	r3, [r7, #20]
 8014640:	687a      	ldr	r2, [r7, #4]
 8014642:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014646:	2300      	movs	r3, #0
}
 8014648:	4618      	mov	r0, r3
 801464a:	371c      	adds	r7, #28
 801464c:	46bd      	mov	sp, r7
 801464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014652:	4770      	bx	lr

08014654 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014654:	b480      	push	{r7}
 8014656:	b085      	sub	sp, #20
 8014658:	af00      	add	r7, sp, #0
 801465a:	6078      	str	r0, [r7, #4]
 801465c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	32b0      	adds	r2, #176	; 0xb0
 8014668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801466c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d101      	bne.n	8014678 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014674:	2303      	movs	r3, #3
 8014676:	e004      	b.n	8014682 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	683a      	ldr	r2, [r7, #0]
 801467c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014680:	2300      	movs	r3, #0
}
 8014682:	4618      	mov	r0, r3
 8014684:	3714      	adds	r7, #20
 8014686:	46bd      	mov	sp, r7
 8014688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801468c:	4770      	bx	lr
	...

08014690 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b084      	sub	sp, #16
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	32b0      	adds	r2, #176	; 0xb0
 80146a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146a6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80146a8:	2301      	movs	r3, #1
 80146aa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80146ac:	68bb      	ldr	r3, [r7, #8]
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d101      	bne.n	80146b6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80146b2:	2303      	movs	r3, #3
 80146b4:	e025      	b.n	8014702 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80146b6:	68bb      	ldr	r3, [r7, #8]
 80146b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d11f      	bne.n	8014700 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80146c0:	68bb      	ldr	r3, [r7, #8]
 80146c2:	2201      	movs	r2, #1
 80146c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80146c8:	4b10      	ldr	r3, [pc, #64]	; (801470c <USBD_CDC_TransmitPacket+0x7c>)
 80146ca:	781b      	ldrb	r3, [r3, #0]
 80146cc:	f003 020f 	and.w	r2, r3, #15
 80146d0:	68bb      	ldr	r3, [r7, #8]
 80146d2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80146d6:	6878      	ldr	r0, [r7, #4]
 80146d8:	4613      	mov	r3, r2
 80146da:	009b      	lsls	r3, r3, #2
 80146dc:	4413      	add	r3, r2
 80146de:	009b      	lsls	r3, r3, #2
 80146e0:	4403      	add	r3, r0
 80146e2:	3318      	adds	r3, #24
 80146e4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80146e6:	4b09      	ldr	r3, [pc, #36]	; (801470c <USBD_CDC_TransmitPacket+0x7c>)
 80146e8:	7819      	ldrb	r1, [r3, #0]
 80146ea:	68bb      	ldr	r3, [r7, #8]
 80146ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80146f0:	68bb      	ldr	r3, [r7, #8]
 80146f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80146f6:	6878      	ldr	r0, [r7, #4]
 80146f8:	f004 ff99 	bl	801962e <USBD_LL_Transmit>

    ret = USBD_OK;
 80146fc:	2300      	movs	r3, #0
 80146fe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014700:	7bfb      	ldrb	r3, [r7, #15]
}
 8014702:	4618      	mov	r0, r3
 8014704:	3710      	adds	r7, #16
 8014706:	46bd      	mov	sp, r7
 8014708:	bd80      	pop	{r7, pc}
 801470a:	bf00      	nop
 801470c:	24000097 	.word	0x24000097

08014710 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014710:	b580      	push	{r7, lr}
 8014712:	b084      	sub	sp, #16
 8014714:	af00      	add	r7, sp, #0
 8014716:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	32b0      	adds	r2, #176	; 0xb0
 8014722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014726:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	32b0      	adds	r2, #176	; 0xb0
 8014732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d101      	bne.n	801473e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801473a:	2303      	movs	r3, #3
 801473c:	e018      	b.n	8014770 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	7c1b      	ldrb	r3, [r3, #16]
 8014742:	2b00      	cmp	r3, #0
 8014744:	d10a      	bne.n	801475c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014746:	4b0c      	ldr	r3, [pc, #48]	; (8014778 <USBD_CDC_ReceivePacket+0x68>)
 8014748:	7819      	ldrb	r1, [r3, #0]
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014750:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014754:	6878      	ldr	r0, [r7, #4]
 8014756:	f004 ff8b 	bl	8019670 <USBD_LL_PrepareReceive>
 801475a:	e008      	b.n	801476e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801475c:	4b06      	ldr	r3, [pc, #24]	; (8014778 <USBD_CDC_ReceivePacket+0x68>)
 801475e:	7819      	ldrb	r1, [r3, #0]
 8014760:	68fb      	ldr	r3, [r7, #12]
 8014762:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014766:	2340      	movs	r3, #64	; 0x40
 8014768:	6878      	ldr	r0, [r7, #4]
 801476a:	f004 ff81 	bl	8019670 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801476e:	2300      	movs	r3, #0
}
 8014770:	4618      	mov	r0, r3
 8014772:	3710      	adds	r7, #16
 8014774:	46bd      	mov	sp, r7
 8014776:	bd80      	pop	{r7, pc}
 8014778:	24000098 	.word	0x24000098

0801477c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801477c:	b580      	push	{r7, lr}
 801477e:	b086      	sub	sp, #24
 8014780:	af00      	add	r7, sp, #0
 8014782:	60f8      	str	r0, [r7, #12]
 8014784:	60b9      	str	r1, [r7, #8]
 8014786:	4613      	mov	r3, r2
 8014788:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d101      	bne.n	8014794 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014790:	2303      	movs	r3, #3
 8014792:	e01f      	b.n	80147d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	2200      	movs	r2, #0
 8014798:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	2200      	movs	r2, #0
 80147a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	2200      	movs	r2, #0
 80147a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80147ac:	68bb      	ldr	r3, [r7, #8]
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d003      	beq.n	80147ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	68ba      	ldr	r2, [r7, #8]
 80147b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	2201      	movs	r2, #1
 80147be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	79fa      	ldrb	r2, [r7, #7]
 80147c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80147c8:	68f8      	ldr	r0, [r7, #12]
 80147ca:	f004 fdf5 	bl	80193b8 <USBD_LL_Init>
 80147ce:	4603      	mov	r3, r0
 80147d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80147d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80147d4:	4618      	mov	r0, r3
 80147d6:	3718      	adds	r7, #24
 80147d8:	46bd      	mov	sp, r7
 80147da:	bd80      	pop	{r7, pc}

080147dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	b084      	sub	sp, #16
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
 80147e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80147e6:	2300      	movs	r3, #0
 80147e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d101      	bne.n	80147f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80147f0:	2303      	movs	r3, #3
 80147f2:	e025      	b.n	8014840 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	683a      	ldr	r2, [r7, #0]
 80147f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	32ae      	adds	r2, #174	; 0xae
 8014806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801480a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801480c:	2b00      	cmp	r3, #0
 801480e:	d00f      	beq.n	8014830 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	32ae      	adds	r2, #174	; 0xae
 801481a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801481e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014820:	f107 020e 	add.w	r2, r7, #14
 8014824:	4610      	mov	r0, r2
 8014826:	4798      	blx	r3
 8014828:	4602      	mov	r2, r0
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014836:	1c5a      	adds	r2, r3, #1
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801483e:	2300      	movs	r3, #0
}
 8014840:	4618      	mov	r0, r3
 8014842:	3710      	adds	r7, #16
 8014844:	46bd      	mov	sp, r7
 8014846:	bd80      	pop	{r7, pc}

08014848 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b082      	sub	sp, #8
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014850:	6878      	ldr	r0, [r7, #4]
 8014852:	f004 fe03 	bl	801945c <USBD_LL_Start>
 8014856:	4603      	mov	r3, r0
}
 8014858:	4618      	mov	r0, r3
 801485a:	3708      	adds	r7, #8
 801485c:	46bd      	mov	sp, r7
 801485e:	bd80      	pop	{r7, pc}

08014860 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014860:	b480      	push	{r7}
 8014862:	b083      	sub	sp, #12
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014868:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801486a:	4618      	mov	r0, r3
 801486c:	370c      	adds	r7, #12
 801486e:	46bd      	mov	sp, r7
 8014870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014874:	4770      	bx	lr

08014876 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014876:	b580      	push	{r7, lr}
 8014878:	b084      	sub	sp, #16
 801487a:	af00      	add	r7, sp, #0
 801487c:	6078      	str	r0, [r7, #4]
 801487e:	460b      	mov	r3, r1
 8014880:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014882:	2300      	movs	r3, #0
 8014884:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801488c:	2b00      	cmp	r3, #0
 801488e:	d009      	beq.n	80148a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	78fa      	ldrb	r2, [r7, #3]
 801489a:	4611      	mov	r1, r2
 801489c:	6878      	ldr	r0, [r7, #4]
 801489e:	4798      	blx	r3
 80148a0:	4603      	mov	r3, r0
 80148a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80148a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80148a6:	4618      	mov	r0, r3
 80148a8:	3710      	adds	r7, #16
 80148aa:	46bd      	mov	sp, r7
 80148ac:	bd80      	pop	{r7, pc}

080148ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80148ae:	b580      	push	{r7, lr}
 80148b0:	b084      	sub	sp, #16
 80148b2:	af00      	add	r7, sp, #0
 80148b4:	6078      	str	r0, [r7, #4]
 80148b6:	460b      	mov	r3, r1
 80148b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80148ba:	2300      	movs	r3, #0
 80148bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148c4:	685b      	ldr	r3, [r3, #4]
 80148c6:	78fa      	ldrb	r2, [r7, #3]
 80148c8:	4611      	mov	r1, r2
 80148ca:	6878      	ldr	r0, [r7, #4]
 80148cc:	4798      	blx	r3
 80148ce:	4603      	mov	r3, r0
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d001      	beq.n	80148d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80148d4:	2303      	movs	r3, #3
 80148d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80148d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80148da:	4618      	mov	r0, r3
 80148dc:	3710      	adds	r7, #16
 80148de:	46bd      	mov	sp, r7
 80148e0:	bd80      	pop	{r7, pc}

080148e2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80148e2:	b580      	push	{r7, lr}
 80148e4:	b084      	sub	sp, #16
 80148e6:	af00      	add	r7, sp, #0
 80148e8:	6078      	str	r0, [r7, #4]
 80148ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80148f2:	6839      	ldr	r1, [r7, #0]
 80148f4:	4618      	mov	r0, r3
 80148f6:	f001 f90e 	bl	8015b16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	2201      	movs	r2, #1
 80148fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014908:	461a      	mov	r2, r3
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014916:	f003 031f 	and.w	r3, r3, #31
 801491a:	2b02      	cmp	r3, #2
 801491c:	d01a      	beq.n	8014954 <USBD_LL_SetupStage+0x72>
 801491e:	2b02      	cmp	r3, #2
 8014920:	d822      	bhi.n	8014968 <USBD_LL_SetupStage+0x86>
 8014922:	2b00      	cmp	r3, #0
 8014924:	d002      	beq.n	801492c <USBD_LL_SetupStage+0x4a>
 8014926:	2b01      	cmp	r3, #1
 8014928:	d00a      	beq.n	8014940 <USBD_LL_SetupStage+0x5e>
 801492a:	e01d      	b.n	8014968 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014932:	4619      	mov	r1, r3
 8014934:	6878      	ldr	r0, [r7, #4]
 8014936:	f000 fb65 	bl	8015004 <USBD_StdDevReq>
 801493a:	4603      	mov	r3, r0
 801493c:	73fb      	strb	r3, [r7, #15]
      break;
 801493e:	e020      	b.n	8014982 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014946:	4619      	mov	r1, r3
 8014948:	6878      	ldr	r0, [r7, #4]
 801494a:	f000 fbcd 	bl	80150e8 <USBD_StdItfReq>
 801494e:	4603      	mov	r3, r0
 8014950:	73fb      	strb	r3, [r7, #15]
      break;
 8014952:	e016      	b.n	8014982 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801495a:	4619      	mov	r1, r3
 801495c:	6878      	ldr	r0, [r7, #4]
 801495e:	f000 fc2f 	bl	80151c0 <USBD_StdEPReq>
 8014962:	4603      	mov	r3, r0
 8014964:	73fb      	strb	r3, [r7, #15]
      break;
 8014966:	e00c      	b.n	8014982 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801496e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014972:	b2db      	uxtb	r3, r3
 8014974:	4619      	mov	r1, r3
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	f004 fdd0 	bl	801951c <USBD_LL_StallEP>
 801497c:	4603      	mov	r3, r0
 801497e:	73fb      	strb	r3, [r7, #15]
      break;
 8014980:	bf00      	nop
  }

  return ret;
 8014982:	7bfb      	ldrb	r3, [r7, #15]
}
 8014984:	4618      	mov	r0, r3
 8014986:	3710      	adds	r7, #16
 8014988:	46bd      	mov	sp, r7
 801498a:	bd80      	pop	{r7, pc}

0801498c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801498c:	b580      	push	{r7, lr}
 801498e:	b086      	sub	sp, #24
 8014990:	af00      	add	r7, sp, #0
 8014992:	60f8      	str	r0, [r7, #12]
 8014994:	460b      	mov	r3, r1
 8014996:	607a      	str	r2, [r7, #4]
 8014998:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801499a:	2300      	movs	r3, #0
 801499c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801499e:	7afb      	ldrb	r3, [r7, #11]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d16e      	bne.n	8014a82 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80149aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80149b2:	2b03      	cmp	r3, #3
 80149b4:	f040 8098 	bne.w	8014ae8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80149b8:	693b      	ldr	r3, [r7, #16]
 80149ba:	689a      	ldr	r2, [r3, #8]
 80149bc:	693b      	ldr	r3, [r7, #16]
 80149be:	68db      	ldr	r3, [r3, #12]
 80149c0:	429a      	cmp	r2, r3
 80149c2:	d913      	bls.n	80149ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80149c4:	693b      	ldr	r3, [r7, #16]
 80149c6:	689a      	ldr	r2, [r3, #8]
 80149c8:	693b      	ldr	r3, [r7, #16]
 80149ca:	68db      	ldr	r3, [r3, #12]
 80149cc:	1ad2      	subs	r2, r2, r3
 80149ce:	693b      	ldr	r3, [r7, #16]
 80149d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80149d2:	693b      	ldr	r3, [r7, #16]
 80149d4:	68da      	ldr	r2, [r3, #12]
 80149d6:	693b      	ldr	r3, [r7, #16]
 80149d8:	689b      	ldr	r3, [r3, #8]
 80149da:	4293      	cmp	r3, r2
 80149dc:	bf28      	it	cs
 80149de:	4613      	movcs	r3, r2
 80149e0:	461a      	mov	r2, r3
 80149e2:	6879      	ldr	r1, [r7, #4]
 80149e4:	68f8      	ldr	r0, [r7, #12]
 80149e6:	f001 f98a 	bl	8015cfe <USBD_CtlContinueRx>
 80149ea:	e07d      	b.n	8014ae8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80149f2:	f003 031f 	and.w	r3, r3, #31
 80149f6:	2b02      	cmp	r3, #2
 80149f8:	d014      	beq.n	8014a24 <USBD_LL_DataOutStage+0x98>
 80149fa:	2b02      	cmp	r3, #2
 80149fc:	d81d      	bhi.n	8014a3a <USBD_LL_DataOutStage+0xae>
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d002      	beq.n	8014a08 <USBD_LL_DataOutStage+0x7c>
 8014a02:	2b01      	cmp	r3, #1
 8014a04:	d003      	beq.n	8014a0e <USBD_LL_DataOutStage+0x82>
 8014a06:	e018      	b.n	8014a3a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8014a08:	2300      	movs	r3, #0
 8014a0a:	75bb      	strb	r3, [r7, #22]
            break;
 8014a0c:	e018      	b.n	8014a40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014a14:	b2db      	uxtb	r3, r3
 8014a16:	4619      	mov	r1, r3
 8014a18:	68f8      	ldr	r0, [r7, #12]
 8014a1a:	f000 fa64 	bl	8014ee6 <USBD_CoreFindIF>
 8014a1e:	4603      	mov	r3, r0
 8014a20:	75bb      	strb	r3, [r7, #22]
            break;
 8014a22:	e00d      	b.n	8014a40 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014a2a:	b2db      	uxtb	r3, r3
 8014a2c:	4619      	mov	r1, r3
 8014a2e:	68f8      	ldr	r0, [r7, #12]
 8014a30:	f000 fa66 	bl	8014f00 <USBD_CoreFindEP>
 8014a34:	4603      	mov	r3, r0
 8014a36:	75bb      	strb	r3, [r7, #22]
            break;
 8014a38:	e002      	b.n	8014a40 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8014a3a:	2300      	movs	r3, #0
 8014a3c:	75bb      	strb	r3, [r7, #22]
            break;
 8014a3e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8014a40:	7dbb      	ldrb	r3, [r7, #22]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d119      	bne.n	8014a7a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a4c:	b2db      	uxtb	r3, r3
 8014a4e:	2b03      	cmp	r3, #3
 8014a50:	d113      	bne.n	8014a7a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8014a52:	7dba      	ldrb	r2, [r7, #22]
 8014a54:	68fb      	ldr	r3, [r7, #12]
 8014a56:	32ae      	adds	r2, #174	; 0xae
 8014a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a5c:	691b      	ldr	r3, [r3, #16]
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d00b      	beq.n	8014a7a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8014a62:	7dba      	ldrb	r2, [r7, #22]
 8014a64:	68fb      	ldr	r3, [r7, #12]
 8014a66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8014a6a:	7dba      	ldrb	r2, [r7, #22]
 8014a6c:	68fb      	ldr	r3, [r7, #12]
 8014a6e:	32ae      	adds	r2, #174	; 0xae
 8014a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a74:	691b      	ldr	r3, [r3, #16]
 8014a76:	68f8      	ldr	r0, [r7, #12]
 8014a78:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014a7a:	68f8      	ldr	r0, [r7, #12]
 8014a7c:	f001 f950 	bl	8015d20 <USBD_CtlSendStatus>
 8014a80:	e032      	b.n	8014ae8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8014a82:	7afb      	ldrb	r3, [r7, #11]
 8014a84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014a88:	b2db      	uxtb	r3, r3
 8014a8a:	4619      	mov	r1, r3
 8014a8c:	68f8      	ldr	r0, [r7, #12]
 8014a8e:	f000 fa37 	bl	8014f00 <USBD_CoreFindEP>
 8014a92:	4603      	mov	r3, r0
 8014a94:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014a96:	7dbb      	ldrb	r3, [r7, #22]
 8014a98:	2bff      	cmp	r3, #255	; 0xff
 8014a9a:	d025      	beq.n	8014ae8 <USBD_LL_DataOutStage+0x15c>
 8014a9c:	7dbb      	ldrb	r3, [r7, #22]
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d122      	bne.n	8014ae8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014aa2:	68fb      	ldr	r3, [r7, #12]
 8014aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014aa8:	b2db      	uxtb	r3, r3
 8014aaa:	2b03      	cmp	r3, #3
 8014aac:	d117      	bne.n	8014ade <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8014aae:	7dba      	ldrb	r2, [r7, #22]
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	32ae      	adds	r2, #174	; 0xae
 8014ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ab8:	699b      	ldr	r3, [r3, #24]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d00f      	beq.n	8014ade <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8014abe:	7dba      	ldrb	r2, [r7, #22]
 8014ac0:	68fb      	ldr	r3, [r7, #12]
 8014ac2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8014ac6:	7dba      	ldrb	r2, [r7, #22]
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	32ae      	adds	r2, #174	; 0xae
 8014acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ad0:	699b      	ldr	r3, [r3, #24]
 8014ad2:	7afa      	ldrb	r2, [r7, #11]
 8014ad4:	4611      	mov	r1, r2
 8014ad6:	68f8      	ldr	r0, [r7, #12]
 8014ad8:	4798      	blx	r3
 8014ada:	4603      	mov	r3, r0
 8014adc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8014ade:	7dfb      	ldrb	r3, [r7, #23]
 8014ae0:	2b00      	cmp	r3, #0
 8014ae2:	d001      	beq.n	8014ae8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014ae4:	7dfb      	ldrb	r3, [r7, #23]
 8014ae6:	e000      	b.n	8014aea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8014ae8:	2300      	movs	r3, #0
}
 8014aea:	4618      	mov	r0, r3
 8014aec:	3718      	adds	r7, #24
 8014aee:	46bd      	mov	sp, r7
 8014af0:	bd80      	pop	{r7, pc}

08014af2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014af2:	b580      	push	{r7, lr}
 8014af4:	b086      	sub	sp, #24
 8014af6:	af00      	add	r7, sp, #0
 8014af8:	60f8      	str	r0, [r7, #12]
 8014afa:	460b      	mov	r3, r1
 8014afc:	607a      	str	r2, [r7, #4]
 8014afe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014b00:	7afb      	ldrb	r3, [r7, #11]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	d16f      	bne.n	8014be6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	3314      	adds	r3, #20
 8014b0a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014b12:	2b02      	cmp	r3, #2
 8014b14:	d15a      	bne.n	8014bcc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8014b16:	693b      	ldr	r3, [r7, #16]
 8014b18:	689a      	ldr	r2, [r3, #8]
 8014b1a:	693b      	ldr	r3, [r7, #16]
 8014b1c:	68db      	ldr	r3, [r3, #12]
 8014b1e:	429a      	cmp	r2, r3
 8014b20:	d914      	bls.n	8014b4c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014b22:	693b      	ldr	r3, [r7, #16]
 8014b24:	689a      	ldr	r2, [r3, #8]
 8014b26:	693b      	ldr	r3, [r7, #16]
 8014b28:	68db      	ldr	r3, [r3, #12]
 8014b2a:	1ad2      	subs	r2, r2, r3
 8014b2c:	693b      	ldr	r3, [r7, #16]
 8014b2e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014b30:	693b      	ldr	r3, [r7, #16]
 8014b32:	689b      	ldr	r3, [r3, #8]
 8014b34:	461a      	mov	r2, r3
 8014b36:	6879      	ldr	r1, [r7, #4]
 8014b38:	68f8      	ldr	r0, [r7, #12]
 8014b3a:	f001 f8b2 	bl	8015ca2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014b3e:	2300      	movs	r3, #0
 8014b40:	2200      	movs	r2, #0
 8014b42:	2100      	movs	r1, #0
 8014b44:	68f8      	ldr	r0, [r7, #12]
 8014b46:	f004 fd93 	bl	8019670 <USBD_LL_PrepareReceive>
 8014b4a:	e03f      	b.n	8014bcc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8014b4c:	693b      	ldr	r3, [r7, #16]
 8014b4e:	68da      	ldr	r2, [r3, #12]
 8014b50:	693b      	ldr	r3, [r7, #16]
 8014b52:	689b      	ldr	r3, [r3, #8]
 8014b54:	429a      	cmp	r2, r3
 8014b56:	d11c      	bne.n	8014b92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8014b58:	693b      	ldr	r3, [r7, #16]
 8014b5a:	685a      	ldr	r2, [r3, #4]
 8014b5c:	693b      	ldr	r3, [r7, #16]
 8014b5e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8014b60:	429a      	cmp	r2, r3
 8014b62:	d316      	bcc.n	8014b92 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8014b64:	693b      	ldr	r3, [r7, #16]
 8014b66:	685a      	ldr	r2, [r3, #4]
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8014b6e:	429a      	cmp	r2, r3
 8014b70:	d20f      	bcs.n	8014b92 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8014b72:	2200      	movs	r2, #0
 8014b74:	2100      	movs	r1, #0
 8014b76:	68f8      	ldr	r0, [r7, #12]
 8014b78:	f001 f893 	bl	8015ca2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	2200      	movs	r2, #0
 8014b80:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014b84:	2300      	movs	r3, #0
 8014b86:	2200      	movs	r2, #0
 8014b88:	2100      	movs	r1, #0
 8014b8a:	68f8      	ldr	r0, [r7, #12]
 8014b8c:	f004 fd70 	bl	8019670 <USBD_LL_PrepareReceive>
 8014b90:	e01c      	b.n	8014bcc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b98:	b2db      	uxtb	r3, r3
 8014b9a:	2b03      	cmp	r3, #3
 8014b9c:	d10f      	bne.n	8014bbe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ba4:	68db      	ldr	r3, [r3, #12]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d009      	beq.n	8014bbe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	2200      	movs	r2, #0
 8014bae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014bb8:	68db      	ldr	r3, [r3, #12]
 8014bba:	68f8      	ldr	r0, [r7, #12]
 8014bbc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014bbe:	2180      	movs	r1, #128	; 0x80
 8014bc0:	68f8      	ldr	r0, [r7, #12]
 8014bc2:	f004 fcab 	bl	801951c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014bc6:	68f8      	ldr	r0, [r7, #12]
 8014bc8:	f001 f8bd 	bl	8015d46 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d03a      	beq.n	8014c4c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8014bd6:	68f8      	ldr	r0, [r7, #12]
 8014bd8:	f7ff fe42 	bl	8014860 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	2200      	movs	r2, #0
 8014be0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014be4:	e032      	b.n	8014c4c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8014be6:	7afb      	ldrb	r3, [r7, #11]
 8014be8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014bec:	b2db      	uxtb	r3, r3
 8014bee:	4619      	mov	r1, r3
 8014bf0:	68f8      	ldr	r0, [r7, #12]
 8014bf2:	f000 f985 	bl	8014f00 <USBD_CoreFindEP>
 8014bf6:	4603      	mov	r3, r0
 8014bf8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014bfa:	7dfb      	ldrb	r3, [r7, #23]
 8014bfc:	2bff      	cmp	r3, #255	; 0xff
 8014bfe:	d025      	beq.n	8014c4c <USBD_LL_DataInStage+0x15a>
 8014c00:	7dfb      	ldrb	r3, [r7, #23]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d122      	bne.n	8014c4c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c06:	68fb      	ldr	r3, [r7, #12]
 8014c08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c0c:	b2db      	uxtb	r3, r3
 8014c0e:	2b03      	cmp	r3, #3
 8014c10:	d11c      	bne.n	8014c4c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8014c12:	7dfa      	ldrb	r2, [r7, #23]
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	32ae      	adds	r2, #174	; 0xae
 8014c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c1c:	695b      	ldr	r3, [r3, #20]
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d014      	beq.n	8014c4c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8014c22:	7dfa      	ldrb	r2, [r7, #23]
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8014c2a:	7dfa      	ldrb	r2, [r7, #23]
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	32ae      	adds	r2, #174	; 0xae
 8014c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c34:	695b      	ldr	r3, [r3, #20]
 8014c36:	7afa      	ldrb	r2, [r7, #11]
 8014c38:	4611      	mov	r1, r2
 8014c3a:	68f8      	ldr	r0, [r7, #12]
 8014c3c:	4798      	blx	r3
 8014c3e:	4603      	mov	r3, r0
 8014c40:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8014c42:	7dbb      	ldrb	r3, [r7, #22]
 8014c44:	2b00      	cmp	r3, #0
 8014c46:	d001      	beq.n	8014c4c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8014c48:	7dbb      	ldrb	r3, [r7, #22]
 8014c4a:	e000      	b.n	8014c4e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8014c4c:	2300      	movs	r3, #0
}
 8014c4e:	4618      	mov	r0, r3
 8014c50:	3718      	adds	r7, #24
 8014c52:	46bd      	mov	sp, r7
 8014c54:	bd80      	pop	{r7, pc}

08014c56 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014c56:	b580      	push	{r7, lr}
 8014c58:	b084      	sub	sp, #16
 8014c5a:	af00      	add	r7, sp, #0
 8014c5c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8014c5e:	2300      	movs	r3, #0
 8014c60:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	2201      	movs	r2, #1
 8014c66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	2200      	movs	r2, #0
 8014c6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8014c72:	687b      	ldr	r3, [r7, #4]
 8014c74:	2200      	movs	r2, #0
 8014c76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	2200      	movs	r2, #0
 8014c7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	2200      	movs	r2, #0
 8014c84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d014      	beq.n	8014cbc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014c98:	685b      	ldr	r3, [r3, #4]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d00e      	beq.n	8014cbc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ca4:	685b      	ldr	r3, [r3, #4]
 8014ca6:	687a      	ldr	r2, [r7, #4]
 8014ca8:	6852      	ldr	r2, [r2, #4]
 8014caa:	b2d2      	uxtb	r2, r2
 8014cac:	4611      	mov	r1, r2
 8014cae:	6878      	ldr	r0, [r7, #4]
 8014cb0:	4798      	blx	r3
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d001      	beq.n	8014cbc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8014cb8:	2303      	movs	r3, #3
 8014cba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014cbc:	2340      	movs	r3, #64	; 0x40
 8014cbe:	2200      	movs	r2, #0
 8014cc0:	2100      	movs	r1, #0
 8014cc2:	6878      	ldr	r0, [r7, #4]
 8014cc4:	f004 fbe5 	bl	8019492 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	2201      	movs	r2, #1
 8014ccc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	2240      	movs	r2, #64	; 0x40
 8014cd4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014cd8:	2340      	movs	r3, #64	; 0x40
 8014cda:	2200      	movs	r2, #0
 8014cdc:	2180      	movs	r1, #128	; 0x80
 8014cde:	6878      	ldr	r0, [r7, #4]
 8014ce0:	f004 fbd7 	bl	8019492 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	2201      	movs	r2, #1
 8014ce8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	2240      	movs	r2, #64	; 0x40
 8014cee:	621a      	str	r2, [r3, #32]

  return ret;
 8014cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	3710      	adds	r7, #16
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bd80      	pop	{r7, pc}

08014cfa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014cfa:	b480      	push	{r7}
 8014cfc:	b083      	sub	sp, #12
 8014cfe:	af00      	add	r7, sp, #0
 8014d00:	6078      	str	r0, [r7, #4]
 8014d02:	460b      	mov	r3, r1
 8014d04:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	78fa      	ldrb	r2, [r7, #3]
 8014d0a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014d0c:	2300      	movs	r3, #0
}
 8014d0e:	4618      	mov	r0, r3
 8014d10:	370c      	adds	r7, #12
 8014d12:	46bd      	mov	sp, r7
 8014d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d18:	4770      	bx	lr

08014d1a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014d1a:	b480      	push	{r7}
 8014d1c:	b083      	sub	sp, #12
 8014d1e:	af00      	add	r7, sp, #0
 8014d20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d28:	b2db      	uxtb	r3, r3
 8014d2a:	2b04      	cmp	r3, #4
 8014d2c:	d006      	beq.n	8014d3c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d34:	b2da      	uxtb	r2, r3
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	2204      	movs	r2, #4
 8014d40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8014d44:	2300      	movs	r3, #0
}
 8014d46:	4618      	mov	r0, r3
 8014d48:	370c      	adds	r7, #12
 8014d4a:	46bd      	mov	sp, r7
 8014d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d50:	4770      	bx	lr

08014d52 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014d52:	b480      	push	{r7}
 8014d54:	b083      	sub	sp, #12
 8014d56:	af00      	add	r7, sp, #0
 8014d58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d60:	b2db      	uxtb	r3, r3
 8014d62:	2b04      	cmp	r3, #4
 8014d64:	d106      	bne.n	8014d74 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8014d6c:	b2da      	uxtb	r2, r3
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8014d74:	2300      	movs	r3, #0
}
 8014d76:	4618      	mov	r0, r3
 8014d78:	370c      	adds	r7, #12
 8014d7a:	46bd      	mov	sp, r7
 8014d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d80:	4770      	bx	lr

08014d82 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014d82:	b580      	push	{r7, lr}
 8014d84:	b082      	sub	sp, #8
 8014d86:	af00      	add	r7, sp, #0
 8014d88:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014d90:	b2db      	uxtb	r3, r3
 8014d92:	2b03      	cmp	r3, #3
 8014d94:	d110      	bne.n	8014db8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d00b      	beq.n	8014db8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014da6:	69db      	ldr	r3, [r3, #28]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d005      	beq.n	8014db8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014db2:	69db      	ldr	r3, [r3, #28]
 8014db4:	6878      	ldr	r0, [r7, #4]
 8014db6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8014db8:	2300      	movs	r3, #0
}
 8014dba:	4618      	mov	r0, r3
 8014dbc:	3708      	adds	r7, #8
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd80      	pop	{r7, pc}

08014dc2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014dc2:	b580      	push	{r7, lr}
 8014dc4:	b082      	sub	sp, #8
 8014dc6:	af00      	add	r7, sp, #0
 8014dc8:	6078      	str	r0, [r7, #4]
 8014dca:	460b      	mov	r3, r1
 8014dcc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	32ae      	adds	r2, #174	; 0xae
 8014dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ddc:	2b00      	cmp	r3, #0
 8014dde:	d101      	bne.n	8014de4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8014de0:	2303      	movs	r3, #3
 8014de2:	e01c      	b.n	8014e1e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014dea:	b2db      	uxtb	r3, r3
 8014dec:	2b03      	cmp	r3, #3
 8014dee:	d115      	bne.n	8014e1c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	32ae      	adds	r2, #174	; 0xae
 8014dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014dfe:	6a1b      	ldr	r3, [r3, #32]
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d00b      	beq.n	8014e1c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	32ae      	adds	r2, #174	; 0xae
 8014e0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e12:	6a1b      	ldr	r3, [r3, #32]
 8014e14:	78fa      	ldrb	r2, [r7, #3]
 8014e16:	4611      	mov	r1, r2
 8014e18:	6878      	ldr	r0, [r7, #4]
 8014e1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014e1c:	2300      	movs	r3, #0
}
 8014e1e:	4618      	mov	r0, r3
 8014e20:	3708      	adds	r7, #8
 8014e22:	46bd      	mov	sp, r7
 8014e24:	bd80      	pop	{r7, pc}

08014e26 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8014e26:	b580      	push	{r7, lr}
 8014e28:	b082      	sub	sp, #8
 8014e2a:	af00      	add	r7, sp, #0
 8014e2c:	6078      	str	r0, [r7, #4]
 8014e2e:	460b      	mov	r3, r1
 8014e30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	32ae      	adds	r2, #174	; 0xae
 8014e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d101      	bne.n	8014e48 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8014e44:	2303      	movs	r3, #3
 8014e46:	e01c      	b.n	8014e82 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014e4e:	b2db      	uxtb	r3, r3
 8014e50:	2b03      	cmp	r3, #3
 8014e52:	d115      	bne.n	8014e80 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	32ae      	adds	r2, #174	; 0xae
 8014e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d00b      	beq.n	8014e80 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	32ae      	adds	r2, #174	; 0xae
 8014e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e78:	78fa      	ldrb	r2, [r7, #3]
 8014e7a:	4611      	mov	r1, r2
 8014e7c:	6878      	ldr	r0, [r7, #4]
 8014e7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014e80:	2300      	movs	r3, #0
}
 8014e82:	4618      	mov	r0, r3
 8014e84:	3708      	adds	r7, #8
 8014e86:	46bd      	mov	sp, r7
 8014e88:	bd80      	pop	{r7, pc}

08014e8a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8014e8a:	b480      	push	{r7}
 8014e8c:	b083      	sub	sp, #12
 8014e8e:	af00      	add	r7, sp, #0
 8014e90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014e92:	2300      	movs	r3, #0
}
 8014e94:	4618      	mov	r0, r3
 8014e96:	370c      	adds	r7, #12
 8014e98:	46bd      	mov	sp, r7
 8014e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e9e:	4770      	bx	lr

08014ea0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8014ea0:	b580      	push	{r7, lr}
 8014ea2:	b084      	sub	sp, #16
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8014ea8:	2300      	movs	r3, #0
 8014eaa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	2201      	movs	r2, #1
 8014eb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d00e      	beq.n	8014edc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ec4:	685b      	ldr	r3, [r3, #4]
 8014ec6:	687a      	ldr	r2, [r7, #4]
 8014ec8:	6852      	ldr	r2, [r2, #4]
 8014eca:	b2d2      	uxtb	r2, r2
 8014ecc:	4611      	mov	r1, r2
 8014ece:	6878      	ldr	r0, [r7, #4]
 8014ed0:	4798      	blx	r3
 8014ed2:	4603      	mov	r3, r0
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d001      	beq.n	8014edc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8014ed8:	2303      	movs	r3, #3
 8014eda:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ede:	4618      	mov	r0, r3
 8014ee0:	3710      	adds	r7, #16
 8014ee2:	46bd      	mov	sp, r7
 8014ee4:	bd80      	pop	{r7, pc}

08014ee6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014ee6:	b480      	push	{r7}
 8014ee8:	b083      	sub	sp, #12
 8014eea:	af00      	add	r7, sp, #0
 8014eec:	6078      	str	r0, [r7, #4]
 8014eee:	460b      	mov	r3, r1
 8014ef0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014ef2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014ef4:	4618      	mov	r0, r3
 8014ef6:	370c      	adds	r7, #12
 8014ef8:	46bd      	mov	sp, r7
 8014efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efe:	4770      	bx	lr

08014f00 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014f00:	b480      	push	{r7}
 8014f02:	b083      	sub	sp, #12
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	6078      	str	r0, [r7, #4]
 8014f08:	460b      	mov	r3, r1
 8014f0a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014f0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014f0e:	4618      	mov	r0, r3
 8014f10:	370c      	adds	r7, #12
 8014f12:	46bd      	mov	sp, r7
 8014f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f18:	4770      	bx	lr

08014f1a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8014f1a:	b580      	push	{r7, lr}
 8014f1c:	b086      	sub	sp, #24
 8014f1e:	af00      	add	r7, sp, #0
 8014f20:	6078      	str	r0, [r7, #4]
 8014f22:	460b      	mov	r3, r1
 8014f24:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8014f2e:	2300      	movs	r3, #0
 8014f30:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8014f32:	68fb      	ldr	r3, [r7, #12]
 8014f34:	885b      	ldrh	r3, [r3, #2]
 8014f36:	b29a      	uxth	r2, r3
 8014f38:	68fb      	ldr	r3, [r7, #12]
 8014f3a:	781b      	ldrb	r3, [r3, #0]
 8014f3c:	b29b      	uxth	r3, r3
 8014f3e:	429a      	cmp	r2, r3
 8014f40:	d920      	bls.n	8014f84 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	781b      	ldrb	r3, [r3, #0]
 8014f46:	b29b      	uxth	r3, r3
 8014f48:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8014f4a:	e013      	b.n	8014f74 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8014f4c:	f107 030a 	add.w	r3, r7, #10
 8014f50:	4619      	mov	r1, r3
 8014f52:	6978      	ldr	r0, [r7, #20]
 8014f54:	f000 f81b 	bl	8014f8e <USBD_GetNextDesc>
 8014f58:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8014f5a:	697b      	ldr	r3, [r7, #20]
 8014f5c:	785b      	ldrb	r3, [r3, #1]
 8014f5e:	2b05      	cmp	r3, #5
 8014f60:	d108      	bne.n	8014f74 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8014f62:	697b      	ldr	r3, [r7, #20]
 8014f64:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8014f66:	693b      	ldr	r3, [r7, #16]
 8014f68:	789b      	ldrb	r3, [r3, #2]
 8014f6a:	78fa      	ldrb	r2, [r7, #3]
 8014f6c:	429a      	cmp	r2, r3
 8014f6e:	d008      	beq.n	8014f82 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8014f70:	2300      	movs	r3, #0
 8014f72:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8014f74:	68fb      	ldr	r3, [r7, #12]
 8014f76:	885b      	ldrh	r3, [r3, #2]
 8014f78:	b29a      	uxth	r2, r3
 8014f7a:	897b      	ldrh	r3, [r7, #10]
 8014f7c:	429a      	cmp	r2, r3
 8014f7e:	d8e5      	bhi.n	8014f4c <USBD_GetEpDesc+0x32>
 8014f80:	e000      	b.n	8014f84 <USBD_GetEpDesc+0x6a>
          break;
 8014f82:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8014f84:	693b      	ldr	r3, [r7, #16]
}
 8014f86:	4618      	mov	r0, r3
 8014f88:	3718      	adds	r7, #24
 8014f8a:	46bd      	mov	sp, r7
 8014f8c:	bd80      	pop	{r7, pc}

08014f8e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8014f8e:	b480      	push	{r7}
 8014f90:	b085      	sub	sp, #20
 8014f92:	af00      	add	r7, sp, #0
 8014f94:	6078      	str	r0, [r7, #4]
 8014f96:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8014f9c:	683b      	ldr	r3, [r7, #0]
 8014f9e:	881a      	ldrh	r2, [r3, #0]
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	781b      	ldrb	r3, [r3, #0]
 8014fa4:	b29b      	uxth	r3, r3
 8014fa6:	4413      	add	r3, r2
 8014fa8:	b29a      	uxth	r2, r3
 8014faa:	683b      	ldr	r3, [r7, #0]
 8014fac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014fae:	68fb      	ldr	r3, [r7, #12]
 8014fb0:	781b      	ldrb	r3, [r3, #0]
 8014fb2:	461a      	mov	r2, r3
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	4413      	add	r3, r2
 8014fb8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8014fba:	68fb      	ldr	r3, [r7, #12]
}
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	3714      	adds	r7, #20
 8014fc0:	46bd      	mov	sp, r7
 8014fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fc6:	4770      	bx	lr

08014fc8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8014fc8:	b480      	push	{r7}
 8014fca:	b087      	sub	sp, #28
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014fd4:	697b      	ldr	r3, [r7, #20]
 8014fd6:	781b      	ldrb	r3, [r3, #0]
 8014fd8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014fda:	697b      	ldr	r3, [r7, #20]
 8014fdc:	3301      	adds	r3, #1
 8014fde:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014fe0:	697b      	ldr	r3, [r7, #20]
 8014fe2:	781b      	ldrb	r3, [r3, #0]
 8014fe4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014fe6:	8a3b      	ldrh	r3, [r7, #16]
 8014fe8:	021b      	lsls	r3, r3, #8
 8014fea:	b21a      	sxth	r2, r3
 8014fec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014ff0:	4313      	orrs	r3, r2
 8014ff2:	b21b      	sxth	r3, r3
 8014ff4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014ff6:	89fb      	ldrh	r3, [r7, #14]
}
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	371c      	adds	r7, #28
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015002:	4770      	bx	lr

08015004 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b084      	sub	sp, #16
 8015008:	af00      	add	r7, sp, #0
 801500a:	6078      	str	r0, [r7, #4]
 801500c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801500e:	2300      	movs	r3, #0
 8015010:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015012:	683b      	ldr	r3, [r7, #0]
 8015014:	781b      	ldrb	r3, [r3, #0]
 8015016:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801501a:	2b40      	cmp	r3, #64	; 0x40
 801501c:	d005      	beq.n	801502a <USBD_StdDevReq+0x26>
 801501e:	2b40      	cmp	r3, #64	; 0x40
 8015020:	d857      	bhi.n	80150d2 <USBD_StdDevReq+0xce>
 8015022:	2b00      	cmp	r3, #0
 8015024:	d00f      	beq.n	8015046 <USBD_StdDevReq+0x42>
 8015026:	2b20      	cmp	r3, #32
 8015028:	d153      	bne.n	80150d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	32ae      	adds	r2, #174	; 0xae
 8015034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015038:	689b      	ldr	r3, [r3, #8]
 801503a:	6839      	ldr	r1, [r7, #0]
 801503c:	6878      	ldr	r0, [r7, #4]
 801503e:	4798      	blx	r3
 8015040:	4603      	mov	r3, r0
 8015042:	73fb      	strb	r3, [r7, #15]
      break;
 8015044:	e04a      	b.n	80150dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015046:	683b      	ldr	r3, [r7, #0]
 8015048:	785b      	ldrb	r3, [r3, #1]
 801504a:	2b09      	cmp	r3, #9
 801504c:	d83b      	bhi.n	80150c6 <USBD_StdDevReq+0xc2>
 801504e:	a201      	add	r2, pc, #4	; (adr r2, 8015054 <USBD_StdDevReq+0x50>)
 8015050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015054:	080150a9 	.word	0x080150a9
 8015058:	080150bd 	.word	0x080150bd
 801505c:	080150c7 	.word	0x080150c7
 8015060:	080150b3 	.word	0x080150b3
 8015064:	080150c7 	.word	0x080150c7
 8015068:	08015087 	.word	0x08015087
 801506c:	0801507d 	.word	0x0801507d
 8015070:	080150c7 	.word	0x080150c7
 8015074:	0801509f 	.word	0x0801509f
 8015078:	08015091 	.word	0x08015091
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801507c:	6839      	ldr	r1, [r7, #0]
 801507e:	6878      	ldr	r0, [r7, #4]
 8015080:	f000 fa3c 	bl	80154fc <USBD_GetDescriptor>
          break;
 8015084:	e024      	b.n	80150d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015086:	6839      	ldr	r1, [r7, #0]
 8015088:	6878      	ldr	r0, [r7, #4]
 801508a:	f000 fba1 	bl	80157d0 <USBD_SetAddress>
          break;
 801508e:	e01f      	b.n	80150d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015090:	6839      	ldr	r1, [r7, #0]
 8015092:	6878      	ldr	r0, [r7, #4]
 8015094:	f000 fbe0 	bl	8015858 <USBD_SetConfig>
 8015098:	4603      	mov	r3, r0
 801509a:	73fb      	strb	r3, [r7, #15]
          break;
 801509c:	e018      	b.n	80150d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801509e:	6839      	ldr	r1, [r7, #0]
 80150a0:	6878      	ldr	r0, [r7, #4]
 80150a2:	f000 fc83 	bl	80159ac <USBD_GetConfig>
          break;
 80150a6:	e013      	b.n	80150d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80150a8:	6839      	ldr	r1, [r7, #0]
 80150aa:	6878      	ldr	r0, [r7, #4]
 80150ac:	f000 fcb4 	bl	8015a18 <USBD_GetStatus>
          break;
 80150b0:	e00e      	b.n	80150d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80150b2:	6839      	ldr	r1, [r7, #0]
 80150b4:	6878      	ldr	r0, [r7, #4]
 80150b6:	f000 fce3 	bl	8015a80 <USBD_SetFeature>
          break;
 80150ba:	e009      	b.n	80150d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80150bc:	6839      	ldr	r1, [r7, #0]
 80150be:	6878      	ldr	r0, [r7, #4]
 80150c0:	f000 fd07 	bl	8015ad2 <USBD_ClrFeature>
          break;
 80150c4:	e004      	b.n	80150d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80150c6:	6839      	ldr	r1, [r7, #0]
 80150c8:	6878      	ldr	r0, [r7, #4]
 80150ca:	f000 fd5e 	bl	8015b8a <USBD_CtlError>
          break;
 80150ce:	bf00      	nop
      }
      break;
 80150d0:	e004      	b.n	80150dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80150d2:	6839      	ldr	r1, [r7, #0]
 80150d4:	6878      	ldr	r0, [r7, #4]
 80150d6:	f000 fd58 	bl	8015b8a <USBD_CtlError>
      break;
 80150da:	bf00      	nop
  }

  return ret;
 80150dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80150de:	4618      	mov	r0, r3
 80150e0:	3710      	adds	r7, #16
 80150e2:	46bd      	mov	sp, r7
 80150e4:	bd80      	pop	{r7, pc}
 80150e6:	bf00      	nop

080150e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b084      	sub	sp, #16
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	6078      	str	r0, [r7, #4]
 80150f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80150f2:	2300      	movs	r3, #0
 80150f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80150f6:	683b      	ldr	r3, [r7, #0]
 80150f8:	781b      	ldrb	r3, [r3, #0]
 80150fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80150fe:	2b40      	cmp	r3, #64	; 0x40
 8015100:	d005      	beq.n	801510e <USBD_StdItfReq+0x26>
 8015102:	2b40      	cmp	r3, #64	; 0x40
 8015104:	d852      	bhi.n	80151ac <USBD_StdItfReq+0xc4>
 8015106:	2b00      	cmp	r3, #0
 8015108:	d001      	beq.n	801510e <USBD_StdItfReq+0x26>
 801510a:	2b20      	cmp	r3, #32
 801510c:	d14e      	bne.n	80151ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015114:	b2db      	uxtb	r3, r3
 8015116:	3b01      	subs	r3, #1
 8015118:	2b02      	cmp	r3, #2
 801511a:	d840      	bhi.n	801519e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801511c:	683b      	ldr	r3, [r7, #0]
 801511e:	889b      	ldrh	r3, [r3, #4]
 8015120:	b2db      	uxtb	r3, r3
 8015122:	2b01      	cmp	r3, #1
 8015124:	d836      	bhi.n	8015194 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015126:	683b      	ldr	r3, [r7, #0]
 8015128:	889b      	ldrh	r3, [r3, #4]
 801512a:	b2db      	uxtb	r3, r3
 801512c:	4619      	mov	r1, r3
 801512e:	6878      	ldr	r0, [r7, #4]
 8015130:	f7ff fed9 	bl	8014ee6 <USBD_CoreFindIF>
 8015134:	4603      	mov	r3, r0
 8015136:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015138:	7bbb      	ldrb	r3, [r7, #14]
 801513a:	2bff      	cmp	r3, #255	; 0xff
 801513c:	d01d      	beq.n	801517a <USBD_StdItfReq+0x92>
 801513e:	7bbb      	ldrb	r3, [r7, #14]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d11a      	bne.n	801517a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015144:	7bba      	ldrb	r2, [r7, #14]
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	32ae      	adds	r2, #174	; 0xae
 801514a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801514e:	689b      	ldr	r3, [r3, #8]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d00f      	beq.n	8015174 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015154:	7bba      	ldrb	r2, [r7, #14]
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801515c:	7bba      	ldrb	r2, [r7, #14]
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	32ae      	adds	r2, #174	; 0xae
 8015162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015166:	689b      	ldr	r3, [r3, #8]
 8015168:	6839      	ldr	r1, [r7, #0]
 801516a:	6878      	ldr	r0, [r7, #4]
 801516c:	4798      	blx	r3
 801516e:	4603      	mov	r3, r0
 8015170:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015172:	e004      	b.n	801517e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015174:	2303      	movs	r3, #3
 8015176:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015178:	e001      	b.n	801517e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801517a:	2303      	movs	r3, #3
 801517c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801517e:	683b      	ldr	r3, [r7, #0]
 8015180:	88db      	ldrh	r3, [r3, #6]
 8015182:	2b00      	cmp	r3, #0
 8015184:	d110      	bne.n	80151a8 <USBD_StdItfReq+0xc0>
 8015186:	7bfb      	ldrb	r3, [r7, #15]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d10d      	bne.n	80151a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801518c:	6878      	ldr	r0, [r7, #4]
 801518e:	f000 fdc7 	bl	8015d20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015192:	e009      	b.n	80151a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015194:	6839      	ldr	r1, [r7, #0]
 8015196:	6878      	ldr	r0, [r7, #4]
 8015198:	f000 fcf7 	bl	8015b8a <USBD_CtlError>
          break;
 801519c:	e004      	b.n	80151a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801519e:	6839      	ldr	r1, [r7, #0]
 80151a0:	6878      	ldr	r0, [r7, #4]
 80151a2:	f000 fcf2 	bl	8015b8a <USBD_CtlError>
          break;
 80151a6:	e000      	b.n	80151aa <USBD_StdItfReq+0xc2>
          break;
 80151a8:	bf00      	nop
      }
      break;
 80151aa:	e004      	b.n	80151b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80151ac:	6839      	ldr	r1, [r7, #0]
 80151ae:	6878      	ldr	r0, [r7, #4]
 80151b0:	f000 fceb 	bl	8015b8a <USBD_CtlError>
      break;
 80151b4:	bf00      	nop
  }

  return ret;
 80151b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80151b8:	4618      	mov	r0, r3
 80151ba:	3710      	adds	r7, #16
 80151bc:	46bd      	mov	sp, r7
 80151be:	bd80      	pop	{r7, pc}

080151c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b084      	sub	sp, #16
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
 80151c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80151ca:	2300      	movs	r3, #0
 80151cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80151ce:	683b      	ldr	r3, [r7, #0]
 80151d0:	889b      	ldrh	r3, [r3, #4]
 80151d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80151d4:	683b      	ldr	r3, [r7, #0]
 80151d6:	781b      	ldrb	r3, [r3, #0]
 80151d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80151dc:	2b40      	cmp	r3, #64	; 0x40
 80151de:	d007      	beq.n	80151f0 <USBD_StdEPReq+0x30>
 80151e0:	2b40      	cmp	r3, #64	; 0x40
 80151e2:	f200 817f 	bhi.w	80154e4 <USBD_StdEPReq+0x324>
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d02a      	beq.n	8015240 <USBD_StdEPReq+0x80>
 80151ea:	2b20      	cmp	r3, #32
 80151ec:	f040 817a 	bne.w	80154e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80151f0:	7bbb      	ldrb	r3, [r7, #14]
 80151f2:	4619      	mov	r1, r3
 80151f4:	6878      	ldr	r0, [r7, #4]
 80151f6:	f7ff fe83 	bl	8014f00 <USBD_CoreFindEP>
 80151fa:	4603      	mov	r3, r0
 80151fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80151fe:	7b7b      	ldrb	r3, [r7, #13]
 8015200:	2bff      	cmp	r3, #255	; 0xff
 8015202:	f000 8174 	beq.w	80154ee <USBD_StdEPReq+0x32e>
 8015206:	7b7b      	ldrb	r3, [r7, #13]
 8015208:	2b00      	cmp	r3, #0
 801520a:	f040 8170 	bne.w	80154ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801520e:	7b7a      	ldrb	r2, [r7, #13]
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015216:	7b7a      	ldrb	r2, [r7, #13]
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	32ae      	adds	r2, #174	; 0xae
 801521c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015220:	689b      	ldr	r3, [r3, #8]
 8015222:	2b00      	cmp	r3, #0
 8015224:	f000 8163 	beq.w	80154ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015228:	7b7a      	ldrb	r2, [r7, #13]
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	32ae      	adds	r2, #174	; 0xae
 801522e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015232:	689b      	ldr	r3, [r3, #8]
 8015234:	6839      	ldr	r1, [r7, #0]
 8015236:	6878      	ldr	r0, [r7, #4]
 8015238:	4798      	blx	r3
 801523a:	4603      	mov	r3, r0
 801523c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801523e:	e156      	b.n	80154ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015240:	683b      	ldr	r3, [r7, #0]
 8015242:	785b      	ldrb	r3, [r3, #1]
 8015244:	2b03      	cmp	r3, #3
 8015246:	d008      	beq.n	801525a <USBD_StdEPReq+0x9a>
 8015248:	2b03      	cmp	r3, #3
 801524a:	f300 8145 	bgt.w	80154d8 <USBD_StdEPReq+0x318>
 801524e:	2b00      	cmp	r3, #0
 8015250:	f000 809b 	beq.w	801538a <USBD_StdEPReq+0x1ca>
 8015254:	2b01      	cmp	r3, #1
 8015256:	d03c      	beq.n	80152d2 <USBD_StdEPReq+0x112>
 8015258:	e13e      	b.n	80154d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015260:	b2db      	uxtb	r3, r3
 8015262:	2b02      	cmp	r3, #2
 8015264:	d002      	beq.n	801526c <USBD_StdEPReq+0xac>
 8015266:	2b03      	cmp	r3, #3
 8015268:	d016      	beq.n	8015298 <USBD_StdEPReq+0xd8>
 801526a:	e02c      	b.n	80152c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801526c:	7bbb      	ldrb	r3, [r7, #14]
 801526e:	2b00      	cmp	r3, #0
 8015270:	d00d      	beq.n	801528e <USBD_StdEPReq+0xce>
 8015272:	7bbb      	ldrb	r3, [r7, #14]
 8015274:	2b80      	cmp	r3, #128	; 0x80
 8015276:	d00a      	beq.n	801528e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015278:	7bbb      	ldrb	r3, [r7, #14]
 801527a:	4619      	mov	r1, r3
 801527c:	6878      	ldr	r0, [r7, #4]
 801527e:	f004 f94d 	bl	801951c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8015282:	2180      	movs	r1, #128	; 0x80
 8015284:	6878      	ldr	r0, [r7, #4]
 8015286:	f004 f949 	bl	801951c <USBD_LL_StallEP>
 801528a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801528c:	e020      	b.n	80152d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801528e:	6839      	ldr	r1, [r7, #0]
 8015290:	6878      	ldr	r0, [r7, #4]
 8015292:	f000 fc7a 	bl	8015b8a <USBD_CtlError>
              break;
 8015296:	e01b      	b.n	80152d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015298:	683b      	ldr	r3, [r7, #0]
 801529a:	885b      	ldrh	r3, [r3, #2]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d10e      	bne.n	80152be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80152a0:	7bbb      	ldrb	r3, [r7, #14]
 80152a2:	2b00      	cmp	r3, #0
 80152a4:	d00b      	beq.n	80152be <USBD_StdEPReq+0xfe>
 80152a6:	7bbb      	ldrb	r3, [r7, #14]
 80152a8:	2b80      	cmp	r3, #128	; 0x80
 80152aa:	d008      	beq.n	80152be <USBD_StdEPReq+0xfe>
 80152ac:	683b      	ldr	r3, [r7, #0]
 80152ae:	88db      	ldrh	r3, [r3, #6]
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d104      	bne.n	80152be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80152b4:	7bbb      	ldrb	r3, [r7, #14]
 80152b6:	4619      	mov	r1, r3
 80152b8:	6878      	ldr	r0, [r7, #4]
 80152ba:	f004 f92f 	bl	801951c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80152be:	6878      	ldr	r0, [r7, #4]
 80152c0:	f000 fd2e 	bl	8015d20 <USBD_CtlSendStatus>

              break;
 80152c4:	e004      	b.n	80152d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80152c6:	6839      	ldr	r1, [r7, #0]
 80152c8:	6878      	ldr	r0, [r7, #4]
 80152ca:	f000 fc5e 	bl	8015b8a <USBD_CtlError>
              break;
 80152ce:	bf00      	nop
          }
          break;
 80152d0:	e107      	b.n	80154e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152d8:	b2db      	uxtb	r3, r3
 80152da:	2b02      	cmp	r3, #2
 80152dc:	d002      	beq.n	80152e4 <USBD_StdEPReq+0x124>
 80152de:	2b03      	cmp	r3, #3
 80152e0:	d016      	beq.n	8015310 <USBD_StdEPReq+0x150>
 80152e2:	e04b      	b.n	801537c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80152e4:	7bbb      	ldrb	r3, [r7, #14]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d00d      	beq.n	8015306 <USBD_StdEPReq+0x146>
 80152ea:	7bbb      	ldrb	r3, [r7, #14]
 80152ec:	2b80      	cmp	r3, #128	; 0x80
 80152ee:	d00a      	beq.n	8015306 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80152f0:	7bbb      	ldrb	r3, [r7, #14]
 80152f2:	4619      	mov	r1, r3
 80152f4:	6878      	ldr	r0, [r7, #4]
 80152f6:	f004 f911 	bl	801951c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80152fa:	2180      	movs	r1, #128	; 0x80
 80152fc:	6878      	ldr	r0, [r7, #4]
 80152fe:	f004 f90d 	bl	801951c <USBD_LL_StallEP>
 8015302:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015304:	e040      	b.n	8015388 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015306:	6839      	ldr	r1, [r7, #0]
 8015308:	6878      	ldr	r0, [r7, #4]
 801530a:	f000 fc3e 	bl	8015b8a <USBD_CtlError>
              break;
 801530e:	e03b      	b.n	8015388 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015310:	683b      	ldr	r3, [r7, #0]
 8015312:	885b      	ldrh	r3, [r3, #2]
 8015314:	2b00      	cmp	r3, #0
 8015316:	d136      	bne.n	8015386 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015318:	7bbb      	ldrb	r3, [r7, #14]
 801531a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801531e:	2b00      	cmp	r3, #0
 8015320:	d004      	beq.n	801532c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015322:	7bbb      	ldrb	r3, [r7, #14]
 8015324:	4619      	mov	r1, r3
 8015326:	6878      	ldr	r0, [r7, #4]
 8015328:	f004 f917 	bl	801955a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801532c:	6878      	ldr	r0, [r7, #4]
 801532e:	f000 fcf7 	bl	8015d20 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8015332:	7bbb      	ldrb	r3, [r7, #14]
 8015334:	4619      	mov	r1, r3
 8015336:	6878      	ldr	r0, [r7, #4]
 8015338:	f7ff fde2 	bl	8014f00 <USBD_CoreFindEP>
 801533c:	4603      	mov	r3, r0
 801533e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015340:	7b7b      	ldrb	r3, [r7, #13]
 8015342:	2bff      	cmp	r3, #255	; 0xff
 8015344:	d01f      	beq.n	8015386 <USBD_StdEPReq+0x1c6>
 8015346:	7b7b      	ldrb	r3, [r7, #13]
 8015348:	2b00      	cmp	r3, #0
 801534a:	d11c      	bne.n	8015386 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801534c:	7b7a      	ldrb	r2, [r7, #13]
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8015354:	7b7a      	ldrb	r2, [r7, #13]
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	32ae      	adds	r2, #174	; 0xae
 801535a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801535e:	689b      	ldr	r3, [r3, #8]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d010      	beq.n	8015386 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015364:	7b7a      	ldrb	r2, [r7, #13]
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	32ae      	adds	r2, #174	; 0xae
 801536a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801536e:	689b      	ldr	r3, [r3, #8]
 8015370:	6839      	ldr	r1, [r7, #0]
 8015372:	6878      	ldr	r0, [r7, #4]
 8015374:	4798      	blx	r3
 8015376:	4603      	mov	r3, r0
 8015378:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801537a:	e004      	b.n	8015386 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801537c:	6839      	ldr	r1, [r7, #0]
 801537e:	6878      	ldr	r0, [r7, #4]
 8015380:	f000 fc03 	bl	8015b8a <USBD_CtlError>
              break;
 8015384:	e000      	b.n	8015388 <USBD_StdEPReq+0x1c8>
              break;
 8015386:	bf00      	nop
          }
          break;
 8015388:	e0ab      	b.n	80154e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015390:	b2db      	uxtb	r3, r3
 8015392:	2b02      	cmp	r3, #2
 8015394:	d002      	beq.n	801539c <USBD_StdEPReq+0x1dc>
 8015396:	2b03      	cmp	r3, #3
 8015398:	d032      	beq.n	8015400 <USBD_StdEPReq+0x240>
 801539a:	e097      	b.n	80154cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801539c:	7bbb      	ldrb	r3, [r7, #14]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d007      	beq.n	80153b2 <USBD_StdEPReq+0x1f2>
 80153a2:	7bbb      	ldrb	r3, [r7, #14]
 80153a4:	2b80      	cmp	r3, #128	; 0x80
 80153a6:	d004      	beq.n	80153b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80153a8:	6839      	ldr	r1, [r7, #0]
 80153aa:	6878      	ldr	r0, [r7, #4]
 80153ac:	f000 fbed 	bl	8015b8a <USBD_CtlError>
                break;
 80153b0:	e091      	b.n	80154d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80153b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80153b6:	2b00      	cmp	r3, #0
 80153b8:	da0b      	bge.n	80153d2 <USBD_StdEPReq+0x212>
 80153ba:	7bbb      	ldrb	r3, [r7, #14]
 80153bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80153c0:	4613      	mov	r3, r2
 80153c2:	009b      	lsls	r3, r3, #2
 80153c4:	4413      	add	r3, r2
 80153c6:	009b      	lsls	r3, r3, #2
 80153c8:	3310      	adds	r3, #16
 80153ca:	687a      	ldr	r2, [r7, #4]
 80153cc:	4413      	add	r3, r2
 80153ce:	3304      	adds	r3, #4
 80153d0:	e00b      	b.n	80153ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80153d2:	7bbb      	ldrb	r3, [r7, #14]
 80153d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80153d8:	4613      	mov	r3, r2
 80153da:	009b      	lsls	r3, r3, #2
 80153dc:	4413      	add	r3, r2
 80153de:	009b      	lsls	r3, r3, #2
 80153e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80153e4:	687a      	ldr	r2, [r7, #4]
 80153e6:	4413      	add	r3, r2
 80153e8:	3304      	adds	r3, #4
 80153ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80153ec:	68bb      	ldr	r3, [r7, #8]
 80153ee:	2200      	movs	r2, #0
 80153f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80153f2:	68bb      	ldr	r3, [r7, #8]
 80153f4:	2202      	movs	r2, #2
 80153f6:	4619      	mov	r1, r3
 80153f8:	6878      	ldr	r0, [r7, #4]
 80153fa:	f000 fc37 	bl	8015c6c <USBD_CtlSendData>
              break;
 80153fe:	e06a      	b.n	80154d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015400:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015404:	2b00      	cmp	r3, #0
 8015406:	da11      	bge.n	801542c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015408:	7bbb      	ldrb	r3, [r7, #14]
 801540a:	f003 020f 	and.w	r2, r3, #15
 801540e:	6879      	ldr	r1, [r7, #4]
 8015410:	4613      	mov	r3, r2
 8015412:	009b      	lsls	r3, r3, #2
 8015414:	4413      	add	r3, r2
 8015416:	009b      	lsls	r3, r3, #2
 8015418:	440b      	add	r3, r1
 801541a:	3324      	adds	r3, #36	; 0x24
 801541c:	881b      	ldrh	r3, [r3, #0]
 801541e:	2b00      	cmp	r3, #0
 8015420:	d117      	bne.n	8015452 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015422:	6839      	ldr	r1, [r7, #0]
 8015424:	6878      	ldr	r0, [r7, #4]
 8015426:	f000 fbb0 	bl	8015b8a <USBD_CtlError>
                  break;
 801542a:	e054      	b.n	80154d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801542c:	7bbb      	ldrb	r3, [r7, #14]
 801542e:	f003 020f 	and.w	r2, r3, #15
 8015432:	6879      	ldr	r1, [r7, #4]
 8015434:	4613      	mov	r3, r2
 8015436:	009b      	lsls	r3, r3, #2
 8015438:	4413      	add	r3, r2
 801543a:	009b      	lsls	r3, r3, #2
 801543c:	440b      	add	r3, r1
 801543e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015442:	881b      	ldrh	r3, [r3, #0]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d104      	bne.n	8015452 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015448:	6839      	ldr	r1, [r7, #0]
 801544a:	6878      	ldr	r0, [r7, #4]
 801544c:	f000 fb9d 	bl	8015b8a <USBD_CtlError>
                  break;
 8015450:	e041      	b.n	80154d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015452:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015456:	2b00      	cmp	r3, #0
 8015458:	da0b      	bge.n	8015472 <USBD_StdEPReq+0x2b2>
 801545a:	7bbb      	ldrb	r3, [r7, #14]
 801545c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015460:	4613      	mov	r3, r2
 8015462:	009b      	lsls	r3, r3, #2
 8015464:	4413      	add	r3, r2
 8015466:	009b      	lsls	r3, r3, #2
 8015468:	3310      	adds	r3, #16
 801546a:	687a      	ldr	r2, [r7, #4]
 801546c:	4413      	add	r3, r2
 801546e:	3304      	adds	r3, #4
 8015470:	e00b      	b.n	801548a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015472:	7bbb      	ldrb	r3, [r7, #14]
 8015474:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015478:	4613      	mov	r3, r2
 801547a:	009b      	lsls	r3, r3, #2
 801547c:	4413      	add	r3, r2
 801547e:	009b      	lsls	r3, r3, #2
 8015480:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015484:	687a      	ldr	r2, [r7, #4]
 8015486:	4413      	add	r3, r2
 8015488:	3304      	adds	r3, #4
 801548a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801548c:	7bbb      	ldrb	r3, [r7, #14]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d002      	beq.n	8015498 <USBD_StdEPReq+0x2d8>
 8015492:	7bbb      	ldrb	r3, [r7, #14]
 8015494:	2b80      	cmp	r3, #128	; 0x80
 8015496:	d103      	bne.n	80154a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015498:	68bb      	ldr	r3, [r7, #8]
 801549a:	2200      	movs	r2, #0
 801549c:	601a      	str	r2, [r3, #0]
 801549e:	e00e      	b.n	80154be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80154a0:	7bbb      	ldrb	r3, [r7, #14]
 80154a2:	4619      	mov	r1, r3
 80154a4:	6878      	ldr	r0, [r7, #4]
 80154a6:	f004 f877 	bl	8019598 <USBD_LL_IsStallEP>
 80154aa:	4603      	mov	r3, r0
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d003      	beq.n	80154b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80154b0:	68bb      	ldr	r3, [r7, #8]
 80154b2:	2201      	movs	r2, #1
 80154b4:	601a      	str	r2, [r3, #0]
 80154b6:	e002      	b.n	80154be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80154b8:	68bb      	ldr	r3, [r7, #8]
 80154ba:	2200      	movs	r2, #0
 80154bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80154be:	68bb      	ldr	r3, [r7, #8]
 80154c0:	2202      	movs	r2, #2
 80154c2:	4619      	mov	r1, r3
 80154c4:	6878      	ldr	r0, [r7, #4]
 80154c6:	f000 fbd1 	bl	8015c6c <USBD_CtlSendData>
              break;
 80154ca:	e004      	b.n	80154d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80154cc:	6839      	ldr	r1, [r7, #0]
 80154ce:	6878      	ldr	r0, [r7, #4]
 80154d0:	f000 fb5b 	bl	8015b8a <USBD_CtlError>
              break;
 80154d4:	bf00      	nop
          }
          break;
 80154d6:	e004      	b.n	80154e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80154d8:	6839      	ldr	r1, [r7, #0]
 80154da:	6878      	ldr	r0, [r7, #4]
 80154dc:	f000 fb55 	bl	8015b8a <USBD_CtlError>
          break;
 80154e0:	bf00      	nop
      }
      break;
 80154e2:	e005      	b.n	80154f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80154e4:	6839      	ldr	r1, [r7, #0]
 80154e6:	6878      	ldr	r0, [r7, #4]
 80154e8:	f000 fb4f 	bl	8015b8a <USBD_CtlError>
      break;
 80154ec:	e000      	b.n	80154f0 <USBD_StdEPReq+0x330>
      break;
 80154ee:	bf00      	nop
  }

  return ret;
 80154f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	3710      	adds	r7, #16
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd80      	pop	{r7, pc}
	...

080154fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b084      	sub	sp, #16
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
 8015504:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015506:	2300      	movs	r3, #0
 8015508:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801550a:	2300      	movs	r3, #0
 801550c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801550e:	2300      	movs	r3, #0
 8015510:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015512:	683b      	ldr	r3, [r7, #0]
 8015514:	885b      	ldrh	r3, [r3, #2]
 8015516:	0a1b      	lsrs	r3, r3, #8
 8015518:	b29b      	uxth	r3, r3
 801551a:	3b01      	subs	r3, #1
 801551c:	2b06      	cmp	r3, #6
 801551e:	f200 8128 	bhi.w	8015772 <USBD_GetDescriptor+0x276>
 8015522:	a201      	add	r2, pc, #4	; (adr r2, 8015528 <USBD_GetDescriptor+0x2c>)
 8015524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015528:	08015545 	.word	0x08015545
 801552c:	0801555d 	.word	0x0801555d
 8015530:	0801559d 	.word	0x0801559d
 8015534:	08015773 	.word	0x08015773
 8015538:	08015773 	.word	0x08015773
 801553c:	08015713 	.word	0x08015713
 8015540:	0801573f 	.word	0x0801573f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	687a      	ldr	r2, [r7, #4]
 801554e:	7c12      	ldrb	r2, [r2, #16]
 8015550:	f107 0108 	add.w	r1, r7, #8
 8015554:	4610      	mov	r0, r2
 8015556:	4798      	blx	r3
 8015558:	60f8      	str	r0, [r7, #12]
      break;
 801555a:	e112      	b.n	8015782 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	7c1b      	ldrb	r3, [r3, #16]
 8015560:	2b00      	cmp	r3, #0
 8015562:	d10d      	bne.n	8015580 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801556a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801556c:	f107 0208 	add.w	r2, r7, #8
 8015570:	4610      	mov	r0, r2
 8015572:	4798      	blx	r3
 8015574:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	3301      	adds	r3, #1
 801557a:	2202      	movs	r2, #2
 801557c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801557e:	e100      	b.n	8015782 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015588:	f107 0208 	add.w	r2, r7, #8
 801558c:	4610      	mov	r0, r2
 801558e:	4798      	blx	r3
 8015590:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	3301      	adds	r3, #1
 8015596:	2202      	movs	r2, #2
 8015598:	701a      	strb	r2, [r3, #0]
      break;
 801559a:	e0f2      	b.n	8015782 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801559c:	683b      	ldr	r3, [r7, #0]
 801559e:	885b      	ldrh	r3, [r3, #2]
 80155a0:	b2db      	uxtb	r3, r3
 80155a2:	2b05      	cmp	r3, #5
 80155a4:	f200 80ac 	bhi.w	8015700 <USBD_GetDescriptor+0x204>
 80155a8:	a201      	add	r2, pc, #4	; (adr r2, 80155b0 <USBD_GetDescriptor+0xb4>)
 80155aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80155ae:	bf00      	nop
 80155b0:	080155c9 	.word	0x080155c9
 80155b4:	080155fd 	.word	0x080155fd
 80155b8:	08015631 	.word	0x08015631
 80155bc:	08015665 	.word	0x08015665
 80155c0:	08015699 	.word	0x08015699
 80155c4:	080156cd 	.word	0x080156cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80155ce:	685b      	ldr	r3, [r3, #4]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d00b      	beq.n	80155ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80155da:	685b      	ldr	r3, [r3, #4]
 80155dc:	687a      	ldr	r2, [r7, #4]
 80155de:	7c12      	ldrb	r2, [r2, #16]
 80155e0:	f107 0108 	add.w	r1, r7, #8
 80155e4:	4610      	mov	r0, r2
 80155e6:	4798      	blx	r3
 80155e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80155ea:	e091      	b.n	8015710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80155ec:	6839      	ldr	r1, [r7, #0]
 80155ee:	6878      	ldr	r0, [r7, #4]
 80155f0:	f000 facb 	bl	8015b8a <USBD_CtlError>
            err++;
 80155f4:	7afb      	ldrb	r3, [r7, #11]
 80155f6:	3301      	adds	r3, #1
 80155f8:	72fb      	strb	r3, [r7, #11]
          break;
 80155fa:	e089      	b.n	8015710 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015602:	689b      	ldr	r3, [r3, #8]
 8015604:	2b00      	cmp	r3, #0
 8015606:	d00b      	beq.n	8015620 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801560e:	689b      	ldr	r3, [r3, #8]
 8015610:	687a      	ldr	r2, [r7, #4]
 8015612:	7c12      	ldrb	r2, [r2, #16]
 8015614:	f107 0108 	add.w	r1, r7, #8
 8015618:	4610      	mov	r0, r2
 801561a:	4798      	blx	r3
 801561c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801561e:	e077      	b.n	8015710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015620:	6839      	ldr	r1, [r7, #0]
 8015622:	6878      	ldr	r0, [r7, #4]
 8015624:	f000 fab1 	bl	8015b8a <USBD_CtlError>
            err++;
 8015628:	7afb      	ldrb	r3, [r7, #11]
 801562a:	3301      	adds	r3, #1
 801562c:	72fb      	strb	r3, [r7, #11]
          break;
 801562e:	e06f      	b.n	8015710 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015636:	68db      	ldr	r3, [r3, #12]
 8015638:	2b00      	cmp	r3, #0
 801563a:	d00b      	beq.n	8015654 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015642:	68db      	ldr	r3, [r3, #12]
 8015644:	687a      	ldr	r2, [r7, #4]
 8015646:	7c12      	ldrb	r2, [r2, #16]
 8015648:	f107 0108 	add.w	r1, r7, #8
 801564c:	4610      	mov	r0, r2
 801564e:	4798      	blx	r3
 8015650:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015652:	e05d      	b.n	8015710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015654:	6839      	ldr	r1, [r7, #0]
 8015656:	6878      	ldr	r0, [r7, #4]
 8015658:	f000 fa97 	bl	8015b8a <USBD_CtlError>
            err++;
 801565c:	7afb      	ldrb	r3, [r7, #11]
 801565e:	3301      	adds	r3, #1
 8015660:	72fb      	strb	r3, [r7, #11]
          break;
 8015662:	e055      	b.n	8015710 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801566a:	691b      	ldr	r3, [r3, #16]
 801566c:	2b00      	cmp	r3, #0
 801566e:	d00b      	beq.n	8015688 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015676:	691b      	ldr	r3, [r3, #16]
 8015678:	687a      	ldr	r2, [r7, #4]
 801567a:	7c12      	ldrb	r2, [r2, #16]
 801567c:	f107 0108 	add.w	r1, r7, #8
 8015680:	4610      	mov	r0, r2
 8015682:	4798      	blx	r3
 8015684:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015686:	e043      	b.n	8015710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015688:	6839      	ldr	r1, [r7, #0]
 801568a:	6878      	ldr	r0, [r7, #4]
 801568c:	f000 fa7d 	bl	8015b8a <USBD_CtlError>
            err++;
 8015690:	7afb      	ldrb	r3, [r7, #11]
 8015692:	3301      	adds	r3, #1
 8015694:	72fb      	strb	r3, [r7, #11]
          break;
 8015696:	e03b      	b.n	8015710 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801569e:	695b      	ldr	r3, [r3, #20]
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d00b      	beq.n	80156bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80156aa:	695b      	ldr	r3, [r3, #20]
 80156ac:	687a      	ldr	r2, [r7, #4]
 80156ae:	7c12      	ldrb	r2, [r2, #16]
 80156b0:	f107 0108 	add.w	r1, r7, #8
 80156b4:	4610      	mov	r0, r2
 80156b6:	4798      	blx	r3
 80156b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80156ba:	e029      	b.n	8015710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80156bc:	6839      	ldr	r1, [r7, #0]
 80156be:	6878      	ldr	r0, [r7, #4]
 80156c0:	f000 fa63 	bl	8015b8a <USBD_CtlError>
            err++;
 80156c4:	7afb      	ldrb	r3, [r7, #11]
 80156c6:	3301      	adds	r3, #1
 80156c8:	72fb      	strb	r3, [r7, #11]
          break;
 80156ca:	e021      	b.n	8015710 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80156d2:	699b      	ldr	r3, [r3, #24]
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d00b      	beq.n	80156f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80156de:	699b      	ldr	r3, [r3, #24]
 80156e0:	687a      	ldr	r2, [r7, #4]
 80156e2:	7c12      	ldrb	r2, [r2, #16]
 80156e4:	f107 0108 	add.w	r1, r7, #8
 80156e8:	4610      	mov	r0, r2
 80156ea:	4798      	blx	r3
 80156ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80156ee:	e00f      	b.n	8015710 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80156f0:	6839      	ldr	r1, [r7, #0]
 80156f2:	6878      	ldr	r0, [r7, #4]
 80156f4:	f000 fa49 	bl	8015b8a <USBD_CtlError>
            err++;
 80156f8:	7afb      	ldrb	r3, [r7, #11]
 80156fa:	3301      	adds	r3, #1
 80156fc:	72fb      	strb	r3, [r7, #11]
          break;
 80156fe:	e007      	b.n	8015710 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015700:	6839      	ldr	r1, [r7, #0]
 8015702:	6878      	ldr	r0, [r7, #4]
 8015704:	f000 fa41 	bl	8015b8a <USBD_CtlError>
          err++;
 8015708:	7afb      	ldrb	r3, [r7, #11]
 801570a:	3301      	adds	r3, #1
 801570c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801570e:	bf00      	nop
      }
      break;
 8015710:	e037      	b.n	8015782 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	7c1b      	ldrb	r3, [r3, #16]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d109      	bne.n	801572e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015722:	f107 0208 	add.w	r2, r7, #8
 8015726:	4610      	mov	r0, r2
 8015728:	4798      	blx	r3
 801572a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801572c:	e029      	b.n	8015782 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801572e:	6839      	ldr	r1, [r7, #0]
 8015730:	6878      	ldr	r0, [r7, #4]
 8015732:	f000 fa2a 	bl	8015b8a <USBD_CtlError>
        err++;
 8015736:	7afb      	ldrb	r3, [r7, #11]
 8015738:	3301      	adds	r3, #1
 801573a:	72fb      	strb	r3, [r7, #11]
      break;
 801573c:	e021      	b.n	8015782 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	7c1b      	ldrb	r3, [r3, #16]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d10d      	bne.n	8015762 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801574c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801574e:	f107 0208 	add.w	r2, r7, #8
 8015752:	4610      	mov	r0, r2
 8015754:	4798      	blx	r3
 8015756:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015758:	68fb      	ldr	r3, [r7, #12]
 801575a:	3301      	adds	r3, #1
 801575c:	2207      	movs	r2, #7
 801575e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015760:	e00f      	b.n	8015782 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015762:	6839      	ldr	r1, [r7, #0]
 8015764:	6878      	ldr	r0, [r7, #4]
 8015766:	f000 fa10 	bl	8015b8a <USBD_CtlError>
        err++;
 801576a:	7afb      	ldrb	r3, [r7, #11]
 801576c:	3301      	adds	r3, #1
 801576e:	72fb      	strb	r3, [r7, #11]
      break;
 8015770:	e007      	b.n	8015782 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015772:	6839      	ldr	r1, [r7, #0]
 8015774:	6878      	ldr	r0, [r7, #4]
 8015776:	f000 fa08 	bl	8015b8a <USBD_CtlError>
      err++;
 801577a:	7afb      	ldrb	r3, [r7, #11]
 801577c:	3301      	adds	r3, #1
 801577e:	72fb      	strb	r3, [r7, #11]
      break;
 8015780:	bf00      	nop
  }

  if (err != 0U)
 8015782:	7afb      	ldrb	r3, [r7, #11]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d11e      	bne.n	80157c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015788:	683b      	ldr	r3, [r7, #0]
 801578a:	88db      	ldrh	r3, [r3, #6]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d016      	beq.n	80157be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015790:	893b      	ldrh	r3, [r7, #8]
 8015792:	2b00      	cmp	r3, #0
 8015794:	d00e      	beq.n	80157b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015796:	683b      	ldr	r3, [r7, #0]
 8015798:	88da      	ldrh	r2, [r3, #6]
 801579a:	893b      	ldrh	r3, [r7, #8]
 801579c:	4293      	cmp	r3, r2
 801579e:	bf28      	it	cs
 80157a0:	4613      	movcs	r3, r2
 80157a2:	b29b      	uxth	r3, r3
 80157a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80157a6:	893b      	ldrh	r3, [r7, #8]
 80157a8:	461a      	mov	r2, r3
 80157aa:	68f9      	ldr	r1, [r7, #12]
 80157ac:	6878      	ldr	r0, [r7, #4]
 80157ae:	f000 fa5d 	bl	8015c6c <USBD_CtlSendData>
 80157b2:	e009      	b.n	80157c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80157b4:	6839      	ldr	r1, [r7, #0]
 80157b6:	6878      	ldr	r0, [r7, #4]
 80157b8:	f000 f9e7 	bl	8015b8a <USBD_CtlError>
 80157bc:	e004      	b.n	80157c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80157be:	6878      	ldr	r0, [r7, #4]
 80157c0:	f000 faae 	bl	8015d20 <USBD_CtlSendStatus>
 80157c4:	e000      	b.n	80157c8 <USBD_GetDescriptor+0x2cc>
    return;
 80157c6:	bf00      	nop
  }
}
 80157c8:	3710      	adds	r7, #16
 80157ca:	46bd      	mov	sp, r7
 80157cc:	bd80      	pop	{r7, pc}
 80157ce:	bf00      	nop

080157d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80157d0:	b580      	push	{r7, lr}
 80157d2:	b084      	sub	sp, #16
 80157d4:	af00      	add	r7, sp, #0
 80157d6:	6078      	str	r0, [r7, #4]
 80157d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80157da:	683b      	ldr	r3, [r7, #0]
 80157dc:	889b      	ldrh	r3, [r3, #4]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d131      	bne.n	8015846 <USBD_SetAddress+0x76>
 80157e2:	683b      	ldr	r3, [r7, #0]
 80157e4:	88db      	ldrh	r3, [r3, #6]
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d12d      	bne.n	8015846 <USBD_SetAddress+0x76>
 80157ea:	683b      	ldr	r3, [r7, #0]
 80157ec:	885b      	ldrh	r3, [r3, #2]
 80157ee:	2b7f      	cmp	r3, #127	; 0x7f
 80157f0:	d829      	bhi.n	8015846 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80157f2:	683b      	ldr	r3, [r7, #0]
 80157f4:	885b      	ldrh	r3, [r3, #2]
 80157f6:	b2db      	uxtb	r3, r3
 80157f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80157fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015804:	b2db      	uxtb	r3, r3
 8015806:	2b03      	cmp	r3, #3
 8015808:	d104      	bne.n	8015814 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801580a:	6839      	ldr	r1, [r7, #0]
 801580c:	6878      	ldr	r0, [r7, #4]
 801580e:	f000 f9bc 	bl	8015b8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015812:	e01d      	b.n	8015850 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	7bfa      	ldrb	r2, [r7, #15]
 8015818:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801581c:	7bfb      	ldrb	r3, [r7, #15]
 801581e:	4619      	mov	r1, r3
 8015820:	6878      	ldr	r0, [r7, #4]
 8015822:	f003 fee5 	bl	80195f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015826:	6878      	ldr	r0, [r7, #4]
 8015828:	f000 fa7a 	bl	8015d20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801582c:	7bfb      	ldrb	r3, [r7, #15]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d004      	beq.n	801583c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	2202      	movs	r2, #2
 8015836:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801583a:	e009      	b.n	8015850 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	2201      	movs	r2, #1
 8015840:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015844:	e004      	b.n	8015850 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015846:	6839      	ldr	r1, [r7, #0]
 8015848:	6878      	ldr	r0, [r7, #4]
 801584a:	f000 f99e 	bl	8015b8a <USBD_CtlError>
  }
}
 801584e:	bf00      	nop
 8015850:	bf00      	nop
 8015852:	3710      	adds	r7, #16
 8015854:	46bd      	mov	sp, r7
 8015856:	bd80      	pop	{r7, pc}

08015858 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b084      	sub	sp, #16
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
 8015860:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015862:	2300      	movs	r3, #0
 8015864:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015866:	683b      	ldr	r3, [r7, #0]
 8015868:	885b      	ldrh	r3, [r3, #2]
 801586a:	b2da      	uxtb	r2, r3
 801586c:	4b4e      	ldr	r3, [pc, #312]	; (80159a8 <USBD_SetConfig+0x150>)
 801586e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015870:	4b4d      	ldr	r3, [pc, #308]	; (80159a8 <USBD_SetConfig+0x150>)
 8015872:	781b      	ldrb	r3, [r3, #0]
 8015874:	2b01      	cmp	r3, #1
 8015876:	d905      	bls.n	8015884 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015878:	6839      	ldr	r1, [r7, #0]
 801587a:	6878      	ldr	r0, [r7, #4]
 801587c:	f000 f985 	bl	8015b8a <USBD_CtlError>
    return USBD_FAIL;
 8015880:	2303      	movs	r3, #3
 8015882:	e08c      	b.n	801599e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801588a:	b2db      	uxtb	r3, r3
 801588c:	2b02      	cmp	r3, #2
 801588e:	d002      	beq.n	8015896 <USBD_SetConfig+0x3e>
 8015890:	2b03      	cmp	r3, #3
 8015892:	d029      	beq.n	80158e8 <USBD_SetConfig+0x90>
 8015894:	e075      	b.n	8015982 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015896:	4b44      	ldr	r3, [pc, #272]	; (80159a8 <USBD_SetConfig+0x150>)
 8015898:	781b      	ldrb	r3, [r3, #0]
 801589a:	2b00      	cmp	r3, #0
 801589c:	d020      	beq.n	80158e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801589e:	4b42      	ldr	r3, [pc, #264]	; (80159a8 <USBD_SetConfig+0x150>)
 80158a0:	781b      	ldrb	r3, [r3, #0]
 80158a2:	461a      	mov	r2, r3
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80158a8:	4b3f      	ldr	r3, [pc, #252]	; (80159a8 <USBD_SetConfig+0x150>)
 80158aa:	781b      	ldrb	r3, [r3, #0]
 80158ac:	4619      	mov	r1, r3
 80158ae:	6878      	ldr	r0, [r7, #4]
 80158b0:	f7fe ffe1 	bl	8014876 <USBD_SetClassConfig>
 80158b4:	4603      	mov	r3, r0
 80158b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80158b8:	7bfb      	ldrb	r3, [r7, #15]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d008      	beq.n	80158d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80158be:	6839      	ldr	r1, [r7, #0]
 80158c0:	6878      	ldr	r0, [r7, #4]
 80158c2:	f000 f962 	bl	8015b8a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	2202      	movs	r2, #2
 80158ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80158ce:	e065      	b.n	801599c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80158d0:	6878      	ldr	r0, [r7, #4]
 80158d2:	f000 fa25 	bl	8015d20 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	2203      	movs	r2, #3
 80158da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80158de:	e05d      	b.n	801599c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80158e0:	6878      	ldr	r0, [r7, #4]
 80158e2:	f000 fa1d 	bl	8015d20 <USBD_CtlSendStatus>
      break;
 80158e6:	e059      	b.n	801599c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80158e8:	4b2f      	ldr	r3, [pc, #188]	; (80159a8 <USBD_SetConfig+0x150>)
 80158ea:	781b      	ldrb	r3, [r3, #0]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d112      	bne.n	8015916 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	2202      	movs	r2, #2
 80158f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80158f8:	4b2b      	ldr	r3, [pc, #172]	; (80159a8 <USBD_SetConfig+0x150>)
 80158fa:	781b      	ldrb	r3, [r3, #0]
 80158fc:	461a      	mov	r2, r3
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015902:	4b29      	ldr	r3, [pc, #164]	; (80159a8 <USBD_SetConfig+0x150>)
 8015904:	781b      	ldrb	r3, [r3, #0]
 8015906:	4619      	mov	r1, r3
 8015908:	6878      	ldr	r0, [r7, #4]
 801590a:	f7fe ffd0 	bl	80148ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801590e:	6878      	ldr	r0, [r7, #4]
 8015910:	f000 fa06 	bl	8015d20 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015914:	e042      	b.n	801599c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015916:	4b24      	ldr	r3, [pc, #144]	; (80159a8 <USBD_SetConfig+0x150>)
 8015918:	781b      	ldrb	r3, [r3, #0]
 801591a:	461a      	mov	r2, r3
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	685b      	ldr	r3, [r3, #4]
 8015920:	429a      	cmp	r2, r3
 8015922:	d02a      	beq.n	801597a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	685b      	ldr	r3, [r3, #4]
 8015928:	b2db      	uxtb	r3, r3
 801592a:	4619      	mov	r1, r3
 801592c:	6878      	ldr	r0, [r7, #4]
 801592e:	f7fe ffbe 	bl	80148ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015932:	4b1d      	ldr	r3, [pc, #116]	; (80159a8 <USBD_SetConfig+0x150>)
 8015934:	781b      	ldrb	r3, [r3, #0]
 8015936:	461a      	mov	r2, r3
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801593c:	4b1a      	ldr	r3, [pc, #104]	; (80159a8 <USBD_SetConfig+0x150>)
 801593e:	781b      	ldrb	r3, [r3, #0]
 8015940:	4619      	mov	r1, r3
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f7fe ff97 	bl	8014876 <USBD_SetClassConfig>
 8015948:	4603      	mov	r3, r0
 801594a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801594c:	7bfb      	ldrb	r3, [r7, #15]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d00f      	beq.n	8015972 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015952:	6839      	ldr	r1, [r7, #0]
 8015954:	6878      	ldr	r0, [r7, #4]
 8015956:	f000 f918 	bl	8015b8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	685b      	ldr	r3, [r3, #4]
 801595e:	b2db      	uxtb	r3, r3
 8015960:	4619      	mov	r1, r3
 8015962:	6878      	ldr	r0, [r7, #4]
 8015964:	f7fe ffa3 	bl	80148ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	2202      	movs	r2, #2
 801596c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015970:	e014      	b.n	801599c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015972:	6878      	ldr	r0, [r7, #4]
 8015974:	f000 f9d4 	bl	8015d20 <USBD_CtlSendStatus>
      break;
 8015978:	e010      	b.n	801599c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801597a:	6878      	ldr	r0, [r7, #4]
 801597c:	f000 f9d0 	bl	8015d20 <USBD_CtlSendStatus>
      break;
 8015980:	e00c      	b.n	801599c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015982:	6839      	ldr	r1, [r7, #0]
 8015984:	6878      	ldr	r0, [r7, #4]
 8015986:	f000 f900 	bl	8015b8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801598a:	4b07      	ldr	r3, [pc, #28]	; (80159a8 <USBD_SetConfig+0x150>)
 801598c:	781b      	ldrb	r3, [r3, #0]
 801598e:	4619      	mov	r1, r3
 8015990:	6878      	ldr	r0, [r7, #4]
 8015992:	f7fe ff8c 	bl	80148ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8015996:	2303      	movs	r3, #3
 8015998:	73fb      	strb	r3, [r7, #15]
      break;
 801599a:	bf00      	nop
  }

  return ret;
 801599c:	7bfb      	ldrb	r3, [r7, #15]
}
 801599e:	4618      	mov	r0, r3
 80159a0:	3710      	adds	r7, #16
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd80      	pop	{r7, pc}
 80159a6:	bf00      	nop
 80159a8:	240016b0 	.word	0x240016b0

080159ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80159ac:	b580      	push	{r7, lr}
 80159ae:	b082      	sub	sp, #8
 80159b0:	af00      	add	r7, sp, #0
 80159b2:	6078      	str	r0, [r7, #4]
 80159b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80159b6:	683b      	ldr	r3, [r7, #0]
 80159b8:	88db      	ldrh	r3, [r3, #6]
 80159ba:	2b01      	cmp	r3, #1
 80159bc:	d004      	beq.n	80159c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80159be:	6839      	ldr	r1, [r7, #0]
 80159c0:	6878      	ldr	r0, [r7, #4]
 80159c2:	f000 f8e2 	bl	8015b8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80159c6:	e023      	b.n	8015a10 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159ce:	b2db      	uxtb	r3, r3
 80159d0:	2b02      	cmp	r3, #2
 80159d2:	dc02      	bgt.n	80159da <USBD_GetConfig+0x2e>
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	dc03      	bgt.n	80159e0 <USBD_GetConfig+0x34>
 80159d8:	e015      	b.n	8015a06 <USBD_GetConfig+0x5a>
 80159da:	2b03      	cmp	r3, #3
 80159dc:	d00b      	beq.n	80159f6 <USBD_GetConfig+0x4a>
 80159de:	e012      	b.n	8015a06 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	2200      	movs	r2, #0
 80159e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	3308      	adds	r3, #8
 80159ea:	2201      	movs	r2, #1
 80159ec:	4619      	mov	r1, r3
 80159ee:	6878      	ldr	r0, [r7, #4]
 80159f0:	f000 f93c 	bl	8015c6c <USBD_CtlSendData>
        break;
 80159f4:	e00c      	b.n	8015a10 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	3304      	adds	r3, #4
 80159fa:	2201      	movs	r2, #1
 80159fc:	4619      	mov	r1, r3
 80159fe:	6878      	ldr	r0, [r7, #4]
 8015a00:	f000 f934 	bl	8015c6c <USBD_CtlSendData>
        break;
 8015a04:	e004      	b.n	8015a10 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8015a06:	6839      	ldr	r1, [r7, #0]
 8015a08:	6878      	ldr	r0, [r7, #4]
 8015a0a:	f000 f8be 	bl	8015b8a <USBD_CtlError>
        break;
 8015a0e:	bf00      	nop
}
 8015a10:	bf00      	nop
 8015a12:	3708      	adds	r7, #8
 8015a14:	46bd      	mov	sp, r7
 8015a16:	bd80      	pop	{r7, pc}

08015a18 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b082      	sub	sp, #8
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
 8015a20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a28:	b2db      	uxtb	r3, r3
 8015a2a:	3b01      	subs	r3, #1
 8015a2c:	2b02      	cmp	r3, #2
 8015a2e:	d81e      	bhi.n	8015a6e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015a30:	683b      	ldr	r3, [r7, #0]
 8015a32:	88db      	ldrh	r3, [r3, #6]
 8015a34:	2b02      	cmp	r3, #2
 8015a36:	d004      	beq.n	8015a42 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8015a38:	6839      	ldr	r1, [r7, #0]
 8015a3a:	6878      	ldr	r0, [r7, #4]
 8015a3c:	f000 f8a5 	bl	8015b8a <USBD_CtlError>
        break;
 8015a40:	e01a      	b.n	8015a78 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8015a42:	687b      	ldr	r3, [r7, #4]
 8015a44:	2201      	movs	r2, #1
 8015a46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d005      	beq.n	8015a5e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	68db      	ldr	r3, [r3, #12]
 8015a56:	f043 0202 	orr.w	r2, r3, #2
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	330c      	adds	r3, #12
 8015a62:	2202      	movs	r2, #2
 8015a64:	4619      	mov	r1, r3
 8015a66:	6878      	ldr	r0, [r7, #4]
 8015a68:	f000 f900 	bl	8015c6c <USBD_CtlSendData>
      break;
 8015a6c:	e004      	b.n	8015a78 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015a6e:	6839      	ldr	r1, [r7, #0]
 8015a70:	6878      	ldr	r0, [r7, #4]
 8015a72:	f000 f88a 	bl	8015b8a <USBD_CtlError>
      break;
 8015a76:	bf00      	nop
  }
}
 8015a78:	bf00      	nop
 8015a7a:	3708      	adds	r7, #8
 8015a7c:	46bd      	mov	sp, r7
 8015a7e:	bd80      	pop	{r7, pc}

08015a80 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b082      	sub	sp, #8
 8015a84:	af00      	add	r7, sp, #0
 8015a86:	6078      	str	r0, [r7, #4]
 8015a88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015a8a:	683b      	ldr	r3, [r7, #0]
 8015a8c:	885b      	ldrh	r3, [r3, #2]
 8015a8e:	2b01      	cmp	r3, #1
 8015a90:	d107      	bne.n	8015aa2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	2201      	movs	r2, #1
 8015a96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8015a9a:	6878      	ldr	r0, [r7, #4]
 8015a9c:	f000 f940 	bl	8015d20 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015aa0:	e013      	b.n	8015aca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015aa2:	683b      	ldr	r3, [r7, #0]
 8015aa4:	885b      	ldrh	r3, [r3, #2]
 8015aa6:	2b02      	cmp	r3, #2
 8015aa8:	d10b      	bne.n	8015ac2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8015aaa:	683b      	ldr	r3, [r7, #0]
 8015aac:	889b      	ldrh	r3, [r3, #4]
 8015aae:	0a1b      	lsrs	r3, r3, #8
 8015ab0:	b29b      	uxth	r3, r3
 8015ab2:	b2da      	uxtb	r2, r3
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8015aba:	6878      	ldr	r0, [r7, #4]
 8015abc:	f000 f930 	bl	8015d20 <USBD_CtlSendStatus>
}
 8015ac0:	e003      	b.n	8015aca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015ac2:	6839      	ldr	r1, [r7, #0]
 8015ac4:	6878      	ldr	r0, [r7, #4]
 8015ac6:	f000 f860 	bl	8015b8a <USBD_CtlError>
}
 8015aca:	bf00      	nop
 8015acc:	3708      	adds	r7, #8
 8015ace:	46bd      	mov	sp, r7
 8015ad0:	bd80      	pop	{r7, pc}

08015ad2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ad2:	b580      	push	{r7, lr}
 8015ad4:	b082      	sub	sp, #8
 8015ad6:	af00      	add	r7, sp, #0
 8015ad8:	6078      	str	r0, [r7, #4]
 8015ada:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ae2:	b2db      	uxtb	r3, r3
 8015ae4:	3b01      	subs	r3, #1
 8015ae6:	2b02      	cmp	r3, #2
 8015ae8:	d80b      	bhi.n	8015b02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015aea:	683b      	ldr	r3, [r7, #0]
 8015aec:	885b      	ldrh	r3, [r3, #2]
 8015aee:	2b01      	cmp	r3, #1
 8015af0:	d10c      	bne.n	8015b0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	2200      	movs	r2, #0
 8015af6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015afa:	6878      	ldr	r0, [r7, #4]
 8015afc:	f000 f910 	bl	8015d20 <USBD_CtlSendStatus>
      }
      break;
 8015b00:	e004      	b.n	8015b0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015b02:	6839      	ldr	r1, [r7, #0]
 8015b04:	6878      	ldr	r0, [r7, #4]
 8015b06:	f000 f840 	bl	8015b8a <USBD_CtlError>
      break;
 8015b0a:	e000      	b.n	8015b0e <USBD_ClrFeature+0x3c>
      break;
 8015b0c:	bf00      	nop
  }
}
 8015b0e:	bf00      	nop
 8015b10:	3708      	adds	r7, #8
 8015b12:	46bd      	mov	sp, r7
 8015b14:	bd80      	pop	{r7, pc}

08015b16 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8015b16:	b580      	push	{r7, lr}
 8015b18:	b084      	sub	sp, #16
 8015b1a:	af00      	add	r7, sp, #0
 8015b1c:	6078      	str	r0, [r7, #4]
 8015b1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015b20:	683b      	ldr	r3, [r7, #0]
 8015b22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	781a      	ldrb	r2, [r3, #0]
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	3301      	adds	r3, #1
 8015b30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	781a      	ldrb	r2, [r3, #0]
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8015b3a:	68fb      	ldr	r3, [r7, #12]
 8015b3c:	3301      	adds	r3, #1
 8015b3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8015b40:	68f8      	ldr	r0, [r7, #12]
 8015b42:	f7ff fa41 	bl	8014fc8 <SWAPBYTE>
 8015b46:	4603      	mov	r3, r0
 8015b48:	461a      	mov	r2, r3
 8015b4a:	687b      	ldr	r3, [r7, #4]
 8015b4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8015b4e:	68fb      	ldr	r3, [r7, #12]
 8015b50:	3301      	adds	r3, #1
 8015b52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015b54:	68fb      	ldr	r3, [r7, #12]
 8015b56:	3301      	adds	r3, #1
 8015b58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8015b5a:	68f8      	ldr	r0, [r7, #12]
 8015b5c:	f7ff fa34 	bl	8014fc8 <SWAPBYTE>
 8015b60:	4603      	mov	r3, r0
 8015b62:	461a      	mov	r2, r3
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8015b68:	68fb      	ldr	r3, [r7, #12]
 8015b6a:	3301      	adds	r3, #1
 8015b6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	3301      	adds	r3, #1
 8015b72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8015b74:	68f8      	ldr	r0, [r7, #12]
 8015b76:	f7ff fa27 	bl	8014fc8 <SWAPBYTE>
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	461a      	mov	r2, r3
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	80da      	strh	r2, [r3, #6]
}
 8015b82:	bf00      	nop
 8015b84:	3710      	adds	r7, #16
 8015b86:	46bd      	mov	sp, r7
 8015b88:	bd80      	pop	{r7, pc}

08015b8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b8a:	b580      	push	{r7, lr}
 8015b8c:	b082      	sub	sp, #8
 8015b8e:	af00      	add	r7, sp, #0
 8015b90:	6078      	str	r0, [r7, #4]
 8015b92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8015b94:	2180      	movs	r1, #128	; 0x80
 8015b96:	6878      	ldr	r0, [r7, #4]
 8015b98:	f003 fcc0 	bl	801951c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015b9c:	2100      	movs	r1, #0
 8015b9e:	6878      	ldr	r0, [r7, #4]
 8015ba0:	f003 fcbc 	bl	801951c <USBD_LL_StallEP>
}
 8015ba4:	bf00      	nop
 8015ba6:	3708      	adds	r7, #8
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	bd80      	pop	{r7, pc}

08015bac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015bac:	b580      	push	{r7, lr}
 8015bae:	b086      	sub	sp, #24
 8015bb0:	af00      	add	r7, sp, #0
 8015bb2:	60f8      	str	r0, [r7, #12]
 8015bb4:	60b9      	str	r1, [r7, #8]
 8015bb6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015bb8:	2300      	movs	r3, #0
 8015bba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d036      	beq.n	8015c30 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015bc6:	6938      	ldr	r0, [r7, #16]
 8015bc8:	f000 f836 	bl	8015c38 <USBD_GetLen>
 8015bcc:	4603      	mov	r3, r0
 8015bce:	3301      	adds	r3, #1
 8015bd0:	b29b      	uxth	r3, r3
 8015bd2:	005b      	lsls	r3, r3, #1
 8015bd4:	b29a      	uxth	r2, r3
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015bda:	7dfb      	ldrb	r3, [r7, #23]
 8015bdc:	68ba      	ldr	r2, [r7, #8]
 8015bde:	4413      	add	r3, r2
 8015be0:	687a      	ldr	r2, [r7, #4]
 8015be2:	7812      	ldrb	r2, [r2, #0]
 8015be4:	701a      	strb	r2, [r3, #0]
  idx++;
 8015be6:	7dfb      	ldrb	r3, [r7, #23]
 8015be8:	3301      	adds	r3, #1
 8015bea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015bec:	7dfb      	ldrb	r3, [r7, #23]
 8015bee:	68ba      	ldr	r2, [r7, #8]
 8015bf0:	4413      	add	r3, r2
 8015bf2:	2203      	movs	r2, #3
 8015bf4:	701a      	strb	r2, [r3, #0]
  idx++;
 8015bf6:	7dfb      	ldrb	r3, [r7, #23]
 8015bf8:	3301      	adds	r3, #1
 8015bfa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015bfc:	e013      	b.n	8015c26 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015bfe:	7dfb      	ldrb	r3, [r7, #23]
 8015c00:	68ba      	ldr	r2, [r7, #8]
 8015c02:	4413      	add	r3, r2
 8015c04:	693a      	ldr	r2, [r7, #16]
 8015c06:	7812      	ldrb	r2, [r2, #0]
 8015c08:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015c0a:	693b      	ldr	r3, [r7, #16]
 8015c0c:	3301      	adds	r3, #1
 8015c0e:	613b      	str	r3, [r7, #16]
    idx++;
 8015c10:	7dfb      	ldrb	r3, [r7, #23]
 8015c12:	3301      	adds	r3, #1
 8015c14:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8015c16:	7dfb      	ldrb	r3, [r7, #23]
 8015c18:	68ba      	ldr	r2, [r7, #8]
 8015c1a:	4413      	add	r3, r2
 8015c1c:	2200      	movs	r2, #0
 8015c1e:	701a      	strb	r2, [r3, #0]
    idx++;
 8015c20:	7dfb      	ldrb	r3, [r7, #23]
 8015c22:	3301      	adds	r3, #1
 8015c24:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8015c26:	693b      	ldr	r3, [r7, #16]
 8015c28:	781b      	ldrb	r3, [r3, #0]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d1e7      	bne.n	8015bfe <USBD_GetString+0x52>
 8015c2e:	e000      	b.n	8015c32 <USBD_GetString+0x86>
    return;
 8015c30:	bf00      	nop
  }
}
 8015c32:	3718      	adds	r7, #24
 8015c34:	46bd      	mov	sp, r7
 8015c36:	bd80      	pop	{r7, pc}

08015c38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015c38:	b480      	push	{r7}
 8015c3a:	b085      	sub	sp, #20
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8015c40:	2300      	movs	r3, #0
 8015c42:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8015c48:	e005      	b.n	8015c56 <USBD_GetLen+0x1e>
  {
    len++;
 8015c4a:	7bfb      	ldrb	r3, [r7, #15]
 8015c4c:	3301      	adds	r3, #1
 8015c4e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8015c50:	68bb      	ldr	r3, [r7, #8]
 8015c52:	3301      	adds	r3, #1
 8015c54:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8015c56:	68bb      	ldr	r3, [r7, #8]
 8015c58:	781b      	ldrb	r3, [r3, #0]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d1f5      	bne.n	8015c4a <USBD_GetLen+0x12>
  }

  return len;
 8015c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c60:	4618      	mov	r0, r3
 8015c62:	3714      	adds	r7, #20
 8015c64:	46bd      	mov	sp, r7
 8015c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c6a:	4770      	bx	lr

08015c6c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b084      	sub	sp, #16
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	60f8      	str	r0, [r7, #12]
 8015c74:	60b9      	str	r1, [r7, #8]
 8015c76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015c78:	68fb      	ldr	r3, [r7, #12]
 8015c7a:	2202      	movs	r2, #2
 8015c7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	687a      	ldr	r2, [r7, #4]
 8015c84:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	687a      	ldr	r2, [r7, #4]
 8015c8a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	68ba      	ldr	r2, [r7, #8]
 8015c90:	2100      	movs	r1, #0
 8015c92:	68f8      	ldr	r0, [r7, #12]
 8015c94:	f003 fccb 	bl	801962e <USBD_LL_Transmit>

  return USBD_OK;
 8015c98:	2300      	movs	r3, #0
}
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	3710      	adds	r7, #16
 8015c9e:	46bd      	mov	sp, r7
 8015ca0:	bd80      	pop	{r7, pc}

08015ca2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015ca2:	b580      	push	{r7, lr}
 8015ca4:	b084      	sub	sp, #16
 8015ca6:	af00      	add	r7, sp, #0
 8015ca8:	60f8      	str	r0, [r7, #12]
 8015caa:	60b9      	str	r1, [r7, #8]
 8015cac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	68ba      	ldr	r2, [r7, #8]
 8015cb2:	2100      	movs	r1, #0
 8015cb4:	68f8      	ldr	r0, [r7, #12]
 8015cb6:	f003 fcba 	bl	801962e <USBD_LL_Transmit>

  return USBD_OK;
 8015cba:	2300      	movs	r3, #0
}
 8015cbc:	4618      	mov	r0, r3
 8015cbe:	3710      	adds	r7, #16
 8015cc0:	46bd      	mov	sp, r7
 8015cc2:	bd80      	pop	{r7, pc}

08015cc4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015cc4:	b580      	push	{r7, lr}
 8015cc6:	b084      	sub	sp, #16
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	60f8      	str	r0, [r7, #12]
 8015ccc:	60b9      	str	r1, [r7, #8]
 8015cce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	2203      	movs	r2, #3
 8015cd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8015cd8:	68fb      	ldr	r3, [r7, #12]
 8015cda:	687a      	ldr	r2, [r7, #4]
 8015cdc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	687a      	ldr	r2, [r7, #4]
 8015ce4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	68ba      	ldr	r2, [r7, #8]
 8015cec:	2100      	movs	r1, #0
 8015cee:	68f8      	ldr	r0, [r7, #12]
 8015cf0:	f003 fcbe 	bl	8019670 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015cf4:	2300      	movs	r3, #0
}
 8015cf6:	4618      	mov	r0, r3
 8015cf8:	3710      	adds	r7, #16
 8015cfa:	46bd      	mov	sp, r7
 8015cfc:	bd80      	pop	{r7, pc}

08015cfe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015cfe:	b580      	push	{r7, lr}
 8015d00:	b084      	sub	sp, #16
 8015d02:	af00      	add	r7, sp, #0
 8015d04:	60f8      	str	r0, [r7, #12]
 8015d06:	60b9      	str	r1, [r7, #8]
 8015d08:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	68ba      	ldr	r2, [r7, #8]
 8015d0e:	2100      	movs	r1, #0
 8015d10:	68f8      	ldr	r0, [r7, #12]
 8015d12:	f003 fcad 	bl	8019670 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015d16:	2300      	movs	r3, #0
}
 8015d18:	4618      	mov	r0, r3
 8015d1a:	3710      	adds	r7, #16
 8015d1c:	46bd      	mov	sp, r7
 8015d1e:	bd80      	pop	{r7, pc}

08015d20 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b082      	sub	sp, #8
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	2204      	movs	r2, #4
 8015d2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015d30:	2300      	movs	r3, #0
 8015d32:	2200      	movs	r2, #0
 8015d34:	2100      	movs	r1, #0
 8015d36:	6878      	ldr	r0, [r7, #4]
 8015d38:	f003 fc79 	bl	801962e <USBD_LL_Transmit>

  return USBD_OK;
 8015d3c:	2300      	movs	r3, #0
}
 8015d3e:	4618      	mov	r0, r3
 8015d40:	3708      	adds	r7, #8
 8015d42:	46bd      	mov	sp, r7
 8015d44:	bd80      	pop	{r7, pc}

08015d46 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8015d46:	b580      	push	{r7, lr}
 8015d48:	b082      	sub	sp, #8
 8015d4a:	af00      	add	r7, sp, #0
 8015d4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	2205      	movs	r2, #5
 8015d52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015d56:	2300      	movs	r3, #0
 8015d58:	2200      	movs	r2, #0
 8015d5a:	2100      	movs	r1, #0
 8015d5c:	6878      	ldr	r0, [r7, #4]
 8015d5e:	f003 fc87 	bl	8019670 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015d62:	2300      	movs	r3, #0
}
 8015d64:	4618      	mov	r0, r3
 8015d66:	3708      	adds	r7, #8
 8015d68:	46bd      	mov	sp, r7
 8015d6a:	bd80      	pop	{r7, pc}

08015d6c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b084      	sub	sp, #16
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	4603      	mov	r3, r0
 8015d74:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8015d76:	79fb      	ldrb	r3, [r7, #7]
 8015d78:	4a08      	ldr	r2, [pc, #32]	; (8015d9c <disk_status+0x30>)
 8015d7a:	009b      	lsls	r3, r3, #2
 8015d7c:	4413      	add	r3, r2
 8015d7e:	685b      	ldr	r3, [r3, #4]
 8015d80:	685b      	ldr	r3, [r3, #4]
 8015d82:	79fa      	ldrb	r2, [r7, #7]
 8015d84:	4905      	ldr	r1, [pc, #20]	; (8015d9c <disk_status+0x30>)
 8015d86:	440a      	add	r2, r1
 8015d88:	7a12      	ldrb	r2, [r2, #8]
 8015d8a:	4610      	mov	r0, r2
 8015d8c:	4798      	blx	r3
 8015d8e:	4603      	mov	r3, r0
 8015d90:	73fb      	strb	r3, [r7, #15]
  return stat;
 8015d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d94:	4618      	mov	r0, r3
 8015d96:	3710      	adds	r7, #16
 8015d98:	46bd      	mov	sp, r7
 8015d9a:	bd80      	pop	{r7, pc}
 8015d9c:	240018dc 	.word	0x240018dc

08015da0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8015da0:	b580      	push	{r7, lr}
 8015da2:	b084      	sub	sp, #16
 8015da4:	af00      	add	r7, sp, #0
 8015da6:	4603      	mov	r3, r0
 8015da8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8015daa:	2300      	movs	r3, #0
 8015dac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8015dae:	79fb      	ldrb	r3, [r7, #7]
 8015db0:	4a0d      	ldr	r2, [pc, #52]	; (8015de8 <disk_initialize+0x48>)
 8015db2:	5cd3      	ldrb	r3, [r2, r3]
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d111      	bne.n	8015ddc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8015db8:	79fb      	ldrb	r3, [r7, #7]
 8015dba:	4a0b      	ldr	r2, [pc, #44]	; (8015de8 <disk_initialize+0x48>)
 8015dbc:	2101      	movs	r1, #1
 8015dbe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8015dc0:	79fb      	ldrb	r3, [r7, #7]
 8015dc2:	4a09      	ldr	r2, [pc, #36]	; (8015de8 <disk_initialize+0x48>)
 8015dc4:	009b      	lsls	r3, r3, #2
 8015dc6:	4413      	add	r3, r2
 8015dc8:	685b      	ldr	r3, [r3, #4]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	79fa      	ldrb	r2, [r7, #7]
 8015dce:	4906      	ldr	r1, [pc, #24]	; (8015de8 <disk_initialize+0x48>)
 8015dd0:	440a      	add	r2, r1
 8015dd2:	7a12      	ldrb	r2, [r2, #8]
 8015dd4:	4610      	mov	r0, r2
 8015dd6:	4798      	blx	r3
 8015dd8:	4603      	mov	r3, r0
 8015dda:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8015ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015dde:	4618      	mov	r0, r3
 8015de0:	3710      	adds	r7, #16
 8015de2:	46bd      	mov	sp, r7
 8015de4:	bd80      	pop	{r7, pc}
 8015de6:	bf00      	nop
 8015de8:	240018dc 	.word	0x240018dc

08015dec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8015dec:	b590      	push	{r4, r7, lr}
 8015dee:	b087      	sub	sp, #28
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	60b9      	str	r1, [r7, #8]
 8015df4:	607a      	str	r2, [r7, #4]
 8015df6:	603b      	str	r3, [r7, #0]
 8015df8:	4603      	mov	r3, r0
 8015dfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8015dfc:	7bfb      	ldrb	r3, [r7, #15]
 8015dfe:	4a0a      	ldr	r2, [pc, #40]	; (8015e28 <disk_read+0x3c>)
 8015e00:	009b      	lsls	r3, r3, #2
 8015e02:	4413      	add	r3, r2
 8015e04:	685b      	ldr	r3, [r3, #4]
 8015e06:	689c      	ldr	r4, [r3, #8]
 8015e08:	7bfb      	ldrb	r3, [r7, #15]
 8015e0a:	4a07      	ldr	r2, [pc, #28]	; (8015e28 <disk_read+0x3c>)
 8015e0c:	4413      	add	r3, r2
 8015e0e:	7a18      	ldrb	r0, [r3, #8]
 8015e10:	683b      	ldr	r3, [r7, #0]
 8015e12:	687a      	ldr	r2, [r7, #4]
 8015e14:	68b9      	ldr	r1, [r7, #8]
 8015e16:	47a0      	blx	r4
 8015e18:	4603      	mov	r3, r0
 8015e1a:	75fb      	strb	r3, [r7, #23]
  return res;
 8015e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e1e:	4618      	mov	r0, r3
 8015e20:	371c      	adds	r7, #28
 8015e22:	46bd      	mov	sp, r7
 8015e24:	bd90      	pop	{r4, r7, pc}
 8015e26:	bf00      	nop
 8015e28:	240018dc 	.word	0x240018dc

08015e2c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8015e2c:	b590      	push	{r4, r7, lr}
 8015e2e:	b087      	sub	sp, #28
 8015e30:	af00      	add	r7, sp, #0
 8015e32:	60b9      	str	r1, [r7, #8]
 8015e34:	607a      	str	r2, [r7, #4]
 8015e36:	603b      	str	r3, [r7, #0]
 8015e38:	4603      	mov	r3, r0
 8015e3a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8015e3c:	7bfb      	ldrb	r3, [r7, #15]
 8015e3e:	4a0a      	ldr	r2, [pc, #40]	; (8015e68 <disk_write+0x3c>)
 8015e40:	009b      	lsls	r3, r3, #2
 8015e42:	4413      	add	r3, r2
 8015e44:	685b      	ldr	r3, [r3, #4]
 8015e46:	68dc      	ldr	r4, [r3, #12]
 8015e48:	7bfb      	ldrb	r3, [r7, #15]
 8015e4a:	4a07      	ldr	r2, [pc, #28]	; (8015e68 <disk_write+0x3c>)
 8015e4c:	4413      	add	r3, r2
 8015e4e:	7a18      	ldrb	r0, [r3, #8]
 8015e50:	683b      	ldr	r3, [r7, #0]
 8015e52:	687a      	ldr	r2, [r7, #4]
 8015e54:	68b9      	ldr	r1, [r7, #8]
 8015e56:	47a0      	blx	r4
 8015e58:	4603      	mov	r3, r0
 8015e5a:	75fb      	strb	r3, [r7, #23]
  return res;
 8015e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e5e:	4618      	mov	r0, r3
 8015e60:	371c      	adds	r7, #28
 8015e62:	46bd      	mov	sp, r7
 8015e64:	bd90      	pop	{r4, r7, pc}
 8015e66:	bf00      	nop
 8015e68:	240018dc 	.word	0x240018dc

08015e6c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8015e6c:	b580      	push	{r7, lr}
 8015e6e:	b084      	sub	sp, #16
 8015e70:	af00      	add	r7, sp, #0
 8015e72:	4603      	mov	r3, r0
 8015e74:	603a      	str	r2, [r7, #0]
 8015e76:	71fb      	strb	r3, [r7, #7]
 8015e78:	460b      	mov	r3, r1
 8015e7a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8015e7c:	79fb      	ldrb	r3, [r7, #7]
 8015e7e:	4a09      	ldr	r2, [pc, #36]	; (8015ea4 <disk_ioctl+0x38>)
 8015e80:	009b      	lsls	r3, r3, #2
 8015e82:	4413      	add	r3, r2
 8015e84:	685b      	ldr	r3, [r3, #4]
 8015e86:	691b      	ldr	r3, [r3, #16]
 8015e88:	79fa      	ldrb	r2, [r7, #7]
 8015e8a:	4906      	ldr	r1, [pc, #24]	; (8015ea4 <disk_ioctl+0x38>)
 8015e8c:	440a      	add	r2, r1
 8015e8e:	7a10      	ldrb	r0, [r2, #8]
 8015e90:	79b9      	ldrb	r1, [r7, #6]
 8015e92:	683a      	ldr	r2, [r7, #0]
 8015e94:	4798      	blx	r3
 8015e96:	4603      	mov	r3, r0
 8015e98:	73fb      	strb	r3, [r7, #15]
  return res;
 8015e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	3710      	adds	r7, #16
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	bd80      	pop	{r7, pc}
 8015ea4:	240018dc 	.word	0x240018dc

08015ea8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8015ea8:	b480      	push	{r7}
 8015eaa:	b085      	sub	sp, #20
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	3301      	adds	r3, #1
 8015eb4:	781b      	ldrb	r3, [r3, #0]
 8015eb6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8015eb8:	89fb      	ldrh	r3, [r7, #14]
 8015eba:	021b      	lsls	r3, r3, #8
 8015ebc:	b21a      	sxth	r2, r3
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	781b      	ldrb	r3, [r3, #0]
 8015ec2:	b21b      	sxth	r3, r3
 8015ec4:	4313      	orrs	r3, r2
 8015ec6:	b21b      	sxth	r3, r3
 8015ec8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8015eca:	89fb      	ldrh	r3, [r7, #14]
}
 8015ecc:	4618      	mov	r0, r3
 8015ece:	3714      	adds	r7, #20
 8015ed0:	46bd      	mov	sp, r7
 8015ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ed6:	4770      	bx	lr

08015ed8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8015ed8:	b480      	push	{r7}
 8015eda:	b085      	sub	sp, #20
 8015edc:	af00      	add	r7, sp, #0
 8015ede:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	3303      	adds	r3, #3
 8015ee4:	781b      	ldrb	r3, [r3, #0]
 8015ee6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8015ee8:	68fb      	ldr	r3, [r7, #12]
 8015eea:	021b      	lsls	r3, r3, #8
 8015eec:	687a      	ldr	r2, [r7, #4]
 8015eee:	3202      	adds	r2, #2
 8015ef0:	7812      	ldrb	r2, [r2, #0]
 8015ef2:	4313      	orrs	r3, r2
 8015ef4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	021b      	lsls	r3, r3, #8
 8015efa:	687a      	ldr	r2, [r7, #4]
 8015efc:	3201      	adds	r2, #1
 8015efe:	7812      	ldrb	r2, [r2, #0]
 8015f00:	4313      	orrs	r3, r2
 8015f02:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	021b      	lsls	r3, r3, #8
 8015f08:	687a      	ldr	r2, [r7, #4]
 8015f0a:	7812      	ldrb	r2, [r2, #0]
 8015f0c:	4313      	orrs	r3, r2
 8015f0e:	60fb      	str	r3, [r7, #12]
	return rv;
 8015f10:	68fb      	ldr	r3, [r7, #12]
}
 8015f12:	4618      	mov	r0, r3
 8015f14:	3714      	adds	r7, #20
 8015f16:	46bd      	mov	sp, r7
 8015f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1c:	4770      	bx	lr

08015f1e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8015f1e:	b480      	push	{r7}
 8015f20:	b083      	sub	sp, #12
 8015f22:	af00      	add	r7, sp, #0
 8015f24:	6078      	str	r0, [r7, #4]
 8015f26:	460b      	mov	r3, r1
 8015f28:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	1c5a      	adds	r2, r3, #1
 8015f2e:	607a      	str	r2, [r7, #4]
 8015f30:	887a      	ldrh	r2, [r7, #2]
 8015f32:	b2d2      	uxtb	r2, r2
 8015f34:	701a      	strb	r2, [r3, #0]
 8015f36:	887b      	ldrh	r3, [r7, #2]
 8015f38:	0a1b      	lsrs	r3, r3, #8
 8015f3a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	1c5a      	adds	r2, r3, #1
 8015f40:	607a      	str	r2, [r7, #4]
 8015f42:	887a      	ldrh	r2, [r7, #2]
 8015f44:	b2d2      	uxtb	r2, r2
 8015f46:	701a      	strb	r2, [r3, #0]
}
 8015f48:	bf00      	nop
 8015f4a:	370c      	adds	r7, #12
 8015f4c:	46bd      	mov	sp, r7
 8015f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f52:	4770      	bx	lr

08015f54 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8015f54:	b480      	push	{r7}
 8015f56:	b083      	sub	sp, #12
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
 8015f5c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	1c5a      	adds	r2, r3, #1
 8015f62:	607a      	str	r2, [r7, #4]
 8015f64:	683a      	ldr	r2, [r7, #0]
 8015f66:	b2d2      	uxtb	r2, r2
 8015f68:	701a      	strb	r2, [r3, #0]
 8015f6a:	683b      	ldr	r3, [r7, #0]
 8015f6c:	0a1b      	lsrs	r3, r3, #8
 8015f6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	1c5a      	adds	r2, r3, #1
 8015f74:	607a      	str	r2, [r7, #4]
 8015f76:	683a      	ldr	r2, [r7, #0]
 8015f78:	b2d2      	uxtb	r2, r2
 8015f7a:	701a      	strb	r2, [r3, #0]
 8015f7c:	683b      	ldr	r3, [r7, #0]
 8015f7e:	0a1b      	lsrs	r3, r3, #8
 8015f80:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	1c5a      	adds	r2, r3, #1
 8015f86:	607a      	str	r2, [r7, #4]
 8015f88:	683a      	ldr	r2, [r7, #0]
 8015f8a:	b2d2      	uxtb	r2, r2
 8015f8c:	701a      	strb	r2, [r3, #0]
 8015f8e:	683b      	ldr	r3, [r7, #0]
 8015f90:	0a1b      	lsrs	r3, r3, #8
 8015f92:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	1c5a      	adds	r2, r3, #1
 8015f98:	607a      	str	r2, [r7, #4]
 8015f9a:	683a      	ldr	r2, [r7, #0]
 8015f9c:	b2d2      	uxtb	r2, r2
 8015f9e:	701a      	strb	r2, [r3, #0]
}
 8015fa0:	bf00      	nop
 8015fa2:	370c      	adds	r7, #12
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015faa:	4770      	bx	lr

08015fac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8015fac:	b480      	push	{r7}
 8015fae:	b087      	sub	sp, #28
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	60f8      	str	r0, [r7, #12]
 8015fb4:	60b9      	str	r1, [r7, #8]
 8015fb6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8015fbc:	68bb      	ldr	r3, [r7, #8]
 8015fbe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d00d      	beq.n	8015fe2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8015fc6:	693a      	ldr	r2, [r7, #16]
 8015fc8:	1c53      	adds	r3, r2, #1
 8015fca:	613b      	str	r3, [r7, #16]
 8015fcc:	697b      	ldr	r3, [r7, #20]
 8015fce:	1c59      	adds	r1, r3, #1
 8015fd0:	6179      	str	r1, [r7, #20]
 8015fd2:	7812      	ldrb	r2, [r2, #0]
 8015fd4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	3b01      	subs	r3, #1
 8015fda:	607b      	str	r3, [r7, #4]
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d1f1      	bne.n	8015fc6 <mem_cpy+0x1a>
	}
}
 8015fe2:	bf00      	nop
 8015fe4:	371c      	adds	r7, #28
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fec:	4770      	bx	lr

08015fee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8015fee:	b480      	push	{r7}
 8015ff0:	b087      	sub	sp, #28
 8015ff2:	af00      	add	r7, sp, #0
 8015ff4:	60f8      	str	r0, [r7, #12]
 8015ff6:	60b9      	str	r1, [r7, #8]
 8015ff8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8015ffe:	697b      	ldr	r3, [r7, #20]
 8016000:	1c5a      	adds	r2, r3, #1
 8016002:	617a      	str	r2, [r7, #20]
 8016004:	68ba      	ldr	r2, [r7, #8]
 8016006:	b2d2      	uxtb	r2, r2
 8016008:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	3b01      	subs	r3, #1
 801600e:	607b      	str	r3, [r7, #4]
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	2b00      	cmp	r3, #0
 8016014:	d1f3      	bne.n	8015ffe <mem_set+0x10>
}
 8016016:	bf00      	nop
 8016018:	bf00      	nop
 801601a:	371c      	adds	r7, #28
 801601c:	46bd      	mov	sp, r7
 801601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016022:	4770      	bx	lr

08016024 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8016024:	b480      	push	{r7}
 8016026:	b089      	sub	sp, #36	; 0x24
 8016028:	af00      	add	r7, sp, #0
 801602a:	60f8      	str	r0, [r7, #12]
 801602c:	60b9      	str	r1, [r7, #8]
 801602e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8016030:	68fb      	ldr	r3, [r7, #12]
 8016032:	61fb      	str	r3, [r7, #28]
 8016034:	68bb      	ldr	r3, [r7, #8]
 8016036:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8016038:	2300      	movs	r3, #0
 801603a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801603c:	69fb      	ldr	r3, [r7, #28]
 801603e:	1c5a      	adds	r2, r3, #1
 8016040:	61fa      	str	r2, [r7, #28]
 8016042:	781b      	ldrb	r3, [r3, #0]
 8016044:	4619      	mov	r1, r3
 8016046:	69bb      	ldr	r3, [r7, #24]
 8016048:	1c5a      	adds	r2, r3, #1
 801604a:	61ba      	str	r2, [r7, #24]
 801604c:	781b      	ldrb	r3, [r3, #0]
 801604e:	1acb      	subs	r3, r1, r3
 8016050:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	3b01      	subs	r3, #1
 8016056:	607b      	str	r3, [r7, #4]
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	2b00      	cmp	r3, #0
 801605c:	d002      	beq.n	8016064 <mem_cmp+0x40>
 801605e:	697b      	ldr	r3, [r7, #20]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d0eb      	beq.n	801603c <mem_cmp+0x18>

	return r;
 8016064:	697b      	ldr	r3, [r7, #20]
}
 8016066:	4618      	mov	r0, r3
 8016068:	3724      	adds	r7, #36	; 0x24
 801606a:	46bd      	mov	sp, r7
 801606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016070:	4770      	bx	lr

08016072 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8016072:	b480      	push	{r7}
 8016074:	b083      	sub	sp, #12
 8016076:	af00      	add	r7, sp, #0
 8016078:	6078      	str	r0, [r7, #4]
 801607a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 801607c:	e002      	b.n	8016084 <chk_chr+0x12>
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	3301      	adds	r3, #1
 8016082:	607b      	str	r3, [r7, #4]
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	781b      	ldrb	r3, [r3, #0]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d005      	beq.n	8016098 <chk_chr+0x26>
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	781b      	ldrb	r3, [r3, #0]
 8016090:	461a      	mov	r2, r3
 8016092:	683b      	ldr	r3, [r7, #0]
 8016094:	4293      	cmp	r3, r2
 8016096:	d1f2      	bne.n	801607e <chk_chr+0xc>
	return *str;
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	781b      	ldrb	r3, [r3, #0]
}
 801609c:	4618      	mov	r0, r3
 801609e:	370c      	adds	r7, #12
 80160a0:	46bd      	mov	sp, r7
 80160a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a6:	4770      	bx	lr

080160a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80160a8:	b480      	push	{r7}
 80160aa:	b085      	sub	sp, #20
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
 80160b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80160b2:	2300      	movs	r3, #0
 80160b4:	60bb      	str	r3, [r7, #8]
 80160b6:	68bb      	ldr	r3, [r7, #8]
 80160b8:	60fb      	str	r3, [r7, #12]
 80160ba:	e029      	b.n	8016110 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80160bc:	4a27      	ldr	r2, [pc, #156]	; (801615c <chk_lock+0xb4>)
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	011b      	lsls	r3, r3, #4
 80160c2:	4413      	add	r3, r2
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d01d      	beq.n	8016106 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80160ca:	4a24      	ldr	r2, [pc, #144]	; (801615c <chk_lock+0xb4>)
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	011b      	lsls	r3, r3, #4
 80160d0:	4413      	add	r3, r2
 80160d2:	681a      	ldr	r2, [r3, #0]
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	681b      	ldr	r3, [r3, #0]
 80160d8:	429a      	cmp	r2, r3
 80160da:	d116      	bne.n	801610a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80160dc:	4a1f      	ldr	r2, [pc, #124]	; (801615c <chk_lock+0xb4>)
 80160de:	68fb      	ldr	r3, [r7, #12]
 80160e0:	011b      	lsls	r3, r3, #4
 80160e2:	4413      	add	r3, r2
 80160e4:	3304      	adds	r3, #4
 80160e6:	681a      	ldr	r2, [r3, #0]
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80160ec:	429a      	cmp	r2, r3
 80160ee:	d10c      	bne.n	801610a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80160f0:	4a1a      	ldr	r2, [pc, #104]	; (801615c <chk_lock+0xb4>)
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	011b      	lsls	r3, r3, #4
 80160f6:	4413      	add	r3, r2
 80160f8:	3308      	adds	r3, #8
 80160fa:	681a      	ldr	r2, [r3, #0]
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8016100:	429a      	cmp	r2, r3
 8016102:	d102      	bne.n	801610a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016104:	e007      	b.n	8016116 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8016106:	2301      	movs	r3, #1
 8016108:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	3301      	adds	r3, #1
 801610e:	60fb      	str	r3, [r7, #12]
 8016110:	68fb      	ldr	r3, [r7, #12]
 8016112:	2b01      	cmp	r3, #1
 8016114:	d9d2      	bls.n	80160bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	2b02      	cmp	r3, #2
 801611a:	d109      	bne.n	8016130 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801611c:	68bb      	ldr	r3, [r7, #8]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d102      	bne.n	8016128 <chk_lock+0x80>
 8016122:	683b      	ldr	r3, [r7, #0]
 8016124:	2b02      	cmp	r3, #2
 8016126:	d101      	bne.n	801612c <chk_lock+0x84>
 8016128:	2300      	movs	r3, #0
 801612a:	e010      	b.n	801614e <chk_lock+0xa6>
 801612c:	2312      	movs	r3, #18
 801612e:	e00e      	b.n	801614e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8016130:	683b      	ldr	r3, [r7, #0]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d108      	bne.n	8016148 <chk_lock+0xa0>
 8016136:	4a09      	ldr	r2, [pc, #36]	; (801615c <chk_lock+0xb4>)
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	011b      	lsls	r3, r3, #4
 801613c:	4413      	add	r3, r2
 801613e:	330c      	adds	r3, #12
 8016140:	881b      	ldrh	r3, [r3, #0]
 8016142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016146:	d101      	bne.n	801614c <chk_lock+0xa4>
 8016148:	2310      	movs	r3, #16
 801614a:	e000      	b.n	801614e <chk_lock+0xa6>
 801614c:	2300      	movs	r3, #0
}
 801614e:	4618      	mov	r0, r3
 8016150:	3714      	adds	r7, #20
 8016152:	46bd      	mov	sp, r7
 8016154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016158:	4770      	bx	lr
 801615a:	bf00      	nop
 801615c:	240016bc 	.word	0x240016bc

08016160 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8016160:	b480      	push	{r7}
 8016162:	b083      	sub	sp, #12
 8016164:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016166:	2300      	movs	r3, #0
 8016168:	607b      	str	r3, [r7, #4]
 801616a:	e002      	b.n	8016172 <enq_lock+0x12>
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	3301      	adds	r3, #1
 8016170:	607b      	str	r3, [r7, #4]
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	2b01      	cmp	r3, #1
 8016176:	d806      	bhi.n	8016186 <enq_lock+0x26>
 8016178:	4a09      	ldr	r2, [pc, #36]	; (80161a0 <enq_lock+0x40>)
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	011b      	lsls	r3, r3, #4
 801617e:	4413      	add	r3, r2
 8016180:	681b      	ldr	r3, [r3, #0]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d1f2      	bne.n	801616c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	2b02      	cmp	r3, #2
 801618a:	bf14      	ite	ne
 801618c:	2301      	movne	r3, #1
 801618e:	2300      	moveq	r3, #0
 8016190:	b2db      	uxtb	r3, r3
}
 8016192:	4618      	mov	r0, r3
 8016194:	370c      	adds	r7, #12
 8016196:	46bd      	mov	sp, r7
 8016198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801619c:	4770      	bx	lr
 801619e:	bf00      	nop
 80161a0:	240016bc 	.word	0x240016bc

080161a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80161a4:	b480      	push	{r7}
 80161a6:	b085      	sub	sp, #20
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	6078      	str	r0, [r7, #4]
 80161ac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80161ae:	2300      	movs	r3, #0
 80161b0:	60fb      	str	r3, [r7, #12]
 80161b2:	e01f      	b.n	80161f4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80161b4:	4a41      	ldr	r2, [pc, #260]	; (80162bc <inc_lock+0x118>)
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	011b      	lsls	r3, r3, #4
 80161ba:	4413      	add	r3, r2
 80161bc:	681a      	ldr	r2, [r3, #0]
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	429a      	cmp	r2, r3
 80161c4:	d113      	bne.n	80161ee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80161c6:	4a3d      	ldr	r2, [pc, #244]	; (80162bc <inc_lock+0x118>)
 80161c8:	68fb      	ldr	r3, [r7, #12]
 80161ca:	011b      	lsls	r3, r3, #4
 80161cc:	4413      	add	r3, r2
 80161ce:	3304      	adds	r3, #4
 80161d0:	681a      	ldr	r2, [r3, #0]
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80161d6:	429a      	cmp	r2, r3
 80161d8:	d109      	bne.n	80161ee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80161da:	4a38      	ldr	r2, [pc, #224]	; (80162bc <inc_lock+0x118>)
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	011b      	lsls	r3, r3, #4
 80161e0:	4413      	add	r3, r2
 80161e2:	3308      	adds	r3, #8
 80161e4:	681a      	ldr	r2, [r3, #0]
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80161ea:	429a      	cmp	r2, r3
 80161ec:	d006      	beq.n	80161fc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80161ee:	68fb      	ldr	r3, [r7, #12]
 80161f0:	3301      	adds	r3, #1
 80161f2:	60fb      	str	r3, [r7, #12]
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	2b01      	cmp	r3, #1
 80161f8:	d9dc      	bls.n	80161b4 <inc_lock+0x10>
 80161fa:	e000      	b.n	80161fe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80161fc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	2b02      	cmp	r3, #2
 8016202:	d132      	bne.n	801626a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016204:	2300      	movs	r3, #0
 8016206:	60fb      	str	r3, [r7, #12]
 8016208:	e002      	b.n	8016210 <inc_lock+0x6c>
 801620a:	68fb      	ldr	r3, [r7, #12]
 801620c:	3301      	adds	r3, #1
 801620e:	60fb      	str	r3, [r7, #12]
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	2b01      	cmp	r3, #1
 8016214:	d806      	bhi.n	8016224 <inc_lock+0x80>
 8016216:	4a29      	ldr	r2, [pc, #164]	; (80162bc <inc_lock+0x118>)
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	011b      	lsls	r3, r3, #4
 801621c:	4413      	add	r3, r2
 801621e:	681b      	ldr	r3, [r3, #0]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d1f2      	bne.n	801620a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	2b02      	cmp	r3, #2
 8016228:	d101      	bne.n	801622e <inc_lock+0x8a>
 801622a:	2300      	movs	r3, #0
 801622c:	e040      	b.n	80162b0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	681a      	ldr	r2, [r3, #0]
 8016232:	4922      	ldr	r1, [pc, #136]	; (80162bc <inc_lock+0x118>)
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	011b      	lsls	r3, r3, #4
 8016238:	440b      	add	r3, r1
 801623a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	689a      	ldr	r2, [r3, #8]
 8016240:	491e      	ldr	r1, [pc, #120]	; (80162bc <inc_lock+0x118>)
 8016242:	68fb      	ldr	r3, [r7, #12]
 8016244:	011b      	lsls	r3, r3, #4
 8016246:	440b      	add	r3, r1
 8016248:	3304      	adds	r3, #4
 801624a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801624c:	687b      	ldr	r3, [r7, #4]
 801624e:	695a      	ldr	r2, [r3, #20]
 8016250:	491a      	ldr	r1, [pc, #104]	; (80162bc <inc_lock+0x118>)
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	011b      	lsls	r3, r3, #4
 8016256:	440b      	add	r3, r1
 8016258:	3308      	adds	r3, #8
 801625a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801625c:	4a17      	ldr	r2, [pc, #92]	; (80162bc <inc_lock+0x118>)
 801625e:	68fb      	ldr	r3, [r7, #12]
 8016260:	011b      	lsls	r3, r3, #4
 8016262:	4413      	add	r3, r2
 8016264:	330c      	adds	r3, #12
 8016266:	2200      	movs	r2, #0
 8016268:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801626a:	683b      	ldr	r3, [r7, #0]
 801626c:	2b00      	cmp	r3, #0
 801626e:	d009      	beq.n	8016284 <inc_lock+0xe0>
 8016270:	4a12      	ldr	r2, [pc, #72]	; (80162bc <inc_lock+0x118>)
 8016272:	68fb      	ldr	r3, [r7, #12]
 8016274:	011b      	lsls	r3, r3, #4
 8016276:	4413      	add	r3, r2
 8016278:	330c      	adds	r3, #12
 801627a:	881b      	ldrh	r3, [r3, #0]
 801627c:	2b00      	cmp	r3, #0
 801627e:	d001      	beq.n	8016284 <inc_lock+0xe0>
 8016280:	2300      	movs	r3, #0
 8016282:	e015      	b.n	80162b0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8016284:	683b      	ldr	r3, [r7, #0]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d108      	bne.n	801629c <inc_lock+0xf8>
 801628a:	4a0c      	ldr	r2, [pc, #48]	; (80162bc <inc_lock+0x118>)
 801628c:	68fb      	ldr	r3, [r7, #12]
 801628e:	011b      	lsls	r3, r3, #4
 8016290:	4413      	add	r3, r2
 8016292:	330c      	adds	r3, #12
 8016294:	881b      	ldrh	r3, [r3, #0]
 8016296:	3301      	adds	r3, #1
 8016298:	b29a      	uxth	r2, r3
 801629a:	e001      	b.n	80162a0 <inc_lock+0xfc>
 801629c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80162a0:	4906      	ldr	r1, [pc, #24]	; (80162bc <inc_lock+0x118>)
 80162a2:	68fb      	ldr	r3, [r7, #12]
 80162a4:	011b      	lsls	r3, r3, #4
 80162a6:	440b      	add	r3, r1
 80162a8:	330c      	adds	r3, #12
 80162aa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80162ac:	68fb      	ldr	r3, [r7, #12]
 80162ae:	3301      	adds	r3, #1
}
 80162b0:	4618      	mov	r0, r3
 80162b2:	3714      	adds	r7, #20
 80162b4:	46bd      	mov	sp, r7
 80162b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ba:	4770      	bx	lr
 80162bc:	240016bc 	.word	0x240016bc

080162c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80162c0:	b480      	push	{r7}
 80162c2:	b085      	sub	sp, #20
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	3b01      	subs	r3, #1
 80162cc:	607b      	str	r3, [r7, #4]
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	2b01      	cmp	r3, #1
 80162d2:	d825      	bhi.n	8016320 <dec_lock+0x60>
		n = Files[i].ctr;
 80162d4:	4a17      	ldr	r2, [pc, #92]	; (8016334 <dec_lock+0x74>)
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	011b      	lsls	r3, r3, #4
 80162da:	4413      	add	r3, r2
 80162dc:	330c      	adds	r3, #12
 80162de:	881b      	ldrh	r3, [r3, #0]
 80162e0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80162e2:	89fb      	ldrh	r3, [r7, #14]
 80162e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80162e8:	d101      	bne.n	80162ee <dec_lock+0x2e>
 80162ea:	2300      	movs	r3, #0
 80162ec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80162ee:	89fb      	ldrh	r3, [r7, #14]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d002      	beq.n	80162fa <dec_lock+0x3a>
 80162f4:	89fb      	ldrh	r3, [r7, #14]
 80162f6:	3b01      	subs	r3, #1
 80162f8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80162fa:	4a0e      	ldr	r2, [pc, #56]	; (8016334 <dec_lock+0x74>)
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	011b      	lsls	r3, r3, #4
 8016300:	4413      	add	r3, r2
 8016302:	330c      	adds	r3, #12
 8016304:	89fa      	ldrh	r2, [r7, #14]
 8016306:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8016308:	89fb      	ldrh	r3, [r7, #14]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d105      	bne.n	801631a <dec_lock+0x5a>
 801630e:	4a09      	ldr	r2, [pc, #36]	; (8016334 <dec_lock+0x74>)
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	011b      	lsls	r3, r3, #4
 8016314:	4413      	add	r3, r2
 8016316:	2200      	movs	r2, #0
 8016318:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801631a:	2300      	movs	r3, #0
 801631c:	737b      	strb	r3, [r7, #13]
 801631e:	e001      	b.n	8016324 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8016320:	2302      	movs	r3, #2
 8016322:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8016324:	7b7b      	ldrb	r3, [r7, #13]
}
 8016326:	4618      	mov	r0, r3
 8016328:	3714      	adds	r7, #20
 801632a:	46bd      	mov	sp, r7
 801632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016330:	4770      	bx	lr
 8016332:	bf00      	nop
 8016334:	240016bc 	.word	0x240016bc

08016338 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8016338:	b480      	push	{r7}
 801633a:	b085      	sub	sp, #20
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8016340:	2300      	movs	r3, #0
 8016342:	60fb      	str	r3, [r7, #12]
 8016344:	e010      	b.n	8016368 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8016346:	4a0d      	ldr	r2, [pc, #52]	; (801637c <clear_lock+0x44>)
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	011b      	lsls	r3, r3, #4
 801634c:	4413      	add	r3, r2
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	687a      	ldr	r2, [r7, #4]
 8016352:	429a      	cmp	r2, r3
 8016354:	d105      	bne.n	8016362 <clear_lock+0x2a>
 8016356:	4a09      	ldr	r2, [pc, #36]	; (801637c <clear_lock+0x44>)
 8016358:	68fb      	ldr	r3, [r7, #12]
 801635a:	011b      	lsls	r3, r3, #4
 801635c:	4413      	add	r3, r2
 801635e:	2200      	movs	r2, #0
 8016360:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8016362:	68fb      	ldr	r3, [r7, #12]
 8016364:	3301      	adds	r3, #1
 8016366:	60fb      	str	r3, [r7, #12]
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	2b01      	cmp	r3, #1
 801636c:	d9eb      	bls.n	8016346 <clear_lock+0xe>
	}
}
 801636e:	bf00      	nop
 8016370:	bf00      	nop
 8016372:	3714      	adds	r7, #20
 8016374:	46bd      	mov	sp, r7
 8016376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801637a:	4770      	bx	lr
 801637c:	240016bc 	.word	0x240016bc

08016380 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b086      	sub	sp, #24
 8016384:	af00      	add	r7, sp, #0
 8016386:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8016388:	2300      	movs	r3, #0
 801638a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	78db      	ldrb	r3, [r3, #3]
 8016390:	2b00      	cmp	r3, #0
 8016392:	d034      	beq.n	80163fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016398:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	7858      	ldrb	r0, [r3, #1]
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80163a4:	2301      	movs	r3, #1
 80163a6:	697a      	ldr	r2, [r7, #20]
 80163a8:	f7ff fd40 	bl	8015e2c <disk_write>
 80163ac:	4603      	mov	r3, r0
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d002      	beq.n	80163b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80163b2:	2301      	movs	r3, #1
 80163b4:	73fb      	strb	r3, [r7, #15]
 80163b6:	e022      	b.n	80163fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	2200      	movs	r2, #0
 80163bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163c2:	697a      	ldr	r2, [r7, #20]
 80163c4:	1ad2      	subs	r2, r2, r3
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	6a1b      	ldr	r3, [r3, #32]
 80163ca:	429a      	cmp	r2, r3
 80163cc:	d217      	bcs.n	80163fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	789b      	ldrb	r3, [r3, #2]
 80163d2:	613b      	str	r3, [r7, #16]
 80163d4:	e010      	b.n	80163f8 <sync_window+0x78>
					wsect += fs->fsize;
 80163d6:	687b      	ldr	r3, [r7, #4]
 80163d8:	6a1b      	ldr	r3, [r3, #32]
 80163da:	697a      	ldr	r2, [r7, #20]
 80163dc:	4413      	add	r3, r2
 80163de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	7858      	ldrb	r0, [r3, #1]
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80163ea:	2301      	movs	r3, #1
 80163ec:	697a      	ldr	r2, [r7, #20]
 80163ee:	f7ff fd1d 	bl	8015e2c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80163f2:	693b      	ldr	r3, [r7, #16]
 80163f4:	3b01      	subs	r3, #1
 80163f6:	613b      	str	r3, [r7, #16]
 80163f8:	693b      	ldr	r3, [r7, #16]
 80163fa:	2b01      	cmp	r3, #1
 80163fc:	d8eb      	bhi.n	80163d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80163fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8016400:	4618      	mov	r0, r3
 8016402:	3718      	adds	r7, #24
 8016404:	46bd      	mov	sp, r7
 8016406:	bd80      	pop	{r7, pc}

08016408 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8016408:	b580      	push	{r7, lr}
 801640a:	b084      	sub	sp, #16
 801640c:	af00      	add	r7, sp, #0
 801640e:	6078      	str	r0, [r7, #4]
 8016410:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8016412:	2300      	movs	r3, #0
 8016414:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801641a:	683a      	ldr	r2, [r7, #0]
 801641c:	429a      	cmp	r2, r3
 801641e:	d01b      	beq.n	8016458 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8016420:	6878      	ldr	r0, [r7, #4]
 8016422:	f7ff ffad 	bl	8016380 <sync_window>
 8016426:	4603      	mov	r3, r0
 8016428:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 801642a:	7bfb      	ldrb	r3, [r7, #15]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d113      	bne.n	8016458 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8016430:	687b      	ldr	r3, [r7, #4]
 8016432:	7858      	ldrb	r0, [r3, #1]
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801643a:	2301      	movs	r3, #1
 801643c:	683a      	ldr	r2, [r7, #0]
 801643e:	f7ff fcd5 	bl	8015dec <disk_read>
 8016442:	4603      	mov	r3, r0
 8016444:	2b00      	cmp	r3, #0
 8016446:	d004      	beq.n	8016452 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8016448:	f04f 33ff 	mov.w	r3, #4294967295
 801644c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801644e:	2301      	movs	r3, #1
 8016450:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	683a      	ldr	r2, [r7, #0]
 8016456:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8016458:	7bfb      	ldrb	r3, [r7, #15]
}
 801645a:	4618      	mov	r0, r3
 801645c:	3710      	adds	r7, #16
 801645e:	46bd      	mov	sp, r7
 8016460:	bd80      	pop	{r7, pc}
	...

08016464 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8016464:	b580      	push	{r7, lr}
 8016466:	b084      	sub	sp, #16
 8016468:	af00      	add	r7, sp, #0
 801646a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801646c:	6878      	ldr	r0, [r7, #4]
 801646e:	f7ff ff87 	bl	8016380 <sync_window>
 8016472:	4603      	mov	r3, r0
 8016474:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016476:	7bfb      	ldrb	r3, [r7, #15]
 8016478:	2b00      	cmp	r3, #0
 801647a:	d159      	bne.n	8016530 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	781b      	ldrb	r3, [r3, #0]
 8016480:	2b03      	cmp	r3, #3
 8016482:	d149      	bne.n	8016518 <sync_fs+0xb4>
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	791b      	ldrb	r3, [r3, #4]
 8016488:	2b01      	cmp	r3, #1
 801648a:	d145      	bne.n	8016518 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	899b      	ldrh	r3, [r3, #12]
 8016496:	461a      	mov	r2, r3
 8016498:	2100      	movs	r1, #0
 801649a:	f7ff fda8 	bl	8015fee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	3338      	adds	r3, #56	; 0x38
 80164a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80164a6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80164aa:	4618      	mov	r0, r3
 80164ac:	f7ff fd37 	bl	8015f1e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	3338      	adds	r3, #56	; 0x38
 80164b4:	4921      	ldr	r1, [pc, #132]	; (801653c <sync_fs+0xd8>)
 80164b6:	4618      	mov	r0, r3
 80164b8:	f7ff fd4c 	bl	8015f54 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	3338      	adds	r3, #56	; 0x38
 80164c0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80164c4:	491e      	ldr	r1, [pc, #120]	; (8016540 <sync_fs+0xdc>)
 80164c6:	4618      	mov	r0, r3
 80164c8:	f7ff fd44 	bl	8015f54 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	3338      	adds	r3, #56	; 0x38
 80164d0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	699b      	ldr	r3, [r3, #24]
 80164d8:	4619      	mov	r1, r3
 80164da:	4610      	mov	r0, r2
 80164dc:	f7ff fd3a 	bl	8015f54 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80164e0:	687b      	ldr	r3, [r7, #4]
 80164e2:	3338      	adds	r3, #56	; 0x38
 80164e4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	695b      	ldr	r3, [r3, #20]
 80164ec:	4619      	mov	r1, r3
 80164ee:	4610      	mov	r0, r2
 80164f0:	f7ff fd30 	bl	8015f54 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80164f8:	1c5a      	adds	r2, r3, #1
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	7858      	ldrb	r0, [r3, #1]
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801650c:	2301      	movs	r3, #1
 801650e:	f7ff fc8d 	bl	8015e2c <disk_write>
			fs->fsi_flag = 0;
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	2200      	movs	r2, #0
 8016516:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	785b      	ldrb	r3, [r3, #1]
 801651c:	2200      	movs	r2, #0
 801651e:	2100      	movs	r1, #0
 8016520:	4618      	mov	r0, r3
 8016522:	f7ff fca3 	bl	8015e6c <disk_ioctl>
 8016526:	4603      	mov	r3, r0
 8016528:	2b00      	cmp	r3, #0
 801652a:	d001      	beq.n	8016530 <sync_fs+0xcc>
 801652c:	2301      	movs	r3, #1
 801652e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8016530:	7bfb      	ldrb	r3, [r7, #15]
}
 8016532:	4618      	mov	r0, r3
 8016534:	3710      	adds	r7, #16
 8016536:	46bd      	mov	sp, r7
 8016538:	bd80      	pop	{r7, pc}
 801653a:	bf00      	nop
 801653c:	41615252 	.word	0x41615252
 8016540:	61417272 	.word	0x61417272

08016544 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8016544:	b480      	push	{r7}
 8016546:	b083      	sub	sp, #12
 8016548:	af00      	add	r7, sp, #0
 801654a:	6078      	str	r0, [r7, #4]
 801654c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801654e:	683b      	ldr	r3, [r7, #0]
 8016550:	3b02      	subs	r3, #2
 8016552:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	69db      	ldr	r3, [r3, #28]
 8016558:	3b02      	subs	r3, #2
 801655a:	683a      	ldr	r2, [r7, #0]
 801655c:	429a      	cmp	r2, r3
 801655e:	d301      	bcc.n	8016564 <clust2sect+0x20>
 8016560:	2300      	movs	r3, #0
 8016562:	e008      	b.n	8016576 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	895b      	ldrh	r3, [r3, #10]
 8016568:	461a      	mov	r2, r3
 801656a:	683b      	ldr	r3, [r7, #0]
 801656c:	fb03 f202 	mul.w	r2, r3, r2
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016574:	4413      	add	r3, r2
}
 8016576:	4618      	mov	r0, r3
 8016578:	370c      	adds	r7, #12
 801657a:	46bd      	mov	sp, r7
 801657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016580:	4770      	bx	lr

08016582 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8016582:	b580      	push	{r7, lr}
 8016584:	b086      	sub	sp, #24
 8016586:	af00      	add	r7, sp, #0
 8016588:	6078      	str	r0, [r7, #4]
 801658a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016592:	683b      	ldr	r3, [r7, #0]
 8016594:	2b01      	cmp	r3, #1
 8016596:	d904      	bls.n	80165a2 <get_fat+0x20>
 8016598:	693b      	ldr	r3, [r7, #16]
 801659a:	69db      	ldr	r3, [r3, #28]
 801659c:	683a      	ldr	r2, [r7, #0]
 801659e:	429a      	cmp	r2, r3
 80165a0:	d302      	bcc.n	80165a8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80165a2:	2301      	movs	r3, #1
 80165a4:	617b      	str	r3, [r7, #20]
 80165a6:	e0bb      	b.n	8016720 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80165a8:	f04f 33ff 	mov.w	r3, #4294967295
 80165ac:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80165ae:	693b      	ldr	r3, [r7, #16]
 80165b0:	781b      	ldrb	r3, [r3, #0]
 80165b2:	2b03      	cmp	r3, #3
 80165b4:	f000 8083 	beq.w	80166be <get_fat+0x13c>
 80165b8:	2b03      	cmp	r3, #3
 80165ba:	f300 80a7 	bgt.w	801670c <get_fat+0x18a>
 80165be:	2b01      	cmp	r3, #1
 80165c0:	d002      	beq.n	80165c8 <get_fat+0x46>
 80165c2:	2b02      	cmp	r3, #2
 80165c4:	d056      	beq.n	8016674 <get_fat+0xf2>
 80165c6:	e0a1      	b.n	801670c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80165c8:	683b      	ldr	r3, [r7, #0]
 80165ca:	60fb      	str	r3, [r7, #12]
 80165cc:	68fb      	ldr	r3, [r7, #12]
 80165ce:	085b      	lsrs	r3, r3, #1
 80165d0:	68fa      	ldr	r2, [r7, #12]
 80165d2:	4413      	add	r3, r2
 80165d4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80165d6:	693b      	ldr	r3, [r7, #16]
 80165d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80165da:	693b      	ldr	r3, [r7, #16]
 80165dc:	899b      	ldrh	r3, [r3, #12]
 80165de:	4619      	mov	r1, r3
 80165e0:	68fb      	ldr	r3, [r7, #12]
 80165e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80165e6:	4413      	add	r3, r2
 80165e8:	4619      	mov	r1, r3
 80165ea:	6938      	ldr	r0, [r7, #16]
 80165ec:	f7ff ff0c 	bl	8016408 <move_window>
 80165f0:	4603      	mov	r3, r0
 80165f2:	2b00      	cmp	r3, #0
 80165f4:	f040 808d 	bne.w	8016712 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	1c5a      	adds	r2, r3, #1
 80165fc:	60fa      	str	r2, [r7, #12]
 80165fe:	693a      	ldr	r2, [r7, #16]
 8016600:	8992      	ldrh	r2, [r2, #12]
 8016602:	fbb3 f1f2 	udiv	r1, r3, r2
 8016606:	fb01 f202 	mul.w	r2, r1, r2
 801660a:	1a9b      	subs	r3, r3, r2
 801660c:	693a      	ldr	r2, [r7, #16]
 801660e:	4413      	add	r3, r2
 8016610:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016614:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016616:	693b      	ldr	r3, [r7, #16]
 8016618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801661a:	693b      	ldr	r3, [r7, #16]
 801661c:	899b      	ldrh	r3, [r3, #12]
 801661e:	4619      	mov	r1, r3
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	fbb3 f3f1 	udiv	r3, r3, r1
 8016626:	4413      	add	r3, r2
 8016628:	4619      	mov	r1, r3
 801662a:	6938      	ldr	r0, [r7, #16]
 801662c:	f7ff feec 	bl	8016408 <move_window>
 8016630:	4603      	mov	r3, r0
 8016632:	2b00      	cmp	r3, #0
 8016634:	d16f      	bne.n	8016716 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8016636:	693b      	ldr	r3, [r7, #16]
 8016638:	899b      	ldrh	r3, [r3, #12]
 801663a:	461a      	mov	r2, r3
 801663c:	68fb      	ldr	r3, [r7, #12]
 801663e:	fbb3 f1f2 	udiv	r1, r3, r2
 8016642:	fb01 f202 	mul.w	r2, r1, r2
 8016646:	1a9b      	subs	r3, r3, r2
 8016648:	693a      	ldr	r2, [r7, #16]
 801664a:	4413      	add	r3, r2
 801664c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8016650:	021b      	lsls	r3, r3, #8
 8016652:	461a      	mov	r2, r3
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	4313      	orrs	r3, r2
 8016658:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801665a:	683b      	ldr	r3, [r7, #0]
 801665c:	f003 0301 	and.w	r3, r3, #1
 8016660:	2b00      	cmp	r3, #0
 8016662:	d002      	beq.n	801666a <get_fat+0xe8>
 8016664:	68bb      	ldr	r3, [r7, #8]
 8016666:	091b      	lsrs	r3, r3, #4
 8016668:	e002      	b.n	8016670 <get_fat+0xee>
 801666a:	68bb      	ldr	r3, [r7, #8]
 801666c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016670:	617b      	str	r3, [r7, #20]
			break;
 8016672:	e055      	b.n	8016720 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016674:	693b      	ldr	r3, [r7, #16]
 8016676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016678:	693b      	ldr	r3, [r7, #16]
 801667a:	899b      	ldrh	r3, [r3, #12]
 801667c:	085b      	lsrs	r3, r3, #1
 801667e:	b29b      	uxth	r3, r3
 8016680:	4619      	mov	r1, r3
 8016682:	683b      	ldr	r3, [r7, #0]
 8016684:	fbb3 f3f1 	udiv	r3, r3, r1
 8016688:	4413      	add	r3, r2
 801668a:	4619      	mov	r1, r3
 801668c:	6938      	ldr	r0, [r7, #16]
 801668e:	f7ff febb 	bl	8016408 <move_window>
 8016692:	4603      	mov	r3, r0
 8016694:	2b00      	cmp	r3, #0
 8016696:	d140      	bne.n	801671a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8016698:	693b      	ldr	r3, [r7, #16]
 801669a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801669e:	683b      	ldr	r3, [r7, #0]
 80166a0:	005b      	lsls	r3, r3, #1
 80166a2:	693a      	ldr	r2, [r7, #16]
 80166a4:	8992      	ldrh	r2, [r2, #12]
 80166a6:	fbb3 f0f2 	udiv	r0, r3, r2
 80166aa:	fb00 f202 	mul.w	r2, r0, r2
 80166ae:	1a9b      	subs	r3, r3, r2
 80166b0:	440b      	add	r3, r1
 80166b2:	4618      	mov	r0, r3
 80166b4:	f7ff fbf8 	bl	8015ea8 <ld_word>
 80166b8:	4603      	mov	r3, r0
 80166ba:	617b      	str	r3, [r7, #20]
			break;
 80166bc:	e030      	b.n	8016720 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80166be:	693b      	ldr	r3, [r7, #16]
 80166c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80166c2:	693b      	ldr	r3, [r7, #16]
 80166c4:	899b      	ldrh	r3, [r3, #12]
 80166c6:	089b      	lsrs	r3, r3, #2
 80166c8:	b29b      	uxth	r3, r3
 80166ca:	4619      	mov	r1, r3
 80166cc:	683b      	ldr	r3, [r7, #0]
 80166ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80166d2:	4413      	add	r3, r2
 80166d4:	4619      	mov	r1, r3
 80166d6:	6938      	ldr	r0, [r7, #16]
 80166d8:	f7ff fe96 	bl	8016408 <move_window>
 80166dc:	4603      	mov	r3, r0
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d11d      	bne.n	801671e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80166e2:	693b      	ldr	r3, [r7, #16]
 80166e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80166e8:	683b      	ldr	r3, [r7, #0]
 80166ea:	009b      	lsls	r3, r3, #2
 80166ec:	693a      	ldr	r2, [r7, #16]
 80166ee:	8992      	ldrh	r2, [r2, #12]
 80166f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80166f4:	fb00 f202 	mul.w	r2, r0, r2
 80166f8:	1a9b      	subs	r3, r3, r2
 80166fa:	440b      	add	r3, r1
 80166fc:	4618      	mov	r0, r3
 80166fe:	f7ff fbeb 	bl	8015ed8 <ld_dword>
 8016702:	4603      	mov	r3, r0
 8016704:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8016708:	617b      	str	r3, [r7, #20]
			break;
 801670a:	e009      	b.n	8016720 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801670c:	2301      	movs	r3, #1
 801670e:	617b      	str	r3, [r7, #20]
 8016710:	e006      	b.n	8016720 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016712:	bf00      	nop
 8016714:	e004      	b.n	8016720 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016716:	bf00      	nop
 8016718:	e002      	b.n	8016720 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801671a:	bf00      	nop
 801671c:	e000      	b.n	8016720 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801671e:	bf00      	nop
		}
	}

	return val;
 8016720:	697b      	ldr	r3, [r7, #20]
}
 8016722:	4618      	mov	r0, r3
 8016724:	3718      	adds	r7, #24
 8016726:	46bd      	mov	sp, r7
 8016728:	bd80      	pop	{r7, pc}

0801672a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801672a:	b590      	push	{r4, r7, lr}
 801672c:	b089      	sub	sp, #36	; 0x24
 801672e:	af00      	add	r7, sp, #0
 8016730:	60f8      	str	r0, [r7, #12]
 8016732:	60b9      	str	r1, [r7, #8]
 8016734:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8016736:	2302      	movs	r3, #2
 8016738:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801673a:	68bb      	ldr	r3, [r7, #8]
 801673c:	2b01      	cmp	r3, #1
 801673e:	f240 8102 	bls.w	8016946 <put_fat+0x21c>
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	69db      	ldr	r3, [r3, #28]
 8016746:	68ba      	ldr	r2, [r7, #8]
 8016748:	429a      	cmp	r2, r3
 801674a:	f080 80fc 	bcs.w	8016946 <put_fat+0x21c>
		switch (fs->fs_type) {
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	781b      	ldrb	r3, [r3, #0]
 8016752:	2b03      	cmp	r3, #3
 8016754:	f000 80b6 	beq.w	80168c4 <put_fat+0x19a>
 8016758:	2b03      	cmp	r3, #3
 801675a:	f300 80fd 	bgt.w	8016958 <put_fat+0x22e>
 801675e:	2b01      	cmp	r3, #1
 8016760:	d003      	beq.n	801676a <put_fat+0x40>
 8016762:	2b02      	cmp	r3, #2
 8016764:	f000 8083 	beq.w	801686e <put_fat+0x144>
 8016768:	e0f6      	b.n	8016958 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801676a:	68bb      	ldr	r3, [r7, #8]
 801676c:	61bb      	str	r3, [r7, #24]
 801676e:	69bb      	ldr	r3, [r7, #24]
 8016770:	085b      	lsrs	r3, r3, #1
 8016772:	69ba      	ldr	r2, [r7, #24]
 8016774:	4413      	add	r3, r2
 8016776:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	899b      	ldrh	r3, [r3, #12]
 8016780:	4619      	mov	r1, r3
 8016782:	69bb      	ldr	r3, [r7, #24]
 8016784:	fbb3 f3f1 	udiv	r3, r3, r1
 8016788:	4413      	add	r3, r2
 801678a:	4619      	mov	r1, r3
 801678c:	68f8      	ldr	r0, [r7, #12]
 801678e:	f7ff fe3b 	bl	8016408 <move_window>
 8016792:	4603      	mov	r3, r0
 8016794:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016796:	7ffb      	ldrb	r3, [r7, #31]
 8016798:	2b00      	cmp	r3, #0
 801679a:	f040 80d6 	bne.w	801694a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 801679e:	68fb      	ldr	r3, [r7, #12]
 80167a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80167a4:	69bb      	ldr	r3, [r7, #24]
 80167a6:	1c5a      	adds	r2, r3, #1
 80167a8:	61ba      	str	r2, [r7, #24]
 80167aa:	68fa      	ldr	r2, [r7, #12]
 80167ac:	8992      	ldrh	r2, [r2, #12]
 80167ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80167b2:	fb00 f202 	mul.w	r2, r0, r2
 80167b6:	1a9b      	subs	r3, r3, r2
 80167b8:	440b      	add	r3, r1
 80167ba:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80167bc:	68bb      	ldr	r3, [r7, #8]
 80167be:	f003 0301 	and.w	r3, r3, #1
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	d00d      	beq.n	80167e2 <put_fat+0xb8>
 80167c6:	697b      	ldr	r3, [r7, #20]
 80167c8:	781b      	ldrb	r3, [r3, #0]
 80167ca:	b25b      	sxtb	r3, r3
 80167cc:	f003 030f 	and.w	r3, r3, #15
 80167d0:	b25a      	sxtb	r2, r3
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	b2db      	uxtb	r3, r3
 80167d6:	011b      	lsls	r3, r3, #4
 80167d8:	b25b      	sxtb	r3, r3
 80167da:	4313      	orrs	r3, r2
 80167dc:	b25b      	sxtb	r3, r3
 80167de:	b2db      	uxtb	r3, r3
 80167e0:	e001      	b.n	80167e6 <put_fat+0xbc>
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	b2db      	uxtb	r3, r3
 80167e6:	697a      	ldr	r2, [r7, #20]
 80167e8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	2201      	movs	r2, #1
 80167ee:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	899b      	ldrh	r3, [r3, #12]
 80167f8:	4619      	mov	r1, r3
 80167fa:	69bb      	ldr	r3, [r7, #24]
 80167fc:	fbb3 f3f1 	udiv	r3, r3, r1
 8016800:	4413      	add	r3, r2
 8016802:	4619      	mov	r1, r3
 8016804:	68f8      	ldr	r0, [r7, #12]
 8016806:	f7ff fdff 	bl	8016408 <move_window>
 801680a:	4603      	mov	r3, r0
 801680c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801680e:	7ffb      	ldrb	r3, [r7, #31]
 8016810:	2b00      	cmp	r3, #0
 8016812:	f040 809c 	bne.w	801694e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	899b      	ldrh	r3, [r3, #12]
 8016820:	461a      	mov	r2, r3
 8016822:	69bb      	ldr	r3, [r7, #24]
 8016824:	fbb3 f0f2 	udiv	r0, r3, r2
 8016828:	fb00 f202 	mul.w	r2, r0, r2
 801682c:	1a9b      	subs	r3, r3, r2
 801682e:	440b      	add	r3, r1
 8016830:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8016832:	68bb      	ldr	r3, [r7, #8]
 8016834:	f003 0301 	and.w	r3, r3, #1
 8016838:	2b00      	cmp	r3, #0
 801683a:	d003      	beq.n	8016844 <put_fat+0x11a>
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	091b      	lsrs	r3, r3, #4
 8016840:	b2db      	uxtb	r3, r3
 8016842:	e00e      	b.n	8016862 <put_fat+0x138>
 8016844:	697b      	ldr	r3, [r7, #20]
 8016846:	781b      	ldrb	r3, [r3, #0]
 8016848:	b25b      	sxtb	r3, r3
 801684a:	f023 030f 	bic.w	r3, r3, #15
 801684e:	b25a      	sxtb	r2, r3
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	0a1b      	lsrs	r3, r3, #8
 8016854:	b25b      	sxtb	r3, r3
 8016856:	f003 030f 	and.w	r3, r3, #15
 801685a:	b25b      	sxtb	r3, r3
 801685c:	4313      	orrs	r3, r2
 801685e:	b25b      	sxtb	r3, r3
 8016860:	b2db      	uxtb	r3, r3
 8016862:	697a      	ldr	r2, [r7, #20]
 8016864:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	2201      	movs	r2, #1
 801686a:	70da      	strb	r2, [r3, #3]
			break;
 801686c:	e074      	b.n	8016958 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	899b      	ldrh	r3, [r3, #12]
 8016876:	085b      	lsrs	r3, r3, #1
 8016878:	b29b      	uxth	r3, r3
 801687a:	4619      	mov	r1, r3
 801687c:	68bb      	ldr	r3, [r7, #8]
 801687e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016882:	4413      	add	r3, r2
 8016884:	4619      	mov	r1, r3
 8016886:	68f8      	ldr	r0, [r7, #12]
 8016888:	f7ff fdbe 	bl	8016408 <move_window>
 801688c:	4603      	mov	r3, r0
 801688e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016890:	7ffb      	ldrb	r3, [r7, #31]
 8016892:	2b00      	cmp	r3, #0
 8016894:	d15d      	bne.n	8016952 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801689c:	68bb      	ldr	r3, [r7, #8]
 801689e:	005b      	lsls	r3, r3, #1
 80168a0:	68fa      	ldr	r2, [r7, #12]
 80168a2:	8992      	ldrh	r2, [r2, #12]
 80168a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80168a8:	fb00 f202 	mul.w	r2, r0, r2
 80168ac:	1a9b      	subs	r3, r3, r2
 80168ae:	440b      	add	r3, r1
 80168b0:	687a      	ldr	r2, [r7, #4]
 80168b2:	b292      	uxth	r2, r2
 80168b4:	4611      	mov	r1, r2
 80168b6:	4618      	mov	r0, r3
 80168b8:	f7ff fb31 	bl	8015f1e <st_word>
			fs->wflag = 1;
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	2201      	movs	r2, #1
 80168c0:	70da      	strb	r2, [r3, #3]
			break;
 80168c2:	e049      	b.n	8016958 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	899b      	ldrh	r3, [r3, #12]
 80168cc:	089b      	lsrs	r3, r3, #2
 80168ce:	b29b      	uxth	r3, r3
 80168d0:	4619      	mov	r1, r3
 80168d2:	68bb      	ldr	r3, [r7, #8]
 80168d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80168d8:	4413      	add	r3, r2
 80168da:	4619      	mov	r1, r3
 80168dc:	68f8      	ldr	r0, [r7, #12]
 80168de:	f7ff fd93 	bl	8016408 <move_window>
 80168e2:	4603      	mov	r3, r0
 80168e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80168e6:	7ffb      	ldrb	r3, [r7, #31]
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d134      	bne.n	8016956 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80168f8:	68bb      	ldr	r3, [r7, #8]
 80168fa:	009b      	lsls	r3, r3, #2
 80168fc:	68fa      	ldr	r2, [r7, #12]
 80168fe:	8992      	ldrh	r2, [r2, #12]
 8016900:	fbb3 f0f2 	udiv	r0, r3, r2
 8016904:	fb00 f202 	mul.w	r2, r0, r2
 8016908:	1a9b      	subs	r3, r3, r2
 801690a:	440b      	add	r3, r1
 801690c:	4618      	mov	r0, r3
 801690e:	f7ff fae3 	bl	8015ed8 <ld_dword>
 8016912:	4603      	mov	r3, r0
 8016914:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8016918:	4323      	orrs	r3, r4
 801691a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016922:	68bb      	ldr	r3, [r7, #8]
 8016924:	009b      	lsls	r3, r3, #2
 8016926:	68fa      	ldr	r2, [r7, #12]
 8016928:	8992      	ldrh	r2, [r2, #12]
 801692a:	fbb3 f0f2 	udiv	r0, r3, r2
 801692e:	fb00 f202 	mul.w	r2, r0, r2
 8016932:	1a9b      	subs	r3, r3, r2
 8016934:	440b      	add	r3, r1
 8016936:	6879      	ldr	r1, [r7, #4]
 8016938:	4618      	mov	r0, r3
 801693a:	f7ff fb0b 	bl	8015f54 <st_dword>
			fs->wflag = 1;
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	2201      	movs	r2, #1
 8016942:	70da      	strb	r2, [r3, #3]
			break;
 8016944:	e008      	b.n	8016958 <put_fat+0x22e>
		}
	}
 8016946:	bf00      	nop
 8016948:	e006      	b.n	8016958 <put_fat+0x22e>
			if (res != FR_OK) break;
 801694a:	bf00      	nop
 801694c:	e004      	b.n	8016958 <put_fat+0x22e>
			if (res != FR_OK) break;
 801694e:	bf00      	nop
 8016950:	e002      	b.n	8016958 <put_fat+0x22e>
			if (res != FR_OK) break;
 8016952:	bf00      	nop
 8016954:	e000      	b.n	8016958 <put_fat+0x22e>
			if (res != FR_OK) break;
 8016956:	bf00      	nop
	return res;
 8016958:	7ffb      	ldrb	r3, [r7, #31]
}
 801695a:	4618      	mov	r0, r3
 801695c:	3724      	adds	r7, #36	; 0x24
 801695e:	46bd      	mov	sp, r7
 8016960:	bd90      	pop	{r4, r7, pc}

08016962 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8016962:	b580      	push	{r7, lr}
 8016964:	b088      	sub	sp, #32
 8016966:	af00      	add	r7, sp, #0
 8016968:	60f8      	str	r0, [r7, #12]
 801696a:	60b9      	str	r1, [r7, #8]
 801696c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801696e:	2300      	movs	r3, #0
 8016970:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8016978:	68bb      	ldr	r3, [r7, #8]
 801697a:	2b01      	cmp	r3, #1
 801697c:	d904      	bls.n	8016988 <remove_chain+0x26>
 801697e:	69bb      	ldr	r3, [r7, #24]
 8016980:	69db      	ldr	r3, [r3, #28]
 8016982:	68ba      	ldr	r2, [r7, #8]
 8016984:	429a      	cmp	r2, r3
 8016986:	d301      	bcc.n	801698c <remove_chain+0x2a>
 8016988:	2302      	movs	r3, #2
 801698a:	e04b      	b.n	8016a24 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801698c:	687b      	ldr	r3, [r7, #4]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d00c      	beq.n	80169ac <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8016992:	f04f 32ff 	mov.w	r2, #4294967295
 8016996:	6879      	ldr	r1, [r7, #4]
 8016998:	69b8      	ldr	r0, [r7, #24]
 801699a:	f7ff fec6 	bl	801672a <put_fat>
 801699e:	4603      	mov	r3, r0
 80169a0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80169a2:	7ffb      	ldrb	r3, [r7, #31]
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d001      	beq.n	80169ac <remove_chain+0x4a>
 80169a8:	7ffb      	ldrb	r3, [r7, #31]
 80169aa:	e03b      	b.n	8016a24 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80169ac:	68b9      	ldr	r1, [r7, #8]
 80169ae:	68f8      	ldr	r0, [r7, #12]
 80169b0:	f7ff fde7 	bl	8016582 <get_fat>
 80169b4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80169b6:	697b      	ldr	r3, [r7, #20]
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d031      	beq.n	8016a20 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80169bc:	697b      	ldr	r3, [r7, #20]
 80169be:	2b01      	cmp	r3, #1
 80169c0:	d101      	bne.n	80169c6 <remove_chain+0x64>
 80169c2:	2302      	movs	r3, #2
 80169c4:	e02e      	b.n	8016a24 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80169c6:	697b      	ldr	r3, [r7, #20]
 80169c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169cc:	d101      	bne.n	80169d2 <remove_chain+0x70>
 80169ce:	2301      	movs	r3, #1
 80169d0:	e028      	b.n	8016a24 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80169d2:	2200      	movs	r2, #0
 80169d4:	68b9      	ldr	r1, [r7, #8]
 80169d6:	69b8      	ldr	r0, [r7, #24]
 80169d8:	f7ff fea7 	bl	801672a <put_fat>
 80169dc:	4603      	mov	r3, r0
 80169de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80169e0:	7ffb      	ldrb	r3, [r7, #31]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d001      	beq.n	80169ea <remove_chain+0x88>
 80169e6:	7ffb      	ldrb	r3, [r7, #31]
 80169e8:	e01c      	b.n	8016a24 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80169ea:	69bb      	ldr	r3, [r7, #24]
 80169ec:	699a      	ldr	r2, [r3, #24]
 80169ee:	69bb      	ldr	r3, [r7, #24]
 80169f0:	69db      	ldr	r3, [r3, #28]
 80169f2:	3b02      	subs	r3, #2
 80169f4:	429a      	cmp	r2, r3
 80169f6:	d20b      	bcs.n	8016a10 <remove_chain+0xae>
			fs->free_clst++;
 80169f8:	69bb      	ldr	r3, [r7, #24]
 80169fa:	699b      	ldr	r3, [r3, #24]
 80169fc:	1c5a      	adds	r2, r3, #1
 80169fe:	69bb      	ldr	r3, [r7, #24]
 8016a00:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8016a02:	69bb      	ldr	r3, [r7, #24]
 8016a04:	791b      	ldrb	r3, [r3, #4]
 8016a06:	f043 0301 	orr.w	r3, r3, #1
 8016a0a:	b2da      	uxtb	r2, r3
 8016a0c:	69bb      	ldr	r3, [r7, #24]
 8016a0e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8016a10:	697b      	ldr	r3, [r7, #20]
 8016a12:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8016a14:	69bb      	ldr	r3, [r7, #24]
 8016a16:	69db      	ldr	r3, [r3, #28]
 8016a18:	68ba      	ldr	r2, [r7, #8]
 8016a1a:	429a      	cmp	r2, r3
 8016a1c:	d3c6      	bcc.n	80169ac <remove_chain+0x4a>
 8016a1e:	e000      	b.n	8016a22 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8016a20:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8016a22:	2300      	movs	r3, #0
}
 8016a24:	4618      	mov	r0, r3
 8016a26:	3720      	adds	r7, #32
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	bd80      	pop	{r7, pc}

08016a2c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b088      	sub	sp, #32
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
 8016a34:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	681b      	ldr	r3, [r3, #0]
 8016a3a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8016a3c:	683b      	ldr	r3, [r7, #0]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d10d      	bne.n	8016a5e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8016a42:	693b      	ldr	r3, [r7, #16]
 8016a44:	695b      	ldr	r3, [r3, #20]
 8016a46:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8016a48:	69bb      	ldr	r3, [r7, #24]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d004      	beq.n	8016a58 <create_chain+0x2c>
 8016a4e:	693b      	ldr	r3, [r7, #16]
 8016a50:	69db      	ldr	r3, [r3, #28]
 8016a52:	69ba      	ldr	r2, [r7, #24]
 8016a54:	429a      	cmp	r2, r3
 8016a56:	d31b      	bcc.n	8016a90 <create_chain+0x64>
 8016a58:	2301      	movs	r3, #1
 8016a5a:	61bb      	str	r3, [r7, #24]
 8016a5c:	e018      	b.n	8016a90 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8016a5e:	6839      	ldr	r1, [r7, #0]
 8016a60:	6878      	ldr	r0, [r7, #4]
 8016a62:	f7ff fd8e 	bl	8016582 <get_fat>
 8016a66:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8016a68:	68fb      	ldr	r3, [r7, #12]
 8016a6a:	2b01      	cmp	r3, #1
 8016a6c:	d801      	bhi.n	8016a72 <create_chain+0x46>
 8016a6e:	2301      	movs	r3, #1
 8016a70:	e070      	b.n	8016b54 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a78:	d101      	bne.n	8016a7e <create_chain+0x52>
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	e06a      	b.n	8016b54 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8016a7e:	693b      	ldr	r3, [r7, #16]
 8016a80:	69db      	ldr	r3, [r3, #28]
 8016a82:	68fa      	ldr	r2, [r7, #12]
 8016a84:	429a      	cmp	r2, r3
 8016a86:	d201      	bcs.n	8016a8c <create_chain+0x60>
 8016a88:	68fb      	ldr	r3, [r7, #12]
 8016a8a:	e063      	b.n	8016b54 <create_chain+0x128>
		scl = clst;
 8016a8c:	683b      	ldr	r3, [r7, #0]
 8016a8e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8016a90:	69bb      	ldr	r3, [r7, #24]
 8016a92:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8016a94:	69fb      	ldr	r3, [r7, #28]
 8016a96:	3301      	adds	r3, #1
 8016a98:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8016a9a:	693b      	ldr	r3, [r7, #16]
 8016a9c:	69db      	ldr	r3, [r3, #28]
 8016a9e:	69fa      	ldr	r2, [r7, #28]
 8016aa0:	429a      	cmp	r2, r3
 8016aa2:	d307      	bcc.n	8016ab4 <create_chain+0x88>
				ncl = 2;
 8016aa4:	2302      	movs	r3, #2
 8016aa6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8016aa8:	69fa      	ldr	r2, [r7, #28]
 8016aaa:	69bb      	ldr	r3, [r7, #24]
 8016aac:	429a      	cmp	r2, r3
 8016aae:	d901      	bls.n	8016ab4 <create_chain+0x88>
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	e04f      	b.n	8016b54 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8016ab4:	69f9      	ldr	r1, [r7, #28]
 8016ab6:	6878      	ldr	r0, [r7, #4]
 8016ab8:	f7ff fd63 	bl	8016582 <get_fat>
 8016abc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8016abe:	68fb      	ldr	r3, [r7, #12]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d00e      	beq.n	8016ae2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8016ac4:	68fb      	ldr	r3, [r7, #12]
 8016ac6:	2b01      	cmp	r3, #1
 8016ac8:	d003      	beq.n	8016ad2 <create_chain+0xa6>
 8016aca:	68fb      	ldr	r3, [r7, #12]
 8016acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ad0:	d101      	bne.n	8016ad6 <create_chain+0xaa>
 8016ad2:	68fb      	ldr	r3, [r7, #12]
 8016ad4:	e03e      	b.n	8016b54 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8016ad6:	69fa      	ldr	r2, [r7, #28]
 8016ad8:	69bb      	ldr	r3, [r7, #24]
 8016ada:	429a      	cmp	r2, r3
 8016adc:	d1da      	bne.n	8016a94 <create_chain+0x68>
 8016ade:	2300      	movs	r3, #0
 8016ae0:	e038      	b.n	8016b54 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8016ae2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8016ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8016ae8:	69f9      	ldr	r1, [r7, #28]
 8016aea:	6938      	ldr	r0, [r7, #16]
 8016aec:	f7ff fe1d 	bl	801672a <put_fat>
 8016af0:	4603      	mov	r3, r0
 8016af2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8016af4:	7dfb      	ldrb	r3, [r7, #23]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d109      	bne.n	8016b0e <create_chain+0xe2>
 8016afa:	683b      	ldr	r3, [r7, #0]
 8016afc:	2b00      	cmp	r3, #0
 8016afe:	d006      	beq.n	8016b0e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8016b00:	69fa      	ldr	r2, [r7, #28]
 8016b02:	6839      	ldr	r1, [r7, #0]
 8016b04:	6938      	ldr	r0, [r7, #16]
 8016b06:	f7ff fe10 	bl	801672a <put_fat>
 8016b0a:	4603      	mov	r3, r0
 8016b0c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8016b0e:	7dfb      	ldrb	r3, [r7, #23]
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d116      	bne.n	8016b42 <create_chain+0x116>
		fs->last_clst = ncl;
 8016b14:	693b      	ldr	r3, [r7, #16]
 8016b16:	69fa      	ldr	r2, [r7, #28]
 8016b18:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8016b1a:	693b      	ldr	r3, [r7, #16]
 8016b1c:	699a      	ldr	r2, [r3, #24]
 8016b1e:	693b      	ldr	r3, [r7, #16]
 8016b20:	69db      	ldr	r3, [r3, #28]
 8016b22:	3b02      	subs	r3, #2
 8016b24:	429a      	cmp	r2, r3
 8016b26:	d804      	bhi.n	8016b32 <create_chain+0x106>
 8016b28:	693b      	ldr	r3, [r7, #16]
 8016b2a:	699b      	ldr	r3, [r3, #24]
 8016b2c:	1e5a      	subs	r2, r3, #1
 8016b2e:	693b      	ldr	r3, [r7, #16]
 8016b30:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8016b32:	693b      	ldr	r3, [r7, #16]
 8016b34:	791b      	ldrb	r3, [r3, #4]
 8016b36:	f043 0301 	orr.w	r3, r3, #1
 8016b3a:	b2da      	uxtb	r2, r3
 8016b3c:	693b      	ldr	r3, [r7, #16]
 8016b3e:	711a      	strb	r2, [r3, #4]
 8016b40:	e007      	b.n	8016b52 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8016b42:	7dfb      	ldrb	r3, [r7, #23]
 8016b44:	2b01      	cmp	r3, #1
 8016b46:	d102      	bne.n	8016b4e <create_chain+0x122>
 8016b48:	f04f 33ff 	mov.w	r3, #4294967295
 8016b4c:	e000      	b.n	8016b50 <create_chain+0x124>
 8016b4e:	2301      	movs	r3, #1
 8016b50:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8016b52:	69fb      	ldr	r3, [r7, #28]
}
 8016b54:	4618      	mov	r0, r3
 8016b56:	3720      	adds	r7, #32
 8016b58:	46bd      	mov	sp, r7
 8016b5a:	bd80      	pop	{r7, pc}

08016b5c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8016b5c:	b480      	push	{r7}
 8016b5e:	b087      	sub	sp, #28
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
 8016b64:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b70:	3304      	adds	r3, #4
 8016b72:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8016b74:	68fb      	ldr	r3, [r7, #12]
 8016b76:	899b      	ldrh	r3, [r3, #12]
 8016b78:	461a      	mov	r2, r3
 8016b7a:	683b      	ldr	r3, [r7, #0]
 8016b7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8016b80:	68fa      	ldr	r2, [r7, #12]
 8016b82:	8952      	ldrh	r2, [r2, #10]
 8016b84:	fbb3 f3f2 	udiv	r3, r3, r2
 8016b88:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016b8a:	693b      	ldr	r3, [r7, #16]
 8016b8c:	1d1a      	adds	r2, r3, #4
 8016b8e:	613a      	str	r2, [r7, #16]
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8016b94:	68bb      	ldr	r3, [r7, #8]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d101      	bne.n	8016b9e <clmt_clust+0x42>
 8016b9a:	2300      	movs	r3, #0
 8016b9c:	e010      	b.n	8016bc0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8016b9e:	697a      	ldr	r2, [r7, #20]
 8016ba0:	68bb      	ldr	r3, [r7, #8]
 8016ba2:	429a      	cmp	r2, r3
 8016ba4:	d307      	bcc.n	8016bb6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8016ba6:	697a      	ldr	r2, [r7, #20]
 8016ba8:	68bb      	ldr	r3, [r7, #8]
 8016baa:	1ad3      	subs	r3, r2, r3
 8016bac:	617b      	str	r3, [r7, #20]
 8016bae:	693b      	ldr	r3, [r7, #16]
 8016bb0:	3304      	adds	r3, #4
 8016bb2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8016bb4:	e7e9      	b.n	8016b8a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8016bb6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8016bb8:	693b      	ldr	r3, [r7, #16]
 8016bba:	681a      	ldr	r2, [r3, #0]
 8016bbc:	697b      	ldr	r3, [r7, #20]
 8016bbe:	4413      	add	r3, r2
}
 8016bc0:	4618      	mov	r0, r3
 8016bc2:	371c      	adds	r7, #28
 8016bc4:	46bd      	mov	sp, r7
 8016bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bca:	4770      	bx	lr

08016bcc <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8016bcc:	b580      	push	{r7, lr}
 8016bce:	b086      	sub	sp, #24
 8016bd0:	af00      	add	r7, sp, #0
 8016bd2:	6078      	str	r0, [r7, #4]
 8016bd4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8016bdc:	683b      	ldr	r3, [r7, #0]
 8016bde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016be2:	d204      	bcs.n	8016bee <dir_sdi+0x22>
 8016be4:	683b      	ldr	r3, [r7, #0]
 8016be6:	f003 031f 	and.w	r3, r3, #31
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d001      	beq.n	8016bf2 <dir_sdi+0x26>
		return FR_INT_ERR;
 8016bee:	2302      	movs	r3, #2
 8016bf0:	e071      	b.n	8016cd6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	683a      	ldr	r2, [r7, #0]
 8016bf6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	689b      	ldr	r3, [r3, #8]
 8016bfc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8016bfe:	697b      	ldr	r3, [r7, #20]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d106      	bne.n	8016c12 <dir_sdi+0x46>
 8016c04:	693b      	ldr	r3, [r7, #16]
 8016c06:	781b      	ldrb	r3, [r3, #0]
 8016c08:	2b02      	cmp	r3, #2
 8016c0a:	d902      	bls.n	8016c12 <dir_sdi+0x46>
		clst = fs->dirbase;
 8016c0c:	693b      	ldr	r3, [r7, #16]
 8016c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c10:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8016c12:	697b      	ldr	r3, [r7, #20]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d10c      	bne.n	8016c32 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8016c18:	683b      	ldr	r3, [r7, #0]
 8016c1a:	095b      	lsrs	r3, r3, #5
 8016c1c:	693a      	ldr	r2, [r7, #16]
 8016c1e:	8912      	ldrh	r2, [r2, #8]
 8016c20:	4293      	cmp	r3, r2
 8016c22:	d301      	bcc.n	8016c28 <dir_sdi+0x5c>
 8016c24:	2302      	movs	r3, #2
 8016c26:	e056      	b.n	8016cd6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8016c28:	693b      	ldr	r3, [r7, #16]
 8016c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	61da      	str	r2, [r3, #28]
 8016c30:	e02d      	b.n	8016c8e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8016c32:	693b      	ldr	r3, [r7, #16]
 8016c34:	895b      	ldrh	r3, [r3, #10]
 8016c36:	461a      	mov	r2, r3
 8016c38:	693b      	ldr	r3, [r7, #16]
 8016c3a:	899b      	ldrh	r3, [r3, #12]
 8016c3c:	fb02 f303 	mul.w	r3, r2, r3
 8016c40:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016c42:	e019      	b.n	8016c78 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	6979      	ldr	r1, [r7, #20]
 8016c48:	4618      	mov	r0, r3
 8016c4a:	f7ff fc9a 	bl	8016582 <get_fat>
 8016c4e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016c50:	697b      	ldr	r3, [r7, #20]
 8016c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c56:	d101      	bne.n	8016c5c <dir_sdi+0x90>
 8016c58:	2301      	movs	r3, #1
 8016c5a:	e03c      	b.n	8016cd6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8016c5c:	697b      	ldr	r3, [r7, #20]
 8016c5e:	2b01      	cmp	r3, #1
 8016c60:	d904      	bls.n	8016c6c <dir_sdi+0xa0>
 8016c62:	693b      	ldr	r3, [r7, #16]
 8016c64:	69db      	ldr	r3, [r3, #28]
 8016c66:	697a      	ldr	r2, [r7, #20]
 8016c68:	429a      	cmp	r2, r3
 8016c6a:	d301      	bcc.n	8016c70 <dir_sdi+0xa4>
 8016c6c:	2302      	movs	r3, #2
 8016c6e:	e032      	b.n	8016cd6 <dir_sdi+0x10a>
			ofs -= csz;
 8016c70:	683a      	ldr	r2, [r7, #0]
 8016c72:	68fb      	ldr	r3, [r7, #12]
 8016c74:	1ad3      	subs	r3, r2, r3
 8016c76:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8016c78:	683a      	ldr	r2, [r7, #0]
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	429a      	cmp	r2, r3
 8016c7e:	d2e1      	bcs.n	8016c44 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8016c80:	6979      	ldr	r1, [r7, #20]
 8016c82:	6938      	ldr	r0, [r7, #16]
 8016c84:	f7ff fc5e 	bl	8016544 <clust2sect>
 8016c88:	4602      	mov	r2, r0
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	697a      	ldr	r2, [r7, #20]
 8016c92:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	69db      	ldr	r3, [r3, #28]
 8016c98:	2b00      	cmp	r3, #0
 8016c9a:	d101      	bne.n	8016ca0 <dir_sdi+0xd4>
 8016c9c:	2302      	movs	r3, #2
 8016c9e:	e01a      	b.n	8016cd6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8016ca0:	687b      	ldr	r3, [r7, #4]
 8016ca2:	69da      	ldr	r2, [r3, #28]
 8016ca4:	693b      	ldr	r3, [r7, #16]
 8016ca6:	899b      	ldrh	r3, [r3, #12]
 8016ca8:	4619      	mov	r1, r3
 8016caa:	683b      	ldr	r3, [r7, #0]
 8016cac:	fbb3 f3f1 	udiv	r3, r3, r1
 8016cb0:	441a      	add	r2, r3
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8016cb6:	693b      	ldr	r3, [r7, #16]
 8016cb8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016cbc:	693b      	ldr	r3, [r7, #16]
 8016cbe:	899b      	ldrh	r3, [r3, #12]
 8016cc0:	461a      	mov	r2, r3
 8016cc2:	683b      	ldr	r3, [r7, #0]
 8016cc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8016cc8:	fb00 f202 	mul.w	r2, r0, r2
 8016ccc:	1a9b      	subs	r3, r3, r2
 8016cce:	18ca      	adds	r2, r1, r3
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8016cd4:	2300      	movs	r3, #0
}
 8016cd6:	4618      	mov	r0, r3
 8016cd8:	3718      	adds	r7, #24
 8016cda:	46bd      	mov	sp, r7
 8016cdc:	bd80      	pop	{r7, pc}

08016cde <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8016cde:	b580      	push	{r7, lr}
 8016ce0:	b086      	sub	sp, #24
 8016ce2:	af00      	add	r7, sp, #0
 8016ce4:	6078      	str	r0, [r7, #4]
 8016ce6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	695b      	ldr	r3, [r3, #20]
 8016cf2:	3320      	adds	r3, #32
 8016cf4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	69db      	ldr	r3, [r3, #28]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d003      	beq.n	8016d06 <dir_next+0x28>
 8016cfe:	68bb      	ldr	r3, [r7, #8]
 8016d00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016d04:	d301      	bcc.n	8016d0a <dir_next+0x2c>
 8016d06:	2304      	movs	r3, #4
 8016d08:	e0bb      	b.n	8016e82 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8016d0a:	68fb      	ldr	r3, [r7, #12]
 8016d0c:	899b      	ldrh	r3, [r3, #12]
 8016d0e:	461a      	mov	r2, r3
 8016d10:	68bb      	ldr	r3, [r7, #8]
 8016d12:	fbb3 f1f2 	udiv	r1, r3, r2
 8016d16:	fb01 f202 	mul.w	r2, r1, r2
 8016d1a:	1a9b      	subs	r3, r3, r2
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	f040 809d 	bne.w	8016e5c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	69db      	ldr	r3, [r3, #28]
 8016d26:	1c5a      	adds	r2, r3, #1
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	699b      	ldr	r3, [r3, #24]
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d10b      	bne.n	8016d4c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8016d34:	68bb      	ldr	r3, [r7, #8]
 8016d36:	095b      	lsrs	r3, r3, #5
 8016d38:	68fa      	ldr	r2, [r7, #12]
 8016d3a:	8912      	ldrh	r2, [r2, #8]
 8016d3c:	4293      	cmp	r3, r2
 8016d3e:	f0c0 808d 	bcc.w	8016e5c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	2200      	movs	r2, #0
 8016d46:	61da      	str	r2, [r3, #28]
 8016d48:	2304      	movs	r3, #4
 8016d4a:	e09a      	b.n	8016e82 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	899b      	ldrh	r3, [r3, #12]
 8016d50:	461a      	mov	r2, r3
 8016d52:	68bb      	ldr	r3, [r7, #8]
 8016d54:	fbb3 f3f2 	udiv	r3, r3, r2
 8016d58:	68fa      	ldr	r2, [r7, #12]
 8016d5a:	8952      	ldrh	r2, [r2, #10]
 8016d5c:	3a01      	subs	r2, #1
 8016d5e:	4013      	ands	r3, r2
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d17b      	bne.n	8016e5c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8016d64:	687a      	ldr	r2, [r7, #4]
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	699b      	ldr	r3, [r3, #24]
 8016d6a:	4619      	mov	r1, r3
 8016d6c:	4610      	mov	r0, r2
 8016d6e:	f7ff fc08 	bl	8016582 <get_fat>
 8016d72:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8016d74:	697b      	ldr	r3, [r7, #20]
 8016d76:	2b01      	cmp	r3, #1
 8016d78:	d801      	bhi.n	8016d7e <dir_next+0xa0>
 8016d7a:	2302      	movs	r3, #2
 8016d7c:	e081      	b.n	8016e82 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8016d7e:	697b      	ldr	r3, [r7, #20]
 8016d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d84:	d101      	bne.n	8016d8a <dir_next+0xac>
 8016d86:	2301      	movs	r3, #1
 8016d88:	e07b      	b.n	8016e82 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8016d8a:	68fb      	ldr	r3, [r7, #12]
 8016d8c:	69db      	ldr	r3, [r3, #28]
 8016d8e:	697a      	ldr	r2, [r7, #20]
 8016d90:	429a      	cmp	r2, r3
 8016d92:	d359      	bcc.n	8016e48 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8016d94:	683b      	ldr	r3, [r7, #0]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d104      	bne.n	8016da4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	2200      	movs	r2, #0
 8016d9e:	61da      	str	r2, [r3, #28]
 8016da0:	2304      	movs	r3, #4
 8016da2:	e06e      	b.n	8016e82 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8016da4:	687a      	ldr	r2, [r7, #4]
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	699b      	ldr	r3, [r3, #24]
 8016daa:	4619      	mov	r1, r3
 8016dac:	4610      	mov	r0, r2
 8016dae:	f7ff fe3d 	bl	8016a2c <create_chain>
 8016db2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8016db4:	697b      	ldr	r3, [r7, #20]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d101      	bne.n	8016dbe <dir_next+0xe0>
 8016dba:	2307      	movs	r3, #7
 8016dbc:	e061      	b.n	8016e82 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8016dbe:	697b      	ldr	r3, [r7, #20]
 8016dc0:	2b01      	cmp	r3, #1
 8016dc2:	d101      	bne.n	8016dc8 <dir_next+0xea>
 8016dc4:	2302      	movs	r3, #2
 8016dc6:	e05c      	b.n	8016e82 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8016dc8:	697b      	ldr	r3, [r7, #20]
 8016dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016dce:	d101      	bne.n	8016dd4 <dir_next+0xf6>
 8016dd0:	2301      	movs	r3, #1
 8016dd2:	e056      	b.n	8016e82 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8016dd4:	68f8      	ldr	r0, [r7, #12]
 8016dd6:	f7ff fad3 	bl	8016380 <sync_window>
 8016dda:	4603      	mov	r3, r0
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d001      	beq.n	8016de4 <dir_next+0x106>
 8016de0:	2301      	movs	r3, #1
 8016de2:	e04e      	b.n	8016e82 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	899b      	ldrh	r3, [r3, #12]
 8016dee:	461a      	mov	r2, r3
 8016df0:	2100      	movs	r1, #0
 8016df2:	f7ff f8fc 	bl	8015fee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016df6:	2300      	movs	r3, #0
 8016df8:	613b      	str	r3, [r7, #16]
 8016dfa:	6979      	ldr	r1, [r7, #20]
 8016dfc:	68f8      	ldr	r0, [r7, #12]
 8016dfe:	f7ff fba1 	bl	8016544 <clust2sect>
 8016e02:	4602      	mov	r2, r0
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	635a      	str	r2, [r3, #52]	; 0x34
 8016e08:	e012      	b.n	8016e30 <dir_next+0x152>
						fs->wflag = 1;
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	2201      	movs	r2, #1
 8016e0e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8016e10:	68f8      	ldr	r0, [r7, #12]
 8016e12:	f7ff fab5 	bl	8016380 <sync_window>
 8016e16:	4603      	mov	r3, r0
 8016e18:	2b00      	cmp	r3, #0
 8016e1a:	d001      	beq.n	8016e20 <dir_next+0x142>
 8016e1c:	2301      	movs	r3, #1
 8016e1e:	e030      	b.n	8016e82 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8016e20:	693b      	ldr	r3, [r7, #16]
 8016e22:	3301      	adds	r3, #1
 8016e24:	613b      	str	r3, [r7, #16]
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016e2a:	1c5a      	adds	r2, r3, #1
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	635a      	str	r2, [r3, #52]	; 0x34
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	895b      	ldrh	r3, [r3, #10]
 8016e34:	461a      	mov	r2, r3
 8016e36:	693b      	ldr	r3, [r7, #16]
 8016e38:	4293      	cmp	r3, r2
 8016e3a:	d3e6      	bcc.n	8016e0a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8016e3c:	68fb      	ldr	r3, [r7, #12]
 8016e3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016e40:	693b      	ldr	r3, [r7, #16]
 8016e42:	1ad2      	subs	r2, r2, r3
 8016e44:	68fb      	ldr	r3, [r7, #12]
 8016e46:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	697a      	ldr	r2, [r7, #20]
 8016e4c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8016e4e:	6979      	ldr	r1, [r7, #20]
 8016e50:	68f8      	ldr	r0, [r7, #12]
 8016e52:	f7ff fb77 	bl	8016544 <clust2sect>
 8016e56:	4602      	mov	r2, r0
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	68ba      	ldr	r2, [r7, #8]
 8016e60:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8016e68:	68fb      	ldr	r3, [r7, #12]
 8016e6a:	899b      	ldrh	r3, [r3, #12]
 8016e6c:	461a      	mov	r2, r3
 8016e6e:	68bb      	ldr	r3, [r7, #8]
 8016e70:	fbb3 f0f2 	udiv	r0, r3, r2
 8016e74:	fb00 f202 	mul.w	r2, r0, r2
 8016e78:	1a9b      	subs	r3, r3, r2
 8016e7a:	18ca      	adds	r2, r1, r3
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8016e80:	2300      	movs	r3, #0
}
 8016e82:	4618      	mov	r0, r3
 8016e84:	3718      	adds	r7, #24
 8016e86:	46bd      	mov	sp, r7
 8016e88:	bd80      	pop	{r7, pc}

08016e8a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8016e8a:	b580      	push	{r7, lr}
 8016e8c:	b086      	sub	sp, #24
 8016e8e:	af00      	add	r7, sp, #0
 8016e90:	6078      	str	r0, [r7, #4]
 8016e92:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8016e9a:	2100      	movs	r1, #0
 8016e9c:	6878      	ldr	r0, [r7, #4]
 8016e9e:	f7ff fe95 	bl	8016bcc <dir_sdi>
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8016ea6:	7dfb      	ldrb	r3, [r7, #23]
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d12b      	bne.n	8016f04 <dir_alloc+0x7a>
		n = 0;
 8016eac:	2300      	movs	r3, #0
 8016eae:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	69db      	ldr	r3, [r3, #28]
 8016eb4:	4619      	mov	r1, r3
 8016eb6:	68f8      	ldr	r0, [r7, #12]
 8016eb8:	f7ff faa6 	bl	8016408 <move_window>
 8016ebc:	4603      	mov	r3, r0
 8016ebe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8016ec0:	7dfb      	ldrb	r3, [r7, #23]
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d11d      	bne.n	8016f02 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	6a1b      	ldr	r3, [r3, #32]
 8016eca:	781b      	ldrb	r3, [r3, #0]
 8016ecc:	2be5      	cmp	r3, #229	; 0xe5
 8016ece:	d004      	beq.n	8016eda <dir_alloc+0x50>
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	6a1b      	ldr	r3, [r3, #32]
 8016ed4:	781b      	ldrb	r3, [r3, #0]
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d107      	bne.n	8016eea <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8016eda:	693b      	ldr	r3, [r7, #16]
 8016edc:	3301      	adds	r3, #1
 8016ede:	613b      	str	r3, [r7, #16]
 8016ee0:	693a      	ldr	r2, [r7, #16]
 8016ee2:	683b      	ldr	r3, [r7, #0]
 8016ee4:	429a      	cmp	r2, r3
 8016ee6:	d102      	bne.n	8016eee <dir_alloc+0x64>
 8016ee8:	e00c      	b.n	8016f04 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8016eea:	2300      	movs	r3, #0
 8016eec:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8016eee:	2101      	movs	r1, #1
 8016ef0:	6878      	ldr	r0, [r7, #4]
 8016ef2:	f7ff fef4 	bl	8016cde <dir_next>
 8016ef6:	4603      	mov	r3, r0
 8016ef8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8016efa:	7dfb      	ldrb	r3, [r7, #23]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d0d7      	beq.n	8016eb0 <dir_alloc+0x26>
 8016f00:	e000      	b.n	8016f04 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8016f02:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8016f04:	7dfb      	ldrb	r3, [r7, #23]
 8016f06:	2b04      	cmp	r3, #4
 8016f08:	d101      	bne.n	8016f0e <dir_alloc+0x84>
 8016f0a:	2307      	movs	r3, #7
 8016f0c:	75fb      	strb	r3, [r7, #23]
	return res;
 8016f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8016f10:	4618      	mov	r0, r3
 8016f12:	3718      	adds	r7, #24
 8016f14:	46bd      	mov	sp, r7
 8016f16:	bd80      	pop	{r7, pc}

08016f18 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8016f18:	b580      	push	{r7, lr}
 8016f1a:	b084      	sub	sp, #16
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	6078      	str	r0, [r7, #4]
 8016f20:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8016f22:	683b      	ldr	r3, [r7, #0]
 8016f24:	331a      	adds	r3, #26
 8016f26:	4618      	mov	r0, r3
 8016f28:	f7fe ffbe 	bl	8015ea8 <ld_word>
 8016f2c:	4603      	mov	r3, r0
 8016f2e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	781b      	ldrb	r3, [r3, #0]
 8016f34:	2b03      	cmp	r3, #3
 8016f36:	d109      	bne.n	8016f4c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8016f38:	683b      	ldr	r3, [r7, #0]
 8016f3a:	3314      	adds	r3, #20
 8016f3c:	4618      	mov	r0, r3
 8016f3e:	f7fe ffb3 	bl	8015ea8 <ld_word>
 8016f42:	4603      	mov	r3, r0
 8016f44:	041b      	lsls	r3, r3, #16
 8016f46:	68fa      	ldr	r2, [r7, #12]
 8016f48:	4313      	orrs	r3, r2
 8016f4a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8016f4c:	68fb      	ldr	r3, [r7, #12]
}
 8016f4e:	4618      	mov	r0, r3
 8016f50:	3710      	adds	r7, #16
 8016f52:	46bd      	mov	sp, r7
 8016f54:	bd80      	pop	{r7, pc}

08016f56 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8016f56:	b580      	push	{r7, lr}
 8016f58:	b084      	sub	sp, #16
 8016f5a:	af00      	add	r7, sp, #0
 8016f5c:	60f8      	str	r0, [r7, #12]
 8016f5e:	60b9      	str	r1, [r7, #8]
 8016f60:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8016f62:	68bb      	ldr	r3, [r7, #8]
 8016f64:	331a      	adds	r3, #26
 8016f66:	687a      	ldr	r2, [r7, #4]
 8016f68:	b292      	uxth	r2, r2
 8016f6a:	4611      	mov	r1, r2
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	f7fe ffd6 	bl	8015f1e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	781b      	ldrb	r3, [r3, #0]
 8016f76:	2b03      	cmp	r3, #3
 8016f78:	d109      	bne.n	8016f8e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8016f7a:	68bb      	ldr	r3, [r7, #8]
 8016f7c:	f103 0214 	add.w	r2, r3, #20
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	0c1b      	lsrs	r3, r3, #16
 8016f84:	b29b      	uxth	r3, r3
 8016f86:	4619      	mov	r1, r3
 8016f88:	4610      	mov	r0, r2
 8016f8a:	f7fe ffc8 	bl	8015f1e <st_word>
	}
}
 8016f8e:	bf00      	nop
 8016f90:	3710      	adds	r7, #16
 8016f92:	46bd      	mov	sp, r7
 8016f94:	bd80      	pop	{r7, pc}
	...

08016f98 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8016f98:	b590      	push	{r4, r7, lr}
 8016f9a:	b087      	sub	sp, #28
 8016f9c:	af00      	add	r7, sp, #0
 8016f9e:	6078      	str	r0, [r7, #4]
 8016fa0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8016fa2:	683b      	ldr	r3, [r7, #0]
 8016fa4:	331a      	adds	r3, #26
 8016fa6:	4618      	mov	r0, r3
 8016fa8:	f7fe ff7e 	bl	8015ea8 <ld_word>
 8016fac:	4603      	mov	r3, r0
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d001      	beq.n	8016fb6 <cmp_lfn+0x1e>
 8016fb2:	2300      	movs	r3, #0
 8016fb4:	e059      	b.n	801706a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8016fb6:	683b      	ldr	r3, [r7, #0]
 8016fb8:	781b      	ldrb	r3, [r3, #0]
 8016fba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016fbe:	1e5a      	subs	r2, r3, #1
 8016fc0:	4613      	mov	r3, r2
 8016fc2:	005b      	lsls	r3, r3, #1
 8016fc4:	4413      	add	r3, r2
 8016fc6:	009b      	lsls	r3, r3, #2
 8016fc8:	4413      	add	r3, r2
 8016fca:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8016fcc:	2301      	movs	r3, #1
 8016fce:	81fb      	strh	r3, [r7, #14]
 8016fd0:	2300      	movs	r3, #0
 8016fd2:	613b      	str	r3, [r7, #16]
 8016fd4:	e033      	b.n	801703e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8016fd6:	4a27      	ldr	r2, [pc, #156]	; (8017074 <cmp_lfn+0xdc>)
 8016fd8:	693b      	ldr	r3, [r7, #16]
 8016fda:	4413      	add	r3, r2
 8016fdc:	781b      	ldrb	r3, [r3, #0]
 8016fde:	461a      	mov	r2, r3
 8016fe0:	683b      	ldr	r3, [r7, #0]
 8016fe2:	4413      	add	r3, r2
 8016fe4:	4618      	mov	r0, r3
 8016fe6:	f7fe ff5f 	bl	8015ea8 <ld_word>
 8016fea:	4603      	mov	r3, r0
 8016fec:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8016fee:	89fb      	ldrh	r3, [r7, #14]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d01a      	beq.n	801702a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8016ff4:	697b      	ldr	r3, [r7, #20]
 8016ff6:	2bfe      	cmp	r3, #254	; 0xfe
 8016ff8:	d812      	bhi.n	8017020 <cmp_lfn+0x88>
 8016ffa:	89bb      	ldrh	r3, [r7, #12]
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	f001 fe11 	bl	8018c24 <ff_wtoupper>
 8017002:	4603      	mov	r3, r0
 8017004:	461c      	mov	r4, r3
 8017006:	697b      	ldr	r3, [r7, #20]
 8017008:	1c5a      	adds	r2, r3, #1
 801700a:	617a      	str	r2, [r7, #20]
 801700c:	005b      	lsls	r3, r3, #1
 801700e:	687a      	ldr	r2, [r7, #4]
 8017010:	4413      	add	r3, r2
 8017012:	881b      	ldrh	r3, [r3, #0]
 8017014:	4618      	mov	r0, r3
 8017016:	f001 fe05 	bl	8018c24 <ff_wtoupper>
 801701a:	4603      	mov	r3, r0
 801701c:	429c      	cmp	r4, r3
 801701e:	d001      	beq.n	8017024 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8017020:	2300      	movs	r3, #0
 8017022:	e022      	b.n	801706a <cmp_lfn+0xd2>
			}
			wc = uc;
 8017024:	89bb      	ldrh	r3, [r7, #12]
 8017026:	81fb      	strh	r3, [r7, #14]
 8017028:	e006      	b.n	8017038 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801702a:	89bb      	ldrh	r3, [r7, #12]
 801702c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017030:	4293      	cmp	r3, r2
 8017032:	d001      	beq.n	8017038 <cmp_lfn+0xa0>
 8017034:	2300      	movs	r3, #0
 8017036:	e018      	b.n	801706a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8017038:	693b      	ldr	r3, [r7, #16]
 801703a:	3301      	adds	r3, #1
 801703c:	613b      	str	r3, [r7, #16]
 801703e:	693b      	ldr	r3, [r7, #16]
 8017040:	2b0c      	cmp	r3, #12
 8017042:	d9c8      	bls.n	8016fd6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8017044:	683b      	ldr	r3, [r7, #0]
 8017046:	781b      	ldrb	r3, [r3, #0]
 8017048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801704c:	2b00      	cmp	r3, #0
 801704e:	d00b      	beq.n	8017068 <cmp_lfn+0xd0>
 8017050:	89fb      	ldrh	r3, [r7, #14]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d008      	beq.n	8017068 <cmp_lfn+0xd0>
 8017056:	697b      	ldr	r3, [r7, #20]
 8017058:	005b      	lsls	r3, r3, #1
 801705a:	687a      	ldr	r2, [r7, #4]
 801705c:	4413      	add	r3, r2
 801705e:	881b      	ldrh	r3, [r3, #0]
 8017060:	2b00      	cmp	r3, #0
 8017062:	d001      	beq.n	8017068 <cmp_lfn+0xd0>
 8017064:	2300      	movs	r3, #0
 8017066:	e000      	b.n	801706a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8017068:	2301      	movs	r3, #1
}
 801706a:	4618      	mov	r0, r3
 801706c:	371c      	adds	r7, #28
 801706e:	46bd      	mov	sp, r7
 8017070:	bd90      	pop	{r4, r7, pc}
 8017072:	bf00      	nop
 8017074:	0801e0ec 	.word	0x0801e0ec

08017078 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8017078:	b580      	push	{r7, lr}
 801707a:	b088      	sub	sp, #32
 801707c:	af00      	add	r7, sp, #0
 801707e:	60f8      	str	r0, [r7, #12]
 8017080:	60b9      	str	r1, [r7, #8]
 8017082:	4611      	mov	r1, r2
 8017084:	461a      	mov	r2, r3
 8017086:	460b      	mov	r3, r1
 8017088:	71fb      	strb	r3, [r7, #7]
 801708a:	4613      	mov	r3, r2
 801708c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801708e:	68bb      	ldr	r3, [r7, #8]
 8017090:	330d      	adds	r3, #13
 8017092:	79ba      	ldrb	r2, [r7, #6]
 8017094:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8017096:	68bb      	ldr	r3, [r7, #8]
 8017098:	330b      	adds	r3, #11
 801709a:	220f      	movs	r2, #15
 801709c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801709e:	68bb      	ldr	r3, [r7, #8]
 80170a0:	330c      	adds	r3, #12
 80170a2:	2200      	movs	r2, #0
 80170a4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80170a6:	68bb      	ldr	r3, [r7, #8]
 80170a8:	331a      	adds	r3, #26
 80170aa:	2100      	movs	r1, #0
 80170ac:	4618      	mov	r0, r3
 80170ae:	f7fe ff36 	bl	8015f1e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80170b2:	79fb      	ldrb	r3, [r7, #7]
 80170b4:	1e5a      	subs	r2, r3, #1
 80170b6:	4613      	mov	r3, r2
 80170b8:	005b      	lsls	r3, r3, #1
 80170ba:	4413      	add	r3, r2
 80170bc:	009b      	lsls	r3, r3, #2
 80170be:	4413      	add	r3, r2
 80170c0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80170c2:	2300      	movs	r3, #0
 80170c4:	82fb      	strh	r3, [r7, #22]
 80170c6:	2300      	movs	r3, #0
 80170c8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80170ca:	8afb      	ldrh	r3, [r7, #22]
 80170cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80170d0:	4293      	cmp	r3, r2
 80170d2:	d007      	beq.n	80170e4 <put_lfn+0x6c>
 80170d4:	69fb      	ldr	r3, [r7, #28]
 80170d6:	1c5a      	adds	r2, r3, #1
 80170d8:	61fa      	str	r2, [r7, #28]
 80170da:	005b      	lsls	r3, r3, #1
 80170dc:	68fa      	ldr	r2, [r7, #12]
 80170de:	4413      	add	r3, r2
 80170e0:	881b      	ldrh	r3, [r3, #0]
 80170e2:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80170e4:	4a17      	ldr	r2, [pc, #92]	; (8017144 <put_lfn+0xcc>)
 80170e6:	69bb      	ldr	r3, [r7, #24]
 80170e8:	4413      	add	r3, r2
 80170ea:	781b      	ldrb	r3, [r3, #0]
 80170ec:	461a      	mov	r2, r3
 80170ee:	68bb      	ldr	r3, [r7, #8]
 80170f0:	4413      	add	r3, r2
 80170f2:	8afa      	ldrh	r2, [r7, #22]
 80170f4:	4611      	mov	r1, r2
 80170f6:	4618      	mov	r0, r3
 80170f8:	f7fe ff11 	bl	8015f1e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80170fc:	8afb      	ldrh	r3, [r7, #22]
 80170fe:	2b00      	cmp	r3, #0
 8017100:	d102      	bne.n	8017108 <put_lfn+0x90>
 8017102:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017106:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8017108:	69bb      	ldr	r3, [r7, #24]
 801710a:	3301      	adds	r3, #1
 801710c:	61bb      	str	r3, [r7, #24]
 801710e:	69bb      	ldr	r3, [r7, #24]
 8017110:	2b0c      	cmp	r3, #12
 8017112:	d9da      	bls.n	80170ca <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8017114:	8afb      	ldrh	r3, [r7, #22]
 8017116:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801711a:	4293      	cmp	r3, r2
 801711c:	d006      	beq.n	801712c <put_lfn+0xb4>
 801711e:	69fb      	ldr	r3, [r7, #28]
 8017120:	005b      	lsls	r3, r3, #1
 8017122:	68fa      	ldr	r2, [r7, #12]
 8017124:	4413      	add	r3, r2
 8017126:	881b      	ldrh	r3, [r3, #0]
 8017128:	2b00      	cmp	r3, #0
 801712a:	d103      	bne.n	8017134 <put_lfn+0xbc>
 801712c:	79fb      	ldrb	r3, [r7, #7]
 801712e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017132:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8017134:	68bb      	ldr	r3, [r7, #8]
 8017136:	79fa      	ldrb	r2, [r7, #7]
 8017138:	701a      	strb	r2, [r3, #0]
}
 801713a:	bf00      	nop
 801713c:	3720      	adds	r7, #32
 801713e:	46bd      	mov	sp, r7
 8017140:	bd80      	pop	{r7, pc}
 8017142:	bf00      	nop
 8017144:	0801e0ec 	.word	0x0801e0ec

08017148 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8017148:	b580      	push	{r7, lr}
 801714a:	b08c      	sub	sp, #48	; 0x30
 801714c:	af00      	add	r7, sp, #0
 801714e:	60f8      	str	r0, [r7, #12]
 8017150:	60b9      	str	r1, [r7, #8]
 8017152:	607a      	str	r2, [r7, #4]
 8017154:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8017156:	220b      	movs	r2, #11
 8017158:	68b9      	ldr	r1, [r7, #8]
 801715a:	68f8      	ldr	r0, [r7, #12]
 801715c:	f7fe ff26 	bl	8015fac <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8017160:	683b      	ldr	r3, [r7, #0]
 8017162:	2b05      	cmp	r3, #5
 8017164:	d929      	bls.n	80171ba <gen_numname+0x72>
		sr = seq;
 8017166:	683b      	ldr	r3, [r7, #0]
 8017168:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801716a:	e020      	b.n	80171ae <gen_numname+0x66>
			wc = *lfn++;
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	1c9a      	adds	r2, r3, #2
 8017170:	607a      	str	r2, [r7, #4]
 8017172:	881b      	ldrh	r3, [r3, #0]
 8017174:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8017176:	2300      	movs	r3, #0
 8017178:	62bb      	str	r3, [r7, #40]	; 0x28
 801717a:	e015      	b.n	80171a8 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 801717c:	69fb      	ldr	r3, [r7, #28]
 801717e:	005a      	lsls	r2, r3, #1
 8017180:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017182:	f003 0301 	and.w	r3, r3, #1
 8017186:	4413      	add	r3, r2
 8017188:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801718a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801718c:	085b      	lsrs	r3, r3, #1
 801718e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8017190:	69fb      	ldr	r3, [r7, #28]
 8017192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017196:	2b00      	cmp	r3, #0
 8017198:	d003      	beq.n	80171a2 <gen_numname+0x5a>
 801719a:	69fa      	ldr	r2, [r7, #28]
 801719c:	4b30      	ldr	r3, [pc, #192]	; (8017260 <gen_numname+0x118>)
 801719e:	4053      	eors	r3, r2
 80171a0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80171a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171a4:	3301      	adds	r3, #1
 80171a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80171a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171aa:	2b0f      	cmp	r3, #15
 80171ac:	d9e6      	bls.n	801717c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	881b      	ldrh	r3, [r3, #0]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d1da      	bne.n	801716c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80171b6:	69fb      	ldr	r3, [r7, #28]
 80171b8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80171ba:	2307      	movs	r3, #7
 80171bc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80171be:	683b      	ldr	r3, [r7, #0]
 80171c0:	b2db      	uxtb	r3, r3
 80171c2:	f003 030f 	and.w	r3, r3, #15
 80171c6:	b2db      	uxtb	r3, r3
 80171c8:	3330      	adds	r3, #48	; 0x30
 80171ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80171ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80171d2:	2b39      	cmp	r3, #57	; 0x39
 80171d4:	d904      	bls.n	80171e0 <gen_numname+0x98>
 80171d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80171da:	3307      	adds	r3, #7
 80171dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80171e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171e2:	1e5a      	subs	r2, r3, #1
 80171e4:	62ba      	str	r2, [r7, #40]	; 0x28
 80171e6:	3330      	adds	r3, #48	; 0x30
 80171e8:	443b      	add	r3, r7
 80171ea:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80171ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80171f2:	683b      	ldr	r3, [r7, #0]
 80171f4:	091b      	lsrs	r3, r3, #4
 80171f6:	603b      	str	r3, [r7, #0]
	} while (seq);
 80171f8:	683b      	ldr	r3, [r7, #0]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d1df      	bne.n	80171be <gen_numname+0x76>
	ns[i] = '~';
 80171fe:	f107 0214 	add.w	r2, r7, #20
 8017202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017204:	4413      	add	r3, r2
 8017206:	227e      	movs	r2, #126	; 0x7e
 8017208:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801720a:	2300      	movs	r3, #0
 801720c:	627b      	str	r3, [r7, #36]	; 0x24
 801720e:	e002      	b.n	8017216 <gen_numname+0xce>
 8017210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017212:	3301      	adds	r3, #1
 8017214:	627b      	str	r3, [r7, #36]	; 0x24
 8017216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801721a:	429a      	cmp	r2, r3
 801721c:	d205      	bcs.n	801722a <gen_numname+0xe2>
 801721e:	68fa      	ldr	r2, [r7, #12]
 8017220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017222:	4413      	add	r3, r2
 8017224:	781b      	ldrb	r3, [r3, #0]
 8017226:	2b20      	cmp	r3, #32
 8017228:	d1f2      	bne.n	8017210 <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801722a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801722c:	2b07      	cmp	r3, #7
 801722e:	d807      	bhi.n	8017240 <gen_numname+0xf8>
 8017230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017232:	1c5a      	adds	r2, r3, #1
 8017234:	62ba      	str	r2, [r7, #40]	; 0x28
 8017236:	3330      	adds	r3, #48	; 0x30
 8017238:	443b      	add	r3, r7
 801723a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801723e:	e000      	b.n	8017242 <gen_numname+0xfa>
 8017240:	2120      	movs	r1, #32
 8017242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017244:	1c5a      	adds	r2, r3, #1
 8017246:	627a      	str	r2, [r7, #36]	; 0x24
 8017248:	68fa      	ldr	r2, [r7, #12]
 801724a:	4413      	add	r3, r2
 801724c:	460a      	mov	r2, r1
 801724e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8017250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017252:	2b07      	cmp	r3, #7
 8017254:	d9e9      	bls.n	801722a <gen_numname+0xe2>
}
 8017256:	bf00      	nop
 8017258:	bf00      	nop
 801725a:	3730      	adds	r7, #48	; 0x30
 801725c:	46bd      	mov	sp, r7
 801725e:	bd80      	pop	{r7, pc}
 8017260:	00011021 	.word	0x00011021

08017264 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8017264:	b480      	push	{r7}
 8017266:	b085      	sub	sp, #20
 8017268:	af00      	add	r7, sp, #0
 801726a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 801726c:	2300      	movs	r3, #0
 801726e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8017270:	230b      	movs	r3, #11
 8017272:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8017274:	7bfb      	ldrb	r3, [r7, #15]
 8017276:	b2da      	uxtb	r2, r3
 8017278:	0852      	lsrs	r2, r2, #1
 801727a:	01db      	lsls	r3, r3, #7
 801727c:	4313      	orrs	r3, r2
 801727e:	b2da      	uxtb	r2, r3
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	1c59      	adds	r1, r3, #1
 8017284:	6079      	str	r1, [r7, #4]
 8017286:	781b      	ldrb	r3, [r3, #0]
 8017288:	4413      	add	r3, r2
 801728a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 801728c:	68bb      	ldr	r3, [r7, #8]
 801728e:	3b01      	subs	r3, #1
 8017290:	60bb      	str	r3, [r7, #8]
 8017292:	68bb      	ldr	r3, [r7, #8]
 8017294:	2b00      	cmp	r3, #0
 8017296:	d1ed      	bne.n	8017274 <sum_sfn+0x10>
	return sum;
 8017298:	7bfb      	ldrb	r3, [r7, #15]
}
 801729a:	4618      	mov	r0, r3
 801729c:	3714      	adds	r7, #20
 801729e:	46bd      	mov	sp, r7
 80172a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172a4:	4770      	bx	lr

080172a6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80172a6:	b580      	push	{r7, lr}
 80172a8:	b086      	sub	sp, #24
 80172aa:	af00      	add	r7, sp, #0
 80172ac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80172b4:	2100      	movs	r1, #0
 80172b6:	6878      	ldr	r0, [r7, #4]
 80172b8:	f7ff fc88 	bl	8016bcc <dir_sdi>
 80172bc:	4603      	mov	r3, r0
 80172be:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80172c0:	7dfb      	ldrb	r3, [r7, #23]
 80172c2:	2b00      	cmp	r3, #0
 80172c4:	d001      	beq.n	80172ca <dir_find+0x24>
 80172c6:	7dfb      	ldrb	r3, [r7, #23]
 80172c8:	e0a9      	b.n	801741e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80172ca:	23ff      	movs	r3, #255	; 0xff
 80172cc:	753b      	strb	r3, [r7, #20]
 80172ce:	7d3b      	ldrb	r3, [r7, #20]
 80172d0:	757b      	strb	r3, [r7, #21]
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	f04f 32ff 	mov.w	r2, #4294967295
 80172d8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	69db      	ldr	r3, [r3, #28]
 80172de:	4619      	mov	r1, r3
 80172e0:	6938      	ldr	r0, [r7, #16]
 80172e2:	f7ff f891 	bl	8016408 <move_window>
 80172e6:	4603      	mov	r3, r0
 80172e8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80172ea:	7dfb      	ldrb	r3, [r7, #23]
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	f040 8090 	bne.w	8017412 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	6a1b      	ldr	r3, [r3, #32]
 80172f6:	781b      	ldrb	r3, [r3, #0]
 80172f8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80172fa:	7dbb      	ldrb	r3, [r7, #22]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d102      	bne.n	8017306 <dir_find+0x60>
 8017300:	2304      	movs	r3, #4
 8017302:	75fb      	strb	r3, [r7, #23]
 8017304:	e08a      	b.n	801741c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	6a1b      	ldr	r3, [r3, #32]
 801730a:	330b      	adds	r3, #11
 801730c:	781b      	ldrb	r3, [r3, #0]
 801730e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017312:	73fb      	strb	r3, [r7, #15]
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	7bfa      	ldrb	r2, [r7, #15]
 8017318:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801731a:	7dbb      	ldrb	r3, [r7, #22]
 801731c:	2be5      	cmp	r3, #229	; 0xe5
 801731e:	d007      	beq.n	8017330 <dir_find+0x8a>
 8017320:	7bfb      	ldrb	r3, [r7, #15]
 8017322:	f003 0308 	and.w	r3, r3, #8
 8017326:	2b00      	cmp	r3, #0
 8017328:	d009      	beq.n	801733e <dir_find+0x98>
 801732a:	7bfb      	ldrb	r3, [r7, #15]
 801732c:	2b0f      	cmp	r3, #15
 801732e:	d006      	beq.n	801733e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8017330:	23ff      	movs	r3, #255	; 0xff
 8017332:	757b      	strb	r3, [r7, #21]
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	f04f 32ff 	mov.w	r2, #4294967295
 801733a:	631a      	str	r2, [r3, #48]	; 0x30
 801733c:	e05e      	b.n	80173fc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 801733e:	7bfb      	ldrb	r3, [r7, #15]
 8017340:	2b0f      	cmp	r3, #15
 8017342:	d136      	bne.n	80173b2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801734a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801734e:	2b00      	cmp	r3, #0
 8017350:	d154      	bne.n	80173fc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8017352:	7dbb      	ldrb	r3, [r7, #22]
 8017354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017358:	2b00      	cmp	r3, #0
 801735a:	d00d      	beq.n	8017378 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	6a1b      	ldr	r3, [r3, #32]
 8017360:	7b5b      	ldrb	r3, [r3, #13]
 8017362:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8017364:	7dbb      	ldrb	r3, [r7, #22]
 8017366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801736a:	75bb      	strb	r3, [r7, #22]
 801736c:	7dbb      	ldrb	r3, [r7, #22]
 801736e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	695a      	ldr	r2, [r3, #20]
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8017378:	7dba      	ldrb	r2, [r7, #22]
 801737a:	7d7b      	ldrb	r3, [r7, #21]
 801737c:	429a      	cmp	r2, r3
 801737e:	d115      	bne.n	80173ac <dir_find+0x106>
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	6a1b      	ldr	r3, [r3, #32]
 8017384:	330d      	adds	r3, #13
 8017386:	781b      	ldrb	r3, [r3, #0]
 8017388:	7d3a      	ldrb	r2, [r7, #20]
 801738a:	429a      	cmp	r2, r3
 801738c:	d10e      	bne.n	80173ac <dir_find+0x106>
 801738e:	693b      	ldr	r3, [r7, #16]
 8017390:	691a      	ldr	r2, [r3, #16]
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	6a1b      	ldr	r3, [r3, #32]
 8017396:	4619      	mov	r1, r3
 8017398:	4610      	mov	r0, r2
 801739a:	f7ff fdfd 	bl	8016f98 <cmp_lfn>
 801739e:	4603      	mov	r3, r0
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d003      	beq.n	80173ac <dir_find+0x106>
 80173a4:	7d7b      	ldrb	r3, [r7, #21]
 80173a6:	3b01      	subs	r3, #1
 80173a8:	b2db      	uxtb	r3, r3
 80173aa:	e000      	b.n	80173ae <dir_find+0x108>
 80173ac:	23ff      	movs	r3, #255	; 0xff
 80173ae:	757b      	strb	r3, [r7, #21]
 80173b0:	e024      	b.n	80173fc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80173b2:	7d7b      	ldrb	r3, [r7, #21]
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d109      	bne.n	80173cc <dir_find+0x126>
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	6a1b      	ldr	r3, [r3, #32]
 80173bc:	4618      	mov	r0, r3
 80173be:	f7ff ff51 	bl	8017264 <sum_sfn>
 80173c2:	4603      	mov	r3, r0
 80173c4:	461a      	mov	r2, r3
 80173c6:	7d3b      	ldrb	r3, [r7, #20]
 80173c8:	4293      	cmp	r3, r2
 80173ca:	d024      	beq.n	8017416 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80173d2:	f003 0301 	and.w	r3, r3, #1
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d10a      	bne.n	80173f0 <dir_find+0x14a>
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	6a18      	ldr	r0, [r3, #32]
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	3324      	adds	r3, #36	; 0x24
 80173e2:	220b      	movs	r2, #11
 80173e4:	4619      	mov	r1, r3
 80173e6:	f7fe fe1d 	bl	8016024 <mem_cmp>
 80173ea:	4603      	mov	r3, r0
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	d014      	beq.n	801741a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80173f0:	23ff      	movs	r3, #255	; 0xff
 80173f2:	757b      	strb	r3, [r7, #21]
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	f04f 32ff 	mov.w	r2, #4294967295
 80173fa:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80173fc:	2100      	movs	r1, #0
 80173fe:	6878      	ldr	r0, [r7, #4]
 8017400:	f7ff fc6d 	bl	8016cde <dir_next>
 8017404:	4603      	mov	r3, r0
 8017406:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8017408:	7dfb      	ldrb	r3, [r7, #23]
 801740a:	2b00      	cmp	r3, #0
 801740c:	f43f af65 	beq.w	80172da <dir_find+0x34>
 8017410:	e004      	b.n	801741c <dir_find+0x176>
		if (res != FR_OK) break;
 8017412:	bf00      	nop
 8017414:	e002      	b.n	801741c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8017416:	bf00      	nop
 8017418:	e000      	b.n	801741c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801741a:	bf00      	nop

	return res;
 801741c:	7dfb      	ldrb	r3, [r7, #23]
}
 801741e:	4618      	mov	r0, r3
 8017420:	3718      	adds	r7, #24
 8017422:	46bd      	mov	sp, r7
 8017424:	bd80      	pop	{r7, pc}
	...

08017428 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8017428:	b580      	push	{r7, lr}
 801742a:	b08c      	sub	sp, #48	; 0x30
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801743c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8017440:	2b00      	cmp	r3, #0
 8017442:	d001      	beq.n	8017448 <dir_register+0x20>
 8017444:	2306      	movs	r3, #6
 8017446:	e0e0      	b.n	801760a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8017448:	2300      	movs	r3, #0
 801744a:	627b      	str	r3, [r7, #36]	; 0x24
 801744c:	e002      	b.n	8017454 <dir_register+0x2c>
 801744e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017450:	3301      	adds	r3, #1
 8017452:	627b      	str	r3, [r7, #36]	; 0x24
 8017454:	69fb      	ldr	r3, [r7, #28]
 8017456:	691a      	ldr	r2, [r3, #16]
 8017458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801745a:	005b      	lsls	r3, r3, #1
 801745c:	4413      	add	r3, r2
 801745e:	881b      	ldrh	r3, [r3, #0]
 8017460:	2b00      	cmp	r3, #0
 8017462:	d1f4      	bne.n	801744e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8017464:	687b      	ldr	r3, [r7, #4]
 8017466:	f103 0124 	add.w	r1, r3, #36	; 0x24
 801746a:	f107 030c 	add.w	r3, r7, #12
 801746e:	220c      	movs	r2, #12
 8017470:	4618      	mov	r0, r3
 8017472:	f7fe fd9b 	bl	8015fac <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8017476:	7dfb      	ldrb	r3, [r7, #23]
 8017478:	f003 0301 	and.w	r3, r3, #1
 801747c:	2b00      	cmp	r3, #0
 801747e:	d032      	beq.n	80174e6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	2240      	movs	r2, #64	; 0x40
 8017484:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8017488:	2301      	movs	r3, #1
 801748a:	62bb      	str	r3, [r7, #40]	; 0x28
 801748c:	e016      	b.n	80174bc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8017494:	69fb      	ldr	r3, [r7, #28]
 8017496:	691a      	ldr	r2, [r3, #16]
 8017498:	f107 010c 	add.w	r1, r7, #12
 801749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801749e:	f7ff fe53 	bl	8017148 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80174a2:	6878      	ldr	r0, [r7, #4]
 80174a4:	f7ff feff 	bl	80172a6 <dir_find>
 80174a8:	4603      	mov	r3, r0
 80174aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80174ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d106      	bne.n	80174c4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80174b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174b8:	3301      	adds	r3, #1
 80174ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80174bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174be:	2b63      	cmp	r3, #99	; 0x63
 80174c0:	d9e5      	bls.n	801748e <dir_register+0x66>
 80174c2:	e000      	b.n	80174c6 <dir_register+0x9e>
			if (res != FR_OK) break;
 80174c4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80174c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174c8:	2b64      	cmp	r3, #100	; 0x64
 80174ca:	d101      	bne.n	80174d0 <dir_register+0xa8>
 80174cc:	2307      	movs	r3, #7
 80174ce:	e09c      	b.n	801760a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80174d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80174d4:	2b04      	cmp	r3, #4
 80174d6:	d002      	beq.n	80174de <dir_register+0xb6>
 80174d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80174dc:	e095      	b.n	801760a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80174de:	7dfa      	ldrb	r2, [r7, #23]
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80174e6:	7dfb      	ldrb	r3, [r7, #23]
 80174e8:	f003 0302 	and.w	r3, r3, #2
 80174ec:	2b00      	cmp	r3, #0
 80174ee:	d007      	beq.n	8017500 <dir_register+0xd8>
 80174f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174f2:	330c      	adds	r3, #12
 80174f4:	4a47      	ldr	r2, [pc, #284]	; (8017614 <dir_register+0x1ec>)
 80174f6:	fba2 2303 	umull	r2, r3, r2, r3
 80174fa:	089b      	lsrs	r3, r3, #2
 80174fc:	3301      	adds	r3, #1
 80174fe:	e000      	b.n	8017502 <dir_register+0xda>
 8017500:	2301      	movs	r3, #1
 8017502:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8017504:	6a39      	ldr	r1, [r7, #32]
 8017506:	6878      	ldr	r0, [r7, #4]
 8017508:	f7ff fcbf 	bl	8016e8a <dir_alloc>
 801750c:	4603      	mov	r3, r0
 801750e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8017512:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017516:	2b00      	cmp	r3, #0
 8017518:	d148      	bne.n	80175ac <dir_register+0x184>
 801751a:	6a3b      	ldr	r3, [r7, #32]
 801751c:	3b01      	subs	r3, #1
 801751e:	623b      	str	r3, [r7, #32]
 8017520:	6a3b      	ldr	r3, [r7, #32]
 8017522:	2b00      	cmp	r3, #0
 8017524:	d042      	beq.n	80175ac <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	695a      	ldr	r2, [r3, #20]
 801752a:	6a3b      	ldr	r3, [r7, #32]
 801752c:	015b      	lsls	r3, r3, #5
 801752e:	1ad3      	subs	r3, r2, r3
 8017530:	4619      	mov	r1, r3
 8017532:	6878      	ldr	r0, [r7, #4]
 8017534:	f7ff fb4a 	bl	8016bcc <dir_sdi>
 8017538:	4603      	mov	r3, r0
 801753a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801753e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017542:	2b00      	cmp	r3, #0
 8017544:	d132      	bne.n	80175ac <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	3324      	adds	r3, #36	; 0x24
 801754a:	4618      	mov	r0, r3
 801754c:	f7ff fe8a 	bl	8017264 <sum_sfn>
 8017550:	4603      	mov	r3, r0
 8017552:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	69db      	ldr	r3, [r3, #28]
 8017558:	4619      	mov	r1, r3
 801755a:	69f8      	ldr	r0, [r7, #28]
 801755c:	f7fe ff54 	bl	8016408 <move_window>
 8017560:	4603      	mov	r3, r0
 8017562:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8017566:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801756a:	2b00      	cmp	r3, #0
 801756c:	d11d      	bne.n	80175aa <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801756e:	69fb      	ldr	r3, [r7, #28]
 8017570:	6918      	ldr	r0, [r3, #16]
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	6a19      	ldr	r1, [r3, #32]
 8017576:	6a3b      	ldr	r3, [r7, #32]
 8017578:	b2da      	uxtb	r2, r3
 801757a:	7efb      	ldrb	r3, [r7, #27]
 801757c:	f7ff fd7c 	bl	8017078 <put_lfn>
				fs->wflag = 1;
 8017580:	69fb      	ldr	r3, [r7, #28]
 8017582:	2201      	movs	r2, #1
 8017584:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8017586:	2100      	movs	r1, #0
 8017588:	6878      	ldr	r0, [r7, #4]
 801758a:	f7ff fba8 	bl	8016cde <dir_next>
 801758e:	4603      	mov	r3, r0
 8017590:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8017594:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8017598:	2b00      	cmp	r3, #0
 801759a:	d107      	bne.n	80175ac <dir_register+0x184>
 801759c:	6a3b      	ldr	r3, [r7, #32]
 801759e:	3b01      	subs	r3, #1
 80175a0:	623b      	str	r3, [r7, #32]
 80175a2:	6a3b      	ldr	r3, [r7, #32]
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	d1d5      	bne.n	8017554 <dir_register+0x12c>
 80175a8:	e000      	b.n	80175ac <dir_register+0x184>
				if (res != FR_OK) break;
 80175aa:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80175ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d128      	bne.n	8017606 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	69db      	ldr	r3, [r3, #28]
 80175b8:	4619      	mov	r1, r3
 80175ba:	69f8      	ldr	r0, [r7, #28]
 80175bc:	f7fe ff24 	bl	8016408 <move_window>
 80175c0:	4603      	mov	r3, r0
 80175c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80175c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	d11b      	bne.n	8017606 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	6a1b      	ldr	r3, [r3, #32]
 80175d2:	2220      	movs	r2, #32
 80175d4:	2100      	movs	r1, #0
 80175d6:	4618      	mov	r0, r3
 80175d8:	f7fe fd09 	bl	8015fee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	6a18      	ldr	r0, [r3, #32]
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	3324      	adds	r3, #36	; 0x24
 80175e4:	220b      	movs	r2, #11
 80175e6:	4619      	mov	r1, r3
 80175e8:	f7fe fce0 	bl	8015fac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	6a1b      	ldr	r3, [r3, #32]
 80175f6:	330c      	adds	r3, #12
 80175f8:	f002 0218 	and.w	r2, r2, #24
 80175fc:	b2d2      	uxtb	r2, r2
 80175fe:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8017600:	69fb      	ldr	r3, [r7, #28]
 8017602:	2201      	movs	r2, #1
 8017604:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8017606:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801760a:	4618      	mov	r0, r3
 801760c:	3730      	adds	r7, #48	; 0x30
 801760e:	46bd      	mov	sp, r7
 8017610:	bd80      	pop	{r7, pc}
 8017612:	bf00      	nop
 8017614:	4ec4ec4f 	.word	0x4ec4ec4f

08017618 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8017618:	b580      	push	{r7, lr}
 801761a:	b08a      	sub	sp, #40	; 0x28
 801761c:	af00      	add	r7, sp, #0
 801761e:	6078      	str	r0, [r7, #4]
 8017620:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8017622:	683b      	ldr	r3, [r7, #0]
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	613b      	str	r3, [r7, #16]
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	691b      	ldr	r3, [r3, #16]
 801762e:	60fb      	str	r3, [r7, #12]
 8017630:	2300      	movs	r3, #0
 8017632:	617b      	str	r3, [r7, #20]
 8017634:	697b      	ldr	r3, [r7, #20]
 8017636:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8017638:	69bb      	ldr	r3, [r7, #24]
 801763a:	1c5a      	adds	r2, r3, #1
 801763c:	61ba      	str	r2, [r7, #24]
 801763e:	693a      	ldr	r2, [r7, #16]
 8017640:	4413      	add	r3, r2
 8017642:	781b      	ldrb	r3, [r3, #0]
 8017644:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8017646:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017648:	2b1f      	cmp	r3, #31
 801764a:	d940      	bls.n	80176ce <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801764c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801764e:	2b2f      	cmp	r3, #47	; 0x2f
 8017650:	d006      	beq.n	8017660 <create_name+0x48>
 8017652:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017654:	2b5c      	cmp	r3, #92	; 0x5c
 8017656:	d110      	bne.n	801767a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8017658:	e002      	b.n	8017660 <create_name+0x48>
 801765a:	69bb      	ldr	r3, [r7, #24]
 801765c:	3301      	adds	r3, #1
 801765e:	61bb      	str	r3, [r7, #24]
 8017660:	693a      	ldr	r2, [r7, #16]
 8017662:	69bb      	ldr	r3, [r7, #24]
 8017664:	4413      	add	r3, r2
 8017666:	781b      	ldrb	r3, [r3, #0]
 8017668:	2b2f      	cmp	r3, #47	; 0x2f
 801766a:	d0f6      	beq.n	801765a <create_name+0x42>
 801766c:	693a      	ldr	r2, [r7, #16]
 801766e:	69bb      	ldr	r3, [r7, #24]
 8017670:	4413      	add	r3, r2
 8017672:	781b      	ldrb	r3, [r3, #0]
 8017674:	2b5c      	cmp	r3, #92	; 0x5c
 8017676:	d0f0      	beq.n	801765a <create_name+0x42>
			break;
 8017678:	e02a      	b.n	80176d0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801767a:	697b      	ldr	r3, [r7, #20]
 801767c:	2bfe      	cmp	r3, #254	; 0xfe
 801767e:	d901      	bls.n	8017684 <create_name+0x6c>
 8017680:	2306      	movs	r3, #6
 8017682:	e17d      	b.n	8017980 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8017684:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017686:	b2db      	uxtb	r3, r3
 8017688:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801768a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801768c:	2101      	movs	r1, #1
 801768e:	4618      	mov	r0, r3
 8017690:	f001 fa8c 	bl	8018bac <ff_convert>
 8017694:	4603      	mov	r3, r0
 8017696:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8017698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801769a:	2b00      	cmp	r3, #0
 801769c:	d101      	bne.n	80176a2 <create_name+0x8a>
 801769e:	2306      	movs	r3, #6
 80176a0:	e16e      	b.n	8017980 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80176a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80176a4:	2b7f      	cmp	r3, #127	; 0x7f
 80176a6:	d809      	bhi.n	80176bc <create_name+0xa4>
 80176a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80176aa:	4619      	mov	r1, r3
 80176ac:	488d      	ldr	r0, [pc, #564]	; (80178e4 <create_name+0x2cc>)
 80176ae:	f7fe fce0 	bl	8016072 <chk_chr>
 80176b2:	4603      	mov	r3, r0
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d001      	beq.n	80176bc <create_name+0xa4>
 80176b8:	2306      	movs	r3, #6
 80176ba:	e161      	b.n	8017980 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80176bc:	697b      	ldr	r3, [r7, #20]
 80176be:	1c5a      	adds	r2, r3, #1
 80176c0:	617a      	str	r2, [r7, #20]
 80176c2:	005b      	lsls	r3, r3, #1
 80176c4:	68fa      	ldr	r2, [r7, #12]
 80176c6:	4413      	add	r3, r2
 80176c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80176ca:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80176cc:	e7b4      	b.n	8017638 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80176ce:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80176d0:	693a      	ldr	r2, [r7, #16]
 80176d2:	69bb      	ldr	r3, [r7, #24]
 80176d4:	441a      	add	r2, r3
 80176d6:	683b      	ldr	r3, [r7, #0]
 80176d8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80176da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80176dc:	2b1f      	cmp	r3, #31
 80176de:	d801      	bhi.n	80176e4 <create_name+0xcc>
 80176e0:	2304      	movs	r3, #4
 80176e2:	e000      	b.n	80176e6 <create_name+0xce>
 80176e4:	2300      	movs	r3, #0
 80176e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80176ea:	e011      	b.n	8017710 <create_name+0xf8>
		w = lfn[di - 1];
 80176ec:	697a      	ldr	r2, [r7, #20]
 80176ee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80176f2:	4413      	add	r3, r2
 80176f4:	005b      	lsls	r3, r3, #1
 80176f6:	68fa      	ldr	r2, [r7, #12]
 80176f8:	4413      	add	r3, r2
 80176fa:	881b      	ldrh	r3, [r3, #0]
 80176fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80176fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017700:	2b20      	cmp	r3, #32
 8017702:	d002      	beq.n	801770a <create_name+0xf2>
 8017704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017706:	2b2e      	cmp	r3, #46	; 0x2e
 8017708:	d106      	bne.n	8017718 <create_name+0x100>
		di--;
 801770a:	697b      	ldr	r3, [r7, #20]
 801770c:	3b01      	subs	r3, #1
 801770e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8017710:	697b      	ldr	r3, [r7, #20]
 8017712:	2b00      	cmp	r3, #0
 8017714:	d1ea      	bne.n	80176ec <create_name+0xd4>
 8017716:	e000      	b.n	801771a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8017718:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801771a:	697b      	ldr	r3, [r7, #20]
 801771c:	005b      	lsls	r3, r3, #1
 801771e:	68fa      	ldr	r2, [r7, #12]
 8017720:	4413      	add	r3, r2
 8017722:	2200      	movs	r2, #0
 8017724:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8017726:	697b      	ldr	r3, [r7, #20]
 8017728:	2b00      	cmp	r3, #0
 801772a:	d101      	bne.n	8017730 <create_name+0x118>
 801772c:	2306      	movs	r3, #6
 801772e:	e127      	b.n	8017980 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	3324      	adds	r3, #36	; 0x24
 8017734:	220b      	movs	r2, #11
 8017736:	2120      	movs	r1, #32
 8017738:	4618      	mov	r0, r3
 801773a:	f7fe fc58 	bl	8015fee <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801773e:	2300      	movs	r3, #0
 8017740:	61bb      	str	r3, [r7, #24]
 8017742:	e002      	b.n	801774a <create_name+0x132>
 8017744:	69bb      	ldr	r3, [r7, #24]
 8017746:	3301      	adds	r3, #1
 8017748:	61bb      	str	r3, [r7, #24]
 801774a:	69bb      	ldr	r3, [r7, #24]
 801774c:	005b      	lsls	r3, r3, #1
 801774e:	68fa      	ldr	r2, [r7, #12]
 8017750:	4413      	add	r3, r2
 8017752:	881b      	ldrh	r3, [r3, #0]
 8017754:	2b20      	cmp	r3, #32
 8017756:	d0f5      	beq.n	8017744 <create_name+0x12c>
 8017758:	69bb      	ldr	r3, [r7, #24]
 801775a:	005b      	lsls	r3, r3, #1
 801775c:	68fa      	ldr	r2, [r7, #12]
 801775e:	4413      	add	r3, r2
 8017760:	881b      	ldrh	r3, [r3, #0]
 8017762:	2b2e      	cmp	r3, #46	; 0x2e
 8017764:	d0ee      	beq.n	8017744 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8017766:	69bb      	ldr	r3, [r7, #24]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d009      	beq.n	8017780 <create_name+0x168>
 801776c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017770:	f043 0303 	orr.w	r3, r3, #3
 8017774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8017778:	e002      	b.n	8017780 <create_name+0x168>
 801777a:	697b      	ldr	r3, [r7, #20]
 801777c:	3b01      	subs	r3, #1
 801777e:	617b      	str	r3, [r7, #20]
 8017780:	697b      	ldr	r3, [r7, #20]
 8017782:	2b00      	cmp	r3, #0
 8017784:	d009      	beq.n	801779a <create_name+0x182>
 8017786:	697a      	ldr	r2, [r7, #20]
 8017788:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801778c:	4413      	add	r3, r2
 801778e:	005b      	lsls	r3, r3, #1
 8017790:	68fa      	ldr	r2, [r7, #12]
 8017792:	4413      	add	r3, r2
 8017794:	881b      	ldrh	r3, [r3, #0]
 8017796:	2b2e      	cmp	r3, #46	; 0x2e
 8017798:	d1ef      	bne.n	801777a <create_name+0x162>

	i = b = 0; ni = 8;
 801779a:	2300      	movs	r3, #0
 801779c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80177a0:	2300      	movs	r3, #0
 80177a2:	623b      	str	r3, [r7, #32]
 80177a4:	2308      	movs	r3, #8
 80177a6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80177a8:	69bb      	ldr	r3, [r7, #24]
 80177aa:	1c5a      	adds	r2, r3, #1
 80177ac:	61ba      	str	r2, [r7, #24]
 80177ae:	005b      	lsls	r3, r3, #1
 80177b0:	68fa      	ldr	r2, [r7, #12]
 80177b2:	4413      	add	r3, r2
 80177b4:	881b      	ldrh	r3, [r3, #0]
 80177b6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80177b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	f000 8090 	beq.w	80178e0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80177c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80177c2:	2b20      	cmp	r3, #32
 80177c4:	d006      	beq.n	80177d4 <create_name+0x1bc>
 80177c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80177c8:	2b2e      	cmp	r3, #46	; 0x2e
 80177ca:	d10a      	bne.n	80177e2 <create_name+0x1ca>
 80177cc:	69ba      	ldr	r2, [r7, #24]
 80177ce:	697b      	ldr	r3, [r7, #20]
 80177d0:	429a      	cmp	r2, r3
 80177d2:	d006      	beq.n	80177e2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80177d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80177d8:	f043 0303 	orr.w	r3, r3, #3
 80177dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80177e0:	e07d      	b.n	80178de <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80177e2:	6a3a      	ldr	r2, [r7, #32]
 80177e4:	69fb      	ldr	r3, [r7, #28]
 80177e6:	429a      	cmp	r2, r3
 80177e8:	d203      	bcs.n	80177f2 <create_name+0x1da>
 80177ea:	69ba      	ldr	r2, [r7, #24]
 80177ec:	697b      	ldr	r3, [r7, #20]
 80177ee:	429a      	cmp	r2, r3
 80177f0:	d123      	bne.n	801783a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80177f2:	69fb      	ldr	r3, [r7, #28]
 80177f4:	2b0b      	cmp	r3, #11
 80177f6:	d106      	bne.n	8017806 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80177f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80177fc:	f043 0303 	orr.w	r3, r3, #3
 8017800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017804:	e075      	b.n	80178f2 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8017806:	69ba      	ldr	r2, [r7, #24]
 8017808:	697b      	ldr	r3, [r7, #20]
 801780a:	429a      	cmp	r2, r3
 801780c:	d005      	beq.n	801781a <create_name+0x202>
 801780e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017812:	f043 0303 	orr.w	r3, r3, #3
 8017816:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801781a:	69ba      	ldr	r2, [r7, #24]
 801781c:	697b      	ldr	r3, [r7, #20]
 801781e:	429a      	cmp	r2, r3
 8017820:	d866      	bhi.n	80178f0 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8017822:	697b      	ldr	r3, [r7, #20]
 8017824:	61bb      	str	r3, [r7, #24]
 8017826:	2308      	movs	r3, #8
 8017828:	623b      	str	r3, [r7, #32]
 801782a:	230b      	movs	r3, #11
 801782c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801782e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017832:	009b      	lsls	r3, r3, #2
 8017834:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8017838:	e051      	b.n	80178de <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801783a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801783c:	2b7f      	cmp	r3, #127	; 0x7f
 801783e:	d914      	bls.n	801786a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8017840:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017842:	2100      	movs	r1, #0
 8017844:	4618      	mov	r0, r3
 8017846:	f001 f9b1 	bl	8018bac <ff_convert>
 801784a:	4603      	mov	r3, r0
 801784c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801784e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017850:	2b00      	cmp	r3, #0
 8017852:	d004      	beq.n	801785e <create_name+0x246>
 8017854:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017856:	3b80      	subs	r3, #128	; 0x80
 8017858:	4a23      	ldr	r2, [pc, #140]	; (80178e8 <create_name+0x2d0>)
 801785a:	5cd3      	ldrb	r3, [r2, r3]
 801785c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801785e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017862:	f043 0302 	orr.w	r3, r3, #2
 8017866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801786a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801786c:	2b00      	cmp	r3, #0
 801786e:	d007      	beq.n	8017880 <create_name+0x268>
 8017870:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017872:	4619      	mov	r1, r3
 8017874:	481d      	ldr	r0, [pc, #116]	; (80178ec <create_name+0x2d4>)
 8017876:	f7fe fbfc 	bl	8016072 <chk_chr>
 801787a:	4603      	mov	r3, r0
 801787c:	2b00      	cmp	r3, #0
 801787e:	d008      	beq.n	8017892 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8017880:	235f      	movs	r3, #95	; 0x5f
 8017882:	84bb      	strh	r3, [r7, #36]	; 0x24
 8017884:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017888:	f043 0303 	orr.w	r3, r3, #3
 801788c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017890:	e01b      	b.n	80178ca <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8017892:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017894:	2b40      	cmp	r3, #64	; 0x40
 8017896:	d909      	bls.n	80178ac <create_name+0x294>
 8017898:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801789a:	2b5a      	cmp	r3, #90	; 0x5a
 801789c:	d806      	bhi.n	80178ac <create_name+0x294>
					b |= 2;
 801789e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80178a2:	f043 0302 	orr.w	r3, r3, #2
 80178a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80178aa:	e00e      	b.n	80178ca <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80178ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80178ae:	2b60      	cmp	r3, #96	; 0x60
 80178b0:	d90b      	bls.n	80178ca <create_name+0x2b2>
 80178b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80178b4:	2b7a      	cmp	r3, #122	; 0x7a
 80178b6:	d808      	bhi.n	80178ca <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80178b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80178bc:	f043 0301 	orr.w	r3, r3, #1
 80178c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80178c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80178c6:	3b20      	subs	r3, #32
 80178c8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80178ca:	6a3b      	ldr	r3, [r7, #32]
 80178cc:	1c5a      	adds	r2, r3, #1
 80178ce:	623a      	str	r2, [r7, #32]
 80178d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80178d2:	b2d1      	uxtb	r1, r2
 80178d4:	687a      	ldr	r2, [r7, #4]
 80178d6:	4413      	add	r3, r2
 80178d8:	460a      	mov	r2, r1
 80178da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80178de:	e763      	b.n	80177a8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80178e0:	bf00      	nop
 80178e2:	e006      	b.n	80178f2 <create_name+0x2da>
 80178e4:	0801df24 	.word	0x0801df24
 80178e8:	0801e06c 	.word	0x0801e06c
 80178ec:	0801df30 	.word	0x0801df30
			if (si > di) break;			/* No extension */
 80178f0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80178f8:	2be5      	cmp	r3, #229	; 0xe5
 80178fa:	d103      	bne.n	8017904 <create_name+0x2ec>
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	2205      	movs	r2, #5
 8017900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8017904:	69fb      	ldr	r3, [r7, #28]
 8017906:	2b08      	cmp	r3, #8
 8017908:	d104      	bne.n	8017914 <create_name+0x2fc>
 801790a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801790e:	009b      	lsls	r3, r3, #2
 8017910:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8017914:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017918:	f003 030c 	and.w	r3, r3, #12
 801791c:	2b0c      	cmp	r3, #12
 801791e:	d005      	beq.n	801792c <create_name+0x314>
 8017920:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017924:	f003 0303 	and.w	r3, r3, #3
 8017928:	2b03      	cmp	r3, #3
 801792a:	d105      	bne.n	8017938 <create_name+0x320>
 801792c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017930:	f043 0302 	orr.w	r3, r3, #2
 8017934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8017938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801793c:	f003 0302 	and.w	r3, r3, #2
 8017940:	2b00      	cmp	r3, #0
 8017942:	d117      	bne.n	8017974 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8017944:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017948:	f003 0303 	and.w	r3, r3, #3
 801794c:	2b01      	cmp	r3, #1
 801794e:	d105      	bne.n	801795c <create_name+0x344>
 8017950:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017954:	f043 0310 	orr.w	r3, r3, #16
 8017958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801795c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8017960:	f003 030c 	and.w	r3, r3, #12
 8017964:	2b04      	cmp	r3, #4
 8017966:	d105      	bne.n	8017974 <create_name+0x35c>
 8017968:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801796c:	f043 0308 	orr.w	r3, r3, #8
 8017970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801797a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801797e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8017980:	4618      	mov	r0, r3
 8017982:	3728      	adds	r7, #40	; 0x28
 8017984:	46bd      	mov	sp, r7
 8017986:	bd80      	pop	{r7, pc}

08017988 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017988:	b580      	push	{r7, lr}
 801798a:	b086      	sub	sp, #24
 801798c:	af00      	add	r7, sp, #0
 801798e:	6078      	str	r0, [r7, #4]
 8017990:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8017996:	693b      	ldr	r3, [r7, #16]
 8017998:	681b      	ldr	r3, [r3, #0]
 801799a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801799c:	e002      	b.n	80179a4 <follow_path+0x1c>
 801799e:	683b      	ldr	r3, [r7, #0]
 80179a0:	3301      	adds	r3, #1
 80179a2:	603b      	str	r3, [r7, #0]
 80179a4:	683b      	ldr	r3, [r7, #0]
 80179a6:	781b      	ldrb	r3, [r3, #0]
 80179a8:	2b2f      	cmp	r3, #47	; 0x2f
 80179aa:	d0f8      	beq.n	801799e <follow_path+0x16>
 80179ac:	683b      	ldr	r3, [r7, #0]
 80179ae:	781b      	ldrb	r3, [r3, #0]
 80179b0:	2b5c      	cmp	r3, #92	; 0x5c
 80179b2:	d0f4      	beq.n	801799e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80179b4:	693b      	ldr	r3, [r7, #16]
 80179b6:	2200      	movs	r2, #0
 80179b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80179ba:	683b      	ldr	r3, [r7, #0]
 80179bc:	781b      	ldrb	r3, [r3, #0]
 80179be:	2b1f      	cmp	r3, #31
 80179c0:	d80a      	bhi.n	80179d8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	2280      	movs	r2, #128	; 0x80
 80179c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80179ca:	2100      	movs	r1, #0
 80179cc:	6878      	ldr	r0, [r7, #4]
 80179ce:	f7ff f8fd 	bl	8016bcc <dir_sdi>
 80179d2:	4603      	mov	r3, r0
 80179d4:	75fb      	strb	r3, [r7, #23]
 80179d6:	e048      	b.n	8017a6a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80179d8:	463b      	mov	r3, r7
 80179da:	4619      	mov	r1, r3
 80179dc:	6878      	ldr	r0, [r7, #4]
 80179de:	f7ff fe1b 	bl	8017618 <create_name>
 80179e2:	4603      	mov	r3, r0
 80179e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80179e6:	7dfb      	ldrb	r3, [r7, #23]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d139      	bne.n	8017a60 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80179ec:	6878      	ldr	r0, [r7, #4]
 80179ee:	f7ff fc5a 	bl	80172a6 <dir_find>
 80179f2:	4603      	mov	r3, r0
 80179f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80179fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80179fe:	7dfb      	ldrb	r3, [r7, #23]
 8017a00:	2b00      	cmp	r3, #0
 8017a02:	d00a      	beq.n	8017a1a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8017a04:	7dfb      	ldrb	r3, [r7, #23]
 8017a06:	2b04      	cmp	r3, #4
 8017a08:	d12c      	bne.n	8017a64 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8017a0a:	7afb      	ldrb	r3, [r7, #11]
 8017a0c:	f003 0304 	and.w	r3, r3, #4
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d127      	bne.n	8017a64 <follow_path+0xdc>
 8017a14:	2305      	movs	r3, #5
 8017a16:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8017a18:	e024      	b.n	8017a64 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017a1a:	7afb      	ldrb	r3, [r7, #11]
 8017a1c:	f003 0304 	and.w	r3, r3, #4
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d121      	bne.n	8017a68 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8017a24:	693b      	ldr	r3, [r7, #16]
 8017a26:	799b      	ldrb	r3, [r3, #6]
 8017a28:	f003 0310 	and.w	r3, r3, #16
 8017a2c:	2b00      	cmp	r3, #0
 8017a2e:	d102      	bne.n	8017a36 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8017a30:	2305      	movs	r3, #5
 8017a32:	75fb      	strb	r3, [r7, #23]
 8017a34:	e019      	b.n	8017a6a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	695b      	ldr	r3, [r3, #20]
 8017a40:	68fa      	ldr	r2, [r7, #12]
 8017a42:	8992      	ldrh	r2, [r2, #12]
 8017a44:	fbb3 f0f2 	udiv	r0, r3, r2
 8017a48:	fb00 f202 	mul.w	r2, r0, r2
 8017a4c:	1a9b      	subs	r3, r3, r2
 8017a4e:	440b      	add	r3, r1
 8017a50:	4619      	mov	r1, r3
 8017a52:	68f8      	ldr	r0, [r7, #12]
 8017a54:	f7ff fa60 	bl	8016f18 <ld_clust>
 8017a58:	4602      	mov	r2, r0
 8017a5a:	693b      	ldr	r3, [r7, #16]
 8017a5c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8017a5e:	e7bb      	b.n	80179d8 <follow_path+0x50>
			if (res != FR_OK) break;
 8017a60:	bf00      	nop
 8017a62:	e002      	b.n	8017a6a <follow_path+0xe2>
				break;
 8017a64:	bf00      	nop
 8017a66:	e000      	b.n	8017a6a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8017a68:	bf00      	nop
			}
		}
	}

	return res;
 8017a6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	3718      	adds	r7, #24
 8017a70:	46bd      	mov	sp, r7
 8017a72:	bd80      	pop	{r7, pc}

08017a74 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8017a74:	b480      	push	{r7}
 8017a76:	b087      	sub	sp, #28
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8017a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8017a80:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	681b      	ldr	r3, [r3, #0]
 8017a86:	2b00      	cmp	r3, #0
 8017a88:	d031      	beq.n	8017aee <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	617b      	str	r3, [r7, #20]
 8017a90:	e002      	b.n	8017a98 <get_ldnumber+0x24>
 8017a92:	697b      	ldr	r3, [r7, #20]
 8017a94:	3301      	adds	r3, #1
 8017a96:	617b      	str	r3, [r7, #20]
 8017a98:	697b      	ldr	r3, [r7, #20]
 8017a9a:	781b      	ldrb	r3, [r3, #0]
 8017a9c:	2b1f      	cmp	r3, #31
 8017a9e:	d903      	bls.n	8017aa8 <get_ldnumber+0x34>
 8017aa0:	697b      	ldr	r3, [r7, #20]
 8017aa2:	781b      	ldrb	r3, [r3, #0]
 8017aa4:	2b3a      	cmp	r3, #58	; 0x3a
 8017aa6:	d1f4      	bne.n	8017a92 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8017aa8:	697b      	ldr	r3, [r7, #20]
 8017aaa:	781b      	ldrb	r3, [r3, #0]
 8017aac:	2b3a      	cmp	r3, #58	; 0x3a
 8017aae:	d11c      	bne.n	8017aea <get_ldnumber+0x76>
			tp = *path;
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8017ab6:	68fb      	ldr	r3, [r7, #12]
 8017ab8:	1c5a      	adds	r2, r3, #1
 8017aba:	60fa      	str	r2, [r7, #12]
 8017abc:	781b      	ldrb	r3, [r3, #0]
 8017abe:	3b30      	subs	r3, #48	; 0x30
 8017ac0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8017ac2:	68bb      	ldr	r3, [r7, #8]
 8017ac4:	2b09      	cmp	r3, #9
 8017ac6:	d80e      	bhi.n	8017ae6 <get_ldnumber+0x72>
 8017ac8:	68fa      	ldr	r2, [r7, #12]
 8017aca:	697b      	ldr	r3, [r7, #20]
 8017acc:	429a      	cmp	r2, r3
 8017ace:	d10a      	bne.n	8017ae6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8017ad0:	68bb      	ldr	r3, [r7, #8]
 8017ad2:	2b00      	cmp	r3, #0
 8017ad4:	d107      	bne.n	8017ae6 <get_ldnumber+0x72>
					vol = (int)i;
 8017ad6:	68bb      	ldr	r3, [r7, #8]
 8017ad8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8017ada:	697b      	ldr	r3, [r7, #20]
 8017adc:	3301      	adds	r3, #1
 8017ade:	617b      	str	r3, [r7, #20]
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	697a      	ldr	r2, [r7, #20]
 8017ae4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8017ae6:	693b      	ldr	r3, [r7, #16]
 8017ae8:	e002      	b.n	8017af0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8017aea:	2300      	movs	r3, #0
 8017aec:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8017aee:	693b      	ldr	r3, [r7, #16]
}
 8017af0:	4618      	mov	r0, r3
 8017af2:	371c      	adds	r7, #28
 8017af4:	46bd      	mov	sp, r7
 8017af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017afa:	4770      	bx	lr

08017afc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8017afc:	b580      	push	{r7, lr}
 8017afe:	b082      	sub	sp, #8
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	6078      	str	r0, [r7, #4]
 8017b04:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	2200      	movs	r2, #0
 8017b0a:	70da      	strb	r2, [r3, #3]
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8017b12:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8017b14:	6839      	ldr	r1, [r7, #0]
 8017b16:	6878      	ldr	r0, [r7, #4]
 8017b18:	f7fe fc76 	bl	8016408 <move_window>
 8017b1c:	4603      	mov	r3, r0
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	d001      	beq.n	8017b26 <check_fs+0x2a>
 8017b22:	2304      	movs	r3, #4
 8017b24:	e038      	b.n	8017b98 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	3338      	adds	r3, #56	; 0x38
 8017b2a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017b2e:	4618      	mov	r0, r3
 8017b30:	f7fe f9ba 	bl	8015ea8 <ld_word>
 8017b34:	4603      	mov	r3, r0
 8017b36:	461a      	mov	r2, r3
 8017b38:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017b3c:	429a      	cmp	r2, r3
 8017b3e:	d001      	beq.n	8017b44 <check_fs+0x48>
 8017b40:	2303      	movs	r3, #3
 8017b42:	e029      	b.n	8017b98 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017b4a:	2be9      	cmp	r3, #233	; 0xe9
 8017b4c:	d009      	beq.n	8017b62 <check_fs+0x66>
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8017b54:	2beb      	cmp	r3, #235	; 0xeb
 8017b56:	d11e      	bne.n	8017b96 <check_fs+0x9a>
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8017b5e:	2b90      	cmp	r3, #144	; 0x90
 8017b60:	d119      	bne.n	8017b96 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	3338      	adds	r3, #56	; 0x38
 8017b66:	3336      	adds	r3, #54	; 0x36
 8017b68:	4618      	mov	r0, r3
 8017b6a:	f7fe f9b5 	bl	8015ed8 <ld_dword>
 8017b6e:	4603      	mov	r3, r0
 8017b70:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8017b74:	4a0a      	ldr	r2, [pc, #40]	; (8017ba0 <check_fs+0xa4>)
 8017b76:	4293      	cmp	r3, r2
 8017b78:	d101      	bne.n	8017b7e <check_fs+0x82>
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	e00c      	b.n	8017b98 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	3338      	adds	r3, #56	; 0x38
 8017b82:	3352      	adds	r3, #82	; 0x52
 8017b84:	4618      	mov	r0, r3
 8017b86:	f7fe f9a7 	bl	8015ed8 <ld_dword>
 8017b8a:	4603      	mov	r3, r0
 8017b8c:	4a05      	ldr	r2, [pc, #20]	; (8017ba4 <check_fs+0xa8>)
 8017b8e:	4293      	cmp	r3, r2
 8017b90:	d101      	bne.n	8017b96 <check_fs+0x9a>
 8017b92:	2300      	movs	r3, #0
 8017b94:	e000      	b.n	8017b98 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8017b96:	2302      	movs	r3, #2
}
 8017b98:	4618      	mov	r0, r3
 8017b9a:	3708      	adds	r7, #8
 8017b9c:	46bd      	mov	sp, r7
 8017b9e:	bd80      	pop	{r7, pc}
 8017ba0:	00544146 	.word	0x00544146
 8017ba4:	33544146 	.word	0x33544146

08017ba8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8017ba8:	b580      	push	{r7, lr}
 8017baa:	b096      	sub	sp, #88	; 0x58
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	60f8      	str	r0, [r7, #12]
 8017bb0:	60b9      	str	r1, [r7, #8]
 8017bb2:	4613      	mov	r3, r2
 8017bb4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8017bb6:	68bb      	ldr	r3, [r7, #8]
 8017bb8:	2200      	movs	r2, #0
 8017bba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8017bbc:	68f8      	ldr	r0, [r7, #12]
 8017bbe:	f7ff ff59 	bl	8017a74 <get_ldnumber>
 8017bc2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8017bc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017bc6:	2b00      	cmp	r3, #0
 8017bc8:	da01      	bge.n	8017bce <find_volume+0x26>
 8017bca:	230b      	movs	r3, #11
 8017bcc:	e265      	b.n	801809a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8017bce:	4a9f      	ldr	r2, [pc, #636]	; (8017e4c <find_volume+0x2a4>)
 8017bd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017bd6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8017bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d101      	bne.n	8017be2 <find_volume+0x3a>
 8017bde:	230c      	movs	r3, #12
 8017be0:	e25b      	b.n	801809a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8017be2:	68bb      	ldr	r3, [r7, #8]
 8017be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017be6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8017be8:	79fb      	ldrb	r3, [r7, #7]
 8017bea:	f023 0301 	bic.w	r3, r3, #1
 8017bee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8017bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bf2:	781b      	ldrb	r3, [r3, #0]
 8017bf4:	2b00      	cmp	r3, #0
 8017bf6:	d01a      	beq.n	8017c2e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8017bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bfa:	785b      	ldrb	r3, [r3, #1]
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	f7fe f8b5 	bl	8015d6c <disk_status>
 8017c02:	4603      	mov	r3, r0
 8017c04:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8017c08:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017c0c:	f003 0301 	and.w	r3, r3, #1
 8017c10:	2b00      	cmp	r3, #0
 8017c12:	d10c      	bne.n	8017c2e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8017c14:	79fb      	ldrb	r3, [r7, #7]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d007      	beq.n	8017c2a <find_volume+0x82>
 8017c1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017c1e:	f003 0304 	and.w	r3, r3, #4
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d001      	beq.n	8017c2a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8017c26:	230a      	movs	r3, #10
 8017c28:	e237      	b.n	801809a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8017c2a:	2300      	movs	r3, #0
 8017c2c:	e235      	b.n	801809a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8017c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c30:	2200      	movs	r2, #0
 8017c32:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8017c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017c36:	b2da      	uxtb	r2, r3
 8017c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c3a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8017c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c3e:	785b      	ldrb	r3, [r3, #1]
 8017c40:	4618      	mov	r0, r3
 8017c42:	f7fe f8ad 	bl	8015da0 <disk_initialize>
 8017c46:	4603      	mov	r3, r0
 8017c48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8017c4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017c50:	f003 0301 	and.w	r3, r3, #1
 8017c54:	2b00      	cmp	r3, #0
 8017c56:	d001      	beq.n	8017c5c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8017c58:	2303      	movs	r3, #3
 8017c5a:	e21e      	b.n	801809a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8017c5c:	79fb      	ldrb	r3, [r7, #7]
 8017c5e:	2b00      	cmp	r3, #0
 8017c60:	d007      	beq.n	8017c72 <find_volume+0xca>
 8017c62:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017c66:	f003 0304 	and.w	r3, r3, #4
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d001      	beq.n	8017c72 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8017c6e:	230a      	movs	r3, #10
 8017c70:	e213      	b.n	801809a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8017c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c74:	7858      	ldrb	r0, [r3, #1]
 8017c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c78:	330c      	adds	r3, #12
 8017c7a:	461a      	mov	r2, r3
 8017c7c:	2102      	movs	r1, #2
 8017c7e:	f7fe f8f5 	bl	8015e6c <disk_ioctl>
 8017c82:	4603      	mov	r3, r0
 8017c84:	2b00      	cmp	r3, #0
 8017c86:	d001      	beq.n	8017c8c <find_volume+0xe4>
 8017c88:	2301      	movs	r3, #1
 8017c8a:	e206      	b.n	801809a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8017c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c8e:	899b      	ldrh	r3, [r3, #12]
 8017c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017c94:	d80d      	bhi.n	8017cb2 <find_volume+0x10a>
 8017c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c98:	899b      	ldrh	r3, [r3, #12]
 8017c9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017c9e:	d308      	bcc.n	8017cb2 <find_volume+0x10a>
 8017ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ca2:	899b      	ldrh	r3, [r3, #12]
 8017ca4:	461a      	mov	r2, r3
 8017ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ca8:	899b      	ldrh	r3, [r3, #12]
 8017caa:	3b01      	subs	r3, #1
 8017cac:	4013      	ands	r3, r2
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d001      	beq.n	8017cb6 <find_volume+0x10e>
 8017cb2:	2301      	movs	r3, #1
 8017cb4:	e1f1      	b.n	801809a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8017cb6:	2300      	movs	r3, #0
 8017cb8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8017cba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017cbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017cbe:	f7ff ff1d 	bl	8017afc <check_fs>
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8017cc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017ccc:	2b02      	cmp	r3, #2
 8017cce:	d149      	bne.n	8017d64 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017cd0:	2300      	movs	r3, #0
 8017cd2:	643b      	str	r3, [r7, #64]	; 0x40
 8017cd4:	e01e      	b.n	8017d14 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8017cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cd8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8017cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017cde:	011b      	lsls	r3, r3, #4
 8017ce0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8017ce4:	4413      	add	r3, r2
 8017ce6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8017ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cea:	3304      	adds	r3, #4
 8017cec:	781b      	ldrb	r3, [r3, #0]
 8017cee:	2b00      	cmp	r3, #0
 8017cf0:	d006      	beq.n	8017d00 <find_volume+0x158>
 8017cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cf4:	3308      	adds	r3, #8
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	f7fe f8ee 	bl	8015ed8 <ld_dword>
 8017cfc:	4602      	mov	r2, r0
 8017cfe:	e000      	b.n	8017d02 <find_volume+0x15a>
 8017d00:	2200      	movs	r2, #0
 8017d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d04:	009b      	lsls	r3, r3, #2
 8017d06:	3358      	adds	r3, #88	; 0x58
 8017d08:	443b      	add	r3, r7
 8017d0a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d10:	3301      	adds	r3, #1
 8017d12:	643b      	str	r3, [r7, #64]	; 0x40
 8017d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d16:	2b03      	cmp	r3, #3
 8017d18:	d9dd      	bls.n	8017cd6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8017d1a:	2300      	movs	r3, #0
 8017d1c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8017d1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d002      	beq.n	8017d2a <find_volume+0x182>
 8017d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d26:	3b01      	subs	r3, #1
 8017d28:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8017d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d2c:	009b      	lsls	r3, r3, #2
 8017d2e:	3358      	adds	r3, #88	; 0x58
 8017d30:	443b      	add	r3, r7
 8017d32:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8017d36:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8017d38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	d005      	beq.n	8017d4a <find_volume+0x1a2>
 8017d3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017d40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017d42:	f7ff fedb 	bl	8017afc <check_fs>
 8017d46:	4603      	mov	r3, r0
 8017d48:	e000      	b.n	8017d4c <find_volume+0x1a4>
 8017d4a:	2303      	movs	r3, #3
 8017d4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8017d50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017d54:	2b01      	cmp	r3, #1
 8017d56:	d905      	bls.n	8017d64 <find_volume+0x1bc>
 8017d58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d5a:	3301      	adds	r3, #1
 8017d5c:	643b      	str	r3, [r7, #64]	; 0x40
 8017d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017d60:	2b03      	cmp	r3, #3
 8017d62:	d9e2      	bls.n	8017d2a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8017d64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017d68:	2b04      	cmp	r3, #4
 8017d6a:	d101      	bne.n	8017d70 <find_volume+0x1c8>
 8017d6c:	2301      	movs	r3, #1
 8017d6e:	e194      	b.n	801809a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8017d70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017d74:	2b01      	cmp	r3, #1
 8017d76:	d901      	bls.n	8017d7c <find_volume+0x1d4>
 8017d78:	230d      	movs	r3, #13
 8017d7a:	e18e      	b.n	801809a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8017d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d7e:	3338      	adds	r3, #56	; 0x38
 8017d80:	330b      	adds	r3, #11
 8017d82:	4618      	mov	r0, r3
 8017d84:	f7fe f890 	bl	8015ea8 <ld_word>
 8017d88:	4603      	mov	r3, r0
 8017d8a:	461a      	mov	r2, r3
 8017d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d8e:	899b      	ldrh	r3, [r3, #12]
 8017d90:	429a      	cmp	r2, r3
 8017d92:	d001      	beq.n	8017d98 <find_volume+0x1f0>
 8017d94:	230d      	movs	r3, #13
 8017d96:	e180      	b.n	801809a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8017d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d9a:	3338      	adds	r3, #56	; 0x38
 8017d9c:	3316      	adds	r3, #22
 8017d9e:	4618      	mov	r0, r3
 8017da0:	f7fe f882 	bl	8015ea8 <ld_word>
 8017da4:	4603      	mov	r3, r0
 8017da6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8017da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d106      	bne.n	8017dbc <find_volume+0x214>
 8017dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017db0:	3338      	adds	r3, #56	; 0x38
 8017db2:	3324      	adds	r3, #36	; 0x24
 8017db4:	4618      	mov	r0, r3
 8017db6:	f7fe f88f 	bl	8015ed8 <ld_dword>
 8017dba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8017dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017dc0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8017dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dc4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8017dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8017dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dce:	789b      	ldrb	r3, [r3, #2]
 8017dd0:	2b01      	cmp	r3, #1
 8017dd2:	d005      	beq.n	8017de0 <find_volume+0x238>
 8017dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dd6:	789b      	ldrb	r3, [r3, #2]
 8017dd8:	2b02      	cmp	r3, #2
 8017dda:	d001      	beq.n	8017de0 <find_volume+0x238>
 8017ddc:	230d      	movs	r3, #13
 8017dde:	e15c      	b.n	801809a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8017de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017de2:	789b      	ldrb	r3, [r3, #2]
 8017de4:	461a      	mov	r2, r3
 8017de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017de8:	fb02 f303 	mul.w	r3, r2, r3
 8017dec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8017dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017df0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017df4:	b29a      	uxth	r2, r3
 8017df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017df8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8017dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017dfc:	895b      	ldrh	r3, [r3, #10]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d008      	beq.n	8017e14 <find_volume+0x26c>
 8017e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e04:	895b      	ldrh	r3, [r3, #10]
 8017e06:	461a      	mov	r2, r3
 8017e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e0a:	895b      	ldrh	r3, [r3, #10]
 8017e0c:	3b01      	subs	r3, #1
 8017e0e:	4013      	ands	r3, r2
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	d001      	beq.n	8017e18 <find_volume+0x270>
 8017e14:	230d      	movs	r3, #13
 8017e16:	e140      	b.n	801809a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8017e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e1a:	3338      	adds	r3, #56	; 0x38
 8017e1c:	3311      	adds	r3, #17
 8017e1e:	4618      	mov	r0, r3
 8017e20:	f7fe f842 	bl	8015ea8 <ld_word>
 8017e24:	4603      	mov	r3, r0
 8017e26:	461a      	mov	r2, r3
 8017e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e2a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8017e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e2e:	891b      	ldrh	r3, [r3, #8]
 8017e30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017e32:	8992      	ldrh	r2, [r2, #12]
 8017e34:	0952      	lsrs	r2, r2, #5
 8017e36:	b292      	uxth	r2, r2
 8017e38:	fbb3 f1f2 	udiv	r1, r3, r2
 8017e3c:	fb01 f202 	mul.w	r2, r1, r2
 8017e40:	1a9b      	subs	r3, r3, r2
 8017e42:	b29b      	uxth	r3, r3
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d003      	beq.n	8017e50 <find_volume+0x2a8>
 8017e48:	230d      	movs	r3, #13
 8017e4a:	e126      	b.n	801809a <find_volume+0x4f2>
 8017e4c:	240016b4 	.word	0x240016b4

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8017e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e52:	3338      	adds	r3, #56	; 0x38
 8017e54:	3313      	adds	r3, #19
 8017e56:	4618      	mov	r0, r3
 8017e58:	f7fe f826 	bl	8015ea8 <ld_word>
 8017e5c:	4603      	mov	r3, r0
 8017e5e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8017e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	d106      	bne.n	8017e74 <find_volume+0x2cc>
 8017e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e68:	3338      	adds	r3, #56	; 0x38
 8017e6a:	3320      	adds	r3, #32
 8017e6c:	4618      	mov	r0, r3
 8017e6e:	f7fe f833 	bl	8015ed8 <ld_dword>
 8017e72:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8017e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017e76:	3338      	adds	r3, #56	; 0x38
 8017e78:	330e      	adds	r3, #14
 8017e7a:	4618      	mov	r0, r3
 8017e7c:	f7fe f814 	bl	8015ea8 <ld_word>
 8017e80:	4603      	mov	r3, r0
 8017e82:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8017e84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017e86:	2b00      	cmp	r3, #0
 8017e88:	d101      	bne.n	8017e8e <find_volume+0x2e6>
 8017e8a:	230d      	movs	r3, #13
 8017e8c:	e105      	b.n	801809a <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8017e8e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017e92:	4413      	add	r3, r2
 8017e94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017e96:	8911      	ldrh	r1, [r2, #8]
 8017e98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017e9a:	8992      	ldrh	r2, [r2, #12]
 8017e9c:	0952      	lsrs	r2, r2, #5
 8017e9e:	b292      	uxth	r2, r2
 8017ea0:	fbb1 f2f2 	udiv	r2, r1, r2
 8017ea4:	b292      	uxth	r2, r2
 8017ea6:	4413      	add	r3, r2
 8017ea8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8017eaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eae:	429a      	cmp	r2, r3
 8017eb0:	d201      	bcs.n	8017eb6 <find_volume+0x30e>
 8017eb2:	230d      	movs	r3, #13
 8017eb4:	e0f1      	b.n	801809a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8017eb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eba:	1ad3      	subs	r3, r2, r3
 8017ebc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017ebe:	8952      	ldrh	r2, [r2, #10]
 8017ec0:	fbb3 f3f2 	udiv	r3, r3, r2
 8017ec4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8017ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	d101      	bne.n	8017ed0 <find_volume+0x328>
 8017ecc:	230d      	movs	r3, #13
 8017ece:	e0e4      	b.n	801809a <find_volume+0x4f2>
		fmt = FS_FAT32;
 8017ed0:	2303      	movs	r3, #3
 8017ed2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8017ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ed8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017edc:	4293      	cmp	r3, r2
 8017ede:	d802      	bhi.n	8017ee6 <find_volume+0x33e>
 8017ee0:	2302      	movs	r3, #2
 8017ee2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8017ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ee8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017eec:	4293      	cmp	r3, r2
 8017eee:	d802      	bhi.n	8017ef6 <find_volume+0x34e>
 8017ef0:	2301      	movs	r3, #1
 8017ef2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8017ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ef8:	1c9a      	adds	r2, r3, #2
 8017efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017efc:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8017efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017f02:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8017f04:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017f06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017f08:	441a      	add	r2, r3
 8017f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f0c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8017f0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f12:	441a      	add	r2, r3
 8017f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f16:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8017f18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017f1c:	2b03      	cmp	r3, #3
 8017f1e:	d11e      	bne.n	8017f5e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8017f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f22:	3338      	adds	r3, #56	; 0x38
 8017f24:	332a      	adds	r3, #42	; 0x2a
 8017f26:	4618      	mov	r0, r3
 8017f28:	f7fd ffbe 	bl	8015ea8 <ld_word>
 8017f2c:	4603      	mov	r3, r0
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d001      	beq.n	8017f36 <find_volume+0x38e>
 8017f32:	230d      	movs	r3, #13
 8017f34:	e0b1      	b.n	801809a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8017f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f38:	891b      	ldrh	r3, [r3, #8]
 8017f3a:	2b00      	cmp	r3, #0
 8017f3c:	d001      	beq.n	8017f42 <find_volume+0x39a>
 8017f3e:	230d      	movs	r3, #13
 8017f40:	e0ab      	b.n	801809a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8017f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f44:	3338      	adds	r3, #56	; 0x38
 8017f46:	332c      	adds	r3, #44	; 0x2c
 8017f48:	4618      	mov	r0, r3
 8017f4a:	f7fd ffc5 	bl	8015ed8 <ld_dword>
 8017f4e:	4602      	mov	r2, r0
 8017f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f52:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8017f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f56:	69db      	ldr	r3, [r3, #28]
 8017f58:	009b      	lsls	r3, r3, #2
 8017f5a:	647b      	str	r3, [r7, #68]	; 0x44
 8017f5c:	e01f      	b.n	8017f9e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8017f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f60:	891b      	ldrh	r3, [r3, #8]
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d101      	bne.n	8017f6a <find_volume+0x3c2>
 8017f66:	230d      	movs	r3, #13
 8017f68:	e097      	b.n	801809a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8017f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017f70:	441a      	add	r2, r3
 8017f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f74:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8017f76:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017f7a:	2b02      	cmp	r3, #2
 8017f7c:	d103      	bne.n	8017f86 <find_volume+0x3de>
 8017f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f80:	69db      	ldr	r3, [r3, #28]
 8017f82:	005b      	lsls	r3, r3, #1
 8017f84:	e00a      	b.n	8017f9c <find_volume+0x3f4>
 8017f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f88:	69da      	ldr	r2, [r3, #28]
 8017f8a:	4613      	mov	r3, r2
 8017f8c:	005b      	lsls	r3, r3, #1
 8017f8e:	4413      	add	r3, r2
 8017f90:	085a      	lsrs	r2, r3, #1
 8017f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017f94:	69db      	ldr	r3, [r3, #28]
 8017f96:	f003 0301 	and.w	r3, r3, #1
 8017f9a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8017f9c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8017f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fa0:	6a1a      	ldr	r2, [r3, #32]
 8017fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fa4:	899b      	ldrh	r3, [r3, #12]
 8017fa6:	4619      	mov	r1, r3
 8017fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017faa:	440b      	add	r3, r1
 8017fac:	3b01      	subs	r3, #1
 8017fae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017fb0:	8989      	ldrh	r1, [r1, #12]
 8017fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8017fb6:	429a      	cmp	r2, r3
 8017fb8:	d201      	bcs.n	8017fbe <find_volume+0x416>
 8017fba:	230d      	movs	r3, #13
 8017fbc:	e06d      	b.n	801809a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8017fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8017fc4:	619a      	str	r2, [r3, #24]
 8017fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fc8:	699a      	ldr	r2, [r3, #24]
 8017fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fcc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8017fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fd0:	2280      	movs	r2, #128	; 0x80
 8017fd2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8017fd4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017fd8:	2b03      	cmp	r3, #3
 8017fda:	d149      	bne.n	8018070 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8017fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017fde:	3338      	adds	r3, #56	; 0x38
 8017fe0:	3330      	adds	r3, #48	; 0x30
 8017fe2:	4618      	mov	r0, r3
 8017fe4:	f7fd ff60 	bl	8015ea8 <ld_word>
 8017fe8:	4603      	mov	r3, r0
 8017fea:	2b01      	cmp	r3, #1
 8017fec:	d140      	bne.n	8018070 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8017fee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ff0:	3301      	adds	r3, #1
 8017ff2:	4619      	mov	r1, r3
 8017ff4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017ff6:	f7fe fa07 	bl	8016408 <move_window>
 8017ffa:	4603      	mov	r3, r0
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d137      	bne.n	8018070 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8018000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018002:	2200      	movs	r2, #0
 8018004:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8018006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018008:	3338      	adds	r3, #56	; 0x38
 801800a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801800e:	4618      	mov	r0, r3
 8018010:	f7fd ff4a 	bl	8015ea8 <ld_word>
 8018014:	4603      	mov	r3, r0
 8018016:	461a      	mov	r2, r3
 8018018:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801801c:	429a      	cmp	r2, r3
 801801e:	d127      	bne.n	8018070 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8018020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018022:	3338      	adds	r3, #56	; 0x38
 8018024:	4618      	mov	r0, r3
 8018026:	f7fd ff57 	bl	8015ed8 <ld_dword>
 801802a:	4603      	mov	r3, r0
 801802c:	4a1d      	ldr	r2, [pc, #116]	; (80180a4 <find_volume+0x4fc>)
 801802e:	4293      	cmp	r3, r2
 8018030:	d11e      	bne.n	8018070 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8018032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018034:	3338      	adds	r3, #56	; 0x38
 8018036:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801803a:	4618      	mov	r0, r3
 801803c:	f7fd ff4c 	bl	8015ed8 <ld_dword>
 8018040:	4603      	mov	r3, r0
 8018042:	4a19      	ldr	r2, [pc, #100]	; (80180a8 <find_volume+0x500>)
 8018044:	4293      	cmp	r3, r2
 8018046:	d113      	bne.n	8018070 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8018048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801804a:	3338      	adds	r3, #56	; 0x38
 801804c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8018050:	4618      	mov	r0, r3
 8018052:	f7fd ff41 	bl	8015ed8 <ld_dword>
 8018056:	4602      	mov	r2, r0
 8018058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801805a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801805c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801805e:	3338      	adds	r3, #56	; 0x38
 8018060:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8018064:	4618      	mov	r0, r3
 8018066:	f7fd ff37 	bl	8015ed8 <ld_dword>
 801806a:	4602      	mov	r2, r0
 801806c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801806e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8018070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018072:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8018076:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8018078:	4b0c      	ldr	r3, [pc, #48]	; (80180ac <find_volume+0x504>)
 801807a:	881b      	ldrh	r3, [r3, #0]
 801807c:	3301      	adds	r3, #1
 801807e:	b29a      	uxth	r2, r3
 8018080:	4b0a      	ldr	r3, [pc, #40]	; (80180ac <find_volume+0x504>)
 8018082:	801a      	strh	r2, [r3, #0]
 8018084:	4b09      	ldr	r3, [pc, #36]	; (80180ac <find_volume+0x504>)
 8018086:	881a      	ldrh	r2, [r3, #0]
 8018088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801808a:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 801808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801808e:	4a08      	ldr	r2, [pc, #32]	; (80180b0 <find_volume+0x508>)
 8018090:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8018092:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018094:	f7fe f950 	bl	8016338 <clear_lock>
#endif
	return FR_OK;
 8018098:	2300      	movs	r3, #0
}
 801809a:	4618      	mov	r0, r3
 801809c:	3758      	adds	r7, #88	; 0x58
 801809e:	46bd      	mov	sp, r7
 80180a0:	bd80      	pop	{r7, pc}
 80180a2:	bf00      	nop
 80180a4:	41615252 	.word	0x41615252
 80180a8:	61417272 	.word	0x61417272
 80180ac:	240016b8 	.word	0x240016b8
 80180b0:	240016dc 	.word	0x240016dc

080180b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80180b4:	b580      	push	{r7, lr}
 80180b6:	b084      	sub	sp, #16
 80180b8:	af00      	add	r7, sp, #0
 80180ba:	6078      	str	r0, [r7, #4]
 80180bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80180be:	2309      	movs	r3, #9
 80180c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d01c      	beq.n	8018102 <validate+0x4e>
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d018      	beq.n	8018102 <validate+0x4e>
 80180d0:	687b      	ldr	r3, [r7, #4]
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	781b      	ldrb	r3, [r3, #0]
 80180d6:	2b00      	cmp	r3, #0
 80180d8:	d013      	beq.n	8018102 <validate+0x4e>
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	889a      	ldrh	r2, [r3, #4]
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	88db      	ldrh	r3, [r3, #6]
 80180e4:	429a      	cmp	r2, r3
 80180e6:	d10c      	bne.n	8018102 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	785b      	ldrb	r3, [r3, #1]
 80180ee:	4618      	mov	r0, r3
 80180f0:	f7fd fe3c 	bl	8015d6c <disk_status>
 80180f4:	4603      	mov	r3, r0
 80180f6:	f003 0301 	and.w	r3, r3, #1
 80180fa:	2b00      	cmp	r3, #0
 80180fc:	d101      	bne.n	8018102 <validate+0x4e>
			res = FR_OK;
 80180fe:	2300      	movs	r3, #0
 8018100:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8018102:	7bfb      	ldrb	r3, [r7, #15]
 8018104:	2b00      	cmp	r3, #0
 8018106:	d102      	bne.n	801810e <validate+0x5a>
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	e000      	b.n	8018110 <validate+0x5c>
 801810e:	2300      	movs	r3, #0
 8018110:	683a      	ldr	r2, [r7, #0]
 8018112:	6013      	str	r3, [r2, #0]
	return res;
 8018114:	7bfb      	ldrb	r3, [r7, #15]
}
 8018116:	4618      	mov	r0, r3
 8018118:	3710      	adds	r7, #16
 801811a:	46bd      	mov	sp, r7
 801811c:	bd80      	pop	{r7, pc}
	...

08018120 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8018120:	b580      	push	{r7, lr}
 8018122:	b088      	sub	sp, #32
 8018124:	af00      	add	r7, sp, #0
 8018126:	60f8      	str	r0, [r7, #12]
 8018128:	60b9      	str	r1, [r7, #8]
 801812a:	4613      	mov	r3, r2
 801812c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801812e:	68bb      	ldr	r3, [r7, #8]
 8018130:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8018132:	f107 0310 	add.w	r3, r7, #16
 8018136:	4618      	mov	r0, r3
 8018138:	f7ff fc9c 	bl	8017a74 <get_ldnumber>
 801813c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801813e:	69fb      	ldr	r3, [r7, #28]
 8018140:	2b00      	cmp	r3, #0
 8018142:	da01      	bge.n	8018148 <f_mount+0x28>
 8018144:	230b      	movs	r3, #11
 8018146:	e02b      	b.n	80181a0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8018148:	4a17      	ldr	r2, [pc, #92]	; (80181a8 <f_mount+0x88>)
 801814a:	69fb      	ldr	r3, [r7, #28]
 801814c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018150:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8018152:	69bb      	ldr	r3, [r7, #24]
 8018154:	2b00      	cmp	r3, #0
 8018156:	d005      	beq.n	8018164 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8018158:	69b8      	ldr	r0, [r7, #24]
 801815a:	f7fe f8ed 	bl	8016338 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801815e:	69bb      	ldr	r3, [r7, #24]
 8018160:	2200      	movs	r2, #0
 8018162:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	2b00      	cmp	r3, #0
 8018168:	d002      	beq.n	8018170 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801816a:	68fb      	ldr	r3, [r7, #12]
 801816c:	2200      	movs	r2, #0
 801816e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8018170:	68fa      	ldr	r2, [r7, #12]
 8018172:	490d      	ldr	r1, [pc, #52]	; (80181a8 <f_mount+0x88>)
 8018174:	69fb      	ldr	r3, [r7, #28]
 8018176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d002      	beq.n	8018186 <f_mount+0x66>
 8018180:	79fb      	ldrb	r3, [r7, #7]
 8018182:	2b01      	cmp	r3, #1
 8018184:	d001      	beq.n	801818a <f_mount+0x6a>
 8018186:	2300      	movs	r3, #0
 8018188:	e00a      	b.n	80181a0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801818a:	f107 010c 	add.w	r1, r7, #12
 801818e:	f107 0308 	add.w	r3, r7, #8
 8018192:	2200      	movs	r2, #0
 8018194:	4618      	mov	r0, r3
 8018196:	f7ff fd07 	bl	8017ba8 <find_volume>
 801819a:	4603      	mov	r3, r0
 801819c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801819e:	7dfb      	ldrb	r3, [r7, #23]
}
 80181a0:	4618      	mov	r0, r3
 80181a2:	3720      	adds	r7, #32
 80181a4:	46bd      	mov	sp, r7
 80181a6:	bd80      	pop	{r7, pc}
 80181a8:	240016b4 	.word	0x240016b4

080181ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80181ac:	b580      	push	{r7, lr}
 80181ae:	b09a      	sub	sp, #104	; 0x68
 80181b0:	af00      	add	r7, sp, #0
 80181b2:	60f8      	str	r0, [r7, #12]
 80181b4:	60b9      	str	r1, [r7, #8]
 80181b6:	4613      	mov	r3, r2
 80181b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80181ba:	68fb      	ldr	r3, [r7, #12]
 80181bc:	2b00      	cmp	r3, #0
 80181be:	d101      	bne.n	80181c4 <f_open+0x18>
 80181c0:	2309      	movs	r3, #9
 80181c2:	e1bb      	b.n	801853c <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80181c4:	79fb      	ldrb	r3, [r7, #7]
 80181c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80181ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80181cc:	79fa      	ldrb	r2, [r7, #7]
 80181ce:	f107 0114 	add.w	r1, r7, #20
 80181d2:	f107 0308 	add.w	r3, r7, #8
 80181d6:	4618      	mov	r0, r3
 80181d8:	f7ff fce6 	bl	8017ba8 <find_volume>
 80181dc:	4603      	mov	r3, r0
 80181de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80181e2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	f040 819f 	bne.w	801852a <f_open+0x37e>
		dj.obj.fs = fs;
 80181ec:	697b      	ldr	r3, [r7, #20]
 80181ee:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80181f0:	68ba      	ldr	r2, [r7, #8]
 80181f2:	f107 0318 	add.w	r3, r7, #24
 80181f6:	4611      	mov	r1, r2
 80181f8:	4618      	mov	r0, r3
 80181fa:	f7ff fbc5 	bl	8017988 <follow_path>
 80181fe:	4603      	mov	r3, r0
 8018200:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8018204:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018208:	2b00      	cmp	r3, #0
 801820a:	d11a      	bne.n	8018242 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801820c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8018210:	b25b      	sxtb	r3, r3
 8018212:	2b00      	cmp	r3, #0
 8018214:	da03      	bge.n	801821e <f_open+0x72>
				res = FR_INVALID_NAME;
 8018216:	2306      	movs	r3, #6
 8018218:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801821c:	e011      	b.n	8018242 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801821e:	79fb      	ldrb	r3, [r7, #7]
 8018220:	f023 0301 	bic.w	r3, r3, #1
 8018224:	2b00      	cmp	r3, #0
 8018226:	bf14      	ite	ne
 8018228:	2301      	movne	r3, #1
 801822a:	2300      	moveq	r3, #0
 801822c:	b2db      	uxtb	r3, r3
 801822e:	461a      	mov	r2, r3
 8018230:	f107 0318 	add.w	r3, r7, #24
 8018234:	4611      	mov	r1, r2
 8018236:	4618      	mov	r0, r3
 8018238:	f7fd ff36 	bl	80160a8 <chk_lock>
 801823c:	4603      	mov	r3, r0
 801823e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8018242:	79fb      	ldrb	r3, [r7, #7]
 8018244:	f003 031c 	and.w	r3, r3, #28
 8018248:	2b00      	cmp	r3, #0
 801824a:	d07f      	beq.n	801834c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801824c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018250:	2b00      	cmp	r3, #0
 8018252:	d017      	beq.n	8018284 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8018254:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018258:	2b04      	cmp	r3, #4
 801825a:	d10e      	bne.n	801827a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801825c:	f7fd ff80 	bl	8016160 <enq_lock>
 8018260:	4603      	mov	r3, r0
 8018262:	2b00      	cmp	r3, #0
 8018264:	d006      	beq.n	8018274 <f_open+0xc8>
 8018266:	f107 0318 	add.w	r3, r7, #24
 801826a:	4618      	mov	r0, r3
 801826c:	f7ff f8dc 	bl	8017428 <dir_register>
 8018270:	4603      	mov	r3, r0
 8018272:	e000      	b.n	8018276 <f_open+0xca>
 8018274:	2312      	movs	r3, #18
 8018276:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801827a:	79fb      	ldrb	r3, [r7, #7]
 801827c:	f043 0308 	orr.w	r3, r3, #8
 8018280:	71fb      	strb	r3, [r7, #7]
 8018282:	e010      	b.n	80182a6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8018284:	7fbb      	ldrb	r3, [r7, #30]
 8018286:	f003 0311 	and.w	r3, r3, #17
 801828a:	2b00      	cmp	r3, #0
 801828c:	d003      	beq.n	8018296 <f_open+0xea>
					res = FR_DENIED;
 801828e:	2307      	movs	r3, #7
 8018290:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018294:	e007      	b.n	80182a6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8018296:	79fb      	ldrb	r3, [r7, #7]
 8018298:	f003 0304 	and.w	r3, r3, #4
 801829c:	2b00      	cmp	r3, #0
 801829e:	d002      	beq.n	80182a6 <f_open+0xfa>
 80182a0:	2308      	movs	r3, #8
 80182a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80182a6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d168      	bne.n	8018380 <f_open+0x1d4>
 80182ae:	79fb      	ldrb	r3, [r7, #7]
 80182b0:	f003 0308 	and.w	r3, r3, #8
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d063      	beq.n	8018380 <f_open+0x1d4>
				dw = GET_FATTIME();
 80182b8:	f7fb fb6e 	bl	8013998 <get_fattime>
 80182bc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80182be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182c0:	330e      	adds	r3, #14
 80182c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80182c4:	4618      	mov	r0, r3
 80182c6:	f7fd fe45 	bl	8015f54 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80182ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182cc:	3316      	adds	r3, #22
 80182ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80182d0:	4618      	mov	r0, r3
 80182d2:	f7fd fe3f 	bl	8015f54 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80182d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182d8:	330b      	adds	r3, #11
 80182da:	2220      	movs	r2, #32
 80182dc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80182de:	697b      	ldr	r3, [r7, #20]
 80182e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80182e2:	4611      	mov	r1, r2
 80182e4:	4618      	mov	r0, r3
 80182e6:	f7fe fe17 	bl	8016f18 <ld_clust>
 80182ea:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80182ec:	697b      	ldr	r3, [r7, #20]
 80182ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80182f0:	2200      	movs	r2, #0
 80182f2:	4618      	mov	r0, r3
 80182f4:	f7fe fe2f 	bl	8016f56 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80182f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80182fa:	331c      	adds	r3, #28
 80182fc:	2100      	movs	r1, #0
 80182fe:	4618      	mov	r0, r3
 8018300:	f7fd fe28 	bl	8015f54 <st_dword>
					fs->wflag = 1;
 8018304:	697b      	ldr	r3, [r7, #20]
 8018306:	2201      	movs	r2, #1
 8018308:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801830a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801830c:	2b00      	cmp	r3, #0
 801830e:	d037      	beq.n	8018380 <f_open+0x1d4>
						dw = fs->winsect;
 8018310:	697b      	ldr	r3, [r7, #20]
 8018312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018314:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8018316:	f107 0318 	add.w	r3, r7, #24
 801831a:	2200      	movs	r2, #0
 801831c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801831e:	4618      	mov	r0, r3
 8018320:	f7fe fb1f 	bl	8016962 <remove_chain>
 8018324:	4603      	mov	r3, r0
 8018326:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801832a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801832e:	2b00      	cmp	r3, #0
 8018330:	d126      	bne.n	8018380 <f_open+0x1d4>
							res = move_window(fs, dw);
 8018332:	697b      	ldr	r3, [r7, #20]
 8018334:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018336:	4618      	mov	r0, r3
 8018338:	f7fe f866 	bl	8016408 <move_window>
 801833c:	4603      	mov	r3, r0
 801833e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8018342:	697b      	ldr	r3, [r7, #20]
 8018344:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018346:	3a01      	subs	r2, #1
 8018348:	615a      	str	r2, [r3, #20]
 801834a:	e019      	b.n	8018380 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801834c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018350:	2b00      	cmp	r3, #0
 8018352:	d115      	bne.n	8018380 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8018354:	7fbb      	ldrb	r3, [r7, #30]
 8018356:	f003 0310 	and.w	r3, r3, #16
 801835a:	2b00      	cmp	r3, #0
 801835c:	d003      	beq.n	8018366 <f_open+0x1ba>
					res = FR_NO_FILE;
 801835e:	2304      	movs	r3, #4
 8018360:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8018364:	e00c      	b.n	8018380 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8018366:	79fb      	ldrb	r3, [r7, #7]
 8018368:	f003 0302 	and.w	r3, r3, #2
 801836c:	2b00      	cmp	r3, #0
 801836e:	d007      	beq.n	8018380 <f_open+0x1d4>
 8018370:	7fbb      	ldrb	r3, [r7, #30]
 8018372:	f003 0301 	and.w	r3, r3, #1
 8018376:	2b00      	cmp	r3, #0
 8018378:	d002      	beq.n	8018380 <f_open+0x1d4>
						res = FR_DENIED;
 801837a:	2307      	movs	r3, #7
 801837c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8018380:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8018384:	2b00      	cmp	r3, #0
 8018386:	d128      	bne.n	80183da <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8018388:	79fb      	ldrb	r3, [r7, #7]
 801838a:	f003 0308 	and.w	r3, r3, #8
 801838e:	2b00      	cmp	r3, #0
 8018390:	d003      	beq.n	801839a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8018392:	79fb      	ldrb	r3, [r7, #7]
 8018394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018398:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801839a:	697b      	ldr	r3, [r7, #20]
 801839c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801839e:	68fb      	ldr	r3, [r7, #12]
 80183a0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80183a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80183a8:	79fb      	ldrb	r3, [r7, #7]
 80183aa:	f023 0301 	bic.w	r3, r3, #1
 80183ae:	2b00      	cmp	r3, #0
 80183b0:	bf14      	ite	ne
 80183b2:	2301      	movne	r3, #1
 80183b4:	2300      	moveq	r3, #0
 80183b6:	b2db      	uxtb	r3, r3
 80183b8:	461a      	mov	r2, r3
 80183ba:	f107 0318 	add.w	r3, r7, #24
 80183be:	4611      	mov	r1, r2
 80183c0:	4618      	mov	r0, r3
 80183c2:	f7fd feef 	bl	80161a4 <inc_lock>
 80183c6:	4602      	mov	r2, r0
 80183c8:	68fb      	ldr	r3, [r7, #12]
 80183ca:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	691b      	ldr	r3, [r3, #16]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d102      	bne.n	80183da <f_open+0x22e>
 80183d4:	2302      	movs	r3, #2
 80183d6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80183da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80183de:	2b00      	cmp	r3, #0
 80183e0:	f040 80a3 	bne.w	801852a <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80183e4:	697b      	ldr	r3, [r7, #20]
 80183e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80183e8:	4611      	mov	r1, r2
 80183ea:	4618      	mov	r0, r3
 80183ec:	f7fe fd94 	bl	8016f18 <ld_clust>
 80183f0:	4602      	mov	r2, r0
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80183f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183f8:	331c      	adds	r3, #28
 80183fa:	4618      	mov	r0, r3
 80183fc:	f7fd fd6c 	bl	8015ed8 <ld_dword>
 8018400:	4602      	mov	r2, r0
 8018402:	68fb      	ldr	r3, [r7, #12]
 8018404:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8018406:	68fb      	ldr	r3, [r7, #12]
 8018408:	2200      	movs	r2, #0
 801840a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801840c:	697a      	ldr	r2, [r7, #20]
 801840e:	68fb      	ldr	r3, [r7, #12]
 8018410:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8018412:	697b      	ldr	r3, [r7, #20]
 8018414:	88da      	ldrh	r2, [r3, #6]
 8018416:	68fb      	ldr	r3, [r7, #12]
 8018418:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	79fa      	ldrb	r2, [r7, #7]
 801841e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8018420:	68fb      	ldr	r3, [r7, #12]
 8018422:	2200      	movs	r2, #0
 8018424:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8018426:	68fb      	ldr	r3, [r7, #12]
 8018428:	2200      	movs	r2, #0
 801842a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	2200      	movs	r2, #0
 8018430:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8018432:	68fb      	ldr	r3, [r7, #12]
 8018434:	3330      	adds	r3, #48	; 0x30
 8018436:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801843a:	2100      	movs	r1, #0
 801843c:	4618      	mov	r0, r3
 801843e:	f7fd fdd6 	bl	8015fee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8018442:	79fb      	ldrb	r3, [r7, #7]
 8018444:	f003 0320 	and.w	r3, r3, #32
 8018448:	2b00      	cmp	r3, #0
 801844a:	d06e      	beq.n	801852a <f_open+0x37e>
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	68db      	ldr	r3, [r3, #12]
 8018450:	2b00      	cmp	r3, #0
 8018452:	d06a      	beq.n	801852a <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	68da      	ldr	r2, [r3, #12]
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801845c:	697b      	ldr	r3, [r7, #20]
 801845e:	895b      	ldrh	r3, [r3, #10]
 8018460:	461a      	mov	r2, r3
 8018462:	697b      	ldr	r3, [r7, #20]
 8018464:	899b      	ldrh	r3, [r3, #12]
 8018466:	fb02 f303 	mul.w	r3, r2, r3
 801846a:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	689b      	ldr	r3, [r3, #8]
 8018470:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018472:	68fb      	ldr	r3, [r7, #12]
 8018474:	68db      	ldr	r3, [r3, #12]
 8018476:	65fb      	str	r3, [r7, #92]	; 0x5c
 8018478:	e016      	b.n	80184a8 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 801847a:	68fb      	ldr	r3, [r7, #12]
 801847c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801847e:	4618      	mov	r0, r3
 8018480:	f7fe f87f 	bl	8016582 <get_fat>
 8018484:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8018486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018488:	2b01      	cmp	r3, #1
 801848a:	d802      	bhi.n	8018492 <f_open+0x2e6>
 801848c:	2302      	movs	r3, #2
 801848e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8018492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8018494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018498:	d102      	bne.n	80184a0 <f_open+0x2f4>
 801849a:	2301      	movs	r3, #1
 801849c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80184a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80184a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80184a4:	1ad3      	subs	r3, r2, r3
 80184a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80184a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d103      	bne.n	80184b8 <f_open+0x30c>
 80184b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80184b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80184b4:	429a      	cmp	r2, r3
 80184b6:	d8e0      	bhi.n	801847a <f_open+0x2ce>
				}
				fp->clust = clst;
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80184bc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80184be:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d131      	bne.n	801852a <f_open+0x37e>
 80184c6:	697b      	ldr	r3, [r7, #20]
 80184c8:	899b      	ldrh	r3, [r3, #12]
 80184ca:	461a      	mov	r2, r3
 80184cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80184ce:	fbb3 f1f2 	udiv	r1, r3, r2
 80184d2:	fb01 f202 	mul.w	r2, r1, r2
 80184d6:	1a9b      	subs	r3, r3, r2
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d026      	beq.n	801852a <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80184dc:	697b      	ldr	r3, [r7, #20]
 80184de:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80184e0:	4618      	mov	r0, r3
 80184e2:	f7fe f82f 	bl	8016544 <clust2sect>
 80184e6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80184e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d103      	bne.n	80184f6 <f_open+0x34a>
						res = FR_INT_ERR;
 80184ee:	2302      	movs	r3, #2
 80184f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80184f4:	e019      	b.n	801852a <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80184f6:	697b      	ldr	r3, [r7, #20]
 80184f8:	899b      	ldrh	r3, [r3, #12]
 80184fa:	461a      	mov	r2, r3
 80184fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80184fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8018502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018504:	441a      	add	r2, r3
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801850a:	697b      	ldr	r3, [r7, #20]
 801850c:	7858      	ldrb	r0, [r3, #1]
 801850e:	68fb      	ldr	r3, [r7, #12]
 8018510:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018514:	68fb      	ldr	r3, [r7, #12]
 8018516:	6a1a      	ldr	r2, [r3, #32]
 8018518:	2301      	movs	r3, #1
 801851a:	f7fd fc67 	bl	8015dec <disk_read>
 801851e:	4603      	mov	r3, r0
 8018520:	2b00      	cmp	r3, #0
 8018522:	d002      	beq.n	801852a <f_open+0x37e>
 8018524:	2301      	movs	r3, #1
 8018526:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801852a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801852e:	2b00      	cmp	r3, #0
 8018530:	d002      	beq.n	8018538 <f_open+0x38c>
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	2200      	movs	r2, #0
 8018536:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8018538:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 801853c:	4618      	mov	r0, r3
 801853e:	3768      	adds	r7, #104	; 0x68
 8018540:	46bd      	mov	sp, r7
 8018542:	bd80      	pop	{r7, pc}

08018544 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8018544:	b580      	push	{r7, lr}
 8018546:	b08c      	sub	sp, #48	; 0x30
 8018548:	af00      	add	r7, sp, #0
 801854a:	60f8      	str	r0, [r7, #12]
 801854c:	60b9      	str	r1, [r7, #8]
 801854e:	607a      	str	r2, [r7, #4]
 8018550:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8018552:	68bb      	ldr	r3, [r7, #8]
 8018554:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8018556:	683b      	ldr	r3, [r7, #0]
 8018558:	2200      	movs	r2, #0
 801855a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	f107 0210 	add.w	r2, r7, #16
 8018562:	4611      	mov	r1, r2
 8018564:	4618      	mov	r0, r3
 8018566:	f7ff fda5 	bl	80180b4 <validate>
 801856a:	4603      	mov	r3, r0
 801856c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018570:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018574:	2b00      	cmp	r3, #0
 8018576:	d107      	bne.n	8018588 <f_write+0x44>
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	7d5b      	ldrb	r3, [r3, #21]
 801857c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8018580:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018584:	2b00      	cmp	r3, #0
 8018586:	d002      	beq.n	801858e <f_write+0x4a>
 8018588:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801858c:	e16a      	b.n	8018864 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801858e:	68fb      	ldr	r3, [r7, #12]
 8018590:	7d1b      	ldrb	r3, [r3, #20]
 8018592:	f003 0302 	and.w	r3, r3, #2
 8018596:	2b00      	cmp	r3, #0
 8018598:	d101      	bne.n	801859e <f_write+0x5a>
 801859a:	2307      	movs	r3, #7
 801859c:	e162      	b.n	8018864 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801859e:	68fb      	ldr	r3, [r7, #12]
 80185a0:	699a      	ldr	r2, [r3, #24]
 80185a2:	687b      	ldr	r3, [r7, #4]
 80185a4:	441a      	add	r2, r3
 80185a6:	68fb      	ldr	r3, [r7, #12]
 80185a8:	699b      	ldr	r3, [r3, #24]
 80185aa:	429a      	cmp	r2, r3
 80185ac:	f080 814c 	bcs.w	8018848 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	699b      	ldr	r3, [r3, #24]
 80185b4:	43db      	mvns	r3, r3
 80185b6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80185b8:	e146      	b.n	8018848 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	699b      	ldr	r3, [r3, #24]
 80185be:	693a      	ldr	r2, [r7, #16]
 80185c0:	8992      	ldrh	r2, [r2, #12]
 80185c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80185c6:	fb01 f202 	mul.w	r2, r1, r2
 80185ca:	1a9b      	subs	r3, r3, r2
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	f040 80f1 	bne.w	80187b4 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80185d2:	68fb      	ldr	r3, [r7, #12]
 80185d4:	699b      	ldr	r3, [r3, #24]
 80185d6:	693a      	ldr	r2, [r7, #16]
 80185d8:	8992      	ldrh	r2, [r2, #12]
 80185da:	fbb3 f3f2 	udiv	r3, r3, r2
 80185de:	693a      	ldr	r2, [r7, #16]
 80185e0:	8952      	ldrh	r2, [r2, #10]
 80185e2:	3a01      	subs	r2, #1
 80185e4:	4013      	ands	r3, r2
 80185e6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80185e8:	69bb      	ldr	r3, [r7, #24]
 80185ea:	2b00      	cmp	r3, #0
 80185ec:	d143      	bne.n	8018676 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	699b      	ldr	r3, [r3, #24]
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d10c      	bne.n	8018610 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	689b      	ldr	r3, [r3, #8]
 80185fa:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80185fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d11a      	bne.n	8018638 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8018602:	68fb      	ldr	r3, [r7, #12]
 8018604:	2100      	movs	r1, #0
 8018606:	4618      	mov	r0, r3
 8018608:	f7fe fa10 	bl	8016a2c <create_chain>
 801860c:	62b8      	str	r0, [r7, #40]	; 0x28
 801860e:	e013      	b.n	8018638 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8018610:	68fb      	ldr	r3, [r7, #12]
 8018612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018614:	2b00      	cmp	r3, #0
 8018616:	d007      	beq.n	8018628 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018618:	68fb      	ldr	r3, [r7, #12]
 801861a:	699b      	ldr	r3, [r3, #24]
 801861c:	4619      	mov	r1, r3
 801861e:	68f8      	ldr	r0, [r7, #12]
 8018620:	f7fe fa9c 	bl	8016b5c <clmt_clust>
 8018624:	62b8      	str	r0, [r7, #40]	; 0x28
 8018626:	e007      	b.n	8018638 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8018628:	68fa      	ldr	r2, [r7, #12]
 801862a:	68fb      	ldr	r3, [r7, #12]
 801862c:	69db      	ldr	r3, [r3, #28]
 801862e:	4619      	mov	r1, r3
 8018630:	4610      	mov	r0, r2
 8018632:	f7fe f9fb 	bl	8016a2c <create_chain>
 8018636:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801863a:	2b00      	cmp	r3, #0
 801863c:	f000 8109 	beq.w	8018852 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018642:	2b01      	cmp	r3, #1
 8018644:	d104      	bne.n	8018650 <f_write+0x10c>
 8018646:	68fb      	ldr	r3, [r7, #12]
 8018648:	2202      	movs	r2, #2
 801864a:	755a      	strb	r2, [r3, #21]
 801864c:	2302      	movs	r3, #2
 801864e:	e109      	b.n	8018864 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018656:	d104      	bne.n	8018662 <f_write+0x11e>
 8018658:	68fb      	ldr	r3, [r7, #12]
 801865a:	2201      	movs	r2, #1
 801865c:	755a      	strb	r2, [r3, #21]
 801865e:	2301      	movs	r3, #1
 8018660:	e100      	b.n	8018864 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8018662:	68fb      	ldr	r3, [r7, #12]
 8018664:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018666:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8018668:	68fb      	ldr	r3, [r7, #12]
 801866a:	689b      	ldr	r3, [r3, #8]
 801866c:	2b00      	cmp	r3, #0
 801866e:	d102      	bne.n	8018676 <f_write+0x132>
 8018670:	68fb      	ldr	r3, [r7, #12]
 8018672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018674:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	7d1b      	ldrb	r3, [r3, #20]
 801867a:	b25b      	sxtb	r3, r3
 801867c:	2b00      	cmp	r3, #0
 801867e:	da18      	bge.n	80186b2 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018680:	693b      	ldr	r3, [r7, #16]
 8018682:	7858      	ldrb	r0, [r3, #1]
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801868a:	68fb      	ldr	r3, [r7, #12]
 801868c:	6a1a      	ldr	r2, [r3, #32]
 801868e:	2301      	movs	r3, #1
 8018690:	f7fd fbcc 	bl	8015e2c <disk_write>
 8018694:	4603      	mov	r3, r0
 8018696:	2b00      	cmp	r3, #0
 8018698:	d004      	beq.n	80186a4 <f_write+0x160>
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	2201      	movs	r2, #1
 801869e:	755a      	strb	r2, [r3, #21]
 80186a0:	2301      	movs	r3, #1
 80186a2:	e0df      	b.n	8018864 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	7d1b      	ldrb	r3, [r3, #20]
 80186a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80186ac:	b2da      	uxtb	r2, r3
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80186b2:	693a      	ldr	r2, [r7, #16]
 80186b4:	68fb      	ldr	r3, [r7, #12]
 80186b6:	69db      	ldr	r3, [r3, #28]
 80186b8:	4619      	mov	r1, r3
 80186ba:	4610      	mov	r0, r2
 80186bc:	f7fd ff42 	bl	8016544 <clust2sect>
 80186c0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80186c2:	697b      	ldr	r3, [r7, #20]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d104      	bne.n	80186d2 <f_write+0x18e>
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	2202      	movs	r2, #2
 80186cc:	755a      	strb	r2, [r3, #21]
 80186ce:	2302      	movs	r3, #2
 80186d0:	e0c8      	b.n	8018864 <f_write+0x320>
			sect += csect;
 80186d2:	697a      	ldr	r2, [r7, #20]
 80186d4:	69bb      	ldr	r3, [r7, #24]
 80186d6:	4413      	add	r3, r2
 80186d8:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80186da:	693b      	ldr	r3, [r7, #16]
 80186dc:	899b      	ldrh	r3, [r3, #12]
 80186de:	461a      	mov	r2, r3
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80186e6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80186e8:	6a3b      	ldr	r3, [r7, #32]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d043      	beq.n	8018776 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80186ee:	69ba      	ldr	r2, [r7, #24]
 80186f0:	6a3b      	ldr	r3, [r7, #32]
 80186f2:	4413      	add	r3, r2
 80186f4:	693a      	ldr	r2, [r7, #16]
 80186f6:	8952      	ldrh	r2, [r2, #10]
 80186f8:	4293      	cmp	r3, r2
 80186fa:	d905      	bls.n	8018708 <f_write+0x1c4>
					cc = fs->csize - csect;
 80186fc:	693b      	ldr	r3, [r7, #16]
 80186fe:	895b      	ldrh	r3, [r3, #10]
 8018700:	461a      	mov	r2, r3
 8018702:	69bb      	ldr	r3, [r7, #24]
 8018704:	1ad3      	subs	r3, r2, r3
 8018706:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018708:	693b      	ldr	r3, [r7, #16]
 801870a:	7858      	ldrb	r0, [r3, #1]
 801870c:	6a3b      	ldr	r3, [r7, #32]
 801870e:	697a      	ldr	r2, [r7, #20]
 8018710:	69f9      	ldr	r1, [r7, #28]
 8018712:	f7fd fb8b 	bl	8015e2c <disk_write>
 8018716:	4603      	mov	r3, r0
 8018718:	2b00      	cmp	r3, #0
 801871a:	d004      	beq.n	8018726 <f_write+0x1e2>
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	2201      	movs	r2, #1
 8018720:	755a      	strb	r2, [r3, #21]
 8018722:	2301      	movs	r3, #1
 8018724:	e09e      	b.n	8018864 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8018726:	68fb      	ldr	r3, [r7, #12]
 8018728:	6a1a      	ldr	r2, [r3, #32]
 801872a:	697b      	ldr	r3, [r7, #20]
 801872c:	1ad3      	subs	r3, r2, r3
 801872e:	6a3a      	ldr	r2, [r7, #32]
 8018730:	429a      	cmp	r2, r3
 8018732:	d918      	bls.n	8018766 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8018734:	68fb      	ldr	r3, [r7, #12]
 8018736:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801873a:	68fb      	ldr	r3, [r7, #12]
 801873c:	6a1a      	ldr	r2, [r3, #32]
 801873e:	697b      	ldr	r3, [r7, #20]
 8018740:	1ad3      	subs	r3, r2, r3
 8018742:	693a      	ldr	r2, [r7, #16]
 8018744:	8992      	ldrh	r2, [r2, #12]
 8018746:	fb02 f303 	mul.w	r3, r2, r3
 801874a:	69fa      	ldr	r2, [r7, #28]
 801874c:	18d1      	adds	r1, r2, r3
 801874e:	693b      	ldr	r3, [r7, #16]
 8018750:	899b      	ldrh	r3, [r3, #12]
 8018752:	461a      	mov	r2, r3
 8018754:	f7fd fc2a 	bl	8015fac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8018758:	68fb      	ldr	r3, [r7, #12]
 801875a:	7d1b      	ldrb	r3, [r3, #20]
 801875c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018760:	b2da      	uxtb	r2, r3
 8018762:	68fb      	ldr	r3, [r7, #12]
 8018764:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8018766:	693b      	ldr	r3, [r7, #16]
 8018768:	899b      	ldrh	r3, [r3, #12]
 801876a:	461a      	mov	r2, r3
 801876c:	6a3b      	ldr	r3, [r7, #32]
 801876e:	fb02 f303 	mul.w	r3, r2, r3
 8018772:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8018774:	e04b      	b.n	801880e <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	6a1b      	ldr	r3, [r3, #32]
 801877a:	697a      	ldr	r2, [r7, #20]
 801877c:	429a      	cmp	r2, r3
 801877e:	d016      	beq.n	80187ae <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8018780:	68fb      	ldr	r3, [r7, #12]
 8018782:	699a      	ldr	r2, [r3, #24]
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018788:	429a      	cmp	r2, r3
 801878a:	d210      	bcs.n	80187ae <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801878c:	693b      	ldr	r3, [r7, #16]
 801878e:	7858      	ldrb	r0, [r3, #1]
 8018790:	68fb      	ldr	r3, [r7, #12]
 8018792:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018796:	2301      	movs	r3, #1
 8018798:	697a      	ldr	r2, [r7, #20]
 801879a:	f7fd fb27 	bl	8015dec <disk_read>
 801879e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d004      	beq.n	80187ae <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80187a4:	68fb      	ldr	r3, [r7, #12]
 80187a6:	2201      	movs	r2, #1
 80187a8:	755a      	strb	r2, [r3, #21]
 80187aa:	2301      	movs	r3, #1
 80187ac:	e05a      	b.n	8018864 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80187ae:	68fb      	ldr	r3, [r7, #12]
 80187b0:	697a      	ldr	r2, [r7, #20]
 80187b2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80187b4:	693b      	ldr	r3, [r7, #16]
 80187b6:	899b      	ldrh	r3, [r3, #12]
 80187b8:	4618      	mov	r0, r3
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	699b      	ldr	r3, [r3, #24]
 80187be:	693a      	ldr	r2, [r7, #16]
 80187c0:	8992      	ldrh	r2, [r2, #12]
 80187c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80187c6:	fb01 f202 	mul.w	r2, r1, r2
 80187ca:	1a9b      	subs	r3, r3, r2
 80187cc:	1ac3      	subs	r3, r0, r3
 80187ce:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80187d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	429a      	cmp	r2, r3
 80187d6:	d901      	bls.n	80187dc <f_write+0x298>
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80187e2:	68fb      	ldr	r3, [r7, #12]
 80187e4:	699b      	ldr	r3, [r3, #24]
 80187e6:	693a      	ldr	r2, [r7, #16]
 80187e8:	8992      	ldrh	r2, [r2, #12]
 80187ea:	fbb3 f0f2 	udiv	r0, r3, r2
 80187ee:	fb00 f202 	mul.w	r2, r0, r2
 80187f2:	1a9b      	subs	r3, r3, r2
 80187f4:	440b      	add	r3, r1
 80187f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80187f8:	69f9      	ldr	r1, [r7, #28]
 80187fa:	4618      	mov	r0, r3
 80187fc:	f7fd fbd6 	bl	8015fac <mem_cpy>
		fp->flag |= FA_DIRTY;
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	7d1b      	ldrb	r3, [r3, #20]
 8018804:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018808:	b2da      	uxtb	r2, r3
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801880e:	69fa      	ldr	r2, [r7, #28]
 8018810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018812:	4413      	add	r3, r2
 8018814:	61fb      	str	r3, [r7, #28]
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	699a      	ldr	r2, [r3, #24]
 801881a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801881c:	441a      	add	r2, r3
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	619a      	str	r2, [r3, #24]
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	68da      	ldr	r2, [r3, #12]
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	699b      	ldr	r3, [r3, #24]
 801882a:	429a      	cmp	r2, r3
 801882c:	bf38      	it	cc
 801882e:	461a      	movcc	r2, r3
 8018830:	68fb      	ldr	r3, [r7, #12]
 8018832:	60da      	str	r2, [r3, #12]
 8018834:	683b      	ldr	r3, [r7, #0]
 8018836:	681a      	ldr	r2, [r3, #0]
 8018838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801883a:	441a      	add	r2, r3
 801883c:	683b      	ldr	r3, [r7, #0]
 801883e:	601a      	str	r2, [r3, #0]
 8018840:	687a      	ldr	r2, [r7, #4]
 8018842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018844:	1ad3      	subs	r3, r2, r3
 8018846:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	2b00      	cmp	r3, #0
 801884c:	f47f aeb5 	bne.w	80185ba <f_write+0x76>
 8018850:	e000      	b.n	8018854 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018852:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8018854:	68fb      	ldr	r3, [r7, #12]
 8018856:	7d1b      	ldrb	r3, [r3, #20]
 8018858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801885c:	b2da      	uxtb	r2, r3
 801885e:	68fb      	ldr	r3, [r7, #12]
 8018860:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8018862:	2300      	movs	r3, #0
}
 8018864:	4618      	mov	r0, r3
 8018866:	3730      	adds	r7, #48	; 0x30
 8018868:	46bd      	mov	sp, r7
 801886a:	bd80      	pop	{r7, pc}

0801886c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801886c:	b580      	push	{r7, lr}
 801886e:	b086      	sub	sp, #24
 8018870:	af00      	add	r7, sp, #0
 8018872:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	f107 0208 	add.w	r2, r7, #8
 801887a:	4611      	mov	r1, r2
 801887c:	4618      	mov	r0, r3
 801887e:	f7ff fc19 	bl	80180b4 <validate>
 8018882:	4603      	mov	r3, r0
 8018884:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8018886:	7dfb      	ldrb	r3, [r7, #23]
 8018888:	2b00      	cmp	r3, #0
 801888a:	d168      	bne.n	801895e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	7d1b      	ldrb	r3, [r3, #20]
 8018890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018894:	2b00      	cmp	r3, #0
 8018896:	d062      	beq.n	801895e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	7d1b      	ldrb	r3, [r3, #20]
 801889c:	b25b      	sxtb	r3, r3
 801889e:	2b00      	cmp	r3, #0
 80188a0:	da15      	bge.n	80188ce <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80188a2:	68bb      	ldr	r3, [r7, #8]
 80188a4:	7858      	ldrb	r0, [r3, #1]
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	6a1a      	ldr	r2, [r3, #32]
 80188b0:	2301      	movs	r3, #1
 80188b2:	f7fd fabb 	bl	8015e2c <disk_write>
 80188b6:	4603      	mov	r3, r0
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d001      	beq.n	80188c0 <f_sync+0x54>
 80188bc:	2301      	movs	r3, #1
 80188be:	e04f      	b.n	8018960 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80188c0:	687b      	ldr	r3, [r7, #4]
 80188c2:	7d1b      	ldrb	r3, [r3, #20]
 80188c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80188c8:	b2da      	uxtb	r2, r3
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80188ce:	f7fb f863 	bl	8013998 <get_fattime>
 80188d2:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80188d4:	68ba      	ldr	r2, [r7, #8]
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188da:	4619      	mov	r1, r3
 80188dc:	4610      	mov	r0, r2
 80188de:	f7fd fd93 	bl	8016408 <move_window>
 80188e2:	4603      	mov	r3, r0
 80188e4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80188e6:	7dfb      	ldrb	r3, [r7, #23]
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d138      	bne.n	801895e <f_sync+0xf2>
					dir = fp->dir_ptr;
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80188f0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	330b      	adds	r3, #11
 80188f6:	781a      	ldrb	r2, [r3, #0]
 80188f8:	68fb      	ldr	r3, [r7, #12]
 80188fa:	330b      	adds	r3, #11
 80188fc:	f042 0220 	orr.w	r2, r2, #32
 8018900:	b2d2      	uxtb	r2, r2
 8018902:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8018904:	687b      	ldr	r3, [r7, #4]
 8018906:	6818      	ldr	r0, [r3, #0]
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	689b      	ldr	r3, [r3, #8]
 801890c:	461a      	mov	r2, r3
 801890e:	68f9      	ldr	r1, [r7, #12]
 8018910:	f7fe fb21 	bl	8016f56 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	f103 021c 	add.w	r2, r3, #28
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	68db      	ldr	r3, [r3, #12]
 801891e:	4619      	mov	r1, r3
 8018920:	4610      	mov	r0, r2
 8018922:	f7fd fb17 	bl	8015f54 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8018926:	68fb      	ldr	r3, [r7, #12]
 8018928:	3316      	adds	r3, #22
 801892a:	6939      	ldr	r1, [r7, #16]
 801892c:	4618      	mov	r0, r3
 801892e:	f7fd fb11 	bl	8015f54 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8018932:	68fb      	ldr	r3, [r7, #12]
 8018934:	3312      	adds	r3, #18
 8018936:	2100      	movs	r1, #0
 8018938:	4618      	mov	r0, r3
 801893a:	f7fd faf0 	bl	8015f1e <st_word>
					fs->wflag = 1;
 801893e:	68bb      	ldr	r3, [r7, #8]
 8018940:	2201      	movs	r2, #1
 8018942:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8018944:	68bb      	ldr	r3, [r7, #8]
 8018946:	4618      	mov	r0, r3
 8018948:	f7fd fd8c 	bl	8016464 <sync_fs>
 801894c:	4603      	mov	r3, r0
 801894e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	7d1b      	ldrb	r3, [r3, #20]
 8018954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018958:	b2da      	uxtb	r2, r3
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801895e:	7dfb      	ldrb	r3, [r7, #23]
}
 8018960:	4618      	mov	r0, r3
 8018962:	3718      	adds	r7, #24
 8018964:	46bd      	mov	sp, r7
 8018966:	bd80      	pop	{r7, pc}

08018968 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8018968:	b580      	push	{r7, lr}
 801896a:	b084      	sub	sp, #16
 801896c:	af00      	add	r7, sp, #0
 801896e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8018970:	6878      	ldr	r0, [r7, #4]
 8018972:	f7ff ff7b 	bl	801886c <f_sync>
 8018976:	4603      	mov	r3, r0
 8018978:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801897a:	7bfb      	ldrb	r3, [r7, #15]
 801897c:	2b00      	cmp	r3, #0
 801897e:	d118      	bne.n	80189b2 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	f107 0208 	add.w	r2, r7, #8
 8018986:	4611      	mov	r1, r2
 8018988:	4618      	mov	r0, r3
 801898a:	f7ff fb93 	bl	80180b4 <validate>
 801898e:	4603      	mov	r3, r0
 8018990:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8018992:	7bfb      	ldrb	r3, [r7, #15]
 8018994:	2b00      	cmp	r3, #0
 8018996:	d10c      	bne.n	80189b2 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	691b      	ldr	r3, [r3, #16]
 801899c:	4618      	mov	r0, r3
 801899e:	f7fd fc8f 	bl	80162c0 <dec_lock>
 80189a2:	4603      	mov	r3, r0
 80189a4:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80189a6:	7bfb      	ldrb	r3, [r7, #15]
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d102      	bne.n	80189b2 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80189ac:	687b      	ldr	r3, [r7, #4]
 80189ae:	2200      	movs	r2, #0
 80189b0:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80189b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80189b4:	4618      	mov	r0, r3
 80189b6:	3710      	adds	r7, #16
 80189b8:	46bd      	mov	sp, r7
 80189ba:	bd80      	pop	{r7, pc}

080189bc <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80189bc:	b580      	push	{r7, lr}
 80189be:	b084      	sub	sp, #16
 80189c0:	af00      	add	r7, sp, #0
 80189c2:	6078      	str	r0, [r7, #4]
 80189c4:	460b      	mov	r3, r1
 80189c6:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80189c8:	78fb      	ldrb	r3, [r7, #3]
 80189ca:	2b0a      	cmp	r3, #10
 80189cc:	d103      	bne.n	80189d6 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80189ce:	210d      	movs	r1, #13
 80189d0:	6878      	ldr	r0, [r7, #4]
 80189d2:	f7ff fff3 	bl	80189bc <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	685b      	ldr	r3, [r3, #4]
 80189da:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80189dc:	68fb      	ldr	r3, [r7, #12]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	db25      	blt.n	8018a2e <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80189e2:	68fb      	ldr	r3, [r7, #12]
 80189e4:	1c5a      	adds	r2, r3, #1
 80189e6:	60fa      	str	r2, [r7, #12]
 80189e8:	687a      	ldr	r2, [r7, #4]
 80189ea:	4413      	add	r3, r2
 80189ec:	78fa      	ldrb	r2, [r7, #3]
 80189ee:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	2b3c      	cmp	r3, #60	; 0x3c
 80189f4:	dd12      	ble.n	8018a1c <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	6818      	ldr	r0, [r3, #0]
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	f103 010c 	add.w	r1, r3, #12
 8018a00:	68fa      	ldr	r2, [r7, #12]
 8018a02:	f107 0308 	add.w	r3, r7, #8
 8018a06:	f7ff fd9d 	bl	8018544 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8018a0a:	68ba      	ldr	r2, [r7, #8]
 8018a0c:	68fb      	ldr	r3, [r7, #12]
 8018a0e:	429a      	cmp	r2, r3
 8018a10:	d101      	bne.n	8018a16 <putc_bfd+0x5a>
 8018a12:	2300      	movs	r3, #0
 8018a14:	e001      	b.n	8018a1a <putc_bfd+0x5e>
 8018a16:	f04f 33ff 	mov.w	r3, #4294967295
 8018a1a:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	68fa      	ldr	r2, [r7, #12]
 8018a20:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	689b      	ldr	r3, [r3, #8]
 8018a26:	1c5a      	adds	r2, r3, #1
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	609a      	str	r2, [r3, #8]
 8018a2c:	e000      	b.n	8018a30 <putc_bfd+0x74>
	if (i < 0) return;
 8018a2e:	bf00      	nop
}
 8018a30:	3710      	adds	r7, #16
 8018a32:	46bd      	mov	sp, r7
 8018a34:	bd80      	pop	{r7, pc}

08018a36 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8018a36:	b580      	push	{r7, lr}
 8018a38:	b084      	sub	sp, #16
 8018a3a:	af00      	add	r7, sp, #0
 8018a3c:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	685b      	ldr	r3, [r3, #4]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	db16      	blt.n	8018a74 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	6818      	ldr	r0, [r3, #0]
 8018a4a:	687b      	ldr	r3, [r7, #4]
 8018a4c:	f103 010c 	add.w	r1, r3, #12
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	685b      	ldr	r3, [r3, #4]
 8018a54:	461a      	mov	r2, r3
 8018a56:	f107 030c 	add.w	r3, r7, #12
 8018a5a:	f7ff fd73 	bl	8018544 <f_write>
 8018a5e:	4603      	mov	r3, r0
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d107      	bne.n	8018a74 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	685b      	ldr	r3, [r3, #4]
 8018a68:	68fa      	ldr	r2, [r7, #12]
 8018a6a:	4293      	cmp	r3, r2
 8018a6c:	d102      	bne.n	8018a74 <putc_flush+0x3e>
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	689b      	ldr	r3, [r3, #8]
 8018a72:	e001      	b.n	8018a78 <putc_flush+0x42>
	return EOF;
 8018a74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018a78:	4618      	mov	r0, r3
 8018a7a:	3710      	adds	r7, #16
 8018a7c:	46bd      	mov	sp, r7
 8018a7e:	bd80      	pop	{r7, pc}

08018a80 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8018a80:	b480      	push	{r7}
 8018a82:	b083      	sub	sp, #12
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	6078      	str	r0, [r7, #4]
 8018a88:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	683a      	ldr	r2, [r7, #0]
 8018a8e:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	2200      	movs	r2, #0
 8018a94:	605a      	str	r2, [r3, #4]
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	685a      	ldr	r2, [r3, #4]
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	609a      	str	r2, [r3, #8]
}
 8018a9e:	bf00      	nop
 8018aa0:	370c      	adds	r7, #12
 8018aa2:	46bd      	mov	sp, r7
 8018aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aa8:	4770      	bx	lr

08018aaa <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8018aaa:	b580      	push	{r7, lr}
 8018aac:	b096      	sub	sp, #88	; 0x58
 8018aae:	af00      	add	r7, sp, #0
 8018ab0:	6078      	str	r0, [r7, #4]
 8018ab2:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8018ab4:	f107 030c 	add.w	r3, r7, #12
 8018ab8:	6839      	ldr	r1, [r7, #0]
 8018aba:	4618      	mov	r0, r3
 8018abc:	f7ff ffe0 	bl	8018a80 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8018ac0:	e009      	b.n	8018ad6 <f_puts+0x2c>
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	1c5a      	adds	r2, r3, #1
 8018ac6:	607a      	str	r2, [r7, #4]
 8018ac8:	781a      	ldrb	r2, [r3, #0]
 8018aca:	f107 030c 	add.w	r3, r7, #12
 8018ace:	4611      	mov	r1, r2
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	f7ff ff73 	bl	80189bc <putc_bfd>
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	781b      	ldrb	r3, [r3, #0]
 8018ada:	2b00      	cmp	r3, #0
 8018adc:	d1f1      	bne.n	8018ac2 <f_puts+0x18>
	return putc_flush(&pb);
 8018ade:	f107 030c 	add.w	r3, r7, #12
 8018ae2:	4618      	mov	r0, r3
 8018ae4:	f7ff ffa7 	bl	8018a36 <putc_flush>
 8018ae8:	4603      	mov	r3, r0
}
 8018aea:	4618      	mov	r0, r3
 8018aec:	3758      	adds	r7, #88	; 0x58
 8018aee:	46bd      	mov	sp, r7
 8018af0:	bd80      	pop	{r7, pc}
	...

08018af4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8018af4:	b480      	push	{r7}
 8018af6:	b087      	sub	sp, #28
 8018af8:	af00      	add	r7, sp, #0
 8018afa:	60f8      	str	r0, [r7, #12]
 8018afc:	60b9      	str	r1, [r7, #8]
 8018afe:	4613      	mov	r3, r2
 8018b00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8018b02:	2301      	movs	r3, #1
 8018b04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8018b06:	2300      	movs	r3, #0
 8018b08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8018b0a:	4b1f      	ldr	r3, [pc, #124]	; (8018b88 <FATFS_LinkDriverEx+0x94>)
 8018b0c:	7a5b      	ldrb	r3, [r3, #9]
 8018b0e:	b2db      	uxtb	r3, r3
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d131      	bne.n	8018b78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8018b14:	4b1c      	ldr	r3, [pc, #112]	; (8018b88 <FATFS_LinkDriverEx+0x94>)
 8018b16:	7a5b      	ldrb	r3, [r3, #9]
 8018b18:	b2db      	uxtb	r3, r3
 8018b1a:	461a      	mov	r2, r3
 8018b1c:	4b1a      	ldr	r3, [pc, #104]	; (8018b88 <FATFS_LinkDriverEx+0x94>)
 8018b1e:	2100      	movs	r1, #0
 8018b20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8018b22:	4b19      	ldr	r3, [pc, #100]	; (8018b88 <FATFS_LinkDriverEx+0x94>)
 8018b24:	7a5b      	ldrb	r3, [r3, #9]
 8018b26:	b2db      	uxtb	r3, r3
 8018b28:	4a17      	ldr	r2, [pc, #92]	; (8018b88 <FATFS_LinkDriverEx+0x94>)
 8018b2a:	009b      	lsls	r3, r3, #2
 8018b2c:	4413      	add	r3, r2
 8018b2e:	68fa      	ldr	r2, [r7, #12]
 8018b30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8018b32:	4b15      	ldr	r3, [pc, #84]	; (8018b88 <FATFS_LinkDriverEx+0x94>)
 8018b34:	7a5b      	ldrb	r3, [r3, #9]
 8018b36:	b2db      	uxtb	r3, r3
 8018b38:	461a      	mov	r2, r3
 8018b3a:	4b13      	ldr	r3, [pc, #76]	; (8018b88 <FATFS_LinkDriverEx+0x94>)
 8018b3c:	4413      	add	r3, r2
 8018b3e:	79fa      	ldrb	r2, [r7, #7]
 8018b40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8018b42:	4b11      	ldr	r3, [pc, #68]	; (8018b88 <FATFS_LinkDriverEx+0x94>)
 8018b44:	7a5b      	ldrb	r3, [r3, #9]
 8018b46:	b2db      	uxtb	r3, r3
 8018b48:	1c5a      	adds	r2, r3, #1
 8018b4a:	b2d1      	uxtb	r1, r2
 8018b4c:	4a0e      	ldr	r2, [pc, #56]	; (8018b88 <FATFS_LinkDriverEx+0x94>)
 8018b4e:	7251      	strb	r1, [r2, #9]
 8018b50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8018b52:	7dbb      	ldrb	r3, [r7, #22]
 8018b54:	3330      	adds	r3, #48	; 0x30
 8018b56:	b2da      	uxtb	r2, r3
 8018b58:	68bb      	ldr	r3, [r7, #8]
 8018b5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8018b5c:	68bb      	ldr	r3, [r7, #8]
 8018b5e:	3301      	adds	r3, #1
 8018b60:	223a      	movs	r2, #58	; 0x3a
 8018b62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8018b64:	68bb      	ldr	r3, [r7, #8]
 8018b66:	3302      	adds	r3, #2
 8018b68:	222f      	movs	r2, #47	; 0x2f
 8018b6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8018b6c:	68bb      	ldr	r3, [r7, #8]
 8018b6e:	3303      	adds	r3, #3
 8018b70:	2200      	movs	r2, #0
 8018b72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8018b74:	2300      	movs	r3, #0
 8018b76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8018b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8018b7a:	4618      	mov	r0, r3
 8018b7c:	371c      	adds	r7, #28
 8018b7e:	46bd      	mov	sp, r7
 8018b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b84:	4770      	bx	lr
 8018b86:	bf00      	nop
 8018b88:	240018dc 	.word	0x240018dc

08018b8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8018b8c:	b580      	push	{r7, lr}
 8018b8e:	b082      	sub	sp, #8
 8018b90:	af00      	add	r7, sp, #0
 8018b92:	6078      	str	r0, [r7, #4]
 8018b94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8018b96:	2200      	movs	r2, #0
 8018b98:	6839      	ldr	r1, [r7, #0]
 8018b9a:	6878      	ldr	r0, [r7, #4]
 8018b9c:	f7ff ffaa 	bl	8018af4 <FATFS_LinkDriverEx>
 8018ba0:	4603      	mov	r3, r0
}
 8018ba2:	4618      	mov	r0, r3
 8018ba4:	3708      	adds	r7, #8
 8018ba6:	46bd      	mov	sp, r7
 8018ba8:	bd80      	pop	{r7, pc}
	...

08018bac <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8018bac:	b480      	push	{r7}
 8018bae:	b085      	sub	sp, #20
 8018bb0:	af00      	add	r7, sp, #0
 8018bb2:	4603      	mov	r3, r0
 8018bb4:	6039      	str	r1, [r7, #0]
 8018bb6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8018bb8:	88fb      	ldrh	r3, [r7, #6]
 8018bba:	2b7f      	cmp	r3, #127	; 0x7f
 8018bbc:	d802      	bhi.n	8018bc4 <ff_convert+0x18>
		c = chr;
 8018bbe:	88fb      	ldrh	r3, [r7, #6]
 8018bc0:	81fb      	strh	r3, [r7, #14]
 8018bc2:	e025      	b.n	8018c10 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8018bc4:	683b      	ldr	r3, [r7, #0]
 8018bc6:	2b00      	cmp	r3, #0
 8018bc8:	d00b      	beq.n	8018be2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8018bca:	88fb      	ldrh	r3, [r7, #6]
 8018bcc:	2bff      	cmp	r3, #255	; 0xff
 8018bce:	d805      	bhi.n	8018bdc <ff_convert+0x30>
 8018bd0:	88fb      	ldrh	r3, [r7, #6]
 8018bd2:	3b80      	subs	r3, #128	; 0x80
 8018bd4:	4a12      	ldr	r2, [pc, #72]	; (8018c20 <ff_convert+0x74>)
 8018bd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018bda:	e000      	b.n	8018bde <ff_convert+0x32>
 8018bdc:	2300      	movs	r3, #0
 8018bde:	81fb      	strh	r3, [r7, #14]
 8018be0:	e016      	b.n	8018c10 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8018be2:	2300      	movs	r3, #0
 8018be4:	81fb      	strh	r3, [r7, #14]
 8018be6:	e009      	b.n	8018bfc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8018be8:	89fb      	ldrh	r3, [r7, #14]
 8018bea:	4a0d      	ldr	r2, [pc, #52]	; (8018c20 <ff_convert+0x74>)
 8018bec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8018bf0:	88fa      	ldrh	r2, [r7, #6]
 8018bf2:	429a      	cmp	r2, r3
 8018bf4:	d006      	beq.n	8018c04 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8018bf6:	89fb      	ldrh	r3, [r7, #14]
 8018bf8:	3301      	adds	r3, #1
 8018bfa:	81fb      	strh	r3, [r7, #14]
 8018bfc:	89fb      	ldrh	r3, [r7, #14]
 8018bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8018c00:	d9f2      	bls.n	8018be8 <ff_convert+0x3c>
 8018c02:	e000      	b.n	8018c06 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8018c04:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8018c06:	89fb      	ldrh	r3, [r7, #14]
 8018c08:	3380      	adds	r3, #128	; 0x80
 8018c0a:	b29b      	uxth	r3, r3
 8018c0c:	b2db      	uxtb	r3, r3
 8018c0e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8018c10:	89fb      	ldrh	r3, [r7, #14]
}
 8018c12:	4618      	mov	r0, r3
 8018c14:	3714      	adds	r7, #20
 8018c16:	46bd      	mov	sp, r7
 8018c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c1c:	4770      	bx	lr
 8018c1e:	bf00      	nop
 8018c20:	0801e0fc 	.word	0x0801e0fc

08018c24 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8018c24:	b480      	push	{r7}
 8018c26:	b087      	sub	sp, #28
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	4603      	mov	r3, r0
 8018c2c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8018c2e:	88fb      	ldrh	r3, [r7, #6]
 8018c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8018c34:	d201      	bcs.n	8018c3a <ff_wtoupper+0x16>
 8018c36:	4b3e      	ldr	r3, [pc, #248]	; (8018d30 <ff_wtoupper+0x10c>)
 8018c38:	e000      	b.n	8018c3c <ff_wtoupper+0x18>
 8018c3a:	4b3e      	ldr	r3, [pc, #248]	; (8018d34 <ff_wtoupper+0x110>)
 8018c3c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8018c3e:	697b      	ldr	r3, [r7, #20]
 8018c40:	1c9a      	adds	r2, r3, #2
 8018c42:	617a      	str	r2, [r7, #20]
 8018c44:	881b      	ldrh	r3, [r3, #0]
 8018c46:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8018c48:	8a7b      	ldrh	r3, [r7, #18]
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d068      	beq.n	8018d20 <ff_wtoupper+0xfc>
 8018c4e:	88fa      	ldrh	r2, [r7, #6]
 8018c50:	8a7b      	ldrh	r3, [r7, #18]
 8018c52:	429a      	cmp	r2, r3
 8018c54:	d364      	bcc.n	8018d20 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8018c56:	697b      	ldr	r3, [r7, #20]
 8018c58:	1c9a      	adds	r2, r3, #2
 8018c5a:	617a      	str	r2, [r7, #20]
 8018c5c:	881b      	ldrh	r3, [r3, #0]
 8018c5e:	823b      	strh	r3, [r7, #16]
 8018c60:	8a3b      	ldrh	r3, [r7, #16]
 8018c62:	0a1b      	lsrs	r3, r3, #8
 8018c64:	81fb      	strh	r3, [r7, #14]
 8018c66:	8a3b      	ldrh	r3, [r7, #16]
 8018c68:	b2db      	uxtb	r3, r3
 8018c6a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8018c6c:	88fa      	ldrh	r2, [r7, #6]
 8018c6e:	8a79      	ldrh	r1, [r7, #18]
 8018c70:	8a3b      	ldrh	r3, [r7, #16]
 8018c72:	440b      	add	r3, r1
 8018c74:	429a      	cmp	r2, r3
 8018c76:	da49      	bge.n	8018d0c <ff_wtoupper+0xe8>
			switch (cmd) {
 8018c78:	89fb      	ldrh	r3, [r7, #14]
 8018c7a:	2b08      	cmp	r3, #8
 8018c7c:	d84f      	bhi.n	8018d1e <ff_wtoupper+0xfa>
 8018c7e:	a201      	add	r2, pc, #4	; (adr r2, 8018c84 <ff_wtoupper+0x60>)
 8018c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018c84:	08018ca9 	.word	0x08018ca9
 8018c88:	08018cbb 	.word	0x08018cbb
 8018c8c:	08018cd1 	.word	0x08018cd1
 8018c90:	08018cd9 	.word	0x08018cd9
 8018c94:	08018ce1 	.word	0x08018ce1
 8018c98:	08018ce9 	.word	0x08018ce9
 8018c9c:	08018cf1 	.word	0x08018cf1
 8018ca0:	08018cf9 	.word	0x08018cf9
 8018ca4:	08018d01 	.word	0x08018d01
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8018ca8:	88fa      	ldrh	r2, [r7, #6]
 8018caa:	8a7b      	ldrh	r3, [r7, #18]
 8018cac:	1ad3      	subs	r3, r2, r3
 8018cae:	005b      	lsls	r3, r3, #1
 8018cb0:	697a      	ldr	r2, [r7, #20]
 8018cb2:	4413      	add	r3, r2
 8018cb4:	881b      	ldrh	r3, [r3, #0]
 8018cb6:	80fb      	strh	r3, [r7, #6]
 8018cb8:	e027      	b.n	8018d0a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8018cba:	88fa      	ldrh	r2, [r7, #6]
 8018cbc:	8a7b      	ldrh	r3, [r7, #18]
 8018cbe:	1ad3      	subs	r3, r2, r3
 8018cc0:	b29b      	uxth	r3, r3
 8018cc2:	f003 0301 	and.w	r3, r3, #1
 8018cc6:	b29b      	uxth	r3, r3
 8018cc8:	88fa      	ldrh	r2, [r7, #6]
 8018cca:	1ad3      	subs	r3, r2, r3
 8018ccc:	80fb      	strh	r3, [r7, #6]
 8018cce:	e01c      	b.n	8018d0a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8018cd0:	88fb      	ldrh	r3, [r7, #6]
 8018cd2:	3b10      	subs	r3, #16
 8018cd4:	80fb      	strh	r3, [r7, #6]
 8018cd6:	e018      	b.n	8018d0a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8018cd8:	88fb      	ldrh	r3, [r7, #6]
 8018cda:	3b20      	subs	r3, #32
 8018cdc:	80fb      	strh	r3, [r7, #6]
 8018cde:	e014      	b.n	8018d0a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8018ce0:	88fb      	ldrh	r3, [r7, #6]
 8018ce2:	3b30      	subs	r3, #48	; 0x30
 8018ce4:	80fb      	strh	r3, [r7, #6]
 8018ce6:	e010      	b.n	8018d0a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8018ce8:	88fb      	ldrh	r3, [r7, #6]
 8018cea:	3b1a      	subs	r3, #26
 8018cec:	80fb      	strh	r3, [r7, #6]
 8018cee:	e00c      	b.n	8018d0a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8018cf0:	88fb      	ldrh	r3, [r7, #6]
 8018cf2:	3308      	adds	r3, #8
 8018cf4:	80fb      	strh	r3, [r7, #6]
 8018cf6:	e008      	b.n	8018d0a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8018cf8:	88fb      	ldrh	r3, [r7, #6]
 8018cfa:	3b50      	subs	r3, #80	; 0x50
 8018cfc:	80fb      	strh	r3, [r7, #6]
 8018cfe:	e004      	b.n	8018d0a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8018d00:	88fb      	ldrh	r3, [r7, #6]
 8018d02:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8018d06:	80fb      	strh	r3, [r7, #6]
 8018d08:	bf00      	nop
			}
			break;
 8018d0a:	e008      	b.n	8018d1e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8018d0c:	89fb      	ldrh	r3, [r7, #14]
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d195      	bne.n	8018c3e <ff_wtoupper+0x1a>
 8018d12:	8a3b      	ldrh	r3, [r7, #16]
 8018d14:	005b      	lsls	r3, r3, #1
 8018d16:	697a      	ldr	r2, [r7, #20]
 8018d18:	4413      	add	r3, r2
 8018d1a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8018d1c:	e78f      	b.n	8018c3e <ff_wtoupper+0x1a>
			break;
 8018d1e:	bf00      	nop
	}

	return chr;
 8018d20:	88fb      	ldrh	r3, [r7, #6]
}
 8018d22:	4618      	mov	r0, r3
 8018d24:	371c      	adds	r7, #28
 8018d26:	46bd      	mov	sp, r7
 8018d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d2c:	4770      	bx	lr
 8018d2e:	bf00      	nop
 8018d30:	0801e1fc 	.word	0x0801e1fc
 8018d34:	0801e3f0 	.word	0x0801e3f0

08018d38 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8018d38:	b580      	push	{r7, lr}
 8018d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8018d3c:	2201      	movs	r2, #1
 8018d3e:	4913      	ldr	r1, [pc, #76]	; (8018d8c <MX_USB_DEVICE_Init+0x54>)
 8018d40:	4813      	ldr	r0, [pc, #76]	; (8018d90 <MX_USB_DEVICE_Init+0x58>)
 8018d42:	f7fb fd1b 	bl	801477c <USBD_Init>
 8018d46:	4603      	mov	r3, r0
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	d001      	beq.n	8018d50 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8018d4c:	f7e9 f98c 	bl	8002068 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8018d50:	4910      	ldr	r1, [pc, #64]	; (8018d94 <MX_USB_DEVICE_Init+0x5c>)
 8018d52:	480f      	ldr	r0, [pc, #60]	; (8018d90 <MX_USB_DEVICE_Init+0x58>)
 8018d54:	f7fb fd42 	bl	80147dc <USBD_RegisterClass>
 8018d58:	4603      	mov	r3, r0
 8018d5a:	2b00      	cmp	r3, #0
 8018d5c:	d001      	beq.n	8018d62 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8018d5e:	f7e9 f983 	bl	8002068 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8018d62:	490d      	ldr	r1, [pc, #52]	; (8018d98 <MX_USB_DEVICE_Init+0x60>)
 8018d64:	480a      	ldr	r0, [pc, #40]	; (8018d90 <MX_USB_DEVICE_Init+0x58>)
 8018d66:	f7fb fc39 	bl	80145dc <USBD_CDC_RegisterInterface>
 8018d6a:	4603      	mov	r3, r0
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d001      	beq.n	8018d74 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8018d70:	f7e9 f97a 	bl	8002068 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8018d74:	4806      	ldr	r0, [pc, #24]	; (8018d90 <MX_USB_DEVICE_Init+0x58>)
 8018d76:	f7fb fd67 	bl	8014848 <USBD_Start>
 8018d7a:	4603      	mov	r3, r0
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d001      	beq.n	8018d84 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8018d80:	f7e9 f972 	bl	8002068 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8018d84:	f7f0 fdec 	bl	8009960 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8018d88:	bf00      	nop
 8018d8a:	bd80      	pop	{r7, pc}
 8018d8c:	240000b0 	.word	0x240000b0
 8018d90:	240018e8 	.word	0x240018e8
 8018d94:	2400001c 	.word	0x2400001c
 8018d98:	2400009c 	.word	0x2400009c

08018d9c <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8018d9c:	b580      	push	{r7, lr}
 8018d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8018da0:	2200      	movs	r2, #0
 8018da2:	4905      	ldr	r1, [pc, #20]	; (8018db8 <CDC_Init_HS+0x1c>)
 8018da4:	4805      	ldr	r0, [pc, #20]	; (8018dbc <CDC_Init_HS+0x20>)
 8018da6:	f7fb fc33 	bl	8014610 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8018daa:	4905      	ldr	r1, [pc, #20]	; (8018dc0 <CDC_Init_HS+0x24>)
 8018dac:	4803      	ldr	r0, [pc, #12]	; (8018dbc <CDC_Init_HS+0x20>)
 8018dae:	f7fb fc51 	bl	8014654 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8018db2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8018db4:	4618      	mov	r0, r3
 8018db6:	bd80      	pop	{r7, pc}
 8018db8:	240023c4 	.word	0x240023c4
 8018dbc:	240018e8 	.word	0x240018e8
 8018dc0:	24001bc4 	.word	0x24001bc4

08018dc4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8018dc4:	b480      	push	{r7}
 8018dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8018dc8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8018dca:	4618      	mov	r0, r3
 8018dcc:	46bd      	mov	sp, r7
 8018dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018dd2:	4770      	bx	lr

08018dd4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8018dd4:	b480      	push	{r7}
 8018dd6:	b083      	sub	sp, #12
 8018dd8:	af00      	add	r7, sp, #0
 8018dda:	4603      	mov	r3, r0
 8018ddc:	6039      	str	r1, [r7, #0]
 8018dde:	71fb      	strb	r3, [r7, #7]
 8018de0:	4613      	mov	r3, r2
 8018de2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8018de4:	79fb      	ldrb	r3, [r7, #7]
 8018de6:	2b23      	cmp	r3, #35	; 0x23
 8018de8:	d84a      	bhi.n	8018e80 <CDC_Control_HS+0xac>
 8018dea:	a201      	add	r2, pc, #4	; (adr r2, 8018df0 <CDC_Control_HS+0x1c>)
 8018dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018df0:	08018e81 	.word	0x08018e81
 8018df4:	08018e81 	.word	0x08018e81
 8018df8:	08018e81 	.word	0x08018e81
 8018dfc:	08018e81 	.word	0x08018e81
 8018e00:	08018e81 	.word	0x08018e81
 8018e04:	08018e81 	.word	0x08018e81
 8018e08:	08018e81 	.word	0x08018e81
 8018e0c:	08018e81 	.word	0x08018e81
 8018e10:	08018e81 	.word	0x08018e81
 8018e14:	08018e81 	.word	0x08018e81
 8018e18:	08018e81 	.word	0x08018e81
 8018e1c:	08018e81 	.word	0x08018e81
 8018e20:	08018e81 	.word	0x08018e81
 8018e24:	08018e81 	.word	0x08018e81
 8018e28:	08018e81 	.word	0x08018e81
 8018e2c:	08018e81 	.word	0x08018e81
 8018e30:	08018e81 	.word	0x08018e81
 8018e34:	08018e81 	.word	0x08018e81
 8018e38:	08018e81 	.word	0x08018e81
 8018e3c:	08018e81 	.word	0x08018e81
 8018e40:	08018e81 	.word	0x08018e81
 8018e44:	08018e81 	.word	0x08018e81
 8018e48:	08018e81 	.word	0x08018e81
 8018e4c:	08018e81 	.word	0x08018e81
 8018e50:	08018e81 	.word	0x08018e81
 8018e54:	08018e81 	.word	0x08018e81
 8018e58:	08018e81 	.word	0x08018e81
 8018e5c:	08018e81 	.word	0x08018e81
 8018e60:	08018e81 	.word	0x08018e81
 8018e64:	08018e81 	.word	0x08018e81
 8018e68:	08018e81 	.word	0x08018e81
 8018e6c:	08018e81 	.word	0x08018e81
 8018e70:	08018e81 	.word	0x08018e81
 8018e74:	08018e81 	.word	0x08018e81
 8018e78:	08018e81 	.word	0x08018e81
 8018e7c:	08018e81 	.word	0x08018e81
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8018e80:	bf00      	nop
  }

  return (USBD_OK);
 8018e82:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8018e84:	4618      	mov	r0, r3
 8018e86:	370c      	adds	r7, #12
 8018e88:	46bd      	mov	sp, r7
 8018e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e8e:	4770      	bx	lr

08018e90 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8018e90:	b580      	push	{r7, lr}
 8018e92:	b082      	sub	sp, #8
 8018e94:	af00      	add	r7, sp, #0
 8018e96:	6078      	str	r0, [r7, #4]
 8018e98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8018e9a:	6879      	ldr	r1, [r7, #4]
 8018e9c:	4805      	ldr	r0, [pc, #20]	; (8018eb4 <CDC_Receive_HS+0x24>)
 8018e9e:	f7fb fbd9 	bl	8014654 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8018ea2:	4804      	ldr	r0, [pc, #16]	; (8018eb4 <CDC_Receive_HS+0x24>)
 8018ea4:	f7fb fc34 	bl	8014710 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8018ea8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8018eaa:	4618      	mov	r0, r3
 8018eac:	3708      	adds	r7, #8
 8018eae:	46bd      	mov	sp, r7
 8018eb0:	bd80      	pop	{r7, pc}
 8018eb2:	bf00      	nop
 8018eb4:	240018e8 	.word	0x240018e8

08018eb8 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8018eb8:	b580      	push	{r7, lr}
 8018eba:	b084      	sub	sp, #16
 8018ebc:	af00      	add	r7, sp, #0
 8018ebe:	6078      	str	r0, [r7, #4]
 8018ec0:	460b      	mov	r3, r1
 8018ec2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8018ec4:	2300      	movs	r3, #0
 8018ec6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8018ec8:	4b0d      	ldr	r3, [pc, #52]	; (8018f00 <CDC_Transmit_HS+0x48>)
 8018eca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8018ece:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8018ed0:	68bb      	ldr	r3, [r7, #8]
 8018ed2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8018ed6:	2b00      	cmp	r3, #0
 8018ed8:	d001      	beq.n	8018ede <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8018eda:	2301      	movs	r3, #1
 8018edc:	e00b      	b.n	8018ef6 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8018ede:	887b      	ldrh	r3, [r7, #2]
 8018ee0:	461a      	mov	r2, r3
 8018ee2:	6879      	ldr	r1, [r7, #4]
 8018ee4:	4806      	ldr	r0, [pc, #24]	; (8018f00 <CDC_Transmit_HS+0x48>)
 8018ee6:	f7fb fb93 	bl	8014610 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8018eea:	4805      	ldr	r0, [pc, #20]	; (8018f00 <CDC_Transmit_HS+0x48>)
 8018eec:	f7fb fbd0 	bl	8014690 <USBD_CDC_TransmitPacket>
 8018ef0:	4603      	mov	r3, r0
 8018ef2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8018ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8018ef6:	4618      	mov	r0, r3
 8018ef8:	3710      	adds	r7, #16
 8018efa:	46bd      	mov	sp, r7
 8018efc:	bd80      	pop	{r7, pc}
 8018efe:	bf00      	nop
 8018f00:	240018e8 	.word	0x240018e8

08018f04 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8018f04:	b480      	push	{r7}
 8018f06:	b087      	sub	sp, #28
 8018f08:	af00      	add	r7, sp, #0
 8018f0a:	60f8      	str	r0, [r7, #12]
 8018f0c:	60b9      	str	r1, [r7, #8]
 8018f0e:	4613      	mov	r3, r2
 8018f10:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8018f12:	2300      	movs	r3, #0
 8018f14:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8018f16:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	371c      	adds	r7, #28
 8018f1e:	46bd      	mov	sp, r7
 8018f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f24:	4770      	bx	lr
	...

08018f28 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018f28:	b480      	push	{r7}
 8018f2a:	b083      	sub	sp, #12
 8018f2c:	af00      	add	r7, sp, #0
 8018f2e:	4603      	mov	r3, r0
 8018f30:	6039      	str	r1, [r7, #0]
 8018f32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8018f34:	683b      	ldr	r3, [r7, #0]
 8018f36:	2212      	movs	r2, #18
 8018f38:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8018f3a:	4b03      	ldr	r3, [pc, #12]	; (8018f48 <USBD_HS_DeviceDescriptor+0x20>)
}
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	370c      	adds	r7, #12
 8018f40:	46bd      	mov	sp, r7
 8018f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f46:	4770      	bx	lr
 8018f48:	240000cc 	.word	0x240000cc

08018f4c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018f4c:	b480      	push	{r7}
 8018f4e:	b083      	sub	sp, #12
 8018f50:	af00      	add	r7, sp, #0
 8018f52:	4603      	mov	r3, r0
 8018f54:	6039      	str	r1, [r7, #0]
 8018f56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018f58:	683b      	ldr	r3, [r7, #0]
 8018f5a:	2204      	movs	r2, #4
 8018f5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018f5e:	4b03      	ldr	r3, [pc, #12]	; (8018f6c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8018f60:	4618      	mov	r0, r3
 8018f62:	370c      	adds	r7, #12
 8018f64:	46bd      	mov	sp, r7
 8018f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f6a:	4770      	bx	lr
 8018f6c:	240000e0 	.word	0x240000e0

08018f70 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018f70:	b580      	push	{r7, lr}
 8018f72:	b082      	sub	sp, #8
 8018f74:	af00      	add	r7, sp, #0
 8018f76:	4603      	mov	r3, r0
 8018f78:	6039      	str	r1, [r7, #0]
 8018f7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018f7c:	79fb      	ldrb	r3, [r7, #7]
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d105      	bne.n	8018f8e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8018f82:	683a      	ldr	r2, [r7, #0]
 8018f84:	4907      	ldr	r1, [pc, #28]	; (8018fa4 <USBD_HS_ProductStrDescriptor+0x34>)
 8018f86:	4808      	ldr	r0, [pc, #32]	; (8018fa8 <USBD_HS_ProductStrDescriptor+0x38>)
 8018f88:	f7fc fe10 	bl	8015bac <USBD_GetString>
 8018f8c:	e004      	b.n	8018f98 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8018f8e:	683a      	ldr	r2, [r7, #0]
 8018f90:	4904      	ldr	r1, [pc, #16]	; (8018fa4 <USBD_HS_ProductStrDescriptor+0x34>)
 8018f92:	4805      	ldr	r0, [pc, #20]	; (8018fa8 <USBD_HS_ProductStrDescriptor+0x38>)
 8018f94:	f7fc fe0a 	bl	8015bac <USBD_GetString>
  }
  return USBD_StrDesc;
 8018f98:	4b02      	ldr	r3, [pc, #8]	; (8018fa4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8018f9a:	4618      	mov	r0, r3
 8018f9c:	3708      	adds	r7, #8
 8018f9e:	46bd      	mov	sp, r7
 8018fa0:	bd80      	pop	{r7, pc}
 8018fa2:	bf00      	nop
 8018fa4:	24002bc4 	.word	0x24002bc4
 8018fa8:	0801df6c 	.word	0x0801df6c

08018fac <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018fac:	b580      	push	{r7, lr}
 8018fae:	b082      	sub	sp, #8
 8018fb0:	af00      	add	r7, sp, #0
 8018fb2:	4603      	mov	r3, r0
 8018fb4:	6039      	str	r1, [r7, #0]
 8018fb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018fb8:	683a      	ldr	r2, [r7, #0]
 8018fba:	4904      	ldr	r1, [pc, #16]	; (8018fcc <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8018fbc:	4804      	ldr	r0, [pc, #16]	; (8018fd0 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8018fbe:	f7fc fdf5 	bl	8015bac <USBD_GetString>
  return USBD_StrDesc;
 8018fc2:	4b02      	ldr	r3, [pc, #8]	; (8018fcc <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8018fc4:	4618      	mov	r0, r3
 8018fc6:	3708      	adds	r7, #8
 8018fc8:	46bd      	mov	sp, r7
 8018fca:	bd80      	pop	{r7, pc}
 8018fcc:	24002bc4 	.word	0x24002bc4
 8018fd0:	0801df88 	.word	0x0801df88

08018fd4 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018fd4:	b580      	push	{r7, lr}
 8018fd6:	b082      	sub	sp, #8
 8018fd8:	af00      	add	r7, sp, #0
 8018fda:	4603      	mov	r3, r0
 8018fdc:	6039      	str	r1, [r7, #0]
 8018fde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018fe0:	683b      	ldr	r3, [r7, #0]
 8018fe2:	221a      	movs	r2, #26
 8018fe4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018fe6:	f000 f843 	bl	8019070 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8018fea:	4b02      	ldr	r3, [pc, #8]	; (8018ff4 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8018fec:	4618      	mov	r0, r3
 8018fee:	3708      	adds	r7, #8
 8018ff0:	46bd      	mov	sp, r7
 8018ff2:	bd80      	pop	{r7, pc}
 8018ff4:	240000e4 	.word	0x240000e4

08018ff8 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018ff8:	b580      	push	{r7, lr}
 8018ffa:	b082      	sub	sp, #8
 8018ffc:	af00      	add	r7, sp, #0
 8018ffe:	4603      	mov	r3, r0
 8019000:	6039      	str	r1, [r7, #0]
 8019002:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019004:	79fb      	ldrb	r3, [r7, #7]
 8019006:	2b00      	cmp	r3, #0
 8019008:	d105      	bne.n	8019016 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801900a:	683a      	ldr	r2, [r7, #0]
 801900c:	4907      	ldr	r1, [pc, #28]	; (801902c <USBD_HS_ConfigStrDescriptor+0x34>)
 801900e:	4808      	ldr	r0, [pc, #32]	; (8019030 <USBD_HS_ConfigStrDescriptor+0x38>)
 8019010:	f7fc fdcc 	bl	8015bac <USBD_GetString>
 8019014:	e004      	b.n	8019020 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8019016:	683a      	ldr	r2, [r7, #0]
 8019018:	4904      	ldr	r1, [pc, #16]	; (801902c <USBD_HS_ConfigStrDescriptor+0x34>)
 801901a:	4805      	ldr	r0, [pc, #20]	; (8019030 <USBD_HS_ConfigStrDescriptor+0x38>)
 801901c:	f7fc fdc6 	bl	8015bac <USBD_GetString>
  }
  return USBD_StrDesc;
 8019020:	4b02      	ldr	r3, [pc, #8]	; (801902c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8019022:	4618      	mov	r0, r3
 8019024:	3708      	adds	r7, #8
 8019026:	46bd      	mov	sp, r7
 8019028:	bd80      	pop	{r7, pc}
 801902a:	bf00      	nop
 801902c:	24002bc4 	.word	0x24002bc4
 8019030:	0801df8c 	.word	0x0801df8c

08019034 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019034:	b580      	push	{r7, lr}
 8019036:	b082      	sub	sp, #8
 8019038:	af00      	add	r7, sp, #0
 801903a:	4603      	mov	r3, r0
 801903c:	6039      	str	r1, [r7, #0]
 801903e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019040:	79fb      	ldrb	r3, [r7, #7]
 8019042:	2b00      	cmp	r3, #0
 8019044:	d105      	bne.n	8019052 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8019046:	683a      	ldr	r2, [r7, #0]
 8019048:	4907      	ldr	r1, [pc, #28]	; (8019068 <USBD_HS_InterfaceStrDescriptor+0x34>)
 801904a:	4808      	ldr	r0, [pc, #32]	; (801906c <USBD_HS_InterfaceStrDescriptor+0x38>)
 801904c:	f7fc fdae 	bl	8015bac <USBD_GetString>
 8019050:	e004      	b.n	801905c <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8019052:	683a      	ldr	r2, [r7, #0]
 8019054:	4904      	ldr	r1, [pc, #16]	; (8019068 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8019056:	4805      	ldr	r0, [pc, #20]	; (801906c <USBD_HS_InterfaceStrDescriptor+0x38>)
 8019058:	f7fc fda8 	bl	8015bac <USBD_GetString>
  }
  return USBD_StrDesc;
 801905c:	4b02      	ldr	r3, [pc, #8]	; (8019068 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 801905e:	4618      	mov	r0, r3
 8019060:	3708      	adds	r7, #8
 8019062:	46bd      	mov	sp, r7
 8019064:	bd80      	pop	{r7, pc}
 8019066:	bf00      	nop
 8019068:	24002bc4 	.word	0x24002bc4
 801906c:	0801df98 	.word	0x0801df98

08019070 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019070:	b580      	push	{r7, lr}
 8019072:	b084      	sub	sp, #16
 8019074:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019076:	4b0f      	ldr	r3, [pc, #60]	; (80190b4 <Get_SerialNum+0x44>)
 8019078:	681b      	ldr	r3, [r3, #0]
 801907a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801907c:	4b0e      	ldr	r3, [pc, #56]	; (80190b8 <Get_SerialNum+0x48>)
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019082:	4b0e      	ldr	r3, [pc, #56]	; (80190bc <Get_SerialNum+0x4c>)
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019088:	68fa      	ldr	r2, [r7, #12]
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	4413      	add	r3, r2
 801908e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019090:	68fb      	ldr	r3, [r7, #12]
 8019092:	2b00      	cmp	r3, #0
 8019094:	d009      	beq.n	80190aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019096:	2208      	movs	r2, #8
 8019098:	4909      	ldr	r1, [pc, #36]	; (80190c0 <Get_SerialNum+0x50>)
 801909a:	68f8      	ldr	r0, [r7, #12]
 801909c:	f000 f814 	bl	80190c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80190a0:	2204      	movs	r2, #4
 80190a2:	4908      	ldr	r1, [pc, #32]	; (80190c4 <Get_SerialNum+0x54>)
 80190a4:	68b8      	ldr	r0, [r7, #8]
 80190a6:	f000 f80f 	bl	80190c8 <IntToUnicode>
  }
}
 80190aa:	bf00      	nop
 80190ac:	3710      	adds	r7, #16
 80190ae:	46bd      	mov	sp, r7
 80190b0:	bd80      	pop	{r7, pc}
 80190b2:	bf00      	nop
 80190b4:	1ff1e800 	.word	0x1ff1e800
 80190b8:	1ff1e804 	.word	0x1ff1e804
 80190bc:	1ff1e808 	.word	0x1ff1e808
 80190c0:	240000e6 	.word	0x240000e6
 80190c4:	240000f6 	.word	0x240000f6

080190c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80190c8:	b480      	push	{r7}
 80190ca:	b087      	sub	sp, #28
 80190cc:	af00      	add	r7, sp, #0
 80190ce:	60f8      	str	r0, [r7, #12]
 80190d0:	60b9      	str	r1, [r7, #8]
 80190d2:	4613      	mov	r3, r2
 80190d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80190d6:	2300      	movs	r3, #0
 80190d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80190da:	2300      	movs	r3, #0
 80190dc:	75fb      	strb	r3, [r7, #23]
 80190de:	e027      	b.n	8019130 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80190e0:	68fb      	ldr	r3, [r7, #12]
 80190e2:	0f1b      	lsrs	r3, r3, #28
 80190e4:	2b09      	cmp	r3, #9
 80190e6:	d80b      	bhi.n	8019100 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	0f1b      	lsrs	r3, r3, #28
 80190ec:	b2da      	uxtb	r2, r3
 80190ee:	7dfb      	ldrb	r3, [r7, #23]
 80190f0:	005b      	lsls	r3, r3, #1
 80190f2:	4619      	mov	r1, r3
 80190f4:	68bb      	ldr	r3, [r7, #8]
 80190f6:	440b      	add	r3, r1
 80190f8:	3230      	adds	r2, #48	; 0x30
 80190fa:	b2d2      	uxtb	r2, r2
 80190fc:	701a      	strb	r2, [r3, #0]
 80190fe:	e00a      	b.n	8019116 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	0f1b      	lsrs	r3, r3, #28
 8019104:	b2da      	uxtb	r2, r3
 8019106:	7dfb      	ldrb	r3, [r7, #23]
 8019108:	005b      	lsls	r3, r3, #1
 801910a:	4619      	mov	r1, r3
 801910c:	68bb      	ldr	r3, [r7, #8]
 801910e:	440b      	add	r3, r1
 8019110:	3237      	adds	r2, #55	; 0x37
 8019112:	b2d2      	uxtb	r2, r2
 8019114:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	011b      	lsls	r3, r3, #4
 801911a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801911c:	7dfb      	ldrb	r3, [r7, #23]
 801911e:	005b      	lsls	r3, r3, #1
 8019120:	3301      	adds	r3, #1
 8019122:	68ba      	ldr	r2, [r7, #8]
 8019124:	4413      	add	r3, r2
 8019126:	2200      	movs	r2, #0
 8019128:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801912a:	7dfb      	ldrb	r3, [r7, #23]
 801912c:	3301      	adds	r3, #1
 801912e:	75fb      	strb	r3, [r7, #23]
 8019130:	7dfa      	ldrb	r2, [r7, #23]
 8019132:	79fb      	ldrb	r3, [r7, #7]
 8019134:	429a      	cmp	r2, r3
 8019136:	d3d3      	bcc.n	80190e0 <IntToUnicode+0x18>
  }
}
 8019138:	bf00      	nop
 801913a:	bf00      	nop
 801913c:	371c      	adds	r7, #28
 801913e:	46bd      	mov	sp, r7
 8019140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019144:	4770      	bx	lr
	...

08019148 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019148:	b580      	push	{r7, lr}
 801914a:	b0b2      	sub	sp, #200	; 0xc8
 801914c:	af00      	add	r7, sp, #0
 801914e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8019150:	f107 0310 	add.w	r3, r7, #16
 8019154:	22b8      	movs	r2, #184	; 0xb8
 8019156:	2100      	movs	r1, #0
 8019158:	4618      	mov	r0, r3
 801915a:	f000 fb39 	bl	80197d0 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801915e:	687b      	ldr	r3, [r7, #4]
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	4a1a      	ldr	r2, [pc, #104]	; (80191cc <HAL_PCD_MspInit+0x84>)
 8019164:	4293      	cmp	r3, r2
 8019166:	d12c      	bne.n	80191c2 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8019168:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801916c:	f04f 0300 	mov.w	r3, #0
 8019170:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8019174:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8019178:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801917c:	f107 0310 	add.w	r3, r7, #16
 8019180:	4618      	mov	r0, r3
 8019182:	f7f1 fbcd 	bl	800a920 <HAL_RCCEx_PeriphCLKConfig>
 8019186:	4603      	mov	r3, r0
 8019188:	2b00      	cmp	r3, #0
 801918a:	d001      	beq.n	8019190 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 801918c:	f7e8 ff6c 	bl	8002068 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8019190:	f7f0 fbe6 	bl	8009960 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8019194:	4b0e      	ldr	r3, [pc, #56]	; (80191d0 <HAL_PCD_MspInit+0x88>)
 8019196:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801919a:	4a0d      	ldr	r2, [pc, #52]	; (80191d0 <HAL_PCD_MspInit+0x88>)
 801919c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80191a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80191a4:	4b0a      	ldr	r3, [pc, #40]	; (80191d0 <HAL_PCD_MspInit+0x88>)
 80191a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80191aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80191ae:	60fb      	str	r3, [r7, #12]
 80191b0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80191b2:	2200      	movs	r2, #0
 80191b4:	2100      	movs	r1, #0
 80191b6:	204d      	movs	r0, #77	; 0x4d
 80191b8:	f7ec f96d 	bl	8005496 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80191bc:	204d      	movs	r0, #77	; 0x4d
 80191be:	f7ec f984 	bl	80054ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80191c2:	bf00      	nop
 80191c4:	37c8      	adds	r7, #200	; 0xc8
 80191c6:	46bd      	mov	sp, r7
 80191c8:	bd80      	pop	{r7, pc}
 80191ca:	bf00      	nop
 80191cc:	40040000 	.word	0x40040000
 80191d0:	58024400 	.word	0x58024400

080191d4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80191d4:	b580      	push	{r7, lr}
 80191d6:	b082      	sub	sp, #8
 80191d8:	af00      	add	r7, sp, #0
 80191da:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80191dc:	687b      	ldr	r3, [r7, #4]
 80191de:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80191e2:	687b      	ldr	r3, [r7, #4]
 80191e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80191e8:	4619      	mov	r1, r3
 80191ea:	4610      	mov	r0, r2
 80191ec:	f7fb fb79 	bl	80148e2 <USBD_LL_SetupStage>
}
 80191f0:	bf00      	nop
 80191f2:	3708      	adds	r7, #8
 80191f4:	46bd      	mov	sp, r7
 80191f6:	bd80      	pop	{r7, pc}

080191f8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80191f8:	b580      	push	{r7, lr}
 80191fa:	b082      	sub	sp, #8
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	6078      	str	r0, [r7, #4]
 8019200:	460b      	mov	r3, r1
 8019202:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019204:	687b      	ldr	r3, [r7, #4]
 8019206:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801920a:	78fa      	ldrb	r2, [r7, #3]
 801920c:	6879      	ldr	r1, [r7, #4]
 801920e:	4613      	mov	r3, r2
 8019210:	00db      	lsls	r3, r3, #3
 8019212:	4413      	add	r3, r2
 8019214:	009b      	lsls	r3, r3, #2
 8019216:	440b      	add	r3, r1
 8019218:	f503 7322 	add.w	r3, r3, #648	; 0x288
 801921c:	681a      	ldr	r2, [r3, #0]
 801921e:	78fb      	ldrb	r3, [r7, #3]
 8019220:	4619      	mov	r1, r3
 8019222:	f7fb fbb3 	bl	801498c <USBD_LL_DataOutStage>
}
 8019226:	bf00      	nop
 8019228:	3708      	adds	r7, #8
 801922a:	46bd      	mov	sp, r7
 801922c:	bd80      	pop	{r7, pc}

0801922e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801922e:	b580      	push	{r7, lr}
 8019230:	b082      	sub	sp, #8
 8019232:	af00      	add	r7, sp, #0
 8019234:	6078      	str	r0, [r7, #4]
 8019236:	460b      	mov	r3, r1
 8019238:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8019240:	78fa      	ldrb	r2, [r7, #3]
 8019242:	6879      	ldr	r1, [r7, #4]
 8019244:	4613      	mov	r3, r2
 8019246:	00db      	lsls	r3, r3, #3
 8019248:	4413      	add	r3, r2
 801924a:	009b      	lsls	r3, r3, #2
 801924c:	440b      	add	r3, r1
 801924e:	3348      	adds	r3, #72	; 0x48
 8019250:	681a      	ldr	r2, [r3, #0]
 8019252:	78fb      	ldrb	r3, [r7, #3]
 8019254:	4619      	mov	r1, r3
 8019256:	f7fb fc4c 	bl	8014af2 <USBD_LL_DataInStage>
}
 801925a:	bf00      	nop
 801925c:	3708      	adds	r7, #8
 801925e:	46bd      	mov	sp, r7
 8019260:	bd80      	pop	{r7, pc}

08019262 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019262:	b580      	push	{r7, lr}
 8019264:	b082      	sub	sp, #8
 8019266:	af00      	add	r7, sp, #0
 8019268:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8019270:	4618      	mov	r0, r3
 8019272:	f7fb fd86 	bl	8014d82 <USBD_LL_SOF>
}
 8019276:	bf00      	nop
 8019278:	3708      	adds	r7, #8
 801927a:	46bd      	mov	sp, r7
 801927c:	bd80      	pop	{r7, pc}

0801927e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801927e:	b580      	push	{r7, lr}
 8019280:	b084      	sub	sp, #16
 8019282:	af00      	add	r7, sp, #0
 8019284:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019286:	2301      	movs	r3, #1
 8019288:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	691b      	ldr	r3, [r3, #16]
 801928e:	2b00      	cmp	r3, #0
 8019290:	d102      	bne.n	8019298 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8019292:	2300      	movs	r3, #0
 8019294:	73fb      	strb	r3, [r7, #15]
 8019296:	e008      	b.n	80192aa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	691b      	ldr	r3, [r3, #16]
 801929c:	2b02      	cmp	r3, #2
 801929e:	d102      	bne.n	80192a6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80192a0:	2301      	movs	r3, #1
 80192a2:	73fb      	strb	r3, [r7, #15]
 80192a4:	e001      	b.n	80192aa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80192a6:	f7e8 fedf 	bl	8002068 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80192b0:	7bfa      	ldrb	r2, [r7, #15]
 80192b2:	4611      	mov	r1, r2
 80192b4:	4618      	mov	r0, r3
 80192b6:	f7fb fd20 	bl	8014cfa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80192ba:	687b      	ldr	r3, [r7, #4]
 80192bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80192c0:	4618      	mov	r0, r3
 80192c2:	f7fb fcc8 	bl	8014c56 <USBD_LL_Reset>
}
 80192c6:	bf00      	nop
 80192c8:	3710      	adds	r7, #16
 80192ca:	46bd      	mov	sp, r7
 80192cc:	bd80      	pop	{r7, pc}
	...

080192d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80192d0:	b580      	push	{r7, lr}
 80192d2:	b082      	sub	sp, #8
 80192d4:	af00      	add	r7, sp, #0
 80192d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80192de:	4618      	mov	r0, r3
 80192e0:	f7fb fd1b 	bl	8014d1a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	687a      	ldr	r2, [r7, #4]
 80192f0:	6812      	ldr	r2, [r2, #0]
 80192f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80192f6:	f043 0301 	orr.w	r3, r3, #1
 80192fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80192fc:	687b      	ldr	r3, [r7, #4]
 80192fe:	6a1b      	ldr	r3, [r3, #32]
 8019300:	2b00      	cmp	r3, #0
 8019302:	d005      	beq.n	8019310 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019304:	4b04      	ldr	r3, [pc, #16]	; (8019318 <HAL_PCD_SuspendCallback+0x48>)
 8019306:	691b      	ldr	r3, [r3, #16]
 8019308:	4a03      	ldr	r2, [pc, #12]	; (8019318 <HAL_PCD_SuspendCallback+0x48>)
 801930a:	f043 0306 	orr.w	r3, r3, #6
 801930e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8019310:	bf00      	nop
 8019312:	3708      	adds	r7, #8
 8019314:	46bd      	mov	sp, r7
 8019316:	bd80      	pop	{r7, pc}
 8019318:	e000ed00 	.word	0xe000ed00

0801931c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801931c:	b580      	push	{r7, lr}
 801931e:	b082      	sub	sp, #8
 8019320:	af00      	add	r7, sp, #0
 8019322:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801932a:	4618      	mov	r0, r3
 801932c:	f7fb fd11 	bl	8014d52 <USBD_LL_Resume>
}
 8019330:	bf00      	nop
 8019332:	3708      	adds	r7, #8
 8019334:	46bd      	mov	sp, r7
 8019336:	bd80      	pop	{r7, pc}

08019338 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019338:	b580      	push	{r7, lr}
 801933a:	b082      	sub	sp, #8
 801933c:	af00      	add	r7, sp, #0
 801933e:	6078      	str	r0, [r7, #4]
 8019340:	460b      	mov	r3, r1
 8019342:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801934a:	78fa      	ldrb	r2, [r7, #3]
 801934c:	4611      	mov	r1, r2
 801934e:	4618      	mov	r0, r3
 8019350:	f7fb fd69 	bl	8014e26 <USBD_LL_IsoOUTIncomplete>
}
 8019354:	bf00      	nop
 8019356:	3708      	adds	r7, #8
 8019358:	46bd      	mov	sp, r7
 801935a:	bd80      	pop	{r7, pc}

0801935c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801935c:	b580      	push	{r7, lr}
 801935e:	b082      	sub	sp, #8
 8019360:	af00      	add	r7, sp, #0
 8019362:	6078      	str	r0, [r7, #4]
 8019364:	460b      	mov	r3, r1
 8019366:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801936e:	78fa      	ldrb	r2, [r7, #3]
 8019370:	4611      	mov	r1, r2
 8019372:	4618      	mov	r0, r3
 8019374:	f7fb fd25 	bl	8014dc2 <USBD_LL_IsoINIncomplete>
}
 8019378:	bf00      	nop
 801937a:	3708      	adds	r7, #8
 801937c:	46bd      	mov	sp, r7
 801937e:	bd80      	pop	{r7, pc}

08019380 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019380:	b580      	push	{r7, lr}
 8019382:	b082      	sub	sp, #8
 8019384:	af00      	add	r7, sp, #0
 8019386:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019388:	687b      	ldr	r3, [r7, #4]
 801938a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801938e:	4618      	mov	r0, r3
 8019390:	f7fb fd7b 	bl	8014e8a <USBD_LL_DevConnected>
}
 8019394:	bf00      	nop
 8019396:	3708      	adds	r7, #8
 8019398:	46bd      	mov	sp, r7
 801939a:	bd80      	pop	{r7, pc}

0801939c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801939c:	b580      	push	{r7, lr}
 801939e:	b082      	sub	sp, #8
 80193a0:	af00      	add	r7, sp, #0
 80193a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80193a4:	687b      	ldr	r3, [r7, #4]
 80193a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80193aa:	4618      	mov	r0, r3
 80193ac:	f7fb fd78 	bl	8014ea0 <USBD_LL_DevDisconnected>
}
 80193b0:	bf00      	nop
 80193b2:	3708      	adds	r7, #8
 80193b4:	46bd      	mov	sp, r7
 80193b6:	bd80      	pop	{r7, pc}

080193b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80193b8:	b580      	push	{r7, lr}
 80193ba:	b082      	sub	sp, #8
 80193bc:	af00      	add	r7, sp, #0
 80193be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	781b      	ldrb	r3, [r3, #0]
 80193c4:	2b01      	cmp	r3, #1
 80193c6:	d140      	bne.n	801944a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80193c8:	4a22      	ldr	r2, [pc, #136]	; (8019454 <USBD_LL_Init+0x9c>)
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 80193d0:	687b      	ldr	r3, [r7, #4]
 80193d2:	4a20      	ldr	r2, [pc, #128]	; (8019454 <USBD_LL_Init+0x9c>)
 80193d4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80193d8:	4b1e      	ldr	r3, [pc, #120]	; (8019454 <USBD_LL_Init+0x9c>)
 80193da:	4a1f      	ldr	r2, [pc, #124]	; (8019458 <USBD_LL_Init+0xa0>)
 80193dc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 80193de:	4b1d      	ldr	r3, [pc, #116]	; (8019454 <USBD_LL_Init+0x9c>)
 80193e0:	2209      	movs	r2, #9
 80193e2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80193e4:	4b1b      	ldr	r3, [pc, #108]	; (8019454 <USBD_LL_Init+0x9c>)
 80193e6:	2202      	movs	r2, #2
 80193e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80193ea:	4b1a      	ldr	r3, [pc, #104]	; (8019454 <USBD_LL_Init+0x9c>)
 80193ec:	2200      	movs	r2, #0
 80193ee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80193f0:	4b18      	ldr	r3, [pc, #96]	; (8019454 <USBD_LL_Init+0x9c>)
 80193f2:	2202      	movs	r2, #2
 80193f4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80193f6:	4b17      	ldr	r3, [pc, #92]	; (8019454 <USBD_LL_Init+0x9c>)
 80193f8:	2200      	movs	r2, #0
 80193fa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80193fc:	4b15      	ldr	r3, [pc, #84]	; (8019454 <USBD_LL_Init+0x9c>)
 80193fe:	2200      	movs	r2, #0
 8019400:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8019402:	4b14      	ldr	r3, [pc, #80]	; (8019454 <USBD_LL_Init+0x9c>)
 8019404:	2200      	movs	r2, #0
 8019406:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8019408:	4b12      	ldr	r3, [pc, #72]	; (8019454 <USBD_LL_Init+0x9c>)
 801940a:	2200      	movs	r2, #0
 801940c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801940e:	4b11      	ldr	r3, [pc, #68]	; (8019454 <USBD_LL_Init+0x9c>)
 8019410:	2200      	movs	r2, #0
 8019412:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8019414:	4b0f      	ldr	r3, [pc, #60]	; (8019454 <USBD_LL_Init+0x9c>)
 8019416:	2200      	movs	r2, #0
 8019418:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801941a:	480e      	ldr	r0, [pc, #56]	; (8019454 <USBD_LL_Init+0x9c>)
 801941c:	f7ee ffad 	bl	800837a <HAL_PCD_Init>
 8019420:	4603      	mov	r3, r0
 8019422:	2b00      	cmp	r3, #0
 8019424:	d001      	beq.n	801942a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8019426:	f7e8 fe1f 	bl	8002068 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801942a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801942e:	4809      	ldr	r0, [pc, #36]	; (8019454 <USBD_LL_Init+0x9c>)
 8019430:	f7f0 fa1b 	bl	800986a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8019434:	2280      	movs	r2, #128	; 0x80
 8019436:	2100      	movs	r1, #0
 8019438:	4806      	ldr	r0, [pc, #24]	; (8019454 <USBD_LL_Init+0x9c>)
 801943a:	f7f0 f9cf 	bl	80097dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801943e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8019442:	2101      	movs	r1, #1
 8019444:	4803      	ldr	r0, [pc, #12]	; (8019454 <USBD_LL_Init+0x9c>)
 8019446:	f7f0 f9c9 	bl	80097dc <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801944a:	2300      	movs	r3, #0
}
 801944c:	4618      	mov	r0, r3
 801944e:	3708      	adds	r7, #8
 8019450:	46bd      	mov	sp, r7
 8019452:	bd80      	pop	{r7, pc}
 8019454:	24002dc4 	.word	0x24002dc4
 8019458:	40040000 	.word	0x40040000

0801945c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801945c:	b580      	push	{r7, lr}
 801945e:	b084      	sub	sp, #16
 8019460:	af00      	add	r7, sp, #0
 8019462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019464:	2300      	movs	r3, #0
 8019466:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019468:	2300      	movs	r3, #0
 801946a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019472:	4618      	mov	r0, r3
 8019474:	f7ef f8a5 	bl	80085c2 <HAL_PCD_Start>
 8019478:	4603      	mov	r3, r0
 801947a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801947c:	7bfb      	ldrb	r3, [r7, #15]
 801947e:	4618      	mov	r0, r3
 8019480:	f000 f942 	bl	8019708 <USBD_Get_USB_Status>
 8019484:	4603      	mov	r3, r0
 8019486:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019488:	7bbb      	ldrb	r3, [r7, #14]
}
 801948a:	4618      	mov	r0, r3
 801948c:	3710      	adds	r7, #16
 801948e:	46bd      	mov	sp, r7
 8019490:	bd80      	pop	{r7, pc}

08019492 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8019492:	b580      	push	{r7, lr}
 8019494:	b084      	sub	sp, #16
 8019496:	af00      	add	r7, sp, #0
 8019498:	6078      	str	r0, [r7, #4]
 801949a:	4608      	mov	r0, r1
 801949c:	4611      	mov	r1, r2
 801949e:	461a      	mov	r2, r3
 80194a0:	4603      	mov	r3, r0
 80194a2:	70fb      	strb	r3, [r7, #3]
 80194a4:	460b      	mov	r3, r1
 80194a6:	70bb      	strb	r3, [r7, #2]
 80194a8:	4613      	mov	r3, r2
 80194aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80194ac:	2300      	movs	r3, #0
 80194ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80194b0:	2300      	movs	r3, #0
 80194b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80194ba:	78bb      	ldrb	r3, [r7, #2]
 80194bc:	883a      	ldrh	r2, [r7, #0]
 80194be:	78f9      	ldrb	r1, [r7, #3]
 80194c0:	f7ef fda5 	bl	800900e <HAL_PCD_EP_Open>
 80194c4:	4603      	mov	r3, r0
 80194c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80194c8:	7bfb      	ldrb	r3, [r7, #15]
 80194ca:	4618      	mov	r0, r3
 80194cc:	f000 f91c 	bl	8019708 <USBD_Get_USB_Status>
 80194d0:	4603      	mov	r3, r0
 80194d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80194d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80194d6:	4618      	mov	r0, r3
 80194d8:	3710      	adds	r7, #16
 80194da:	46bd      	mov	sp, r7
 80194dc:	bd80      	pop	{r7, pc}

080194de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80194de:	b580      	push	{r7, lr}
 80194e0:	b084      	sub	sp, #16
 80194e2:	af00      	add	r7, sp, #0
 80194e4:	6078      	str	r0, [r7, #4]
 80194e6:	460b      	mov	r3, r1
 80194e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80194ea:	2300      	movs	r3, #0
 80194ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80194ee:	2300      	movs	r3, #0
 80194f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80194f8:	78fa      	ldrb	r2, [r7, #3]
 80194fa:	4611      	mov	r1, r2
 80194fc:	4618      	mov	r0, r3
 80194fe:	f7ef fdee 	bl	80090de <HAL_PCD_EP_Close>
 8019502:	4603      	mov	r3, r0
 8019504:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019506:	7bfb      	ldrb	r3, [r7, #15]
 8019508:	4618      	mov	r0, r3
 801950a:	f000 f8fd 	bl	8019708 <USBD_Get_USB_Status>
 801950e:	4603      	mov	r3, r0
 8019510:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019512:	7bbb      	ldrb	r3, [r7, #14]
}
 8019514:	4618      	mov	r0, r3
 8019516:	3710      	adds	r7, #16
 8019518:	46bd      	mov	sp, r7
 801951a:	bd80      	pop	{r7, pc}

0801951c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801951c:	b580      	push	{r7, lr}
 801951e:	b084      	sub	sp, #16
 8019520:	af00      	add	r7, sp, #0
 8019522:	6078      	str	r0, [r7, #4]
 8019524:	460b      	mov	r3, r1
 8019526:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019528:	2300      	movs	r3, #0
 801952a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801952c:	2300      	movs	r3, #0
 801952e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019536:	78fa      	ldrb	r2, [r7, #3]
 8019538:	4611      	mov	r1, r2
 801953a:	4618      	mov	r0, r3
 801953c:	f7ef fea8 	bl	8009290 <HAL_PCD_EP_SetStall>
 8019540:	4603      	mov	r3, r0
 8019542:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019544:	7bfb      	ldrb	r3, [r7, #15]
 8019546:	4618      	mov	r0, r3
 8019548:	f000 f8de 	bl	8019708 <USBD_Get_USB_Status>
 801954c:	4603      	mov	r3, r0
 801954e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019550:	7bbb      	ldrb	r3, [r7, #14]
}
 8019552:	4618      	mov	r0, r3
 8019554:	3710      	adds	r7, #16
 8019556:	46bd      	mov	sp, r7
 8019558:	bd80      	pop	{r7, pc}

0801955a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801955a:	b580      	push	{r7, lr}
 801955c:	b084      	sub	sp, #16
 801955e:	af00      	add	r7, sp, #0
 8019560:	6078      	str	r0, [r7, #4]
 8019562:	460b      	mov	r3, r1
 8019564:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019566:	2300      	movs	r3, #0
 8019568:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801956a:	2300      	movs	r3, #0
 801956c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801956e:	687b      	ldr	r3, [r7, #4]
 8019570:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8019574:	78fa      	ldrb	r2, [r7, #3]
 8019576:	4611      	mov	r1, r2
 8019578:	4618      	mov	r0, r3
 801957a:	f7ef feed 	bl	8009358 <HAL_PCD_EP_ClrStall>
 801957e:	4603      	mov	r3, r0
 8019580:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019582:	7bfb      	ldrb	r3, [r7, #15]
 8019584:	4618      	mov	r0, r3
 8019586:	f000 f8bf 	bl	8019708 <USBD_Get_USB_Status>
 801958a:	4603      	mov	r3, r0
 801958c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801958e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019590:	4618      	mov	r0, r3
 8019592:	3710      	adds	r7, #16
 8019594:	46bd      	mov	sp, r7
 8019596:	bd80      	pop	{r7, pc}

08019598 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019598:	b480      	push	{r7}
 801959a:	b085      	sub	sp, #20
 801959c:	af00      	add	r7, sp, #0
 801959e:	6078      	str	r0, [r7, #4]
 80195a0:	460b      	mov	r3, r1
 80195a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80195aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80195ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	da0b      	bge.n	80195cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80195b4:	78fb      	ldrb	r3, [r7, #3]
 80195b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80195ba:	68f9      	ldr	r1, [r7, #12]
 80195bc:	4613      	mov	r3, r2
 80195be:	00db      	lsls	r3, r3, #3
 80195c0:	4413      	add	r3, r2
 80195c2:	009b      	lsls	r3, r3, #2
 80195c4:	440b      	add	r3, r1
 80195c6:	333e      	adds	r3, #62	; 0x3e
 80195c8:	781b      	ldrb	r3, [r3, #0]
 80195ca:	e00b      	b.n	80195e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80195cc:	78fb      	ldrb	r3, [r7, #3]
 80195ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80195d2:	68f9      	ldr	r1, [r7, #12]
 80195d4:	4613      	mov	r3, r2
 80195d6:	00db      	lsls	r3, r3, #3
 80195d8:	4413      	add	r3, r2
 80195da:	009b      	lsls	r3, r3, #2
 80195dc:	440b      	add	r3, r1
 80195de:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80195e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80195e4:	4618      	mov	r0, r3
 80195e6:	3714      	adds	r7, #20
 80195e8:	46bd      	mov	sp, r7
 80195ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ee:	4770      	bx	lr

080195f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80195f0:	b580      	push	{r7, lr}
 80195f2:	b084      	sub	sp, #16
 80195f4:	af00      	add	r7, sp, #0
 80195f6:	6078      	str	r0, [r7, #4]
 80195f8:	460b      	mov	r3, r1
 80195fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80195fc:	2300      	movs	r3, #0
 80195fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019600:	2300      	movs	r3, #0
 8019602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801960a:	78fa      	ldrb	r2, [r7, #3]
 801960c:	4611      	mov	r1, r2
 801960e:	4618      	mov	r0, r3
 8019610:	f7ef fcd8 	bl	8008fc4 <HAL_PCD_SetAddress>
 8019614:	4603      	mov	r3, r0
 8019616:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019618:	7bfb      	ldrb	r3, [r7, #15]
 801961a:	4618      	mov	r0, r3
 801961c:	f000 f874 	bl	8019708 <USBD_Get_USB_Status>
 8019620:	4603      	mov	r3, r0
 8019622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019624:	7bbb      	ldrb	r3, [r7, #14]
}
 8019626:	4618      	mov	r0, r3
 8019628:	3710      	adds	r7, #16
 801962a:	46bd      	mov	sp, r7
 801962c:	bd80      	pop	{r7, pc}

0801962e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801962e:	b580      	push	{r7, lr}
 8019630:	b086      	sub	sp, #24
 8019632:	af00      	add	r7, sp, #0
 8019634:	60f8      	str	r0, [r7, #12]
 8019636:	607a      	str	r2, [r7, #4]
 8019638:	603b      	str	r3, [r7, #0]
 801963a:	460b      	mov	r3, r1
 801963c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801963e:	2300      	movs	r3, #0
 8019640:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019642:	2300      	movs	r3, #0
 8019644:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019646:	68fb      	ldr	r3, [r7, #12]
 8019648:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801964c:	7af9      	ldrb	r1, [r7, #11]
 801964e:	683b      	ldr	r3, [r7, #0]
 8019650:	687a      	ldr	r2, [r7, #4]
 8019652:	f7ef fde2 	bl	800921a <HAL_PCD_EP_Transmit>
 8019656:	4603      	mov	r3, r0
 8019658:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801965a:	7dfb      	ldrb	r3, [r7, #23]
 801965c:	4618      	mov	r0, r3
 801965e:	f000 f853 	bl	8019708 <USBD_Get_USB_Status>
 8019662:	4603      	mov	r3, r0
 8019664:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019666:	7dbb      	ldrb	r3, [r7, #22]
}
 8019668:	4618      	mov	r0, r3
 801966a:	3718      	adds	r7, #24
 801966c:	46bd      	mov	sp, r7
 801966e:	bd80      	pop	{r7, pc}

08019670 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019670:	b580      	push	{r7, lr}
 8019672:	b086      	sub	sp, #24
 8019674:	af00      	add	r7, sp, #0
 8019676:	60f8      	str	r0, [r7, #12]
 8019678:	607a      	str	r2, [r7, #4]
 801967a:	603b      	str	r3, [r7, #0]
 801967c:	460b      	mov	r3, r1
 801967e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019680:	2300      	movs	r3, #0
 8019682:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019684:	2300      	movs	r3, #0
 8019686:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019688:	68fb      	ldr	r3, [r7, #12]
 801968a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801968e:	7af9      	ldrb	r1, [r7, #11]
 8019690:	683b      	ldr	r3, [r7, #0]
 8019692:	687a      	ldr	r2, [r7, #4]
 8019694:	f7ef fd6d 	bl	8009172 <HAL_PCD_EP_Receive>
 8019698:	4603      	mov	r3, r0
 801969a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801969c:	7dfb      	ldrb	r3, [r7, #23]
 801969e:	4618      	mov	r0, r3
 80196a0:	f000 f832 	bl	8019708 <USBD_Get_USB_Status>
 80196a4:	4603      	mov	r3, r0
 80196a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80196a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80196aa:	4618      	mov	r0, r3
 80196ac:	3718      	adds	r7, #24
 80196ae:	46bd      	mov	sp, r7
 80196b0:	bd80      	pop	{r7, pc}

080196b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80196b2:	b580      	push	{r7, lr}
 80196b4:	b082      	sub	sp, #8
 80196b6:	af00      	add	r7, sp, #0
 80196b8:	6078      	str	r0, [r7, #4]
 80196ba:	460b      	mov	r3, r1
 80196bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80196c4:	78fa      	ldrb	r2, [r7, #3]
 80196c6:	4611      	mov	r1, r2
 80196c8:	4618      	mov	r0, r3
 80196ca:	f7ef fd8e 	bl	80091ea <HAL_PCD_EP_GetRxCount>
 80196ce:	4603      	mov	r3, r0
}
 80196d0:	4618      	mov	r0, r3
 80196d2:	3708      	adds	r7, #8
 80196d4:	46bd      	mov	sp, r7
 80196d6:	bd80      	pop	{r7, pc}

080196d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80196d8:	b480      	push	{r7}
 80196da:	b083      	sub	sp, #12
 80196dc:	af00      	add	r7, sp, #0
 80196de:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80196e0:	4b03      	ldr	r3, [pc, #12]	; (80196f0 <USBD_static_malloc+0x18>)
}
 80196e2:	4618      	mov	r0, r3
 80196e4:	370c      	adds	r7, #12
 80196e6:	46bd      	mov	sp, r7
 80196e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196ec:	4770      	bx	lr
 80196ee:	bf00      	nop
 80196f0:	240032d0 	.word	0x240032d0

080196f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80196f4:	b480      	push	{r7}
 80196f6:	b083      	sub	sp, #12
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80196fc:	bf00      	nop
 80196fe:	370c      	adds	r7, #12
 8019700:	46bd      	mov	sp, r7
 8019702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019706:	4770      	bx	lr

08019708 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019708:	b480      	push	{r7}
 801970a:	b085      	sub	sp, #20
 801970c:	af00      	add	r7, sp, #0
 801970e:	4603      	mov	r3, r0
 8019710:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019712:	2300      	movs	r3, #0
 8019714:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019716:	79fb      	ldrb	r3, [r7, #7]
 8019718:	2b03      	cmp	r3, #3
 801971a:	d817      	bhi.n	801974c <USBD_Get_USB_Status+0x44>
 801971c:	a201      	add	r2, pc, #4	; (adr r2, 8019724 <USBD_Get_USB_Status+0x1c>)
 801971e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019722:	bf00      	nop
 8019724:	08019735 	.word	0x08019735
 8019728:	0801973b 	.word	0x0801973b
 801972c:	08019741 	.word	0x08019741
 8019730:	08019747 	.word	0x08019747
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019734:	2300      	movs	r3, #0
 8019736:	73fb      	strb	r3, [r7, #15]
    break;
 8019738:	e00b      	b.n	8019752 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801973a:	2303      	movs	r3, #3
 801973c:	73fb      	strb	r3, [r7, #15]
    break;
 801973e:	e008      	b.n	8019752 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019740:	2301      	movs	r3, #1
 8019742:	73fb      	strb	r3, [r7, #15]
    break;
 8019744:	e005      	b.n	8019752 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019746:	2303      	movs	r3, #3
 8019748:	73fb      	strb	r3, [r7, #15]
    break;
 801974a:	e002      	b.n	8019752 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801974c:	2303      	movs	r3, #3
 801974e:	73fb      	strb	r3, [r7, #15]
    break;
 8019750:	bf00      	nop
  }
  return usb_status;
 8019752:	7bfb      	ldrb	r3, [r7, #15]
}
 8019754:	4618      	mov	r0, r3
 8019756:	3714      	adds	r7, #20
 8019758:	46bd      	mov	sp, r7
 801975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801975e:	4770      	bx	lr

08019760 <__errno>:
 8019760:	4b01      	ldr	r3, [pc, #4]	; (8019768 <__errno+0x8>)
 8019762:	6818      	ldr	r0, [r3, #0]
 8019764:	4770      	bx	lr
 8019766:	bf00      	nop
 8019768:	24000100 	.word	0x24000100

0801976c <__libc_init_array>:
 801976c:	b570      	push	{r4, r5, r6, lr}
 801976e:	4d0d      	ldr	r5, [pc, #52]	; (80197a4 <__libc_init_array+0x38>)
 8019770:	4c0d      	ldr	r4, [pc, #52]	; (80197a8 <__libc_init_array+0x3c>)
 8019772:	1b64      	subs	r4, r4, r5
 8019774:	10a4      	asrs	r4, r4, #2
 8019776:	2600      	movs	r6, #0
 8019778:	42a6      	cmp	r6, r4
 801977a:	d109      	bne.n	8019790 <__libc_init_array+0x24>
 801977c:	4d0b      	ldr	r5, [pc, #44]	; (80197ac <__libc_init_array+0x40>)
 801977e:	4c0c      	ldr	r4, [pc, #48]	; (80197b0 <__libc_init_array+0x44>)
 8019780:	f004 fb86 	bl	801de90 <_init>
 8019784:	1b64      	subs	r4, r4, r5
 8019786:	10a4      	asrs	r4, r4, #2
 8019788:	2600      	movs	r6, #0
 801978a:	42a6      	cmp	r6, r4
 801978c:	d105      	bne.n	801979a <__libc_init_array+0x2e>
 801978e:	bd70      	pop	{r4, r5, r6, pc}
 8019790:	f855 3b04 	ldr.w	r3, [r5], #4
 8019794:	4798      	blx	r3
 8019796:	3601      	adds	r6, #1
 8019798:	e7ee      	b.n	8019778 <__libc_init_array+0xc>
 801979a:	f855 3b04 	ldr.w	r3, [r5], #4
 801979e:	4798      	blx	r3
 80197a0:	3601      	adds	r6, #1
 80197a2:	e7f2      	b.n	801978a <__libc_init_array+0x1e>
 80197a4:	0801e95c 	.word	0x0801e95c
 80197a8:	0801e95c 	.word	0x0801e95c
 80197ac:	0801e95c 	.word	0x0801e95c
 80197b0:	0801e960 	.word	0x0801e960

080197b4 <memcpy>:
 80197b4:	440a      	add	r2, r1
 80197b6:	4291      	cmp	r1, r2
 80197b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80197bc:	d100      	bne.n	80197c0 <memcpy+0xc>
 80197be:	4770      	bx	lr
 80197c0:	b510      	push	{r4, lr}
 80197c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80197c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80197ca:	4291      	cmp	r1, r2
 80197cc:	d1f9      	bne.n	80197c2 <memcpy+0xe>
 80197ce:	bd10      	pop	{r4, pc}

080197d0 <memset>:
 80197d0:	4402      	add	r2, r0
 80197d2:	4603      	mov	r3, r0
 80197d4:	4293      	cmp	r3, r2
 80197d6:	d100      	bne.n	80197da <memset+0xa>
 80197d8:	4770      	bx	lr
 80197da:	f803 1b01 	strb.w	r1, [r3], #1
 80197de:	e7f9      	b.n	80197d4 <memset+0x4>

080197e0 <__cvt>:
 80197e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197e2:	ed2d 8b02 	vpush	{d8}
 80197e6:	eeb0 8b40 	vmov.f64	d8, d0
 80197ea:	b085      	sub	sp, #20
 80197ec:	4617      	mov	r7, r2
 80197ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80197f0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80197f2:	ee18 2a90 	vmov	r2, s17
 80197f6:	f025 0520 	bic.w	r5, r5, #32
 80197fa:	2a00      	cmp	r2, #0
 80197fc:	bfb6      	itet	lt
 80197fe:	222d      	movlt	r2, #45	; 0x2d
 8019800:	2200      	movge	r2, #0
 8019802:	eeb1 8b40 	vneglt.f64	d8, d0
 8019806:	2d46      	cmp	r5, #70	; 0x46
 8019808:	460c      	mov	r4, r1
 801980a:	701a      	strb	r2, [r3, #0]
 801980c:	d004      	beq.n	8019818 <__cvt+0x38>
 801980e:	2d45      	cmp	r5, #69	; 0x45
 8019810:	d100      	bne.n	8019814 <__cvt+0x34>
 8019812:	3401      	adds	r4, #1
 8019814:	2102      	movs	r1, #2
 8019816:	e000      	b.n	801981a <__cvt+0x3a>
 8019818:	2103      	movs	r1, #3
 801981a:	ab03      	add	r3, sp, #12
 801981c:	9301      	str	r3, [sp, #4]
 801981e:	ab02      	add	r3, sp, #8
 8019820:	9300      	str	r3, [sp, #0]
 8019822:	4622      	mov	r2, r4
 8019824:	4633      	mov	r3, r6
 8019826:	eeb0 0b48 	vmov.f64	d0, d8
 801982a:	f001 fd95 	bl	801b358 <_dtoa_r>
 801982e:	2d47      	cmp	r5, #71	; 0x47
 8019830:	d101      	bne.n	8019836 <__cvt+0x56>
 8019832:	07fb      	lsls	r3, r7, #31
 8019834:	d51a      	bpl.n	801986c <__cvt+0x8c>
 8019836:	2d46      	cmp	r5, #70	; 0x46
 8019838:	eb00 0204 	add.w	r2, r0, r4
 801983c:	d10c      	bne.n	8019858 <__cvt+0x78>
 801983e:	7803      	ldrb	r3, [r0, #0]
 8019840:	2b30      	cmp	r3, #48	; 0x30
 8019842:	d107      	bne.n	8019854 <__cvt+0x74>
 8019844:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801984c:	bf1c      	itt	ne
 801984e:	f1c4 0401 	rsbne	r4, r4, #1
 8019852:	6034      	strne	r4, [r6, #0]
 8019854:	6833      	ldr	r3, [r6, #0]
 8019856:	441a      	add	r2, r3
 8019858:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801985c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019860:	bf08      	it	eq
 8019862:	9203      	streq	r2, [sp, #12]
 8019864:	2130      	movs	r1, #48	; 0x30
 8019866:	9b03      	ldr	r3, [sp, #12]
 8019868:	4293      	cmp	r3, r2
 801986a:	d307      	bcc.n	801987c <__cvt+0x9c>
 801986c:	9b03      	ldr	r3, [sp, #12]
 801986e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019870:	1a1b      	subs	r3, r3, r0
 8019872:	6013      	str	r3, [r2, #0]
 8019874:	b005      	add	sp, #20
 8019876:	ecbd 8b02 	vpop	{d8}
 801987a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801987c:	1c5c      	adds	r4, r3, #1
 801987e:	9403      	str	r4, [sp, #12]
 8019880:	7019      	strb	r1, [r3, #0]
 8019882:	e7f0      	b.n	8019866 <__cvt+0x86>

08019884 <__exponent>:
 8019884:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019886:	4603      	mov	r3, r0
 8019888:	2900      	cmp	r1, #0
 801988a:	bfb8      	it	lt
 801988c:	4249      	neglt	r1, r1
 801988e:	f803 2b02 	strb.w	r2, [r3], #2
 8019892:	bfb4      	ite	lt
 8019894:	222d      	movlt	r2, #45	; 0x2d
 8019896:	222b      	movge	r2, #43	; 0x2b
 8019898:	2909      	cmp	r1, #9
 801989a:	7042      	strb	r2, [r0, #1]
 801989c:	dd2a      	ble.n	80198f4 <__exponent+0x70>
 801989e:	f10d 0407 	add.w	r4, sp, #7
 80198a2:	46a4      	mov	ip, r4
 80198a4:	270a      	movs	r7, #10
 80198a6:	46a6      	mov	lr, r4
 80198a8:	460a      	mov	r2, r1
 80198aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80198ae:	fb07 1516 	mls	r5, r7, r6, r1
 80198b2:	3530      	adds	r5, #48	; 0x30
 80198b4:	2a63      	cmp	r2, #99	; 0x63
 80198b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80198ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80198be:	4631      	mov	r1, r6
 80198c0:	dcf1      	bgt.n	80198a6 <__exponent+0x22>
 80198c2:	3130      	adds	r1, #48	; 0x30
 80198c4:	f1ae 0502 	sub.w	r5, lr, #2
 80198c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80198cc:	1c44      	adds	r4, r0, #1
 80198ce:	4629      	mov	r1, r5
 80198d0:	4561      	cmp	r1, ip
 80198d2:	d30a      	bcc.n	80198ea <__exponent+0x66>
 80198d4:	f10d 0209 	add.w	r2, sp, #9
 80198d8:	eba2 020e 	sub.w	r2, r2, lr
 80198dc:	4565      	cmp	r5, ip
 80198de:	bf88      	it	hi
 80198e0:	2200      	movhi	r2, #0
 80198e2:	4413      	add	r3, r2
 80198e4:	1a18      	subs	r0, r3, r0
 80198e6:	b003      	add	sp, #12
 80198e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80198ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80198ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80198f2:	e7ed      	b.n	80198d0 <__exponent+0x4c>
 80198f4:	2330      	movs	r3, #48	; 0x30
 80198f6:	3130      	adds	r1, #48	; 0x30
 80198f8:	7083      	strb	r3, [r0, #2]
 80198fa:	70c1      	strb	r1, [r0, #3]
 80198fc:	1d03      	adds	r3, r0, #4
 80198fe:	e7f1      	b.n	80198e4 <__exponent+0x60>

08019900 <_printf_float>:
 8019900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019904:	b08b      	sub	sp, #44	; 0x2c
 8019906:	460c      	mov	r4, r1
 8019908:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801990c:	4616      	mov	r6, r2
 801990e:	461f      	mov	r7, r3
 8019910:	4605      	mov	r5, r0
 8019912:	f002 fdff 	bl	801c514 <_localeconv_r>
 8019916:	f8d0 b000 	ldr.w	fp, [r0]
 801991a:	4658      	mov	r0, fp
 801991c:	f7e6 fcf8 	bl	8000310 <strlen>
 8019920:	2300      	movs	r3, #0
 8019922:	9308      	str	r3, [sp, #32]
 8019924:	f8d8 3000 	ldr.w	r3, [r8]
 8019928:	f894 9018 	ldrb.w	r9, [r4, #24]
 801992c:	6822      	ldr	r2, [r4, #0]
 801992e:	3307      	adds	r3, #7
 8019930:	f023 0307 	bic.w	r3, r3, #7
 8019934:	f103 0108 	add.w	r1, r3, #8
 8019938:	f8c8 1000 	str.w	r1, [r8]
 801993c:	4682      	mov	sl, r0
 801993e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8019942:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8019946:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8019ba8 <_printf_float+0x2a8>
 801994a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801994e:	eeb0 6bc0 	vabs.f64	d6, d0
 8019952:	eeb4 6b47 	vcmp.f64	d6, d7
 8019956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801995a:	dd24      	ble.n	80199a6 <_printf_float+0xa6>
 801995c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8019960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019964:	d502      	bpl.n	801996c <_printf_float+0x6c>
 8019966:	232d      	movs	r3, #45	; 0x2d
 8019968:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801996c:	4b90      	ldr	r3, [pc, #576]	; (8019bb0 <_printf_float+0x2b0>)
 801996e:	4891      	ldr	r0, [pc, #580]	; (8019bb4 <_printf_float+0x2b4>)
 8019970:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8019974:	bf94      	ite	ls
 8019976:	4698      	movls	r8, r3
 8019978:	4680      	movhi	r8, r0
 801997a:	2303      	movs	r3, #3
 801997c:	6123      	str	r3, [r4, #16]
 801997e:	f022 0204 	bic.w	r2, r2, #4
 8019982:	2300      	movs	r3, #0
 8019984:	6022      	str	r2, [r4, #0]
 8019986:	9304      	str	r3, [sp, #16]
 8019988:	9700      	str	r7, [sp, #0]
 801998a:	4633      	mov	r3, r6
 801998c:	aa09      	add	r2, sp, #36	; 0x24
 801998e:	4621      	mov	r1, r4
 8019990:	4628      	mov	r0, r5
 8019992:	f000 f9d3 	bl	8019d3c <_printf_common>
 8019996:	3001      	adds	r0, #1
 8019998:	f040 808a 	bne.w	8019ab0 <_printf_float+0x1b0>
 801999c:	f04f 30ff 	mov.w	r0, #4294967295
 80199a0:	b00b      	add	sp, #44	; 0x2c
 80199a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199a6:	eeb4 0b40 	vcmp.f64	d0, d0
 80199aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199ae:	d709      	bvc.n	80199c4 <_printf_float+0xc4>
 80199b0:	ee10 3a90 	vmov	r3, s1
 80199b4:	2b00      	cmp	r3, #0
 80199b6:	bfbc      	itt	lt
 80199b8:	232d      	movlt	r3, #45	; 0x2d
 80199ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80199be:	487e      	ldr	r0, [pc, #504]	; (8019bb8 <_printf_float+0x2b8>)
 80199c0:	4b7e      	ldr	r3, [pc, #504]	; (8019bbc <_printf_float+0x2bc>)
 80199c2:	e7d5      	b.n	8019970 <_printf_float+0x70>
 80199c4:	6863      	ldr	r3, [r4, #4]
 80199c6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80199ca:	9104      	str	r1, [sp, #16]
 80199cc:	1c59      	adds	r1, r3, #1
 80199ce:	d13c      	bne.n	8019a4a <_printf_float+0x14a>
 80199d0:	2306      	movs	r3, #6
 80199d2:	6063      	str	r3, [r4, #4]
 80199d4:	2300      	movs	r3, #0
 80199d6:	9303      	str	r3, [sp, #12]
 80199d8:	ab08      	add	r3, sp, #32
 80199da:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80199de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80199e2:	ab07      	add	r3, sp, #28
 80199e4:	6861      	ldr	r1, [r4, #4]
 80199e6:	9300      	str	r3, [sp, #0]
 80199e8:	6022      	str	r2, [r4, #0]
 80199ea:	f10d 031b 	add.w	r3, sp, #27
 80199ee:	4628      	mov	r0, r5
 80199f0:	f7ff fef6 	bl	80197e0 <__cvt>
 80199f4:	9b04      	ldr	r3, [sp, #16]
 80199f6:	9907      	ldr	r1, [sp, #28]
 80199f8:	2b47      	cmp	r3, #71	; 0x47
 80199fa:	4680      	mov	r8, r0
 80199fc:	d108      	bne.n	8019a10 <_printf_float+0x110>
 80199fe:	1cc8      	adds	r0, r1, #3
 8019a00:	db02      	blt.n	8019a08 <_printf_float+0x108>
 8019a02:	6863      	ldr	r3, [r4, #4]
 8019a04:	4299      	cmp	r1, r3
 8019a06:	dd41      	ble.n	8019a8c <_printf_float+0x18c>
 8019a08:	f1a9 0902 	sub.w	r9, r9, #2
 8019a0c:	fa5f f989 	uxtb.w	r9, r9
 8019a10:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8019a14:	d820      	bhi.n	8019a58 <_printf_float+0x158>
 8019a16:	3901      	subs	r1, #1
 8019a18:	464a      	mov	r2, r9
 8019a1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8019a1e:	9107      	str	r1, [sp, #28]
 8019a20:	f7ff ff30 	bl	8019884 <__exponent>
 8019a24:	9a08      	ldr	r2, [sp, #32]
 8019a26:	9004      	str	r0, [sp, #16]
 8019a28:	1813      	adds	r3, r2, r0
 8019a2a:	2a01      	cmp	r2, #1
 8019a2c:	6123      	str	r3, [r4, #16]
 8019a2e:	dc02      	bgt.n	8019a36 <_printf_float+0x136>
 8019a30:	6822      	ldr	r2, [r4, #0]
 8019a32:	07d2      	lsls	r2, r2, #31
 8019a34:	d501      	bpl.n	8019a3a <_printf_float+0x13a>
 8019a36:	3301      	adds	r3, #1
 8019a38:	6123      	str	r3, [r4, #16]
 8019a3a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d0a2      	beq.n	8019988 <_printf_float+0x88>
 8019a42:	232d      	movs	r3, #45	; 0x2d
 8019a44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019a48:	e79e      	b.n	8019988 <_printf_float+0x88>
 8019a4a:	9904      	ldr	r1, [sp, #16]
 8019a4c:	2947      	cmp	r1, #71	; 0x47
 8019a4e:	d1c1      	bne.n	80199d4 <_printf_float+0xd4>
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	d1bf      	bne.n	80199d4 <_printf_float+0xd4>
 8019a54:	2301      	movs	r3, #1
 8019a56:	e7bc      	b.n	80199d2 <_printf_float+0xd2>
 8019a58:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8019a5c:	d118      	bne.n	8019a90 <_printf_float+0x190>
 8019a5e:	2900      	cmp	r1, #0
 8019a60:	6863      	ldr	r3, [r4, #4]
 8019a62:	dd0b      	ble.n	8019a7c <_printf_float+0x17c>
 8019a64:	6121      	str	r1, [r4, #16]
 8019a66:	b913      	cbnz	r3, 8019a6e <_printf_float+0x16e>
 8019a68:	6822      	ldr	r2, [r4, #0]
 8019a6a:	07d0      	lsls	r0, r2, #31
 8019a6c:	d502      	bpl.n	8019a74 <_printf_float+0x174>
 8019a6e:	3301      	adds	r3, #1
 8019a70:	440b      	add	r3, r1
 8019a72:	6123      	str	r3, [r4, #16]
 8019a74:	2300      	movs	r3, #0
 8019a76:	65a1      	str	r1, [r4, #88]	; 0x58
 8019a78:	9304      	str	r3, [sp, #16]
 8019a7a:	e7de      	b.n	8019a3a <_printf_float+0x13a>
 8019a7c:	b913      	cbnz	r3, 8019a84 <_printf_float+0x184>
 8019a7e:	6822      	ldr	r2, [r4, #0]
 8019a80:	07d2      	lsls	r2, r2, #31
 8019a82:	d501      	bpl.n	8019a88 <_printf_float+0x188>
 8019a84:	3302      	adds	r3, #2
 8019a86:	e7f4      	b.n	8019a72 <_printf_float+0x172>
 8019a88:	2301      	movs	r3, #1
 8019a8a:	e7f2      	b.n	8019a72 <_printf_float+0x172>
 8019a8c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8019a90:	9b08      	ldr	r3, [sp, #32]
 8019a92:	4299      	cmp	r1, r3
 8019a94:	db05      	blt.n	8019aa2 <_printf_float+0x1a2>
 8019a96:	6823      	ldr	r3, [r4, #0]
 8019a98:	6121      	str	r1, [r4, #16]
 8019a9a:	07d8      	lsls	r0, r3, #31
 8019a9c:	d5ea      	bpl.n	8019a74 <_printf_float+0x174>
 8019a9e:	1c4b      	adds	r3, r1, #1
 8019aa0:	e7e7      	b.n	8019a72 <_printf_float+0x172>
 8019aa2:	2900      	cmp	r1, #0
 8019aa4:	bfd4      	ite	le
 8019aa6:	f1c1 0202 	rsble	r2, r1, #2
 8019aaa:	2201      	movgt	r2, #1
 8019aac:	4413      	add	r3, r2
 8019aae:	e7e0      	b.n	8019a72 <_printf_float+0x172>
 8019ab0:	6823      	ldr	r3, [r4, #0]
 8019ab2:	055a      	lsls	r2, r3, #21
 8019ab4:	d407      	bmi.n	8019ac6 <_printf_float+0x1c6>
 8019ab6:	6923      	ldr	r3, [r4, #16]
 8019ab8:	4642      	mov	r2, r8
 8019aba:	4631      	mov	r1, r6
 8019abc:	4628      	mov	r0, r5
 8019abe:	47b8      	blx	r7
 8019ac0:	3001      	adds	r0, #1
 8019ac2:	d12a      	bne.n	8019b1a <_printf_float+0x21a>
 8019ac4:	e76a      	b.n	801999c <_printf_float+0x9c>
 8019ac6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8019aca:	f240 80e2 	bls.w	8019c92 <_printf_float+0x392>
 8019ace:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019ad2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ada:	d133      	bne.n	8019b44 <_printf_float+0x244>
 8019adc:	4a38      	ldr	r2, [pc, #224]	; (8019bc0 <_printf_float+0x2c0>)
 8019ade:	2301      	movs	r3, #1
 8019ae0:	4631      	mov	r1, r6
 8019ae2:	4628      	mov	r0, r5
 8019ae4:	47b8      	blx	r7
 8019ae6:	3001      	adds	r0, #1
 8019ae8:	f43f af58 	beq.w	801999c <_printf_float+0x9c>
 8019aec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019af0:	429a      	cmp	r2, r3
 8019af2:	db02      	blt.n	8019afa <_printf_float+0x1fa>
 8019af4:	6823      	ldr	r3, [r4, #0]
 8019af6:	07d8      	lsls	r0, r3, #31
 8019af8:	d50f      	bpl.n	8019b1a <_printf_float+0x21a>
 8019afa:	4653      	mov	r3, sl
 8019afc:	465a      	mov	r2, fp
 8019afe:	4631      	mov	r1, r6
 8019b00:	4628      	mov	r0, r5
 8019b02:	47b8      	blx	r7
 8019b04:	3001      	adds	r0, #1
 8019b06:	f43f af49 	beq.w	801999c <_printf_float+0x9c>
 8019b0a:	f04f 0800 	mov.w	r8, #0
 8019b0e:	f104 091a 	add.w	r9, r4, #26
 8019b12:	9b08      	ldr	r3, [sp, #32]
 8019b14:	3b01      	subs	r3, #1
 8019b16:	4543      	cmp	r3, r8
 8019b18:	dc09      	bgt.n	8019b2e <_printf_float+0x22e>
 8019b1a:	6823      	ldr	r3, [r4, #0]
 8019b1c:	079b      	lsls	r3, r3, #30
 8019b1e:	f100 8108 	bmi.w	8019d32 <_printf_float+0x432>
 8019b22:	68e0      	ldr	r0, [r4, #12]
 8019b24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019b26:	4298      	cmp	r0, r3
 8019b28:	bfb8      	it	lt
 8019b2a:	4618      	movlt	r0, r3
 8019b2c:	e738      	b.n	80199a0 <_printf_float+0xa0>
 8019b2e:	2301      	movs	r3, #1
 8019b30:	464a      	mov	r2, r9
 8019b32:	4631      	mov	r1, r6
 8019b34:	4628      	mov	r0, r5
 8019b36:	47b8      	blx	r7
 8019b38:	3001      	adds	r0, #1
 8019b3a:	f43f af2f 	beq.w	801999c <_printf_float+0x9c>
 8019b3e:	f108 0801 	add.w	r8, r8, #1
 8019b42:	e7e6      	b.n	8019b12 <_printf_float+0x212>
 8019b44:	9b07      	ldr	r3, [sp, #28]
 8019b46:	2b00      	cmp	r3, #0
 8019b48:	dc3c      	bgt.n	8019bc4 <_printf_float+0x2c4>
 8019b4a:	4a1d      	ldr	r2, [pc, #116]	; (8019bc0 <_printf_float+0x2c0>)
 8019b4c:	2301      	movs	r3, #1
 8019b4e:	4631      	mov	r1, r6
 8019b50:	4628      	mov	r0, r5
 8019b52:	47b8      	blx	r7
 8019b54:	3001      	adds	r0, #1
 8019b56:	f43f af21 	beq.w	801999c <_printf_float+0x9c>
 8019b5a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019b5e:	4313      	orrs	r3, r2
 8019b60:	d102      	bne.n	8019b68 <_printf_float+0x268>
 8019b62:	6823      	ldr	r3, [r4, #0]
 8019b64:	07d9      	lsls	r1, r3, #31
 8019b66:	d5d8      	bpl.n	8019b1a <_printf_float+0x21a>
 8019b68:	4653      	mov	r3, sl
 8019b6a:	465a      	mov	r2, fp
 8019b6c:	4631      	mov	r1, r6
 8019b6e:	4628      	mov	r0, r5
 8019b70:	47b8      	blx	r7
 8019b72:	3001      	adds	r0, #1
 8019b74:	f43f af12 	beq.w	801999c <_printf_float+0x9c>
 8019b78:	f04f 0900 	mov.w	r9, #0
 8019b7c:	f104 0a1a 	add.w	sl, r4, #26
 8019b80:	9b07      	ldr	r3, [sp, #28]
 8019b82:	425b      	negs	r3, r3
 8019b84:	454b      	cmp	r3, r9
 8019b86:	dc01      	bgt.n	8019b8c <_printf_float+0x28c>
 8019b88:	9b08      	ldr	r3, [sp, #32]
 8019b8a:	e795      	b.n	8019ab8 <_printf_float+0x1b8>
 8019b8c:	2301      	movs	r3, #1
 8019b8e:	4652      	mov	r2, sl
 8019b90:	4631      	mov	r1, r6
 8019b92:	4628      	mov	r0, r5
 8019b94:	47b8      	blx	r7
 8019b96:	3001      	adds	r0, #1
 8019b98:	f43f af00 	beq.w	801999c <_printf_float+0x9c>
 8019b9c:	f109 0901 	add.w	r9, r9, #1
 8019ba0:	e7ee      	b.n	8019b80 <_printf_float+0x280>
 8019ba2:	bf00      	nop
 8019ba4:	f3af 8000 	nop.w
 8019ba8:	ffffffff 	.word	0xffffffff
 8019bac:	7fefffff 	.word	0x7fefffff
 8019bb0:	0801e4b0 	.word	0x0801e4b0
 8019bb4:	0801e4b4 	.word	0x0801e4b4
 8019bb8:	0801e4bc 	.word	0x0801e4bc
 8019bbc:	0801e4b8 	.word	0x0801e4b8
 8019bc0:	0801e4c0 	.word	0x0801e4c0
 8019bc4:	9a08      	ldr	r2, [sp, #32]
 8019bc6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019bc8:	429a      	cmp	r2, r3
 8019bca:	bfa8      	it	ge
 8019bcc:	461a      	movge	r2, r3
 8019bce:	2a00      	cmp	r2, #0
 8019bd0:	4691      	mov	r9, r2
 8019bd2:	dc38      	bgt.n	8019c46 <_printf_float+0x346>
 8019bd4:	2300      	movs	r3, #0
 8019bd6:	9305      	str	r3, [sp, #20]
 8019bd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019bdc:	f104 021a 	add.w	r2, r4, #26
 8019be0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8019be2:	9905      	ldr	r1, [sp, #20]
 8019be4:	9304      	str	r3, [sp, #16]
 8019be6:	eba3 0309 	sub.w	r3, r3, r9
 8019bea:	428b      	cmp	r3, r1
 8019bec:	dc33      	bgt.n	8019c56 <_printf_float+0x356>
 8019bee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019bf2:	429a      	cmp	r2, r3
 8019bf4:	db3c      	blt.n	8019c70 <_printf_float+0x370>
 8019bf6:	6823      	ldr	r3, [r4, #0]
 8019bf8:	07da      	lsls	r2, r3, #31
 8019bfa:	d439      	bmi.n	8019c70 <_printf_float+0x370>
 8019bfc:	9b08      	ldr	r3, [sp, #32]
 8019bfe:	9a04      	ldr	r2, [sp, #16]
 8019c00:	9907      	ldr	r1, [sp, #28]
 8019c02:	1a9a      	subs	r2, r3, r2
 8019c04:	eba3 0901 	sub.w	r9, r3, r1
 8019c08:	4591      	cmp	r9, r2
 8019c0a:	bfa8      	it	ge
 8019c0c:	4691      	movge	r9, r2
 8019c0e:	f1b9 0f00 	cmp.w	r9, #0
 8019c12:	dc35      	bgt.n	8019c80 <_printf_float+0x380>
 8019c14:	f04f 0800 	mov.w	r8, #0
 8019c18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019c1c:	f104 0a1a 	add.w	sl, r4, #26
 8019c20:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8019c24:	1a9b      	subs	r3, r3, r2
 8019c26:	eba3 0309 	sub.w	r3, r3, r9
 8019c2a:	4543      	cmp	r3, r8
 8019c2c:	f77f af75 	ble.w	8019b1a <_printf_float+0x21a>
 8019c30:	2301      	movs	r3, #1
 8019c32:	4652      	mov	r2, sl
 8019c34:	4631      	mov	r1, r6
 8019c36:	4628      	mov	r0, r5
 8019c38:	47b8      	blx	r7
 8019c3a:	3001      	adds	r0, #1
 8019c3c:	f43f aeae 	beq.w	801999c <_printf_float+0x9c>
 8019c40:	f108 0801 	add.w	r8, r8, #1
 8019c44:	e7ec      	b.n	8019c20 <_printf_float+0x320>
 8019c46:	4613      	mov	r3, r2
 8019c48:	4631      	mov	r1, r6
 8019c4a:	4642      	mov	r2, r8
 8019c4c:	4628      	mov	r0, r5
 8019c4e:	47b8      	blx	r7
 8019c50:	3001      	adds	r0, #1
 8019c52:	d1bf      	bne.n	8019bd4 <_printf_float+0x2d4>
 8019c54:	e6a2      	b.n	801999c <_printf_float+0x9c>
 8019c56:	2301      	movs	r3, #1
 8019c58:	4631      	mov	r1, r6
 8019c5a:	4628      	mov	r0, r5
 8019c5c:	9204      	str	r2, [sp, #16]
 8019c5e:	47b8      	blx	r7
 8019c60:	3001      	adds	r0, #1
 8019c62:	f43f ae9b 	beq.w	801999c <_printf_float+0x9c>
 8019c66:	9b05      	ldr	r3, [sp, #20]
 8019c68:	9a04      	ldr	r2, [sp, #16]
 8019c6a:	3301      	adds	r3, #1
 8019c6c:	9305      	str	r3, [sp, #20]
 8019c6e:	e7b7      	b.n	8019be0 <_printf_float+0x2e0>
 8019c70:	4653      	mov	r3, sl
 8019c72:	465a      	mov	r2, fp
 8019c74:	4631      	mov	r1, r6
 8019c76:	4628      	mov	r0, r5
 8019c78:	47b8      	blx	r7
 8019c7a:	3001      	adds	r0, #1
 8019c7c:	d1be      	bne.n	8019bfc <_printf_float+0x2fc>
 8019c7e:	e68d      	b.n	801999c <_printf_float+0x9c>
 8019c80:	9a04      	ldr	r2, [sp, #16]
 8019c82:	464b      	mov	r3, r9
 8019c84:	4442      	add	r2, r8
 8019c86:	4631      	mov	r1, r6
 8019c88:	4628      	mov	r0, r5
 8019c8a:	47b8      	blx	r7
 8019c8c:	3001      	adds	r0, #1
 8019c8e:	d1c1      	bne.n	8019c14 <_printf_float+0x314>
 8019c90:	e684      	b.n	801999c <_printf_float+0x9c>
 8019c92:	9a08      	ldr	r2, [sp, #32]
 8019c94:	2a01      	cmp	r2, #1
 8019c96:	dc01      	bgt.n	8019c9c <_printf_float+0x39c>
 8019c98:	07db      	lsls	r3, r3, #31
 8019c9a:	d537      	bpl.n	8019d0c <_printf_float+0x40c>
 8019c9c:	2301      	movs	r3, #1
 8019c9e:	4642      	mov	r2, r8
 8019ca0:	4631      	mov	r1, r6
 8019ca2:	4628      	mov	r0, r5
 8019ca4:	47b8      	blx	r7
 8019ca6:	3001      	adds	r0, #1
 8019ca8:	f43f ae78 	beq.w	801999c <_printf_float+0x9c>
 8019cac:	4653      	mov	r3, sl
 8019cae:	465a      	mov	r2, fp
 8019cb0:	4631      	mov	r1, r6
 8019cb2:	4628      	mov	r0, r5
 8019cb4:	47b8      	blx	r7
 8019cb6:	3001      	adds	r0, #1
 8019cb8:	f43f ae70 	beq.w	801999c <_printf_float+0x9c>
 8019cbc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8019cc0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cc8:	d01b      	beq.n	8019d02 <_printf_float+0x402>
 8019cca:	9b08      	ldr	r3, [sp, #32]
 8019ccc:	f108 0201 	add.w	r2, r8, #1
 8019cd0:	3b01      	subs	r3, #1
 8019cd2:	4631      	mov	r1, r6
 8019cd4:	4628      	mov	r0, r5
 8019cd6:	47b8      	blx	r7
 8019cd8:	3001      	adds	r0, #1
 8019cda:	d10e      	bne.n	8019cfa <_printf_float+0x3fa>
 8019cdc:	e65e      	b.n	801999c <_printf_float+0x9c>
 8019cde:	2301      	movs	r3, #1
 8019ce0:	464a      	mov	r2, r9
 8019ce2:	4631      	mov	r1, r6
 8019ce4:	4628      	mov	r0, r5
 8019ce6:	47b8      	blx	r7
 8019ce8:	3001      	adds	r0, #1
 8019cea:	f43f ae57 	beq.w	801999c <_printf_float+0x9c>
 8019cee:	f108 0801 	add.w	r8, r8, #1
 8019cf2:	9b08      	ldr	r3, [sp, #32]
 8019cf4:	3b01      	subs	r3, #1
 8019cf6:	4543      	cmp	r3, r8
 8019cf8:	dcf1      	bgt.n	8019cde <_printf_float+0x3de>
 8019cfa:	9b04      	ldr	r3, [sp, #16]
 8019cfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019d00:	e6db      	b.n	8019aba <_printf_float+0x1ba>
 8019d02:	f04f 0800 	mov.w	r8, #0
 8019d06:	f104 091a 	add.w	r9, r4, #26
 8019d0a:	e7f2      	b.n	8019cf2 <_printf_float+0x3f2>
 8019d0c:	2301      	movs	r3, #1
 8019d0e:	4642      	mov	r2, r8
 8019d10:	e7df      	b.n	8019cd2 <_printf_float+0x3d2>
 8019d12:	2301      	movs	r3, #1
 8019d14:	464a      	mov	r2, r9
 8019d16:	4631      	mov	r1, r6
 8019d18:	4628      	mov	r0, r5
 8019d1a:	47b8      	blx	r7
 8019d1c:	3001      	adds	r0, #1
 8019d1e:	f43f ae3d 	beq.w	801999c <_printf_float+0x9c>
 8019d22:	f108 0801 	add.w	r8, r8, #1
 8019d26:	68e3      	ldr	r3, [r4, #12]
 8019d28:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019d2a:	1a5b      	subs	r3, r3, r1
 8019d2c:	4543      	cmp	r3, r8
 8019d2e:	dcf0      	bgt.n	8019d12 <_printf_float+0x412>
 8019d30:	e6f7      	b.n	8019b22 <_printf_float+0x222>
 8019d32:	f04f 0800 	mov.w	r8, #0
 8019d36:	f104 0919 	add.w	r9, r4, #25
 8019d3a:	e7f4      	b.n	8019d26 <_printf_float+0x426>

08019d3c <_printf_common>:
 8019d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019d40:	4616      	mov	r6, r2
 8019d42:	4699      	mov	r9, r3
 8019d44:	688a      	ldr	r2, [r1, #8]
 8019d46:	690b      	ldr	r3, [r1, #16]
 8019d48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019d4c:	4293      	cmp	r3, r2
 8019d4e:	bfb8      	it	lt
 8019d50:	4613      	movlt	r3, r2
 8019d52:	6033      	str	r3, [r6, #0]
 8019d54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019d58:	4607      	mov	r7, r0
 8019d5a:	460c      	mov	r4, r1
 8019d5c:	b10a      	cbz	r2, 8019d62 <_printf_common+0x26>
 8019d5e:	3301      	adds	r3, #1
 8019d60:	6033      	str	r3, [r6, #0]
 8019d62:	6823      	ldr	r3, [r4, #0]
 8019d64:	0699      	lsls	r1, r3, #26
 8019d66:	bf42      	ittt	mi
 8019d68:	6833      	ldrmi	r3, [r6, #0]
 8019d6a:	3302      	addmi	r3, #2
 8019d6c:	6033      	strmi	r3, [r6, #0]
 8019d6e:	6825      	ldr	r5, [r4, #0]
 8019d70:	f015 0506 	ands.w	r5, r5, #6
 8019d74:	d106      	bne.n	8019d84 <_printf_common+0x48>
 8019d76:	f104 0a19 	add.w	sl, r4, #25
 8019d7a:	68e3      	ldr	r3, [r4, #12]
 8019d7c:	6832      	ldr	r2, [r6, #0]
 8019d7e:	1a9b      	subs	r3, r3, r2
 8019d80:	42ab      	cmp	r3, r5
 8019d82:	dc26      	bgt.n	8019dd2 <_printf_common+0x96>
 8019d84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019d88:	1e13      	subs	r3, r2, #0
 8019d8a:	6822      	ldr	r2, [r4, #0]
 8019d8c:	bf18      	it	ne
 8019d8e:	2301      	movne	r3, #1
 8019d90:	0692      	lsls	r2, r2, #26
 8019d92:	d42b      	bmi.n	8019dec <_printf_common+0xb0>
 8019d94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019d98:	4649      	mov	r1, r9
 8019d9a:	4638      	mov	r0, r7
 8019d9c:	47c0      	blx	r8
 8019d9e:	3001      	adds	r0, #1
 8019da0:	d01e      	beq.n	8019de0 <_printf_common+0xa4>
 8019da2:	6823      	ldr	r3, [r4, #0]
 8019da4:	68e5      	ldr	r5, [r4, #12]
 8019da6:	6832      	ldr	r2, [r6, #0]
 8019da8:	f003 0306 	and.w	r3, r3, #6
 8019dac:	2b04      	cmp	r3, #4
 8019dae:	bf08      	it	eq
 8019db0:	1aad      	subeq	r5, r5, r2
 8019db2:	68a3      	ldr	r3, [r4, #8]
 8019db4:	6922      	ldr	r2, [r4, #16]
 8019db6:	bf0c      	ite	eq
 8019db8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019dbc:	2500      	movne	r5, #0
 8019dbe:	4293      	cmp	r3, r2
 8019dc0:	bfc4      	itt	gt
 8019dc2:	1a9b      	subgt	r3, r3, r2
 8019dc4:	18ed      	addgt	r5, r5, r3
 8019dc6:	2600      	movs	r6, #0
 8019dc8:	341a      	adds	r4, #26
 8019dca:	42b5      	cmp	r5, r6
 8019dcc:	d11a      	bne.n	8019e04 <_printf_common+0xc8>
 8019dce:	2000      	movs	r0, #0
 8019dd0:	e008      	b.n	8019de4 <_printf_common+0xa8>
 8019dd2:	2301      	movs	r3, #1
 8019dd4:	4652      	mov	r2, sl
 8019dd6:	4649      	mov	r1, r9
 8019dd8:	4638      	mov	r0, r7
 8019dda:	47c0      	blx	r8
 8019ddc:	3001      	adds	r0, #1
 8019dde:	d103      	bne.n	8019de8 <_printf_common+0xac>
 8019de0:	f04f 30ff 	mov.w	r0, #4294967295
 8019de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019de8:	3501      	adds	r5, #1
 8019dea:	e7c6      	b.n	8019d7a <_printf_common+0x3e>
 8019dec:	18e1      	adds	r1, r4, r3
 8019dee:	1c5a      	adds	r2, r3, #1
 8019df0:	2030      	movs	r0, #48	; 0x30
 8019df2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019df6:	4422      	add	r2, r4
 8019df8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019dfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019e00:	3302      	adds	r3, #2
 8019e02:	e7c7      	b.n	8019d94 <_printf_common+0x58>
 8019e04:	2301      	movs	r3, #1
 8019e06:	4622      	mov	r2, r4
 8019e08:	4649      	mov	r1, r9
 8019e0a:	4638      	mov	r0, r7
 8019e0c:	47c0      	blx	r8
 8019e0e:	3001      	adds	r0, #1
 8019e10:	d0e6      	beq.n	8019de0 <_printf_common+0xa4>
 8019e12:	3601      	adds	r6, #1
 8019e14:	e7d9      	b.n	8019dca <_printf_common+0x8e>
	...

08019e18 <_printf_i>:
 8019e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019e1c:	7e0f      	ldrb	r7, [r1, #24]
 8019e1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019e20:	2f78      	cmp	r7, #120	; 0x78
 8019e22:	4691      	mov	r9, r2
 8019e24:	4680      	mov	r8, r0
 8019e26:	460c      	mov	r4, r1
 8019e28:	469a      	mov	sl, r3
 8019e2a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019e2e:	d807      	bhi.n	8019e40 <_printf_i+0x28>
 8019e30:	2f62      	cmp	r7, #98	; 0x62
 8019e32:	d80a      	bhi.n	8019e4a <_printf_i+0x32>
 8019e34:	2f00      	cmp	r7, #0
 8019e36:	f000 80d8 	beq.w	8019fea <_printf_i+0x1d2>
 8019e3a:	2f58      	cmp	r7, #88	; 0x58
 8019e3c:	f000 80a3 	beq.w	8019f86 <_printf_i+0x16e>
 8019e40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019e44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019e48:	e03a      	b.n	8019ec0 <_printf_i+0xa8>
 8019e4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019e4e:	2b15      	cmp	r3, #21
 8019e50:	d8f6      	bhi.n	8019e40 <_printf_i+0x28>
 8019e52:	a101      	add	r1, pc, #4	; (adr r1, 8019e58 <_printf_i+0x40>)
 8019e54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019e58:	08019eb1 	.word	0x08019eb1
 8019e5c:	08019ec5 	.word	0x08019ec5
 8019e60:	08019e41 	.word	0x08019e41
 8019e64:	08019e41 	.word	0x08019e41
 8019e68:	08019e41 	.word	0x08019e41
 8019e6c:	08019e41 	.word	0x08019e41
 8019e70:	08019ec5 	.word	0x08019ec5
 8019e74:	08019e41 	.word	0x08019e41
 8019e78:	08019e41 	.word	0x08019e41
 8019e7c:	08019e41 	.word	0x08019e41
 8019e80:	08019e41 	.word	0x08019e41
 8019e84:	08019fd1 	.word	0x08019fd1
 8019e88:	08019ef5 	.word	0x08019ef5
 8019e8c:	08019fb3 	.word	0x08019fb3
 8019e90:	08019e41 	.word	0x08019e41
 8019e94:	08019e41 	.word	0x08019e41
 8019e98:	08019ff3 	.word	0x08019ff3
 8019e9c:	08019e41 	.word	0x08019e41
 8019ea0:	08019ef5 	.word	0x08019ef5
 8019ea4:	08019e41 	.word	0x08019e41
 8019ea8:	08019e41 	.word	0x08019e41
 8019eac:	08019fbb 	.word	0x08019fbb
 8019eb0:	682b      	ldr	r3, [r5, #0]
 8019eb2:	1d1a      	adds	r2, r3, #4
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	602a      	str	r2, [r5, #0]
 8019eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019ebc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019ec0:	2301      	movs	r3, #1
 8019ec2:	e0a3      	b.n	801a00c <_printf_i+0x1f4>
 8019ec4:	6820      	ldr	r0, [r4, #0]
 8019ec6:	6829      	ldr	r1, [r5, #0]
 8019ec8:	0606      	lsls	r6, r0, #24
 8019eca:	f101 0304 	add.w	r3, r1, #4
 8019ece:	d50a      	bpl.n	8019ee6 <_printf_i+0xce>
 8019ed0:	680e      	ldr	r6, [r1, #0]
 8019ed2:	602b      	str	r3, [r5, #0]
 8019ed4:	2e00      	cmp	r6, #0
 8019ed6:	da03      	bge.n	8019ee0 <_printf_i+0xc8>
 8019ed8:	232d      	movs	r3, #45	; 0x2d
 8019eda:	4276      	negs	r6, r6
 8019edc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019ee0:	485e      	ldr	r0, [pc, #376]	; (801a05c <_printf_i+0x244>)
 8019ee2:	230a      	movs	r3, #10
 8019ee4:	e019      	b.n	8019f1a <_printf_i+0x102>
 8019ee6:	680e      	ldr	r6, [r1, #0]
 8019ee8:	602b      	str	r3, [r5, #0]
 8019eea:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019eee:	bf18      	it	ne
 8019ef0:	b236      	sxthne	r6, r6
 8019ef2:	e7ef      	b.n	8019ed4 <_printf_i+0xbc>
 8019ef4:	682b      	ldr	r3, [r5, #0]
 8019ef6:	6820      	ldr	r0, [r4, #0]
 8019ef8:	1d19      	adds	r1, r3, #4
 8019efa:	6029      	str	r1, [r5, #0]
 8019efc:	0601      	lsls	r1, r0, #24
 8019efe:	d501      	bpl.n	8019f04 <_printf_i+0xec>
 8019f00:	681e      	ldr	r6, [r3, #0]
 8019f02:	e002      	b.n	8019f0a <_printf_i+0xf2>
 8019f04:	0646      	lsls	r6, r0, #25
 8019f06:	d5fb      	bpl.n	8019f00 <_printf_i+0xe8>
 8019f08:	881e      	ldrh	r6, [r3, #0]
 8019f0a:	4854      	ldr	r0, [pc, #336]	; (801a05c <_printf_i+0x244>)
 8019f0c:	2f6f      	cmp	r7, #111	; 0x6f
 8019f0e:	bf0c      	ite	eq
 8019f10:	2308      	moveq	r3, #8
 8019f12:	230a      	movne	r3, #10
 8019f14:	2100      	movs	r1, #0
 8019f16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019f1a:	6865      	ldr	r5, [r4, #4]
 8019f1c:	60a5      	str	r5, [r4, #8]
 8019f1e:	2d00      	cmp	r5, #0
 8019f20:	bfa2      	ittt	ge
 8019f22:	6821      	ldrge	r1, [r4, #0]
 8019f24:	f021 0104 	bicge.w	r1, r1, #4
 8019f28:	6021      	strge	r1, [r4, #0]
 8019f2a:	b90e      	cbnz	r6, 8019f30 <_printf_i+0x118>
 8019f2c:	2d00      	cmp	r5, #0
 8019f2e:	d04d      	beq.n	8019fcc <_printf_i+0x1b4>
 8019f30:	4615      	mov	r5, r2
 8019f32:	fbb6 f1f3 	udiv	r1, r6, r3
 8019f36:	fb03 6711 	mls	r7, r3, r1, r6
 8019f3a:	5dc7      	ldrb	r7, [r0, r7]
 8019f3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019f40:	4637      	mov	r7, r6
 8019f42:	42bb      	cmp	r3, r7
 8019f44:	460e      	mov	r6, r1
 8019f46:	d9f4      	bls.n	8019f32 <_printf_i+0x11a>
 8019f48:	2b08      	cmp	r3, #8
 8019f4a:	d10b      	bne.n	8019f64 <_printf_i+0x14c>
 8019f4c:	6823      	ldr	r3, [r4, #0]
 8019f4e:	07de      	lsls	r6, r3, #31
 8019f50:	d508      	bpl.n	8019f64 <_printf_i+0x14c>
 8019f52:	6923      	ldr	r3, [r4, #16]
 8019f54:	6861      	ldr	r1, [r4, #4]
 8019f56:	4299      	cmp	r1, r3
 8019f58:	bfde      	ittt	le
 8019f5a:	2330      	movle	r3, #48	; 0x30
 8019f5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019f60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019f64:	1b52      	subs	r2, r2, r5
 8019f66:	6122      	str	r2, [r4, #16]
 8019f68:	f8cd a000 	str.w	sl, [sp]
 8019f6c:	464b      	mov	r3, r9
 8019f6e:	aa03      	add	r2, sp, #12
 8019f70:	4621      	mov	r1, r4
 8019f72:	4640      	mov	r0, r8
 8019f74:	f7ff fee2 	bl	8019d3c <_printf_common>
 8019f78:	3001      	adds	r0, #1
 8019f7a:	d14c      	bne.n	801a016 <_printf_i+0x1fe>
 8019f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8019f80:	b004      	add	sp, #16
 8019f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f86:	4835      	ldr	r0, [pc, #212]	; (801a05c <_printf_i+0x244>)
 8019f88:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8019f8c:	6829      	ldr	r1, [r5, #0]
 8019f8e:	6823      	ldr	r3, [r4, #0]
 8019f90:	f851 6b04 	ldr.w	r6, [r1], #4
 8019f94:	6029      	str	r1, [r5, #0]
 8019f96:	061d      	lsls	r5, r3, #24
 8019f98:	d514      	bpl.n	8019fc4 <_printf_i+0x1ac>
 8019f9a:	07df      	lsls	r7, r3, #31
 8019f9c:	bf44      	itt	mi
 8019f9e:	f043 0320 	orrmi.w	r3, r3, #32
 8019fa2:	6023      	strmi	r3, [r4, #0]
 8019fa4:	b91e      	cbnz	r6, 8019fae <_printf_i+0x196>
 8019fa6:	6823      	ldr	r3, [r4, #0]
 8019fa8:	f023 0320 	bic.w	r3, r3, #32
 8019fac:	6023      	str	r3, [r4, #0]
 8019fae:	2310      	movs	r3, #16
 8019fb0:	e7b0      	b.n	8019f14 <_printf_i+0xfc>
 8019fb2:	6823      	ldr	r3, [r4, #0]
 8019fb4:	f043 0320 	orr.w	r3, r3, #32
 8019fb8:	6023      	str	r3, [r4, #0]
 8019fba:	2378      	movs	r3, #120	; 0x78
 8019fbc:	4828      	ldr	r0, [pc, #160]	; (801a060 <_printf_i+0x248>)
 8019fbe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8019fc2:	e7e3      	b.n	8019f8c <_printf_i+0x174>
 8019fc4:	0659      	lsls	r1, r3, #25
 8019fc6:	bf48      	it	mi
 8019fc8:	b2b6      	uxthmi	r6, r6
 8019fca:	e7e6      	b.n	8019f9a <_printf_i+0x182>
 8019fcc:	4615      	mov	r5, r2
 8019fce:	e7bb      	b.n	8019f48 <_printf_i+0x130>
 8019fd0:	682b      	ldr	r3, [r5, #0]
 8019fd2:	6826      	ldr	r6, [r4, #0]
 8019fd4:	6961      	ldr	r1, [r4, #20]
 8019fd6:	1d18      	adds	r0, r3, #4
 8019fd8:	6028      	str	r0, [r5, #0]
 8019fda:	0635      	lsls	r5, r6, #24
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	d501      	bpl.n	8019fe4 <_printf_i+0x1cc>
 8019fe0:	6019      	str	r1, [r3, #0]
 8019fe2:	e002      	b.n	8019fea <_printf_i+0x1d2>
 8019fe4:	0670      	lsls	r0, r6, #25
 8019fe6:	d5fb      	bpl.n	8019fe0 <_printf_i+0x1c8>
 8019fe8:	8019      	strh	r1, [r3, #0]
 8019fea:	2300      	movs	r3, #0
 8019fec:	6123      	str	r3, [r4, #16]
 8019fee:	4615      	mov	r5, r2
 8019ff0:	e7ba      	b.n	8019f68 <_printf_i+0x150>
 8019ff2:	682b      	ldr	r3, [r5, #0]
 8019ff4:	1d1a      	adds	r2, r3, #4
 8019ff6:	602a      	str	r2, [r5, #0]
 8019ff8:	681d      	ldr	r5, [r3, #0]
 8019ffa:	6862      	ldr	r2, [r4, #4]
 8019ffc:	2100      	movs	r1, #0
 8019ffe:	4628      	mov	r0, r5
 801a000:	f7e6 f98e 	bl	8000320 <memchr>
 801a004:	b108      	cbz	r0, 801a00a <_printf_i+0x1f2>
 801a006:	1b40      	subs	r0, r0, r5
 801a008:	6060      	str	r0, [r4, #4]
 801a00a:	6863      	ldr	r3, [r4, #4]
 801a00c:	6123      	str	r3, [r4, #16]
 801a00e:	2300      	movs	r3, #0
 801a010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a014:	e7a8      	b.n	8019f68 <_printf_i+0x150>
 801a016:	6923      	ldr	r3, [r4, #16]
 801a018:	462a      	mov	r2, r5
 801a01a:	4649      	mov	r1, r9
 801a01c:	4640      	mov	r0, r8
 801a01e:	47d0      	blx	sl
 801a020:	3001      	adds	r0, #1
 801a022:	d0ab      	beq.n	8019f7c <_printf_i+0x164>
 801a024:	6823      	ldr	r3, [r4, #0]
 801a026:	079b      	lsls	r3, r3, #30
 801a028:	d413      	bmi.n	801a052 <_printf_i+0x23a>
 801a02a:	68e0      	ldr	r0, [r4, #12]
 801a02c:	9b03      	ldr	r3, [sp, #12]
 801a02e:	4298      	cmp	r0, r3
 801a030:	bfb8      	it	lt
 801a032:	4618      	movlt	r0, r3
 801a034:	e7a4      	b.n	8019f80 <_printf_i+0x168>
 801a036:	2301      	movs	r3, #1
 801a038:	4632      	mov	r2, r6
 801a03a:	4649      	mov	r1, r9
 801a03c:	4640      	mov	r0, r8
 801a03e:	47d0      	blx	sl
 801a040:	3001      	adds	r0, #1
 801a042:	d09b      	beq.n	8019f7c <_printf_i+0x164>
 801a044:	3501      	adds	r5, #1
 801a046:	68e3      	ldr	r3, [r4, #12]
 801a048:	9903      	ldr	r1, [sp, #12]
 801a04a:	1a5b      	subs	r3, r3, r1
 801a04c:	42ab      	cmp	r3, r5
 801a04e:	dcf2      	bgt.n	801a036 <_printf_i+0x21e>
 801a050:	e7eb      	b.n	801a02a <_printf_i+0x212>
 801a052:	2500      	movs	r5, #0
 801a054:	f104 0619 	add.w	r6, r4, #25
 801a058:	e7f5      	b.n	801a046 <_printf_i+0x22e>
 801a05a:	bf00      	nop
 801a05c:	0801e4c2 	.word	0x0801e4c2
 801a060:	0801e4d3 	.word	0x0801e4d3

0801a064 <_scanf_float>:
 801a064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a068:	b087      	sub	sp, #28
 801a06a:	4617      	mov	r7, r2
 801a06c:	9303      	str	r3, [sp, #12]
 801a06e:	688b      	ldr	r3, [r1, #8]
 801a070:	1e5a      	subs	r2, r3, #1
 801a072:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801a076:	bf83      	ittte	hi
 801a078:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801a07c:	195b      	addhi	r3, r3, r5
 801a07e:	9302      	strhi	r3, [sp, #8]
 801a080:	2300      	movls	r3, #0
 801a082:	bf86      	itte	hi
 801a084:	f240 135d 	movwhi	r3, #349	; 0x15d
 801a088:	608b      	strhi	r3, [r1, #8]
 801a08a:	9302      	strls	r3, [sp, #8]
 801a08c:	680b      	ldr	r3, [r1, #0]
 801a08e:	468b      	mov	fp, r1
 801a090:	2500      	movs	r5, #0
 801a092:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801a096:	f84b 3b1c 	str.w	r3, [fp], #28
 801a09a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a09e:	4680      	mov	r8, r0
 801a0a0:	460c      	mov	r4, r1
 801a0a2:	465e      	mov	r6, fp
 801a0a4:	46aa      	mov	sl, r5
 801a0a6:	46a9      	mov	r9, r5
 801a0a8:	9501      	str	r5, [sp, #4]
 801a0aa:	68a2      	ldr	r2, [r4, #8]
 801a0ac:	b152      	cbz	r2, 801a0c4 <_scanf_float+0x60>
 801a0ae:	683b      	ldr	r3, [r7, #0]
 801a0b0:	781b      	ldrb	r3, [r3, #0]
 801a0b2:	2b4e      	cmp	r3, #78	; 0x4e
 801a0b4:	d864      	bhi.n	801a180 <_scanf_float+0x11c>
 801a0b6:	2b40      	cmp	r3, #64	; 0x40
 801a0b8:	d83c      	bhi.n	801a134 <_scanf_float+0xd0>
 801a0ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801a0be:	b2c8      	uxtb	r0, r1
 801a0c0:	280e      	cmp	r0, #14
 801a0c2:	d93a      	bls.n	801a13a <_scanf_float+0xd6>
 801a0c4:	f1b9 0f00 	cmp.w	r9, #0
 801a0c8:	d003      	beq.n	801a0d2 <_scanf_float+0x6e>
 801a0ca:	6823      	ldr	r3, [r4, #0]
 801a0cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801a0d0:	6023      	str	r3, [r4, #0]
 801a0d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a0d6:	f1ba 0f01 	cmp.w	sl, #1
 801a0da:	f200 8113 	bhi.w	801a304 <_scanf_float+0x2a0>
 801a0de:	455e      	cmp	r6, fp
 801a0e0:	f200 8105 	bhi.w	801a2ee <_scanf_float+0x28a>
 801a0e4:	2501      	movs	r5, #1
 801a0e6:	4628      	mov	r0, r5
 801a0e8:	b007      	add	sp, #28
 801a0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801a0f2:	2a0d      	cmp	r2, #13
 801a0f4:	d8e6      	bhi.n	801a0c4 <_scanf_float+0x60>
 801a0f6:	a101      	add	r1, pc, #4	; (adr r1, 801a0fc <_scanf_float+0x98>)
 801a0f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a0fc:	0801a23b 	.word	0x0801a23b
 801a100:	0801a0c5 	.word	0x0801a0c5
 801a104:	0801a0c5 	.word	0x0801a0c5
 801a108:	0801a0c5 	.word	0x0801a0c5
 801a10c:	0801a29b 	.word	0x0801a29b
 801a110:	0801a273 	.word	0x0801a273
 801a114:	0801a0c5 	.word	0x0801a0c5
 801a118:	0801a0c5 	.word	0x0801a0c5
 801a11c:	0801a249 	.word	0x0801a249
 801a120:	0801a0c5 	.word	0x0801a0c5
 801a124:	0801a0c5 	.word	0x0801a0c5
 801a128:	0801a0c5 	.word	0x0801a0c5
 801a12c:	0801a0c5 	.word	0x0801a0c5
 801a130:	0801a201 	.word	0x0801a201
 801a134:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801a138:	e7db      	b.n	801a0f2 <_scanf_float+0x8e>
 801a13a:	290e      	cmp	r1, #14
 801a13c:	d8c2      	bhi.n	801a0c4 <_scanf_float+0x60>
 801a13e:	a001      	add	r0, pc, #4	; (adr r0, 801a144 <_scanf_float+0xe0>)
 801a140:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a144:	0801a1f3 	.word	0x0801a1f3
 801a148:	0801a0c5 	.word	0x0801a0c5
 801a14c:	0801a1f3 	.word	0x0801a1f3
 801a150:	0801a287 	.word	0x0801a287
 801a154:	0801a0c5 	.word	0x0801a0c5
 801a158:	0801a1a1 	.word	0x0801a1a1
 801a15c:	0801a1dd 	.word	0x0801a1dd
 801a160:	0801a1dd 	.word	0x0801a1dd
 801a164:	0801a1dd 	.word	0x0801a1dd
 801a168:	0801a1dd 	.word	0x0801a1dd
 801a16c:	0801a1dd 	.word	0x0801a1dd
 801a170:	0801a1dd 	.word	0x0801a1dd
 801a174:	0801a1dd 	.word	0x0801a1dd
 801a178:	0801a1dd 	.word	0x0801a1dd
 801a17c:	0801a1dd 	.word	0x0801a1dd
 801a180:	2b6e      	cmp	r3, #110	; 0x6e
 801a182:	d809      	bhi.n	801a198 <_scanf_float+0x134>
 801a184:	2b60      	cmp	r3, #96	; 0x60
 801a186:	d8b2      	bhi.n	801a0ee <_scanf_float+0x8a>
 801a188:	2b54      	cmp	r3, #84	; 0x54
 801a18a:	d077      	beq.n	801a27c <_scanf_float+0x218>
 801a18c:	2b59      	cmp	r3, #89	; 0x59
 801a18e:	d199      	bne.n	801a0c4 <_scanf_float+0x60>
 801a190:	2d07      	cmp	r5, #7
 801a192:	d197      	bne.n	801a0c4 <_scanf_float+0x60>
 801a194:	2508      	movs	r5, #8
 801a196:	e029      	b.n	801a1ec <_scanf_float+0x188>
 801a198:	2b74      	cmp	r3, #116	; 0x74
 801a19a:	d06f      	beq.n	801a27c <_scanf_float+0x218>
 801a19c:	2b79      	cmp	r3, #121	; 0x79
 801a19e:	e7f6      	b.n	801a18e <_scanf_float+0x12a>
 801a1a0:	6821      	ldr	r1, [r4, #0]
 801a1a2:	05c8      	lsls	r0, r1, #23
 801a1a4:	d51a      	bpl.n	801a1dc <_scanf_float+0x178>
 801a1a6:	9b02      	ldr	r3, [sp, #8]
 801a1a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801a1ac:	6021      	str	r1, [r4, #0]
 801a1ae:	f109 0901 	add.w	r9, r9, #1
 801a1b2:	b11b      	cbz	r3, 801a1bc <_scanf_float+0x158>
 801a1b4:	3b01      	subs	r3, #1
 801a1b6:	3201      	adds	r2, #1
 801a1b8:	9302      	str	r3, [sp, #8]
 801a1ba:	60a2      	str	r2, [r4, #8]
 801a1bc:	68a3      	ldr	r3, [r4, #8]
 801a1be:	3b01      	subs	r3, #1
 801a1c0:	60a3      	str	r3, [r4, #8]
 801a1c2:	6923      	ldr	r3, [r4, #16]
 801a1c4:	3301      	adds	r3, #1
 801a1c6:	6123      	str	r3, [r4, #16]
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	3b01      	subs	r3, #1
 801a1cc:	2b00      	cmp	r3, #0
 801a1ce:	607b      	str	r3, [r7, #4]
 801a1d0:	f340 8084 	ble.w	801a2dc <_scanf_float+0x278>
 801a1d4:	683b      	ldr	r3, [r7, #0]
 801a1d6:	3301      	adds	r3, #1
 801a1d8:	603b      	str	r3, [r7, #0]
 801a1da:	e766      	b.n	801a0aa <_scanf_float+0x46>
 801a1dc:	eb1a 0f05 	cmn.w	sl, r5
 801a1e0:	f47f af70 	bne.w	801a0c4 <_scanf_float+0x60>
 801a1e4:	6822      	ldr	r2, [r4, #0]
 801a1e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801a1ea:	6022      	str	r2, [r4, #0]
 801a1ec:	f806 3b01 	strb.w	r3, [r6], #1
 801a1f0:	e7e4      	b.n	801a1bc <_scanf_float+0x158>
 801a1f2:	6822      	ldr	r2, [r4, #0]
 801a1f4:	0610      	lsls	r0, r2, #24
 801a1f6:	f57f af65 	bpl.w	801a0c4 <_scanf_float+0x60>
 801a1fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801a1fe:	e7f4      	b.n	801a1ea <_scanf_float+0x186>
 801a200:	f1ba 0f00 	cmp.w	sl, #0
 801a204:	d10e      	bne.n	801a224 <_scanf_float+0x1c0>
 801a206:	f1b9 0f00 	cmp.w	r9, #0
 801a20a:	d10e      	bne.n	801a22a <_scanf_float+0x1c6>
 801a20c:	6822      	ldr	r2, [r4, #0]
 801a20e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a212:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a216:	d108      	bne.n	801a22a <_scanf_float+0x1c6>
 801a218:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a21c:	6022      	str	r2, [r4, #0]
 801a21e:	f04f 0a01 	mov.w	sl, #1
 801a222:	e7e3      	b.n	801a1ec <_scanf_float+0x188>
 801a224:	f1ba 0f02 	cmp.w	sl, #2
 801a228:	d055      	beq.n	801a2d6 <_scanf_float+0x272>
 801a22a:	2d01      	cmp	r5, #1
 801a22c:	d002      	beq.n	801a234 <_scanf_float+0x1d0>
 801a22e:	2d04      	cmp	r5, #4
 801a230:	f47f af48 	bne.w	801a0c4 <_scanf_float+0x60>
 801a234:	3501      	adds	r5, #1
 801a236:	b2ed      	uxtb	r5, r5
 801a238:	e7d8      	b.n	801a1ec <_scanf_float+0x188>
 801a23a:	f1ba 0f01 	cmp.w	sl, #1
 801a23e:	f47f af41 	bne.w	801a0c4 <_scanf_float+0x60>
 801a242:	f04f 0a02 	mov.w	sl, #2
 801a246:	e7d1      	b.n	801a1ec <_scanf_float+0x188>
 801a248:	b97d      	cbnz	r5, 801a26a <_scanf_float+0x206>
 801a24a:	f1b9 0f00 	cmp.w	r9, #0
 801a24e:	f47f af3c 	bne.w	801a0ca <_scanf_float+0x66>
 801a252:	6822      	ldr	r2, [r4, #0]
 801a254:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801a258:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801a25c:	f47f af39 	bne.w	801a0d2 <_scanf_float+0x6e>
 801a260:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a264:	6022      	str	r2, [r4, #0]
 801a266:	2501      	movs	r5, #1
 801a268:	e7c0      	b.n	801a1ec <_scanf_float+0x188>
 801a26a:	2d03      	cmp	r5, #3
 801a26c:	d0e2      	beq.n	801a234 <_scanf_float+0x1d0>
 801a26e:	2d05      	cmp	r5, #5
 801a270:	e7de      	b.n	801a230 <_scanf_float+0x1cc>
 801a272:	2d02      	cmp	r5, #2
 801a274:	f47f af26 	bne.w	801a0c4 <_scanf_float+0x60>
 801a278:	2503      	movs	r5, #3
 801a27a:	e7b7      	b.n	801a1ec <_scanf_float+0x188>
 801a27c:	2d06      	cmp	r5, #6
 801a27e:	f47f af21 	bne.w	801a0c4 <_scanf_float+0x60>
 801a282:	2507      	movs	r5, #7
 801a284:	e7b2      	b.n	801a1ec <_scanf_float+0x188>
 801a286:	6822      	ldr	r2, [r4, #0]
 801a288:	0591      	lsls	r1, r2, #22
 801a28a:	f57f af1b 	bpl.w	801a0c4 <_scanf_float+0x60>
 801a28e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801a292:	6022      	str	r2, [r4, #0]
 801a294:	f8cd 9004 	str.w	r9, [sp, #4]
 801a298:	e7a8      	b.n	801a1ec <_scanf_float+0x188>
 801a29a:	6822      	ldr	r2, [r4, #0]
 801a29c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801a2a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801a2a4:	d006      	beq.n	801a2b4 <_scanf_float+0x250>
 801a2a6:	0550      	lsls	r0, r2, #21
 801a2a8:	f57f af0c 	bpl.w	801a0c4 <_scanf_float+0x60>
 801a2ac:	f1b9 0f00 	cmp.w	r9, #0
 801a2b0:	f43f af0f 	beq.w	801a0d2 <_scanf_float+0x6e>
 801a2b4:	0591      	lsls	r1, r2, #22
 801a2b6:	bf58      	it	pl
 801a2b8:	9901      	ldrpl	r1, [sp, #4]
 801a2ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801a2be:	bf58      	it	pl
 801a2c0:	eba9 0101 	subpl.w	r1, r9, r1
 801a2c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801a2c8:	bf58      	it	pl
 801a2ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a2ce:	6022      	str	r2, [r4, #0]
 801a2d0:	f04f 0900 	mov.w	r9, #0
 801a2d4:	e78a      	b.n	801a1ec <_scanf_float+0x188>
 801a2d6:	f04f 0a03 	mov.w	sl, #3
 801a2da:	e787      	b.n	801a1ec <_scanf_float+0x188>
 801a2dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801a2e0:	4639      	mov	r1, r7
 801a2e2:	4640      	mov	r0, r8
 801a2e4:	4798      	blx	r3
 801a2e6:	2800      	cmp	r0, #0
 801a2e8:	f43f aedf 	beq.w	801a0aa <_scanf_float+0x46>
 801a2ec:	e6ea      	b.n	801a0c4 <_scanf_float+0x60>
 801a2ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a2f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a2f6:	463a      	mov	r2, r7
 801a2f8:	4640      	mov	r0, r8
 801a2fa:	4798      	blx	r3
 801a2fc:	6923      	ldr	r3, [r4, #16]
 801a2fe:	3b01      	subs	r3, #1
 801a300:	6123      	str	r3, [r4, #16]
 801a302:	e6ec      	b.n	801a0de <_scanf_float+0x7a>
 801a304:	1e6b      	subs	r3, r5, #1
 801a306:	2b06      	cmp	r3, #6
 801a308:	d825      	bhi.n	801a356 <_scanf_float+0x2f2>
 801a30a:	2d02      	cmp	r5, #2
 801a30c:	d836      	bhi.n	801a37c <_scanf_float+0x318>
 801a30e:	455e      	cmp	r6, fp
 801a310:	f67f aee8 	bls.w	801a0e4 <_scanf_float+0x80>
 801a314:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a318:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a31c:	463a      	mov	r2, r7
 801a31e:	4640      	mov	r0, r8
 801a320:	4798      	blx	r3
 801a322:	6923      	ldr	r3, [r4, #16]
 801a324:	3b01      	subs	r3, #1
 801a326:	6123      	str	r3, [r4, #16]
 801a328:	e7f1      	b.n	801a30e <_scanf_float+0x2aa>
 801a32a:	9802      	ldr	r0, [sp, #8]
 801a32c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a330:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801a334:	9002      	str	r0, [sp, #8]
 801a336:	463a      	mov	r2, r7
 801a338:	4640      	mov	r0, r8
 801a33a:	4798      	blx	r3
 801a33c:	6923      	ldr	r3, [r4, #16]
 801a33e:	3b01      	subs	r3, #1
 801a340:	6123      	str	r3, [r4, #16]
 801a342:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a346:	fa5f fa8a 	uxtb.w	sl, sl
 801a34a:	f1ba 0f02 	cmp.w	sl, #2
 801a34e:	d1ec      	bne.n	801a32a <_scanf_float+0x2c6>
 801a350:	3d03      	subs	r5, #3
 801a352:	b2ed      	uxtb	r5, r5
 801a354:	1b76      	subs	r6, r6, r5
 801a356:	6823      	ldr	r3, [r4, #0]
 801a358:	05da      	lsls	r2, r3, #23
 801a35a:	d52f      	bpl.n	801a3bc <_scanf_float+0x358>
 801a35c:	055b      	lsls	r3, r3, #21
 801a35e:	d510      	bpl.n	801a382 <_scanf_float+0x31e>
 801a360:	455e      	cmp	r6, fp
 801a362:	f67f aebf 	bls.w	801a0e4 <_scanf_float+0x80>
 801a366:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a36a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a36e:	463a      	mov	r2, r7
 801a370:	4640      	mov	r0, r8
 801a372:	4798      	blx	r3
 801a374:	6923      	ldr	r3, [r4, #16]
 801a376:	3b01      	subs	r3, #1
 801a378:	6123      	str	r3, [r4, #16]
 801a37a:	e7f1      	b.n	801a360 <_scanf_float+0x2fc>
 801a37c:	46aa      	mov	sl, r5
 801a37e:	9602      	str	r6, [sp, #8]
 801a380:	e7df      	b.n	801a342 <_scanf_float+0x2de>
 801a382:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a386:	6923      	ldr	r3, [r4, #16]
 801a388:	2965      	cmp	r1, #101	; 0x65
 801a38a:	f103 33ff 	add.w	r3, r3, #4294967295
 801a38e:	f106 35ff 	add.w	r5, r6, #4294967295
 801a392:	6123      	str	r3, [r4, #16]
 801a394:	d00c      	beq.n	801a3b0 <_scanf_float+0x34c>
 801a396:	2945      	cmp	r1, #69	; 0x45
 801a398:	d00a      	beq.n	801a3b0 <_scanf_float+0x34c>
 801a39a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a39e:	463a      	mov	r2, r7
 801a3a0:	4640      	mov	r0, r8
 801a3a2:	4798      	blx	r3
 801a3a4:	6923      	ldr	r3, [r4, #16]
 801a3a6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a3aa:	3b01      	subs	r3, #1
 801a3ac:	1eb5      	subs	r5, r6, #2
 801a3ae:	6123      	str	r3, [r4, #16]
 801a3b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801a3b4:	463a      	mov	r2, r7
 801a3b6:	4640      	mov	r0, r8
 801a3b8:	4798      	blx	r3
 801a3ba:	462e      	mov	r6, r5
 801a3bc:	6825      	ldr	r5, [r4, #0]
 801a3be:	f015 0510 	ands.w	r5, r5, #16
 801a3c2:	d14e      	bne.n	801a462 <_scanf_float+0x3fe>
 801a3c4:	7035      	strb	r5, [r6, #0]
 801a3c6:	6823      	ldr	r3, [r4, #0]
 801a3c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801a3cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a3d0:	d119      	bne.n	801a406 <_scanf_float+0x3a2>
 801a3d2:	9b01      	ldr	r3, [sp, #4]
 801a3d4:	454b      	cmp	r3, r9
 801a3d6:	eba3 0209 	sub.w	r2, r3, r9
 801a3da:	d121      	bne.n	801a420 <_scanf_float+0x3bc>
 801a3dc:	2200      	movs	r2, #0
 801a3de:	4659      	mov	r1, fp
 801a3e0:	4640      	mov	r0, r8
 801a3e2:	f000 fe7f 	bl	801b0e4 <_strtod_r>
 801a3e6:	6822      	ldr	r2, [r4, #0]
 801a3e8:	9b03      	ldr	r3, [sp, #12]
 801a3ea:	f012 0f02 	tst.w	r2, #2
 801a3ee:	681b      	ldr	r3, [r3, #0]
 801a3f0:	d021      	beq.n	801a436 <_scanf_float+0x3d2>
 801a3f2:	9903      	ldr	r1, [sp, #12]
 801a3f4:	1d1a      	adds	r2, r3, #4
 801a3f6:	600a      	str	r2, [r1, #0]
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	ed83 0b00 	vstr	d0, [r3]
 801a3fe:	68e3      	ldr	r3, [r4, #12]
 801a400:	3301      	adds	r3, #1
 801a402:	60e3      	str	r3, [r4, #12]
 801a404:	e66f      	b.n	801a0e6 <_scanf_float+0x82>
 801a406:	9b04      	ldr	r3, [sp, #16]
 801a408:	2b00      	cmp	r3, #0
 801a40a:	d0e7      	beq.n	801a3dc <_scanf_float+0x378>
 801a40c:	9905      	ldr	r1, [sp, #20]
 801a40e:	230a      	movs	r3, #10
 801a410:	462a      	mov	r2, r5
 801a412:	3101      	adds	r1, #1
 801a414:	4640      	mov	r0, r8
 801a416:	f000 feed 	bl	801b1f4 <_strtol_r>
 801a41a:	9b04      	ldr	r3, [sp, #16]
 801a41c:	9e05      	ldr	r6, [sp, #20]
 801a41e:	1ac2      	subs	r2, r0, r3
 801a420:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801a424:	429e      	cmp	r6, r3
 801a426:	bf28      	it	cs
 801a428:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801a42c:	490e      	ldr	r1, [pc, #56]	; (801a468 <_scanf_float+0x404>)
 801a42e:	4630      	mov	r0, r6
 801a430:	f000 f824 	bl	801a47c <siprintf>
 801a434:	e7d2      	b.n	801a3dc <_scanf_float+0x378>
 801a436:	9903      	ldr	r1, [sp, #12]
 801a438:	f012 0f04 	tst.w	r2, #4
 801a43c:	f103 0204 	add.w	r2, r3, #4
 801a440:	600a      	str	r2, [r1, #0]
 801a442:	d1d9      	bne.n	801a3f8 <_scanf_float+0x394>
 801a444:	eeb4 0b40 	vcmp.f64	d0, d0
 801a448:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a44c:	681e      	ldr	r6, [r3, #0]
 801a44e:	d705      	bvc.n	801a45c <_scanf_float+0x3f8>
 801a450:	4806      	ldr	r0, [pc, #24]	; (801a46c <_scanf_float+0x408>)
 801a452:	f000 f80d 	bl	801a470 <nanf>
 801a456:	ed86 0a00 	vstr	s0, [r6]
 801a45a:	e7d0      	b.n	801a3fe <_scanf_float+0x39a>
 801a45c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801a460:	e7f9      	b.n	801a456 <_scanf_float+0x3f2>
 801a462:	2500      	movs	r5, #0
 801a464:	e63f      	b.n	801a0e6 <_scanf_float+0x82>
 801a466:	bf00      	nop
 801a468:	0801e4e4 	.word	0x0801e4e4
 801a46c:	0801e8f0 	.word	0x0801e8f0

0801a470 <nanf>:
 801a470:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801a478 <nanf+0x8>
 801a474:	4770      	bx	lr
 801a476:	bf00      	nop
 801a478:	7fc00000 	.word	0x7fc00000

0801a47c <siprintf>:
 801a47c:	b40e      	push	{r1, r2, r3}
 801a47e:	b500      	push	{lr}
 801a480:	b09c      	sub	sp, #112	; 0x70
 801a482:	ab1d      	add	r3, sp, #116	; 0x74
 801a484:	9002      	str	r0, [sp, #8]
 801a486:	9006      	str	r0, [sp, #24]
 801a488:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a48c:	4809      	ldr	r0, [pc, #36]	; (801a4b4 <siprintf+0x38>)
 801a48e:	9107      	str	r1, [sp, #28]
 801a490:	9104      	str	r1, [sp, #16]
 801a492:	4909      	ldr	r1, [pc, #36]	; (801a4b8 <siprintf+0x3c>)
 801a494:	f853 2b04 	ldr.w	r2, [r3], #4
 801a498:	9105      	str	r1, [sp, #20]
 801a49a:	6800      	ldr	r0, [r0, #0]
 801a49c:	9301      	str	r3, [sp, #4]
 801a49e:	a902      	add	r1, sp, #8
 801a4a0:	f002 fe78 	bl	801d194 <_svfiprintf_r>
 801a4a4:	9b02      	ldr	r3, [sp, #8]
 801a4a6:	2200      	movs	r2, #0
 801a4a8:	701a      	strb	r2, [r3, #0]
 801a4aa:	b01c      	add	sp, #112	; 0x70
 801a4ac:	f85d eb04 	ldr.w	lr, [sp], #4
 801a4b0:	b003      	add	sp, #12
 801a4b2:	4770      	bx	lr
 801a4b4:	24000100 	.word	0x24000100
 801a4b8:	ffff0208 	.word	0xffff0208

0801a4bc <__sread>:
 801a4bc:	b510      	push	{r4, lr}
 801a4be:	460c      	mov	r4, r1
 801a4c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4c4:	f002 ff66 	bl	801d394 <_read_r>
 801a4c8:	2800      	cmp	r0, #0
 801a4ca:	bfab      	itete	ge
 801a4cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a4ce:	89a3      	ldrhlt	r3, [r4, #12]
 801a4d0:	181b      	addge	r3, r3, r0
 801a4d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a4d6:	bfac      	ite	ge
 801a4d8:	6563      	strge	r3, [r4, #84]	; 0x54
 801a4da:	81a3      	strhlt	r3, [r4, #12]
 801a4dc:	bd10      	pop	{r4, pc}

0801a4de <__swrite>:
 801a4de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4e2:	461f      	mov	r7, r3
 801a4e4:	898b      	ldrh	r3, [r1, #12]
 801a4e6:	05db      	lsls	r3, r3, #23
 801a4e8:	4605      	mov	r5, r0
 801a4ea:	460c      	mov	r4, r1
 801a4ec:	4616      	mov	r6, r2
 801a4ee:	d505      	bpl.n	801a4fc <__swrite+0x1e>
 801a4f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4f4:	2302      	movs	r3, #2
 801a4f6:	2200      	movs	r2, #0
 801a4f8:	f002 f810 	bl	801c51c <_lseek_r>
 801a4fc:	89a3      	ldrh	r3, [r4, #12]
 801a4fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a502:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a506:	81a3      	strh	r3, [r4, #12]
 801a508:	4632      	mov	r2, r6
 801a50a:	463b      	mov	r3, r7
 801a50c:	4628      	mov	r0, r5
 801a50e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a512:	f000 be71 	b.w	801b1f8 <_write_r>

0801a516 <__sseek>:
 801a516:	b510      	push	{r4, lr}
 801a518:	460c      	mov	r4, r1
 801a51a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a51e:	f001 fffd 	bl	801c51c <_lseek_r>
 801a522:	1c43      	adds	r3, r0, #1
 801a524:	89a3      	ldrh	r3, [r4, #12]
 801a526:	bf15      	itete	ne
 801a528:	6560      	strne	r0, [r4, #84]	; 0x54
 801a52a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a52e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a532:	81a3      	strheq	r3, [r4, #12]
 801a534:	bf18      	it	ne
 801a536:	81a3      	strhne	r3, [r4, #12]
 801a538:	bd10      	pop	{r4, pc}

0801a53a <__sclose>:
 801a53a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a53e:	f000 be6d 	b.w	801b21c <_close_r>

0801a542 <sulp>:
 801a542:	b570      	push	{r4, r5, r6, lr}
 801a544:	4604      	mov	r4, r0
 801a546:	460d      	mov	r5, r1
 801a548:	4616      	mov	r6, r2
 801a54a:	ec45 4b10 	vmov	d0, r4, r5
 801a54e:	f002 fb83 	bl	801cc58 <__ulp>
 801a552:	b17e      	cbz	r6, 801a574 <sulp+0x32>
 801a554:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801a558:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801a55c:	2b00      	cmp	r3, #0
 801a55e:	dd09      	ble.n	801a574 <sulp+0x32>
 801a560:	051b      	lsls	r3, r3, #20
 801a562:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801a566:	2000      	movs	r0, #0
 801a568:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 801a56c:	ec41 0b17 	vmov	d7, r0, r1
 801a570:	ee20 0b07 	vmul.f64	d0, d0, d7
 801a574:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a578 <_strtod_l>:
 801a578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a57c:	ed2d 8b0e 	vpush	{d8-d14}
 801a580:	b097      	sub	sp, #92	; 0x5c
 801a582:	461f      	mov	r7, r3
 801a584:	2300      	movs	r3, #0
 801a586:	9312      	str	r3, [sp, #72]	; 0x48
 801a588:	4ba1      	ldr	r3, [pc, #644]	; (801a810 <_strtod_l+0x298>)
 801a58a:	920d      	str	r2, [sp, #52]	; 0x34
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	9307      	str	r3, [sp, #28]
 801a590:	4604      	mov	r4, r0
 801a592:	4618      	mov	r0, r3
 801a594:	468b      	mov	fp, r1
 801a596:	f7e5 febb 	bl	8000310 <strlen>
 801a59a:	f04f 0800 	mov.w	r8, #0
 801a59e:	4605      	mov	r5, r0
 801a5a0:	f04f 0900 	mov.w	r9, #0
 801a5a4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 801a5a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a5aa:	7813      	ldrb	r3, [r2, #0]
 801a5ac:	2b2b      	cmp	r3, #43	; 0x2b
 801a5ae:	d04d      	beq.n	801a64c <_strtod_l+0xd4>
 801a5b0:	d83a      	bhi.n	801a628 <_strtod_l+0xb0>
 801a5b2:	2b0d      	cmp	r3, #13
 801a5b4:	d833      	bhi.n	801a61e <_strtod_l+0xa6>
 801a5b6:	2b08      	cmp	r3, #8
 801a5b8:	d833      	bhi.n	801a622 <_strtod_l+0xaa>
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d03d      	beq.n	801a63a <_strtod_l+0xc2>
 801a5be:	2300      	movs	r3, #0
 801a5c0:	9308      	str	r3, [sp, #32]
 801a5c2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 801a5c4:	7833      	ldrb	r3, [r6, #0]
 801a5c6:	2b30      	cmp	r3, #48	; 0x30
 801a5c8:	f040 80b0 	bne.w	801a72c <_strtod_l+0x1b4>
 801a5cc:	7873      	ldrb	r3, [r6, #1]
 801a5ce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801a5d2:	2b58      	cmp	r3, #88	; 0x58
 801a5d4:	d167      	bne.n	801a6a6 <_strtod_l+0x12e>
 801a5d6:	9b08      	ldr	r3, [sp, #32]
 801a5d8:	9301      	str	r3, [sp, #4]
 801a5da:	ab12      	add	r3, sp, #72	; 0x48
 801a5dc:	9702      	str	r7, [sp, #8]
 801a5de:	9300      	str	r3, [sp, #0]
 801a5e0:	4a8c      	ldr	r2, [pc, #560]	; (801a814 <_strtod_l+0x29c>)
 801a5e2:	ab13      	add	r3, sp, #76	; 0x4c
 801a5e4:	a911      	add	r1, sp, #68	; 0x44
 801a5e6:	4620      	mov	r0, r4
 801a5e8:	f001 fc8c 	bl	801bf04 <__gethex>
 801a5ec:	f010 0507 	ands.w	r5, r0, #7
 801a5f0:	4607      	mov	r7, r0
 801a5f2:	d005      	beq.n	801a600 <_strtod_l+0x88>
 801a5f4:	2d06      	cmp	r5, #6
 801a5f6:	d12b      	bne.n	801a650 <_strtod_l+0xd8>
 801a5f8:	3601      	adds	r6, #1
 801a5fa:	2300      	movs	r3, #0
 801a5fc:	9611      	str	r6, [sp, #68]	; 0x44
 801a5fe:	9308      	str	r3, [sp, #32]
 801a600:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a602:	2b00      	cmp	r3, #0
 801a604:	f040 854e 	bne.w	801b0a4 <_strtod_l+0xb2c>
 801a608:	9b08      	ldr	r3, [sp, #32]
 801a60a:	b1e3      	cbz	r3, 801a646 <_strtod_l+0xce>
 801a60c:	ec49 8b17 	vmov	d7, r8, r9
 801a610:	eeb1 0b47 	vneg.f64	d0, d7
 801a614:	b017      	add	sp, #92	; 0x5c
 801a616:	ecbd 8b0e 	vpop	{d8-d14}
 801a61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a61e:	2b20      	cmp	r3, #32
 801a620:	d1cd      	bne.n	801a5be <_strtod_l+0x46>
 801a622:	3201      	adds	r2, #1
 801a624:	9211      	str	r2, [sp, #68]	; 0x44
 801a626:	e7bf      	b.n	801a5a8 <_strtod_l+0x30>
 801a628:	2b2d      	cmp	r3, #45	; 0x2d
 801a62a:	d1c8      	bne.n	801a5be <_strtod_l+0x46>
 801a62c:	2301      	movs	r3, #1
 801a62e:	9308      	str	r3, [sp, #32]
 801a630:	1c53      	adds	r3, r2, #1
 801a632:	9311      	str	r3, [sp, #68]	; 0x44
 801a634:	7853      	ldrb	r3, [r2, #1]
 801a636:	2b00      	cmp	r3, #0
 801a638:	d1c3      	bne.n	801a5c2 <_strtod_l+0x4a>
 801a63a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a63c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 801a640:	2b00      	cmp	r3, #0
 801a642:	f040 852d 	bne.w	801b0a0 <_strtod_l+0xb28>
 801a646:	ec49 8b10 	vmov	d0, r8, r9
 801a64a:	e7e3      	b.n	801a614 <_strtod_l+0x9c>
 801a64c:	2300      	movs	r3, #0
 801a64e:	e7ee      	b.n	801a62e <_strtod_l+0xb6>
 801a650:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801a652:	b13a      	cbz	r2, 801a664 <_strtod_l+0xec>
 801a654:	2135      	movs	r1, #53	; 0x35
 801a656:	a814      	add	r0, sp, #80	; 0x50
 801a658:	f002 fc06 	bl	801ce68 <__copybits>
 801a65c:	9912      	ldr	r1, [sp, #72]	; 0x48
 801a65e:	4620      	mov	r0, r4
 801a660:	f001 ffc8 	bl	801c5f4 <_Bfree>
 801a664:	3d01      	subs	r5, #1
 801a666:	2d04      	cmp	r5, #4
 801a668:	d806      	bhi.n	801a678 <_strtod_l+0x100>
 801a66a:	e8df f005 	tbb	[pc, r5]
 801a66e:	030a      	.short	0x030a
 801a670:	1714      	.short	0x1714
 801a672:	0a          	.byte	0x0a
 801a673:	00          	.byte	0x00
 801a674:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 801a678:	073f      	lsls	r7, r7, #28
 801a67a:	d5c1      	bpl.n	801a600 <_strtod_l+0x88>
 801a67c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 801a680:	e7be      	b.n	801a600 <_strtod_l+0x88>
 801a682:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801a686:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801a688:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801a68c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801a690:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801a694:	e7f0      	b.n	801a678 <_strtod_l+0x100>
 801a696:	f8df 9180 	ldr.w	r9, [pc, #384]	; 801a818 <_strtod_l+0x2a0>
 801a69a:	e7ed      	b.n	801a678 <_strtod_l+0x100>
 801a69c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 801a6a0:	f04f 38ff 	mov.w	r8, #4294967295
 801a6a4:	e7e8      	b.n	801a678 <_strtod_l+0x100>
 801a6a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a6a8:	1c5a      	adds	r2, r3, #1
 801a6aa:	9211      	str	r2, [sp, #68]	; 0x44
 801a6ac:	785b      	ldrb	r3, [r3, #1]
 801a6ae:	2b30      	cmp	r3, #48	; 0x30
 801a6b0:	d0f9      	beq.n	801a6a6 <_strtod_l+0x12e>
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d0a4      	beq.n	801a600 <_strtod_l+0x88>
 801a6b6:	2301      	movs	r3, #1
 801a6b8:	f04f 0a00 	mov.w	sl, #0
 801a6bc:	9304      	str	r3, [sp, #16]
 801a6be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a6c0:	930a      	str	r3, [sp, #40]	; 0x28
 801a6c2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801a6c6:	f8cd a018 	str.w	sl, [sp, #24]
 801a6ca:	220a      	movs	r2, #10
 801a6cc:	9811      	ldr	r0, [sp, #68]	; 0x44
 801a6ce:	7807      	ldrb	r7, [r0, #0]
 801a6d0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801a6d4:	b2d9      	uxtb	r1, r3
 801a6d6:	2909      	cmp	r1, #9
 801a6d8:	d92a      	bls.n	801a730 <_strtod_l+0x1b8>
 801a6da:	9907      	ldr	r1, [sp, #28]
 801a6dc:	462a      	mov	r2, r5
 801a6de:	f002 fe83 	bl	801d3e8 <strncmp>
 801a6e2:	2800      	cmp	r0, #0
 801a6e4:	d033      	beq.n	801a74e <_strtod_l+0x1d6>
 801a6e6:	2000      	movs	r0, #0
 801a6e8:	9b06      	ldr	r3, [sp, #24]
 801a6ea:	463a      	mov	r2, r7
 801a6ec:	4601      	mov	r1, r0
 801a6ee:	4607      	mov	r7, r0
 801a6f0:	2a65      	cmp	r2, #101	; 0x65
 801a6f2:	d001      	beq.n	801a6f8 <_strtod_l+0x180>
 801a6f4:	2a45      	cmp	r2, #69	; 0x45
 801a6f6:	d117      	bne.n	801a728 <_strtod_l+0x1b0>
 801a6f8:	b91b      	cbnz	r3, 801a702 <_strtod_l+0x18a>
 801a6fa:	9b04      	ldr	r3, [sp, #16]
 801a6fc:	4303      	orrs	r3, r0
 801a6fe:	d09c      	beq.n	801a63a <_strtod_l+0xc2>
 801a700:	2300      	movs	r3, #0
 801a702:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 801a706:	f10b 0201 	add.w	r2, fp, #1
 801a70a:	9211      	str	r2, [sp, #68]	; 0x44
 801a70c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 801a710:	2a2b      	cmp	r2, #43	; 0x2b
 801a712:	d071      	beq.n	801a7f8 <_strtod_l+0x280>
 801a714:	2a2d      	cmp	r2, #45	; 0x2d
 801a716:	d077      	beq.n	801a808 <_strtod_l+0x290>
 801a718:	f04f 0e00 	mov.w	lr, #0
 801a71c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 801a720:	2d09      	cmp	r5, #9
 801a722:	d97f      	bls.n	801a824 <_strtod_l+0x2ac>
 801a724:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 801a728:	2500      	movs	r5, #0
 801a72a:	e09b      	b.n	801a864 <_strtod_l+0x2ec>
 801a72c:	2300      	movs	r3, #0
 801a72e:	e7c3      	b.n	801a6b8 <_strtod_l+0x140>
 801a730:	9906      	ldr	r1, [sp, #24]
 801a732:	2908      	cmp	r1, #8
 801a734:	bfdd      	ittte	le
 801a736:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801a738:	fb02 3301 	mlale	r3, r2, r1, r3
 801a73c:	9309      	strle	r3, [sp, #36]	; 0x24
 801a73e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801a742:	9b06      	ldr	r3, [sp, #24]
 801a744:	3001      	adds	r0, #1
 801a746:	3301      	adds	r3, #1
 801a748:	9306      	str	r3, [sp, #24]
 801a74a:	9011      	str	r0, [sp, #68]	; 0x44
 801a74c:	e7be      	b.n	801a6cc <_strtod_l+0x154>
 801a74e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a750:	195a      	adds	r2, r3, r5
 801a752:	9211      	str	r2, [sp, #68]	; 0x44
 801a754:	5d5a      	ldrb	r2, [r3, r5]
 801a756:	9b06      	ldr	r3, [sp, #24]
 801a758:	b3a3      	cbz	r3, 801a7c4 <_strtod_l+0x24c>
 801a75a:	4607      	mov	r7, r0
 801a75c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 801a760:	2909      	cmp	r1, #9
 801a762:	d912      	bls.n	801a78a <_strtod_l+0x212>
 801a764:	2101      	movs	r1, #1
 801a766:	e7c3      	b.n	801a6f0 <_strtod_l+0x178>
 801a768:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a76a:	1c5a      	adds	r2, r3, #1
 801a76c:	9211      	str	r2, [sp, #68]	; 0x44
 801a76e:	785a      	ldrb	r2, [r3, #1]
 801a770:	3001      	adds	r0, #1
 801a772:	2a30      	cmp	r2, #48	; 0x30
 801a774:	d0f8      	beq.n	801a768 <_strtod_l+0x1f0>
 801a776:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801a77a:	2b08      	cmp	r3, #8
 801a77c:	f200 8497 	bhi.w	801b0ae <_strtod_l+0xb36>
 801a780:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a782:	930a      	str	r3, [sp, #40]	; 0x28
 801a784:	4607      	mov	r7, r0
 801a786:	2000      	movs	r0, #0
 801a788:	4603      	mov	r3, r0
 801a78a:	3a30      	subs	r2, #48	; 0x30
 801a78c:	f100 0101 	add.w	r1, r0, #1
 801a790:	d012      	beq.n	801a7b8 <_strtod_l+0x240>
 801a792:	440f      	add	r7, r1
 801a794:	eb00 0c03 	add.w	ip, r0, r3
 801a798:	4619      	mov	r1, r3
 801a79a:	250a      	movs	r5, #10
 801a79c:	4561      	cmp	r1, ip
 801a79e:	d113      	bne.n	801a7c8 <_strtod_l+0x250>
 801a7a0:	1819      	adds	r1, r3, r0
 801a7a2:	2908      	cmp	r1, #8
 801a7a4:	f103 0301 	add.w	r3, r3, #1
 801a7a8:	4403      	add	r3, r0
 801a7aa:	dc1c      	bgt.n	801a7e6 <_strtod_l+0x26e>
 801a7ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a7ae:	210a      	movs	r1, #10
 801a7b0:	fb01 2200 	mla	r2, r1, r0, r2
 801a7b4:	9209      	str	r2, [sp, #36]	; 0x24
 801a7b6:	2100      	movs	r1, #0
 801a7b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a7ba:	1c50      	adds	r0, r2, #1
 801a7bc:	9011      	str	r0, [sp, #68]	; 0x44
 801a7be:	7852      	ldrb	r2, [r2, #1]
 801a7c0:	4608      	mov	r0, r1
 801a7c2:	e7cb      	b.n	801a75c <_strtod_l+0x1e4>
 801a7c4:	9806      	ldr	r0, [sp, #24]
 801a7c6:	e7d4      	b.n	801a772 <_strtod_l+0x1fa>
 801a7c8:	2908      	cmp	r1, #8
 801a7ca:	dc04      	bgt.n	801a7d6 <_strtod_l+0x25e>
 801a7cc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801a7ce:	436e      	muls	r6, r5
 801a7d0:	9609      	str	r6, [sp, #36]	; 0x24
 801a7d2:	3101      	adds	r1, #1
 801a7d4:	e7e2      	b.n	801a79c <_strtod_l+0x224>
 801a7d6:	f101 0e01 	add.w	lr, r1, #1
 801a7da:	f1be 0f10 	cmp.w	lr, #16
 801a7de:	bfd8      	it	le
 801a7e0:	fb05 fa0a 	mulle.w	sl, r5, sl
 801a7e4:	e7f5      	b.n	801a7d2 <_strtod_l+0x25a>
 801a7e6:	2b10      	cmp	r3, #16
 801a7e8:	bfdc      	itt	le
 801a7ea:	210a      	movle	r1, #10
 801a7ec:	fb01 2a0a 	mlale	sl, r1, sl, r2
 801a7f0:	e7e1      	b.n	801a7b6 <_strtod_l+0x23e>
 801a7f2:	2700      	movs	r7, #0
 801a7f4:	2101      	movs	r1, #1
 801a7f6:	e780      	b.n	801a6fa <_strtod_l+0x182>
 801a7f8:	f04f 0e00 	mov.w	lr, #0
 801a7fc:	f10b 0202 	add.w	r2, fp, #2
 801a800:	9211      	str	r2, [sp, #68]	; 0x44
 801a802:	f89b 2002 	ldrb.w	r2, [fp, #2]
 801a806:	e789      	b.n	801a71c <_strtod_l+0x1a4>
 801a808:	f04f 0e01 	mov.w	lr, #1
 801a80c:	e7f6      	b.n	801a7fc <_strtod_l+0x284>
 801a80e:	bf00      	nop
 801a810:	0801e738 	.word	0x0801e738
 801a814:	0801e4ec 	.word	0x0801e4ec
 801a818:	7ff00000 	.word	0x7ff00000
 801a81c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a81e:	1c55      	adds	r5, r2, #1
 801a820:	9511      	str	r5, [sp, #68]	; 0x44
 801a822:	7852      	ldrb	r2, [r2, #1]
 801a824:	2a30      	cmp	r2, #48	; 0x30
 801a826:	d0f9      	beq.n	801a81c <_strtod_l+0x2a4>
 801a828:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 801a82c:	2d08      	cmp	r5, #8
 801a82e:	f63f af7b 	bhi.w	801a728 <_strtod_l+0x1b0>
 801a832:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 801a836:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a838:	9207      	str	r2, [sp, #28]
 801a83a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801a83c:	1c55      	adds	r5, r2, #1
 801a83e:	9511      	str	r5, [sp, #68]	; 0x44
 801a840:	7852      	ldrb	r2, [r2, #1]
 801a842:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801a846:	2e09      	cmp	r6, #9
 801a848:	d937      	bls.n	801a8ba <_strtod_l+0x342>
 801a84a:	9e07      	ldr	r6, [sp, #28]
 801a84c:	1bad      	subs	r5, r5, r6
 801a84e:	2d08      	cmp	r5, #8
 801a850:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801a854:	dc02      	bgt.n	801a85c <_strtod_l+0x2e4>
 801a856:	4565      	cmp	r5, ip
 801a858:	bfa8      	it	ge
 801a85a:	4665      	movge	r5, ip
 801a85c:	f1be 0f00 	cmp.w	lr, #0
 801a860:	d000      	beq.n	801a864 <_strtod_l+0x2ec>
 801a862:	426d      	negs	r5, r5
 801a864:	2b00      	cmp	r3, #0
 801a866:	d14d      	bne.n	801a904 <_strtod_l+0x38c>
 801a868:	9b04      	ldr	r3, [sp, #16]
 801a86a:	4303      	orrs	r3, r0
 801a86c:	f47f aec8 	bne.w	801a600 <_strtod_l+0x88>
 801a870:	2900      	cmp	r1, #0
 801a872:	f47f aee2 	bne.w	801a63a <_strtod_l+0xc2>
 801a876:	2a69      	cmp	r2, #105	; 0x69
 801a878:	d027      	beq.n	801a8ca <_strtod_l+0x352>
 801a87a:	dc24      	bgt.n	801a8c6 <_strtod_l+0x34e>
 801a87c:	2a49      	cmp	r2, #73	; 0x49
 801a87e:	d024      	beq.n	801a8ca <_strtod_l+0x352>
 801a880:	2a4e      	cmp	r2, #78	; 0x4e
 801a882:	f47f aeda 	bne.w	801a63a <_strtod_l+0xc2>
 801a886:	4996      	ldr	r1, [pc, #600]	; (801aae0 <_strtod_l+0x568>)
 801a888:	a811      	add	r0, sp, #68	; 0x44
 801a88a:	f001 fd93 	bl	801c3b4 <__match>
 801a88e:	2800      	cmp	r0, #0
 801a890:	f43f aed3 	beq.w	801a63a <_strtod_l+0xc2>
 801a894:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a896:	781b      	ldrb	r3, [r3, #0]
 801a898:	2b28      	cmp	r3, #40	; 0x28
 801a89a:	d12d      	bne.n	801a8f8 <_strtod_l+0x380>
 801a89c:	4991      	ldr	r1, [pc, #580]	; (801aae4 <_strtod_l+0x56c>)
 801a89e:	aa14      	add	r2, sp, #80	; 0x50
 801a8a0:	a811      	add	r0, sp, #68	; 0x44
 801a8a2:	f001 fd9b 	bl	801c3dc <__hexnan>
 801a8a6:	2805      	cmp	r0, #5
 801a8a8:	d126      	bne.n	801a8f8 <_strtod_l+0x380>
 801a8aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801a8ac:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801a8b0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801a8b4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801a8b8:	e6a2      	b.n	801a600 <_strtod_l+0x88>
 801a8ba:	250a      	movs	r5, #10
 801a8bc:	fb05 250c 	mla	r5, r5, ip, r2
 801a8c0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 801a8c4:	e7b9      	b.n	801a83a <_strtod_l+0x2c2>
 801a8c6:	2a6e      	cmp	r2, #110	; 0x6e
 801a8c8:	e7db      	b.n	801a882 <_strtod_l+0x30a>
 801a8ca:	4987      	ldr	r1, [pc, #540]	; (801aae8 <_strtod_l+0x570>)
 801a8cc:	a811      	add	r0, sp, #68	; 0x44
 801a8ce:	f001 fd71 	bl	801c3b4 <__match>
 801a8d2:	2800      	cmp	r0, #0
 801a8d4:	f43f aeb1 	beq.w	801a63a <_strtod_l+0xc2>
 801a8d8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a8da:	4984      	ldr	r1, [pc, #528]	; (801aaec <_strtod_l+0x574>)
 801a8dc:	3b01      	subs	r3, #1
 801a8de:	a811      	add	r0, sp, #68	; 0x44
 801a8e0:	9311      	str	r3, [sp, #68]	; 0x44
 801a8e2:	f001 fd67 	bl	801c3b4 <__match>
 801a8e6:	b910      	cbnz	r0, 801a8ee <_strtod_l+0x376>
 801a8e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a8ea:	3301      	adds	r3, #1
 801a8ec:	9311      	str	r3, [sp, #68]	; 0x44
 801a8ee:	f8df 9210 	ldr.w	r9, [pc, #528]	; 801ab00 <_strtod_l+0x588>
 801a8f2:	f04f 0800 	mov.w	r8, #0
 801a8f6:	e683      	b.n	801a600 <_strtod_l+0x88>
 801a8f8:	487d      	ldr	r0, [pc, #500]	; (801aaf0 <_strtod_l+0x578>)
 801a8fa:	f002 fd5d 	bl	801d3b8 <nan>
 801a8fe:	ec59 8b10 	vmov	r8, r9, d0
 801a902:	e67d      	b.n	801a600 <_strtod_l+0x88>
 801a904:	1bea      	subs	r2, r5, r7
 801a906:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 801a90a:	9207      	str	r2, [sp, #28]
 801a90c:	9a06      	ldr	r2, [sp, #24]
 801a90e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a912:	2a00      	cmp	r2, #0
 801a914:	bf08      	it	eq
 801a916:	461a      	moveq	r2, r3
 801a918:	2b10      	cmp	r3, #16
 801a91a:	9206      	str	r2, [sp, #24]
 801a91c:	461a      	mov	r2, r3
 801a91e:	bfa8      	it	ge
 801a920:	2210      	movge	r2, #16
 801a922:	2b09      	cmp	r3, #9
 801a924:	ec59 8b17 	vmov	r8, r9, d7
 801a928:	dd0c      	ble.n	801a944 <_strtod_l+0x3cc>
 801a92a:	4972      	ldr	r1, [pc, #456]	; (801aaf4 <_strtod_l+0x57c>)
 801a92c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 801a930:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 801a934:	ee06 aa90 	vmov	s13, sl
 801a938:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 801a93c:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a940:	ec59 8b16 	vmov	r8, r9, d6
 801a944:	2b0f      	cmp	r3, #15
 801a946:	dc36      	bgt.n	801a9b6 <_strtod_l+0x43e>
 801a948:	9907      	ldr	r1, [sp, #28]
 801a94a:	2900      	cmp	r1, #0
 801a94c:	f43f ae58 	beq.w	801a600 <_strtod_l+0x88>
 801a950:	dd23      	ble.n	801a99a <_strtod_l+0x422>
 801a952:	2916      	cmp	r1, #22
 801a954:	dc0b      	bgt.n	801a96e <_strtod_l+0x3f6>
 801a956:	4b67      	ldr	r3, [pc, #412]	; (801aaf4 <_strtod_l+0x57c>)
 801a958:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 801a95c:	ed93 7b00 	vldr	d7, [r3]
 801a960:	ec49 8b16 	vmov	d6, r8, r9
 801a964:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a968:	ec59 8b17 	vmov	r8, r9, d7
 801a96c:	e648      	b.n	801a600 <_strtod_l+0x88>
 801a96e:	9807      	ldr	r0, [sp, #28]
 801a970:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801a974:	4281      	cmp	r1, r0
 801a976:	db1e      	blt.n	801a9b6 <_strtod_l+0x43e>
 801a978:	4a5e      	ldr	r2, [pc, #376]	; (801aaf4 <_strtod_l+0x57c>)
 801a97a:	f1c3 030f 	rsb	r3, r3, #15
 801a97e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801a982:	ed91 7b00 	vldr	d7, [r1]
 801a986:	ec49 8b16 	vmov	d6, r8, r9
 801a98a:	1ac3      	subs	r3, r0, r3
 801a98c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 801a990:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a994:	ed92 6b00 	vldr	d6, [r2]
 801a998:	e7e4      	b.n	801a964 <_strtod_l+0x3ec>
 801a99a:	9907      	ldr	r1, [sp, #28]
 801a99c:	3116      	adds	r1, #22
 801a99e:	db0a      	blt.n	801a9b6 <_strtod_l+0x43e>
 801a9a0:	4b54      	ldr	r3, [pc, #336]	; (801aaf4 <_strtod_l+0x57c>)
 801a9a2:	1b7d      	subs	r5, r7, r5
 801a9a4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 801a9a8:	ed95 7b00 	vldr	d7, [r5]
 801a9ac:	ec49 8b16 	vmov	d6, r8, r9
 801a9b0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a9b4:	e7d8      	b.n	801a968 <_strtod_l+0x3f0>
 801a9b6:	9907      	ldr	r1, [sp, #28]
 801a9b8:	1a9a      	subs	r2, r3, r2
 801a9ba:	440a      	add	r2, r1
 801a9bc:	2a00      	cmp	r2, #0
 801a9be:	dd6f      	ble.n	801aaa0 <_strtod_l+0x528>
 801a9c0:	f012 000f 	ands.w	r0, r2, #15
 801a9c4:	d00a      	beq.n	801a9dc <_strtod_l+0x464>
 801a9c6:	494b      	ldr	r1, [pc, #300]	; (801aaf4 <_strtod_l+0x57c>)
 801a9c8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801a9cc:	ed91 7b00 	vldr	d7, [r1]
 801a9d0:	ec49 8b16 	vmov	d6, r8, r9
 801a9d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a9d8:	ec59 8b17 	vmov	r8, r9, d7
 801a9dc:	f032 020f 	bics.w	r2, r2, #15
 801a9e0:	d04f      	beq.n	801aa82 <_strtod_l+0x50a>
 801a9e2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 801a9e6:	dd22      	ble.n	801aa2e <_strtod_l+0x4b6>
 801a9e8:	2500      	movs	r5, #0
 801a9ea:	462e      	mov	r6, r5
 801a9ec:	9506      	str	r5, [sp, #24]
 801a9ee:	462f      	mov	r7, r5
 801a9f0:	2322      	movs	r3, #34	; 0x22
 801a9f2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 801ab00 <_strtod_l+0x588>
 801a9f6:	6023      	str	r3, [r4, #0]
 801a9f8:	f04f 0800 	mov.w	r8, #0
 801a9fc:	9b06      	ldr	r3, [sp, #24]
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	f43f adfe 	beq.w	801a600 <_strtod_l+0x88>
 801aa04:	9912      	ldr	r1, [sp, #72]	; 0x48
 801aa06:	4620      	mov	r0, r4
 801aa08:	f001 fdf4 	bl	801c5f4 <_Bfree>
 801aa0c:	4639      	mov	r1, r7
 801aa0e:	4620      	mov	r0, r4
 801aa10:	f001 fdf0 	bl	801c5f4 <_Bfree>
 801aa14:	4631      	mov	r1, r6
 801aa16:	4620      	mov	r0, r4
 801aa18:	f001 fdec 	bl	801c5f4 <_Bfree>
 801aa1c:	9906      	ldr	r1, [sp, #24]
 801aa1e:	4620      	mov	r0, r4
 801aa20:	f001 fde8 	bl	801c5f4 <_Bfree>
 801aa24:	4629      	mov	r1, r5
 801aa26:	4620      	mov	r0, r4
 801aa28:	f001 fde4 	bl	801c5f4 <_Bfree>
 801aa2c:	e5e8      	b.n	801a600 <_strtod_l+0x88>
 801aa2e:	2000      	movs	r0, #0
 801aa30:	ec49 8b17 	vmov	d7, r8, r9
 801aa34:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 801aaf8 <_strtod_l+0x580>
 801aa38:	1112      	asrs	r2, r2, #4
 801aa3a:	4601      	mov	r1, r0
 801aa3c:	2a01      	cmp	r2, #1
 801aa3e:	dc23      	bgt.n	801aa88 <_strtod_l+0x510>
 801aa40:	b108      	cbz	r0, 801aa46 <_strtod_l+0x4ce>
 801aa42:	ec59 8b17 	vmov	r8, r9, d7
 801aa46:	4a2c      	ldr	r2, [pc, #176]	; (801aaf8 <_strtod_l+0x580>)
 801aa48:	482c      	ldr	r0, [pc, #176]	; (801aafc <_strtod_l+0x584>)
 801aa4a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801aa4e:	ed92 7b00 	vldr	d7, [r2]
 801aa52:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801aa56:	ec49 8b16 	vmov	d6, r8, r9
 801aa5a:	4a29      	ldr	r2, [pc, #164]	; (801ab00 <_strtod_l+0x588>)
 801aa5c:	ee27 7b06 	vmul.f64	d7, d7, d6
 801aa60:	ee17 1a90 	vmov	r1, s15
 801aa64:	400a      	ands	r2, r1
 801aa66:	4282      	cmp	r2, r0
 801aa68:	ec59 8b17 	vmov	r8, r9, d7
 801aa6c:	d8bc      	bhi.n	801a9e8 <_strtod_l+0x470>
 801aa6e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801aa72:	4282      	cmp	r2, r0
 801aa74:	bf86      	itte	hi
 801aa76:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 801ab04 <_strtod_l+0x58c>
 801aa7a:	f04f 38ff 	movhi.w	r8, #4294967295
 801aa7e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801aa82:	2200      	movs	r2, #0
 801aa84:	9204      	str	r2, [sp, #16]
 801aa86:	e078      	b.n	801ab7a <_strtod_l+0x602>
 801aa88:	07d6      	lsls	r6, r2, #31
 801aa8a:	d504      	bpl.n	801aa96 <_strtod_l+0x51e>
 801aa8c:	ed9c 6b00 	vldr	d6, [ip]
 801aa90:	2001      	movs	r0, #1
 801aa92:	ee27 7b06 	vmul.f64	d7, d7, d6
 801aa96:	3101      	adds	r1, #1
 801aa98:	1052      	asrs	r2, r2, #1
 801aa9a:	f10c 0c08 	add.w	ip, ip, #8
 801aa9e:	e7cd      	b.n	801aa3c <_strtod_l+0x4c4>
 801aaa0:	d0ef      	beq.n	801aa82 <_strtod_l+0x50a>
 801aaa2:	4252      	negs	r2, r2
 801aaa4:	f012 000f 	ands.w	r0, r2, #15
 801aaa8:	d00a      	beq.n	801aac0 <_strtod_l+0x548>
 801aaaa:	4912      	ldr	r1, [pc, #72]	; (801aaf4 <_strtod_l+0x57c>)
 801aaac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801aab0:	ed91 7b00 	vldr	d7, [r1]
 801aab4:	ec49 8b16 	vmov	d6, r8, r9
 801aab8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801aabc:	ec59 8b17 	vmov	r8, r9, d7
 801aac0:	1112      	asrs	r2, r2, #4
 801aac2:	d0de      	beq.n	801aa82 <_strtod_l+0x50a>
 801aac4:	2a1f      	cmp	r2, #31
 801aac6:	dd1f      	ble.n	801ab08 <_strtod_l+0x590>
 801aac8:	2500      	movs	r5, #0
 801aaca:	462e      	mov	r6, r5
 801aacc:	9506      	str	r5, [sp, #24]
 801aace:	462f      	mov	r7, r5
 801aad0:	2322      	movs	r3, #34	; 0x22
 801aad2:	f04f 0800 	mov.w	r8, #0
 801aad6:	f04f 0900 	mov.w	r9, #0
 801aada:	6023      	str	r3, [r4, #0]
 801aadc:	e78e      	b.n	801a9fc <_strtod_l+0x484>
 801aade:	bf00      	nop
 801aae0:	0801e4bd 	.word	0x0801e4bd
 801aae4:	0801e500 	.word	0x0801e500
 801aae8:	0801e4b5 	.word	0x0801e4b5
 801aaec:	0801e644 	.word	0x0801e644
 801aaf0:	0801e8f0 	.word	0x0801e8f0
 801aaf4:	0801e7d0 	.word	0x0801e7d0
 801aaf8:	0801e7a8 	.word	0x0801e7a8
 801aafc:	7ca00000 	.word	0x7ca00000
 801ab00:	7ff00000 	.word	0x7ff00000
 801ab04:	7fefffff 	.word	0x7fefffff
 801ab08:	f012 0110 	ands.w	r1, r2, #16
 801ab0c:	bf18      	it	ne
 801ab0e:	216a      	movne	r1, #106	; 0x6a
 801ab10:	9104      	str	r1, [sp, #16]
 801ab12:	ec49 8b17 	vmov	d7, r8, r9
 801ab16:	49be      	ldr	r1, [pc, #760]	; (801ae10 <_strtod_l+0x898>)
 801ab18:	2000      	movs	r0, #0
 801ab1a:	07d6      	lsls	r6, r2, #31
 801ab1c:	d504      	bpl.n	801ab28 <_strtod_l+0x5b0>
 801ab1e:	ed91 6b00 	vldr	d6, [r1]
 801ab22:	2001      	movs	r0, #1
 801ab24:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ab28:	1052      	asrs	r2, r2, #1
 801ab2a:	f101 0108 	add.w	r1, r1, #8
 801ab2e:	d1f4      	bne.n	801ab1a <_strtod_l+0x5a2>
 801ab30:	b108      	cbz	r0, 801ab36 <_strtod_l+0x5be>
 801ab32:	ec59 8b17 	vmov	r8, r9, d7
 801ab36:	9a04      	ldr	r2, [sp, #16]
 801ab38:	b1c2      	cbz	r2, 801ab6c <_strtod_l+0x5f4>
 801ab3a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 801ab3e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801ab42:	2a00      	cmp	r2, #0
 801ab44:	4648      	mov	r0, r9
 801ab46:	dd11      	ble.n	801ab6c <_strtod_l+0x5f4>
 801ab48:	2a1f      	cmp	r2, #31
 801ab4a:	f340 812e 	ble.w	801adaa <_strtod_l+0x832>
 801ab4e:	2a34      	cmp	r2, #52	; 0x34
 801ab50:	bfde      	ittt	le
 801ab52:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801ab56:	f04f 32ff 	movle.w	r2, #4294967295
 801ab5a:	fa02 f101 	lslle.w	r1, r2, r1
 801ab5e:	f04f 0800 	mov.w	r8, #0
 801ab62:	bfcc      	ite	gt
 801ab64:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 801ab68:	ea01 0900 	andle.w	r9, r1, r0
 801ab6c:	ec49 8b17 	vmov	d7, r8, r9
 801ab70:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ab74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab78:	d0a6      	beq.n	801aac8 <_strtod_l+0x550>
 801ab7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ab7c:	9200      	str	r2, [sp, #0]
 801ab7e:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ab80:	9a06      	ldr	r2, [sp, #24]
 801ab82:	4620      	mov	r0, r4
 801ab84:	f001 fd9e 	bl	801c6c4 <__s2b>
 801ab88:	9006      	str	r0, [sp, #24]
 801ab8a:	2800      	cmp	r0, #0
 801ab8c:	f43f af2c 	beq.w	801a9e8 <_strtod_l+0x470>
 801ab90:	9b07      	ldr	r3, [sp, #28]
 801ab92:	1b7d      	subs	r5, r7, r5
 801ab94:	2b00      	cmp	r3, #0
 801ab96:	bfb4      	ite	lt
 801ab98:	462b      	movlt	r3, r5
 801ab9a:	2300      	movge	r3, #0
 801ab9c:	9309      	str	r3, [sp, #36]	; 0x24
 801ab9e:	9b07      	ldr	r3, [sp, #28]
 801aba0:	ed9f 9b93 	vldr	d9, [pc, #588]	; 801adf0 <_strtod_l+0x878>
 801aba4:	ed9f ab94 	vldr	d10, [pc, #592]	; 801adf8 <_strtod_l+0x880>
 801aba8:	ed9f bb95 	vldr	d11, [pc, #596]	; 801ae00 <_strtod_l+0x888>
 801abac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801abb0:	2500      	movs	r5, #0
 801abb2:	930c      	str	r3, [sp, #48]	; 0x30
 801abb4:	462e      	mov	r6, r5
 801abb6:	9b06      	ldr	r3, [sp, #24]
 801abb8:	4620      	mov	r0, r4
 801abba:	6859      	ldr	r1, [r3, #4]
 801abbc:	f001 fcda 	bl	801c574 <_Balloc>
 801abc0:	4607      	mov	r7, r0
 801abc2:	2800      	cmp	r0, #0
 801abc4:	f43f af14 	beq.w	801a9f0 <_strtod_l+0x478>
 801abc8:	9b06      	ldr	r3, [sp, #24]
 801abca:	691a      	ldr	r2, [r3, #16]
 801abcc:	3202      	adds	r2, #2
 801abce:	f103 010c 	add.w	r1, r3, #12
 801abd2:	0092      	lsls	r2, r2, #2
 801abd4:	300c      	adds	r0, #12
 801abd6:	f7fe fded 	bl	80197b4 <memcpy>
 801abda:	ec49 8b10 	vmov	d0, r8, r9
 801abde:	aa14      	add	r2, sp, #80	; 0x50
 801abe0:	a913      	add	r1, sp, #76	; 0x4c
 801abe2:	4620      	mov	r0, r4
 801abe4:	f002 f8b4 	bl	801cd50 <__d2b>
 801abe8:	ec49 8b18 	vmov	d8, r8, r9
 801abec:	9012      	str	r0, [sp, #72]	; 0x48
 801abee:	2800      	cmp	r0, #0
 801abf0:	f43f aefe 	beq.w	801a9f0 <_strtod_l+0x478>
 801abf4:	2101      	movs	r1, #1
 801abf6:	4620      	mov	r0, r4
 801abf8:	f001 fdfe 	bl	801c7f8 <__i2b>
 801abfc:	4606      	mov	r6, r0
 801abfe:	2800      	cmp	r0, #0
 801ac00:	f43f aef6 	beq.w	801a9f0 <_strtod_l+0x478>
 801ac04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801ac06:	9914      	ldr	r1, [sp, #80]	; 0x50
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	bfab      	itete	ge
 801ac0c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 801ac0e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 801ac10:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 801ac14:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 801ac18:	bfac      	ite	ge
 801ac1a:	eb03 0b02 	addge.w	fp, r3, r2
 801ac1e:	eba2 0a03 	sublt.w	sl, r2, r3
 801ac22:	9a04      	ldr	r2, [sp, #16]
 801ac24:	1a9b      	subs	r3, r3, r2
 801ac26:	440b      	add	r3, r1
 801ac28:	4a7a      	ldr	r2, [pc, #488]	; (801ae14 <_strtod_l+0x89c>)
 801ac2a:	3b01      	subs	r3, #1
 801ac2c:	4293      	cmp	r3, r2
 801ac2e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 801ac32:	f280 80cd 	bge.w	801add0 <_strtod_l+0x858>
 801ac36:	1ad2      	subs	r2, r2, r3
 801ac38:	2a1f      	cmp	r2, #31
 801ac3a:	eba1 0102 	sub.w	r1, r1, r2
 801ac3e:	f04f 0001 	mov.w	r0, #1
 801ac42:	f300 80b9 	bgt.w	801adb8 <_strtod_l+0x840>
 801ac46:	fa00 f302 	lsl.w	r3, r0, r2
 801ac4a:	930b      	str	r3, [sp, #44]	; 0x2c
 801ac4c:	2300      	movs	r3, #0
 801ac4e:	930a      	str	r3, [sp, #40]	; 0x28
 801ac50:	eb0b 0301 	add.w	r3, fp, r1
 801ac54:	9a04      	ldr	r2, [sp, #16]
 801ac56:	459b      	cmp	fp, r3
 801ac58:	448a      	add	sl, r1
 801ac5a:	4492      	add	sl, r2
 801ac5c:	465a      	mov	r2, fp
 801ac5e:	bfa8      	it	ge
 801ac60:	461a      	movge	r2, r3
 801ac62:	4552      	cmp	r2, sl
 801ac64:	bfa8      	it	ge
 801ac66:	4652      	movge	r2, sl
 801ac68:	2a00      	cmp	r2, #0
 801ac6a:	bfc2      	ittt	gt
 801ac6c:	1a9b      	subgt	r3, r3, r2
 801ac6e:	ebaa 0a02 	subgt.w	sl, sl, r2
 801ac72:	ebab 0b02 	subgt.w	fp, fp, r2
 801ac76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ac78:	2a00      	cmp	r2, #0
 801ac7a:	dd18      	ble.n	801acae <_strtod_l+0x736>
 801ac7c:	4631      	mov	r1, r6
 801ac7e:	4620      	mov	r0, r4
 801ac80:	930f      	str	r3, [sp, #60]	; 0x3c
 801ac82:	f001 fe79 	bl	801c978 <__pow5mult>
 801ac86:	4606      	mov	r6, r0
 801ac88:	2800      	cmp	r0, #0
 801ac8a:	f43f aeb1 	beq.w	801a9f0 <_strtod_l+0x478>
 801ac8e:	4601      	mov	r1, r0
 801ac90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801ac92:	4620      	mov	r0, r4
 801ac94:	f001 fdc6 	bl	801c824 <__multiply>
 801ac98:	900e      	str	r0, [sp, #56]	; 0x38
 801ac9a:	2800      	cmp	r0, #0
 801ac9c:	f43f aea8 	beq.w	801a9f0 <_strtod_l+0x478>
 801aca0:	9912      	ldr	r1, [sp, #72]	; 0x48
 801aca2:	4620      	mov	r0, r4
 801aca4:	f001 fca6 	bl	801c5f4 <_Bfree>
 801aca8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801acaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801acac:	9212      	str	r2, [sp, #72]	; 0x48
 801acae:	2b00      	cmp	r3, #0
 801acb0:	f300 8093 	bgt.w	801adda <_strtod_l+0x862>
 801acb4:	9b07      	ldr	r3, [sp, #28]
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	dd08      	ble.n	801accc <_strtod_l+0x754>
 801acba:	4639      	mov	r1, r7
 801acbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801acbe:	4620      	mov	r0, r4
 801acc0:	f001 fe5a 	bl	801c978 <__pow5mult>
 801acc4:	4607      	mov	r7, r0
 801acc6:	2800      	cmp	r0, #0
 801acc8:	f43f ae92 	beq.w	801a9f0 <_strtod_l+0x478>
 801accc:	f1ba 0f00 	cmp.w	sl, #0
 801acd0:	dd08      	ble.n	801ace4 <_strtod_l+0x76c>
 801acd2:	4639      	mov	r1, r7
 801acd4:	4652      	mov	r2, sl
 801acd6:	4620      	mov	r0, r4
 801acd8:	f001 fea8 	bl	801ca2c <__lshift>
 801acdc:	4607      	mov	r7, r0
 801acde:	2800      	cmp	r0, #0
 801ace0:	f43f ae86 	beq.w	801a9f0 <_strtod_l+0x478>
 801ace4:	f1bb 0f00 	cmp.w	fp, #0
 801ace8:	dd08      	ble.n	801acfc <_strtod_l+0x784>
 801acea:	4631      	mov	r1, r6
 801acec:	465a      	mov	r2, fp
 801acee:	4620      	mov	r0, r4
 801acf0:	f001 fe9c 	bl	801ca2c <__lshift>
 801acf4:	4606      	mov	r6, r0
 801acf6:	2800      	cmp	r0, #0
 801acf8:	f43f ae7a 	beq.w	801a9f0 <_strtod_l+0x478>
 801acfc:	9912      	ldr	r1, [sp, #72]	; 0x48
 801acfe:	463a      	mov	r2, r7
 801ad00:	4620      	mov	r0, r4
 801ad02:	f001 ff1f 	bl	801cb44 <__mdiff>
 801ad06:	4605      	mov	r5, r0
 801ad08:	2800      	cmp	r0, #0
 801ad0a:	f43f ae71 	beq.w	801a9f0 <_strtod_l+0x478>
 801ad0e:	2300      	movs	r3, #0
 801ad10:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 801ad14:	60c3      	str	r3, [r0, #12]
 801ad16:	4631      	mov	r1, r6
 801ad18:	f001 fef8 	bl	801cb0c <__mcmp>
 801ad1c:	2800      	cmp	r0, #0
 801ad1e:	da7d      	bge.n	801ae1c <_strtod_l+0x8a4>
 801ad20:	ea5a 0308 	orrs.w	r3, sl, r8
 801ad24:	f040 80a3 	bne.w	801ae6e <_strtod_l+0x8f6>
 801ad28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ad2c:	2b00      	cmp	r3, #0
 801ad2e:	f040 809e 	bne.w	801ae6e <_strtod_l+0x8f6>
 801ad32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801ad36:	0d1b      	lsrs	r3, r3, #20
 801ad38:	051b      	lsls	r3, r3, #20
 801ad3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801ad3e:	f240 8096 	bls.w	801ae6e <_strtod_l+0x8f6>
 801ad42:	696b      	ldr	r3, [r5, #20]
 801ad44:	b91b      	cbnz	r3, 801ad4e <_strtod_l+0x7d6>
 801ad46:	692b      	ldr	r3, [r5, #16]
 801ad48:	2b01      	cmp	r3, #1
 801ad4a:	f340 8090 	ble.w	801ae6e <_strtod_l+0x8f6>
 801ad4e:	4629      	mov	r1, r5
 801ad50:	2201      	movs	r2, #1
 801ad52:	4620      	mov	r0, r4
 801ad54:	f001 fe6a 	bl	801ca2c <__lshift>
 801ad58:	4631      	mov	r1, r6
 801ad5a:	4605      	mov	r5, r0
 801ad5c:	f001 fed6 	bl	801cb0c <__mcmp>
 801ad60:	2800      	cmp	r0, #0
 801ad62:	f340 8084 	ble.w	801ae6e <_strtod_l+0x8f6>
 801ad66:	9904      	ldr	r1, [sp, #16]
 801ad68:	4a2b      	ldr	r2, [pc, #172]	; (801ae18 <_strtod_l+0x8a0>)
 801ad6a:	464b      	mov	r3, r9
 801ad6c:	2900      	cmp	r1, #0
 801ad6e:	f000 809d 	beq.w	801aeac <_strtod_l+0x934>
 801ad72:	ea02 0109 	and.w	r1, r2, r9
 801ad76:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801ad7a:	f300 8097 	bgt.w	801aeac <_strtod_l+0x934>
 801ad7e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801ad82:	f77f aea5 	ble.w	801aad0 <_strtod_l+0x558>
 801ad86:	ed9f 7b20 	vldr	d7, [pc, #128]	; 801ae08 <_strtod_l+0x890>
 801ad8a:	ec49 8b16 	vmov	d6, r8, r9
 801ad8e:	ee26 7b07 	vmul.f64	d7, d6, d7
 801ad92:	ed8d 7b04 	vstr	d7, [sp, #16]
 801ad96:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 801ad9a:	4313      	orrs	r3, r2
 801ad9c:	bf08      	it	eq
 801ad9e:	2322      	moveq	r3, #34	; 0x22
 801ada0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801ada4:	bf08      	it	eq
 801ada6:	6023      	streq	r3, [r4, #0]
 801ada8:	e62c      	b.n	801aa04 <_strtod_l+0x48c>
 801adaa:	f04f 31ff 	mov.w	r1, #4294967295
 801adae:	fa01 f202 	lsl.w	r2, r1, r2
 801adb2:	ea02 0808 	and.w	r8, r2, r8
 801adb6:	e6d9      	b.n	801ab6c <_strtod_l+0x5f4>
 801adb8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 801adbc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801adc0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801adc4:	33e2      	adds	r3, #226	; 0xe2
 801adc6:	fa00 f303 	lsl.w	r3, r0, r3
 801adca:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 801adce:	e73f      	b.n	801ac50 <_strtod_l+0x6d8>
 801add0:	2200      	movs	r2, #0
 801add2:	2301      	movs	r3, #1
 801add4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801add8:	e73a      	b.n	801ac50 <_strtod_l+0x6d8>
 801adda:	9912      	ldr	r1, [sp, #72]	; 0x48
 801addc:	461a      	mov	r2, r3
 801adde:	4620      	mov	r0, r4
 801ade0:	f001 fe24 	bl	801ca2c <__lshift>
 801ade4:	9012      	str	r0, [sp, #72]	; 0x48
 801ade6:	2800      	cmp	r0, #0
 801ade8:	f47f af64 	bne.w	801acb4 <_strtod_l+0x73c>
 801adec:	e600      	b.n	801a9f0 <_strtod_l+0x478>
 801adee:	bf00      	nop
 801adf0:	94a03595 	.word	0x94a03595
 801adf4:	3fcfffff 	.word	0x3fcfffff
 801adf8:	94a03595 	.word	0x94a03595
 801adfc:	3fdfffff 	.word	0x3fdfffff
 801ae00:	35afe535 	.word	0x35afe535
 801ae04:	3fe00000 	.word	0x3fe00000
 801ae08:	00000000 	.word	0x00000000
 801ae0c:	39500000 	.word	0x39500000
 801ae10:	0801e518 	.word	0x0801e518
 801ae14:	fffffc02 	.word	0xfffffc02
 801ae18:	7ff00000 	.word	0x7ff00000
 801ae1c:	46cb      	mov	fp, r9
 801ae1e:	d15f      	bne.n	801aee0 <_strtod_l+0x968>
 801ae20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801ae24:	f1ba 0f00 	cmp.w	sl, #0
 801ae28:	d02a      	beq.n	801ae80 <_strtod_l+0x908>
 801ae2a:	4aa7      	ldr	r2, [pc, #668]	; (801b0c8 <_strtod_l+0xb50>)
 801ae2c:	4293      	cmp	r3, r2
 801ae2e:	d12b      	bne.n	801ae88 <_strtod_l+0x910>
 801ae30:	9b04      	ldr	r3, [sp, #16]
 801ae32:	4642      	mov	r2, r8
 801ae34:	b1fb      	cbz	r3, 801ae76 <_strtod_l+0x8fe>
 801ae36:	4ba5      	ldr	r3, [pc, #660]	; (801b0cc <_strtod_l+0xb54>)
 801ae38:	ea09 0303 	and.w	r3, r9, r3
 801ae3c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801ae40:	f04f 31ff 	mov.w	r1, #4294967295
 801ae44:	d81a      	bhi.n	801ae7c <_strtod_l+0x904>
 801ae46:	0d1b      	lsrs	r3, r3, #20
 801ae48:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801ae4c:	fa01 f303 	lsl.w	r3, r1, r3
 801ae50:	429a      	cmp	r2, r3
 801ae52:	d119      	bne.n	801ae88 <_strtod_l+0x910>
 801ae54:	4b9e      	ldr	r3, [pc, #632]	; (801b0d0 <_strtod_l+0xb58>)
 801ae56:	459b      	cmp	fp, r3
 801ae58:	d102      	bne.n	801ae60 <_strtod_l+0x8e8>
 801ae5a:	3201      	adds	r2, #1
 801ae5c:	f43f adc8 	beq.w	801a9f0 <_strtod_l+0x478>
 801ae60:	4b9a      	ldr	r3, [pc, #616]	; (801b0cc <_strtod_l+0xb54>)
 801ae62:	ea0b 0303 	and.w	r3, fp, r3
 801ae66:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801ae6a:	f04f 0800 	mov.w	r8, #0
 801ae6e:	9b04      	ldr	r3, [sp, #16]
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d188      	bne.n	801ad86 <_strtod_l+0x80e>
 801ae74:	e5c6      	b.n	801aa04 <_strtod_l+0x48c>
 801ae76:	f04f 33ff 	mov.w	r3, #4294967295
 801ae7a:	e7e9      	b.n	801ae50 <_strtod_l+0x8d8>
 801ae7c:	460b      	mov	r3, r1
 801ae7e:	e7e7      	b.n	801ae50 <_strtod_l+0x8d8>
 801ae80:	ea53 0308 	orrs.w	r3, r3, r8
 801ae84:	f43f af6f 	beq.w	801ad66 <_strtod_l+0x7ee>
 801ae88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ae8a:	b1cb      	cbz	r3, 801aec0 <_strtod_l+0x948>
 801ae8c:	ea13 0f0b 	tst.w	r3, fp
 801ae90:	d0ed      	beq.n	801ae6e <_strtod_l+0x8f6>
 801ae92:	9a04      	ldr	r2, [sp, #16]
 801ae94:	4640      	mov	r0, r8
 801ae96:	4649      	mov	r1, r9
 801ae98:	f1ba 0f00 	cmp.w	sl, #0
 801ae9c:	d014      	beq.n	801aec8 <_strtod_l+0x950>
 801ae9e:	f7ff fb50 	bl	801a542 <sulp>
 801aea2:	ee38 7b00 	vadd.f64	d7, d8, d0
 801aea6:	ec59 8b17 	vmov	r8, r9, d7
 801aeaa:	e7e0      	b.n	801ae6e <_strtod_l+0x8f6>
 801aeac:	4013      	ands	r3, r2
 801aeae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801aeb2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801aeb6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 801aeba:	f04f 38ff 	mov.w	r8, #4294967295
 801aebe:	e7d6      	b.n	801ae6e <_strtod_l+0x8f6>
 801aec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801aec2:	ea13 0f08 	tst.w	r3, r8
 801aec6:	e7e3      	b.n	801ae90 <_strtod_l+0x918>
 801aec8:	f7ff fb3b 	bl	801a542 <sulp>
 801aecc:	ee38 0b40 	vsub.f64	d0, d8, d0
 801aed0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801aed4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aed8:	ec59 8b10 	vmov	r8, r9, d0
 801aedc:	d1c7      	bne.n	801ae6e <_strtod_l+0x8f6>
 801aede:	e5f7      	b.n	801aad0 <_strtod_l+0x558>
 801aee0:	4631      	mov	r1, r6
 801aee2:	4628      	mov	r0, r5
 801aee4:	f001 ff90 	bl	801ce08 <__ratio>
 801aee8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 801aeec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801aef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aef4:	d865      	bhi.n	801afc2 <_strtod_l+0xa4a>
 801aef6:	f1ba 0f00 	cmp.w	sl, #0
 801aefa:	d042      	beq.n	801af82 <_strtod_l+0xa0a>
 801aefc:	4b75      	ldr	r3, [pc, #468]	; (801b0d4 <_strtod_l+0xb5c>)
 801aefe:	2200      	movs	r2, #0
 801af00:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 801af04:	4871      	ldr	r0, [pc, #452]	; (801b0cc <_strtod_l+0xb54>)
 801af06:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 801b0e0 <_strtod_l+0xb68>
 801af0a:	ea0b 0100 	and.w	r1, fp, r0
 801af0e:	4561      	cmp	r1, ip
 801af10:	f040 808e 	bne.w	801b030 <_strtod_l+0xab8>
 801af14:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 801af18:	ec49 8b10 	vmov	d0, r8, r9
 801af1c:	ec43 2b1c 	vmov	d12, r2, r3
 801af20:	910a      	str	r1, [sp, #40]	; 0x28
 801af22:	f001 fe99 	bl	801cc58 <__ulp>
 801af26:	ec49 8b1e 	vmov	d14, r8, r9
 801af2a:	4868      	ldr	r0, [pc, #416]	; (801b0cc <_strtod_l+0xb54>)
 801af2c:	eeac eb00 	vfma.f64	d14, d12, d0
 801af30:	ee1e 3a90 	vmov	r3, s29
 801af34:	4a68      	ldr	r2, [pc, #416]	; (801b0d8 <_strtod_l+0xb60>)
 801af36:	990a      	ldr	r1, [sp, #40]	; 0x28
 801af38:	4018      	ands	r0, r3
 801af3a:	4290      	cmp	r0, r2
 801af3c:	ec59 8b1e 	vmov	r8, r9, d14
 801af40:	d94e      	bls.n	801afe0 <_strtod_l+0xa68>
 801af42:	ee18 3a90 	vmov	r3, s17
 801af46:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801af4a:	4293      	cmp	r3, r2
 801af4c:	d104      	bne.n	801af58 <_strtod_l+0x9e0>
 801af4e:	ee18 3a10 	vmov	r3, s16
 801af52:	3301      	adds	r3, #1
 801af54:	f43f ad4c 	beq.w	801a9f0 <_strtod_l+0x478>
 801af58:	f8df 9174 	ldr.w	r9, [pc, #372]	; 801b0d0 <_strtod_l+0xb58>
 801af5c:	f04f 38ff 	mov.w	r8, #4294967295
 801af60:	9912      	ldr	r1, [sp, #72]	; 0x48
 801af62:	4620      	mov	r0, r4
 801af64:	f001 fb46 	bl	801c5f4 <_Bfree>
 801af68:	4639      	mov	r1, r7
 801af6a:	4620      	mov	r0, r4
 801af6c:	f001 fb42 	bl	801c5f4 <_Bfree>
 801af70:	4631      	mov	r1, r6
 801af72:	4620      	mov	r0, r4
 801af74:	f001 fb3e 	bl	801c5f4 <_Bfree>
 801af78:	4629      	mov	r1, r5
 801af7a:	4620      	mov	r0, r4
 801af7c:	f001 fb3a 	bl	801c5f4 <_Bfree>
 801af80:	e619      	b.n	801abb6 <_strtod_l+0x63e>
 801af82:	f1b8 0f00 	cmp.w	r8, #0
 801af86:	d112      	bne.n	801afae <_strtod_l+0xa36>
 801af88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801af8c:	b9b3      	cbnz	r3, 801afbc <_strtod_l+0xa44>
 801af8e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801af92:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801af96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af9a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801af9e:	bf58      	it	pl
 801afa0:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 801afa4:	eeb1 7b4d 	vneg.f64	d7, d13
 801afa8:	ec53 2b17 	vmov	r2, r3, d7
 801afac:	e7aa      	b.n	801af04 <_strtod_l+0x98c>
 801afae:	f1b8 0f01 	cmp.w	r8, #1
 801afb2:	d103      	bne.n	801afbc <_strtod_l+0xa44>
 801afb4:	f1b9 0f00 	cmp.w	r9, #0
 801afb8:	f43f ad8a 	beq.w	801aad0 <_strtod_l+0x558>
 801afbc:	4b47      	ldr	r3, [pc, #284]	; (801b0dc <_strtod_l+0xb64>)
 801afbe:	2200      	movs	r2, #0
 801afc0:	e79e      	b.n	801af00 <_strtod_l+0x988>
 801afc2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801afc6:	ee20 db0d 	vmul.f64	d13, d0, d13
 801afca:	f1ba 0f00 	cmp.w	sl, #0
 801afce:	d104      	bne.n	801afda <_strtod_l+0xa62>
 801afd0:	eeb1 7b4d 	vneg.f64	d7, d13
 801afd4:	ec53 2b17 	vmov	r2, r3, d7
 801afd8:	e794      	b.n	801af04 <_strtod_l+0x98c>
 801afda:	eeb0 7b4d 	vmov.f64	d7, d13
 801afde:	e7f9      	b.n	801afd4 <_strtod_l+0xa5c>
 801afe0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 801afe4:	9b04      	ldr	r3, [sp, #16]
 801afe6:	2b00      	cmp	r3, #0
 801afe8:	d1ba      	bne.n	801af60 <_strtod_l+0x9e8>
 801afea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801afee:	0d1b      	lsrs	r3, r3, #20
 801aff0:	051b      	lsls	r3, r3, #20
 801aff2:	4299      	cmp	r1, r3
 801aff4:	d1b4      	bne.n	801af60 <_strtod_l+0x9e8>
 801aff6:	ec51 0b1d 	vmov	r0, r1, d13
 801affa:	f7e5 fbb5 	bl	8000768 <__aeabi_d2lz>
 801affe:	f7e5 fb6d 	bl	80006dc <__aeabi_l2d>
 801b002:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b006:	ec41 0b17 	vmov	d7, r0, r1
 801b00a:	ea43 0308 	orr.w	r3, r3, r8
 801b00e:	ea53 030a 	orrs.w	r3, r3, sl
 801b012:	ee3d db47 	vsub.f64	d13, d13, d7
 801b016:	d03c      	beq.n	801b092 <_strtod_l+0xb1a>
 801b018:	eeb4 dbca 	vcmpe.f64	d13, d10
 801b01c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b020:	f53f acf0 	bmi.w	801aa04 <_strtod_l+0x48c>
 801b024:	eeb4 dbcb 	vcmpe.f64	d13, d11
 801b028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b02c:	dd98      	ble.n	801af60 <_strtod_l+0x9e8>
 801b02e:	e4e9      	b.n	801aa04 <_strtod_l+0x48c>
 801b030:	9804      	ldr	r0, [sp, #16]
 801b032:	b1f0      	cbz	r0, 801b072 <_strtod_l+0xafa>
 801b034:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 801b038:	d81b      	bhi.n	801b072 <_strtod_l+0xafa>
 801b03a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801b0c0 <_strtod_l+0xb48>
 801b03e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 801b042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b046:	d811      	bhi.n	801b06c <_strtod_l+0xaf4>
 801b048:	eebc dbcd 	vcvt.u32.f64	s26, d13
 801b04c:	ee1d 3a10 	vmov	r3, s26
 801b050:	2b01      	cmp	r3, #1
 801b052:	bf38      	it	cc
 801b054:	2301      	movcc	r3, #1
 801b056:	ee0d 3a10 	vmov	s26, r3
 801b05a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 801b05e:	f1ba 0f00 	cmp.w	sl, #0
 801b062:	d113      	bne.n	801b08c <_strtod_l+0xb14>
 801b064:	eeb1 7b4d 	vneg.f64	d7, d13
 801b068:	ec53 2b17 	vmov	r2, r3, d7
 801b06c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 801b070:	1a43      	subs	r3, r0, r1
 801b072:	eeb0 0b48 	vmov.f64	d0, d8
 801b076:	ec43 2b1c 	vmov	d12, r2, r3
 801b07a:	910a      	str	r1, [sp, #40]	; 0x28
 801b07c:	f001 fdec 	bl	801cc58 <__ulp>
 801b080:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b082:	eeac 8b00 	vfma.f64	d8, d12, d0
 801b086:	ec59 8b18 	vmov	r8, r9, d8
 801b08a:	e7ab      	b.n	801afe4 <_strtod_l+0xa6c>
 801b08c:	eeb0 7b4d 	vmov.f64	d7, d13
 801b090:	e7ea      	b.n	801b068 <_strtod_l+0xaf0>
 801b092:	eeb4 dbc9 	vcmpe.f64	d13, d9
 801b096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b09a:	f57f af61 	bpl.w	801af60 <_strtod_l+0x9e8>
 801b09e:	e4b1      	b.n	801aa04 <_strtod_l+0x48c>
 801b0a0:	2300      	movs	r3, #0
 801b0a2:	9308      	str	r3, [sp, #32]
 801b0a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b0a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801b0a8:	6013      	str	r3, [r2, #0]
 801b0aa:	f7ff baad 	b.w	801a608 <_strtod_l+0x90>
 801b0ae:	2a65      	cmp	r2, #101	; 0x65
 801b0b0:	f43f ab9f 	beq.w	801a7f2 <_strtod_l+0x27a>
 801b0b4:	2a45      	cmp	r2, #69	; 0x45
 801b0b6:	f43f ab9c 	beq.w	801a7f2 <_strtod_l+0x27a>
 801b0ba:	2101      	movs	r1, #1
 801b0bc:	f7ff bbd4 	b.w	801a868 <_strtod_l+0x2f0>
 801b0c0:	ffc00000 	.word	0xffc00000
 801b0c4:	41dfffff 	.word	0x41dfffff
 801b0c8:	000fffff 	.word	0x000fffff
 801b0cc:	7ff00000 	.word	0x7ff00000
 801b0d0:	7fefffff 	.word	0x7fefffff
 801b0d4:	3ff00000 	.word	0x3ff00000
 801b0d8:	7c9fffff 	.word	0x7c9fffff
 801b0dc:	bff00000 	.word	0xbff00000
 801b0e0:	7fe00000 	.word	0x7fe00000

0801b0e4 <_strtod_r>:
 801b0e4:	4b01      	ldr	r3, [pc, #4]	; (801b0ec <_strtod_r+0x8>)
 801b0e6:	f7ff ba47 	b.w	801a578 <_strtod_l>
 801b0ea:	bf00      	nop
 801b0ec:	24000168 	.word	0x24000168

0801b0f0 <_strtol_l.constprop.0>:
 801b0f0:	2b01      	cmp	r3, #1
 801b0f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b0f6:	d001      	beq.n	801b0fc <_strtol_l.constprop.0+0xc>
 801b0f8:	2b24      	cmp	r3, #36	; 0x24
 801b0fa:	d906      	bls.n	801b10a <_strtol_l.constprop.0+0x1a>
 801b0fc:	f7fe fb30 	bl	8019760 <__errno>
 801b100:	2316      	movs	r3, #22
 801b102:	6003      	str	r3, [r0, #0]
 801b104:	2000      	movs	r0, #0
 801b106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b10a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 801b1f0 <_strtol_l.constprop.0+0x100>
 801b10e:	460d      	mov	r5, r1
 801b110:	462e      	mov	r6, r5
 801b112:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b116:	f814 700c 	ldrb.w	r7, [r4, ip]
 801b11a:	f017 0708 	ands.w	r7, r7, #8
 801b11e:	d1f7      	bne.n	801b110 <_strtol_l.constprop.0+0x20>
 801b120:	2c2d      	cmp	r4, #45	; 0x2d
 801b122:	d132      	bne.n	801b18a <_strtol_l.constprop.0+0x9a>
 801b124:	782c      	ldrb	r4, [r5, #0]
 801b126:	2701      	movs	r7, #1
 801b128:	1cb5      	adds	r5, r6, #2
 801b12a:	2b00      	cmp	r3, #0
 801b12c:	d05b      	beq.n	801b1e6 <_strtol_l.constprop.0+0xf6>
 801b12e:	2b10      	cmp	r3, #16
 801b130:	d109      	bne.n	801b146 <_strtol_l.constprop.0+0x56>
 801b132:	2c30      	cmp	r4, #48	; 0x30
 801b134:	d107      	bne.n	801b146 <_strtol_l.constprop.0+0x56>
 801b136:	782c      	ldrb	r4, [r5, #0]
 801b138:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801b13c:	2c58      	cmp	r4, #88	; 0x58
 801b13e:	d14d      	bne.n	801b1dc <_strtol_l.constprop.0+0xec>
 801b140:	786c      	ldrb	r4, [r5, #1]
 801b142:	2310      	movs	r3, #16
 801b144:	3502      	adds	r5, #2
 801b146:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 801b14a:	f108 38ff 	add.w	r8, r8, #4294967295
 801b14e:	f04f 0c00 	mov.w	ip, #0
 801b152:	fbb8 f9f3 	udiv	r9, r8, r3
 801b156:	4666      	mov	r6, ip
 801b158:	fb03 8a19 	mls	sl, r3, r9, r8
 801b15c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 801b160:	f1be 0f09 	cmp.w	lr, #9
 801b164:	d816      	bhi.n	801b194 <_strtol_l.constprop.0+0xa4>
 801b166:	4674      	mov	r4, lr
 801b168:	42a3      	cmp	r3, r4
 801b16a:	dd24      	ble.n	801b1b6 <_strtol_l.constprop.0+0xc6>
 801b16c:	f1bc 0f00 	cmp.w	ip, #0
 801b170:	db1e      	blt.n	801b1b0 <_strtol_l.constprop.0+0xc0>
 801b172:	45b1      	cmp	r9, r6
 801b174:	d31c      	bcc.n	801b1b0 <_strtol_l.constprop.0+0xc0>
 801b176:	d101      	bne.n	801b17c <_strtol_l.constprop.0+0x8c>
 801b178:	45a2      	cmp	sl, r4
 801b17a:	db19      	blt.n	801b1b0 <_strtol_l.constprop.0+0xc0>
 801b17c:	fb06 4603 	mla	r6, r6, r3, r4
 801b180:	f04f 0c01 	mov.w	ip, #1
 801b184:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b188:	e7e8      	b.n	801b15c <_strtol_l.constprop.0+0x6c>
 801b18a:	2c2b      	cmp	r4, #43	; 0x2b
 801b18c:	bf04      	itt	eq
 801b18e:	782c      	ldrbeq	r4, [r5, #0]
 801b190:	1cb5      	addeq	r5, r6, #2
 801b192:	e7ca      	b.n	801b12a <_strtol_l.constprop.0+0x3a>
 801b194:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 801b198:	f1be 0f19 	cmp.w	lr, #25
 801b19c:	d801      	bhi.n	801b1a2 <_strtol_l.constprop.0+0xb2>
 801b19e:	3c37      	subs	r4, #55	; 0x37
 801b1a0:	e7e2      	b.n	801b168 <_strtol_l.constprop.0+0x78>
 801b1a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 801b1a6:	f1be 0f19 	cmp.w	lr, #25
 801b1aa:	d804      	bhi.n	801b1b6 <_strtol_l.constprop.0+0xc6>
 801b1ac:	3c57      	subs	r4, #87	; 0x57
 801b1ae:	e7db      	b.n	801b168 <_strtol_l.constprop.0+0x78>
 801b1b0:	f04f 3cff 	mov.w	ip, #4294967295
 801b1b4:	e7e6      	b.n	801b184 <_strtol_l.constprop.0+0x94>
 801b1b6:	f1bc 0f00 	cmp.w	ip, #0
 801b1ba:	da05      	bge.n	801b1c8 <_strtol_l.constprop.0+0xd8>
 801b1bc:	2322      	movs	r3, #34	; 0x22
 801b1be:	6003      	str	r3, [r0, #0]
 801b1c0:	4646      	mov	r6, r8
 801b1c2:	b942      	cbnz	r2, 801b1d6 <_strtol_l.constprop.0+0xe6>
 801b1c4:	4630      	mov	r0, r6
 801b1c6:	e79e      	b.n	801b106 <_strtol_l.constprop.0+0x16>
 801b1c8:	b107      	cbz	r7, 801b1cc <_strtol_l.constprop.0+0xdc>
 801b1ca:	4276      	negs	r6, r6
 801b1cc:	2a00      	cmp	r2, #0
 801b1ce:	d0f9      	beq.n	801b1c4 <_strtol_l.constprop.0+0xd4>
 801b1d0:	f1bc 0f00 	cmp.w	ip, #0
 801b1d4:	d000      	beq.n	801b1d8 <_strtol_l.constprop.0+0xe8>
 801b1d6:	1e69      	subs	r1, r5, #1
 801b1d8:	6011      	str	r1, [r2, #0]
 801b1da:	e7f3      	b.n	801b1c4 <_strtol_l.constprop.0+0xd4>
 801b1dc:	2430      	movs	r4, #48	; 0x30
 801b1de:	2b00      	cmp	r3, #0
 801b1e0:	d1b1      	bne.n	801b146 <_strtol_l.constprop.0+0x56>
 801b1e2:	2308      	movs	r3, #8
 801b1e4:	e7af      	b.n	801b146 <_strtol_l.constprop.0+0x56>
 801b1e6:	2c30      	cmp	r4, #48	; 0x30
 801b1e8:	d0a5      	beq.n	801b136 <_strtol_l.constprop.0+0x46>
 801b1ea:	230a      	movs	r3, #10
 801b1ec:	e7ab      	b.n	801b146 <_strtol_l.constprop.0+0x56>
 801b1ee:	bf00      	nop
 801b1f0:	0801e541 	.word	0x0801e541

0801b1f4 <_strtol_r>:
 801b1f4:	f7ff bf7c 	b.w	801b0f0 <_strtol_l.constprop.0>

0801b1f8 <_write_r>:
 801b1f8:	b538      	push	{r3, r4, r5, lr}
 801b1fa:	4d07      	ldr	r5, [pc, #28]	; (801b218 <_write_r+0x20>)
 801b1fc:	4604      	mov	r4, r0
 801b1fe:	4608      	mov	r0, r1
 801b200:	4611      	mov	r1, r2
 801b202:	2200      	movs	r2, #0
 801b204:	602a      	str	r2, [r5, #0]
 801b206:	461a      	mov	r2, r3
 801b208:	f7e7 feb9 	bl	8002f7e <_write>
 801b20c:	1c43      	adds	r3, r0, #1
 801b20e:	d102      	bne.n	801b216 <_write_r+0x1e>
 801b210:	682b      	ldr	r3, [r5, #0]
 801b212:	b103      	cbz	r3, 801b216 <_write_r+0x1e>
 801b214:	6023      	str	r3, [r4, #0]
 801b216:	bd38      	pop	{r3, r4, r5, pc}
 801b218:	240034f8 	.word	0x240034f8

0801b21c <_close_r>:
 801b21c:	b538      	push	{r3, r4, r5, lr}
 801b21e:	4d06      	ldr	r5, [pc, #24]	; (801b238 <_close_r+0x1c>)
 801b220:	2300      	movs	r3, #0
 801b222:	4604      	mov	r4, r0
 801b224:	4608      	mov	r0, r1
 801b226:	602b      	str	r3, [r5, #0]
 801b228:	f7e7 fec5 	bl	8002fb6 <_close>
 801b22c:	1c43      	adds	r3, r0, #1
 801b22e:	d102      	bne.n	801b236 <_close_r+0x1a>
 801b230:	682b      	ldr	r3, [r5, #0]
 801b232:	b103      	cbz	r3, 801b236 <_close_r+0x1a>
 801b234:	6023      	str	r3, [r4, #0]
 801b236:	bd38      	pop	{r3, r4, r5, pc}
 801b238:	240034f8 	.word	0x240034f8

0801b23c <quorem>:
 801b23c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b240:	6903      	ldr	r3, [r0, #16]
 801b242:	690c      	ldr	r4, [r1, #16]
 801b244:	42a3      	cmp	r3, r4
 801b246:	4607      	mov	r7, r0
 801b248:	f2c0 8081 	blt.w	801b34e <quorem+0x112>
 801b24c:	3c01      	subs	r4, #1
 801b24e:	f101 0814 	add.w	r8, r1, #20
 801b252:	f100 0514 	add.w	r5, r0, #20
 801b256:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b25a:	9301      	str	r3, [sp, #4]
 801b25c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b260:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b264:	3301      	adds	r3, #1
 801b266:	429a      	cmp	r2, r3
 801b268:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b26c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b270:	fbb2 f6f3 	udiv	r6, r2, r3
 801b274:	d331      	bcc.n	801b2da <quorem+0x9e>
 801b276:	f04f 0e00 	mov.w	lr, #0
 801b27a:	4640      	mov	r0, r8
 801b27c:	46ac      	mov	ip, r5
 801b27e:	46f2      	mov	sl, lr
 801b280:	f850 2b04 	ldr.w	r2, [r0], #4
 801b284:	b293      	uxth	r3, r2
 801b286:	fb06 e303 	mla	r3, r6, r3, lr
 801b28a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801b28e:	b29b      	uxth	r3, r3
 801b290:	ebaa 0303 	sub.w	r3, sl, r3
 801b294:	f8dc a000 	ldr.w	sl, [ip]
 801b298:	0c12      	lsrs	r2, r2, #16
 801b29a:	fa13 f38a 	uxtah	r3, r3, sl
 801b29e:	fb06 e202 	mla	r2, r6, r2, lr
 801b2a2:	9300      	str	r3, [sp, #0]
 801b2a4:	9b00      	ldr	r3, [sp, #0]
 801b2a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b2aa:	b292      	uxth	r2, r2
 801b2ac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b2b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b2b4:	f8bd 3000 	ldrh.w	r3, [sp]
 801b2b8:	4581      	cmp	r9, r0
 801b2ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b2be:	f84c 3b04 	str.w	r3, [ip], #4
 801b2c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b2c6:	d2db      	bcs.n	801b280 <quorem+0x44>
 801b2c8:	f855 300b 	ldr.w	r3, [r5, fp]
 801b2cc:	b92b      	cbnz	r3, 801b2da <quorem+0x9e>
 801b2ce:	9b01      	ldr	r3, [sp, #4]
 801b2d0:	3b04      	subs	r3, #4
 801b2d2:	429d      	cmp	r5, r3
 801b2d4:	461a      	mov	r2, r3
 801b2d6:	d32e      	bcc.n	801b336 <quorem+0xfa>
 801b2d8:	613c      	str	r4, [r7, #16]
 801b2da:	4638      	mov	r0, r7
 801b2dc:	f001 fc16 	bl	801cb0c <__mcmp>
 801b2e0:	2800      	cmp	r0, #0
 801b2e2:	db24      	blt.n	801b32e <quorem+0xf2>
 801b2e4:	3601      	adds	r6, #1
 801b2e6:	4628      	mov	r0, r5
 801b2e8:	f04f 0c00 	mov.w	ip, #0
 801b2ec:	f858 2b04 	ldr.w	r2, [r8], #4
 801b2f0:	f8d0 e000 	ldr.w	lr, [r0]
 801b2f4:	b293      	uxth	r3, r2
 801b2f6:	ebac 0303 	sub.w	r3, ip, r3
 801b2fa:	0c12      	lsrs	r2, r2, #16
 801b2fc:	fa13 f38e 	uxtah	r3, r3, lr
 801b300:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801b304:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b308:	b29b      	uxth	r3, r3
 801b30a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b30e:	45c1      	cmp	r9, r8
 801b310:	f840 3b04 	str.w	r3, [r0], #4
 801b314:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801b318:	d2e8      	bcs.n	801b2ec <quorem+0xb0>
 801b31a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b31e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b322:	b922      	cbnz	r2, 801b32e <quorem+0xf2>
 801b324:	3b04      	subs	r3, #4
 801b326:	429d      	cmp	r5, r3
 801b328:	461a      	mov	r2, r3
 801b32a:	d30a      	bcc.n	801b342 <quorem+0x106>
 801b32c:	613c      	str	r4, [r7, #16]
 801b32e:	4630      	mov	r0, r6
 801b330:	b003      	add	sp, #12
 801b332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b336:	6812      	ldr	r2, [r2, #0]
 801b338:	3b04      	subs	r3, #4
 801b33a:	2a00      	cmp	r2, #0
 801b33c:	d1cc      	bne.n	801b2d8 <quorem+0x9c>
 801b33e:	3c01      	subs	r4, #1
 801b340:	e7c7      	b.n	801b2d2 <quorem+0x96>
 801b342:	6812      	ldr	r2, [r2, #0]
 801b344:	3b04      	subs	r3, #4
 801b346:	2a00      	cmp	r2, #0
 801b348:	d1f0      	bne.n	801b32c <quorem+0xf0>
 801b34a:	3c01      	subs	r4, #1
 801b34c:	e7eb      	b.n	801b326 <quorem+0xea>
 801b34e:	2000      	movs	r0, #0
 801b350:	e7ee      	b.n	801b330 <quorem+0xf4>
 801b352:	0000      	movs	r0, r0
 801b354:	0000      	movs	r0, r0
	...

0801b358 <_dtoa_r>:
 801b358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b35c:	ed2d 8b02 	vpush	{d8}
 801b360:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801b362:	b091      	sub	sp, #68	; 0x44
 801b364:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b368:	ec59 8b10 	vmov	r8, r9, d0
 801b36c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801b36e:	9106      	str	r1, [sp, #24]
 801b370:	4606      	mov	r6, r0
 801b372:	9208      	str	r2, [sp, #32]
 801b374:	930c      	str	r3, [sp, #48]	; 0x30
 801b376:	b975      	cbnz	r5, 801b396 <_dtoa_r+0x3e>
 801b378:	2010      	movs	r0, #16
 801b37a:	f001 f8e1 	bl	801c540 <malloc>
 801b37e:	4602      	mov	r2, r0
 801b380:	6270      	str	r0, [r6, #36]	; 0x24
 801b382:	b920      	cbnz	r0, 801b38e <_dtoa_r+0x36>
 801b384:	4baa      	ldr	r3, [pc, #680]	; (801b630 <_dtoa_r+0x2d8>)
 801b386:	21ea      	movs	r1, #234	; 0xea
 801b388:	48aa      	ldr	r0, [pc, #680]	; (801b634 <_dtoa_r+0x2dc>)
 801b38a:	f002 f84f 	bl	801d42c <__assert_func>
 801b38e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b392:	6005      	str	r5, [r0, #0]
 801b394:	60c5      	str	r5, [r0, #12]
 801b396:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801b398:	6819      	ldr	r1, [r3, #0]
 801b39a:	b151      	cbz	r1, 801b3b2 <_dtoa_r+0x5a>
 801b39c:	685a      	ldr	r2, [r3, #4]
 801b39e:	604a      	str	r2, [r1, #4]
 801b3a0:	2301      	movs	r3, #1
 801b3a2:	4093      	lsls	r3, r2
 801b3a4:	608b      	str	r3, [r1, #8]
 801b3a6:	4630      	mov	r0, r6
 801b3a8:	f001 f924 	bl	801c5f4 <_Bfree>
 801b3ac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801b3ae:	2200      	movs	r2, #0
 801b3b0:	601a      	str	r2, [r3, #0]
 801b3b2:	f1b9 0300 	subs.w	r3, r9, #0
 801b3b6:	bfbb      	ittet	lt
 801b3b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801b3bc:	9303      	strlt	r3, [sp, #12]
 801b3be:	2300      	movge	r3, #0
 801b3c0:	2201      	movlt	r2, #1
 801b3c2:	bfac      	ite	ge
 801b3c4:	6023      	strge	r3, [r4, #0]
 801b3c6:	6022      	strlt	r2, [r4, #0]
 801b3c8:	4b9b      	ldr	r3, [pc, #620]	; (801b638 <_dtoa_r+0x2e0>)
 801b3ca:	9c03      	ldr	r4, [sp, #12]
 801b3cc:	43a3      	bics	r3, r4
 801b3ce:	d11c      	bne.n	801b40a <_dtoa_r+0xb2>
 801b3d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b3d2:	f242 730f 	movw	r3, #9999	; 0x270f
 801b3d6:	6013      	str	r3, [r2, #0]
 801b3d8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801b3dc:	ea53 0308 	orrs.w	r3, r3, r8
 801b3e0:	f000 84fd 	beq.w	801bdde <_dtoa_r+0xa86>
 801b3e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b3e6:	b963      	cbnz	r3, 801b402 <_dtoa_r+0xaa>
 801b3e8:	4b94      	ldr	r3, [pc, #592]	; (801b63c <_dtoa_r+0x2e4>)
 801b3ea:	e01f      	b.n	801b42c <_dtoa_r+0xd4>
 801b3ec:	4b94      	ldr	r3, [pc, #592]	; (801b640 <_dtoa_r+0x2e8>)
 801b3ee:	9301      	str	r3, [sp, #4]
 801b3f0:	3308      	adds	r3, #8
 801b3f2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b3f4:	6013      	str	r3, [r2, #0]
 801b3f6:	9801      	ldr	r0, [sp, #4]
 801b3f8:	b011      	add	sp, #68	; 0x44
 801b3fa:	ecbd 8b02 	vpop	{d8}
 801b3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b402:	4b8e      	ldr	r3, [pc, #568]	; (801b63c <_dtoa_r+0x2e4>)
 801b404:	9301      	str	r3, [sp, #4]
 801b406:	3303      	adds	r3, #3
 801b408:	e7f3      	b.n	801b3f2 <_dtoa_r+0x9a>
 801b40a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801b40e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b416:	d10b      	bne.n	801b430 <_dtoa_r+0xd8>
 801b418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b41a:	2301      	movs	r3, #1
 801b41c:	6013      	str	r3, [r2, #0]
 801b41e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b420:	2b00      	cmp	r3, #0
 801b422:	f000 84d9 	beq.w	801bdd8 <_dtoa_r+0xa80>
 801b426:	4887      	ldr	r0, [pc, #540]	; (801b644 <_dtoa_r+0x2ec>)
 801b428:	6018      	str	r0, [r3, #0]
 801b42a:	1e43      	subs	r3, r0, #1
 801b42c:	9301      	str	r3, [sp, #4]
 801b42e:	e7e2      	b.n	801b3f6 <_dtoa_r+0x9e>
 801b430:	a90f      	add	r1, sp, #60	; 0x3c
 801b432:	aa0e      	add	r2, sp, #56	; 0x38
 801b434:	4630      	mov	r0, r6
 801b436:	eeb0 0b48 	vmov.f64	d0, d8
 801b43a:	f001 fc89 	bl	801cd50 <__d2b>
 801b43e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 801b442:	4605      	mov	r5, r0
 801b444:	980e      	ldr	r0, [sp, #56]	; 0x38
 801b446:	2900      	cmp	r1, #0
 801b448:	d046      	beq.n	801b4d8 <_dtoa_r+0x180>
 801b44a:	ee18 4a90 	vmov	r4, s17
 801b44e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801b452:	ec53 2b18 	vmov	r2, r3, d8
 801b456:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 801b45a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801b45e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801b462:	2400      	movs	r4, #0
 801b464:	ec43 2b16 	vmov	d6, r2, r3
 801b468:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 801b46c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801b618 <_dtoa_r+0x2c0>
 801b470:	ee36 7b47 	vsub.f64	d7, d6, d7
 801b474:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 801b620 <_dtoa_r+0x2c8>
 801b478:	eea7 6b05 	vfma.f64	d6, d7, d5
 801b47c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 801b628 <_dtoa_r+0x2d0>
 801b480:	ee07 1a90 	vmov	s15, r1
 801b484:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801b488:	eeb0 7b46 	vmov.f64	d7, d6
 801b48c:	eea4 7b05 	vfma.f64	d7, d4, d5
 801b490:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801b494:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801b498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b49c:	ee16 ba90 	vmov	fp, s13
 801b4a0:	940a      	str	r4, [sp, #40]	; 0x28
 801b4a2:	d508      	bpl.n	801b4b6 <_dtoa_r+0x15e>
 801b4a4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801b4a8:	eeb4 6b47 	vcmp.f64	d6, d7
 801b4ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4b0:	bf18      	it	ne
 801b4b2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801b4b6:	f1bb 0f16 	cmp.w	fp, #22
 801b4ba:	d82f      	bhi.n	801b51c <_dtoa_r+0x1c4>
 801b4bc:	4b62      	ldr	r3, [pc, #392]	; (801b648 <_dtoa_r+0x2f0>)
 801b4be:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b4c2:	ed93 7b00 	vldr	d7, [r3]
 801b4c6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801b4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4ce:	d501      	bpl.n	801b4d4 <_dtoa_r+0x17c>
 801b4d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b4d4:	2300      	movs	r3, #0
 801b4d6:	e022      	b.n	801b51e <_dtoa_r+0x1c6>
 801b4d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 801b4da:	4401      	add	r1, r0
 801b4dc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 801b4e0:	2b20      	cmp	r3, #32
 801b4e2:	bfc1      	itttt	gt
 801b4e4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801b4e8:	fa04 f303 	lslgt.w	r3, r4, r3
 801b4ec:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 801b4f0:	fa28 f804 	lsrgt.w	r8, r8, r4
 801b4f4:	bfd6      	itet	le
 801b4f6:	f1c3 0320 	rsble	r3, r3, #32
 801b4fa:	ea43 0808 	orrgt.w	r8, r3, r8
 801b4fe:	fa08 f803 	lslle.w	r8, r8, r3
 801b502:	ee07 8a90 	vmov	s15, r8
 801b506:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801b50a:	3901      	subs	r1, #1
 801b50c:	ee17 4a90 	vmov	r4, s15
 801b510:	ec53 2b17 	vmov	r2, r3, d7
 801b514:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 801b518:	2401      	movs	r4, #1
 801b51a:	e7a3      	b.n	801b464 <_dtoa_r+0x10c>
 801b51c:	2301      	movs	r3, #1
 801b51e:	930b      	str	r3, [sp, #44]	; 0x2c
 801b520:	1a43      	subs	r3, r0, r1
 801b522:	1e5a      	subs	r2, r3, #1
 801b524:	bf45      	ittet	mi
 801b526:	f1c3 0301 	rsbmi	r3, r3, #1
 801b52a:	9304      	strmi	r3, [sp, #16]
 801b52c:	2300      	movpl	r3, #0
 801b52e:	2300      	movmi	r3, #0
 801b530:	9205      	str	r2, [sp, #20]
 801b532:	bf54      	ite	pl
 801b534:	9304      	strpl	r3, [sp, #16]
 801b536:	9305      	strmi	r3, [sp, #20]
 801b538:	f1bb 0f00 	cmp.w	fp, #0
 801b53c:	db18      	blt.n	801b570 <_dtoa_r+0x218>
 801b53e:	9b05      	ldr	r3, [sp, #20]
 801b540:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 801b544:	445b      	add	r3, fp
 801b546:	9305      	str	r3, [sp, #20]
 801b548:	2300      	movs	r3, #0
 801b54a:	9a06      	ldr	r2, [sp, #24]
 801b54c:	2a09      	cmp	r2, #9
 801b54e:	d849      	bhi.n	801b5e4 <_dtoa_r+0x28c>
 801b550:	2a05      	cmp	r2, #5
 801b552:	bfc4      	itt	gt
 801b554:	3a04      	subgt	r2, #4
 801b556:	9206      	strgt	r2, [sp, #24]
 801b558:	9a06      	ldr	r2, [sp, #24]
 801b55a:	f1a2 0202 	sub.w	r2, r2, #2
 801b55e:	bfcc      	ite	gt
 801b560:	2400      	movgt	r4, #0
 801b562:	2401      	movle	r4, #1
 801b564:	2a03      	cmp	r2, #3
 801b566:	d848      	bhi.n	801b5fa <_dtoa_r+0x2a2>
 801b568:	e8df f002 	tbb	[pc, r2]
 801b56c:	3a2c2e0b 	.word	0x3a2c2e0b
 801b570:	9b04      	ldr	r3, [sp, #16]
 801b572:	2200      	movs	r2, #0
 801b574:	eba3 030b 	sub.w	r3, r3, fp
 801b578:	9304      	str	r3, [sp, #16]
 801b57a:	9209      	str	r2, [sp, #36]	; 0x24
 801b57c:	f1cb 0300 	rsb	r3, fp, #0
 801b580:	e7e3      	b.n	801b54a <_dtoa_r+0x1f2>
 801b582:	2200      	movs	r2, #0
 801b584:	9207      	str	r2, [sp, #28]
 801b586:	9a08      	ldr	r2, [sp, #32]
 801b588:	2a00      	cmp	r2, #0
 801b58a:	dc39      	bgt.n	801b600 <_dtoa_r+0x2a8>
 801b58c:	f04f 0a01 	mov.w	sl, #1
 801b590:	46d1      	mov	r9, sl
 801b592:	4652      	mov	r2, sl
 801b594:	f8cd a020 	str.w	sl, [sp, #32]
 801b598:	6a77      	ldr	r7, [r6, #36]	; 0x24
 801b59a:	2100      	movs	r1, #0
 801b59c:	6079      	str	r1, [r7, #4]
 801b59e:	2004      	movs	r0, #4
 801b5a0:	f100 0c14 	add.w	ip, r0, #20
 801b5a4:	4594      	cmp	ip, r2
 801b5a6:	6879      	ldr	r1, [r7, #4]
 801b5a8:	d92f      	bls.n	801b60a <_dtoa_r+0x2b2>
 801b5aa:	4630      	mov	r0, r6
 801b5ac:	930d      	str	r3, [sp, #52]	; 0x34
 801b5ae:	f000 ffe1 	bl	801c574 <_Balloc>
 801b5b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b5b4:	9001      	str	r0, [sp, #4]
 801b5b6:	4602      	mov	r2, r0
 801b5b8:	2800      	cmp	r0, #0
 801b5ba:	d149      	bne.n	801b650 <_dtoa_r+0x2f8>
 801b5bc:	4b23      	ldr	r3, [pc, #140]	; (801b64c <_dtoa_r+0x2f4>)
 801b5be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801b5c2:	e6e1      	b.n	801b388 <_dtoa_r+0x30>
 801b5c4:	2201      	movs	r2, #1
 801b5c6:	e7dd      	b.n	801b584 <_dtoa_r+0x22c>
 801b5c8:	2200      	movs	r2, #0
 801b5ca:	9207      	str	r2, [sp, #28]
 801b5cc:	9a08      	ldr	r2, [sp, #32]
 801b5ce:	eb0b 0a02 	add.w	sl, fp, r2
 801b5d2:	f10a 0901 	add.w	r9, sl, #1
 801b5d6:	464a      	mov	r2, r9
 801b5d8:	2a01      	cmp	r2, #1
 801b5da:	bfb8      	it	lt
 801b5dc:	2201      	movlt	r2, #1
 801b5de:	e7db      	b.n	801b598 <_dtoa_r+0x240>
 801b5e0:	2201      	movs	r2, #1
 801b5e2:	e7f2      	b.n	801b5ca <_dtoa_r+0x272>
 801b5e4:	2401      	movs	r4, #1
 801b5e6:	2200      	movs	r2, #0
 801b5e8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801b5ec:	f04f 3aff 	mov.w	sl, #4294967295
 801b5f0:	2100      	movs	r1, #0
 801b5f2:	46d1      	mov	r9, sl
 801b5f4:	2212      	movs	r2, #18
 801b5f6:	9108      	str	r1, [sp, #32]
 801b5f8:	e7ce      	b.n	801b598 <_dtoa_r+0x240>
 801b5fa:	2201      	movs	r2, #1
 801b5fc:	9207      	str	r2, [sp, #28]
 801b5fe:	e7f5      	b.n	801b5ec <_dtoa_r+0x294>
 801b600:	f8dd a020 	ldr.w	sl, [sp, #32]
 801b604:	46d1      	mov	r9, sl
 801b606:	4652      	mov	r2, sl
 801b608:	e7c6      	b.n	801b598 <_dtoa_r+0x240>
 801b60a:	3101      	adds	r1, #1
 801b60c:	6079      	str	r1, [r7, #4]
 801b60e:	0040      	lsls	r0, r0, #1
 801b610:	e7c6      	b.n	801b5a0 <_dtoa_r+0x248>
 801b612:	bf00      	nop
 801b614:	f3af 8000 	nop.w
 801b618:	636f4361 	.word	0x636f4361
 801b61c:	3fd287a7 	.word	0x3fd287a7
 801b620:	8b60c8b3 	.word	0x8b60c8b3
 801b624:	3fc68a28 	.word	0x3fc68a28
 801b628:	509f79fb 	.word	0x509f79fb
 801b62c:	3fd34413 	.word	0x3fd34413
 801b630:	0801e64e 	.word	0x0801e64e
 801b634:	0801e665 	.word	0x0801e665
 801b638:	7ff00000 	.word	0x7ff00000
 801b63c:	0801e64a 	.word	0x0801e64a
 801b640:	0801e641 	.word	0x0801e641
 801b644:	0801e4c1 	.word	0x0801e4c1
 801b648:	0801e7d0 	.word	0x0801e7d0
 801b64c:	0801e6c0 	.word	0x0801e6c0
 801b650:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801b652:	9901      	ldr	r1, [sp, #4]
 801b654:	6011      	str	r1, [r2, #0]
 801b656:	f1b9 0f0e 	cmp.w	r9, #14
 801b65a:	d86c      	bhi.n	801b736 <_dtoa_r+0x3de>
 801b65c:	2c00      	cmp	r4, #0
 801b65e:	d06a      	beq.n	801b736 <_dtoa_r+0x3de>
 801b660:	f1bb 0f00 	cmp.w	fp, #0
 801b664:	f340 80a0 	ble.w	801b7a8 <_dtoa_r+0x450>
 801b668:	49c1      	ldr	r1, [pc, #772]	; (801b970 <_dtoa_r+0x618>)
 801b66a:	f00b 020f 	and.w	r2, fp, #15
 801b66e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 801b672:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801b676:	ed92 7b00 	vldr	d7, [r2]
 801b67a:	ea4f 112b 	mov.w	r1, fp, asr #4
 801b67e:	f000 8087 	beq.w	801b790 <_dtoa_r+0x438>
 801b682:	4abc      	ldr	r2, [pc, #752]	; (801b974 <_dtoa_r+0x61c>)
 801b684:	ed92 6b08 	vldr	d6, [r2, #32]
 801b688:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801b68c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801b690:	f001 010f 	and.w	r1, r1, #15
 801b694:	2203      	movs	r2, #3
 801b696:	48b7      	ldr	r0, [pc, #732]	; (801b974 <_dtoa_r+0x61c>)
 801b698:	2900      	cmp	r1, #0
 801b69a:	d17b      	bne.n	801b794 <_dtoa_r+0x43c>
 801b69c:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b6a0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801b6a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b6a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801b6aa:	2900      	cmp	r1, #0
 801b6ac:	f000 80a2 	beq.w	801b7f4 <_dtoa_r+0x49c>
 801b6b0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801b6b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b6b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b6bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b6c0:	f140 8098 	bpl.w	801b7f4 <_dtoa_r+0x49c>
 801b6c4:	f1b9 0f00 	cmp.w	r9, #0
 801b6c8:	f000 8094 	beq.w	801b7f4 <_dtoa_r+0x49c>
 801b6cc:	f1ba 0f00 	cmp.w	sl, #0
 801b6d0:	dd2f      	ble.n	801b732 <_dtoa_r+0x3da>
 801b6d2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801b6d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b6da:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b6de:	f10b 37ff 	add.w	r7, fp, #4294967295
 801b6e2:	3201      	adds	r2, #1
 801b6e4:	4650      	mov	r0, sl
 801b6e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 801b6ea:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801b6ee:	ee07 2a90 	vmov	s15, r2
 801b6f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801b6f6:	eea7 5b06 	vfma.f64	d5, d7, d6
 801b6fa:	ee15 4a90 	vmov	r4, s11
 801b6fe:	ec52 1b15 	vmov	r1, r2, d5
 801b702:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 801b706:	2800      	cmp	r0, #0
 801b708:	d177      	bne.n	801b7fa <_dtoa_r+0x4a2>
 801b70a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801b70e:	ee36 6b47 	vsub.f64	d6, d6, d7
 801b712:	ec42 1b17 	vmov	d7, r1, r2
 801b716:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b71e:	f300 8263 	bgt.w	801bbe8 <_dtoa_r+0x890>
 801b722:	eeb1 7b47 	vneg.f64	d7, d7
 801b726:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b72e:	f100 8258 	bmi.w	801bbe2 <_dtoa_r+0x88a>
 801b732:	ed8d 8b02 	vstr	d8, [sp, #8]
 801b736:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b738:	2a00      	cmp	r2, #0
 801b73a:	f2c0 811d 	blt.w	801b978 <_dtoa_r+0x620>
 801b73e:	f1bb 0f0e 	cmp.w	fp, #14
 801b742:	f300 8119 	bgt.w	801b978 <_dtoa_r+0x620>
 801b746:	4b8a      	ldr	r3, [pc, #552]	; (801b970 <_dtoa_r+0x618>)
 801b748:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801b74c:	ed93 6b00 	vldr	d6, [r3]
 801b750:	9b08      	ldr	r3, [sp, #32]
 801b752:	2b00      	cmp	r3, #0
 801b754:	f280 80b7 	bge.w	801b8c6 <_dtoa_r+0x56e>
 801b758:	f1b9 0f00 	cmp.w	r9, #0
 801b75c:	f300 80b3 	bgt.w	801b8c6 <_dtoa_r+0x56e>
 801b760:	f040 823f 	bne.w	801bbe2 <_dtoa_r+0x88a>
 801b764:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801b768:	ee26 6b07 	vmul.f64	d6, d6, d7
 801b76c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b770:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b778:	464c      	mov	r4, r9
 801b77a:	464f      	mov	r7, r9
 801b77c:	f280 8215 	bge.w	801bbaa <_dtoa_r+0x852>
 801b780:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801b784:	2331      	movs	r3, #49	; 0x31
 801b786:	f808 3b01 	strb.w	r3, [r8], #1
 801b78a:	f10b 0b01 	add.w	fp, fp, #1
 801b78e:	e211      	b.n	801bbb4 <_dtoa_r+0x85c>
 801b790:	2202      	movs	r2, #2
 801b792:	e780      	b.n	801b696 <_dtoa_r+0x33e>
 801b794:	07cc      	lsls	r4, r1, #31
 801b796:	d504      	bpl.n	801b7a2 <_dtoa_r+0x44a>
 801b798:	ed90 6b00 	vldr	d6, [r0]
 801b79c:	3201      	adds	r2, #1
 801b79e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b7a2:	1049      	asrs	r1, r1, #1
 801b7a4:	3008      	adds	r0, #8
 801b7a6:	e777      	b.n	801b698 <_dtoa_r+0x340>
 801b7a8:	d022      	beq.n	801b7f0 <_dtoa_r+0x498>
 801b7aa:	f1cb 0100 	rsb	r1, fp, #0
 801b7ae:	4a70      	ldr	r2, [pc, #448]	; (801b970 <_dtoa_r+0x618>)
 801b7b0:	f001 000f 	and.w	r0, r1, #15
 801b7b4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801b7b8:	ed92 7b00 	vldr	d7, [r2]
 801b7bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 801b7c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b7c4:	486b      	ldr	r0, [pc, #428]	; (801b974 <_dtoa_r+0x61c>)
 801b7c6:	1109      	asrs	r1, r1, #4
 801b7c8:	2400      	movs	r4, #0
 801b7ca:	2202      	movs	r2, #2
 801b7cc:	b929      	cbnz	r1, 801b7da <_dtoa_r+0x482>
 801b7ce:	2c00      	cmp	r4, #0
 801b7d0:	f43f af6a 	beq.w	801b6a8 <_dtoa_r+0x350>
 801b7d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b7d8:	e766      	b.n	801b6a8 <_dtoa_r+0x350>
 801b7da:	07cf      	lsls	r7, r1, #31
 801b7dc:	d505      	bpl.n	801b7ea <_dtoa_r+0x492>
 801b7de:	ed90 6b00 	vldr	d6, [r0]
 801b7e2:	3201      	adds	r2, #1
 801b7e4:	2401      	movs	r4, #1
 801b7e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801b7ea:	1049      	asrs	r1, r1, #1
 801b7ec:	3008      	adds	r0, #8
 801b7ee:	e7ed      	b.n	801b7cc <_dtoa_r+0x474>
 801b7f0:	2202      	movs	r2, #2
 801b7f2:	e759      	b.n	801b6a8 <_dtoa_r+0x350>
 801b7f4:	465f      	mov	r7, fp
 801b7f6:	4648      	mov	r0, r9
 801b7f8:	e775      	b.n	801b6e6 <_dtoa_r+0x38e>
 801b7fa:	ec42 1b17 	vmov	d7, r1, r2
 801b7fe:	4a5c      	ldr	r2, [pc, #368]	; (801b970 <_dtoa_r+0x618>)
 801b800:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801b804:	ed12 4b02 	vldr	d4, [r2, #-8]
 801b808:	9a01      	ldr	r2, [sp, #4]
 801b80a:	1814      	adds	r4, r2, r0
 801b80c:	9a07      	ldr	r2, [sp, #28]
 801b80e:	b352      	cbz	r2, 801b866 <_dtoa_r+0x50e>
 801b810:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801b814:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801b818:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801b81c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801b820:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801b824:	ee35 7b47 	vsub.f64	d7, d5, d7
 801b828:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801b82c:	ee14 2a90 	vmov	r2, s9
 801b830:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801b834:	3230      	adds	r2, #48	; 0x30
 801b836:	ee36 6b45 	vsub.f64	d6, d6, d5
 801b83a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b83e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b842:	f808 2b01 	strb.w	r2, [r8], #1
 801b846:	d439      	bmi.n	801b8bc <_dtoa_r+0x564>
 801b848:	ee32 5b46 	vsub.f64	d5, d2, d6
 801b84c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801b850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b854:	d472      	bmi.n	801b93c <_dtoa_r+0x5e4>
 801b856:	45a0      	cmp	r8, r4
 801b858:	f43f af6b 	beq.w	801b732 <_dtoa_r+0x3da>
 801b85c:	ee27 7b03 	vmul.f64	d7, d7, d3
 801b860:	ee26 6b03 	vmul.f64	d6, d6, d3
 801b864:	e7e0      	b.n	801b828 <_dtoa_r+0x4d0>
 801b866:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801b86a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801b86e:	4621      	mov	r1, r4
 801b870:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801b874:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801b878:	ee14 2a90 	vmov	r2, s9
 801b87c:	3230      	adds	r2, #48	; 0x30
 801b87e:	f808 2b01 	strb.w	r2, [r8], #1
 801b882:	45a0      	cmp	r8, r4
 801b884:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801b888:	ee36 6b45 	vsub.f64	d6, d6, d5
 801b88c:	d118      	bne.n	801b8c0 <_dtoa_r+0x568>
 801b88e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801b892:	ee37 4b05 	vadd.f64	d4, d7, d5
 801b896:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801b89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b89e:	dc4d      	bgt.n	801b93c <_dtoa_r+0x5e4>
 801b8a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 801b8a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801b8a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b8ac:	f57f af41 	bpl.w	801b732 <_dtoa_r+0x3da>
 801b8b0:	4688      	mov	r8, r1
 801b8b2:	3901      	subs	r1, #1
 801b8b4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801b8b8:	2b30      	cmp	r3, #48	; 0x30
 801b8ba:	d0f9      	beq.n	801b8b0 <_dtoa_r+0x558>
 801b8bc:	46bb      	mov	fp, r7
 801b8be:	e02a      	b.n	801b916 <_dtoa_r+0x5be>
 801b8c0:	ee26 6b03 	vmul.f64	d6, d6, d3
 801b8c4:	e7d6      	b.n	801b874 <_dtoa_r+0x51c>
 801b8c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 801b8ca:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801b8ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801b8d2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801b8d6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801b8da:	ee15 3a10 	vmov	r3, s10
 801b8de:	3330      	adds	r3, #48	; 0x30
 801b8e0:	f808 3b01 	strb.w	r3, [r8], #1
 801b8e4:	9b01      	ldr	r3, [sp, #4]
 801b8e6:	eba8 0303 	sub.w	r3, r8, r3
 801b8ea:	4599      	cmp	r9, r3
 801b8ec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801b8f0:	eea3 7b46 	vfms.f64	d7, d3, d6
 801b8f4:	d133      	bne.n	801b95e <_dtoa_r+0x606>
 801b8f6:	ee37 7b07 	vadd.f64	d7, d7, d7
 801b8fa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801b8fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b902:	dc1a      	bgt.n	801b93a <_dtoa_r+0x5e2>
 801b904:	eeb4 7b46 	vcmp.f64	d7, d6
 801b908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b90c:	d103      	bne.n	801b916 <_dtoa_r+0x5be>
 801b90e:	ee15 3a10 	vmov	r3, s10
 801b912:	07d9      	lsls	r1, r3, #31
 801b914:	d411      	bmi.n	801b93a <_dtoa_r+0x5e2>
 801b916:	4629      	mov	r1, r5
 801b918:	4630      	mov	r0, r6
 801b91a:	f000 fe6b 	bl	801c5f4 <_Bfree>
 801b91e:	2300      	movs	r3, #0
 801b920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b922:	f888 3000 	strb.w	r3, [r8]
 801b926:	f10b 0301 	add.w	r3, fp, #1
 801b92a:	6013      	str	r3, [r2, #0]
 801b92c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b92e:	2b00      	cmp	r3, #0
 801b930:	f43f ad61 	beq.w	801b3f6 <_dtoa_r+0x9e>
 801b934:	f8c3 8000 	str.w	r8, [r3]
 801b938:	e55d      	b.n	801b3f6 <_dtoa_r+0x9e>
 801b93a:	465f      	mov	r7, fp
 801b93c:	4643      	mov	r3, r8
 801b93e:	4698      	mov	r8, r3
 801b940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b944:	2a39      	cmp	r2, #57	; 0x39
 801b946:	d106      	bne.n	801b956 <_dtoa_r+0x5fe>
 801b948:	9a01      	ldr	r2, [sp, #4]
 801b94a:	429a      	cmp	r2, r3
 801b94c:	d1f7      	bne.n	801b93e <_dtoa_r+0x5e6>
 801b94e:	9901      	ldr	r1, [sp, #4]
 801b950:	2230      	movs	r2, #48	; 0x30
 801b952:	3701      	adds	r7, #1
 801b954:	700a      	strb	r2, [r1, #0]
 801b956:	781a      	ldrb	r2, [r3, #0]
 801b958:	3201      	adds	r2, #1
 801b95a:	701a      	strb	r2, [r3, #0]
 801b95c:	e7ae      	b.n	801b8bc <_dtoa_r+0x564>
 801b95e:	ee27 7b04 	vmul.f64	d7, d7, d4
 801b962:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801b966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b96a:	d1b2      	bne.n	801b8d2 <_dtoa_r+0x57a>
 801b96c:	e7d3      	b.n	801b916 <_dtoa_r+0x5be>
 801b96e:	bf00      	nop
 801b970:	0801e7d0 	.word	0x0801e7d0
 801b974:	0801e7a8 	.word	0x0801e7a8
 801b978:	9907      	ldr	r1, [sp, #28]
 801b97a:	2900      	cmp	r1, #0
 801b97c:	f000 80d0 	beq.w	801bb20 <_dtoa_r+0x7c8>
 801b980:	9906      	ldr	r1, [sp, #24]
 801b982:	2901      	cmp	r1, #1
 801b984:	f300 80b4 	bgt.w	801baf0 <_dtoa_r+0x798>
 801b988:	990a      	ldr	r1, [sp, #40]	; 0x28
 801b98a:	2900      	cmp	r1, #0
 801b98c:	f000 80ac 	beq.w	801bae8 <_dtoa_r+0x790>
 801b990:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801b994:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801b998:	461c      	mov	r4, r3
 801b99a:	930a      	str	r3, [sp, #40]	; 0x28
 801b99c:	9b04      	ldr	r3, [sp, #16]
 801b99e:	4413      	add	r3, r2
 801b9a0:	9304      	str	r3, [sp, #16]
 801b9a2:	9b05      	ldr	r3, [sp, #20]
 801b9a4:	2101      	movs	r1, #1
 801b9a6:	4413      	add	r3, r2
 801b9a8:	4630      	mov	r0, r6
 801b9aa:	9305      	str	r3, [sp, #20]
 801b9ac:	f000 ff24 	bl	801c7f8 <__i2b>
 801b9b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b9b2:	4607      	mov	r7, r0
 801b9b4:	f1b8 0f00 	cmp.w	r8, #0
 801b9b8:	dd0d      	ble.n	801b9d6 <_dtoa_r+0x67e>
 801b9ba:	9a05      	ldr	r2, [sp, #20]
 801b9bc:	2a00      	cmp	r2, #0
 801b9be:	dd0a      	ble.n	801b9d6 <_dtoa_r+0x67e>
 801b9c0:	4542      	cmp	r2, r8
 801b9c2:	9904      	ldr	r1, [sp, #16]
 801b9c4:	bfa8      	it	ge
 801b9c6:	4642      	movge	r2, r8
 801b9c8:	1a89      	subs	r1, r1, r2
 801b9ca:	9104      	str	r1, [sp, #16]
 801b9cc:	9905      	ldr	r1, [sp, #20]
 801b9ce:	eba8 0802 	sub.w	r8, r8, r2
 801b9d2:	1a8a      	subs	r2, r1, r2
 801b9d4:	9205      	str	r2, [sp, #20]
 801b9d6:	b303      	cbz	r3, 801ba1a <_dtoa_r+0x6c2>
 801b9d8:	9a07      	ldr	r2, [sp, #28]
 801b9da:	2a00      	cmp	r2, #0
 801b9dc:	f000 80a5 	beq.w	801bb2a <_dtoa_r+0x7d2>
 801b9e0:	2c00      	cmp	r4, #0
 801b9e2:	dd13      	ble.n	801ba0c <_dtoa_r+0x6b4>
 801b9e4:	4639      	mov	r1, r7
 801b9e6:	4622      	mov	r2, r4
 801b9e8:	4630      	mov	r0, r6
 801b9ea:	930d      	str	r3, [sp, #52]	; 0x34
 801b9ec:	f000 ffc4 	bl	801c978 <__pow5mult>
 801b9f0:	462a      	mov	r2, r5
 801b9f2:	4601      	mov	r1, r0
 801b9f4:	4607      	mov	r7, r0
 801b9f6:	4630      	mov	r0, r6
 801b9f8:	f000 ff14 	bl	801c824 <__multiply>
 801b9fc:	4629      	mov	r1, r5
 801b9fe:	900a      	str	r0, [sp, #40]	; 0x28
 801ba00:	4630      	mov	r0, r6
 801ba02:	f000 fdf7 	bl	801c5f4 <_Bfree>
 801ba06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ba08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ba0a:	4615      	mov	r5, r2
 801ba0c:	1b1a      	subs	r2, r3, r4
 801ba0e:	d004      	beq.n	801ba1a <_dtoa_r+0x6c2>
 801ba10:	4629      	mov	r1, r5
 801ba12:	4630      	mov	r0, r6
 801ba14:	f000 ffb0 	bl	801c978 <__pow5mult>
 801ba18:	4605      	mov	r5, r0
 801ba1a:	2101      	movs	r1, #1
 801ba1c:	4630      	mov	r0, r6
 801ba1e:	f000 feeb 	bl	801c7f8 <__i2b>
 801ba22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba24:	2b00      	cmp	r3, #0
 801ba26:	4604      	mov	r4, r0
 801ba28:	f340 8081 	ble.w	801bb2e <_dtoa_r+0x7d6>
 801ba2c:	461a      	mov	r2, r3
 801ba2e:	4601      	mov	r1, r0
 801ba30:	4630      	mov	r0, r6
 801ba32:	f000 ffa1 	bl	801c978 <__pow5mult>
 801ba36:	9b06      	ldr	r3, [sp, #24]
 801ba38:	2b01      	cmp	r3, #1
 801ba3a:	4604      	mov	r4, r0
 801ba3c:	dd7a      	ble.n	801bb34 <_dtoa_r+0x7dc>
 801ba3e:	2300      	movs	r3, #0
 801ba40:	930a      	str	r3, [sp, #40]	; 0x28
 801ba42:	6922      	ldr	r2, [r4, #16]
 801ba44:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ba48:	6910      	ldr	r0, [r2, #16]
 801ba4a:	f000 fe85 	bl	801c758 <__hi0bits>
 801ba4e:	f1c0 0020 	rsb	r0, r0, #32
 801ba52:	9b05      	ldr	r3, [sp, #20]
 801ba54:	4418      	add	r0, r3
 801ba56:	f010 001f 	ands.w	r0, r0, #31
 801ba5a:	f000 808c 	beq.w	801bb76 <_dtoa_r+0x81e>
 801ba5e:	f1c0 0220 	rsb	r2, r0, #32
 801ba62:	2a04      	cmp	r2, #4
 801ba64:	f340 8085 	ble.w	801bb72 <_dtoa_r+0x81a>
 801ba68:	f1c0 001c 	rsb	r0, r0, #28
 801ba6c:	9b04      	ldr	r3, [sp, #16]
 801ba6e:	4403      	add	r3, r0
 801ba70:	9304      	str	r3, [sp, #16]
 801ba72:	9b05      	ldr	r3, [sp, #20]
 801ba74:	4403      	add	r3, r0
 801ba76:	4480      	add	r8, r0
 801ba78:	9305      	str	r3, [sp, #20]
 801ba7a:	9b04      	ldr	r3, [sp, #16]
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	dd05      	ble.n	801ba8c <_dtoa_r+0x734>
 801ba80:	4629      	mov	r1, r5
 801ba82:	461a      	mov	r2, r3
 801ba84:	4630      	mov	r0, r6
 801ba86:	f000 ffd1 	bl	801ca2c <__lshift>
 801ba8a:	4605      	mov	r5, r0
 801ba8c:	9b05      	ldr	r3, [sp, #20]
 801ba8e:	2b00      	cmp	r3, #0
 801ba90:	dd05      	ble.n	801ba9e <_dtoa_r+0x746>
 801ba92:	4621      	mov	r1, r4
 801ba94:	461a      	mov	r2, r3
 801ba96:	4630      	mov	r0, r6
 801ba98:	f000 ffc8 	bl	801ca2c <__lshift>
 801ba9c:	4604      	mov	r4, r0
 801ba9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	d06a      	beq.n	801bb7a <_dtoa_r+0x822>
 801baa4:	4621      	mov	r1, r4
 801baa6:	4628      	mov	r0, r5
 801baa8:	f001 f830 	bl	801cb0c <__mcmp>
 801baac:	2800      	cmp	r0, #0
 801baae:	da64      	bge.n	801bb7a <_dtoa_r+0x822>
 801bab0:	2300      	movs	r3, #0
 801bab2:	4629      	mov	r1, r5
 801bab4:	220a      	movs	r2, #10
 801bab6:	4630      	mov	r0, r6
 801bab8:	f000 fdbe 	bl	801c638 <__multadd>
 801babc:	9b07      	ldr	r3, [sp, #28]
 801babe:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bac2:	4605      	mov	r5, r0
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	f000 8191 	beq.w	801bdec <_dtoa_r+0xa94>
 801baca:	4639      	mov	r1, r7
 801bacc:	2300      	movs	r3, #0
 801bace:	220a      	movs	r2, #10
 801bad0:	4630      	mov	r0, r6
 801bad2:	f000 fdb1 	bl	801c638 <__multadd>
 801bad6:	f1ba 0f00 	cmp.w	sl, #0
 801bada:	4607      	mov	r7, r0
 801badc:	f300 808d 	bgt.w	801bbfa <_dtoa_r+0x8a2>
 801bae0:	9b06      	ldr	r3, [sp, #24]
 801bae2:	2b02      	cmp	r3, #2
 801bae4:	dc50      	bgt.n	801bb88 <_dtoa_r+0x830>
 801bae6:	e088      	b.n	801bbfa <_dtoa_r+0x8a2>
 801bae8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801baea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801baee:	e751      	b.n	801b994 <_dtoa_r+0x63c>
 801baf0:	f109 34ff 	add.w	r4, r9, #4294967295
 801baf4:	42a3      	cmp	r3, r4
 801baf6:	bfbf      	itttt	lt
 801baf8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801bafa:	1ae3      	sublt	r3, r4, r3
 801bafc:	18d2      	addlt	r2, r2, r3
 801bafe:	9209      	strlt	r2, [sp, #36]	; 0x24
 801bb00:	bfb6      	itet	lt
 801bb02:	4623      	movlt	r3, r4
 801bb04:	1b1c      	subge	r4, r3, r4
 801bb06:	2400      	movlt	r4, #0
 801bb08:	f1b9 0f00 	cmp.w	r9, #0
 801bb0c:	bfb5      	itete	lt
 801bb0e:	9a04      	ldrlt	r2, [sp, #16]
 801bb10:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801bb14:	eba2 0809 	sublt.w	r8, r2, r9
 801bb18:	464a      	movge	r2, r9
 801bb1a:	bfb8      	it	lt
 801bb1c:	2200      	movlt	r2, #0
 801bb1e:	e73c      	b.n	801b99a <_dtoa_r+0x642>
 801bb20:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801bb24:	9f07      	ldr	r7, [sp, #28]
 801bb26:	461c      	mov	r4, r3
 801bb28:	e744      	b.n	801b9b4 <_dtoa_r+0x65c>
 801bb2a:	461a      	mov	r2, r3
 801bb2c:	e770      	b.n	801ba10 <_dtoa_r+0x6b8>
 801bb2e:	9b06      	ldr	r3, [sp, #24]
 801bb30:	2b01      	cmp	r3, #1
 801bb32:	dc18      	bgt.n	801bb66 <_dtoa_r+0x80e>
 801bb34:	9b02      	ldr	r3, [sp, #8]
 801bb36:	b9b3      	cbnz	r3, 801bb66 <_dtoa_r+0x80e>
 801bb38:	9b03      	ldr	r3, [sp, #12]
 801bb3a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801bb3e:	b9a2      	cbnz	r2, 801bb6a <_dtoa_r+0x812>
 801bb40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801bb44:	0d12      	lsrs	r2, r2, #20
 801bb46:	0512      	lsls	r2, r2, #20
 801bb48:	b18a      	cbz	r2, 801bb6e <_dtoa_r+0x816>
 801bb4a:	9b04      	ldr	r3, [sp, #16]
 801bb4c:	3301      	adds	r3, #1
 801bb4e:	9304      	str	r3, [sp, #16]
 801bb50:	9b05      	ldr	r3, [sp, #20]
 801bb52:	3301      	adds	r3, #1
 801bb54:	9305      	str	r3, [sp, #20]
 801bb56:	2301      	movs	r3, #1
 801bb58:	930a      	str	r3, [sp, #40]	; 0x28
 801bb5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bb5c:	2b00      	cmp	r3, #0
 801bb5e:	f47f af70 	bne.w	801ba42 <_dtoa_r+0x6ea>
 801bb62:	2001      	movs	r0, #1
 801bb64:	e775      	b.n	801ba52 <_dtoa_r+0x6fa>
 801bb66:	2300      	movs	r3, #0
 801bb68:	e7f6      	b.n	801bb58 <_dtoa_r+0x800>
 801bb6a:	9b02      	ldr	r3, [sp, #8]
 801bb6c:	e7f4      	b.n	801bb58 <_dtoa_r+0x800>
 801bb6e:	920a      	str	r2, [sp, #40]	; 0x28
 801bb70:	e7f3      	b.n	801bb5a <_dtoa_r+0x802>
 801bb72:	d082      	beq.n	801ba7a <_dtoa_r+0x722>
 801bb74:	4610      	mov	r0, r2
 801bb76:	301c      	adds	r0, #28
 801bb78:	e778      	b.n	801ba6c <_dtoa_r+0x714>
 801bb7a:	f1b9 0f00 	cmp.w	r9, #0
 801bb7e:	dc37      	bgt.n	801bbf0 <_dtoa_r+0x898>
 801bb80:	9b06      	ldr	r3, [sp, #24]
 801bb82:	2b02      	cmp	r3, #2
 801bb84:	dd34      	ble.n	801bbf0 <_dtoa_r+0x898>
 801bb86:	46ca      	mov	sl, r9
 801bb88:	f1ba 0f00 	cmp.w	sl, #0
 801bb8c:	d10d      	bne.n	801bbaa <_dtoa_r+0x852>
 801bb8e:	4621      	mov	r1, r4
 801bb90:	4653      	mov	r3, sl
 801bb92:	2205      	movs	r2, #5
 801bb94:	4630      	mov	r0, r6
 801bb96:	f000 fd4f 	bl	801c638 <__multadd>
 801bb9a:	4601      	mov	r1, r0
 801bb9c:	4604      	mov	r4, r0
 801bb9e:	4628      	mov	r0, r5
 801bba0:	f000 ffb4 	bl	801cb0c <__mcmp>
 801bba4:	2800      	cmp	r0, #0
 801bba6:	f73f adeb 	bgt.w	801b780 <_dtoa_r+0x428>
 801bbaa:	9b08      	ldr	r3, [sp, #32]
 801bbac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bbb0:	ea6f 0b03 	mvn.w	fp, r3
 801bbb4:	f04f 0900 	mov.w	r9, #0
 801bbb8:	4621      	mov	r1, r4
 801bbba:	4630      	mov	r0, r6
 801bbbc:	f000 fd1a 	bl	801c5f4 <_Bfree>
 801bbc0:	2f00      	cmp	r7, #0
 801bbc2:	f43f aea8 	beq.w	801b916 <_dtoa_r+0x5be>
 801bbc6:	f1b9 0f00 	cmp.w	r9, #0
 801bbca:	d005      	beq.n	801bbd8 <_dtoa_r+0x880>
 801bbcc:	45b9      	cmp	r9, r7
 801bbce:	d003      	beq.n	801bbd8 <_dtoa_r+0x880>
 801bbd0:	4649      	mov	r1, r9
 801bbd2:	4630      	mov	r0, r6
 801bbd4:	f000 fd0e 	bl	801c5f4 <_Bfree>
 801bbd8:	4639      	mov	r1, r7
 801bbda:	4630      	mov	r0, r6
 801bbdc:	f000 fd0a 	bl	801c5f4 <_Bfree>
 801bbe0:	e699      	b.n	801b916 <_dtoa_r+0x5be>
 801bbe2:	2400      	movs	r4, #0
 801bbe4:	4627      	mov	r7, r4
 801bbe6:	e7e0      	b.n	801bbaa <_dtoa_r+0x852>
 801bbe8:	46bb      	mov	fp, r7
 801bbea:	4604      	mov	r4, r0
 801bbec:	4607      	mov	r7, r0
 801bbee:	e5c7      	b.n	801b780 <_dtoa_r+0x428>
 801bbf0:	9b07      	ldr	r3, [sp, #28]
 801bbf2:	46ca      	mov	sl, r9
 801bbf4:	2b00      	cmp	r3, #0
 801bbf6:	f000 8100 	beq.w	801bdfa <_dtoa_r+0xaa2>
 801bbfa:	f1b8 0f00 	cmp.w	r8, #0
 801bbfe:	dd05      	ble.n	801bc0c <_dtoa_r+0x8b4>
 801bc00:	4639      	mov	r1, r7
 801bc02:	4642      	mov	r2, r8
 801bc04:	4630      	mov	r0, r6
 801bc06:	f000 ff11 	bl	801ca2c <__lshift>
 801bc0a:	4607      	mov	r7, r0
 801bc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc0e:	2b00      	cmp	r3, #0
 801bc10:	d05d      	beq.n	801bcce <_dtoa_r+0x976>
 801bc12:	6879      	ldr	r1, [r7, #4]
 801bc14:	4630      	mov	r0, r6
 801bc16:	f000 fcad 	bl	801c574 <_Balloc>
 801bc1a:	4680      	mov	r8, r0
 801bc1c:	b928      	cbnz	r0, 801bc2a <_dtoa_r+0x8d2>
 801bc1e:	4b82      	ldr	r3, [pc, #520]	; (801be28 <_dtoa_r+0xad0>)
 801bc20:	4602      	mov	r2, r0
 801bc22:	f240 21ea 	movw	r1, #746	; 0x2ea
 801bc26:	f7ff bbaf 	b.w	801b388 <_dtoa_r+0x30>
 801bc2a:	693a      	ldr	r2, [r7, #16]
 801bc2c:	3202      	adds	r2, #2
 801bc2e:	0092      	lsls	r2, r2, #2
 801bc30:	f107 010c 	add.w	r1, r7, #12
 801bc34:	300c      	adds	r0, #12
 801bc36:	f7fd fdbd 	bl	80197b4 <memcpy>
 801bc3a:	2201      	movs	r2, #1
 801bc3c:	4641      	mov	r1, r8
 801bc3e:	4630      	mov	r0, r6
 801bc40:	f000 fef4 	bl	801ca2c <__lshift>
 801bc44:	9b01      	ldr	r3, [sp, #4]
 801bc46:	3301      	adds	r3, #1
 801bc48:	9304      	str	r3, [sp, #16]
 801bc4a:	9b01      	ldr	r3, [sp, #4]
 801bc4c:	4453      	add	r3, sl
 801bc4e:	9308      	str	r3, [sp, #32]
 801bc50:	9b02      	ldr	r3, [sp, #8]
 801bc52:	f003 0301 	and.w	r3, r3, #1
 801bc56:	46b9      	mov	r9, r7
 801bc58:	9307      	str	r3, [sp, #28]
 801bc5a:	4607      	mov	r7, r0
 801bc5c:	9b04      	ldr	r3, [sp, #16]
 801bc5e:	4621      	mov	r1, r4
 801bc60:	3b01      	subs	r3, #1
 801bc62:	4628      	mov	r0, r5
 801bc64:	9302      	str	r3, [sp, #8]
 801bc66:	f7ff fae9 	bl	801b23c <quorem>
 801bc6a:	4603      	mov	r3, r0
 801bc6c:	3330      	adds	r3, #48	; 0x30
 801bc6e:	9005      	str	r0, [sp, #20]
 801bc70:	4649      	mov	r1, r9
 801bc72:	4628      	mov	r0, r5
 801bc74:	9309      	str	r3, [sp, #36]	; 0x24
 801bc76:	f000 ff49 	bl	801cb0c <__mcmp>
 801bc7a:	463a      	mov	r2, r7
 801bc7c:	4682      	mov	sl, r0
 801bc7e:	4621      	mov	r1, r4
 801bc80:	4630      	mov	r0, r6
 801bc82:	f000 ff5f 	bl	801cb44 <__mdiff>
 801bc86:	68c2      	ldr	r2, [r0, #12]
 801bc88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc8a:	4680      	mov	r8, r0
 801bc8c:	bb0a      	cbnz	r2, 801bcd2 <_dtoa_r+0x97a>
 801bc8e:	4601      	mov	r1, r0
 801bc90:	4628      	mov	r0, r5
 801bc92:	f000 ff3b 	bl	801cb0c <__mcmp>
 801bc96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc98:	4602      	mov	r2, r0
 801bc9a:	4641      	mov	r1, r8
 801bc9c:	4630      	mov	r0, r6
 801bc9e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801bca2:	f000 fca7 	bl	801c5f4 <_Bfree>
 801bca6:	9b06      	ldr	r3, [sp, #24]
 801bca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bcaa:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801bcae:	ea43 0102 	orr.w	r1, r3, r2
 801bcb2:	9b07      	ldr	r3, [sp, #28]
 801bcb4:	430b      	orrs	r3, r1
 801bcb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bcb8:	d10d      	bne.n	801bcd6 <_dtoa_r+0x97e>
 801bcba:	2b39      	cmp	r3, #57	; 0x39
 801bcbc:	d029      	beq.n	801bd12 <_dtoa_r+0x9ba>
 801bcbe:	f1ba 0f00 	cmp.w	sl, #0
 801bcc2:	dd01      	ble.n	801bcc8 <_dtoa_r+0x970>
 801bcc4:	9b05      	ldr	r3, [sp, #20]
 801bcc6:	3331      	adds	r3, #49	; 0x31
 801bcc8:	9a02      	ldr	r2, [sp, #8]
 801bcca:	7013      	strb	r3, [r2, #0]
 801bccc:	e774      	b.n	801bbb8 <_dtoa_r+0x860>
 801bcce:	4638      	mov	r0, r7
 801bcd0:	e7b8      	b.n	801bc44 <_dtoa_r+0x8ec>
 801bcd2:	2201      	movs	r2, #1
 801bcd4:	e7e1      	b.n	801bc9a <_dtoa_r+0x942>
 801bcd6:	f1ba 0f00 	cmp.w	sl, #0
 801bcda:	db06      	blt.n	801bcea <_dtoa_r+0x992>
 801bcdc:	9906      	ldr	r1, [sp, #24]
 801bcde:	ea41 0a0a 	orr.w	sl, r1, sl
 801bce2:	9907      	ldr	r1, [sp, #28]
 801bce4:	ea5a 0101 	orrs.w	r1, sl, r1
 801bce8:	d120      	bne.n	801bd2c <_dtoa_r+0x9d4>
 801bcea:	2a00      	cmp	r2, #0
 801bcec:	ddec      	ble.n	801bcc8 <_dtoa_r+0x970>
 801bcee:	4629      	mov	r1, r5
 801bcf0:	2201      	movs	r2, #1
 801bcf2:	4630      	mov	r0, r6
 801bcf4:	9304      	str	r3, [sp, #16]
 801bcf6:	f000 fe99 	bl	801ca2c <__lshift>
 801bcfa:	4621      	mov	r1, r4
 801bcfc:	4605      	mov	r5, r0
 801bcfe:	f000 ff05 	bl	801cb0c <__mcmp>
 801bd02:	2800      	cmp	r0, #0
 801bd04:	9b04      	ldr	r3, [sp, #16]
 801bd06:	dc02      	bgt.n	801bd0e <_dtoa_r+0x9b6>
 801bd08:	d1de      	bne.n	801bcc8 <_dtoa_r+0x970>
 801bd0a:	07da      	lsls	r2, r3, #31
 801bd0c:	d5dc      	bpl.n	801bcc8 <_dtoa_r+0x970>
 801bd0e:	2b39      	cmp	r3, #57	; 0x39
 801bd10:	d1d8      	bne.n	801bcc4 <_dtoa_r+0x96c>
 801bd12:	9a02      	ldr	r2, [sp, #8]
 801bd14:	2339      	movs	r3, #57	; 0x39
 801bd16:	7013      	strb	r3, [r2, #0]
 801bd18:	4643      	mov	r3, r8
 801bd1a:	4698      	mov	r8, r3
 801bd1c:	3b01      	subs	r3, #1
 801bd1e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801bd22:	2a39      	cmp	r2, #57	; 0x39
 801bd24:	d051      	beq.n	801bdca <_dtoa_r+0xa72>
 801bd26:	3201      	adds	r2, #1
 801bd28:	701a      	strb	r2, [r3, #0]
 801bd2a:	e745      	b.n	801bbb8 <_dtoa_r+0x860>
 801bd2c:	2a00      	cmp	r2, #0
 801bd2e:	dd03      	ble.n	801bd38 <_dtoa_r+0x9e0>
 801bd30:	2b39      	cmp	r3, #57	; 0x39
 801bd32:	d0ee      	beq.n	801bd12 <_dtoa_r+0x9ba>
 801bd34:	3301      	adds	r3, #1
 801bd36:	e7c7      	b.n	801bcc8 <_dtoa_r+0x970>
 801bd38:	9a04      	ldr	r2, [sp, #16]
 801bd3a:	9908      	ldr	r1, [sp, #32]
 801bd3c:	f802 3c01 	strb.w	r3, [r2, #-1]
 801bd40:	428a      	cmp	r2, r1
 801bd42:	d02b      	beq.n	801bd9c <_dtoa_r+0xa44>
 801bd44:	4629      	mov	r1, r5
 801bd46:	2300      	movs	r3, #0
 801bd48:	220a      	movs	r2, #10
 801bd4a:	4630      	mov	r0, r6
 801bd4c:	f000 fc74 	bl	801c638 <__multadd>
 801bd50:	45b9      	cmp	r9, r7
 801bd52:	4605      	mov	r5, r0
 801bd54:	f04f 0300 	mov.w	r3, #0
 801bd58:	f04f 020a 	mov.w	r2, #10
 801bd5c:	4649      	mov	r1, r9
 801bd5e:	4630      	mov	r0, r6
 801bd60:	d107      	bne.n	801bd72 <_dtoa_r+0xa1a>
 801bd62:	f000 fc69 	bl	801c638 <__multadd>
 801bd66:	4681      	mov	r9, r0
 801bd68:	4607      	mov	r7, r0
 801bd6a:	9b04      	ldr	r3, [sp, #16]
 801bd6c:	3301      	adds	r3, #1
 801bd6e:	9304      	str	r3, [sp, #16]
 801bd70:	e774      	b.n	801bc5c <_dtoa_r+0x904>
 801bd72:	f000 fc61 	bl	801c638 <__multadd>
 801bd76:	4639      	mov	r1, r7
 801bd78:	4681      	mov	r9, r0
 801bd7a:	2300      	movs	r3, #0
 801bd7c:	220a      	movs	r2, #10
 801bd7e:	4630      	mov	r0, r6
 801bd80:	f000 fc5a 	bl	801c638 <__multadd>
 801bd84:	4607      	mov	r7, r0
 801bd86:	e7f0      	b.n	801bd6a <_dtoa_r+0xa12>
 801bd88:	f1ba 0f00 	cmp.w	sl, #0
 801bd8c:	9a01      	ldr	r2, [sp, #4]
 801bd8e:	bfcc      	ite	gt
 801bd90:	46d0      	movgt	r8, sl
 801bd92:	f04f 0801 	movle.w	r8, #1
 801bd96:	4490      	add	r8, r2
 801bd98:	f04f 0900 	mov.w	r9, #0
 801bd9c:	4629      	mov	r1, r5
 801bd9e:	2201      	movs	r2, #1
 801bda0:	4630      	mov	r0, r6
 801bda2:	9302      	str	r3, [sp, #8]
 801bda4:	f000 fe42 	bl	801ca2c <__lshift>
 801bda8:	4621      	mov	r1, r4
 801bdaa:	4605      	mov	r5, r0
 801bdac:	f000 feae 	bl	801cb0c <__mcmp>
 801bdb0:	2800      	cmp	r0, #0
 801bdb2:	dcb1      	bgt.n	801bd18 <_dtoa_r+0x9c0>
 801bdb4:	d102      	bne.n	801bdbc <_dtoa_r+0xa64>
 801bdb6:	9b02      	ldr	r3, [sp, #8]
 801bdb8:	07db      	lsls	r3, r3, #31
 801bdba:	d4ad      	bmi.n	801bd18 <_dtoa_r+0x9c0>
 801bdbc:	4643      	mov	r3, r8
 801bdbe:	4698      	mov	r8, r3
 801bdc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bdc4:	2a30      	cmp	r2, #48	; 0x30
 801bdc6:	d0fa      	beq.n	801bdbe <_dtoa_r+0xa66>
 801bdc8:	e6f6      	b.n	801bbb8 <_dtoa_r+0x860>
 801bdca:	9a01      	ldr	r2, [sp, #4]
 801bdcc:	429a      	cmp	r2, r3
 801bdce:	d1a4      	bne.n	801bd1a <_dtoa_r+0x9c2>
 801bdd0:	f10b 0b01 	add.w	fp, fp, #1
 801bdd4:	2331      	movs	r3, #49	; 0x31
 801bdd6:	e778      	b.n	801bcca <_dtoa_r+0x972>
 801bdd8:	4b14      	ldr	r3, [pc, #80]	; (801be2c <_dtoa_r+0xad4>)
 801bdda:	f7ff bb27 	b.w	801b42c <_dtoa_r+0xd4>
 801bdde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	f47f ab03 	bne.w	801b3ec <_dtoa_r+0x94>
 801bde6:	4b12      	ldr	r3, [pc, #72]	; (801be30 <_dtoa_r+0xad8>)
 801bde8:	f7ff bb20 	b.w	801b42c <_dtoa_r+0xd4>
 801bdec:	f1ba 0f00 	cmp.w	sl, #0
 801bdf0:	dc03      	bgt.n	801bdfa <_dtoa_r+0xaa2>
 801bdf2:	9b06      	ldr	r3, [sp, #24]
 801bdf4:	2b02      	cmp	r3, #2
 801bdf6:	f73f aec7 	bgt.w	801bb88 <_dtoa_r+0x830>
 801bdfa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bdfe:	4621      	mov	r1, r4
 801be00:	4628      	mov	r0, r5
 801be02:	f7ff fa1b 	bl	801b23c <quorem>
 801be06:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801be0a:	f808 3b01 	strb.w	r3, [r8], #1
 801be0e:	9a01      	ldr	r2, [sp, #4]
 801be10:	eba8 0202 	sub.w	r2, r8, r2
 801be14:	4592      	cmp	sl, r2
 801be16:	ddb7      	ble.n	801bd88 <_dtoa_r+0xa30>
 801be18:	4629      	mov	r1, r5
 801be1a:	2300      	movs	r3, #0
 801be1c:	220a      	movs	r2, #10
 801be1e:	4630      	mov	r0, r6
 801be20:	f000 fc0a 	bl	801c638 <__multadd>
 801be24:	4605      	mov	r5, r0
 801be26:	e7ea      	b.n	801bdfe <_dtoa_r+0xaa6>
 801be28:	0801e6c0 	.word	0x0801e6c0
 801be2c:	0801e4c0 	.word	0x0801e4c0
 801be30:	0801e641 	.word	0x0801e641

0801be34 <rshift>:
 801be34:	6903      	ldr	r3, [r0, #16]
 801be36:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801be3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801be3e:	ea4f 1261 	mov.w	r2, r1, asr #5
 801be42:	f100 0414 	add.w	r4, r0, #20
 801be46:	dd45      	ble.n	801bed4 <rshift+0xa0>
 801be48:	f011 011f 	ands.w	r1, r1, #31
 801be4c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801be50:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801be54:	d10c      	bne.n	801be70 <rshift+0x3c>
 801be56:	f100 0710 	add.w	r7, r0, #16
 801be5a:	4629      	mov	r1, r5
 801be5c:	42b1      	cmp	r1, r6
 801be5e:	d334      	bcc.n	801beca <rshift+0x96>
 801be60:	1a9b      	subs	r3, r3, r2
 801be62:	009b      	lsls	r3, r3, #2
 801be64:	1eea      	subs	r2, r5, #3
 801be66:	4296      	cmp	r6, r2
 801be68:	bf38      	it	cc
 801be6a:	2300      	movcc	r3, #0
 801be6c:	4423      	add	r3, r4
 801be6e:	e015      	b.n	801be9c <rshift+0x68>
 801be70:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801be74:	f1c1 0820 	rsb	r8, r1, #32
 801be78:	40cf      	lsrs	r7, r1
 801be7a:	f105 0e04 	add.w	lr, r5, #4
 801be7e:	46a1      	mov	r9, r4
 801be80:	4576      	cmp	r6, lr
 801be82:	46f4      	mov	ip, lr
 801be84:	d815      	bhi.n	801beb2 <rshift+0x7e>
 801be86:	1a9a      	subs	r2, r3, r2
 801be88:	0092      	lsls	r2, r2, #2
 801be8a:	3a04      	subs	r2, #4
 801be8c:	3501      	adds	r5, #1
 801be8e:	42ae      	cmp	r6, r5
 801be90:	bf38      	it	cc
 801be92:	2200      	movcc	r2, #0
 801be94:	18a3      	adds	r3, r4, r2
 801be96:	50a7      	str	r7, [r4, r2]
 801be98:	b107      	cbz	r7, 801be9c <rshift+0x68>
 801be9a:	3304      	adds	r3, #4
 801be9c:	1b1a      	subs	r2, r3, r4
 801be9e:	42a3      	cmp	r3, r4
 801bea0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801bea4:	bf08      	it	eq
 801bea6:	2300      	moveq	r3, #0
 801bea8:	6102      	str	r2, [r0, #16]
 801beaa:	bf08      	it	eq
 801beac:	6143      	streq	r3, [r0, #20]
 801beae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801beb2:	f8dc c000 	ldr.w	ip, [ip]
 801beb6:	fa0c fc08 	lsl.w	ip, ip, r8
 801beba:	ea4c 0707 	orr.w	r7, ip, r7
 801bebe:	f849 7b04 	str.w	r7, [r9], #4
 801bec2:	f85e 7b04 	ldr.w	r7, [lr], #4
 801bec6:	40cf      	lsrs	r7, r1
 801bec8:	e7da      	b.n	801be80 <rshift+0x4c>
 801beca:	f851 cb04 	ldr.w	ip, [r1], #4
 801bece:	f847 cf04 	str.w	ip, [r7, #4]!
 801bed2:	e7c3      	b.n	801be5c <rshift+0x28>
 801bed4:	4623      	mov	r3, r4
 801bed6:	e7e1      	b.n	801be9c <rshift+0x68>

0801bed8 <__hexdig_fun>:
 801bed8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801bedc:	2b09      	cmp	r3, #9
 801bede:	d802      	bhi.n	801bee6 <__hexdig_fun+0xe>
 801bee0:	3820      	subs	r0, #32
 801bee2:	b2c0      	uxtb	r0, r0
 801bee4:	4770      	bx	lr
 801bee6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801beea:	2b05      	cmp	r3, #5
 801beec:	d801      	bhi.n	801bef2 <__hexdig_fun+0x1a>
 801beee:	3847      	subs	r0, #71	; 0x47
 801bef0:	e7f7      	b.n	801bee2 <__hexdig_fun+0xa>
 801bef2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801bef6:	2b05      	cmp	r3, #5
 801bef8:	d801      	bhi.n	801befe <__hexdig_fun+0x26>
 801befa:	3827      	subs	r0, #39	; 0x27
 801befc:	e7f1      	b.n	801bee2 <__hexdig_fun+0xa>
 801befe:	2000      	movs	r0, #0
 801bf00:	4770      	bx	lr
	...

0801bf04 <__gethex>:
 801bf04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf08:	ed2d 8b02 	vpush	{d8}
 801bf0c:	b089      	sub	sp, #36	; 0x24
 801bf0e:	ee08 0a10 	vmov	s16, r0
 801bf12:	9304      	str	r3, [sp, #16]
 801bf14:	4bb4      	ldr	r3, [pc, #720]	; (801c1e8 <__gethex+0x2e4>)
 801bf16:	681b      	ldr	r3, [r3, #0]
 801bf18:	9301      	str	r3, [sp, #4]
 801bf1a:	4618      	mov	r0, r3
 801bf1c:	468b      	mov	fp, r1
 801bf1e:	4690      	mov	r8, r2
 801bf20:	f7e4 f9f6 	bl	8000310 <strlen>
 801bf24:	9b01      	ldr	r3, [sp, #4]
 801bf26:	f8db 2000 	ldr.w	r2, [fp]
 801bf2a:	4403      	add	r3, r0
 801bf2c:	4682      	mov	sl, r0
 801bf2e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801bf32:	9305      	str	r3, [sp, #20]
 801bf34:	1c93      	adds	r3, r2, #2
 801bf36:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801bf3a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801bf3e:	32fe      	adds	r2, #254	; 0xfe
 801bf40:	18d1      	adds	r1, r2, r3
 801bf42:	461f      	mov	r7, r3
 801bf44:	f813 0b01 	ldrb.w	r0, [r3], #1
 801bf48:	9100      	str	r1, [sp, #0]
 801bf4a:	2830      	cmp	r0, #48	; 0x30
 801bf4c:	d0f8      	beq.n	801bf40 <__gethex+0x3c>
 801bf4e:	f7ff ffc3 	bl	801bed8 <__hexdig_fun>
 801bf52:	4604      	mov	r4, r0
 801bf54:	2800      	cmp	r0, #0
 801bf56:	d13a      	bne.n	801bfce <__gethex+0xca>
 801bf58:	9901      	ldr	r1, [sp, #4]
 801bf5a:	4652      	mov	r2, sl
 801bf5c:	4638      	mov	r0, r7
 801bf5e:	f001 fa43 	bl	801d3e8 <strncmp>
 801bf62:	4605      	mov	r5, r0
 801bf64:	2800      	cmp	r0, #0
 801bf66:	d168      	bne.n	801c03a <__gethex+0x136>
 801bf68:	f817 000a 	ldrb.w	r0, [r7, sl]
 801bf6c:	eb07 060a 	add.w	r6, r7, sl
 801bf70:	f7ff ffb2 	bl	801bed8 <__hexdig_fun>
 801bf74:	2800      	cmp	r0, #0
 801bf76:	d062      	beq.n	801c03e <__gethex+0x13a>
 801bf78:	4633      	mov	r3, r6
 801bf7a:	7818      	ldrb	r0, [r3, #0]
 801bf7c:	2830      	cmp	r0, #48	; 0x30
 801bf7e:	461f      	mov	r7, r3
 801bf80:	f103 0301 	add.w	r3, r3, #1
 801bf84:	d0f9      	beq.n	801bf7a <__gethex+0x76>
 801bf86:	f7ff ffa7 	bl	801bed8 <__hexdig_fun>
 801bf8a:	2301      	movs	r3, #1
 801bf8c:	fab0 f480 	clz	r4, r0
 801bf90:	0964      	lsrs	r4, r4, #5
 801bf92:	4635      	mov	r5, r6
 801bf94:	9300      	str	r3, [sp, #0]
 801bf96:	463a      	mov	r2, r7
 801bf98:	4616      	mov	r6, r2
 801bf9a:	3201      	adds	r2, #1
 801bf9c:	7830      	ldrb	r0, [r6, #0]
 801bf9e:	f7ff ff9b 	bl	801bed8 <__hexdig_fun>
 801bfa2:	2800      	cmp	r0, #0
 801bfa4:	d1f8      	bne.n	801bf98 <__gethex+0x94>
 801bfa6:	9901      	ldr	r1, [sp, #4]
 801bfa8:	4652      	mov	r2, sl
 801bfaa:	4630      	mov	r0, r6
 801bfac:	f001 fa1c 	bl	801d3e8 <strncmp>
 801bfb0:	b980      	cbnz	r0, 801bfd4 <__gethex+0xd0>
 801bfb2:	b94d      	cbnz	r5, 801bfc8 <__gethex+0xc4>
 801bfb4:	eb06 050a 	add.w	r5, r6, sl
 801bfb8:	462a      	mov	r2, r5
 801bfba:	4616      	mov	r6, r2
 801bfbc:	3201      	adds	r2, #1
 801bfbe:	7830      	ldrb	r0, [r6, #0]
 801bfc0:	f7ff ff8a 	bl	801bed8 <__hexdig_fun>
 801bfc4:	2800      	cmp	r0, #0
 801bfc6:	d1f8      	bne.n	801bfba <__gethex+0xb6>
 801bfc8:	1bad      	subs	r5, r5, r6
 801bfca:	00ad      	lsls	r5, r5, #2
 801bfcc:	e004      	b.n	801bfd8 <__gethex+0xd4>
 801bfce:	2400      	movs	r4, #0
 801bfd0:	4625      	mov	r5, r4
 801bfd2:	e7e0      	b.n	801bf96 <__gethex+0x92>
 801bfd4:	2d00      	cmp	r5, #0
 801bfd6:	d1f7      	bne.n	801bfc8 <__gethex+0xc4>
 801bfd8:	7833      	ldrb	r3, [r6, #0]
 801bfda:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801bfde:	2b50      	cmp	r3, #80	; 0x50
 801bfe0:	d13b      	bne.n	801c05a <__gethex+0x156>
 801bfe2:	7873      	ldrb	r3, [r6, #1]
 801bfe4:	2b2b      	cmp	r3, #43	; 0x2b
 801bfe6:	d02c      	beq.n	801c042 <__gethex+0x13e>
 801bfe8:	2b2d      	cmp	r3, #45	; 0x2d
 801bfea:	d02e      	beq.n	801c04a <__gethex+0x146>
 801bfec:	1c71      	adds	r1, r6, #1
 801bfee:	f04f 0900 	mov.w	r9, #0
 801bff2:	7808      	ldrb	r0, [r1, #0]
 801bff4:	f7ff ff70 	bl	801bed8 <__hexdig_fun>
 801bff8:	1e43      	subs	r3, r0, #1
 801bffa:	b2db      	uxtb	r3, r3
 801bffc:	2b18      	cmp	r3, #24
 801bffe:	d82c      	bhi.n	801c05a <__gethex+0x156>
 801c000:	f1a0 0210 	sub.w	r2, r0, #16
 801c004:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801c008:	f7ff ff66 	bl	801bed8 <__hexdig_fun>
 801c00c:	1e43      	subs	r3, r0, #1
 801c00e:	b2db      	uxtb	r3, r3
 801c010:	2b18      	cmp	r3, #24
 801c012:	d91d      	bls.n	801c050 <__gethex+0x14c>
 801c014:	f1b9 0f00 	cmp.w	r9, #0
 801c018:	d000      	beq.n	801c01c <__gethex+0x118>
 801c01a:	4252      	negs	r2, r2
 801c01c:	4415      	add	r5, r2
 801c01e:	f8cb 1000 	str.w	r1, [fp]
 801c022:	b1e4      	cbz	r4, 801c05e <__gethex+0x15a>
 801c024:	9b00      	ldr	r3, [sp, #0]
 801c026:	2b00      	cmp	r3, #0
 801c028:	bf14      	ite	ne
 801c02a:	2700      	movne	r7, #0
 801c02c:	2706      	moveq	r7, #6
 801c02e:	4638      	mov	r0, r7
 801c030:	b009      	add	sp, #36	; 0x24
 801c032:	ecbd 8b02 	vpop	{d8}
 801c036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c03a:	463e      	mov	r6, r7
 801c03c:	4625      	mov	r5, r4
 801c03e:	2401      	movs	r4, #1
 801c040:	e7ca      	b.n	801bfd8 <__gethex+0xd4>
 801c042:	f04f 0900 	mov.w	r9, #0
 801c046:	1cb1      	adds	r1, r6, #2
 801c048:	e7d3      	b.n	801bff2 <__gethex+0xee>
 801c04a:	f04f 0901 	mov.w	r9, #1
 801c04e:	e7fa      	b.n	801c046 <__gethex+0x142>
 801c050:	230a      	movs	r3, #10
 801c052:	fb03 0202 	mla	r2, r3, r2, r0
 801c056:	3a10      	subs	r2, #16
 801c058:	e7d4      	b.n	801c004 <__gethex+0x100>
 801c05a:	4631      	mov	r1, r6
 801c05c:	e7df      	b.n	801c01e <__gethex+0x11a>
 801c05e:	1bf3      	subs	r3, r6, r7
 801c060:	3b01      	subs	r3, #1
 801c062:	4621      	mov	r1, r4
 801c064:	2b07      	cmp	r3, #7
 801c066:	dc0b      	bgt.n	801c080 <__gethex+0x17c>
 801c068:	ee18 0a10 	vmov	r0, s16
 801c06c:	f000 fa82 	bl	801c574 <_Balloc>
 801c070:	4604      	mov	r4, r0
 801c072:	b940      	cbnz	r0, 801c086 <__gethex+0x182>
 801c074:	4b5d      	ldr	r3, [pc, #372]	; (801c1ec <__gethex+0x2e8>)
 801c076:	4602      	mov	r2, r0
 801c078:	21de      	movs	r1, #222	; 0xde
 801c07a:	485d      	ldr	r0, [pc, #372]	; (801c1f0 <__gethex+0x2ec>)
 801c07c:	f001 f9d6 	bl	801d42c <__assert_func>
 801c080:	3101      	adds	r1, #1
 801c082:	105b      	asrs	r3, r3, #1
 801c084:	e7ee      	b.n	801c064 <__gethex+0x160>
 801c086:	f100 0914 	add.w	r9, r0, #20
 801c08a:	f04f 0b00 	mov.w	fp, #0
 801c08e:	f1ca 0301 	rsb	r3, sl, #1
 801c092:	f8cd 9008 	str.w	r9, [sp, #8]
 801c096:	f8cd b000 	str.w	fp, [sp]
 801c09a:	9306      	str	r3, [sp, #24]
 801c09c:	42b7      	cmp	r7, r6
 801c09e:	d340      	bcc.n	801c122 <__gethex+0x21e>
 801c0a0:	9802      	ldr	r0, [sp, #8]
 801c0a2:	9b00      	ldr	r3, [sp, #0]
 801c0a4:	f840 3b04 	str.w	r3, [r0], #4
 801c0a8:	eba0 0009 	sub.w	r0, r0, r9
 801c0ac:	1080      	asrs	r0, r0, #2
 801c0ae:	0146      	lsls	r6, r0, #5
 801c0b0:	6120      	str	r0, [r4, #16]
 801c0b2:	4618      	mov	r0, r3
 801c0b4:	f000 fb50 	bl	801c758 <__hi0bits>
 801c0b8:	1a30      	subs	r0, r6, r0
 801c0ba:	f8d8 6000 	ldr.w	r6, [r8]
 801c0be:	42b0      	cmp	r0, r6
 801c0c0:	dd63      	ble.n	801c18a <__gethex+0x286>
 801c0c2:	1b87      	subs	r7, r0, r6
 801c0c4:	4639      	mov	r1, r7
 801c0c6:	4620      	mov	r0, r4
 801c0c8:	f000 fef1 	bl	801ceae <__any_on>
 801c0cc:	4682      	mov	sl, r0
 801c0ce:	b1a8      	cbz	r0, 801c0fc <__gethex+0x1f8>
 801c0d0:	1e7b      	subs	r3, r7, #1
 801c0d2:	1159      	asrs	r1, r3, #5
 801c0d4:	f003 021f 	and.w	r2, r3, #31
 801c0d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c0dc:	f04f 0a01 	mov.w	sl, #1
 801c0e0:	fa0a f202 	lsl.w	r2, sl, r2
 801c0e4:	420a      	tst	r2, r1
 801c0e6:	d009      	beq.n	801c0fc <__gethex+0x1f8>
 801c0e8:	4553      	cmp	r3, sl
 801c0ea:	dd05      	ble.n	801c0f8 <__gethex+0x1f4>
 801c0ec:	1eb9      	subs	r1, r7, #2
 801c0ee:	4620      	mov	r0, r4
 801c0f0:	f000 fedd 	bl	801ceae <__any_on>
 801c0f4:	2800      	cmp	r0, #0
 801c0f6:	d145      	bne.n	801c184 <__gethex+0x280>
 801c0f8:	f04f 0a02 	mov.w	sl, #2
 801c0fc:	4639      	mov	r1, r7
 801c0fe:	4620      	mov	r0, r4
 801c100:	f7ff fe98 	bl	801be34 <rshift>
 801c104:	443d      	add	r5, r7
 801c106:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c10a:	42ab      	cmp	r3, r5
 801c10c:	da4c      	bge.n	801c1a8 <__gethex+0x2a4>
 801c10e:	ee18 0a10 	vmov	r0, s16
 801c112:	4621      	mov	r1, r4
 801c114:	f000 fa6e 	bl	801c5f4 <_Bfree>
 801c118:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c11a:	2300      	movs	r3, #0
 801c11c:	6013      	str	r3, [r2, #0]
 801c11e:	27a3      	movs	r7, #163	; 0xa3
 801c120:	e785      	b.n	801c02e <__gethex+0x12a>
 801c122:	1e73      	subs	r3, r6, #1
 801c124:	9a05      	ldr	r2, [sp, #20]
 801c126:	9303      	str	r3, [sp, #12]
 801c128:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801c12c:	4293      	cmp	r3, r2
 801c12e:	d019      	beq.n	801c164 <__gethex+0x260>
 801c130:	f1bb 0f20 	cmp.w	fp, #32
 801c134:	d107      	bne.n	801c146 <__gethex+0x242>
 801c136:	9b02      	ldr	r3, [sp, #8]
 801c138:	9a00      	ldr	r2, [sp, #0]
 801c13a:	f843 2b04 	str.w	r2, [r3], #4
 801c13e:	9302      	str	r3, [sp, #8]
 801c140:	2300      	movs	r3, #0
 801c142:	9300      	str	r3, [sp, #0]
 801c144:	469b      	mov	fp, r3
 801c146:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801c14a:	f7ff fec5 	bl	801bed8 <__hexdig_fun>
 801c14e:	9b00      	ldr	r3, [sp, #0]
 801c150:	f000 000f 	and.w	r0, r0, #15
 801c154:	fa00 f00b 	lsl.w	r0, r0, fp
 801c158:	4303      	orrs	r3, r0
 801c15a:	9300      	str	r3, [sp, #0]
 801c15c:	f10b 0b04 	add.w	fp, fp, #4
 801c160:	9b03      	ldr	r3, [sp, #12]
 801c162:	e00d      	b.n	801c180 <__gethex+0x27c>
 801c164:	9b03      	ldr	r3, [sp, #12]
 801c166:	9a06      	ldr	r2, [sp, #24]
 801c168:	4413      	add	r3, r2
 801c16a:	42bb      	cmp	r3, r7
 801c16c:	d3e0      	bcc.n	801c130 <__gethex+0x22c>
 801c16e:	4618      	mov	r0, r3
 801c170:	9901      	ldr	r1, [sp, #4]
 801c172:	9307      	str	r3, [sp, #28]
 801c174:	4652      	mov	r2, sl
 801c176:	f001 f937 	bl	801d3e8 <strncmp>
 801c17a:	9b07      	ldr	r3, [sp, #28]
 801c17c:	2800      	cmp	r0, #0
 801c17e:	d1d7      	bne.n	801c130 <__gethex+0x22c>
 801c180:	461e      	mov	r6, r3
 801c182:	e78b      	b.n	801c09c <__gethex+0x198>
 801c184:	f04f 0a03 	mov.w	sl, #3
 801c188:	e7b8      	b.n	801c0fc <__gethex+0x1f8>
 801c18a:	da0a      	bge.n	801c1a2 <__gethex+0x29e>
 801c18c:	1a37      	subs	r7, r6, r0
 801c18e:	4621      	mov	r1, r4
 801c190:	ee18 0a10 	vmov	r0, s16
 801c194:	463a      	mov	r2, r7
 801c196:	f000 fc49 	bl	801ca2c <__lshift>
 801c19a:	1bed      	subs	r5, r5, r7
 801c19c:	4604      	mov	r4, r0
 801c19e:	f100 0914 	add.w	r9, r0, #20
 801c1a2:	f04f 0a00 	mov.w	sl, #0
 801c1a6:	e7ae      	b.n	801c106 <__gethex+0x202>
 801c1a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801c1ac:	42a8      	cmp	r0, r5
 801c1ae:	dd72      	ble.n	801c296 <__gethex+0x392>
 801c1b0:	1b45      	subs	r5, r0, r5
 801c1b2:	42ae      	cmp	r6, r5
 801c1b4:	dc36      	bgt.n	801c224 <__gethex+0x320>
 801c1b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c1ba:	2b02      	cmp	r3, #2
 801c1bc:	d02a      	beq.n	801c214 <__gethex+0x310>
 801c1be:	2b03      	cmp	r3, #3
 801c1c0:	d02c      	beq.n	801c21c <__gethex+0x318>
 801c1c2:	2b01      	cmp	r3, #1
 801c1c4:	d11c      	bne.n	801c200 <__gethex+0x2fc>
 801c1c6:	42ae      	cmp	r6, r5
 801c1c8:	d11a      	bne.n	801c200 <__gethex+0x2fc>
 801c1ca:	2e01      	cmp	r6, #1
 801c1cc:	d112      	bne.n	801c1f4 <__gethex+0x2f0>
 801c1ce:	9a04      	ldr	r2, [sp, #16]
 801c1d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801c1d4:	6013      	str	r3, [r2, #0]
 801c1d6:	2301      	movs	r3, #1
 801c1d8:	6123      	str	r3, [r4, #16]
 801c1da:	f8c9 3000 	str.w	r3, [r9]
 801c1de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c1e0:	2762      	movs	r7, #98	; 0x62
 801c1e2:	601c      	str	r4, [r3, #0]
 801c1e4:	e723      	b.n	801c02e <__gethex+0x12a>
 801c1e6:	bf00      	nop
 801c1e8:	0801e738 	.word	0x0801e738
 801c1ec:	0801e6c0 	.word	0x0801e6c0
 801c1f0:	0801e6d1 	.word	0x0801e6d1
 801c1f4:	1e71      	subs	r1, r6, #1
 801c1f6:	4620      	mov	r0, r4
 801c1f8:	f000 fe59 	bl	801ceae <__any_on>
 801c1fc:	2800      	cmp	r0, #0
 801c1fe:	d1e6      	bne.n	801c1ce <__gethex+0x2ca>
 801c200:	ee18 0a10 	vmov	r0, s16
 801c204:	4621      	mov	r1, r4
 801c206:	f000 f9f5 	bl	801c5f4 <_Bfree>
 801c20a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801c20c:	2300      	movs	r3, #0
 801c20e:	6013      	str	r3, [r2, #0]
 801c210:	2750      	movs	r7, #80	; 0x50
 801c212:	e70c      	b.n	801c02e <__gethex+0x12a>
 801c214:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c216:	2b00      	cmp	r3, #0
 801c218:	d1f2      	bne.n	801c200 <__gethex+0x2fc>
 801c21a:	e7d8      	b.n	801c1ce <__gethex+0x2ca>
 801c21c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c21e:	2b00      	cmp	r3, #0
 801c220:	d1d5      	bne.n	801c1ce <__gethex+0x2ca>
 801c222:	e7ed      	b.n	801c200 <__gethex+0x2fc>
 801c224:	1e6f      	subs	r7, r5, #1
 801c226:	f1ba 0f00 	cmp.w	sl, #0
 801c22a:	d131      	bne.n	801c290 <__gethex+0x38c>
 801c22c:	b127      	cbz	r7, 801c238 <__gethex+0x334>
 801c22e:	4639      	mov	r1, r7
 801c230:	4620      	mov	r0, r4
 801c232:	f000 fe3c 	bl	801ceae <__any_on>
 801c236:	4682      	mov	sl, r0
 801c238:	117b      	asrs	r3, r7, #5
 801c23a:	2101      	movs	r1, #1
 801c23c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c240:	f007 071f 	and.w	r7, r7, #31
 801c244:	fa01 f707 	lsl.w	r7, r1, r7
 801c248:	421f      	tst	r7, r3
 801c24a:	4629      	mov	r1, r5
 801c24c:	4620      	mov	r0, r4
 801c24e:	bf18      	it	ne
 801c250:	f04a 0a02 	orrne.w	sl, sl, #2
 801c254:	1b76      	subs	r6, r6, r5
 801c256:	f7ff fded 	bl	801be34 <rshift>
 801c25a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801c25e:	2702      	movs	r7, #2
 801c260:	f1ba 0f00 	cmp.w	sl, #0
 801c264:	d048      	beq.n	801c2f8 <__gethex+0x3f4>
 801c266:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801c26a:	2b02      	cmp	r3, #2
 801c26c:	d015      	beq.n	801c29a <__gethex+0x396>
 801c26e:	2b03      	cmp	r3, #3
 801c270:	d017      	beq.n	801c2a2 <__gethex+0x39e>
 801c272:	2b01      	cmp	r3, #1
 801c274:	d109      	bne.n	801c28a <__gethex+0x386>
 801c276:	f01a 0f02 	tst.w	sl, #2
 801c27a:	d006      	beq.n	801c28a <__gethex+0x386>
 801c27c:	f8d9 0000 	ldr.w	r0, [r9]
 801c280:	ea4a 0a00 	orr.w	sl, sl, r0
 801c284:	f01a 0f01 	tst.w	sl, #1
 801c288:	d10e      	bne.n	801c2a8 <__gethex+0x3a4>
 801c28a:	f047 0710 	orr.w	r7, r7, #16
 801c28e:	e033      	b.n	801c2f8 <__gethex+0x3f4>
 801c290:	f04f 0a01 	mov.w	sl, #1
 801c294:	e7d0      	b.n	801c238 <__gethex+0x334>
 801c296:	2701      	movs	r7, #1
 801c298:	e7e2      	b.n	801c260 <__gethex+0x35c>
 801c29a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c29c:	f1c3 0301 	rsb	r3, r3, #1
 801c2a0:	9315      	str	r3, [sp, #84]	; 0x54
 801c2a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801c2a4:	2b00      	cmp	r3, #0
 801c2a6:	d0f0      	beq.n	801c28a <__gethex+0x386>
 801c2a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801c2ac:	f104 0314 	add.w	r3, r4, #20
 801c2b0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801c2b4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801c2b8:	f04f 0c00 	mov.w	ip, #0
 801c2bc:	4618      	mov	r0, r3
 801c2be:	f853 2b04 	ldr.w	r2, [r3], #4
 801c2c2:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c2c6:	d01c      	beq.n	801c302 <__gethex+0x3fe>
 801c2c8:	3201      	adds	r2, #1
 801c2ca:	6002      	str	r2, [r0, #0]
 801c2cc:	2f02      	cmp	r7, #2
 801c2ce:	f104 0314 	add.w	r3, r4, #20
 801c2d2:	d13f      	bne.n	801c354 <__gethex+0x450>
 801c2d4:	f8d8 2000 	ldr.w	r2, [r8]
 801c2d8:	3a01      	subs	r2, #1
 801c2da:	42b2      	cmp	r2, r6
 801c2dc:	d10a      	bne.n	801c2f4 <__gethex+0x3f0>
 801c2de:	1171      	asrs	r1, r6, #5
 801c2e0:	2201      	movs	r2, #1
 801c2e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801c2e6:	f006 061f 	and.w	r6, r6, #31
 801c2ea:	fa02 f606 	lsl.w	r6, r2, r6
 801c2ee:	421e      	tst	r6, r3
 801c2f0:	bf18      	it	ne
 801c2f2:	4617      	movne	r7, r2
 801c2f4:	f047 0720 	orr.w	r7, r7, #32
 801c2f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801c2fa:	601c      	str	r4, [r3, #0]
 801c2fc:	9b04      	ldr	r3, [sp, #16]
 801c2fe:	601d      	str	r5, [r3, #0]
 801c300:	e695      	b.n	801c02e <__gethex+0x12a>
 801c302:	4299      	cmp	r1, r3
 801c304:	f843 cc04 	str.w	ip, [r3, #-4]
 801c308:	d8d8      	bhi.n	801c2bc <__gethex+0x3b8>
 801c30a:	68a3      	ldr	r3, [r4, #8]
 801c30c:	459b      	cmp	fp, r3
 801c30e:	db19      	blt.n	801c344 <__gethex+0x440>
 801c310:	6861      	ldr	r1, [r4, #4]
 801c312:	ee18 0a10 	vmov	r0, s16
 801c316:	3101      	adds	r1, #1
 801c318:	f000 f92c 	bl	801c574 <_Balloc>
 801c31c:	4681      	mov	r9, r0
 801c31e:	b918      	cbnz	r0, 801c328 <__gethex+0x424>
 801c320:	4b1a      	ldr	r3, [pc, #104]	; (801c38c <__gethex+0x488>)
 801c322:	4602      	mov	r2, r0
 801c324:	2184      	movs	r1, #132	; 0x84
 801c326:	e6a8      	b.n	801c07a <__gethex+0x176>
 801c328:	6922      	ldr	r2, [r4, #16]
 801c32a:	3202      	adds	r2, #2
 801c32c:	f104 010c 	add.w	r1, r4, #12
 801c330:	0092      	lsls	r2, r2, #2
 801c332:	300c      	adds	r0, #12
 801c334:	f7fd fa3e 	bl	80197b4 <memcpy>
 801c338:	4621      	mov	r1, r4
 801c33a:	ee18 0a10 	vmov	r0, s16
 801c33e:	f000 f959 	bl	801c5f4 <_Bfree>
 801c342:	464c      	mov	r4, r9
 801c344:	6923      	ldr	r3, [r4, #16]
 801c346:	1c5a      	adds	r2, r3, #1
 801c348:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c34c:	6122      	str	r2, [r4, #16]
 801c34e:	2201      	movs	r2, #1
 801c350:	615a      	str	r2, [r3, #20]
 801c352:	e7bb      	b.n	801c2cc <__gethex+0x3c8>
 801c354:	6922      	ldr	r2, [r4, #16]
 801c356:	455a      	cmp	r2, fp
 801c358:	dd0b      	ble.n	801c372 <__gethex+0x46e>
 801c35a:	2101      	movs	r1, #1
 801c35c:	4620      	mov	r0, r4
 801c35e:	f7ff fd69 	bl	801be34 <rshift>
 801c362:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801c366:	3501      	adds	r5, #1
 801c368:	42ab      	cmp	r3, r5
 801c36a:	f6ff aed0 	blt.w	801c10e <__gethex+0x20a>
 801c36e:	2701      	movs	r7, #1
 801c370:	e7c0      	b.n	801c2f4 <__gethex+0x3f0>
 801c372:	f016 061f 	ands.w	r6, r6, #31
 801c376:	d0fa      	beq.n	801c36e <__gethex+0x46a>
 801c378:	4453      	add	r3, sl
 801c37a:	f1c6 0620 	rsb	r6, r6, #32
 801c37e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801c382:	f000 f9e9 	bl	801c758 <__hi0bits>
 801c386:	42b0      	cmp	r0, r6
 801c388:	dbe7      	blt.n	801c35a <__gethex+0x456>
 801c38a:	e7f0      	b.n	801c36e <__gethex+0x46a>
 801c38c:	0801e6c0 	.word	0x0801e6c0

0801c390 <L_shift>:
 801c390:	f1c2 0208 	rsb	r2, r2, #8
 801c394:	0092      	lsls	r2, r2, #2
 801c396:	b570      	push	{r4, r5, r6, lr}
 801c398:	f1c2 0620 	rsb	r6, r2, #32
 801c39c:	6843      	ldr	r3, [r0, #4]
 801c39e:	6804      	ldr	r4, [r0, #0]
 801c3a0:	fa03 f506 	lsl.w	r5, r3, r6
 801c3a4:	432c      	orrs	r4, r5
 801c3a6:	40d3      	lsrs	r3, r2
 801c3a8:	6004      	str	r4, [r0, #0]
 801c3aa:	f840 3f04 	str.w	r3, [r0, #4]!
 801c3ae:	4288      	cmp	r0, r1
 801c3b0:	d3f4      	bcc.n	801c39c <L_shift+0xc>
 801c3b2:	bd70      	pop	{r4, r5, r6, pc}

0801c3b4 <__match>:
 801c3b4:	b530      	push	{r4, r5, lr}
 801c3b6:	6803      	ldr	r3, [r0, #0]
 801c3b8:	3301      	adds	r3, #1
 801c3ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 801c3be:	b914      	cbnz	r4, 801c3c6 <__match+0x12>
 801c3c0:	6003      	str	r3, [r0, #0]
 801c3c2:	2001      	movs	r0, #1
 801c3c4:	bd30      	pop	{r4, r5, pc}
 801c3c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c3ca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801c3ce:	2d19      	cmp	r5, #25
 801c3d0:	bf98      	it	ls
 801c3d2:	3220      	addls	r2, #32
 801c3d4:	42a2      	cmp	r2, r4
 801c3d6:	d0f0      	beq.n	801c3ba <__match+0x6>
 801c3d8:	2000      	movs	r0, #0
 801c3da:	e7f3      	b.n	801c3c4 <__match+0x10>

0801c3dc <__hexnan>:
 801c3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3e0:	680b      	ldr	r3, [r1, #0]
 801c3e2:	115e      	asrs	r6, r3, #5
 801c3e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801c3e8:	f013 031f 	ands.w	r3, r3, #31
 801c3ec:	b087      	sub	sp, #28
 801c3ee:	bf18      	it	ne
 801c3f0:	3604      	addne	r6, #4
 801c3f2:	2500      	movs	r5, #0
 801c3f4:	1f37      	subs	r7, r6, #4
 801c3f6:	4690      	mov	r8, r2
 801c3f8:	6802      	ldr	r2, [r0, #0]
 801c3fa:	9301      	str	r3, [sp, #4]
 801c3fc:	4682      	mov	sl, r0
 801c3fe:	f846 5c04 	str.w	r5, [r6, #-4]
 801c402:	46b9      	mov	r9, r7
 801c404:	463c      	mov	r4, r7
 801c406:	9502      	str	r5, [sp, #8]
 801c408:	46ab      	mov	fp, r5
 801c40a:	7851      	ldrb	r1, [r2, #1]
 801c40c:	1c53      	adds	r3, r2, #1
 801c40e:	9303      	str	r3, [sp, #12]
 801c410:	b341      	cbz	r1, 801c464 <__hexnan+0x88>
 801c412:	4608      	mov	r0, r1
 801c414:	9205      	str	r2, [sp, #20]
 801c416:	9104      	str	r1, [sp, #16]
 801c418:	f7ff fd5e 	bl	801bed8 <__hexdig_fun>
 801c41c:	2800      	cmp	r0, #0
 801c41e:	d14f      	bne.n	801c4c0 <__hexnan+0xe4>
 801c420:	9904      	ldr	r1, [sp, #16]
 801c422:	9a05      	ldr	r2, [sp, #20]
 801c424:	2920      	cmp	r1, #32
 801c426:	d818      	bhi.n	801c45a <__hexnan+0x7e>
 801c428:	9b02      	ldr	r3, [sp, #8]
 801c42a:	459b      	cmp	fp, r3
 801c42c:	dd13      	ble.n	801c456 <__hexnan+0x7a>
 801c42e:	454c      	cmp	r4, r9
 801c430:	d206      	bcs.n	801c440 <__hexnan+0x64>
 801c432:	2d07      	cmp	r5, #7
 801c434:	dc04      	bgt.n	801c440 <__hexnan+0x64>
 801c436:	462a      	mov	r2, r5
 801c438:	4649      	mov	r1, r9
 801c43a:	4620      	mov	r0, r4
 801c43c:	f7ff ffa8 	bl	801c390 <L_shift>
 801c440:	4544      	cmp	r4, r8
 801c442:	d950      	bls.n	801c4e6 <__hexnan+0x10a>
 801c444:	2300      	movs	r3, #0
 801c446:	f1a4 0904 	sub.w	r9, r4, #4
 801c44a:	f844 3c04 	str.w	r3, [r4, #-4]
 801c44e:	f8cd b008 	str.w	fp, [sp, #8]
 801c452:	464c      	mov	r4, r9
 801c454:	461d      	mov	r5, r3
 801c456:	9a03      	ldr	r2, [sp, #12]
 801c458:	e7d7      	b.n	801c40a <__hexnan+0x2e>
 801c45a:	2929      	cmp	r1, #41	; 0x29
 801c45c:	d156      	bne.n	801c50c <__hexnan+0x130>
 801c45e:	3202      	adds	r2, #2
 801c460:	f8ca 2000 	str.w	r2, [sl]
 801c464:	f1bb 0f00 	cmp.w	fp, #0
 801c468:	d050      	beq.n	801c50c <__hexnan+0x130>
 801c46a:	454c      	cmp	r4, r9
 801c46c:	d206      	bcs.n	801c47c <__hexnan+0xa0>
 801c46e:	2d07      	cmp	r5, #7
 801c470:	dc04      	bgt.n	801c47c <__hexnan+0xa0>
 801c472:	462a      	mov	r2, r5
 801c474:	4649      	mov	r1, r9
 801c476:	4620      	mov	r0, r4
 801c478:	f7ff ff8a 	bl	801c390 <L_shift>
 801c47c:	4544      	cmp	r4, r8
 801c47e:	d934      	bls.n	801c4ea <__hexnan+0x10e>
 801c480:	f1a8 0204 	sub.w	r2, r8, #4
 801c484:	4623      	mov	r3, r4
 801c486:	f853 1b04 	ldr.w	r1, [r3], #4
 801c48a:	f842 1f04 	str.w	r1, [r2, #4]!
 801c48e:	429f      	cmp	r7, r3
 801c490:	d2f9      	bcs.n	801c486 <__hexnan+0xaa>
 801c492:	1b3b      	subs	r3, r7, r4
 801c494:	f023 0303 	bic.w	r3, r3, #3
 801c498:	3304      	adds	r3, #4
 801c49a:	3401      	adds	r4, #1
 801c49c:	3e03      	subs	r6, #3
 801c49e:	42b4      	cmp	r4, r6
 801c4a0:	bf88      	it	hi
 801c4a2:	2304      	movhi	r3, #4
 801c4a4:	4443      	add	r3, r8
 801c4a6:	2200      	movs	r2, #0
 801c4a8:	f843 2b04 	str.w	r2, [r3], #4
 801c4ac:	429f      	cmp	r7, r3
 801c4ae:	d2fb      	bcs.n	801c4a8 <__hexnan+0xcc>
 801c4b0:	683b      	ldr	r3, [r7, #0]
 801c4b2:	b91b      	cbnz	r3, 801c4bc <__hexnan+0xe0>
 801c4b4:	4547      	cmp	r7, r8
 801c4b6:	d127      	bne.n	801c508 <__hexnan+0x12c>
 801c4b8:	2301      	movs	r3, #1
 801c4ba:	603b      	str	r3, [r7, #0]
 801c4bc:	2005      	movs	r0, #5
 801c4be:	e026      	b.n	801c50e <__hexnan+0x132>
 801c4c0:	3501      	adds	r5, #1
 801c4c2:	2d08      	cmp	r5, #8
 801c4c4:	f10b 0b01 	add.w	fp, fp, #1
 801c4c8:	dd06      	ble.n	801c4d8 <__hexnan+0xfc>
 801c4ca:	4544      	cmp	r4, r8
 801c4cc:	d9c3      	bls.n	801c456 <__hexnan+0x7a>
 801c4ce:	2300      	movs	r3, #0
 801c4d0:	f844 3c04 	str.w	r3, [r4, #-4]
 801c4d4:	2501      	movs	r5, #1
 801c4d6:	3c04      	subs	r4, #4
 801c4d8:	6822      	ldr	r2, [r4, #0]
 801c4da:	f000 000f 	and.w	r0, r0, #15
 801c4de:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801c4e2:	6022      	str	r2, [r4, #0]
 801c4e4:	e7b7      	b.n	801c456 <__hexnan+0x7a>
 801c4e6:	2508      	movs	r5, #8
 801c4e8:	e7b5      	b.n	801c456 <__hexnan+0x7a>
 801c4ea:	9b01      	ldr	r3, [sp, #4]
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	d0df      	beq.n	801c4b0 <__hexnan+0xd4>
 801c4f0:	f04f 32ff 	mov.w	r2, #4294967295
 801c4f4:	f1c3 0320 	rsb	r3, r3, #32
 801c4f8:	fa22 f303 	lsr.w	r3, r2, r3
 801c4fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c500:	401a      	ands	r2, r3
 801c502:	f846 2c04 	str.w	r2, [r6, #-4]
 801c506:	e7d3      	b.n	801c4b0 <__hexnan+0xd4>
 801c508:	3f04      	subs	r7, #4
 801c50a:	e7d1      	b.n	801c4b0 <__hexnan+0xd4>
 801c50c:	2004      	movs	r0, #4
 801c50e:	b007      	add	sp, #28
 801c510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c514 <_localeconv_r>:
 801c514:	4800      	ldr	r0, [pc, #0]	; (801c518 <_localeconv_r+0x4>)
 801c516:	4770      	bx	lr
 801c518:	24000258 	.word	0x24000258

0801c51c <_lseek_r>:
 801c51c:	b538      	push	{r3, r4, r5, lr}
 801c51e:	4d07      	ldr	r5, [pc, #28]	; (801c53c <_lseek_r+0x20>)
 801c520:	4604      	mov	r4, r0
 801c522:	4608      	mov	r0, r1
 801c524:	4611      	mov	r1, r2
 801c526:	2200      	movs	r2, #0
 801c528:	602a      	str	r2, [r5, #0]
 801c52a:	461a      	mov	r2, r3
 801c52c:	f7e6 fd6a 	bl	8003004 <_lseek>
 801c530:	1c43      	adds	r3, r0, #1
 801c532:	d102      	bne.n	801c53a <_lseek_r+0x1e>
 801c534:	682b      	ldr	r3, [r5, #0]
 801c536:	b103      	cbz	r3, 801c53a <_lseek_r+0x1e>
 801c538:	6023      	str	r3, [r4, #0]
 801c53a:	bd38      	pop	{r3, r4, r5, pc}
 801c53c:	240034f8 	.word	0x240034f8

0801c540 <malloc>:
 801c540:	4b02      	ldr	r3, [pc, #8]	; (801c54c <malloc+0xc>)
 801c542:	4601      	mov	r1, r0
 801c544:	6818      	ldr	r0, [r3, #0]
 801c546:	f000 bd55 	b.w	801cff4 <_malloc_r>
 801c54a:	bf00      	nop
 801c54c:	24000100 	.word	0x24000100

0801c550 <__ascii_mbtowc>:
 801c550:	b082      	sub	sp, #8
 801c552:	b901      	cbnz	r1, 801c556 <__ascii_mbtowc+0x6>
 801c554:	a901      	add	r1, sp, #4
 801c556:	b142      	cbz	r2, 801c56a <__ascii_mbtowc+0x1a>
 801c558:	b14b      	cbz	r3, 801c56e <__ascii_mbtowc+0x1e>
 801c55a:	7813      	ldrb	r3, [r2, #0]
 801c55c:	600b      	str	r3, [r1, #0]
 801c55e:	7812      	ldrb	r2, [r2, #0]
 801c560:	1e10      	subs	r0, r2, #0
 801c562:	bf18      	it	ne
 801c564:	2001      	movne	r0, #1
 801c566:	b002      	add	sp, #8
 801c568:	4770      	bx	lr
 801c56a:	4610      	mov	r0, r2
 801c56c:	e7fb      	b.n	801c566 <__ascii_mbtowc+0x16>
 801c56e:	f06f 0001 	mvn.w	r0, #1
 801c572:	e7f8      	b.n	801c566 <__ascii_mbtowc+0x16>

0801c574 <_Balloc>:
 801c574:	b570      	push	{r4, r5, r6, lr}
 801c576:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c578:	4604      	mov	r4, r0
 801c57a:	460d      	mov	r5, r1
 801c57c:	b976      	cbnz	r6, 801c59c <_Balloc+0x28>
 801c57e:	2010      	movs	r0, #16
 801c580:	f7ff ffde 	bl	801c540 <malloc>
 801c584:	4602      	mov	r2, r0
 801c586:	6260      	str	r0, [r4, #36]	; 0x24
 801c588:	b920      	cbnz	r0, 801c594 <_Balloc+0x20>
 801c58a:	4b18      	ldr	r3, [pc, #96]	; (801c5ec <_Balloc+0x78>)
 801c58c:	4818      	ldr	r0, [pc, #96]	; (801c5f0 <_Balloc+0x7c>)
 801c58e:	2166      	movs	r1, #102	; 0x66
 801c590:	f000 ff4c 	bl	801d42c <__assert_func>
 801c594:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c598:	6006      	str	r6, [r0, #0]
 801c59a:	60c6      	str	r6, [r0, #12]
 801c59c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801c59e:	68f3      	ldr	r3, [r6, #12]
 801c5a0:	b183      	cbz	r3, 801c5c4 <_Balloc+0x50>
 801c5a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c5a4:	68db      	ldr	r3, [r3, #12]
 801c5a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c5aa:	b9b8      	cbnz	r0, 801c5dc <_Balloc+0x68>
 801c5ac:	2101      	movs	r1, #1
 801c5ae:	fa01 f605 	lsl.w	r6, r1, r5
 801c5b2:	1d72      	adds	r2, r6, #5
 801c5b4:	0092      	lsls	r2, r2, #2
 801c5b6:	4620      	mov	r0, r4
 801c5b8:	f000 fc9a 	bl	801cef0 <_calloc_r>
 801c5bc:	b160      	cbz	r0, 801c5d8 <_Balloc+0x64>
 801c5be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c5c2:	e00e      	b.n	801c5e2 <_Balloc+0x6e>
 801c5c4:	2221      	movs	r2, #33	; 0x21
 801c5c6:	2104      	movs	r1, #4
 801c5c8:	4620      	mov	r0, r4
 801c5ca:	f000 fc91 	bl	801cef0 <_calloc_r>
 801c5ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c5d0:	60f0      	str	r0, [r6, #12]
 801c5d2:	68db      	ldr	r3, [r3, #12]
 801c5d4:	2b00      	cmp	r3, #0
 801c5d6:	d1e4      	bne.n	801c5a2 <_Balloc+0x2e>
 801c5d8:	2000      	movs	r0, #0
 801c5da:	bd70      	pop	{r4, r5, r6, pc}
 801c5dc:	6802      	ldr	r2, [r0, #0]
 801c5de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c5e2:	2300      	movs	r3, #0
 801c5e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c5e8:	e7f7      	b.n	801c5da <_Balloc+0x66>
 801c5ea:	bf00      	nop
 801c5ec:	0801e64e 	.word	0x0801e64e
 801c5f0:	0801e74c 	.word	0x0801e74c

0801c5f4 <_Bfree>:
 801c5f4:	b570      	push	{r4, r5, r6, lr}
 801c5f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801c5f8:	4605      	mov	r5, r0
 801c5fa:	460c      	mov	r4, r1
 801c5fc:	b976      	cbnz	r6, 801c61c <_Bfree+0x28>
 801c5fe:	2010      	movs	r0, #16
 801c600:	f7ff ff9e 	bl	801c540 <malloc>
 801c604:	4602      	mov	r2, r0
 801c606:	6268      	str	r0, [r5, #36]	; 0x24
 801c608:	b920      	cbnz	r0, 801c614 <_Bfree+0x20>
 801c60a:	4b09      	ldr	r3, [pc, #36]	; (801c630 <_Bfree+0x3c>)
 801c60c:	4809      	ldr	r0, [pc, #36]	; (801c634 <_Bfree+0x40>)
 801c60e:	218a      	movs	r1, #138	; 0x8a
 801c610:	f000 ff0c 	bl	801d42c <__assert_func>
 801c614:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c618:	6006      	str	r6, [r0, #0]
 801c61a:	60c6      	str	r6, [r0, #12]
 801c61c:	b13c      	cbz	r4, 801c62e <_Bfree+0x3a>
 801c61e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801c620:	6862      	ldr	r2, [r4, #4]
 801c622:	68db      	ldr	r3, [r3, #12]
 801c624:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c628:	6021      	str	r1, [r4, #0]
 801c62a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c62e:	bd70      	pop	{r4, r5, r6, pc}
 801c630:	0801e64e 	.word	0x0801e64e
 801c634:	0801e74c 	.word	0x0801e74c

0801c638 <__multadd>:
 801c638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c63c:	690d      	ldr	r5, [r1, #16]
 801c63e:	4607      	mov	r7, r0
 801c640:	460c      	mov	r4, r1
 801c642:	461e      	mov	r6, r3
 801c644:	f101 0c14 	add.w	ip, r1, #20
 801c648:	2000      	movs	r0, #0
 801c64a:	f8dc 3000 	ldr.w	r3, [ip]
 801c64e:	b299      	uxth	r1, r3
 801c650:	fb02 6101 	mla	r1, r2, r1, r6
 801c654:	0c1e      	lsrs	r6, r3, #16
 801c656:	0c0b      	lsrs	r3, r1, #16
 801c658:	fb02 3306 	mla	r3, r2, r6, r3
 801c65c:	b289      	uxth	r1, r1
 801c65e:	3001      	adds	r0, #1
 801c660:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c664:	4285      	cmp	r5, r0
 801c666:	f84c 1b04 	str.w	r1, [ip], #4
 801c66a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c66e:	dcec      	bgt.n	801c64a <__multadd+0x12>
 801c670:	b30e      	cbz	r6, 801c6b6 <__multadd+0x7e>
 801c672:	68a3      	ldr	r3, [r4, #8]
 801c674:	42ab      	cmp	r3, r5
 801c676:	dc19      	bgt.n	801c6ac <__multadd+0x74>
 801c678:	6861      	ldr	r1, [r4, #4]
 801c67a:	4638      	mov	r0, r7
 801c67c:	3101      	adds	r1, #1
 801c67e:	f7ff ff79 	bl	801c574 <_Balloc>
 801c682:	4680      	mov	r8, r0
 801c684:	b928      	cbnz	r0, 801c692 <__multadd+0x5a>
 801c686:	4602      	mov	r2, r0
 801c688:	4b0c      	ldr	r3, [pc, #48]	; (801c6bc <__multadd+0x84>)
 801c68a:	480d      	ldr	r0, [pc, #52]	; (801c6c0 <__multadd+0x88>)
 801c68c:	21b5      	movs	r1, #181	; 0xb5
 801c68e:	f000 fecd 	bl	801d42c <__assert_func>
 801c692:	6922      	ldr	r2, [r4, #16]
 801c694:	3202      	adds	r2, #2
 801c696:	f104 010c 	add.w	r1, r4, #12
 801c69a:	0092      	lsls	r2, r2, #2
 801c69c:	300c      	adds	r0, #12
 801c69e:	f7fd f889 	bl	80197b4 <memcpy>
 801c6a2:	4621      	mov	r1, r4
 801c6a4:	4638      	mov	r0, r7
 801c6a6:	f7ff ffa5 	bl	801c5f4 <_Bfree>
 801c6aa:	4644      	mov	r4, r8
 801c6ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c6b0:	3501      	adds	r5, #1
 801c6b2:	615e      	str	r6, [r3, #20]
 801c6b4:	6125      	str	r5, [r4, #16]
 801c6b6:	4620      	mov	r0, r4
 801c6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c6bc:	0801e6c0 	.word	0x0801e6c0
 801c6c0:	0801e74c 	.word	0x0801e74c

0801c6c4 <__s2b>:
 801c6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c6c8:	460c      	mov	r4, r1
 801c6ca:	4615      	mov	r5, r2
 801c6cc:	461f      	mov	r7, r3
 801c6ce:	2209      	movs	r2, #9
 801c6d0:	3308      	adds	r3, #8
 801c6d2:	4606      	mov	r6, r0
 801c6d4:	fb93 f3f2 	sdiv	r3, r3, r2
 801c6d8:	2100      	movs	r1, #0
 801c6da:	2201      	movs	r2, #1
 801c6dc:	429a      	cmp	r2, r3
 801c6de:	db09      	blt.n	801c6f4 <__s2b+0x30>
 801c6e0:	4630      	mov	r0, r6
 801c6e2:	f7ff ff47 	bl	801c574 <_Balloc>
 801c6e6:	b940      	cbnz	r0, 801c6fa <__s2b+0x36>
 801c6e8:	4602      	mov	r2, r0
 801c6ea:	4b19      	ldr	r3, [pc, #100]	; (801c750 <__s2b+0x8c>)
 801c6ec:	4819      	ldr	r0, [pc, #100]	; (801c754 <__s2b+0x90>)
 801c6ee:	21ce      	movs	r1, #206	; 0xce
 801c6f0:	f000 fe9c 	bl	801d42c <__assert_func>
 801c6f4:	0052      	lsls	r2, r2, #1
 801c6f6:	3101      	adds	r1, #1
 801c6f8:	e7f0      	b.n	801c6dc <__s2b+0x18>
 801c6fa:	9b08      	ldr	r3, [sp, #32]
 801c6fc:	6143      	str	r3, [r0, #20]
 801c6fe:	2d09      	cmp	r5, #9
 801c700:	f04f 0301 	mov.w	r3, #1
 801c704:	6103      	str	r3, [r0, #16]
 801c706:	dd16      	ble.n	801c736 <__s2b+0x72>
 801c708:	f104 0909 	add.w	r9, r4, #9
 801c70c:	46c8      	mov	r8, r9
 801c70e:	442c      	add	r4, r5
 801c710:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c714:	4601      	mov	r1, r0
 801c716:	3b30      	subs	r3, #48	; 0x30
 801c718:	220a      	movs	r2, #10
 801c71a:	4630      	mov	r0, r6
 801c71c:	f7ff ff8c 	bl	801c638 <__multadd>
 801c720:	45a0      	cmp	r8, r4
 801c722:	d1f5      	bne.n	801c710 <__s2b+0x4c>
 801c724:	f1a5 0408 	sub.w	r4, r5, #8
 801c728:	444c      	add	r4, r9
 801c72a:	1b2d      	subs	r5, r5, r4
 801c72c:	1963      	adds	r3, r4, r5
 801c72e:	42bb      	cmp	r3, r7
 801c730:	db04      	blt.n	801c73c <__s2b+0x78>
 801c732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c736:	340a      	adds	r4, #10
 801c738:	2509      	movs	r5, #9
 801c73a:	e7f6      	b.n	801c72a <__s2b+0x66>
 801c73c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c740:	4601      	mov	r1, r0
 801c742:	3b30      	subs	r3, #48	; 0x30
 801c744:	220a      	movs	r2, #10
 801c746:	4630      	mov	r0, r6
 801c748:	f7ff ff76 	bl	801c638 <__multadd>
 801c74c:	e7ee      	b.n	801c72c <__s2b+0x68>
 801c74e:	bf00      	nop
 801c750:	0801e6c0 	.word	0x0801e6c0
 801c754:	0801e74c 	.word	0x0801e74c

0801c758 <__hi0bits>:
 801c758:	0c03      	lsrs	r3, r0, #16
 801c75a:	041b      	lsls	r3, r3, #16
 801c75c:	b9d3      	cbnz	r3, 801c794 <__hi0bits+0x3c>
 801c75e:	0400      	lsls	r0, r0, #16
 801c760:	2310      	movs	r3, #16
 801c762:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c766:	bf04      	itt	eq
 801c768:	0200      	lsleq	r0, r0, #8
 801c76a:	3308      	addeq	r3, #8
 801c76c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c770:	bf04      	itt	eq
 801c772:	0100      	lsleq	r0, r0, #4
 801c774:	3304      	addeq	r3, #4
 801c776:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c77a:	bf04      	itt	eq
 801c77c:	0080      	lsleq	r0, r0, #2
 801c77e:	3302      	addeq	r3, #2
 801c780:	2800      	cmp	r0, #0
 801c782:	db05      	blt.n	801c790 <__hi0bits+0x38>
 801c784:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c788:	f103 0301 	add.w	r3, r3, #1
 801c78c:	bf08      	it	eq
 801c78e:	2320      	moveq	r3, #32
 801c790:	4618      	mov	r0, r3
 801c792:	4770      	bx	lr
 801c794:	2300      	movs	r3, #0
 801c796:	e7e4      	b.n	801c762 <__hi0bits+0xa>

0801c798 <__lo0bits>:
 801c798:	6803      	ldr	r3, [r0, #0]
 801c79a:	f013 0207 	ands.w	r2, r3, #7
 801c79e:	4601      	mov	r1, r0
 801c7a0:	d00b      	beq.n	801c7ba <__lo0bits+0x22>
 801c7a2:	07da      	lsls	r2, r3, #31
 801c7a4:	d423      	bmi.n	801c7ee <__lo0bits+0x56>
 801c7a6:	0798      	lsls	r0, r3, #30
 801c7a8:	bf49      	itett	mi
 801c7aa:	085b      	lsrmi	r3, r3, #1
 801c7ac:	089b      	lsrpl	r3, r3, #2
 801c7ae:	2001      	movmi	r0, #1
 801c7b0:	600b      	strmi	r3, [r1, #0]
 801c7b2:	bf5c      	itt	pl
 801c7b4:	600b      	strpl	r3, [r1, #0]
 801c7b6:	2002      	movpl	r0, #2
 801c7b8:	4770      	bx	lr
 801c7ba:	b298      	uxth	r0, r3
 801c7bc:	b9a8      	cbnz	r0, 801c7ea <__lo0bits+0x52>
 801c7be:	0c1b      	lsrs	r3, r3, #16
 801c7c0:	2010      	movs	r0, #16
 801c7c2:	b2da      	uxtb	r2, r3
 801c7c4:	b90a      	cbnz	r2, 801c7ca <__lo0bits+0x32>
 801c7c6:	3008      	adds	r0, #8
 801c7c8:	0a1b      	lsrs	r3, r3, #8
 801c7ca:	071a      	lsls	r2, r3, #28
 801c7cc:	bf04      	itt	eq
 801c7ce:	091b      	lsreq	r3, r3, #4
 801c7d0:	3004      	addeq	r0, #4
 801c7d2:	079a      	lsls	r2, r3, #30
 801c7d4:	bf04      	itt	eq
 801c7d6:	089b      	lsreq	r3, r3, #2
 801c7d8:	3002      	addeq	r0, #2
 801c7da:	07da      	lsls	r2, r3, #31
 801c7dc:	d403      	bmi.n	801c7e6 <__lo0bits+0x4e>
 801c7de:	085b      	lsrs	r3, r3, #1
 801c7e0:	f100 0001 	add.w	r0, r0, #1
 801c7e4:	d005      	beq.n	801c7f2 <__lo0bits+0x5a>
 801c7e6:	600b      	str	r3, [r1, #0]
 801c7e8:	4770      	bx	lr
 801c7ea:	4610      	mov	r0, r2
 801c7ec:	e7e9      	b.n	801c7c2 <__lo0bits+0x2a>
 801c7ee:	2000      	movs	r0, #0
 801c7f0:	4770      	bx	lr
 801c7f2:	2020      	movs	r0, #32
 801c7f4:	4770      	bx	lr
	...

0801c7f8 <__i2b>:
 801c7f8:	b510      	push	{r4, lr}
 801c7fa:	460c      	mov	r4, r1
 801c7fc:	2101      	movs	r1, #1
 801c7fe:	f7ff feb9 	bl	801c574 <_Balloc>
 801c802:	4602      	mov	r2, r0
 801c804:	b928      	cbnz	r0, 801c812 <__i2b+0x1a>
 801c806:	4b05      	ldr	r3, [pc, #20]	; (801c81c <__i2b+0x24>)
 801c808:	4805      	ldr	r0, [pc, #20]	; (801c820 <__i2b+0x28>)
 801c80a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801c80e:	f000 fe0d 	bl	801d42c <__assert_func>
 801c812:	2301      	movs	r3, #1
 801c814:	6144      	str	r4, [r0, #20]
 801c816:	6103      	str	r3, [r0, #16]
 801c818:	bd10      	pop	{r4, pc}
 801c81a:	bf00      	nop
 801c81c:	0801e6c0 	.word	0x0801e6c0
 801c820:	0801e74c 	.word	0x0801e74c

0801c824 <__multiply>:
 801c824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c828:	4691      	mov	r9, r2
 801c82a:	690a      	ldr	r2, [r1, #16]
 801c82c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c830:	429a      	cmp	r2, r3
 801c832:	bfb8      	it	lt
 801c834:	460b      	movlt	r3, r1
 801c836:	460c      	mov	r4, r1
 801c838:	bfbc      	itt	lt
 801c83a:	464c      	movlt	r4, r9
 801c83c:	4699      	movlt	r9, r3
 801c83e:	6927      	ldr	r7, [r4, #16]
 801c840:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c844:	68a3      	ldr	r3, [r4, #8]
 801c846:	6861      	ldr	r1, [r4, #4]
 801c848:	eb07 060a 	add.w	r6, r7, sl
 801c84c:	42b3      	cmp	r3, r6
 801c84e:	b085      	sub	sp, #20
 801c850:	bfb8      	it	lt
 801c852:	3101      	addlt	r1, #1
 801c854:	f7ff fe8e 	bl	801c574 <_Balloc>
 801c858:	b930      	cbnz	r0, 801c868 <__multiply+0x44>
 801c85a:	4602      	mov	r2, r0
 801c85c:	4b44      	ldr	r3, [pc, #272]	; (801c970 <__multiply+0x14c>)
 801c85e:	4845      	ldr	r0, [pc, #276]	; (801c974 <__multiply+0x150>)
 801c860:	f240 115d 	movw	r1, #349	; 0x15d
 801c864:	f000 fde2 	bl	801d42c <__assert_func>
 801c868:	f100 0514 	add.w	r5, r0, #20
 801c86c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c870:	462b      	mov	r3, r5
 801c872:	2200      	movs	r2, #0
 801c874:	4543      	cmp	r3, r8
 801c876:	d321      	bcc.n	801c8bc <__multiply+0x98>
 801c878:	f104 0314 	add.w	r3, r4, #20
 801c87c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801c880:	f109 0314 	add.w	r3, r9, #20
 801c884:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801c888:	9202      	str	r2, [sp, #8]
 801c88a:	1b3a      	subs	r2, r7, r4
 801c88c:	3a15      	subs	r2, #21
 801c88e:	f022 0203 	bic.w	r2, r2, #3
 801c892:	3204      	adds	r2, #4
 801c894:	f104 0115 	add.w	r1, r4, #21
 801c898:	428f      	cmp	r7, r1
 801c89a:	bf38      	it	cc
 801c89c:	2204      	movcc	r2, #4
 801c89e:	9201      	str	r2, [sp, #4]
 801c8a0:	9a02      	ldr	r2, [sp, #8]
 801c8a2:	9303      	str	r3, [sp, #12]
 801c8a4:	429a      	cmp	r2, r3
 801c8a6:	d80c      	bhi.n	801c8c2 <__multiply+0x9e>
 801c8a8:	2e00      	cmp	r6, #0
 801c8aa:	dd03      	ble.n	801c8b4 <__multiply+0x90>
 801c8ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c8b0:	2b00      	cmp	r3, #0
 801c8b2:	d05a      	beq.n	801c96a <__multiply+0x146>
 801c8b4:	6106      	str	r6, [r0, #16]
 801c8b6:	b005      	add	sp, #20
 801c8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c8bc:	f843 2b04 	str.w	r2, [r3], #4
 801c8c0:	e7d8      	b.n	801c874 <__multiply+0x50>
 801c8c2:	f8b3 a000 	ldrh.w	sl, [r3]
 801c8c6:	f1ba 0f00 	cmp.w	sl, #0
 801c8ca:	d024      	beq.n	801c916 <__multiply+0xf2>
 801c8cc:	f104 0e14 	add.w	lr, r4, #20
 801c8d0:	46a9      	mov	r9, r5
 801c8d2:	f04f 0c00 	mov.w	ip, #0
 801c8d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 801c8da:	f8d9 1000 	ldr.w	r1, [r9]
 801c8de:	fa1f fb82 	uxth.w	fp, r2
 801c8e2:	b289      	uxth	r1, r1
 801c8e4:	fb0a 110b 	mla	r1, sl, fp, r1
 801c8e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801c8ec:	f8d9 2000 	ldr.w	r2, [r9]
 801c8f0:	4461      	add	r1, ip
 801c8f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c8f6:	fb0a c20b 	mla	r2, sl, fp, ip
 801c8fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c8fe:	b289      	uxth	r1, r1
 801c900:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c904:	4577      	cmp	r7, lr
 801c906:	f849 1b04 	str.w	r1, [r9], #4
 801c90a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c90e:	d8e2      	bhi.n	801c8d6 <__multiply+0xb2>
 801c910:	9a01      	ldr	r2, [sp, #4]
 801c912:	f845 c002 	str.w	ip, [r5, r2]
 801c916:	9a03      	ldr	r2, [sp, #12]
 801c918:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c91c:	3304      	adds	r3, #4
 801c91e:	f1b9 0f00 	cmp.w	r9, #0
 801c922:	d020      	beq.n	801c966 <__multiply+0x142>
 801c924:	6829      	ldr	r1, [r5, #0]
 801c926:	f104 0c14 	add.w	ip, r4, #20
 801c92a:	46ae      	mov	lr, r5
 801c92c:	f04f 0a00 	mov.w	sl, #0
 801c930:	f8bc b000 	ldrh.w	fp, [ip]
 801c934:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801c938:	fb09 220b 	mla	r2, r9, fp, r2
 801c93c:	4492      	add	sl, r2
 801c93e:	b289      	uxth	r1, r1
 801c940:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801c944:	f84e 1b04 	str.w	r1, [lr], #4
 801c948:	f85c 2b04 	ldr.w	r2, [ip], #4
 801c94c:	f8be 1000 	ldrh.w	r1, [lr]
 801c950:	0c12      	lsrs	r2, r2, #16
 801c952:	fb09 1102 	mla	r1, r9, r2, r1
 801c956:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801c95a:	4567      	cmp	r7, ip
 801c95c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c960:	d8e6      	bhi.n	801c930 <__multiply+0x10c>
 801c962:	9a01      	ldr	r2, [sp, #4]
 801c964:	50a9      	str	r1, [r5, r2]
 801c966:	3504      	adds	r5, #4
 801c968:	e79a      	b.n	801c8a0 <__multiply+0x7c>
 801c96a:	3e01      	subs	r6, #1
 801c96c:	e79c      	b.n	801c8a8 <__multiply+0x84>
 801c96e:	bf00      	nop
 801c970:	0801e6c0 	.word	0x0801e6c0
 801c974:	0801e74c 	.word	0x0801e74c

0801c978 <__pow5mult>:
 801c978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c97c:	4615      	mov	r5, r2
 801c97e:	f012 0203 	ands.w	r2, r2, #3
 801c982:	4606      	mov	r6, r0
 801c984:	460f      	mov	r7, r1
 801c986:	d007      	beq.n	801c998 <__pow5mult+0x20>
 801c988:	4c25      	ldr	r4, [pc, #148]	; (801ca20 <__pow5mult+0xa8>)
 801c98a:	3a01      	subs	r2, #1
 801c98c:	2300      	movs	r3, #0
 801c98e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c992:	f7ff fe51 	bl	801c638 <__multadd>
 801c996:	4607      	mov	r7, r0
 801c998:	10ad      	asrs	r5, r5, #2
 801c99a:	d03d      	beq.n	801ca18 <__pow5mult+0xa0>
 801c99c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801c99e:	b97c      	cbnz	r4, 801c9c0 <__pow5mult+0x48>
 801c9a0:	2010      	movs	r0, #16
 801c9a2:	f7ff fdcd 	bl	801c540 <malloc>
 801c9a6:	4602      	mov	r2, r0
 801c9a8:	6270      	str	r0, [r6, #36]	; 0x24
 801c9aa:	b928      	cbnz	r0, 801c9b8 <__pow5mult+0x40>
 801c9ac:	4b1d      	ldr	r3, [pc, #116]	; (801ca24 <__pow5mult+0xac>)
 801c9ae:	481e      	ldr	r0, [pc, #120]	; (801ca28 <__pow5mult+0xb0>)
 801c9b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801c9b4:	f000 fd3a 	bl	801d42c <__assert_func>
 801c9b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c9bc:	6004      	str	r4, [r0, #0]
 801c9be:	60c4      	str	r4, [r0, #12]
 801c9c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801c9c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c9c8:	b94c      	cbnz	r4, 801c9de <__pow5mult+0x66>
 801c9ca:	f240 2171 	movw	r1, #625	; 0x271
 801c9ce:	4630      	mov	r0, r6
 801c9d0:	f7ff ff12 	bl	801c7f8 <__i2b>
 801c9d4:	2300      	movs	r3, #0
 801c9d6:	f8c8 0008 	str.w	r0, [r8, #8]
 801c9da:	4604      	mov	r4, r0
 801c9dc:	6003      	str	r3, [r0, #0]
 801c9de:	f04f 0900 	mov.w	r9, #0
 801c9e2:	07eb      	lsls	r3, r5, #31
 801c9e4:	d50a      	bpl.n	801c9fc <__pow5mult+0x84>
 801c9e6:	4639      	mov	r1, r7
 801c9e8:	4622      	mov	r2, r4
 801c9ea:	4630      	mov	r0, r6
 801c9ec:	f7ff ff1a 	bl	801c824 <__multiply>
 801c9f0:	4639      	mov	r1, r7
 801c9f2:	4680      	mov	r8, r0
 801c9f4:	4630      	mov	r0, r6
 801c9f6:	f7ff fdfd 	bl	801c5f4 <_Bfree>
 801c9fa:	4647      	mov	r7, r8
 801c9fc:	106d      	asrs	r5, r5, #1
 801c9fe:	d00b      	beq.n	801ca18 <__pow5mult+0xa0>
 801ca00:	6820      	ldr	r0, [r4, #0]
 801ca02:	b938      	cbnz	r0, 801ca14 <__pow5mult+0x9c>
 801ca04:	4622      	mov	r2, r4
 801ca06:	4621      	mov	r1, r4
 801ca08:	4630      	mov	r0, r6
 801ca0a:	f7ff ff0b 	bl	801c824 <__multiply>
 801ca0e:	6020      	str	r0, [r4, #0]
 801ca10:	f8c0 9000 	str.w	r9, [r0]
 801ca14:	4604      	mov	r4, r0
 801ca16:	e7e4      	b.n	801c9e2 <__pow5mult+0x6a>
 801ca18:	4638      	mov	r0, r7
 801ca1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ca1e:	bf00      	nop
 801ca20:	0801e898 	.word	0x0801e898
 801ca24:	0801e64e 	.word	0x0801e64e
 801ca28:	0801e74c 	.word	0x0801e74c

0801ca2c <__lshift>:
 801ca2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ca30:	460c      	mov	r4, r1
 801ca32:	6849      	ldr	r1, [r1, #4]
 801ca34:	6923      	ldr	r3, [r4, #16]
 801ca36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ca3a:	68a3      	ldr	r3, [r4, #8]
 801ca3c:	4607      	mov	r7, r0
 801ca3e:	4691      	mov	r9, r2
 801ca40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ca44:	f108 0601 	add.w	r6, r8, #1
 801ca48:	42b3      	cmp	r3, r6
 801ca4a:	db0b      	blt.n	801ca64 <__lshift+0x38>
 801ca4c:	4638      	mov	r0, r7
 801ca4e:	f7ff fd91 	bl	801c574 <_Balloc>
 801ca52:	4605      	mov	r5, r0
 801ca54:	b948      	cbnz	r0, 801ca6a <__lshift+0x3e>
 801ca56:	4602      	mov	r2, r0
 801ca58:	4b2a      	ldr	r3, [pc, #168]	; (801cb04 <__lshift+0xd8>)
 801ca5a:	482b      	ldr	r0, [pc, #172]	; (801cb08 <__lshift+0xdc>)
 801ca5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 801ca60:	f000 fce4 	bl	801d42c <__assert_func>
 801ca64:	3101      	adds	r1, #1
 801ca66:	005b      	lsls	r3, r3, #1
 801ca68:	e7ee      	b.n	801ca48 <__lshift+0x1c>
 801ca6a:	2300      	movs	r3, #0
 801ca6c:	f100 0114 	add.w	r1, r0, #20
 801ca70:	f100 0210 	add.w	r2, r0, #16
 801ca74:	4618      	mov	r0, r3
 801ca76:	4553      	cmp	r3, sl
 801ca78:	db37      	blt.n	801caea <__lshift+0xbe>
 801ca7a:	6920      	ldr	r0, [r4, #16]
 801ca7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801ca80:	f104 0314 	add.w	r3, r4, #20
 801ca84:	f019 091f 	ands.w	r9, r9, #31
 801ca88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801ca8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801ca90:	d02f      	beq.n	801caf2 <__lshift+0xc6>
 801ca92:	f1c9 0e20 	rsb	lr, r9, #32
 801ca96:	468a      	mov	sl, r1
 801ca98:	f04f 0c00 	mov.w	ip, #0
 801ca9c:	681a      	ldr	r2, [r3, #0]
 801ca9e:	fa02 f209 	lsl.w	r2, r2, r9
 801caa2:	ea42 020c 	orr.w	r2, r2, ip
 801caa6:	f84a 2b04 	str.w	r2, [sl], #4
 801caaa:	f853 2b04 	ldr.w	r2, [r3], #4
 801caae:	4298      	cmp	r0, r3
 801cab0:	fa22 fc0e 	lsr.w	ip, r2, lr
 801cab4:	d8f2      	bhi.n	801ca9c <__lshift+0x70>
 801cab6:	1b03      	subs	r3, r0, r4
 801cab8:	3b15      	subs	r3, #21
 801caba:	f023 0303 	bic.w	r3, r3, #3
 801cabe:	3304      	adds	r3, #4
 801cac0:	f104 0215 	add.w	r2, r4, #21
 801cac4:	4290      	cmp	r0, r2
 801cac6:	bf38      	it	cc
 801cac8:	2304      	movcc	r3, #4
 801caca:	f841 c003 	str.w	ip, [r1, r3]
 801cace:	f1bc 0f00 	cmp.w	ip, #0
 801cad2:	d001      	beq.n	801cad8 <__lshift+0xac>
 801cad4:	f108 0602 	add.w	r6, r8, #2
 801cad8:	3e01      	subs	r6, #1
 801cada:	4638      	mov	r0, r7
 801cadc:	612e      	str	r6, [r5, #16]
 801cade:	4621      	mov	r1, r4
 801cae0:	f7ff fd88 	bl	801c5f4 <_Bfree>
 801cae4:	4628      	mov	r0, r5
 801cae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801caea:	f842 0f04 	str.w	r0, [r2, #4]!
 801caee:	3301      	adds	r3, #1
 801caf0:	e7c1      	b.n	801ca76 <__lshift+0x4a>
 801caf2:	3904      	subs	r1, #4
 801caf4:	f853 2b04 	ldr.w	r2, [r3], #4
 801caf8:	f841 2f04 	str.w	r2, [r1, #4]!
 801cafc:	4298      	cmp	r0, r3
 801cafe:	d8f9      	bhi.n	801caf4 <__lshift+0xc8>
 801cb00:	e7ea      	b.n	801cad8 <__lshift+0xac>
 801cb02:	bf00      	nop
 801cb04:	0801e6c0 	.word	0x0801e6c0
 801cb08:	0801e74c 	.word	0x0801e74c

0801cb0c <__mcmp>:
 801cb0c:	b530      	push	{r4, r5, lr}
 801cb0e:	6902      	ldr	r2, [r0, #16]
 801cb10:	690c      	ldr	r4, [r1, #16]
 801cb12:	1b12      	subs	r2, r2, r4
 801cb14:	d10e      	bne.n	801cb34 <__mcmp+0x28>
 801cb16:	f100 0314 	add.w	r3, r0, #20
 801cb1a:	3114      	adds	r1, #20
 801cb1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801cb20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801cb24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801cb28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801cb2c:	42a5      	cmp	r5, r4
 801cb2e:	d003      	beq.n	801cb38 <__mcmp+0x2c>
 801cb30:	d305      	bcc.n	801cb3e <__mcmp+0x32>
 801cb32:	2201      	movs	r2, #1
 801cb34:	4610      	mov	r0, r2
 801cb36:	bd30      	pop	{r4, r5, pc}
 801cb38:	4283      	cmp	r3, r0
 801cb3a:	d3f3      	bcc.n	801cb24 <__mcmp+0x18>
 801cb3c:	e7fa      	b.n	801cb34 <__mcmp+0x28>
 801cb3e:	f04f 32ff 	mov.w	r2, #4294967295
 801cb42:	e7f7      	b.n	801cb34 <__mcmp+0x28>

0801cb44 <__mdiff>:
 801cb44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb48:	460c      	mov	r4, r1
 801cb4a:	4606      	mov	r6, r0
 801cb4c:	4611      	mov	r1, r2
 801cb4e:	4620      	mov	r0, r4
 801cb50:	4690      	mov	r8, r2
 801cb52:	f7ff ffdb 	bl	801cb0c <__mcmp>
 801cb56:	1e05      	subs	r5, r0, #0
 801cb58:	d110      	bne.n	801cb7c <__mdiff+0x38>
 801cb5a:	4629      	mov	r1, r5
 801cb5c:	4630      	mov	r0, r6
 801cb5e:	f7ff fd09 	bl	801c574 <_Balloc>
 801cb62:	b930      	cbnz	r0, 801cb72 <__mdiff+0x2e>
 801cb64:	4b3a      	ldr	r3, [pc, #232]	; (801cc50 <__mdiff+0x10c>)
 801cb66:	4602      	mov	r2, r0
 801cb68:	f240 2132 	movw	r1, #562	; 0x232
 801cb6c:	4839      	ldr	r0, [pc, #228]	; (801cc54 <__mdiff+0x110>)
 801cb6e:	f000 fc5d 	bl	801d42c <__assert_func>
 801cb72:	2301      	movs	r3, #1
 801cb74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801cb78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cb7c:	bfa4      	itt	ge
 801cb7e:	4643      	movge	r3, r8
 801cb80:	46a0      	movge	r8, r4
 801cb82:	4630      	mov	r0, r6
 801cb84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801cb88:	bfa6      	itte	ge
 801cb8a:	461c      	movge	r4, r3
 801cb8c:	2500      	movge	r5, #0
 801cb8e:	2501      	movlt	r5, #1
 801cb90:	f7ff fcf0 	bl	801c574 <_Balloc>
 801cb94:	b920      	cbnz	r0, 801cba0 <__mdiff+0x5c>
 801cb96:	4b2e      	ldr	r3, [pc, #184]	; (801cc50 <__mdiff+0x10c>)
 801cb98:	4602      	mov	r2, r0
 801cb9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801cb9e:	e7e5      	b.n	801cb6c <__mdiff+0x28>
 801cba0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801cba4:	6926      	ldr	r6, [r4, #16]
 801cba6:	60c5      	str	r5, [r0, #12]
 801cba8:	f104 0914 	add.w	r9, r4, #20
 801cbac:	f108 0514 	add.w	r5, r8, #20
 801cbb0:	f100 0e14 	add.w	lr, r0, #20
 801cbb4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801cbb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801cbbc:	f108 0210 	add.w	r2, r8, #16
 801cbc0:	46f2      	mov	sl, lr
 801cbc2:	2100      	movs	r1, #0
 801cbc4:	f859 3b04 	ldr.w	r3, [r9], #4
 801cbc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801cbcc:	fa1f f883 	uxth.w	r8, r3
 801cbd0:	fa11 f18b 	uxtah	r1, r1, fp
 801cbd4:	0c1b      	lsrs	r3, r3, #16
 801cbd6:	eba1 0808 	sub.w	r8, r1, r8
 801cbda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801cbde:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801cbe2:	fa1f f888 	uxth.w	r8, r8
 801cbe6:	1419      	asrs	r1, r3, #16
 801cbe8:	454e      	cmp	r6, r9
 801cbea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801cbee:	f84a 3b04 	str.w	r3, [sl], #4
 801cbf2:	d8e7      	bhi.n	801cbc4 <__mdiff+0x80>
 801cbf4:	1b33      	subs	r3, r6, r4
 801cbf6:	3b15      	subs	r3, #21
 801cbf8:	f023 0303 	bic.w	r3, r3, #3
 801cbfc:	3304      	adds	r3, #4
 801cbfe:	3415      	adds	r4, #21
 801cc00:	42a6      	cmp	r6, r4
 801cc02:	bf38      	it	cc
 801cc04:	2304      	movcc	r3, #4
 801cc06:	441d      	add	r5, r3
 801cc08:	4473      	add	r3, lr
 801cc0a:	469e      	mov	lr, r3
 801cc0c:	462e      	mov	r6, r5
 801cc0e:	4566      	cmp	r6, ip
 801cc10:	d30e      	bcc.n	801cc30 <__mdiff+0xec>
 801cc12:	f10c 0203 	add.w	r2, ip, #3
 801cc16:	1b52      	subs	r2, r2, r5
 801cc18:	f022 0203 	bic.w	r2, r2, #3
 801cc1c:	3d03      	subs	r5, #3
 801cc1e:	45ac      	cmp	ip, r5
 801cc20:	bf38      	it	cc
 801cc22:	2200      	movcc	r2, #0
 801cc24:	441a      	add	r2, r3
 801cc26:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801cc2a:	b17b      	cbz	r3, 801cc4c <__mdiff+0x108>
 801cc2c:	6107      	str	r7, [r0, #16]
 801cc2e:	e7a3      	b.n	801cb78 <__mdiff+0x34>
 801cc30:	f856 8b04 	ldr.w	r8, [r6], #4
 801cc34:	fa11 f288 	uxtah	r2, r1, r8
 801cc38:	1414      	asrs	r4, r2, #16
 801cc3a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801cc3e:	b292      	uxth	r2, r2
 801cc40:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801cc44:	f84e 2b04 	str.w	r2, [lr], #4
 801cc48:	1421      	asrs	r1, r4, #16
 801cc4a:	e7e0      	b.n	801cc0e <__mdiff+0xca>
 801cc4c:	3f01      	subs	r7, #1
 801cc4e:	e7ea      	b.n	801cc26 <__mdiff+0xe2>
 801cc50:	0801e6c0 	.word	0x0801e6c0
 801cc54:	0801e74c 	.word	0x0801e74c

0801cc58 <__ulp>:
 801cc58:	b082      	sub	sp, #8
 801cc5a:	ed8d 0b00 	vstr	d0, [sp]
 801cc5e:	9b01      	ldr	r3, [sp, #4]
 801cc60:	4912      	ldr	r1, [pc, #72]	; (801ccac <__ulp+0x54>)
 801cc62:	4019      	ands	r1, r3
 801cc64:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 801cc68:	2900      	cmp	r1, #0
 801cc6a:	dd05      	ble.n	801cc78 <__ulp+0x20>
 801cc6c:	2200      	movs	r2, #0
 801cc6e:	460b      	mov	r3, r1
 801cc70:	ec43 2b10 	vmov	d0, r2, r3
 801cc74:	b002      	add	sp, #8
 801cc76:	4770      	bx	lr
 801cc78:	4249      	negs	r1, r1
 801cc7a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 801cc7e:	ea4f 5021 	mov.w	r0, r1, asr #20
 801cc82:	f04f 0200 	mov.w	r2, #0
 801cc86:	f04f 0300 	mov.w	r3, #0
 801cc8a:	da04      	bge.n	801cc96 <__ulp+0x3e>
 801cc8c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 801cc90:	fa41 f300 	asr.w	r3, r1, r0
 801cc94:	e7ec      	b.n	801cc70 <__ulp+0x18>
 801cc96:	f1a0 0114 	sub.w	r1, r0, #20
 801cc9a:	291e      	cmp	r1, #30
 801cc9c:	bfda      	itte	le
 801cc9e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801cca2:	fa20 f101 	lsrle.w	r1, r0, r1
 801cca6:	2101      	movgt	r1, #1
 801cca8:	460a      	mov	r2, r1
 801ccaa:	e7e1      	b.n	801cc70 <__ulp+0x18>
 801ccac:	7ff00000 	.word	0x7ff00000

0801ccb0 <__b2d>:
 801ccb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ccb2:	6905      	ldr	r5, [r0, #16]
 801ccb4:	f100 0714 	add.w	r7, r0, #20
 801ccb8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 801ccbc:	1f2e      	subs	r6, r5, #4
 801ccbe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801ccc2:	4620      	mov	r0, r4
 801ccc4:	f7ff fd48 	bl	801c758 <__hi0bits>
 801ccc8:	f1c0 0320 	rsb	r3, r0, #32
 801cccc:	280a      	cmp	r0, #10
 801ccce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 801cd4c <__b2d+0x9c>
 801ccd2:	600b      	str	r3, [r1, #0]
 801ccd4:	dc14      	bgt.n	801cd00 <__b2d+0x50>
 801ccd6:	f1c0 0e0b 	rsb	lr, r0, #11
 801ccda:	fa24 f10e 	lsr.w	r1, r4, lr
 801ccde:	42b7      	cmp	r7, r6
 801cce0:	ea41 030c 	orr.w	r3, r1, ip
 801cce4:	bf34      	ite	cc
 801cce6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801ccea:	2100      	movcs	r1, #0
 801ccec:	3015      	adds	r0, #21
 801ccee:	fa04 f000 	lsl.w	r0, r4, r0
 801ccf2:	fa21 f10e 	lsr.w	r1, r1, lr
 801ccf6:	ea40 0201 	orr.w	r2, r0, r1
 801ccfa:	ec43 2b10 	vmov	d0, r2, r3
 801ccfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cd00:	42b7      	cmp	r7, r6
 801cd02:	bf3a      	itte	cc
 801cd04:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801cd08:	f1a5 0608 	subcc.w	r6, r5, #8
 801cd0c:	2100      	movcs	r1, #0
 801cd0e:	380b      	subs	r0, #11
 801cd10:	d017      	beq.n	801cd42 <__b2d+0x92>
 801cd12:	f1c0 0c20 	rsb	ip, r0, #32
 801cd16:	fa04 f500 	lsl.w	r5, r4, r0
 801cd1a:	42be      	cmp	r6, r7
 801cd1c:	fa21 f40c 	lsr.w	r4, r1, ip
 801cd20:	ea45 0504 	orr.w	r5, r5, r4
 801cd24:	bf8c      	ite	hi
 801cd26:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801cd2a:	2400      	movls	r4, #0
 801cd2c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801cd30:	fa01 f000 	lsl.w	r0, r1, r0
 801cd34:	fa24 f40c 	lsr.w	r4, r4, ip
 801cd38:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801cd3c:	ea40 0204 	orr.w	r2, r0, r4
 801cd40:	e7db      	b.n	801ccfa <__b2d+0x4a>
 801cd42:	ea44 030c 	orr.w	r3, r4, ip
 801cd46:	460a      	mov	r2, r1
 801cd48:	e7d7      	b.n	801ccfa <__b2d+0x4a>
 801cd4a:	bf00      	nop
 801cd4c:	3ff00000 	.word	0x3ff00000

0801cd50 <__d2b>:
 801cd50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cd54:	4689      	mov	r9, r1
 801cd56:	2101      	movs	r1, #1
 801cd58:	ec57 6b10 	vmov	r6, r7, d0
 801cd5c:	4690      	mov	r8, r2
 801cd5e:	f7ff fc09 	bl	801c574 <_Balloc>
 801cd62:	4604      	mov	r4, r0
 801cd64:	b930      	cbnz	r0, 801cd74 <__d2b+0x24>
 801cd66:	4602      	mov	r2, r0
 801cd68:	4b25      	ldr	r3, [pc, #148]	; (801ce00 <__d2b+0xb0>)
 801cd6a:	4826      	ldr	r0, [pc, #152]	; (801ce04 <__d2b+0xb4>)
 801cd6c:	f240 310a 	movw	r1, #778	; 0x30a
 801cd70:	f000 fb5c 	bl	801d42c <__assert_func>
 801cd74:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801cd78:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801cd7c:	bb35      	cbnz	r5, 801cdcc <__d2b+0x7c>
 801cd7e:	2e00      	cmp	r6, #0
 801cd80:	9301      	str	r3, [sp, #4]
 801cd82:	d028      	beq.n	801cdd6 <__d2b+0x86>
 801cd84:	4668      	mov	r0, sp
 801cd86:	9600      	str	r6, [sp, #0]
 801cd88:	f7ff fd06 	bl	801c798 <__lo0bits>
 801cd8c:	9900      	ldr	r1, [sp, #0]
 801cd8e:	b300      	cbz	r0, 801cdd2 <__d2b+0x82>
 801cd90:	9a01      	ldr	r2, [sp, #4]
 801cd92:	f1c0 0320 	rsb	r3, r0, #32
 801cd96:	fa02 f303 	lsl.w	r3, r2, r3
 801cd9a:	430b      	orrs	r3, r1
 801cd9c:	40c2      	lsrs	r2, r0
 801cd9e:	6163      	str	r3, [r4, #20]
 801cda0:	9201      	str	r2, [sp, #4]
 801cda2:	9b01      	ldr	r3, [sp, #4]
 801cda4:	61a3      	str	r3, [r4, #24]
 801cda6:	2b00      	cmp	r3, #0
 801cda8:	bf14      	ite	ne
 801cdaa:	2202      	movne	r2, #2
 801cdac:	2201      	moveq	r2, #1
 801cdae:	6122      	str	r2, [r4, #16]
 801cdb0:	b1d5      	cbz	r5, 801cde8 <__d2b+0x98>
 801cdb2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801cdb6:	4405      	add	r5, r0
 801cdb8:	f8c9 5000 	str.w	r5, [r9]
 801cdbc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801cdc0:	f8c8 0000 	str.w	r0, [r8]
 801cdc4:	4620      	mov	r0, r4
 801cdc6:	b003      	add	sp, #12
 801cdc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cdcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cdd0:	e7d5      	b.n	801cd7e <__d2b+0x2e>
 801cdd2:	6161      	str	r1, [r4, #20]
 801cdd4:	e7e5      	b.n	801cda2 <__d2b+0x52>
 801cdd6:	a801      	add	r0, sp, #4
 801cdd8:	f7ff fcde 	bl	801c798 <__lo0bits>
 801cddc:	9b01      	ldr	r3, [sp, #4]
 801cdde:	6163      	str	r3, [r4, #20]
 801cde0:	2201      	movs	r2, #1
 801cde2:	6122      	str	r2, [r4, #16]
 801cde4:	3020      	adds	r0, #32
 801cde6:	e7e3      	b.n	801cdb0 <__d2b+0x60>
 801cde8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801cdec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801cdf0:	f8c9 0000 	str.w	r0, [r9]
 801cdf4:	6918      	ldr	r0, [r3, #16]
 801cdf6:	f7ff fcaf 	bl	801c758 <__hi0bits>
 801cdfa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801cdfe:	e7df      	b.n	801cdc0 <__d2b+0x70>
 801ce00:	0801e6c0 	.word	0x0801e6c0
 801ce04:	0801e74c 	.word	0x0801e74c

0801ce08 <__ratio>:
 801ce08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce0c:	4688      	mov	r8, r1
 801ce0e:	4669      	mov	r1, sp
 801ce10:	4681      	mov	r9, r0
 801ce12:	f7ff ff4d 	bl	801ccb0 <__b2d>
 801ce16:	a901      	add	r1, sp, #4
 801ce18:	4640      	mov	r0, r8
 801ce1a:	ec55 4b10 	vmov	r4, r5, d0
 801ce1e:	ee10 aa10 	vmov	sl, s0
 801ce22:	f7ff ff45 	bl	801ccb0 <__b2d>
 801ce26:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801ce2a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801ce2e:	1a59      	subs	r1, r3, r1
 801ce30:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ce34:	1ad3      	subs	r3, r2, r3
 801ce36:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801ce3a:	ec57 6b10 	vmov	r6, r7, d0
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	bfd6      	itet	le
 801ce42:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801ce46:	462a      	movgt	r2, r5
 801ce48:	463a      	movle	r2, r7
 801ce4a:	46ab      	mov	fp, r5
 801ce4c:	bfd6      	itet	le
 801ce4e:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 801ce52:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 801ce56:	ee00 3a90 	vmovle	s1, r3
 801ce5a:	ec4b ab17 	vmov	d7, sl, fp
 801ce5e:	ee87 0b00 	vdiv.f64	d0, d7, d0
 801ce62:	b003      	add	sp, #12
 801ce64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ce68 <__copybits>:
 801ce68:	3901      	subs	r1, #1
 801ce6a:	b570      	push	{r4, r5, r6, lr}
 801ce6c:	1149      	asrs	r1, r1, #5
 801ce6e:	6914      	ldr	r4, [r2, #16]
 801ce70:	3101      	adds	r1, #1
 801ce72:	f102 0314 	add.w	r3, r2, #20
 801ce76:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801ce7a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801ce7e:	1f05      	subs	r5, r0, #4
 801ce80:	42a3      	cmp	r3, r4
 801ce82:	d30c      	bcc.n	801ce9e <__copybits+0x36>
 801ce84:	1aa3      	subs	r3, r4, r2
 801ce86:	3b11      	subs	r3, #17
 801ce88:	f023 0303 	bic.w	r3, r3, #3
 801ce8c:	3211      	adds	r2, #17
 801ce8e:	42a2      	cmp	r2, r4
 801ce90:	bf88      	it	hi
 801ce92:	2300      	movhi	r3, #0
 801ce94:	4418      	add	r0, r3
 801ce96:	2300      	movs	r3, #0
 801ce98:	4288      	cmp	r0, r1
 801ce9a:	d305      	bcc.n	801cea8 <__copybits+0x40>
 801ce9c:	bd70      	pop	{r4, r5, r6, pc}
 801ce9e:	f853 6b04 	ldr.w	r6, [r3], #4
 801cea2:	f845 6f04 	str.w	r6, [r5, #4]!
 801cea6:	e7eb      	b.n	801ce80 <__copybits+0x18>
 801cea8:	f840 3b04 	str.w	r3, [r0], #4
 801ceac:	e7f4      	b.n	801ce98 <__copybits+0x30>

0801ceae <__any_on>:
 801ceae:	f100 0214 	add.w	r2, r0, #20
 801ceb2:	6900      	ldr	r0, [r0, #16]
 801ceb4:	114b      	asrs	r3, r1, #5
 801ceb6:	4298      	cmp	r0, r3
 801ceb8:	b510      	push	{r4, lr}
 801ceba:	db11      	blt.n	801cee0 <__any_on+0x32>
 801cebc:	dd0a      	ble.n	801ced4 <__any_on+0x26>
 801cebe:	f011 011f 	ands.w	r1, r1, #31
 801cec2:	d007      	beq.n	801ced4 <__any_on+0x26>
 801cec4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801cec8:	fa24 f001 	lsr.w	r0, r4, r1
 801cecc:	fa00 f101 	lsl.w	r1, r0, r1
 801ced0:	428c      	cmp	r4, r1
 801ced2:	d10b      	bne.n	801ceec <__any_on+0x3e>
 801ced4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801ced8:	4293      	cmp	r3, r2
 801ceda:	d803      	bhi.n	801cee4 <__any_on+0x36>
 801cedc:	2000      	movs	r0, #0
 801cede:	bd10      	pop	{r4, pc}
 801cee0:	4603      	mov	r3, r0
 801cee2:	e7f7      	b.n	801ced4 <__any_on+0x26>
 801cee4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801cee8:	2900      	cmp	r1, #0
 801ceea:	d0f5      	beq.n	801ced8 <__any_on+0x2a>
 801ceec:	2001      	movs	r0, #1
 801ceee:	e7f6      	b.n	801cede <__any_on+0x30>

0801cef0 <_calloc_r>:
 801cef0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cef2:	fba1 2402 	umull	r2, r4, r1, r2
 801cef6:	b94c      	cbnz	r4, 801cf0c <_calloc_r+0x1c>
 801cef8:	4611      	mov	r1, r2
 801cefa:	9201      	str	r2, [sp, #4]
 801cefc:	f000 f87a 	bl	801cff4 <_malloc_r>
 801cf00:	9a01      	ldr	r2, [sp, #4]
 801cf02:	4605      	mov	r5, r0
 801cf04:	b930      	cbnz	r0, 801cf14 <_calloc_r+0x24>
 801cf06:	4628      	mov	r0, r5
 801cf08:	b003      	add	sp, #12
 801cf0a:	bd30      	pop	{r4, r5, pc}
 801cf0c:	220c      	movs	r2, #12
 801cf0e:	6002      	str	r2, [r0, #0]
 801cf10:	2500      	movs	r5, #0
 801cf12:	e7f8      	b.n	801cf06 <_calloc_r+0x16>
 801cf14:	4621      	mov	r1, r4
 801cf16:	f7fc fc5b 	bl	80197d0 <memset>
 801cf1a:	e7f4      	b.n	801cf06 <_calloc_r+0x16>

0801cf1c <_free_r>:
 801cf1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cf1e:	2900      	cmp	r1, #0
 801cf20:	d044      	beq.n	801cfac <_free_r+0x90>
 801cf22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cf26:	9001      	str	r0, [sp, #4]
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	f1a1 0404 	sub.w	r4, r1, #4
 801cf2e:	bfb8      	it	lt
 801cf30:	18e4      	addlt	r4, r4, r3
 801cf32:	f000 fc7f 	bl	801d834 <__malloc_lock>
 801cf36:	4a1e      	ldr	r2, [pc, #120]	; (801cfb0 <_free_r+0x94>)
 801cf38:	9801      	ldr	r0, [sp, #4]
 801cf3a:	6813      	ldr	r3, [r2, #0]
 801cf3c:	b933      	cbnz	r3, 801cf4c <_free_r+0x30>
 801cf3e:	6063      	str	r3, [r4, #4]
 801cf40:	6014      	str	r4, [r2, #0]
 801cf42:	b003      	add	sp, #12
 801cf44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cf48:	f000 bc7a 	b.w	801d840 <__malloc_unlock>
 801cf4c:	42a3      	cmp	r3, r4
 801cf4e:	d908      	bls.n	801cf62 <_free_r+0x46>
 801cf50:	6825      	ldr	r5, [r4, #0]
 801cf52:	1961      	adds	r1, r4, r5
 801cf54:	428b      	cmp	r3, r1
 801cf56:	bf01      	itttt	eq
 801cf58:	6819      	ldreq	r1, [r3, #0]
 801cf5a:	685b      	ldreq	r3, [r3, #4]
 801cf5c:	1949      	addeq	r1, r1, r5
 801cf5e:	6021      	streq	r1, [r4, #0]
 801cf60:	e7ed      	b.n	801cf3e <_free_r+0x22>
 801cf62:	461a      	mov	r2, r3
 801cf64:	685b      	ldr	r3, [r3, #4]
 801cf66:	b10b      	cbz	r3, 801cf6c <_free_r+0x50>
 801cf68:	42a3      	cmp	r3, r4
 801cf6a:	d9fa      	bls.n	801cf62 <_free_r+0x46>
 801cf6c:	6811      	ldr	r1, [r2, #0]
 801cf6e:	1855      	adds	r5, r2, r1
 801cf70:	42a5      	cmp	r5, r4
 801cf72:	d10b      	bne.n	801cf8c <_free_r+0x70>
 801cf74:	6824      	ldr	r4, [r4, #0]
 801cf76:	4421      	add	r1, r4
 801cf78:	1854      	adds	r4, r2, r1
 801cf7a:	42a3      	cmp	r3, r4
 801cf7c:	6011      	str	r1, [r2, #0]
 801cf7e:	d1e0      	bne.n	801cf42 <_free_r+0x26>
 801cf80:	681c      	ldr	r4, [r3, #0]
 801cf82:	685b      	ldr	r3, [r3, #4]
 801cf84:	6053      	str	r3, [r2, #4]
 801cf86:	4421      	add	r1, r4
 801cf88:	6011      	str	r1, [r2, #0]
 801cf8a:	e7da      	b.n	801cf42 <_free_r+0x26>
 801cf8c:	d902      	bls.n	801cf94 <_free_r+0x78>
 801cf8e:	230c      	movs	r3, #12
 801cf90:	6003      	str	r3, [r0, #0]
 801cf92:	e7d6      	b.n	801cf42 <_free_r+0x26>
 801cf94:	6825      	ldr	r5, [r4, #0]
 801cf96:	1961      	adds	r1, r4, r5
 801cf98:	428b      	cmp	r3, r1
 801cf9a:	bf04      	itt	eq
 801cf9c:	6819      	ldreq	r1, [r3, #0]
 801cf9e:	685b      	ldreq	r3, [r3, #4]
 801cfa0:	6063      	str	r3, [r4, #4]
 801cfa2:	bf04      	itt	eq
 801cfa4:	1949      	addeq	r1, r1, r5
 801cfa6:	6021      	streq	r1, [r4, #0]
 801cfa8:	6054      	str	r4, [r2, #4]
 801cfaa:	e7ca      	b.n	801cf42 <_free_r+0x26>
 801cfac:	b003      	add	sp, #12
 801cfae:	bd30      	pop	{r4, r5, pc}
 801cfb0:	240034f0 	.word	0x240034f0

0801cfb4 <sbrk_aligned>:
 801cfb4:	b570      	push	{r4, r5, r6, lr}
 801cfb6:	4e0e      	ldr	r6, [pc, #56]	; (801cff0 <sbrk_aligned+0x3c>)
 801cfb8:	460c      	mov	r4, r1
 801cfba:	6831      	ldr	r1, [r6, #0]
 801cfbc:	4605      	mov	r5, r0
 801cfbe:	b911      	cbnz	r1, 801cfc6 <sbrk_aligned+0x12>
 801cfc0:	f000 fa02 	bl	801d3c8 <_sbrk_r>
 801cfc4:	6030      	str	r0, [r6, #0]
 801cfc6:	4621      	mov	r1, r4
 801cfc8:	4628      	mov	r0, r5
 801cfca:	f000 f9fd 	bl	801d3c8 <_sbrk_r>
 801cfce:	1c43      	adds	r3, r0, #1
 801cfd0:	d00a      	beq.n	801cfe8 <sbrk_aligned+0x34>
 801cfd2:	1cc4      	adds	r4, r0, #3
 801cfd4:	f024 0403 	bic.w	r4, r4, #3
 801cfd8:	42a0      	cmp	r0, r4
 801cfda:	d007      	beq.n	801cfec <sbrk_aligned+0x38>
 801cfdc:	1a21      	subs	r1, r4, r0
 801cfde:	4628      	mov	r0, r5
 801cfe0:	f000 f9f2 	bl	801d3c8 <_sbrk_r>
 801cfe4:	3001      	adds	r0, #1
 801cfe6:	d101      	bne.n	801cfec <sbrk_aligned+0x38>
 801cfe8:	f04f 34ff 	mov.w	r4, #4294967295
 801cfec:	4620      	mov	r0, r4
 801cfee:	bd70      	pop	{r4, r5, r6, pc}
 801cff0:	240034f4 	.word	0x240034f4

0801cff4 <_malloc_r>:
 801cff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cff8:	1ccd      	adds	r5, r1, #3
 801cffa:	f025 0503 	bic.w	r5, r5, #3
 801cffe:	3508      	adds	r5, #8
 801d000:	2d0c      	cmp	r5, #12
 801d002:	bf38      	it	cc
 801d004:	250c      	movcc	r5, #12
 801d006:	2d00      	cmp	r5, #0
 801d008:	4607      	mov	r7, r0
 801d00a:	db01      	blt.n	801d010 <_malloc_r+0x1c>
 801d00c:	42a9      	cmp	r1, r5
 801d00e:	d905      	bls.n	801d01c <_malloc_r+0x28>
 801d010:	230c      	movs	r3, #12
 801d012:	603b      	str	r3, [r7, #0]
 801d014:	2600      	movs	r6, #0
 801d016:	4630      	mov	r0, r6
 801d018:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d01c:	4e2e      	ldr	r6, [pc, #184]	; (801d0d8 <_malloc_r+0xe4>)
 801d01e:	f000 fc09 	bl	801d834 <__malloc_lock>
 801d022:	6833      	ldr	r3, [r6, #0]
 801d024:	461c      	mov	r4, r3
 801d026:	bb34      	cbnz	r4, 801d076 <_malloc_r+0x82>
 801d028:	4629      	mov	r1, r5
 801d02a:	4638      	mov	r0, r7
 801d02c:	f7ff ffc2 	bl	801cfb4 <sbrk_aligned>
 801d030:	1c43      	adds	r3, r0, #1
 801d032:	4604      	mov	r4, r0
 801d034:	d14d      	bne.n	801d0d2 <_malloc_r+0xde>
 801d036:	6834      	ldr	r4, [r6, #0]
 801d038:	4626      	mov	r6, r4
 801d03a:	2e00      	cmp	r6, #0
 801d03c:	d140      	bne.n	801d0c0 <_malloc_r+0xcc>
 801d03e:	6823      	ldr	r3, [r4, #0]
 801d040:	4631      	mov	r1, r6
 801d042:	4638      	mov	r0, r7
 801d044:	eb04 0803 	add.w	r8, r4, r3
 801d048:	f000 f9be 	bl	801d3c8 <_sbrk_r>
 801d04c:	4580      	cmp	r8, r0
 801d04e:	d13a      	bne.n	801d0c6 <_malloc_r+0xd2>
 801d050:	6821      	ldr	r1, [r4, #0]
 801d052:	3503      	adds	r5, #3
 801d054:	1a6d      	subs	r5, r5, r1
 801d056:	f025 0503 	bic.w	r5, r5, #3
 801d05a:	3508      	adds	r5, #8
 801d05c:	2d0c      	cmp	r5, #12
 801d05e:	bf38      	it	cc
 801d060:	250c      	movcc	r5, #12
 801d062:	4629      	mov	r1, r5
 801d064:	4638      	mov	r0, r7
 801d066:	f7ff ffa5 	bl	801cfb4 <sbrk_aligned>
 801d06a:	3001      	adds	r0, #1
 801d06c:	d02b      	beq.n	801d0c6 <_malloc_r+0xd2>
 801d06e:	6823      	ldr	r3, [r4, #0]
 801d070:	442b      	add	r3, r5
 801d072:	6023      	str	r3, [r4, #0]
 801d074:	e00e      	b.n	801d094 <_malloc_r+0xa0>
 801d076:	6822      	ldr	r2, [r4, #0]
 801d078:	1b52      	subs	r2, r2, r5
 801d07a:	d41e      	bmi.n	801d0ba <_malloc_r+0xc6>
 801d07c:	2a0b      	cmp	r2, #11
 801d07e:	d916      	bls.n	801d0ae <_malloc_r+0xba>
 801d080:	1961      	adds	r1, r4, r5
 801d082:	42a3      	cmp	r3, r4
 801d084:	6025      	str	r5, [r4, #0]
 801d086:	bf18      	it	ne
 801d088:	6059      	strne	r1, [r3, #4]
 801d08a:	6863      	ldr	r3, [r4, #4]
 801d08c:	bf08      	it	eq
 801d08e:	6031      	streq	r1, [r6, #0]
 801d090:	5162      	str	r2, [r4, r5]
 801d092:	604b      	str	r3, [r1, #4]
 801d094:	4638      	mov	r0, r7
 801d096:	f104 060b 	add.w	r6, r4, #11
 801d09a:	f000 fbd1 	bl	801d840 <__malloc_unlock>
 801d09e:	f026 0607 	bic.w	r6, r6, #7
 801d0a2:	1d23      	adds	r3, r4, #4
 801d0a4:	1af2      	subs	r2, r6, r3
 801d0a6:	d0b6      	beq.n	801d016 <_malloc_r+0x22>
 801d0a8:	1b9b      	subs	r3, r3, r6
 801d0aa:	50a3      	str	r3, [r4, r2]
 801d0ac:	e7b3      	b.n	801d016 <_malloc_r+0x22>
 801d0ae:	6862      	ldr	r2, [r4, #4]
 801d0b0:	42a3      	cmp	r3, r4
 801d0b2:	bf0c      	ite	eq
 801d0b4:	6032      	streq	r2, [r6, #0]
 801d0b6:	605a      	strne	r2, [r3, #4]
 801d0b8:	e7ec      	b.n	801d094 <_malloc_r+0xa0>
 801d0ba:	4623      	mov	r3, r4
 801d0bc:	6864      	ldr	r4, [r4, #4]
 801d0be:	e7b2      	b.n	801d026 <_malloc_r+0x32>
 801d0c0:	4634      	mov	r4, r6
 801d0c2:	6876      	ldr	r6, [r6, #4]
 801d0c4:	e7b9      	b.n	801d03a <_malloc_r+0x46>
 801d0c6:	230c      	movs	r3, #12
 801d0c8:	603b      	str	r3, [r7, #0]
 801d0ca:	4638      	mov	r0, r7
 801d0cc:	f000 fbb8 	bl	801d840 <__malloc_unlock>
 801d0d0:	e7a1      	b.n	801d016 <_malloc_r+0x22>
 801d0d2:	6025      	str	r5, [r4, #0]
 801d0d4:	e7de      	b.n	801d094 <_malloc_r+0xa0>
 801d0d6:	bf00      	nop
 801d0d8:	240034f0 	.word	0x240034f0

0801d0dc <__ssputs_r>:
 801d0dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d0e0:	688e      	ldr	r6, [r1, #8]
 801d0e2:	429e      	cmp	r6, r3
 801d0e4:	4682      	mov	sl, r0
 801d0e6:	460c      	mov	r4, r1
 801d0e8:	4690      	mov	r8, r2
 801d0ea:	461f      	mov	r7, r3
 801d0ec:	d838      	bhi.n	801d160 <__ssputs_r+0x84>
 801d0ee:	898a      	ldrh	r2, [r1, #12]
 801d0f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d0f4:	d032      	beq.n	801d15c <__ssputs_r+0x80>
 801d0f6:	6825      	ldr	r5, [r4, #0]
 801d0f8:	6909      	ldr	r1, [r1, #16]
 801d0fa:	eba5 0901 	sub.w	r9, r5, r1
 801d0fe:	6965      	ldr	r5, [r4, #20]
 801d100:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d104:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d108:	3301      	adds	r3, #1
 801d10a:	444b      	add	r3, r9
 801d10c:	106d      	asrs	r5, r5, #1
 801d10e:	429d      	cmp	r5, r3
 801d110:	bf38      	it	cc
 801d112:	461d      	movcc	r5, r3
 801d114:	0553      	lsls	r3, r2, #21
 801d116:	d531      	bpl.n	801d17c <__ssputs_r+0xa0>
 801d118:	4629      	mov	r1, r5
 801d11a:	f7ff ff6b 	bl	801cff4 <_malloc_r>
 801d11e:	4606      	mov	r6, r0
 801d120:	b950      	cbnz	r0, 801d138 <__ssputs_r+0x5c>
 801d122:	230c      	movs	r3, #12
 801d124:	f8ca 3000 	str.w	r3, [sl]
 801d128:	89a3      	ldrh	r3, [r4, #12]
 801d12a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d12e:	81a3      	strh	r3, [r4, #12]
 801d130:	f04f 30ff 	mov.w	r0, #4294967295
 801d134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d138:	6921      	ldr	r1, [r4, #16]
 801d13a:	464a      	mov	r2, r9
 801d13c:	f7fc fb3a 	bl	80197b4 <memcpy>
 801d140:	89a3      	ldrh	r3, [r4, #12]
 801d142:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d14a:	81a3      	strh	r3, [r4, #12]
 801d14c:	6126      	str	r6, [r4, #16]
 801d14e:	6165      	str	r5, [r4, #20]
 801d150:	444e      	add	r6, r9
 801d152:	eba5 0509 	sub.w	r5, r5, r9
 801d156:	6026      	str	r6, [r4, #0]
 801d158:	60a5      	str	r5, [r4, #8]
 801d15a:	463e      	mov	r6, r7
 801d15c:	42be      	cmp	r6, r7
 801d15e:	d900      	bls.n	801d162 <__ssputs_r+0x86>
 801d160:	463e      	mov	r6, r7
 801d162:	6820      	ldr	r0, [r4, #0]
 801d164:	4632      	mov	r2, r6
 801d166:	4641      	mov	r1, r8
 801d168:	f000 fb4a 	bl	801d800 <memmove>
 801d16c:	68a3      	ldr	r3, [r4, #8]
 801d16e:	1b9b      	subs	r3, r3, r6
 801d170:	60a3      	str	r3, [r4, #8]
 801d172:	6823      	ldr	r3, [r4, #0]
 801d174:	4433      	add	r3, r6
 801d176:	6023      	str	r3, [r4, #0]
 801d178:	2000      	movs	r0, #0
 801d17a:	e7db      	b.n	801d134 <__ssputs_r+0x58>
 801d17c:	462a      	mov	r2, r5
 801d17e:	f000 fb65 	bl	801d84c <_realloc_r>
 801d182:	4606      	mov	r6, r0
 801d184:	2800      	cmp	r0, #0
 801d186:	d1e1      	bne.n	801d14c <__ssputs_r+0x70>
 801d188:	6921      	ldr	r1, [r4, #16]
 801d18a:	4650      	mov	r0, sl
 801d18c:	f7ff fec6 	bl	801cf1c <_free_r>
 801d190:	e7c7      	b.n	801d122 <__ssputs_r+0x46>
	...

0801d194 <_svfiprintf_r>:
 801d194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d198:	4698      	mov	r8, r3
 801d19a:	898b      	ldrh	r3, [r1, #12]
 801d19c:	061b      	lsls	r3, r3, #24
 801d19e:	b09d      	sub	sp, #116	; 0x74
 801d1a0:	4607      	mov	r7, r0
 801d1a2:	460d      	mov	r5, r1
 801d1a4:	4614      	mov	r4, r2
 801d1a6:	d50e      	bpl.n	801d1c6 <_svfiprintf_r+0x32>
 801d1a8:	690b      	ldr	r3, [r1, #16]
 801d1aa:	b963      	cbnz	r3, 801d1c6 <_svfiprintf_r+0x32>
 801d1ac:	2140      	movs	r1, #64	; 0x40
 801d1ae:	f7ff ff21 	bl	801cff4 <_malloc_r>
 801d1b2:	6028      	str	r0, [r5, #0]
 801d1b4:	6128      	str	r0, [r5, #16]
 801d1b6:	b920      	cbnz	r0, 801d1c2 <_svfiprintf_r+0x2e>
 801d1b8:	230c      	movs	r3, #12
 801d1ba:	603b      	str	r3, [r7, #0]
 801d1bc:	f04f 30ff 	mov.w	r0, #4294967295
 801d1c0:	e0d1      	b.n	801d366 <_svfiprintf_r+0x1d2>
 801d1c2:	2340      	movs	r3, #64	; 0x40
 801d1c4:	616b      	str	r3, [r5, #20]
 801d1c6:	2300      	movs	r3, #0
 801d1c8:	9309      	str	r3, [sp, #36]	; 0x24
 801d1ca:	2320      	movs	r3, #32
 801d1cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d1d0:	f8cd 800c 	str.w	r8, [sp, #12]
 801d1d4:	2330      	movs	r3, #48	; 0x30
 801d1d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d380 <_svfiprintf_r+0x1ec>
 801d1da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d1de:	f04f 0901 	mov.w	r9, #1
 801d1e2:	4623      	mov	r3, r4
 801d1e4:	469a      	mov	sl, r3
 801d1e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d1ea:	b10a      	cbz	r2, 801d1f0 <_svfiprintf_r+0x5c>
 801d1ec:	2a25      	cmp	r2, #37	; 0x25
 801d1ee:	d1f9      	bne.n	801d1e4 <_svfiprintf_r+0x50>
 801d1f0:	ebba 0b04 	subs.w	fp, sl, r4
 801d1f4:	d00b      	beq.n	801d20e <_svfiprintf_r+0x7a>
 801d1f6:	465b      	mov	r3, fp
 801d1f8:	4622      	mov	r2, r4
 801d1fa:	4629      	mov	r1, r5
 801d1fc:	4638      	mov	r0, r7
 801d1fe:	f7ff ff6d 	bl	801d0dc <__ssputs_r>
 801d202:	3001      	adds	r0, #1
 801d204:	f000 80aa 	beq.w	801d35c <_svfiprintf_r+0x1c8>
 801d208:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d20a:	445a      	add	r2, fp
 801d20c:	9209      	str	r2, [sp, #36]	; 0x24
 801d20e:	f89a 3000 	ldrb.w	r3, [sl]
 801d212:	2b00      	cmp	r3, #0
 801d214:	f000 80a2 	beq.w	801d35c <_svfiprintf_r+0x1c8>
 801d218:	2300      	movs	r3, #0
 801d21a:	f04f 32ff 	mov.w	r2, #4294967295
 801d21e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d222:	f10a 0a01 	add.w	sl, sl, #1
 801d226:	9304      	str	r3, [sp, #16]
 801d228:	9307      	str	r3, [sp, #28]
 801d22a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d22e:	931a      	str	r3, [sp, #104]	; 0x68
 801d230:	4654      	mov	r4, sl
 801d232:	2205      	movs	r2, #5
 801d234:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d238:	4851      	ldr	r0, [pc, #324]	; (801d380 <_svfiprintf_r+0x1ec>)
 801d23a:	f7e3 f871 	bl	8000320 <memchr>
 801d23e:	9a04      	ldr	r2, [sp, #16]
 801d240:	b9d8      	cbnz	r0, 801d27a <_svfiprintf_r+0xe6>
 801d242:	06d0      	lsls	r0, r2, #27
 801d244:	bf44      	itt	mi
 801d246:	2320      	movmi	r3, #32
 801d248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d24c:	0711      	lsls	r1, r2, #28
 801d24e:	bf44      	itt	mi
 801d250:	232b      	movmi	r3, #43	; 0x2b
 801d252:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d256:	f89a 3000 	ldrb.w	r3, [sl]
 801d25a:	2b2a      	cmp	r3, #42	; 0x2a
 801d25c:	d015      	beq.n	801d28a <_svfiprintf_r+0xf6>
 801d25e:	9a07      	ldr	r2, [sp, #28]
 801d260:	4654      	mov	r4, sl
 801d262:	2000      	movs	r0, #0
 801d264:	f04f 0c0a 	mov.w	ip, #10
 801d268:	4621      	mov	r1, r4
 801d26a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d26e:	3b30      	subs	r3, #48	; 0x30
 801d270:	2b09      	cmp	r3, #9
 801d272:	d94e      	bls.n	801d312 <_svfiprintf_r+0x17e>
 801d274:	b1b0      	cbz	r0, 801d2a4 <_svfiprintf_r+0x110>
 801d276:	9207      	str	r2, [sp, #28]
 801d278:	e014      	b.n	801d2a4 <_svfiprintf_r+0x110>
 801d27a:	eba0 0308 	sub.w	r3, r0, r8
 801d27e:	fa09 f303 	lsl.w	r3, r9, r3
 801d282:	4313      	orrs	r3, r2
 801d284:	9304      	str	r3, [sp, #16]
 801d286:	46a2      	mov	sl, r4
 801d288:	e7d2      	b.n	801d230 <_svfiprintf_r+0x9c>
 801d28a:	9b03      	ldr	r3, [sp, #12]
 801d28c:	1d19      	adds	r1, r3, #4
 801d28e:	681b      	ldr	r3, [r3, #0]
 801d290:	9103      	str	r1, [sp, #12]
 801d292:	2b00      	cmp	r3, #0
 801d294:	bfbb      	ittet	lt
 801d296:	425b      	neglt	r3, r3
 801d298:	f042 0202 	orrlt.w	r2, r2, #2
 801d29c:	9307      	strge	r3, [sp, #28]
 801d29e:	9307      	strlt	r3, [sp, #28]
 801d2a0:	bfb8      	it	lt
 801d2a2:	9204      	strlt	r2, [sp, #16]
 801d2a4:	7823      	ldrb	r3, [r4, #0]
 801d2a6:	2b2e      	cmp	r3, #46	; 0x2e
 801d2a8:	d10c      	bne.n	801d2c4 <_svfiprintf_r+0x130>
 801d2aa:	7863      	ldrb	r3, [r4, #1]
 801d2ac:	2b2a      	cmp	r3, #42	; 0x2a
 801d2ae:	d135      	bne.n	801d31c <_svfiprintf_r+0x188>
 801d2b0:	9b03      	ldr	r3, [sp, #12]
 801d2b2:	1d1a      	adds	r2, r3, #4
 801d2b4:	681b      	ldr	r3, [r3, #0]
 801d2b6:	9203      	str	r2, [sp, #12]
 801d2b8:	2b00      	cmp	r3, #0
 801d2ba:	bfb8      	it	lt
 801d2bc:	f04f 33ff 	movlt.w	r3, #4294967295
 801d2c0:	3402      	adds	r4, #2
 801d2c2:	9305      	str	r3, [sp, #20]
 801d2c4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d390 <_svfiprintf_r+0x1fc>
 801d2c8:	7821      	ldrb	r1, [r4, #0]
 801d2ca:	2203      	movs	r2, #3
 801d2cc:	4650      	mov	r0, sl
 801d2ce:	f7e3 f827 	bl	8000320 <memchr>
 801d2d2:	b140      	cbz	r0, 801d2e6 <_svfiprintf_r+0x152>
 801d2d4:	2340      	movs	r3, #64	; 0x40
 801d2d6:	eba0 000a 	sub.w	r0, r0, sl
 801d2da:	fa03 f000 	lsl.w	r0, r3, r0
 801d2de:	9b04      	ldr	r3, [sp, #16]
 801d2e0:	4303      	orrs	r3, r0
 801d2e2:	3401      	adds	r4, #1
 801d2e4:	9304      	str	r3, [sp, #16]
 801d2e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d2ea:	4826      	ldr	r0, [pc, #152]	; (801d384 <_svfiprintf_r+0x1f0>)
 801d2ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d2f0:	2206      	movs	r2, #6
 801d2f2:	f7e3 f815 	bl	8000320 <memchr>
 801d2f6:	2800      	cmp	r0, #0
 801d2f8:	d038      	beq.n	801d36c <_svfiprintf_r+0x1d8>
 801d2fa:	4b23      	ldr	r3, [pc, #140]	; (801d388 <_svfiprintf_r+0x1f4>)
 801d2fc:	bb1b      	cbnz	r3, 801d346 <_svfiprintf_r+0x1b2>
 801d2fe:	9b03      	ldr	r3, [sp, #12]
 801d300:	3307      	adds	r3, #7
 801d302:	f023 0307 	bic.w	r3, r3, #7
 801d306:	3308      	adds	r3, #8
 801d308:	9303      	str	r3, [sp, #12]
 801d30a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d30c:	4433      	add	r3, r6
 801d30e:	9309      	str	r3, [sp, #36]	; 0x24
 801d310:	e767      	b.n	801d1e2 <_svfiprintf_r+0x4e>
 801d312:	fb0c 3202 	mla	r2, ip, r2, r3
 801d316:	460c      	mov	r4, r1
 801d318:	2001      	movs	r0, #1
 801d31a:	e7a5      	b.n	801d268 <_svfiprintf_r+0xd4>
 801d31c:	2300      	movs	r3, #0
 801d31e:	3401      	adds	r4, #1
 801d320:	9305      	str	r3, [sp, #20]
 801d322:	4619      	mov	r1, r3
 801d324:	f04f 0c0a 	mov.w	ip, #10
 801d328:	4620      	mov	r0, r4
 801d32a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d32e:	3a30      	subs	r2, #48	; 0x30
 801d330:	2a09      	cmp	r2, #9
 801d332:	d903      	bls.n	801d33c <_svfiprintf_r+0x1a8>
 801d334:	2b00      	cmp	r3, #0
 801d336:	d0c5      	beq.n	801d2c4 <_svfiprintf_r+0x130>
 801d338:	9105      	str	r1, [sp, #20]
 801d33a:	e7c3      	b.n	801d2c4 <_svfiprintf_r+0x130>
 801d33c:	fb0c 2101 	mla	r1, ip, r1, r2
 801d340:	4604      	mov	r4, r0
 801d342:	2301      	movs	r3, #1
 801d344:	e7f0      	b.n	801d328 <_svfiprintf_r+0x194>
 801d346:	ab03      	add	r3, sp, #12
 801d348:	9300      	str	r3, [sp, #0]
 801d34a:	462a      	mov	r2, r5
 801d34c:	4b0f      	ldr	r3, [pc, #60]	; (801d38c <_svfiprintf_r+0x1f8>)
 801d34e:	a904      	add	r1, sp, #16
 801d350:	4638      	mov	r0, r7
 801d352:	f7fc fad5 	bl	8019900 <_printf_float>
 801d356:	1c42      	adds	r2, r0, #1
 801d358:	4606      	mov	r6, r0
 801d35a:	d1d6      	bne.n	801d30a <_svfiprintf_r+0x176>
 801d35c:	89ab      	ldrh	r3, [r5, #12]
 801d35e:	065b      	lsls	r3, r3, #25
 801d360:	f53f af2c 	bmi.w	801d1bc <_svfiprintf_r+0x28>
 801d364:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d366:	b01d      	add	sp, #116	; 0x74
 801d368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d36c:	ab03      	add	r3, sp, #12
 801d36e:	9300      	str	r3, [sp, #0]
 801d370:	462a      	mov	r2, r5
 801d372:	4b06      	ldr	r3, [pc, #24]	; (801d38c <_svfiprintf_r+0x1f8>)
 801d374:	a904      	add	r1, sp, #16
 801d376:	4638      	mov	r0, r7
 801d378:	f7fc fd4e 	bl	8019e18 <_printf_i>
 801d37c:	e7eb      	b.n	801d356 <_svfiprintf_r+0x1c2>
 801d37e:	bf00      	nop
 801d380:	0801e8a4 	.word	0x0801e8a4
 801d384:	0801e8ae 	.word	0x0801e8ae
 801d388:	08019901 	.word	0x08019901
 801d38c:	0801d0dd 	.word	0x0801d0dd
 801d390:	0801e8aa 	.word	0x0801e8aa

0801d394 <_read_r>:
 801d394:	b538      	push	{r3, r4, r5, lr}
 801d396:	4d07      	ldr	r5, [pc, #28]	; (801d3b4 <_read_r+0x20>)
 801d398:	4604      	mov	r4, r0
 801d39a:	4608      	mov	r0, r1
 801d39c:	4611      	mov	r1, r2
 801d39e:	2200      	movs	r2, #0
 801d3a0:	602a      	str	r2, [r5, #0]
 801d3a2:	461a      	mov	r2, r3
 801d3a4:	f7e5 fdce 	bl	8002f44 <_read>
 801d3a8:	1c43      	adds	r3, r0, #1
 801d3aa:	d102      	bne.n	801d3b2 <_read_r+0x1e>
 801d3ac:	682b      	ldr	r3, [r5, #0]
 801d3ae:	b103      	cbz	r3, 801d3b2 <_read_r+0x1e>
 801d3b0:	6023      	str	r3, [r4, #0]
 801d3b2:	bd38      	pop	{r3, r4, r5, pc}
 801d3b4:	240034f8 	.word	0x240034f8

0801d3b8 <nan>:
 801d3b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d3c0 <nan+0x8>
 801d3bc:	4770      	bx	lr
 801d3be:	bf00      	nop
 801d3c0:	00000000 	.word	0x00000000
 801d3c4:	7ff80000 	.word	0x7ff80000

0801d3c8 <_sbrk_r>:
 801d3c8:	b538      	push	{r3, r4, r5, lr}
 801d3ca:	4d06      	ldr	r5, [pc, #24]	; (801d3e4 <_sbrk_r+0x1c>)
 801d3cc:	2300      	movs	r3, #0
 801d3ce:	4604      	mov	r4, r0
 801d3d0:	4608      	mov	r0, r1
 801d3d2:	602b      	str	r3, [r5, #0]
 801d3d4:	f7e5 fe24 	bl	8003020 <_sbrk>
 801d3d8:	1c43      	adds	r3, r0, #1
 801d3da:	d102      	bne.n	801d3e2 <_sbrk_r+0x1a>
 801d3dc:	682b      	ldr	r3, [r5, #0]
 801d3de:	b103      	cbz	r3, 801d3e2 <_sbrk_r+0x1a>
 801d3e0:	6023      	str	r3, [r4, #0]
 801d3e2:	bd38      	pop	{r3, r4, r5, pc}
 801d3e4:	240034f8 	.word	0x240034f8

0801d3e8 <strncmp>:
 801d3e8:	b510      	push	{r4, lr}
 801d3ea:	b17a      	cbz	r2, 801d40c <strncmp+0x24>
 801d3ec:	4603      	mov	r3, r0
 801d3ee:	3901      	subs	r1, #1
 801d3f0:	1884      	adds	r4, r0, r2
 801d3f2:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d3f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d3fa:	4290      	cmp	r0, r2
 801d3fc:	d101      	bne.n	801d402 <strncmp+0x1a>
 801d3fe:	42a3      	cmp	r3, r4
 801d400:	d101      	bne.n	801d406 <strncmp+0x1e>
 801d402:	1a80      	subs	r0, r0, r2
 801d404:	bd10      	pop	{r4, pc}
 801d406:	2800      	cmp	r0, #0
 801d408:	d1f3      	bne.n	801d3f2 <strncmp+0xa>
 801d40a:	e7fa      	b.n	801d402 <strncmp+0x1a>
 801d40c:	4610      	mov	r0, r2
 801d40e:	e7f9      	b.n	801d404 <strncmp+0x1c>

0801d410 <__ascii_wctomb>:
 801d410:	b149      	cbz	r1, 801d426 <__ascii_wctomb+0x16>
 801d412:	2aff      	cmp	r2, #255	; 0xff
 801d414:	bf85      	ittet	hi
 801d416:	238a      	movhi	r3, #138	; 0x8a
 801d418:	6003      	strhi	r3, [r0, #0]
 801d41a:	700a      	strbls	r2, [r1, #0]
 801d41c:	f04f 30ff 	movhi.w	r0, #4294967295
 801d420:	bf98      	it	ls
 801d422:	2001      	movls	r0, #1
 801d424:	4770      	bx	lr
 801d426:	4608      	mov	r0, r1
 801d428:	4770      	bx	lr
	...

0801d42c <__assert_func>:
 801d42c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d42e:	4614      	mov	r4, r2
 801d430:	461a      	mov	r2, r3
 801d432:	4b09      	ldr	r3, [pc, #36]	; (801d458 <__assert_func+0x2c>)
 801d434:	681b      	ldr	r3, [r3, #0]
 801d436:	4605      	mov	r5, r0
 801d438:	68d8      	ldr	r0, [r3, #12]
 801d43a:	b14c      	cbz	r4, 801d450 <__assert_func+0x24>
 801d43c:	4b07      	ldr	r3, [pc, #28]	; (801d45c <__assert_func+0x30>)
 801d43e:	9100      	str	r1, [sp, #0]
 801d440:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d444:	4906      	ldr	r1, [pc, #24]	; (801d460 <__assert_func+0x34>)
 801d446:	462b      	mov	r3, r5
 801d448:	f000 f9a6 	bl	801d798 <fiprintf>
 801d44c:	f000 fc46 	bl	801dcdc <abort>
 801d450:	4b04      	ldr	r3, [pc, #16]	; (801d464 <__assert_func+0x38>)
 801d452:	461c      	mov	r4, r3
 801d454:	e7f3      	b.n	801d43e <__assert_func+0x12>
 801d456:	bf00      	nop
 801d458:	24000100 	.word	0x24000100
 801d45c:	0801e8b5 	.word	0x0801e8b5
 801d460:	0801e8c2 	.word	0x0801e8c2
 801d464:	0801e8f0 	.word	0x0801e8f0

0801d468 <__sflush_r>:
 801d468:	898a      	ldrh	r2, [r1, #12]
 801d46a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d46e:	4605      	mov	r5, r0
 801d470:	0710      	lsls	r0, r2, #28
 801d472:	460c      	mov	r4, r1
 801d474:	d458      	bmi.n	801d528 <__sflush_r+0xc0>
 801d476:	684b      	ldr	r3, [r1, #4]
 801d478:	2b00      	cmp	r3, #0
 801d47a:	dc05      	bgt.n	801d488 <__sflush_r+0x20>
 801d47c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d47e:	2b00      	cmp	r3, #0
 801d480:	dc02      	bgt.n	801d488 <__sflush_r+0x20>
 801d482:	2000      	movs	r0, #0
 801d484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d48a:	2e00      	cmp	r6, #0
 801d48c:	d0f9      	beq.n	801d482 <__sflush_r+0x1a>
 801d48e:	2300      	movs	r3, #0
 801d490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d494:	682f      	ldr	r7, [r5, #0]
 801d496:	602b      	str	r3, [r5, #0]
 801d498:	d032      	beq.n	801d500 <__sflush_r+0x98>
 801d49a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d49c:	89a3      	ldrh	r3, [r4, #12]
 801d49e:	075a      	lsls	r2, r3, #29
 801d4a0:	d505      	bpl.n	801d4ae <__sflush_r+0x46>
 801d4a2:	6863      	ldr	r3, [r4, #4]
 801d4a4:	1ac0      	subs	r0, r0, r3
 801d4a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d4a8:	b10b      	cbz	r3, 801d4ae <__sflush_r+0x46>
 801d4aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d4ac:	1ac0      	subs	r0, r0, r3
 801d4ae:	2300      	movs	r3, #0
 801d4b0:	4602      	mov	r2, r0
 801d4b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d4b4:	6a21      	ldr	r1, [r4, #32]
 801d4b6:	4628      	mov	r0, r5
 801d4b8:	47b0      	blx	r6
 801d4ba:	1c43      	adds	r3, r0, #1
 801d4bc:	89a3      	ldrh	r3, [r4, #12]
 801d4be:	d106      	bne.n	801d4ce <__sflush_r+0x66>
 801d4c0:	6829      	ldr	r1, [r5, #0]
 801d4c2:	291d      	cmp	r1, #29
 801d4c4:	d82c      	bhi.n	801d520 <__sflush_r+0xb8>
 801d4c6:	4a2a      	ldr	r2, [pc, #168]	; (801d570 <__sflush_r+0x108>)
 801d4c8:	40ca      	lsrs	r2, r1
 801d4ca:	07d6      	lsls	r6, r2, #31
 801d4cc:	d528      	bpl.n	801d520 <__sflush_r+0xb8>
 801d4ce:	2200      	movs	r2, #0
 801d4d0:	6062      	str	r2, [r4, #4]
 801d4d2:	04d9      	lsls	r1, r3, #19
 801d4d4:	6922      	ldr	r2, [r4, #16]
 801d4d6:	6022      	str	r2, [r4, #0]
 801d4d8:	d504      	bpl.n	801d4e4 <__sflush_r+0x7c>
 801d4da:	1c42      	adds	r2, r0, #1
 801d4dc:	d101      	bne.n	801d4e2 <__sflush_r+0x7a>
 801d4de:	682b      	ldr	r3, [r5, #0]
 801d4e0:	b903      	cbnz	r3, 801d4e4 <__sflush_r+0x7c>
 801d4e2:	6560      	str	r0, [r4, #84]	; 0x54
 801d4e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d4e6:	602f      	str	r7, [r5, #0]
 801d4e8:	2900      	cmp	r1, #0
 801d4ea:	d0ca      	beq.n	801d482 <__sflush_r+0x1a>
 801d4ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d4f0:	4299      	cmp	r1, r3
 801d4f2:	d002      	beq.n	801d4fa <__sflush_r+0x92>
 801d4f4:	4628      	mov	r0, r5
 801d4f6:	f7ff fd11 	bl	801cf1c <_free_r>
 801d4fa:	2000      	movs	r0, #0
 801d4fc:	6360      	str	r0, [r4, #52]	; 0x34
 801d4fe:	e7c1      	b.n	801d484 <__sflush_r+0x1c>
 801d500:	6a21      	ldr	r1, [r4, #32]
 801d502:	2301      	movs	r3, #1
 801d504:	4628      	mov	r0, r5
 801d506:	47b0      	blx	r6
 801d508:	1c41      	adds	r1, r0, #1
 801d50a:	d1c7      	bne.n	801d49c <__sflush_r+0x34>
 801d50c:	682b      	ldr	r3, [r5, #0]
 801d50e:	2b00      	cmp	r3, #0
 801d510:	d0c4      	beq.n	801d49c <__sflush_r+0x34>
 801d512:	2b1d      	cmp	r3, #29
 801d514:	d001      	beq.n	801d51a <__sflush_r+0xb2>
 801d516:	2b16      	cmp	r3, #22
 801d518:	d101      	bne.n	801d51e <__sflush_r+0xb6>
 801d51a:	602f      	str	r7, [r5, #0]
 801d51c:	e7b1      	b.n	801d482 <__sflush_r+0x1a>
 801d51e:	89a3      	ldrh	r3, [r4, #12]
 801d520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d524:	81a3      	strh	r3, [r4, #12]
 801d526:	e7ad      	b.n	801d484 <__sflush_r+0x1c>
 801d528:	690f      	ldr	r7, [r1, #16]
 801d52a:	2f00      	cmp	r7, #0
 801d52c:	d0a9      	beq.n	801d482 <__sflush_r+0x1a>
 801d52e:	0793      	lsls	r3, r2, #30
 801d530:	680e      	ldr	r6, [r1, #0]
 801d532:	bf08      	it	eq
 801d534:	694b      	ldreq	r3, [r1, #20]
 801d536:	600f      	str	r7, [r1, #0]
 801d538:	bf18      	it	ne
 801d53a:	2300      	movne	r3, #0
 801d53c:	eba6 0807 	sub.w	r8, r6, r7
 801d540:	608b      	str	r3, [r1, #8]
 801d542:	f1b8 0f00 	cmp.w	r8, #0
 801d546:	dd9c      	ble.n	801d482 <__sflush_r+0x1a>
 801d548:	6a21      	ldr	r1, [r4, #32]
 801d54a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d54c:	4643      	mov	r3, r8
 801d54e:	463a      	mov	r2, r7
 801d550:	4628      	mov	r0, r5
 801d552:	47b0      	blx	r6
 801d554:	2800      	cmp	r0, #0
 801d556:	dc06      	bgt.n	801d566 <__sflush_r+0xfe>
 801d558:	89a3      	ldrh	r3, [r4, #12]
 801d55a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d55e:	81a3      	strh	r3, [r4, #12]
 801d560:	f04f 30ff 	mov.w	r0, #4294967295
 801d564:	e78e      	b.n	801d484 <__sflush_r+0x1c>
 801d566:	4407      	add	r7, r0
 801d568:	eba8 0800 	sub.w	r8, r8, r0
 801d56c:	e7e9      	b.n	801d542 <__sflush_r+0xda>
 801d56e:	bf00      	nop
 801d570:	20400001 	.word	0x20400001

0801d574 <_fflush_r>:
 801d574:	b538      	push	{r3, r4, r5, lr}
 801d576:	690b      	ldr	r3, [r1, #16]
 801d578:	4605      	mov	r5, r0
 801d57a:	460c      	mov	r4, r1
 801d57c:	b913      	cbnz	r3, 801d584 <_fflush_r+0x10>
 801d57e:	2500      	movs	r5, #0
 801d580:	4628      	mov	r0, r5
 801d582:	bd38      	pop	{r3, r4, r5, pc}
 801d584:	b118      	cbz	r0, 801d58e <_fflush_r+0x1a>
 801d586:	6983      	ldr	r3, [r0, #24]
 801d588:	b90b      	cbnz	r3, 801d58e <_fflush_r+0x1a>
 801d58a:	f000 f887 	bl	801d69c <__sinit>
 801d58e:	4b14      	ldr	r3, [pc, #80]	; (801d5e0 <_fflush_r+0x6c>)
 801d590:	429c      	cmp	r4, r3
 801d592:	d11b      	bne.n	801d5cc <_fflush_r+0x58>
 801d594:	686c      	ldr	r4, [r5, #4]
 801d596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d59a:	2b00      	cmp	r3, #0
 801d59c:	d0ef      	beq.n	801d57e <_fflush_r+0xa>
 801d59e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d5a0:	07d0      	lsls	r0, r2, #31
 801d5a2:	d404      	bmi.n	801d5ae <_fflush_r+0x3a>
 801d5a4:	0599      	lsls	r1, r3, #22
 801d5a6:	d402      	bmi.n	801d5ae <_fflush_r+0x3a>
 801d5a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d5aa:	f000 f927 	bl	801d7fc <__retarget_lock_acquire_recursive>
 801d5ae:	4628      	mov	r0, r5
 801d5b0:	4621      	mov	r1, r4
 801d5b2:	f7ff ff59 	bl	801d468 <__sflush_r>
 801d5b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d5b8:	07da      	lsls	r2, r3, #31
 801d5ba:	4605      	mov	r5, r0
 801d5bc:	d4e0      	bmi.n	801d580 <_fflush_r+0xc>
 801d5be:	89a3      	ldrh	r3, [r4, #12]
 801d5c0:	059b      	lsls	r3, r3, #22
 801d5c2:	d4dd      	bmi.n	801d580 <_fflush_r+0xc>
 801d5c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d5c6:	f000 f91a 	bl	801d7fe <__retarget_lock_release_recursive>
 801d5ca:	e7d9      	b.n	801d580 <_fflush_r+0xc>
 801d5cc:	4b05      	ldr	r3, [pc, #20]	; (801d5e4 <_fflush_r+0x70>)
 801d5ce:	429c      	cmp	r4, r3
 801d5d0:	d101      	bne.n	801d5d6 <_fflush_r+0x62>
 801d5d2:	68ac      	ldr	r4, [r5, #8]
 801d5d4:	e7df      	b.n	801d596 <_fflush_r+0x22>
 801d5d6:	4b04      	ldr	r3, [pc, #16]	; (801d5e8 <_fflush_r+0x74>)
 801d5d8:	429c      	cmp	r4, r3
 801d5da:	bf08      	it	eq
 801d5dc:	68ec      	ldreq	r4, [r5, #12]
 801d5de:	e7da      	b.n	801d596 <_fflush_r+0x22>
 801d5e0:	0801e914 	.word	0x0801e914
 801d5e4:	0801e934 	.word	0x0801e934
 801d5e8:	0801e8f4 	.word	0x0801e8f4

0801d5ec <std>:
 801d5ec:	2300      	movs	r3, #0
 801d5ee:	b510      	push	{r4, lr}
 801d5f0:	4604      	mov	r4, r0
 801d5f2:	e9c0 3300 	strd	r3, r3, [r0]
 801d5f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d5fa:	6083      	str	r3, [r0, #8]
 801d5fc:	8181      	strh	r1, [r0, #12]
 801d5fe:	6643      	str	r3, [r0, #100]	; 0x64
 801d600:	81c2      	strh	r2, [r0, #14]
 801d602:	6183      	str	r3, [r0, #24]
 801d604:	4619      	mov	r1, r3
 801d606:	2208      	movs	r2, #8
 801d608:	305c      	adds	r0, #92	; 0x5c
 801d60a:	f7fc f8e1 	bl	80197d0 <memset>
 801d60e:	4b05      	ldr	r3, [pc, #20]	; (801d624 <std+0x38>)
 801d610:	6263      	str	r3, [r4, #36]	; 0x24
 801d612:	4b05      	ldr	r3, [pc, #20]	; (801d628 <std+0x3c>)
 801d614:	62a3      	str	r3, [r4, #40]	; 0x28
 801d616:	4b05      	ldr	r3, [pc, #20]	; (801d62c <std+0x40>)
 801d618:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d61a:	4b05      	ldr	r3, [pc, #20]	; (801d630 <std+0x44>)
 801d61c:	6224      	str	r4, [r4, #32]
 801d61e:	6323      	str	r3, [r4, #48]	; 0x30
 801d620:	bd10      	pop	{r4, pc}
 801d622:	bf00      	nop
 801d624:	0801a4bd 	.word	0x0801a4bd
 801d628:	0801a4df 	.word	0x0801a4df
 801d62c:	0801a517 	.word	0x0801a517
 801d630:	0801a53b 	.word	0x0801a53b

0801d634 <_cleanup_r>:
 801d634:	4901      	ldr	r1, [pc, #4]	; (801d63c <_cleanup_r+0x8>)
 801d636:	f000 b8c1 	b.w	801d7bc <_fwalk_reent>
 801d63a:	bf00      	nop
 801d63c:	0801d575 	.word	0x0801d575

0801d640 <__sfmoreglue>:
 801d640:	b570      	push	{r4, r5, r6, lr}
 801d642:	2268      	movs	r2, #104	; 0x68
 801d644:	1e4d      	subs	r5, r1, #1
 801d646:	4355      	muls	r5, r2
 801d648:	460e      	mov	r6, r1
 801d64a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801d64e:	f7ff fcd1 	bl	801cff4 <_malloc_r>
 801d652:	4604      	mov	r4, r0
 801d654:	b140      	cbz	r0, 801d668 <__sfmoreglue+0x28>
 801d656:	2100      	movs	r1, #0
 801d658:	e9c0 1600 	strd	r1, r6, [r0]
 801d65c:	300c      	adds	r0, #12
 801d65e:	60a0      	str	r0, [r4, #8]
 801d660:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801d664:	f7fc f8b4 	bl	80197d0 <memset>
 801d668:	4620      	mov	r0, r4
 801d66a:	bd70      	pop	{r4, r5, r6, pc}

0801d66c <__sfp_lock_acquire>:
 801d66c:	4801      	ldr	r0, [pc, #4]	; (801d674 <__sfp_lock_acquire+0x8>)
 801d66e:	f000 b8c5 	b.w	801d7fc <__retarget_lock_acquire_recursive>
 801d672:	bf00      	nop
 801d674:	240034fd 	.word	0x240034fd

0801d678 <__sfp_lock_release>:
 801d678:	4801      	ldr	r0, [pc, #4]	; (801d680 <__sfp_lock_release+0x8>)
 801d67a:	f000 b8c0 	b.w	801d7fe <__retarget_lock_release_recursive>
 801d67e:	bf00      	nop
 801d680:	240034fd 	.word	0x240034fd

0801d684 <__sinit_lock_acquire>:
 801d684:	4801      	ldr	r0, [pc, #4]	; (801d68c <__sinit_lock_acquire+0x8>)
 801d686:	f000 b8b9 	b.w	801d7fc <__retarget_lock_acquire_recursive>
 801d68a:	bf00      	nop
 801d68c:	240034fe 	.word	0x240034fe

0801d690 <__sinit_lock_release>:
 801d690:	4801      	ldr	r0, [pc, #4]	; (801d698 <__sinit_lock_release+0x8>)
 801d692:	f000 b8b4 	b.w	801d7fe <__retarget_lock_release_recursive>
 801d696:	bf00      	nop
 801d698:	240034fe 	.word	0x240034fe

0801d69c <__sinit>:
 801d69c:	b510      	push	{r4, lr}
 801d69e:	4604      	mov	r4, r0
 801d6a0:	f7ff fff0 	bl	801d684 <__sinit_lock_acquire>
 801d6a4:	69a3      	ldr	r3, [r4, #24]
 801d6a6:	b11b      	cbz	r3, 801d6b0 <__sinit+0x14>
 801d6a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d6ac:	f7ff bff0 	b.w	801d690 <__sinit_lock_release>
 801d6b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801d6b4:	6523      	str	r3, [r4, #80]	; 0x50
 801d6b6:	4b13      	ldr	r3, [pc, #76]	; (801d704 <__sinit+0x68>)
 801d6b8:	4a13      	ldr	r2, [pc, #76]	; (801d708 <__sinit+0x6c>)
 801d6ba:	681b      	ldr	r3, [r3, #0]
 801d6bc:	62a2      	str	r2, [r4, #40]	; 0x28
 801d6be:	42a3      	cmp	r3, r4
 801d6c0:	bf04      	itt	eq
 801d6c2:	2301      	moveq	r3, #1
 801d6c4:	61a3      	streq	r3, [r4, #24]
 801d6c6:	4620      	mov	r0, r4
 801d6c8:	f000 f820 	bl	801d70c <__sfp>
 801d6cc:	6060      	str	r0, [r4, #4]
 801d6ce:	4620      	mov	r0, r4
 801d6d0:	f000 f81c 	bl	801d70c <__sfp>
 801d6d4:	60a0      	str	r0, [r4, #8]
 801d6d6:	4620      	mov	r0, r4
 801d6d8:	f000 f818 	bl	801d70c <__sfp>
 801d6dc:	2200      	movs	r2, #0
 801d6de:	60e0      	str	r0, [r4, #12]
 801d6e0:	2104      	movs	r1, #4
 801d6e2:	6860      	ldr	r0, [r4, #4]
 801d6e4:	f7ff ff82 	bl	801d5ec <std>
 801d6e8:	68a0      	ldr	r0, [r4, #8]
 801d6ea:	2201      	movs	r2, #1
 801d6ec:	2109      	movs	r1, #9
 801d6ee:	f7ff ff7d 	bl	801d5ec <std>
 801d6f2:	68e0      	ldr	r0, [r4, #12]
 801d6f4:	2202      	movs	r2, #2
 801d6f6:	2112      	movs	r1, #18
 801d6f8:	f7ff ff78 	bl	801d5ec <std>
 801d6fc:	2301      	movs	r3, #1
 801d6fe:	61a3      	str	r3, [r4, #24]
 801d700:	e7d2      	b.n	801d6a8 <__sinit+0xc>
 801d702:	bf00      	nop
 801d704:	0801e4ac 	.word	0x0801e4ac
 801d708:	0801d635 	.word	0x0801d635

0801d70c <__sfp>:
 801d70c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d70e:	4607      	mov	r7, r0
 801d710:	f7ff ffac 	bl	801d66c <__sfp_lock_acquire>
 801d714:	4b1e      	ldr	r3, [pc, #120]	; (801d790 <__sfp+0x84>)
 801d716:	681e      	ldr	r6, [r3, #0]
 801d718:	69b3      	ldr	r3, [r6, #24]
 801d71a:	b913      	cbnz	r3, 801d722 <__sfp+0x16>
 801d71c:	4630      	mov	r0, r6
 801d71e:	f7ff ffbd 	bl	801d69c <__sinit>
 801d722:	3648      	adds	r6, #72	; 0x48
 801d724:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801d728:	3b01      	subs	r3, #1
 801d72a:	d503      	bpl.n	801d734 <__sfp+0x28>
 801d72c:	6833      	ldr	r3, [r6, #0]
 801d72e:	b30b      	cbz	r3, 801d774 <__sfp+0x68>
 801d730:	6836      	ldr	r6, [r6, #0]
 801d732:	e7f7      	b.n	801d724 <__sfp+0x18>
 801d734:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801d738:	b9d5      	cbnz	r5, 801d770 <__sfp+0x64>
 801d73a:	4b16      	ldr	r3, [pc, #88]	; (801d794 <__sfp+0x88>)
 801d73c:	60e3      	str	r3, [r4, #12]
 801d73e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d742:	6665      	str	r5, [r4, #100]	; 0x64
 801d744:	f000 f859 	bl	801d7fa <__retarget_lock_init_recursive>
 801d748:	f7ff ff96 	bl	801d678 <__sfp_lock_release>
 801d74c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801d750:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801d754:	6025      	str	r5, [r4, #0]
 801d756:	61a5      	str	r5, [r4, #24]
 801d758:	2208      	movs	r2, #8
 801d75a:	4629      	mov	r1, r5
 801d75c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801d760:	f7fc f836 	bl	80197d0 <memset>
 801d764:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801d768:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801d76c:	4620      	mov	r0, r4
 801d76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d770:	3468      	adds	r4, #104	; 0x68
 801d772:	e7d9      	b.n	801d728 <__sfp+0x1c>
 801d774:	2104      	movs	r1, #4
 801d776:	4638      	mov	r0, r7
 801d778:	f7ff ff62 	bl	801d640 <__sfmoreglue>
 801d77c:	4604      	mov	r4, r0
 801d77e:	6030      	str	r0, [r6, #0]
 801d780:	2800      	cmp	r0, #0
 801d782:	d1d5      	bne.n	801d730 <__sfp+0x24>
 801d784:	f7ff ff78 	bl	801d678 <__sfp_lock_release>
 801d788:	230c      	movs	r3, #12
 801d78a:	603b      	str	r3, [r7, #0]
 801d78c:	e7ee      	b.n	801d76c <__sfp+0x60>
 801d78e:	bf00      	nop
 801d790:	0801e4ac 	.word	0x0801e4ac
 801d794:	ffff0001 	.word	0xffff0001

0801d798 <fiprintf>:
 801d798:	b40e      	push	{r1, r2, r3}
 801d79a:	b503      	push	{r0, r1, lr}
 801d79c:	4601      	mov	r1, r0
 801d79e:	ab03      	add	r3, sp, #12
 801d7a0:	4805      	ldr	r0, [pc, #20]	; (801d7b8 <fiprintf+0x20>)
 801d7a2:	f853 2b04 	ldr.w	r2, [r3], #4
 801d7a6:	6800      	ldr	r0, [r0, #0]
 801d7a8:	9301      	str	r3, [sp, #4]
 801d7aa:	f000 f8a7 	bl	801d8fc <_vfiprintf_r>
 801d7ae:	b002      	add	sp, #8
 801d7b0:	f85d eb04 	ldr.w	lr, [sp], #4
 801d7b4:	b003      	add	sp, #12
 801d7b6:	4770      	bx	lr
 801d7b8:	24000100 	.word	0x24000100

0801d7bc <_fwalk_reent>:
 801d7bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d7c0:	4606      	mov	r6, r0
 801d7c2:	4688      	mov	r8, r1
 801d7c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801d7c8:	2700      	movs	r7, #0
 801d7ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d7ce:	f1b9 0901 	subs.w	r9, r9, #1
 801d7d2:	d505      	bpl.n	801d7e0 <_fwalk_reent+0x24>
 801d7d4:	6824      	ldr	r4, [r4, #0]
 801d7d6:	2c00      	cmp	r4, #0
 801d7d8:	d1f7      	bne.n	801d7ca <_fwalk_reent+0xe>
 801d7da:	4638      	mov	r0, r7
 801d7dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d7e0:	89ab      	ldrh	r3, [r5, #12]
 801d7e2:	2b01      	cmp	r3, #1
 801d7e4:	d907      	bls.n	801d7f6 <_fwalk_reent+0x3a>
 801d7e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d7ea:	3301      	adds	r3, #1
 801d7ec:	d003      	beq.n	801d7f6 <_fwalk_reent+0x3a>
 801d7ee:	4629      	mov	r1, r5
 801d7f0:	4630      	mov	r0, r6
 801d7f2:	47c0      	blx	r8
 801d7f4:	4307      	orrs	r7, r0
 801d7f6:	3568      	adds	r5, #104	; 0x68
 801d7f8:	e7e9      	b.n	801d7ce <_fwalk_reent+0x12>

0801d7fa <__retarget_lock_init_recursive>:
 801d7fa:	4770      	bx	lr

0801d7fc <__retarget_lock_acquire_recursive>:
 801d7fc:	4770      	bx	lr

0801d7fe <__retarget_lock_release_recursive>:
 801d7fe:	4770      	bx	lr

0801d800 <memmove>:
 801d800:	4288      	cmp	r0, r1
 801d802:	b510      	push	{r4, lr}
 801d804:	eb01 0402 	add.w	r4, r1, r2
 801d808:	d902      	bls.n	801d810 <memmove+0x10>
 801d80a:	4284      	cmp	r4, r0
 801d80c:	4623      	mov	r3, r4
 801d80e:	d807      	bhi.n	801d820 <memmove+0x20>
 801d810:	1e43      	subs	r3, r0, #1
 801d812:	42a1      	cmp	r1, r4
 801d814:	d008      	beq.n	801d828 <memmove+0x28>
 801d816:	f811 2b01 	ldrb.w	r2, [r1], #1
 801d81a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801d81e:	e7f8      	b.n	801d812 <memmove+0x12>
 801d820:	4402      	add	r2, r0
 801d822:	4601      	mov	r1, r0
 801d824:	428a      	cmp	r2, r1
 801d826:	d100      	bne.n	801d82a <memmove+0x2a>
 801d828:	bd10      	pop	{r4, pc}
 801d82a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801d82e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801d832:	e7f7      	b.n	801d824 <memmove+0x24>

0801d834 <__malloc_lock>:
 801d834:	4801      	ldr	r0, [pc, #4]	; (801d83c <__malloc_lock+0x8>)
 801d836:	f7ff bfe1 	b.w	801d7fc <__retarget_lock_acquire_recursive>
 801d83a:	bf00      	nop
 801d83c:	240034fc 	.word	0x240034fc

0801d840 <__malloc_unlock>:
 801d840:	4801      	ldr	r0, [pc, #4]	; (801d848 <__malloc_unlock+0x8>)
 801d842:	f7ff bfdc 	b.w	801d7fe <__retarget_lock_release_recursive>
 801d846:	bf00      	nop
 801d848:	240034fc 	.word	0x240034fc

0801d84c <_realloc_r>:
 801d84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d850:	4680      	mov	r8, r0
 801d852:	4614      	mov	r4, r2
 801d854:	460e      	mov	r6, r1
 801d856:	b921      	cbnz	r1, 801d862 <_realloc_r+0x16>
 801d858:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d85c:	4611      	mov	r1, r2
 801d85e:	f7ff bbc9 	b.w	801cff4 <_malloc_r>
 801d862:	b92a      	cbnz	r2, 801d870 <_realloc_r+0x24>
 801d864:	f7ff fb5a 	bl	801cf1c <_free_r>
 801d868:	4625      	mov	r5, r4
 801d86a:	4628      	mov	r0, r5
 801d86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d870:	f000 faa0 	bl	801ddb4 <_malloc_usable_size_r>
 801d874:	4284      	cmp	r4, r0
 801d876:	4607      	mov	r7, r0
 801d878:	d802      	bhi.n	801d880 <_realloc_r+0x34>
 801d87a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d87e:	d812      	bhi.n	801d8a6 <_realloc_r+0x5a>
 801d880:	4621      	mov	r1, r4
 801d882:	4640      	mov	r0, r8
 801d884:	f7ff fbb6 	bl	801cff4 <_malloc_r>
 801d888:	4605      	mov	r5, r0
 801d88a:	2800      	cmp	r0, #0
 801d88c:	d0ed      	beq.n	801d86a <_realloc_r+0x1e>
 801d88e:	42bc      	cmp	r4, r7
 801d890:	4622      	mov	r2, r4
 801d892:	4631      	mov	r1, r6
 801d894:	bf28      	it	cs
 801d896:	463a      	movcs	r2, r7
 801d898:	f7fb ff8c 	bl	80197b4 <memcpy>
 801d89c:	4631      	mov	r1, r6
 801d89e:	4640      	mov	r0, r8
 801d8a0:	f7ff fb3c 	bl	801cf1c <_free_r>
 801d8a4:	e7e1      	b.n	801d86a <_realloc_r+0x1e>
 801d8a6:	4635      	mov	r5, r6
 801d8a8:	e7df      	b.n	801d86a <_realloc_r+0x1e>

0801d8aa <__sfputc_r>:
 801d8aa:	6893      	ldr	r3, [r2, #8]
 801d8ac:	3b01      	subs	r3, #1
 801d8ae:	2b00      	cmp	r3, #0
 801d8b0:	b410      	push	{r4}
 801d8b2:	6093      	str	r3, [r2, #8]
 801d8b4:	da08      	bge.n	801d8c8 <__sfputc_r+0x1e>
 801d8b6:	6994      	ldr	r4, [r2, #24]
 801d8b8:	42a3      	cmp	r3, r4
 801d8ba:	db01      	blt.n	801d8c0 <__sfputc_r+0x16>
 801d8bc:	290a      	cmp	r1, #10
 801d8be:	d103      	bne.n	801d8c8 <__sfputc_r+0x1e>
 801d8c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d8c4:	f000 b94a 	b.w	801db5c <__swbuf_r>
 801d8c8:	6813      	ldr	r3, [r2, #0]
 801d8ca:	1c58      	adds	r0, r3, #1
 801d8cc:	6010      	str	r0, [r2, #0]
 801d8ce:	7019      	strb	r1, [r3, #0]
 801d8d0:	4608      	mov	r0, r1
 801d8d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d8d6:	4770      	bx	lr

0801d8d8 <__sfputs_r>:
 801d8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d8da:	4606      	mov	r6, r0
 801d8dc:	460f      	mov	r7, r1
 801d8de:	4614      	mov	r4, r2
 801d8e0:	18d5      	adds	r5, r2, r3
 801d8e2:	42ac      	cmp	r4, r5
 801d8e4:	d101      	bne.n	801d8ea <__sfputs_r+0x12>
 801d8e6:	2000      	movs	r0, #0
 801d8e8:	e007      	b.n	801d8fa <__sfputs_r+0x22>
 801d8ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d8ee:	463a      	mov	r2, r7
 801d8f0:	4630      	mov	r0, r6
 801d8f2:	f7ff ffda 	bl	801d8aa <__sfputc_r>
 801d8f6:	1c43      	adds	r3, r0, #1
 801d8f8:	d1f3      	bne.n	801d8e2 <__sfputs_r+0xa>
 801d8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801d8fc <_vfiprintf_r>:
 801d8fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d900:	460d      	mov	r5, r1
 801d902:	b09d      	sub	sp, #116	; 0x74
 801d904:	4614      	mov	r4, r2
 801d906:	4698      	mov	r8, r3
 801d908:	4606      	mov	r6, r0
 801d90a:	b118      	cbz	r0, 801d914 <_vfiprintf_r+0x18>
 801d90c:	6983      	ldr	r3, [r0, #24]
 801d90e:	b90b      	cbnz	r3, 801d914 <_vfiprintf_r+0x18>
 801d910:	f7ff fec4 	bl	801d69c <__sinit>
 801d914:	4b89      	ldr	r3, [pc, #548]	; (801db3c <_vfiprintf_r+0x240>)
 801d916:	429d      	cmp	r5, r3
 801d918:	d11b      	bne.n	801d952 <_vfiprintf_r+0x56>
 801d91a:	6875      	ldr	r5, [r6, #4]
 801d91c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d91e:	07d9      	lsls	r1, r3, #31
 801d920:	d405      	bmi.n	801d92e <_vfiprintf_r+0x32>
 801d922:	89ab      	ldrh	r3, [r5, #12]
 801d924:	059a      	lsls	r2, r3, #22
 801d926:	d402      	bmi.n	801d92e <_vfiprintf_r+0x32>
 801d928:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d92a:	f7ff ff67 	bl	801d7fc <__retarget_lock_acquire_recursive>
 801d92e:	89ab      	ldrh	r3, [r5, #12]
 801d930:	071b      	lsls	r3, r3, #28
 801d932:	d501      	bpl.n	801d938 <_vfiprintf_r+0x3c>
 801d934:	692b      	ldr	r3, [r5, #16]
 801d936:	b9eb      	cbnz	r3, 801d974 <_vfiprintf_r+0x78>
 801d938:	4629      	mov	r1, r5
 801d93a:	4630      	mov	r0, r6
 801d93c:	f000 f960 	bl	801dc00 <__swsetup_r>
 801d940:	b1c0      	cbz	r0, 801d974 <_vfiprintf_r+0x78>
 801d942:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d944:	07dc      	lsls	r4, r3, #31
 801d946:	d50e      	bpl.n	801d966 <_vfiprintf_r+0x6a>
 801d948:	f04f 30ff 	mov.w	r0, #4294967295
 801d94c:	b01d      	add	sp, #116	; 0x74
 801d94e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d952:	4b7b      	ldr	r3, [pc, #492]	; (801db40 <_vfiprintf_r+0x244>)
 801d954:	429d      	cmp	r5, r3
 801d956:	d101      	bne.n	801d95c <_vfiprintf_r+0x60>
 801d958:	68b5      	ldr	r5, [r6, #8]
 801d95a:	e7df      	b.n	801d91c <_vfiprintf_r+0x20>
 801d95c:	4b79      	ldr	r3, [pc, #484]	; (801db44 <_vfiprintf_r+0x248>)
 801d95e:	429d      	cmp	r5, r3
 801d960:	bf08      	it	eq
 801d962:	68f5      	ldreq	r5, [r6, #12]
 801d964:	e7da      	b.n	801d91c <_vfiprintf_r+0x20>
 801d966:	89ab      	ldrh	r3, [r5, #12]
 801d968:	0598      	lsls	r0, r3, #22
 801d96a:	d4ed      	bmi.n	801d948 <_vfiprintf_r+0x4c>
 801d96c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d96e:	f7ff ff46 	bl	801d7fe <__retarget_lock_release_recursive>
 801d972:	e7e9      	b.n	801d948 <_vfiprintf_r+0x4c>
 801d974:	2300      	movs	r3, #0
 801d976:	9309      	str	r3, [sp, #36]	; 0x24
 801d978:	2320      	movs	r3, #32
 801d97a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d97e:	f8cd 800c 	str.w	r8, [sp, #12]
 801d982:	2330      	movs	r3, #48	; 0x30
 801d984:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801db48 <_vfiprintf_r+0x24c>
 801d988:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d98c:	f04f 0901 	mov.w	r9, #1
 801d990:	4623      	mov	r3, r4
 801d992:	469a      	mov	sl, r3
 801d994:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d998:	b10a      	cbz	r2, 801d99e <_vfiprintf_r+0xa2>
 801d99a:	2a25      	cmp	r2, #37	; 0x25
 801d99c:	d1f9      	bne.n	801d992 <_vfiprintf_r+0x96>
 801d99e:	ebba 0b04 	subs.w	fp, sl, r4
 801d9a2:	d00b      	beq.n	801d9bc <_vfiprintf_r+0xc0>
 801d9a4:	465b      	mov	r3, fp
 801d9a6:	4622      	mov	r2, r4
 801d9a8:	4629      	mov	r1, r5
 801d9aa:	4630      	mov	r0, r6
 801d9ac:	f7ff ff94 	bl	801d8d8 <__sfputs_r>
 801d9b0:	3001      	adds	r0, #1
 801d9b2:	f000 80aa 	beq.w	801db0a <_vfiprintf_r+0x20e>
 801d9b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d9b8:	445a      	add	r2, fp
 801d9ba:	9209      	str	r2, [sp, #36]	; 0x24
 801d9bc:	f89a 3000 	ldrb.w	r3, [sl]
 801d9c0:	2b00      	cmp	r3, #0
 801d9c2:	f000 80a2 	beq.w	801db0a <_vfiprintf_r+0x20e>
 801d9c6:	2300      	movs	r3, #0
 801d9c8:	f04f 32ff 	mov.w	r2, #4294967295
 801d9cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d9d0:	f10a 0a01 	add.w	sl, sl, #1
 801d9d4:	9304      	str	r3, [sp, #16]
 801d9d6:	9307      	str	r3, [sp, #28]
 801d9d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d9dc:	931a      	str	r3, [sp, #104]	; 0x68
 801d9de:	4654      	mov	r4, sl
 801d9e0:	2205      	movs	r2, #5
 801d9e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d9e6:	4858      	ldr	r0, [pc, #352]	; (801db48 <_vfiprintf_r+0x24c>)
 801d9e8:	f7e2 fc9a 	bl	8000320 <memchr>
 801d9ec:	9a04      	ldr	r2, [sp, #16]
 801d9ee:	b9d8      	cbnz	r0, 801da28 <_vfiprintf_r+0x12c>
 801d9f0:	06d1      	lsls	r1, r2, #27
 801d9f2:	bf44      	itt	mi
 801d9f4:	2320      	movmi	r3, #32
 801d9f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d9fa:	0713      	lsls	r3, r2, #28
 801d9fc:	bf44      	itt	mi
 801d9fe:	232b      	movmi	r3, #43	; 0x2b
 801da00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801da04:	f89a 3000 	ldrb.w	r3, [sl]
 801da08:	2b2a      	cmp	r3, #42	; 0x2a
 801da0a:	d015      	beq.n	801da38 <_vfiprintf_r+0x13c>
 801da0c:	9a07      	ldr	r2, [sp, #28]
 801da0e:	4654      	mov	r4, sl
 801da10:	2000      	movs	r0, #0
 801da12:	f04f 0c0a 	mov.w	ip, #10
 801da16:	4621      	mov	r1, r4
 801da18:	f811 3b01 	ldrb.w	r3, [r1], #1
 801da1c:	3b30      	subs	r3, #48	; 0x30
 801da1e:	2b09      	cmp	r3, #9
 801da20:	d94e      	bls.n	801dac0 <_vfiprintf_r+0x1c4>
 801da22:	b1b0      	cbz	r0, 801da52 <_vfiprintf_r+0x156>
 801da24:	9207      	str	r2, [sp, #28]
 801da26:	e014      	b.n	801da52 <_vfiprintf_r+0x156>
 801da28:	eba0 0308 	sub.w	r3, r0, r8
 801da2c:	fa09 f303 	lsl.w	r3, r9, r3
 801da30:	4313      	orrs	r3, r2
 801da32:	9304      	str	r3, [sp, #16]
 801da34:	46a2      	mov	sl, r4
 801da36:	e7d2      	b.n	801d9de <_vfiprintf_r+0xe2>
 801da38:	9b03      	ldr	r3, [sp, #12]
 801da3a:	1d19      	adds	r1, r3, #4
 801da3c:	681b      	ldr	r3, [r3, #0]
 801da3e:	9103      	str	r1, [sp, #12]
 801da40:	2b00      	cmp	r3, #0
 801da42:	bfbb      	ittet	lt
 801da44:	425b      	neglt	r3, r3
 801da46:	f042 0202 	orrlt.w	r2, r2, #2
 801da4a:	9307      	strge	r3, [sp, #28]
 801da4c:	9307      	strlt	r3, [sp, #28]
 801da4e:	bfb8      	it	lt
 801da50:	9204      	strlt	r2, [sp, #16]
 801da52:	7823      	ldrb	r3, [r4, #0]
 801da54:	2b2e      	cmp	r3, #46	; 0x2e
 801da56:	d10c      	bne.n	801da72 <_vfiprintf_r+0x176>
 801da58:	7863      	ldrb	r3, [r4, #1]
 801da5a:	2b2a      	cmp	r3, #42	; 0x2a
 801da5c:	d135      	bne.n	801daca <_vfiprintf_r+0x1ce>
 801da5e:	9b03      	ldr	r3, [sp, #12]
 801da60:	1d1a      	adds	r2, r3, #4
 801da62:	681b      	ldr	r3, [r3, #0]
 801da64:	9203      	str	r2, [sp, #12]
 801da66:	2b00      	cmp	r3, #0
 801da68:	bfb8      	it	lt
 801da6a:	f04f 33ff 	movlt.w	r3, #4294967295
 801da6e:	3402      	adds	r4, #2
 801da70:	9305      	str	r3, [sp, #20]
 801da72:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801db58 <_vfiprintf_r+0x25c>
 801da76:	7821      	ldrb	r1, [r4, #0]
 801da78:	2203      	movs	r2, #3
 801da7a:	4650      	mov	r0, sl
 801da7c:	f7e2 fc50 	bl	8000320 <memchr>
 801da80:	b140      	cbz	r0, 801da94 <_vfiprintf_r+0x198>
 801da82:	2340      	movs	r3, #64	; 0x40
 801da84:	eba0 000a 	sub.w	r0, r0, sl
 801da88:	fa03 f000 	lsl.w	r0, r3, r0
 801da8c:	9b04      	ldr	r3, [sp, #16]
 801da8e:	4303      	orrs	r3, r0
 801da90:	3401      	adds	r4, #1
 801da92:	9304      	str	r3, [sp, #16]
 801da94:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da98:	482c      	ldr	r0, [pc, #176]	; (801db4c <_vfiprintf_r+0x250>)
 801da9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801da9e:	2206      	movs	r2, #6
 801daa0:	f7e2 fc3e 	bl	8000320 <memchr>
 801daa4:	2800      	cmp	r0, #0
 801daa6:	d03f      	beq.n	801db28 <_vfiprintf_r+0x22c>
 801daa8:	4b29      	ldr	r3, [pc, #164]	; (801db50 <_vfiprintf_r+0x254>)
 801daaa:	bb1b      	cbnz	r3, 801daf4 <_vfiprintf_r+0x1f8>
 801daac:	9b03      	ldr	r3, [sp, #12]
 801daae:	3307      	adds	r3, #7
 801dab0:	f023 0307 	bic.w	r3, r3, #7
 801dab4:	3308      	adds	r3, #8
 801dab6:	9303      	str	r3, [sp, #12]
 801dab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801daba:	443b      	add	r3, r7
 801dabc:	9309      	str	r3, [sp, #36]	; 0x24
 801dabe:	e767      	b.n	801d990 <_vfiprintf_r+0x94>
 801dac0:	fb0c 3202 	mla	r2, ip, r2, r3
 801dac4:	460c      	mov	r4, r1
 801dac6:	2001      	movs	r0, #1
 801dac8:	e7a5      	b.n	801da16 <_vfiprintf_r+0x11a>
 801daca:	2300      	movs	r3, #0
 801dacc:	3401      	adds	r4, #1
 801dace:	9305      	str	r3, [sp, #20]
 801dad0:	4619      	mov	r1, r3
 801dad2:	f04f 0c0a 	mov.w	ip, #10
 801dad6:	4620      	mov	r0, r4
 801dad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dadc:	3a30      	subs	r2, #48	; 0x30
 801dade:	2a09      	cmp	r2, #9
 801dae0:	d903      	bls.n	801daea <_vfiprintf_r+0x1ee>
 801dae2:	2b00      	cmp	r3, #0
 801dae4:	d0c5      	beq.n	801da72 <_vfiprintf_r+0x176>
 801dae6:	9105      	str	r1, [sp, #20]
 801dae8:	e7c3      	b.n	801da72 <_vfiprintf_r+0x176>
 801daea:	fb0c 2101 	mla	r1, ip, r1, r2
 801daee:	4604      	mov	r4, r0
 801daf0:	2301      	movs	r3, #1
 801daf2:	e7f0      	b.n	801dad6 <_vfiprintf_r+0x1da>
 801daf4:	ab03      	add	r3, sp, #12
 801daf6:	9300      	str	r3, [sp, #0]
 801daf8:	462a      	mov	r2, r5
 801dafa:	4b16      	ldr	r3, [pc, #88]	; (801db54 <_vfiprintf_r+0x258>)
 801dafc:	a904      	add	r1, sp, #16
 801dafe:	4630      	mov	r0, r6
 801db00:	f7fb fefe 	bl	8019900 <_printf_float>
 801db04:	4607      	mov	r7, r0
 801db06:	1c78      	adds	r0, r7, #1
 801db08:	d1d6      	bne.n	801dab8 <_vfiprintf_r+0x1bc>
 801db0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801db0c:	07d9      	lsls	r1, r3, #31
 801db0e:	d405      	bmi.n	801db1c <_vfiprintf_r+0x220>
 801db10:	89ab      	ldrh	r3, [r5, #12]
 801db12:	059a      	lsls	r2, r3, #22
 801db14:	d402      	bmi.n	801db1c <_vfiprintf_r+0x220>
 801db16:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801db18:	f7ff fe71 	bl	801d7fe <__retarget_lock_release_recursive>
 801db1c:	89ab      	ldrh	r3, [r5, #12]
 801db1e:	065b      	lsls	r3, r3, #25
 801db20:	f53f af12 	bmi.w	801d948 <_vfiprintf_r+0x4c>
 801db24:	9809      	ldr	r0, [sp, #36]	; 0x24
 801db26:	e711      	b.n	801d94c <_vfiprintf_r+0x50>
 801db28:	ab03      	add	r3, sp, #12
 801db2a:	9300      	str	r3, [sp, #0]
 801db2c:	462a      	mov	r2, r5
 801db2e:	4b09      	ldr	r3, [pc, #36]	; (801db54 <_vfiprintf_r+0x258>)
 801db30:	a904      	add	r1, sp, #16
 801db32:	4630      	mov	r0, r6
 801db34:	f7fc f970 	bl	8019e18 <_printf_i>
 801db38:	e7e4      	b.n	801db04 <_vfiprintf_r+0x208>
 801db3a:	bf00      	nop
 801db3c:	0801e914 	.word	0x0801e914
 801db40:	0801e934 	.word	0x0801e934
 801db44:	0801e8f4 	.word	0x0801e8f4
 801db48:	0801e8a4 	.word	0x0801e8a4
 801db4c:	0801e8ae 	.word	0x0801e8ae
 801db50:	08019901 	.word	0x08019901
 801db54:	0801d8d9 	.word	0x0801d8d9
 801db58:	0801e8aa 	.word	0x0801e8aa

0801db5c <__swbuf_r>:
 801db5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801db5e:	460e      	mov	r6, r1
 801db60:	4614      	mov	r4, r2
 801db62:	4605      	mov	r5, r0
 801db64:	b118      	cbz	r0, 801db6e <__swbuf_r+0x12>
 801db66:	6983      	ldr	r3, [r0, #24]
 801db68:	b90b      	cbnz	r3, 801db6e <__swbuf_r+0x12>
 801db6a:	f7ff fd97 	bl	801d69c <__sinit>
 801db6e:	4b21      	ldr	r3, [pc, #132]	; (801dbf4 <__swbuf_r+0x98>)
 801db70:	429c      	cmp	r4, r3
 801db72:	d12b      	bne.n	801dbcc <__swbuf_r+0x70>
 801db74:	686c      	ldr	r4, [r5, #4]
 801db76:	69a3      	ldr	r3, [r4, #24]
 801db78:	60a3      	str	r3, [r4, #8]
 801db7a:	89a3      	ldrh	r3, [r4, #12]
 801db7c:	071a      	lsls	r2, r3, #28
 801db7e:	d52f      	bpl.n	801dbe0 <__swbuf_r+0x84>
 801db80:	6923      	ldr	r3, [r4, #16]
 801db82:	b36b      	cbz	r3, 801dbe0 <__swbuf_r+0x84>
 801db84:	6923      	ldr	r3, [r4, #16]
 801db86:	6820      	ldr	r0, [r4, #0]
 801db88:	1ac0      	subs	r0, r0, r3
 801db8a:	6963      	ldr	r3, [r4, #20]
 801db8c:	b2f6      	uxtb	r6, r6
 801db8e:	4283      	cmp	r3, r0
 801db90:	4637      	mov	r7, r6
 801db92:	dc04      	bgt.n	801db9e <__swbuf_r+0x42>
 801db94:	4621      	mov	r1, r4
 801db96:	4628      	mov	r0, r5
 801db98:	f7ff fcec 	bl	801d574 <_fflush_r>
 801db9c:	bb30      	cbnz	r0, 801dbec <__swbuf_r+0x90>
 801db9e:	68a3      	ldr	r3, [r4, #8]
 801dba0:	3b01      	subs	r3, #1
 801dba2:	60a3      	str	r3, [r4, #8]
 801dba4:	6823      	ldr	r3, [r4, #0]
 801dba6:	1c5a      	adds	r2, r3, #1
 801dba8:	6022      	str	r2, [r4, #0]
 801dbaa:	701e      	strb	r6, [r3, #0]
 801dbac:	6963      	ldr	r3, [r4, #20]
 801dbae:	3001      	adds	r0, #1
 801dbb0:	4283      	cmp	r3, r0
 801dbb2:	d004      	beq.n	801dbbe <__swbuf_r+0x62>
 801dbb4:	89a3      	ldrh	r3, [r4, #12]
 801dbb6:	07db      	lsls	r3, r3, #31
 801dbb8:	d506      	bpl.n	801dbc8 <__swbuf_r+0x6c>
 801dbba:	2e0a      	cmp	r6, #10
 801dbbc:	d104      	bne.n	801dbc8 <__swbuf_r+0x6c>
 801dbbe:	4621      	mov	r1, r4
 801dbc0:	4628      	mov	r0, r5
 801dbc2:	f7ff fcd7 	bl	801d574 <_fflush_r>
 801dbc6:	b988      	cbnz	r0, 801dbec <__swbuf_r+0x90>
 801dbc8:	4638      	mov	r0, r7
 801dbca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dbcc:	4b0a      	ldr	r3, [pc, #40]	; (801dbf8 <__swbuf_r+0x9c>)
 801dbce:	429c      	cmp	r4, r3
 801dbd0:	d101      	bne.n	801dbd6 <__swbuf_r+0x7a>
 801dbd2:	68ac      	ldr	r4, [r5, #8]
 801dbd4:	e7cf      	b.n	801db76 <__swbuf_r+0x1a>
 801dbd6:	4b09      	ldr	r3, [pc, #36]	; (801dbfc <__swbuf_r+0xa0>)
 801dbd8:	429c      	cmp	r4, r3
 801dbda:	bf08      	it	eq
 801dbdc:	68ec      	ldreq	r4, [r5, #12]
 801dbde:	e7ca      	b.n	801db76 <__swbuf_r+0x1a>
 801dbe0:	4621      	mov	r1, r4
 801dbe2:	4628      	mov	r0, r5
 801dbe4:	f000 f80c 	bl	801dc00 <__swsetup_r>
 801dbe8:	2800      	cmp	r0, #0
 801dbea:	d0cb      	beq.n	801db84 <__swbuf_r+0x28>
 801dbec:	f04f 37ff 	mov.w	r7, #4294967295
 801dbf0:	e7ea      	b.n	801dbc8 <__swbuf_r+0x6c>
 801dbf2:	bf00      	nop
 801dbf4:	0801e914 	.word	0x0801e914
 801dbf8:	0801e934 	.word	0x0801e934
 801dbfc:	0801e8f4 	.word	0x0801e8f4

0801dc00 <__swsetup_r>:
 801dc00:	4b32      	ldr	r3, [pc, #200]	; (801dccc <__swsetup_r+0xcc>)
 801dc02:	b570      	push	{r4, r5, r6, lr}
 801dc04:	681d      	ldr	r5, [r3, #0]
 801dc06:	4606      	mov	r6, r0
 801dc08:	460c      	mov	r4, r1
 801dc0a:	b125      	cbz	r5, 801dc16 <__swsetup_r+0x16>
 801dc0c:	69ab      	ldr	r3, [r5, #24]
 801dc0e:	b913      	cbnz	r3, 801dc16 <__swsetup_r+0x16>
 801dc10:	4628      	mov	r0, r5
 801dc12:	f7ff fd43 	bl	801d69c <__sinit>
 801dc16:	4b2e      	ldr	r3, [pc, #184]	; (801dcd0 <__swsetup_r+0xd0>)
 801dc18:	429c      	cmp	r4, r3
 801dc1a:	d10f      	bne.n	801dc3c <__swsetup_r+0x3c>
 801dc1c:	686c      	ldr	r4, [r5, #4]
 801dc1e:	89a3      	ldrh	r3, [r4, #12]
 801dc20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dc24:	0719      	lsls	r1, r3, #28
 801dc26:	d42c      	bmi.n	801dc82 <__swsetup_r+0x82>
 801dc28:	06dd      	lsls	r5, r3, #27
 801dc2a:	d411      	bmi.n	801dc50 <__swsetup_r+0x50>
 801dc2c:	2309      	movs	r3, #9
 801dc2e:	6033      	str	r3, [r6, #0]
 801dc30:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801dc34:	81a3      	strh	r3, [r4, #12]
 801dc36:	f04f 30ff 	mov.w	r0, #4294967295
 801dc3a:	e03e      	b.n	801dcba <__swsetup_r+0xba>
 801dc3c:	4b25      	ldr	r3, [pc, #148]	; (801dcd4 <__swsetup_r+0xd4>)
 801dc3e:	429c      	cmp	r4, r3
 801dc40:	d101      	bne.n	801dc46 <__swsetup_r+0x46>
 801dc42:	68ac      	ldr	r4, [r5, #8]
 801dc44:	e7eb      	b.n	801dc1e <__swsetup_r+0x1e>
 801dc46:	4b24      	ldr	r3, [pc, #144]	; (801dcd8 <__swsetup_r+0xd8>)
 801dc48:	429c      	cmp	r4, r3
 801dc4a:	bf08      	it	eq
 801dc4c:	68ec      	ldreq	r4, [r5, #12]
 801dc4e:	e7e6      	b.n	801dc1e <__swsetup_r+0x1e>
 801dc50:	0758      	lsls	r0, r3, #29
 801dc52:	d512      	bpl.n	801dc7a <__swsetup_r+0x7a>
 801dc54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801dc56:	b141      	cbz	r1, 801dc6a <__swsetup_r+0x6a>
 801dc58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801dc5c:	4299      	cmp	r1, r3
 801dc5e:	d002      	beq.n	801dc66 <__swsetup_r+0x66>
 801dc60:	4630      	mov	r0, r6
 801dc62:	f7ff f95b 	bl	801cf1c <_free_r>
 801dc66:	2300      	movs	r3, #0
 801dc68:	6363      	str	r3, [r4, #52]	; 0x34
 801dc6a:	89a3      	ldrh	r3, [r4, #12]
 801dc6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801dc70:	81a3      	strh	r3, [r4, #12]
 801dc72:	2300      	movs	r3, #0
 801dc74:	6063      	str	r3, [r4, #4]
 801dc76:	6923      	ldr	r3, [r4, #16]
 801dc78:	6023      	str	r3, [r4, #0]
 801dc7a:	89a3      	ldrh	r3, [r4, #12]
 801dc7c:	f043 0308 	orr.w	r3, r3, #8
 801dc80:	81a3      	strh	r3, [r4, #12]
 801dc82:	6923      	ldr	r3, [r4, #16]
 801dc84:	b94b      	cbnz	r3, 801dc9a <__swsetup_r+0x9a>
 801dc86:	89a3      	ldrh	r3, [r4, #12]
 801dc88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801dc8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801dc90:	d003      	beq.n	801dc9a <__swsetup_r+0x9a>
 801dc92:	4621      	mov	r1, r4
 801dc94:	4630      	mov	r0, r6
 801dc96:	f000 f84d 	bl	801dd34 <__smakebuf_r>
 801dc9a:	89a0      	ldrh	r0, [r4, #12]
 801dc9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dca0:	f010 0301 	ands.w	r3, r0, #1
 801dca4:	d00a      	beq.n	801dcbc <__swsetup_r+0xbc>
 801dca6:	2300      	movs	r3, #0
 801dca8:	60a3      	str	r3, [r4, #8]
 801dcaa:	6963      	ldr	r3, [r4, #20]
 801dcac:	425b      	negs	r3, r3
 801dcae:	61a3      	str	r3, [r4, #24]
 801dcb0:	6923      	ldr	r3, [r4, #16]
 801dcb2:	b943      	cbnz	r3, 801dcc6 <__swsetup_r+0xc6>
 801dcb4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801dcb8:	d1ba      	bne.n	801dc30 <__swsetup_r+0x30>
 801dcba:	bd70      	pop	{r4, r5, r6, pc}
 801dcbc:	0781      	lsls	r1, r0, #30
 801dcbe:	bf58      	it	pl
 801dcc0:	6963      	ldrpl	r3, [r4, #20]
 801dcc2:	60a3      	str	r3, [r4, #8]
 801dcc4:	e7f4      	b.n	801dcb0 <__swsetup_r+0xb0>
 801dcc6:	2000      	movs	r0, #0
 801dcc8:	e7f7      	b.n	801dcba <__swsetup_r+0xba>
 801dcca:	bf00      	nop
 801dccc:	24000100 	.word	0x24000100
 801dcd0:	0801e914 	.word	0x0801e914
 801dcd4:	0801e934 	.word	0x0801e934
 801dcd8:	0801e8f4 	.word	0x0801e8f4

0801dcdc <abort>:
 801dcdc:	b508      	push	{r3, lr}
 801dcde:	2006      	movs	r0, #6
 801dce0:	f000 f898 	bl	801de14 <raise>
 801dce4:	2001      	movs	r0, #1
 801dce6:	f7e5 f923 	bl	8002f30 <_exit>

0801dcea <__swhatbuf_r>:
 801dcea:	b570      	push	{r4, r5, r6, lr}
 801dcec:	460e      	mov	r6, r1
 801dcee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dcf2:	2900      	cmp	r1, #0
 801dcf4:	b096      	sub	sp, #88	; 0x58
 801dcf6:	4614      	mov	r4, r2
 801dcf8:	461d      	mov	r5, r3
 801dcfa:	da08      	bge.n	801dd0e <__swhatbuf_r+0x24>
 801dcfc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801dd00:	2200      	movs	r2, #0
 801dd02:	602a      	str	r2, [r5, #0]
 801dd04:	061a      	lsls	r2, r3, #24
 801dd06:	d410      	bmi.n	801dd2a <__swhatbuf_r+0x40>
 801dd08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801dd0c:	e00e      	b.n	801dd2c <__swhatbuf_r+0x42>
 801dd0e:	466a      	mov	r2, sp
 801dd10:	f000 f89c 	bl	801de4c <_fstat_r>
 801dd14:	2800      	cmp	r0, #0
 801dd16:	dbf1      	blt.n	801dcfc <__swhatbuf_r+0x12>
 801dd18:	9a01      	ldr	r2, [sp, #4]
 801dd1a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801dd1e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801dd22:	425a      	negs	r2, r3
 801dd24:	415a      	adcs	r2, r3
 801dd26:	602a      	str	r2, [r5, #0]
 801dd28:	e7ee      	b.n	801dd08 <__swhatbuf_r+0x1e>
 801dd2a:	2340      	movs	r3, #64	; 0x40
 801dd2c:	2000      	movs	r0, #0
 801dd2e:	6023      	str	r3, [r4, #0]
 801dd30:	b016      	add	sp, #88	; 0x58
 801dd32:	bd70      	pop	{r4, r5, r6, pc}

0801dd34 <__smakebuf_r>:
 801dd34:	898b      	ldrh	r3, [r1, #12]
 801dd36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801dd38:	079d      	lsls	r5, r3, #30
 801dd3a:	4606      	mov	r6, r0
 801dd3c:	460c      	mov	r4, r1
 801dd3e:	d507      	bpl.n	801dd50 <__smakebuf_r+0x1c>
 801dd40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801dd44:	6023      	str	r3, [r4, #0]
 801dd46:	6123      	str	r3, [r4, #16]
 801dd48:	2301      	movs	r3, #1
 801dd4a:	6163      	str	r3, [r4, #20]
 801dd4c:	b002      	add	sp, #8
 801dd4e:	bd70      	pop	{r4, r5, r6, pc}
 801dd50:	ab01      	add	r3, sp, #4
 801dd52:	466a      	mov	r2, sp
 801dd54:	f7ff ffc9 	bl	801dcea <__swhatbuf_r>
 801dd58:	9900      	ldr	r1, [sp, #0]
 801dd5a:	4605      	mov	r5, r0
 801dd5c:	4630      	mov	r0, r6
 801dd5e:	f7ff f949 	bl	801cff4 <_malloc_r>
 801dd62:	b948      	cbnz	r0, 801dd78 <__smakebuf_r+0x44>
 801dd64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dd68:	059a      	lsls	r2, r3, #22
 801dd6a:	d4ef      	bmi.n	801dd4c <__smakebuf_r+0x18>
 801dd6c:	f023 0303 	bic.w	r3, r3, #3
 801dd70:	f043 0302 	orr.w	r3, r3, #2
 801dd74:	81a3      	strh	r3, [r4, #12]
 801dd76:	e7e3      	b.n	801dd40 <__smakebuf_r+0xc>
 801dd78:	4b0d      	ldr	r3, [pc, #52]	; (801ddb0 <__smakebuf_r+0x7c>)
 801dd7a:	62b3      	str	r3, [r6, #40]	; 0x28
 801dd7c:	89a3      	ldrh	r3, [r4, #12]
 801dd7e:	6020      	str	r0, [r4, #0]
 801dd80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801dd84:	81a3      	strh	r3, [r4, #12]
 801dd86:	9b00      	ldr	r3, [sp, #0]
 801dd88:	6163      	str	r3, [r4, #20]
 801dd8a:	9b01      	ldr	r3, [sp, #4]
 801dd8c:	6120      	str	r0, [r4, #16]
 801dd8e:	b15b      	cbz	r3, 801dda8 <__smakebuf_r+0x74>
 801dd90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dd94:	4630      	mov	r0, r6
 801dd96:	f000 f86b 	bl	801de70 <_isatty_r>
 801dd9a:	b128      	cbz	r0, 801dda8 <__smakebuf_r+0x74>
 801dd9c:	89a3      	ldrh	r3, [r4, #12]
 801dd9e:	f023 0303 	bic.w	r3, r3, #3
 801dda2:	f043 0301 	orr.w	r3, r3, #1
 801dda6:	81a3      	strh	r3, [r4, #12]
 801dda8:	89a0      	ldrh	r0, [r4, #12]
 801ddaa:	4305      	orrs	r5, r0
 801ddac:	81a5      	strh	r5, [r4, #12]
 801ddae:	e7cd      	b.n	801dd4c <__smakebuf_r+0x18>
 801ddb0:	0801d635 	.word	0x0801d635

0801ddb4 <_malloc_usable_size_r>:
 801ddb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ddb8:	1f18      	subs	r0, r3, #4
 801ddba:	2b00      	cmp	r3, #0
 801ddbc:	bfbc      	itt	lt
 801ddbe:	580b      	ldrlt	r3, [r1, r0]
 801ddc0:	18c0      	addlt	r0, r0, r3
 801ddc2:	4770      	bx	lr

0801ddc4 <_raise_r>:
 801ddc4:	291f      	cmp	r1, #31
 801ddc6:	b538      	push	{r3, r4, r5, lr}
 801ddc8:	4604      	mov	r4, r0
 801ddca:	460d      	mov	r5, r1
 801ddcc:	d904      	bls.n	801ddd8 <_raise_r+0x14>
 801ddce:	2316      	movs	r3, #22
 801ddd0:	6003      	str	r3, [r0, #0]
 801ddd2:	f04f 30ff 	mov.w	r0, #4294967295
 801ddd6:	bd38      	pop	{r3, r4, r5, pc}
 801ddd8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ddda:	b112      	cbz	r2, 801dde2 <_raise_r+0x1e>
 801dddc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801dde0:	b94b      	cbnz	r3, 801ddf6 <_raise_r+0x32>
 801dde2:	4620      	mov	r0, r4
 801dde4:	f000 f830 	bl	801de48 <_getpid_r>
 801dde8:	462a      	mov	r2, r5
 801ddea:	4601      	mov	r1, r0
 801ddec:	4620      	mov	r0, r4
 801ddee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ddf2:	f000 b817 	b.w	801de24 <_kill_r>
 801ddf6:	2b01      	cmp	r3, #1
 801ddf8:	d00a      	beq.n	801de10 <_raise_r+0x4c>
 801ddfa:	1c59      	adds	r1, r3, #1
 801ddfc:	d103      	bne.n	801de06 <_raise_r+0x42>
 801ddfe:	2316      	movs	r3, #22
 801de00:	6003      	str	r3, [r0, #0]
 801de02:	2001      	movs	r0, #1
 801de04:	e7e7      	b.n	801ddd6 <_raise_r+0x12>
 801de06:	2400      	movs	r4, #0
 801de08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801de0c:	4628      	mov	r0, r5
 801de0e:	4798      	blx	r3
 801de10:	2000      	movs	r0, #0
 801de12:	e7e0      	b.n	801ddd6 <_raise_r+0x12>

0801de14 <raise>:
 801de14:	4b02      	ldr	r3, [pc, #8]	; (801de20 <raise+0xc>)
 801de16:	4601      	mov	r1, r0
 801de18:	6818      	ldr	r0, [r3, #0]
 801de1a:	f7ff bfd3 	b.w	801ddc4 <_raise_r>
 801de1e:	bf00      	nop
 801de20:	24000100 	.word	0x24000100

0801de24 <_kill_r>:
 801de24:	b538      	push	{r3, r4, r5, lr}
 801de26:	4d07      	ldr	r5, [pc, #28]	; (801de44 <_kill_r+0x20>)
 801de28:	2300      	movs	r3, #0
 801de2a:	4604      	mov	r4, r0
 801de2c:	4608      	mov	r0, r1
 801de2e:	4611      	mov	r1, r2
 801de30:	602b      	str	r3, [r5, #0]
 801de32:	f7e5 f86d 	bl	8002f10 <_kill>
 801de36:	1c43      	adds	r3, r0, #1
 801de38:	d102      	bne.n	801de40 <_kill_r+0x1c>
 801de3a:	682b      	ldr	r3, [r5, #0]
 801de3c:	b103      	cbz	r3, 801de40 <_kill_r+0x1c>
 801de3e:	6023      	str	r3, [r4, #0]
 801de40:	bd38      	pop	{r3, r4, r5, pc}
 801de42:	bf00      	nop
 801de44:	240034f8 	.word	0x240034f8

0801de48 <_getpid_r>:
 801de48:	f7e5 b85a 	b.w	8002f00 <_getpid>

0801de4c <_fstat_r>:
 801de4c:	b538      	push	{r3, r4, r5, lr}
 801de4e:	4d07      	ldr	r5, [pc, #28]	; (801de6c <_fstat_r+0x20>)
 801de50:	2300      	movs	r3, #0
 801de52:	4604      	mov	r4, r0
 801de54:	4608      	mov	r0, r1
 801de56:	4611      	mov	r1, r2
 801de58:	602b      	str	r3, [r5, #0]
 801de5a:	f7e5 f8b8 	bl	8002fce <_fstat>
 801de5e:	1c43      	adds	r3, r0, #1
 801de60:	d102      	bne.n	801de68 <_fstat_r+0x1c>
 801de62:	682b      	ldr	r3, [r5, #0]
 801de64:	b103      	cbz	r3, 801de68 <_fstat_r+0x1c>
 801de66:	6023      	str	r3, [r4, #0]
 801de68:	bd38      	pop	{r3, r4, r5, pc}
 801de6a:	bf00      	nop
 801de6c:	240034f8 	.word	0x240034f8

0801de70 <_isatty_r>:
 801de70:	b538      	push	{r3, r4, r5, lr}
 801de72:	4d06      	ldr	r5, [pc, #24]	; (801de8c <_isatty_r+0x1c>)
 801de74:	2300      	movs	r3, #0
 801de76:	4604      	mov	r4, r0
 801de78:	4608      	mov	r0, r1
 801de7a:	602b      	str	r3, [r5, #0]
 801de7c:	f7e5 f8b7 	bl	8002fee <_isatty>
 801de80:	1c43      	adds	r3, r0, #1
 801de82:	d102      	bne.n	801de8a <_isatty_r+0x1a>
 801de84:	682b      	ldr	r3, [r5, #0]
 801de86:	b103      	cbz	r3, 801de8a <_isatty_r+0x1a>
 801de88:	6023      	str	r3, [r4, #0]
 801de8a:	bd38      	pop	{r3, r4, r5, pc}
 801de8c:	240034f8 	.word	0x240034f8

0801de90 <_init>:
 801de90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de92:	bf00      	nop
 801de94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801de96:	bc08      	pop	{r3}
 801de98:	469e      	mov	lr, r3
 801de9a:	4770      	bx	lr

0801de9c <_fini>:
 801de9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de9e:	bf00      	nop
 801dea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801dea2:	bc08      	pop	{r3}
 801dea4:	469e      	mov	lr, r3
 801dea6:	4770      	bx	lr
