
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a8f4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  0801abc8  0801abc8  0002abc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801b1fc  0801b1fc  0002b1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801b204  0801b204  0002b204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801b208  0801b208  0002b208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002d4  24000000  0801b20c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00002650  240002d8  0801b4e0  000302d8  2**3
                  ALLOC
  8 ._user_heap_stack 00000c00  24002928  0801b4e0  00032928  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY
 10 .debug_info   00037e31  00000000  00000000  00030302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000615f  00000000  00000000  00068133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002b80  00000000  00000000  0006e298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002908  00000000  00000000  00070e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003efb5  00000000  00000000  00073720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00039ed1  00000000  00000000  000b26d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017ea99  00000000  00000000  000ec5a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0026b03f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000d1b8  00000000  00000000  0026b090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240002d8 	.word	0x240002d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801abac 	.word	0x0801abac

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240002dc 	.word	0x240002dc
 800030c:	0801abac 	.word	0x0801abac

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_drsub>:
 80003c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003c4:	e002      	b.n	80003cc <__adddf3>
 80003c6:	bf00      	nop

080003c8 <__aeabi_dsub>:
 80003c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003cc <__adddf3>:
 80003cc:	b530      	push	{r4, r5, lr}
 80003ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	bf1f      	itttt	ne
 80003e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f2:	f000 80e2 	beq.w	80005ba <__adddf3+0x1ee>
 80003f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003fe:	bfb8      	it	lt
 8000400:	426d      	neglt	r5, r5
 8000402:	dd0c      	ble.n	800041e <__adddf3+0x52>
 8000404:	442c      	add	r4, r5
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	ea82 0000 	eor.w	r0, r2, r0
 8000412:	ea83 0101 	eor.w	r1, r3, r1
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	2d36      	cmp	r5, #54	; 0x36
 8000420:	bf88      	it	hi
 8000422:	bd30      	pophi	{r4, r5, pc}
 8000424:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000428:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800042c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000430:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000434:	d002      	beq.n	800043c <__adddf3+0x70>
 8000436:	4240      	negs	r0, r0
 8000438:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800043c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000440:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000444:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000448:	d002      	beq.n	8000450 <__adddf3+0x84>
 800044a:	4252      	negs	r2, r2
 800044c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000450:	ea94 0f05 	teq	r4, r5
 8000454:	f000 80a7 	beq.w	80005a6 <__adddf3+0x1da>
 8000458:	f1a4 0401 	sub.w	r4, r4, #1
 800045c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000460:	db0d      	blt.n	800047e <__adddf3+0xb2>
 8000462:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000466:	fa22 f205 	lsr.w	r2, r2, r5
 800046a:	1880      	adds	r0, r0, r2
 800046c:	f141 0100 	adc.w	r1, r1, #0
 8000470:	fa03 f20e 	lsl.w	r2, r3, lr
 8000474:	1880      	adds	r0, r0, r2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	4159      	adcs	r1, r3
 800047c:	e00e      	b.n	800049c <__adddf3+0xd0>
 800047e:	f1a5 0520 	sub.w	r5, r5, #32
 8000482:	f10e 0e20 	add.w	lr, lr, #32
 8000486:	2a01      	cmp	r2, #1
 8000488:	fa03 fc0e 	lsl.w	ip, r3, lr
 800048c:	bf28      	it	cs
 800048e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000492:	fa43 f305 	asr.w	r3, r3, r5
 8000496:	18c0      	adds	r0, r0, r3
 8000498:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800049c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004a0:	d507      	bpl.n	80004b2 <__adddf3+0xe6>
 80004a2:	f04f 0e00 	mov.w	lr, #0
 80004a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80004b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004b6:	d31b      	bcc.n	80004f0 <__adddf3+0x124>
 80004b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004bc:	d30c      	bcc.n	80004d8 <__adddf3+0x10c>
 80004be:	0849      	lsrs	r1, r1, #1
 80004c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004c8:	f104 0401 	add.w	r4, r4, #1
 80004cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004d4:	f080 809a 	bcs.w	800060c <__adddf3+0x240>
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	bf08      	it	eq
 80004de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004e2:	f150 0000 	adcs.w	r0, r0, #0
 80004e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ea:	ea41 0105 	orr.w	r1, r1, r5
 80004ee:	bd30      	pop	{r4, r5, pc}
 80004f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004f4:	4140      	adcs	r0, r0
 80004f6:	eb41 0101 	adc.w	r1, r1, r1
 80004fa:	3c01      	subs	r4, #1
 80004fc:	bf28      	it	cs
 80004fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000502:	d2e9      	bcs.n	80004d8 <__adddf3+0x10c>
 8000504:	f091 0f00 	teq	r1, #0
 8000508:	bf04      	itt	eq
 800050a:	4601      	moveq	r1, r0
 800050c:	2000      	moveq	r0, #0
 800050e:	fab1 f381 	clz	r3, r1
 8000512:	bf08      	it	eq
 8000514:	3320      	addeq	r3, #32
 8000516:	f1a3 030b 	sub.w	r3, r3, #11
 800051a:	f1b3 0220 	subs.w	r2, r3, #32
 800051e:	da0c      	bge.n	800053a <__adddf3+0x16e>
 8000520:	320c      	adds	r2, #12
 8000522:	dd08      	ble.n	8000536 <__adddf3+0x16a>
 8000524:	f102 0c14 	add.w	ip, r2, #20
 8000528:	f1c2 020c 	rsb	r2, r2, #12
 800052c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000530:	fa21 f102 	lsr.w	r1, r1, r2
 8000534:	e00c      	b.n	8000550 <__adddf3+0x184>
 8000536:	f102 0214 	add.w	r2, r2, #20
 800053a:	bfd8      	it	le
 800053c:	f1c2 0c20 	rsble	ip, r2, #32
 8000540:	fa01 f102 	lsl.w	r1, r1, r2
 8000544:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000548:	bfdc      	itt	le
 800054a:	ea41 010c 	orrle.w	r1, r1, ip
 800054e:	4090      	lslle	r0, r2
 8000550:	1ae4      	subs	r4, r4, r3
 8000552:	bfa2      	ittt	ge
 8000554:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000558:	4329      	orrge	r1, r5
 800055a:	bd30      	popge	{r4, r5, pc}
 800055c:	ea6f 0404 	mvn.w	r4, r4
 8000560:	3c1f      	subs	r4, #31
 8000562:	da1c      	bge.n	800059e <__adddf3+0x1d2>
 8000564:	340c      	adds	r4, #12
 8000566:	dc0e      	bgt.n	8000586 <__adddf3+0x1ba>
 8000568:	f104 0414 	add.w	r4, r4, #20
 800056c:	f1c4 0220 	rsb	r2, r4, #32
 8000570:	fa20 f004 	lsr.w	r0, r0, r4
 8000574:	fa01 f302 	lsl.w	r3, r1, r2
 8000578:	ea40 0003 	orr.w	r0, r0, r3
 800057c:	fa21 f304 	lsr.w	r3, r1, r4
 8000580:	ea45 0103 	orr.w	r1, r5, r3
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f1c4 040c 	rsb	r4, r4, #12
 800058a:	f1c4 0220 	rsb	r2, r4, #32
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	fa01 f304 	lsl.w	r3, r1, r4
 8000596:	ea40 0003 	orr.w	r0, r0, r3
 800059a:	4629      	mov	r1, r5
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	fa21 f004 	lsr.w	r0, r1, r4
 80005a2:	4629      	mov	r1, r5
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f094 0f00 	teq	r4, #0
 80005aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ae:	bf06      	itte	eq
 80005b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005b4:	3401      	addeq	r4, #1
 80005b6:	3d01      	subne	r5, #1
 80005b8:	e74e      	b.n	8000458 <__adddf3+0x8c>
 80005ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005be:	bf18      	it	ne
 80005c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005c4:	d029      	beq.n	800061a <__adddf3+0x24e>
 80005c6:	ea94 0f05 	teq	r4, r5
 80005ca:	bf08      	it	eq
 80005cc:	ea90 0f02 	teqeq	r0, r2
 80005d0:	d005      	beq.n	80005de <__adddf3+0x212>
 80005d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005d6:	bf04      	itt	eq
 80005d8:	4619      	moveq	r1, r3
 80005da:	4610      	moveq	r0, r2
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	ea91 0f03 	teq	r1, r3
 80005e2:	bf1e      	ittt	ne
 80005e4:	2100      	movne	r1, #0
 80005e6:	2000      	movne	r0, #0
 80005e8:	bd30      	popne	{r4, r5, pc}
 80005ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ee:	d105      	bne.n	80005fc <__adddf3+0x230>
 80005f0:	0040      	lsls	r0, r0, #1
 80005f2:	4149      	adcs	r1, r1
 80005f4:	bf28      	it	cs
 80005f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005fa:	bd30      	pop	{r4, r5, pc}
 80005fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000600:	bf3c      	itt	cc
 8000602:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000606:	bd30      	popcc	{r4, r5, pc}
 8000608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800060c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000610:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000614:	f04f 0000 	mov.w	r0, #0
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061e:	bf1a      	itte	ne
 8000620:	4619      	movne	r1, r3
 8000622:	4610      	movne	r0, r2
 8000624:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000628:	bf1c      	itt	ne
 800062a:	460b      	movne	r3, r1
 800062c:	4602      	movne	r2, r0
 800062e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000632:	bf06      	itte	eq
 8000634:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000638:	ea91 0f03 	teqeq	r1, r3
 800063c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	bf00      	nop

08000644 <__aeabi_ui2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000658:	f04f 0500 	mov.w	r5, #0
 800065c:	f04f 0100 	mov.w	r1, #0
 8000660:	e750      	b.n	8000504 <__adddf3+0x138>
 8000662:	bf00      	nop

08000664 <__aeabi_i2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800067c:	bf48      	it	mi
 800067e:	4240      	negmi	r0, r0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e73e      	b.n	8000504 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_f2d>:
 8000688:	0042      	lsls	r2, r0, #1
 800068a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800068e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000692:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000696:	bf1f      	itttt	ne
 8000698:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800069c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006a4:	4770      	bxne	lr
 80006a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006aa:	bf08      	it	eq
 80006ac:	4770      	bxeq	lr
 80006ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006b2:	bf04      	itt	eq
 80006b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	e71c      	b.n	8000504 <__adddf3+0x138>
 80006ca:	bf00      	nop

080006cc <__aeabi_ul2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f04f 0500 	mov.w	r5, #0
 80006da:	e00a      	b.n	80006f2 <__aeabi_l2d+0x16>

080006dc <__aeabi_l2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006ea:	d502      	bpl.n	80006f2 <__aeabi_l2d+0x16>
 80006ec:	4240      	negs	r0, r0
 80006ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006fe:	f43f aed8 	beq.w	80004b2 <__adddf3+0xe6>
 8000702:	f04f 0203 	mov.w	r2, #3
 8000706:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800070a:	bf18      	it	ne
 800070c:	3203      	addne	r2, #3
 800070e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000712:	bf18      	it	ne
 8000714:	3203      	addne	r2, #3
 8000716:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800071a:	f1c2 0320 	rsb	r3, r2, #32
 800071e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 fe03 	lsl.w	lr, r1, r3
 800072a:	ea40 000e 	orr.w	r0, r0, lr
 800072e:	fa21 f102 	lsr.w	r1, r1, r2
 8000732:	4414      	add	r4, r2
 8000734:	e6bd      	b.n	80004b2 <__adddf3+0xe6>
 8000736:	bf00      	nop

08000738 <__aeabi_uldivmod>:
 8000738:	b953      	cbnz	r3, 8000750 <__aeabi_uldivmod+0x18>
 800073a:	b94a      	cbnz	r2, 8000750 <__aeabi_uldivmod+0x18>
 800073c:	2900      	cmp	r1, #0
 800073e:	bf08      	it	eq
 8000740:	2800      	cmpeq	r0, #0
 8000742:	bf1c      	itt	ne
 8000744:	f04f 31ff 	movne.w	r1, #4294967295
 8000748:	f04f 30ff 	movne.w	r0, #4294967295
 800074c:	f000 b9ac 	b.w	8000aa8 <__aeabi_idiv0>
 8000750:	f1ad 0c08 	sub.w	ip, sp, #8
 8000754:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000758:	f000 f83e 	bl	80007d8 <__udivmoddi4>
 800075c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000760:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000764:	b004      	add	sp, #16
 8000766:	4770      	bx	lr

08000768 <__aeabi_d2lz>:
 8000768:	b508      	push	{r3, lr}
 800076a:	4602      	mov	r2, r0
 800076c:	460b      	mov	r3, r1
 800076e:	ec43 2b17 	vmov	d7, r2, r3
 8000772:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800077a:	d403      	bmi.n	8000784 <__aeabi_d2lz+0x1c>
 800077c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000780:	f000 b80a 	b.w	8000798 <__aeabi_d2ulz>
 8000784:	eeb1 7b47 	vneg.f64	d7, d7
 8000788:	ec51 0b17 	vmov	r0, r1, d7
 800078c:	f000 f804 	bl	8000798 <__aeabi_d2ulz>
 8000790:	4240      	negs	r0, r0
 8000792:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000796:	bd08      	pop	{r3, pc}

08000798 <__aeabi_d2ulz>:
 8000798:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80007c8 <__aeabi_d2ulz+0x30>
 800079c:	ec41 0b17 	vmov	d7, r0, r1
 80007a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80007d0 <__aeabi_d2ulz+0x38>
 80007a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80007a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80007ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80007b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80007b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80007b8:	ee16 1a10 	vmov	r1, s12
 80007bc:	ee17 0a90 	vmov	r0, s15
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	f3af 8000 	nop.w
 80007c8:	00000000 	.word	0x00000000
 80007cc:	3df00000 	.word	0x3df00000
 80007d0:	00000000 	.word	0x00000000
 80007d4:	41f00000 	.word	0x41f00000

080007d8 <__udivmoddi4>:
 80007d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007dc:	9d08      	ldr	r5, [sp, #32]
 80007de:	4604      	mov	r4, r0
 80007e0:	468e      	mov	lr, r1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d14d      	bne.n	8000882 <__udivmoddi4+0xaa>
 80007e6:	428a      	cmp	r2, r1
 80007e8:	4694      	mov	ip, r2
 80007ea:	d969      	bls.n	80008c0 <__udivmoddi4+0xe8>
 80007ec:	fab2 f282 	clz	r2, r2
 80007f0:	b152      	cbz	r2, 8000808 <__udivmoddi4+0x30>
 80007f2:	fa01 f302 	lsl.w	r3, r1, r2
 80007f6:	f1c2 0120 	rsb	r1, r2, #32
 80007fa:	fa20 f101 	lsr.w	r1, r0, r1
 80007fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000802:	ea41 0e03 	orr.w	lr, r1, r3
 8000806:	4094      	lsls	r4, r2
 8000808:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800080c:	0c21      	lsrs	r1, r4, #16
 800080e:	fbbe f6f8 	udiv	r6, lr, r8
 8000812:	fa1f f78c 	uxth.w	r7, ip
 8000816:	fb08 e316 	mls	r3, r8, r6, lr
 800081a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800081e:	fb06 f107 	mul.w	r1, r6, r7
 8000822:	4299      	cmp	r1, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x64>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f106 30ff 	add.w	r0, r6, #4294967295
 800082e:	f080 811f 	bcs.w	8000a70 <__udivmoddi4+0x298>
 8000832:	4299      	cmp	r1, r3
 8000834:	f240 811c 	bls.w	8000a70 <__udivmoddi4+0x298>
 8000838:	3e02      	subs	r6, #2
 800083a:	4463      	add	r3, ip
 800083c:	1a5b      	subs	r3, r3, r1
 800083e:	b2a4      	uxth	r4, r4
 8000840:	fbb3 f0f8 	udiv	r0, r3, r8
 8000844:	fb08 3310 	mls	r3, r8, r0, r3
 8000848:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800084c:	fb00 f707 	mul.w	r7, r0, r7
 8000850:	42a7      	cmp	r7, r4
 8000852:	d90a      	bls.n	800086a <__udivmoddi4+0x92>
 8000854:	eb1c 0404 	adds.w	r4, ip, r4
 8000858:	f100 33ff 	add.w	r3, r0, #4294967295
 800085c:	f080 810a 	bcs.w	8000a74 <__udivmoddi4+0x29c>
 8000860:	42a7      	cmp	r7, r4
 8000862:	f240 8107 	bls.w	8000a74 <__udivmoddi4+0x29c>
 8000866:	4464      	add	r4, ip
 8000868:	3802      	subs	r0, #2
 800086a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800086e:	1be4      	subs	r4, r4, r7
 8000870:	2600      	movs	r6, #0
 8000872:	b11d      	cbz	r5, 800087c <__udivmoddi4+0xa4>
 8000874:	40d4      	lsrs	r4, r2
 8000876:	2300      	movs	r3, #0
 8000878:	e9c5 4300 	strd	r4, r3, [r5]
 800087c:	4631      	mov	r1, r6
 800087e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000882:	428b      	cmp	r3, r1
 8000884:	d909      	bls.n	800089a <__udivmoddi4+0xc2>
 8000886:	2d00      	cmp	r5, #0
 8000888:	f000 80ef 	beq.w	8000a6a <__udivmoddi4+0x292>
 800088c:	2600      	movs	r6, #0
 800088e:	e9c5 0100 	strd	r0, r1, [r5]
 8000892:	4630      	mov	r0, r6
 8000894:	4631      	mov	r1, r6
 8000896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800089a:	fab3 f683 	clz	r6, r3
 800089e:	2e00      	cmp	r6, #0
 80008a0:	d14a      	bne.n	8000938 <__udivmoddi4+0x160>
 80008a2:	428b      	cmp	r3, r1
 80008a4:	d302      	bcc.n	80008ac <__udivmoddi4+0xd4>
 80008a6:	4282      	cmp	r2, r0
 80008a8:	f200 80f9 	bhi.w	8000a9e <__udivmoddi4+0x2c6>
 80008ac:	1a84      	subs	r4, r0, r2
 80008ae:	eb61 0303 	sbc.w	r3, r1, r3
 80008b2:	2001      	movs	r0, #1
 80008b4:	469e      	mov	lr, r3
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d0e0      	beq.n	800087c <__udivmoddi4+0xa4>
 80008ba:	e9c5 4e00 	strd	r4, lr, [r5]
 80008be:	e7dd      	b.n	800087c <__udivmoddi4+0xa4>
 80008c0:	b902      	cbnz	r2, 80008c4 <__udivmoddi4+0xec>
 80008c2:	deff      	udf	#255	; 0xff
 80008c4:	fab2 f282 	clz	r2, r2
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	f040 8092 	bne.w	80009f2 <__udivmoddi4+0x21a>
 80008ce:	eba1 010c 	sub.w	r1, r1, ip
 80008d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008d6:	fa1f fe8c 	uxth.w	lr, ip
 80008da:	2601      	movs	r6, #1
 80008dc:	0c20      	lsrs	r0, r4, #16
 80008de:	fbb1 f3f7 	udiv	r3, r1, r7
 80008e2:	fb07 1113 	mls	r1, r7, r3, r1
 80008e6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80008ea:	fb0e f003 	mul.w	r0, lr, r3
 80008ee:	4288      	cmp	r0, r1
 80008f0:	d908      	bls.n	8000904 <__udivmoddi4+0x12c>
 80008f2:	eb1c 0101 	adds.w	r1, ip, r1
 80008f6:	f103 38ff 	add.w	r8, r3, #4294967295
 80008fa:	d202      	bcs.n	8000902 <__udivmoddi4+0x12a>
 80008fc:	4288      	cmp	r0, r1
 80008fe:	f200 80cb 	bhi.w	8000a98 <__udivmoddi4+0x2c0>
 8000902:	4643      	mov	r3, r8
 8000904:	1a09      	subs	r1, r1, r0
 8000906:	b2a4      	uxth	r4, r4
 8000908:	fbb1 f0f7 	udiv	r0, r1, r7
 800090c:	fb07 1110 	mls	r1, r7, r0, r1
 8000910:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000914:	fb0e fe00 	mul.w	lr, lr, r0
 8000918:	45a6      	cmp	lr, r4
 800091a:	d908      	bls.n	800092e <__udivmoddi4+0x156>
 800091c:	eb1c 0404 	adds.w	r4, ip, r4
 8000920:	f100 31ff 	add.w	r1, r0, #4294967295
 8000924:	d202      	bcs.n	800092c <__udivmoddi4+0x154>
 8000926:	45a6      	cmp	lr, r4
 8000928:	f200 80bb 	bhi.w	8000aa2 <__udivmoddi4+0x2ca>
 800092c:	4608      	mov	r0, r1
 800092e:	eba4 040e 	sub.w	r4, r4, lr
 8000932:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000936:	e79c      	b.n	8000872 <__udivmoddi4+0x9a>
 8000938:	f1c6 0720 	rsb	r7, r6, #32
 800093c:	40b3      	lsls	r3, r6
 800093e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000942:	ea4c 0c03 	orr.w	ip, ip, r3
 8000946:	fa20 f407 	lsr.w	r4, r0, r7
 800094a:	fa01 f306 	lsl.w	r3, r1, r6
 800094e:	431c      	orrs	r4, r3
 8000950:	40f9      	lsrs	r1, r7
 8000952:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000956:	fa00 f306 	lsl.w	r3, r0, r6
 800095a:	fbb1 f8f9 	udiv	r8, r1, r9
 800095e:	0c20      	lsrs	r0, r4, #16
 8000960:	fa1f fe8c 	uxth.w	lr, ip
 8000964:	fb09 1118 	mls	r1, r9, r8, r1
 8000968:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800096c:	fb08 f00e 	mul.w	r0, r8, lr
 8000970:	4288      	cmp	r0, r1
 8000972:	fa02 f206 	lsl.w	r2, r2, r6
 8000976:	d90b      	bls.n	8000990 <__udivmoddi4+0x1b8>
 8000978:	eb1c 0101 	adds.w	r1, ip, r1
 800097c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000980:	f080 8088 	bcs.w	8000a94 <__udivmoddi4+0x2bc>
 8000984:	4288      	cmp	r0, r1
 8000986:	f240 8085 	bls.w	8000a94 <__udivmoddi4+0x2bc>
 800098a:	f1a8 0802 	sub.w	r8, r8, #2
 800098e:	4461      	add	r1, ip
 8000990:	1a09      	subs	r1, r1, r0
 8000992:	b2a4      	uxth	r4, r4
 8000994:	fbb1 f0f9 	udiv	r0, r1, r9
 8000998:	fb09 1110 	mls	r1, r9, r0, r1
 800099c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009a0:	fb00 fe0e 	mul.w	lr, r0, lr
 80009a4:	458e      	cmp	lr, r1
 80009a6:	d908      	bls.n	80009ba <__udivmoddi4+0x1e2>
 80009a8:	eb1c 0101 	adds.w	r1, ip, r1
 80009ac:	f100 34ff 	add.w	r4, r0, #4294967295
 80009b0:	d26c      	bcs.n	8000a8c <__udivmoddi4+0x2b4>
 80009b2:	458e      	cmp	lr, r1
 80009b4:	d96a      	bls.n	8000a8c <__udivmoddi4+0x2b4>
 80009b6:	3802      	subs	r0, #2
 80009b8:	4461      	add	r1, ip
 80009ba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80009be:	fba0 9402 	umull	r9, r4, r0, r2
 80009c2:	eba1 010e 	sub.w	r1, r1, lr
 80009c6:	42a1      	cmp	r1, r4
 80009c8:	46c8      	mov	r8, r9
 80009ca:	46a6      	mov	lr, r4
 80009cc:	d356      	bcc.n	8000a7c <__udivmoddi4+0x2a4>
 80009ce:	d053      	beq.n	8000a78 <__udivmoddi4+0x2a0>
 80009d0:	b15d      	cbz	r5, 80009ea <__udivmoddi4+0x212>
 80009d2:	ebb3 0208 	subs.w	r2, r3, r8
 80009d6:	eb61 010e 	sbc.w	r1, r1, lr
 80009da:	fa01 f707 	lsl.w	r7, r1, r7
 80009de:	fa22 f306 	lsr.w	r3, r2, r6
 80009e2:	40f1      	lsrs	r1, r6
 80009e4:	431f      	orrs	r7, r3
 80009e6:	e9c5 7100 	strd	r7, r1, [r5]
 80009ea:	2600      	movs	r6, #0
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	f1c2 0320 	rsb	r3, r2, #32
 80009f6:	40d8      	lsrs	r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	fa21 f303 	lsr.w	r3, r1, r3
 8000a00:	4091      	lsls	r1, r2
 8000a02:	4301      	orrs	r1, r0
 8000a04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a08:	fa1f fe8c 	uxth.w	lr, ip
 8000a0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a10:	fb07 3610 	mls	r6, r7, r0, r3
 8000a14:	0c0b      	lsrs	r3, r1, #16
 8000a16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000a1e:	429e      	cmp	r6, r3
 8000a20:	fa04 f402 	lsl.w	r4, r4, r2
 8000a24:	d908      	bls.n	8000a38 <__udivmoddi4+0x260>
 8000a26:	eb1c 0303 	adds.w	r3, ip, r3
 8000a2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a2e:	d22f      	bcs.n	8000a90 <__udivmoddi4+0x2b8>
 8000a30:	429e      	cmp	r6, r3
 8000a32:	d92d      	bls.n	8000a90 <__udivmoddi4+0x2b8>
 8000a34:	3802      	subs	r0, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1b9b      	subs	r3, r3, r6
 8000a3a:	b289      	uxth	r1, r1
 8000a3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a40:	fb07 3316 	mls	r3, r7, r6, r3
 8000a44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a48:	fb06 f30e 	mul.w	r3, r6, lr
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	d908      	bls.n	8000a62 <__udivmoddi4+0x28a>
 8000a50:	eb1c 0101 	adds.w	r1, ip, r1
 8000a54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a58:	d216      	bcs.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5a:	428b      	cmp	r3, r1
 8000a5c:	d914      	bls.n	8000a88 <__udivmoddi4+0x2b0>
 8000a5e:	3e02      	subs	r6, #2
 8000a60:	4461      	add	r1, ip
 8000a62:	1ac9      	subs	r1, r1, r3
 8000a64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000a68:	e738      	b.n	80008dc <__udivmoddi4+0x104>
 8000a6a:	462e      	mov	r6, r5
 8000a6c:	4628      	mov	r0, r5
 8000a6e:	e705      	b.n	800087c <__udivmoddi4+0xa4>
 8000a70:	4606      	mov	r6, r0
 8000a72:	e6e3      	b.n	800083c <__udivmoddi4+0x64>
 8000a74:	4618      	mov	r0, r3
 8000a76:	e6f8      	b.n	800086a <__udivmoddi4+0x92>
 8000a78:	454b      	cmp	r3, r9
 8000a7a:	d2a9      	bcs.n	80009d0 <__udivmoddi4+0x1f8>
 8000a7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000a80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000a84:	3801      	subs	r0, #1
 8000a86:	e7a3      	b.n	80009d0 <__udivmoddi4+0x1f8>
 8000a88:	4646      	mov	r6, r8
 8000a8a:	e7ea      	b.n	8000a62 <__udivmoddi4+0x28a>
 8000a8c:	4620      	mov	r0, r4
 8000a8e:	e794      	b.n	80009ba <__udivmoddi4+0x1e2>
 8000a90:	4640      	mov	r0, r8
 8000a92:	e7d1      	b.n	8000a38 <__udivmoddi4+0x260>
 8000a94:	46d0      	mov	r8, sl
 8000a96:	e77b      	b.n	8000990 <__udivmoddi4+0x1b8>
 8000a98:	3b02      	subs	r3, #2
 8000a9a:	4461      	add	r1, ip
 8000a9c:	e732      	b.n	8000904 <__udivmoddi4+0x12c>
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	e709      	b.n	80008b6 <__udivmoddi4+0xde>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	e742      	b.n	800092e <__udivmoddi4+0x156>

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	460a      	mov	r2, r1
 8000ab6:	71fb      	strb	r3, [r7, #7]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ac2:	480c      	ldr	r0, [pc, #48]	; (8000af4 <HG2_Write_Register+0x48>)
 8000ac4:	f006 fdf8 	bl	80076b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000ac8:	1df9      	adds	r1, r7, #7
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	2201      	movs	r2, #1
 8000ace:	480a      	ldr	r0, [pc, #40]	; (8000af8 <HG2_Write_Register+0x4c>)
 8000ad0:	f00d fb74 	bl	800e1bc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000ad4:	1db9      	adds	r1, r7, #6
 8000ad6:	2364      	movs	r3, #100	; 0x64
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4807      	ldr	r0, [pc, #28]	; (8000af8 <HG2_Write_Register+0x4c>)
 8000adc:	f00d fb6e 	bl	800e1bc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae6:	4803      	ldr	r0, [pc, #12]	; (8000af4 <HG2_Write_Register+0x48>)
 8000ae8:	f006 fde6 	bl	80076b8 <HAL_GPIO_WritePin>

}
 8000aec:	bf00      	nop
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	58020c00 	.word	0x58020c00
 8000af8:	240006bc 	.word	0x240006bc

08000afc <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b16:	480d      	ldr	r0, [pc, #52]	; (8000b4c <LG2_Read_Register+0x50>)
 8000b18:	f006 fdce 	bl	80076b8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b1c:	1df9      	adds	r1, r7, #7
 8000b1e:	2364      	movs	r3, #100	; 0x64
 8000b20:	2201      	movs	r2, #1
 8000b22:	480b      	ldr	r0, [pc, #44]	; (8000b50 <LG2_Read_Register+0x54>)
 8000b24:	f00d fb4a 	bl	800e1bc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000b28:	f107 010f 	add.w	r1, r7, #15
 8000b2c:	2364      	movs	r3, #100	; 0x64
 8000b2e:	2201      	movs	r2, #1
 8000b30:	4807      	ldr	r0, [pc, #28]	; (8000b50 <LG2_Read_Register+0x54>)
 8000b32:	f00d fd3f 	bl	800e5b4 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <LG2_Read_Register+0x50>)
 8000b3e:	f006 fdbb 	bl	80076b8 <HAL_GPIO_WritePin>

	return reg_value;
 8000b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58020c00 	.word	0x58020c00
 8000b50:	240006bc 	.word	0x240006bc

08000b54 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	71fb      	strb	r3, [r7, #7]
 8000b60:	4613      	mov	r3, r2
 8000b62:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b6a:	480c      	ldr	r0, [pc, #48]	; (8000b9c <LG2_Write_Register+0x48>)
 8000b6c:	f006 fda4 	bl	80076b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 8000b70:	1df9      	adds	r1, r7, #7
 8000b72:	2364      	movs	r3, #100	; 0x64
 8000b74:	2201      	movs	r2, #1
 8000b76:	480a      	ldr	r0, [pc, #40]	; (8000ba0 <LG2_Write_Register+0x4c>)
 8000b78:	f00d fb20 	bl	800e1bc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000b7c:	1db9      	adds	r1, r7, #6
 8000b7e:	2364      	movs	r3, #100	; 0x64
 8000b80:	2201      	movs	r2, #1
 8000b82:	4807      	ldr	r0, [pc, #28]	; (8000ba0 <LG2_Write_Register+0x4c>)
 8000b84:	f00d fb1a 	bl	800e1bc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b8e:	4803      	ldr	r0, [pc, #12]	; (8000b9c <LG2_Write_Register+0x48>)
 8000b90:	f006 fd92 	bl	80076b8 <HAL_GPIO_WritePin>

}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	58020c00 	.word	0x58020c00
 8000ba0:	240006bc 	.word	0x240006bc
 8000ba4:	00000000 	.word	0x00000000

08000ba8 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 8000bae:	2022      	movs	r0, #34	; 0x22
 8000bb0:	f7ff ffa4 	bl	8000afc <LG2_Read_Register>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 8000bb8:	2023      	movs	r0, #35	; 0x23
 8000bba:	f7ff ff9f 	bl	8000afc <LG2_Read_Register>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000bc2:	79bb      	ldrb	r3, [r7, #6]
 8000bc4:	021b      	lsls	r3, r3, #8
 8000bc6:	b21a      	sxth	r2, r3
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	4313      	orrs	r3, r2
 8000bce:	80bb      	strh	r3, [r7, #4]
	float omega = (float)Gyro*35.0/1000;
 8000bd0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bd4:	ee07 3a90 	vmov	s15, r3
 8000bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bdc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000be0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000c08 <LG2_Get_Gyro_X+0x60>
 8000be4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000be8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000c10 <LG2_Get_Gyro_X+0x68>
 8000bec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bf0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000bf4:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	ee07 3a90 	vmov	s15, r3
}
 8000bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	00000000 	.word	0x00000000
 8000c0c:	40418000 	.word	0x40418000
 8000c10:	00000000 	.word	0x00000000
 8000c14:	408f4000 	.word	0x408f4000

08000c18 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 8000c1e:	2024      	movs	r0, #36	; 0x24
 8000c20:	f7ff ff6c 	bl	8000afc <LG2_Read_Register>
 8000c24:	4603      	mov	r3, r0
 8000c26:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000c28:	2025      	movs	r0, #37	; 0x25
 8000c2a:	f7ff ff67 	bl	8000afc <LG2_Read_Register>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000c32:	79bb      	ldrb	r3, [r7, #6]
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	b21a      	sxth	r2, r3
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	b21b      	sxth	r3, r3
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	80bb      	strh	r3, [r7, #4]
	float omega = (float)Gyro*35.0/1000;
 8000c40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000c44:	ee07 3a90 	vmov	s15, r3
 8000c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000c50:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000c78 <LG2_Get_Gyro_Y+0x60>
 8000c54:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c58:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000c80 <LG2_Get_Gyro_Y+0x68>
 8000c5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c60:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000c64:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	ee07 3a90 	vmov	s15, r3
}
 8000c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000c72:	3708      	adds	r7, #8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	00000000 	.word	0x00000000
 8000c7c:	40418000 	.word	0x40418000
 8000c80:	00000000 	.word	0x00000000
 8000c84:	408f4000 	.word	0x408f4000

08000c88 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 8000c8e:	2026      	movs	r0, #38	; 0x26
 8000c90:	f7ff ff34 	bl	8000afc <LG2_Read_Register>
 8000c94:	4603      	mov	r3, r0
 8000c96:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 8000c98:	2027      	movs	r0, #39	; 0x27
 8000c9a:	f7ff ff2f 	bl	8000afc <LG2_Read_Register>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 8000ca2:	79bb      	ldrb	r3, [r7, #6]
 8000ca4:	021b      	lsls	r3, r3, #8
 8000ca6:	b21a      	sxth	r2, r3
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	b21b      	sxth	r3, r3
 8000cac:	4313      	orrs	r3, r2
 8000cae:	80bb      	strh	r3, [r7, #4]
	float omega = (float)Gyro*35.0/1000;
 8000cb0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000cb4:	ee07 3a90 	vmov	s15, r3
 8000cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cbc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cc0:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000ce8 <LG2_Get_Gyro_Z+0x60>
 8000cc4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000cc8:	ed9f 5b09 	vldr	d5, [pc, #36]	; 8000cf0 <LG2_Get_Gyro_Z+0x68>
 8000ccc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cd0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cd4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	ee07 3a90 	vmov	s15, r3
}
 8000cde:	eeb0 0a67 	vmov.f32	s0, s15
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	00000000 	.word	0x00000000
 8000cec:	40418000 	.word	0x40418000
 8000cf0:	00000000 	.word	0x00000000
 8000cf4:	408f4000 	.word	0x408f4000

08000cf8 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000d04:	ed97 7a00 	vldr	s14, [r7]
 8000d08:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000d78 <setServo+0x80>
 8000d0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d10:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000d7c <setServo+0x84>
 8000d14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d18:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000d80 <setServo+0x88>
 8000d1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d24:	ee17 3a90 	vmov	r3, s15
 8000d28:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	2b03      	cmp	r3, #3
 8000d30:	d81a      	bhi.n	8000d68 <setServo+0x70>
 8000d32:	a201      	add	r2, pc, #4	; (adr r2, 8000d38 <setServo+0x40>)
 8000d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d38:	08000d49 	.word	0x08000d49
 8000d3c:	08000d51 	.word	0x08000d51
 8000d40:	08000d59 	.word	0x08000d59
 8000d44:	08000d61 	.word	0x08000d61
		case 1:
			TIM4->CCR4 = timerVal;
 8000d48:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <setServo+0x8c>)
 8000d4a:	89fb      	ldrh	r3, [r7, #14]
 8000d4c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000d4e:	e00c      	b.n	8000d6a <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000d50:	4a0c      	ldr	r2, [pc, #48]	; (8000d84 <setServo+0x8c>)
 8000d52:	89fb      	ldrh	r3, [r7, #14]
 8000d54:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000d56:	e008      	b.n	8000d6a <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <setServo+0x8c>)
 8000d5a:	89fb      	ldrh	r3, [r7, #14]
 8000d5c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 8000d5e:	e004      	b.n	8000d6a <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000d60:	4a08      	ldr	r2, [pc, #32]	; (8000d84 <setServo+0x8c>)
 8000d62:	89fb      	ldrh	r3, [r7, #14]
 8000d64:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000d66:	e000      	b.n	8000d6a <setServo+0x72>

		default:
			break;
 8000d68:	bf00      	nop
	}
}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	43340000 	.word	0x43340000
 8000d7c:	457a0000 	.word	0x457a0000
 8000d80:	453b8000 	.word	0x453b8000
 8000d84:	40000800 	.word	0x40000800

08000d88 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <LoRA_Read_Register+0x48>)
 8000d9a:	f006 fc8d 	bl	80076b8 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d9e:	1df9      	adds	r1, r7, #7
 8000da0:	2364      	movs	r3, #100	; 0x64
 8000da2:	2201      	movs	r2, #1
 8000da4:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <LoRA_Read_Register+0x4c>)
 8000da6:	f00d fa09 	bl	800e1bc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000daa:	f107 010f 	add.w	r1, r7, #15
 8000dae:	2364      	movs	r3, #100	; 0x64
 8000db0:	2201      	movs	r2, #1
 8000db2:	4808      	ldr	r0, [pc, #32]	; (8000dd4 <LoRA_Read_Register+0x4c>)
 8000db4:	f00d fbfe 	bl	800e5b4 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000db8:	2201      	movs	r2, #1
 8000dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dbe:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <LoRA_Read_Register+0x48>)
 8000dc0:	f006 fc7a 	bl	80076b8 <HAL_GPIO_WritePin>

	return reg_value;
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	58020000 	.word	0x58020000
 8000dd4:	24000744 	.word	0x24000744

08000dd8 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	460a      	mov	r2, r1
 8000de2:	71fb      	strb	r3, [r7, #7]
 8000de4:	4613      	mov	r3, r2
 8000de6:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000de8:	79fb      	ldrb	r3, [r7, #7]
 8000dea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <LoRA_Write_Register+0x54>)
 8000dfa:	f006 fc5d 	bl	80076b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000dfe:	1df9      	adds	r1, r7, #7
 8000e00:	2364      	movs	r3, #100	; 0x64
 8000e02:	2201      	movs	r2, #1
 8000e04:	480a      	ldr	r0, [pc, #40]	; (8000e30 <LoRA_Write_Register+0x58>)
 8000e06:	f00d f9d9 	bl	800e1bc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000e0a:	1db9      	adds	r1, r7, #6
 8000e0c:	2364      	movs	r3, #100	; 0x64
 8000e0e:	2201      	movs	r2, #1
 8000e10:	4807      	ldr	r0, [pc, #28]	; (8000e30 <LoRA_Write_Register+0x58>)
 8000e12:	f00d f9d3 	bl	800e1bc <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000e16:	2201      	movs	r2, #1
 8000e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <LoRA_Write_Register+0x54>)
 8000e1e:	f006 fc4b 	bl	80076b8 <HAL_GPIO_WritePin>

}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	58020000 	.word	0x58020000
 8000e30:	24000744 	.word	0x24000744

08000e34 <LoRA_sleep>:


void LoRA_sleep(void){
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000e38:	2180      	movs	r1, #128	; 0x80
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f7ff ffcc 	bl	8000dd8 <LoRA_Write_Register>
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000e44:	b5b0      	push	{r4, r5, r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000e4c:	6879      	ldr	r1, [r7, #4]
 8000e4e:	17c8      	asrs	r0, r1, #31
 8000e50:	460a      	mov	r2, r1
 8000e52:	4603      	mov	r3, r0
 8000e54:	1355      	asrs	r5, r2, #13
 8000e56:	04d4      	lsls	r4, r2, #19
 8000e58:	4a18      	ldr	r2, [pc, #96]	; (8000ebc <LoRA_set_frequency+0x78>)
 8000e5a:	f04f 0300 	mov.w	r3, #0
 8000e5e:	4620      	mov	r0, r4
 8000e60:	4629      	mov	r1, r5
 8000e62:	f7ff fc69 	bl	8000738 <__aeabi_uldivmod>
 8000e66:	4602      	mov	r2, r0
 8000e68:	460b      	mov	r3, r1
 8000e6a:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000e6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e72:	f04f 0200 	mov.w	r2, #0
 8000e76:	f04f 0300 	mov.w	r3, #0
 8000e7a:	0c02      	lsrs	r2, r0, #16
 8000e7c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e80:	0c0b      	lsrs	r3, r1, #16
 8000e82:	b2d3      	uxtb	r3, r2
 8000e84:	4619      	mov	r1, r3
 8000e86:	2006      	movs	r0, #6
 8000e88:	f7ff ffa6 	bl	8000dd8 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e90:	f04f 0200 	mov.w	r2, #0
 8000e94:	f04f 0300 	mov.w	r3, #0
 8000e98:	0a02      	lsrs	r2, r0, #8
 8000e9a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e9e:	0a0b      	lsrs	r3, r1, #8
 8000ea0:	b2d3      	uxtb	r3, r2
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	2007      	movs	r0, #7
 8000ea6:	f7ff ff97 	bl	8000dd8 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000eaa:	7a3b      	ldrb	r3, [r7, #8]
 8000eac:	4619      	mov	r1, r3
 8000eae:	2008      	movs	r0, #8
 8000eb0:	f7ff ff92 	bl	8000dd8 <LoRA_Write_Register>
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bdb0      	pop	{r4, r5, r7, pc}
 8000ebc:	01e84800 	.word	0x01e84800

08000ec0 <LoRA_setOCP>:

void LoRA_idle(){
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
}

void LoRA_setOCP(uint8_t mA){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000eca:	231b      	movs	r3, #27
 8000ecc:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	2b78      	cmp	r3, #120	; 0x78
 8000ed2:	d809      	bhi.n	8000ee8 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	3b2d      	subs	r3, #45	; 0x2d
 8000ed8:	4a11      	ldr	r2, [pc, #68]	; (8000f20 <LoRA_setOCP+0x60>)
 8000eda:	fb82 1203 	smull	r1, r2, r2, r3
 8000ede:	1052      	asrs	r2, r2, #1
 8000ee0:	17db      	asrs	r3, r3, #31
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	73fb      	strb	r3, [r7, #15]
 8000ee6:	e00b      	b.n	8000f00 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	2bf0      	cmp	r3, #240	; 0xf0
 8000eec:	d808      	bhi.n	8000f00 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	331e      	adds	r3, #30
 8000ef2:	4a0b      	ldr	r2, [pc, #44]	; (8000f20 <LoRA_setOCP+0x60>)
 8000ef4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ef8:	1092      	asrs	r2, r2, #2
 8000efa:	17db      	asrs	r3, r3, #31
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	f003 031f 	and.w	r3, r3, #31
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f043 0320 	orr.w	r3, r3, #32
 8000f0c:	b2db      	uxtb	r3, r3
 8000f0e:	4619      	mov	r1, r3
 8000f10:	200b      	movs	r0, #11
 8000f12:	f7ff ff61 	bl	8000dd8 <LoRA_Write_Register>
}
 8000f16:	bf00      	nop
 8000f18:	3710      	adds	r7, #16
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	66666667 	.word	0x66666667

08000f24 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2b11      	cmp	r3, #17
 8000f30:	dd0f      	ble.n	8000f52 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b14      	cmp	r3, #20
 8000f36:	dd01      	ble.n	8000f3c <LoRA_setTxPower+0x18>
        level = 20;
 8000f38:	2314      	movs	r3, #20
 8000f3a:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b03      	subs	r3, #3
 8000f40:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000f42:	2187      	movs	r1, #135	; 0x87
 8000f44:	204d      	movs	r0, #77	; 0x4d
 8000f46:	f7ff ff47 	bl	8000dd8 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000f4a:	208c      	movs	r0, #140	; 0x8c
 8000f4c:	f7ff ffb8 	bl	8000ec0 <LoRA_setOCP>
 8000f50:	e00b      	b.n	8000f6a <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	dc01      	bgt.n	8000f5c <LoRA_setTxPower+0x38>
        level = 2;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000f5c:	2184      	movs	r1, #132	; 0x84
 8000f5e:	204d      	movs	r0, #77	; 0x4d
 8000f60:	f7ff ff3a 	bl	8000dd8 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000f64:	2064      	movs	r0, #100	; 0x64
 8000f66:	f7ff ffab 	bl	8000ec0 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	3b02      	subs	r3, #2
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	2009      	movs	r0, #9
 8000f80:	f7ff ff2a 	bl	8000dd8 <LoRA_Write_Register>
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <LoRA_begin>:

void LoRA_explicit_header_mode(){
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
}

void LoRA_begin(long frequency){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b09c      	sub	sp, #112	; 0x70
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f94:	2201      	movs	r2, #1
 8000f96:	2101      	movs	r1, #1
 8000f98:	4822      	ldr	r0, [pc, #136]	; (8001024 <LoRA_begin+0x98>)
 8000f9a:	f006 fb8d 	bl	80076b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa4:	4820      	ldr	r0, [pc, #128]	; (8001028 <LoRA_begin+0x9c>)
 8000fa6:	f006 fb87 	bl	80076b8 <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000faa:	2042      	movs	r0, #66	; 0x42
 8000fac:	f7ff feec 	bl	8000d88 <LoRA_Read_Register>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000fb6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000fba:	f107 0308 	add.w	r3, r7, #8
 8000fbe:	491b      	ldr	r1, [pc, #108]	; (800102c <LoRA_begin+0xa0>)
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f015 ff83 	bl	8016ecc <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000fc6:	f107 0308 	add.w	r3, r7, #8
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff f9a0 	bl	8000310 <strlen>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	4611      	mov	r1, r2
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f014 fc95 	bl	8015908 <CDC_Transmit_HS>

	LoRA_sleep();
 8000fde:	f7ff ff29 	bl	8000e34 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000fe2:	4813      	ldr	r0, [pc, #76]	; (8001030 <LoRA_begin+0xa4>)
 8000fe4:	f7ff ff2e 	bl	8000e44 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000fe8:	2100      	movs	r1, #0
 8000fea:	200f      	movs	r0, #15
 8000fec:	f7ff fef4 	bl	8000dd8 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	200e      	movs	r0, #14
 8000ff4:	f7ff fef0 	bl	8000dd8 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000ff8:	200c      	movs	r0, #12
 8000ffa:	f7ff fec5 	bl	8000d88 <LoRA_Read_Register>
 8000ffe:	4603      	mov	r3, r0
 8001000:	f043 0303 	orr.w	r3, r3, #3
 8001004:	b2db      	uxtb	r3, r3
 8001006:	4619      	mov	r1, r3
 8001008:	200c      	movs	r0, #12
 800100a:	f7ff fee5 	bl	8000dd8 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 800100e:	2104      	movs	r1, #4
 8001010:	2026      	movs	r0, #38	; 0x26
 8001012:	f7ff fee1 	bl	8000dd8 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8001016:	2011      	movs	r0, #17
 8001018:	f7ff ff84 	bl	8000f24 <LoRA_setTxPower>

}
 800101c:	bf00      	nop
 800101e:	3770      	adds	r7, #112	; 0x70
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	58020c00 	.word	0x58020c00
 8001028:	58020000 	.word	0x58020000
 800102c:	0801abc8 	.word	0x0801abc8
 8001030:	33bca100 	.word	0x33bca100

08001034 <multiplyQuat>:
}

double x[4];


void multiplyQuat(double r[4], double s[4]) {
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  float temp[4];
  temp[0] = r[0] * s[0] - r[1] * s[1] - r[2] * s[2] - r[3] * s[3];
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	ed93 6b00 	vldr	d6, [r3]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	ed93 7b00 	vldr	d7, [r3]
 800104a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3308      	adds	r3, #8
 8001052:	ed93 5b00 	vldr	d5, [r3]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	3308      	adds	r3, #8
 800105a:	ed93 7b00 	vldr	d7, [r3]
 800105e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001062:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3310      	adds	r3, #16
 800106a:	ed93 5b00 	vldr	d5, [r3]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	3310      	adds	r3, #16
 8001072:	ed93 7b00 	vldr	d7, [r3]
 8001076:	ee25 7b07 	vmul.f64	d7, d5, d7
 800107a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3318      	adds	r3, #24
 8001082:	ed93 5b00 	vldr	d5, [r3]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	3318      	adds	r3, #24
 800108a:	ed93 7b00 	vldr	d7, [r3]
 800108e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001092:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001096:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800109a:	edc7 7a03 	vstr	s15, [r7, #12]
  temp[1] = r[0] * s[1] + r[1] * s[0] - r[2] * s[3] + r[3] * s[2];
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	ed93 6b00 	vldr	d6, [r3]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	3308      	adds	r3, #8
 80010a8:	ed93 7b00 	vldr	d7, [r3]
 80010ac:	ee26 6b07 	vmul.f64	d6, d6, d7
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3308      	adds	r3, #8
 80010b4:	ed93 5b00 	vldr	d5, [r3]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	ed93 7b00 	vldr	d7, [r3]
 80010be:	ee25 7b07 	vmul.f64	d7, d5, d7
 80010c2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	3310      	adds	r3, #16
 80010ca:	ed93 5b00 	vldr	d5, [r3]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	3318      	adds	r3, #24
 80010d2:	ed93 7b00 	vldr	d7, [r3]
 80010d6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80010da:	ee36 6b47 	vsub.f64	d6, d6, d7
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3318      	adds	r3, #24
 80010e2:	ed93 5b00 	vldr	d5, [r3]
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	3310      	adds	r3, #16
 80010ea:	ed93 7b00 	vldr	d7, [r3]
 80010ee:	ee25 7b07 	vmul.f64	d7, d5, d7
 80010f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80010f6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010fa:	edc7 7a04 	vstr	s15, [r7, #16]
  temp[2] = r[0] * s[2] + r[1] * s[3] + r[2] * s[0] - r[3] * s[1];
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	ed93 6b00 	vldr	d6, [r3]
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	3310      	adds	r3, #16
 8001108:	ed93 7b00 	vldr	d7, [r3]
 800110c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3308      	adds	r3, #8
 8001114:	ed93 5b00 	vldr	d5, [r3]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	3318      	adds	r3, #24
 800111c:	ed93 7b00 	vldr	d7, [r3]
 8001120:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001124:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3310      	adds	r3, #16
 800112c:	ed93 5b00 	vldr	d5, [r3]
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	ed93 7b00 	vldr	d7, [r3]
 8001136:	ee25 7b07 	vmul.f64	d7, d5, d7
 800113a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	3318      	adds	r3, #24
 8001142:	ed93 5b00 	vldr	d5, [r3]
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	3308      	adds	r3, #8
 800114a:	ed93 7b00 	vldr	d7, [r3]
 800114e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001152:	ee36 7b47 	vsub.f64	d7, d6, d7
 8001156:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800115a:	edc7 7a05 	vstr	s15, [r7, #20]
  temp[3] = r[0] * s[3] - r[1] * s[2] + r[2] * s[1] + r[3] * s[0];
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	ed93 6b00 	vldr	d6, [r3]
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	3318      	adds	r3, #24
 8001168:	ed93 7b00 	vldr	d7, [r3]
 800116c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3308      	adds	r3, #8
 8001174:	ed93 5b00 	vldr	d5, [r3]
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	3310      	adds	r3, #16
 800117c:	ed93 7b00 	vldr	d7, [r3]
 8001180:	ee25 7b07 	vmul.f64	d7, d5, d7
 8001184:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3310      	adds	r3, #16
 800118c:	ed93 5b00 	vldr	d5, [r3]
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	3308      	adds	r3, #8
 8001194:	ed93 7b00 	vldr	d7, [r3]
 8001198:	ee25 7b07 	vmul.f64	d7, d5, d7
 800119c:	ee36 6b07 	vadd.f64	d6, d6, d7
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3318      	adds	r3, #24
 80011a4:	ed93 5b00 	vldr	d5, [r3]
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	ed93 7b00 	vldr	d7, [r3]
 80011ae:	ee25 7b07 	vmul.f64	d7, d5, d7
 80011b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80011b6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80011ba:	edc7 7a06 	vstr	s15, [r7, #24]
  for (int i = 0; i < 4; i++) {
 80011be:	2300      	movs	r3, #0
 80011c0:	61fb      	str	r3, [r7, #28]
 80011c2:	e011      	b.n	80011e8 <multiplyQuat+0x1b4>
    x[i] = temp[i];
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	3320      	adds	r3, #32
 80011ca:	443b      	add	r3, r7
 80011cc:	3b14      	subs	r3, #20
 80011ce:	edd3 7a00 	vldr	s15, [r3]
 80011d2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80011d6:	4a09      	ldr	r2, [pc, #36]	; (80011fc <multiplyQuat+0x1c8>)
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	4413      	add	r3, r2
 80011de:	ed83 7b00 	vstr	d7, [r3]
  for (int i = 0; i < 4; i++) {
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3301      	adds	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	ddea      	ble.n	80011c4 <multiplyQuat+0x190>
  }
}
 80011ee:	bf00      	nop
 80011f0:	bf00      	nop
 80011f2:	3724      	adds	r7, #36	; 0x24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	24000cc8 	.word	0x24000cc8

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001202:	f2ad 4dd4 	subw	sp, sp, #1236	; 0x4d4
 8001206:	af06      	add	r7, sp, #24
  /* USER CODE BEGIN 1 */


	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001208:	4b4d      	ldr	r3, [pc, #308]	; (8001340 <main+0x140>)
 800120a:	f207 442c 	addw	r4, r7, #1068	; 0x42c
 800120e:	461d      	mov	r5, r3
 8001210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001214:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001218:	c403      	stmia	r4!, {r0, r1}
 800121a:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800121c:	f002 fb1c 	bl	8003858 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001220:	f000 fb16 	bl	8001850 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001224:	f000 fb90 	bl	8001948 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001228:	f001 f918 	bl	800245c <MX_GPIO_Init>
  MX_DMA_Init();
 800122c:	f001 f8b6 	bl	800239c <MX_DMA_Init>
  MX_SPI3_Init();
 8001230:	f000 fe10 	bl	8001e54 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8001234:	f000 fca0 	bl	8001b78 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001238:	f001 f864 	bl	8002304 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800123c:	f000 fbb6 	bl	80019ac <MX_ADC1_Init>
  MX_TIM4_Init();
 8001240:	f000 ff1a 	bl	8002078 <MX_TIM4_Init>
  MX_ADC3_Init();
 8001244:	f000 fc2a 	bl	8001a9c <MX_ADC3_Init>
  MX_SPI2_Init();
 8001248:	f000 fdae 	bl	8001da8 <MX_SPI2_Init>
  MX_I2C2_Init();
 800124c:	f000 fcf8 	bl	8001c40 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001250:	f000 fe56 	bl	8001f00 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001254:	f000 ff8c 	bl	8002170 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001258:	f000 feaa 	bl	8001fb0 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800125c:	f014 fa94 	bl	8015788 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001260:	f000 fd4c 	bl	8001cfc <MX_SPI1_Init>
  MX_UART4_Init();
 8001264:	f001 f802 	bl	800226c <MX_UART4_Init>
  MX_FATFS_Init();
 8001268:	f012 f822 	bl	80132b0 <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 800126c:	f000 fd28 	bl	8001cc0 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 8001270:	f000 ffd8 	bl	8002224 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 8001274:	2332      	movs	r3, #50	; 0x32
 8001276:	f8c7 34a0 	str.w	r3, [r7, #1184]	; 0x4a0
	const double SPEED = 2.0/2000;
 800127a:	a32f      	add	r3, pc, #188	; (adr r3, 8001338 <main+0x138>)
 800127c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001280:	f507 6193 	add.w	r1, r7, #1176	; 0x498
 8001284:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 8001288:	f04f 0200 	mov.w	r2, #0
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	f507 6192 	add.w	r1, r7, #1168	; 0x490
 8001294:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	4b29      	ldr	r3, [pc, #164]	; (8001344 <main+0x144>)
 800129e:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 80012a2:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 80012a6:	f04f 0200 	mov.w	r2, #0
 80012aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ae:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 80012b2:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 80012b6:	213c      	movs	r1, #60	; 0x3c
 80012b8:	2010      	movs	r0, #16
 80012ba:	f7ff fc4b 	bl	8000b54 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b01101000); //Gyroscope setup - CTRL2_G
 80012be:	2168      	movs	r1, #104	; 0x68
 80012c0:	2011      	movs	r0, #17
 80012c2:	f7ff fc47 	bl	8000b54 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00001100); //disables I2C - CTRL4_C
 80012c6:	210c      	movs	r1, #12
 80012c8:	2013      	movs	r0, #19
 80012ca:	f7ff fc43 	bl	8000b54 <LG2_Write_Register>

	HAL_Delay(3000);
 80012ce:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80012d2:	f002 fb53 	bl	800397c <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 80012d6:	21bf      	movs	r1, #191	; 0xbf
 80012d8:	201c      	movs	r0, #28
 80012da:	f7ff fbe7 	bl	8000aac <HG2_Write_Register>
	HAL_Delay(2);
 80012de:	2002      	movs	r0, #2
 80012e0:	f002 fb4c 	bl	800397c <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 80012e4:	2158      	movs	r1, #88	; 0x58
 80012e6:	201b      	movs	r0, #27
 80012e8:	f7ff fbe0 	bl	8000aac <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 80012ec:	21d8      	movs	r1, #216	; 0xd8
 80012ee:	201b      	movs	r0, #27
 80012f0:	f7ff fbdc 	bl	8000aac <HG2_Write_Register>

	float rotZ = 0;
 80012f4:	f04f 0300 	mov.w	r3, #0
 80012f8:	f207 427c 	addw	r2, r7, #1148	; 0x47c
 80012fc:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478

	float calOmegaX = 0;
 8001304:	f04f 0300 	mov.w	r3, #0
 8001308:	f207 42ac 	addw	r2, r7, #1196	; 0x4ac
 800130c:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8001316:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	f207 42a4 	addw	r2, r7, #1188	; 0x4a4
 8001320:	6013      	str	r3, [r2, #0]
	HAL_Delay(2000);
 8001322:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001326:	f002 fb29 	bl	800397c <HAL_Delay>
	for(int i = 0; i < 500; i++){
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 8001330:	e03e      	b.n	80013b0 <main+0x1b0>
 8001332:	bf00      	nop
 8001334:	f3af 8000 	nop.w
 8001338:	d2f1a9fc 	.word	0xd2f1a9fc
 800133c:	3f50624d 	.word	0x3f50624d
 8001340:	0801abf0 	.word	0x0801abf0
 8001344:	3ff00000 	.word	0x3ff00000
 8001348:	43fa0000 	.word	0x43fa0000
		if(LG2_Read_Register(0x1E) | (1 << 1)){
 800134c:	201e      	movs	r0, #30
 800134e:	f7ff fbd5 	bl	8000afc <LG2_Read_Register>
		calOmegaX += LG2_Get_Gyro_X();
 8001352:	f7ff fc29 	bl	8000ba8 <LG2_Get_Gyro_X>
 8001356:	eeb0 7a40 	vmov.f32	s14, s0
 800135a:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 800135e:	edd3 7a00 	vldr	s15, [r3]
 8001362:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001366:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 800136a:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 800136e:	f7ff fc53 	bl	8000c18 <LG2_Get_Gyro_Y>
 8001372:	eeb0 7a40 	vmov.f32	s14, s0
 8001376:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800137a:	edd3 7a00 	vldr	s15, [r3]
 800137e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001382:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8001386:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 800138a:	f7ff fc7d 	bl	8000c88 <LG2_Get_Gyro_Z>
 800138e:	eeb0 7a40 	vmov.f32	s14, s0
 8001392:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 8001396:	edd3 7a00 	vldr	s15, [r3]
 800139a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800139e:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 80013a2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 80013a6:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	; 0x4b0
 80013aa:	3301      	adds	r3, #1
 80013ac:	f8c7 34b0 	str.w	r3, [r7, #1200]	; 0x4b0
 80013b0:	f8d7 34b0 	ldr.w	r3, [r7, #1200]	; 0x4b0
 80013b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013b8:	dbc8      	blt.n	800134c <main+0x14c>
		}

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 80013ba:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 80013be:	ed93 7a00 	vldr	s14, [r3]
 80013c2:	ed5f 6a1f 	vldr	s13, [pc, #-124]	; 8001348 <main+0x148>
 80013c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013ca:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 80013ce:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 80013d2:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80013d6:	ed93 7a00 	vldr	s14, [r3]
 80013da:	ed5f 6a25 	vldr	s13, [pc, #-148]	; 8001348 <main+0x148>
 80013de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e2:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80013e6:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 80013ea:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 80013ee:	ed93 7a00 	vldr	s14, [r3]
 80013f2:	ed5f 6a2b 	vldr	s13, [pc, #-172]	; 8001348 <main+0x148>
 80013f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013fa:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 80013fe:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001402:	2201      	movs	r2, #1
 8001404:	2101      	movs	r1, #1
 8001406:	48e6      	ldr	r0, [pc, #920]	; (80017a0 <main+0x5a0>)
 8001408:	f006 f956 	bl	80076b8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800140c:	20c8      	movs	r0, #200	; 0xc8
 800140e:	f002 fab5 	bl	800397c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8001412:	2200      	movs	r2, #0
 8001414:	2101      	movs	r1, #1
 8001416:	48e2      	ldr	r0, [pc, #904]	; (80017a0 <main+0x5a0>)
 8001418:	f006 f94e 	bl	80076b8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800141c:	20c8      	movs	r0, #200	; 0xc8
 800141e:	f002 faad 	bl	800397c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001422:	2201      	movs	r2, #1
 8001424:	2101      	movs	r1, #1
 8001426:	48de      	ldr	r0, [pc, #888]	; (80017a0 <main+0x5a0>)
 8001428:	f006 f946 	bl	80076b8 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 800142c:	20c8      	movs	r0, #200	; 0xc8
 800142e:	f002 faa5 	bl	800397c <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001432:	2201      	movs	r2, #1
 8001434:	2104      	movs	r1, #4
 8001436:	48db      	ldr	r0, [pc, #876]	; (80017a4 <main+0x5a4>)
 8001438:	f006 f93e 	bl	80076b8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 800143c:	2201      	movs	r2, #1
 800143e:	2108      	movs	r1, #8
 8001440:	48d8      	ldr	r0, [pc, #864]	; (80017a4 <main+0x5a4>)
 8001442:	f006 f939 	bl	80076b8 <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001446:	2100      	movs	r1, #0
 8001448:	48d7      	ldr	r0, [pc, #860]	; (80017a8 <main+0x5a8>)
 800144a:	f00d fc59 	bl	800ed00 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800144e:	2104      	movs	r1, #4
 8001450:	48d5      	ldr	r0, [pc, #852]	; (80017a8 <main+0x5a8>)
 8001452:	f00d fc55 	bl	800ed00 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001456:	2108      	movs	r1, #8
 8001458:	48d3      	ldr	r0, [pc, #844]	; (80017a8 <main+0x5a8>)
 800145a:	f00d fc51 	bl	800ed00 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800145e:	210c      	movs	r1, #12
 8001460:	48d1      	ldr	r0, [pc, #836]	; (80017a8 <main+0x5a8>)
 8001462:	f00d fc4d 	bl	800ed00 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 8001466:	ed9f 0ad1 	vldr	s0, [pc, #836]	; 80017ac <main+0x5ac>
 800146a:	2001      	movs	r0, #1
 800146c:	f7ff fc44 	bl	8000cf8 <setServo>
    setServo(2, 180);
 8001470:	ed9f 0acf 	vldr	s0, [pc, #828]	; 80017b0 <main+0x5b0>
 8001474:	2002      	movs	r0, #2
 8001476:	f7ff fc3f 	bl	8000cf8 <setServo>
    setServo(3, 0);
 800147a:	ed9f 0ace 	vldr	s0, [pc, #824]	; 80017b4 <main+0x5b4>
 800147e:	2003      	movs	r0, #3
 8001480:	f7ff fc3a 	bl	8000cf8 <setServo>
    setServo(4, 45);
 8001484:	ed9f 0acc 	vldr	s0, [pc, #816]	; 80017b8 <main+0x5b8>
 8001488:	2004      	movs	r0, #4
 800148a:	f7ff fc35 	bl	8000cf8 <setServo>

    LoRA_begin(868000000);
 800148e:	48cb      	ldr	r0, [pc, #812]	; (80017bc <main+0x5bc>)
 8001490:	f7ff fd7c 	bl	8000f8c <LoRA_begin>
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);


	int connected = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
	long last_packet = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470
	int ARMED = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  char state[50] = "DISARMED";
 80014a6:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80014aa:	f5a3 7449 	sub.w	r4, r3, #804	; 0x324
 80014ae:	4ac4      	ldr	r2, [pc, #784]	; (80017c0 <main+0x5c0>)
 80014b0:	4623      	mov	r3, r4
 80014b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80014b4:	c303      	stmia	r3!, {r0, r1}
 80014b6:	701a      	strb	r2, [r3, #0]
 80014b8:	f104 0309 	add.w	r3, r4, #9
 80014bc:	2229      	movs	r2, #41	; 0x29
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f014 fead 	bl	8016220 <memset>
  char command[50];
  char acknowledge[50];
  char recieved_packet[50];
  char response_packet[50];
  char sendMessage[50];
  int last = 0;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
  int packetId;
  char communication_state[50] = "RECIEVING";
 80014cc:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80014d0:	f2a3 445c 	subw	r4, r3, #1116	; 0x45c
 80014d4:	4abb      	ldr	r2, [pc, #748]	; (80017c4 <main+0x5c4>)
 80014d6:	4623      	mov	r3, r4
 80014d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80014da:	c303      	stmia	r3!, {r0, r1}
 80014dc:	801a      	strh	r2, [r3, #0]
 80014de:	f104 030a 	add.w	r3, r4, #10
 80014e2:	2228      	movs	r2, #40	; 0x28
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f014 fe9a 	bl	8016220 <memset>
  int isReceived = 0;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464


 x[0] = 0;
 80014f2:	49b5      	ldr	r1, [pc, #724]	; (80017c8 <main+0x5c8>)
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	f04f 0300 	mov.w	r3, #0
 80014fc:	e9c1 2300 	strd	r2, r3, [r1]
 x[1] = 1;
 8001500:	49b1      	ldr	r1, [pc, #708]	; (80017c8 <main+0x5c8>)
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4bb1      	ldr	r3, [pc, #708]	; (80017cc <main+0x5cc>)
 8001508:	e9c1 2302 	strd	r2, r3, [r1, #8]
 x[2] = 0;
 800150c:	49ae      	ldr	r1, [pc, #696]	; (80017c8 <main+0x5c8>)
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	f04f 0300 	mov.w	r3, #0
 8001516:	e9c1 2304 	strd	r2, r3, [r1, #16]
 x[3] = 0;
 800151a:	49ab      	ldr	r1, [pc, #684]	; (80017c8 <main+0x5c8>)
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	e9c1 2306 	strd	r2, r3, [r1, #24]
  double rotQuaternion[4];
  uint16_t lastMeasure = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	f8a7 3462 	strh.w	r3, [r7, #1122]	; 0x462
  rotQuaternion[0] = 1;
 800152e:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001532:	f5a3 6190 	sub.w	r1, r3, #1152	; 0x480
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	4ba4      	ldr	r3, [pc, #656]	; (80017cc <main+0x5cc>)
 800153c:	e9c1 2300 	strd	r2, r3, [r1]

  HAL_TIM_Base_Start(&htim13);
 8001540:	48a3      	ldr	r0, [pc, #652]	; (80017d0 <main+0x5d0>)
 8001542:	f00d fb07 	bl	800eb54 <HAL_TIM_Base_Start>
  TIM13->CNT = 0;
 8001546:	4ba3      	ldr	r3, [pc, #652]	; (80017d4 <main+0x5d4>)
 8001548:	2200      	movs	r2, #0
 800154a:	625a      	str	r2, [r3, #36]	; 0x24
  double elapsedTime = 0;
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	f507 618b 	add.w	r1, r7, #1112	; 0x458
 8001558:	e9c1 2300 	strd	r2, r3, [r1]
  int counter = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
  while(1){
	  float Gx;
	  float Gy;
	  float Gz;
	  if(LG2_Read_Register(0x1E) & (1 << 1)){
 8001562:	201e      	movs	r0, #30
 8001564:	f7ff faca 	bl	8000afc <LG2_Read_Register>
 8001568:	4603      	mov	r3, r0
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 80f5 	beq.w	800175e <main+0x55e>
		  elapsedTime = (TIM13->CNT / 1000.0);
 8001574:	4b97      	ldr	r3, [pc, #604]	; (80017d4 <main+0x5d4>)
 8001576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8001580:	ed9f 5b81 	vldr	d5, [pc, #516]	; 8001788 <main+0x588>
 8001584:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001588:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800158c:	ed83 7b00 	vstr	d7, [r3]
		  TIM13->CNT = 0;
 8001590:	4b90      	ldr	r3, [pc, #576]	; (80017d4 <main+0x5d4>)
 8001592:	2200      	movs	r2, #0
 8001594:	625a      	str	r2, [r3, #36]	; 0x24
		  Gx = LG2_Get_Gyro_X();
 8001596:	f7ff fb07 	bl	8000ba8 <LG2_Get_Gyro_X>
 800159a:	f207 4354 	addw	r3, r7, #1108	; 0x454
 800159e:	ed83 0a00 	vstr	s0, [r3]
		  Gy= LG2_Get_Gyro_Y();
 80015a2:	f7ff fb39 	bl	8000c18 <LG2_Get_Gyro_Y>
 80015a6:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80015aa:	ed83 0a00 	vstr	s0, [r3]
		  Gz = LG2_Get_Gyro_Z();
 80015ae:	f7ff fb6b 	bl	8000c88 <LG2_Get_Gyro_Z>
 80015b2:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80015b6:	ed83 0a00 	vstr	s0, [r3]
		  rotQuaternion[1] = (Gx - calOmegaX) * (3.1415 / 360000) * elapsedTime;
 80015ba:	f207 4354 	addw	r3, r7, #1108	; 0x454
 80015be:	ed93 7a00 	vldr	s14, [r3]
 80015c2:	f207 43ac 	addw	r3, r7, #1196	; 0x4ac
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015d2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8001790 <main+0x590>
 80015d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80015da:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80015de:	ed93 7b00 	vldr	d7, [r3]
 80015e2:	ee26 7b07 	vmul.f64	d7, d6, d7
 80015e6:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80015ea:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80015ee:	ed83 7b02 	vstr	d7, [r3, #8]
		  rotQuaternion[2] = (Gy- calOmegaY) * (3.1415 / 360000) * elapsedTime;
 80015f2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80015f6:	ed93 7a00 	vldr	s14, [r3]
 80015fa:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80015fe:	edd3 7a00 	vldr	s15, [r3]
 8001602:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001606:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800160a:	ed9f 6b61 	vldr	d6, [pc, #388]	; 8001790 <main+0x590>
 800160e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8001612:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001616:	ed93 7b00 	vldr	d7, [r3]
 800161a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800161e:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001622:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8001626:	ed83 7b04 	vstr	d7, [r3, #16]
		  rotQuaternion[3] = (Gz - calOmegaZ) * (3.1415 / 360000) * elapsedTime;
 800162a:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 800162e:	ed93 7a00 	vldr	s14, [r3]
 8001632:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 8001636:	edd3 7a00 	vldr	s15, [r3]
 800163a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800163e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001642:	ed9f 6b53 	vldr	d6, [pc, #332]	; 8001790 <main+0x590>
 8001646:	ee27 6b06 	vmul.f64	d6, d7, d6
 800164a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800164e:	ed93 7b00 	vldr	d7, [r3]
 8001652:	ee26 7b07 	vmul.f64	d7, d6, d7
 8001656:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800165a:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800165e:	ed83 7b06 	vstr	d7, [r3, #24]
		  rotQuaternion[0] = sqrt(1 - (rotQuaternion[1]*rotQuaternion[1]) - (rotQuaternion[2]*rotQuaternion[2])- (rotQuaternion[3]*rotQuaternion[3]));
 8001662:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001666:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800166a:	ed93 6b02 	vldr	d6, [r3, #8]
 800166e:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001672:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8001676:	ed93 7b02 	vldr	d7, [r3, #8]
 800167a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800167e:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001682:	ee36 6b47 	vsub.f64	d6, d6, d7
 8001686:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800168a:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800168e:	ed93 5b04 	vldr	d5, [r3, #16]
 8001692:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001696:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800169a:	ed93 7b04 	vldr	d7, [r3, #16]
 800169e:	ee25 7b07 	vmul.f64	d7, d5, d7
 80016a2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80016a6:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80016aa:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80016ae:	ed93 5b06 	vldr	d5, [r3, #24]
 80016b2:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80016b6:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80016ba:	ed93 7b06 	vldr	d7, [r3, #24]
 80016be:	ee25 7b07 	vmul.f64	d7, d5, d7
 80016c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80016c6:	eeb0 0b47 	vmov.f64	d0, d7
 80016ca:	f019 f935 	bl	801a938 <sqrt>
 80016ce:	eeb0 7b40 	vmov.f64	d7, d0
 80016d2:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 80016d6:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 80016da:	ed83 7b00 	vstr	d7, [r3]
		  counter++;
 80016de:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 80016e2:	3301      	adds	r3, #1
 80016e4:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
		  lastMeasure = HAL_GetTick();
 80016e8:	f002 f93c 	bl	8003964 <HAL_GetTick>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f8a7 3462 	strh.w	r3, [r7, #1122]	; 0x462
		  multiplyQuat(rotQuaternion, x);
 80016f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80016f6:	4934      	ldr	r1, [pc, #208]	; (80017c8 <main+0x5c8>)
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fc9b 	bl	8001034 <multiplyQuat>
		  rotQuaternion[1] = - rotQuaternion[1];
 80016fe:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001702:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8001706:	ed93 7b02 	vldr	d7, [r3, #8]
 800170a:	eeb1 7b47 	vneg.f64	d7, d7
 800170e:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001712:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8001716:	ed83 7b02 	vstr	d7, [r3, #8]
		  rotQuaternion[2] = - rotQuaternion[2];
 800171a:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800171e:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8001722:	ed93 7b04 	vldr	d7, [r3, #16]
 8001726:	eeb1 7b47 	vneg.f64	d7, d7
 800172a:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800172e:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 8001732:	ed83 7b04 	vstr	d7, [r3, #16]
		  rotQuaternion[3] = - rotQuaternion[3];
 8001736:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800173a:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800173e:	ed93 7b06 	vldr	d7, [r3, #24]
 8001742:	eeb1 7b47 	vneg.f64	d7, d7
 8001746:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 800174a:	f5a3 6390 	sub.w	r3, r3, #1152	; 0x480
 800174e:	ed83 7b06 	vstr	d7, [r3, #24]
		  multiplyQuat(x, rotQuaternion);
 8001752:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001756:	4619      	mov	r1, r3
 8001758:	481b      	ldr	r0, [pc, #108]	; (80017c8 <main+0x5c8>)
 800175a:	f7ff fc6b 	bl	8001034 <multiplyQuat>


	  }
	  if(counter > 50){
 800175e:	f8d7 34b4 	ldr.w	r3, [r7, #1204]	; 0x4b4
 8001762:	2b32      	cmp	r3, #50	; 0x32
 8001764:	f77f aefd 	ble.w	8001562 <main+0x362>
		counter = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
		float pitch = 180*(asin(x[3])/ 3.1415);
 800176e:	4b16      	ldr	r3, [pc, #88]	; (80017c8 <main+0x5c8>)
 8001770:	ed93 7b06 	vldr	d7, [r3, #24]
 8001774:	eeb0 0b47 	vmov.f64	d0, d7
 8001778:	f019 f8b2 	bl	801a8e0 <asin>
 800177c:	eeb0 6b40 	vmov.f64	d6, d0
 8001780:	ed9f 5b05 	vldr	d5, [pc, #20]	; 8001798 <main+0x598>
 8001784:	e028      	b.n	80017d8 <main+0x5d8>
 8001786:	bf00      	nop
 8001788:	00000000 	.word	0x00000000
 800178c:	408f4000 	.word	0x408f4000
 8001790:	c1a89480 	.word	0xc1a89480
 8001794:	3ee24cf1 	.word	0x3ee24cf1
 8001798:	c083126f 	.word	0xc083126f
 800179c:	400921ca 	.word	0x400921ca
 80017a0:	58020c00 	.word	0x58020c00
 80017a4:	58021800 	.word	0x58021800
 80017a8:	24000864 	.word	0x24000864
 80017ac:	42b40000 	.word	0x42b40000
 80017b0:	43340000 	.word	0x43340000
 80017b4:	00000000 	.word	0x00000000
 80017b8:	42340000 	.word	0x42340000
 80017bc:	33bca100 	.word	0x33bca100
 80017c0:	0801ac0c 	.word	0x0801ac0c
 80017c4:	0801ac40 	.word	0x0801ac40
 80017c8:	24000cc8 	.word	0x24000cc8
 80017cc:	3ff00000 	.word	0x3ff00000
 80017d0:	240008fc 	.word	0x240008fc
 80017d4:	40001c00 	.word	0x40001c00
 80017d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017dc:	ed9f 6b18 	vldr	d6, [pc, #96]	; 8001840 <main+0x640>
 80017e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80017e4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017e8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80017ec:	edc3 7a00 	vstr	s15, [r3]
		//float magnitude = sqrt((x[1]*x[1]) + (x[2]*x[2]) + x[3] * x[3]);
		char data_gyro[50];
	    sprintf( data_gyro, "%f, %f, %f, %f\n",pitch, x[1], x[2], x[3]);
 80017f0:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <main+0x648>)
 80017fe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001802:	4911      	ldr	r1, [pc, #68]	; (8001848 <main+0x648>)
 8001804:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 8001808:	4c0f      	ldr	r4, [pc, #60]	; (8001848 <main+0x648>)
 800180a:	e9d4 4506 	ldrd	r4, r5, [r4, #24]
 800180e:	1d3e      	adds	r6, r7, #4
 8001810:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001814:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001818:	e9cd 2300 	strd	r2, r3, [sp]
 800181c:	ec53 2b17 	vmov	r2, r3, d7
 8001820:	490a      	ldr	r1, [pc, #40]	; (800184c <main+0x64c>)
 8001822:	4630      	mov	r0, r6
 8001824:	f015 fb52 	bl	8016ecc <siprintf>
	    CDC_Transmit_HS(data_gyro, strlen(data_gyro));
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fd70 	bl	8000310 <strlen>
 8001830:	4602      	mov	r2, r0
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	4611      	mov	r1, r2
 8001836:	4618      	mov	r0, r3
 8001838:	f014 f866 	bl	8015908 <CDC_Transmit_HS>
  while(1){
 800183c:	e691      	b.n	8001562 <main+0x362>
 800183e:	bf00      	nop
 8001840:	00000000 	.word	0x00000000
 8001844:	40668000 	.word	0x40668000
 8001848:	24000cc8 	.word	0x24000cc8
 800184c:	0801abe0 	.word	0x0801abe0

08001850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b09c      	sub	sp, #112	; 0x70
 8001854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001856:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185a:	224c      	movs	r2, #76	; 0x4c
 800185c:	2100      	movs	r1, #0
 800185e:	4618      	mov	r0, r3
 8001860:	f014 fcde 	bl	8016220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001864:	1d3b      	adds	r3, r7, #4
 8001866:	2220      	movs	r2, #32
 8001868:	2100      	movs	r1, #0
 800186a:	4618      	mov	r0, r3
 800186c:	f014 fcd8 	bl	8016220 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001870:	2002      	movs	r0, #2
 8001872:	f007 fb1b 	bl	8008eac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001876:	2300      	movs	r3, #0
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	4b32      	ldr	r3, [pc, #200]	; (8001944 <SystemClock_Config+0xf4>)
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001882:	4a30      	ldr	r2, [pc, #192]	; (8001944 <SystemClock_Config+0xf4>)
 8001884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001888:	6193      	str	r3, [r2, #24]
 800188a:	4b2e      	ldr	r3, [pc, #184]	; (8001944 <SystemClock_Config+0xf4>)
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001896:	bf00      	nop
 8001898:	4b2a      	ldr	r3, [pc, #168]	; (8001944 <SystemClock_Config+0xf4>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018a4:	d1f8      	bne.n	8001898 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 80018a6:	2323      	movs	r3, #35	; 0x23
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80018aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80018b0:	2301      	movs	r3, #1
 80018b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80018b4:	2340      	movs	r3, #64	; 0x40
 80018b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80018b8:	2301      	movs	r3, #1
 80018ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018bc:	2302      	movs	r3, #2
 80018be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018c0:	2300      	movs	r3, #0
 80018c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018c4:	2304      	movs	r3, #4
 80018c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80018c8:	230c      	movs	r3, #12
 80018ca:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 80018d0:	230c      	movs	r3, #12
 80018d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018d4:	2302      	movs	r3, #2
 80018d6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80018d8:	230c      	movs	r3, #12
 80018da:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80018dc:	2300      	movs	r3, #0
 80018de:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80018e0:	2300      	movs	r3, #0
 80018e2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e8:	4618      	mov	r0, r3
 80018ea:	f007 fb29 	bl	8008f40 <HAL_RCC_OscConfig>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80018f4:	f000 ff26 	bl	8002744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f8:	233f      	movs	r3, #63	; 0x3f
 80018fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018fc:	2303      	movs	r3, #3
 80018fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001900:	2300      	movs	r3, #0
 8001902:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001904:	2308      	movs	r3, #8
 8001906:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001908:	2340      	movs	r3, #64	; 0x40
 800190a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800190c:	2340      	movs	r3, #64	; 0x40
 800190e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001914:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001916:	2340      	movs	r3, #64	; 0x40
 8001918:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2101      	movs	r1, #1
 800191e:	4618      	mov	r0, r3
 8001920:	f007 fee8 	bl	80096f4 <HAL_RCC_ClockConfig>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <SystemClock_Config+0xde>
  {
    Error_Handler();
 800192a:	f000 ff0b 	bl	8002744 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800192e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001932:	2100      	movs	r1, #0
 8001934:	2000      	movs	r0, #0
 8001936:	f008 f893 	bl	8009a60 <HAL_RCC_MCOConfig>
}
 800193a:	bf00      	nop
 800193c:	3770      	adds	r7, #112	; 0x70
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	58024800 	.word	0x58024800

08001948 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b0ae      	sub	sp, #184	; 0xb8
 800194c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800194e:	463b      	mov	r3, r7
 8001950:	22b8      	movs	r2, #184	; 0xb8
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f014 fc63 	bl	8016220 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 800195a:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001966:	2304      	movs	r3, #4
 8001968:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800196a:	230c      	movs	r3, #12
 800196c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800196e:	2304      	movs	r3, #4
 8001970:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001972:	2302      	movs	r3, #2
 8001974:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001976:	2302      	movs	r3, #2
 8001978:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800197a:	23c0      	movs	r3, #192	; 0xc0
 800197c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800197e:	2300      	movs	r3, #0
 8001980:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001986:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800198a:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001992:	463b      	mov	r3, r7
 8001994:	4618      	mov	r0, r3
 8001996:	f008 faa3 	bl	8009ee0 <HAL_RCCEx_PeriphCLKConfig>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 80019a0:	f000 fed0 	bl	8002744 <Error_Handler>
  }
}
 80019a4:	bf00      	nop
 80019a6:	37b8      	adds	r7, #184	; 0xb8
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08c      	sub	sp, #48	; 0x30
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80019b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
 80019ba:	605a      	str	r2, [r3, #4]
 80019bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80019be:	463b      	mov	r3, r7
 80019c0:	2224      	movs	r2, #36	; 0x24
 80019c2:	2100      	movs	r1, #0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f014 fc2b 	bl	8016220 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80019ca:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <MX_ADC1_Init+0xe4>)
 80019cc:	4a31      	ldr	r2, [pc, #196]	; (8001a94 <MX_ADC1_Init+0xe8>)
 80019ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 80019d0:	4b2f      	ldr	r3, [pc, #188]	; (8001a90 <MX_ADC1_Init+0xe4>)
 80019d2:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 80019d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80019d8:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <MX_ADC1_Init+0xe4>)
 80019da:	2200      	movs	r2, #0
 80019dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80019de:	4b2c      	ldr	r3, [pc, #176]	; (8001a90 <MX_ADC1_Init+0xe4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019e4:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <MX_ADC1_Init+0xe4>)
 80019e6:	2204      	movs	r2, #4
 80019e8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80019ea:	4b29      	ldr	r3, [pc, #164]	; (8001a90 <MX_ADC1_Init+0xe4>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019f0:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <MX_ADC1_Init+0xe4>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <MX_ADC1_Init+0xe4>)
 80019f8:	2201      	movs	r2, #1
 80019fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019fc:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <MX_ADC1_Init+0xe4>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a04:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <MX_ADC1_Init+0xe4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a0a:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <MX_ADC1_Init+0xe4>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001a10:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <MX_ADC1_Init+0xe4>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a16:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <MX_ADC1_Init+0xe4>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001a1c:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <MX_ADC1_Init+0xe4>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <MX_ADC1_Init+0xe4>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a2a:	4819      	ldr	r0, [pc, #100]	; (8001a90 <MX_ADC1_Init+0xe4>)
 8001a2c:	f002 fa26 	bl	8003e7c <HAL_ADC_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001a36:	f000 fe85 	bl	8002744 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a42:	4619      	mov	r1, r3
 8001a44:	4812      	ldr	r0, [pc, #72]	; (8001a90 <MX_ADC1_Init+0xe4>)
 8001a46:	f003 fa61 	bl	8004f0c <HAL_ADCEx_MultiModeConfigChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001a50:	f000 fe78 	bl	8002744 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <MX_ADC1_Init+0xec>)
 8001a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001a58:	2306      	movs	r3, #6
 8001a5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001a60:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001a64:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001a66:	2304      	movs	r3, #4
 8001a68:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a74:	463b      	mov	r3, r7
 8001a76:	4619      	mov	r1, r3
 8001a78:	4805      	ldr	r0, [pc, #20]	; (8001a90 <MX_ADC1_Init+0xe4>)
 8001a7a:	f002 fc07 	bl	800428c <HAL_ADC_ConfigChannel>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001a84:	f000 fe5e 	bl	8002744 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	3730      	adds	r7, #48	; 0x30
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	240002f4 	.word	0x240002f4
 8001a94:	40022000 	.word	0x40022000
 8001a98:	2a000400 	.word	0x2a000400

08001a9c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	; 0x28
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	2224      	movs	r2, #36	; 0x24
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f014 fbb9 	bl	8016220 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001aae:	4b2f      	ldr	r3, [pc, #188]	; (8001b6c <MX_ADC3_Init+0xd0>)
 8001ab0:	4a2f      	ldr	r2, [pc, #188]	; (8001b70 <MX_ADC3_Init+0xd4>)
 8001ab2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001ab4:	4b2d      	ldr	r3, [pc, #180]	; (8001b6c <MX_ADC3_Init+0xd0>)
 8001ab6:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001aba:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001abc:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <MX_ADC3_Init+0xd0>)
 8001abe:	2208      	movs	r2, #8
 8001ac0:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	; (8001b6c <MX_ADC3_Init+0xd0>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001ac8:	4b28      	ldr	r3, [pc, #160]	; (8001b6c <MX_ADC3_Init+0xd0>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ace:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <MX_ADC3_Init+0xd0>)
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <MX_ADC3_Init+0xd0>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001ada:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <MX_ADC3_Init+0xd0>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001ae0:	4b22      	ldr	r3, [pc, #136]	; (8001b6c <MX_ADC3_Init+0xd0>)
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001ae6:	4b21      	ldr	r3, [pc, #132]	; (8001b6c <MX_ADC3_Init+0xd0>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001aee:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <MX_ADC3_Init+0xd0>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001af4:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <MX_ADC3_Init+0xd0>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001afa:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <MX_ADC3_Init+0xd0>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001b02:	4b1a      	ldr	r3, [pc, #104]	; (8001b6c <MX_ADC3_Init+0xd0>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001b08:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <MX_ADC3_Init+0xd0>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <MX_ADC3_Init+0xd0>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001b14:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <MX_ADC3_Init+0xd0>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001b1a:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <MX_ADC3_Init+0xd0>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001b22:	4812      	ldr	r0, [pc, #72]	; (8001b6c <MX_ADC3_Init+0xd0>)
 8001b24:	f002 f9aa 	bl	8003e7c <HAL_ADC_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001b2e:	f000 fe09 	bl	8002744 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <MX_ADC3_Init+0xd8>)
 8001b34:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b36:	2306      	movs	r3, #6
 8001b38:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b3e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001b42:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b44:	2304      	movs	r3, #4
 8001b46:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b48:	2300      	movs	r3, #0
 8001b4a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	4619      	mov	r1, r3
 8001b54:	4805      	ldr	r0, [pc, #20]	; (8001b6c <MX_ADC3_Init+0xd0>)
 8001b56:	f002 fb99 	bl	800428c <HAL_ADC_ConfigChannel>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001b60:	f000 fdf0 	bl	8002744 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	; 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	24000364 	.word	0x24000364
 8001b70:	58026000 	.word	0x58026000
 8001b74:	04300002 	.word	0x04300002

08001b78 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001b7c:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001b7e:	4a2f      	ldr	r2, [pc, #188]	; (8001c3c <MX_FDCAN3_Init+0xc4>)
 8001b80:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001b82:	4b2d      	ldr	r3, [pc, #180]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001b88:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001b8e:	4b2a      	ldr	r3, [pc, #168]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001b94:	4b28      	ldr	r3, [pc, #160]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001b9a:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001ba0:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001ba2:	2210      	movs	r2, #16
 8001ba4:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001ba6:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001ba8:	2201      	movs	r2, #1
 8001baa:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001bac:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001bae:	2202      	movs	r2, #2
 8001bb0:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001bb2:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001bb8:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001bbe:	4b1e      	ldr	r3, [pc, #120]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001bca:	4b1b      	ldr	r3, [pc, #108]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001bd0:	4b19      	ldr	r3, [pc, #100]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001bd6:	4b18      	ldr	r3, [pc, #96]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001bdc:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001be2:	4b15      	ldr	r3, [pc, #84]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001bea:	2204      	movs	r2, #4
 8001bec:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001bf4:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001bfa:	4b0f      	ldr	r3, [pc, #60]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001c00:	4b0d      	ldr	r3, [pc, #52]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001c02:	2204      	movs	r2, #4
 8001c04:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001c06:	4b0c      	ldr	r3, [pc, #48]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001c0c:	4b0a      	ldr	r3, [pc, #40]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001c12:	4b09      	ldr	r3, [pc, #36]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001c18:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001c20:	2204      	movs	r2, #4
 8001c22:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001c24:	4804      	ldr	r0, [pc, #16]	; (8001c38 <MX_FDCAN3_Init+0xc0>)
 8001c26:	f005 f823 	bl	8006c70 <HAL_FDCAN_Init>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001c30:	f000 fd88 	bl	8002744 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001c34:	bf00      	nop
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	240004c4 	.word	0x240004c4
 8001c3c:	4000d400 	.word	0x4000d400

08001c40 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c44:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c46:	4a1c      	ldr	r2, [pc, #112]	; (8001cb8 <MX_I2C2_Init+0x78>)
 8001c48:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c4c:	4a1b      	ldr	r2, [pc, #108]	; (8001cbc <MX_I2C2_Init+0x7c>)
 8001c4e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001c50:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c7a:	480e      	ldr	r0, [pc, #56]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c7c:	f005 fd36 	bl	80076ec <HAL_I2C_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001c86:	f000 fd5d 	bl	8002744 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4809      	ldr	r0, [pc, #36]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001c8e:	f005 fdbd 	bl	800780c <HAL_I2CEx_ConfigAnalogFilter>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001c98:	f000 fd54 	bl	8002744 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_I2C2_Init+0x74>)
 8001ca0:	f005 fdff 	bl	80078a2 <HAL_I2CEx_ConfigDigitalFilter>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001caa:	f000 fd4b 	bl	8002744 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	24000564 	.word	0x24000564
 8001cb8:	40005800 	.word	0x40005800
 8001cbc:	20303e5d 	.word	0x20303e5d

08001cc0 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001cc4:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <MX_SDMMC2_SD_Init+0x34>)
 8001cc6:	4a0c      	ldr	r2, [pc, #48]	; (8001cf8 <MX_SDMMC2_SD_Init+0x38>)
 8001cc8:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001cca:	4b0a      	ldr	r3, [pc, #40]	; (8001cf4 <MX_SDMMC2_SD_Init+0x34>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <MX_SDMMC2_SD_Init+0x34>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001cd6:	4b07      	ldr	r3, [pc, #28]	; (8001cf4 <MX_SDMMC2_SD_Init+0x34>)
 8001cd8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cdc:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001cde:	4b05      	ldr	r3, [pc, #20]	; (8001cf4 <MX_SDMMC2_SD_Init+0x34>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001ce4:	4b03      	ldr	r3, [pc, #12]	; (8001cf4 <MX_SDMMC2_SD_Init+0x34>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	240005b8 	.word	0x240005b8
 8001cf8:	48022400 	.word	0x48022400

08001cfc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001d00:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d02:	4a28      	ldr	r2, [pc, #160]	; (8001da4 <MX_SPI1_Init+0xa8>)
 8001d04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d06:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d08:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d0e:	4b24      	ldr	r3, [pc, #144]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d14:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d16:	2207      	movs	r2, #7
 8001d18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d1a:	4b21      	ldr	r3, [pc, #132]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d20:	4b1f      	ldr	r3, [pc, #124]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d26:	4b1e      	ldr	r3, [pc, #120]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d28:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d2e:	4b1c      	ldr	r3, [pc, #112]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d30:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001d34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d36:	4b1a      	ldr	r3, [pc, #104]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d3c:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d42:	4b17      	ldr	r3, [pc, #92]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001d48:	4b15      	ldr	r3, [pc, #84]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d4e:	4b14      	ldr	r3, [pc, #80]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d54:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001d56:	4b12      	ldr	r3, [pc, #72]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001d5c:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d62:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001d68:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001d6e:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001d74:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001d80:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d8c:	4804      	ldr	r0, [pc, #16]	; (8001da0 <MX_SPI1_Init+0xa4>)
 8001d8e:	f00c f8f1 	bl	800df74 <HAL_SPI_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001d98:	f000 fcd4 	bl	8002744 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	24000634 	.word	0x24000634
 8001da4:	40013000 	.word	0x40013000

08001da8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001dac:	4b27      	ldr	r3, [pc, #156]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001dae:	4a28      	ldr	r2, [pc, #160]	; (8001e50 <MX_SPI2_Init+0xa8>)
 8001db0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001db2:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001db4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001db8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001dba:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dc0:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001dc2:	2207      	movs	r2, #7
 8001dc4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dc6:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dcc:	4b1f      	ldr	r3, [pc, #124]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001dd2:	4b1e      	ldr	r3, [pc, #120]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001dd4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001dd8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001dda:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001ddc:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001de0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001de2:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dee:	4b17      	ldr	r3, [pc, #92]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001df4:	4b15      	ldr	r3, [pc, #84]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dfa:	4b14      	ldr	r3, [pc, #80]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001dfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e00:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001e02:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001e08:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e0e:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001e14:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001e20:	4b0a      	ldr	r3, [pc, #40]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001e26:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001e2c:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001e32:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001e38:	4804      	ldr	r0, [pc, #16]	; (8001e4c <MX_SPI2_Init+0xa4>)
 8001e3a:	f00c f89b 	bl	800df74 <HAL_SPI_Init>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8001e44:	f000 fc7e 	bl	8002744 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	240006bc 	.word	0x240006bc
 8001e50:	40003800 	.word	0x40003800

08001e54 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001e58:	4b27      	ldr	r3, [pc, #156]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001e5a:	4a28      	ldr	r2, [pc, #160]	; (8001efc <MX_SPI3_Init+0xa8>)
 8001e5c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001e5e:	4b26      	ldr	r3, [pc, #152]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001e60:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001e64:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001e66:	4b24      	ldr	r3, [pc, #144]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e6c:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001e6e:	2207      	movs	r2, #7
 8001e70:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e72:	4b21      	ldr	r3, [pc, #132]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e78:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001e7e:	4b1e      	ldr	r3, [pc, #120]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001e80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001e84:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001e86:	4b1c      	ldr	r3, [pc, #112]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001e88:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001e8c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e94:	4b18      	ldr	r3, [pc, #96]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001ea0:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001ea8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001eac:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001eae:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001eb4:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001eba:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001ec6:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001ed2:	4b09      	ldr	r3, [pc, #36]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001ed8:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001ede:	4b06      	ldr	r3, [pc, #24]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001ee4:	4804      	ldr	r0, [pc, #16]	; (8001ef8 <MX_SPI3_Init+0xa4>)
 8001ee6:	f00c f845 	bl	800df74 <HAL_SPI_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8001ef0:	f000 fc28 	bl	8002744 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001ef4:	bf00      	nop
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	24000744 	.word	0x24000744
 8001efc:	40003c00 	.word	0x40003c00

08001f00 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08a      	sub	sp, #40	; 0x28
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f06:	f107 031c 	add.w	r3, r7, #28
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f12:	463b      	mov	r3, r7
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
 8001f20:	615a      	str	r2, [r3, #20]
 8001f22:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f24:	4b21      	ldr	r3, [pc, #132]	; (8001fac <MX_TIM2_Init+0xac>)
 8001f26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f2a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f2c:	4b1f      	ldr	r3, [pc, #124]	; (8001fac <MX_TIM2_Init+0xac>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f32:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <MX_TIM2_Init+0xac>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8001f38:	4b1c      	ldr	r3, [pc, #112]	; (8001fac <MX_TIM2_Init+0xac>)
 8001f3a:	225a      	movs	r2, #90	; 0x5a
 8001f3c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3e:	4b1b      	ldr	r3, [pc, #108]	; (8001fac <MX_TIM2_Init+0xac>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f44:	4b19      	ldr	r3, [pc, #100]	; (8001fac <MX_TIM2_Init+0xac>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f4a:	4818      	ldr	r0, [pc, #96]	; (8001fac <MX_TIM2_Init+0xac>)
 8001f4c:	f00c fe80 	bl	800ec50 <HAL_TIM_PWM_Init>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001f56:	f000 fbf5 	bl	8002744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f62:	f107 031c 	add.w	r3, r7, #28
 8001f66:	4619      	mov	r1, r3
 8001f68:	4810      	ldr	r0, [pc, #64]	; (8001fac <MX_TIM2_Init+0xac>)
 8001f6a:	f00d fded 	bl	800fb48 <HAL_TIMEx_MasterConfigSynchronization>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001f74:	f000 fbe6 	bl	8002744 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f78:	2360      	movs	r3, #96	; 0x60
 8001f7a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001f88:	463b      	mov	r3, r7
 8001f8a:	2208      	movs	r2, #8
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4807      	ldr	r0, [pc, #28]	; (8001fac <MX_TIM2_Init+0xac>)
 8001f90:	f00d f8f2 	bl	800f178 <HAL_TIM_PWM_ConfigChannel>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001f9a:	f000 fbd3 	bl	8002744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f9e:	4803      	ldr	r0, [pc, #12]	; (8001fac <MX_TIM2_Init+0xac>)
 8001fa0:	f001 f8e6 	bl	8003170 <HAL_TIM_MspPostInit>

}
 8001fa4:	bf00      	nop
 8001fa6:	3728      	adds	r7, #40	; 0x28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	240007cc 	.word	0x240007cc

08001fb0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb6:	f107 031c 	add.w	r3, r7, #28
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	605a      	str	r2, [r3, #4]
 8001fc0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fc2:	463b      	mov	r3, r7
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
 8001fd0:	615a      	str	r2, [r3, #20]
 8001fd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fd4:	4b26      	ldr	r3, [pc, #152]	; (8002070 <MX_TIM3_Init+0xc0>)
 8001fd6:	4a27      	ldr	r2, [pc, #156]	; (8002074 <MX_TIM3_Init+0xc4>)
 8001fd8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001fda:	4b25      	ldr	r3, [pc, #148]	; (8002070 <MX_TIM3_Init+0xc0>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe0:	4b23      	ldr	r3, [pc, #140]	; (8002070 <MX_TIM3_Init+0xc0>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 8001fe6:	4b22      	ldr	r3, [pc, #136]	; (8002070 <MX_TIM3_Init+0xc0>)
 8001fe8:	225a      	movs	r2, #90	; 0x5a
 8001fea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fec:	4b20      	ldr	r3, [pc, #128]	; (8002070 <MX_TIM3_Init+0xc0>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff2:	4b1f      	ldr	r3, [pc, #124]	; (8002070 <MX_TIM3_Init+0xc0>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ff8:	481d      	ldr	r0, [pc, #116]	; (8002070 <MX_TIM3_Init+0xc0>)
 8001ffa:	f00c fe29 	bl	800ec50 <HAL_TIM_PWM_Init>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002004:	f000 fb9e 	bl	8002744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002008:	2300      	movs	r3, #0
 800200a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800200c:	2300      	movs	r3, #0
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002010:	f107 031c 	add.w	r3, r7, #28
 8002014:	4619      	mov	r1, r3
 8002016:	4816      	ldr	r0, [pc, #88]	; (8002070 <MX_TIM3_Init+0xc0>)
 8002018:	f00d fd96 	bl	800fb48 <HAL_TIMEx_MasterConfigSynchronization>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8002022:	f000 fb8f 	bl	8002744 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002026:	2360      	movs	r3, #96	; 0x60
 8002028:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800202a:	2300      	movs	r3, #0
 800202c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800202e:	2300      	movs	r3, #0
 8002030:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002036:	463b      	mov	r3, r7
 8002038:	2200      	movs	r2, #0
 800203a:	4619      	mov	r1, r3
 800203c:	480c      	ldr	r0, [pc, #48]	; (8002070 <MX_TIM3_Init+0xc0>)
 800203e:	f00d f89b 	bl	800f178 <HAL_TIM_PWM_ConfigChannel>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002048:	f000 fb7c 	bl	8002744 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800204c:	463b      	mov	r3, r7
 800204e:	2204      	movs	r2, #4
 8002050:	4619      	mov	r1, r3
 8002052:	4807      	ldr	r0, [pc, #28]	; (8002070 <MX_TIM3_Init+0xc0>)
 8002054:	f00d f890 	bl	800f178 <HAL_TIM_PWM_ConfigChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800205e:	f000 fb71 	bl	8002744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002062:	4803      	ldr	r0, [pc, #12]	; (8002070 <MX_TIM3_Init+0xc0>)
 8002064:	f001 f884 	bl	8003170 <HAL_TIM_MspPostInit>

}
 8002068:	bf00      	nop
 800206a:	3728      	adds	r7, #40	; 0x28
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	24000818 	.word	0x24000818
 8002074:	40000400 	.word	0x40000400

08002078 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800207e:	f107 031c 	add.w	r3, r7, #28
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800208a:	463b      	mov	r3, r7
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
 8002098:	615a      	str	r2, [r3, #20]
 800209a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800209c:	4b32      	ldr	r3, [pc, #200]	; (8002168 <MX_TIM4_Init+0xf0>)
 800209e:	4a33      	ldr	r2, [pc, #204]	; (800216c <MX_TIM4_Init+0xf4>)
 80020a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 80020a2:	4b31      	ldr	r3, [pc, #196]	; (8002168 <MX_TIM4_Init+0xf0>)
 80020a4:	221c      	movs	r2, #28
 80020a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a8:	4b2f      	ldr	r3, [pc, #188]	; (8002168 <MX_TIM4_Init+0xf0>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80020ae:	4b2e      	ldr	r3, [pc, #184]	; (8002168 <MX_TIM4_Init+0xf0>)
 80020b0:	f242 720f 	movw	r2, #9999	; 0x270f
 80020b4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b6:	4b2c      	ldr	r3, [pc, #176]	; (8002168 <MX_TIM4_Init+0xf0>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020bc:	4b2a      	ldr	r3, [pc, #168]	; (8002168 <MX_TIM4_Init+0xf0>)
 80020be:	2200      	movs	r2, #0
 80020c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80020c2:	4829      	ldr	r0, [pc, #164]	; (8002168 <MX_TIM4_Init+0xf0>)
 80020c4:	f00c fdc4 	bl	800ec50 <HAL_TIM_PWM_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80020ce:	f000 fb39 	bl	8002744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020da:	f107 031c 	add.w	r3, r7, #28
 80020de:	4619      	mov	r1, r3
 80020e0:	4821      	ldr	r0, [pc, #132]	; (8002168 <MX_TIM4_Init+0xf0>)
 80020e2:	f00d fd31 	bl	800fb48 <HAL_TIMEx_MasterConfigSynchronization>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80020ec:	f000 fb2a 	bl	8002744 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020f0:	2360      	movs	r3, #96	; 0x60
 80020f2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020f8:	2300      	movs	r3, #0
 80020fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020fc:	2300      	movs	r3, #0
 80020fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002100:	463b      	mov	r3, r7
 8002102:	2200      	movs	r2, #0
 8002104:	4619      	mov	r1, r3
 8002106:	4818      	ldr	r0, [pc, #96]	; (8002168 <MX_TIM4_Init+0xf0>)
 8002108:	f00d f836 	bl	800f178 <HAL_TIM_PWM_ConfigChannel>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002112:	f000 fb17 	bl	8002744 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002116:	463b      	mov	r3, r7
 8002118:	2204      	movs	r2, #4
 800211a:	4619      	mov	r1, r3
 800211c:	4812      	ldr	r0, [pc, #72]	; (8002168 <MX_TIM4_Init+0xf0>)
 800211e:	f00d f82b 	bl	800f178 <HAL_TIM_PWM_ConfigChannel>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002128:	f000 fb0c 	bl	8002744 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800212c:	463b      	mov	r3, r7
 800212e:	2208      	movs	r2, #8
 8002130:	4619      	mov	r1, r3
 8002132:	480d      	ldr	r0, [pc, #52]	; (8002168 <MX_TIM4_Init+0xf0>)
 8002134:	f00d f820 	bl	800f178 <HAL_TIM_PWM_ConfigChannel>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 800213e:	f000 fb01 	bl	8002744 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002142:	463b      	mov	r3, r7
 8002144:	220c      	movs	r2, #12
 8002146:	4619      	mov	r1, r3
 8002148:	4807      	ldr	r0, [pc, #28]	; (8002168 <MX_TIM4_Init+0xf0>)
 800214a:	f00d f815 	bl	800f178 <HAL_TIM_PWM_ConfigChannel>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 8002154:	f000 faf6 	bl	8002744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002158:	4803      	ldr	r0, [pc, #12]	; (8002168 <MX_TIM4_Init+0xf0>)
 800215a:	f001 f809 	bl	8003170 <HAL_TIM_MspPostInit>

}
 800215e:	bf00      	nop
 8002160:	3728      	adds	r7, #40	; 0x28
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	24000864 	.word	0x24000864
 800216c:	40000800 	.word	0x40000800

08002170 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08a      	sub	sp, #40	; 0x28
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002176:	f107 031c 	add.w	r3, r7, #28
 800217a:	2200      	movs	r2, #0
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	605a      	str	r2, [r3, #4]
 8002180:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002182:	463b      	mov	r3, r7
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
 8002190:	615a      	str	r2, [r3, #20]
 8002192:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002194:	4b21      	ldr	r3, [pc, #132]	; (800221c <MX_TIM5_Init+0xac>)
 8002196:	4a22      	ldr	r2, [pc, #136]	; (8002220 <MX_TIM5_Init+0xb0>)
 8002198:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800219a:	4b20      	ldr	r3, [pc, #128]	; (800221c <MX_TIM5_Init+0xac>)
 800219c:	2200      	movs	r2, #0
 800219e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a0:	4b1e      	ldr	r3, [pc, #120]	; (800221c <MX_TIM5_Init+0xac>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 80021a6:	4b1d      	ldr	r3, [pc, #116]	; (800221c <MX_TIM5_Init+0xac>)
 80021a8:	225a      	movs	r2, #90	; 0x5a
 80021aa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ac:	4b1b      	ldr	r3, [pc, #108]	; (800221c <MX_TIM5_Init+0xac>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b2:	4b1a      	ldr	r3, [pc, #104]	; (800221c <MX_TIM5_Init+0xac>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80021b8:	4818      	ldr	r0, [pc, #96]	; (800221c <MX_TIM5_Init+0xac>)
 80021ba:	f00c fd49 	bl	800ec50 <HAL_TIM_PWM_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80021c4:	f000 fabe 	bl	8002744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	4619      	mov	r1, r3
 80021d6:	4811      	ldr	r0, [pc, #68]	; (800221c <MX_TIM5_Init+0xac>)
 80021d8:	f00d fcb6 	bl	800fb48 <HAL_TIMEx_MasterConfigSynchronization>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80021e2:	f000 faaf 	bl	8002744 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021e6:	2360      	movs	r3, #96	; 0x60
 80021e8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021ea:	2300      	movs	r3, #0
 80021ec:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021ee:	2300      	movs	r3, #0
 80021f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80021f6:	463b      	mov	r3, r7
 80021f8:	220c      	movs	r2, #12
 80021fa:	4619      	mov	r1, r3
 80021fc:	4807      	ldr	r0, [pc, #28]	; (800221c <MX_TIM5_Init+0xac>)
 80021fe:	f00c ffbb 	bl	800f178 <HAL_TIM_PWM_ConfigChannel>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d001      	beq.n	800220c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002208:	f000 fa9c 	bl	8002744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800220c:	4803      	ldr	r0, [pc, #12]	; (800221c <MX_TIM5_Init+0xac>)
 800220e:	f000 ffaf 	bl	8003170 <HAL_TIM_MspPostInit>

}
 8002212:	bf00      	nop
 8002214:	3728      	adds	r7, #40	; 0x28
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	240008b0 	.word	0x240008b0
 8002220:	40000c00 	.word	0x40000c00

08002224 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002228:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <MX_TIM13_Init+0x40>)
 800222a:	4a0f      	ldr	r2, [pc, #60]	; (8002268 <MX_TIM13_Init+0x44>)
 800222c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 800222e:	4b0d      	ldr	r3, [pc, #52]	; (8002264 <MX_TIM13_Init+0x40>)
 8002230:	225f      	movs	r2, #95	; 0x5f
 8002232:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002234:	4b0b      	ldr	r3, [pc, #44]	; (8002264 <MX_TIM13_Init+0x40>)
 8002236:	2200      	movs	r2, #0
 8002238:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800223a:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <MX_TIM13_Init+0x40>)
 800223c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002240:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002242:	4b08      	ldr	r3, [pc, #32]	; (8002264 <MX_TIM13_Init+0x40>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002248:	4b06      	ldr	r3, [pc, #24]	; (8002264 <MX_TIM13_Init+0x40>)
 800224a:	2200      	movs	r2, #0
 800224c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800224e:	4805      	ldr	r0, [pc, #20]	; (8002264 <MX_TIM13_Init+0x40>)
 8002250:	f00c fc29 	bl	800eaa6 <HAL_TIM_Base_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d001      	beq.n	800225e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 800225a:	f000 fa73 	bl	8002744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	240008fc 	.word	0x240008fc
 8002268:	40001c00 	.word	0x40001c00

0800226c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002270:	4b22      	ldr	r3, [pc, #136]	; (80022fc <MX_UART4_Init+0x90>)
 8002272:	4a23      	ldr	r2, [pc, #140]	; (8002300 <MX_UART4_Init+0x94>)
 8002274:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002276:	4b21      	ldr	r3, [pc, #132]	; (80022fc <MX_UART4_Init+0x90>)
 8002278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800227c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800227e:	4b1f      	ldr	r3, [pc, #124]	; (80022fc <MX_UART4_Init+0x90>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <MX_UART4_Init+0x90>)
 8002286:	2200      	movs	r2, #0
 8002288:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800228a:	4b1c      	ldr	r3, [pc, #112]	; (80022fc <MX_UART4_Init+0x90>)
 800228c:	2200      	movs	r2, #0
 800228e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002290:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <MX_UART4_Init+0x90>)
 8002292:	220c      	movs	r2, #12
 8002294:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002296:	4b19      	ldr	r3, [pc, #100]	; (80022fc <MX_UART4_Init+0x90>)
 8002298:	2200      	movs	r2, #0
 800229a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800229c:	4b17      	ldr	r3, [pc, #92]	; (80022fc <MX_UART4_Init+0x90>)
 800229e:	2200      	movs	r2, #0
 80022a0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022a2:	4b16      	ldr	r3, [pc, #88]	; (80022fc <MX_UART4_Init+0x90>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022a8:	4b14      	ldr	r3, [pc, #80]	; (80022fc <MX_UART4_Init+0x90>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022ae:	4b13      	ldr	r3, [pc, #76]	; (80022fc <MX_UART4_Init+0x90>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80022b4:	4811      	ldr	r0, [pc, #68]	; (80022fc <MX_UART4_Init+0x90>)
 80022b6:	f00d fd01 	bl	800fcbc <HAL_UART_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80022c0:	f000 fa40 	bl	8002744 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022c4:	2100      	movs	r1, #0
 80022c6:	480d      	ldr	r0, [pc, #52]	; (80022fc <MX_UART4_Init+0x90>)
 80022c8:	f00e fe07 	bl	8010eda <HAL_UARTEx_SetTxFifoThreshold>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80022d2:	f000 fa37 	bl	8002744 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022d6:	2100      	movs	r1, #0
 80022d8:	4808      	ldr	r0, [pc, #32]	; (80022fc <MX_UART4_Init+0x90>)
 80022da:	f00e fe3c 	bl	8010f56 <HAL_UARTEx_SetRxFifoThreshold>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d001      	beq.n	80022e8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80022e4:	f000 fa2e 	bl	8002744 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80022e8:	4804      	ldr	r0, [pc, #16]	; (80022fc <MX_UART4_Init+0x90>)
 80022ea:	f00e fdbd 	bl	8010e68 <HAL_UARTEx_DisableFifoMode>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80022f4:	f000 fa26 	bl	8002744 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80022f8:	bf00      	nop
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	24000ba0 	.word	0x24000ba0
 8002300:	40004c00 	.word	0x40004c00

08002304 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002308:	4b22      	ldr	r3, [pc, #136]	; (8002394 <MX_USART6_UART_Init+0x90>)
 800230a:	4a23      	ldr	r2, [pc, #140]	; (8002398 <MX_USART6_UART_Init+0x94>)
 800230c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800230e:	4b21      	ldr	r3, [pc, #132]	; (8002394 <MX_USART6_UART_Init+0x90>)
 8002310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002314:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002316:	4b1f      	ldr	r3, [pc, #124]	; (8002394 <MX_USART6_UART_Init+0x90>)
 8002318:	2200      	movs	r2, #0
 800231a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800231c:	4b1d      	ldr	r3, [pc, #116]	; (8002394 <MX_USART6_UART_Init+0x90>)
 800231e:	2200      	movs	r2, #0
 8002320:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002322:	4b1c      	ldr	r3, [pc, #112]	; (8002394 <MX_USART6_UART_Init+0x90>)
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002328:	4b1a      	ldr	r3, [pc, #104]	; (8002394 <MX_USART6_UART_Init+0x90>)
 800232a:	220c      	movs	r2, #12
 800232c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800232e:	4b19      	ldr	r3, [pc, #100]	; (8002394 <MX_USART6_UART_Init+0x90>)
 8002330:	2200      	movs	r2, #0
 8002332:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002334:	4b17      	ldr	r3, [pc, #92]	; (8002394 <MX_USART6_UART_Init+0x90>)
 8002336:	2200      	movs	r2, #0
 8002338:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800233a:	4b16      	ldr	r3, [pc, #88]	; (8002394 <MX_USART6_UART_Init+0x90>)
 800233c:	2200      	movs	r2, #0
 800233e:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002340:	4b14      	ldr	r3, [pc, #80]	; (8002394 <MX_USART6_UART_Init+0x90>)
 8002342:	2200      	movs	r2, #0
 8002344:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002346:	4b13      	ldr	r3, [pc, #76]	; (8002394 <MX_USART6_UART_Init+0x90>)
 8002348:	2200      	movs	r2, #0
 800234a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800234c:	4811      	ldr	r0, [pc, #68]	; (8002394 <MX_USART6_UART_Init+0x90>)
 800234e:	f00d fcb5 	bl	800fcbc <HAL_UART_Init>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002358:	f000 f9f4 	bl	8002744 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800235c:	2100      	movs	r1, #0
 800235e:	480d      	ldr	r0, [pc, #52]	; (8002394 <MX_USART6_UART_Init+0x90>)
 8002360:	f00e fdbb 	bl	8010eda <HAL_UARTEx_SetTxFifoThreshold>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800236a:	f000 f9eb 	bl	8002744 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800236e:	2100      	movs	r1, #0
 8002370:	4808      	ldr	r0, [pc, #32]	; (8002394 <MX_USART6_UART_Init+0x90>)
 8002372:	f00e fdf0 	bl	8010f56 <HAL_UARTEx_SetRxFifoThreshold>
 8002376:	4603      	mov	r3, r0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 800237c:	f000 f9e2 	bl	8002744 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002380:	4804      	ldr	r0, [pc, #16]	; (8002394 <MX_USART6_UART_Init+0x90>)
 8002382:	f00e fd71 	bl	8010e68 <HAL_UARTEx_DisableFifoMode>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800238c:	f000 f9da 	bl	8002744 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}
 8002394:	24000c34 	.word	0x24000c34
 8002398:	40011400 	.word	0x40011400

0800239c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80023a2:	4b2d      	ldr	r3, [pc, #180]	; (8002458 <MX_DMA_Init+0xbc>)
 80023a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023a8:	4a2b      	ldr	r2, [pc, #172]	; (8002458 <MX_DMA_Init+0xbc>)
 80023aa:	f043 0301 	orr.w	r3, r3, #1
 80023ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023b2:	4b29      	ldr	r3, [pc, #164]	; (8002458 <MX_DMA_Init+0xbc>)
 80023b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	607b      	str	r3, [r7, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80023c0:	4b25      	ldr	r3, [pc, #148]	; (8002458 <MX_DMA_Init+0xbc>)
 80023c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023c6:	4a24      	ldr	r2, [pc, #144]	; (8002458 <MX_DMA_Init+0xbc>)
 80023c8:	f043 0302 	orr.w	r3, r3, #2
 80023cc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80023d0:	4b21      	ldr	r3, [pc, #132]	; (8002458 <MX_DMA_Init+0xbc>)
 80023d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	603b      	str	r3, [r7, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80023de:	2200      	movs	r2, #0
 80023e0:	2100      	movs	r1, #0
 80023e2:	200b      	movs	r0, #11
 80023e4:	f002 ff4f 	bl	8005286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80023e8:	200b      	movs	r0, #11
 80023ea:	f002 ff66 	bl	80052ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	200c      	movs	r0, #12
 80023f4:	f002 ff47 	bl	8005286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80023f8:	200c      	movs	r0, #12
 80023fa:	f002 ff5e 	bl	80052ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2100      	movs	r1, #0
 8002402:	200d      	movs	r0, #13
 8002404:	f002 ff3f 	bl	8005286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002408:	200d      	movs	r0, #13
 800240a:	f002 ff56 	bl	80052ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800240e:	2200      	movs	r2, #0
 8002410:	2100      	movs	r1, #0
 8002412:	200e      	movs	r0, #14
 8002414:	f002 ff37 	bl	8005286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8002418:	200e      	movs	r0, #14
 800241a:	f002 ff4e 	bl	80052ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800241e:	2200      	movs	r2, #0
 8002420:	2100      	movs	r1, #0
 8002422:	200f      	movs	r0, #15
 8002424:	f002 ff2f 	bl	8005286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002428:	200f      	movs	r0, #15
 800242a:	f002 ff46 	bl	80052ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800242e:	2200      	movs	r2, #0
 8002430:	2100      	movs	r1, #0
 8002432:	2010      	movs	r0, #16
 8002434:	f002 ff27 	bl	8005286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002438:	2010      	movs	r0, #16
 800243a:	f002 ff3e 	bl	80052ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800243e:	2200      	movs	r2, #0
 8002440:	2100      	movs	r1, #0
 8002442:	2046      	movs	r0, #70	; 0x46
 8002444:	f002 ff1f 	bl	8005286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002448:	2046      	movs	r0, #70	; 0x46
 800244a:	f002 ff36 	bl	80052ba <HAL_NVIC_EnableIRQ>

}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	58024400 	.word	0x58024400

0800245c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08e      	sub	sp, #56	; 0x38
 8002460:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	609a      	str	r2, [r3, #8]
 800246e:	60da      	str	r2, [r3, #12]
 8002470:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002472:	4bac      	ldr	r3, [pc, #688]	; (8002724 <MX_GPIO_Init+0x2c8>)
 8002474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002478:	4aaa      	ldr	r2, [pc, #680]	; (8002724 <MX_GPIO_Init+0x2c8>)
 800247a:	f043 0310 	orr.w	r3, r3, #16
 800247e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002482:	4ba8      	ldr	r3, [pc, #672]	; (8002724 <MX_GPIO_Init+0x2c8>)
 8002484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002488:	f003 0310 	and.w	r3, r3, #16
 800248c:	623b      	str	r3, [r7, #32]
 800248e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002490:	4ba4      	ldr	r3, [pc, #656]	; (8002724 <MX_GPIO_Init+0x2c8>)
 8002492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002496:	4aa3      	ldr	r2, [pc, #652]	; (8002724 <MX_GPIO_Init+0x2c8>)
 8002498:	f043 0320 	orr.w	r3, r3, #32
 800249c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024a0:	4ba0      	ldr	r3, [pc, #640]	; (8002724 <MX_GPIO_Init+0x2c8>)
 80024a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a6:	f003 0320 	and.w	r3, r3, #32
 80024aa:	61fb      	str	r3, [r7, #28]
 80024ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024ae:	4b9d      	ldr	r3, [pc, #628]	; (8002724 <MX_GPIO_Init+0x2c8>)
 80024b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024b4:	4a9b      	ldr	r2, [pc, #620]	; (8002724 <MX_GPIO_Init+0x2c8>)
 80024b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024be:	4b99      	ldr	r3, [pc, #612]	; (8002724 <MX_GPIO_Init+0x2c8>)
 80024c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c8:	61bb      	str	r3, [r7, #24]
 80024ca:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024cc:	4b95      	ldr	r3, [pc, #596]	; (8002724 <MX_GPIO_Init+0x2c8>)
 80024ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024d2:	4a94      	ldr	r2, [pc, #592]	; (8002724 <MX_GPIO_Init+0x2c8>)
 80024d4:	f043 0304 	orr.w	r3, r3, #4
 80024d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024dc:	4b91      	ldr	r3, [pc, #580]	; (8002724 <MX_GPIO_Init+0x2c8>)
 80024de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ea:	4b8e      	ldr	r3, [pc, #568]	; (8002724 <MX_GPIO_Init+0x2c8>)
 80024ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024f0:	4a8c      	ldr	r2, [pc, #560]	; (8002724 <MX_GPIO_Init+0x2c8>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024fa:	4b8a      	ldr	r3, [pc, #552]	; (8002724 <MX_GPIO_Init+0x2c8>)
 80024fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002500:	f003 0301 	and.w	r3, r3, #1
 8002504:	613b      	str	r3, [r7, #16]
 8002506:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002508:	4b86      	ldr	r3, [pc, #536]	; (8002724 <MX_GPIO_Init+0x2c8>)
 800250a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800250e:	4a85      	ldr	r2, [pc, #532]	; (8002724 <MX_GPIO_Init+0x2c8>)
 8002510:	f043 0302 	orr.w	r3, r3, #2
 8002514:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002518:	4b82      	ldr	r3, [pc, #520]	; (8002724 <MX_GPIO_Init+0x2c8>)
 800251a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002526:	4b7f      	ldr	r3, [pc, #508]	; (8002724 <MX_GPIO_Init+0x2c8>)
 8002528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800252c:	4a7d      	ldr	r2, [pc, #500]	; (8002724 <MX_GPIO_Init+0x2c8>)
 800252e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002536:	4b7b      	ldr	r3, [pc, #492]	; (8002724 <MX_GPIO_Init+0x2c8>)
 8002538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002544:	4b77      	ldr	r3, [pc, #476]	; (8002724 <MX_GPIO_Init+0x2c8>)
 8002546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800254a:	4a76      	ldr	r2, [pc, #472]	; (8002724 <MX_GPIO_Init+0x2c8>)
 800254c:	f043 0308 	orr.w	r3, r3, #8
 8002550:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002554:	4b73      	ldr	r3, [pc, #460]	; (8002724 <MX_GPIO_Init+0x2c8>)
 8002556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8002562:	2200      	movs	r2, #0
 8002564:	f241 5104 	movw	r1, #5380	; 0x1504
 8002568:	486f      	ldr	r0, [pc, #444]	; (8002728 <MX_GPIO_Init+0x2cc>)
 800256a:	f005 f8a5 	bl	80076b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 800256e:	2200      	movs	r2, #0
 8002570:	f248 0106 	movw	r1, #32774	; 0x8006
 8002574:	486d      	ldr	r0, [pc, #436]	; (800272c <MX_GPIO_Init+0x2d0>)
 8002576:	f005 f89f 	bl	80076b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800257a:	2200      	movs	r2, #0
 800257c:	2130      	movs	r1, #48	; 0x30
 800257e:	486c      	ldr	r0, [pc, #432]	; (8002730 <MX_GPIO_Init+0x2d4>)
 8002580:	f005 f89a 	bl	80076b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8002584:	2200      	movs	r2, #0
 8002586:	2102      	movs	r1, #2
 8002588:	486a      	ldr	r0, [pc, #424]	; (8002734 <MX_GPIO_Init+0x2d8>)
 800258a:	f005 f895 	bl	80076b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 800258e:	2200      	movs	r2, #0
 8002590:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002594:	4868      	ldr	r0, [pc, #416]	; (8002738 <MX_GPIO_Init+0x2dc>)
 8002596:	f005 f88f 	bl	80076b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800259a:	2200      	movs	r2, #0
 800259c:	210e      	movs	r1, #14
 800259e:	4867      	ldr	r0, [pc, #412]	; (800273c <MX_GPIO_Init+0x2e0>)
 80025a0:	f005 f88a 	bl	80076b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 80025a4:	2200      	movs	r2, #0
 80025a6:	f240 3101 	movw	r1, #769	; 0x301
 80025aa:	4865      	ldr	r0, [pc, #404]	; (8002740 <MX_GPIO_Init+0x2e4>)
 80025ac:	f005 f884 	bl	80076b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 80025b0:	f241 5304 	movw	r3, #5380	; 0x1504
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025b6:	2301      	movs	r3, #1
 80025b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025be:	2300      	movs	r3, #0
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c6:	4619      	mov	r1, r3
 80025c8:	4857      	ldr	r0, [pc, #348]	; (8002728 <MX_GPIO_Init+0x2cc>)
 80025ca:	f004 feb5 	bl	8007338 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 80025ce:	f248 0306 	movw	r3, #32774	; 0x8006
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025d4:	2301      	movs	r3, #1
 80025d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025dc:	2300      	movs	r3, #0
 80025de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e4:	4619      	mov	r1, r3
 80025e6:	4851      	ldr	r0, [pc, #324]	; (800272c <MX_GPIO_Init+0x2d0>)
 80025e8:	f004 fea6 	bl	8007338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80025ec:	2330      	movs	r3, #48	; 0x30
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f0:	2301      	movs	r3, #1
 80025f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025f8:	2300      	movs	r3, #0
 80025fa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002600:	4619      	mov	r1, r3
 8002602:	484b      	ldr	r0, [pc, #300]	; (8002730 <MX_GPIO_Init+0x2d4>)
 8002604:	f004 fe98 	bl	8007338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 8002608:	2302      	movs	r3, #2
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800260c:	2301      	movs	r3, #1
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002614:	2300      	movs	r3, #0
 8002616:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 8002618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800261c:	4619      	mov	r1, r3
 800261e:	4845      	ldr	r0, [pc, #276]	; (8002734 <MX_GPIO_Init+0x2d8>)
 8002620:	f004 fe8a 	bl	8007338 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8002624:	2304      	movs	r3, #4
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002628:	2300      	movs	r3, #0
 800262a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800262c:	2301      	movs	r3, #1
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 8002630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002634:	4619      	mov	r1, r3
 8002636:	483f      	ldr	r0, [pc, #252]	; (8002734 <MX_GPIO_Init+0x2d8>)
 8002638:	f004 fe7e 	bl	8007338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 800263c:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002642:	2301      	movs	r3, #1
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002646:	2300      	movs	r3, #0
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264a:	2300      	movs	r3, #0
 800264c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800264e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002652:	4619      	mov	r1, r3
 8002654:	4838      	ldr	r0, [pc, #224]	; (8002738 <MX_GPIO_Init+0x2dc>)
 8002656:	f004 fe6f 	bl	8007338 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 800265a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800265e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002660:	2300      	movs	r3, #0
 8002662:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002664:	2301      	movs	r3, #1
 8002666:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266c:	4619      	mov	r1, r3
 800266e:	4832      	ldr	r0, [pc, #200]	; (8002738 <MX_GPIO_Init+0x2dc>)
 8002670:	f004 fe62 	bl	8007338 <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002674:	2301      	movs	r3, #1
 8002676:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002678:	2300      	movs	r3, #0
 800267a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800267c:	2301      	movs	r3, #1
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002684:	4619      	mov	r1, r3
 8002686:	482d      	ldr	r0, [pc, #180]	; (800273c <MX_GPIO_Init+0x2e0>)
 8002688:	f004 fe56 	bl	8007338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 800268c:	230e      	movs	r3, #14
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002690:	2301      	movs	r3, #1
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002698:	2300      	movs	r3, #0
 800269a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800269c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026a0:	4619      	mov	r1, r3
 80026a2:	4826      	ldr	r0, [pc, #152]	; (800273c <MX_GPIO_Init+0x2e0>)
 80026a4:	f004 fe48 	bl	8007338 <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 80026a8:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ae:	2300      	movs	r3, #0
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026b2:	2301      	movs	r3, #1
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026ba:	4619      	mov	r1, r3
 80026bc:	481a      	ldr	r0, [pc, #104]	; (8002728 <MX_GPIO_Init+0x2cc>)
 80026be:	f004 fe3b 	bl	8007338 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 80026c2:	f240 3301 	movw	r3, #769	; 0x301
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026c8:	2301      	movs	r3, #1
 80026ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d0:	2300      	movs	r3, #0
 80026d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d8:	4619      	mov	r1, r3
 80026da:	4819      	ldr	r0, [pc, #100]	; (8002740 <MX_GPIO_Init+0x2e4>)
 80026dc:	f004 fe2c 	bl	8007338 <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 80026e0:	2310      	movs	r3, #16
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026e4:	2300      	movs	r3, #0
 80026e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e8:	2300      	movs	r3, #0
 80026ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80026ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f0:	4619      	mov	r1, r3
 80026f2:	4812      	ldr	r0, [pc, #72]	; (800273c <MX_GPIO_Init+0x2e0>)
 80026f4:	f004 fe20 	bl	8007338 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fe:	2302      	movs	r3, #2
 8002700:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002706:	2300      	movs	r3, #0
 8002708:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800270a:	2300      	movs	r3, #0
 800270c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002712:	4619      	mov	r1, r3
 8002714:	4805      	ldr	r0, [pc, #20]	; (800272c <MX_GPIO_Init+0x2d0>)
 8002716:	f004 fe0f 	bl	8007338 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800271a:	bf00      	nop
 800271c:	3738      	adds	r7, #56	; 0x38
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	58024400 	.word	0x58024400
 8002728:	58021000 	.word	0x58021000
 800272c:	58020000 	.word	0x58020000
 8002730:	58020800 	.word	0x58020800
 8002734:	58020400 	.word	0x58020400
 8002738:	58021400 	.word	0x58021400
 800273c:	58021800 	.word	0x58021800
 8002740:	58020c00 	.word	0x58020c00

08002744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002748:	b672      	cpsid	i
}
 800274a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800274c:	e7fe      	b.n	800274c <Error_Handler+0x8>
	...

08002750 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <HAL_MspInit+0x30>)
 8002758:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800275c:	4a08      	ldr	r2, [pc, #32]	; (8002780 <HAL_MspInit+0x30>)
 800275e:	f043 0302 	orr.w	r3, r3, #2
 8002762:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_MspInit+0x30>)
 8002768:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	607b      	str	r3, [r7, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002774:	bf00      	nop
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr
 8002780:	58024400 	.word	0x58024400

08002784 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b08c      	sub	sp, #48	; 0x30
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800278c:	f107 031c 	add.w	r3, r7, #28
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a5d      	ldr	r2, [pc, #372]	; (8002918 <HAL_ADC_MspInit+0x194>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d159      	bne.n	800285a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80027a6:	4b5d      	ldr	r3, [pc, #372]	; (800291c <HAL_ADC_MspInit+0x198>)
 80027a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027ac:	4a5b      	ldr	r2, [pc, #364]	; (800291c <HAL_ADC_MspInit+0x198>)
 80027ae:	f043 0320 	orr.w	r3, r3, #32
 80027b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80027b6:	4b59      	ldr	r3, [pc, #356]	; (800291c <HAL_ADC_MspInit+0x198>)
 80027b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80027bc:	f003 0320 	and.w	r3, r3, #32
 80027c0:	61bb      	str	r3, [r7, #24]
 80027c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027c4:	4b55      	ldr	r3, [pc, #340]	; (800291c <HAL_ADC_MspInit+0x198>)
 80027c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027ca:	4a54      	ldr	r2, [pc, #336]	; (800291c <HAL_ADC_MspInit+0x198>)
 80027cc:	f043 0304 	orr.w	r3, r3, #4
 80027d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80027d4:	4b51      	ldr	r3, [pc, #324]	; (800291c <HAL_ADC_MspInit+0x198>)
 80027d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	617b      	str	r3, [r7, #20]
 80027e0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 80027e2:	2301      	movs	r3, #1
 80027e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80027e6:	2303      	movs	r3, #3
 80027e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ea:	2300      	movs	r3, #0
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80027ee:	f107 031c 	add.w	r3, r7, #28
 80027f2:	4619      	mov	r1, r3
 80027f4:	484a      	ldr	r0, [pc, #296]	; (8002920 <HAL_ADC_MspInit+0x19c>)
 80027f6:	f004 fd9f 	bl	8007338 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 80027fa:	4b4a      	ldr	r3, [pc, #296]	; (8002924 <HAL_ADC_MspInit+0x1a0>)
 80027fc:	4a4a      	ldr	r2, [pc, #296]	; (8002928 <HAL_ADC_MspInit+0x1a4>)
 80027fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002800:	4b48      	ldr	r3, [pc, #288]	; (8002924 <HAL_ADC_MspInit+0x1a0>)
 8002802:	2209      	movs	r2, #9
 8002804:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002806:	4b47      	ldr	r3, [pc, #284]	; (8002924 <HAL_ADC_MspInit+0x1a0>)
 8002808:	2200      	movs	r2, #0
 800280a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800280c:	4b45      	ldr	r3, [pc, #276]	; (8002924 <HAL_ADC_MspInit+0x1a0>)
 800280e:	2200      	movs	r2, #0
 8002810:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002812:	4b44      	ldr	r3, [pc, #272]	; (8002924 <HAL_ADC_MspInit+0x1a0>)
 8002814:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002818:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800281a:	4b42      	ldr	r3, [pc, #264]	; (8002924 <HAL_ADC_MspInit+0x1a0>)
 800281c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002820:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002822:	4b40      	ldr	r3, [pc, #256]	; (8002924 <HAL_ADC_MspInit+0x1a0>)
 8002824:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002828:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800282a:	4b3e      	ldr	r3, [pc, #248]	; (8002924 <HAL_ADC_MspInit+0x1a0>)
 800282c:	2200      	movs	r2, #0
 800282e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002830:	4b3c      	ldr	r3, [pc, #240]	; (8002924 <HAL_ADC_MspInit+0x1a0>)
 8002832:	2200      	movs	r2, #0
 8002834:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002836:	4b3b      	ldr	r3, [pc, #236]	; (8002924 <HAL_ADC_MspInit+0x1a0>)
 8002838:	2200      	movs	r2, #0
 800283a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800283c:	4839      	ldr	r0, [pc, #228]	; (8002924 <HAL_ADC_MspInit+0x1a0>)
 800283e:	f002 fd57 	bl	80052f0 <HAL_DMA_Init>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002848:	f7ff ff7c 	bl	8002744 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a35      	ldr	r2, [pc, #212]	; (8002924 <HAL_ADC_MspInit+0x1a0>)
 8002850:	659a      	str	r2, [r3, #88]	; 0x58
 8002852:	4a34      	ldr	r2, [pc, #208]	; (8002924 <HAL_ADC_MspInit+0x1a0>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002858:	e059      	b.n	800290e <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a33      	ldr	r2, [pc, #204]	; (800292c <HAL_ADC_MspInit+0x1a8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d154      	bne.n	800290e <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002864:	4b2d      	ldr	r3, [pc, #180]	; (800291c <HAL_ADC_MspInit+0x198>)
 8002866:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800286a:	4a2c      	ldr	r2, [pc, #176]	; (800291c <HAL_ADC_MspInit+0x198>)
 800286c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002870:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002874:	4b29      	ldr	r3, [pc, #164]	; (800291c <HAL_ADC_MspInit+0x198>)
 8002876:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800287a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800287e:	613b      	str	r3, [r7, #16]
 8002880:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002882:	4b26      	ldr	r3, [pc, #152]	; (800291c <HAL_ADC_MspInit+0x198>)
 8002884:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002888:	4a24      	ldr	r2, [pc, #144]	; (800291c <HAL_ADC_MspInit+0x198>)
 800288a:	f043 0304 	orr.w	r3, r3, #4
 800288e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002892:	4b22      	ldr	r3, [pc, #136]	; (800291c <HAL_ADC_MspInit+0x198>)
 8002894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	60fb      	str	r3, [r7, #12]
 800289e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80028a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80028a4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80028a8:	f001 f88c 	bl	80039c4 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 80028ac:	4b20      	ldr	r3, [pc, #128]	; (8002930 <HAL_ADC_MspInit+0x1ac>)
 80028ae:	4a21      	ldr	r2, [pc, #132]	; (8002934 <HAL_ADC_MspInit+0x1b0>)
 80028b0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80028b2:	4b1f      	ldr	r3, [pc, #124]	; (8002930 <HAL_ADC_MspInit+0x1ac>)
 80028b4:	2273      	movs	r2, #115	; 0x73
 80028b6:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028b8:	4b1d      	ldr	r3, [pc, #116]	; (8002930 <HAL_ADC_MspInit+0x1ac>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80028be:	4b1c      	ldr	r3, [pc, #112]	; (8002930 <HAL_ADC_MspInit+0x1ac>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80028c4:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <HAL_ADC_MspInit+0x1ac>)
 80028c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ca:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80028cc:	4b18      	ldr	r3, [pc, #96]	; (8002930 <HAL_ADC_MspInit+0x1ac>)
 80028ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028d2:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80028d4:	4b16      	ldr	r3, [pc, #88]	; (8002930 <HAL_ADC_MspInit+0x1ac>)
 80028d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028da:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80028dc:	4b14      	ldr	r3, [pc, #80]	; (8002930 <HAL_ADC_MspInit+0x1ac>)
 80028de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028e2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80028e4:	4b12      	ldr	r3, [pc, #72]	; (8002930 <HAL_ADC_MspInit+0x1ac>)
 80028e6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028ea:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ec:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_ADC_MspInit+0x1ac>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80028f2:	480f      	ldr	r0, [pc, #60]	; (8002930 <HAL_ADC_MspInit+0x1ac>)
 80028f4:	f002 fcfc 	bl	80052f0 <HAL_DMA_Init>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 80028fe:	f7ff ff21 	bl	8002744 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <HAL_ADC_MspInit+0x1ac>)
 8002906:	659a      	str	r2, [r3, #88]	; 0x58
 8002908:	4a09      	ldr	r2, [pc, #36]	; (8002930 <HAL_ADC_MspInit+0x1ac>)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800290e:	bf00      	nop
 8002910:	3730      	adds	r7, #48	; 0x30
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	40022000 	.word	0x40022000
 800291c:	58024400 	.word	0x58024400
 8002920:	58020800 	.word	0x58020800
 8002924:	240003d4 	.word	0x240003d4
 8002928:	40020088 	.word	0x40020088
 800292c:	58026000 	.word	0x58026000
 8002930:	2400044c 	.word	0x2400044c
 8002934:	400204b8 	.word	0x400204b8

08002938 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b0b8      	sub	sp, #224	; 0xe0
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002940:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	605a      	str	r2, [r3, #4]
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	60da      	str	r2, [r3, #12]
 800294e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002950:	f107 0310 	add.w	r3, r7, #16
 8002954:	22b8      	movs	r2, #184	; 0xb8
 8002956:	2100      	movs	r1, #0
 8002958:	4618      	mov	r0, r3
 800295a:	f013 fc61 	bl	8016220 <memset>
  if(hfdcan->Instance==FDCAN3)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a26      	ldr	r2, [pc, #152]	; (80029fc <HAL_FDCAN_MspInit+0xc4>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d144      	bne.n	80029f2 <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002968:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800296c:	f04f 0300 	mov.w	r3, #0
 8002970:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002974:	2300      	movs	r3, #0
 8002976:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002978:	f107 0310 	add.w	r3, r7, #16
 800297c:	4618      	mov	r0, r3
 800297e:	f007 faaf 	bl	8009ee0 <HAL_RCCEx_PeriphCLKConfig>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8002988:	f7ff fedc 	bl	8002744 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800298c:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <HAL_FDCAN_MspInit+0xc8>)
 800298e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002992:	4a1b      	ldr	r2, [pc, #108]	; (8002a00 <HAL_FDCAN_MspInit+0xc8>)
 8002994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002998:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800299c:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <HAL_FDCAN_MspInit+0xc8>)
 800299e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80029a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80029aa:	4b15      	ldr	r3, [pc, #84]	; (8002a00 <HAL_FDCAN_MspInit+0xc8>)
 80029ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029b0:	4a13      	ldr	r2, [pc, #76]	; (8002a00 <HAL_FDCAN_MspInit+0xc8>)
 80029b2:	f043 0320 	orr.w	r3, r3, #32
 80029b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <HAL_FDCAN_MspInit+0xc8>)
 80029bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80029c0:	f003 0320 	and.w	r3, r3, #32
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029c8:	23c0      	movs	r3, #192	; 0xc0
 80029ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	2302      	movs	r3, #2
 80029d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029da:	2300      	movs	r3, #0
 80029dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 80029e0:	2302      	movs	r3, #2
 80029e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029e6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80029ea:	4619      	mov	r1, r3
 80029ec:	4805      	ldr	r0, [pc, #20]	; (8002a04 <HAL_FDCAN_MspInit+0xcc>)
 80029ee:	f004 fca3 	bl	8007338 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 80029f2:	bf00      	nop
 80029f4:	37e0      	adds	r7, #224	; 0xe0
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	4000d400 	.word	0x4000d400
 8002a00:	58024400 	.word	0x58024400
 8002a04:	58021400 	.word	0x58021400

08002a08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b0b8      	sub	sp, #224	; 0xe0
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a20:	f107 0310 	add.w	r3, r7, #16
 8002a24:	22b8      	movs	r2, #184	; 0xb8
 8002a26:	2100      	movs	r1, #0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f013 fbf9 	bl	8016220 <memset>
  if(hi2c->Instance==I2C2)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a26      	ldr	r2, [pc, #152]	; (8002acc <HAL_I2C_MspInit+0xc4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d145      	bne.n	8002ac4 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002a38:	f04f 0208 	mov.w	r2, #8
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a4a:	f107 0310 	add.w	r3, r7, #16
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f007 fa46 	bl	8009ee0 <HAL_RCCEx_PeriphCLKConfig>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002a5a:	f7ff fe73 	bl	8002744 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a5e:	4b1c      	ldr	r3, [pc, #112]	; (8002ad0 <HAL_I2C_MspInit+0xc8>)
 8002a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a64:	4a1a      	ldr	r2, [pc, #104]	; (8002ad0 <HAL_I2C_MspInit+0xc8>)
 8002a66:	f043 0320 	orr.w	r3, r3, #32
 8002a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a6e:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <HAL_I2C_MspInit+0xc8>)
 8002a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a74:	f003 0320 	and.w	r3, r3, #32
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a82:	2312      	movs	r3, #18
 8002a84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002a94:	2304      	movs	r3, #4
 8002a96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002a9a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	480c      	ldr	r0, [pc, #48]	; (8002ad4 <HAL_I2C_MspInit+0xcc>)
 8002aa2:	f004 fc49 	bl	8007338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002aa6:	4b0a      	ldr	r3, [pc, #40]	; (8002ad0 <HAL_I2C_MspInit+0xc8>)
 8002aa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002aac:	4a08      	ldr	r2, [pc, #32]	; (8002ad0 <HAL_I2C_MspInit+0xc8>)
 8002aae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ab2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ab6:	4b06      	ldr	r3, [pc, #24]	; (8002ad0 <HAL_I2C_MspInit+0xc8>)
 8002ab8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002ac4:	bf00      	nop
 8002ac6:	37e0      	adds	r7, #224	; 0xe0
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40005800 	.word	0x40005800
 8002ad0:	58024400 	.word	0x58024400
 8002ad4:	58021400 	.word	0x58021400

08002ad8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b0ba      	sub	sp, #232	; 0xe8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
 8002ae8:	605a      	str	r2, [r3, #4]
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	60da      	str	r2, [r3, #12]
 8002aee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002af0:	f107 0318 	add.w	r3, r7, #24
 8002af4:	22b8      	movs	r2, #184	; 0xb8
 8002af6:	2100      	movs	r1, #0
 8002af8:	4618      	mov	r0, r3
 8002afa:	f013 fb91 	bl	8016220 <memset>
  if(hsd->Instance==SDMMC2)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a5d      	ldr	r2, [pc, #372]	; (8002c78 <HAL_SD_MspInit+0x1a0>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	f040 80b3 	bne.w	8002c70 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002b0a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b0e:	f04f 0300 	mov.w	r3, #0
 8002b12:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002b16:	2300      	movs	r3, #0
 8002b18:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b1a:	f107 0318 	add.w	r3, r7, #24
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f007 f9de 	bl	8009ee0 <HAL_RCCEx_PeriphCLKConfig>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002b2a:	f7ff fe0b 	bl	8002744 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002b2e:	4b53      	ldr	r3, [pc, #332]	; (8002c7c <HAL_SD_MspInit+0x1a4>)
 8002b30:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002b34:	4a51      	ldr	r2, [pc, #324]	; (8002c7c <HAL_SD_MspInit+0x1a4>)
 8002b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b3a:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002b3e:	4b4f      	ldr	r3, [pc, #316]	; (8002c7c <HAL_SD_MspInit+0x1a4>)
 8002b40:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002b44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b4c:	4b4b      	ldr	r3, [pc, #300]	; (8002c7c <HAL_SD_MspInit+0x1a4>)
 8002b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b52:	4a4a      	ldr	r2, [pc, #296]	; (8002c7c <HAL_SD_MspInit+0x1a4>)
 8002b54:	f043 0308 	orr.w	r3, r3, #8
 8002b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b5c:	4b47      	ldr	r3, [pc, #284]	; (8002c7c <HAL_SD_MspInit+0x1a4>)
 8002b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b6a:	4b44      	ldr	r3, [pc, #272]	; (8002c7c <HAL_SD_MspInit+0x1a4>)
 8002b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b70:	4a42      	ldr	r2, [pc, #264]	; (8002c7c <HAL_SD_MspInit+0x1a4>)
 8002b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b7a:	4b40      	ldr	r3, [pc, #256]	; (8002c7c <HAL_SD_MspInit+0x1a4>)
 8002b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b88:	2340      	movs	r3, #64	; 0x40
 8002b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002ba0:	230b      	movs	r3, #11
 8002ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ba6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002baa:	4619      	mov	r1, r3
 8002bac:	4834      	ldr	r0, [pc, #208]	; (8002c80 <HAL_SD_MspInit+0x1a8>)
 8002bae:	f004 fbc3 	bl	8007338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bb2:	2380      	movs	r3, #128	; 0x80
 8002bb4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002bca:	230b      	movs	r3, #11
 8002bcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	482a      	ldr	r0, [pc, #168]	; (8002c80 <HAL_SD_MspInit+0x1a8>)
 8002bd8:	f004 fbae 	bl	8007338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002be0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be4:	2302      	movs	r3, #2
 8002be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf0:	2303      	movs	r3, #3
 8002bf2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002bf6:	230b      	movs	r3, #11
 8002bf8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bfc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c00:	4619      	mov	r1, r3
 8002c02:	4820      	ldr	r0, [pc, #128]	; (8002c84 <HAL_SD_MspInit+0x1ac>)
 8002c04:	f004 fb98 	bl	8007338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c10:	2302      	movs	r3, #2
 8002c12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002c22:	230b      	movs	r3, #11
 8002c24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c28:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4815      	ldr	r0, [pc, #84]	; (8002c84 <HAL_SD_MspInit+0x1ac>)
 8002c30:	f004 fb82 	bl	8007338 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002c34:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002c38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002c4e:	230a      	movs	r3, #10
 8002c50:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c54:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002c58:	4619      	mov	r1, r3
 8002c5a:	480a      	ldr	r0, [pc, #40]	; (8002c84 <HAL_SD_MspInit+0x1ac>)
 8002c5c:	f004 fb6c 	bl	8007338 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002c60:	2200      	movs	r2, #0
 8002c62:	2100      	movs	r1, #0
 8002c64:	207c      	movs	r0, #124	; 0x7c
 8002c66:	f002 fb0e 	bl	8005286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002c6a:	207c      	movs	r0, #124	; 0x7c
 8002c6c:	f002 fb25 	bl	80052ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002c70:	bf00      	nop
 8002c72:	37e8      	adds	r7, #232	; 0xe8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	48022400 	.word	0x48022400
 8002c7c:	58024400 	.word	0x58024400
 8002c80:	58020c00 	.word	0x58020c00
 8002c84:	58021800 	.word	0x58021800

08002c88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08e      	sub	sp, #56	; 0x38
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a4f      	ldr	r2, [pc, #316]	; (8002de4 <HAL_SPI_MspInit+0x15c>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d12e      	bne.n	8002d08 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002caa:	4b4f      	ldr	r3, [pc, #316]	; (8002de8 <HAL_SPI_MspInit+0x160>)
 8002cac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cb0:	4a4d      	ldr	r2, [pc, #308]	; (8002de8 <HAL_SPI_MspInit+0x160>)
 8002cb2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002cb6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002cba:	4b4b      	ldr	r3, [pc, #300]	; (8002de8 <HAL_SPI_MspInit+0x160>)
 8002cbc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cc4:	623b      	str	r3, [r7, #32]
 8002cc6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc8:	4b47      	ldr	r3, [pc, #284]	; (8002de8 <HAL_SPI_MspInit+0x160>)
 8002cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cce:	4a46      	ldr	r2, [pc, #280]	; (8002de8 <HAL_SPI_MspInit+0x160>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cd8:	4b43      	ldr	r3, [pc, #268]	; (8002de8 <HAL_SPI_MspInit+0x160>)
 8002cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	61fb      	str	r3, [r7, #28]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ce6:	23e0      	movs	r3, #224	; 0xe0
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cea:	2302      	movs	r3, #2
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002cf6:	2305      	movs	r3, #5
 8002cf8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cfe:	4619      	mov	r1, r3
 8002d00:	483a      	ldr	r0, [pc, #232]	; (8002dec <HAL_SPI_MspInit+0x164>)
 8002d02:	f004 fb19 	bl	8007338 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002d06:	e068      	b.n	8002dda <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a38      	ldr	r2, [pc, #224]	; (8002df0 <HAL_SPI_MspInit+0x168>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d12f      	bne.n	8002d72 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002d12:	4b35      	ldr	r3, [pc, #212]	; (8002de8 <HAL_SPI_MspInit+0x160>)
 8002d14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d18:	4a33      	ldr	r2, [pc, #204]	; (8002de8 <HAL_SPI_MspInit+0x160>)
 8002d1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d22:	4b31      	ldr	r3, [pc, #196]	; (8002de8 <HAL_SPI_MspInit+0x160>)
 8002d24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d2c:	61bb      	str	r3, [r7, #24]
 8002d2e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d30:	4b2d      	ldr	r3, [pc, #180]	; (8002de8 <HAL_SPI_MspInit+0x160>)
 8002d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d36:	4a2c      	ldr	r2, [pc, #176]	; (8002de8 <HAL_SPI_MspInit+0x160>)
 8002d38:	f043 0302 	orr.w	r3, r3, #2
 8002d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d40:	4b29      	ldr	r3, [pc, #164]	; (8002de8 <HAL_SPI_MspInit+0x160>)
 8002d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002d4e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d54:	2302      	movs	r3, #2
 8002d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002d60:	2305      	movs	r3, #5
 8002d62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d68:	4619      	mov	r1, r3
 8002d6a:	4822      	ldr	r0, [pc, #136]	; (8002df4 <HAL_SPI_MspInit+0x16c>)
 8002d6c:	f004 fae4 	bl	8007338 <HAL_GPIO_Init>
}
 8002d70:	e033      	b.n	8002dda <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a20      	ldr	r2, [pc, #128]	; (8002df8 <HAL_SPI_MspInit+0x170>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d12e      	bne.n	8002dda <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002d7c:	4b1a      	ldr	r3, [pc, #104]	; (8002de8 <HAL_SPI_MspInit+0x160>)
 8002d7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d82:	4a19      	ldr	r2, [pc, #100]	; (8002de8 <HAL_SPI_MspInit+0x160>)
 8002d84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d8c:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <HAL_SPI_MspInit+0x160>)
 8002d8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9a:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <HAL_SPI_MspInit+0x160>)
 8002d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002da0:	4a11      	ldr	r2, [pc, #68]	; (8002de8 <HAL_SPI_MspInit+0x160>)
 8002da2:	f043 0304 	orr.w	r3, r3, #4
 8002da6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002daa:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <HAL_SPI_MspInit+0x160>)
 8002dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002db8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002dca:	2306      	movs	r3, #6
 8002dcc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4809      	ldr	r0, [pc, #36]	; (8002dfc <HAL_SPI_MspInit+0x174>)
 8002dd6:	f004 faaf 	bl	8007338 <HAL_GPIO_Init>
}
 8002dda:	bf00      	nop
 8002ddc:	3738      	adds	r7, #56	; 0x38
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40013000 	.word	0x40013000
 8002de8:	58024400 	.word	0x58024400
 8002dec:	58020000 	.word	0x58020000
 8002df0:	40003800 	.word	0x40003800
 8002df4:	58020400 	.word	0x58020400
 8002df8:	40003c00 	.word	0x40003c00
 8002dfc:	58020800 	.word	0x58020800

08002e00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b08c      	sub	sp, #48	; 0x30
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e08:	f107 031c 	add.w	r3, r7, #28
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	609a      	str	r2, [r3, #8]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e20:	d15d      	bne.n	8002ede <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002e22:	4b8e      	ldr	r3, [pc, #568]	; (800305c <HAL_TIM_PWM_MspInit+0x25c>)
 8002e24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e28:	4a8c      	ldr	r2, [pc, #560]	; (800305c <HAL_TIM_PWM_MspInit+0x25c>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e32:	4b8a      	ldr	r3, [pc, #552]	; (800305c <HAL_TIM_PWM_MspInit+0x25c>)
 8002e34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	61bb      	str	r3, [r7, #24]
 8002e3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e40:	4b86      	ldr	r3, [pc, #536]	; (800305c <HAL_TIM_PWM_MspInit+0x25c>)
 8002e42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e46:	4a85      	ldr	r2, [pc, #532]	; (800305c <HAL_TIM_PWM_MspInit+0x25c>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e50:	4b82      	ldr	r3, [pc, #520]	; (800305c <HAL_TIM_PWM_MspInit+0x25c>)
 8002e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e62:	2302      	movs	r3, #2
 8002e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e72:	f107 031c 	add.w	r3, r7, #28
 8002e76:	4619      	mov	r1, r3
 8002e78:	4879      	ldr	r0, [pc, #484]	; (8003060 <HAL_TIM_PWM_MspInit+0x260>)
 8002e7a:	f004 fa5d 	bl	8007338 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8002e7e:	4b79      	ldr	r3, [pc, #484]	; (8003064 <HAL_TIM_PWM_MspInit+0x264>)
 8002e80:	4a79      	ldr	r2, [pc, #484]	; (8003068 <HAL_TIM_PWM_MspInit+0x268>)
 8002e82:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8002e84:	4b77      	ldr	r3, [pc, #476]	; (8003064 <HAL_TIM_PWM_MspInit+0x264>)
 8002e86:	2214      	movs	r2, #20
 8002e88:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e8a:	4b76      	ldr	r3, [pc, #472]	; (8003064 <HAL_TIM_PWM_MspInit+0x264>)
 8002e8c:	2240      	movs	r2, #64	; 0x40
 8002e8e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e90:	4b74      	ldr	r3, [pc, #464]	; (8003064 <HAL_TIM_PWM_MspInit+0x264>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002e96:	4b73      	ldr	r3, [pc, #460]	; (8003064 <HAL_TIM_PWM_MspInit+0x264>)
 8002e98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e9c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e9e:	4b71      	ldr	r3, [pc, #452]	; (8003064 <HAL_TIM_PWM_MspInit+0x264>)
 8002ea0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ea4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002ea6:	4b6f      	ldr	r3, [pc, #444]	; (8003064 <HAL_TIM_PWM_MspInit+0x264>)
 8002ea8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002eac:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8002eae:	4b6d      	ldr	r3, [pc, #436]	; (8003064 <HAL_TIM_PWM_MspInit+0x264>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002eb4:	4b6b      	ldr	r3, [pc, #428]	; (8003064 <HAL_TIM_PWM_MspInit+0x264>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002eba:	4b6a      	ldr	r3, [pc, #424]	; (8003064 <HAL_TIM_PWM_MspInit+0x264>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002ec0:	4868      	ldr	r0, [pc, #416]	; (8003064 <HAL_TIM_PWM_MspInit+0x264>)
 8002ec2:	f002 fa15 	bl	80052f0 <HAL_DMA_Init>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8002ecc:	f7ff fc3a 	bl	8002744 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a64      	ldr	r2, [pc, #400]	; (8003064 <HAL_TIM_PWM_MspInit+0x264>)
 8002ed4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ed6:	4a63      	ldr	r2, [pc, #396]	; (8003064 <HAL_TIM_PWM_MspInit+0x264>)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002edc:	e119      	b.n	8003112 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a62      	ldr	r2, [pc, #392]	; (800306c <HAL_TIM_PWM_MspInit+0x26c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d16d      	bne.n	8002fc4 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ee8:	4b5c      	ldr	r3, [pc, #368]	; (800305c <HAL_TIM_PWM_MspInit+0x25c>)
 8002eea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002eee:	4a5b      	ldr	r2, [pc, #364]	; (800305c <HAL_TIM_PWM_MspInit+0x25c>)
 8002ef0:	f043 0302 	orr.w	r3, r3, #2
 8002ef4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ef8:	4b58      	ldr	r3, [pc, #352]	; (800305c <HAL_TIM_PWM_MspInit+0x25c>)
 8002efa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	613b      	str	r3, [r7, #16]
 8002f04:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 8002f06:	4b5a      	ldr	r3, [pc, #360]	; (8003070 <HAL_TIM_PWM_MspInit+0x270>)
 8002f08:	4a5a      	ldr	r2, [pc, #360]	; (8003074 <HAL_TIM_PWM_MspInit+0x274>)
 8002f0a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 8002f0c:	4b58      	ldr	r3, [pc, #352]	; (8003070 <HAL_TIM_PWM_MspInit+0x270>)
 8002f0e:	2218      	movs	r2, #24
 8002f10:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f12:	4b57      	ldr	r3, [pc, #348]	; (8003070 <HAL_TIM_PWM_MspInit+0x270>)
 8002f14:	2240      	movs	r2, #64	; 0x40
 8002f16:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f18:	4b55      	ldr	r3, [pc, #340]	; (8003070 <HAL_TIM_PWM_MspInit+0x270>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002f1e:	4b54      	ldr	r3, [pc, #336]	; (8003070 <HAL_TIM_PWM_MspInit+0x270>)
 8002f20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f24:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f26:	4b52      	ldr	r3, [pc, #328]	; (8003070 <HAL_TIM_PWM_MspInit+0x270>)
 8002f28:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f2c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f2e:	4b50      	ldr	r3, [pc, #320]	; (8003070 <HAL_TIM_PWM_MspInit+0x270>)
 8002f30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f34:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8002f36:	4b4e      	ldr	r3, [pc, #312]	; (8003070 <HAL_TIM_PWM_MspInit+0x270>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8002f3c:	4b4c      	ldr	r3, [pc, #304]	; (8003070 <HAL_TIM_PWM_MspInit+0x270>)
 8002f3e:	2200      	movs	r2, #0
 8002f40:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f42:	4b4b      	ldr	r3, [pc, #300]	; (8003070 <HAL_TIM_PWM_MspInit+0x270>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8002f48:	4849      	ldr	r0, [pc, #292]	; (8003070 <HAL_TIM_PWM_MspInit+0x270>)
 8002f4a:	f002 f9d1 	bl	80052f0 <HAL_DMA_Init>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d001      	beq.n	8002f58 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8002f54:	f7ff fbf6 	bl	8002744 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a45      	ldr	r2, [pc, #276]	; (8003070 <HAL_TIM_PWM_MspInit+0x270>)
 8002f5c:	629a      	str	r2, [r3, #40]	; 0x28
 8002f5e:	4a44      	ldr	r2, [pc, #272]	; (8003070 <HAL_TIM_PWM_MspInit+0x270>)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8002f64:	4b44      	ldr	r3, [pc, #272]	; (8003078 <HAL_TIM_PWM_MspInit+0x278>)
 8002f66:	4a45      	ldr	r2, [pc, #276]	; (800307c <HAL_TIM_PWM_MspInit+0x27c>)
 8002f68:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8002f6a:	4b43      	ldr	r3, [pc, #268]	; (8003078 <HAL_TIM_PWM_MspInit+0x278>)
 8002f6c:	2217      	movs	r2, #23
 8002f6e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f70:	4b41      	ldr	r3, [pc, #260]	; (8003078 <HAL_TIM_PWM_MspInit+0x278>)
 8002f72:	2240      	movs	r2, #64	; 0x40
 8002f74:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f76:	4b40      	ldr	r3, [pc, #256]	; (8003078 <HAL_TIM_PWM_MspInit+0x278>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002f7c:	4b3e      	ldr	r3, [pc, #248]	; (8003078 <HAL_TIM_PWM_MspInit+0x278>)
 8002f7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f82:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f84:	4b3c      	ldr	r3, [pc, #240]	; (8003078 <HAL_TIM_PWM_MspInit+0x278>)
 8002f86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f8a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f8c:	4b3a      	ldr	r3, [pc, #232]	; (8003078 <HAL_TIM_PWM_MspInit+0x278>)
 8002f8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f92:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8002f94:	4b38      	ldr	r3, [pc, #224]	; (8003078 <HAL_TIM_PWM_MspInit+0x278>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002f9a:	4b37      	ldr	r3, [pc, #220]	; (8003078 <HAL_TIM_PWM_MspInit+0x278>)
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002fa0:	4b35      	ldr	r3, [pc, #212]	; (8003078 <HAL_TIM_PWM_MspInit+0x278>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8002fa6:	4834      	ldr	r0, [pc, #208]	; (8003078 <HAL_TIM_PWM_MspInit+0x278>)
 8002fa8:	f002 f9a2 	bl	80052f0 <HAL_DMA_Init>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8002fb2:	f7ff fbc7 	bl	8002744 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a2f      	ldr	r2, [pc, #188]	; (8003078 <HAL_TIM_PWM_MspInit+0x278>)
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24
 8002fbc:	4a2e      	ldr	r2, [pc, #184]	; (8003078 <HAL_TIM_PWM_MspInit+0x278>)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002fc2:	e0a6      	b.n	8003112 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a2d      	ldr	r2, [pc, #180]	; (8003080 <HAL_TIM_PWM_MspInit+0x280>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d15e      	bne.n	800308c <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002fce:	4b23      	ldr	r3, [pc, #140]	; (800305c <HAL_TIM_PWM_MspInit+0x25c>)
 8002fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fd4:	4a21      	ldr	r2, [pc, #132]	; (800305c <HAL_TIM_PWM_MspInit+0x25c>)
 8002fd6:	f043 0304 	orr.w	r3, r3, #4
 8002fda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002fde:	4b1f      	ldr	r3, [pc, #124]	; (800305c <HAL_TIM_PWM_MspInit+0x25c>)
 8002fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fe4:	f003 0304 	and.w	r3, r3, #4
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 8002fec:	4b25      	ldr	r3, [pc, #148]	; (8003084 <HAL_TIM_PWM_MspInit+0x284>)
 8002fee:	4a26      	ldr	r2, [pc, #152]	; (8003088 <HAL_TIM_PWM_MspInit+0x288>)
 8002ff0:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 8002ff2:	4b24      	ldr	r3, [pc, #144]	; (8003084 <HAL_TIM_PWM_MspInit+0x284>)
 8002ff4:	221f      	movs	r2, #31
 8002ff6:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ff8:	4b22      	ldr	r3, [pc, #136]	; (8003084 <HAL_TIM_PWM_MspInit+0x284>)
 8002ffa:	2240      	movs	r2, #64	; 0x40
 8002ffc:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ffe:	4b21      	ldr	r3, [pc, #132]	; (8003084 <HAL_TIM_PWM_MspInit+0x284>)
 8003000:	2200      	movs	r2, #0
 8003002:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003004:	4b1f      	ldr	r3, [pc, #124]	; (8003084 <HAL_TIM_PWM_MspInit+0x284>)
 8003006:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800300a:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800300c:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <HAL_TIM_PWM_MspInit+0x284>)
 800300e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003012:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003014:	4b1b      	ldr	r3, [pc, #108]	; (8003084 <HAL_TIM_PWM_MspInit+0x284>)
 8003016:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800301a:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 800301c:	4b19      	ldr	r3, [pc, #100]	; (8003084 <HAL_TIM_PWM_MspInit+0x284>)
 800301e:	2200      	movs	r2, #0
 8003020:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003022:	4b18      	ldr	r3, [pc, #96]	; (8003084 <HAL_TIM_PWM_MspInit+0x284>)
 8003024:	2200      	movs	r2, #0
 8003026:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003028:	4b16      	ldr	r3, [pc, #88]	; (8003084 <HAL_TIM_PWM_MspInit+0x284>)
 800302a:	2200      	movs	r2, #0
 800302c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800302e:	4815      	ldr	r0, [pc, #84]	; (8003084 <HAL_TIM_PWM_MspInit+0x284>)
 8003030:	f002 f95e 	bl	80052f0 <HAL_DMA_Init>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 800303a:	f7ff fb83 	bl	8002744 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a10      	ldr	r2, [pc, #64]	; (8003084 <HAL_TIM_PWM_MspInit+0x284>)
 8003042:	62da      	str	r2, [r3, #44]	; 0x2c
 8003044:	4a0f      	ldr	r2, [pc, #60]	; (8003084 <HAL_TIM_PWM_MspInit+0x284>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800304a:	2200      	movs	r2, #0
 800304c:	2100      	movs	r1, #0
 800304e:	201e      	movs	r0, #30
 8003050:	f002 f919 	bl	8005286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003054:	201e      	movs	r0, #30
 8003056:	f002 f930 	bl	80052ba <HAL_NVIC_EnableIRQ>
}
 800305a:	e05a      	b.n	8003112 <HAL_TIM_PWM_MspInit+0x312>
 800305c:	58024400 	.word	0x58024400
 8003060:	58020000 	.word	0x58020000
 8003064:	24000948 	.word	0x24000948
 8003068:	40020028 	.word	0x40020028
 800306c:	40000400 	.word	0x40000400
 8003070:	240009c0 	.word	0x240009c0
 8003074:	40020058 	.word	0x40020058
 8003078:	24000a38 	.word	0x24000a38
 800307c:	40020070 	.word	0x40020070
 8003080:	40000800 	.word	0x40000800
 8003084:	24000ab0 	.word	0x24000ab0
 8003088:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a22      	ldr	r2, [pc, #136]	; (800311c <HAL_TIM_PWM_MspInit+0x31c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d13d      	bne.n	8003112 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003096:	4b22      	ldr	r3, [pc, #136]	; (8003120 <HAL_TIM_PWM_MspInit+0x320>)
 8003098:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800309c:	4a20      	ldr	r2, [pc, #128]	; (8003120 <HAL_TIM_PWM_MspInit+0x320>)
 800309e:	f043 0308 	orr.w	r3, r3, #8
 80030a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030a6:	4b1e      	ldr	r3, [pc, #120]	; (8003120 <HAL_TIM_PWM_MspInit+0x320>)
 80030a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	60bb      	str	r3, [r7, #8]
 80030b2:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 80030b4:	4b1b      	ldr	r3, [pc, #108]	; (8003124 <HAL_TIM_PWM_MspInit+0x324>)
 80030b6:	4a1c      	ldr	r2, [pc, #112]	; (8003128 <HAL_TIM_PWM_MspInit+0x328>)
 80030b8:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80030ba:	4b1a      	ldr	r3, [pc, #104]	; (8003124 <HAL_TIM_PWM_MspInit+0x324>)
 80030bc:	223a      	movs	r2, #58	; 0x3a
 80030be:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030c0:	4b18      	ldr	r3, [pc, #96]	; (8003124 <HAL_TIM_PWM_MspInit+0x324>)
 80030c2:	2240      	movs	r2, #64	; 0x40
 80030c4:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80030c6:	4b17      	ldr	r3, [pc, #92]	; (8003124 <HAL_TIM_PWM_MspInit+0x324>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80030cc:	4b15      	ldr	r3, [pc, #84]	; (8003124 <HAL_TIM_PWM_MspInit+0x324>)
 80030ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030d2:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030d4:	4b13      	ldr	r3, [pc, #76]	; (8003124 <HAL_TIM_PWM_MspInit+0x324>)
 80030d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030da:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030dc:	4b11      	ldr	r3, [pc, #68]	; (8003124 <HAL_TIM_PWM_MspInit+0x324>)
 80030de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030e2:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80030e4:	4b0f      	ldr	r3, [pc, #60]	; (8003124 <HAL_TIM_PWM_MspInit+0x324>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80030ea:	4b0e      	ldr	r3, [pc, #56]	; (8003124 <HAL_TIM_PWM_MspInit+0x324>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030f0:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <HAL_TIM_PWM_MspInit+0x324>)
 80030f2:	2200      	movs	r2, #0
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80030f6:	480b      	ldr	r0, [pc, #44]	; (8003124 <HAL_TIM_PWM_MspInit+0x324>)
 80030f8:	f002 f8fa 	bl	80052f0 <HAL_DMA_Init>
 80030fc:	4603      	mov	r3, r0
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d001      	beq.n	8003106 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 8003102:	f7ff fb1f 	bl	8002744 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a06      	ldr	r2, [pc, #24]	; (8003124 <HAL_TIM_PWM_MspInit+0x324>)
 800310a:	631a      	str	r2, [r3, #48]	; 0x30
 800310c:	4a05      	ldr	r2, [pc, #20]	; (8003124 <HAL_TIM_PWM_MspInit+0x324>)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003112:	bf00      	nop
 8003114:	3730      	adds	r7, #48	; 0x30
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40000c00 	.word	0x40000c00
 8003120:	58024400 	.word	0x58024400
 8003124:	24000b28 	.word	0x24000b28
 8003128:	40020040 	.word	0x40020040

0800312c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a0b      	ldr	r2, [pc, #44]	; (8003168 <HAL_TIM_Base_MspInit+0x3c>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d10e      	bne.n	800315c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 800313e:	4b0b      	ldr	r3, [pc, #44]	; (800316c <HAL_TIM_Base_MspInit+0x40>)
 8003140:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003144:	4a09      	ldr	r2, [pc, #36]	; (800316c <HAL_TIM_Base_MspInit+0x40>)
 8003146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800314a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800314e:	4b07      	ldr	r3, [pc, #28]	; (800316c <HAL_TIM_Base_MspInit+0x40>)
 8003150:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003158:	60fb      	str	r3, [r7, #12]
 800315a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800315c:	bf00      	nop
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	40001c00 	.word	0x40001c00
 800316c:	58024400 	.word	0x58024400

08003170 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b08c      	sub	sp, #48	; 0x30
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 031c 	add.w	r3, r7, #28
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003190:	d120      	bne.n	80031d4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003192:	4b52      	ldr	r3, [pc, #328]	; (80032dc <HAL_TIM_MspPostInit+0x16c>)
 8003194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003198:	4a50      	ldr	r2, [pc, #320]	; (80032dc <HAL_TIM_MspPostInit+0x16c>)
 800319a:	f043 0302 	orr.w	r3, r3, #2
 800319e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031a2:	4b4e      	ldr	r3, [pc, #312]	; (80032dc <HAL_TIM_MspPostInit+0x16c>)
 80031a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80031b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80031b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b6:	2302      	movs	r3, #2
 80031b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80031ba:	2302      	movs	r3, #2
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031be:	2300      	movs	r3, #0
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031c2:	2301      	movs	r3, #1
 80031c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c6:	f107 031c 	add.w	r3, r7, #28
 80031ca:	4619      	mov	r1, r3
 80031cc:	4844      	ldr	r0, [pc, #272]	; (80032e0 <HAL_TIM_MspPostInit+0x170>)
 80031ce:	f004 f8b3 	bl	8007338 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80031d2:	e07f      	b.n	80032d4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a42      	ldr	r2, [pc, #264]	; (80032e4 <HAL_TIM_MspPostInit+0x174>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d11f      	bne.n	800321e <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031de:	4b3f      	ldr	r3, [pc, #252]	; (80032dc <HAL_TIM_MspPostInit+0x16c>)
 80031e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031e4:	4a3d      	ldr	r2, [pc, #244]	; (80032dc <HAL_TIM_MspPostInit+0x16c>)
 80031e6:	f043 0302 	orr.w	r3, r3, #2
 80031ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031ee:	4b3b      	ldr	r3, [pc, #236]	; (80032dc <HAL_TIM_MspPostInit+0x16c>)
 80031f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80031fc:	2330      	movs	r3, #48	; 0x30
 80031fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003200:	2302      	movs	r3, #2
 8003202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003204:	2302      	movs	r3, #2
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003208:	2300      	movs	r3, #0
 800320a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800320c:	2302      	movs	r3, #2
 800320e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003210:	f107 031c 	add.w	r3, r7, #28
 8003214:	4619      	mov	r1, r3
 8003216:	4832      	ldr	r0, [pc, #200]	; (80032e0 <HAL_TIM_MspPostInit+0x170>)
 8003218:	f004 f88e 	bl	8007338 <HAL_GPIO_Init>
}
 800321c:	e05a      	b.n	80032d4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a31      	ldr	r2, [pc, #196]	; (80032e8 <HAL_TIM_MspPostInit+0x178>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d131      	bne.n	800328c <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003228:	4b2c      	ldr	r3, [pc, #176]	; (80032dc <HAL_TIM_MspPostInit+0x16c>)
 800322a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800322e:	4a2b      	ldr	r2, [pc, #172]	; (80032dc <HAL_TIM_MspPostInit+0x16c>)
 8003230:	f043 0308 	orr.w	r3, r3, #8
 8003234:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003238:	4b28      	ldr	r3, [pc, #160]	; (80032dc <HAL_TIM_MspPostInit+0x16c>)
 800323a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	613b      	str	r3, [r7, #16]
 8003244:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003246:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800324a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324c:	2302      	movs	r3, #2
 800324e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003250:	2300      	movs	r3, #0
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003254:	2300      	movs	r3, #0
 8003256:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003258:	2302      	movs	r3, #2
 800325a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800325c:	f107 031c 	add.w	r3, r7, #28
 8003260:	4619      	mov	r1, r3
 8003262:	4822      	ldr	r0, [pc, #136]	; (80032ec <HAL_TIM_MspPostInit+0x17c>)
 8003264:	f004 f868 	bl	8007338 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003268:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800326c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326e:	2302      	movs	r3, #2
 8003270:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003272:	2302      	movs	r3, #2
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003276:	2300      	movs	r3, #0
 8003278:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800327a:	2302      	movs	r3, #2
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800327e:	f107 031c 	add.w	r3, r7, #28
 8003282:	4619      	mov	r1, r3
 8003284:	4819      	ldr	r0, [pc, #100]	; (80032ec <HAL_TIM_MspPostInit+0x17c>)
 8003286:	f004 f857 	bl	8007338 <HAL_GPIO_Init>
}
 800328a:	e023      	b.n	80032d4 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a17      	ldr	r2, [pc, #92]	; (80032f0 <HAL_TIM_MspPostInit+0x180>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d11e      	bne.n	80032d4 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003296:	4b11      	ldr	r3, [pc, #68]	; (80032dc <HAL_TIM_MspPostInit+0x16c>)
 8003298:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800329c:	4a0f      	ldr	r2, [pc, #60]	; (80032dc <HAL_TIM_MspPostInit+0x16c>)
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032a6:	4b0d      	ldr	r3, [pc, #52]	; (80032dc <HAL_TIM_MspPostInit+0x16c>)
 80032a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80032b4:	2308      	movs	r3, #8
 80032b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b8:	2302      	movs	r3, #2
 80032ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032bc:	2302      	movs	r3, #2
 80032be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032c0:	2300      	movs	r3, #0
 80032c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80032c4:	2302      	movs	r3, #2
 80032c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032c8:	f107 031c 	add.w	r3, r7, #28
 80032cc:	4619      	mov	r1, r3
 80032ce:	4809      	ldr	r0, [pc, #36]	; (80032f4 <HAL_TIM_MspPostInit+0x184>)
 80032d0:	f004 f832 	bl	8007338 <HAL_GPIO_Init>
}
 80032d4:	bf00      	nop
 80032d6:	3730      	adds	r7, #48	; 0x30
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	58024400 	.word	0x58024400
 80032e0:	58020400 	.word	0x58020400
 80032e4:	40000400 	.word	0x40000400
 80032e8:	40000800 	.word	0x40000800
 80032ec:	58020c00 	.word	0x58020c00
 80032f0:	40000c00 	.word	0x40000c00
 80032f4:	58020000 	.word	0x58020000

080032f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b0ba      	sub	sp, #232	; 0xe8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003300:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003310:	f107 0318 	add.w	r3, r7, #24
 8003314:	22b8      	movs	r2, #184	; 0xb8
 8003316:	2100      	movs	r1, #0
 8003318:	4618      	mov	r0, r3
 800331a:	f012 ff81 	bl	8016220 <memset>
  if(huart->Instance==UART4)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a4d      	ldr	r2, [pc, #308]	; (8003458 <HAL_UART_MspInit+0x160>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d147      	bne.n	80033b8 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003328:	f04f 0202 	mov.w	r2, #2
 800332c:	f04f 0300 	mov.w	r3, #0
 8003330:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003334:	2300      	movs	r3, #0
 8003336:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800333a:	f107 0318 	add.w	r3, r7, #24
 800333e:	4618      	mov	r0, r3
 8003340:	f006 fdce 	bl	8009ee0 <HAL_RCCEx_PeriphCLKConfig>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800334a:	f7ff f9fb 	bl	8002744 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800334e:	4b43      	ldr	r3, [pc, #268]	; (800345c <HAL_UART_MspInit+0x164>)
 8003350:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003354:	4a41      	ldr	r2, [pc, #260]	; (800345c <HAL_UART_MspInit+0x164>)
 8003356:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800335a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800335e:	4b3f      	ldr	r3, [pc, #252]	; (800345c <HAL_UART_MspInit+0x164>)
 8003360:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003364:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800336c:	4b3b      	ldr	r3, [pc, #236]	; (800345c <HAL_UART_MspInit+0x164>)
 800336e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003372:	4a3a      	ldr	r2, [pc, #232]	; (800345c <HAL_UART_MspInit+0x164>)
 8003374:	f043 0302 	orr.w	r3, r3, #2
 8003378:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800337c:	4b37      	ldr	r3, [pc, #220]	; (800345c <HAL_UART_MspInit+0x164>)
 800337e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	613b      	str	r3, [r7, #16]
 8003388:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800338a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800338e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003392:	2302      	movs	r3, #2
 8003394:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800339e:	2300      	movs	r3, #0
 80033a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80033a4:	2308      	movs	r3, #8
 80033a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033ae:	4619      	mov	r1, r3
 80033b0:	482b      	ldr	r0, [pc, #172]	; (8003460 <HAL_UART_MspInit+0x168>)
 80033b2:	f003 ffc1 	bl	8007338 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80033b6:	e04a      	b.n	800344e <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a29      	ldr	r2, [pc, #164]	; (8003464 <HAL_UART_MspInit+0x16c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d145      	bne.n	800344e <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80033c2:	f04f 0201 	mov.w	r2, #1
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80033ce:	2300      	movs	r3, #0
 80033d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033d4:	f107 0318 	add.w	r3, r7, #24
 80033d8:	4618      	mov	r0, r3
 80033da:	f006 fd81 	bl	8009ee0 <HAL_RCCEx_PeriphCLKConfig>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 80033e4:	f7ff f9ae 	bl	8002744 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80033e8:	4b1c      	ldr	r3, [pc, #112]	; (800345c <HAL_UART_MspInit+0x164>)
 80033ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033ee:	4a1b      	ldr	r2, [pc, #108]	; (800345c <HAL_UART_MspInit+0x164>)
 80033f0:	f043 0320 	orr.w	r3, r3, #32
 80033f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80033f8:	4b18      	ldr	r3, [pc, #96]	; (800345c <HAL_UART_MspInit+0x164>)
 80033fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033fe:	f003 0320 	and.w	r3, r3, #32
 8003402:	60fb      	str	r3, [r7, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003406:	4b15      	ldr	r3, [pc, #84]	; (800345c <HAL_UART_MspInit+0x164>)
 8003408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800340c:	4a13      	ldr	r2, [pc, #76]	; (800345c <HAL_UART_MspInit+0x164>)
 800340e:	f043 0304 	orr.w	r3, r3, #4
 8003412:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003416:	4b11      	ldr	r3, [pc, #68]	; (800345c <HAL_UART_MspInit+0x164>)
 8003418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800341c:	f003 0304 	and.w	r3, r3, #4
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003424:	23c0      	movs	r3, #192	; 0xc0
 8003426:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342a:	2302      	movs	r3, #2
 800342c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003430:	2300      	movs	r3, #0
 8003432:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003436:	2300      	movs	r3, #0
 8003438:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 800343c:	2307      	movs	r3, #7
 800343e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003442:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003446:	4619      	mov	r1, r3
 8003448:	4807      	ldr	r0, [pc, #28]	; (8003468 <HAL_UART_MspInit+0x170>)
 800344a:	f003 ff75 	bl	8007338 <HAL_GPIO_Init>
}
 800344e:	bf00      	nop
 8003450:	37e8      	adds	r7, #232	; 0xe8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40004c00 	.word	0x40004c00
 800345c:	58024400 	.word	0x58024400
 8003460:	58020400 	.word	0x58020400
 8003464:	40011400 	.word	0x40011400
 8003468:	58020800 	.word	0x58020800

0800346c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003470:	e7fe      	b.n	8003470 <NMI_Handler+0x4>

08003472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003472:	b480      	push	{r7}
 8003474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003476:	e7fe      	b.n	8003476 <HardFault_Handler+0x4>

08003478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800347c:	e7fe      	b.n	800347c <MemManage_Handler+0x4>

0800347e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800347e:	b480      	push	{r7}
 8003480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003482:	e7fe      	b.n	8003482 <BusFault_Handler+0x4>

08003484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003488:	e7fe      	b.n	8003488 <UsageFault_Handler+0x4>

0800348a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800348a:	b480      	push	{r7}
 800348c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800348e:	bf00      	nop
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800349c:	bf00      	nop
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034a6:	b480      	push	{r7}
 80034a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034aa:	bf00      	nop
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80034b8:	f000 fa40 	bl	800393c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80034bc:	bf00      	nop
 80034be:	bd80      	pop	{r7, pc}

080034c0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 80034c4:	4802      	ldr	r0, [pc, #8]	; (80034d0 <DMA1_Stream0_IRQHandler+0x10>)
 80034c6:	f002 fa6d 	bl	80059a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80034ca:	bf00      	nop
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	24000ab0 	.word	0x24000ab0

080034d4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80034d8:	4802      	ldr	r0, [pc, #8]	; (80034e4 <DMA1_Stream1_IRQHandler+0x10>)
 80034da:	f002 fa63 	bl	80059a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	24000948 	.word	0x24000948

080034e8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 80034ec:	4802      	ldr	r0, [pc, #8]	; (80034f8 <DMA1_Stream2_IRQHandler+0x10>)
 80034ee:	f002 fa59 	bl	80059a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	24000b28 	.word	0x24000b28

080034fc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003500:	4802      	ldr	r0, [pc, #8]	; (800350c <DMA1_Stream3_IRQHandler+0x10>)
 8003502:	f002 fa4f 	bl	80059a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003506:	bf00      	nop
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	240009c0 	.word	0x240009c0

08003510 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003514:	4802      	ldr	r0, [pc, #8]	; (8003520 <DMA1_Stream4_IRQHandler+0x10>)
 8003516:	f002 fa45 	bl	80059a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800351a:	bf00      	nop
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	24000a38 	.word	0x24000a38

08003524 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003528:	4802      	ldr	r0, [pc, #8]	; (8003534 <DMA1_Stream5_IRQHandler+0x10>)
 800352a:	f002 fa3b 	bl	80059a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800352e:	bf00      	nop
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	240003d4 	.word	0x240003d4

08003538 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800353c:	4802      	ldr	r0, [pc, #8]	; (8003548 <TIM4_IRQHandler+0x10>)
 800353e:	f00b fcfb 	bl	800ef38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003542:	bf00      	nop
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	24000864 	.word	0x24000864

0800354c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003550:	4802      	ldr	r0, [pc, #8]	; (800355c <DMA2_Stream7_IRQHandler+0x10>)
 8003552:	f002 fa27 	bl	80059a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003556:	bf00      	nop
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	2400044c 	.word	0x2400044c

08003560 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003564:	4802      	ldr	r0, [pc, #8]	; (8003570 <OTG_HS_IRQHandler+0x10>)
 8003566:	f004 fb41 	bl	8007bec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800356a:	bf00      	nop
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	240021ec 	.word	0x240021ec

08003574 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003578:	4802      	ldr	r0, [pc, #8]	; (8003584 <SDMMC2_IRQHandler+0x10>)
 800357a:	f009 fb07 	bl	800cb8c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 800357e:	bf00      	nop
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	240005b8 	.word	0x240005b8

08003588 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return 1;
 800358c:	2301      	movs	r3, #1
}
 800358e:	4618      	mov	r0, r3
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <_kill>:

int _kill(int pid, int sig)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035a2:	f012 fe05 	bl	80161b0 <__errno>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2216      	movs	r2, #22
 80035aa:	601a      	str	r2, [r3, #0]
  return -1;
 80035ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3708      	adds	r7, #8
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <_exit>:

void _exit (int status)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035c0:	f04f 31ff 	mov.w	r1, #4294967295
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f7ff ffe7 	bl	8003598 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035ca:	e7fe      	b.n	80035ca <_exit+0x12>

080035cc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	e00a      	b.n	80035f4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035de:	f3af 8000 	nop.w
 80035e2:	4601      	mov	r1, r0
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	1c5a      	adds	r2, r3, #1
 80035e8:	60ba      	str	r2, [r7, #8]
 80035ea:	b2ca      	uxtb	r2, r1
 80035ec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	3301      	adds	r3, #1
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	dbf0      	blt.n	80035de <_read+0x12>
  }

  return len;
 80035fc:	687b      	ldr	r3, [r7, #4]
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b086      	sub	sp, #24
 800360a:	af00      	add	r7, sp, #0
 800360c:	60f8      	str	r0, [r7, #12]
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003612:	2300      	movs	r3, #0
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	e009      	b.n	800362c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	1c5a      	adds	r2, r3, #1
 800361c:	60ba      	str	r2, [r7, #8]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	4618      	mov	r0, r3
 8003622:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	3301      	adds	r3, #1
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	697a      	ldr	r2, [r7, #20]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	429a      	cmp	r2, r3
 8003632:	dbf1      	blt.n	8003618 <_write+0x12>
  }
  return len;
 8003634:	687b      	ldr	r3, [r7, #4]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <_close>:

int _close(int file)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003646:	f04f 33ff 	mov.w	r3, #4294967295
}
 800364a:	4618      	mov	r0, r3
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003666:	605a      	str	r2, [r3, #4]
  return 0;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <_isatty>:

int _isatty(int file)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800367e:	2301      	movs	r3, #1
}
 8003680:	4618      	mov	r0, r3
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3714      	adds	r7, #20
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
	...

080036a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036b0:	4a14      	ldr	r2, [pc, #80]	; (8003704 <_sbrk+0x5c>)
 80036b2:	4b15      	ldr	r3, [pc, #84]	; (8003708 <_sbrk+0x60>)
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036bc:	4b13      	ldr	r3, [pc, #76]	; (800370c <_sbrk+0x64>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d102      	bne.n	80036ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036c4:	4b11      	ldr	r3, [pc, #68]	; (800370c <_sbrk+0x64>)
 80036c6:	4a12      	ldr	r2, [pc, #72]	; (8003710 <_sbrk+0x68>)
 80036c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036ca:	4b10      	ldr	r3, [pc, #64]	; (800370c <_sbrk+0x64>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4413      	add	r3, r2
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d207      	bcs.n	80036e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80036d8:	f012 fd6a 	bl	80161b0 <__errno>
 80036dc:	4603      	mov	r3, r0
 80036de:	220c      	movs	r2, #12
 80036e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80036e2:	f04f 33ff 	mov.w	r3, #4294967295
 80036e6:	e009      	b.n	80036fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80036e8:	4b08      	ldr	r3, [pc, #32]	; (800370c <_sbrk+0x64>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80036ee:	4b07      	ldr	r3, [pc, #28]	; (800370c <_sbrk+0x64>)
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4413      	add	r3, r2
 80036f6:	4a05      	ldr	r2, [pc, #20]	; (800370c <_sbrk+0x64>)
 80036f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80036fa:	68fb      	ldr	r3, [r7, #12]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3718      	adds	r7, #24
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	24050000 	.word	0x24050000
 8003708:	00000800 	.word	0x00000800
 800370c:	24000ce8 	.word	0x24000ce8
 8003710:	24002928 	.word	0x24002928

08003714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003718:	4b32      	ldr	r3, [pc, #200]	; (80037e4 <SystemInit+0xd0>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371e:	4a31      	ldr	r2, [pc, #196]	; (80037e4 <SystemInit+0xd0>)
 8003720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003728:	4b2f      	ldr	r3, [pc, #188]	; (80037e8 <SystemInit+0xd4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 030f 	and.w	r3, r3, #15
 8003730:	2b06      	cmp	r3, #6
 8003732:	d807      	bhi.n	8003744 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003734:	4b2c      	ldr	r3, [pc, #176]	; (80037e8 <SystemInit+0xd4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f023 030f 	bic.w	r3, r3, #15
 800373c:	4a2a      	ldr	r2, [pc, #168]	; (80037e8 <SystemInit+0xd4>)
 800373e:	f043 0307 	orr.w	r3, r3, #7
 8003742:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003744:	4b29      	ldr	r3, [pc, #164]	; (80037ec <SystemInit+0xd8>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a28      	ldr	r2, [pc, #160]	; (80037ec <SystemInit+0xd8>)
 800374a:	f043 0301 	orr.w	r3, r3, #1
 800374e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003750:	4b26      	ldr	r3, [pc, #152]	; (80037ec <SystemInit+0xd8>)
 8003752:	2200      	movs	r2, #0
 8003754:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003756:	4b25      	ldr	r3, [pc, #148]	; (80037ec <SystemInit+0xd8>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	4924      	ldr	r1, [pc, #144]	; (80037ec <SystemInit+0xd8>)
 800375c:	4b24      	ldr	r3, [pc, #144]	; (80037f0 <SystemInit+0xdc>)
 800375e:	4013      	ands	r3, r2
 8003760:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003762:	4b21      	ldr	r3, [pc, #132]	; (80037e8 <SystemInit+0xd4>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d007      	beq.n	800377e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800376e:	4b1e      	ldr	r3, [pc, #120]	; (80037e8 <SystemInit+0xd4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f023 030f 	bic.w	r3, r3, #15
 8003776:	4a1c      	ldr	r2, [pc, #112]	; (80037e8 <SystemInit+0xd4>)
 8003778:	f043 0307 	orr.w	r3, r3, #7
 800377c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800377e:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <SystemInit+0xd8>)
 8003780:	2200      	movs	r2, #0
 8003782:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003784:	4b19      	ldr	r3, [pc, #100]	; (80037ec <SystemInit+0xd8>)
 8003786:	2200      	movs	r2, #0
 8003788:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800378a:	4b18      	ldr	r3, [pc, #96]	; (80037ec <SystemInit+0xd8>)
 800378c:	2200      	movs	r2, #0
 800378e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003790:	4b16      	ldr	r3, [pc, #88]	; (80037ec <SystemInit+0xd8>)
 8003792:	4a18      	ldr	r2, [pc, #96]	; (80037f4 <SystemInit+0xe0>)
 8003794:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003796:	4b15      	ldr	r3, [pc, #84]	; (80037ec <SystemInit+0xd8>)
 8003798:	4a17      	ldr	r2, [pc, #92]	; (80037f8 <SystemInit+0xe4>)
 800379a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800379c:	4b13      	ldr	r3, [pc, #76]	; (80037ec <SystemInit+0xd8>)
 800379e:	4a17      	ldr	r2, [pc, #92]	; (80037fc <SystemInit+0xe8>)
 80037a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80037a2:	4b12      	ldr	r3, [pc, #72]	; (80037ec <SystemInit+0xd8>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80037a8:	4b10      	ldr	r3, [pc, #64]	; (80037ec <SystemInit+0xd8>)
 80037aa:	4a14      	ldr	r2, [pc, #80]	; (80037fc <SystemInit+0xe8>)
 80037ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80037ae:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <SystemInit+0xd8>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80037b4:	4b0d      	ldr	r3, [pc, #52]	; (80037ec <SystemInit+0xd8>)
 80037b6:	4a11      	ldr	r2, [pc, #68]	; (80037fc <SystemInit+0xe8>)
 80037b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80037ba:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <SystemInit+0xd8>)
 80037bc:	2200      	movs	r2, #0
 80037be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80037c0:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <SystemInit+0xd8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a09      	ldr	r2, [pc, #36]	; (80037ec <SystemInit+0xd8>)
 80037c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80037cc:	4b07      	ldr	r3, [pc, #28]	; (80037ec <SystemInit+0xd8>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80037d2:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <SystemInit+0xec>)
 80037d4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80037d8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80037da:	bf00      	nop
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	e000ed00 	.word	0xe000ed00
 80037e8:	52002000 	.word	0x52002000
 80037ec:	58024400 	.word	0x58024400
 80037f0:	eaf6ed7f 	.word	0xeaf6ed7f
 80037f4:	02020200 	.word	0x02020200
 80037f8:	01ff0000 	.word	0x01ff0000
 80037fc:	01010280 	.word	0x01010280
 8003800:	52004000 	.word	0x52004000

08003804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800383c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003808:	f7ff ff84 	bl	8003714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800380c:	480c      	ldr	r0, [pc, #48]	; (8003840 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800380e:	490d      	ldr	r1, [pc, #52]	; (8003844 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003810:	4a0d      	ldr	r2, [pc, #52]	; (8003848 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003812:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003814:	e002      	b.n	800381c <LoopCopyDataInit>

08003816 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003816:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003818:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800381a:	3304      	adds	r3, #4

0800381c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800381c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800381e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003820:	d3f9      	bcc.n	8003816 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003822:	4a0a      	ldr	r2, [pc, #40]	; (800384c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003824:	4c0a      	ldr	r4, [pc, #40]	; (8003850 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003826:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003828:	e001      	b.n	800382e <LoopFillZerobss>

0800382a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800382a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800382c:	3204      	adds	r2, #4

0800382e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800382e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003830:	d3fb      	bcc.n	800382a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003832:	f012 fcc3 	bl	80161bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003836:	f7fd fce3 	bl	8001200 <main>
  bx  lr
 800383a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800383c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003840:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003844:	240002d4 	.word	0x240002d4
  ldr r2, =_sidata
 8003848:	0801b20c 	.word	0x0801b20c
  ldr r2, =_sbss
 800384c:	240002d8 	.word	0x240002d8
  ldr r4, =_ebss
 8003850:	24002928 	.word	0x24002928

08003854 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003854:	e7fe      	b.n	8003854 <ADC3_IRQHandler>
	...

08003858 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b082      	sub	sp, #8
 800385c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800385e:	2003      	movs	r0, #3
 8003860:	f001 fd06 	bl	8005270 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003864:	f006 f966 	bl	8009b34 <HAL_RCC_GetSysClockFreq>
 8003868:	4602      	mov	r2, r0
 800386a:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <HAL_Init+0x68>)
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	0a1b      	lsrs	r3, r3, #8
 8003870:	f003 030f 	and.w	r3, r3, #15
 8003874:	4913      	ldr	r1, [pc, #76]	; (80038c4 <HAL_Init+0x6c>)
 8003876:	5ccb      	ldrb	r3, [r1, r3]
 8003878:	f003 031f 	and.w	r3, r3, #31
 800387c:	fa22 f303 	lsr.w	r3, r2, r3
 8003880:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003882:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <HAL_Init+0x68>)
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	f003 030f 	and.w	r3, r3, #15
 800388a:	4a0e      	ldr	r2, [pc, #56]	; (80038c4 <HAL_Init+0x6c>)
 800388c:	5cd3      	ldrb	r3, [r2, r3]
 800388e:	f003 031f 	and.w	r3, r3, #31
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	fa22 f303 	lsr.w	r3, r2, r3
 8003898:	4a0b      	ldr	r2, [pc, #44]	; (80038c8 <HAL_Init+0x70>)
 800389a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800389c:	4a0b      	ldr	r2, [pc, #44]	; (80038cc <HAL_Init+0x74>)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038a2:	200f      	movs	r0, #15
 80038a4:	f000 f814 	bl	80038d0 <HAL_InitTick>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e002      	b.n	80038b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80038b2:	f7fe ff4d 	bl	8002750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3708      	adds	r7, #8
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	58024400 	.word	0x58024400
 80038c4:	0801ad00 	.word	0x0801ad00
 80038c8:	24000004 	.word	0x24000004
 80038cc:	24000000 	.word	0x24000000

080038d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80038d8:	4b15      	ldr	r3, [pc, #84]	; (8003930 <HAL_InitTick+0x60>)
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d101      	bne.n	80038e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	e021      	b.n	8003928 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80038e4:	4b13      	ldr	r3, [pc, #76]	; (8003934 <HAL_InitTick+0x64>)
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	4b11      	ldr	r3, [pc, #68]	; (8003930 <HAL_InitTick+0x60>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	4619      	mov	r1, r3
 80038ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80038f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038fa:	4618      	mov	r0, r3
 80038fc:	f001 fceb 	bl	80052d6 <HAL_SYSTICK_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e00e      	b.n	8003928 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2b0f      	cmp	r3, #15
 800390e:	d80a      	bhi.n	8003926 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003910:	2200      	movs	r2, #0
 8003912:	6879      	ldr	r1, [r7, #4]
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
 8003918:	f001 fcb5 	bl	8005286 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800391c:	4a06      	ldr	r2, [pc, #24]	; (8003938 <HAL_InitTick+0x68>)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	e000      	b.n	8003928 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
}
 8003928:	4618      	mov	r0, r3
 800392a:	3708      	adds	r7, #8
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	2400000c 	.word	0x2400000c
 8003934:	24000000 	.word	0x24000000
 8003938:	24000008 	.word	0x24000008

0800393c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003940:	4b06      	ldr	r3, [pc, #24]	; (800395c <HAL_IncTick+0x20>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <HAL_IncTick+0x24>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4413      	add	r3, r2
 800394c:	4a04      	ldr	r2, [pc, #16]	; (8003960 <HAL_IncTick+0x24>)
 800394e:	6013      	str	r3, [r2, #0]
}
 8003950:	bf00      	nop
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	2400000c 	.word	0x2400000c
 8003960:	24000cec 	.word	0x24000cec

08003964 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  return uwTick;
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <HAL_GetTick+0x14>)
 800396a:	681b      	ldr	r3, [r3, #0]
}
 800396c:	4618      	mov	r0, r3
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	24000cec 	.word	0x24000cec

0800397c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003984:	f7ff ffee 	bl	8003964 <HAL_GetTick>
 8003988:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003994:	d005      	beq.n	80039a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003996:	4b0a      	ldr	r3, [pc, #40]	; (80039c0 <HAL_Delay+0x44>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	461a      	mov	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4413      	add	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039a2:	bf00      	nop
 80039a4:	f7ff ffde 	bl	8003964 <HAL_GetTick>
 80039a8:	4602      	mov	r2, r0
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d8f7      	bhi.n	80039a4 <HAL_Delay+0x28>
  {
  }
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	2400000c 	.word	0x2400000c

080039c4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80039ce:	4b07      	ldr	r3, [pc, #28]	; (80039ec <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	43db      	mvns	r3, r3
 80039d6:	401a      	ands	r2, r3
 80039d8:	4904      	ldr	r1, [pc, #16]	; (80039ec <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	58000400 	.word	0x58000400

080039f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	609a      	str	r2, [r3, #8]
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	609a      	str	r2, [r3, #8]
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3360      	adds	r3, #96	; 0x60
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4a10      	ldr	r2, [pc, #64]	; (8003ab8 <LL_ADC_SetOffset+0x60>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d10b      	bne.n	8003a94 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003a92:	e00b      	b.n	8003aac <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	601a      	str	r2, [r3, #0]
}
 8003aac:	bf00      	nop
 8003aae:	371c      	adds	r7, #28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab6:	4770      	bx	lr
 8003ab8:	58026000 	.word	0x58026000

08003abc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	3360      	adds	r3, #96	; 0x60
 8003aca:	461a      	mov	r2, r3
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	4413      	add	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3714      	adds	r7, #20
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	fa01 f303 	lsl.w	r3, r1, r3
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	611a      	str	r2, [r3, #16]
}
 8003b0e:	bf00      	nop
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4a0c      	ldr	r2, [pc, #48]	; (8003b5c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00e      	beq.n	8003b4e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	3360      	adds	r3, #96	; 0x60
 8003b34:	461a      	mov	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	4413      	add	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	431a      	orrs	r2, r3
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	601a      	str	r2, [r3, #0]
  }
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	58026000 	.word	0x58026000

08003b60 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4a0c      	ldr	r2, [pc, #48]	; (8003ba0 <LL_ADC_SetOffsetSaturation+0x40>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d10e      	bne.n	8003b92 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	3360      	adds	r3, #96	; 0x60
 8003b78:	461a      	mov	r2, r3
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	431a      	orrs	r2, r3
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	58026000 	.word	0x58026000

08003ba4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4a0c      	ldr	r2, [pc, #48]	; (8003be4 <LL_ADC_SetOffsetSign+0x40>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d10e      	bne.n	8003bd6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	3360      	adds	r3, #96	; 0x60
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003bd6:	bf00      	nop
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	58026000 	.word	0x58026000

08003be8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	3360      	adds	r3, #96	; 0x60
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	4a0c      	ldr	r2, [pc, #48]	; (8003c38 <LL_ADC_SetOffsetState+0x50>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d108      	bne.n	8003c1c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	431a      	orrs	r2, r3
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003c1a:	e007      	b.n	8003c2c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	431a      	orrs	r2, r3
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	601a      	str	r2, [r3, #0]
}
 8003c2c:	bf00      	nop
 8003c2e:	371c      	adds	r7, #28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	58026000 	.word	0x58026000

08003c3c <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3330      	adds	r3, #48	; 0x30
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	0a1b      	lsrs	r3, r3, #8
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	4413      	add	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 031f 	and.w	r3, r3, #31
 8003c66:	211f      	movs	r1, #31
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	43db      	mvns	r3, r3
 8003c6e:	401a      	ands	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	0e9b      	lsrs	r3, r3, #26
 8003c74:	f003 011f 	and.w	r1, r3, #31
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f003 031f 	and.w	r3, r3, #31
 8003c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c82:	431a      	orrs	r2, r3
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c88:	bf00      	nop
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b087      	sub	sp, #28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3314      	adds	r3, #20
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	0e5b      	lsrs	r3, r3, #25
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	f003 0304 	and.w	r3, r3, #4
 8003cb0:	4413      	add	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	0d1b      	lsrs	r3, r3, #20
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	2107      	movs	r1, #7
 8003cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc6:	43db      	mvns	r3, r3
 8003cc8:	401a      	ands	r2, r3
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	0d1b      	lsrs	r3, r3, #20
 8003cce:	f003 031f 	and.w	r3, r3, #31
 8003cd2:	6879      	ldr	r1, [r7, #4]
 8003cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003cde:	bf00      	nop
 8003ce0:	371c      	adds	r7, #28
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	4a1a      	ldr	r2, [pc, #104]	; (8003d64 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d115      	bne.n	8003d2c <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	401a      	ands	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f003 0318 	and.w	r3, r3, #24
 8003d16:	4914      	ldr	r1, [pc, #80]	; (8003d68 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003d18:	40d9      	lsrs	r1, r3
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	400b      	ands	r3, r1
 8003d1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d22:	431a      	orrs	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003d2a:	e014      	b.n	8003d56 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	401a      	ands	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f003 0318 	and.w	r3, r3, #24
 8003d42:	4909      	ldr	r1, [pc, #36]	; (8003d68 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003d44:	40d9      	lsrs	r1, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	400b      	ands	r3, r1
 8003d4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003d56:	bf00      	nop
 8003d58:	3714      	adds	r7, #20
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	58026000 	.word	0x58026000
 8003d68:	000fffff 	.word	0x000fffff

08003d6c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689a      	ldr	r2, [r3, #8]
 8003d78:	4b04      	ldr	r3, [pc, #16]	; (8003d8c <LL_ADC_DisableDeepPowerDown+0x20>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6093      	str	r3, [r2, #8]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	5fffffc0 	.word	0x5fffffc0

08003d90 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b083      	sub	sp, #12
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003da4:	d101      	bne.n	8003daa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003daa:	2300      	movs	r3, #0
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689a      	ldr	r2, [r3, #8]
 8003dc4:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <LL_ADC_EnableInternalRegulator+0x24>)
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	6fffffc0 	.word	0x6fffffc0

08003de0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003df4:	d101      	bne.n	8003dfa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003df6:	2301      	movs	r3, #1
 8003df8:	e000      	b.n	8003dfc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 0301 	and.w	r3, r3, #1
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d101      	bne.n	8003e20 <LL_ADC_IsEnabled+0x18>
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e000      	b.n	8003e22 <LL_ADC_IsEnabled+0x1a>
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 0304 	and.w	r3, r3, #4
 8003e3e:	2b04      	cmp	r3, #4
 8003e40:	d101      	bne.n	8003e46 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e42:	2301      	movs	r3, #1
 8003e44:	e000      	b.n	8003e48 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d101      	bne.n	8003e6c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
	...

08003e7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e7c:	b590      	push	{r4, r7, lr}
 8003e7e:	b089      	sub	sp, #36	; 0x24
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e84:	2300      	movs	r3, #0
 8003e86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e92:	2301      	movs	r3, #1
 8003e94:	e1ee      	b.n	8004274 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d109      	bne.n	8003eb8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7fe fc6d 	bl	8002784 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff ff67 	bl	8003d90 <LL_ADC_IsDeepPowerDownEnabled>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d004      	beq.n	8003ed2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff ff4d 	bl	8003d6c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7ff ff82 	bl	8003de0 <LL_ADC_IsInternalRegulatorEnabled>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d114      	bne.n	8003f0c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff ff66 	bl	8003db8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003eec:	4b8e      	ldr	r3, [pc, #568]	; (8004128 <HAL_ADC_Init+0x2ac>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	099b      	lsrs	r3, r3, #6
 8003ef2:	4a8e      	ldr	r2, [pc, #568]	; (800412c <HAL_ADC_Init+0x2b0>)
 8003ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ef8:	099b      	lsrs	r3, r3, #6
 8003efa:	3301      	adds	r3, #1
 8003efc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003efe:	e002      	b.n	8003f06 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1f9      	bne.n	8003f00 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff ff65 	bl	8003de0 <LL_ADC_IsInternalRegulatorEnabled>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10d      	bne.n	8003f38 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f20:	f043 0210 	orr.w	r2, r3, #16
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f2c:	f043 0201 	orr.w	r2, r3, #1
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7ff ff76 	bl	8003e2e <LL_ADC_REG_IsConversionOngoing>
 8003f42:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f48:	f003 0310 	and.w	r3, r3, #16
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f040 8188 	bne.w	8004262 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f040 8184 	bne.w	8004262 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f62:	f043 0202 	orr.w	r2, r3, #2
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f7ff ff4a 	bl	8003e08 <LL_ADC_IsEnabled>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d136      	bne.n	8003fe8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a6c      	ldr	r2, [pc, #432]	; (8004130 <HAL_ADC_Init+0x2b4>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d004      	beq.n	8003f8e <HAL_ADC_Init+0x112>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a6a      	ldr	r2, [pc, #424]	; (8004134 <HAL_ADC_Init+0x2b8>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d10e      	bne.n	8003fac <HAL_ADC_Init+0x130>
 8003f8e:	4868      	ldr	r0, [pc, #416]	; (8004130 <HAL_ADC_Init+0x2b4>)
 8003f90:	f7ff ff3a 	bl	8003e08 <LL_ADC_IsEnabled>
 8003f94:	4604      	mov	r4, r0
 8003f96:	4867      	ldr	r0, [pc, #412]	; (8004134 <HAL_ADC_Init+0x2b8>)
 8003f98:	f7ff ff36 	bl	8003e08 <LL_ADC_IsEnabled>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	4323      	orrs	r3, r4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf0c      	ite	eq
 8003fa4:	2301      	moveq	r3, #1
 8003fa6:	2300      	movne	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	e008      	b.n	8003fbe <HAL_ADC_Init+0x142>
 8003fac:	4862      	ldr	r0, [pc, #392]	; (8004138 <HAL_ADC_Init+0x2bc>)
 8003fae:	f7ff ff2b 	bl	8003e08 <LL_ADC_IsEnabled>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bf0c      	ite	eq
 8003fb8:	2301      	moveq	r3, #1
 8003fba:	2300      	movne	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d012      	beq.n	8003fe8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a5a      	ldr	r2, [pc, #360]	; (8004130 <HAL_ADC_Init+0x2b4>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d004      	beq.n	8003fd6 <HAL_ADC_Init+0x15a>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a58      	ldr	r2, [pc, #352]	; (8004134 <HAL_ADC_Init+0x2b8>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d101      	bne.n	8003fda <HAL_ADC_Init+0x15e>
 8003fd6:	4a59      	ldr	r2, [pc, #356]	; (800413c <HAL_ADC_Init+0x2c0>)
 8003fd8:	e000      	b.n	8003fdc <HAL_ADC_Init+0x160>
 8003fda:	4a59      	ldr	r2, [pc, #356]	; (8004140 <HAL_ADC_Init+0x2c4>)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	f7ff fd04 	bl	80039f0 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a52      	ldr	r2, [pc, #328]	; (8004138 <HAL_ADC_Init+0x2bc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d129      	bne.n	8004046 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	7e5b      	ldrb	r3, [r3, #25]
 8003ff6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8003ffc:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8004002:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	2b08      	cmp	r3, #8
 800400a:	d013      	beq.n	8004034 <HAL_ADC_Init+0x1b8>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b0c      	cmp	r3, #12
 8004012:	d00d      	beq.n	8004030 <HAL_ADC_Init+0x1b4>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	2b1c      	cmp	r3, #28
 800401a:	d007      	beq.n	800402c <HAL_ADC_Init+0x1b0>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	2b18      	cmp	r3, #24
 8004022:	d101      	bne.n	8004028 <HAL_ADC_Init+0x1ac>
 8004024:	2318      	movs	r3, #24
 8004026:	e006      	b.n	8004036 <HAL_ADC_Init+0x1ba>
 8004028:	2300      	movs	r3, #0
 800402a:	e004      	b.n	8004036 <HAL_ADC_Init+0x1ba>
 800402c:	2310      	movs	r3, #16
 800402e:	e002      	b.n	8004036 <HAL_ADC_Init+0x1ba>
 8004030:	2308      	movs	r3, #8
 8004032:	e000      	b.n	8004036 <HAL_ADC_Init+0x1ba>
 8004034:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004036:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800403e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004040:	4313      	orrs	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
 8004044:	e00e      	b.n	8004064 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	7e5b      	ldrb	r3, [r3, #25]
 800404a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004050:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004056:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800405e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004060:	4313      	orrs	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3020 	ldrb.w	r3, [r3, #32]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d106      	bne.n	800407c <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	3b01      	subs	r3, #1
 8004074:	045b      	lsls	r3, r3, #17
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	4313      	orrs	r3, r2
 800407a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004080:	2b00      	cmp	r3, #0
 8004082:	d009      	beq.n	8004098 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004088:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004090:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	4313      	orrs	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a26      	ldr	r2, [pc, #152]	; (8004138 <HAL_ADC_Init+0x2bc>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d115      	bne.n	80040ce <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	4b26      	ldr	r3, [pc, #152]	; (8004144 <HAL_ADC_Init+0x2c8>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6812      	ldr	r2, [r2, #0]
 80040b0:	69b9      	ldr	r1, [r7, #24]
 80040b2:	430b      	orrs	r3, r1
 80040b4:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	611a      	str	r2, [r3, #16]
 80040cc:	e009      	b.n	80040e2 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	4b1c      	ldr	r3, [pc, #112]	; (8004148 <HAL_ADC_Init+0x2cc>)
 80040d6:	4013      	ands	r3, r2
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6812      	ldr	r2, [r2, #0]
 80040dc:	69b9      	ldr	r1, [r7, #24]
 80040de:	430b      	orrs	r3, r1
 80040e0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f7ff fea1 	bl	8003e2e <LL_ADC_REG_IsConversionOngoing>
 80040ec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff feae 	bl	8003e54 <LL_ADC_INJ_IsConversionOngoing>
 80040f8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f040 808e 	bne.w	800421e <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	f040 808a 	bne.w	800421e <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a0a      	ldr	r2, [pc, #40]	; (8004138 <HAL_ADC_Init+0x2bc>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d11b      	bne.n	800414c <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	7e1b      	ldrb	r3, [r3, #24]
 8004118:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004120:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8004122:	4313      	orrs	r3, r2
 8004124:	61bb      	str	r3, [r7, #24]
 8004126:	e018      	b.n	800415a <HAL_ADC_Init+0x2de>
 8004128:	24000000 	.word	0x24000000
 800412c:	053e2d63 	.word	0x053e2d63
 8004130:	40022000 	.word	0x40022000
 8004134:	40022100 	.word	0x40022100
 8004138:	58026000 	.word	0x58026000
 800413c:	40022300 	.word	0x40022300
 8004140:	58026300 	.word	0x58026300
 8004144:	fff04007 	.word	0xfff04007
 8004148:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	7e1b      	ldrb	r3, [r3, #24]
 8004150:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004156:	4313      	orrs	r3, r2
 8004158:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68da      	ldr	r2, [r3, #12]
 8004160:	4b46      	ldr	r3, [pc, #280]	; (800427c <HAL_ADC_Init+0x400>)
 8004162:	4013      	ands	r3, r2
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	6812      	ldr	r2, [r2, #0]
 8004168:	69b9      	ldr	r1, [r7, #24]
 800416a:	430b      	orrs	r3, r1
 800416c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004174:	2b01      	cmp	r3, #1
 8004176:	d137      	bne.n	80041e8 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417c:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a3f      	ldr	r2, [pc, #252]	; (8004280 <HAL_ADC_Init+0x404>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d116      	bne.n	80041b6 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	4b3d      	ldr	r3, [pc, #244]	; (8004284 <HAL_ADC_Init+0x408>)
 8004190:	4013      	ands	r3, r2
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800419a:	4311      	orrs	r1, r2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041a0:	4311      	orrs	r1, r2
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80041a6:	430a      	orrs	r2, r1
 80041a8:	431a      	orrs	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	611a      	str	r2, [r3, #16]
 80041b4:	e020      	b.n	80041f8 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	691a      	ldr	r2, [r3, #16]
 80041bc:	4b32      	ldr	r3, [pc, #200]	; (8004288 <HAL_ADC_Init+0x40c>)
 80041be:	4013      	ands	r3, r2
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80041c4:	3a01      	subs	r2, #1
 80041c6:	0411      	lsls	r1, r2, #16
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80041cc:	4311      	orrs	r1, r2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041d2:	4311      	orrs	r1, r2
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80041d8:	430a      	orrs	r2, r1
 80041da:	431a      	orrs	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f042 0201 	orr.w	r2, r2, #1
 80041e4:	611a      	str	r2, [r3, #16]
 80041e6:	e007      	b.n	80041f8 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0201 	bic.w	r2, r2, #1
 80041f6:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <HAL_ADC_Init+0x404>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d002      	beq.n	800421e <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fd63 	bl	8004ce4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d10c      	bne.n	8004240 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800422c:	f023 010f 	bic.w	r1, r3, #15
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69db      	ldr	r3, [r3, #28]
 8004234:	1e5a      	subs	r2, r3, #1
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	631a      	str	r2, [r3, #48]	; 0x30
 800423e:	e007      	b.n	8004250 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 020f 	bic.w	r2, r2, #15
 800424e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004254:	f023 0303 	bic.w	r3, r3, #3
 8004258:	f043 0201 	orr.w	r2, r3, #1
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	661a      	str	r2, [r3, #96]	; 0x60
 8004260:	e007      	b.n	8004272 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004266:	f043 0210 	orr.w	r2, r3, #16
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004272:	7ffb      	ldrb	r3, [r7, #31]
}
 8004274:	4618      	mov	r0, r3
 8004276:	3724      	adds	r7, #36	; 0x24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd90      	pop	{r4, r7, pc}
 800427c:	ffffbffc 	.word	0xffffbffc
 8004280:	58026000 	.word	0x58026000
 8004284:	fc00f81f 	.word	0xfc00f81f
 8004288:	fc00f81e 	.word	0xfc00f81e

0800428c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800428c:	b590      	push	{r4, r7, lr}
 800428e:	b0b9      	sub	sp, #228	; 0xe4
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800429c:	2300      	movs	r3, #0
 800429e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042a6:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	4aa9      	ldr	r2, [pc, #676]	; (8004554 <HAL_ADC_ConfigChannel+0x2c8>)
 80042ae:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d102      	bne.n	80042c0 <HAL_ADC_ConfigChannel+0x34>
 80042ba:	2302      	movs	r3, #2
 80042bc:	f000 bcfa 	b.w	8004cb4 <HAL_ADC_ConfigChannel+0xa28>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2201      	movs	r2, #1
 80042c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7ff fdae 	bl	8003e2e <LL_ADC_REG_IsConversionOngoing>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f040 84de 	bne.w	8004c96 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a9e      	ldr	r2, [pc, #632]	; (8004558 <HAL_ADC_ConfigChannel+0x2cc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d033      	beq.n	800434c <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d108      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x76>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	0e9b      	lsrs	r3, r3, #26
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	2201      	movs	r2, #1
 80042fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004300:	e01d      	b.n	800433e <HAL_ADC_ConfigChannel+0xb2>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800430e:	fa93 f3a3 	rbit	r3, r3
 8004312:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004316:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800431a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800431e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d101      	bne.n	800432a <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004326:	2320      	movs	r3, #32
 8004328:	e004      	b.n	8004334 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 800432a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800432e:	fab3 f383 	clz	r3, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	f003 031f 	and.w	r3, r3, #31
 8004338:	2201      	movs	r2, #1
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6812      	ldr	r2, [r2, #0]
 8004342:	69d1      	ldr	r1, [r2, #28]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	6812      	ldr	r2, [r2, #0]
 8004348:	430b      	orrs	r3, r1
 800434a:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6818      	ldr	r0, [r3, #0]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	6859      	ldr	r1, [r3, #4]
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	f7ff fc6f 	bl	8003c3c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff fd63 	bl	8003e2e <LL_ADC_REG_IsConversionOngoing>
 8004368:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	f7ff fd6f 	bl	8003e54 <LL_ADC_INJ_IsConversionOngoing>
 8004376:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800437a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800437e:	2b00      	cmp	r3, #0
 8004380:	f040 8270 	bne.w	8004864 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004384:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004388:	2b00      	cmp	r3, #0
 800438a:	f040 826b 	bne.w	8004864 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6818      	ldr	r0, [r3, #0]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	6819      	ldr	r1, [r3, #0]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	461a      	mov	r2, r3
 800439c:	f7ff fc7a 	bl	8003c94 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a6c      	ldr	r2, [pc, #432]	; (8004558 <HAL_ADC_ConfigChannel+0x2cc>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d10d      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	695a      	ldr	r2, [r3, #20]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	08db      	lsrs	r3, r3, #3
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	fa02 f303 	lsl.w	r3, r2, r3
 80043c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043c4:	e032      	b.n	800442c <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80043c6:	4b65      	ldr	r3, [pc, #404]	; (800455c <HAL_ADC_ConfigChannel+0x2d0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80043ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043d2:	d10b      	bne.n	80043ec <HAL_ADC_ConfigChannel+0x160>
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	695a      	ldr	r2, [r3, #20]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	089b      	lsrs	r3, r3, #2
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ea:	e01d      	b.n	8004428 <HAL_ADC_ConfigChannel+0x19c>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10b      	bne.n	8004412 <HAL_ADC_ConfigChannel+0x186>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	695a      	ldr	r2, [r3, #20]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	089b      	lsrs	r3, r3, #2
 8004406:	f003 0307 	and.w	r3, r3, #7
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	e00a      	b.n	8004428 <HAL_ADC_ConfigChannel+0x19c>
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	695a      	ldr	r2, [r3, #20]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	089b      	lsrs	r3, r3, #2
 800441e:	f003 0304 	and.w	r3, r3, #4
 8004422:	005b      	lsls	r3, r3, #1
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	2b04      	cmp	r3, #4
 8004432:	d048      	beq.n	80044c6 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6818      	ldr	r0, [r3, #0]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	6919      	ldr	r1, [r3, #16]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004444:	f7ff fb08 	bl	8003a58 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a42      	ldr	r2, [pc, #264]	; (8004558 <HAL_ADC_ConfigChannel+0x2cc>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d119      	bne.n	8004486 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	6919      	ldr	r1, [r3, #16]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	461a      	mov	r2, r3
 8004460:	f7ff fba0 	bl	8003ba4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	6919      	ldr	r1, [r3, #16]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d102      	bne.n	800447c <HAL_ADC_ConfigChannel+0x1f0>
 8004476:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800447a:	e000      	b.n	800447e <HAL_ADC_ConfigChannel+0x1f2>
 800447c:	2300      	movs	r3, #0
 800447e:	461a      	mov	r2, r3
 8004480:	f7ff fb6e 	bl	8003b60 <LL_ADC_SetOffsetSaturation>
 8004484:	e1ee      	b.n	8004864 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	6919      	ldr	r1, [r3, #16]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004494:	2b01      	cmp	r3, #1
 8004496:	d102      	bne.n	800449e <HAL_ADC_ConfigChannel+0x212>
 8004498:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800449c:	e000      	b.n	80044a0 <HAL_ADC_ConfigChannel+0x214>
 800449e:	2300      	movs	r3, #0
 80044a0:	461a      	mov	r2, r3
 80044a2:	f7ff fb3b 	bl	8003b1c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	6919      	ldr	r1, [r3, #16]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	7e1b      	ldrb	r3, [r3, #24]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d102      	bne.n	80044bc <HAL_ADC_ConfigChannel+0x230>
 80044b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044ba:	e000      	b.n	80044be <HAL_ADC_ConfigChannel+0x232>
 80044bc:	2300      	movs	r3, #0
 80044be:	461a      	mov	r2, r3
 80044c0:	f7ff fb12 	bl	8003ae8 <LL_ADC_SetDataRightShift>
 80044c4:	e1ce      	b.n	8004864 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a23      	ldr	r2, [pc, #140]	; (8004558 <HAL_ADC_ConfigChannel+0x2cc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	f040 8181 	bne.w	80047d4 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2100      	movs	r1, #0
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff faef 	bl	8003abc <LL_ADC_GetOffsetChannel>
 80044de:	4603      	mov	r3, r0
 80044e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10a      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x272>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2100      	movs	r1, #0
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff fae4 	bl	8003abc <LL_ADC_GetOffsetChannel>
 80044f4:	4603      	mov	r3, r0
 80044f6:	0e9b      	lsrs	r3, r3, #26
 80044f8:	f003 021f 	and.w	r2, r3, #31
 80044fc:	e01e      	b.n	800453c <HAL_ADC_ConfigChannel+0x2b0>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2100      	movs	r1, #0
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff fad9 	bl	8003abc <LL_ADC_GetOffsetChannel>
 800450a:	4603      	mov	r3, r0
 800450c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004510:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004514:	fa93 f3a3 	rbit	r3, r3
 8004518:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 800451c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004520:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004524:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 800452c:	2320      	movs	r3, #32
 800452e:	e004      	b.n	800453a <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8004530:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004534:	fab3 f383 	clz	r3, r3
 8004538:	b2db      	uxtb	r3, r3
 800453a:	461a      	mov	r2, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004544:	2b00      	cmp	r3, #0
 8004546:	d10b      	bne.n	8004560 <HAL_ADC_ConfigChannel+0x2d4>
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	0e9b      	lsrs	r3, r3, #26
 800454e:	f003 031f 	and.w	r3, r3, #31
 8004552:	e01e      	b.n	8004592 <HAL_ADC_ConfigChannel+0x306>
 8004554:	47ff0000 	.word	0x47ff0000
 8004558:	58026000 	.word	0x58026000
 800455c:	5c001000 	.word	0x5c001000
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004568:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800456c:	fa93 f3a3 	rbit	r3, r3
 8004570:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004574:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004578:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800457c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004584:	2320      	movs	r3, #32
 8004586:	e004      	b.n	8004592 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8004588:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800458c:	fab3 f383 	clz	r3, r3
 8004590:	b2db      	uxtb	r3, r3
 8004592:	429a      	cmp	r2, r3
 8004594:	d106      	bne.n	80045a4 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2200      	movs	r2, #0
 800459c:	2100      	movs	r1, #0
 800459e:	4618      	mov	r0, r3
 80045a0:	f7ff fb22 	bl	8003be8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2101      	movs	r1, #1
 80045aa:	4618      	mov	r0, r3
 80045ac:	f7ff fa86 	bl	8003abc <LL_ADC_GetOffsetChannel>
 80045b0:	4603      	mov	r3, r0
 80045b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d10a      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x344>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2101      	movs	r1, #1
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7ff fa7b 	bl	8003abc <LL_ADC_GetOffsetChannel>
 80045c6:	4603      	mov	r3, r0
 80045c8:	0e9b      	lsrs	r3, r3, #26
 80045ca:	f003 021f 	and.w	r2, r3, #31
 80045ce:	e01e      	b.n	800460e <HAL_ADC_ConfigChannel+0x382>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2101      	movs	r1, #1
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fa70 	bl	8003abc <LL_ADC_GetOffsetChannel>
 80045dc:	4603      	mov	r3, r0
 80045de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045e6:	fa93 f3a3 	rbit	r3, r3
 80045ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80045ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80045f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80045fe:	2320      	movs	r3, #32
 8004600:	e004      	b.n	800460c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8004602:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004606:	fab3 f383 	clz	r3, r3
 800460a:	b2db      	uxtb	r3, r3
 800460c:	461a      	mov	r2, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004616:	2b00      	cmp	r3, #0
 8004618:	d105      	bne.n	8004626 <HAL_ADC_ConfigChannel+0x39a>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	0e9b      	lsrs	r3, r3, #26
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	e018      	b.n	8004658 <HAL_ADC_ConfigChannel+0x3cc>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004632:	fa93 f3a3 	rbit	r3, r3
 8004636:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 800463a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800463e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8004642:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 800464a:	2320      	movs	r3, #32
 800464c:	e004      	b.n	8004658 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 800464e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004652:	fab3 f383 	clz	r3, r3
 8004656:	b2db      	uxtb	r3, r3
 8004658:	429a      	cmp	r2, r3
 800465a:	d106      	bne.n	800466a <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	2200      	movs	r2, #0
 8004662:	2101      	movs	r1, #1
 8004664:	4618      	mov	r0, r3
 8004666:	f7ff fabf 	bl	8003be8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2102      	movs	r1, #2
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fa23 	bl	8003abc <LL_ADC_GetOffsetChannel>
 8004676:	4603      	mov	r3, r0
 8004678:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10a      	bne.n	8004696 <HAL_ADC_ConfigChannel+0x40a>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2102      	movs	r1, #2
 8004686:	4618      	mov	r0, r3
 8004688:	f7ff fa18 	bl	8003abc <LL_ADC_GetOffsetChannel>
 800468c:	4603      	mov	r3, r0
 800468e:	0e9b      	lsrs	r3, r3, #26
 8004690:	f003 021f 	and.w	r2, r3, #31
 8004694:	e01e      	b.n	80046d4 <HAL_ADC_ConfigChannel+0x448>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2102      	movs	r1, #2
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff fa0d 	bl	8003abc <LL_ADC_GetOffsetChannel>
 80046a2:	4603      	mov	r3, r0
 80046a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046ac:	fa93 f3a3 	rbit	r3, r3
 80046b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80046b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80046bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 80046c4:	2320      	movs	r3, #32
 80046c6:	e004      	b.n	80046d2 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 80046c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80046cc:	fab3 f383 	clz	r3, r3
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	461a      	mov	r2, r3
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d105      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x460>
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	0e9b      	lsrs	r3, r3, #26
 80046e6:	f003 031f 	and.w	r3, r3, #31
 80046ea:	e014      	b.n	8004716 <HAL_ADC_ConfigChannel+0x48a>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80046f4:	fa93 f3a3 	rbit	r3, r3
 80046f8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80046fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004700:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004708:	2320      	movs	r3, #32
 800470a:	e004      	b.n	8004716 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 800470c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004710:	fab3 f383 	clz	r3, r3
 8004714:	b2db      	uxtb	r3, r3
 8004716:	429a      	cmp	r2, r3
 8004718:	d106      	bne.n	8004728 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2200      	movs	r2, #0
 8004720:	2102      	movs	r1, #2
 8004722:	4618      	mov	r0, r3
 8004724:	f7ff fa60 	bl	8003be8 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2103      	movs	r1, #3
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff f9c4 	bl	8003abc <LL_ADC_GetOffsetChannel>
 8004734:	4603      	mov	r3, r0
 8004736:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <HAL_ADC_ConfigChannel+0x4c8>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2103      	movs	r1, #3
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff f9b9 	bl	8003abc <LL_ADC_GetOffsetChannel>
 800474a:	4603      	mov	r3, r0
 800474c:	0e9b      	lsrs	r3, r3, #26
 800474e:	f003 021f 	and.w	r2, r3, #31
 8004752:	e017      	b.n	8004784 <HAL_ADC_ConfigChannel+0x4f8>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2103      	movs	r1, #3
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff f9ae 	bl	8003abc <LL_ADC_GetOffsetChannel>
 8004760:	4603      	mov	r3, r0
 8004762:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004766:	fa93 f3a3 	rbit	r3, r3
 800476a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800476c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800476e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004770:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004776:	2320      	movs	r3, #32
 8004778:	e003      	b.n	8004782 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800477a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800477c:	fab3 f383 	clz	r3, r3
 8004780:	b2db      	uxtb	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800478c:	2b00      	cmp	r3, #0
 800478e:	d105      	bne.n	800479c <HAL_ADC_ConfigChannel+0x510>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	0e9b      	lsrs	r3, r3, #26
 8004796:	f003 031f 	and.w	r3, r3, #31
 800479a:	e011      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x534>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047a4:	fa93 f3a3 	rbit	r3, r3
 80047a8:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80047aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047ac:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80047ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d101      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 80047b4:	2320      	movs	r3, #32
 80047b6:	e003      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 80047b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ba:	fab3 f383 	clz	r3, r3
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d14f      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2200      	movs	r2, #0
 80047ca:	2103      	movs	r1, #3
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff fa0b 	bl	8003be8 <LL_ADC_SetOffsetState>
 80047d2:	e047      	b.n	8004864 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	069b      	lsls	r3, r3, #26
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d107      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047f6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	069b      	lsls	r3, r3, #26
 8004808:	429a      	cmp	r2, r3
 800480a:	d107      	bne.n	800481c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800481a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004822:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	069b      	lsls	r3, r3, #26
 800482c:	429a      	cmp	r2, r3
 800482e:	d107      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800483e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004846:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	069b      	lsls	r3, r3, #26
 8004850:	429a      	cmp	r2, r3
 8004852:	d107      	bne.n	8004864 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004862:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f7ff facd 	bl	8003e08 <LL_ADC_IsEnabled>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	f040 8219 	bne.w	8004ca8 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	6819      	ldr	r1, [r3, #0]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	461a      	mov	r2, r3
 8004884:	f7ff fa32 	bl	8003cec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	4aa1      	ldr	r2, [pc, #644]	; (8004b14 <HAL_ADC_ConfigChannel+0x888>)
 800488e:	4293      	cmp	r3, r2
 8004890:	f040 812e 	bne.w	8004af0 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10b      	bne.n	80048bc <HAL_ADC_ConfigChannel+0x630>
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	0e9b      	lsrs	r3, r3, #26
 80048aa:	3301      	adds	r3, #1
 80048ac:	f003 031f 	and.w	r3, r3, #31
 80048b0:	2b09      	cmp	r3, #9
 80048b2:	bf94      	ite	ls
 80048b4:	2301      	movls	r3, #1
 80048b6:	2300      	movhi	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	e019      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x664>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048c4:	fa93 f3a3 	rbit	r3, r3
 80048c8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80048ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80048ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d101      	bne.n	80048d8 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80048d4:	2320      	movs	r3, #32
 80048d6:	e003      	b.n	80048e0 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80048d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048da:	fab3 f383 	clz	r3, r3
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	3301      	adds	r3, #1
 80048e2:	f003 031f 	and.w	r3, r3, #31
 80048e6:	2b09      	cmp	r3, #9
 80048e8:	bf94      	ite	ls
 80048ea:	2301      	movls	r3, #1
 80048ec:	2300      	movhi	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d079      	beq.n	80049e8 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d107      	bne.n	8004910 <HAL_ADC_ConfigChannel+0x684>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	0e9b      	lsrs	r3, r3, #26
 8004906:	3301      	adds	r3, #1
 8004908:	069b      	lsls	r3, r3, #26
 800490a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800490e:	e015      	b.n	800493c <HAL_ADC_ConfigChannel+0x6b0>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004918:	fa93 f3a3 	rbit	r3, r3
 800491c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800491e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004920:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004928:	2320      	movs	r3, #32
 800492a:	e003      	b.n	8004934 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 800492c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800492e:	fab3 f383 	clz	r3, r3
 8004932:	b2db      	uxtb	r3, r3
 8004934:	3301      	adds	r3, #1
 8004936:	069b      	lsls	r3, r3, #26
 8004938:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004944:	2b00      	cmp	r3, #0
 8004946:	d109      	bne.n	800495c <HAL_ADC_ConfigChannel+0x6d0>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	0e9b      	lsrs	r3, r3, #26
 800494e:	3301      	adds	r3, #1
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	2101      	movs	r1, #1
 8004956:	fa01 f303 	lsl.w	r3, r1, r3
 800495a:	e017      	b.n	800498c <HAL_ADC_ConfigChannel+0x700>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004962:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004964:	fa93 f3a3 	rbit	r3, r3
 8004968:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800496a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800496e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004974:	2320      	movs	r3, #32
 8004976:	e003      	b.n	8004980 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004978:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497a:	fab3 f383 	clz	r3, r3
 800497e:	b2db      	uxtb	r3, r3
 8004980:	3301      	adds	r3, #1
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	2101      	movs	r1, #1
 8004988:	fa01 f303 	lsl.w	r3, r1, r3
 800498c:	ea42 0103 	orr.w	r1, r2, r3
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10a      	bne.n	80049b2 <HAL_ADC_ConfigChannel+0x726>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	0e9b      	lsrs	r3, r3, #26
 80049a2:	3301      	adds	r3, #1
 80049a4:	f003 021f 	and.w	r2, r3, #31
 80049a8:	4613      	mov	r3, r2
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	4413      	add	r3, r2
 80049ae:	051b      	lsls	r3, r3, #20
 80049b0:	e018      	b.n	80049e4 <HAL_ADC_ConfigChannel+0x758>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ba:	fa93 f3a3 	rbit	r3, r3
 80049be:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80049c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80049c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 80049ca:	2320      	movs	r3, #32
 80049cc:	e003      	b.n	80049d6 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	fab3 f383 	clz	r3, r3
 80049d4:	b2db      	uxtb	r3, r3
 80049d6:	3301      	adds	r3, #1
 80049d8:	f003 021f 	and.w	r2, r3, #31
 80049dc:	4613      	mov	r3, r2
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	4413      	add	r3, r2
 80049e2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049e4:	430b      	orrs	r3, r1
 80049e6:	e07e      	b.n	8004ae6 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d107      	bne.n	8004a04 <HAL_ADC_ConfigChannel+0x778>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	0e9b      	lsrs	r3, r3, #26
 80049fa:	3301      	adds	r3, #1
 80049fc:	069b      	lsls	r3, r3, #26
 80049fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a02:	e015      	b.n	8004a30 <HAL_ADC_ConfigChannel+0x7a4>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0c:	fa93 f3a3 	rbit	r3, r3
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004a1c:	2320      	movs	r3, #32
 8004a1e:	e003      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a22:	fab3 f383 	clz	r3, r3
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	3301      	adds	r3, #1
 8004a2a:	069b      	lsls	r3, r3, #26
 8004a2c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d109      	bne.n	8004a50 <HAL_ADC_ConfigChannel+0x7c4>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	0e9b      	lsrs	r3, r3, #26
 8004a42:	3301      	adds	r3, #1
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	2101      	movs	r1, #1
 8004a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a4e:	e017      	b.n	8004a80 <HAL_ADC_ConfigChannel+0x7f4>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	fa93 f3a3 	rbit	r3, r3
 8004a5c:	61bb      	str	r3, [r7, #24]
  return result;
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d101      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004a68:	2320      	movs	r3, #32
 8004a6a:	e003      	b.n	8004a74 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	fab3 f383 	clz	r3, r3
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	3301      	adds	r3, #1
 8004a76:	f003 031f 	and.w	r3, r3, #31
 8004a7a:	2101      	movs	r1, #1
 8004a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a80:	ea42 0103 	orr.w	r1, r2, r3
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10d      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x820>
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	0e9b      	lsrs	r3, r3, #26
 8004a96:	3301      	adds	r3, #1
 8004a98:	f003 021f 	and.w	r2, r3, #31
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	4413      	add	r3, r2
 8004aa2:	3b1e      	subs	r3, #30
 8004aa4:	051b      	lsls	r3, r3, #20
 8004aa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004aaa:	e01b      	b.n	8004ae4 <HAL_ADC_ConfigChannel+0x858>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	fa93 f3a3 	rbit	r3, r3
 8004ab8:	60fb      	str	r3, [r7, #12]
  return result;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004ac4:	2320      	movs	r3, #32
 8004ac6:	e003      	b.n	8004ad0 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	fab3 f383 	clz	r3, r3
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	f003 021f 	and.w	r2, r3, #31
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	005b      	lsls	r3, r3, #1
 8004ada:	4413      	add	r3, r2
 8004adc:	3b1e      	subs	r3, #30
 8004ade:	051b      	lsls	r3, r3, #20
 8004ae0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ae4:	430b      	orrs	r3, r1
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	6892      	ldr	r2, [r2, #8]
 8004aea:	4619      	mov	r1, r3
 8004aec:	f7ff f8d2 	bl	8003c94 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f280 80d7 	bge.w	8004ca8 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a06      	ldr	r2, [pc, #24]	; (8004b18 <HAL_ADC_ConfigChannel+0x88c>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d004      	beq.n	8004b0e <HAL_ADC_ConfigChannel+0x882>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a04      	ldr	r2, [pc, #16]	; (8004b1c <HAL_ADC_ConfigChannel+0x890>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d10a      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x898>
 8004b0e:	4b04      	ldr	r3, [pc, #16]	; (8004b20 <HAL_ADC_ConfigChannel+0x894>)
 8004b10:	e009      	b.n	8004b26 <HAL_ADC_ConfigChannel+0x89a>
 8004b12:	bf00      	nop
 8004b14:	47ff0000 	.word	0x47ff0000
 8004b18:	40022000 	.word	0x40022000
 8004b1c:	40022100 	.word	0x40022100
 8004b20:	40022300 	.word	0x40022300
 8004b24:	4b65      	ldr	r3, [pc, #404]	; (8004cbc <HAL_ADC_ConfigChannel+0xa30>)
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7fe ff88 	bl	8003a3c <LL_ADC_GetCommonPathInternalCh>
 8004b2c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a62      	ldr	r2, [pc, #392]	; (8004cc0 <HAL_ADC_ConfigChannel+0xa34>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d004      	beq.n	8004b44 <HAL_ADC_ConfigChannel+0x8b8>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a61      	ldr	r2, [pc, #388]	; (8004cc4 <HAL_ADC_ConfigChannel+0xa38>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d10e      	bne.n	8004b62 <HAL_ADC_ConfigChannel+0x8d6>
 8004b44:	485e      	ldr	r0, [pc, #376]	; (8004cc0 <HAL_ADC_ConfigChannel+0xa34>)
 8004b46:	f7ff f95f 	bl	8003e08 <LL_ADC_IsEnabled>
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	485d      	ldr	r0, [pc, #372]	; (8004cc4 <HAL_ADC_ConfigChannel+0xa38>)
 8004b4e:	f7ff f95b 	bl	8003e08 <LL_ADC_IsEnabled>
 8004b52:	4603      	mov	r3, r0
 8004b54:	4323      	orrs	r3, r4
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	bf0c      	ite	eq
 8004b5a:	2301      	moveq	r3, #1
 8004b5c:	2300      	movne	r3, #0
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	e008      	b.n	8004b74 <HAL_ADC_ConfigChannel+0x8e8>
 8004b62:	4859      	ldr	r0, [pc, #356]	; (8004cc8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004b64:	f7ff f950 	bl	8003e08 <LL_ADC_IsEnabled>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	bf0c      	ite	eq
 8004b6e:	2301      	moveq	r3, #1
 8004b70:	2300      	movne	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 8084 	beq.w	8004c82 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a53      	ldr	r2, [pc, #332]	; (8004ccc <HAL_ADC_ConfigChannel+0xa40>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d132      	bne.n	8004bea <HAL_ADC_ConfigChannel+0x95e>
 8004b84:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d12c      	bne.n	8004bea <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a4c      	ldr	r2, [pc, #304]	; (8004cc8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	f040 8086 	bne.w	8004ca8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a47      	ldr	r2, [pc, #284]	; (8004cc0 <HAL_ADC_ConfigChannel+0xa34>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d004      	beq.n	8004bb0 <HAL_ADC_ConfigChannel+0x924>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a46      	ldr	r2, [pc, #280]	; (8004cc4 <HAL_ADC_ConfigChannel+0xa38>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d101      	bne.n	8004bb4 <HAL_ADC_ConfigChannel+0x928>
 8004bb0:	4a47      	ldr	r2, [pc, #284]	; (8004cd0 <HAL_ADC_ConfigChannel+0xa44>)
 8004bb2:	e000      	b.n	8004bb6 <HAL_ADC_ConfigChannel+0x92a>
 8004bb4:	4a41      	ldr	r2, [pc, #260]	; (8004cbc <HAL_ADC_ConfigChannel+0xa30>)
 8004bb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	4610      	mov	r0, r2
 8004bc2:	f7fe ff28 	bl	8003a16 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004bc6:	4b43      	ldr	r3, [pc, #268]	; (8004cd4 <HAL_ADC_ConfigChannel+0xa48>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	099b      	lsrs	r3, r3, #6
 8004bcc:	4a42      	ldr	r2, [pc, #264]	; (8004cd8 <HAL_ADC_ConfigChannel+0xa4c>)
 8004bce:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd2:	099b      	lsrs	r3, r3, #6
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004bda:	e002      	b.n	8004be2 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1f9      	bne.n	8004bdc <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004be8:	e05e      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a3b      	ldr	r2, [pc, #236]	; (8004cdc <HAL_ADC_ConfigChannel+0xa50>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d120      	bne.n	8004c36 <HAL_ADC_ConfigChannel+0x9aa>
 8004bf4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004bf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d11a      	bne.n	8004c36 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a30      	ldr	r2, [pc, #192]	; (8004cc8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d14e      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a2c      	ldr	r2, [pc, #176]	; (8004cc0 <HAL_ADC_ConfigChannel+0xa34>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d004      	beq.n	8004c1e <HAL_ADC_ConfigChannel+0x992>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a2a      	ldr	r2, [pc, #168]	; (8004cc4 <HAL_ADC_ConfigChannel+0xa38>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d101      	bne.n	8004c22 <HAL_ADC_ConfigChannel+0x996>
 8004c1e:	4a2c      	ldr	r2, [pc, #176]	; (8004cd0 <HAL_ADC_ConfigChannel+0xa44>)
 8004c20:	e000      	b.n	8004c24 <HAL_ADC_ConfigChannel+0x998>
 8004c22:	4a26      	ldr	r2, [pc, #152]	; (8004cbc <HAL_ADC_ConfigChannel+0xa30>)
 8004c24:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	4610      	mov	r0, r2
 8004c30:	f7fe fef1 	bl	8003a16 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c34:	e038      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a29      	ldr	r2, [pc, #164]	; (8004ce0 <HAL_ADC_ConfigChannel+0xa54>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d133      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0xa1c>
 8004c40:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d12d      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a1d      	ldr	r2, [pc, #116]	; (8004cc8 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d128      	bne.n	8004ca8 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a19      	ldr	r2, [pc, #100]	; (8004cc0 <HAL_ADC_ConfigChannel+0xa34>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d004      	beq.n	8004c6a <HAL_ADC_ConfigChannel+0x9de>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a17      	ldr	r2, [pc, #92]	; (8004cc4 <HAL_ADC_ConfigChannel+0xa38>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d101      	bne.n	8004c6e <HAL_ADC_ConfigChannel+0x9e2>
 8004c6a:	4a19      	ldr	r2, [pc, #100]	; (8004cd0 <HAL_ADC_ConfigChannel+0xa44>)
 8004c6c:	e000      	b.n	8004c70 <HAL_ADC_ConfigChannel+0x9e4>
 8004c6e:	4a13      	ldr	r2, [pc, #76]	; (8004cbc <HAL_ADC_ConfigChannel+0xa30>)
 8004c70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c74:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c78:	4619      	mov	r1, r3
 8004c7a:	4610      	mov	r0, r2
 8004c7c:	f7fe fecb 	bl	8003a16 <LL_ADC_SetCommonPathInternalCh>
 8004c80:	e012      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c86:	f043 0220 	orr.w	r2, r3, #32
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004c94:	e008      	b.n	8004ca8 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c9a:	f043 0220 	orr.w	r2, r3, #32
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004cb0:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	37e4      	adds	r7, #228	; 0xe4
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd90      	pop	{r4, r7, pc}
 8004cbc:	58026300 	.word	0x58026300
 8004cc0:	40022000 	.word	0x40022000
 8004cc4:	40022100 	.word	0x40022100
 8004cc8:	58026000 	.word	0x58026000
 8004ccc:	c7520000 	.word	0xc7520000
 8004cd0:	40022300 	.word	0x40022300
 8004cd4:	24000000 	.word	0x24000000
 8004cd8:	053e2d63 	.word	0x053e2d63
 8004cdc:	c3210000 	.word	0xc3210000
 8004ce0:	cb840000 	.word	0xcb840000

08004ce4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a6c      	ldr	r2, [pc, #432]	; (8004ea4 <ADC_ConfigureBoostMode+0x1c0>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d004      	beq.n	8004d00 <ADC_ConfigureBoostMode+0x1c>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a6b      	ldr	r2, [pc, #428]	; (8004ea8 <ADC_ConfigureBoostMode+0x1c4>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d109      	bne.n	8004d14 <ADC_ConfigureBoostMode+0x30>
 8004d00:	4b6a      	ldr	r3, [pc, #424]	; (8004eac <ADC_ConfigureBoostMode+0x1c8>)
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	bf14      	ite	ne
 8004d0c:	2301      	movne	r3, #1
 8004d0e:	2300      	moveq	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	e008      	b.n	8004d26 <ADC_ConfigureBoostMode+0x42>
 8004d14:	4b66      	ldr	r3, [pc, #408]	; (8004eb0 <ADC_ConfigureBoostMode+0x1cc>)
 8004d16:	689b      	ldr	r3, [r3, #8]
 8004d18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	bf14      	ite	ne
 8004d20:	2301      	movne	r3, #1
 8004d22:	2300      	moveq	r3, #0
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d01c      	beq.n	8004d64 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004d2a:	f005 f87d 	bl	8009e28 <HAL_RCC_GetHCLKFreq>
 8004d2e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d38:	d010      	beq.n	8004d5c <ADC_ConfigureBoostMode+0x78>
 8004d3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d3e:	d873      	bhi.n	8004e28 <ADC_ConfigureBoostMode+0x144>
 8004d40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d44:	d002      	beq.n	8004d4c <ADC_ConfigureBoostMode+0x68>
 8004d46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004d4a:	d16d      	bne.n	8004e28 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	0c1b      	lsrs	r3, r3, #16
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d58:	60fb      	str	r3, [r7, #12]
        break;
 8004d5a:	e068      	b.n	8004e2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	089b      	lsrs	r3, r3, #2
 8004d60:	60fb      	str	r3, [r7, #12]
        break;
 8004d62:	e064      	b.n	8004e2e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004d64:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004d68:	f04f 0100 	mov.w	r1, #0
 8004d6c:	f006 fa58 	bl	800b220 <HAL_RCCEx_GetPeriphCLKFreq>
 8004d70:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004d7a:	d051      	beq.n	8004e20 <ADC_ConfigureBoostMode+0x13c>
 8004d7c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004d80:	d854      	bhi.n	8004e2c <ADC_ConfigureBoostMode+0x148>
 8004d82:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004d86:	d047      	beq.n	8004e18 <ADC_ConfigureBoostMode+0x134>
 8004d88:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004d8c:	d84e      	bhi.n	8004e2c <ADC_ConfigureBoostMode+0x148>
 8004d8e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004d92:	d03d      	beq.n	8004e10 <ADC_ConfigureBoostMode+0x12c>
 8004d94:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004d98:	d848      	bhi.n	8004e2c <ADC_ConfigureBoostMode+0x148>
 8004d9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d9e:	d033      	beq.n	8004e08 <ADC_ConfigureBoostMode+0x124>
 8004da0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004da4:	d842      	bhi.n	8004e2c <ADC_ConfigureBoostMode+0x148>
 8004da6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004daa:	d029      	beq.n	8004e00 <ADC_ConfigureBoostMode+0x11c>
 8004dac:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004db0:	d83c      	bhi.n	8004e2c <ADC_ConfigureBoostMode+0x148>
 8004db2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004db6:	d01a      	beq.n	8004dee <ADC_ConfigureBoostMode+0x10a>
 8004db8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004dbc:	d836      	bhi.n	8004e2c <ADC_ConfigureBoostMode+0x148>
 8004dbe:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004dc2:	d014      	beq.n	8004dee <ADC_ConfigureBoostMode+0x10a>
 8004dc4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004dc8:	d830      	bhi.n	8004e2c <ADC_ConfigureBoostMode+0x148>
 8004dca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dce:	d00e      	beq.n	8004dee <ADC_ConfigureBoostMode+0x10a>
 8004dd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004dd4:	d82a      	bhi.n	8004e2c <ADC_ConfigureBoostMode+0x148>
 8004dd6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004dda:	d008      	beq.n	8004dee <ADC_ConfigureBoostMode+0x10a>
 8004ddc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004de0:	d824      	bhi.n	8004e2c <ADC_ConfigureBoostMode+0x148>
 8004de2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004de6:	d002      	beq.n	8004dee <ADC_ConfigureBoostMode+0x10a>
 8004de8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004dec:	d11e      	bne.n	8004e2c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	0c9b      	lsrs	r3, r3, #18
 8004df4:	005b      	lsls	r3, r3, #1
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfc:	60fb      	str	r3, [r7, #12]
        break;
 8004dfe:	e016      	b.n	8004e2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	091b      	lsrs	r3, r3, #4
 8004e04:	60fb      	str	r3, [r7, #12]
        break;
 8004e06:	e012      	b.n	8004e2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	095b      	lsrs	r3, r3, #5
 8004e0c:	60fb      	str	r3, [r7, #12]
        break;
 8004e0e:	e00e      	b.n	8004e2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	099b      	lsrs	r3, r3, #6
 8004e14:	60fb      	str	r3, [r7, #12]
        break;
 8004e16:	e00a      	b.n	8004e2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	09db      	lsrs	r3, r3, #7
 8004e1c:	60fb      	str	r3, [r7, #12]
        break;
 8004e1e:	e006      	b.n	8004e2e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	0a1b      	lsrs	r3, r3, #8
 8004e24:	60fb      	str	r3, [r7, #12]
        break;
 8004e26:	e002      	b.n	8004e2e <ADC_ConfigureBoostMode+0x14a>
        break;
 8004e28:	bf00      	nop
 8004e2a:	e000      	b.n	8004e2e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004e2c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	085b      	lsrs	r3, r3, #1
 8004e32:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4a1f      	ldr	r2, [pc, #124]	; (8004eb4 <ADC_ConfigureBoostMode+0x1d0>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d808      	bhi.n	8004e4e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e4a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004e4c:	e025      	b.n	8004e9a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	4a19      	ldr	r2, [pc, #100]	; (8004eb8 <ADC_ConfigureBoostMode+0x1d4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d80a      	bhi.n	8004e6c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e68:	609a      	str	r2, [r3, #8]
}
 8004e6a:	e016      	b.n	8004e9a <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4a13      	ldr	r2, [pc, #76]	; (8004ebc <ADC_ConfigureBoostMode+0x1d8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d80a      	bhi.n	8004e8a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e86:	609a      	str	r2, [r3, #8]
}
 8004e88:	e007      	b.n	8004e9a <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004e98:	609a      	str	r2, [r3, #8]
}
 8004e9a:	bf00      	nop
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40022000 	.word	0x40022000
 8004ea8:	40022100 	.word	0x40022100
 8004eac:	40022300 	.word	0x40022300
 8004eb0:	58026300 	.word	0x58026300
 8004eb4:	005f5e10 	.word	0x005f5e10
 8004eb8:	00bebc20 	.word	0x00bebc20
 8004ebc:	017d7840 	.word	0x017d7840

08004ec0 <LL_ADC_IsEnabled>:
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d101      	bne.n	8004ed8 <LL_ADC_IsEnabled+0x18>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e000      	b.n	8004eda <LL_ADC_IsEnabled+0x1a>
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <LL_ADC_REG_IsConversionOngoing>:
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b083      	sub	sp, #12
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d101      	bne.n	8004efe <LL_ADC_REG_IsConversionOngoing+0x18>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e000      	b.n	8004f00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004f0c:	b590      	push	{r4, r7, lr}
 8004f0e:	b0a3      	sub	sp, #140	; 0x8c
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d101      	bne.n	8004f2a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004f26:	2302      	movs	r3, #2
 8004f28:	e0c1      	b.n	80050ae <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004f32:	2300      	movs	r3, #0
 8004f34:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004f36:	2300      	movs	r3, #0
 8004f38:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a5e      	ldr	r2, [pc, #376]	; (80050b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d102      	bne.n	8004f4a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004f44:	4b5d      	ldr	r3, [pc, #372]	; (80050bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	e001      	b.n	8004f4e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10b      	bne.n	8004f6c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f58:	f043 0220 	orr.w	r2, r3, #32
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0a0      	b.n	80050ae <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7ff ffb9 	bl	8004ee6 <LL_ADC_REG_IsConversionOngoing>
 8004f74:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff ffb2 	bl	8004ee6 <LL_ADC_REG_IsConversionOngoing>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f040 8081 	bne.w	800508c <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004f8a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d17c      	bne.n	800508c <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a48      	ldr	r2, [pc, #288]	; (80050b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d004      	beq.n	8004fa6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a46      	ldr	r2, [pc, #280]	; (80050bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d101      	bne.n	8004faa <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8004fa6:	4b46      	ldr	r3, [pc, #280]	; (80050c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8004fa8:	e000      	b.n	8004fac <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8004faa:	4b46      	ldr	r3, [pc, #280]	; (80050c4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8004fac:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d039      	beq.n	800502a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8004fb6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fc6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a3a      	ldr	r2, [pc, #232]	; (80050b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d004      	beq.n	8004fdc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a39      	ldr	r2, [pc, #228]	; (80050bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d10e      	bne.n	8004ffa <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8004fdc:	4836      	ldr	r0, [pc, #216]	; (80050b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004fde:	f7ff ff6f 	bl	8004ec0 <LL_ADC_IsEnabled>
 8004fe2:	4604      	mov	r4, r0
 8004fe4:	4835      	ldr	r0, [pc, #212]	; (80050bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004fe6:	f7ff ff6b 	bl	8004ec0 <LL_ADC_IsEnabled>
 8004fea:	4603      	mov	r3, r0
 8004fec:	4323      	orrs	r3, r4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	bf0c      	ite	eq
 8004ff2:	2301      	moveq	r3, #1
 8004ff4:	2300      	movne	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	e008      	b.n	800500c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8004ffa:	4833      	ldr	r0, [pc, #204]	; (80050c8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8004ffc:	f7ff ff60 	bl	8004ec0 <LL_ADC_IsEnabled>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	bf0c      	ite	eq
 8005006:	2301      	moveq	r3, #1
 8005008:	2300      	movne	r3, #0
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b00      	cmp	r3, #0
 800500e:	d047      	beq.n	80050a0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005010:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	4b2d      	ldr	r3, [pc, #180]	; (80050cc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005016:	4013      	ands	r3, r2
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	6811      	ldr	r1, [r2, #0]
 800501c:	683a      	ldr	r2, [r7, #0]
 800501e:	6892      	ldr	r2, [r2, #8]
 8005020:	430a      	orrs	r2, r1
 8005022:	431a      	orrs	r2, r3
 8005024:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005026:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005028:	e03a      	b.n	80050a0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800502a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005032:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005034:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1f      	ldr	r2, [pc, #124]	; (80050b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d004      	beq.n	800504a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1d      	ldr	r2, [pc, #116]	; (80050bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d10e      	bne.n	8005068 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 800504a:	481b      	ldr	r0, [pc, #108]	; (80050b8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800504c:	f7ff ff38 	bl	8004ec0 <LL_ADC_IsEnabled>
 8005050:	4604      	mov	r4, r0
 8005052:	481a      	ldr	r0, [pc, #104]	; (80050bc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005054:	f7ff ff34 	bl	8004ec0 <LL_ADC_IsEnabled>
 8005058:	4603      	mov	r3, r0
 800505a:	4323      	orrs	r3, r4
 800505c:	2b00      	cmp	r3, #0
 800505e:	bf0c      	ite	eq
 8005060:	2301      	moveq	r3, #1
 8005062:	2300      	movne	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	e008      	b.n	800507a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005068:	4817      	ldr	r0, [pc, #92]	; (80050c8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 800506a:	f7ff ff29 	bl	8004ec0 <LL_ADC_IsEnabled>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	bf0c      	ite	eq
 8005074:	2301      	moveq	r3, #1
 8005076:	2300      	movne	r3, #0
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d010      	beq.n	80050a0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800507e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	4b12      	ldr	r3, [pc, #72]	; (80050cc <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005084:	4013      	ands	r3, r2
 8005086:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005088:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800508a:	e009      	b.n	80050a0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005090:	f043 0220 	orr.w	r2, r3, #32
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800509e:	e000      	b.n	80050a2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050a0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80050aa:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	378c      	adds	r7, #140	; 0x8c
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd90      	pop	{r4, r7, pc}
 80050b6:	bf00      	nop
 80050b8:	40022000 	.word	0x40022000
 80050bc:	40022100 	.word	0x40022100
 80050c0:	40022300 	.word	0x40022300
 80050c4:	58026300 	.word	0x58026300
 80050c8:	58026000 	.word	0x58026000
 80050cc:	fffff0e0 	.word	0xfffff0e0

080050d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80050e0:	4b0b      	ldr	r3, [pc, #44]	; (8005110 <__NVIC_SetPriorityGrouping+0x40>)
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80050e6:	68ba      	ldr	r2, [r7, #8]
 80050e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80050ec:	4013      	ands	r3, r2
 80050ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80050f8:	4b06      	ldr	r3, [pc, #24]	; (8005114 <__NVIC_SetPriorityGrouping+0x44>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80050fe:	4a04      	ldr	r2, [pc, #16]	; (8005110 <__NVIC_SetPriorityGrouping+0x40>)
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	60d3      	str	r3, [r2, #12]
}
 8005104:	bf00      	nop
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr
 8005110:	e000ed00 	.word	0xe000ed00
 8005114:	05fa0000 	.word	0x05fa0000

08005118 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800511c:	4b04      	ldr	r3, [pc, #16]	; (8005130 <__NVIC_GetPriorityGrouping+0x18>)
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	0a1b      	lsrs	r3, r3, #8
 8005122:	f003 0307 	and.w	r3, r3, #7
}
 8005126:	4618      	mov	r0, r3
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	e000ed00 	.word	0xe000ed00

08005134 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	4603      	mov	r3, r0
 800513c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800513e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005142:	2b00      	cmp	r3, #0
 8005144:	db0b      	blt.n	800515e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005146:	88fb      	ldrh	r3, [r7, #6]
 8005148:	f003 021f 	and.w	r2, r3, #31
 800514c:	4907      	ldr	r1, [pc, #28]	; (800516c <__NVIC_EnableIRQ+0x38>)
 800514e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005152:	095b      	lsrs	r3, r3, #5
 8005154:	2001      	movs	r0, #1
 8005156:	fa00 f202 	lsl.w	r2, r0, r2
 800515a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	e000e100 	.word	0xe000e100

08005170 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	4603      	mov	r3, r0
 8005178:	6039      	str	r1, [r7, #0]
 800517a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800517c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005180:	2b00      	cmp	r3, #0
 8005182:	db0a      	blt.n	800519a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	b2da      	uxtb	r2, r3
 8005188:	490c      	ldr	r1, [pc, #48]	; (80051bc <__NVIC_SetPriority+0x4c>)
 800518a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800518e:	0112      	lsls	r2, r2, #4
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	440b      	add	r3, r1
 8005194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005198:	e00a      	b.n	80051b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	b2da      	uxtb	r2, r3
 800519e:	4908      	ldr	r1, [pc, #32]	; (80051c0 <__NVIC_SetPriority+0x50>)
 80051a0:	88fb      	ldrh	r3, [r7, #6]
 80051a2:	f003 030f 	and.w	r3, r3, #15
 80051a6:	3b04      	subs	r3, #4
 80051a8:	0112      	lsls	r2, r2, #4
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	440b      	add	r3, r1
 80051ae:	761a      	strb	r2, [r3, #24]
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	e000e100 	.word	0xe000e100
 80051c0:	e000ed00 	.word	0xe000ed00

080051c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b089      	sub	sp, #36	; 0x24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	f1c3 0307 	rsb	r3, r3, #7
 80051de:	2b04      	cmp	r3, #4
 80051e0:	bf28      	it	cs
 80051e2:	2304      	movcs	r3, #4
 80051e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	3304      	adds	r3, #4
 80051ea:	2b06      	cmp	r3, #6
 80051ec:	d902      	bls.n	80051f4 <NVIC_EncodePriority+0x30>
 80051ee:	69fb      	ldr	r3, [r7, #28]
 80051f0:	3b03      	subs	r3, #3
 80051f2:	e000      	b.n	80051f6 <NVIC_EncodePriority+0x32>
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80051f8:	f04f 32ff 	mov.w	r2, #4294967295
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005202:	43da      	mvns	r2, r3
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	401a      	ands	r2, r3
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800520c:	f04f 31ff 	mov.w	r1, #4294967295
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	fa01 f303 	lsl.w	r3, r1, r3
 8005216:	43d9      	mvns	r1, r3
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800521c:	4313      	orrs	r3, r2
         );
}
 800521e:	4618      	mov	r0, r3
 8005220:	3724      	adds	r7, #36	; 0x24
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
	...

0800522c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3b01      	subs	r3, #1
 8005238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800523c:	d301      	bcc.n	8005242 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800523e:	2301      	movs	r3, #1
 8005240:	e00f      	b.n	8005262 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005242:	4a0a      	ldr	r2, [pc, #40]	; (800526c <SysTick_Config+0x40>)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	3b01      	subs	r3, #1
 8005248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800524a:	210f      	movs	r1, #15
 800524c:	f04f 30ff 	mov.w	r0, #4294967295
 8005250:	f7ff ff8e 	bl	8005170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005254:	4b05      	ldr	r3, [pc, #20]	; (800526c <SysTick_Config+0x40>)
 8005256:	2200      	movs	r2, #0
 8005258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800525a:	4b04      	ldr	r3, [pc, #16]	; (800526c <SysTick_Config+0x40>)
 800525c:	2207      	movs	r2, #7
 800525e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3708      	adds	r7, #8
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	e000e010 	.word	0xe000e010

08005270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f7ff ff29 	bl	80050d0 <__NVIC_SetPriorityGrouping>
}
 800527e:	bf00      	nop
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b086      	sub	sp, #24
 800528a:	af00      	add	r7, sp, #0
 800528c:	4603      	mov	r3, r0
 800528e:	60b9      	str	r1, [r7, #8]
 8005290:	607a      	str	r2, [r7, #4]
 8005292:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005294:	f7ff ff40 	bl	8005118 <__NVIC_GetPriorityGrouping>
 8005298:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	68b9      	ldr	r1, [r7, #8]
 800529e:	6978      	ldr	r0, [r7, #20]
 80052a0:	f7ff ff90 	bl	80051c4 <NVIC_EncodePriority>
 80052a4:	4602      	mov	r2, r0
 80052a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80052aa:	4611      	mov	r1, r2
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7ff ff5f 	bl	8005170 <__NVIC_SetPriority>
}
 80052b2:	bf00      	nop
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b082      	sub	sp, #8
 80052be:	af00      	add	r7, sp, #0
 80052c0:	4603      	mov	r3, r0
 80052c2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7ff ff33 	bl	8005134 <__NVIC_EnableIRQ>
}
 80052ce:	bf00      	nop
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}

080052d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052d6:	b580      	push	{r7, lr}
 80052d8:	b082      	sub	sp, #8
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff ffa4 	bl	800522c <SysTick_Config>
 80052e4:	4603      	mov	r3, r0
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80052f8:	f7fe fb34 	bl	8003964 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d101      	bne.n	8005308 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e314      	b.n	8005932 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a66      	ldr	r2, [pc, #408]	; (80054a8 <HAL_DMA_Init+0x1b8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d04a      	beq.n	80053a8 <HAL_DMA_Init+0xb8>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a65      	ldr	r2, [pc, #404]	; (80054ac <HAL_DMA_Init+0x1bc>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d045      	beq.n	80053a8 <HAL_DMA_Init+0xb8>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a63      	ldr	r2, [pc, #396]	; (80054b0 <HAL_DMA_Init+0x1c0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d040      	beq.n	80053a8 <HAL_DMA_Init+0xb8>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a62      	ldr	r2, [pc, #392]	; (80054b4 <HAL_DMA_Init+0x1c4>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d03b      	beq.n	80053a8 <HAL_DMA_Init+0xb8>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a60      	ldr	r2, [pc, #384]	; (80054b8 <HAL_DMA_Init+0x1c8>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d036      	beq.n	80053a8 <HAL_DMA_Init+0xb8>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a5f      	ldr	r2, [pc, #380]	; (80054bc <HAL_DMA_Init+0x1cc>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d031      	beq.n	80053a8 <HAL_DMA_Init+0xb8>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a5d      	ldr	r2, [pc, #372]	; (80054c0 <HAL_DMA_Init+0x1d0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d02c      	beq.n	80053a8 <HAL_DMA_Init+0xb8>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a5c      	ldr	r2, [pc, #368]	; (80054c4 <HAL_DMA_Init+0x1d4>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d027      	beq.n	80053a8 <HAL_DMA_Init+0xb8>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a5a      	ldr	r2, [pc, #360]	; (80054c8 <HAL_DMA_Init+0x1d8>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d022      	beq.n	80053a8 <HAL_DMA_Init+0xb8>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a59      	ldr	r2, [pc, #356]	; (80054cc <HAL_DMA_Init+0x1dc>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d01d      	beq.n	80053a8 <HAL_DMA_Init+0xb8>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a57      	ldr	r2, [pc, #348]	; (80054d0 <HAL_DMA_Init+0x1e0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d018      	beq.n	80053a8 <HAL_DMA_Init+0xb8>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a56      	ldr	r2, [pc, #344]	; (80054d4 <HAL_DMA_Init+0x1e4>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d013      	beq.n	80053a8 <HAL_DMA_Init+0xb8>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a54      	ldr	r2, [pc, #336]	; (80054d8 <HAL_DMA_Init+0x1e8>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00e      	beq.n	80053a8 <HAL_DMA_Init+0xb8>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a53      	ldr	r2, [pc, #332]	; (80054dc <HAL_DMA_Init+0x1ec>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d009      	beq.n	80053a8 <HAL_DMA_Init+0xb8>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a51      	ldr	r2, [pc, #324]	; (80054e0 <HAL_DMA_Init+0x1f0>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d004      	beq.n	80053a8 <HAL_DMA_Init+0xb8>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a50      	ldr	r2, [pc, #320]	; (80054e4 <HAL_DMA_Init+0x1f4>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d101      	bne.n	80053ac <HAL_DMA_Init+0xbc>
 80053a8:	2301      	movs	r3, #1
 80053aa:	e000      	b.n	80053ae <HAL_DMA_Init+0xbe>
 80053ac:	2300      	movs	r3, #0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f000 813c 	beq.w	800562c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2202      	movs	r2, #2
 80053b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a37      	ldr	r2, [pc, #220]	; (80054a8 <HAL_DMA_Init+0x1b8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d04a      	beq.n	8005464 <HAL_DMA_Init+0x174>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a36      	ldr	r2, [pc, #216]	; (80054ac <HAL_DMA_Init+0x1bc>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d045      	beq.n	8005464 <HAL_DMA_Init+0x174>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a34      	ldr	r2, [pc, #208]	; (80054b0 <HAL_DMA_Init+0x1c0>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d040      	beq.n	8005464 <HAL_DMA_Init+0x174>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a33      	ldr	r2, [pc, #204]	; (80054b4 <HAL_DMA_Init+0x1c4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d03b      	beq.n	8005464 <HAL_DMA_Init+0x174>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a31      	ldr	r2, [pc, #196]	; (80054b8 <HAL_DMA_Init+0x1c8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d036      	beq.n	8005464 <HAL_DMA_Init+0x174>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a30      	ldr	r2, [pc, #192]	; (80054bc <HAL_DMA_Init+0x1cc>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d031      	beq.n	8005464 <HAL_DMA_Init+0x174>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a2e      	ldr	r2, [pc, #184]	; (80054c0 <HAL_DMA_Init+0x1d0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d02c      	beq.n	8005464 <HAL_DMA_Init+0x174>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a2d      	ldr	r2, [pc, #180]	; (80054c4 <HAL_DMA_Init+0x1d4>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d027      	beq.n	8005464 <HAL_DMA_Init+0x174>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a2b      	ldr	r2, [pc, #172]	; (80054c8 <HAL_DMA_Init+0x1d8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d022      	beq.n	8005464 <HAL_DMA_Init+0x174>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a2a      	ldr	r2, [pc, #168]	; (80054cc <HAL_DMA_Init+0x1dc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d01d      	beq.n	8005464 <HAL_DMA_Init+0x174>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a28      	ldr	r2, [pc, #160]	; (80054d0 <HAL_DMA_Init+0x1e0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d018      	beq.n	8005464 <HAL_DMA_Init+0x174>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a27      	ldr	r2, [pc, #156]	; (80054d4 <HAL_DMA_Init+0x1e4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d013      	beq.n	8005464 <HAL_DMA_Init+0x174>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a25      	ldr	r2, [pc, #148]	; (80054d8 <HAL_DMA_Init+0x1e8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d00e      	beq.n	8005464 <HAL_DMA_Init+0x174>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a24      	ldr	r2, [pc, #144]	; (80054dc <HAL_DMA_Init+0x1ec>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d009      	beq.n	8005464 <HAL_DMA_Init+0x174>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a22      	ldr	r2, [pc, #136]	; (80054e0 <HAL_DMA_Init+0x1f0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d004      	beq.n	8005464 <HAL_DMA_Init+0x174>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a21      	ldr	r2, [pc, #132]	; (80054e4 <HAL_DMA_Init+0x1f4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d108      	bne.n	8005476 <HAL_DMA_Init+0x186>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0201 	bic.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]
 8005474:	e007      	b.n	8005486 <HAL_DMA_Init+0x196>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0201 	bic.w	r2, r2, #1
 8005484:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005486:	e02f      	b.n	80054e8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005488:	f7fe fa6c 	bl	8003964 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b05      	cmp	r3, #5
 8005494:	d928      	bls.n	80054e8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2220      	movs	r2, #32
 800549a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2203      	movs	r2, #3
 80054a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e244      	b.n	8005932 <HAL_DMA_Init+0x642>
 80054a8:	40020010 	.word	0x40020010
 80054ac:	40020028 	.word	0x40020028
 80054b0:	40020040 	.word	0x40020040
 80054b4:	40020058 	.word	0x40020058
 80054b8:	40020070 	.word	0x40020070
 80054bc:	40020088 	.word	0x40020088
 80054c0:	400200a0 	.word	0x400200a0
 80054c4:	400200b8 	.word	0x400200b8
 80054c8:	40020410 	.word	0x40020410
 80054cc:	40020428 	.word	0x40020428
 80054d0:	40020440 	.word	0x40020440
 80054d4:	40020458 	.word	0x40020458
 80054d8:	40020470 	.word	0x40020470
 80054dc:	40020488 	.word	0x40020488
 80054e0:	400204a0 	.word	0x400204a0
 80054e4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1c8      	bne.n	8005488 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	4b84      	ldr	r3, [pc, #528]	; (8005714 <HAL_DMA_Init+0x424>)
 8005502:	4013      	ands	r3, r2
 8005504:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800550e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800551a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005526:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	2b04      	cmp	r3, #4
 800553a:	d107      	bne.n	800554c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005544:	4313      	orrs	r3, r2
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	2b28      	cmp	r3, #40	; 0x28
 8005552:	d903      	bls.n	800555c <HAL_DMA_Init+0x26c>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b2e      	cmp	r3, #46	; 0x2e
 800555a:	d91f      	bls.n	800559c <HAL_DMA_Init+0x2ac>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b3e      	cmp	r3, #62	; 0x3e
 8005562:	d903      	bls.n	800556c <HAL_DMA_Init+0x27c>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b42      	cmp	r3, #66	; 0x42
 800556a:	d917      	bls.n	800559c <HAL_DMA_Init+0x2ac>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	2b46      	cmp	r3, #70	; 0x46
 8005572:	d903      	bls.n	800557c <HAL_DMA_Init+0x28c>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	2b48      	cmp	r3, #72	; 0x48
 800557a:	d90f      	bls.n	800559c <HAL_DMA_Init+0x2ac>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	2b4e      	cmp	r3, #78	; 0x4e
 8005582:	d903      	bls.n	800558c <HAL_DMA_Init+0x29c>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b52      	cmp	r3, #82	; 0x52
 800558a:	d907      	bls.n	800559c <HAL_DMA_Init+0x2ac>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	2b73      	cmp	r3, #115	; 0x73
 8005592:	d905      	bls.n	80055a0 <HAL_DMA_Init+0x2b0>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2b77      	cmp	r3, #119	; 0x77
 800559a:	d801      	bhi.n	80055a0 <HAL_DMA_Init+0x2b0>
 800559c:	2301      	movs	r3, #1
 800559e:	e000      	b.n	80055a2 <HAL_DMA_Init+0x2b2>
 80055a0:	2300      	movs	r3, #0
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d003      	beq.n	80055ae <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055ac:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695b      	ldr	r3, [r3, #20]
 80055bc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f023 0307 	bic.w	r3, r3, #7
 80055c4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	2b04      	cmp	r3, #4
 80055d6:	d117      	bne.n	8005608 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	4313      	orrs	r3, r2
 80055e0:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00e      	beq.n	8005608 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f001 f9b6 	bl	800695c <DMA_CheckFifoParam>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d008      	beq.n	8005608 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2240      	movs	r2, #64	; 0x40
 80055fa:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e194      	b.n	8005932 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005610:	6878      	ldr	r0, [r7, #4]
 8005612:	f001 f8f1 	bl	80067f8 <DMA_CalcBaseAndBitshift>
 8005616:	4603      	mov	r3, r0
 8005618:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800561e:	f003 031f 	and.w	r3, r3, #31
 8005622:	223f      	movs	r2, #63	; 0x3f
 8005624:	409a      	lsls	r2, r3
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	609a      	str	r2, [r3, #8]
 800562a:	e0ca      	b.n	80057c2 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a39      	ldr	r2, [pc, #228]	; (8005718 <HAL_DMA_Init+0x428>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d022      	beq.n	800567c <HAL_DMA_Init+0x38c>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a38      	ldr	r2, [pc, #224]	; (800571c <HAL_DMA_Init+0x42c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d01d      	beq.n	800567c <HAL_DMA_Init+0x38c>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a36      	ldr	r2, [pc, #216]	; (8005720 <HAL_DMA_Init+0x430>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d018      	beq.n	800567c <HAL_DMA_Init+0x38c>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a35      	ldr	r2, [pc, #212]	; (8005724 <HAL_DMA_Init+0x434>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d013      	beq.n	800567c <HAL_DMA_Init+0x38c>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a33      	ldr	r2, [pc, #204]	; (8005728 <HAL_DMA_Init+0x438>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00e      	beq.n	800567c <HAL_DMA_Init+0x38c>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a32      	ldr	r2, [pc, #200]	; (800572c <HAL_DMA_Init+0x43c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d009      	beq.n	800567c <HAL_DMA_Init+0x38c>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a30      	ldr	r2, [pc, #192]	; (8005730 <HAL_DMA_Init+0x440>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d004      	beq.n	800567c <HAL_DMA_Init+0x38c>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a2f      	ldr	r2, [pc, #188]	; (8005734 <HAL_DMA_Init+0x444>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d101      	bne.n	8005680 <HAL_DMA_Init+0x390>
 800567c:	2301      	movs	r3, #1
 800567e:	e000      	b.n	8005682 <HAL_DMA_Init+0x392>
 8005680:	2300      	movs	r3, #0
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 8094 	beq.w	80057b0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a22      	ldr	r2, [pc, #136]	; (8005718 <HAL_DMA_Init+0x428>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d021      	beq.n	80056d6 <HAL_DMA_Init+0x3e6>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a21      	ldr	r2, [pc, #132]	; (800571c <HAL_DMA_Init+0x42c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d01c      	beq.n	80056d6 <HAL_DMA_Init+0x3e6>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1f      	ldr	r2, [pc, #124]	; (8005720 <HAL_DMA_Init+0x430>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d017      	beq.n	80056d6 <HAL_DMA_Init+0x3e6>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1e      	ldr	r2, [pc, #120]	; (8005724 <HAL_DMA_Init+0x434>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d012      	beq.n	80056d6 <HAL_DMA_Init+0x3e6>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a1c      	ldr	r2, [pc, #112]	; (8005728 <HAL_DMA_Init+0x438>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00d      	beq.n	80056d6 <HAL_DMA_Init+0x3e6>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1b      	ldr	r2, [pc, #108]	; (800572c <HAL_DMA_Init+0x43c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d008      	beq.n	80056d6 <HAL_DMA_Init+0x3e6>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a19      	ldr	r2, [pc, #100]	; (8005730 <HAL_DMA_Init+0x440>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d003      	beq.n	80056d6 <HAL_DMA_Init+0x3e6>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a18      	ldr	r2, [pc, #96]	; (8005734 <HAL_DMA_Init+0x444>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4b11      	ldr	r3, [pc, #68]	; (8005738 <HAL_DMA_Init+0x448>)
 80056f4:	4013      	ands	r3, r2
 80056f6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	2b40      	cmp	r3, #64	; 0x40
 80056fe:	d01d      	beq.n	800573c <HAL_DMA_Init+0x44c>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	2b80      	cmp	r3, #128	; 0x80
 8005706:	d102      	bne.n	800570e <HAL_DMA_Init+0x41e>
 8005708:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800570c:	e017      	b.n	800573e <HAL_DMA_Init+0x44e>
 800570e:	2300      	movs	r3, #0
 8005710:	e015      	b.n	800573e <HAL_DMA_Init+0x44e>
 8005712:	bf00      	nop
 8005714:	fe10803f 	.word	0xfe10803f
 8005718:	58025408 	.word	0x58025408
 800571c:	5802541c 	.word	0x5802541c
 8005720:	58025430 	.word	0x58025430
 8005724:	58025444 	.word	0x58025444
 8005728:	58025458 	.word	0x58025458
 800572c:	5802546c 	.word	0x5802546c
 8005730:	58025480 	.word	0x58025480
 8005734:	58025494 	.word	0x58025494
 8005738:	fffe000f 	.word	0xfffe000f
 800573c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	68d2      	ldr	r2, [r2, #12]
 8005742:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005744:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800574c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005754:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800575c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005764:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800576c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	4b6e      	ldr	r3, [pc, #440]	; (800593c <HAL_DMA_Init+0x64c>)
 8005784:	4413      	add	r3, r2
 8005786:	4a6e      	ldr	r2, [pc, #440]	; (8005940 <HAL_DMA_Init+0x650>)
 8005788:	fba2 2303 	umull	r2, r3, r2, r3
 800578c:	091b      	lsrs	r3, r3, #4
 800578e:	009a      	lsls	r2, r3, #2
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f001 f82f 	bl	80067f8 <DMA_CalcBaseAndBitshift>
 800579a:	4603      	mov	r3, r0
 800579c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a2:	f003 031f 	and.w	r3, r3, #31
 80057a6:	2201      	movs	r2, #1
 80057a8:	409a      	lsls	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	605a      	str	r2, [r3, #4]
 80057ae:	e008      	b.n	80057c2 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2240      	movs	r2, #64	; 0x40
 80057b4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2203      	movs	r2, #3
 80057ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e0b7      	b.n	8005932 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a5f      	ldr	r2, [pc, #380]	; (8005944 <HAL_DMA_Init+0x654>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d072      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a5d      	ldr	r2, [pc, #372]	; (8005948 <HAL_DMA_Init+0x658>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d06d      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a5c      	ldr	r2, [pc, #368]	; (800594c <HAL_DMA_Init+0x65c>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d068      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a5a      	ldr	r2, [pc, #360]	; (8005950 <HAL_DMA_Init+0x660>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d063      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a59      	ldr	r2, [pc, #356]	; (8005954 <HAL_DMA_Init+0x664>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d05e      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a57      	ldr	r2, [pc, #348]	; (8005958 <HAL_DMA_Init+0x668>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d059      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a56      	ldr	r2, [pc, #344]	; (800595c <HAL_DMA_Init+0x66c>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d054      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a54      	ldr	r2, [pc, #336]	; (8005960 <HAL_DMA_Init+0x670>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d04f      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a53      	ldr	r2, [pc, #332]	; (8005964 <HAL_DMA_Init+0x674>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d04a      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a51      	ldr	r2, [pc, #324]	; (8005968 <HAL_DMA_Init+0x678>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d045      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a50      	ldr	r2, [pc, #320]	; (800596c <HAL_DMA_Init+0x67c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d040      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a4e      	ldr	r2, [pc, #312]	; (8005970 <HAL_DMA_Init+0x680>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d03b      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a4d      	ldr	r2, [pc, #308]	; (8005974 <HAL_DMA_Init+0x684>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d036      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a4b      	ldr	r2, [pc, #300]	; (8005978 <HAL_DMA_Init+0x688>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d031      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a4a      	ldr	r2, [pc, #296]	; (800597c <HAL_DMA_Init+0x68c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d02c      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a48      	ldr	r2, [pc, #288]	; (8005980 <HAL_DMA_Init+0x690>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d027      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a47      	ldr	r2, [pc, #284]	; (8005984 <HAL_DMA_Init+0x694>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d022      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a45      	ldr	r2, [pc, #276]	; (8005988 <HAL_DMA_Init+0x698>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d01d      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a44      	ldr	r2, [pc, #272]	; (800598c <HAL_DMA_Init+0x69c>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d018      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a42      	ldr	r2, [pc, #264]	; (8005990 <HAL_DMA_Init+0x6a0>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d013      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a41      	ldr	r2, [pc, #260]	; (8005994 <HAL_DMA_Init+0x6a4>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d00e      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a3f      	ldr	r2, [pc, #252]	; (8005998 <HAL_DMA_Init+0x6a8>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d009      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a3e      	ldr	r2, [pc, #248]	; (800599c <HAL_DMA_Init+0x6ac>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d004      	beq.n	80058b2 <HAL_DMA_Init+0x5c2>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a3c      	ldr	r2, [pc, #240]	; (80059a0 <HAL_DMA_Init+0x6b0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d101      	bne.n	80058b6 <HAL_DMA_Init+0x5c6>
 80058b2:	2301      	movs	r3, #1
 80058b4:	e000      	b.n	80058b8 <HAL_DMA_Init+0x5c8>
 80058b6:	2300      	movs	r3, #0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d032      	beq.n	8005922 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f001 f8c9 	bl	8006a54 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	2b80      	cmp	r3, #128	; 0x80
 80058c8:	d102      	bne.n	80058d0 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685a      	ldr	r2, [r3, #4]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80058e4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d010      	beq.n	8005910 <HAL_DMA_Init+0x620>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	2b08      	cmp	r3, #8
 80058f4:	d80c      	bhi.n	8005910 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f001 f946 	bl	8006b88 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005900:	2200      	movs	r2, #0
 8005902:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800590c:	605a      	str	r2, [r3, #4]
 800590e:	e008      	b.n	8005922 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3718      	adds	r7, #24
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	a7fdabf8 	.word	0xa7fdabf8
 8005940:	cccccccd 	.word	0xcccccccd
 8005944:	40020010 	.word	0x40020010
 8005948:	40020028 	.word	0x40020028
 800594c:	40020040 	.word	0x40020040
 8005950:	40020058 	.word	0x40020058
 8005954:	40020070 	.word	0x40020070
 8005958:	40020088 	.word	0x40020088
 800595c:	400200a0 	.word	0x400200a0
 8005960:	400200b8 	.word	0x400200b8
 8005964:	40020410 	.word	0x40020410
 8005968:	40020428 	.word	0x40020428
 800596c:	40020440 	.word	0x40020440
 8005970:	40020458 	.word	0x40020458
 8005974:	40020470 	.word	0x40020470
 8005978:	40020488 	.word	0x40020488
 800597c:	400204a0 	.word	0x400204a0
 8005980:	400204b8 	.word	0x400204b8
 8005984:	58025408 	.word	0x58025408
 8005988:	5802541c 	.word	0x5802541c
 800598c:	58025430 	.word	0x58025430
 8005990:	58025444 	.word	0x58025444
 8005994:	58025458 	.word	0x58025458
 8005998:	5802546c 	.word	0x5802546c
 800599c:	58025480 	.word	0x58025480
 80059a0:	58025494 	.word	0x58025494

080059a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08a      	sub	sp, #40	; 0x28
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80059ac:	2300      	movs	r3, #0
 80059ae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80059b0:	4b67      	ldr	r3, [pc, #412]	; (8005b50 <HAL_DMA_IRQHandler+0x1ac>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a67      	ldr	r2, [pc, #412]	; (8005b54 <HAL_DMA_IRQHandler+0x1b0>)
 80059b6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ba:	0a9b      	lsrs	r3, r3, #10
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059c8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80059ca:	6a3b      	ldr	r3, [r7, #32]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a5f      	ldr	r2, [pc, #380]	; (8005b58 <HAL_DMA_IRQHandler+0x1b4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d04a      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xd2>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a5d      	ldr	r2, [pc, #372]	; (8005b5c <HAL_DMA_IRQHandler+0x1b8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d045      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xd2>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a5c      	ldr	r2, [pc, #368]	; (8005b60 <HAL_DMA_IRQHandler+0x1bc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d040      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xd2>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a5a      	ldr	r2, [pc, #360]	; (8005b64 <HAL_DMA_IRQHandler+0x1c0>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d03b      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xd2>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a59      	ldr	r2, [pc, #356]	; (8005b68 <HAL_DMA_IRQHandler+0x1c4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d036      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xd2>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a57      	ldr	r2, [pc, #348]	; (8005b6c <HAL_DMA_IRQHandler+0x1c8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d031      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xd2>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a56      	ldr	r2, [pc, #344]	; (8005b70 <HAL_DMA_IRQHandler+0x1cc>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d02c      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xd2>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a54      	ldr	r2, [pc, #336]	; (8005b74 <HAL_DMA_IRQHandler+0x1d0>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d027      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xd2>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a53      	ldr	r2, [pc, #332]	; (8005b78 <HAL_DMA_IRQHandler+0x1d4>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d022      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xd2>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a51      	ldr	r2, [pc, #324]	; (8005b7c <HAL_DMA_IRQHandler+0x1d8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d01d      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xd2>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a50      	ldr	r2, [pc, #320]	; (8005b80 <HAL_DMA_IRQHandler+0x1dc>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d018      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xd2>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a4e      	ldr	r2, [pc, #312]	; (8005b84 <HAL_DMA_IRQHandler+0x1e0>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d013      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xd2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a4d      	ldr	r2, [pc, #308]	; (8005b88 <HAL_DMA_IRQHandler+0x1e4>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d00e      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xd2>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a4b      	ldr	r2, [pc, #300]	; (8005b8c <HAL_DMA_IRQHandler+0x1e8>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d009      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xd2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a4a      	ldr	r2, [pc, #296]	; (8005b90 <HAL_DMA_IRQHandler+0x1ec>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d004      	beq.n	8005a76 <HAL_DMA_IRQHandler+0xd2>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a48      	ldr	r2, [pc, #288]	; (8005b94 <HAL_DMA_IRQHandler+0x1f0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d101      	bne.n	8005a7a <HAL_DMA_IRQHandler+0xd6>
 8005a76:	2301      	movs	r3, #1
 8005a78:	e000      	b.n	8005a7c <HAL_DMA_IRQHandler+0xd8>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	f000 842b 	beq.w	80062d8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	2208      	movs	r2, #8
 8005a8c:	409a      	lsls	r2, r3
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	4013      	ands	r3, r2
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	f000 80a2 	beq.w	8005bdc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a2e      	ldr	r2, [pc, #184]	; (8005b58 <HAL_DMA_IRQHandler+0x1b4>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d04a      	beq.n	8005b38 <HAL_DMA_IRQHandler+0x194>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a2d      	ldr	r2, [pc, #180]	; (8005b5c <HAL_DMA_IRQHandler+0x1b8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d045      	beq.n	8005b38 <HAL_DMA_IRQHandler+0x194>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a2b      	ldr	r2, [pc, #172]	; (8005b60 <HAL_DMA_IRQHandler+0x1bc>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d040      	beq.n	8005b38 <HAL_DMA_IRQHandler+0x194>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a2a      	ldr	r2, [pc, #168]	; (8005b64 <HAL_DMA_IRQHandler+0x1c0>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d03b      	beq.n	8005b38 <HAL_DMA_IRQHandler+0x194>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a28      	ldr	r2, [pc, #160]	; (8005b68 <HAL_DMA_IRQHandler+0x1c4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d036      	beq.n	8005b38 <HAL_DMA_IRQHandler+0x194>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a27      	ldr	r2, [pc, #156]	; (8005b6c <HAL_DMA_IRQHandler+0x1c8>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d031      	beq.n	8005b38 <HAL_DMA_IRQHandler+0x194>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a25      	ldr	r2, [pc, #148]	; (8005b70 <HAL_DMA_IRQHandler+0x1cc>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d02c      	beq.n	8005b38 <HAL_DMA_IRQHandler+0x194>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a24      	ldr	r2, [pc, #144]	; (8005b74 <HAL_DMA_IRQHandler+0x1d0>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d027      	beq.n	8005b38 <HAL_DMA_IRQHandler+0x194>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a22      	ldr	r2, [pc, #136]	; (8005b78 <HAL_DMA_IRQHandler+0x1d4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d022      	beq.n	8005b38 <HAL_DMA_IRQHandler+0x194>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a21      	ldr	r2, [pc, #132]	; (8005b7c <HAL_DMA_IRQHandler+0x1d8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d01d      	beq.n	8005b38 <HAL_DMA_IRQHandler+0x194>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a1f      	ldr	r2, [pc, #124]	; (8005b80 <HAL_DMA_IRQHandler+0x1dc>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d018      	beq.n	8005b38 <HAL_DMA_IRQHandler+0x194>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a1e      	ldr	r2, [pc, #120]	; (8005b84 <HAL_DMA_IRQHandler+0x1e0>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d013      	beq.n	8005b38 <HAL_DMA_IRQHandler+0x194>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a1c      	ldr	r2, [pc, #112]	; (8005b88 <HAL_DMA_IRQHandler+0x1e4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d00e      	beq.n	8005b38 <HAL_DMA_IRQHandler+0x194>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a1b      	ldr	r2, [pc, #108]	; (8005b8c <HAL_DMA_IRQHandler+0x1e8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d009      	beq.n	8005b38 <HAL_DMA_IRQHandler+0x194>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a19      	ldr	r2, [pc, #100]	; (8005b90 <HAL_DMA_IRQHandler+0x1ec>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d004      	beq.n	8005b38 <HAL_DMA_IRQHandler+0x194>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a18      	ldr	r2, [pc, #96]	; (8005b94 <HAL_DMA_IRQHandler+0x1f0>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d12f      	bne.n	8005b98 <HAL_DMA_IRQHandler+0x1f4>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0304 	and.w	r3, r3, #4
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	bf14      	ite	ne
 8005b46:	2301      	movne	r3, #1
 8005b48:	2300      	moveq	r3, #0
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	e02e      	b.n	8005bac <HAL_DMA_IRQHandler+0x208>
 8005b4e:	bf00      	nop
 8005b50:	24000000 	.word	0x24000000
 8005b54:	1b4e81b5 	.word	0x1b4e81b5
 8005b58:	40020010 	.word	0x40020010
 8005b5c:	40020028 	.word	0x40020028
 8005b60:	40020040 	.word	0x40020040
 8005b64:	40020058 	.word	0x40020058
 8005b68:	40020070 	.word	0x40020070
 8005b6c:	40020088 	.word	0x40020088
 8005b70:	400200a0 	.word	0x400200a0
 8005b74:	400200b8 	.word	0x400200b8
 8005b78:	40020410 	.word	0x40020410
 8005b7c:	40020428 	.word	0x40020428
 8005b80:	40020440 	.word	0x40020440
 8005b84:	40020458 	.word	0x40020458
 8005b88:	40020470 	.word	0x40020470
 8005b8c:	40020488 	.word	0x40020488
 8005b90:	400204a0 	.word	0x400204a0
 8005b94:	400204b8 	.word	0x400204b8
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0308 	and.w	r3, r3, #8
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	bf14      	ite	ne
 8005ba6:	2301      	movne	r3, #1
 8005ba8:	2300      	moveq	r3, #0
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d015      	beq.n	8005bdc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0204 	bic.w	r2, r2, #4
 8005bbe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bc4:	f003 031f 	and.w	r3, r3, #31
 8005bc8:	2208      	movs	r2, #8
 8005bca:	409a      	lsls	r2, r3
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd4:	f043 0201 	orr.w	r2, r3, #1
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be0:	f003 031f 	and.w	r3, r3, #31
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d06e      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a69      	ldr	r2, [pc, #420]	; (8005d9c <HAL_DMA_IRQHandler+0x3f8>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d04a      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x2ee>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a67      	ldr	r2, [pc, #412]	; (8005da0 <HAL_DMA_IRQHandler+0x3fc>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d045      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x2ee>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a66      	ldr	r2, [pc, #408]	; (8005da4 <HAL_DMA_IRQHandler+0x400>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d040      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x2ee>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a64      	ldr	r2, [pc, #400]	; (8005da8 <HAL_DMA_IRQHandler+0x404>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d03b      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x2ee>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a63      	ldr	r2, [pc, #396]	; (8005dac <HAL_DMA_IRQHandler+0x408>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d036      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x2ee>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a61      	ldr	r2, [pc, #388]	; (8005db0 <HAL_DMA_IRQHandler+0x40c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d031      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x2ee>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a60      	ldr	r2, [pc, #384]	; (8005db4 <HAL_DMA_IRQHandler+0x410>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d02c      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x2ee>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a5e      	ldr	r2, [pc, #376]	; (8005db8 <HAL_DMA_IRQHandler+0x414>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d027      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x2ee>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a5d      	ldr	r2, [pc, #372]	; (8005dbc <HAL_DMA_IRQHandler+0x418>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d022      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x2ee>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a5b      	ldr	r2, [pc, #364]	; (8005dc0 <HAL_DMA_IRQHandler+0x41c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d01d      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x2ee>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a5a      	ldr	r2, [pc, #360]	; (8005dc4 <HAL_DMA_IRQHandler+0x420>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d018      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x2ee>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a58      	ldr	r2, [pc, #352]	; (8005dc8 <HAL_DMA_IRQHandler+0x424>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d013      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x2ee>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a57      	ldr	r2, [pc, #348]	; (8005dcc <HAL_DMA_IRQHandler+0x428>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d00e      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x2ee>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a55      	ldr	r2, [pc, #340]	; (8005dd0 <HAL_DMA_IRQHandler+0x42c>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d009      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x2ee>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a54      	ldr	r2, [pc, #336]	; (8005dd4 <HAL_DMA_IRQHandler+0x430>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d004      	beq.n	8005c92 <HAL_DMA_IRQHandler+0x2ee>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a52      	ldr	r2, [pc, #328]	; (8005dd8 <HAL_DMA_IRQHandler+0x434>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d10a      	bne.n	8005ca8 <HAL_DMA_IRQHandler+0x304>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	bf14      	ite	ne
 8005ca0:	2301      	movne	r3, #1
 8005ca2:	2300      	moveq	r3, #0
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	e003      	b.n	8005cb0 <HAL_DMA_IRQHandler+0x30c>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00d      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cb8:	f003 031f 	and.w	r3, r3, #31
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	409a      	lsls	r2, r3
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc8:	f043 0202 	orr.w	r2, r3, #2
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd4:	f003 031f 	and.w	r3, r3, #31
 8005cd8:	2204      	movs	r2, #4
 8005cda:	409a      	lsls	r2, r3
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 808f 	beq.w	8005e04 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a2c      	ldr	r2, [pc, #176]	; (8005d9c <HAL_DMA_IRQHandler+0x3f8>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d04a      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x3e2>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a2a      	ldr	r2, [pc, #168]	; (8005da0 <HAL_DMA_IRQHandler+0x3fc>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d045      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x3e2>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a29      	ldr	r2, [pc, #164]	; (8005da4 <HAL_DMA_IRQHandler+0x400>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d040      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x3e2>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a27      	ldr	r2, [pc, #156]	; (8005da8 <HAL_DMA_IRQHandler+0x404>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d03b      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x3e2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a26      	ldr	r2, [pc, #152]	; (8005dac <HAL_DMA_IRQHandler+0x408>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d036      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x3e2>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a24      	ldr	r2, [pc, #144]	; (8005db0 <HAL_DMA_IRQHandler+0x40c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d031      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x3e2>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a23      	ldr	r2, [pc, #140]	; (8005db4 <HAL_DMA_IRQHandler+0x410>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d02c      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x3e2>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a21      	ldr	r2, [pc, #132]	; (8005db8 <HAL_DMA_IRQHandler+0x414>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d027      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x3e2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a20      	ldr	r2, [pc, #128]	; (8005dbc <HAL_DMA_IRQHandler+0x418>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d022      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x3e2>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a1e      	ldr	r2, [pc, #120]	; (8005dc0 <HAL_DMA_IRQHandler+0x41c>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d01d      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x3e2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a1d      	ldr	r2, [pc, #116]	; (8005dc4 <HAL_DMA_IRQHandler+0x420>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d018      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x3e2>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a1b      	ldr	r2, [pc, #108]	; (8005dc8 <HAL_DMA_IRQHandler+0x424>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x3e2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a1a      	ldr	r2, [pc, #104]	; (8005dcc <HAL_DMA_IRQHandler+0x428>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00e      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x3e2>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a18      	ldr	r2, [pc, #96]	; (8005dd0 <HAL_DMA_IRQHandler+0x42c>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d009      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x3e2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a17      	ldr	r2, [pc, #92]	; (8005dd4 <HAL_DMA_IRQHandler+0x430>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d004      	beq.n	8005d86 <HAL_DMA_IRQHandler+0x3e2>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a15      	ldr	r2, [pc, #84]	; (8005dd8 <HAL_DMA_IRQHandler+0x434>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d12a      	bne.n	8005ddc <HAL_DMA_IRQHandler+0x438>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0302 	and.w	r3, r3, #2
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	bf14      	ite	ne
 8005d94:	2301      	movne	r3, #1
 8005d96:	2300      	moveq	r3, #0
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	e023      	b.n	8005de4 <HAL_DMA_IRQHandler+0x440>
 8005d9c:	40020010 	.word	0x40020010
 8005da0:	40020028 	.word	0x40020028
 8005da4:	40020040 	.word	0x40020040
 8005da8:	40020058 	.word	0x40020058
 8005dac:	40020070 	.word	0x40020070
 8005db0:	40020088 	.word	0x40020088
 8005db4:	400200a0 	.word	0x400200a0
 8005db8:	400200b8 	.word	0x400200b8
 8005dbc:	40020410 	.word	0x40020410
 8005dc0:	40020428 	.word	0x40020428
 8005dc4:	40020440 	.word	0x40020440
 8005dc8:	40020458 	.word	0x40020458
 8005dcc:	40020470 	.word	0x40020470
 8005dd0:	40020488 	.word	0x40020488
 8005dd4:	400204a0 	.word	0x400204a0
 8005dd8:	400204b8 	.word	0x400204b8
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2300      	movs	r3, #0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00d      	beq.n	8005e04 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dec:	f003 031f 	and.w	r3, r3, #31
 8005df0:	2204      	movs	r2, #4
 8005df2:	409a      	lsls	r2, r3
 8005df4:	6a3b      	ldr	r3, [r7, #32]
 8005df6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dfc:	f043 0204 	orr.w	r2, r3, #4
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e08:	f003 031f 	and.w	r3, r3, #31
 8005e0c:	2210      	movs	r2, #16
 8005e0e:	409a      	lsls	r2, r3
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	4013      	ands	r3, r2
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	f000 80a6 	beq.w	8005f66 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a85      	ldr	r2, [pc, #532]	; (8006034 <HAL_DMA_IRQHandler+0x690>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d04a      	beq.n	8005eba <HAL_DMA_IRQHandler+0x516>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a83      	ldr	r2, [pc, #524]	; (8006038 <HAL_DMA_IRQHandler+0x694>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d045      	beq.n	8005eba <HAL_DMA_IRQHandler+0x516>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a82      	ldr	r2, [pc, #520]	; (800603c <HAL_DMA_IRQHandler+0x698>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d040      	beq.n	8005eba <HAL_DMA_IRQHandler+0x516>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a80      	ldr	r2, [pc, #512]	; (8006040 <HAL_DMA_IRQHandler+0x69c>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d03b      	beq.n	8005eba <HAL_DMA_IRQHandler+0x516>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a7f      	ldr	r2, [pc, #508]	; (8006044 <HAL_DMA_IRQHandler+0x6a0>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d036      	beq.n	8005eba <HAL_DMA_IRQHandler+0x516>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a7d      	ldr	r2, [pc, #500]	; (8006048 <HAL_DMA_IRQHandler+0x6a4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d031      	beq.n	8005eba <HAL_DMA_IRQHandler+0x516>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a7c      	ldr	r2, [pc, #496]	; (800604c <HAL_DMA_IRQHandler+0x6a8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d02c      	beq.n	8005eba <HAL_DMA_IRQHandler+0x516>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a7a      	ldr	r2, [pc, #488]	; (8006050 <HAL_DMA_IRQHandler+0x6ac>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d027      	beq.n	8005eba <HAL_DMA_IRQHandler+0x516>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a79      	ldr	r2, [pc, #484]	; (8006054 <HAL_DMA_IRQHandler+0x6b0>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d022      	beq.n	8005eba <HAL_DMA_IRQHandler+0x516>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a77      	ldr	r2, [pc, #476]	; (8006058 <HAL_DMA_IRQHandler+0x6b4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d01d      	beq.n	8005eba <HAL_DMA_IRQHandler+0x516>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a76      	ldr	r2, [pc, #472]	; (800605c <HAL_DMA_IRQHandler+0x6b8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d018      	beq.n	8005eba <HAL_DMA_IRQHandler+0x516>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a74      	ldr	r2, [pc, #464]	; (8006060 <HAL_DMA_IRQHandler+0x6bc>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d013      	beq.n	8005eba <HAL_DMA_IRQHandler+0x516>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a73      	ldr	r2, [pc, #460]	; (8006064 <HAL_DMA_IRQHandler+0x6c0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00e      	beq.n	8005eba <HAL_DMA_IRQHandler+0x516>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a71      	ldr	r2, [pc, #452]	; (8006068 <HAL_DMA_IRQHandler+0x6c4>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d009      	beq.n	8005eba <HAL_DMA_IRQHandler+0x516>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a70      	ldr	r2, [pc, #448]	; (800606c <HAL_DMA_IRQHandler+0x6c8>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d004      	beq.n	8005eba <HAL_DMA_IRQHandler+0x516>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a6e      	ldr	r2, [pc, #440]	; (8006070 <HAL_DMA_IRQHandler+0x6cc>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d10a      	bne.n	8005ed0 <HAL_DMA_IRQHandler+0x52c>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0308 	and.w	r3, r3, #8
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	bf14      	ite	ne
 8005ec8:	2301      	movne	r3, #1
 8005eca:	2300      	moveq	r3, #0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	e009      	b.n	8005ee4 <HAL_DMA_IRQHandler+0x540>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0304 	and.w	r3, r3, #4
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	bf14      	ite	ne
 8005ede:	2301      	movne	r3, #1
 8005ee0:	2300      	moveq	r3, #0
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d03e      	beq.n	8005f66 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eec:	f003 031f 	and.w	r3, r3, #31
 8005ef0:	2210      	movs	r2, #16
 8005ef2:	409a      	lsls	r2, r3
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d018      	beq.n	8005f38 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d108      	bne.n	8005f26 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d024      	beq.n	8005f66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	4798      	blx	r3
 8005f24:	e01f      	b.n	8005f66 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d01b      	beq.n	8005f66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	4798      	blx	r3
 8005f36:	e016      	b.n	8005f66 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d107      	bne.n	8005f56 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0208 	bic.w	r2, r2, #8
 8005f54:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d003      	beq.n	8005f66 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f6a:	f003 031f 	and.w	r3, r3, #31
 8005f6e:	2220      	movs	r2, #32
 8005f70:	409a      	lsls	r2, r3
 8005f72:	69bb      	ldr	r3, [r7, #24]
 8005f74:	4013      	ands	r3, r2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	f000 8110 	beq.w	800619c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a2c      	ldr	r2, [pc, #176]	; (8006034 <HAL_DMA_IRQHandler+0x690>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d04a      	beq.n	800601c <HAL_DMA_IRQHandler+0x678>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a2b      	ldr	r2, [pc, #172]	; (8006038 <HAL_DMA_IRQHandler+0x694>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d045      	beq.n	800601c <HAL_DMA_IRQHandler+0x678>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a29      	ldr	r2, [pc, #164]	; (800603c <HAL_DMA_IRQHandler+0x698>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d040      	beq.n	800601c <HAL_DMA_IRQHandler+0x678>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a28      	ldr	r2, [pc, #160]	; (8006040 <HAL_DMA_IRQHandler+0x69c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d03b      	beq.n	800601c <HAL_DMA_IRQHandler+0x678>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a26      	ldr	r2, [pc, #152]	; (8006044 <HAL_DMA_IRQHandler+0x6a0>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d036      	beq.n	800601c <HAL_DMA_IRQHandler+0x678>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a25      	ldr	r2, [pc, #148]	; (8006048 <HAL_DMA_IRQHandler+0x6a4>)
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d031      	beq.n	800601c <HAL_DMA_IRQHandler+0x678>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a23      	ldr	r2, [pc, #140]	; (800604c <HAL_DMA_IRQHandler+0x6a8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d02c      	beq.n	800601c <HAL_DMA_IRQHandler+0x678>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a22      	ldr	r2, [pc, #136]	; (8006050 <HAL_DMA_IRQHandler+0x6ac>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d027      	beq.n	800601c <HAL_DMA_IRQHandler+0x678>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a20      	ldr	r2, [pc, #128]	; (8006054 <HAL_DMA_IRQHandler+0x6b0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d022      	beq.n	800601c <HAL_DMA_IRQHandler+0x678>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1f      	ldr	r2, [pc, #124]	; (8006058 <HAL_DMA_IRQHandler+0x6b4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d01d      	beq.n	800601c <HAL_DMA_IRQHandler+0x678>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1d      	ldr	r2, [pc, #116]	; (800605c <HAL_DMA_IRQHandler+0x6b8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d018      	beq.n	800601c <HAL_DMA_IRQHandler+0x678>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1c      	ldr	r2, [pc, #112]	; (8006060 <HAL_DMA_IRQHandler+0x6bc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d013      	beq.n	800601c <HAL_DMA_IRQHandler+0x678>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1a      	ldr	r2, [pc, #104]	; (8006064 <HAL_DMA_IRQHandler+0x6c0>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d00e      	beq.n	800601c <HAL_DMA_IRQHandler+0x678>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a19      	ldr	r2, [pc, #100]	; (8006068 <HAL_DMA_IRQHandler+0x6c4>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d009      	beq.n	800601c <HAL_DMA_IRQHandler+0x678>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a17      	ldr	r2, [pc, #92]	; (800606c <HAL_DMA_IRQHandler+0x6c8>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d004      	beq.n	800601c <HAL_DMA_IRQHandler+0x678>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a16      	ldr	r2, [pc, #88]	; (8006070 <HAL_DMA_IRQHandler+0x6cc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d12b      	bne.n	8006074 <HAL_DMA_IRQHandler+0x6d0>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 0310 	and.w	r3, r3, #16
 8006026:	2b00      	cmp	r3, #0
 8006028:	bf14      	ite	ne
 800602a:	2301      	movne	r3, #1
 800602c:	2300      	moveq	r3, #0
 800602e:	b2db      	uxtb	r3, r3
 8006030:	e02a      	b.n	8006088 <HAL_DMA_IRQHandler+0x6e4>
 8006032:	bf00      	nop
 8006034:	40020010 	.word	0x40020010
 8006038:	40020028 	.word	0x40020028
 800603c:	40020040 	.word	0x40020040
 8006040:	40020058 	.word	0x40020058
 8006044:	40020070 	.word	0x40020070
 8006048:	40020088 	.word	0x40020088
 800604c:	400200a0 	.word	0x400200a0
 8006050:	400200b8 	.word	0x400200b8
 8006054:	40020410 	.word	0x40020410
 8006058:	40020428 	.word	0x40020428
 800605c:	40020440 	.word	0x40020440
 8006060:	40020458 	.word	0x40020458
 8006064:	40020470 	.word	0x40020470
 8006068:	40020488 	.word	0x40020488
 800606c:	400204a0 	.word	0x400204a0
 8006070:	400204b8 	.word	0x400204b8
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	2b00      	cmp	r3, #0
 8006080:	bf14      	ite	ne
 8006082:	2301      	movne	r3, #1
 8006084:	2300      	moveq	r3, #0
 8006086:	b2db      	uxtb	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 8087 	beq.w	800619c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006092:	f003 031f 	and.w	r3, r3, #31
 8006096:	2220      	movs	r2, #32
 8006098:	409a      	lsls	r2, r3
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b04      	cmp	r3, #4
 80060a8:	d139      	bne.n	800611e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 0216 	bic.w	r2, r2, #22
 80060b8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695a      	ldr	r2, [r3, #20]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060c8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d103      	bne.n	80060da <HAL_DMA_IRQHandler+0x736>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d007      	beq.n	80060ea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 0208 	bic.w	r2, r2, #8
 80060e8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ee:	f003 031f 	and.w	r3, r3, #31
 80060f2:	223f      	movs	r2, #63	; 0x3f
 80060f4:	409a      	lsls	r2, r3
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800610e:	2b00      	cmp	r3, #0
 8006110:	f000 834a 	beq.w	80067a8 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	4798      	blx	r3
          }
          return;
 800611c:	e344      	b.n	80067a8 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d018      	beq.n	800615e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d108      	bne.n	800614c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800613e:	2b00      	cmp	r3, #0
 8006140:	d02c      	beq.n	800619c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	4798      	blx	r3
 800614a:	e027      	b.n	800619c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006150:	2b00      	cmp	r3, #0
 8006152:	d023      	beq.n	800619c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	4798      	blx	r3
 800615c:	e01e      	b.n	800619c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10f      	bne.n	800618c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0210 	bic.w	r2, r2, #16
 800617a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006190:	2b00      	cmp	r3, #0
 8006192:	d003      	beq.n	800619c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 8306 	beq.w	80067b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 8088 	beq.w	80062c4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2204      	movs	r2, #4
 80061b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a7a      	ldr	r2, [pc, #488]	; (80063ac <HAL_DMA_IRQHandler+0xa08>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d04a      	beq.n	800625c <HAL_DMA_IRQHandler+0x8b8>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a79      	ldr	r2, [pc, #484]	; (80063b0 <HAL_DMA_IRQHandler+0xa0c>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d045      	beq.n	800625c <HAL_DMA_IRQHandler+0x8b8>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4a77      	ldr	r2, [pc, #476]	; (80063b4 <HAL_DMA_IRQHandler+0xa10>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d040      	beq.n	800625c <HAL_DMA_IRQHandler+0x8b8>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a76      	ldr	r2, [pc, #472]	; (80063b8 <HAL_DMA_IRQHandler+0xa14>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d03b      	beq.n	800625c <HAL_DMA_IRQHandler+0x8b8>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	4a74      	ldr	r2, [pc, #464]	; (80063bc <HAL_DMA_IRQHandler+0xa18>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d036      	beq.n	800625c <HAL_DMA_IRQHandler+0x8b8>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a73      	ldr	r2, [pc, #460]	; (80063c0 <HAL_DMA_IRQHandler+0xa1c>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d031      	beq.n	800625c <HAL_DMA_IRQHandler+0x8b8>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	4a71      	ldr	r2, [pc, #452]	; (80063c4 <HAL_DMA_IRQHandler+0xa20>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d02c      	beq.n	800625c <HAL_DMA_IRQHandler+0x8b8>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a70      	ldr	r2, [pc, #448]	; (80063c8 <HAL_DMA_IRQHandler+0xa24>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d027      	beq.n	800625c <HAL_DMA_IRQHandler+0x8b8>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a6e      	ldr	r2, [pc, #440]	; (80063cc <HAL_DMA_IRQHandler+0xa28>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d022      	beq.n	800625c <HAL_DMA_IRQHandler+0x8b8>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a6d      	ldr	r2, [pc, #436]	; (80063d0 <HAL_DMA_IRQHandler+0xa2c>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d01d      	beq.n	800625c <HAL_DMA_IRQHandler+0x8b8>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a6b      	ldr	r2, [pc, #428]	; (80063d4 <HAL_DMA_IRQHandler+0xa30>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d018      	beq.n	800625c <HAL_DMA_IRQHandler+0x8b8>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a6a      	ldr	r2, [pc, #424]	; (80063d8 <HAL_DMA_IRQHandler+0xa34>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d013      	beq.n	800625c <HAL_DMA_IRQHandler+0x8b8>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a68      	ldr	r2, [pc, #416]	; (80063dc <HAL_DMA_IRQHandler+0xa38>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d00e      	beq.n	800625c <HAL_DMA_IRQHandler+0x8b8>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a67      	ldr	r2, [pc, #412]	; (80063e0 <HAL_DMA_IRQHandler+0xa3c>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d009      	beq.n	800625c <HAL_DMA_IRQHandler+0x8b8>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a65      	ldr	r2, [pc, #404]	; (80063e4 <HAL_DMA_IRQHandler+0xa40>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d004      	beq.n	800625c <HAL_DMA_IRQHandler+0x8b8>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a64      	ldr	r2, [pc, #400]	; (80063e8 <HAL_DMA_IRQHandler+0xa44>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d108      	bne.n	800626e <HAL_DMA_IRQHandler+0x8ca>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0201 	bic.w	r2, r2, #1
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	e007      	b.n	800627e <HAL_DMA_IRQHandler+0x8da>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0201 	bic.w	r2, r2, #1
 800627c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	3301      	adds	r3, #1
 8006282:	60fb      	str	r3, [r7, #12]
 8006284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006286:	429a      	cmp	r2, r3
 8006288:	d307      	bcc.n	800629a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0301 	and.w	r3, r3, #1
 8006294:	2b00      	cmp	r3, #0
 8006296:	d1f2      	bne.n	800627e <HAL_DMA_IRQHandler+0x8da>
 8006298:	e000      	b.n	800629c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800629a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d004      	beq.n	80062b4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2203      	movs	r2, #3
 80062ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80062b2:	e003      	b.n	80062bc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2201      	movs	r2, #1
 80062b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 8272 	beq.w	80067b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	4798      	blx	r3
 80062d6:	e26c      	b.n	80067b2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a43      	ldr	r2, [pc, #268]	; (80063ec <HAL_DMA_IRQHandler+0xa48>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d022      	beq.n	8006328 <HAL_DMA_IRQHandler+0x984>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a42      	ldr	r2, [pc, #264]	; (80063f0 <HAL_DMA_IRQHandler+0xa4c>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d01d      	beq.n	8006328 <HAL_DMA_IRQHandler+0x984>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a40      	ldr	r2, [pc, #256]	; (80063f4 <HAL_DMA_IRQHandler+0xa50>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d018      	beq.n	8006328 <HAL_DMA_IRQHandler+0x984>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a3f      	ldr	r2, [pc, #252]	; (80063f8 <HAL_DMA_IRQHandler+0xa54>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d013      	beq.n	8006328 <HAL_DMA_IRQHandler+0x984>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a3d      	ldr	r2, [pc, #244]	; (80063fc <HAL_DMA_IRQHandler+0xa58>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d00e      	beq.n	8006328 <HAL_DMA_IRQHandler+0x984>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a3c      	ldr	r2, [pc, #240]	; (8006400 <HAL_DMA_IRQHandler+0xa5c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d009      	beq.n	8006328 <HAL_DMA_IRQHandler+0x984>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a3a      	ldr	r2, [pc, #232]	; (8006404 <HAL_DMA_IRQHandler+0xa60>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d004      	beq.n	8006328 <HAL_DMA_IRQHandler+0x984>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a39      	ldr	r2, [pc, #228]	; (8006408 <HAL_DMA_IRQHandler+0xa64>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d101      	bne.n	800632c <HAL_DMA_IRQHandler+0x988>
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <HAL_DMA_IRQHandler+0x98a>
 800632c:	2300      	movs	r3, #0
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 823f 	beq.w	80067b2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006340:	f003 031f 	and.w	r3, r3, #31
 8006344:	2204      	movs	r2, #4
 8006346:	409a      	lsls	r2, r3
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	4013      	ands	r3, r2
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 80cd 	beq.w	80064ec <HAL_DMA_IRQHandler+0xb48>
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f003 0304 	and.w	r3, r3, #4
 8006358:	2b00      	cmp	r3, #0
 800635a:	f000 80c7 	beq.w	80064ec <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006362:	f003 031f 	and.w	r3, r3, #31
 8006366:	2204      	movs	r2, #4
 8006368:	409a      	lsls	r2, r3
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006374:	2b00      	cmp	r3, #0
 8006376:	d049      	beq.n	800640c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d109      	bne.n	8006396 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006386:	2b00      	cmp	r3, #0
 8006388:	f000 8210 	beq.w	80067ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006394:	e20a      	b.n	80067ac <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 8206 	beq.w	80067ac <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80063a8:	e200      	b.n	80067ac <HAL_DMA_IRQHandler+0xe08>
 80063aa:	bf00      	nop
 80063ac:	40020010 	.word	0x40020010
 80063b0:	40020028 	.word	0x40020028
 80063b4:	40020040 	.word	0x40020040
 80063b8:	40020058 	.word	0x40020058
 80063bc:	40020070 	.word	0x40020070
 80063c0:	40020088 	.word	0x40020088
 80063c4:	400200a0 	.word	0x400200a0
 80063c8:	400200b8 	.word	0x400200b8
 80063cc:	40020410 	.word	0x40020410
 80063d0:	40020428 	.word	0x40020428
 80063d4:	40020440 	.word	0x40020440
 80063d8:	40020458 	.word	0x40020458
 80063dc:	40020470 	.word	0x40020470
 80063e0:	40020488 	.word	0x40020488
 80063e4:	400204a0 	.word	0x400204a0
 80063e8:	400204b8 	.word	0x400204b8
 80063ec:	58025408 	.word	0x58025408
 80063f0:	5802541c 	.word	0x5802541c
 80063f4:	58025430 	.word	0x58025430
 80063f8:	58025444 	.word	0x58025444
 80063fc:	58025458 	.word	0x58025458
 8006400:	5802546c 	.word	0x5802546c
 8006404:	58025480 	.word	0x58025480
 8006408:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b00      	cmp	r3, #0
 8006414:	d160      	bne.n	80064d8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a7f      	ldr	r2, [pc, #508]	; (8006618 <HAL_DMA_IRQHandler+0xc74>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d04a      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xb12>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a7d      	ldr	r2, [pc, #500]	; (800661c <HAL_DMA_IRQHandler+0xc78>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d045      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xb12>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a7c      	ldr	r2, [pc, #496]	; (8006620 <HAL_DMA_IRQHandler+0xc7c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d040      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xb12>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a7a      	ldr	r2, [pc, #488]	; (8006624 <HAL_DMA_IRQHandler+0xc80>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d03b      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xb12>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a79      	ldr	r2, [pc, #484]	; (8006628 <HAL_DMA_IRQHandler+0xc84>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d036      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xb12>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a77      	ldr	r2, [pc, #476]	; (800662c <HAL_DMA_IRQHandler+0xc88>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d031      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xb12>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a76      	ldr	r2, [pc, #472]	; (8006630 <HAL_DMA_IRQHandler+0xc8c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d02c      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xb12>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a74      	ldr	r2, [pc, #464]	; (8006634 <HAL_DMA_IRQHandler+0xc90>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d027      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xb12>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a73      	ldr	r2, [pc, #460]	; (8006638 <HAL_DMA_IRQHandler+0xc94>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d022      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xb12>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a71      	ldr	r2, [pc, #452]	; (800663c <HAL_DMA_IRQHandler+0xc98>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d01d      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xb12>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a70      	ldr	r2, [pc, #448]	; (8006640 <HAL_DMA_IRQHandler+0xc9c>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d018      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xb12>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a6e      	ldr	r2, [pc, #440]	; (8006644 <HAL_DMA_IRQHandler+0xca0>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d013      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xb12>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a6d      	ldr	r2, [pc, #436]	; (8006648 <HAL_DMA_IRQHandler+0xca4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d00e      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xb12>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a6b      	ldr	r2, [pc, #428]	; (800664c <HAL_DMA_IRQHandler+0xca8>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d009      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xb12>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a6a      	ldr	r2, [pc, #424]	; (8006650 <HAL_DMA_IRQHandler+0xcac>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d004      	beq.n	80064b6 <HAL_DMA_IRQHandler+0xb12>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a68      	ldr	r2, [pc, #416]	; (8006654 <HAL_DMA_IRQHandler+0xcb0>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d108      	bne.n	80064c8 <HAL_DMA_IRQHandler+0xb24>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0208 	bic.w	r2, r2, #8
 80064c4:	601a      	str	r2, [r3, #0]
 80064c6:	e007      	b.n	80064d8 <HAL_DMA_IRQHandler+0xb34>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f022 0204 	bic.w	r2, r2, #4
 80064d6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 8165 	beq.w	80067ac <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80064ea:	e15f      	b.n	80067ac <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f0:	f003 031f 	and.w	r3, r3, #31
 80064f4:	2202      	movs	r2, #2
 80064f6:	409a      	lsls	r2, r3
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	4013      	ands	r3, r2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	f000 80c5 	beq.w	800668c <HAL_DMA_IRQHandler+0xce8>
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 80bf 	beq.w	800668c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006512:	f003 031f 	and.w	r3, r3, #31
 8006516:	2202      	movs	r2, #2
 8006518:	409a      	lsls	r2, r3
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006524:	2b00      	cmp	r3, #0
 8006526:	d018      	beq.n	800655a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800652e:	2b00      	cmp	r3, #0
 8006530:	d109      	bne.n	8006546 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006536:	2b00      	cmp	r3, #0
 8006538:	f000 813a 	beq.w	80067b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006544:	e134      	b.n	80067b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800654a:	2b00      	cmp	r3, #0
 800654c:	f000 8130 	beq.w	80067b0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006558:	e12a      	b.n	80067b0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f003 0320 	and.w	r3, r3, #32
 8006560:	2b00      	cmp	r3, #0
 8006562:	f040 8089 	bne.w	8006678 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a2b      	ldr	r2, [pc, #172]	; (8006618 <HAL_DMA_IRQHandler+0xc74>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d04a      	beq.n	8006606 <HAL_DMA_IRQHandler+0xc62>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a29      	ldr	r2, [pc, #164]	; (800661c <HAL_DMA_IRQHandler+0xc78>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d045      	beq.n	8006606 <HAL_DMA_IRQHandler+0xc62>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a28      	ldr	r2, [pc, #160]	; (8006620 <HAL_DMA_IRQHandler+0xc7c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d040      	beq.n	8006606 <HAL_DMA_IRQHandler+0xc62>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a26      	ldr	r2, [pc, #152]	; (8006624 <HAL_DMA_IRQHandler+0xc80>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d03b      	beq.n	8006606 <HAL_DMA_IRQHandler+0xc62>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a25      	ldr	r2, [pc, #148]	; (8006628 <HAL_DMA_IRQHandler+0xc84>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d036      	beq.n	8006606 <HAL_DMA_IRQHandler+0xc62>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a23      	ldr	r2, [pc, #140]	; (800662c <HAL_DMA_IRQHandler+0xc88>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d031      	beq.n	8006606 <HAL_DMA_IRQHandler+0xc62>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a22      	ldr	r2, [pc, #136]	; (8006630 <HAL_DMA_IRQHandler+0xc8c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d02c      	beq.n	8006606 <HAL_DMA_IRQHandler+0xc62>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a20      	ldr	r2, [pc, #128]	; (8006634 <HAL_DMA_IRQHandler+0xc90>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d027      	beq.n	8006606 <HAL_DMA_IRQHandler+0xc62>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a1f      	ldr	r2, [pc, #124]	; (8006638 <HAL_DMA_IRQHandler+0xc94>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d022      	beq.n	8006606 <HAL_DMA_IRQHandler+0xc62>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a1d      	ldr	r2, [pc, #116]	; (800663c <HAL_DMA_IRQHandler+0xc98>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d01d      	beq.n	8006606 <HAL_DMA_IRQHandler+0xc62>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a1c      	ldr	r2, [pc, #112]	; (8006640 <HAL_DMA_IRQHandler+0xc9c>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d018      	beq.n	8006606 <HAL_DMA_IRQHandler+0xc62>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a1a      	ldr	r2, [pc, #104]	; (8006644 <HAL_DMA_IRQHandler+0xca0>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d013      	beq.n	8006606 <HAL_DMA_IRQHandler+0xc62>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a19      	ldr	r2, [pc, #100]	; (8006648 <HAL_DMA_IRQHandler+0xca4>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d00e      	beq.n	8006606 <HAL_DMA_IRQHandler+0xc62>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a17      	ldr	r2, [pc, #92]	; (800664c <HAL_DMA_IRQHandler+0xca8>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d009      	beq.n	8006606 <HAL_DMA_IRQHandler+0xc62>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a16      	ldr	r2, [pc, #88]	; (8006650 <HAL_DMA_IRQHandler+0xcac>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d004      	beq.n	8006606 <HAL_DMA_IRQHandler+0xc62>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a14      	ldr	r2, [pc, #80]	; (8006654 <HAL_DMA_IRQHandler+0xcb0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d128      	bne.n	8006658 <HAL_DMA_IRQHandler+0xcb4>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 0214 	bic.w	r2, r2, #20
 8006614:	601a      	str	r2, [r3, #0]
 8006616:	e027      	b.n	8006668 <HAL_DMA_IRQHandler+0xcc4>
 8006618:	40020010 	.word	0x40020010
 800661c:	40020028 	.word	0x40020028
 8006620:	40020040 	.word	0x40020040
 8006624:	40020058 	.word	0x40020058
 8006628:	40020070 	.word	0x40020070
 800662c:	40020088 	.word	0x40020088
 8006630:	400200a0 	.word	0x400200a0
 8006634:	400200b8 	.word	0x400200b8
 8006638:	40020410 	.word	0x40020410
 800663c:	40020428 	.word	0x40020428
 8006640:	40020440 	.word	0x40020440
 8006644:	40020458 	.word	0x40020458
 8006648:	40020470 	.word	0x40020470
 800664c:	40020488 	.word	0x40020488
 8006650:	400204a0 	.word	0x400204a0
 8006654:	400204b8 	.word	0x400204b8
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f022 020a 	bic.w	r2, r2, #10
 8006666:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2200      	movs	r2, #0
 8006674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 8097 	beq.w	80067b0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800668a:	e091      	b.n	80067b0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006690:	f003 031f 	and.w	r3, r3, #31
 8006694:	2208      	movs	r2, #8
 8006696:	409a      	lsls	r2, r3
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	4013      	ands	r3, r2
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 8088 	beq.w	80067b2 <HAL_DMA_IRQHandler+0xe0e>
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f003 0308 	and.w	r3, r3, #8
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 8082 	beq.w	80067b2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	4a41      	ldr	r2, [pc, #260]	; (80067b8 <HAL_DMA_IRQHandler+0xe14>)
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d04a      	beq.n	800674e <HAL_DMA_IRQHandler+0xdaa>
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4a3f      	ldr	r2, [pc, #252]	; (80067bc <HAL_DMA_IRQHandler+0xe18>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d045      	beq.n	800674e <HAL_DMA_IRQHandler+0xdaa>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a3e      	ldr	r2, [pc, #248]	; (80067c0 <HAL_DMA_IRQHandler+0xe1c>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d040      	beq.n	800674e <HAL_DMA_IRQHandler+0xdaa>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a3c      	ldr	r2, [pc, #240]	; (80067c4 <HAL_DMA_IRQHandler+0xe20>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d03b      	beq.n	800674e <HAL_DMA_IRQHandler+0xdaa>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a3b      	ldr	r2, [pc, #236]	; (80067c8 <HAL_DMA_IRQHandler+0xe24>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d036      	beq.n	800674e <HAL_DMA_IRQHandler+0xdaa>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4a39      	ldr	r2, [pc, #228]	; (80067cc <HAL_DMA_IRQHandler+0xe28>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d031      	beq.n	800674e <HAL_DMA_IRQHandler+0xdaa>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a38      	ldr	r2, [pc, #224]	; (80067d0 <HAL_DMA_IRQHandler+0xe2c>)
 80066f0:	4293      	cmp	r3, r2
 80066f2:	d02c      	beq.n	800674e <HAL_DMA_IRQHandler+0xdaa>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a36      	ldr	r2, [pc, #216]	; (80067d4 <HAL_DMA_IRQHandler+0xe30>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d027      	beq.n	800674e <HAL_DMA_IRQHandler+0xdaa>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a35      	ldr	r2, [pc, #212]	; (80067d8 <HAL_DMA_IRQHandler+0xe34>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d022      	beq.n	800674e <HAL_DMA_IRQHandler+0xdaa>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a33      	ldr	r2, [pc, #204]	; (80067dc <HAL_DMA_IRQHandler+0xe38>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d01d      	beq.n	800674e <HAL_DMA_IRQHandler+0xdaa>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a32      	ldr	r2, [pc, #200]	; (80067e0 <HAL_DMA_IRQHandler+0xe3c>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d018      	beq.n	800674e <HAL_DMA_IRQHandler+0xdaa>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a30      	ldr	r2, [pc, #192]	; (80067e4 <HAL_DMA_IRQHandler+0xe40>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d013      	beq.n	800674e <HAL_DMA_IRQHandler+0xdaa>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a2f      	ldr	r2, [pc, #188]	; (80067e8 <HAL_DMA_IRQHandler+0xe44>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d00e      	beq.n	800674e <HAL_DMA_IRQHandler+0xdaa>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a2d      	ldr	r2, [pc, #180]	; (80067ec <HAL_DMA_IRQHandler+0xe48>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d009      	beq.n	800674e <HAL_DMA_IRQHandler+0xdaa>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a2c      	ldr	r2, [pc, #176]	; (80067f0 <HAL_DMA_IRQHandler+0xe4c>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d004      	beq.n	800674e <HAL_DMA_IRQHandler+0xdaa>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a2a      	ldr	r2, [pc, #168]	; (80067f4 <HAL_DMA_IRQHandler+0xe50>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d108      	bne.n	8006760 <HAL_DMA_IRQHandler+0xdbc>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 021c 	bic.w	r2, r2, #28
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	e007      	b.n	8006770 <HAL_DMA_IRQHandler+0xdcc>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 020e 	bic.w	r2, r2, #14
 800676e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006774:	f003 031f 	and.w	r3, r3, #31
 8006778:	2201      	movs	r2, #1
 800677a:	409a      	lsls	r2, r3
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800679a:	2b00      	cmp	r3, #0
 800679c:	d009      	beq.n	80067b2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	4798      	blx	r3
 80067a6:	e004      	b.n	80067b2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80067a8:	bf00      	nop
 80067aa:	e002      	b.n	80067b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067ac:	bf00      	nop
 80067ae:	e000      	b.n	80067b2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067b0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80067b2:	3728      	adds	r7, #40	; 0x28
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	40020010 	.word	0x40020010
 80067bc:	40020028 	.word	0x40020028
 80067c0:	40020040 	.word	0x40020040
 80067c4:	40020058 	.word	0x40020058
 80067c8:	40020070 	.word	0x40020070
 80067cc:	40020088 	.word	0x40020088
 80067d0:	400200a0 	.word	0x400200a0
 80067d4:	400200b8 	.word	0x400200b8
 80067d8:	40020410 	.word	0x40020410
 80067dc:	40020428 	.word	0x40020428
 80067e0:	40020440 	.word	0x40020440
 80067e4:	40020458 	.word	0x40020458
 80067e8:	40020470 	.word	0x40020470
 80067ec:	40020488 	.word	0x40020488
 80067f0:	400204a0 	.word	0x400204a0
 80067f4:	400204b8 	.word	0x400204b8

080067f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b085      	sub	sp, #20
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a42      	ldr	r2, [pc, #264]	; (8006910 <DMA_CalcBaseAndBitshift+0x118>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d04a      	beq.n	80068a0 <DMA_CalcBaseAndBitshift+0xa8>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a41      	ldr	r2, [pc, #260]	; (8006914 <DMA_CalcBaseAndBitshift+0x11c>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d045      	beq.n	80068a0 <DMA_CalcBaseAndBitshift+0xa8>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a3f      	ldr	r2, [pc, #252]	; (8006918 <DMA_CalcBaseAndBitshift+0x120>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d040      	beq.n	80068a0 <DMA_CalcBaseAndBitshift+0xa8>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a3e      	ldr	r2, [pc, #248]	; (800691c <DMA_CalcBaseAndBitshift+0x124>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d03b      	beq.n	80068a0 <DMA_CalcBaseAndBitshift+0xa8>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a3c      	ldr	r2, [pc, #240]	; (8006920 <DMA_CalcBaseAndBitshift+0x128>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d036      	beq.n	80068a0 <DMA_CalcBaseAndBitshift+0xa8>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a3b      	ldr	r2, [pc, #236]	; (8006924 <DMA_CalcBaseAndBitshift+0x12c>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d031      	beq.n	80068a0 <DMA_CalcBaseAndBitshift+0xa8>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a39      	ldr	r2, [pc, #228]	; (8006928 <DMA_CalcBaseAndBitshift+0x130>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d02c      	beq.n	80068a0 <DMA_CalcBaseAndBitshift+0xa8>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a38      	ldr	r2, [pc, #224]	; (800692c <DMA_CalcBaseAndBitshift+0x134>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d027      	beq.n	80068a0 <DMA_CalcBaseAndBitshift+0xa8>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a36      	ldr	r2, [pc, #216]	; (8006930 <DMA_CalcBaseAndBitshift+0x138>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d022      	beq.n	80068a0 <DMA_CalcBaseAndBitshift+0xa8>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a35      	ldr	r2, [pc, #212]	; (8006934 <DMA_CalcBaseAndBitshift+0x13c>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d01d      	beq.n	80068a0 <DMA_CalcBaseAndBitshift+0xa8>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a33      	ldr	r2, [pc, #204]	; (8006938 <DMA_CalcBaseAndBitshift+0x140>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d018      	beq.n	80068a0 <DMA_CalcBaseAndBitshift+0xa8>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a32      	ldr	r2, [pc, #200]	; (800693c <DMA_CalcBaseAndBitshift+0x144>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d013      	beq.n	80068a0 <DMA_CalcBaseAndBitshift+0xa8>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a30      	ldr	r2, [pc, #192]	; (8006940 <DMA_CalcBaseAndBitshift+0x148>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d00e      	beq.n	80068a0 <DMA_CalcBaseAndBitshift+0xa8>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a2f      	ldr	r2, [pc, #188]	; (8006944 <DMA_CalcBaseAndBitshift+0x14c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d009      	beq.n	80068a0 <DMA_CalcBaseAndBitshift+0xa8>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a2d      	ldr	r2, [pc, #180]	; (8006948 <DMA_CalcBaseAndBitshift+0x150>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d004      	beq.n	80068a0 <DMA_CalcBaseAndBitshift+0xa8>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a2c      	ldr	r2, [pc, #176]	; (800694c <DMA_CalcBaseAndBitshift+0x154>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d101      	bne.n	80068a4 <DMA_CalcBaseAndBitshift+0xac>
 80068a0:	2301      	movs	r3, #1
 80068a2:	e000      	b.n	80068a6 <DMA_CalcBaseAndBitshift+0xae>
 80068a4:	2300      	movs	r3, #0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d024      	beq.n	80068f4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	3b10      	subs	r3, #16
 80068b2:	4a27      	ldr	r2, [pc, #156]	; (8006950 <DMA_CalcBaseAndBitshift+0x158>)
 80068b4:	fba2 2303 	umull	r2, r3, r2, r3
 80068b8:	091b      	lsrs	r3, r3, #4
 80068ba:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	f003 0307 	and.w	r3, r3, #7
 80068c2:	4a24      	ldr	r2, [pc, #144]	; (8006954 <DMA_CalcBaseAndBitshift+0x15c>)
 80068c4:	5cd3      	ldrb	r3, [r2, r3]
 80068c6:	461a      	mov	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b03      	cmp	r3, #3
 80068d0:	d908      	bls.n	80068e4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	461a      	mov	r2, r3
 80068d8:	4b1f      	ldr	r3, [pc, #124]	; (8006958 <DMA_CalcBaseAndBitshift+0x160>)
 80068da:	4013      	ands	r3, r2
 80068dc:	1d1a      	adds	r2, r3, #4
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	659a      	str	r2, [r3, #88]	; 0x58
 80068e2:	e00d      	b.n	8006900 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	461a      	mov	r2, r3
 80068ea:	4b1b      	ldr	r3, [pc, #108]	; (8006958 <DMA_CalcBaseAndBitshift+0x160>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	6593      	str	r3, [r2, #88]	; 0x58
 80068f2:	e005      	b.n	8006900 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr
 8006910:	40020010 	.word	0x40020010
 8006914:	40020028 	.word	0x40020028
 8006918:	40020040 	.word	0x40020040
 800691c:	40020058 	.word	0x40020058
 8006920:	40020070 	.word	0x40020070
 8006924:	40020088 	.word	0x40020088
 8006928:	400200a0 	.word	0x400200a0
 800692c:	400200b8 	.word	0x400200b8
 8006930:	40020410 	.word	0x40020410
 8006934:	40020428 	.word	0x40020428
 8006938:	40020440 	.word	0x40020440
 800693c:	40020458 	.word	0x40020458
 8006940:	40020470 	.word	0x40020470
 8006944:	40020488 	.word	0x40020488
 8006948:	400204a0 	.word	0x400204a0
 800694c:	400204b8 	.word	0x400204b8
 8006950:	aaaaaaab 	.word	0xaaaaaaab
 8006954:	0801ad10 	.word	0x0801ad10
 8006958:	fffffc00 	.word	0xfffffc00

0800695c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006964:	2300      	movs	r3, #0
 8006966:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	699b      	ldr	r3, [r3, #24]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d120      	bne.n	80069b2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006974:	2b03      	cmp	r3, #3
 8006976:	d858      	bhi.n	8006a2a <DMA_CheckFifoParam+0xce>
 8006978:	a201      	add	r2, pc, #4	; (adr r2, 8006980 <DMA_CheckFifoParam+0x24>)
 800697a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697e:	bf00      	nop
 8006980:	08006991 	.word	0x08006991
 8006984:	080069a3 	.word	0x080069a3
 8006988:	08006991 	.word	0x08006991
 800698c:	08006a2b 	.word	0x08006a2b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006994:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d048      	beq.n	8006a2e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80069a0:	e045      	b.n	8006a2e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80069aa:	d142      	bne.n	8006a32 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80069b0:	e03f      	b.n	8006a32 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ba:	d123      	bne.n	8006a04 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c0:	2b03      	cmp	r3, #3
 80069c2:	d838      	bhi.n	8006a36 <DMA_CheckFifoParam+0xda>
 80069c4:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <DMA_CheckFifoParam+0x70>)
 80069c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ca:	bf00      	nop
 80069cc:	080069dd 	.word	0x080069dd
 80069d0:	080069e3 	.word	0x080069e3
 80069d4:	080069dd 	.word	0x080069dd
 80069d8:	080069f5 	.word	0x080069f5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	73fb      	strb	r3, [r7, #15]
        break;
 80069e0:	e030      	b.n	8006a44 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d025      	beq.n	8006a3a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80069f2:	e022      	b.n	8006a3a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80069fc:	d11f      	bne.n	8006a3e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006a02:	e01c      	b.n	8006a3e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d902      	bls.n	8006a12 <DMA_CheckFifoParam+0xb6>
 8006a0c:	2b03      	cmp	r3, #3
 8006a0e:	d003      	beq.n	8006a18 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006a10:	e018      	b.n	8006a44 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	73fb      	strb	r3, [r7, #15]
        break;
 8006a16:	e015      	b.n	8006a44 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d00e      	beq.n	8006a42 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	73fb      	strb	r3, [r7, #15]
    break;
 8006a28:	e00b      	b.n	8006a42 <DMA_CheckFifoParam+0xe6>
        break;
 8006a2a:	bf00      	nop
 8006a2c:	e00a      	b.n	8006a44 <DMA_CheckFifoParam+0xe8>
        break;
 8006a2e:	bf00      	nop
 8006a30:	e008      	b.n	8006a44 <DMA_CheckFifoParam+0xe8>
        break;
 8006a32:	bf00      	nop
 8006a34:	e006      	b.n	8006a44 <DMA_CheckFifoParam+0xe8>
        break;
 8006a36:	bf00      	nop
 8006a38:	e004      	b.n	8006a44 <DMA_CheckFifoParam+0xe8>
        break;
 8006a3a:	bf00      	nop
 8006a3c:	e002      	b.n	8006a44 <DMA_CheckFifoParam+0xe8>
        break;
 8006a3e:	bf00      	nop
 8006a40:	e000      	b.n	8006a44 <DMA_CheckFifoParam+0xe8>
    break;
 8006a42:	bf00      	nop
    }
  }

  return status;
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3714      	adds	r7, #20
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop

08006a54 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a38      	ldr	r2, [pc, #224]	; (8006b48 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d022      	beq.n	8006ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a36      	ldr	r2, [pc, #216]	; (8006b4c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d01d      	beq.n	8006ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a35      	ldr	r2, [pc, #212]	; (8006b50 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d018      	beq.n	8006ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a33      	ldr	r2, [pc, #204]	; (8006b54 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d013      	beq.n	8006ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a32      	ldr	r2, [pc, #200]	; (8006b58 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00e      	beq.n	8006ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a30      	ldr	r2, [pc, #192]	; (8006b5c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d009      	beq.n	8006ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a2f      	ldr	r2, [pc, #188]	; (8006b60 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d004      	beq.n	8006ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a2d      	ldr	r2, [pc, #180]	; (8006b64 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d101      	bne.n	8006ab6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e000      	b.n	8006ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d01a      	beq.n	8006af2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	3b08      	subs	r3, #8
 8006ac4:	4a28      	ldr	r2, [pc, #160]	; (8006b68 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8006ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aca:	091b      	lsrs	r3, r3, #4
 8006acc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	4b26      	ldr	r3, [pc, #152]	; (8006b6c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006ad2:	4413      	add	r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4a24      	ldr	r2, [pc, #144]	; (8006b70 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006ae0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f003 031f 	and.w	r3, r3, #31
 8006ae8:	2201      	movs	r2, #1
 8006aea:	409a      	lsls	r2, r3
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006af0:	e024      	b.n	8006b3c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	3b10      	subs	r3, #16
 8006afa:	4a1e      	ldr	r2, [pc, #120]	; (8006b74 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006afc:	fba2 2303 	umull	r2, r3, r2, r3
 8006b00:	091b      	lsrs	r3, r3, #4
 8006b02:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	4a1c      	ldr	r2, [pc, #112]	; (8006b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d806      	bhi.n	8006b1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	4a1b      	ldr	r2, [pc, #108]	; (8006b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d902      	bls.n	8006b1a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	3308      	adds	r3, #8
 8006b18:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	4b18      	ldr	r3, [pc, #96]	; (8006b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006b1e:	4413      	add	r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	461a      	mov	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	4a16      	ldr	r2, [pc, #88]	; (8006b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006b2c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f003 031f 	and.w	r3, r3, #31
 8006b34:	2201      	movs	r2, #1
 8006b36:	409a      	lsls	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006b3c:	bf00      	nop
 8006b3e:	3714      	adds	r7, #20
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr
 8006b48:	58025408 	.word	0x58025408
 8006b4c:	5802541c 	.word	0x5802541c
 8006b50:	58025430 	.word	0x58025430
 8006b54:	58025444 	.word	0x58025444
 8006b58:	58025458 	.word	0x58025458
 8006b5c:	5802546c 	.word	0x5802546c
 8006b60:	58025480 	.word	0x58025480
 8006b64:	58025494 	.word	0x58025494
 8006b68:	cccccccd 	.word	0xcccccccd
 8006b6c:	16009600 	.word	0x16009600
 8006b70:	58025880 	.word	0x58025880
 8006b74:	aaaaaaab 	.word	0xaaaaaaab
 8006b78:	400204b8 	.word	0x400204b8
 8006b7c:	4002040f 	.word	0x4002040f
 8006b80:	10008200 	.word	0x10008200
 8006b84:	40020880 	.word	0x40020880

08006b88 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d04a      	beq.n	8006c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2b08      	cmp	r3, #8
 8006ba2:	d847      	bhi.n	8006c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a25      	ldr	r2, [pc, #148]	; (8006c40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d022      	beq.n	8006bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a24      	ldr	r2, [pc, #144]	; (8006c44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d01d      	beq.n	8006bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a22      	ldr	r2, [pc, #136]	; (8006c48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d018      	beq.n	8006bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a21      	ldr	r2, [pc, #132]	; (8006c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d013      	beq.n	8006bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a1f      	ldr	r2, [pc, #124]	; (8006c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d00e      	beq.n	8006bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a1e      	ldr	r2, [pc, #120]	; (8006c54 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d009      	beq.n	8006bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a1c      	ldr	r2, [pc, #112]	; (8006c58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d004      	beq.n	8006bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a1b      	ldr	r2, [pc, #108]	; (8006c5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d101      	bne.n	8006bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e000      	b.n	8006bfa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	4b17      	ldr	r3, [pc, #92]	; (8006c60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8006c02:	4413      	add	r3, r2
 8006c04:	009b      	lsls	r3, r3, #2
 8006c06:	461a      	mov	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a15      	ldr	r2, [pc, #84]	; (8006c64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006c10:	671a      	str	r2, [r3, #112]	; 0x70
 8006c12:	e009      	b.n	8006c28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4b14      	ldr	r3, [pc, #80]	; (8006c68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006c18:	4413      	add	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a11      	ldr	r2, [pc, #68]	; (8006c6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8006c26:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	409a      	lsls	r2, r3
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8006c34:	bf00      	nop
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	58025408 	.word	0x58025408
 8006c44:	5802541c 	.word	0x5802541c
 8006c48:	58025430 	.word	0x58025430
 8006c4c:	58025444 	.word	0x58025444
 8006c50:	58025458 	.word	0x58025458
 8006c54:	5802546c 	.word	0x5802546c
 8006c58:	58025480 	.word	0x58025480
 8006c5c:	58025494 	.word	0x58025494
 8006c60:	1600963f 	.word	0x1600963f
 8006c64:	58025940 	.word	0x58025940
 8006c68:	1000823f 	.word	0x1000823f
 8006c6c:	40020940 	.word	0x40020940

08006c70 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b098      	sub	sp, #96	; 0x60
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8006c78:	4a84      	ldr	r2, [pc, #528]	; (8006e8c <HAL_FDCAN_Init+0x21c>)
 8006c7a:	f107 030c 	add.w	r3, r7, #12
 8006c7e:	4611      	mov	r1, r2
 8006c80:	224c      	movs	r2, #76	; 0x4c
 8006c82:	4618      	mov	r0, r3
 8006c84:	f00f fabe 	bl	8016204 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e1c6      	b.n	8007020 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a7e      	ldr	r2, [pc, #504]	; (8006e90 <HAL_FDCAN_Init+0x220>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d106      	bne.n	8006caa <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d106      	bne.n	8006cc4 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7fb fe3a 	bl	8002938 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	699a      	ldr	r2, [r3, #24]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0210 	bic.w	r2, r2, #16
 8006cd2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006cd4:	f7fc fe46 	bl	8003964 <HAL_GetTick>
 8006cd8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006cda:	e014      	b.n	8006d06 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006cdc:	f7fc fe42 	bl	8003964 <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b0a      	cmp	r3, #10
 8006ce8:	d90d      	bls.n	8006d06 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006cf0:	f043 0201 	orr.w	r2, r3, #1
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2203      	movs	r2, #3
 8006cfe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e18c      	b.n	8007020 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	f003 0308 	and.w	r3, r3, #8
 8006d10:	2b08      	cmp	r3, #8
 8006d12:	d0e3      	beq.n	8006cdc <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699a      	ldr	r2, [r3, #24]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0201 	orr.w	r2, r2, #1
 8006d22:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006d24:	f7fc fe1e 	bl	8003964 <HAL_GetTick>
 8006d28:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006d2a:	e014      	b.n	8006d56 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006d2c:	f7fc fe1a 	bl	8003964 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b0a      	cmp	r3, #10
 8006d38:	d90d      	bls.n	8006d56 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d40:	f043 0201 	orr.w	r2, r3, #1
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2203      	movs	r2, #3
 8006d4e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	e164      	b.n	8007020 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	699b      	ldr	r3, [r3, #24]
 8006d5c:	f003 0301 	and.w	r3, r3, #1
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d0e3      	beq.n	8006d2c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	699a      	ldr	r2, [r3, #24]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f042 0202 	orr.w	r2, r2, #2
 8006d72:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	7c1b      	ldrb	r3, [r3, #16]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d108      	bne.n	8006d8e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	699a      	ldr	r2, [r3, #24]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d8a:	619a      	str	r2, [r3, #24]
 8006d8c:	e007      	b.n	8006d9e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	699a      	ldr	r2, [r3, #24]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d9c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	7c5b      	ldrb	r3, [r3, #17]
 8006da2:	2b01      	cmp	r3, #1
 8006da4:	d108      	bne.n	8006db8 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	699a      	ldr	r2, [r3, #24]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006db4:	619a      	str	r2, [r3, #24]
 8006db6:	e007      	b.n	8006dc8 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	699a      	ldr	r2, [r3, #24]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006dc6:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	7c9b      	ldrb	r3, [r3, #18]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d108      	bne.n	8006de2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	699a      	ldr	r2, [r3, #24]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006dde:	619a      	str	r2, [r3, #24]
 8006de0:	e007      	b.n	8006df2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	699a      	ldr	r2, [r3, #24]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006df0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	699b      	ldr	r3, [r3, #24]
 8006df8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	689a      	ldr	r2, [r3, #8]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	699a      	ldr	r2, [r3, #24]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006e16:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691a      	ldr	r2, [r3, #16]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0210 	bic.w	r2, r2, #16
 8006e26:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d108      	bne.n	8006e42 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	699a      	ldr	r2, [r3, #24]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0204 	orr.w	r2, r2, #4
 8006e3e:	619a      	str	r2, [r3, #24]
 8006e40:	e030      	b.n	8006ea4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d02c      	beq.n	8006ea4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d020      	beq.n	8006e94 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	699a      	ldr	r2, [r3, #24]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e60:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	691a      	ldr	r2, [r3, #16]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f042 0210 	orr.w	r2, r2, #16
 8006e70:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d114      	bne.n	8006ea4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	699a      	ldr	r2, [r3, #24]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f042 0220 	orr.w	r2, r2, #32
 8006e88:	619a      	str	r2, [r3, #24]
 8006e8a:	e00b      	b.n	8006ea4 <HAL_FDCAN_Init+0x234>
 8006e8c:	0801ac78 	.word	0x0801ac78
 8006e90:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	699a      	ldr	r2, [r3, #24]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f042 0220 	orr.w	r2, r2, #32
 8006ea2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	69db      	ldr	r3, [r3, #28]
 8006eb0:	3b01      	subs	r3, #1
 8006eb2:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006eb4:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006ebc:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006ecc:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006ece:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ed8:	d115      	bne.n	8006f06 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ede:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006ee8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006ef2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006efa:	3b01      	subs	r3, #1
 8006efc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006f02:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006f04:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f2c:	4413      	add	r3, r2
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d011      	beq.n	8006f56 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006f3a:	f023 0107 	bic.w	r1, r3, #7
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	3360      	adds	r3, #96	; 0x60
 8006f46:	443b      	add	r3, r7
 8006f48:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	430a      	orrs	r2, r1
 8006f52:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d011      	beq.n	8006f82 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006f66:	f023 0107 	bic.w	r1, r3, #7
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	3360      	adds	r3, #96	; 0x60
 8006f72:	443b      	add	r3, r7
 8006f74:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d012      	beq.n	8006fb0 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006f92:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	3360      	adds	r3, #96	; 0x60
 8006f9e:	443b      	add	r3, r7
 8006fa0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006fa4:	011a      	lsls	r2, r3, #4
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d012      	beq.n	8006fde <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006fc0:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	3360      	adds	r3, #96	; 0x60
 8006fcc:	443b      	add	r3, r7
 8006fce:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006fd2:	021a      	lsls	r2, r3, #8
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a11      	ldr	r2, [pc, #68]	; (8007028 <HAL_FDCAN_Init+0x3b8>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d107      	bne.n	8006ff8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	689a      	ldr	r2, [r3, #8]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f022 0203 	bic.w	r2, r2, #3
 8006ff6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 f80b 	bl	800702c <FDCAN_CalcultateRamBlockAddresses>
 8007016:	4603      	mov	r3, r0
 8007018:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800701c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007020:	4618      	mov	r0, r3
 8007022:	3760      	adds	r7, #96	; 0x60
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}
 8007028:	4000a000 	.word	0x4000a000

0800702c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007038:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007042:	4ba7      	ldr	r3, [pc, #668]	; (80072e0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007044:	4013      	ands	r3, r2
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	0091      	lsls	r1, r2, #2
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	6812      	ldr	r2, [r2, #0]
 800704e:	430b      	orrs	r3, r1
 8007050:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800705c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007064:	041a      	lsls	r2, r3, #16
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	4413      	add	r3, r2
 8007078:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007082:	4b97      	ldr	r3, [pc, #604]	; (80072e0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007084:	4013      	ands	r3, r2
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	0091      	lsls	r1, r2, #2
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	6812      	ldr	r2, [r2, #0]
 800708e:	430b      	orrs	r3, r1
 8007090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800709c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a4:	041a      	lsls	r2, r3, #16
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b4:	005b      	lsls	r3, r3, #1
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	4413      	add	r3, r2
 80070ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80070c4:	4b86      	ldr	r3, [pc, #536]	; (80072e0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80070c6:	4013      	ands	r3, r2
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	0091      	lsls	r1, r2, #2
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	6812      	ldr	r2, [r2, #0]
 80070d0:	430b      	orrs	r3, r1
 80070d2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80070de:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e6:	041a      	lsls	r2, r3, #16
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f6:	687a      	ldr	r2, [r7, #4]
 80070f8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80070fa:	fb02 f303 	mul.w	r3, r2, r3
 80070fe:	68ba      	ldr	r2, [r7, #8]
 8007100:	4413      	add	r3, r2
 8007102:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800710c:	4b74      	ldr	r3, [pc, #464]	; (80072e0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800710e:	4013      	ands	r3, r2
 8007110:	68ba      	ldr	r2, [r7, #8]
 8007112:	0091      	lsls	r1, r2, #2
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	6812      	ldr	r2, [r2, #0]
 8007118:	430b      	orrs	r3, r1
 800711a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007126:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800712e:	041a      	lsls	r2, r3, #16
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	430a      	orrs	r2, r1
 8007136:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800713e:	687a      	ldr	r2, [r7, #4]
 8007140:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007142:	fb02 f303 	mul.w	r3, r2, r3
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	4413      	add	r3, r2
 800714a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007154:	4b62      	ldr	r3, [pc, #392]	; (80072e0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007156:	4013      	ands	r3, r2
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	0091      	lsls	r1, r2, #2
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	6812      	ldr	r2, [r2, #0]
 8007160:	430b      	orrs	r3, r1
 8007162:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800716e:	fb02 f303 	mul.w	r3, r2, r3
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	4413      	add	r3, r2
 8007176:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007180:	4b57      	ldr	r3, [pc, #348]	; (80072e0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007182:	4013      	ands	r3, r2
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	0091      	lsls	r1, r2, #2
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	6812      	ldr	r2, [r2, #0]
 800718c:	430b      	orrs	r3, r1
 800718e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800719a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a2:	041a      	lsls	r2, r3, #16
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	430a      	orrs	r2, r1
 80071aa:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b2:	005b      	lsls	r3, r3, #1
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	4413      	add	r3, r2
 80071b8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80071c2:	4b47      	ldr	r3, [pc, #284]	; (80072e0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80071c4:	4013      	ands	r3, r2
 80071c6:	68ba      	ldr	r2, [r7, #8]
 80071c8:	0091      	lsls	r1, r2, #2
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	6812      	ldr	r2, [r2, #0]
 80071ce:	430b      	orrs	r3, r1
 80071d0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80071dc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071e4:	041a      	lsls	r2, r3, #16
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	430a      	orrs	r2, r1
 80071ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80071f8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007200:	061a      	lsls	r2, r3, #24
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	430a      	orrs	r2, r1
 8007208:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007210:	4b34      	ldr	r3, [pc, #208]	; (80072e4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007212:	4413      	add	r3, r2
 8007214:	009a      	lsls	r2, r3, #2
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	441a      	add	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007232:	00db      	lsls	r3, r3, #3
 8007234:	441a      	add	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007242:	6879      	ldr	r1, [r7, #4]
 8007244:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007246:	fb01 f303 	mul.w	r3, r1, r3
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	441a      	add	r2, r3
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800725a:	6879      	ldr	r1, [r7, #4]
 800725c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800725e:	fb01 f303 	mul.w	r3, r1, r3
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	441a      	add	r2, r3
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007276:	fb01 f303 	mul.w	r3, r1, r3
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	441a      	add	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800728e:	00db      	lsls	r3, r3, #3
 8007290:	441a      	add	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072a2:	6879      	ldr	r1, [r7, #4]
 80072a4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80072a6:	fb01 f303 	mul.w	r3, r1, r3
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	441a      	add	r2, r3
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072be:	6879      	ldr	r1, [r7, #4]
 80072c0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80072c2:	fb01 f303 	mul.w	r3, r1, r3
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	441a      	add	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d6:	4a04      	ldr	r2, [pc, #16]	; (80072e8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d915      	bls.n	8007308 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80072dc:	e006      	b.n	80072ec <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80072de:	bf00      	nop
 80072e0:	ffff0003 	.word	0xffff0003
 80072e4:	10002b00 	.word	0x10002b00
 80072e8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072f2:	f043 0220 	orr.w	r2, r3, #32
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2203      	movs	r2, #3
 8007300:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	e010      	b.n	800732a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800730c:	60fb      	str	r3, [r7, #12]
 800730e:	e005      	b.n	800731c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2200      	movs	r2, #0
 8007314:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3304      	adds	r3, #4
 800731a:	60fb      	str	r3, [r7, #12]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	429a      	cmp	r2, r3
 8007326:	d3f3      	bcc.n	8007310 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop

08007338 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007338:	b480      	push	{r7}
 800733a:	b089      	sub	sp, #36	; 0x24
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007342:	2300      	movs	r3, #0
 8007344:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007346:	4b86      	ldr	r3, [pc, #536]	; (8007560 <HAL_GPIO_Init+0x228>)
 8007348:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800734a:	e18c      	b.n	8007666 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	2101      	movs	r1, #1
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	fa01 f303 	lsl.w	r3, r1, r3
 8007358:	4013      	ands	r3, r2
 800735a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	2b00      	cmp	r3, #0
 8007360:	f000 817e 	beq.w	8007660 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	685b      	ldr	r3, [r3, #4]
 8007368:	f003 0303 	and.w	r3, r3, #3
 800736c:	2b01      	cmp	r3, #1
 800736e:	d005      	beq.n	800737c <HAL_GPIO_Init+0x44>
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f003 0303 	and.w	r3, r3, #3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d130      	bne.n	80073de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	005b      	lsls	r3, r3, #1
 8007386:	2203      	movs	r2, #3
 8007388:	fa02 f303 	lsl.w	r3, r2, r3
 800738c:	43db      	mvns	r3, r3
 800738e:	69ba      	ldr	r2, [r7, #24]
 8007390:	4013      	ands	r3, r2
 8007392:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	68da      	ldr	r2, [r3, #12]
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	fa02 f303 	lsl.w	r3, r2, r3
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	69ba      	ldr	r2, [r7, #24]
 80073aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80073b2:	2201      	movs	r2, #1
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ba:	43db      	mvns	r3, r3
 80073bc:	69ba      	ldr	r2, [r7, #24]
 80073be:	4013      	ands	r3, r2
 80073c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	091b      	lsrs	r3, r3, #4
 80073c8:	f003 0201 	and.w	r2, r3, #1
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	fa02 f303 	lsl.w	r3, r2, r3
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	f003 0303 	and.w	r3, r3, #3
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	d017      	beq.n	800741a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	005b      	lsls	r3, r3, #1
 80073f4:	2203      	movs	r2, #3
 80073f6:	fa02 f303 	lsl.w	r3, r2, r3
 80073fa:	43db      	mvns	r3, r3
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	4013      	ands	r3, r2
 8007400:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	689a      	ldr	r2, [r3, #8]
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	005b      	lsls	r3, r3, #1
 800740a:	fa02 f303 	lsl.w	r3, r2, r3
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	4313      	orrs	r3, r2
 8007412:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	69ba      	ldr	r2, [r7, #24]
 8007418:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f003 0303 	and.w	r3, r3, #3
 8007422:	2b02      	cmp	r3, #2
 8007424:	d123      	bne.n	800746e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	08da      	lsrs	r2, r3, #3
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	3208      	adds	r2, #8
 800742e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	f003 0307 	and.w	r3, r3, #7
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	220f      	movs	r2, #15
 800743e:	fa02 f303 	lsl.w	r3, r2, r3
 8007442:	43db      	mvns	r3, r3
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	4013      	ands	r3, r2
 8007448:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	691a      	ldr	r2, [r3, #16]
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	f003 0307 	and.w	r3, r3, #7
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	fa02 f303 	lsl.w	r3, r2, r3
 800745a:	69ba      	ldr	r2, [r7, #24]
 800745c:	4313      	orrs	r3, r2
 800745e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	08da      	lsrs	r2, r3, #3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	3208      	adds	r2, #8
 8007468:	69b9      	ldr	r1, [r7, #24]
 800746a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	2203      	movs	r2, #3
 800747a:	fa02 f303 	lsl.w	r3, r2, r3
 800747e:	43db      	mvns	r3, r3
 8007480:	69ba      	ldr	r2, [r7, #24]
 8007482:	4013      	ands	r3, r2
 8007484:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	f003 0203 	and.w	r2, r3, #3
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	005b      	lsls	r3, r3, #1
 8007492:	fa02 f303 	lsl.w	r3, r2, r3
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	4313      	orrs	r3, r2
 800749a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	69ba      	ldr	r2, [r7, #24]
 80074a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 80d8 	beq.w	8007660 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074b0:	4b2c      	ldr	r3, [pc, #176]	; (8007564 <HAL_GPIO_Init+0x22c>)
 80074b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074b6:	4a2b      	ldr	r2, [pc, #172]	; (8007564 <HAL_GPIO_Init+0x22c>)
 80074b8:	f043 0302 	orr.w	r3, r3, #2
 80074bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80074c0:	4b28      	ldr	r3, [pc, #160]	; (8007564 <HAL_GPIO_Init+0x22c>)
 80074c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074c6:	f003 0302 	and.w	r3, r3, #2
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80074ce:	4a26      	ldr	r2, [pc, #152]	; (8007568 <HAL_GPIO_Init+0x230>)
 80074d0:	69fb      	ldr	r3, [r7, #28]
 80074d2:	089b      	lsrs	r3, r3, #2
 80074d4:	3302      	adds	r3, #2
 80074d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	f003 0303 	and.w	r3, r3, #3
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	220f      	movs	r2, #15
 80074e6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ea:	43db      	mvns	r3, r3
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	4013      	ands	r3, r2
 80074f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a1d      	ldr	r2, [pc, #116]	; (800756c <HAL_GPIO_Init+0x234>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d04a      	beq.n	8007590 <HAL_GPIO_Init+0x258>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a1c      	ldr	r2, [pc, #112]	; (8007570 <HAL_GPIO_Init+0x238>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d02b      	beq.n	800755a <HAL_GPIO_Init+0x222>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a1b      	ldr	r2, [pc, #108]	; (8007574 <HAL_GPIO_Init+0x23c>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d025      	beq.n	8007556 <HAL_GPIO_Init+0x21e>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a1a      	ldr	r2, [pc, #104]	; (8007578 <HAL_GPIO_Init+0x240>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d01f      	beq.n	8007552 <HAL_GPIO_Init+0x21a>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a19      	ldr	r2, [pc, #100]	; (800757c <HAL_GPIO_Init+0x244>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d019      	beq.n	800754e <HAL_GPIO_Init+0x216>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a18      	ldr	r2, [pc, #96]	; (8007580 <HAL_GPIO_Init+0x248>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d013      	beq.n	800754a <HAL_GPIO_Init+0x212>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a17      	ldr	r2, [pc, #92]	; (8007584 <HAL_GPIO_Init+0x24c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d00d      	beq.n	8007546 <HAL_GPIO_Init+0x20e>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a16      	ldr	r2, [pc, #88]	; (8007588 <HAL_GPIO_Init+0x250>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d007      	beq.n	8007542 <HAL_GPIO_Init+0x20a>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a15      	ldr	r2, [pc, #84]	; (800758c <HAL_GPIO_Init+0x254>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d101      	bne.n	800753e <HAL_GPIO_Init+0x206>
 800753a:	2309      	movs	r3, #9
 800753c:	e029      	b.n	8007592 <HAL_GPIO_Init+0x25a>
 800753e:	230a      	movs	r3, #10
 8007540:	e027      	b.n	8007592 <HAL_GPIO_Init+0x25a>
 8007542:	2307      	movs	r3, #7
 8007544:	e025      	b.n	8007592 <HAL_GPIO_Init+0x25a>
 8007546:	2306      	movs	r3, #6
 8007548:	e023      	b.n	8007592 <HAL_GPIO_Init+0x25a>
 800754a:	2305      	movs	r3, #5
 800754c:	e021      	b.n	8007592 <HAL_GPIO_Init+0x25a>
 800754e:	2304      	movs	r3, #4
 8007550:	e01f      	b.n	8007592 <HAL_GPIO_Init+0x25a>
 8007552:	2303      	movs	r3, #3
 8007554:	e01d      	b.n	8007592 <HAL_GPIO_Init+0x25a>
 8007556:	2302      	movs	r3, #2
 8007558:	e01b      	b.n	8007592 <HAL_GPIO_Init+0x25a>
 800755a:	2301      	movs	r3, #1
 800755c:	e019      	b.n	8007592 <HAL_GPIO_Init+0x25a>
 800755e:	bf00      	nop
 8007560:	58000080 	.word	0x58000080
 8007564:	58024400 	.word	0x58024400
 8007568:	58000400 	.word	0x58000400
 800756c:	58020000 	.word	0x58020000
 8007570:	58020400 	.word	0x58020400
 8007574:	58020800 	.word	0x58020800
 8007578:	58020c00 	.word	0x58020c00
 800757c:	58021000 	.word	0x58021000
 8007580:	58021400 	.word	0x58021400
 8007584:	58021800 	.word	0x58021800
 8007588:	58021c00 	.word	0x58021c00
 800758c:	58022400 	.word	0x58022400
 8007590:	2300      	movs	r3, #0
 8007592:	69fa      	ldr	r2, [r7, #28]
 8007594:	f002 0203 	and.w	r2, r2, #3
 8007598:	0092      	lsls	r2, r2, #2
 800759a:	4093      	lsls	r3, r2
 800759c:	69ba      	ldr	r2, [r7, #24]
 800759e:	4313      	orrs	r3, r2
 80075a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80075a2:	4938      	ldr	r1, [pc, #224]	; (8007684 <HAL_GPIO_Init+0x34c>)
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	089b      	lsrs	r3, r3, #2
 80075a8:	3302      	adds	r3, #2
 80075aa:	69ba      	ldr	r2, [r7, #24]
 80075ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80075b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	43db      	mvns	r3, r3
 80075bc:	69ba      	ldr	r2, [r7, #24]
 80075be:	4013      	ands	r3, r2
 80075c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	4313      	orrs	r3, r2
 80075d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80075d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80075de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	43db      	mvns	r3, r3
 80075ea:	69ba      	ldr	r2, [r7, #24]
 80075ec:	4013      	ands	r3, r2
 80075ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	685b      	ldr	r3, [r3, #4]
 80075f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80075fc:	69ba      	ldr	r2, [r7, #24]
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	4313      	orrs	r3, r2
 8007602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007604:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	43db      	mvns	r3, r3
 8007616:	69ba      	ldr	r2, [r7, #24]
 8007618:	4013      	ands	r3, r2
 800761a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007624:	2b00      	cmp	r3, #0
 8007626:	d003      	beq.n	8007630 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	4313      	orrs	r3, r2
 800762e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	43db      	mvns	r3, r3
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	4013      	ands	r3, r2
 8007644:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	4313      	orrs	r3, r2
 8007658:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	69ba      	ldr	r2, [r7, #24]
 800765e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	3301      	adds	r3, #1
 8007664:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	fa22 f303 	lsr.w	r3, r2, r3
 8007670:	2b00      	cmp	r3, #0
 8007672:	f47f ae6b 	bne.w	800734c <HAL_GPIO_Init+0x14>
  }
}
 8007676:	bf00      	nop
 8007678:	bf00      	nop
 800767a:	3724      	adds	r7, #36	; 0x24
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	58000400 	.word	0x58000400

08007688 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	691a      	ldr	r2, [r3, #16]
 8007698:	887b      	ldrh	r3, [r7, #2]
 800769a:	4013      	ands	r3, r2
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80076a0:	2301      	movs	r3, #1
 80076a2:	73fb      	strb	r3, [r7, #15]
 80076a4:	e001      	b.n	80076aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80076a6:	2300      	movs	r3, #0
 80076a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80076aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3714      	adds	r7, #20
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	460b      	mov	r3, r1
 80076c2:	807b      	strh	r3, [r7, #2]
 80076c4:	4613      	mov	r3, r2
 80076c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80076c8:	787b      	ldrb	r3, [r7, #1]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80076ce:	887a      	ldrh	r2, [r7, #2]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80076d4:	e003      	b.n	80076de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80076d6:	887b      	ldrh	r3, [r7, #2]
 80076d8:	041a      	lsls	r2, r3, #16
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	619a      	str	r2, [r3, #24]
}
 80076de:	bf00      	nop
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
	...

080076ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e07f      	b.n	80077fe <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7fb f978 	bl	8002a08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2224      	movs	r2, #36	; 0x24
 800771c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681a      	ldr	r2, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f022 0201 	bic.w	r2, r2, #1
 800772e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	685a      	ldr	r2, [r3, #4]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800773c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	689a      	ldr	r2, [r3, #8]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800774c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d107      	bne.n	8007766 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	689a      	ldr	r2, [r3, #8]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007762:	609a      	str	r2, [r3, #8]
 8007764:	e006      	b.n	8007774 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	689a      	ldr	r2, [r3, #8]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007772:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	2b02      	cmp	r3, #2
 800777a:	d104      	bne.n	8007786 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007784:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6859      	ldr	r1, [r3, #4]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	4b1d      	ldr	r3, [pc, #116]	; (8007808 <HAL_I2C_Init+0x11c>)
 8007792:	430b      	orrs	r3, r1
 8007794:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	691a      	ldr	r2, [r3, #16]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	699b      	ldr	r3, [r3, #24]
 80077b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	430a      	orrs	r2, r1
 80077be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	69d9      	ldr	r1, [r3, #28]
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a1a      	ldr	r2, [r3, #32]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	430a      	orrs	r2, r1
 80077ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	681a      	ldr	r2, [r3, #0]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f042 0201 	orr.w	r2, r2, #1
 80077de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2200      	movs	r2, #0
 80077e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2220      	movs	r2, #32
 80077ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3708      	adds	r7, #8
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	02008000 	.word	0x02008000

0800780c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b20      	cmp	r3, #32
 8007820:	d138      	bne.n	8007894 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007828:	2b01      	cmp	r3, #1
 800782a:	d101      	bne.n	8007830 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800782c:	2302      	movs	r3, #2
 800782e:	e032      	b.n	8007896 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2224      	movs	r2, #36	; 0x24
 800783c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f022 0201 	bic.w	r2, r2, #1
 800784e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	681a      	ldr	r2, [r3, #0]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800785e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	6819      	ldr	r1, [r3, #0]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	683a      	ldr	r2, [r7, #0]
 800786c:	430a      	orrs	r2, r1
 800786e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	f042 0201 	orr.w	r2, r2, #1
 800787e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2220      	movs	r2, #32
 8007884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2200      	movs	r2, #0
 800788c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007890:	2300      	movs	r3, #0
 8007892:	e000      	b.n	8007896 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007894:	2302      	movs	r3, #2
  }
}
 8007896:	4618      	mov	r0, r3
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b085      	sub	sp, #20
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078b2:	b2db      	uxtb	r3, r3
 80078b4:	2b20      	cmp	r3, #32
 80078b6:	d139      	bne.n	800792c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d101      	bne.n	80078c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80078c2:	2302      	movs	r3, #2
 80078c4:	e033      	b.n	800792e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2224      	movs	r2, #36	; 0x24
 80078d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f022 0201 	bic.w	r2, r2, #1
 80078e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80078f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	021b      	lsls	r3, r3, #8
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f042 0201 	orr.w	r2, r2, #1
 8007916:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2220      	movs	r2, #32
 800791c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007928:	2300      	movs	r3, #0
 800792a:	e000      	b.n	800792e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800792c:	2302      	movs	r3, #2
  }
}
 800792e:	4618      	mov	r0, r3
 8007930:	3714      	adds	r7, #20
 8007932:	46bd      	mov	sp, r7
 8007934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007938:	4770      	bx	lr

0800793a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800793a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800793c:	b08f      	sub	sp, #60	; 0x3c
 800793e:	af0a      	add	r7, sp, #40	; 0x28
 8007940:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e116      	b.n	8007b7a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d106      	bne.n	800796c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f00e f916 	bl	8015b98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2203      	movs	r2, #3
 8007970:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007978:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800797c:	2b00      	cmp	r3, #0
 800797e:	d102      	bne.n	8007986 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4618      	mov	r0, r3
 800798c:	f00a fa5b 	bl	8011e46 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	603b      	str	r3, [r7, #0]
 8007996:	687e      	ldr	r6, [r7, #4]
 8007998:	466d      	mov	r5, sp
 800799a:	f106 0410 	add.w	r4, r6, #16
 800799e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80079a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80079a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80079aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80079ae:	1d33      	adds	r3, r6, #4
 80079b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80079b2:	6838      	ldr	r0, [r7, #0]
 80079b4:	f00a f926 	bl	8011c04 <USB_CoreInit>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d005      	beq.n	80079ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2202      	movs	r2, #2
 80079c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e0d7      	b.n	8007b7a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2100      	movs	r1, #0
 80079d0:	4618      	mov	r0, r3
 80079d2:	f00a fa49 	bl	8011e68 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80079d6:	2300      	movs	r3, #0
 80079d8:	73fb      	strb	r3, [r7, #15]
 80079da:	e04a      	b.n	8007a72 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80079dc:	7bfa      	ldrb	r2, [r7, #15]
 80079de:	6879      	ldr	r1, [r7, #4]
 80079e0:	4613      	mov	r3, r2
 80079e2:	00db      	lsls	r3, r3, #3
 80079e4:	4413      	add	r3, r2
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	440b      	add	r3, r1
 80079ea:	333d      	adds	r3, #61	; 0x3d
 80079ec:	2201      	movs	r2, #1
 80079ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80079f0:	7bfa      	ldrb	r2, [r7, #15]
 80079f2:	6879      	ldr	r1, [r7, #4]
 80079f4:	4613      	mov	r3, r2
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	4413      	add	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	440b      	add	r3, r1
 80079fe:	333c      	adds	r3, #60	; 0x3c
 8007a00:	7bfa      	ldrb	r2, [r7, #15]
 8007a02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007a04:	7bfa      	ldrb	r2, [r7, #15]
 8007a06:	7bfb      	ldrb	r3, [r7, #15]
 8007a08:	b298      	uxth	r0, r3
 8007a0a:	6879      	ldr	r1, [r7, #4]
 8007a0c:	4613      	mov	r3, r2
 8007a0e:	00db      	lsls	r3, r3, #3
 8007a10:	4413      	add	r3, r2
 8007a12:	009b      	lsls	r3, r3, #2
 8007a14:	440b      	add	r3, r1
 8007a16:	3356      	adds	r3, #86	; 0x56
 8007a18:	4602      	mov	r2, r0
 8007a1a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007a1c:	7bfa      	ldrb	r2, [r7, #15]
 8007a1e:	6879      	ldr	r1, [r7, #4]
 8007a20:	4613      	mov	r3, r2
 8007a22:	00db      	lsls	r3, r3, #3
 8007a24:	4413      	add	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	440b      	add	r3, r1
 8007a2a:	3340      	adds	r3, #64	; 0x40
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007a30:	7bfa      	ldrb	r2, [r7, #15]
 8007a32:	6879      	ldr	r1, [r7, #4]
 8007a34:	4613      	mov	r3, r2
 8007a36:	00db      	lsls	r3, r3, #3
 8007a38:	4413      	add	r3, r2
 8007a3a:	009b      	lsls	r3, r3, #2
 8007a3c:	440b      	add	r3, r1
 8007a3e:	3344      	adds	r3, #68	; 0x44
 8007a40:	2200      	movs	r2, #0
 8007a42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007a44:	7bfa      	ldrb	r2, [r7, #15]
 8007a46:	6879      	ldr	r1, [r7, #4]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	00db      	lsls	r3, r3, #3
 8007a4c:	4413      	add	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	440b      	add	r3, r1
 8007a52:	3348      	adds	r3, #72	; 0x48
 8007a54:	2200      	movs	r2, #0
 8007a56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007a58:	7bfa      	ldrb	r2, [r7, #15]
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	00db      	lsls	r3, r3, #3
 8007a60:	4413      	add	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	440b      	add	r3, r1
 8007a66:	334c      	adds	r3, #76	; 0x4c
 8007a68:	2200      	movs	r2, #0
 8007a6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	73fb      	strb	r3, [r7, #15]
 8007a72:	7bfa      	ldrb	r2, [r7, #15]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d3af      	bcc.n	80079dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]
 8007a80:	e044      	b.n	8007b0c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007a82:	7bfa      	ldrb	r2, [r7, #15]
 8007a84:	6879      	ldr	r1, [r7, #4]
 8007a86:	4613      	mov	r3, r2
 8007a88:	00db      	lsls	r3, r3, #3
 8007a8a:	4413      	add	r3, r2
 8007a8c:	009b      	lsls	r3, r3, #2
 8007a8e:	440b      	add	r3, r1
 8007a90:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8007a94:	2200      	movs	r2, #0
 8007a96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007a98:	7bfa      	ldrb	r2, [r7, #15]
 8007a9a:	6879      	ldr	r1, [r7, #4]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	00db      	lsls	r3, r3, #3
 8007aa0:	4413      	add	r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	440b      	add	r3, r1
 8007aa6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8007aaa:	7bfa      	ldrb	r2, [r7, #15]
 8007aac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007aae:	7bfa      	ldrb	r2, [r7, #15]
 8007ab0:	6879      	ldr	r1, [r7, #4]
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	00db      	lsls	r3, r3, #3
 8007ab6:	4413      	add	r3, r2
 8007ab8:	009b      	lsls	r3, r3, #2
 8007aba:	440b      	add	r3, r1
 8007abc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007ac4:	7bfa      	ldrb	r2, [r7, #15]
 8007ac6:	6879      	ldr	r1, [r7, #4]
 8007ac8:	4613      	mov	r3, r2
 8007aca:	00db      	lsls	r3, r3, #3
 8007acc:	4413      	add	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	440b      	add	r3, r1
 8007ad2:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007ada:	7bfa      	ldrb	r2, [r7, #15]
 8007adc:	6879      	ldr	r1, [r7, #4]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	00db      	lsls	r3, r3, #3
 8007ae2:	4413      	add	r3, r2
 8007ae4:	009b      	lsls	r3, r3, #2
 8007ae6:	440b      	add	r3, r1
 8007ae8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8007aec:	2200      	movs	r2, #0
 8007aee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007af0:	7bfa      	ldrb	r2, [r7, #15]
 8007af2:	6879      	ldr	r1, [r7, #4]
 8007af4:	4613      	mov	r3, r2
 8007af6:	00db      	lsls	r3, r3, #3
 8007af8:	4413      	add	r3, r2
 8007afa:	009b      	lsls	r3, r3, #2
 8007afc:	440b      	add	r3, r1
 8007afe:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007b02:	2200      	movs	r2, #0
 8007b04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b06:	7bfb      	ldrb	r3, [r7, #15]
 8007b08:	3301      	adds	r3, #1
 8007b0a:	73fb      	strb	r3, [r7, #15]
 8007b0c:	7bfa      	ldrb	r2, [r7, #15]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d3b5      	bcc.n	8007a82 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	603b      	str	r3, [r7, #0]
 8007b1c:	687e      	ldr	r6, [r7, #4]
 8007b1e:	466d      	mov	r5, sp
 8007b20:	f106 0410 	add.w	r4, r6, #16
 8007b24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007b30:	e885 0003 	stmia.w	r5, {r0, r1}
 8007b34:	1d33      	adds	r3, r6, #4
 8007b36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b38:	6838      	ldr	r0, [r7, #0]
 8007b3a:	f00a f9e1 	bl	8011f00 <USB_DevInit>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d005      	beq.n	8007b50 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2202      	movs	r2, #2
 8007b48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e014      	b.n	8007b7a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d102      	bne.n	8007b6e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 f96f 	bl	8008e4c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4618      	mov	r0, r3
 8007b74:	f00b fa23 	bl	8012fbe <USB_DevDisconnect>

  return HAL_OK;
 8007b78:	2300      	movs	r3, #0
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3714      	adds	r7, #20
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007b82 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d101      	bne.n	8007b9e <HAL_PCD_Start+0x1c>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	e022      	b.n	8007be4 <HAL_PCD_Start+0x62>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d109      	bne.n	8007bc6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d105      	bne.n	8007bc6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f00a f92a 	bl	8011e24 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f00b f9d1 	bl	8012f7c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007be2:	2300      	movs	r3, #0
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3710      	adds	r7, #16
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007bec:	b590      	push	{r4, r7, lr}
 8007bee:	b08d      	sub	sp, #52	; 0x34
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bfa:	6a3b      	ldr	r3, [r7, #32]
 8007bfc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f00b fa8f 	bl	8013126 <USB_GetMode>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f040 84b7 	bne.w	800857e <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4618      	mov	r0, r3
 8007c16:	f00b f9f3 	bl	8013000 <USB_ReadInterrupts>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	f000 84ad 	beq.w	800857c <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c28:	689b      	ldr	r3, [r3, #8]
 8007c2a:	0a1b      	lsrs	r3, r3, #8
 8007c2c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f00b f9e0 	bl	8013000 <USB_ReadInterrupts>
 8007c40:	4603      	mov	r3, r0
 8007c42:	f003 0302 	and.w	r3, r3, #2
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d107      	bne.n	8007c5a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	695a      	ldr	r2, [r3, #20]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f002 0202 	and.w	r2, r2, #2
 8007c58:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f00b f9ce 	bl	8013000 <USB_ReadInterrupts>
 8007c64:	4603      	mov	r3, r0
 8007c66:	f003 0310 	and.w	r3, r3, #16
 8007c6a:	2b10      	cmp	r3, #16
 8007c6c:	d161      	bne.n	8007d32 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	699a      	ldr	r2, [r3, #24]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f022 0210 	bic.w	r2, r2, #16
 8007c7c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	6a1b      	ldr	r3, [r3, #32]
 8007c82:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007c84:	69bb      	ldr	r3, [r7, #24]
 8007c86:	f003 020f 	and.w	r2, r3, #15
 8007c8a:	4613      	mov	r3, r2
 8007c8c:	00db      	lsls	r3, r3, #3
 8007c8e:	4413      	add	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	4413      	add	r3, r2
 8007c9a:	3304      	adds	r3, #4
 8007c9c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007c9e:	69bb      	ldr	r3, [r7, #24]
 8007ca0:	0c5b      	lsrs	r3, r3, #17
 8007ca2:	f003 030f 	and.w	r3, r3, #15
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d124      	bne.n	8007cf4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007caa:	69ba      	ldr	r2, [r7, #24]
 8007cac:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d035      	beq.n	8007d22 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007cba:	69bb      	ldr	r3, [r7, #24]
 8007cbc:	091b      	lsrs	r3, r3, #4
 8007cbe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007cc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	6a38      	ldr	r0, [r7, #32]
 8007cca:	f00b f805 	bl	8012cd8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	68da      	ldr	r2, [r3, #12]
 8007cd2:	69bb      	ldr	r3, [r7, #24]
 8007cd4:	091b      	lsrs	r3, r3, #4
 8007cd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007cda:	441a      	add	r2, r3
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	695a      	ldr	r2, [r3, #20]
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	091b      	lsrs	r3, r3, #4
 8007ce8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007cec:	441a      	add	r2, r3
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	615a      	str	r2, [r3, #20]
 8007cf2:	e016      	b.n	8007d22 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	0c5b      	lsrs	r3, r3, #17
 8007cf8:	f003 030f 	and.w	r3, r3, #15
 8007cfc:	2b06      	cmp	r3, #6
 8007cfe:	d110      	bne.n	8007d22 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007d06:	2208      	movs	r2, #8
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6a38      	ldr	r0, [r7, #32]
 8007d0c:	f00a ffe4 	bl	8012cd8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	695a      	ldr	r2, [r3, #20]
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	091b      	lsrs	r3, r3, #4
 8007d18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d1c:	441a      	add	r2, r3
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	699a      	ldr	r2, [r3, #24]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f042 0210 	orr.w	r2, r2, #16
 8007d30:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f00b f962 	bl	8013000 <USB_ReadInterrupts>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d42:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007d46:	f040 80a7 	bne.w	8007e98 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f00b f967 	bl	8013026 <USB_ReadDevAllOutEpInterrupt>
 8007d58:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007d5a:	e099      	b.n	8007e90 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f000 808e 	beq.w	8007e84 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d6e:	b2d2      	uxtb	r2, r2
 8007d70:	4611      	mov	r1, r2
 8007d72:	4618      	mov	r0, r3
 8007d74:	f00b f98b 	bl	801308e <USB_ReadDevOutEPInterrupt>
 8007d78:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f003 0301 	and.w	r3, r3, #1
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00c      	beq.n	8007d9e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d90:	461a      	mov	r2, r3
 8007d92:	2301      	movs	r3, #1
 8007d94:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007d96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 fed1 	bl	8008b40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	f003 0308 	and.w	r3, r3, #8
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00c      	beq.n	8007dc2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	69fb      	ldr	r3, [r7, #28]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db4:	461a      	mov	r2, r3
 8007db6:	2308      	movs	r3, #8
 8007db8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007dba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 ffa7 	bl	8008d10 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	f003 0310 	and.w	r3, r3, #16
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d008      	beq.n	8007dde <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dce:	015a      	lsls	r2, r3, #5
 8007dd0:	69fb      	ldr	r3, [r7, #28]
 8007dd2:	4413      	add	r3, r2
 8007dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd8:	461a      	mov	r2, r3
 8007dda:	2310      	movs	r3, #16
 8007ddc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	f003 0302 	and.w	r3, r3, #2
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d030      	beq.n	8007e4a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007de8:	6a3b      	ldr	r3, [r7, #32]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df0:	2b80      	cmp	r3, #128	; 0x80
 8007df2:	d109      	bne.n	8007e08 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	69fa      	ldr	r2, [r7, #28]
 8007dfe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e06:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e0a:	4613      	mov	r3, r2
 8007e0c:	00db      	lsls	r3, r3, #3
 8007e0e:	4413      	add	r3, r2
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007e16:	687a      	ldr	r2, [r7, #4]
 8007e18:	4413      	add	r3, r2
 8007e1a:	3304      	adds	r3, #4
 8007e1c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	78db      	ldrb	r3, [r3, #3]
 8007e22:	2b01      	cmp	r3, #1
 8007e24:	d108      	bne.n	8007e38 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f00d ffa8 	bl	8015d88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e44:	461a      	mov	r2, r3
 8007e46:	2302      	movs	r3, #2
 8007e48:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	f003 0320 	and.w	r3, r3, #32
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d008      	beq.n	8007e66 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e56:	015a      	lsls	r2, r3, #5
 8007e58:	69fb      	ldr	r3, [r7, #28]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e60:	461a      	mov	r2, r3
 8007e62:	2320      	movs	r3, #32
 8007e64:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d009      	beq.n	8007e84 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e82:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	3301      	adds	r3, #1
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8c:	085b      	lsrs	r3, r3, #1
 8007e8e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	f47f af62 	bne.w	8007d5c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f00b f8af 	bl	8013000 <USB_ReadInterrupts>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ea8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007eac:	f040 80db 	bne.w	8008066 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f00b f8d0 	bl	801305a <USB_ReadDevAllInEpInterrupt>
 8007eba:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007ec0:	e0cd      	b.n	800805e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ec4:	f003 0301 	and.w	r3, r3, #1
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	f000 80c2 	beq.w	8008052 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ed4:	b2d2      	uxtb	r2, r2
 8007ed6:	4611      	mov	r1, r2
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f00b f8f6 	bl	80130ca <USB_ReadDevInEPInterrupt>
 8007ede:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	f003 0301 	and.w	r3, r3, #1
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d057      	beq.n	8007f9a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eec:	f003 030f 	and.w	r3, r3, #15
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ef6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007efe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	43db      	mvns	r3, r3
 8007f04:	69f9      	ldr	r1, [r7, #28]
 8007f06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	2b01      	cmp	r3, #1
 8007f26:	d132      	bne.n	8007f8e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007f28:	6879      	ldr	r1, [r7, #4]
 8007f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f2c:	4613      	mov	r3, r2
 8007f2e:	00db      	lsls	r3, r3, #3
 8007f30:	4413      	add	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	440b      	add	r3, r1
 8007f36:	3348      	adds	r3, #72	; 0x48
 8007f38:	6819      	ldr	r1, [r3, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f3e:	4613      	mov	r3, r2
 8007f40:	00db      	lsls	r3, r3, #3
 8007f42:	4413      	add	r3, r2
 8007f44:	009b      	lsls	r3, r3, #2
 8007f46:	4403      	add	r3, r0
 8007f48:	3344      	adds	r3, #68	; 0x44
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4419      	add	r1, r3
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f52:	4613      	mov	r3, r2
 8007f54:	00db      	lsls	r3, r3, #3
 8007f56:	4413      	add	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4403      	add	r3, r0
 8007f5c:	3348      	adds	r3, #72	; 0x48
 8007f5e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d113      	bne.n	8007f8e <HAL_PCD_IRQHandler+0x3a2>
 8007f66:	6879      	ldr	r1, [r7, #4]
 8007f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f6a:	4613      	mov	r3, r2
 8007f6c:	00db      	lsls	r3, r3, #3
 8007f6e:	4413      	add	r3, r2
 8007f70:	009b      	lsls	r3, r3, #2
 8007f72:	440b      	add	r3, r1
 8007f74:	334c      	adds	r3, #76	; 0x4c
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d108      	bne.n	8007f8e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6818      	ldr	r0, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007f86:	461a      	mov	r2, r3
 8007f88:	2101      	movs	r1, #1
 8007f8a:	f00b f8ff 	bl	801318c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f00d fe72 	bl	8015c7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f003 0308 	and.w	r3, r3, #8
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d008      	beq.n	8007fb6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa6:	015a      	lsls	r2, r3, #5
 8007fa8:	69fb      	ldr	r3, [r7, #28]
 8007faa:	4413      	add	r3, r2
 8007fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	2308      	movs	r3, #8
 8007fb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	f003 0310 	and.w	r3, r3, #16
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d008      	beq.n	8007fd2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fcc:	461a      	mov	r2, r3
 8007fce:	2310      	movs	r3, #16
 8007fd0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d008      	beq.n	8007fee <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fde:	015a      	lsls	r2, r3, #5
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fe8:	461a      	mov	r2, r3
 8007fea:	2340      	movs	r3, #64	; 0x40
 8007fec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	f003 0302 	and.w	r3, r3, #2
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d023      	beq.n	8008040 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007ff8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ffa:	6a38      	ldr	r0, [r7, #32]
 8007ffc:	f00a f8de 	bl	80121bc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008002:	4613      	mov	r3, r2
 8008004:	00db      	lsls	r3, r3, #3
 8008006:	4413      	add	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	3338      	adds	r3, #56	; 0x38
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	4413      	add	r3, r2
 8008010:	3304      	adds	r3, #4
 8008012:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	78db      	ldrb	r3, [r3, #3]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d108      	bne.n	800802e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	2200      	movs	r2, #0
 8008020:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	b2db      	uxtb	r3, r3
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f00d febf 	bl	8015dac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	015a      	lsls	r2, r3, #5
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	4413      	add	r3, r2
 8008036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800803a:	461a      	mov	r2, r3
 800803c:	2302      	movs	r3, #2
 800803e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008046:	2b00      	cmp	r3, #0
 8008048:	d003      	beq.n	8008052 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800804a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fcea 	bl	8008a26 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	3301      	adds	r3, #1
 8008056:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805a:	085b      	lsrs	r3, r3, #1
 800805c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800805e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008060:	2b00      	cmp	r3, #0
 8008062:	f47f af2e 	bne.w	8007ec2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4618      	mov	r0, r3
 800806c:	f00a ffc8 	bl	8013000 <USB_ReadInterrupts>
 8008070:	4603      	mov	r3, r0
 8008072:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800807a:	d122      	bne.n	80080c2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	69fa      	ldr	r2, [r7, #28]
 8008086:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800808a:	f023 0301 	bic.w	r3, r3, #1
 800808e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008096:	2b01      	cmp	r3, #1
 8008098:	d108      	bne.n	80080ac <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80080a2:	2100      	movs	r1, #0
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fef5 	bl	8008e94 <HAL_PCDEx_LPM_Callback>
 80080aa:	e002      	b.n	80080b2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f00d fe5d 	bl	8015d6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	695a      	ldr	r2, [r3, #20]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80080c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4618      	mov	r0, r3
 80080c8:	f00a ff9a 	bl	8013000 <USB_ReadInterrupts>
 80080cc:	4603      	mov	r3, r0
 80080ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080d6:	d112      	bne.n	80080fe <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80080d8:	69fb      	ldr	r3, [r7, #28]
 80080da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f003 0301 	and.w	r3, r3, #1
 80080e4:	2b01      	cmp	r3, #1
 80080e6:	d102      	bne.n	80080ee <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f00d fe19 	bl	8015d20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	695a      	ldr	r2, [r3, #20]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80080fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4618      	mov	r0, r3
 8008104:	f00a ff7c 	bl	8013000 <USB_ReadInterrupts>
 8008108:	4603      	mov	r3, r0
 800810a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800810e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008112:	d121      	bne.n	8008158 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	695a      	ldr	r2, [r3, #20]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008122:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800812a:	2b00      	cmp	r3, #0
 800812c:	d111      	bne.n	8008152 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2201      	movs	r2, #1
 8008132:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800813c:	089b      	lsrs	r3, r3, #2
 800813e:	f003 020f 	and.w	r2, r3, #15
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008148:	2101      	movs	r1, #1
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f000 fea2 	bl	8008e94 <HAL_PCDEx_LPM_Callback>
 8008150:	e002      	b.n	8008158 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f00d fde4 	bl	8015d20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4618      	mov	r0, r3
 800815e:	f00a ff4f 	bl	8013000 <USB_ReadInterrupts>
 8008162:	4603      	mov	r3, r0
 8008164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800816c:	f040 80b7 	bne.w	80082de <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008170:	69fb      	ldr	r3, [r7, #28]
 8008172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	69fa      	ldr	r2, [r7, #28]
 800817a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800817e:	f023 0301 	bic.w	r3, r3, #1
 8008182:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2110      	movs	r1, #16
 800818a:	4618      	mov	r0, r3
 800818c:	f00a f816 	bl	80121bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008190:	2300      	movs	r3, #0
 8008192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008194:	e046      	b.n	8008224 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008198:	015a      	lsls	r2, r3, #5
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	4413      	add	r3, r2
 800819e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081a2:	461a      	mov	r2, r3
 80081a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80081a8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80081aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081ac:	015a      	lsls	r2, r3, #5
 80081ae:	69fb      	ldr	r3, [r7, #28]
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081ba:	0151      	lsls	r1, r2, #5
 80081bc:	69fa      	ldr	r2, [r7, #28]
 80081be:	440a      	add	r2, r1
 80081c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80081c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80081c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80081ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081cc:	015a      	lsls	r2, r3, #5
 80081ce:	69fb      	ldr	r3, [r7, #28]
 80081d0:	4413      	add	r3, r2
 80081d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081d6:	461a      	mov	r2, r3
 80081d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80081dc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80081de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e0:	015a      	lsls	r2, r3, #5
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	4413      	add	r3, r2
 80081e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081ee:	0151      	lsls	r1, r2, #5
 80081f0:	69fa      	ldr	r2, [r7, #28]
 80081f2:	440a      	add	r2, r1
 80081f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80081fc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80081fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008200:	015a      	lsls	r2, r3, #5
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	4413      	add	r3, r2
 8008206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800820e:	0151      	lsls	r1, r2, #5
 8008210:	69fa      	ldr	r2, [r7, #28]
 8008212:	440a      	add	r2, r1
 8008214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008218:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800821c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800821e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008220:	3301      	adds	r3, #1
 8008222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800822a:	429a      	cmp	r2, r3
 800822c:	d3b3      	bcc.n	8008196 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008234:	69db      	ldr	r3, [r3, #28]
 8008236:	69fa      	ldr	r2, [r7, #28]
 8008238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800823c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008240:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008246:	2b00      	cmp	r3, #0
 8008248:	d016      	beq.n	8008278 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008250:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008254:	69fa      	ldr	r2, [r7, #28]
 8008256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800825a:	f043 030b 	orr.w	r3, r3, #11
 800825e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008262:	69fb      	ldr	r3, [r7, #28]
 8008264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800826a:	69fa      	ldr	r2, [r7, #28]
 800826c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008270:	f043 030b 	orr.w	r3, r3, #11
 8008274:	6453      	str	r3, [r2, #68]	; 0x44
 8008276:	e015      	b.n	80082a4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008278:	69fb      	ldr	r3, [r7, #28]
 800827a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800827e:	695a      	ldr	r2, [r3, #20]
 8008280:	69fb      	ldr	r3, [r7, #28]
 8008282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008286:	4619      	mov	r1, r3
 8008288:	f242 032b 	movw	r3, #8235	; 0x202b
 800828c:	4313      	orrs	r3, r2
 800828e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	69fa      	ldr	r2, [r7, #28]
 800829a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800829e:	f043 030b 	orr.w	r3, r3, #11
 80082a2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	69fa      	ldr	r2, [r7, #28]
 80082ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082b2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80082b6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6818      	ldr	r0, [r3, #0]
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80082c8:	461a      	mov	r2, r3
 80082ca:	f00a ff5f 	bl	801318c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	695a      	ldr	r2, [r3, #20]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80082dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f00a fe8c 	bl	8013000 <USB_ReadInterrupts>
 80082e8:	4603      	mov	r3, r0
 80082ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082f2:	d124      	bne.n	800833e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	4618      	mov	r0, r3
 80082fa:	f00a ff23 	bl	8013144 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4618      	mov	r0, r3
 8008304:	f009 ffd7 	bl	80122b6 <USB_GetDevSpeed>
 8008308:	4603      	mov	r3, r0
 800830a:	461a      	mov	r2, r3
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681c      	ldr	r4, [r3, #0]
 8008314:	f001 fd88 	bl	8009e28 <HAL_RCC_GetHCLKFreq>
 8008318:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800831e:	b2db      	uxtb	r3, r3
 8008320:	461a      	mov	r2, r3
 8008322:	4620      	mov	r0, r4
 8008324:	f009 fcdc 	bl	8011ce0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f00d fcd0 	bl	8015cce <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	695a      	ldr	r2, [r3, #20]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800833c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4618      	mov	r0, r3
 8008344:	f00a fe5c 	bl	8013000 <USB_ReadInterrupts>
 8008348:	4603      	mov	r3, r0
 800834a:	f003 0308 	and.w	r3, r3, #8
 800834e:	2b08      	cmp	r3, #8
 8008350:	d10a      	bne.n	8008368 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f00d fcad 	bl	8015cb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	695a      	ldr	r2, [r3, #20]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f002 0208 	and.w	r2, r2, #8
 8008366:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4618      	mov	r0, r3
 800836e:	f00a fe47 	bl	8013000 <USB_ReadInterrupts>
 8008372:	4603      	mov	r3, r0
 8008374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008378:	2b80      	cmp	r3, #128	; 0x80
 800837a:	d122      	bne.n	80083c2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800837c:	6a3b      	ldr	r3, [r7, #32]
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008384:	6a3b      	ldr	r3, [r7, #32]
 8008386:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008388:	2301      	movs	r3, #1
 800838a:	627b      	str	r3, [r7, #36]	; 0x24
 800838c:	e014      	b.n	80083b8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800838e:	6879      	ldr	r1, [r7, #4]
 8008390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008392:	4613      	mov	r3, r2
 8008394:	00db      	lsls	r3, r3, #3
 8008396:	4413      	add	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	440b      	add	r3, r1
 800839c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	2b01      	cmp	r3, #1
 80083a4:	d105      	bne.n	80083b2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fb09 	bl	80089c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80083b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b4:	3301      	adds	r3, #1
 80083b6:	627b      	str	r3, [r7, #36]	; 0x24
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	685b      	ldr	r3, [r3, #4]
 80083bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083be:	429a      	cmp	r2, r3
 80083c0:	d3e5      	bcc.n	800838e <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f00a fe1a 	bl	8013000 <USB_ReadInterrupts>
 80083cc:	4603      	mov	r3, r0
 80083ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083d6:	d13b      	bne.n	8008450 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80083d8:	2301      	movs	r3, #1
 80083da:	627b      	str	r3, [r7, #36]	; 0x24
 80083dc:	e02b      	b.n	8008436 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	015a      	lsls	r2, r3, #5
 80083e2:	69fb      	ldr	r3, [r7, #28]
 80083e4:	4413      	add	r3, r2
 80083e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f2:	4613      	mov	r3, r2
 80083f4:	00db      	lsls	r3, r3, #3
 80083f6:	4413      	add	r3, r2
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	440b      	add	r3, r1
 80083fc:	3340      	adds	r3, #64	; 0x40
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	2b01      	cmp	r3, #1
 8008402:	d115      	bne.n	8008430 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008404:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008406:	2b00      	cmp	r3, #0
 8008408:	da12      	bge.n	8008430 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800840a:	6879      	ldr	r1, [r7, #4]
 800840c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800840e:	4613      	mov	r3, r2
 8008410:	00db      	lsls	r3, r3, #3
 8008412:	4413      	add	r3, r2
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	440b      	add	r3, r1
 8008418:	333f      	adds	r3, #63	; 0x3f
 800841a:	2201      	movs	r2, #1
 800841c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800841e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008420:	b2db      	uxtb	r3, r3
 8008422:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008426:	b2db      	uxtb	r3, r3
 8008428:	4619      	mov	r1, r3
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 faca 	bl	80089c4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	3301      	adds	r3, #1
 8008434:	627b      	str	r3, [r7, #36]	; 0x24
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800843c:	429a      	cmp	r2, r3
 800843e:	d3ce      	bcc.n	80083de <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	695a      	ldr	r2, [r3, #20]
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800844e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4618      	mov	r0, r3
 8008456:	f00a fdd3 	bl	8013000 <USB_ReadInterrupts>
 800845a:	4603      	mov	r3, r0
 800845c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008460:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008464:	d155      	bne.n	8008512 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008466:	2301      	movs	r3, #1
 8008468:	627b      	str	r3, [r7, #36]	; 0x24
 800846a:	e045      	b.n	80084f8 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	4413      	add	r3, r2
 8008474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800847c:	6879      	ldr	r1, [r7, #4]
 800847e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008480:	4613      	mov	r3, r2
 8008482:	00db      	lsls	r3, r3, #3
 8008484:	4413      	add	r3, r2
 8008486:	009b      	lsls	r3, r3, #2
 8008488:	440b      	add	r3, r1
 800848a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d12e      	bne.n	80084f2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008494:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008496:	2b00      	cmp	r3, #0
 8008498:	da2b      	bge.n	80084f2 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80084a6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80084aa:	429a      	cmp	r2, r3
 80084ac:	d121      	bne.n	80084f2 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80084ae:	6879      	ldr	r1, [r7, #4]
 80084b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084b2:	4613      	mov	r3, r2
 80084b4:	00db      	lsls	r3, r3, #3
 80084b6:	4413      	add	r3, r2
 80084b8:	009b      	lsls	r3, r3, #2
 80084ba:	440b      	add	r3, r1
 80084bc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80084c0:	2201      	movs	r2, #1
 80084c2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	699b      	ldr	r3, [r3, #24]
 80084c8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80084d0:	6a3b      	ldr	r3, [r7, #32]
 80084d2:	695b      	ldr	r3, [r3, #20]
 80084d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d10a      	bne.n	80084f2 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80084dc:	69fb      	ldr	r3, [r7, #28]
 80084de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	69fa      	ldr	r2, [r7, #28]
 80084e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084ee:	6053      	str	r3, [r2, #4]
            break;
 80084f0:	e007      	b.n	8008502 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80084f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f4:	3301      	adds	r3, #1
 80084f6:	627b      	str	r3, [r7, #36]	; 0x24
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084fe:	429a      	cmp	r2, r3
 8008500:	d3b4      	bcc.n	800846c <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	695a      	ldr	r2, [r3, #20]
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008510:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4618      	mov	r0, r3
 8008518:	f00a fd72 	bl	8013000 <USB_ReadInterrupts>
 800851c:	4603      	mov	r3, r0
 800851e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008526:	d10a      	bne.n	800853e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f00d fc51 	bl	8015dd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	695a      	ldr	r2, [r3, #20]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800853c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4618      	mov	r0, r3
 8008544:	f00a fd5c 	bl	8013000 <USB_ReadInterrupts>
 8008548:	4603      	mov	r3, r0
 800854a:	f003 0304 	and.w	r3, r3, #4
 800854e:	2b04      	cmp	r3, #4
 8008550:	d115      	bne.n	800857e <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	f003 0304 	and.w	r3, r3, #4
 8008560:	2b00      	cmp	r3, #0
 8008562:	d002      	beq.n	800856a <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f00d fc41 	bl	8015dec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	6859      	ldr	r1, [r3, #4]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	69ba      	ldr	r2, [r7, #24]
 8008576:	430a      	orrs	r2, r1
 8008578:	605a      	str	r2, [r3, #4]
 800857a:	e000      	b.n	800857e <HAL_PCD_IRQHandler+0x992>
      return;
 800857c:	bf00      	nop
    }
  }
}
 800857e:	3734      	adds	r7, #52	; 0x34
 8008580:	46bd      	mov	sp, r7
 8008582:	bd90      	pop	{r4, r7, pc}

08008584 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	460b      	mov	r3, r1
 800858e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008596:	2b01      	cmp	r3, #1
 8008598:	d101      	bne.n	800859e <HAL_PCD_SetAddress+0x1a>
 800859a:	2302      	movs	r3, #2
 800859c:	e013      	b.n	80085c6 <HAL_PCD_SetAddress+0x42>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	78fa      	ldrb	r2, [r7, #3]
 80085aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	78fa      	ldrb	r2, [r7, #3]
 80085b4:	4611      	mov	r1, r2
 80085b6:	4618      	mov	r0, r3
 80085b8:	f00a fcba 	bl	8012f30 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80085c4:	2300      	movs	r3, #0
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3708      	adds	r7, #8
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}

080085ce <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80085ce:	b580      	push	{r7, lr}
 80085d0:	b084      	sub	sp, #16
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	6078      	str	r0, [r7, #4]
 80085d6:	4608      	mov	r0, r1
 80085d8:	4611      	mov	r1, r2
 80085da:	461a      	mov	r2, r3
 80085dc:	4603      	mov	r3, r0
 80085de:	70fb      	strb	r3, [r7, #3]
 80085e0:	460b      	mov	r3, r1
 80085e2:	803b      	strh	r3, [r7, #0]
 80085e4:	4613      	mov	r3, r2
 80085e6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80085ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	da0f      	bge.n	8008614 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80085f4:	78fb      	ldrb	r3, [r7, #3]
 80085f6:	f003 020f 	and.w	r2, r3, #15
 80085fa:	4613      	mov	r3, r2
 80085fc:	00db      	lsls	r3, r3, #3
 80085fe:	4413      	add	r3, r2
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	3338      	adds	r3, #56	; 0x38
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	4413      	add	r3, r2
 8008608:	3304      	adds	r3, #4
 800860a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2201      	movs	r2, #1
 8008610:	705a      	strb	r2, [r3, #1]
 8008612:	e00f      	b.n	8008634 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008614:	78fb      	ldrb	r3, [r7, #3]
 8008616:	f003 020f 	and.w	r2, r3, #15
 800861a:	4613      	mov	r3, r2
 800861c:	00db      	lsls	r3, r3, #3
 800861e:	4413      	add	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	4413      	add	r3, r2
 800862a:	3304      	adds	r3, #4
 800862c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008634:	78fb      	ldrb	r3, [r7, #3]
 8008636:	f003 030f 	and.w	r3, r3, #15
 800863a:	b2da      	uxtb	r2, r3
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008640:	883a      	ldrh	r2, [r7, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	78ba      	ldrb	r2, [r7, #2]
 800864a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	785b      	ldrb	r3, [r3, #1]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d004      	beq.n	800865e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	781b      	ldrb	r3, [r3, #0]
 8008658:	b29a      	uxth	r2, r3
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800865e:	78bb      	ldrb	r3, [r7, #2]
 8008660:	2b02      	cmp	r3, #2
 8008662:	d102      	bne.n	800866a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008670:	2b01      	cmp	r3, #1
 8008672:	d101      	bne.n	8008678 <HAL_PCD_EP_Open+0xaa>
 8008674:	2302      	movs	r3, #2
 8008676:	e00e      	b.n	8008696 <HAL_PCD_EP_Open+0xc8>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	68f9      	ldr	r1, [r7, #12]
 8008686:	4618      	mov	r0, r3
 8008688:	f009 fe3a 	bl	8012300 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008694:	7afb      	ldrb	r3, [r7, #11]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	460b      	mov	r3, r1
 80086a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80086aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	da0f      	bge.n	80086d2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086b2:	78fb      	ldrb	r3, [r7, #3]
 80086b4:	f003 020f 	and.w	r2, r3, #15
 80086b8:	4613      	mov	r3, r2
 80086ba:	00db      	lsls	r3, r3, #3
 80086bc:	4413      	add	r3, r2
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	3338      	adds	r3, #56	; 0x38
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	4413      	add	r3, r2
 80086c6:	3304      	adds	r3, #4
 80086c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2201      	movs	r2, #1
 80086ce:	705a      	strb	r2, [r3, #1]
 80086d0:	e00f      	b.n	80086f2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086d2:	78fb      	ldrb	r3, [r7, #3]
 80086d4:	f003 020f 	and.w	r2, r3, #15
 80086d8:	4613      	mov	r3, r2
 80086da:	00db      	lsls	r3, r3, #3
 80086dc:	4413      	add	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	4413      	add	r3, r2
 80086e8:	3304      	adds	r3, #4
 80086ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2200      	movs	r2, #0
 80086f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80086f2:	78fb      	ldrb	r3, [r7, #3]
 80086f4:	f003 030f 	and.w	r3, r3, #15
 80086f8:	b2da      	uxtb	r2, r3
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008704:	2b01      	cmp	r3, #1
 8008706:	d101      	bne.n	800870c <HAL_PCD_EP_Close+0x6e>
 8008708:	2302      	movs	r3, #2
 800870a:	e00e      	b.n	800872a <HAL_PCD_EP_Close+0x8c>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	68f9      	ldr	r1, [r7, #12]
 800871a:	4618      	mov	r0, r3
 800871c:	f009 fe78 	bl	8012410 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b086      	sub	sp, #24
 8008736:	af00      	add	r7, sp, #0
 8008738:	60f8      	str	r0, [r7, #12]
 800873a:	607a      	str	r2, [r7, #4]
 800873c:	603b      	str	r3, [r7, #0]
 800873e:	460b      	mov	r3, r1
 8008740:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008742:	7afb      	ldrb	r3, [r7, #11]
 8008744:	f003 020f 	and.w	r2, r3, #15
 8008748:	4613      	mov	r3, r2
 800874a:	00db      	lsls	r3, r3, #3
 800874c:	4413      	add	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	4413      	add	r3, r2
 8008758:	3304      	adds	r3, #4
 800875a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	2200      	movs	r2, #0
 800876c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	2200      	movs	r2, #0
 8008772:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008774:	7afb      	ldrb	r3, [r7, #11]
 8008776:	f003 030f 	and.w	r3, r3, #15
 800877a:	b2da      	uxtb	r2, r3
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	68db      	ldr	r3, [r3, #12]
 8008784:	2b01      	cmp	r3, #1
 8008786:	d102      	bne.n	800878e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008788:	687a      	ldr	r2, [r7, #4]
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	6818      	ldr	r0, [r3, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	b2db      	uxtb	r3, r3
 8008798:	461a      	mov	r2, r3
 800879a:	6979      	ldr	r1, [r7, #20]
 800879c:	f009 ff14 	bl	80125c8 <USB_EPStartXfer>

  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3718      	adds	r7, #24
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}

080087aa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80087aa:	b480      	push	{r7}
 80087ac:	b083      	sub	sp, #12
 80087ae:	af00      	add	r7, sp, #0
 80087b0:	6078      	str	r0, [r7, #4]
 80087b2:	460b      	mov	r3, r1
 80087b4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80087b6:	78fb      	ldrb	r3, [r7, #3]
 80087b8:	f003 020f 	and.w	r2, r3, #15
 80087bc:	6879      	ldr	r1, [r7, #4]
 80087be:	4613      	mov	r3, r2
 80087c0:	00db      	lsls	r3, r3, #3
 80087c2:	4413      	add	r3, r2
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	440b      	add	r3, r1
 80087c8:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80087cc:	681b      	ldr	r3, [r3, #0]
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	370c      	adds	r7, #12
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr

080087da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80087da:	b580      	push	{r7, lr}
 80087dc:	b086      	sub	sp, #24
 80087de:	af00      	add	r7, sp, #0
 80087e0:	60f8      	str	r0, [r7, #12]
 80087e2:	607a      	str	r2, [r7, #4]
 80087e4:	603b      	str	r3, [r7, #0]
 80087e6:	460b      	mov	r3, r1
 80087e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087ea:	7afb      	ldrb	r3, [r7, #11]
 80087ec:	f003 020f 	and.w	r2, r3, #15
 80087f0:	4613      	mov	r3, r2
 80087f2:	00db      	lsls	r3, r3, #3
 80087f4:	4413      	add	r3, r2
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	3338      	adds	r3, #56	; 0x38
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	4413      	add	r3, r2
 80087fe:	3304      	adds	r3, #4
 8008800:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	683a      	ldr	r2, [r7, #0]
 800880c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2200      	movs	r2, #0
 8008812:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	2201      	movs	r2, #1
 8008818:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800881a:	7afb      	ldrb	r3, [r7, #11]
 800881c:	f003 030f 	and.w	r3, r3, #15
 8008820:	b2da      	uxtb	r2, r3
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d102      	bne.n	8008834 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6818      	ldr	r0, [r3, #0]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	b2db      	uxtb	r3, r3
 800883e:	461a      	mov	r2, r3
 8008840:	6979      	ldr	r1, [r7, #20]
 8008842:	f009 fec1 	bl	80125c8 <USB_EPStartXfer>

  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	460b      	mov	r3, r1
 800885a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800885c:	78fb      	ldrb	r3, [r7, #3]
 800885e:	f003 020f 	and.w	r2, r3, #15
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	429a      	cmp	r2, r3
 8008868:	d901      	bls.n	800886e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e050      	b.n	8008910 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800886e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008872:	2b00      	cmp	r3, #0
 8008874:	da0f      	bge.n	8008896 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008876:	78fb      	ldrb	r3, [r7, #3]
 8008878:	f003 020f 	and.w	r2, r3, #15
 800887c:	4613      	mov	r3, r2
 800887e:	00db      	lsls	r3, r3, #3
 8008880:	4413      	add	r3, r2
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	3338      	adds	r3, #56	; 0x38
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	4413      	add	r3, r2
 800888a:	3304      	adds	r3, #4
 800888c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2201      	movs	r2, #1
 8008892:	705a      	strb	r2, [r3, #1]
 8008894:	e00d      	b.n	80088b2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008896:	78fa      	ldrb	r2, [r7, #3]
 8008898:	4613      	mov	r3, r2
 800889a:	00db      	lsls	r3, r3, #3
 800889c:	4413      	add	r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	4413      	add	r3, r2
 80088a8:	3304      	adds	r3, #4
 80088aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2200      	movs	r2, #0
 80088b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2201      	movs	r2, #1
 80088b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80088b8:	78fb      	ldrb	r3, [r7, #3]
 80088ba:	f003 030f 	and.w	r3, r3, #15
 80088be:	b2da      	uxtb	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80088ca:	2b01      	cmp	r3, #1
 80088cc:	d101      	bne.n	80088d2 <HAL_PCD_EP_SetStall+0x82>
 80088ce:	2302      	movs	r3, #2
 80088d0:	e01e      	b.n	8008910 <HAL_PCD_EP_SetStall+0xc0>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68f9      	ldr	r1, [r7, #12]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f00a fa51 	bl	8012d88 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80088e6:	78fb      	ldrb	r3, [r7, #3]
 80088e8:	f003 030f 	and.w	r3, r3, #15
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10a      	bne.n	8008906 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6818      	ldr	r0, [r3, #0]
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	b2d9      	uxtb	r1, r3
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008900:	461a      	mov	r2, r3
 8008902:	f00a fc43 	bl	801318c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800890e:	2300      	movs	r3, #0
}
 8008910:	4618      	mov	r0, r3
 8008912:	3710      	adds	r7, #16
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	460b      	mov	r3, r1
 8008922:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008924:	78fb      	ldrb	r3, [r7, #3]
 8008926:	f003 020f 	and.w	r2, r3, #15
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	429a      	cmp	r2, r3
 8008930:	d901      	bls.n	8008936 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e042      	b.n	80089bc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008936:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800893a:	2b00      	cmp	r3, #0
 800893c:	da0f      	bge.n	800895e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800893e:	78fb      	ldrb	r3, [r7, #3]
 8008940:	f003 020f 	and.w	r2, r3, #15
 8008944:	4613      	mov	r3, r2
 8008946:	00db      	lsls	r3, r3, #3
 8008948:	4413      	add	r3, r2
 800894a:	009b      	lsls	r3, r3, #2
 800894c:	3338      	adds	r3, #56	; 0x38
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	4413      	add	r3, r2
 8008952:	3304      	adds	r3, #4
 8008954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2201      	movs	r2, #1
 800895a:	705a      	strb	r2, [r3, #1]
 800895c:	e00f      	b.n	800897e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800895e:	78fb      	ldrb	r3, [r7, #3]
 8008960:	f003 020f 	and.w	r2, r3, #15
 8008964:	4613      	mov	r3, r2
 8008966:	00db      	lsls	r3, r3, #3
 8008968:	4413      	add	r3, r2
 800896a:	009b      	lsls	r3, r3, #2
 800896c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008970:	687a      	ldr	r2, [r7, #4]
 8008972:	4413      	add	r3, r2
 8008974:	3304      	adds	r3, #4
 8008976:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	2200      	movs	r2, #0
 800897c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008984:	78fb      	ldrb	r3, [r7, #3]
 8008986:	f003 030f 	and.w	r3, r3, #15
 800898a:	b2da      	uxtb	r2, r3
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008996:	2b01      	cmp	r3, #1
 8008998:	d101      	bne.n	800899e <HAL_PCD_EP_ClrStall+0x86>
 800899a:	2302      	movs	r3, #2
 800899c:	e00e      	b.n	80089bc <HAL_PCD_EP_ClrStall+0xa4>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2201      	movs	r2, #1
 80089a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68f9      	ldr	r1, [r7, #12]
 80089ac:	4618      	mov	r0, r3
 80089ae:	f00a fa59 	bl	8012e64 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	460b      	mov	r3, r1
 80089ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80089d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	da0c      	bge.n	80089f2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089d8:	78fb      	ldrb	r3, [r7, #3]
 80089da:	f003 020f 	and.w	r2, r3, #15
 80089de:	4613      	mov	r3, r2
 80089e0:	00db      	lsls	r3, r3, #3
 80089e2:	4413      	add	r3, r2
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	3338      	adds	r3, #56	; 0x38
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	4413      	add	r3, r2
 80089ec:	3304      	adds	r3, #4
 80089ee:	60fb      	str	r3, [r7, #12]
 80089f0:	e00c      	b.n	8008a0c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80089f2:	78fb      	ldrb	r3, [r7, #3]
 80089f4:	f003 020f 	and.w	r2, r3, #15
 80089f8:	4613      	mov	r3, r2
 80089fa:	00db      	lsls	r3, r3, #3
 80089fc:	4413      	add	r3, r2
 80089fe:	009b      	lsls	r3, r3, #2
 8008a00:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	4413      	add	r3, r2
 8008a08:	3304      	adds	r3, #4
 8008a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68f9      	ldr	r1, [r7, #12]
 8008a12:	4618      	mov	r0, r3
 8008a14:	f00a f878 	bl	8012b08 <USB_EPStopXfer>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008a1c:	7afb      	ldrb	r3, [r7, #11]
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b08a      	sub	sp, #40	; 0x28
 8008a2a:	af02      	add	r7, sp, #8
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008a3a:	683a      	ldr	r2, [r7, #0]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	00db      	lsls	r3, r3, #3
 8008a40:	4413      	add	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	3338      	adds	r3, #56	; 0x38
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	4413      	add	r3, r2
 8008a4a:	3304      	adds	r3, #4
 8008a4c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	695a      	ldr	r2, [r3, #20]
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d901      	bls.n	8008a5e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	e06c      	b.n	8008b38 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	691a      	ldr	r2, [r3, #16]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	695b      	ldr	r3, [r3, #20]
 8008a66:	1ad3      	subs	r3, r2, r3
 8008a68:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	69fa      	ldr	r2, [r7, #28]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d902      	bls.n	8008a7a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	3303      	adds	r3, #3
 8008a7e:	089b      	lsrs	r3, r3, #2
 8008a80:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008a82:	e02b      	b.n	8008adc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	691a      	ldr	r2, [r3, #16]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	695b      	ldr	r3, [r3, #20]
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	69fa      	ldr	r2, [r7, #28]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d902      	bls.n	8008aa0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	3303      	adds	r3, #3
 8008aa4:	089b      	lsrs	r3, r3, #2
 8008aa6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	68d9      	ldr	r1, [r3, #12]
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	69fb      	ldr	r3, [r7, #28]
 8008ab2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	9300      	str	r3, [sp, #0]
 8008abc:	4603      	mov	r3, r0
 8008abe:	6978      	ldr	r0, [r7, #20]
 8008ac0:	f00a f8cc 	bl	8012c5c <USB_WritePacket>

    ep->xfer_buff  += len;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	68da      	ldr	r2, [r3, #12]
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	441a      	add	r2, r3
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	695a      	ldr	r2, [r3, #20]
 8008ad4:	69fb      	ldr	r3, [r7, #28]
 8008ad6:	441a      	add	r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	015a      	lsls	r2, r3, #5
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	4413      	add	r3, r2
 8008ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	69ba      	ldr	r2, [r7, #24]
 8008aee:	429a      	cmp	r2, r3
 8008af0:	d809      	bhi.n	8008b06 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	695a      	ldr	r2, [r3, #20]
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d203      	bcs.n	8008b06 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d1be      	bne.n	8008a84 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	691a      	ldr	r2, [r3, #16]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d811      	bhi.n	8008b36 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	f003 030f 	and.w	r3, r3, #15
 8008b18:	2201      	movs	r2, #1
 8008b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b1e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	43db      	mvns	r3, r3
 8008b2c:	6939      	ldr	r1, [r7, #16]
 8008b2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b32:	4013      	ands	r3, r2
 8008b34:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008b36:	2300      	movs	r3, #0
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3720      	adds	r7, #32
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b088      	sub	sp, #32
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	333c      	adds	r3, #60	; 0x3c
 8008b58:	3304      	adds	r3, #4
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d17b      	bne.n	8008c6e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	f003 0308 	and.w	r3, r3, #8
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d015      	beq.n	8008bac <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b80:	697b      	ldr	r3, [r7, #20]
 8008b82:	4a61      	ldr	r2, [pc, #388]	; (8008d08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	f240 80b9 	bls.w	8008cfc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	f000 80b3 	beq.w	8008cfc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	015a      	lsls	r2, r3, #5
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	4413      	add	r3, r2
 8008b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ba8:	6093      	str	r3, [r2, #8]
 8008baa:	e0a7      	b.n	8008cfc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008bac:	693b      	ldr	r3, [r7, #16]
 8008bae:	f003 0320 	and.w	r3, r3, #32
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d009      	beq.n	8008bca <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	015a      	lsls	r2, r3, #5
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	2320      	movs	r3, #32
 8008bc6:	6093      	str	r3, [r2, #8]
 8008bc8:	e098      	b.n	8008cfc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	f040 8093 	bne.w	8008cfc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008bd6:	697b      	ldr	r3, [r7, #20]
 8008bd8:	4a4b      	ldr	r2, [pc, #300]	; (8008d08 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d90f      	bls.n	8008bfe <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d00a      	beq.n	8008bfe <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	015a      	lsls	r2, r3, #5
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	4413      	add	r3, r2
 8008bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bfa:	6093      	str	r3, [r2, #8]
 8008bfc:	e07e      	b.n	8008cfc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008bfe:	683a      	ldr	r2, [r7, #0]
 8008c00:	4613      	mov	r3, r2
 8008c02:	00db      	lsls	r3, r3, #3
 8008c04:	4413      	add	r3, r2
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	4413      	add	r3, r2
 8008c10:	3304      	adds	r3, #4
 8008c12:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6a1a      	ldr	r2, [r3, #32]
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	0159      	lsls	r1, r3, #5
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	440b      	add	r3, r1
 8008c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c24:	691b      	ldr	r3, [r3, #16]
 8008c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c2a:	1ad2      	subs	r2, r2, r3
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d114      	bne.n	8008c60 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d109      	bne.n	8008c52 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6818      	ldr	r0, [r3, #0]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008c48:	461a      	mov	r2, r3
 8008c4a:	2101      	movs	r1, #1
 8008c4c:	f00a fa9e 	bl	801318c <USB_EP0_OutStart>
 8008c50:	e006      	b.n	8008c60 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	68da      	ldr	r2, [r3, #12]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	441a      	add	r2, r3
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	4619      	mov	r1, r3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f00c ffee 	bl	8015c48 <HAL_PCD_DataOutStageCallback>
 8008c6c:	e046      	b.n	8008cfc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	4a26      	ldr	r2, [pc, #152]	; (8008d0c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d124      	bne.n	8008cc0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00a      	beq.n	8008c96 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	015a      	lsls	r2, r3, #5
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	4413      	add	r3, r2
 8008c88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008c92:	6093      	str	r3, [r2, #8]
 8008c94:	e032      	b.n	8008cfc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008c96:	693b      	ldr	r3, [r7, #16]
 8008c98:	f003 0320 	and.w	r3, r3, #32
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d008      	beq.n	8008cb2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	015a      	lsls	r2, r3, #5
 8008ca4:	69bb      	ldr	r3, [r7, #24]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cac:	461a      	mov	r2, r3
 8008cae:	2320      	movs	r3, #32
 8008cb0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	b2db      	uxtb	r3, r3
 8008cb6:	4619      	mov	r1, r3
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f00c ffc5 	bl	8015c48 <HAL_PCD_DataOutStageCallback>
 8008cbe:	e01d      	b.n	8008cfc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d114      	bne.n	8008cf0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8008cc6:	6879      	ldr	r1, [r7, #4]
 8008cc8:	683a      	ldr	r2, [r7, #0]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	00db      	lsls	r3, r3, #3
 8008cce:	4413      	add	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	440b      	add	r3, r1
 8008cd4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d108      	bne.n	8008cf0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6818      	ldr	r0, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008ce8:	461a      	mov	r2, r3
 8008cea:	2100      	movs	r1, #0
 8008cec:	f00a fa4e 	bl	801318c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f00c ffa6 	bl	8015c48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3720      	adds	r7, #32
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop
 8008d08:	4f54300a 	.word	0x4f54300a
 8008d0c:	4f54310a 	.word	0x4f54310a

08008d10 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	333c      	adds	r3, #60	; 0x3c
 8008d28:	3304      	adds	r3, #4
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	015a      	lsls	r2, r3, #5
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	4413      	add	r3, r2
 8008d36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	4a15      	ldr	r2, [pc, #84]	; (8008d98 <PCD_EP_OutSetupPacket_int+0x88>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d90e      	bls.n	8008d64 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d009      	beq.n	8008d64 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	015a      	lsls	r2, r3, #5
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	4413      	add	r3, r2
 8008d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d62:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f00c ff5d 	bl	8015c24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	4a0a      	ldr	r2, [pc, #40]	; (8008d98 <PCD_EP_OutSetupPacket_int+0x88>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d90c      	bls.n	8008d8c <PCD_EP_OutSetupPacket_int+0x7c>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d108      	bne.n	8008d8c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6818      	ldr	r0, [r3, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008d84:	461a      	mov	r2, r3
 8008d86:	2101      	movs	r1, #1
 8008d88:	f00a fa00 	bl	801318c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3718      	adds	r7, #24
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	4f54300a 	.word	0x4f54300a

08008d9c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	460b      	mov	r3, r1
 8008da6:	70fb      	strb	r3, [r7, #3]
 8008da8:	4613      	mov	r3, r2
 8008daa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008db4:	78fb      	ldrb	r3, [r7, #3]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d107      	bne.n	8008dca <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008dba:	883b      	ldrh	r3, [r7, #0]
 8008dbc:	0419      	lsls	r1, r3, #16
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68ba      	ldr	r2, [r7, #8]
 8008dc4:	430a      	orrs	r2, r1
 8008dc6:	629a      	str	r2, [r3, #40]	; 0x28
 8008dc8:	e028      	b.n	8008e1c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dd0:	0c1b      	lsrs	r3, r3, #16
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008dd8:	2300      	movs	r3, #0
 8008dda:	73fb      	strb	r3, [r7, #15]
 8008ddc:	e00d      	b.n	8008dfa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
 8008de4:	3340      	adds	r3, #64	; 0x40
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4413      	add	r3, r2
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	0c1b      	lsrs	r3, r3, #16
 8008dee:	68ba      	ldr	r2, [r7, #8]
 8008df0:	4413      	add	r3, r2
 8008df2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008df4:	7bfb      	ldrb	r3, [r7, #15]
 8008df6:	3301      	adds	r3, #1
 8008df8:	73fb      	strb	r3, [r7, #15]
 8008dfa:	7bfa      	ldrb	r2, [r7, #15]
 8008dfc:	78fb      	ldrb	r3, [r7, #3]
 8008dfe:	3b01      	subs	r3, #1
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d3ec      	bcc.n	8008dde <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008e04:	883b      	ldrh	r3, [r7, #0]
 8008e06:	0418      	lsls	r0, r3, #16
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6819      	ldr	r1, [r3, #0]
 8008e0c:	78fb      	ldrb	r3, [r7, #3]
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	68ba      	ldr	r2, [r7, #8]
 8008e12:	4302      	orrs	r2, r0
 8008e14:	3340      	adds	r3, #64	; 0x40
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	440b      	add	r3, r1
 8008e1a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr

08008e2a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008e2a:	b480      	push	{r7}
 8008e2c:	b083      	sub	sp, #12
 8008e2e:	af00      	add	r7, sp, #0
 8008e30:	6078      	str	r0, [r7, #4]
 8008e32:	460b      	mov	r3, r1
 8008e34:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	887a      	ldrh	r2, [r7, #2]
 8008e3c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008e3e:	2300      	movs	r3, #0
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	370c      	adds	r7, #12
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	699b      	ldr	r3, [r3, #24]
 8008e6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e7a:	4b05      	ldr	r3, [pc, #20]	; (8008e90 <HAL_PCDEx_ActivateLPM+0x44>)
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	68fa      	ldr	r2, [r7, #12]
 8008e80:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3714      	adds	r7, #20
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr
 8008e90:	10000003 	.word	0x10000003

08008e94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008ea0:	bf00      	nop
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008eb4:	4b19      	ldr	r3, [pc, #100]	; (8008f1c <HAL_PWREx_ConfigSupply+0x70>)
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	f003 0304 	and.w	r3, r3, #4
 8008ebc:	2b04      	cmp	r3, #4
 8008ebe:	d00a      	beq.n	8008ed6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008ec0:	4b16      	ldr	r3, [pc, #88]	; (8008f1c <HAL_PWREx_ConfigSupply+0x70>)
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	f003 0307 	and.w	r3, r3, #7
 8008ec8:	687a      	ldr	r2, [r7, #4]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d001      	beq.n	8008ed2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008ece:	2301      	movs	r3, #1
 8008ed0:	e01f      	b.n	8008f12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	e01d      	b.n	8008f12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008ed6:	4b11      	ldr	r3, [pc, #68]	; (8008f1c <HAL_PWREx_ConfigSupply+0x70>)
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	f023 0207 	bic.w	r2, r3, #7
 8008ede:	490f      	ldr	r1, [pc, #60]	; (8008f1c <HAL_PWREx_ConfigSupply+0x70>)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008ee6:	f7fa fd3d 	bl	8003964 <HAL_GetTick>
 8008eea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008eec:	e009      	b.n	8008f02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008eee:	f7fa fd39 	bl	8003964 <HAL_GetTick>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	1ad3      	subs	r3, r2, r3
 8008ef8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008efc:	d901      	bls.n	8008f02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008efe:	2301      	movs	r3, #1
 8008f00:	e007      	b.n	8008f12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008f02:	4b06      	ldr	r3, [pc, #24]	; (8008f1c <HAL_PWREx_ConfigSupply+0x70>)
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f0e:	d1ee      	bne.n	8008eee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	58024800 	.word	0x58024800

08008f20 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008f20:	b480      	push	{r7}
 8008f22:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008f24:	4b05      	ldr	r3, [pc, #20]	; (8008f3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008f26:	68db      	ldr	r3, [r3, #12]
 8008f28:	4a04      	ldr	r2, [pc, #16]	; (8008f3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f2e:	60d3      	str	r3, [r2, #12]
}
 8008f30:	bf00      	nop
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	58024800 	.word	0x58024800

08008f40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b08c      	sub	sp, #48	; 0x30
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d101      	bne.n	8008f52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e3c8      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f003 0301 	and.w	r3, r3, #1
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	f000 8087 	beq.w	800906e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f60:	4b88      	ldr	r3, [pc, #544]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f68:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008f6a:	4b86      	ldr	r3, [pc, #536]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8008f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f6e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f72:	2b10      	cmp	r3, #16
 8008f74:	d007      	beq.n	8008f86 <HAL_RCC_OscConfig+0x46>
 8008f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f78:	2b18      	cmp	r3, #24
 8008f7a:	d110      	bne.n	8008f9e <HAL_RCC_OscConfig+0x5e>
 8008f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f7e:	f003 0303 	and.w	r3, r3, #3
 8008f82:	2b02      	cmp	r3, #2
 8008f84:	d10b      	bne.n	8008f9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f86:	4b7f      	ldr	r3, [pc, #508]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d06c      	beq.n	800906c <HAL_RCC_OscConfig+0x12c>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d168      	bne.n	800906c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e3a2      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008fa6:	d106      	bne.n	8008fb6 <HAL_RCC_OscConfig+0x76>
 8008fa8:	4b76      	ldr	r3, [pc, #472]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a75      	ldr	r2, [pc, #468]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8008fae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008fb2:	6013      	str	r3, [r2, #0]
 8008fb4:	e02e      	b.n	8009014 <HAL_RCC_OscConfig+0xd4>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d10c      	bne.n	8008fd8 <HAL_RCC_OscConfig+0x98>
 8008fbe:	4b71      	ldr	r3, [pc, #452]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a70      	ldr	r2, [pc, #448]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8008fc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fc8:	6013      	str	r3, [r2, #0]
 8008fca:	4b6e      	ldr	r3, [pc, #440]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4a6d      	ldr	r2, [pc, #436]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8008fd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fd4:	6013      	str	r3, [r2, #0]
 8008fd6:	e01d      	b.n	8009014 <HAL_RCC_OscConfig+0xd4>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008fe0:	d10c      	bne.n	8008ffc <HAL_RCC_OscConfig+0xbc>
 8008fe2:	4b68      	ldr	r3, [pc, #416]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4a67      	ldr	r2, [pc, #412]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8008fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008fec:	6013      	str	r3, [r2, #0]
 8008fee:	4b65      	ldr	r3, [pc, #404]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a64      	ldr	r2, [pc, #400]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8008ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ff8:	6013      	str	r3, [r2, #0]
 8008ffa:	e00b      	b.n	8009014 <HAL_RCC_OscConfig+0xd4>
 8008ffc:	4b61      	ldr	r3, [pc, #388]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a60      	ldr	r2, [pc, #384]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8009002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009006:	6013      	str	r3, [r2, #0]
 8009008:	4b5e      	ldr	r3, [pc, #376]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a5d      	ldr	r2, [pc, #372]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 800900e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d013      	beq.n	8009044 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800901c:	f7fa fca2 	bl	8003964 <HAL_GetTick>
 8009020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009022:	e008      	b.n	8009036 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009024:	f7fa fc9e 	bl	8003964 <HAL_GetTick>
 8009028:	4602      	mov	r2, r0
 800902a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	2b64      	cmp	r3, #100	; 0x64
 8009030:	d901      	bls.n	8009036 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009032:	2303      	movs	r3, #3
 8009034:	e356      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009036:	4b53      	ldr	r3, [pc, #332]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800903e:	2b00      	cmp	r3, #0
 8009040:	d0f0      	beq.n	8009024 <HAL_RCC_OscConfig+0xe4>
 8009042:	e014      	b.n	800906e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009044:	f7fa fc8e 	bl	8003964 <HAL_GetTick>
 8009048:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800904a:	e008      	b.n	800905e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800904c:	f7fa fc8a 	bl	8003964 <HAL_GetTick>
 8009050:	4602      	mov	r2, r0
 8009052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	2b64      	cmp	r3, #100	; 0x64
 8009058:	d901      	bls.n	800905e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800905a:	2303      	movs	r3, #3
 800905c:	e342      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800905e:	4b49      	ldr	r3, [pc, #292]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1f0      	bne.n	800904c <HAL_RCC_OscConfig+0x10c>
 800906a:	e000      	b.n	800906e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800906c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f003 0302 	and.w	r3, r3, #2
 8009076:	2b00      	cmp	r3, #0
 8009078:	f000 808c 	beq.w	8009194 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800907c:	4b41      	ldr	r3, [pc, #260]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 800907e:	691b      	ldr	r3, [r3, #16]
 8009080:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009084:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009086:	4b3f      	ldr	r3, [pc, #252]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8009088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800908a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800908c:	6a3b      	ldr	r3, [r7, #32]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d007      	beq.n	80090a2 <HAL_RCC_OscConfig+0x162>
 8009092:	6a3b      	ldr	r3, [r7, #32]
 8009094:	2b18      	cmp	r3, #24
 8009096:	d137      	bne.n	8009108 <HAL_RCC_OscConfig+0x1c8>
 8009098:	69fb      	ldr	r3, [r7, #28]
 800909a:	f003 0303 	and.w	r3, r3, #3
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d132      	bne.n	8009108 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80090a2:	4b38      	ldr	r3, [pc, #224]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0304 	and.w	r3, r3, #4
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d005      	beq.n	80090ba <HAL_RCC_OscConfig+0x17a>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d101      	bne.n	80090ba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80090b6:	2301      	movs	r3, #1
 80090b8:	e314      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80090ba:	4b32      	ldr	r3, [pc, #200]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f023 0219 	bic.w	r2, r3, #25
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	492f      	ldr	r1, [pc, #188]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 80090c8:	4313      	orrs	r3, r2
 80090ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090cc:	f7fa fc4a 	bl	8003964 <HAL_GetTick>
 80090d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090d2:	e008      	b.n	80090e6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80090d4:	f7fa fc46 	bl	8003964 <HAL_GetTick>
 80090d8:	4602      	mov	r2, r0
 80090da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d901      	bls.n	80090e6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80090e2:	2303      	movs	r3, #3
 80090e4:	e2fe      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80090e6:	4b27      	ldr	r3, [pc, #156]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 0304 	and.w	r3, r3, #4
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d0f0      	beq.n	80090d4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090f2:	4b24      	ldr	r3, [pc, #144]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	691b      	ldr	r3, [r3, #16]
 80090fe:	061b      	lsls	r3, r3, #24
 8009100:	4920      	ldr	r1, [pc, #128]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8009102:	4313      	orrs	r3, r2
 8009104:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009106:	e045      	b.n	8009194 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d026      	beq.n	800915e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009110:	4b1c      	ldr	r3, [pc, #112]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f023 0219 	bic.w	r2, r3, #25
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	4919      	ldr	r1, [pc, #100]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 800911e:	4313      	orrs	r3, r2
 8009120:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009122:	f7fa fc1f 	bl	8003964 <HAL_GetTick>
 8009126:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009128:	e008      	b.n	800913c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800912a:	f7fa fc1b 	bl	8003964 <HAL_GetTick>
 800912e:	4602      	mov	r2, r0
 8009130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009132:	1ad3      	subs	r3, r2, r3
 8009134:	2b02      	cmp	r3, #2
 8009136:	d901      	bls.n	800913c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009138:	2303      	movs	r3, #3
 800913a:	e2d3      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800913c:	4b11      	ldr	r3, [pc, #68]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f003 0304 	and.w	r3, r3, #4
 8009144:	2b00      	cmp	r3, #0
 8009146:	d0f0      	beq.n	800912a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009148:	4b0e      	ldr	r3, [pc, #56]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	691b      	ldr	r3, [r3, #16]
 8009154:	061b      	lsls	r3, r3, #24
 8009156:	490b      	ldr	r1, [pc, #44]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8009158:	4313      	orrs	r3, r2
 800915a:	604b      	str	r3, [r1, #4]
 800915c:	e01a      	b.n	8009194 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800915e:	4b09      	ldr	r3, [pc, #36]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4a08      	ldr	r2, [pc, #32]	; (8009184 <HAL_RCC_OscConfig+0x244>)
 8009164:	f023 0301 	bic.w	r3, r3, #1
 8009168:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800916a:	f7fa fbfb 	bl	8003964 <HAL_GetTick>
 800916e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009170:	e00a      	b.n	8009188 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009172:	f7fa fbf7 	bl	8003964 <HAL_GetTick>
 8009176:	4602      	mov	r2, r0
 8009178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	2b02      	cmp	r3, #2
 800917e:	d903      	bls.n	8009188 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009180:	2303      	movs	r3, #3
 8009182:	e2af      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
 8009184:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009188:	4b96      	ldr	r3, [pc, #600]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f003 0304 	and.w	r3, r3, #4
 8009190:	2b00      	cmp	r3, #0
 8009192:	d1ee      	bne.n	8009172 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f003 0310 	and.w	r3, r3, #16
 800919c:	2b00      	cmp	r3, #0
 800919e:	d06a      	beq.n	8009276 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80091a0:	4b90      	ldr	r3, [pc, #576]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 80091a2:	691b      	ldr	r3, [r3, #16]
 80091a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80091a8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80091aa:	4b8e      	ldr	r3, [pc, #568]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 80091ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ae:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80091b0:	69bb      	ldr	r3, [r7, #24]
 80091b2:	2b08      	cmp	r3, #8
 80091b4:	d007      	beq.n	80091c6 <HAL_RCC_OscConfig+0x286>
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	2b18      	cmp	r3, #24
 80091ba:	d11b      	bne.n	80091f4 <HAL_RCC_OscConfig+0x2b4>
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	f003 0303 	and.w	r3, r3, #3
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d116      	bne.n	80091f4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80091c6:	4b87      	ldr	r3, [pc, #540]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d005      	beq.n	80091de <HAL_RCC_OscConfig+0x29e>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	69db      	ldr	r3, [r3, #28]
 80091d6:	2b80      	cmp	r3, #128	; 0x80
 80091d8:	d001      	beq.n	80091de <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e282      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80091de:	4b81      	ldr	r3, [pc, #516]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6a1b      	ldr	r3, [r3, #32]
 80091ea:	061b      	lsls	r3, r3, #24
 80091ec:	497d      	ldr	r1, [pc, #500]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 80091ee:	4313      	orrs	r3, r2
 80091f0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80091f2:	e040      	b.n	8009276 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	69db      	ldr	r3, [r3, #28]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d023      	beq.n	8009244 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80091fc:	4b79      	ldr	r3, [pc, #484]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a78      	ldr	r2, [pc, #480]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 8009202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009208:	f7fa fbac 	bl	8003964 <HAL_GetTick>
 800920c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800920e:	e008      	b.n	8009222 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009210:	f7fa fba8 	bl	8003964 <HAL_GetTick>
 8009214:	4602      	mov	r2, r0
 8009216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009218:	1ad3      	subs	r3, r2, r3
 800921a:	2b02      	cmp	r3, #2
 800921c:	d901      	bls.n	8009222 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800921e:	2303      	movs	r3, #3
 8009220:	e260      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009222:	4b70      	ldr	r3, [pc, #448]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800922a:	2b00      	cmp	r3, #0
 800922c:	d0f0      	beq.n	8009210 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800922e:	4b6d      	ldr	r3, [pc, #436]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 8009230:	68db      	ldr	r3, [r3, #12]
 8009232:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6a1b      	ldr	r3, [r3, #32]
 800923a:	061b      	lsls	r3, r3, #24
 800923c:	4969      	ldr	r1, [pc, #420]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 800923e:	4313      	orrs	r3, r2
 8009240:	60cb      	str	r3, [r1, #12]
 8009242:	e018      	b.n	8009276 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009244:	4b67      	ldr	r3, [pc, #412]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a66      	ldr	r2, [pc, #408]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 800924a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800924e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009250:	f7fa fb88 	bl	8003964 <HAL_GetTick>
 8009254:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009256:	e008      	b.n	800926a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009258:	f7fa fb84 	bl	8003964 <HAL_GetTick>
 800925c:	4602      	mov	r2, r0
 800925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	2b02      	cmp	r3, #2
 8009264:	d901      	bls.n	800926a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009266:	2303      	movs	r3, #3
 8009268:	e23c      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800926a:	4b5e      	ldr	r3, [pc, #376]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1f0      	bne.n	8009258 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 0308 	and.w	r3, r3, #8
 800927e:	2b00      	cmp	r3, #0
 8009280:	d036      	beq.n	80092f0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	695b      	ldr	r3, [r3, #20]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d019      	beq.n	80092be <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800928a:	4b56      	ldr	r3, [pc, #344]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 800928c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800928e:	4a55      	ldr	r2, [pc, #340]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 8009290:	f043 0301 	orr.w	r3, r3, #1
 8009294:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009296:	f7fa fb65 	bl	8003964 <HAL_GetTick>
 800929a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800929c:	e008      	b.n	80092b0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800929e:	f7fa fb61 	bl	8003964 <HAL_GetTick>
 80092a2:	4602      	mov	r2, r0
 80092a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d901      	bls.n	80092b0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e219      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80092b0:	4b4c      	ldr	r3, [pc, #304]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 80092b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092b4:	f003 0302 	and.w	r3, r3, #2
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d0f0      	beq.n	800929e <HAL_RCC_OscConfig+0x35e>
 80092bc:	e018      	b.n	80092f0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80092be:	4b49      	ldr	r3, [pc, #292]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 80092c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092c2:	4a48      	ldr	r2, [pc, #288]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 80092c4:	f023 0301 	bic.w	r3, r3, #1
 80092c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092ca:	f7fa fb4b 	bl	8003964 <HAL_GetTick>
 80092ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80092d0:	e008      	b.n	80092e4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092d2:	f7fa fb47 	bl	8003964 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	2b02      	cmp	r3, #2
 80092de:	d901      	bls.n	80092e4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e1ff      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80092e4:	4b3f      	ldr	r3, [pc, #252]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 80092e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092e8:	f003 0302 	and.w	r3, r3, #2
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d1f0      	bne.n	80092d2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0320 	and.w	r3, r3, #32
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d036      	beq.n	800936a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	699b      	ldr	r3, [r3, #24]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d019      	beq.n	8009338 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009304:	4b37      	ldr	r3, [pc, #220]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	4a36      	ldr	r2, [pc, #216]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 800930a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800930e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009310:	f7fa fb28 	bl	8003964 <HAL_GetTick>
 8009314:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009316:	e008      	b.n	800932a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009318:	f7fa fb24 	bl	8003964 <HAL_GetTick>
 800931c:	4602      	mov	r2, r0
 800931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	2b02      	cmp	r3, #2
 8009324:	d901      	bls.n	800932a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009326:	2303      	movs	r3, #3
 8009328:	e1dc      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800932a:	4b2e      	ldr	r3, [pc, #184]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009332:	2b00      	cmp	r3, #0
 8009334:	d0f0      	beq.n	8009318 <HAL_RCC_OscConfig+0x3d8>
 8009336:	e018      	b.n	800936a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009338:	4b2a      	ldr	r3, [pc, #168]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a29      	ldr	r2, [pc, #164]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 800933e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009342:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009344:	f7fa fb0e 	bl	8003964 <HAL_GetTick>
 8009348:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800934a:	e008      	b.n	800935e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800934c:	f7fa fb0a 	bl	8003964 <HAL_GetTick>
 8009350:	4602      	mov	r2, r0
 8009352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	2b02      	cmp	r3, #2
 8009358:	d901      	bls.n	800935e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800935a:	2303      	movs	r3, #3
 800935c:	e1c2      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800935e:	4b21      	ldr	r3, [pc, #132]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1f0      	bne.n	800934c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f003 0304 	and.w	r3, r3, #4
 8009372:	2b00      	cmp	r3, #0
 8009374:	f000 8086 	beq.w	8009484 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009378:	4b1b      	ldr	r3, [pc, #108]	; (80093e8 <HAL_RCC_OscConfig+0x4a8>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a1a      	ldr	r2, [pc, #104]	; (80093e8 <HAL_RCC_OscConfig+0x4a8>)
 800937e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009382:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009384:	f7fa faee 	bl	8003964 <HAL_GetTick>
 8009388:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800938a:	e008      	b.n	800939e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800938c:	f7fa faea 	bl	8003964 <HAL_GetTick>
 8009390:	4602      	mov	r2, r0
 8009392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009394:	1ad3      	subs	r3, r2, r3
 8009396:	2b64      	cmp	r3, #100	; 0x64
 8009398:	d901      	bls.n	800939e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800939a:	2303      	movs	r3, #3
 800939c:	e1a2      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800939e:	4b12      	ldr	r3, [pc, #72]	; (80093e8 <HAL_RCC_OscConfig+0x4a8>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d0f0      	beq.n	800938c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	2b01      	cmp	r3, #1
 80093b0:	d106      	bne.n	80093c0 <HAL_RCC_OscConfig+0x480>
 80093b2:	4b0c      	ldr	r3, [pc, #48]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 80093b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093b6:	4a0b      	ldr	r2, [pc, #44]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 80093b8:	f043 0301 	orr.w	r3, r3, #1
 80093bc:	6713      	str	r3, [r2, #112]	; 0x70
 80093be:	e032      	b.n	8009426 <HAL_RCC_OscConfig+0x4e6>
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	689b      	ldr	r3, [r3, #8]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d111      	bne.n	80093ec <HAL_RCC_OscConfig+0x4ac>
 80093c8:	4b06      	ldr	r3, [pc, #24]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 80093ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093cc:	4a05      	ldr	r2, [pc, #20]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 80093ce:	f023 0301 	bic.w	r3, r3, #1
 80093d2:	6713      	str	r3, [r2, #112]	; 0x70
 80093d4:	4b03      	ldr	r3, [pc, #12]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 80093d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d8:	4a02      	ldr	r2, [pc, #8]	; (80093e4 <HAL_RCC_OscConfig+0x4a4>)
 80093da:	f023 0304 	bic.w	r3, r3, #4
 80093de:	6713      	str	r3, [r2, #112]	; 0x70
 80093e0:	e021      	b.n	8009426 <HAL_RCC_OscConfig+0x4e6>
 80093e2:	bf00      	nop
 80093e4:	58024400 	.word	0x58024400
 80093e8:	58024800 	.word	0x58024800
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	2b05      	cmp	r3, #5
 80093f2:	d10c      	bne.n	800940e <HAL_RCC_OscConfig+0x4ce>
 80093f4:	4b83      	ldr	r3, [pc, #524]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 80093f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093f8:	4a82      	ldr	r2, [pc, #520]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 80093fa:	f043 0304 	orr.w	r3, r3, #4
 80093fe:	6713      	str	r3, [r2, #112]	; 0x70
 8009400:	4b80      	ldr	r3, [pc, #512]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 8009402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009404:	4a7f      	ldr	r2, [pc, #508]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 8009406:	f043 0301 	orr.w	r3, r3, #1
 800940a:	6713      	str	r3, [r2, #112]	; 0x70
 800940c:	e00b      	b.n	8009426 <HAL_RCC_OscConfig+0x4e6>
 800940e:	4b7d      	ldr	r3, [pc, #500]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 8009410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009412:	4a7c      	ldr	r2, [pc, #496]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 8009414:	f023 0301 	bic.w	r3, r3, #1
 8009418:	6713      	str	r3, [r2, #112]	; 0x70
 800941a:	4b7a      	ldr	r3, [pc, #488]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 800941c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800941e:	4a79      	ldr	r2, [pc, #484]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 8009420:	f023 0304 	bic.w	r3, r3, #4
 8009424:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	689b      	ldr	r3, [r3, #8]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d015      	beq.n	800945a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800942e:	f7fa fa99 	bl	8003964 <HAL_GetTick>
 8009432:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009434:	e00a      	b.n	800944c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009436:	f7fa fa95 	bl	8003964 <HAL_GetTick>
 800943a:	4602      	mov	r2, r0
 800943c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943e:	1ad3      	subs	r3, r2, r3
 8009440:	f241 3288 	movw	r2, #5000	; 0x1388
 8009444:	4293      	cmp	r3, r2
 8009446:	d901      	bls.n	800944c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009448:	2303      	movs	r3, #3
 800944a:	e14b      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800944c:	4b6d      	ldr	r3, [pc, #436]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 800944e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009450:	f003 0302 	and.w	r3, r3, #2
 8009454:	2b00      	cmp	r3, #0
 8009456:	d0ee      	beq.n	8009436 <HAL_RCC_OscConfig+0x4f6>
 8009458:	e014      	b.n	8009484 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800945a:	f7fa fa83 	bl	8003964 <HAL_GetTick>
 800945e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009460:	e00a      	b.n	8009478 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009462:	f7fa fa7f 	bl	8003964 <HAL_GetTick>
 8009466:	4602      	mov	r2, r0
 8009468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800946a:	1ad3      	subs	r3, r2, r3
 800946c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009470:	4293      	cmp	r3, r2
 8009472:	d901      	bls.n	8009478 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009474:	2303      	movs	r3, #3
 8009476:	e135      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009478:	4b62      	ldr	r3, [pc, #392]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 800947a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947c:	f003 0302 	and.w	r3, r3, #2
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1ee      	bne.n	8009462 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009488:	2b00      	cmp	r3, #0
 800948a:	f000 812a 	beq.w	80096e2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800948e:	4b5d      	ldr	r3, [pc, #372]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009496:	2b18      	cmp	r3, #24
 8009498:	f000 80ba 	beq.w	8009610 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	f040 8095 	bne.w	80095d0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094a6:	4b57      	ldr	r3, [pc, #348]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	4a56      	ldr	r2, [pc, #344]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 80094ac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80094b2:	f7fa fa57 	bl	8003964 <HAL_GetTick>
 80094b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80094b8:	e008      	b.n	80094cc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094ba:	f7fa fa53 	bl	8003964 <HAL_GetTick>
 80094be:	4602      	mov	r2, r0
 80094c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c2:	1ad3      	subs	r3, r2, r3
 80094c4:	2b02      	cmp	r3, #2
 80094c6:	d901      	bls.n	80094cc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80094c8:	2303      	movs	r3, #3
 80094ca:	e10b      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80094cc:	4b4d      	ldr	r3, [pc, #308]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d1f0      	bne.n	80094ba <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80094d8:	4b4a      	ldr	r3, [pc, #296]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 80094da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094dc:	4b4a      	ldr	r3, [pc, #296]	; (8009608 <HAL_RCC_OscConfig+0x6c8>)
 80094de:	4013      	ands	r3, r2
 80094e0:	687a      	ldr	r2, [r7, #4]
 80094e2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80094e4:	687a      	ldr	r2, [r7, #4]
 80094e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80094e8:	0112      	lsls	r2, r2, #4
 80094ea:	430a      	orrs	r2, r1
 80094ec:	4945      	ldr	r1, [pc, #276]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 80094ee:	4313      	orrs	r3, r2
 80094f0:	628b      	str	r3, [r1, #40]	; 0x28
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f6:	3b01      	subs	r3, #1
 80094f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009500:	3b01      	subs	r3, #1
 8009502:	025b      	lsls	r3, r3, #9
 8009504:	b29b      	uxth	r3, r3
 8009506:	431a      	orrs	r2, r3
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800950c:	3b01      	subs	r3, #1
 800950e:	041b      	lsls	r3, r3, #16
 8009510:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009514:	431a      	orrs	r2, r3
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800951a:	3b01      	subs	r3, #1
 800951c:	061b      	lsls	r3, r3, #24
 800951e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009522:	4938      	ldr	r1, [pc, #224]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 8009524:	4313      	orrs	r3, r2
 8009526:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009528:	4b36      	ldr	r3, [pc, #216]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 800952a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800952c:	4a35      	ldr	r2, [pc, #212]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 800952e:	f023 0301 	bic.w	r3, r3, #1
 8009532:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009534:	4b33      	ldr	r3, [pc, #204]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 8009536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009538:	4b34      	ldr	r3, [pc, #208]	; (800960c <HAL_RCC_OscConfig+0x6cc>)
 800953a:	4013      	ands	r3, r2
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009540:	00d2      	lsls	r2, r2, #3
 8009542:	4930      	ldr	r1, [pc, #192]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 8009544:	4313      	orrs	r3, r2
 8009546:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009548:	4b2e      	ldr	r3, [pc, #184]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 800954a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800954c:	f023 020c 	bic.w	r2, r3, #12
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009554:	492b      	ldr	r1, [pc, #172]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 8009556:	4313      	orrs	r3, r2
 8009558:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800955a:	4b2a      	ldr	r3, [pc, #168]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 800955c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800955e:	f023 0202 	bic.w	r2, r3, #2
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009566:	4927      	ldr	r1, [pc, #156]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 8009568:	4313      	orrs	r3, r2
 800956a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800956c:	4b25      	ldr	r3, [pc, #148]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 800956e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009570:	4a24      	ldr	r2, [pc, #144]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 8009572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009576:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009578:	4b22      	ldr	r3, [pc, #136]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 800957a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957c:	4a21      	ldr	r2, [pc, #132]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 800957e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009582:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009584:	4b1f      	ldr	r3, [pc, #124]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 8009586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009588:	4a1e      	ldr	r2, [pc, #120]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 800958a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800958e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009590:	4b1c      	ldr	r3, [pc, #112]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 8009592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009594:	4a1b      	ldr	r2, [pc, #108]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 8009596:	f043 0301 	orr.w	r3, r3, #1
 800959a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800959c:	4b19      	ldr	r3, [pc, #100]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4a18      	ldr	r2, [pc, #96]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 80095a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80095a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095a8:	f7fa f9dc 	bl	8003964 <HAL_GetTick>
 80095ac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80095ae:	e008      	b.n	80095c2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095b0:	f7fa f9d8 	bl	8003964 <HAL_GetTick>
 80095b4:	4602      	mov	r2, r0
 80095b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d901      	bls.n	80095c2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80095be:	2303      	movs	r3, #3
 80095c0:	e090      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80095c2:	4b10      	ldr	r3, [pc, #64]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d0f0      	beq.n	80095b0 <HAL_RCC_OscConfig+0x670>
 80095ce:	e088      	b.n	80096e2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80095d0:	4b0c      	ldr	r3, [pc, #48]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a0b      	ldr	r2, [pc, #44]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 80095d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80095da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80095dc:	f7fa f9c2 	bl	8003964 <HAL_GetTick>
 80095e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80095e2:	e008      	b.n	80095f6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095e4:	f7fa f9be 	bl	8003964 <HAL_GetTick>
 80095e8:	4602      	mov	r2, r0
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	1ad3      	subs	r3, r2, r3
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	d901      	bls.n	80095f6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80095f2:	2303      	movs	r3, #3
 80095f4:	e076      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80095f6:	4b03      	ldr	r3, [pc, #12]	; (8009604 <HAL_RCC_OscConfig+0x6c4>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1f0      	bne.n	80095e4 <HAL_RCC_OscConfig+0x6a4>
 8009602:	e06e      	b.n	80096e2 <HAL_RCC_OscConfig+0x7a2>
 8009604:	58024400 	.word	0x58024400
 8009608:	fffffc0c 	.word	0xfffffc0c
 800960c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009610:	4b36      	ldr	r3, [pc, #216]	; (80096ec <HAL_RCC_OscConfig+0x7ac>)
 8009612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009614:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009616:	4b35      	ldr	r3, [pc, #212]	; (80096ec <HAL_RCC_OscConfig+0x7ac>)
 8009618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009620:	2b01      	cmp	r3, #1
 8009622:	d031      	beq.n	8009688 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	f003 0203 	and.w	r2, r3, #3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800962e:	429a      	cmp	r2, r3
 8009630:	d12a      	bne.n	8009688 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	091b      	lsrs	r3, r3, #4
 8009636:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800963e:	429a      	cmp	r2, r3
 8009640:	d122      	bne.n	8009688 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800964c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800964e:	429a      	cmp	r2, r3
 8009650:	d11a      	bne.n	8009688 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	0a5b      	lsrs	r3, r3, #9
 8009656:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800965e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009660:	429a      	cmp	r2, r3
 8009662:	d111      	bne.n	8009688 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	0c1b      	lsrs	r3, r3, #16
 8009668:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009670:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009672:	429a      	cmp	r2, r3
 8009674:	d108      	bne.n	8009688 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	0e1b      	lsrs	r3, r3, #24
 800967a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009682:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009684:	429a      	cmp	r2, r3
 8009686:	d001      	beq.n	800968c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009688:	2301      	movs	r3, #1
 800968a:	e02b      	b.n	80096e4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800968c:	4b17      	ldr	r3, [pc, #92]	; (80096ec <HAL_RCC_OscConfig+0x7ac>)
 800968e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009690:	08db      	lsrs	r3, r3, #3
 8009692:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009696:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800969c:	693a      	ldr	r2, [r7, #16]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d01f      	beq.n	80096e2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80096a2:	4b12      	ldr	r3, [pc, #72]	; (80096ec <HAL_RCC_OscConfig+0x7ac>)
 80096a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a6:	4a11      	ldr	r2, [pc, #68]	; (80096ec <HAL_RCC_OscConfig+0x7ac>)
 80096a8:	f023 0301 	bic.w	r3, r3, #1
 80096ac:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80096ae:	f7fa f959 	bl	8003964 <HAL_GetTick>
 80096b2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80096b4:	bf00      	nop
 80096b6:	f7fa f955 	bl	8003964 <HAL_GetTick>
 80096ba:	4602      	mov	r2, r0
 80096bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096be:	4293      	cmp	r3, r2
 80096c0:	d0f9      	beq.n	80096b6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80096c2:	4b0a      	ldr	r3, [pc, #40]	; (80096ec <HAL_RCC_OscConfig+0x7ac>)
 80096c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096c6:	4b0a      	ldr	r3, [pc, #40]	; (80096f0 <HAL_RCC_OscConfig+0x7b0>)
 80096c8:	4013      	ands	r3, r2
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80096ce:	00d2      	lsls	r2, r2, #3
 80096d0:	4906      	ldr	r1, [pc, #24]	; (80096ec <HAL_RCC_OscConfig+0x7ac>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80096d6:	4b05      	ldr	r3, [pc, #20]	; (80096ec <HAL_RCC_OscConfig+0x7ac>)
 80096d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096da:	4a04      	ldr	r2, [pc, #16]	; (80096ec <HAL_RCC_OscConfig+0x7ac>)
 80096dc:	f043 0301 	orr.w	r3, r3, #1
 80096e0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80096e2:	2300      	movs	r3, #0
}
 80096e4:	4618      	mov	r0, r3
 80096e6:	3730      	adds	r7, #48	; 0x30
 80096e8:	46bd      	mov	sp, r7
 80096ea:	bd80      	pop	{r7, pc}
 80096ec:	58024400 	.word	0x58024400
 80096f0:	ffff0007 	.word	0xffff0007

080096f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b086      	sub	sp, #24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d101      	bne.n	8009708 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009704:	2301      	movs	r3, #1
 8009706:	e19c      	b.n	8009a42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009708:	4b8a      	ldr	r3, [pc, #552]	; (8009934 <HAL_RCC_ClockConfig+0x240>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	f003 030f 	and.w	r3, r3, #15
 8009710:	683a      	ldr	r2, [r7, #0]
 8009712:	429a      	cmp	r2, r3
 8009714:	d910      	bls.n	8009738 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009716:	4b87      	ldr	r3, [pc, #540]	; (8009934 <HAL_RCC_ClockConfig+0x240>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f023 020f 	bic.w	r2, r3, #15
 800971e:	4985      	ldr	r1, [pc, #532]	; (8009934 <HAL_RCC_ClockConfig+0x240>)
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	4313      	orrs	r3, r2
 8009724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009726:	4b83      	ldr	r3, [pc, #524]	; (8009934 <HAL_RCC_ClockConfig+0x240>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 030f 	and.w	r3, r3, #15
 800972e:	683a      	ldr	r2, [r7, #0]
 8009730:	429a      	cmp	r2, r3
 8009732:	d001      	beq.n	8009738 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	e184      	b.n	8009a42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 0304 	and.w	r3, r3, #4
 8009740:	2b00      	cmp	r3, #0
 8009742:	d010      	beq.n	8009766 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	691a      	ldr	r2, [r3, #16]
 8009748:	4b7b      	ldr	r3, [pc, #492]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009750:	429a      	cmp	r2, r3
 8009752:	d908      	bls.n	8009766 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009754:	4b78      	ldr	r3, [pc, #480]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	691b      	ldr	r3, [r3, #16]
 8009760:	4975      	ldr	r1, [pc, #468]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 8009762:	4313      	orrs	r3, r2
 8009764:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	f003 0308 	and.w	r3, r3, #8
 800976e:	2b00      	cmp	r3, #0
 8009770:	d010      	beq.n	8009794 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	695a      	ldr	r2, [r3, #20]
 8009776:	4b70      	ldr	r3, [pc, #448]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 8009778:	69db      	ldr	r3, [r3, #28]
 800977a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800977e:	429a      	cmp	r2, r3
 8009780:	d908      	bls.n	8009794 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009782:	4b6d      	ldr	r3, [pc, #436]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 8009784:	69db      	ldr	r3, [r3, #28]
 8009786:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	695b      	ldr	r3, [r3, #20]
 800978e:	496a      	ldr	r1, [pc, #424]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 8009790:	4313      	orrs	r3, r2
 8009792:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	f003 0310 	and.w	r3, r3, #16
 800979c:	2b00      	cmp	r3, #0
 800979e:	d010      	beq.n	80097c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	699a      	ldr	r2, [r3, #24]
 80097a4:	4b64      	ldr	r3, [pc, #400]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 80097a6:	69db      	ldr	r3, [r3, #28]
 80097a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d908      	bls.n	80097c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80097b0:	4b61      	ldr	r3, [pc, #388]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 80097b2:	69db      	ldr	r3, [r3, #28]
 80097b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	699b      	ldr	r3, [r3, #24]
 80097bc:	495e      	ldr	r1, [pc, #376]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 80097be:	4313      	orrs	r3, r2
 80097c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f003 0320 	and.w	r3, r3, #32
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d010      	beq.n	80097f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	69da      	ldr	r2, [r3, #28]
 80097d2:	4b59      	ldr	r3, [pc, #356]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 80097d4:	6a1b      	ldr	r3, [r3, #32]
 80097d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80097da:	429a      	cmp	r2, r3
 80097dc:	d908      	bls.n	80097f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80097de:	4b56      	ldr	r3, [pc, #344]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 80097e0:	6a1b      	ldr	r3, [r3, #32]
 80097e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	69db      	ldr	r3, [r3, #28]
 80097ea:	4953      	ldr	r1, [pc, #332]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 80097ec:	4313      	orrs	r3, r2
 80097ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f003 0302 	and.w	r3, r3, #2
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d010      	beq.n	800981e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	68da      	ldr	r2, [r3, #12]
 8009800:	4b4d      	ldr	r3, [pc, #308]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	f003 030f 	and.w	r3, r3, #15
 8009808:	429a      	cmp	r2, r3
 800980a:	d908      	bls.n	800981e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800980c:	4b4a      	ldr	r3, [pc, #296]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	f023 020f 	bic.w	r2, r3, #15
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	4947      	ldr	r1, [pc, #284]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 800981a:	4313      	orrs	r3, r2
 800981c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f003 0301 	and.w	r3, r3, #1
 8009826:	2b00      	cmp	r3, #0
 8009828:	d055      	beq.n	80098d6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800982a:	4b43      	ldr	r3, [pc, #268]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 800982c:	699b      	ldr	r3, [r3, #24]
 800982e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	689b      	ldr	r3, [r3, #8]
 8009836:	4940      	ldr	r1, [pc, #256]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 8009838:	4313      	orrs	r3, r2
 800983a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	2b02      	cmp	r3, #2
 8009842:	d107      	bne.n	8009854 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009844:	4b3c      	ldr	r3, [pc, #240]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800984c:	2b00      	cmp	r3, #0
 800984e:	d121      	bne.n	8009894 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009850:	2301      	movs	r3, #1
 8009852:	e0f6      	b.n	8009a42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	2b03      	cmp	r3, #3
 800985a:	d107      	bne.n	800986c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800985c:	4b36      	ldr	r3, [pc, #216]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d115      	bne.n	8009894 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009868:	2301      	movs	r3, #1
 800986a:	e0ea      	b.n	8009a42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	2b01      	cmp	r3, #1
 8009872:	d107      	bne.n	8009884 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009874:	4b30      	ldr	r3, [pc, #192]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800987c:	2b00      	cmp	r3, #0
 800987e:	d109      	bne.n	8009894 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009880:	2301      	movs	r3, #1
 8009882:	e0de      	b.n	8009a42 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009884:	4b2c      	ldr	r3, [pc, #176]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f003 0304 	and.w	r3, r3, #4
 800988c:	2b00      	cmp	r3, #0
 800988e:	d101      	bne.n	8009894 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009890:	2301      	movs	r3, #1
 8009892:	e0d6      	b.n	8009a42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009894:	4b28      	ldr	r3, [pc, #160]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	f023 0207 	bic.w	r2, r3, #7
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	4925      	ldr	r1, [pc, #148]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 80098a2:	4313      	orrs	r3, r2
 80098a4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80098a6:	f7fa f85d 	bl	8003964 <HAL_GetTick>
 80098aa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098ac:	e00a      	b.n	80098c4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80098ae:	f7fa f859 	bl	8003964 <HAL_GetTick>
 80098b2:	4602      	mov	r2, r0
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80098bc:	4293      	cmp	r3, r2
 80098be:	d901      	bls.n	80098c4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80098c0:	2303      	movs	r3, #3
 80098c2:	e0be      	b.n	8009a42 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80098c4:	4b1c      	ldr	r3, [pc, #112]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 80098c6:	691b      	ldr	r3, [r3, #16]
 80098c8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	00db      	lsls	r3, r3, #3
 80098d2:	429a      	cmp	r2, r3
 80098d4:	d1eb      	bne.n	80098ae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f003 0302 	and.w	r3, r3, #2
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d010      	beq.n	8009904 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	68da      	ldr	r2, [r3, #12]
 80098e6:	4b14      	ldr	r3, [pc, #80]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 80098e8:	699b      	ldr	r3, [r3, #24]
 80098ea:	f003 030f 	and.w	r3, r3, #15
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d208      	bcs.n	8009904 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80098f2:	4b11      	ldr	r3, [pc, #68]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 80098f4:	699b      	ldr	r3, [r3, #24]
 80098f6:	f023 020f 	bic.w	r2, r3, #15
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	490e      	ldr	r1, [pc, #56]	; (8009938 <HAL_RCC_ClockConfig+0x244>)
 8009900:	4313      	orrs	r3, r2
 8009902:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009904:	4b0b      	ldr	r3, [pc, #44]	; (8009934 <HAL_RCC_ClockConfig+0x240>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	f003 030f 	and.w	r3, r3, #15
 800990c:	683a      	ldr	r2, [r7, #0]
 800990e:	429a      	cmp	r2, r3
 8009910:	d214      	bcs.n	800993c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009912:	4b08      	ldr	r3, [pc, #32]	; (8009934 <HAL_RCC_ClockConfig+0x240>)
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f023 020f 	bic.w	r2, r3, #15
 800991a:	4906      	ldr	r1, [pc, #24]	; (8009934 <HAL_RCC_ClockConfig+0x240>)
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	4313      	orrs	r3, r2
 8009920:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009922:	4b04      	ldr	r3, [pc, #16]	; (8009934 <HAL_RCC_ClockConfig+0x240>)
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f003 030f 	and.w	r3, r3, #15
 800992a:	683a      	ldr	r2, [r7, #0]
 800992c:	429a      	cmp	r2, r3
 800992e:	d005      	beq.n	800993c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	e086      	b.n	8009a42 <HAL_RCC_ClockConfig+0x34e>
 8009934:	52002000 	.word	0x52002000
 8009938:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f003 0304 	and.w	r3, r3, #4
 8009944:	2b00      	cmp	r3, #0
 8009946:	d010      	beq.n	800996a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	691a      	ldr	r2, [r3, #16]
 800994c:	4b3f      	ldr	r3, [pc, #252]	; (8009a4c <HAL_RCC_ClockConfig+0x358>)
 800994e:	699b      	ldr	r3, [r3, #24]
 8009950:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009954:	429a      	cmp	r2, r3
 8009956:	d208      	bcs.n	800996a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009958:	4b3c      	ldr	r3, [pc, #240]	; (8009a4c <HAL_RCC_ClockConfig+0x358>)
 800995a:	699b      	ldr	r3, [r3, #24]
 800995c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	4939      	ldr	r1, [pc, #228]	; (8009a4c <HAL_RCC_ClockConfig+0x358>)
 8009966:	4313      	orrs	r3, r2
 8009968:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 0308 	and.w	r3, r3, #8
 8009972:	2b00      	cmp	r3, #0
 8009974:	d010      	beq.n	8009998 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	695a      	ldr	r2, [r3, #20]
 800997a:	4b34      	ldr	r3, [pc, #208]	; (8009a4c <HAL_RCC_ClockConfig+0x358>)
 800997c:	69db      	ldr	r3, [r3, #28]
 800997e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009982:	429a      	cmp	r2, r3
 8009984:	d208      	bcs.n	8009998 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009986:	4b31      	ldr	r3, [pc, #196]	; (8009a4c <HAL_RCC_ClockConfig+0x358>)
 8009988:	69db      	ldr	r3, [r3, #28]
 800998a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	695b      	ldr	r3, [r3, #20]
 8009992:	492e      	ldr	r1, [pc, #184]	; (8009a4c <HAL_RCC_ClockConfig+0x358>)
 8009994:	4313      	orrs	r3, r2
 8009996:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 0310 	and.w	r3, r3, #16
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d010      	beq.n	80099c6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	699a      	ldr	r2, [r3, #24]
 80099a8:	4b28      	ldr	r3, [pc, #160]	; (8009a4c <HAL_RCC_ClockConfig+0x358>)
 80099aa:	69db      	ldr	r3, [r3, #28]
 80099ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d208      	bcs.n	80099c6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80099b4:	4b25      	ldr	r3, [pc, #148]	; (8009a4c <HAL_RCC_ClockConfig+0x358>)
 80099b6:	69db      	ldr	r3, [r3, #28]
 80099b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	699b      	ldr	r3, [r3, #24]
 80099c0:	4922      	ldr	r1, [pc, #136]	; (8009a4c <HAL_RCC_ClockConfig+0x358>)
 80099c2:	4313      	orrs	r3, r2
 80099c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f003 0320 	and.w	r3, r3, #32
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d010      	beq.n	80099f4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	69da      	ldr	r2, [r3, #28]
 80099d6:	4b1d      	ldr	r3, [pc, #116]	; (8009a4c <HAL_RCC_ClockConfig+0x358>)
 80099d8:	6a1b      	ldr	r3, [r3, #32]
 80099da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80099de:	429a      	cmp	r2, r3
 80099e0:	d208      	bcs.n	80099f4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80099e2:	4b1a      	ldr	r3, [pc, #104]	; (8009a4c <HAL_RCC_ClockConfig+0x358>)
 80099e4:	6a1b      	ldr	r3, [r3, #32]
 80099e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	69db      	ldr	r3, [r3, #28]
 80099ee:	4917      	ldr	r1, [pc, #92]	; (8009a4c <HAL_RCC_ClockConfig+0x358>)
 80099f0:	4313      	orrs	r3, r2
 80099f2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80099f4:	f000 f89e 	bl	8009b34 <HAL_RCC_GetSysClockFreq>
 80099f8:	4602      	mov	r2, r0
 80099fa:	4b14      	ldr	r3, [pc, #80]	; (8009a4c <HAL_RCC_ClockConfig+0x358>)
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	0a1b      	lsrs	r3, r3, #8
 8009a00:	f003 030f 	and.w	r3, r3, #15
 8009a04:	4912      	ldr	r1, [pc, #72]	; (8009a50 <HAL_RCC_ClockConfig+0x35c>)
 8009a06:	5ccb      	ldrb	r3, [r1, r3]
 8009a08:	f003 031f 	and.w	r3, r3, #31
 8009a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009a10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009a12:	4b0e      	ldr	r3, [pc, #56]	; (8009a4c <HAL_RCC_ClockConfig+0x358>)
 8009a14:	699b      	ldr	r3, [r3, #24]
 8009a16:	f003 030f 	and.w	r3, r3, #15
 8009a1a:	4a0d      	ldr	r2, [pc, #52]	; (8009a50 <HAL_RCC_ClockConfig+0x35c>)
 8009a1c:	5cd3      	ldrb	r3, [r2, r3]
 8009a1e:	f003 031f 	and.w	r3, r3, #31
 8009a22:	693a      	ldr	r2, [r7, #16]
 8009a24:	fa22 f303 	lsr.w	r3, r2, r3
 8009a28:	4a0a      	ldr	r2, [pc, #40]	; (8009a54 <HAL_RCC_ClockConfig+0x360>)
 8009a2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009a2c:	4a0a      	ldr	r2, [pc, #40]	; (8009a58 <HAL_RCC_ClockConfig+0x364>)
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8009a32:	4b0a      	ldr	r3, [pc, #40]	; (8009a5c <HAL_RCC_ClockConfig+0x368>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7f9 ff4a 	bl	80038d0 <HAL_InitTick>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3718      	adds	r7, #24
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	58024400 	.word	0x58024400
 8009a50:	0801ad00 	.word	0x0801ad00
 8009a54:	24000004 	.word	0x24000004
 8009a58:	24000000 	.word	0x24000000
 8009a5c:	24000008 	.word	0x24000008

08009a60 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b08c      	sub	sp, #48	; 0x30
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	60f8      	str	r0, [r7, #12]
 8009a68:	60b9      	str	r1, [r7, #8]
 8009a6a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d12a      	bne.n	8009ac8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8009a72:	4b2d      	ldr	r3, [pc, #180]	; (8009b28 <HAL_RCC_MCOConfig+0xc8>)
 8009a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a78:	4a2b      	ldr	r2, [pc, #172]	; (8009b28 <HAL_RCC_MCOConfig+0xc8>)
 8009a7a:	f043 0301 	orr.w	r3, r3, #1
 8009a7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009a82:	4b29      	ldr	r3, [pc, #164]	; (8009b28 <HAL_RCC_MCOConfig+0xc8>)
 8009a84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a88:	f003 0301 	and.w	r3, r3, #1
 8009a8c:	61bb      	str	r3, [r7, #24]
 8009a8e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8009a90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a96:	2302      	movs	r3, #2
 8009a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009aa6:	f107 031c 	add.w	r3, r7, #28
 8009aaa:	4619      	mov	r1, r3
 8009aac:	481f      	ldr	r0, [pc, #124]	; (8009b2c <HAL_RCC_MCOConfig+0xcc>)
 8009aae:	f7fd fc43 	bl	8007338 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8009ab2:	4b1d      	ldr	r3, [pc, #116]	; (8009b28 <HAL_RCC_MCOConfig+0xc8>)
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 8009aba:	68b9      	ldr	r1, [r7, #8]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	430b      	orrs	r3, r1
 8009ac0:	4919      	ldr	r1, [pc, #100]	; (8009b28 <HAL_RCC_MCOConfig+0xc8>)
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8009ac6:	e02a      	b.n	8009b1e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8009ac8:	4b17      	ldr	r3, [pc, #92]	; (8009b28 <HAL_RCC_MCOConfig+0xc8>)
 8009aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ace:	4a16      	ldr	r2, [pc, #88]	; (8009b28 <HAL_RCC_MCOConfig+0xc8>)
 8009ad0:	f043 0304 	orr.w	r3, r3, #4
 8009ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8009ad8:	4b13      	ldr	r3, [pc, #76]	; (8009b28 <HAL_RCC_MCOConfig+0xc8>)
 8009ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ade:	f003 0304 	and.w	r3, r3, #4
 8009ae2:	617b      	str	r3, [r7, #20]
 8009ae4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8009ae6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009aec:	2302      	movs	r3, #2
 8009aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009af0:	2303      	movs	r3, #3
 8009af2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009af4:	2300      	movs	r3, #0
 8009af6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009af8:	2300      	movs	r3, #0
 8009afa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009afc:	f107 031c 	add.w	r3, r7, #28
 8009b00:	4619      	mov	r1, r3
 8009b02:	480b      	ldr	r0, [pc, #44]	; (8009b30 <HAL_RCC_MCOConfig+0xd0>)
 8009b04:	f7fd fc18 	bl	8007338 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009b08:	4b07      	ldr	r3, [pc, #28]	; (8009b28 <HAL_RCC_MCOConfig+0xc8>)
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	01d9      	lsls	r1, r3, #7
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	430b      	orrs	r3, r1
 8009b18:	4903      	ldr	r1, [pc, #12]	; (8009b28 <HAL_RCC_MCOConfig+0xc8>)
 8009b1a:	4313      	orrs	r3, r2
 8009b1c:	610b      	str	r3, [r1, #16]
}
 8009b1e:	bf00      	nop
 8009b20:	3730      	adds	r7, #48	; 0x30
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	58024400 	.word	0x58024400
 8009b2c:	58020000 	.word	0x58020000
 8009b30:	58020800 	.word	0x58020800

08009b34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009b34:	b480      	push	{r7}
 8009b36:	b089      	sub	sp, #36	; 0x24
 8009b38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009b3a:	4bb3      	ldr	r3, [pc, #716]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b42:	2b18      	cmp	r3, #24
 8009b44:	f200 8155 	bhi.w	8009df2 <HAL_RCC_GetSysClockFreq+0x2be>
 8009b48:	a201      	add	r2, pc, #4	; (adr r2, 8009b50 <HAL_RCC_GetSysClockFreq+0x1c>)
 8009b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4e:	bf00      	nop
 8009b50:	08009bb5 	.word	0x08009bb5
 8009b54:	08009df3 	.word	0x08009df3
 8009b58:	08009df3 	.word	0x08009df3
 8009b5c:	08009df3 	.word	0x08009df3
 8009b60:	08009df3 	.word	0x08009df3
 8009b64:	08009df3 	.word	0x08009df3
 8009b68:	08009df3 	.word	0x08009df3
 8009b6c:	08009df3 	.word	0x08009df3
 8009b70:	08009bdb 	.word	0x08009bdb
 8009b74:	08009df3 	.word	0x08009df3
 8009b78:	08009df3 	.word	0x08009df3
 8009b7c:	08009df3 	.word	0x08009df3
 8009b80:	08009df3 	.word	0x08009df3
 8009b84:	08009df3 	.word	0x08009df3
 8009b88:	08009df3 	.word	0x08009df3
 8009b8c:	08009df3 	.word	0x08009df3
 8009b90:	08009be1 	.word	0x08009be1
 8009b94:	08009df3 	.word	0x08009df3
 8009b98:	08009df3 	.word	0x08009df3
 8009b9c:	08009df3 	.word	0x08009df3
 8009ba0:	08009df3 	.word	0x08009df3
 8009ba4:	08009df3 	.word	0x08009df3
 8009ba8:	08009df3 	.word	0x08009df3
 8009bac:	08009df3 	.word	0x08009df3
 8009bb0:	08009be7 	.word	0x08009be7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009bb4:	4b94      	ldr	r3, [pc, #592]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f003 0320 	and.w	r3, r3, #32
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d009      	beq.n	8009bd4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009bc0:	4b91      	ldr	r3, [pc, #580]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	08db      	lsrs	r3, r3, #3
 8009bc6:	f003 0303 	and.w	r3, r3, #3
 8009bca:	4a90      	ldr	r2, [pc, #576]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009bcc:	fa22 f303 	lsr.w	r3, r2, r3
 8009bd0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009bd2:	e111      	b.n	8009df8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009bd4:	4b8d      	ldr	r3, [pc, #564]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009bd6:	61bb      	str	r3, [r7, #24]
      break;
 8009bd8:	e10e      	b.n	8009df8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009bda:	4b8d      	ldr	r3, [pc, #564]	; (8009e10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009bdc:	61bb      	str	r3, [r7, #24]
      break;
 8009bde:	e10b      	b.n	8009df8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009be0:	4b8c      	ldr	r3, [pc, #560]	; (8009e14 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009be2:	61bb      	str	r3, [r7, #24]
      break;
 8009be4:	e108      	b.n	8009df8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009be6:	4b88      	ldr	r3, [pc, #544]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bea:	f003 0303 	and.w	r3, r3, #3
 8009bee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009bf0:	4b85      	ldr	r3, [pc, #532]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf4:	091b      	lsrs	r3, r3, #4
 8009bf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bfa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009bfc:	4b82      	ldr	r3, [pc, #520]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c00:	f003 0301 	and.w	r3, r3, #1
 8009c04:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009c06:	4b80      	ldr	r3, [pc, #512]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c0a:	08db      	lsrs	r3, r3, #3
 8009c0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	fb02 f303 	mul.w	r3, r2, r3
 8009c16:	ee07 3a90 	vmov	s15, r3
 8009c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c1e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009c22:	693b      	ldr	r3, [r7, #16]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 80e1 	beq.w	8009dec <HAL_RCC_GetSysClockFreq+0x2b8>
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	f000 8083 	beq.w	8009d38 <HAL_RCC_GetSysClockFreq+0x204>
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	f200 80a1 	bhi.w	8009d7c <HAL_RCC_GetSysClockFreq+0x248>
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d003      	beq.n	8009c48 <HAL_RCC_GetSysClockFreq+0x114>
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	2b01      	cmp	r3, #1
 8009c44:	d056      	beq.n	8009cf4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009c46:	e099      	b.n	8009d7c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c48:	4b6f      	ldr	r3, [pc, #444]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f003 0320 	and.w	r3, r3, #32
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d02d      	beq.n	8009cb0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c54:	4b6c      	ldr	r3, [pc, #432]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	08db      	lsrs	r3, r3, #3
 8009c5a:	f003 0303 	and.w	r3, r3, #3
 8009c5e:	4a6b      	ldr	r2, [pc, #428]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009c60:	fa22 f303 	lsr.w	r3, r2, r3
 8009c64:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	ee07 3a90 	vmov	s15, r3
 8009c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	ee07 3a90 	vmov	s15, r3
 8009c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c7e:	4b62      	ldr	r3, [pc, #392]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c86:	ee07 3a90 	vmov	s15, r3
 8009c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009c92:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009e18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009caa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009cae:	e087      	b.n	8009dc0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	ee07 3a90 	vmov	s15, r3
 8009cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cba:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009e1c <HAL_RCC_GetSysClockFreq+0x2e8>
 8009cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cc2:	4b51      	ldr	r3, [pc, #324]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cca:	ee07 3a90 	vmov	s15, r3
 8009cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8009cd6:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009e18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009cf2:	e065      	b.n	8009dc0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cf4:	693b      	ldr	r3, [r7, #16]
 8009cf6:	ee07 3a90 	vmov	s15, r3
 8009cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cfe:	eddf 6a48 	vldr	s13, [pc, #288]	; 8009e20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009d02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d06:	4b40      	ldr	r3, [pc, #256]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d0e:	ee07 3a90 	vmov	s15, r3
 8009d12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d16:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d1a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009e18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009d36:	e043      	b.n	8009dc0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	ee07 3a90 	vmov	s15, r3
 8009d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d42:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009e24 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009d46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d4a:	4b2f      	ldr	r3, [pc, #188]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d52:	ee07 3a90 	vmov	s15, r3
 8009d56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8009d5e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009e18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009d62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009d7a:	e021      	b.n	8009dc0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	ee07 3a90 	vmov	s15, r3
 8009d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d86:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009e20 <HAL_RCC_GetSysClockFreq+0x2ec>
 8009d8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d8e:	4b1e      	ldr	r3, [pc, #120]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d96:	ee07 3a90 	vmov	s15, r3
 8009d9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009da2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009e18 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009da6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009daa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009dae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009db2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009db6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009dbe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009dc0:	4b11      	ldr	r3, [pc, #68]	; (8009e08 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc4:	0a5b      	lsrs	r3, r3, #9
 8009dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dca:	3301      	adds	r3, #1
 8009dcc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	ee07 3a90 	vmov	s15, r3
 8009dd4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009dd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ddc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009de0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009de4:	ee17 3a90 	vmov	r3, s15
 8009de8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009dea:	e005      	b.n	8009df8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009dec:	2300      	movs	r3, #0
 8009dee:	61bb      	str	r3, [r7, #24]
      break;
 8009df0:	e002      	b.n	8009df8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009df2:	4b07      	ldr	r3, [pc, #28]	; (8009e10 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009df4:	61bb      	str	r3, [r7, #24]
      break;
 8009df6:	bf00      	nop
  }

  return sysclockfreq;
 8009df8:	69bb      	ldr	r3, [r7, #24]
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3724      	adds	r7, #36	; 0x24
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop
 8009e08:	58024400 	.word	0x58024400
 8009e0c:	03d09000 	.word	0x03d09000
 8009e10:	003d0900 	.word	0x003d0900
 8009e14:	02faf080 	.word	0x02faf080
 8009e18:	46000000 	.word	0x46000000
 8009e1c:	4c742400 	.word	0x4c742400
 8009e20:	4a742400 	.word	0x4a742400
 8009e24:	4c3ebc20 	.word	0x4c3ebc20

08009e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009e2e:	f7ff fe81 	bl	8009b34 <HAL_RCC_GetSysClockFreq>
 8009e32:	4602      	mov	r2, r0
 8009e34:	4b10      	ldr	r3, [pc, #64]	; (8009e78 <HAL_RCC_GetHCLKFreq+0x50>)
 8009e36:	699b      	ldr	r3, [r3, #24]
 8009e38:	0a1b      	lsrs	r3, r3, #8
 8009e3a:	f003 030f 	and.w	r3, r3, #15
 8009e3e:	490f      	ldr	r1, [pc, #60]	; (8009e7c <HAL_RCC_GetHCLKFreq+0x54>)
 8009e40:	5ccb      	ldrb	r3, [r1, r3]
 8009e42:	f003 031f 	and.w	r3, r3, #31
 8009e46:	fa22 f303 	lsr.w	r3, r2, r3
 8009e4a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009e4c:	4b0a      	ldr	r3, [pc, #40]	; (8009e78 <HAL_RCC_GetHCLKFreq+0x50>)
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	f003 030f 	and.w	r3, r3, #15
 8009e54:	4a09      	ldr	r2, [pc, #36]	; (8009e7c <HAL_RCC_GetHCLKFreq+0x54>)
 8009e56:	5cd3      	ldrb	r3, [r2, r3]
 8009e58:	f003 031f 	and.w	r3, r3, #31
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e62:	4a07      	ldr	r2, [pc, #28]	; (8009e80 <HAL_RCC_GetHCLKFreq+0x58>)
 8009e64:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009e66:	4a07      	ldr	r2, [pc, #28]	; (8009e84 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009e6c:	4b04      	ldr	r3, [pc, #16]	; (8009e80 <HAL_RCC_GetHCLKFreq+0x58>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}
 8009e78:	58024400 	.word	0x58024400
 8009e7c:	0801ad00 	.word	0x0801ad00
 8009e80:	24000004 	.word	0x24000004
 8009e84:	24000000 	.word	0x24000000

08009e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009e8c:	f7ff ffcc 	bl	8009e28 <HAL_RCC_GetHCLKFreq>
 8009e90:	4602      	mov	r2, r0
 8009e92:	4b06      	ldr	r3, [pc, #24]	; (8009eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8009e94:	69db      	ldr	r3, [r3, #28]
 8009e96:	091b      	lsrs	r3, r3, #4
 8009e98:	f003 0307 	and.w	r3, r3, #7
 8009e9c:	4904      	ldr	r1, [pc, #16]	; (8009eb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8009e9e:	5ccb      	ldrb	r3, [r1, r3]
 8009ea0:	f003 031f 	and.w	r3, r3, #31
 8009ea4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	58024400 	.word	0x58024400
 8009eb0:	0801ad00 	.word	0x0801ad00

08009eb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009eb8:	f7ff ffb6 	bl	8009e28 <HAL_RCC_GetHCLKFreq>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	4b06      	ldr	r3, [pc, #24]	; (8009ed8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009ec0:	69db      	ldr	r3, [r3, #28]
 8009ec2:	0a1b      	lsrs	r3, r3, #8
 8009ec4:	f003 0307 	and.w	r3, r3, #7
 8009ec8:	4904      	ldr	r1, [pc, #16]	; (8009edc <HAL_RCC_GetPCLK2Freq+0x28>)
 8009eca:	5ccb      	ldrb	r3, [r1, r3]
 8009ecc:	f003 031f 	and.w	r3, r3, #31
 8009ed0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	bd80      	pop	{r7, pc}
 8009ed8:	58024400 	.word	0x58024400
 8009edc:	0801ad00 	.word	0x0801ad00

08009ee0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ee4:	b0c6      	sub	sp, #280	; 0x118
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009eec:	2300      	movs	r3, #0
 8009eee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f00:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009f04:	2500      	movs	r5, #0
 8009f06:	ea54 0305 	orrs.w	r3, r4, r5
 8009f0a:	d049      	beq.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009f0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f12:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f16:	d02f      	beq.n	8009f78 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009f18:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f1c:	d828      	bhi.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009f1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f22:	d01a      	beq.n	8009f5a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009f24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f28:	d822      	bhi.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d003      	beq.n	8009f36 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f32:	d007      	beq.n	8009f44 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009f34:	e01c      	b.n	8009f70 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f36:	4bab      	ldr	r3, [pc, #684]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f3a:	4aaa      	ldr	r2, [pc, #680]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009f42:	e01a      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f48:	3308      	adds	r3, #8
 8009f4a:	2102      	movs	r1, #2
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	f002 fa49 	bl	800c3e4 <RCCEx_PLL2_Config>
 8009f52:	4603      	mov	r3, r0
 8009f54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009f58:	e00f      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f5e:	3328      	adds	r3, #40	; 0x28
 8009f60:	2102      	movs	r1, #2
 8009f62:	4618      	mov	r0, r3
 8009f64:	f002 faf0 	bl	800c548 <RCCEx_PLL3_Config>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009f6e:	e004      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8009f76:	e000      	b.n	8009f7a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f7a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10a      	bne.n	8009f98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009f82:	4b98      	ldr	r3, [pc, #608]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f86:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f90:	4a94      	ldr	r2, [pc, #592]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009f92:	430b      	orrs	r3, r1
 8009f94:	6513      	str	r3, [r2, #80]	; 0x50
 8009f96:	e003      	b.n	8009fa0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8009f9c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa8:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8009fac:	f04f 0900 	mov.w	r9, #0
 8009fb0:	ea58 0309 	orrs.w	r3, r8, r9
 8009fb4:	d047      	beq.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009fbc:	2b04      	cmp	r3, #4
 8009fbe:	d82a      	bhi.n	800a016 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009fc0:	a201      	add	r2, pc, #4	; (adr r2, 8009fc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc6:	bf00      	nop
 8009fc8:	08009fdd 	.word	0x08009fdd
 8009fcc:	08009feb 	.word	0x08009feb
 8009fd0:	0800a001 	.word	0x0800a001
 8009fd4:	0800a01f 	.word	0x0800a01f
 8009fd8:	0800a01f 	.word	0x0800a01f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fdc:	4b81      	ldr	r3, [pc, #516]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe0:	4a80      	ldr	r2, [pc, #512]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8009fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009fe6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009fe8:	e01a      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fee:	3308      	adds	r3, #8
 8009ff0:	2100      	movs	r1, #0
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f002 f9f6 	bl	800c3e4 <RCCEx_PLL2_Config>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009ffe:	e00f      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a000:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a004:	3328      	adds	r3, #40	; 0x28
 800a006:	2100      	movs	r1, #0
 800a008:	4618      	mov	r0, r3
 800a00a:	f002 fa9d 	bl	800c548 <RCCEx_PLL3_Config>
 800a00e:	4603      	mov	r3, r0
 800a010:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a014:	e004      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a01c:	e000      	b.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a01e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a020:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10a      	bne.n	800a03e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a028:	4b6e      	ldr	r3, [pc, #440]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a02a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a02c:	f023 0107 	bic.w	r1, r3, #7
 800a030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a036:	4a6b      	ldr	r2, [pc, #428]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a038:	430b      	orrs	r3, r1
 800a03a:	6513      	str	r3, [r2, #80]	; 0x50
 800a03c:	e003      	b.n	800a046 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a03e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a042:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a052:	f04f 0b00 	mov.w	fp, #0
 800a056:	ea5a 030b 	orrs.w	r3, sl, fp
 800a05a:	d05b      	beq.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a05c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a060:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a064:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a068:	d03b      	beq.n	800a0e2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a06a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a06e:	d834      	bhi.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a070:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a074:	d037      	beq.n	800a0e6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a076:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a07a:	d82e      	bhi.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a07c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a080:	d033      	beq.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a082:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a086:	d828      	bhi.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a088:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a08c:	d01a      	beq.n	800a0c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a08e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a092:	d822      	bhi.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a094:	2b00      	cmp	r3, #0
 800a096:	d003      	beq.n	800a0a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a098:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a09c:	d007      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a09e:	e01c      	b.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0a0:	4b50      	ldr	r3, [pc, #320]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a4:	4a4f      	ldr	r2, [pc, #316]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a0a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a0ac:	e01e      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0b2:	3308      	adds	r3, #8
 800a0b4:	2100      	movs	r1, #0
 800a0b6:	4618      	mov	r0, r3
 800a0b8:	f002 f994 	bl	800c3e4 <RCCEx_PLL2_Config>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a0c2:	e013      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0c8:	3328      	adds	r3, #40	; 0x28
 800a0ca:	2100      	movs	r1, #0
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f002 fa3b 	bl	800c548 <RCCEx_PLL3_Config>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a0d8:	e008      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a0e0:	e004      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a0e2:	bf00      	nop
 800a0e4:	e002      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a0e6:	bf00      	nop
 800a0e8:	e000      	b.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a0ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a0ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10b      	bne.n	800a10c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a0f4:	4b3b      	ldr	r3, [pc, #236]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a0f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0f8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a0fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a100:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a104:	4a37      	ldr	r2, [pc, #220]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a106:	430b      	orrs	r3, r1
 800a108:	6593      	str	r3, [r2, #88]	; 0x58
 800a10a:	e003      	b.n	800a114 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a10c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a110:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a114:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a11c:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a120:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a124:	2300      	movs	r3, #0
 800a126:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a12a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a12e:	460b      	mov	r3, r1
 800a130:	4313      	orrs	r3, r2
 800a132:	d05d      	beq.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a134:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a138:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a13c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a140:	d03b      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a142:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a146:	d834      	bhi.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a148:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a14c:	d037      	beq.n	800a1be <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a14e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a152:	d82e      	bhi.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a154:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a158:	d033      	beq.n	800a1c2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a15a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a15e:	d828      	bhi.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a160:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a164:	d01a      	beq.n	800a19c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a166:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a16a:	d822      	bhi.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d003      	beq.n	800a178 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a174:	d007      	beq.n	800a186 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a176:	e01c      	b.n	800a1b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a178:	4b1a      	ldr	r3, [pc, #104]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17c:	4a19      	ldr	r2, [pc, #100]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a17e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a182:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a184:	e01e      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a18a:	3308      	adds	r3, #8
 800a18c:	2100      	movs	r1, #0
 800a18e:	4618      	mov	r0, r3
 800a190:	f002 f928 	bl	800c3e4 <RCCEx_PLL2_Config>
 800a194:	4603      	mov	r3, r0
 800a196:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a19a:	e013      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a19c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1a0:	3328      	adds	r3, #40	; 0x28
 800a1a2:	2100      	movs	r1, #0
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f002 f9cf 	bl	800c548 <RCCEx_PLL3_Config>
 800a1aa:	4603      	mov	r3, r0
 800a1ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a1b0:	e008      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a1b8:	e004      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a1ba:	bf00      	nop
 800a1bc:	e002      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a1be:	bf00      	nop
 800a1c0:	e000      	b.n	800a1c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800a1c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d10d      	bne.n	800a1e8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a1cc:	4b05      	ldr	r3, [pc, #20]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a1ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1d0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800a1d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a1dc:	4a01      	ldr	r2, [pc, #4]	; (800a1e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a1de:	430b      	orrs	r3, r1
 800a1e0:	6593      	str	r3, [r2, #88]	; 0x58
 800a1e2:	e005      	b.n	800a1f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800a1e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1e8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a1ec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a1f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800a1fc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a200:	2300      	movs	r3, #0
 800a202:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a206:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800a20a:	460b      	mov	r3, r1
 800a20c:	4313      	orrs	r3, r2
 800a20e:	d03a      	beq.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a216:	2b30      	cmp	r3, #48	; 0x30
 800a218:	d01f      	beq.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800a21a:	2b30      	cmp	r3, #48	; 0x30
 800a21c:	d819      	bhi.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a21e:	2b20      	cmp	r3, #32
 800a220:	d00c      	beq.n	800a23c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800a222:	2b20      	cmp	r3, #32
 800a224:	d815      	bhi.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800a226:	2b00      	cmp	r3, #0
 800a228:	d019      	beq.n	800a25e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800a22a:	2b10      	cmp	r3, #16
 800a22c:	d111      	bne.n	800a252 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a22e:	4baa      	ldr	r3, [pc, #680]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a232:	4aa9      	ldr	r2, [pc, #676]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a238:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a23a:	e011      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a23c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a240:	3308      	adds	r3, #8
 800a242:	2102      	movs	r1, #2
 800a244:	4618      	mov	r0, r3
 800a246:	f002 f8cd 	bl	800c3e4 <RCCEx_PLL2_Config>
 800a24a:	4603      	mov	r3, r0
 800a24c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a250:	e006      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a252:	2301      	movs	r3, #1
 800a254:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a258:	e002      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a25a:	bf00      	nop
 800a25c:	e000      	b.n	800a260 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800a25e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a260:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a264:	2b00      	cmp	r3, #0
 800a266:	d10a      	bne.n	800a27e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a268:	4b9b      	ldr	r3, [pc, #620]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a26a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a26c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800a270:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a276:	4a98      	ldr	r2, [pc, #608]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a278:	430b      	orrs	r3, r1
 800a27a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a27c:	e003      	b.n	800a286 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a27e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a282:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a28a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800a292:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a296:	2300      	movs	r3, #0
 800a298:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a29c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800a2a0:	460b      	mov	r3, r1
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	d051      	beq.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2b0:	d035      	beq.n	800a31e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800a2b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2b6:	d82e      	bhi.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a2b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2bc:	d031      	beq.n	800a322 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800a2be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a2c2:	d828      	bhi.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a2c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2c8:	d01a      	beq.n	800a300 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800a2ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a2ce:	d822      	bhi.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d003      	beq.n	800a2dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800a2d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a2d8:	d007      	beq.n	800a2ea <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800a2da:	e01c      	b.n	800a316 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2dc:	4b7e      	ldr	r3, [pc, #504]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a2de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e0:	4a7d      	ldr	r2, [pc, #500]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a2e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a2e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a2e8:	e01c      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a2ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2ee:	3308      	adds	r3, #8
 800a2f0:	2100      	movs	r1, #0
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	f002 f876 	bl	800c3e4 <RCCEx_PLL2_Config>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a2fe:	e011      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a300:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a304:	3328      	adds	r3, #40	; 0x28
 800a306:	2100      	movs	r1, #0
 800a308:	4618      	mov	r0, r3
 800a30a:	f002 f91d 	bl	800c548 <RCCEx_PLL3_Config>
 800a30e:	4603      	mov	r3, r0
 800a310:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a314:	e006      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a316:	2301      	movs	r3, #1
 800a318:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a31c:	e002      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a31e:	bf00      	nop
 800a320:	e000      	b.n	800a324 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800a322:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a324:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d10a      	bne.n	800a342 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a32c:	4b6a      	ldr	r3, [pc, #424]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a32e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a330:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800a334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a33a:	4a67      	ldr	r2, [pc, #412]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a33c:	430b      	orrs	r3, r1
 800a33e:	6513      	str	r3, [r2, #80]	; 0x50
 800a340:	e003      	b.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a342:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a346:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a34a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a352:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800a356:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a35a:	2300      	movs	r3, #0
 800a35c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a360:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800a364:	460b      	mov	r3, r1
 800a366:	4313      	orrs	r3, r2
 800a368:	d053      	beq.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a36a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a36e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a374:	d033      	beq.n	800a3de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800a376:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a37a:	d82c      	bhi.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a37c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a380:	d02f      	beq.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800a382:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a386:	d826      	bhi.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a388:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a38c:	d02b      	beq.n	800a3e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800a38e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a392:	d820      	bhi.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a394:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a398:	d012      	beq.n	800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800a39a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a39e:	d81a      	bhi.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d022      	beq.n	800a3ea <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800a3a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3a8:	d115      	bne.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a3aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3ae:	3308      	adds	r3, #8
 800a3b0:	2101      	movs	r1, #1
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	f002 f816 	bl	800c3e4 <RCCEx_PLL2_Config>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a3be:	e015      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a3c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3c4:	3328      	adds	r3, #40	; 0x28
 800a3c6:	2101      	movs	r1, #1
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f002 f8bd 	bl	800c548 <RCCEx_PLL3_Config>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a3d4:	e00a      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a3d6:	2301      	movs	r3, #1
 800a3d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a3dc:	e006      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a3de:	bf00      	nop
 800a3e0:	e004      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a3e2:	bf00      	nop
 800a3e4:	e002      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a3e6:	bf00      	nop
 800a3e8:	e000      	b.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800a3ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d10a      	bne.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a3f4:	4b38      	ldr	r3, [pc, #224]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a3f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3f8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800a3fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a402:	4a35      	ldr	r2, [pc, #212]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a404:	430b      	orrs	r3, r1
 800a406:	6513      	str	r3, [r2, #80]	; 0x50
 800a408:	e003      	b.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a40a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a40e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a412:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800a41e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a422:	2300      	movs	r3, #0
 800a424:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a428:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a42c:	460b      	mov	r3, r1
 800a42e:	4313      	orrs	r3, r2
 800a430:	d058      	beq.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a436:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a43a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a43e:	d033      	beq.n	800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a440:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a444:	d82c      	bhi.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a44a:	d02f      	beq.n	800a4ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a44c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a450:	d826      	bhi.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a452:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a456:	d02b      	beq.n	800a4b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a458:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a45c:	d820      	bhi.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a45e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a462:	d012      	beq.n	800a48a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800a464:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a468:	d81a      	bhi.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d022      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a46e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a472:	d115      	bne.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a478:	3308      	adds	r3, #8
 800a47a:	2101      	movs	r1, #1
 800a47c:	4618      	mov	r0, r3
 800a47e:	f001 ffb1 	bl	800c3e4 <RCCEx_PLL2_Config>
 800a482:	4603      	mov	r3, r0
 800a484:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a488:	e015      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a48a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a48e:	3328      	adds	r3, #40	; 0x28
 800a490:	2101      	movs	r1, #1
 800a492:	4618      	mov	r0, r3
 800a494:	f002 f858 	bl	800c548 <RCCEx_PLL3_Config>
 800a498:	4603      	mov	r3, r0
 800a49a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a49e:	e00a      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a4a6:	e006      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a4a8:	bf00      	nop
 800a4aa:	e004      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a4ac:	bf00      	nop
 800a4ae:	e002      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a4b0:	bf00      	nop
 800a4b2:	e000      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a4b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a4b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10e      	bne.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a4be:	4b06      	ldr	r3, [pc, #24]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a4c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4c2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a4c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800a4ce:	4a02      	ldr	r2, [pc, #8]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a4d0:	430b      	orrs	r3, r1
 800a4d2:	6593      	str	r3, [r2, #88]	; 0x58
 800a4d4:	e006      	b.n	800a4e4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a4d6:	bf00      	nop
 800a4d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a4e0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a4e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800a4f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a4fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800a4fe:	460b      	mov	r3, r1
 800a500:	4313      	orrs	r3, r2
 800a502:	d037      	beq.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a504:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a50a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a50e:	d00e      	beq.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a510:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a514:	d816      	bhi.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a516:	2b00      	cmp	r3, #0
 800a518:	d018      	beq.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a51a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a51e:	d111      	bne.n	800a544 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a520:	4bc4      	ldr	r3, [pc, #784]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a524:	4ac3      	ldr	r2, [pc, #780]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a52a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a52c:	e00f      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a52e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a532:	3308      	adds	r3, #8
 800a534:	2101      	movs	r1, #1
 800a536:	4618      	mov	r0, r3
 800a538:	f001 ff54 	bl	800c3e4 <RCCEx_PLL2_Config>
 800a53c:	4603      	mov	r3, r0
 800a53e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a542:	e004      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a544:	2301      	movs	r3, #1
 800a546:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a54a:	e000      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a54c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a54e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a552:	2b00      	cmp	r3, #0
 800a554:	d10a      	bne.n	800a56c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a556:	4bb7      	ldr	r3, [pc, #732]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a55a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800a55e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a564:	4ab3      	ldr	r2, [pc, #716]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a566:	430b      	orrs	r3, r1
 800a568:	6513      	str	r3, [r2, #80]	; 0x50
 800a56a:	e003      	b.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a56c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a570:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a574:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800a580:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a584:	2300      	movs	r3, #0
 800a586:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a58a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a58e:	460b      	mov	r3, r1
 800a590:	4313      	orrs	r3, r2
 800a592:	d039      	beq.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a59a:	2b03      	cmp	r3, #3
 800a59c:	d81c      	bhi.n	800a5d8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a59e:	a201      	add	r2, pc, #4	; (adr r2, 800a5a4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a4:	0800a5e1 	.word	0x0800a5e1
 800a5a8:	0800a5b5 	.word	0x0800a5b5
 800a5ac:	0800a5c3 	.word	0x0800a5c3
 800a5b0:	0800a5e1 	.word	0x0800a5e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a5b4:	4b9f      	ldr	r3, [pc, #636]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b8:	4a9e      	ldr	r2, [pc, #632]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a5be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a5c0:	e00f      	b.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a5c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5c6:	3308      	adds	r3, #8
 800a5c8:	2102      	movs	r1, #2
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f001 ff0a 	bl	800c3e4 <RCCEx_PLL2_Config>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a5d6:	e004      	b.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a5de:	e000      	b.n	800a5e2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a5e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a5e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d10a      	bne.n	800a600 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a5ea:	4b92      	ldr	r3, [pc, #584]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a5ee:	f023 0103 	bic.w	r1, r3, #3
 800a5f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5f8:	4a8e      	ldr	r2, [pc, #568]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a5fa:	430b      	orrs	r3, r1
 800a5fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a5fe:	e003      	b.n	800a608 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a600:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a604:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a608:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a60c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a610:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800a614:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a618:	2300      	movs	r3, #0
 800a61a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a61e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a622:	460b      	mov	r3, r1
 800a624:	4313      	orrs	r3, r2
 800a626:	f000 8099 	beq.w	800a75c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a62a:	4b83      	ldr	r3, [pc, #524]	; (800a838 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a82      	ldr	r2, [pc, #520]	; (800a838 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a634:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a636:	f7f9 f995 	bl	8003964 <HAL_GetTick>
 800a63a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a63e:	e00b      	b.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a640:	f7f9 f990 	bl	8003964 <HAL_GetTick>
 800a644:	4602      	mov	r2, r0
 800a646:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a64a:	1ad3      	subs	r3, r2, r3
 800a64c:	2b64      	cmp	r3, #100	; 0x64
 800a64e:	d903      	bls.n	800a658 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a650:	2303      	movs	r3, #3
 800a652:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a656:	e005      	b.n	800a664 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a658:	4b77      	ldr	r3, [pc, #476]	; (800a838 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a660:	2b00      	cmp	r3, #0
 800a662:	d0ed      	beq.n	800a640 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a664:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d173      	bne.n	800a754 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a66c:	4b71      	ldr	r3, [pc, #452]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a66e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a674:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a678:	4053      	eors	r3, r2
 800a67a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d015      	beq.n	800a6ae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a682:	4b6c      	ldr	r3, [pc, #432]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a68a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a68e:	4b69      	ldr	r3, [pc, #420]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a692:	4a68      	ldr	r2, [pc, #416]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a698:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a69a:	4b66      	ldr	r3, [pc, #408]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a69c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a69e:	4a65      	ldr	r2, [pc, #404]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a6a4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a6a6:	4a63      	ldr	r2, [pc, #396]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800a6ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a6ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a6b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6ba:	d118      	bne.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6bc:	f7f9 f952 	bl	8003964 <HAL_GetTick>
 800a6c0:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a6c4:	e00d      	b.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a6c6:	f7f9 f94d 	bl	8003964 <HAL_GetTick>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800a6d0:	1ad2      	subs	r2, r2, r3
 800a6d2:	f241 3388 	movw	r3, #5000	; 0x1388
 800a6d6:	429a      	cmp	r2, r3
 800a6d8:	d903      	bls.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a6da:	2303      	movs	r3, #3
 800a6dc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800a6e0:	e005      	b.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a6e2:	4b54      	ldr	r3, [pc, #336]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a6e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a6e6:	f003 0302 	and.w	r3, r3, #2
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d0eb      	beq.n	800a6c6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a6ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d129      	bne.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a6f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a6fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a702:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a706:	d10e      	bne.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a708:	4b4a      	ldr	r3, [pc, #296]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a70a:	691b      	ldr	r3, [r3, #16]
 800a70c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a710:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a714:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a718:	091a      	lsrs	r2, r3, #4
 800a71a:	4b48      	ldr	r3, [pc, #288]	; (800a83c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a71c:	4013      	ands	r3, r2
 800a71e:	4a45      	ldr	r2, [pc, #276]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a720:	430b      	orrs	r3, r1
 800a722:	6113      	str	r3, [r2, #16]
 800a724:	e005      	b.n	800a732 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a726:	4b43      	ldr	r3, [pc, #268]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	4a42      	ldr	r2, [pc, #264]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a72c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a730:	6113      	str	r3, [r2, #16]
 800a732:	4b40      	ldr	r3, [pc, #256]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a734:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a73a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a73e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a742:	4a3c      	ldr	r2, [pc, #240]	; (800a834 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a744:	430b      	orrs	r3, r1
 800a746:	6713      	str	r3, [r2, #112]	; 0x70
 800a748:	e008      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a74a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a74e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800a752:	e003      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a754:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a758:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a75c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a764:	f002 0301 	and.w	r3, r2, #1
 800a768:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a76c:	2300      	movs	r3, #0
 800a76e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a772:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a776:	460b      	mov	r3, r1
 800a778:	4313      	orrs	r3, r2
 800a77a:	f000 808f 	beq.w	800a89c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a782:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a784:	2b28      	cmp	r3, #40	; 0x28
 800a786:	d871      	bhi.n	800a86c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a788:	a201      	add	r2, pc, #4	; (adr r2, 800a790 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a78e:	bf00      	nop
 800a790:	0800a875 	.word	0x0800a875
 800a794:	0800a86d 	.word	0x0800a86d
 800a798:	0800a86d 	.word	0x0800a86d
 800a79c:	0800a86d 	.word	0x0800a86d
 800a7a0:	0800a86d 	.word	0x0800a86d
 800a7a4:	0800a86d 	.word	0x0800a86d
 800a7a8:	0800a86d 	.word	0x0800a86d
 800a7ac:	0800a86d 	.word	0x0800a86d
 800a7b0:	0800a841 	.word	0x0800a841
 800a7b4:	0800a86d 	.word	0x0800a86d
 800a7b8:	0800a86d 	.word	0x0800a86d
 800a7bc:	0800a86d 	.word	0x0800a86d
 800a7c0:	0800a86d 	.word	0x0800a86d
 800a7c4:	0800a86d 	.word	0x0800a86d
 800a7c8:	0800a86d 	.word	0x0800a86d
 800a7cc:	0800a86d 	.word	0x0800a86d
 800a7d0:	0800a857 	.word	0x0800a857
 800a7d4:	0800a86d 	.word	0x0800a86d
 800a7d8:	0800a86d 	.word	0x0800a86d
 800a7dc:	0800a86d 	.word	0x0800a86d
 800a7e0:	0800a86d 	.word	0x0800a86d
 800a7e4:	0800a86d 	.word	0x0800a86d
 800a7e8:	0800a86d 	.word	0x0800a86d
 800a7ec:	0800a86d 	.word	0x0800a86d
 800a7f0:	0800a875 	.word	0x0800a875
 800a7f4:	0800a86d 	.word	0x0800a86d
 800a7f8:	0800a86d 	.word	0x0800a86d
 800a7fc:	0800a86d 	.word	0x0800a86d
 800a800:	0800a86d 	.word	0x0800a86d
 800a804:	0800a86d 	.word	0x0800a86d
 800a808:	0800a86d 	.word	0x0800a86d
 800a80c:	0800a86d 	.word	0x0800a86d
 800a810:	0800a875 	.word	0x0800a875
 800a814:	0800a86d 	.word	0x0800a86d
 800a818:	0800a86d 	.word	0x0800a86d
 800a81c:	0800a86d 	.word	0x0800a86d
 800a820:	0800a86d 	.word	0x0800a86d
 800a824:	0800a86d 	.word	0x0800a86d
 800a828:	0800a86d 	.word	0x0800a86d
 800a82c:	0800a86d 	.word	0x0800a86d
 800a830:	0800a875 	.word	0x0800a875
 800a834:	58024400 	.word	0x58024400
 800a838:	58024800 	.word	0x58024800
 800a83c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a844:	3308      	adds	r3, #8
 800a846:	2101      	movs	r1, #1
 800a848:	4618      	mov	r0, r3
 800a84a:	f001 fdcb 	bl	800c3e4 <RCCEx_PLL2_Config>
 800a84e:	4603      	mov	r3, r0
 800a850:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a854:	e00f      	b.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a85a:	3328      	adds	r3, #40	; 0x28
 800a85c:	2101      	movs	r1, #1
 800a85e:	4618      	mov	r0, r3
 800a860:	f001 fe72 	bl	800c548 <RCCEx_PLL3_Config>
 800a864:	4603      	mov	r3, r0
 800a866:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a86a:	e004      	b.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a86c:	2301      	movs	r3, #1
 800a86e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a872:	e000      	b.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a874:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a876:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d10a      	bne.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a87e:	4bbf      	ldr	r3, [pc, #764]	; (800ab7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a882:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a88a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a88c:	4abb      	ldr	r2, [pc, #748]	; (800ab7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a88e:	430b      	orrs	r3, r1
 800a890:	6553      	str	r3, [r2, #84]	; 0x54
 800a892:	e003      	b.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a894:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a898:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a89c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a4:	f002 0302 	and.w	r3, r2, #2
 800a8a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a8b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	d041      	beq.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a8bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8c2:	2b05      	cmp	r3, #5
 800a8c4:	d824      	bhi.n	800a910 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800a8c6:	a201      	add	r2, pc, #4	; (adr r2, 800a8cc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800a8c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8cc:	0800a919 	.word	0x0800a919
 800a8d0:	0800a8e5 	.word	0x0800a8e5
 800a8d4:	0800a8fb 	.word	0x0800a8fb
 800a8d8:	0800a919 	.word	0x0800a919
 800a8dc:	0800a919 	.word	0x0800a919
 800a8e0:	0800a919 	.word	0x0800a919
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a8e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e8:	3308      	adds	r3, #8
 800a8ea:	2101      	movs	r1, #1
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f001 fd79 	bl	800c3e4 <RCCEx_PLL2_Config>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a8f8:	e00f      	b.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a8fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8fe:	3328      	adds	r3, #40	; 0x28
 800a900:	2101      	movs	r1, #1
 800a902:	4618      	mov	r0, r3
 800a904:	f001 fe20 	bl	800c548 <RCCEx_PLL3_Config>
 800a908:	4603      	mov	r3, r0
 800a90a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a90e:	e004      	b.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a910:	2301      	movs	r3, #1
 800a912:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a916:	e000      	b.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800a918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a91a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d10a      	bne.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a922:	4b96      	ldr	r3, [pc, #600]	; (800ab7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a926:	f023 0107 	bic.w	r1, r3, #7
 800a92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a92e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a930:	4a92      	ldr	r2, [pc, #584]	; (800ab7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a932:	430b      	orrs	r3, r1
 800a934:	6553      	str	r3, [r2, #84]	; 0x54
 800a936:	e003      	b.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a938:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a93c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a948:	f002 0304 	and.w	r3, r2, #4
 800a94c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a950:	2300      	movs	r3, #0
 800a952:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a956:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a95a:	460b      	mov	r3, r1
 800a95c:	4313      	orrs	r3, r2
 800a95e:	d044      	beq.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a968:	2b05      	cmp	r3, #5
 800a96a:	d825      	bhi.n	800a9b8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800a96c:	a201      	add	r2, pc, #4	; (adr r2, 800a974 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800a96e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a972:	bf00      	nop
 800a974:	0800a9c1 	.word	0x0800a9c1
 800a978:	0800a98d 	.word	0x0800a98d
 800a97c:	0800a9a3 	.word	0x0800a9a3
 800a980:	0800a9c1 	.word	0x0800a9c1
 800a984:	0800a9c1 	.word	0x0800a9c1
 800a988:	0800a9c1 	.word	0x0800a9c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a98c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a990:	3308      	adds	r3, #8
 800a992:	2101      	movs	r1, #1
 800a994:	4618      	mov	r0, r3
 800a996:	f001 fd25 	bl	800c3e4 <RCCEx_PLL2_Config>
 800a99a:	4603      	mov	r3, r0
 800a99c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a9a0:	e00f      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a9a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9a6:	3328      	adds	r3, #40	; 0x28
 800a9a8:	2101      	movs	r1, #1
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f001 fdcc 	bl	800c548 <RCCEx_PLL3_Config>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a9b6:	e004      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a9be:	e000      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800a9c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a9c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d10b      	bne.n	800a9e2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a9ca:	4b6c      	ldr	r3, [pc, #432]	; (800ab7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a9cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9ce:	f023 0107 	bic.w	r1, r3, #7
 800a9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a9da:	4a68      	ldr	r2, [pc, #416]	; (800ab7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800a9dc:	430b      	orrs	r3, r1
 800a9de:	6593      	str	r3, [r2, #88]	; 0x58
 800a9e0:	e003      	b.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a9e6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a9ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f2:	f002 0320 	and.w	r3, r2, #32
 800a9f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aa00:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800aa04:	460b      	mov	r3, r1
 800aa06:	4313      	orrs	r3, r2
 800aa08:	d055      	beq.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800aa0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa16:	d033      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800aa18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa1c:	d82c      	bhi.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800aa1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa22:	d02f      	beq.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800aa24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa28:	d826      	bhi.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800aa2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa2e:	d02b      	beq.n	800aa88 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800aa30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aa34:	d820      	bhi.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800aa36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa3a:	d012      	beq.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800aa3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa40:	d81a      	bhi.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d022      	beq.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800aa46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa4a:	d115      	bne.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa50:	3308      	adds	r3, #8
 800aa52:	2100      	movs	r1, #0
 800aa54:	4618      	mov	r0, r3
 800aa56:	f001 fcc5 	bl	800c3e4 <RCCEx_PLL2_Config>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800aa60:	e015      	b.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa66:	3328      	adds	r3, #40	; 0x28
 800aa68:	2102      	movs	r1, #2
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f001 fd6c 	bl	800c548 <RCCEx_PLL3_Config>
 800aa70:	4603      	mov	r3, r0
 800aa72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800aa76:	e00a      	b.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa7e:	e006      	b.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800aa80:	bf00      	nop
 800aa82:	e004      	b.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800aa84:	bf00      	nop
 800aa86:	e002      	b.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800aa88:	bf00      	nop
 800aa8a:	e000      	b.n	800aa8e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800aa8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d10b      	bne.n	800aaae <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800aa96:	4b39      	ldr	r3, [pc, #228]	; (800ab7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aa98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa9a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800aa9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aaa6:	4a35      	ldr	r2, [pc, #212]	; (800ab7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800aaa8:	430b      	orrs	r3, r1
 800aaaa:	6553      	str	r3, [r2, #84]	; 0x54
 800aaac:	e003      	b.n	800aab6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aab2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800aac2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aac6:	2300      	movs	r3, #0
 800aac8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aacc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800aad0:	460b      	mov	r3, r1
 800aad2:	4313      	orrs	r3, r2
 800aad4:	d058      	beq.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800aad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aada:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800aade:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aae2:	d033      	beq.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800aae4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800aae8:	d82c      	bhi.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aaea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaee:	d02f      	beq.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800aaf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaf4:	d826      	bhi.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800aaf6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aafa:	d02b      	beq.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800aafc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab00:	d820      	bhi.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ab02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab06:	d012      	beq.n	800ab2e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800ab08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab0c:	d81a      	bhi.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d022      	beq.n	800ab58 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800ab12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab16:	d115      	bne.n	800ab44 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab1c:	3308      	adds	r3, #8
 800ab1e:	2100      	movs	r1, #0
 800ab20:	4618      	mov	r0, r3
 800ab22:	f001 fc5f 	bl	800c3e4 <RCCEx_PLL2_Config>
 800ab26:	4603      	mov	r3, r0
 800ab28:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ab2c:	e015      	b.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab32:	3328      	adds	r3, #40	; 0x28
 800ab34:	2102      	movs	r1, #2
 800ab36:	4618      	mov	r0, r3
 800ab38:	f001 fd06 	bl	800c548 <RCCEx_PLL3_Config>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ab42:	e00a      	b.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab44:	2301      	movs	r3, #1
 800ab46:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab4a:	e006      	b.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ab4c:	bf00      	nop
 800ab4e:	e004      	b.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ab50:	bf00      	nop
 800ab52:	e002      	b.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ab54:	bf00      	nop
 800ab56:	e000      	b.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800ab58:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab5a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10e      	bne.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ab62:	4b06      	ldr	r3, [pc, #24]	; (800ab7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ab64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab66:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800ab6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ab72:	4a02      	ldr	r2, [pc, #8]	; (800ab7c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800ab74:	430b      	orrs	r3, r1
 800ab76:	6593      	str	r3, [r2, #88]	; 0x58
 800ab78:	e006      	b.n	800ab88 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800ab7a:	bf00      	nop
 800ab7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ab88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab90:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800ab94:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ab98:	2300      	movs	r3, #0
 800ab9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800ab9e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800aba2:	460b      	mov	r3, r1
 800aba4:	4313      	orrs	r3, r2
 800aba6:	d055      	beq.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800aba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800abb0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800abb4:	d033      	beq.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800abb6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800abba:	d82c      	bhi.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800abbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abc0:	d02f      	beq.n	800ac22 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800abc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abc6:	d826      	bhi.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800abc8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800abcc:	d02b      	beq.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800abce:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800abd2:	d820      	bhi.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800abd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abd8:	d012      	beq.n	800ac00 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800abda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abde:	d81a      	bhi.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d022      	beq.n	800ac2a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800abe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800abe8:	d115      	bne.n	800ac16 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abee:	3308      	adds	r3, #8
 800abf0:	2100      	movs	r1, #0
 800abf2:	4618      	mov	r0, r3
 800abf4:	f001 fbf6 	bl	800c3e4 <RCCEx_PLL2_Config>
 800abf8:	4603      	mov	r3, r0
 800abfa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800abfe:	e015      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ac00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac04:	3328      	adds	r3, #40	; 0x28
 800ac06:	2102      	movs	r1, #2
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f001 fc9d 	bl	800c548 <RCCEx_PLL3_Config>
 800ac0e:	4603      	mov	r3, r0
 800ac10:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800ac14:	e00a      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac16:	2301      	movs	r3, #1
 800ac18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac1c:	e006      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ac1e:	bf00      	nop
 800ac20:	e004      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ac22:	bf00      	nop
 800ac24:	e002      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ac26:	bf00      	nop
 800ac28:	e000      	b.n	800ac2c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800ac2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d10b      	bne.n	800ac4c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800ac34:	4ba0      	ldr	r3, [pc, #640]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac38:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800ac3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ac44:	4a9c      	ldr	r2, [pc, #624]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac46:	430b      	orrs	r3, r1
 800ac48:	6593      	str	r3, [r2, #88]	; 0x58
 800ac4a:	e003      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac50:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800ac54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac5c:	f002 0308 	and.w	r3, r2, #8
 800ac60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ac64:	2300      	movs	r3, #0
 800ac66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ac6a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800ac6e:	460b      	mov	r3, r1
 800ac70:	4313      	orrs	r3, r2
 800ac72:	d01e      	beq.n	800acb2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800ac74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ac7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac80:	d10c      	bne.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ac82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac86:	3328      	adds	r3, #40	; 0x28
 800ac88:	2102      	movs	r1, #2
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f001 fc5c 	bl	800c548 <RCCEx_PLL3_Config>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d002      	beq.n	800ac9c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800ac96:	2301      	movs	r3, #1
 800ac98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800ac9c:	4b86      	ldr	r3, [pc, #536]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ac9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aca0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800aca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800acac:	4a82      	ldr	r2, [pc, #520]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800acae:	430b      	orrs	r3, r1
 800acb0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800acb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acba:	f002 0310 	and.w	r3, r2, #16
 800acbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800acc2:	2300      	movs	r3, #0
 800acc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800acc8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800accc:	460b      	mov	r3, r1
 800acce:	4313      	orrs	r3, r2
 800acd0:	d01e      	beq.n	800ad10 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800acd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800acda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acde:	d10c      	bne.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ace0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ace4:	3328      	adds	r3, #40	; 0x28
 800ace6:	2102      	movs	r1, #2
 800ace8:	4618      	mov	r0, r3
 800acea:	f001 fc2d 	bl	800c548 <RCCEx_PLL3_Config>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800acf4:	2301      	movs	r3, #1
 800acf6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800acfa:	4b6f      	ldr	r3, [pc, #444]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800acfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acfe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ad02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ad0a:	4a6b      	ldr	r2, [pc, #428]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad0c:	430b      	orrs	r3, r1
 800ad0e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ad10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad18:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800ad1c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ad1e:	2300      	movs	r3, #0
 800ad20:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ad22:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ad26:	460b      	mov	r3, r1
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	d03e      	beq.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ad2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ad34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad38:	d022      	beq.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800ad3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad3e:	d81b      	bhi.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d003      	beq.n	800ad4c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800ad44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad48:	d00b      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800ad4a:	e015      	b.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad50:	3308      	adds	r3, #8
 800ad52:	2100      	movs	r1, #0
 800ad54:	4618      	mov	r0, r3
 800ad56:	f001 fb45 	bl	800c3e4 <RCCEx_PLL2_Config>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ad60:	e00f      	b.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad66:	3328      	adds	r3, #40	; 0x28
 800ad68:	2102      	movs	r1, #2
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f001 fbec 	bl	800c548 <RCCEx_PLL3_Config>
 800ad70:	4603      	mov	r3, r0
 800ad72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ad76:	e004      	b.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad78:	2301      	movs	r3, #1
 800ad7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad7e:	e000      	b.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800ad80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d10b      	bne.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad8a:	4b4b      	ldr	r3, [pc, #300]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad8e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ad92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ad9a:	4a47      	ldr	r2, [pc, #284]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ad9c:	430b      	orrs	r3, r1
 800ad9e:	6593      	str	r3, [r2, #88]	; 0x58
 800ada0:	e003      	b.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ada2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ada6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800adaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb2:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800adb6:	673b      	str	r3, [r7, #112]	; 0x70
 800adb8:	2300      	movs	r3, #0
 800adba:	677b      	str	r3, [r7, #116]	; 0x74
 800adbc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800adc0:	460b      	mov	r3, r1
 800adc2:	4313      	orrs	r3, r2
 800adc4:	d03b      	beq.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800adc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800add2:	d01f      	beq.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800add4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800add8:	d818      	bhi.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800adda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adde:	d003      	beq.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800ade0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ade4:	d007      	beq.n	800adf6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800ade6:	e011      	b.n	800ae0c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ade8:	4b33      	ldr	r3, [pc, #204]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800adea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adec:	4a32      	ldr	r2, [pc, #200]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800adee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adf2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800adf4:	e00f      	b.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800adf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adfa:	3328      	adds	r3, #40	; 0x28
 800adfc:	2101      	movs	r1, #1
 800adfe:	4618      	mov	r0, r3
 800ae00:	f001 fba2 	bl	800c548 <RCCEx_PLL3_Config>
 800ae04:	4603      	mov	r3, r0
 800ae06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800ae0a:	e004      	b.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae12:	e000      	b.n	800ae16 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ae14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10b      	bne.n	800ae36 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ae1e:	4b26      	ldr	r3, [pc, #152]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae22:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ae26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae2e:	4a22      	ldr	r2, [pc, #136]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae30:	430b      	orrs	r3, r1
 800ae32:	6553      	str	r3, [r2, #84]	; 0x54
 800ae34:	e003      	b.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae36:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae3a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ae3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae46:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ae4a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ae50:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ae54:	460b      	mov	r3, r1
 800ae56:	4313      	orrs	r3, r2
 800ae58:	d034      	beq.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ae5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d003      	beq.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800ae64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae68:	d007      	beq.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800ae6a:	e011      	b.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae6c:	4b12      	ldr	r3, [pc, #72]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae70:	4a11      	ldr	r2, [pc, #68]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ae72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae76:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ae78:	e00e      	b.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae7e:	3308      	adds	r3, #8
 800ae80:	2102      	movs	r1, #2
 800ae82:	4618      	mov	r0, r3
 800ae84:	f001 faae 	bl	800c3e4 <RCCEx_PLL2_Config>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ae8e:	e003      	b.n	800ae98 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800ae90:	2301      	movs	r3, #1
 800ae92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae96:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae98:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d10d      	bne.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800aea0:	4b05      	ldr	r3, [pc, #20]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aea2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aea4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeae:	4a02      	ldr	r2, [pc, #8]	; (800aeb8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800aeb0:	430b      	orrs	r3, r1
 800aeb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aeb4:	e006      	b.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800aeb6:	bf00      	nop
 800aeb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aebc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aec0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800aec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aecc:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800aed0:	663b      	str	r3, [r7, #96]	; 0x60
 800aed2:	2300      	movs	r3, #0
 800aed4:	667b      	str	r3, [r7, #100]	; 0x64
 800aed6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800aeda:	460b      	mov	r3, r1
 800aedc:	4313      	orrs	r3, r2
 800aede:	d00c      	beq.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aee4:	3328      	adds	r3, #40	; 0x28
 800aee6:	2102      	movs	r1, #2
 800aee8:	4618      	mov	r0, r3
 800aeea:	f001 fb2d 	bl	800c548 <RCCEx_PLL3_Config>
 800aeee:	4603      	mov	r3, r0
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d002      	beq.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800aef4:	2301      	movs	r3, #1
 800aef6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800aefa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af02:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800af06:	65bb      	str	r3, [r7, #88]	; 0x58
 800af08:	2300      	movs	r3, #0
 800af0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800af0c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800af10:	460b      	mov	r3, r1
 800af12:	4313      	orrs	r3, r2
 800af14:	d036      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800af16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af20:	d018      	beq.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800af22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af26:	d811      	bhi.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800af28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af2c:	d014      	beq.n	800af58 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800af2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af32:	d80b      	bhi.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800af34:	2b00      	cmp	r3, #0
 800af36:	d011      	beq.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800af38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af3c:	d106      	bne.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af3e:	4bb7      	ldr	r3, [pc, #732]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af42:	4ab6      	ldr	r2, [pc, #728]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800af4a:	e008      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af4c:	2301      	movs	r3, #1
 800af4e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af52:	e004      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800af54:	bf00      	nop
 800af56:	e002      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800af58:	bf00      	nop
 800af5a:	e000      	b.n	800af5e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800af5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af5e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af62:	2b00      	cmp	r3, #0
 800af64:	d10a      	bne.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800af66:	4bad      	ldr	r3, [pc, #692]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800af6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af74:	4aa9      	ldr	r2, [pc, #676]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800af76:	430b      	orrs	r3, r1
 800af78:	6553      	str	r3, [r2, #84]	; 0x54
 800af7a:	e003      	b.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800af84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800af90:	653b      	str	r3, [r7, #80]	; 0x50
 800af92:	2300      	movs	r3, #0
 800af94:	657b      	str	r3, [r7, #84]	; 0x54
 800af96:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800af9a:	460b      	mov	r3, r1
 800af9c:	4313      	orrs	r3, r2
 800af9e:	d009      	beq.n	800afb4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800afa0:	4b9e      	ldr	r3, [pc, #632]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800afa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afa4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800afa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800afae:	4a9b      	ldr	r2, [pc, #620]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800afb0:	430b      	orrs	r3, r1
 800afb2:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800afb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afbc:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800afc0:	64bb      	str	r3, [r7, #72]	; 0x48
 800afc2:	2300      	movs	r3, #0
 800afc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800afc6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800afca:	460b      	mov	r3, r1
 800afcc:	4313      	orrs	r3, r2
 800afce:	d009      	beq.n	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800afd0:	4b92      	ldr	r3, [pc, #584]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800afd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afd4:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800afd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afde:	4a8f      	ldr	r2, [pc, #572]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800afe0:	430b      	orrs	r3, r1
 800afe2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800afe4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afec:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800aff0:	643b      	str	r3, [r7, #64]	; 0x40
 800aff2:	2300      	movs	r3, #0
 800aff4:	647b      	str	r3, [r7, #68]	; 0x44
 800aff6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800affa:	460b      	mov	r3, r1
 800affc:	4313      	orrs	r3, r2
 800affe:	d00e      	beq.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b000:	4b86      	ldr	r3, [pc, #536]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	4a85      	ldr	r2, [pc, #532]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b006:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b00a:	6113      	str	r3, [r2, #16]
 800b00c:	4b83      	ldr	r3, [pc, #524]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b00e:	6919      	ldr	r1, [r3, #16]
 800b010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b014:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b018:	4a80      	ldr	r2, [pc, #512]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b01a:	430b      	orrs	r3, r1
 800b01c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b01e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b022:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b026:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b02a:	63bb      	str	r3, [r7, #56]	; 0x38
 800b02c:	2300      	movs	r3, #0
 800b02e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b030:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b034:	460b      	mov	r3, r1
 800b036:	4313      	orrs	r3, r2
 800b038:	d009      	beq.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b03a:	4b78      	ldr	r3, [pc, #480]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b03c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b03e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b042:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b048:	4a74      	ldr	r2, [pc, #464]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b04a:	430b      	orrs	r3, r1
 800b04c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b04e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b056:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b05a:	633b      	str	r3, [r7, #48]	; 0x30
 800b05c:	2300      	movs	r3, #0
 800b05e:	637b      	str	r3, [r7, #52]	; 0x34
 800b060:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b064:	460b      	mov	r3, r1
 800b066:	4313      	orrs	r3, r2
 800b068:	d00a      	beq.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b06a:	4b6c      	ldr	r3, [pc, #432]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b06c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b06e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b07a:	4a68      	ldr	r2, [pc, #416]	; (800b21c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b07c:	430b      	orrs	r3, r1
 800b07e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b080:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b084:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b088:	2100      	movs	r1, #0
 800b08a:	62b9      	str	r1, [r7, #40]	; 0x28
 800b08c:	f003 0301 	and.w	r3, r3, #1
 800b090:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b092:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b096:	460b      	mov	r3, r1
 800b098:	4313      	orrs	r3, r2
 800b09a:	d011      	beq.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b09c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0a0:	3308      	adds	r3, #8
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f001 f99d 	bl	800c3e4 <RCCEx_PLL2_Config>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b0b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d003      	beq.n	800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c8:	2100      	movs	r1, #0
 800b0ca:	6239      	str	r1, [r7, #32]
 800b0cc:	f003 0302 	and.w	r3, r3, #2
 800b0d0:	627b      	str	r3, [r7, #36]	; 0x24
 800b0d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b0d6:	460b      	mov	r3, r1
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	d011      	beq.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b0dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0e0:	3308      	adds	r3, #8
 800b0e2:	2101      	movs	r1, #1
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f001 f97d 	bl	800c3e4 <RCCEx_PLL2_Config>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b0f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d003      	beq.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b100:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b108:	2100      	movs	r1, #0
 800b10a:	61b9      	str	r1, [r7, #24]
 800b10c:	f003 0304 	and.w	r3, r3, #4
 800b110:	61fb      	str	r3, [r7, #28]
 800b112:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b116:	460b      	mov	r3, r1
 800b118:	4313      	orrs	r3, r2
 800b11a:	d011      	beq.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b11c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b120:	3308      	adds	r3, #8
 800b122:	2102      	movs	r1, #2
 800b124:	4618      	mov	r0, r3
 800b126:	f001 f95d 	bl	800c3e4 <RCCEx_PLL2_Config>
 800b12a:	4603      	mov	r3, r0
 800b12c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b130:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b134:	2b00      	cmp	r3, #0
 800b136:	d003      	beq.n	800b140 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b138:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b13c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b144:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b148:	2100      	movs	r1, #0
 800b14a:	6139      	str	r1, [r7, #16]
 800b14c:	f003 0308 	and.w	r3, r3, #8
 800b150:	617b      	str	r3, [r7, #20]
 800b152:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b156:	460b      	mov	r3, r1
 800b158:	4313      	orrs	r3, r2
 800b15a:	d011      	beq.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b160:	3328      	adds	r3, #40	; 0x28
 800b162:	2100      	movs	r1, #0
 800b164:	4618      	mov	r0, r3
 800b166:	f001 f9ef 	bl	800c548 <RCCEx_PLL3_Config>
 800b16a:	4603      	mov	r3, r0
 800b16c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800b170:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b174:	2b00      	cmp	r3, #0
 800b176:	d003      	beq.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b178:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b17c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b188:	2100      	movs	r1, #0
 800b18a:	60b9      	str	r1, [r7, #8]
 800b18c:	f003 0310 	and.w	r3, r3, #16
 800b190:	60fb      	str	r3, [r7, #12]
 800b192:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800b196:	460b      	mov	r3, r1
 800b198:	4313      	orrs	r3, r2
 800b19a:	d011      	beq.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b19c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1a0:	3328      	adds	r3, #40	; 0x28
 800b1a2:	2101      	movs	r1, #1
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f001 f9cf 	bl	800c548 <RCCEx_PLL3_Config>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b1b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d003      	beq.n	800b1c0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b1c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c8:	2100      	movs	r1, #0
 800b1ca:	6039      	str	r1, [r7, #0]
 800b1cc:	f003 0320 	and.w	r3, r3, #32
 800b1d0:	607b      	str	r3, [r7, #4]
 800b1d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b1d6:	460b      	mov	r3, r1
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	d011      	beq.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b1dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e0:	3328      	adds	r3, #40	; 0x28
 800b1e2:	2102      	movs	r1, #2
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f001 f9af 	bl	800c548 <RCCEx_PLL3_Config>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b1f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d003      	beq.n	800b200 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800b200:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800b204:	2b00      	cmp	r3, #0
 800b206:	d101      	bne.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800b208:	2300      	movs	r3, #0
 800b20a:	e000      	b.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800b20c:	2301      	movs	r3, #1
}
 800b20e:	4618      	mov	r0, r3
 800b210:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800b214:	46bd      	mov	sp, r7
 800b216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b21a:	bf00      	nop
 800b21c:	58024400 	.word	0x58024400

0800b220 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b220:	b580      	push	{r7, lr}
 800b222:	b090      	sub	sp, #64	; 0x40
 800b224:	af00      	add	r7, sp, #0
 800b226:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b22a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b22e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800b232:	430b      	orrs	r3, r1
 800b234:	f040 8094 	bne.w	800b360 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b238:	4b9b      	ldr	r3, [pc, #620]	; (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b23a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b23c:	f003 0307 	and.w	r3, r3, #7
 800b240:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b244:	2b04      	cmp	r3, #4
 800b246:	f200 8087 	bhi.w	800b358 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b24a:	a201      	add	r2, pc, #4	; (adr r2, 800b250 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b250:	0800b265 	.word	0x0800b265
 800b254:	0800b28d 	.word	0x0800b28d
 800b258:	0800b2b5 	.word	0x0800b2b5
 800b25c:	0800b351 	.word	0x0800b351
 800b260:	0800b2dd 	.word	0x0800b2dd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b264:	4b90      	ldr	r3, [pc, #576]	; (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b26c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b270:	d108      	bne.n	800b284 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b276:	4618      	mov	r0, r3
 800b278:	f000 ff62 	bl	800c140 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b27c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b280:	f000 bc93 	b.w	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b284:	2300      	movs	r3, #0
 800b286:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b288:	f000 bc8f 	b.w	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b28c:	4b86      	ldr	r3, [pc, #536]	; (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b298:	d108      	bne.n	800b2ac <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b29a:	f107 0318 	add.w	r3, r7, #24
 800b29e:	4618      	mov	r0, r3
 800b2a0:	f000 fca6 	bl	800bbf0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b2a4:	69bb      	ldr	r3, [r7, #24]
 800b2a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2a8:	f000 bc7f 	b.w	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2b0:	f000 bc7b 	b.w	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b2b4:	4b7c      	ldr	r3, [pc, #496]	; (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b2bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2c0:	d108      	bne.n	800b2d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b2c2:	f107 030c 	add.w	r3, r7, #12
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f000 fde6 	bl	800be98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b2d0:	f000 bc6b 	b.w	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2d8:	f000 bc67 	b.w	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b2dc:	4b72      	ldr	r3, [pc, #456]	; (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b2e4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b2e6:	4b70      	ldr	r3, [pc, #448]	; (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	f003 0304 	and.w	r3, r3, #4
 800b2ee:	2b04      	cmp	r3, #4
 800b2f0:	d10c      	bne.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d109      	bne.n	800b30c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b2f8:	4b6b      	ldr	r3, [pc, #428]	; (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	08db      	lsrs	r3, r3, #3
 800b2fe:	f003 0303 	and.w	r3, r3, #3
 800b302:	4a6a      	ldr	r2, [pc, #424]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b304:	fa22 f303 	lsr.w	r3, r2, r3
 800b308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b30a:	e01f      	b.n	800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b30c:	4b66      	ldr	r3, [pc, #408]	; (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b318:	d106      	bne.n	800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b31c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b320:	d102      	bne.n	800b328 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b322:	4b63      	ldr	r3, [pc, #396]	; (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b324:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b326:	e011      	b.n	800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b328:	4b5f      	ldr	r3, [pc, #380]	; (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b330:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b334:	d106      	bne.n	800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b33c:	d102      	bne.n	800b344 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b33e:	4b5d      	ldr	r3, [pc, #372]	; (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b340:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b342:	e003      	b.n	800b34c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b344:	2300      	movs	r3, #0
 800b346:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b348:	f000 bc2f 	b.w	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b34c:	f000 bc2d 	b.w	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b350:	4b59      	ldr	r3, [pc, #356]	; (800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b354:	f000 bc29 	b.w	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b358:	2300      	movs	r3, #0
 800b35a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b35c:	f000 bc25 	b.w	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b360:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b364:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800b368:	430b      	orrs	r3, r1
 800b36a:	f040 80a7 	bne.w	800b4bc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800b36e:	4b4e      	ldr	r3, [pc, #312]	; (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b372:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b376:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b37e:	d054      	beq.n	800b42a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800b380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b382:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b386:	f200 808b 	bhi.w	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b390:	f000 8083 	beq.w	800b49a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800b394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b396:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b39a:	f200 8081 	bhi.w	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b3a4:	d02f      	beq.n	800b406 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800b3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b3ac:	d878      	bhi.n	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800b3ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d004      	beq.n	800b3be <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800b3b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b3ba:	d012      	beq.n	800b3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800b3bc:	e070      	b.n	800b4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b3be:	4b3a      	ldr	r3, [pc, #232]	; (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3ca:	d107      	bne.n	800b3dc <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b3cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f000 feb5 	bl	800c140 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3da:	e3e6      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b3dc:	2300      	movs	r3, #0
 800b3de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3e0:	e3e3      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b3e2:	4b31      	ldr	r3, [pc, #196]	; (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b3ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b3ee:	d107      	bne.n	800b400 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b3f0:	f107 0318 	add.w	r3, r7, #24
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	f000 fbfb 	bl	800bbf0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b3fa:	69bb      	ldr	r3, [r7, #24]
 800b3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3fe:	e3d4      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b400:	2300      	movs	r3, #0
 800b402:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b404:	e3d1      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b406:	4b28      	ldr	r3, [pc, #160]	; (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b40e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b412:	d107      	bne.n	800b424 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b414:	f107 030c 	add.w	r3, r7, #12
 800b418:	4618      	mov	r0, r3
 800b41a:	f000 fd3d 	bl	800be98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b422:	e3c2      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b424:	2300      	movs	r3, #0
 800b426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b428:	e3bf      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b42a:	4b1f      	ldr	r3, [pc, #124]	; (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b42c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b42e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b432:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b434:	4b1c      	ldr	r3, [pc, #112]	; (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	f003 0304 	and.w	r3, r3, #4
 800b43c:	2b04      	cmp	r3, #4
 800b43e:	d10c      	bne.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800b440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b442:	2b00      	cmp	r3, #0
 800b444:	d109      	bne.n	800b45a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b446:	4b18      	ldr	r3, [pc, #96]	; (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	08db      	lsrs	r3, r3, #3
 800b44c:	f003 0303 	and.w	r3, r3, #3
 800b450:	4a16      	ldr	r2, [pc, #88]	; (800b4ac <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800b452:	fa22 f303 	lsr.w	r3, r2, r3
 800b456:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b458:	e01e      	b.n	800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b45a:	4b13      	ldr	r3, [pc, #76]	; (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b466:	d106      	bne.n	800b476 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800b468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b46a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b46e:	d102      	bne.n	800b476 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b470:	4b0f      	ldr	r3, [pc, #60]	; (800b4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800b472:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b474:	e010      	b.n	800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b476:	4b0c      	ldr	r3, [pc, #48]	; (800b4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b47e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b482:	d106      	bne.n	800b492 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b484:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b486:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b48a:	d102      	bne.n	800b492 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b48c:	4b09      	ldr	r3, [pc, #36]	; (800b4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800b48e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b490:	e002      	b.n	800b498 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b492:	2300      	movs	r3, #0
 800b494:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b496:	e388      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b498:	e387      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b49a:	4b07      	ldr	r3, [pc, #28]	; (800b4b8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b49c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b49e:	e384      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4a4:	e381      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b4a6:	bf00      	nop
 800b4a8:	58024400 	.word	0x58024400
 800b4ac:	03d09000 	.word	0x03d09000
 800b4b0:	003d0900 	.word	0x003d0900
 800b4b4:	02faf080 	.word	0x02faf080
 800b4b8:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b4bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4c0:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b4c4:	430b      	orrs	r3, r1
 800b4c6:	f040 809c 	bne.w	800b602 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b4ca:	4b9e      	ldr	r3, [pc, #632]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b4cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4ce:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b4d2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b4d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b4da:	d054      	beq.n	800b586 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800b4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b4e2:	f200 808b 	bhi.w	800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b4ec:	f000 8083 	beq.w	800b5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800b4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b4f6:	f200 8081 	bhi.w	800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b500:	d02f      	beq.n	800b562 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800b502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b504:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b508:	d878      	bhi.n	800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800b50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d004      	beq.n	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b512:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b516:	d012      	beq.n	800b53e <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800b518:	e070      	b.n	800b5fc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b51a:	4b8a      	ldr	r3, [pc, #552]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b522:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b526:	d107      	bne.n	800b538 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b528:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b52c:	4618      	mov	r0, r3
 800b52e:	f000 fe07 	bl	800c140 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b534:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b536:	e338      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b538:	2300      	movs	r3, #0
 800b53a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b53c:	e335      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b53e:	4b81      	ldr	r3, [pc, #516]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b546:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b54a:	d107      	bne.n	800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b54c:	f107 0318 	add.w	r3, r7, #24
 800b550:	4618      	mov	r0, r3
 800b552:	f000 fb4d 	bl	800bbf0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b55a:	e326      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b55c:	2300      	movs	r3, #0
 800b55e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b560:	e323      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b562:	4b78      	ldr	r3, [pc, #480]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b56a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b56e:	d107      	bne.n	800b580 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b570:	f107 030c 	add.w	r3, r7, #12
 800b574:	4618      	mov	r0, r3
 800b576:	f000 fc8f 	bl	800be98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b57e:	e314      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b580:	2300      	movs	r3, #0
 800b582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b584:	e311      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b586:	4b6f      	ldr	r3, [pc, #444]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b58a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b58e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b590:	4b6c      	ldr	r3, [pc, #432]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f003 0304 	and.w	r3, r3, #4
 800b598:	2b04      	cmp	r3, #4
 800b59a:	d10c      	bne.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800b59c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d109      	bne.n	800b5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5a2:	4b68      	ldr	r3, [pc, #416]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	08db      	lsrs	r3, r3, #3
 800b5a8:	f003 0303 	and.w	r3, r3, #3
 800b5ac:	4a66      	ldr	r2, [pc, #408]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b5ae:	fa22 f303 	lsr.w	r3, r2, r3
 800b5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5b4:	e01e      	b.n	800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b5b6:	4b63      	ldr	r3, [pc, #396]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b5c2:	d106      	bne.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5ca:	d102      	bne.n	800b5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b5cc:	4b5f      	ldr	r3, [pc, #380]	; (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5d0:	e010      	b.n	800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b5d2:	4b5c      	ldr	r3, [pc, #368]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5de:	d106      	bne.n	800b5ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800b5e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b5e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5e6:	d102      	bne.n	800b5ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b5e8:	4b59      	ldr	r3, [pc, #356]	; (800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b5ec:	e002      	b.n	800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b5f2:	e2da      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b5f4:	e2d9      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b5f6:	4b57      	ldr	r3, [pc, #348]	; (800b754 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5fa:	e2d6      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b600:	e2d3      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b602:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b606:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b60a:	430b      	orrs	r3, r1
 800b60c:	f040 80a7 	bne.w	800b75e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b610:	4b4c      	ldr	r3, [pc, #304]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b614:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b618:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b61c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b620:	d055      	beq.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800b622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b628:	f200 8096 	bhi.w	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b62c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b62e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b632:	f000 8084 	beq.w	800b73e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800b636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b638:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b63c:	f200 808c 	bhi.w	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b646:	d030      	beq.n	800b6aa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b64a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b64e:	f200 8083 	bhi.w	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800b652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b654:	2b00      	cmp	r3, #0
 800b656:	d004      	beq.n	800b662 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800b658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b65a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b65e:	d012      	beq.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800b660:	e07a      	b.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b662:	4b38      	ldr	r3, [pc, #224]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b66a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b66e:	d107      	bne.n	800b680 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b670:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b674:	4618      	mov	r0, r3
 800b676:	f000 fd63 	bl	800c140 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b67a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b67c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b67e:	e294      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b680:	2300      	movs	r3, #0
 800b682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b684:	e291      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b686:	4b2f      	ldr	r3, [pc, #188]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b68e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b692:	d107      	bne.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b694:	f107 0318 	add.w	r3, r7, #24
 800b698:	4618      	mov	r0, r3
 800b69a:	f000 faa9 	bl	800bbf0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6a2:	e282      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6a8:	e27f      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b6aa:	4b26      	ldr	r3, [pc, #152]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b6b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6b6:	d107      	bne.n	800b6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6b8:	f107 030c 	add.w	r3, r7, #12
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f000 fbeb 	bl	800be98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6c6:	e270      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6cc:	e26d      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b6ce:	4b1d      	ldr	r3, [pc, #116]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b6d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b6d6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b6d8:	4b1a      	ldr	r3, [pc, #104]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f003 0304 	and.w	r3, r3, #4
 800b6e0:	2b04      	cmp	r3, #4
 800b6e2:	d10c      	bne.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800b6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d109      	bne.n	800b6fe <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b6ea:	4b16      	ldr	r3, [pc, #88]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	08db      	lsrs	r3, r3, #3
 800b6f0:	f003 0303 	and.w	r3, r3, #3
 800b6f4:	4a14      	ldr	r2, [pc, #80]	; (800b748 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800b6f6:	fa22 f303 	lsr.w	r3, r2, r3
 800b6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b6fc:	e01e      	b.n	800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b6fe:	4b11      	ldr	r3, [pc, #68]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b70a:	d106      	bne.n	800b71a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800b70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b70e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b712:	d102      	bne.n	800b71a <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b714:	4b0d      	ldr	r3, [pc, #52]	; (800b74c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800b716:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b718:	e010      	b.n	800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b71a:	4b0a      	ldr	r3, [pc, #40]	; (800b744 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b722:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b726:	d106      	bne.n	800b736 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800b728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b72e:	d102      	bne.n	800b736 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b730:	4b07      	ldr	r3, [pc, #28]	; (800b750 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b732:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b734:	e002      	b.n	800b73c <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b736:	2300      	movs	r3, #0
 800b738:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b73a:	e236      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b73c:	e235      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b73e:	4b05      	ldr	r3, [pc, #20]	; (800b754 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b740:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b742:	e232      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b744:	58024400 	.word	0x58024400
 800b748:	03d09000 	.word	0x03d09000
 800b74c:	003d0900 	.word	0x003d0900
 800b750:	02faf080 	.word	0x02faf080
 800b754:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b758:	2300      	movs	r3, #0
 800b75a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b75c:	e225      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b75e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b762:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b766:	430b      	orrs	r3, r1
 800b768:	f040 8085 	bne.w	800b876 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b76c:	4b9c      	ldr	r3, [pc, #624]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b76e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b770:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b774:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b77c:	d06b      	beq.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800b77e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b784:	d874      	bhi.n	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b788:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b78c:	d056      	beq.n	800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800b78e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b790:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b794:	d86c      	bhi.n	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b798:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b79c:	d03b      	beq.n	800b816 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800b79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b7a4:	d864      	bhi.n	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b7a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7ac:	d021      	beq.n	800b7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800b7ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7b4:	d85c      	bhi.n	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800b7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d004      	beq.n	800b7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800b7bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7c2:	d004      	beq.n	800b7ce <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800b7c4:	e054      	b.n	800b870 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b7c6:	f7fe fb5f 	bl	8009e88 <HAL_RCC_GetPCLK1Freq>
 800b7ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b7cc:	e1ed      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b7ce:	4b84      	ldr	r3, [pc, #528]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b7d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b7da:	d107      	bne.n	800b7ec <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7dc:	f107 0318 	add.w	r3, r7, #24
 800b7e0:	4618      	mov	r0, r3
 800b7e2:	f000 fa05 	bl	800bbf0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7ea:	e1de      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b7f0:	e1db      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b7f2:	4b7b      	ldr	r3, [pc, #492]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b7fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7fe:	d107      	bne.n	800b810 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b800:	f107 030c 	add.w	r3, r7, #12
 800b804:	4618      	mov	r0, r3
 800b806:	f000 fb47 	bl	800be98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b80a:	693b      	ldr	r3, [r7, #16]
 800b80c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b80e:	e1cc      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b810:	2300      	movs	r3, #0
 800b812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b814:	e1c9      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b816:	4b72      	ldr	r3, [pc, #456]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	f003 0304 	and.w	r3, r3, #4
 800b81e:	2b04      	cmp	r3, #4
 800b820:	d109      	bne.n	800b836 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b822:	4b6f      	ldr	r3, [pc, #444]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	08db      	lsrs	r3, r3, #3
 800b828:	f003 0303 	and.w	r3, r3, #3
 800b82c:	4a6d      	ldr	r2, [pc, #436]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b82e:	fa22 f303 	lsr.w	r3, r2, r3
 800b832:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b834:	e1b9      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b836:	2300      	movs	r3, #0
 800b838:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b83a:	e1b6      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b83c:	4b68      	ldr	r3, [pc, #416]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b848:	d102      	bne.n	800b850 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800b84a:	4b67      	ldr	r3, [pc, #412]	; (800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b84c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b84e:	e1ac      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b850:	2300      	movs	r3, #0
 800b852:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b854:	e1a9      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b856:	4b62      	ldr	r3, [pc, #392]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b85e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b862:	d102      	bne.n	800b86a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800b864:	4b61      	ldr	r3, [pc, #388]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b866:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b868:	e19f      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b86a:	2300      	movs	r3, #0
 800b86c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b86e:	e19c      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800b870:	2300      	movs	r3, #0
 800b872:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b874:	e199      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b876:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b87a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b87e:	430b      	orrs	r3, r1
 800b880:	d173      	bne.n	800b96a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b882:	4b57      	ldr	r3, [pc, #348]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b886:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b88a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b88c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b892:	d02f      	beq.n	800b8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800b894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b896:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b89a:	d863      	bhi.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800b89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d004      	beq.n	800b8ac <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800b8a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8a8:	d012      	beq.n	800b8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800b8aa:	e05b      	b.n	800b964 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8ac:	4b4c      	ldr	r3, [pc, #304]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b8b8:	d107      	bne.n	800b8ca <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8ba:	f107 0318 	add.w	r3, r7, #24
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f000 f996 	bl	800bbf0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8c8:	e16f      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8ce:	e16c      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b8d0:	4b43      	ldr	r3, [pc, #268]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b8d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8dc:	d107      	bne.n	800b8ee <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8de:	f107 030c 	add.w	r3, r7, #12
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f000 fad8 	bl	800be98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8ec:	e15d      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b8f2:	e15a      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b8f4:	4b3a      	ldr	r3, [pc, #232]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b8f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b8fc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b8fe:	4b38      	ldr	r3, [pc, #224]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	f003 0304 	and.w	r3, r3, #4
 800b906:	2b04      	cmp	r3, #4
 800b908:	d10c      	bne.n	800b924 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800b90a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d109      	bne.n	800b924 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b910:	4b33      	ldr	r3, [pc, #204]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	08db      	lsrs	r3, r3, #3
 800b916:	f003 0303 	and.w	r3, r3, #3
 800b91a:	4a32      	ldr	r2, [pc, #200]	; (800b9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800b91c:	fa22 f303 	lsr.w	r3, r2, r3
 800b920:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b922:	e01e      	b.n	800b962 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b924:	4b2e      	ldr	r3, [pc, #184]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b92c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b930:	d106      	bne.n	800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800b932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b934:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b938:	d102      	bne.n	800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b93a:	4b2b      	ldr	r3, [pc, #172]	; (800b9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800b93c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b93e:	e010      	b.n	800b962 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b940:	4b27      	ldr	r3, [pc, #156]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b948:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b94c:	d106      	bne.n	800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800b94e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b954:	d102      	bne.n	800b95c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b956:	4b25      	ldr	r3, [pc, #148]	; (800b9ec <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800b958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b95a:	e002      	b.n	800b962 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b95c:	2300      	movs	r3, #0
 800b95e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b960:	e123      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b962:	e122      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b964:	2300      	movs	r3, #0
 800b966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b968:	e11f      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b96a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b96e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b972:	430b      	orrs	r3, r1
 800b974:	d13c      	bne.n	800b9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b976:	4b1a      	ldr	r3, [pc, #104]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b97a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b97e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b982:	2b00      	cmp	r3, #0
 800b984:	d004      	beq.n	800b990 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800b986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b98c:	d012      	beq.n	800b9b4 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800b98e:	e023      	b.n	800b9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b990:	4b13      	ldr	r3, [pc, #76]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b998:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b99c:	d107      	bne.n	800b9ae <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b99e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f000 fbcc 	bl	800c140 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9ac:	e0fd      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9b2:	e0fa      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9b4:	4b0a      	ldr	r3, [pc, #40]	; (800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b9bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b9c0:	d107      	bne.n	800b9d2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9c2:	f107 0318 	add.w	r3, r7, #24
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f000 f912 	bl	800bbf0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b9cc:	6a3b      	ldr	r3, [r7, #32]
 800b9ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9d0:	e0eb      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9d6:	e0e8      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800b9d8:	2300      	movs	r3, #0
 800b9da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b9dc:	e0e5      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800b9de:	bf00      	nop
 800b9e0:	58024400 	.word	0x58024400
 800b9e4:	03d09000 	.word	0x03d09000
 800b9e8:	003d0900 	.word	0x003d0900
 800b9ec:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b9f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9f4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b9f8:	430b      	orrs	r3, r1
 800b9fa:	f040 8085 	bne.w	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b9fe:	4b6d      	ldr	r3, [pc, #436]	; (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba02:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ba06:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ba08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba0e:	d06b      	beq.n	800bae8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800ba10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba16:	d874      	bhi.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ba18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba1e:	d056      	beq.n	800bace <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800ba20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba26:	d86c      	bhi.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ba28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba2e:	d03b      	beq.n	800baa8 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800ba30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ba36:	d864      	bhi.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ba38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba3a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba3e:	d021      	beq.n	800ba84 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800ba40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba46:	d85c      	bhi.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800ba48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d004      	beq.n	800ba58 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800ba4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ba54:	d004      	beq.n	800ba60 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800ba56:	e054      	b.n	800bb02 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ba58:	f000 f8b4 	bl	800bbc4 <HAL_RCCEx_GetD3PCLK1Freq>
 800ba5c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ba5e:	e0a4      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ba60:	4b54      	ldr	r3, [pc, #336]	; (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ba68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ba6c:	d107      	bne.n	800ba7e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ba6e:	f107 0318 	add.w	r3, r7, #24
 800ba72:	4618      	mov	r0, r3
 800ba74:	f000 f8bc 	bl	800bbf0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ba78:	69fb      	ldr	r3, [r7, #28]
 800ba7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ba7c:	e095      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800ba7e:	2300      	movs	r3, #0
 800ba80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ba82:	e092      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ba84:	4b4b      	ldr	r3, [pc, #300]	; (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ba8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ba90:	d107      	bne.n	800baa2 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ba92:	f107 030c 	add.w	r3, r7, #12
 800ba96:	4618      	mov	r0, r3
 800ba98:	f000 f9fe 	bl	800be98 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800baa0:	e083      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800baa2:	2300      	movs	r3, #0
 800baa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800baa6:	e080      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800baa8:	4b42      	ldr	r3, [pc, #264]	; (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f003 0304 	and.w	r3, r3, #4
 800bab0:	2b04      	cmp	r3, #4
 800bab2:	d109      	bne.n	800bac8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bab4:	4b3f      	ldr	r3, [pc, #252]	; (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	08db      	lsrs	r3, r3, #3
 800baba:	f003 0303 	and.w	r3, r3, #3
 800babe:	4a3e      	ldr	r2, [pc, #248]	; (800bbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800bac0:	fa22 f303 	lsr.w	r3, r2, r3
 800bac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bac6:	e070      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bac8:	2300      	movs	r3, #0
 800baca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bacc:	e06d      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800bace:	4b39      	ldr	r3, [pc, #228]	; (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bada:	d102      	bne.n	800bae2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800badc:	4b37      	ldr	r3, [pc, #220]	; (800bbbc <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800bade:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bae0:	e063      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bae2:	2300      	movs	r3, #0
 800bae4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bae6:	e060      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bae8:	4b32      	ldr	r3, [pc, #200]	; (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baf0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800baf4:	d102      	bne.n	800bafc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800baf6:	4b32      	ldr	r3, [pc, #200]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800baf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bafa:	e056      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bafc:	2300      	movs	r3, #0
 800bafe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb00:	e053      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800bb02:	2300      	movs	r3, #0
 800bb04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb06:	e050      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800bb08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb0c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800bb10:	430b      	orrs	r3, r1
 800bb12:	d148      	bne.n	800bba6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800bb14:	4b27      	ldr	r3, [pc, #156]	; (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bb16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb1c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800bb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb24:	d02a      	beq.n	800bb7c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800bb26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb2c:	d838      	bhi.n	800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800bb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d004      	beq.n	800bb3e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800bb34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb3a:	d00d      	beq.n	800bb58 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800bb3c:	e030      	b.n	800bba0 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800bb3e:	4b1d      	ldr	r3, [pc, #116]	; (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb46:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bb4a:	d102      	bne.n	800bb52 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800bb4c:	4b1c      	ldr	r3, [pc, #112]	; (800bbc0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800bb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb50:	e02b      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb52:	2300      	movs	r3, #0
 800bb54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb56:	e028      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bb58:	4b16      	ldr	r3, [pc, #88]	; (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bb64:	d107      	bne.n	800bb76 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bb66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f000 fae8 	bl	800c140 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb74:	e019      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb76:	2300      	movs	r3, #0
 800bb78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb7a:	e016      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb7c:	4b0d      	ldr	r3, [pc, #52]	; (800bbb4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb84:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb88:	d107      	bne.n	800bb9a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb8a:	f107 0318 	add.w	r3, r7, #24
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f000 f82e 	bl	800bbf0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb98:	e007      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb9e:	e004      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bba0:	2300      	movs	r3, #0
 800bba2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bba4:	e001      	b.n	800bbaa <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800bba6:	2300      	movs	r3, #0
 800bba8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800bbaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3740      	adds	r7, #64	; 0x40
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	58024400 	.word	0x58024400
 800bbb8:	03d09000 	.word	0x03d09000
 800bbbc:	003d0900 	.word	0x003d0900
 800bbc0:	02faf080 	.word	0x02faf080

0800bbc4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800bbc4:	b580      	push	{r7, lr}
 800bbc6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800bbc8:	f7fe f92e 	bl	8009e28 <HAL_RCC_GetHCLKFreq>
 800bbcc:	4602      	mov	r2, r0
 800bbce:	4b06      	ldr	r3, [pc, #24]	; (800bbe8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800bbd0:	6a1b      	ldr	r3, [r3, #32]
 800bbd2:	091b      	lsrs	r3, r3, #4
 800bbd4:	f003 0307 	and.w	r3, r3, #7
 800bbd8:	4904      	ldr	r1, [pc, #16]	; (800bbec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800bbda:	5ccb      	ldrb	r3, [r1, r3]
 800bbdc:	f003 031f 	and.w	r3, r3, #31
 800bbe0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	58024400 	.word	0x58024400
 800bbec:	0801ad00 	.word	0x0801ad00

0800bbf0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b089      	sub	sp, #36	; 0x24
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bbf8:	4ba1      	ldr	r3, [pc, #644]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbfc:	f003 0303 	and.w	r3, r3, #3
 800bc00:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800bc02:	4b9f      	ldr	r3, [pc, #636]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc06:	0b1b      	lsrs	r3, r3, #12
 800bc08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc0c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800bc0e:	4b9c      	ldr	r3, [pc, #624]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc12:	091b      	lsrs	r3, r3, #4
 800bc14:	f003 0301 	and.w	r3, r3, #1
 800bc18:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800bc1a:	4b99      	ldr	r3, [pc, #612]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc1e:	08db      	lsrs	r3, r3, #3
 800bc20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc24:	693a      	ldr	r2, [r7, #16]
 800bc26:	fb02 f303 	mul.w	r3, r2, r3
 800bc2a:	ee07 3a90 	vmov	s15, r3
 800bc2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f000 8111 	beq.w	800be60 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	2b02      	cmp	r3, #2
 800bc42:	f000 8083 	beq.w	800bd4c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	2b02      	cmp	r3, #2
 800bc4a:	f200 80a1 	bhi.w	800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bc4e:	69bb      	ldr	r3, [r7, #24]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d003      	beq.n	800bc5c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	2b01      	cmp	r3, #1
 800bc58:	d056      	beq.n	800bd08 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bc5a:	e099      	b.n	800bd90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc5c:	4b88      	ldr	r3, [pc, #544]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f003 0320 	and.w	r3, r3, #32
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d02d      	beq.n	800bcc4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bc68:	4b85      	ldr	r3, [pc, #532]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	08db      	lsrs	r3, r3, #3
 800bc6e:	f003 0303 	and.w	r3, r3, #3
 800bc72:	4a84      	ldr	r2, [pc, #528]	; (800be84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800bc74:	fa22 f303 	lsr.w	r3, r2, r3
 800bc78:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	ee07 3a90 	vmov	s15, r3
 800bc80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc84:	697b      	ldr	r3, [r7, #20]
 800bc86:	ee07 3a90 	vmov	s15, r3
 800bc8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc92:	4b7b      	ldr	r3, [pc, #492]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc9a:	ee07 3a90 	vmov	s15, r3
 800bc9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bca2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bca6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800be88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bcc2:	e087      	b.n	800bdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bcc4:	697b      	ldr	r3, [r7, #20]
 800bcc6:	ee07 3a90 	vmov	s15, r3
 800bcca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800be8c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bcd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcd6:	4b6a      	ldr	r3, [pc, #424]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bcd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcde:	ee07 3a90 	vmov	s15, r3
 800bce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bce6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcea:	eddf 5a67 	vldr	s11, [pc, #412]	; 800be88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bcee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd06:	e065      	b.n	800bdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	ee07 3a90 	vmov	s15, r3
 800bd0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd12:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800be90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd1a:	4b59      	ldr	r3, [pc, #356]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd22:	ee07 3a90 	vmov	s15, r3
 800bd26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd2e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800be88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd4a:	e043      	b.n	800bdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	ee07 3a90 	vmov	s15, r3
 800bd52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd56:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800be94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bd5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd5e:	4b48      	ldr	r3, [pc, #288]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bd60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd66:	ee07 3a90 	vmov	s15, r3
 800bd6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd72:	eddf 5a45 	vldr	s11, [pc, #276]	; 800be88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bd76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bd8e:	e021      	b.n	800bdd4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	ee07 3a90 	vmov	s15, r3
 800bd96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800be90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bd9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bda2:	4b37      	ldr	r3, [pc, #220]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdaa:	ee07 3a90 	vmov	s15, r3
 800bdae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdb6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800be88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bdba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdd2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bdd4:	4b2a      	ldr	r3, [pc, #168]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bdd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd8:	0a5b      	lsrs	r3, r3, #9
 800bdda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bdde:	ee07 3a90 	vmov	s15, r3
 800bde2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bde6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdee:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bdfa:	ee17 2a90 	vmov	r2, s15
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800be02:	4b1f      	ldr	r3, [pc, #124]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be06:	0c1b      	lsrs	r3, r3, #16
 800be08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be0c:	ee07 3a90 	vmov	s15, r3
 800be10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800be20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be28:	ee17 2a90 	vmov	r2, s15
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800be30:	4b13      	ldr	r3, [pc, #76]	; (800be80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800be32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be34:	0e1b      	lsrs	r3, r3, #24
 800be36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be3a:	ee07 3a90 	vmov	s15, r3
 800be3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800be4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be56:	ee17 2a90 	vmov	r2, s15
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800be5e:	e008      	b.n	800be72 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2200      	movs	r2, #0
 800be64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	609a      	str	r2, [r3, #8]
}
 800be72:	bf00      	nop
 800be74:	3724      	adds	r7, #36	; 0x24
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	58024400 	.word	0x58024400
 800be84:	03d09000 	.word	0x03d09000
 800be88:	46000000 	.word	0x46000000
 800be8c:	4c742400 	.word	0x4c742400
 800be90:	4a742400 	.word	0x4a742400
 800be94:	4c3ebc20 	.word	0x4c3ebc20

0800be98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800be98:	b480      	push	{r7}
 800be9a:	b089      	sub	sp, #36	; 0x24
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bea0:	4ba1      	ldr	r3, [pc, #644]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea4:	f003 0303 	and.w	r3, r3, #3
 800bea8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800beaa:	4b9f      	ldr	r3, [pc, #636]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beae:	0d1b      	lsrs	r3, r3, #20
 800beb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800beb4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800beb6:	4b9c      	ldr	r3, [pc, #624]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beba:	0a1b      	lsrs	r3, r3, #8
 800bebc:	f003 0301 	and.w	r3, r3, #1
 800bec0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bec2:	4b99      	ldr	r3, [pc, #612]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bec6:	08db      	lsrs	r3, r3, #3
 800bec8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800becc:	693a      	ldr	r2, [r7, #16]
 800bece:	fb02 f303 	mul.w	r3, r2, r3
 800bed2:	ee07 3a90 	vmov	s15, r3
 800bed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	f000 8111 	beq.w	800c108 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bee6:	69bb      	ldr	r3, [r7, #24]
 800bee8:	2b02      	cmp	r3, #2
 800beea:	f000 8083 	beq.w	800bff4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800beee:	69bb      	ldr	r3, [r7, #24]
 800bef0:	2b02      	cmp	r3, #2
 800bef2:	f200 80a1 	bhi.w	800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bef6:	69bb      	ldr	r3, [r7, #24]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d003      	beq.n	800bf04 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800befc:	69bb      	ldr	r3, [r7, #24]
 800befe:	2b01      	cmp	r3, #1
 800bf00:	d056      	beq.n	800bfb0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bf02:	e099      	b.n	800c038 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bf04:	4b88      	ldr	r3, [pc, #544]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	f003 0320 	and.w	r3, r3, #32
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d02d      	beq.n	800bf6c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf10:	4b85      	ldr	r3, [pc, #532]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	08db      	lsrs	r3, r3, #3
 800bf16:	f003 0303 	and.w	r3, r3, #3
 800bf1a:	4a84      	ldr	r2, [pc, #528]	; (800c12c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bf1c:	fa22 f303 	lsr.w	r3, r2, r3
 800bf20:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf22:	68bb      	ldr	r3, [r7, #8]
 800bf24:	ee07 3a90 	vmov	s15, r3
 800bf28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	ee07 3a90 	vmov	s15, r3
 800bf32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf3a:	4b7b      	ldr	r3, [pc, #492]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf42:	ee07 3a90 	vmov	s15, r3
 800bf46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf4e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bf6a:	e087      	b.n	800c07c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	ee07 3a90 	vmov	s15, r3
 800bf72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf76:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c134 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bf7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf7e:	4b6a      	ldr	r3, [pc, #424]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf86:	ee07 3a90 	vmov	s15, r3
 800bf8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf92:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bf96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bfae:	e065      	b.n	800c07c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	ee07 3a90 	vmov	s15, r3
 800bfb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bfbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfc2:	4b59      	ldr	r3, [pc, #356]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bfc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfca:	ee07 3a90 	vmov	s15, r3
 800bfce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfd6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bfda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfe2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfe6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bff2:	e043      	b.n	800c07c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	ee07 3a90 	vmov	s15, r3
 800bffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bffe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c13c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c006:	4b48      	ldr	r3, [pc, #288]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c00a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c00e:	ee07 3a90 	vmov	s15, r3
 800c012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c016:	ed97 6a03 	vldr	s12, [r7, #12]
 800c01a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c01e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c026:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c02a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c02e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c032:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c036:	e021      	b.n	800c07c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	ee07 3a90 	vmov	s15, r3
 800c03e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c042:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c138 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c04a:	4b37      	ldr	r3, [pc, #220]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c04e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c052:	ee07 3a90 	vmov	s15, r3
 800c056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c05a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c05e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c130 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c06a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c06e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c072:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c076:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c07a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c07c:	4b2a      	ldr	r3, [pc, #168]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c080:	0a5b      	lsrs	r3, r3, #9
 800c082:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c086:	ee07 3a90 	vmov	s15, r3
 800c08a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c08e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c092:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c096:	edd7 6a07 	vldr	s13, [r7, #28]
 800c09a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c09e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0a2:	ee17 2a90 	vmov	r2, s15
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c0aa:	4b1f      	ldr	r3, [pc, #124]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ae:	0c1b      	lsrs	r3, r3, #16
 800c0b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0b4:	ee07 3a90 	vmov	s15, r3
 800c0b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0c4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0d0:	ee17 2a90 	vmov	r2, s15
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c0d8:	4b13      	ldr	r3, [pc, #76]	; (800c128 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c0da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0dc:	0e1b      	lsrs	r3, r3, #24
 800c0de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0e2:	ee07 3a90 	vmov	s15, r3
 800c0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0f2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0fe:	ee17 2a90 	vmov	r2, s15
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c106:	e008      	b.n	800c11a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2200      	movs	r2, #0
 800c10c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2200      	movs	r2, #0
 800c112:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	609a      	str	r2, [r3, #8]
}
 800c11a:	bf00      	nop
 800c11c:	3724      	adds	r7, #36	; 0x24
 800c11e:	46bd      	mov	sp, r7
 800c120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c124:	4770      	bx	lr
 800c126:	bf00      	nop
 800c128:	58024400 	.word	0x58024400
 800c12c:	03d09000 	.word	0x03d09000
 800c130:	46000000 	.word	0x46000000
 800c134:	4c742400 	.word	0x4c742400
 800c138:	4a742400 	.word	0x4a742400
 800c13c:	4c3ebc20 	.word	0x4c3ebc20

0800c140 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c140:	b480      	push	{r7}
 800c142:	b089      	sub	sp, #36	; 0x24
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c148:	4ba0      	ldr	r3, [pc, #640]	; (800c3cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c14a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c14c:	f003 0303 	and.w	r3, r3, #3
 800c150:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c152:	4b9e      	ldr	r3, [pc, #632]	; (800c3cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c156:	091b      	lsrs	r3, r3, #4
 800c158:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c15c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c15e:	4b9b      	ldr	r3, [pc, #620]	; (800c3cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c162:	f003 0301 	and.w	r3, r3, #1
 800c166:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c168:	4b98      	ldr	r3, [pc, #608]	; (800c3cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c16a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c16c:	08db      	lsrs	r3, r3, #3
 800c16e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c172:	693a      	ldr	r2, [r7, #16]
 800c174:	fb02 f303 	mul.w	r3, r2, r3
 800c178:	ee07 3a90 	vmov	s15, r3
 800c17c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c180:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	2b00      	cmp	r3, #0
 800c188:	f000 8111 	beq.w	800c3ae <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800c18c:	69bb      	ldr	r3, [r7, #24]
 800c18e:	2b02      	cmp	r3, #2
 800c190:	f000 8083 	beq.w	800c29a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800c194:	69bb      	ldr	r3, [r7, #24]
 800c196:	2b02      	cmp	r3, #2
 800c198:	f200 80a1 	bhi.w	800c2de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c19c:	69bb      	ldr	r3, [r7, #24]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d003      	beq.n	800c1aa <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c1a2:	69bb      	ldr	r3, [r7, #24]
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d056      	beq.n	800c256 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c1a8:	e099      	b.n	800c2de <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c1aa:	4b88      	ldr	r3, [pc, #544]	; (800c3cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f003 0320 	and.w	r3, r3, #32
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d02d      	beq.n	800c212 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1b6:	4b85      	ldr	r3, [pc, #532]	; (800c3cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	08db      	lsrs	r3, r3, #3
 800c1bc:	f003 0303 	and.w	r3, r3, #3
 800c1c0:	4a83      	ldr	r2, [pc, #524]	; (800c3d0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c1c2:	fa22 f303 	lsr.w	r3, r2, r3
 800c1c6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c1c8:	68bb      	ldr	r3, [r7, #8]
 800c1ca:	ee07 3a90 	vmov	s15, r3
 800c1ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1d2:	697b      	ldr	r3, [r7, #20]
 800c1d4:	ee07 3a90 	vmov	s15, r3
 800c1d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c1e0:	4b7a      	ldr	r3, [pc, #488]	; (800c3cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c1e8:	ee07 3a90 	vmov	s15, r3
 800c1ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c1f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c1f4:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c3d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c1f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c1fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c200:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c204:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c208:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c20c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c210:	e087      	b.n	800c322 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c212:	697b      	ldr	r3, [r7, #20]
 800c214:	ee07 3a90 	vmov	s15, r3
 800c218:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c21c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c3d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c220:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c224:	4b69      	ldr	r3, [pc, #420]	; (800c3cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c228:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c22c:	ee07 3a90 	vmov	s15, r3
 800c230:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c234:	ed97 6a03 	vldr	s12, [r7, #12]
 800c238:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c3d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c23c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c240:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c244:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c248:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c24c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c250:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c254:	e065      	b.n	800c322 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c256:	697b      	ldr	r3, [r7, #20]
 800c258:	ee07 3a90 	vmov	s15, r3
 800c25c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c260:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c3dc <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c268:	4b58      	ldr	r3, [pc, #352]	; (800c3cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c26c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c270:	ee07 3a90 	vmov	s15, r3
 800c274:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c278:	ed97 6a03 	vldr	s12, [r7, #12]
 800c27c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c3d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c280:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c284:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c288:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c28c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c290:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c294:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c298:	e043      	b.n	800c322 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	ee07 3a90 	vmov	s15, r3
 800c2a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2a4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c3e0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c2a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2ac:	4b47      	ldr	r3, [pc, #284]	; (800c3cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2b4:	ee07 3a90 	vmov	s15, r3
 800c2b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2bc:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2c0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c3d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c2c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c2dc:	e021      	b.n	800c322 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	ee07 3a90 	vmov	s15, r3
 800c2e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2e8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800c3d8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c2ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2f0:	4b36      	ldr	r3, [pc, #216]	; (800c3cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c2f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2f8:	ee07 3a90 	vmov	s15, r3
 800c2fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c300:	ed97 6a03 	vldr	s12, [r7, #12]
 800c304:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c3d4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c308:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c30c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c310:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c314:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c31c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c320:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c322:	4b2a      	ldr	r3, [pc, #168]	; (800c3cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c326:	0a5b      	lsrs	r3, r3, #9
 800c328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c32c:	ee07 3a90 	vmov	s15, r3
 800c330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c334:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c338:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c33c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c348:	ee17 2a90 	vmov	r2, s15
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c350:	4b1e      	ldr	r3, [pc, #120]	; (800c3cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c354:	0c1b      	lsrs	r3, r3, #16
 800c356:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c35a:	ee07 3a90 	vmov	s15, r3
 800c35e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c366:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c36a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c36e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c376:	ee17 2a90 	vmov	r2, s15
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c37e:	4b13      	ldr	r3, [pc, #76]	; (800c3cc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c382:	0e1b      	lsrs	r3, r3, #24
 800c384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c388:	ee07 3a90 	vmov	s15, r3
 800c38c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c390:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c394:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c398:	edd7 6a07 	vldr	s13, [r7, #28]
 800c39c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3a4:	ee17 2a90 	vmov	r2, s15
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c3ac:	e008      	b.n	800c3c0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	2200      	movs	r2, #0
 800c3b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	609a      	str	r2, [r3, #8]
}
 800c3c0:	bf00      	nop
 800c3c2:	3724      	adds	r7, #36	; 0x24
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr
 800c3cc:	58024400 	.word	0x58024400
 800c3d0:	03d09000 	.word	0x03d09000
 800c3d4:	46000000 	.word	0x46000000
 800c3d8:	4c742400 	.word	0x4c742400
 800c3dc:	4a742400 	.word	0x4a742400
 800c3e0:	4c3ebc20 	.word	0x4c3ebc20

0800c3e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b084      	sub	sp, #16
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c3f2:	4b53      	ldr	r3, [pc, #332]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3f6:	f003 0303 	and.w	r3, r3, #3
 800c3fa:	2b03      	cmp	r3, #3
 800c3fc:	d101      	bne.n	800c402 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c3fe:	2301      	movs	r3, #1
 800c400:	e099      	b.n	800c536 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c402:	4b4f      	ldr	r3, [pc, #316]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a4e      	ldr	r2, [pc, #312]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c408:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c40c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c40e:	f7f7 faa9 	bl	8003964 <HAL_GetTick>
 800c412:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c414:	e008      	b.n	800c428 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c416:	f7f7 faa5 	bl	8003964 <HAL_GetTick>
 800c41a:	4602      	mov	r2, r0
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	1ad3      	subs	r3, r2, r3
 800c420:	2b02      	cmp	r3, #2
 800c422:	d901      	bls.n	800c428 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c424:	2303      	movs	r3, #3
 800c426:	e086      	b.n	800c536 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c428:	4b45      	ldr	r3, [pc, #276]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c430:	2b00      	cmp	r3, #0
 800c432:	d1f0      	bne.n	800c416 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c434:	4b42      	ldr	r3, [pc, #264]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c438:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	031b      	lsls	r3, r3, #12
 800c442:	493f      	ldr	r1, [pc, #252]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c444:	4313      	orrs	r3, r2
 800c446:	628b      	str	r3, [r1, #40]	; 0x28
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	3b01      	subs	r3, #1
 800c44e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	689b      	ldr	r3, [r3, #8]
 800c456:	3b01      	subs	r3, #1
 800c458:	025b      	lsls	r3, r3, #9
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	431a      	orrs	r2, r3
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	3b01      	subs	r3, #1
 800c464:	041b      	lsls	r3, r3, #16
 800c466:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c46a:	431a      	orrs	r2, r3
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	691b      	ldr	r3, [r3, #16]
 800c470:	3b01      	subs	r3, #1
 800c472:	061b      	lsls	r3, r3, #24
 800c474:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c478:	4931      	ldr	r1, [pc, #196]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c47a:	4313      	orrs	r3, r2
 800c47c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c47e:	4b30      	ldr	r3, [pc, #192]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c482:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	695b      	ldr	r3, [r3, #20]
 800c48a:	492d      	ldr	r1, [pc, #180]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c48c:	4313      	orrs	r3, r2
 800c48e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c490:	4b2b      	ldr	r3, [pc, #172]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c494:	f023 0220 	bic.w	r2, r3, #32
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	699b      	ldr	r3, [r3, #24]
 800c49c:	4928      	ldr	r1, [pc, #160]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c49e:	4313      	orrs	r3, r2
 800c4a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c4a2:	4b27      	ldr	r3, [pc, #156]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a6:	4a26      	ldr	r2, [pc, #152]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c4a8:	f023 0310 	bic.w	r3, r3, #16
 800c4ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c4ae:	4b24      	ldr	r3, [pc, #144]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c4b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c4b2:	4b24      	ldr	r3, [pc, #144]	; (800c544 <RCCEx_PLL2_Config+0x160>)
 800c4b4:	4013      	ands	r3, r2
 800c4b6:	687a      	ldr	r2, [r7, #4]
 800c4b8:	69d2      	ldr	r2, [r2, #28]
 800c4ba:	00d2      	lsls	r2, r2, #3
 800c4bc:	4920      	ldr	r1, [pc, #128]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c4be:	4313      	orrs	r3, r2
 800c4c0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c4c2:	4b1f      	ldr	r3, [pc, #124]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4c6:	4a1e      	ldr	r2, [pc, #120]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c4c8:	f043 0310 	orr.w	r3, r3, #16
 800c4cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d106      	bne.n	800c4e2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c4d4:	4b1a      	ldr	r3, [pc, #104]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4d8:	4a19      	ldr	r2, [pc, #100]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c4da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c4de:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c4e0:	e00f      	b.n	800c502 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c4e2:	683b      	ldr	r3, [r7, #0]
 800c4e4:	2b01      	cmp	r3, #1
 800c4e6:	d106      	bne.n	800c4f6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c4e8:	4b15      	ldr	r3, [pc, #84]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ec:	4a14      	ldr	r2, [pc, #80]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c4ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c4f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c4f4:	e005      	b.n	800c502 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c4f6:	4b12      	ldr	r3, [pc, #72]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4fa:	4a11      	ldr	r2, [pc, #68]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c4fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c500:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c502:	4b0f      	ldr	r3, [pc, #60]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a0e      	ldr	r2, [pc, #56]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c508:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c50c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c50e:	f7f7 fa29 	bl	8003964 <HAL_GetTick>
 800c512:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c514:	e008      	b.n	800c528 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c516:	f7f7 fa25 	bl	8003964 <HAL_GetTick>
 800c51a:	4602      	mov	r2, r0
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	1ad3      	subs	r3, r2, r3
 800c520:	2b02      	cmp	r3, #2
 800c522:	d901      	bls.n	800c528 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c524:	2303      	movs	r3, #3
 800c526:	e006      	b.n	800c536 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c528:	4b05      	ldr	r3, [pc, #20]	; (800c540 <RCCEx_PLL2_Config+0x15c>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c530:	2b00      	cmp	r3, #0
 800c532:	d0f0      	beq.n	800c516 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c534:	7bfb      	ldrb	r3, [r7, #15]
}
 800c536:	4618      	mov	r0, r3
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	58024400 	.word	0x58024400
 800c544:	ffff0007 	.word	0xffff0007

0800c548 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	b084      	sub	sp, #16
 800c54c:	af00      	add	r7, sp, #0
 800c54e:	6078      	str	r0, [r7, #4]
 800c550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c552:	2300      	movs	r3, #0
 800c554:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c556:	4b53      	ldr	r3, [pc, #332]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c55a:	f003 0303 	and.w	r3, r3, #3
 800c55e:	2b03      	cmp	r3, #3
 800c560:	d101      	bne.n	800c566 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c562:	2301      	movs	r3, #1
 800c564:	e099      	b.n	800c69a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c566:	4b4f      	ldr	r3, [pc, #316]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	4a4e      	ldr	r2, [pc, #312]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c56c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c570:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c572:	f7f7 f9f7 	bl	8003964 <HAL_GetTick>
 800c576:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c578:	e008      	b.n	800c58c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c57a:	f7f7 f9f3 	bl	8003964 <HAL_GetTick>
 800c57e:	4602      	mov	r2, r0
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	1ad3      	subs	r3, r2, r3
 800c584:	2b02      	cmp	r3, #2
 800c586:	d901      	bls.n	800c58c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c588:	2303      	movs	r3, #3
 800c58a:	e086      	b.n	800c69a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c58c:	4b45      	ldr	r3, [pc, #276]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c594:	2b00      	cmp	r3, #0
 800c596:	d1f0      	bne.n	800c57a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c598:	4b42      	ldr	r3, [pc, #264]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c59a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c59c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	051b      	lsls	r3, r3, #20
 800c5a6:	493f      	ldr	r1, [pc, #252]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	628b      	str	r3, [r1, #40]	; 0x28
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	3b01      	subs	r3, #1
 800c5b2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	3b01      	subs	r3, #1
 800c5bc:	025b      	lsls	r3, r3, #9
 800c5be:	b29b      	uxth	r3, r3
 800c5c0:	431a      	orrs	r2, r3
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	68db      	ldr	r3, [r3, #12]
 800c5c6:	3b01      	subs	r3, #1
 800c5c8:	041b      	lsls	r3, r3, #16
 800c5ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c5ce:	431a      	orrs	r2, r3
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	691b      	ldr	r3, [r3, #16]
 800c5d4:	3b01      	subs	r3, #1
 800c5d6:	061b      	lsls	r3, r3, #24
 800c5d8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c5dc:	4931      	ldr	r1, [pc, #196]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c5de:	4313      	orrs	r3, r2
 800c5e0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c5e2:	4b30      	ldr	r3, [pc, #192]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c5e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	695b      	ldr	r3, [r3, #20]
 800c5ee:	492d      	ldr	r1, [pc, #180]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c5f0:	4313      	orrs	r3, r2
 800c5f2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c5f4:	4b2b      	ldr	r3, [pc, #172]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c5f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	699b      	ldr	r3, [r3, #24]
 800c600:	4928      	ldr	r1, [pc, #160]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c602:	4313      	orrs	r3, r2
 800c604:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c606:	4b27      	ldr	r3, [pc, #156]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c60a:	4a26      	ldr	r2, [pc, #152]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c60c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c610:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c612:	4b24      	ldr	r3, [pc, #144]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c616:	4b24      	ldr	r3, [pc, #144]	; (800c6a8 <RCCEx_PLL3_Config+0x160>)
 800c618:	4013      	ands	r3, r2
 800c61a:	687a      	ldr	r2, [r7, #4]
 800c61c:	69d2      	ldr	r2, [r2, #28]
 800c61e:	00d2      	lsls	r2, r2, #3
 800c620:	4920      	ldr	r1, [pc, #128]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c622:	4313      	orrs	r3, r2
 800c624:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c626:	4b1f      	ldr	r3, [pc, #124]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c62a:	4a1e      	ldr	r2, [pc, #120]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c62c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c630:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d106      	bne.n	800c646 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c638:	4b1a      	ldr	r3, [pc, #104]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c63a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c63c:	4a19      	ldr	r2, [pc, #100]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c63e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c642:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c644:	e00f      	b.n	800c666 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	2b01      	cmp	r3, #1
 800c64a:	d106      	bne.n	800c65a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c64c:	4b15      	ldr	r3, [pc, #84]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c650:	4a14      	ldr	r2, [pc, #80]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c652:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c656:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c658:	e005      	b.n	800c666 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c65a:	4b12      	ldr	r3, [pc, #72]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c65e:	4a11      	ldr	r2, [pc, #68]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c660:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c664:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c666:	4b0f      	ldr	r3, [pc, #60]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4a0e      	ldr	r2, [pc, #56]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c66c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c670:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c672:	f7f7 f977 	bl	8003964 <HAL_GetTick>
 800c676:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c678:	e008      	b.n	800c68c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c67a:	f7f7 f973 	bl	8003964 <HAL_GetTick>
 800c67e:	4602      	mov	r2, r0
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	1ad3      	subs	r3, r2, r3
 800c684:	2b02      	cmp	r3, #2
 800c686:	d901      	bls.n	800c68c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c688:	2303      	movs	r3, #3
 800c68a:	e006      	b.n	800c69a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c68c:	4b05      	ldr	r3, [pc, #20]	; (800c6a4 <RCCEx_PLL3_Config+0x15c>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c694:	2b00      	cmp	r3, #0
 800c696:	d0f0      	beq.n	800c67a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c698:	7bfb      	ldrb	r3, [r7, #15]
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3710      	adds	r7, #16
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	58024400 	.word	0x58024400
 800c6a8:	ffff0007 	.word	0xffff0007

0800c6ac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b08a      	sub	sp, #40	; 0x28
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d101      	bne.n	800c6be <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	e075      	b.n	800c7aa <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6c4:	b2db      	uxtb	r3, r3
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d105      	bne.n	800c6d6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f7f6 fa01 	bl	8002ad8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2204      	movs	r2, #4
 800c6da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c6de:	6878      	ldr	r0, [r7, #4]
 800c6e0:	f000 f868 	bl	800c7b4 <HAL_SD_InitCard>
 800c6e4:	4603      	mov	r3, r0
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d001      	beq.n	800c6ee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c6ea:	2301      	movs	r3, #1
 800c6ec:	e05d      	b.n	800c7aa <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800c6ee:	f107 0308 	add.w	r3, r7, #8
 800c6f2:	4619      	mov	r1, r3
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 fdaf 	bl	800d258 <HAL_SD_GetCardStatus>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d001      	beq.n	800c704 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800c700:	2301      	movs	r3, #1
 800c702:	e052      	b.n	800c7aa <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800c704:	7e3b      	ldrb	r3, [r7, #24]
 800c706:	b2db      	uxtb	r3, r3
 800c708:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800c70a:	7e7b      	ldrb	r3, [r7, #25]
 800c70c:	b2db      	uxtb	r3, r3
 800c70e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c714:	2b01      	cmp	r3, #1
 800c716:	d10a      	bne.n	800c72e <HAL_SD_Init+0x82>
 800c718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d102      	bne.n	800c724 <HAL_SD_Init+0x78>
 800c71e:	6a3b      	ldr	r3, [r7, #32]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d004      	beq.n	800c72e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c72a:	659a      	str	r2, [r3, #88]	; 0x58
 800c72c:	e00b      	b.n	800c746 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c732:	2b01      	cmp	r3, #1
 800c734:	d104      	bne.n	800c740 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c73c:	659a      	str	r2, [r3, #88]	; 0x58
 800c73e:	e002      	b.n	800c746 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	4619      	mov	r1, r3
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 fe6d 	bl	800d42c <HAL_SD_ConfigWideBusOperation>
 800c752:	4603      	mov	r3, r0
 800c754:	2b00      	cmp	r3, #0
 800c756:	d001      	beq.n	800c75c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800c758:	2301      	movs	r3, #1
 800c75a:	e026      	b.n	800c7aa <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800c75c:	f7f7 f902 	bl	8003964 <HAL_GetTick>
 800c760:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c762:	e011      	b.n	800c788 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c764:	f7f7 f8fe 	bl	8003964 <HAL_GetTick>
 800c768:	4602      	mov	r2, r0
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	1ad3      	subs	r3, r2, r3
 800c76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c772:	d109      	bne.n	800c788 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c77a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2201      	movs	r2, #1
 800c780:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800c784:	2303      	movs	r3, #3
 800c786:	e010      	b.n	800c7aa <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800c788:	6878      	ldr	r0, [r7, #4]
 800c78a:	f000 ff61 	bl	800d650 <HAL_SD_GetCardState>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b04      	cmp	r3, #4
 800c792:	d1e7      	bne.n	800c764 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2200      	movs	r2, #0
 800c798:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800c7a8:	2300      	movs	r3, #0
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3728      	adds	r7, #40	; 0x28
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}
	...

0800c7b4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c7b4:	b590      	push	{r4, r7, lr}
 800c7b6:	b08d      	sub	sp, #52	; 0x34
 800c7b8:	af02      	add	r7, sp, #8
 800c7ba:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800c7c8:	2300      	movs	r3, #0
 800c7ca:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800c7cc:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800c7d0:	f04f 0100 	mov.w	r1, #0
 800c7d4:	f7fe fd24 	bl	800b220 <HAL_RCCEx_GetPeriphCLKFreq>
 800c7d8:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800c7da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d109      	bne.n	800c7f4 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800c7ee:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	e070      	b.n	800c8d6 <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f6:	0a1b      	lsrs	r3, r3, #8
 800c7f8:	4a39      	ldr	r2, [pc, #228]	; (800c8e0 <HAL_SD_InitCard+0x12c>)
 800c7fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c7fe:	091b      	lsrs	r3, r3, #4
 800c800:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681c      	ldr	r4, [r3, #0]
 800c806:	466a      	mov	r2, sp
 800c808:	f107 0318 	add.w	r3, r7, #24
 800c80c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800c810:	e882 0003 	stmia.w	r2, {r0, r1}
 800c814:	f107 030c 	add.w	r3, r7, #12
 800c818:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c81a:	4620      	mov	r0, r4
 800c81c:	f004 fc28 	bl	8011070 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	4618      	mov	r0, r3
 800c826:	f004 fc6b 	bl	8011100 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800c82a:	69fb      	ldr	r3, [r7, #28]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d005      	beq.n	800c83c <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	005b      	lsls	r3, r3, #1
 800c834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c836:	fbb2 f3f3 	udiv	r3, r2, r3
 800c83a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800c83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d007      	beq.n	800c852 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800c842:	4a28      	ldr	r2, [pc, #160]	; (800c8e4 <HAL_SD_InitCard+0x130>)
 800c844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c846:	fbb2 f3f3 	udiv	r3, r2, r3
 800c84a:	3301      	adds	r3, #1
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7f7 f895 	bl	800397c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 ffea 	bl	800d82c <SD_PowerON>
 800c858:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c85a:	6a3b      	ldr	r3, [r7, #32]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d00b      	beq.n	800c878 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2201      	movs	r2, #1
 800c864:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c86c:	6a3b      	ldr	r3, [r7, #32]
 800c86e:	431a      	orrs	r2, r3
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c874:	2301      	movs	r3, #1
 800c876:	e02e      	b.n	800c8d6 <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f000 ff09 	bl	800d690 <SD_InitCard>
 800c87e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c880:	6a3b      	ldr	r3, [r7, #32]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00b      	beq.n	800c89e <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	2201      	movs	r2, #1
 800c88a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c892:	6a3b      	ldr	r3, [r7, #32]
 800c894:	431a      	orrs	r2, r3
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c89a:	2301      	movs	r3, #1
 800c89c:	e01b      	b.n	800c8d6 <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	f004 fcc0 	bl	801122c <SDMMC_CmdBlockLength>
 800c8ac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800c8ae:	6a3b      	ldr	r3, [r7, #32]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d00f      	beq.n	800c8d4 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	4a0b      	ldr	r2, [pc, #44]	; (800c8e8 <HAL_SD_InitCard+0x134>)
 800c8ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8c0:	6a3b      	ldr	r3, [r7, #32]
 800c8c2:	431a      	orrs	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	e000      	b.n	800c8d6 <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800c8d4:	2300      	movs	r3, #0
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	372c      	adds	r7, #44	; 0x2c
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd90      	pop	{r4, r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	014f8b59 	.word	0x014f8b59
 800c8e4:	00012110 	.word	0x00012110
 800c8e8:	1fe00fff 	.word	0x1fe00fff

0800c8ec <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	b08c      	sub	sp, #48	; 0x30
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	60f8      	str	r0, [r7, #12]
 800c8f4:	60b9      	str	r1, [r7, #8]
 800c8f6:	607a      	str	r2, [r7, #4]
 800c8f8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800c8fe:	68bb      	ldr	r3, [r7, #8]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d107      	bne.n	800c914 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c908:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c910:	2301      	movs	r3, #1
 800c912:	e08d      	b.n	800ca30 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c91a:	b2db      	uxtb	r3, r3
 800c91c:	2b01      	cmp	r3, #1
 800c91e:	f040 8086 	bne.w	800ca2e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2200      	movs	r2, #0
 800c926:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c928:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c92a:	683b      	ldr	r3, [r7, #0]
 800c92c:	441a      	add	r2, r3
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c932:	429a      	cmp	r2, r3
 800c934:	d907      	bls.n	800c946 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c93a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c942:	2301      	movs	r3, #1
 800c944:	e074      	b.n	800ca30 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2203      	movs	r2, #3
 800c94a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	2200      	movs	r2, #0
 800c954:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	68ba      	ldr	r2, [r7, #8]
 800c95a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	025a      	lsls	r2, r3, #9
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c968:	2b01      	cmp	r3, #1
 800c96a:	d002      	beq.n	800c972 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800c96c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96e:	025b      	lsls	r3, r3, #9
 800c970:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c972:	f04f 33ff 	mov.w	r3, #4294967295
 800c976:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	025b      	lsls	r3, r3, #9
 800c97c:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800c97e:	2390      	movs	r3, #144	; 0x90
 800c980:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c982:	2302      	movs	r3, #2
 800c984:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c986:	2300      	movs	r3, #0
 800c988:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800c98a:	2300      	movs	r3, #0
 800c98c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	f107 0210 	add.w	r2, r7, #16
 800c996:	4611      	mov	r1, r2
 800c998:	4618      	mov	r0, r3
 800c99a:	f004 fc1b 	bl	80111d4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	68da      	ldr	r2, [r3, #12]
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9ac:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	681b      	ldr	r3, [r3, #0]
 800c9b2:	68ba      	ldr	r2, [r7, #8]
 800c9b4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	2201      	movs	r2, #1
 800c9bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d90a      	bls.n	800c9da <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2282      	movs	r2, #130	; 0x82
 800c9c8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f004 fc71 	bl	80112b8 <SDMMC_CmdReadMultiBlock>
 800c9d6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c9d8:	e009      	b.n	800c9ee <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	2281      	movs	r2, #129	; 0x81
 800c9de:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f004 fc43 	bl	8011272 <SDMMC_CmdReadSingleBlock>
 800c9ec:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800c9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d012      	beq.n	800ca1a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4a0f      	ldr	r2, [pc, #60]	; (800ca38 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800c9fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca02:	431a      	orrs	r2, r3
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	2200      	movs	r2, #0
 800ca14:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800ca16:	2301      	movs	r3, #1
 800ca18:	e00a      	b.n	800ca30 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800ca28:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	e000      	b.n	800ca30 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800ca2e:	2302      	movs	r3, #2
  }
}
 800ca30:	4618      	mov	r0, r3
 800ca32:	3730      	adds	r7, #48	; 0x30
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	1fe00fff 	.word	0x1fe00fff

0800ca3c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b08c      	sub	sp, #48	; 0x30
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	60f8      	str	r0, [r7, #12]
 800ca44:	60b9      	str	r1, [r7, #8]
 800ca46:	607a      	str	r2, [r7, #4]
 800ca48:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800ca4e:	68bb      	ldr	r3, [r7, #8]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d107      	bne.n	800ca64 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca58:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ca60:	2301      	movs	r3, #1
 800ca62:	e08d      	b.n	800cb80 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	f040 8086 	bne.w	800cb7e <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2200      	movs	r2, #0
 800ca76:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ca78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	441a      	add	r2, r3
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d907      	bls.n	800ca96 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca8a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ca92:	2301      	movs	r3, #1
 800ca94:	e074      	b.n	800cb80 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	2203      	movs	r2, #3
 800ca9a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	2200      	movs	r2, #0
 800caa4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	68ba      	ldr	r2, [r7, #8]
 800caaa:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	025a      	lsls	r2, r3, #9
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab8:	2b01      	cmp	r3, #1
 800caba:	d002      	beq.n	800cac2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800cabc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cabe:	025b      	lsls	r3, r3, #9
 800cac0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cac2:	f04f 33ff 	mov.w	r3, #4294967295
 800cac6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cac8:	683b      	ldr	r3, [r7, #0]
 800caca:	025b      	lsls	r3, r3, #9
 800cacc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800cace:	2390      	movs	r3, #144	; 0x90
 800cad0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800cad2:	2300      	movs	r3, #0
 800cad4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cad6:	2300      	movs	r3, #0
 800cad8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cada:	2300      	movs	r3, #0
 800cadc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f107 0210 	add.w	r2, r7, #16
 800cae6:	4611      	mov	r1, r2
 800cae8:	4618      	mov	r0, r3
 800caea:	f004 fb73 	bl	80111d4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	68da      	ldr	r2, [r3, #12]
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cafc:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	68ba      	ldr	r2, [r7, #8]
 800cb04:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	2b01      	cmp	r3, #1
 800cb12:	d90a      	bls.n	800cb2a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	22a0      	movs	r2, #160	; 0xa0
 800cb18:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb20:	4618      	mov	r0, r3
 800cb22:	f004 fc0f 	bl	8011344 <SDMMC_CmdWriteMultiBlock>
 800cb26:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cb28:	e009      	b.n	800cb3e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2290      	movs	r2, #144	; 0x90
 800cb2e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb36:	4618      	mov	r0, r3
 800cb38:	f004 fbe1 	bl	80112fe <SDMMC_CmdWriteSingleBlock>
 800cb3c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800cb3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d012      	beq.n	800cb6a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4a0f      	ldr	r2, [pc, #60]	; (800cb88 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800cb4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb52:	431a      	orrs	r2, r3
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2200      	movs	r2, #0
 800cb64:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800cb66:	2301      	movs	r3, #1
 800cb68:	e00a      	b.n	800cb80 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800cb78:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	e000      	b.n	800cb80 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800cb7e:	2302      	movs	r3, #2
  }
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3730      	adds	r7, #48	; 0x30
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	1fe00fff 	.word	0x1fe00fff

0800cb8c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb98:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d008      	beq.n	800cbba <HAL_SD_IRQHandler+0x2e>
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	f003 0308 	and.w	r3, r3, #8
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d003      	beq.n	800cbba <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f001 f926 	bl	800de04 <SD_Read_IT>
 800cbb8:	e19a      	b.n	800cef0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	f000 80ac 	beq.w	800cd22 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cbd2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681a      	ldr	r2, [r3, #0]
 800cbde:	4b59      	ldr	r3, [pc, #356]	; (800cd44 <HAL_SD_IRQHandler+0x1b8>)
 800cbe0:	400b      	ands	r3, r1
 800cbe2:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cbf2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	68da      	ldr	r2, [r3, #12]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc02:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	f003 0308 	and.w	r3, r3, #8
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d038      	beq.n	800cc80 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f003 0302 	and.w	r3, r3, #2
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d104      	bne.n	800cc22 <HAL_SD_IRQHandler+0x96>
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	f003 0320 	and.w	r3, r3, #32
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d011      	beq.n	800cc46 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4618      	mov	r0, r3
 800cc28:	f004 fbb0 	bl	801138c <SDMMC_CmdStopTransfer>
 800cc2c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800cc2e:	68bb      	ldr	r3, [r7, #8]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d008      	beq.n	800cc46 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc38:	68bb      	ldr	r3, [r7, #8]
 800cc3a:	431a      	orrs	r2, r3
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 f95b 	bl	800cefc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a3f      	ldr	r2, [pc, #252]	; (800cd48 <HAL_SD_IRQHandler+0x1bc>)
 800cc4c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	2201      	movs	r2, #1
 800cc52:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f003 0301 	and.w	r3, r3, #1
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d104      	bne.n	800cc70 <HAL_SD_IRQHandler+0xe4>
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	f003 0302 	and.w	r3, r3, #2
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d003      	beq.n	800cc78 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f006 fbb1 	bl	80133d8 <HAL_SD_RxCpltCallback>
 800cc76:	e13b      	b.n	800cef0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f006 fba3 	bl	80133c4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cc7e:	e137      	b.n	800cef0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	f000 8132 	beq.w	800cef0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	2200      	movs	r2, #0
 800cc92:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	2200      	movs	r2, #0
 800cca2:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cca4:	68fb      	ldr	r3, [r7, #12]
 800cca6:	f003 0302 	and.w	r3, r3, #2
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d104      	bne.n	800ccb8 <HAL_SD_IRQHandler+0x12c>
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	f003 0320 	and.w	r3, r3, #32
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d011      	beq.n	800ccdc <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f004 fb65 	bl	801138c <SDMMC_CmdStopTransfer>
 800ccc2:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d008      	beq.n	800ccdc <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ccce:	68bb      	ldr	r3, [r7, #8]
 800ccd0:	431a      	orrs	r2, r3
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800ccd6:	6878      	ldr	r0, [r7, #4]
 800ccd8:	f000 f910 	bl	800cefc <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	2201      	movs	r2, #1
 800cce0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	2200      	movs	r2, #0
 800cce8:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	f003 0310 	and.w	r3, r3, #16
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d104      	bne.n	800ccfe <HAL_SD_IRQHandler+0x172>
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f003 0320 	and.w	r3, r3, #32
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d002      	beq.n	800cd04 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800ccfe:	6878      	ldr	r0, [r7, #4]
 800cd00:	f006 fb60 	bl	80133c4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f003 0301 	and.w	r3, r3, #1
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d105      	bne.n	800cd1a <HAL_SD_IRQHandler+0x18e>
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	f003 0302 	and.w	r3, r3, #2
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	f000 80eb 	beq.w	800cef0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f006 fb5c 	bl	80133d8 <HAL_SD_RxCpltCallback>
}
 800cd20:	e0e6      	b.n	800cef0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d00d      	beq.n	800cd4c <HAL_SD_IRQHandler+0x1c0>
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	f003 0308 	and.w	r3, r3, #8
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d008      	beq.n	800cd4c <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f001 f8a8 	bl	800de90 <SD_Write_IT>
 800cd40:	e0d6      	b.n	800cef0 <HAL_SD_IRQHandler+0x364>
 800cd42:	bf00      	nop
 800cd44:	ffff3ec5 	.word	0xffff3ec5
 800cd48:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd52:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	f000 809d 	beq.w	800ce96 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd62:	f003 0302 	and.w	r3, r3, #2
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d005      	beq.n	800cd76 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd6e:	f043 0202 	orr.w	r2, r3, #2
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd7c:	f003 0308 	and.w	r3, r3, #8
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d005      	beq.n	800cd90 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd88:	f043 0208 	orr.w	r2, r3, #8
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd96:	f003 0320 	and.w	r3, r3, #32
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d005      	beq.n	800cdaa <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cda2:	f043 0220 	orr.w	r2, r3, #32
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdb0:	f003 0310 	and.w	r3, r3, #16
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d005      	beq.n	800cdc4 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdbc:	f043 0210 	orr.w	r2, r3, #16
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	4a4b      	ldr	r2, [pc, #300]	; (800cef8 <HAL_SD_IRQHandler+0x36c>)
 800cdca:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800cdda:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	68da      	ldr	r2, [r3, #12]
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cdea:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cdfa:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	68da      	ldr	r2, [r3, #12]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ce0a:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4618      	mov	r0, r3
 800ce12:	f004 fabb 	bl	801138c <SDMMC_CmdStopTransfer>
 800ce16:	4602      	mov	r2, r0
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce1c:	431a      	orrs	r2, r3
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	68da      	ldr	r2, [r3, #12]
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ce30:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ce3a:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f003 0308 	and.w	r3, r3, #8
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00a      	beq.n	800ce5c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2201      	movs	r2, #1
 800ce4a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	2200      	movs	r2, #0
 800ce52:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 f851 	bl	800cefc <HAL_SD_ErrorCallback>
}
 800ce5a:	e049      	b.n	800cef0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d044      	beq.n	800cef0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d040      	beq.n	800cef0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800ce7c:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	2200      	movs	r2, #0
 800ce84:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2201      	movs	r2, #1
 800ce8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f000 f834 	bl	800cefc <HAL_SD_ErrorCallback>
}
 800ce94:	e02c      	b.n	800cef0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d025      	beq.n	800cef0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceac:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ceb4:	f003 0304 	and.w	r3, r3, #4
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d10c      	bne.n	800ced6 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	f003 0320 	and.w	r3, r3, #32
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d003      	beq.n	800cece <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f001 f84a 	bl	800df60 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800cecc:	e010      	b.n	800cef0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f001 f832 	bl	800df38 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800ced4:	e00c      	b.n	800cef0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	f003 0320 	and.w	r3, r3, #32
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d003      	beq.n	800cee8 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f001 f833 	bl	800df4c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800cee6:	e003      	b.n	800cef0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f001 f81b 	bl	800df24 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800ceee:	e7ff      	b.n	800cef0 <HAL_SD_IRQHandler+0x364>
 800cef0:	bf00      	nop
 800cef2:	3710      	adds	r7, #16
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	18000f3a 	.word	0x18000f3a

0800cefc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800cf04:	bf00      	nop
 800cf06:	370c      	adds	r7, #12
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr

0800cf10 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b083      	sub	sp, #12
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
 800cf18:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf1e:	0f9b      	lsrs	r3, r3, #30
 800cf20:	b2da      	uxtb	r2, r3
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf2a:	0e9b      	lsrs	r3, r3, #26
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	f003 030f 	and.w	r3, r3, #15
 800cf32:	b2da      	uxtb	r2, r3
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf3c:	0e1b      	lsrs	r3, r3, #24
 800cf3e:	b2db      	uxtb	r3, r3
 800cf40:	f003 0303 	and.w	r3, r3, #3
 800cf44:	b2da      	uxtb	r2, r3
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf4e:	0c1b      	lsrs	r3, r3, #16
 800cf50:	b2da      	uxtb	r2, r3
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf5a:	0a1b      	lsrs	r3, r3, #8
 800cf5c:	b2da      	uxtb	r2, r3
 800cf5e:	683b      	ldr	r3, [r7, #0]
 800cf60:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cf66:	b2da      	uxtb	r2, r3
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf70:	0d1b      	lsrs	r3, r3, #20
 800cf72:	b29a      	uxth	r2, r3
 800cf74:	683b      	ldr	r3, [r7, #0]
 800cf76:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf7c:	0c1b      	lsrs	r3, r3, #16
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	f003 030f 	and.w	r3, r3, #15
 800cf84:	b2da      	uxtb	r2, r3
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf8e:	0bdb      	lsrs	r3, r3, #15
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	f003 0301 	and.w	r3, r3, #1
 800cf96:	b2da      	uxtb	r2, r3
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cfa0:	0b9b      	lsrs	r3, r3, #14
 800cfa2:	b2db      	uxtb	r3, r3
 800cfa4:	f003 0301 	and.w	r3, r3, #1
 800cfa8:	b2da      	uxtb	r2, r3
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cfb2:	0b5b      	lsrs	r3, r3, #13
 800cfb4:	b2db      	uxtb	r3, r3
 800cfb6:	f003 0301 	and.w	r3, r3, #1
 800cfba:	b2da      	uxtb	r2, r3
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cfc4:	0b1b      	lsrs	r3, r3, #12
 800cfc6:	b2db      	uxtb	r3, r3
 800cfc8:	f003 0301 	and.w	r3, r3, #1
 800cfcc:	b2da      	uxtb	r2, r3
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	2200      	movs	r2, #0
 800cfd6:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d163      	bne.n	800d0a8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cfe4:	009a      	lsls	r2, r3, #2
 800cfe6:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cfea:	4013      	ands	r3, r2
 800cfec:	687a      	ldr	r2, [r7, #4]
 800cfee:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800cff0:	0f92      	lsrs	r2, r2, #30
 800cff2:	431a      	orrs	r2, r3
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cffc:	0edb      	lsrs	r3, r3, #27
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	f003 0307 	and.w	r3, r3, #7
 800d004:	b2da      	uxtb	r2, r3
 800d006:	683b      	ldr	r3, [r7, #0]
 800d008:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d00e:	0e1b      	lsrs	r3, r3, #24
 800d010:	b2db      	uxtb	r3, r3
 800d012:	f003 0307 	and.w	r3, r3, #7
 800d016:	b2da      	uxtb	r2, r3
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d020:	0d5b      	lsrs	r3, r3, #21
 800d022:	b2db      	uxtb	r3, r3
 800d024:	f003 0307 	and.w	r3, r3, #7
 800d028:	b2da      	uxtb	r2, r3
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d032:	0c9b      	lsrs	r3, r3, #18
 800d034:	b2db      	uxtb	r3, r3
 800d036:	f003 0307 	and.w	r3, r3, #7
 800d03a:	b2da      	uxtb	r2, r3
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d044:	0bdb      	lsrs	r3, r3, #15
 800d046:	b2db      	uxtb	r3, r3
 800d048:	f003 0307 	and.w	r3, r3, #7
 800d04c:	b2da      	uxtb	r2, r3
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	691b      	ldr	r3, [r3, #16]
 800d056:	1c5a      	adds	r2, r3, #1
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	7e1b      	ldrb	r3, [r3, #24]
 800d060:	b2db      	uxtb	r3, r3
 800d062:	f003 0307 	and.w	r3, r3, #7
 800d066:	3302      	adds	r3, #2
 800d068:	2201      	movs	r2, #1
 800d06a:	fa02 f303 	lsl.w	r3, r2, r3
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d072:	fb03 f202 	mul.w	r2, r3, r2
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	7a1b      	ldrb	r3, [r3, #8]
 800d07e:	b2db      	uxtb	r3, r3
 800d080:	f003 030f 	and.w	r3, r3, #15
 800d084:	2201      	movs	r2, #1
 800d086:	409a      	lsls	r2, r3
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d090:	687a      	ldr	r2, [r7, #4]
 800d092:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d094:	0a52      	lsrs	r2, r2, #9
 800d096:	fb03 f202 	mul.w	r2, r3, r2
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0a4:	655a      	str	r2, [r3, #84]	; 0x54
 800d0a6:	e031      	b.n	800d10c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d11d      	bne.n	800d0ec <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0b4:	041b      	lsls	r3, r3, #16
 800d0b6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d0be:	0c1b      	lsrs	r3, r3, #16
 800d0c0:	431a      	orrs	r2, r3
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	691b      	ldr	r3, [r3, #16]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	029a      	lsls	r2, r3, #10
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0e0:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	655a      	str	r2, [r3, #84]	; 0x54
 800d0ea:	e00f      	b.n	800d10c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a58      	ldr	r2, [pc, #352]	; (800d254 <HAL_SD_GetCardCSD+0x344>)
 800d0f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2201      	movs	r2, #1
 800d104:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d108:	2301      	movs	r3, #1
 800d10a:	e09d      	b.n	800d248 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d110:	0b9b      	lsrs	r3, r3, #14
 800d112:	b2db      	uxtb	r3, r3
 800d114:	f003 0301 	and.w	r3, r3, #1
 800d118:	b2da      	uxtb	r2, r3
 800d11a:	683b      	ldr	r3, [r7, #0]
 800d11c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d122:	09db      	lsrs	r3, r3, #7
 800d124:	b2db      	uxtb	r3, r3
 800d126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d12a:	b2da      	uxtb	r2, r3
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d134:	b2db      	uxtb	r3, r3
 800d136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d13a:	b2da      	uxtb	r2, r3
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d144:	0fdb      	lsrs	r3, r3, #31
 800d146:	b2da      	uxtb	r2, r3
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d150:	0f5b      	lsrs	r3, r3, #29
 800d152:	b2db      	uxtb	r3, r3
 800d154:	f003 0303 	and.w	r3, r3, #3
 800d158:	b2da      	uxtb	r2, r3
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d162:	0e9b      	lsrs	r3, r3, #26
 800d164:	b2db      	uxtb	r3, r3
 800d166:	f003 0307 	and.w	r3, r3, #7
 800d16a:	b2da      	uxtb	r2, r3
 800d16c:	683b      	ldr	r3, [r7, #0]
 800d16e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d174:	0d9b      	lsrs	r3, r3, #22
 800d176:	b2db      	uxtb	r3, r3
 800d178:	f003 030f 	and.w	r3, r3, #15
 800d17c:	b2da      	uxtb	r2, r3
 800d17e:	683b      	ldr	r3, [r7, #0]
 800d180:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d186:	0d5b      	lsrs	r3, r3, #21
 800d188:	b2db      	uxtb	r3, r3
 800d18a:	f003 0301 	and.w	r3, r3, #1
 800d18e:	b2da      	uxtb	r2, r3
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d196:	683b      	ldr	r3, [r7, #0]
 800d198:	2200      	movs	r2, #0
 800d19a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1a2:	0c1b      	lsrs	r3, r3, #16
 800d1a4:	b2db      	uxtb	r3, r3
 800d1a6:	f003 0301 	and.w	r3, r3, #1
 800d1aa:	b2da      	uxtb	r2, r3
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1b6:	0bdb      	lsrs	r3, r3, #15
 800d1b8:	b2db      	uxtb	r3, r3
 800d1ba:	f003 0301 	and.w	r3, r3, #1
 800d1be:	b2da      	uxtb	r2, r3
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1ca:	0b9b      	lsrs	r3, r3, #14
 800d1cc:	b2db      	uxtb	r3, r3
 800d1ce:	f003 0301 	and.w	r3, r3, #1
 800d1d2:	b2da      	uxtb	r2, r3
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1de:	0b5b      	lsrs	r3, r3, #13
 800d1e0:	b2db      	uxtb	r3, r3
 800d1e2:	f003 0301 	and.w	r3, r3, #1
 800d1e6:	b2da      	uxtb	r2, r3
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1f2:	0b1b      	lsrs	r3, r3, #12
 800d1f4:	b2db      	uxtb	r3, r3
 800d1f6:	f003 0301 	and.w	r3, r3, #1
 800d1fa:	b2da      	uxtb	r2, r3
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d206:	0a9b      	lsrs	r3, r3, #10
 800d208:	b2db      	uxtb	r3, r3
 800d20a:	f003 0303 	and.w	r3, r3, #3
 800d20e:	b2da      	uxtb	r2, r3
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d21a:	0a1b      	lsrs	r3, r3, #8
 800d21c:	b2db      	uxtb	r3, r3
 800d21e:	f003 0303 	and.w	r3, r3, #3
 800d222:	b2da      	uxtb	r2, r3
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d22e:	085b      	lsrs	r3, r3, #1
 800d230:	b2db      	uxtb	r3, r3
 800d232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d236:	b2da      	uxtb	r2, r3
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	2201      	movs	r2, #1
 800d242:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d246:	2300      	movs	r3, #0
}
 800d248:	4618      	mov	r0, r3
 800d24a:	370c      	adds	r7, #12
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr
 800d254:	1fe00fff 	.word	0x1fe00fff

0800d258 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800d258:	b580      	push	{r7, lr}
 800d25a:	b094      	sub	sp, #80	; 0x50
 800d25c:	af00      	add	r7, sp, #0
 800d25e:	6078      	str	r0, [r7, #4]
 800d260:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800d262:	2300      	movs	r3, #0
 800d264:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d26e:	b2db      	uxtb	r3, r3
 800d270:	2b03      	cmp	r3, #3
 800d272:	d101      	bne.n	800d278 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800d274:	2301      	movs	r3, #1
 800d276:	e0a7      	b.n	800d3c8 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800d278:	f107 0308 	add.w	r3, r7, #8
 800d27c:	4619      	mov	r1, r3
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f000 fb62 	bl	800d948 <SD_SendSDStatus>
 800d284:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d286:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d011      	beq.n	800d2b0 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4a4f      	ldr	r2, [pc, #316]	; (800d3d0 <HAL_SD_GetCardStatus+0x178>)
 800d292:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d29a:	431a      	orrs	r2, r3
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800d2ae:	e070      	b.n	800d392 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	099b      	lsrs	r3, r3, #6
 800d2b4:	b2db      	uxtb	r3, r3
 800d2b6:	f003 0303 	and.w	r3, r3, #3
 800d2ba:	b2da      	uxtb	r2, r3
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800d2c0:	68bb      	ldr	r3, [r7, #8]
 800d2c2:	095b      	lsrs	r3, r3, #5
 800d2c4:	b2db      	uxtb	r3, r3
 800d2c6:	f003 0301 	and.w	r3, r3, #1
 800d2ca:	b2da      	uxtb	r2, r3
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800d2d0:	68bb      	ldr	r3, [r7, #8]
 800d2d2:	0a1b      	lsrs	r3, r3, #8
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d2da:	b29a      	uxth	r2, r3
 800d2dc:	68bb      	ldr	r3, [r7, #8]
 800d2de:	0e1b      	lsrs	r3, r3, #24
 800d2e0:	b29b      	uxth	r3, r3
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	b29a      	uxth	r2, r3
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	061a      	lsls	r2, r3, #24
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	021b      	lsls	r3, r3, #8
 800d2f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d2f6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	0a1b      	lsrs	r3, r3, #8
 800d2fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d300:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	0e1b      	lsrs	r3, r3, #24
 800d306:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800d308:	683b      	ldr	r3, [r7, #0]
 800d30a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	b2da      	uxtb	r2, r3
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	0a1b      	lsrs	r3, r3, #8
 800d318:	b2da      	uxtb	r2, r3
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	0d1b      	lsrs	r3, r3, #20
 800d322:	b2db      	uxtb	r3, r3
 800d324:	f003 030f 	and.w	r3, r3, #15
 800d328:	b2da      	uxtb	r2, r3
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	0c1b      	lsrs	r3, r3, #16
 800d332:	b29b      	uxth	r3, r3
 800d334:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d338:	b29a      	uxth	r2, r3
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	b29b      	uxth	r3, r3
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	b29b      	uxth	r3, r3
 800d342:	4313      	orrs	r3, r2
 800d344:	b29a      	uxth	r2, r3
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800d34a:	697b      	ldr	r3, [r7, #20]
 800d34c:	0a9b      	lsrs	r3, r3, #10
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d354:	b2da      	uxtb	r2, r3
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800d35a:	697b      	ldr	r3, [r7, #20]
 800d35c:	0a1b      	lsrs	r3, r3, #8
 800d35e:	b2db      	uxtb	r3, r3
 800d360:	f003 0303 	and.w	r3, r3, #3
 800d364:	b2da      	uxtb	r2, r3
 800d366:	683b      	ldr	r3, [r7, #0]
 800d368:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800d36a:	697b      	ldr	r3, [r7, #20]
 800d36c:	091b      	lsrs	r3, r3, #4
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	f003 030f 	and.w	r3, r3, #15
 800d374:	b2da      	uxtb	r2, r3
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	b2db      	uxtb	r3, r3
 800d37e:	f003 030f 	and.w	r3, r3, #15
 800d382:	b2da      	uxtb	r2, r3
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800d388:	69bb      	ldr	r3, [r7, #24]
 800d38a:	0e1b      	lsrs	r3, r3, #24
 800d38c:	b2da      	uxtb	r2, r3
 800d38e:	683b      	ldr	r3, [r7, #0]
 800d390:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d39a:	4618      	mov	r0, r3
 800d39c:	f003 ff46 	bl	801122c <SDMMC_CmdBlockLength>
 800d3a0:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800d3a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d00d      	beq.n	800d3c4 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4a08      	ldr	r2, [pc, #32]	; (800d3d0 <HAL_SD_GetCardStatus+0x178>)
 800d3ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d3b4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800d3be:	2301      	movs	r3, #1
 800d3c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800d3c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3750      	adds	r7, #80	; 0x50
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	1fe00fff 	.word	0x1fe00fff

0800d3d4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b083      	sub	sp, #12
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d41e:	2300      	movs	r3, #0
}
 800d420:	4618      	mov	r0, r3
 800d422:	370c      	adds	r7, #12
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr

0800d42c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d42c:	b590      	push	{r4, r7, lr}
 800d42e:	b08d      	sub	sp, #52	; 0x34
 800d430:	af02      	add	r7, sp, #8
 800d432:	6078      	str	r0, [r7, #4]
 800d434:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800d436:	2300      	movs	r3, #0
 800d438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2203      	movs	r2, #3
 800d440:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d448:	2b03      	cmp	r3, #3
 800d44a:	d02e      	beq.n	800d4aa <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d452:	d106      	bne.n	800d462 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d458:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	635a      	str	r2, [r3, #52]	; 0x34
 800d460:	e029      	b.n	800d4b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d468:	d10a      	bne.n	800d480 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 fb64 	bl	800db38 <SD_WideBus_Enable>
 800d470:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d476:	6a3b      	ldr	r3, [r7, #32]
 800d478:	431a      	orrs	r2, r3
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	635a      	str	r2, [r3, #52]	; 0x34
 800d47e:	e01a      	b.n	800d4b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d10a      	bne.n	800d49c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 fba1 	bl	800dbce <SD_WideBus_Disable>
 800d48c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d492:	6a3b      	ldr	r3, [r7, #32]
 800d494:	431a      	orrs	r2, r3
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	635a      	str	r2, [r3, #52]	; 0x34
 800d49a:	e00c      	b.n	800d4b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	635a      	str	r2, [r3, #52]	; 0x34
 800d4a8:	e005      	b.n	800d4b6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ae:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d007      	beq.n	800d4ce <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	4a5f      	ldr	r2, [pc, #380]	; (800d640 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d4c4:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d4cc:	e096      	b.n	800d5fc <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d4ce:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d4d2:	f04f 0100 	mov.w	r1, #0
 800d4d6:	f7fd fea3 	bl	800b220 <HAL_RCCEx_GetPeriphCLKFreq>
 800d4da:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800d4dc:	69fb      	ldr	r3, [r7, #28]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	f000 8083 	beq.w	800d5ea <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	685b      	ldr	r3, [r3, #4]
 800d4e8:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	689b      	ldr	r3, [r3, #8]
 800d4ee:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	691b      	ldr	r3, [r3, #16]
 800d4f8:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	695a      	ldr	r2, [r3, #20]
 800d4fe:	69fb      	ldr	r3, [r7, #28]
 800d500:	4950      	ldr	r1, [pc, #320]	; (800d644 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d502:	fba1 1303 	umull	r1, r3, r1, r3
 800d506:	0e1b      	lsrs	r3, r3, #24
 800d508:	429a      	cmp	r2, r3
 800d50a:	d303      	bcc.n	800d514 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	695b      	ldr	r3, [r3, #20]
 800d510:	61bb      	str	r3, [r7, #24]
 800d512:	e05a      	b.n	800d5ca <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d518:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d51c:	d103      	bne.n	800d526 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	695b      	ldr	r3, [r3, #20]
 800d522:	61bb      	str	r3, [r7, #24]
 800d524:	e051      	b.n	800d5ca <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d52a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d52e:	d126      	bne.n	800d57e <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	695b      	ldr	r3, [r3, #20]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d10e      	bne.n	800d556 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	4a43      	ldr	r2, [pc, #268]	; (800d648 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d53c:	4293      	cmp	r3, r2
 800d53e:	d906      	bls.n	800d54e <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	4a40      	ldr	r2, [pc, #256]	; (800d644 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d544:	fba2 2303 	umull	r2, r3, r2, r3
 800d548:	0e5b      	lsrs	r3, r3, #25
 800d54a:	61bb      	str	r3, [r7, #24]
 800d54c:	e03d      	b.n	800d5ca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	695b      	ldr	r3, [r3, #20]
 800d552:	61bb      	str	r3, [r7, #24]
 800d554:	e039      	b.n	800d5ca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	695b      	ldr	r3, [r3, #20]
 800d55a:	005b      	lsls	r3, r3, #1
 800d55c:	69fa      	ldr	r2, [r7, #28]
 800d55e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d562:	4a39      	ldr	r2, [pc, #228]	; (800d648 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800d564:	4293      	cmp	r3, r2
 800d566:	d906      	bls.n	800d576 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800d568:	69fb      	ldr	r3, [r7, #28]
 800d56a:	4a36      	ldr	r2, [pc, #216]	; (800d644 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d56c:	fba2 2303 	umull	r2, r3, r2, r3
 800d570:	0e5b      	lsrs	r3, r3, #25
 800d572:	61bb      	str	r3, [r7, #24]
 800d574:	e029      	b.n	800d5ca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	695b      	ldr	r3, [r3, #20]
 800d57a:	61bb      	str	r3, [r7, #24]
 800d57c:	e025      	b.n	800d5ca <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	695b      	ldr	r3, [r3, #20]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d10e      	bne.n	800d5a4 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800d586:	69fb      	ldr	r3, [r7, #28]
 800d588:	4a30      	ldr	r2, [pc, #192]	; (800d64c <HAL_SD_ConfigWideBusOperation+0x220>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	d906      	bls.n	800d59c <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d58e:	69fb      	ldr	r3, [r7, #28]
 800d590:	4a2c      	ldr	r2, [pc, #176]	; (800d644 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d592:	fba2 2303 	umull	r2, r3, r2, r3
 800d596:	0e1b      	lsrs	r3, r3, #24
 800d598:	61bb      	str	r3, [r7, #24]
 800d59a:	e016      	b.n	800d5ca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	695b      	ldr	r3, [r3, #20]
 800d5a0:	61bb      	str	r3, [r7, #24]
 800d5a2:	e012      	b.n	800d5ca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	695b      	ldr	r3, [r3, #20]
 800d5a8:	005b      	lsls	r3, r3, #1
 800d5aa:	69fa      	ldr	r2, [r7, #28]
 800d5ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5b0:	4a26      	ldr	r2, [pc, #152]	; (800d64c <HAL_SD_ConfigWideBusOperation+0x220>)
 800d5b2:	4293      	cmp	r3, r2
 800d5b4:	d906      	bls.n	800d5c4 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800d5b6:	69fb      	ldr	r3, [r7, #28]
 800d5b8:	4a22      	ldr	r2, [pc, #136]	; (800d644 <HAL_SD_ConfigWideBusOperation+0x218>)
 800d5ba:	fba2 2303 	umull	r2, r3, r2, r3
 800d5be:	0e1b      	lsrs	r3, r3, #24
 800d5c0:	61bb      	str	r3, [r7, #24]
 800d5c2:	e002      	b.n	800d5ca <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	695b      	ldr	r3, [r3, #20]
 800d5c8:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681c      	ldr	r4, [r3, #0]
 800d5ce:	466a      	mov	r2, sp
 800d5d0:	f107 0314 	add.w	r3, r7, #20
 800d5d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d5d8:	e882 0003 	stmia.w	r2, {r0, r1}
 800d5dc:	f107 0308 	add.w	r3, r7, #8
 800d5e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d5e2:	4620      	mov	r0, r4
 800d5e4:	f003 fd44 	bl	8011070 <SDMMC_Init>
 800d5e8:	e008      	b.n	800d5fc <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800d5f6:	2301      	movs	r3, #1
 800d5f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d604:	4618      	mov	r0, r3
 800d606:	f003 fe11 	bl	801122c <SDMMC_CmdBlockLength>
 800d60a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d60c:	6a3b      	ldr	r3, [r7, #32]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d00c      	beq.n	800d62c <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	4a0a      	ldr	r2, [pc, #40]	; (800d640 <HAL_SD_ConfigWideBusOperation+0x214>)
 800d618:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d61e:	6a3b      	ldr	r3, [r7, #32]
 800d620:	431a      	orrs	r2, r3
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800d626:	2301      	movs	r3, #1
 800d628:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2201      	movs	r2, #1
 800d630:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800d634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d638:	4618      	mov	r0, r3
 800d63a:	372c      	adds	r7, #44	; 0x2c
 800d63c:	46bd      	mov	sp, r7
 800d63e:	bd90      	pop	{r4, r7, pc}
 800d640:	1fe00fff 	.word	0x1fe00fff
 800d644:	55e63b89 	.word	0x55e63b89
 800d648:	02faf080 	.word	0x02faf080
 800d64c:	017d7840 	.word	0x017d7840

0800d650 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b086      	sub	sp, #24
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d658:	2300      	movs	r3, #0
 800d65a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d65c:	f107 030c 	add.w	r3, r7, #12
 800d660:	4619      	mov	r1, r3
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f000 fa40 	bl	800dae8 <SD_SendStatus>
 800d668:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d66a:	697b      	ldr	r3, [r7, #20]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d005      	beq.n	800d67c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d674:	697b      	ldr	r3, [r7, #20]
 800d676:	431a      	orrs	r2, r3
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	0a5b      	lsrs	r3, r3, #9
 800d680:	f003 030f 	and.w	r3, r3, #15
 800d684:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d686:	693b      	ldr	r3, [r7, #16]
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3718      	adds	r7, #24
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b090      	sub	sp, #64	; 0x40
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800d698:	2300      	movs	r3, #0
 800d69a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800d69c:	f7f6 f962 	bl	8003964 <HAL_GetTick>
 800d6a0:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f003 fd3b 	bl	8011122 <SDMMC_GetPowerState>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d102      	bne.n	800d6b8 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d6b2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d6b6:	e0b5      	b.n	800d824 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6bc:	2b03      	cmp	r3, #3
 800d6be:	d02e      	beq.n	800d71e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	4618      	mov	r0, r3
 800d6c6:	f003 ff86 	bl	80115d6 <SDMMC_CmdSendCID>
 800d6ca:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d001      	beq.n	800d6d6 <SD_InitCard+0x46>
    {
      return errorstate;
 800d6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6d4:	e0a6      	b.n	800d824 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	2100      	movs	r1, #0
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f003 fd66 	bl	80111ae <SDMMC_GetResponse>
 800d6e2:	4602      	mov	r2, r0
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	2104      	movs	r1, #4
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f003 fd5d 	bl	80111ae <SDMMC_GetResponse>
 800d6f4:	4602      	mov	r2, r0
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	2108      	movs	r1, #8
 800d700:	4618      	mov	r0, r3
 800d702:	f003 fd54 	bl	80111ae <SDMMC_GetResponse>
 800d706:	4602      	mov	r2, r0
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	210c      	movs	r1, #12
 800d712:	4618      	mov	r0, r3
 800d714:	f003 fd4b 	bl	80111ae <SDMMC_GetResponse>
 800d718:	4602      	mov	r2, r0
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d722:	2b03      	cmp	r3, #3
 800d724:	d01d      	beq.n	800d762 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800d726:	e019      	b.n	800d75c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f107 020a 	add.w	r2, r7, #10
 800d730:	4611      	mov	r1, r2
 800d732:	4618      	mov	r0, r3
 800d734:	f003 ff8e 	bl	8011654 <SDMMC_CmdSetRelAdd>
 800d738:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800d73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d001      	beq.n	800d744 <SD_InitCard+0xb4>
      {
        return errorstate;
 800d740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d742:	e06f      	b.n	800d824 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800d744:	f7f6 f90e 	bl	8003964 <HAL_GetTick>
 800d748:	4602      	mov	r2, r0
 800d74a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d74c:	1ad3      	subs	r3, r2, r3
 800d74e:	f241 3287 	movw	r2, #4999	; 0x1387
 800d752:	4293      	cmp	r3, r2
 800d754:	d902      	bls.n	800d75c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800d756:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d75a:	e063      	b.n	800d824 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800d75c:	897b      	ldrh	r3, [r7, #10]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d0e2      	beq.n	800d728 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d766:	2b03      	cmp	r3, #3
 800d768:	d036      	beq.n	800d7d8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d76a:	897b      	ldrh	r3, [r7, #10]
 800d76c:	461a      	mov	r2, r3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d77a:	041b      	lsls	r3, r3, #16
 800d77c:	4619      	mov	r1, r3
 800d77e:	4610      	mov	r0, r2
 800d780:	f003 ff48 	bl	8011614 <SDMMC_CmdSendCSD>
 800d784:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800d786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d001      	beq.n	800d790 <SD_InitCard+0x100>
    {
      return errorstate;
 800d78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78e:	e049      	b.n	800d824 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	2100      	movs	r1, #0
 800d796:	4618      	mov	r0, r3
 800d798:	f003 fd09 	bl	80111ae <SDMMC_GetResponse>
 800d79c:	4602      	mov	r2, r0
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2104      	movs	r1, #4
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	f003 fd00 	bl	80111ae <SDMMC_GetResponse>
 800d7ae:	4602      	mov	r2, r0
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	2108      	movs	r1, #8
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f003 fcf7 	bl	80111ae <SDMMC_GetResponse>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	210c      	movs	r1, #12
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f003 fcee 	bl	80111ae <SDMMC_GetResponse>
 800d7d2:	4602      	mov	r2, r0
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	2104      	movs	r1, #4
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f003 fce5 	bl	80111ae <SDMMC_GetResponse>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	0d1a      	lsrs	r2, r3, #20
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d7ec:	f107 030c 	add.w	r3, r7, #12
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f7ff fb8c 	bl	800cf10 <HAL_SD_GetCardCSD>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d002      	beq.n	800d804 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d7fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d802:	e00f      	b.n	800d824 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681a      	ldr	r2, [r3, #0]
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d80c:	041b      	lsls	r3, r3, #16
 800d80e:	4619      	mov	r1, r3
 800d810:	4610      	mov	r0, r2
 800d812:	f003 fdf7 	bl	8011404 <SDMMC_CmdSelDesel>
 800d816:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800d818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d001      	beq.n	800d822 <SD_InitCard+0x192>
  {
    return errorstate;
 800d81e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d820:	e000      	b.n	800d824 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d822:	2300      	movs	r3, #0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3740      	adds	r7, #64	; 0x40
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b086      	sub	sp, #24
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d834:	2300      	movs	r3, #0
 800d836:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800d838:	2300      	movs	r3, #0
 800d83a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800d83c:	2300      	movs	r3, #0
 800d83e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4618      	mov	r0, r3
 800d846:	f003 fe00 	bl	801144a <SDMMC_CmdGoIdleState>
 800d84a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d001      	beq.n	800d856 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	e072      	b.n	800d93c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	4618      	mov	r0, r3
 800d85c:	f003 fe13 	bl	8011486 <SDMMC_CmdOperCond>
 800d860:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d868:	d10d      	bne.n	800d886 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2200      	movs	r2, #0
 800d86e:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4618      	mov	r0, r3
 800d876:	f003 fde8 	bl	801144a <SDMMC_CmdGoIdleState>
 800d87a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d004      	beq.n	800d88c <SD_PowerON+0x60>
    {
      return errorstate;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	e05a      	b.n	800d93c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2201      	movs	r2, #1
 800d88a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d890:	2b01      	cmp	r3, #1
 800d892:	d137      	bne.n	800d904 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2100      	movs	r1, #0
 800d89a:	4618      	mov	r0, r3
 800d89c:	f003 fe13 	bl	80114c6 <SDMMC_CmdAppCommand>
 800d8a0:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d02d      	beq.n	800d904 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d8ac:	e046      	b.n	800d93c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f003 fe06 	bl	80114c6 <SDMMC_CmdAppCommand>
 800d8ba:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d001      	beq.n	800d8c6 <SD_PowerON+0x9a>
    {
      return errorstate;
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	e03a      	b.n	800d93c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	491e      	ldr	r1, [pc, #120]	; (800d944 <SD_PowerON+0x118>)
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f003 fe1d 	bl	801150c <SDMMC_CmdAppOperCommand>
 800d8d2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d002      	beq.n	800d8e0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d8da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d8de:	e02d      	b.n	800d93c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	2100      	movs	r1, #0
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	f003 fc61 	bl	80111ae <SDMMC_GetResponse>
 800d8ec:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	0fdb      	lsrs	r3, r3, #31
 800d8f2:	2b01      	cmp	r3, #1
 800d8f4:	d101      	bne.n	800d8fa <SD_PowerON+0xce>
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	e000      	b.n	800d8fc <SD_PowerON+0xd0>
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	613b      	str	r3, [r7, #16]

    count++;
 800d8fe:	68bb      	ldr	r3, [r7, #8]
 800d900:	3301      	adds	r3, #1
 800d902:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d90a:	4293      	cmp	r3, r2
 800d90c:	d802      	bhi.n	800d914 <SD_PowerON+0xe8>
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d0cc      	beq.n	800d8ae <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800d914:	68bb      	ldr	r3, [r7, #8]
 800d916:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d91a:	4293      	cmp	r3, r2
 800d91c:	d902      	bls.n	800d924 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d91e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d922:	e00b      	b.n	800d93c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	2200      	movs	r2, #0
 800d928:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d930:	2b00      	cmp	r3, #0
 800d932:	d002      	beq.n	800d93a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2201      	movs	r2, #1
 800d938:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800d93a:	2300      	movs	r3, #0
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3718      	adds	r7, #24
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}
 800d944:	c1100000 	.word	0xc1100000

0800d948 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b08c      	sub	sp, #48	; 0x30
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d952:	f7f6 f807 	bl	8003964 <HAL_GetTick>
 800d956:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	2100      	movs	r1, #0
 800d962:	4618      	mov	r0, r3
 800d964:	f003 fc23 	bl	80111ae <SDMMC_GetResponse>
 800d968:	4603      	mov	r3, r0
 800d96a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d96e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d972:	d102      	bne.n	800d97a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d974:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d978:	e0b0      	b.n	800dadc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	2140      	movs	r1, #64	; 0x40
 800d980:	4618      	mov	r0, r3
 800d982:	f003 fc53 	bl	801122c <SDMMC_CmdBlockLength>
 800d986:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d988:	6a3b      	ldr	r3, [r7, #32]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d005      	beq.n	800d99a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d996:	6a3b      	ldr	r3, [r7, #32]
 800d998:	e0a0      	b.n	800dadc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681a      	ldr	r2, [r3, #0]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9a2:	041b      	lsls	r3, r3, #16
 800d9a4:	4619      	mov	r1, r3
 800d9a6:	4610      	mov	r0, r2
 800d9a8:	f003 fd8d 	bl	80114c6 <SDMMC_CmdAppCommand>
 800d9ac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d9ae:	6a3b      	ldr	r3, [r7, #32]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d005      	beq.n	800d9c0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800d9bc:	6a3b      	ldr	r3, [r7, #32]
 800d9be:	e08d      	b.n	800dadc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d9c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d9c4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800d9c6:	2340      	movs	r3, #64	; 0x40
 800d9c8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800d9ca:	2360      	movs	r3, #96	; 0x60
 800d9cc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d9ce:	2302      	movs	r3, #2
 800d9d0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d9d2:	2300      	movs	r3, #0
 800d9d4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	f107 0208 	add.w	r2, r7, #8
 800d9e2:	4611      	mov	r1, r2
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	f003 fbf5 	bl	80111d4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	f003 fe75 	bl	80116de <SDMMC_CmdStatusRegister>
 800d9f4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d9f6:	6a3b      	ldr	r3, [r7, #32]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d02b      	beq.n	800da54 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800da04:	6a3b      	ldr	r3, [r7, #32]
 800da06:	e069      	b.n	800dadc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	681b      	ldr	r3, [r3, #0]
 800da0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800da12:	2b00      	cmp	r3, #0
 800da14:	d013      	beq.n	800da3e <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800da16:	2300      	movs	r3, #0
 800da18:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da1a:	e00d      	b.n	800da38 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	4618      	mov	r0, r3
 800da22:	f003 fb4f 	bl	80110c4 <SDMMC_ReadFIFO>
 800da26:	4602      	mov	r2, r0
 800da28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2a:	601a      	str	r2, [r3, #0]
        pData++;
 800da2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2e:	3304      	adds	r3, #4
 800da30:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800da32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da34:	3301      	adds	r3, #1
 800da36:	62fb      	str	r3, [r7, #44]	; 0x2c
 800da38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3a:	2b07      	cmp	r3, #7
 800da3c:	d9ee      	bls.n	800da1c <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800da3e:	f7f5 ff91 	bl	8003964 <HAL_GetTick>
 800da42:	4602      	mov	r2, r0
 800da44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da46:	1ad3      	subs	r3, r2, r3
 800da48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da4c:	d102      	bne.n	800da54 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800da4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da52:	e043      	b.n	800dadc <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da5a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d0d2      	beq.n	800da08 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da68:	f003 0308 	and.w	r3, r3, #8
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d001      	beq.n	800da74 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800da70:	2308      	movs	r3, #8
 800da72:	e033      	b.n	800dadc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da7a:	f003 0302 	and.w	r3, r3, #2
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d001      	beq.n	800da86 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800da82:	2302      	movs	r3, #2
 800da84:	e02a      	b.n	800dadc <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da8c:	f003 0320 	and.w	r3, r3, #32
 800da90:	2b00      	cmp	r3, #0
 800da92:	d017      	beq.n	800dac4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800da94:	2320      	movs	r3, #32
 800da96:	e021      	b.n	800dadc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	4618      	mov	r0, r3
 800da9e:	f003 fb11 	bl	80110c4 <SDMMC_ReadFIFO>
 800daa2:	4602      	mov	r2, r0
 800daa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daa6:	601a      	str	r2, [r3, #0]
    pData++;
 800daa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daaa:	3304      	adds	r3, #4
 800daac:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800daae:	f7f5 ff59 	bl	8003964 <HAL_GetTick>
 800dab2:	4602      	mov	r2, r0
 800dab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab6:	1ad3      	subs	r3, r2, r3
 800dab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dabc:	d102      	bne.n	800dac4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dabe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dac2:	e00b      	b.n	800dadc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	681b      	ldr	r3, [r3, #0]
 800dac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d1e2      	bne.n	800da98 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4a03      	ldr	r2, [pc, #12]	; (800dae4 <SD_SendSDStatus+0x19c>)
 800dad8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800dada:	2300      	movs	r3, #0
}
 800dadc:	4618      	mov	r0, r3
 800dade:	3730      	adds	r7, #48	; 0x30
 800dae0:	46bd      	mov	sp, r7
 800dae2:	bd80      	pop	{r7, pc}
 800dae4:	18000f3a 	.word	0x18000f3a

0800dae8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b084      	sub	sp, #16
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d102      	bne.n	800dafe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800daf8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dafc:	e018      	b.n	800db30 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db06:	041b      	lsls	r3, r3, #16
 800db08:	4619      	mov	r1, r3
 800db0a:	4610      	mov	r0, r2
 800db0c:	f003 fdc4 	bl	8011698 <SDMMC_CmdSendStatus>
 800db10:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d001      	beq.n	800db1c <SD_SendStatus+0x34>
  {
    return errorstate;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	e009      	b.n	800db30 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	2100      	movs	r1, #0
 800db22:	4618      	mov	r0, r3
 800db24:	f003 fb43 	bl	80111ae <SDMMC_GetResponse>
 800db28:	4602      	mov	r2, r0
 800db2a:	683b      	ldr	r3, [r7, #0]
 800db2c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800db2e:	2300      	movs	r3, #0
}
 800db30:	4618      	mov	r0, r3
 800db32:	3710      	adds	r7, #16
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}

0800db38 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800db38:	b580      	push	{r7, lr}
 800db3a:	b086      	sub	sp, #24
 800db3c:	af00      	add	r7, sp, #0
 800db3e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800db40:	2300      	movs	r3, #0
 800db42:	60fb      	str	r3, [r7, #12]
 800db44:	2300      	movs	r3, #0
 800db46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	2100      	movs	r1, #0
 800db4e:	4618      	mov	r0, r3
 800db50:	f003 fb2d 	bl	80111ae <SDMMC_GetResponse>
 800db54:	4603      	mov	r3, r0
 800db56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db5e:	d102      	bne.n	800db66 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800db60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800db64:	e02f      	b.n	800dbc6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800db66:	f107 030c 	add.w	r3, r7, #12
 800db6a:	4619      	mov	r1, r3
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f000 f879 	bl	800dc64 <SD_FindSCR>
 800db72:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d001      	beq.n	800db7e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	e023      	b.n	800dbc6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800db84:	2b00      	cmp	r3, #0
 800db86:	d01c      	beq.n	800dbc2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681a      	ldr	r2, [r3, #0]
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800db90:	041b      	lsls	r3, r3, #16
 800db92:	4619      	mov	r1, r3
 800db94:	4610      	mov	r0, r2
 800db96:	f003 fc96 	bl	80114c6 <SDMMC_CmdAppCommand>
 800db9a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d001      	beq.n	800dba6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800dba2:	697b      	ldr	r3, [r7, #20]
 800dba4:	e00f      	b.n	800dbc6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	2102      	movs	r1, #2
 800dbac:	4618      	mov	r0, r3
 800dbae:	f003 fccd 	bl	801154c <SDMMC_CmdBusWidth>
 800dbb2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d001      	beq.n	800dbbe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	e003      	b.n	800dbc6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	e001      	b.n	800dbc6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dbc2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3718      	adds	r7, #24
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}

0800dbce <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b086      	sub	sp, #24
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	60fb      	str	r3, [r7, #12]
 800dbda:	2300      	movs	r3, #0
 800dbdc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	2100      	movs	r1, #0
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f003 fae2 	bl	80111ae <SDMMC_GetResponse>
 800dbea:	4603      	mov	r3, r0
 800dbec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dbf4:	d102      	bne.n	800dbfc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dbf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dbfa:	e02f      	b.n	800dc5c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dbfc:	f107 030c 	add.w	r3, r7, #12
 800dc00:	4619      	mov	r1, r3
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f000 f82e 	bl	800dc64 <SD_FindSCR>
 800dc08:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc0a:	697b      	ldr	r3, [r7, #20]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d001      	beq.n	800dc14 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	e023      	b.n	800dc5c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dc14:	693b      	ldr	r3, [r7, #16]
 800dc16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d01c      	beq.n	800dc58 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc26:	041b      	lsls	r3, r3, #16
 800dc28:	4619      	mov	r1, r3
 800dc2a:	4610      	mov	r0, r2
 800dc2c:	f003 fc4b 	bl	80114c6 <SDMMC_CmdAppCommand>
 800dc30:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d001      	beq.n	800dc3c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	e00f      	b.n	800dc5c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	2100      	movs	r1, #0
 800dc42:	4618      	mov	r0, r3
 800dc44:	f003 fc82 	bl	801154c <SDMMC_CmdBusWidth>
 800dc48:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d001      	beq.n	800dc54 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dc50:	697b      	ldr	r3, [r7, #20]
 800dc52:	e003      	b.n	800dc5c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dc54:	2300      	movs	r3, #0
 800dc56:	e001      	b.n	800dc5c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dc58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3718      	adds	r7, #24
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b08e      	sub	sp, #56	; 0x38
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dc6e:	f7f5 fe79 	bl	8003964 <HAL_GetTick>
 800dc72:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800dc74:	2300      	movs	r3, #0
 800dc76:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800dc78:	2300      	movs	r3, #0
 800dc7a:	60bb      	str	r3, [r7, #8]
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	2108      	movs	r1, #8
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f003 face 	bl	801122c <SDMMC_CmdBlockLength>
 800dc90:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d001      	beq.n	800dc9c <SD_FindSCR+0x38>
  {
    return errorstate;
 800dc98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc9a:	e0ad      	b.n	800ddf8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681a      	ldr	r2, [r3, #0]
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dca4:	041b      	lsls	r3, r3, #16
 800dca6:	4619      	mov	r1, r3
 800dca8:	4610      	mov	r0, r2
 800dcaa:	f003 fc0c 	bl	80114c6 <SDMMC_CmdAppCommand>
 800dcae:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d001      	beq.n	800dcba <SD_FindSCR+0x56>
  {
    return errorstate;
 800dcb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb8:	e09e      	b.n	800ddf8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dcba:	f04f 33ff 	mov.w	r3, #4294967295
 800dcbe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dcc0:	2308      	movs	r3, #8
 800dcc2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800dcc4:	2330      	movs	r3, #48	; 0x30
 800dcc6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dcc8:	2302      	movs	r3, #2
 800dcca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dccc:	2300      	movs	r3, #0
 800dcce:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f107 0210 	add.w	r2, r7, #16
 800dcdc:	4611      	mov	r1, r2
 800dcde:	4618      	mov	r0, r3
 800dce0:	f003 fa78 	bl	80111d4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4618      	mov	r0, r3
 800dcea:	f003 fc52 	bl	8011592 <SDMMC_CmdSendSCR>
 800dcee:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800dcf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d027      	beq.n	800dd46 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800dcf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf8:	e07e      	b.n	800ddf8 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800dd04:	2b00      	cmp	r3, #0
 800dd06:	d113      	bne.n	800dd30 <SD_FindSCR+0xcc>
 800dd08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d110      	bne.n	800dd30 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	4618      	mov	r0, r3
 800dd14:	f003 f9d6 	bl	80110c4 <SDMMC_ReadFIFO>
 800dd18:	4603      	mov	r3, r0
 800dd1a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	4618      	mov	r0, r3
 800dd22:	f003 f9cf 	bl	80110c4 <SDMMC_ReadFIFO>
 800dd26:	4603      	mov	r3, r0
 800dd28:	60fb      	str	r3, [r7, #12]
      index++;
 800dd2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd2c:	3301      	adds	r3, #1
 800dd2e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dd30:	f7f5 fe18 	bl	8003964 <HAL_GetTick>
 800dd34:	4602      	mov	r2, r0
 800dd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd38:	1ad3      	subs	r3, r2, r3
 800dd3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd3e:	d102      	bne.n	800dd46 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dd40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd44:	e058      	b.n	800ddf8 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd4c:	f240 532a 	movw	r3, #1322	; 0x52a
 800dd50:	4013      	ands	r3, r2
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d0d1      	beq.n	800dcfa <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd5c:	f003 0308 	and.w	r3, r3, #8
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d005      	beq.n	800dd70 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	2208      	movs	r2, #8
 800dd6a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dd6c:	2308      	movs	r3, #8
 800dd6e:	e043      	b.n	800ddf8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd76:	f003 0302 	and.w	r3, r3, #2
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d005      	beq.n	800dd8a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	2202      	movs	r2, #2
 800dd84:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dd86:	2302      	movs	r3, #2
 800dd88:	e036      	b.n	800ddf8 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd90:	f003 0320 	and.w	r3, r3, #32
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d005      	beq.n	800dda4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	2220      	movs	r2, #32
 800dd9e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dda0:	2320      	movs	r3, #32
 800dda2:	e029      	b.n	800ddf8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	4a15      	ldr	r2, [pc, #84]	; (800de00 <SD_FindSCR+0x19c>)
 800ddaa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	061a      	lsls	r2, r3, #24
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	021b      	lsls	r3, r3, #8
 800ddb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ddb8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	0a1b      	lsrs	r3, r3, #8
 800ddbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ddc2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	0e1b      	lsrs	r3, r3, #24
 800ddc8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ddca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddcc:	601a      	str	r2, [r3, #0]
    scr++;
 800ddce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd0:	3304      	adds	r3, #4
 800ddd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	061a      	lsls	r2, r3, #24
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	021b      	lsls	r3, r3, #8
 800dddc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dde0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dde2:	68bb      	ldr	r3, [r7, #8]
 800dde4:	0a1b      	lsrs	r3, r3, #8
 800dde6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ddea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	0e1b      	lsrs	r3, r3, #24
 800ddf0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ddf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddf4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ddf6:	2300      	movs	r3, #0
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	3738      	adds	r7, #56	; 0x38
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}
 800de00:	18000f3a 	.word	0x18000f3a

0800de04 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800de04:	b580      	push	{r7, lr}
 800de06:	b086      	sub	sp, #24
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de10:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de16:	2b1f      	cmp	r3, #31
 800de18:	d936      	bls.n	800de88 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800de1a:	2300      	movs	r3, #0
 800de1c:	617b      	str	r3, [r7, #20]
 800de1e:	e027      	b.n	800de70 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	4618      	mov	r0, r3
 800de26:	f003 f94d 	bl	80110c4 <SDMMC_ReadFIFO>
 800de2a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	b2da      	uxtb	r2, r3
 800de30:	693b      	ldr	r3, [r7, #16]
 800de32:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	3301      	adds	r3, #1
 800de38:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	0a1b      	lsrs	r3, r3, #8
 800de3e:	b2da      	uxtb	r2, r3
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de44:	693b      	ldr	r3, [r7, #16]
 800de46:	3301      	adds	r3, #1
 800de48:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	0c1b      	lsrs	r3, r3, #16
 800de4e:	b2da      	uxtb	r2, r3
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de54:	693b      	ldr	r3, [r7, #16]
 800de56:	3301      	adds	r3, #1
 800de58:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	0e1b      	lsrs	r3, r3, #24
 800de5e:	b2da      	uxtb	r2, r3
 800de60:	693b      	ldr	r3, [r7, #16]
 800de62:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	3301      	adds	r3, #1
 800de68:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	3301      	adds	r3, #1
 800de6e:	617b      	str	r3, [r7, #20]
 800de70:	697b      	ldr	r3, [r7, #20]
 800de72:	2b07      	cmp	r3, #7
 800de74:	d9d4      	bls.n	800de20 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	693a      	ldr	r2, [r7, #16]
 800de7a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de80:	f1a3 0220 	sub.w	r2, r3, #32
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800de88:	bf00      	nop
 800de8a:	3718      	adds	r7, #24
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b086      	sub	sp, #24
 800de94:	af00      	add	r7, sp, #0
 800de96:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	69db      	ldr	r3, [r3, #28]
 800de9c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6a1b      	ldr	r3, [r3, #32]
 800dea2:	2b1f      	cmp	r3, #31
 800dea4:	d93a      	bls.n	800df1c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800dea6:	2300      	movs	r3, #0
 800dea8:	617b      	str	r3, [r7, #20]
 800deaa:	e02b      	b.n	800df04 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800deac:	693b      	ldr	r3, [r7, #16]
 800deae:	781b      	ldrb	r3, [r3, #0]
 800deb0:	60fb      	str	r3, [r7, #12]
      tmp++;
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	3301      	adds	r3, #1
 800deb6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	781b      	ldrb	r3, [r3, #0]
 800debc:	021a      	lsls	r2, r3, #8
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	4313      	orrs	r3, r2
 800dec2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	3301      	adds	r3, #1
 800dec8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	041a      	lsls	r2, r3, #16
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	4313      	orrs	r3, r2
 800ded4:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	3301      	adds	r3, #1
 800deda:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800dedc:	693b      	ldr	r3, [r7, #16]
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	061a      	lsls	r2, r3, #24
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	4313      	orrs	r3, r2
 800dee6:	60fb      	str	r3, [r7, #12]
      tmp++;
 800dee8:	693b      	ldr	r3, [r7, #16]
 800deea:	3301      	adds	r3, #1
 800deec:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	f107 020c 	add.w	r2, r7, #12
 800def6:	4611      	mov	r1, r2
 800def8:	4618      	mov	r0, r3
 800defa:	f003 f8f0 	bl	80110de <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	3301      	adds	r3, #1
 800df02:	617b      	str	r3, [r7, #20]
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	2b07      	cmp	r3, #7
 800df08:	d9d0      	bls.n	800deac <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	693a      	ldr	r2, [r7, #16]
 800df0e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	6a1b      	ldr	r3, [r3, #32]
 800df14:	f1a3 0220 	sub.w	r2, r3, #32
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	621a      	str	r2, [r3, #32]
  }
}
 800df1c:	bf00      	nop
 800df1e:	3718      	adds	r7, #24
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}

0800df24 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800df2c:	bf00      	nop
 800df2e:	370c      	adds	r7, #12
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr

0800df38 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800df38:	b480      	push	{r7}
 800df3a:	b083      	sub	sp, #12
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800df40:	bf00      	nop
 800df42:	370c      	adds	r7, #12
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr

0800df4c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b083      	sub	sp, #12
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800df54:	bf00      	nop
 800df56:	370c      	adds	r7, #12
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr

0800df60 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800df60:	b480      	push	{r7}
 800df62:	b083      	sub	sp, #12
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800df68:	bf00      	nop
 800df6a:	370c      	adds	r7, #12
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr

0800df74 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b084      	sub	sp, #16
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d101      	bne.n	800df86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800df82:	2301      	movs	r3, #1
 800df84:	e10f      	b.n	800e1a6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2200      	movs	r2, #0
 800df8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4a87      	ldr	r2, [pc, #540]	; (800e1b0 <HAL_SPI_Init+0x23c>)
 800df92:	4293      	cmp	r3, r2
 800df94:	d00f      	beq.n	800dfb6 <HAL_SPI_Init+0x42>
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	4a86      	ldr	r2, [pc, #536]	; (800e1b4 <HAL_SPI_Init+0x240>)
 800df9c:	4293      	cmp	r3, r2
 800df9e:	d00a      	beq.n	800dfb6 <HAL_SPI_Init+0x42>
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4a84      	ldr	r2, [pc, #528]	; (800e1b8 <HAL_SPI_Init+0x244>)
 800dfa6:	4293      	cmp	r3, r2
 800dfa8:	d005      	beq.n	800dfb6 <HAL_SPI_Init+0x42>
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	2b0f      	cmp	r3, #15
 800dfb0:	d901      	bls.n	800dfb6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800dfb2:	2301      	movs	r3, #1
 800dfb4:	e0f7      	b.n	800e1a6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f000 fd5a 	bl	800ea70 <SPI_GetPacketSize>
 800dfbc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4a7b      	ldr	r2, [pc, #492]	; (800e1b0 <HAL_SPI_Init+0x23c>)
 800dfc4:	4293      	cmp	r3, r2
 800dfc6:	d00c      	beq.n	800dfe2 <HAL_SPI_Init+0x6e>
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	4a79      	ldr	r2, [pc, #484]	; (800e1b4 <HAL_SPI_Init+0x240>)
 800dfce:	4293      	cmp	r3, r2
 800dfd0:	d007      	beq.n	800dfe2 <HAL_SPI_Init+0x6e>
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	4a78      	ldr	r2, [pc, #480]	; (800e1b8 <HAL_SPI_Init+0x244>)
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d002      	beq.n	800dfe2 <HAL_SPI_Init+0x6e>
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	2b08      	cmp	r3, #8
 800dfe0:	d811      	bhi.n	800e006 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800dfe6:	4a72      	ldr	r2, [pc, #456]	; (800e1b0 <HAL_SPI_Init+0x23c>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d009      	beq.n	800e000 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	4a70      	ldr	r2, [pc, #448]	; (800e1b4 <HAL_SPI_Init+0x240>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d004      	beq.n	800e000 <HAL_SPI_Init+0x8c>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	4a6f      	ldr	r2, [pc, #444]	; (800e1b8 <HAL_SPI_Init+0x244>)
 800dffc:	4293      	cmp	r3, r2
 800dffe:	d104      	bne.n	800e00a <HAL_SPI_Init+0x96>
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	2b10      	cmp	r3, #16
 800e004:	d901      	bls.n	800e00a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e006:	2301      	movs	r3, #1
 800e008:	e0cd      	b.n	800e1a6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e010:	b2db      	uxtb	r3, r3
 800e012:	2b00      	cmp	r3, #0
 800e014:	d106      	bne.n	800e024 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2200      	movs	r2, #0
 800e01a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f7f4 fe32 	bl	8002c88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2202      	movs	r2, #2
 800e028:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f022 0201 	bic.w	r2, r2, #1
 800e03a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	689b      	ldr	r3, [r3, #8]
 800e042:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e046:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	699b      	ldr	r3, [r3, #24]
 800e04c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e050:	d119      	bne.n	800e086 <HAL_SPI_Init+0x112>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	685b      	ldr	r3, [r3, #4]
 800e056:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e05a:	d103      	bne.n	800e064 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e060:	2b00      	cmp	r3, #0
 800e062:	d008      	beq.n	800e076 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d10c      	bne.n	800e086 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e070:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e074:	d107      	bne.n	800e086 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e084:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	685b      	ldr	r3, [r3, #4]
 800e08a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d00f      	beq.n	800e0b2 <HAL_SPI_Init+0x13e>
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	68db      	ldr	r3, [r3, #12]
 800e096:	2b06      	cmp	r3, #6
 800e098:	d90b      	bls.n	800e0b2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	430a      	orrs	r2, r1
 800e0ae:	601a      	str	r2, [r3, #0]
 800e0b0:	e007      	b.n	800e0c2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	681a      	ldr	r2, [r3, #0]
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e0c0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	69da      	ldr	r2, [r3, #28]
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0ca:	431a      	orrs	r2, r3
 800e0cc:	68bb      	ldr	r3, [r7, #8]
 800e0ce:	431a      	orrs	r2, r3
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0d4:	ea42 0103 	orr.w	r1, r2, r3
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	68da      	ldr	r2, [r3, #12]
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	430a      	orrs	r2, r1
 800e0e2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ec:	431a      	orrs	r2, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0f2:	431a      	orrs	r2, r3
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	699b      	ldr	r3, [r3, #24]
 800e0f8:	431a      	orrs	r2, r3
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	691b      	ldr	r3, [r3, #16]
 800e0fe:	431a      	orrs	r2, r3
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	695b      	ldr	r3, [r3, #20]
 800e104:	431a      	orrs	r2, r3
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	6a1b      	ldr	r3, [r3, #32]
 800e10a:	431a      	orrs	r2, r3
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	685b      	ldr	r3, [r3, #4]
 800e110:	431a      	orrs	r2, r3
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e116:	431a      	orrs	r2, r3
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	689b      	ldr	r3, [r3, #8]
 800e11c:	431a      	orrs	r2, r3
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e122:	ea42 0103 	orr.w	r1, r2, r3
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	430a      	orrs	r2, r1
 800e130:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	685b      	ldr	r3, [r3, #4]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d113      	bne.n	800e162 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	689b      	ldr	r3, [r3, #8]
 800e140:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e14c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e160:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f022 0201 	bic.w	r2, r2, #1
 800e170:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	685b      	ldr	r3, [r3, #4]
 800e176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d00a      	beq.n	800e194 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	68db      	ldr	r3, [r3, #12]
 800e184:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	430a      	orrs	r2, r1
 800e192:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2200      	movs	r2, #0
 800e198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2201      	movs	r2, #1
 800e1a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800e1a4:	2300      	movs	r3, #0
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3710      	adds	r7, #16
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	bd80      	pop	{r7, pc}
 800e1ae:	bf00      	nop
 800e1b0:	40013000 	.word	0x40013000
 800e1b4:	40003800 	.word	0x40003800
 800e1b8:	40003c00 	.word	0x40003c00

0800e1bc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b08a      	sub	sp, #40	; 0x28
 800e1c0:	af02      	add	r7, sp, #8
 800e1c2:	60f8      	str	r0, [r7, #12]
 800e1c4:	60b9      	str	r1, [r7, #8]
 800e1c6:	603b      	str	r3, [r7, #0]
 800e1c8:	4613      	mov	r3, r2
 800e1ca:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	3320      	adds	r3, #32
 800e1d2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e1d8:	68fb      	ldr	r3, [r7, #12]
 800e1da:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	d101      	bne.n	800e1e6 <HAL_SPI_Transmit+0x2a>
 800e1e2:	2302      	movs	r3, #2
 800e1e4:	e1e1      	b.n	800e5aa <HAL_SPI_Transmit+0x3ee>
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2201      	movs	r2, #1
 800e1ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e1ee:	f7f5 fbb9 	bl	8003964 <HAL_GetTick>
 800e1f2:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e1fa:	b2db      	uxtb	r3, r3
 800e1fc:	2b01      	cmp	r3, #1
 800e1fe:	d007      	beq.n	800e210 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800e200:	2302      	movs	r3, #2
 800e202:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	2200      	movs	r2, #0
 800e208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e20c:	7efb      	ldrb	r3, [r7, #27]
 800e20e:	e1cc      	b.n	800e5aa <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	2b00      	cmp	r3, #0
 800e214:	d002      	beq.n	800e21c <HAL_SPI_Transmit+0x60>
 800e216:	88fb      	ldrh	r3, [r7, #6]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d107      	bne.n	800e22c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800e21c:	2301      	movs	r3, #1
 800e21e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	2200      	movs	r2, #0
 800e224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e228:	7efb      	ldrb	r3, [r7, #27]
 800e22a:	e1be      	b.n	800e5aa <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e22c:	68fb      	ldr	r3, [r7, #12]
 800e22e:	2203      	movs	r2, #3
 800e230:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	2200      	movs	r2, #0
 800e238:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	68ba      	ldr	r2, [r7, #8]
 800e240:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	88fa      	ldrh	r2, [r7, #6]
 800e246:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	88fa      	ldrh	r2, [r7, #6]
 800e24e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2200      	movs	r2, #0
 800e256:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	2200      	movs	r2, #0
 800e25c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	2200      	movs	r2, #0
 800e264:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	2200      	movs	r2, #0
 800e26c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	2200      	movs	r2, #0
 800e272:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	689b      	ldr	r3, [r3, #8]
 800e278:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e27c:	d108      	bne.n	800e290 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	681b      	ldr	r3, [r3, #0]
 800e282:	681a      	ldr	r2, [r3, #0]
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e28c:	601a      	str	r2, [r3, #0]
 800e28e:	e009      	b.n	800e2a4 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	68db      	ldr	r3, [r3, #12]
 800e296:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800e2a2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	685a      	ldr	r2, [r3, #4]
 800e2aa:	4b96      	ldr	r3, [pc, #600]	; (800e504 <HAL_SPI_Transmit+0x348>)
 800e2ac:	4013      	ands	r3, r2
 800e2ae:	88f9      	ldrh	r1, [r7, #6]
 800e2b0:	68fa      	ldr	r2, [r7, #12]
 800e2b2:	6812      	ldr	r2, [r2, #0]
 800e2b4:	430b      	orrs	r3, r1
 800e2b6:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	681a      	ldr	r2, [r3, #0]
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	f042 0201 	orr.w	r2, r2, #1
 800e2c6:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	685b      	ldr	r3, [r3, #4]
 800e2cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e2d0:	d107      	bne.n	800e2e2 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	681a      	ldr	r2, [r3, #0]
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e2e0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	68db      	ldr	r3, [r3, #12]
 800e2e6:	2b0f      	cmp	r3, #15
 800e2e8:	d947      	bls.n	800e37a <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e2ea:	e03f      	b.n	800e36c <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	695b      	ldr	r3, [r3, #20]
 800e2f2:	f003 0302 	and.w	r3, r3, #2
 800e2f6:	2b02      	cmp	r3, #2
 800e2f8:	d114      	bne.n	800e324 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	6812      	ldr	r2, [r2, #0]
 800e304:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e30a:	1d1a      	adds	r2, r3, #4
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e316:	b29b      	uxth	r3, r3
 800e318:	3b01      	subs	r3, #1
 800e31a:	b29a      	uxth	r2, r3
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e322:	e023      	b.n	800e36c <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e324:	f7f5 fb1e 	bl	8003964 <HAL_GetTick>
 800e328:	4602      	mov	r2, r0
 800e32a:	697b      	ldr	r3, [r7, #20]
 800e32c:	1ad3      	subs	r3, r2, r3
 800e32e:	683a      	ldr	r2, [r7, #0]
 800e330:	429a      	cmp	r2, r3
 800e332:	d803      	bhi.n	800e33c <HAL_SPI_Transmit+0x180>
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e33a:	d102      	bne.n	800e342 <HAL_SPI_Transmit+0x186>
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d114      	bne.n	800e36c <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e342:	68f8      	ldr	r0, [r7, #12]
 800e344:	f000 fac6 	bl	800e8d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2200      	movs	r2, #0
 800e34c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e356:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	2201      	movs	r2, #1
 800e364:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e368:	2303      	movs	r3, #3
 800e36a:	e11e      	b.n	800e5aa <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e372:	b29b      	uxth	r3, r3
 800e374:	2b00      	cmp	r3, #0
 800e376:	d1b9      	bne.n	800e2ec <HAL_SPI_Transmit+0x130>
 800e378:	e0f1      	b.n	800e55e <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	68db      	ldr	r3, [r3, #12]
 800e37e:	2b07      	cmp	r3, #7
 800e380:	f240 80e6 	bls.w	800e550 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e384:	e05d      	b.n	800e442 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	695b      	ldr	r3, [r3, #20]
 800e38c:	f003 0302 	and.w	r3, r3, #2
 800e390:	2b02      	cmp	r3, #2
 800e392:	d132      	bne.n	800e3fa <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e39a:	b29b      	uxth	r3, r3
 800e39c:	2b01      	cmp	r3, #1
 800e39e:	d918      	bls.n	800e3d2 <HAL_SPI_Transmit+0x216>
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d014      	beq.n	800e3d2 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	6812      	ldr	r2, [r2, #0]
 800e3b2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3b8:	1d1a      	adds	r2, r3, #4
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	3b02      	subs	r3, #2
 800e3c8:	b29a      	uxth	r2, r3
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e3d0:	e037      	b.n	800e442 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3d6:	881a      	ldrh	r2, [r3, #0]
 800e3d8:	69fb      	ldr	r3, [r7, #28]
 800e3da:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e3e0:	1c9a      	adds	r2, r3, #2
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	3b01      	subs	r3, #1
 800e3f0:	b29a      	uxth	r2, r3
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e3f8:	e023      	b.n	800e442 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3fa:	f7f5 fab3 	bl	8003964 <HAL_GetTick>
 800e3fe:	4602      	mov	r2, r0
 800e400:	697b      	ldr	r3, [r7, #20]
 800e402:	1ad3      	subs	r3, r2, r3
 800e404:	683a      	ldr	r2, [r7, #0]
 800e406:	429a      	cmp	r2, r3
 800e408:	d803      	bhi.n	800e412 <HAL_SPI_Transmit+0x256>
 800e40a:	683b      	ldr	r3, [r7, #0]
 800e40c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e410:	d102      	bne.n	800e418 <HAL_SPI_Transmit+0x25c>
 800e412:	683b      	ldr	r3, [r7, #0]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d114      	bne.n	800e442 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e418:	68f8      	ldr	r0, [r7, #12]
 800e41a:	f000 fa5b 	bl	800e8d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2200      	movs	r2, #0
 800e422:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e42c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2201      	movs	r2, #1
 800e43a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e43e:	2303      	movs	r3, #3
 800e440:	e0b3      	b.n	800e5aa <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e448:	b29b      	uxth	r3, r3
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d19b      	bne.n	800e386 <HAL_SPI_Transmit+0x1ca>
 800e44e:	e086      	b.n	800e55e <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	695b      	ldr	r3, [r3, #20]
 800e456:	f003 0302 	and.w	r3, r3, #2
 800e45a:	2b02      	cmp	r3, #2
 800e45c:	d154      	bne.n	800e508 <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e464:	b29b      	uxth	r3, r3
 800e466:	2b03      	cmp	r3, #3
 800e468:	d918      	bls.n	800e49c <HAL_SPI_Transmit+0x2e0>
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e46e:	2b40      	cmp	r3, #64	; 0x40
 800e470:	d914      	bls.n	800e49c <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	6812      	ldr	r2, [r2, #0]
 800e47c:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e482:	1d1a      	adds	r2, r3, #4
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e48e:	b29b      	uxth	r3, r3
 800e490:	3b04      	subs	r3, #4
 800e492:	b29a      	uxth	r2, r3
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e49a:	e059      	b.n	800e550 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e4a2:	b29b      	uxth	r3, r3
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d917      	bls.n	800e4d8 <HAL_SPI_Transmit+0x31c>
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d013      	beq.n	800e4d8 <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4b4:	881a      	ldrh	r2, [r3, #0]
 800e4b6:	69fb      	ldr	r3, [r7, #28]
 800e4b8:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4be:	1c9a      	adds	r2, r3, #2
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e4ca:	b29b      	uxth	r3, r3
 800e4cc:	3b02      	subs	r3, #2
 800e4ce:	b29a      	uxth	r2, r3
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e4d6:	e03b      	b.n	800e550 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	3320      	adds	r3, #32
 800e4e2:	7812      	ldrb	r2, [r2, #0]
 800e4e4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e4ea:	1c5a      	adds	r2, r3, #1
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e4f6:	b29b      	uxth	r3, r3
 800e4f8:	3b01      	subs	r3, #1
 800e4fa:	b29a      	uxth	r2, r3
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800e502:	e025      	b.n	800e550 <HAL_SPI_Transmit+0x394>
 800e504:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e508:	f7f5 fa2c 	bl	8003964 <HAL_GetTick>
 800e50c:	4602      	mov	r2, r0
 800e50e:	697b      	ldr	r3, [r7, #20]
 800e510:	1ad3      	subs	r3, r2, r3
 800e512:	683a      	ldr	r2, [r7, #0]
 800e514:	429a      	cmp	r2, r3
 800e516:	d803      	bhi.n	800e520 <HAL_SPI_Transmit+0x364>
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e51e:	d102      	bne.n	800e526 <HAL_SPI_Transmit+0x36a>
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d114      	bne.n	800e550 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e526:	68f8      	ldr	r0, [r7, #12]
 800e528:	f000 f9d4 	bl	800e8d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	2200      	movs	r2, #0
 800e530:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e53a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	2201      	movs	r2, #1
 800e548:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e54c:	2303      	movs	r3, #3
 800e54e:	e02c      	b.n	800e5aa <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e556:	b29b      	uxth	r3, r3
 800e558:	2b00      	cmp	r3, #0
 800e55a:	f47f af79 	bne.w	800e450 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	9300      	str	r3, [sp, #0]
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	2200      	movs	r2, #0
 800e566:	2108      	movs	r1, #8
 800e568:	68f8      	ldr	r0, [r7, #12]
 800e56a:	f000 fa53 	bl	800ea14 <SPI_WaitOnFlagUntilTimeout>
 800e56e:	4603      	mov	r3, r0
 800e570:	2b00      	cmp	r3, #0
 800e572:	d007      	beq.n	800e584 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e57a:	f043 0220 	orr.w	r2, r3, #32
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e584:	68f8      	ldr	r0, [r7, #12]
 800e586:	f000 f9a5 	bl	800e8d4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2200      	movs	r2, #0
 800e58e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	2201      	movs	r2, #1
 800e596:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d001      	beq.n	800e5a8 <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800e5a4:	2301      	movs	r3, #1
 800e5a6:	e000      	b.n	800e5aa <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800e5a8:	7efb      	ldrb	r3, [r7, #27]
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3720      	adds	r7, #32
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}
 800e5b2:	bf00      	nop

0800e5b4 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b088      	sub	sp, #32
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	60f8      	str	r0, [r7, #12]
 800e5bc:	60b9      	str	r1, [r7, #8]
 800e5be:	603b      	str	r3, [r7, #0]
 800e5c0:	4613      	mov	r3, r2
 800e5c2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	3330      	adds	r3, #48	; 0x30
 800e5ce:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e5d6:	2b01      	cmp	r3, #1
 800e5d8:	d101      	bne.n	800e5de <HAL_SPI_Receive+0x2a>
 800e5da:	2302      	movs	r3, #2
 800e5dc:	e173      	b.n	800e8c6 <HAL_SPI_Receive+0x312>
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	2201      	movs	r2, #1
 800e5e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e5e6:	f7f5 f9bd 	bl	8003964 <HAL_GetTick>
 800e5ea:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e5f2:	b2db      	uxtb	r3, r3
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d007      	beq.n	800e608 <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800e5f8:	2302      	movs	r3, #2
 800e5fa:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	2200      	movs	r2, #0
 800e600:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e604:	7ffb      	ldrb	r3, [r7, #31]
 800e606:	e15e      	b.n	800e8c6 <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d002      	beq.n	800e614 <HAL_SPI_Receive+0x60>
 800e60e:	88fb      	ldrh	r3, [r7, #6]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d107      	bne.n	800e624 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800e614:	2301      	movs	r3, #1
 800e616:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	2200      	movs	r2, #0
 800e61c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800e620:	7ffb      	ldrb	r3, [r7, #31]
 800e622:	e150      	b.n	800e8c6 <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	2204      	movs	r2, #4
 800e628:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2200      	movs	r2, #0
 800e630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	68ba      	ldr	r2, [r7, #8]
 800e638:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	88fa      	ldrh	r2, [r7, #6]
 800e63e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	88fa      	ldrh	r2, [r7, #6]
 800e646:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	2200      	movs	r2, #0
 800e64e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	2200      	movs	r2, #0
 800e654:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	2200      	movs	r2, #0
 800e65c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	2200      	movs	r2, #0
 800e664:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2200      	movs	r2, #0
 800e66a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	689b      	ldr	r3, [r3, #8]
 800e670:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800e674:	d108      	bne.n	800e688 <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	681a      	ldr	r2, [r3, #0]
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800e684:	601a      	str	r2, [r3, #0]
 800e686:	e009      	b.n	800e69c <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	68db      	ldr	r3, [r3, #12]
 800e68e:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800e69a:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	685a      	ldr	r2, [r3, #4]
 800e6a2:	4b8b      	ldr	r3, [pc, #556]	; (800e8d0 <HAL_SPI_Receive+0x31c>)
 800e6a4:	4013      	ands	r3, r2
 800e6a6:	88f9      	ldrh	r1, [r7, #6]
 800e6a8:	68fa      	ldr	r2, [r7, #12]
 800e6aa:	6812      	ldr	r2, [r2, #0]
 800e6ac:	430b      	orrs	r3, r1
 800e6ae:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	681a      	ldr	r2, [r3, #0]
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f042 0201 	orr.w	r2, r2, #1
 800e6be:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	685b      	ldr	r3, [r3, #4]
 800e6c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e6c8:	d107      	bne.n	800e6da <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	681a      	ldr	r2, [r3, #0]
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e6d8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	68db      	ldr	r3, [r3, #12]
 800e6de:	2b0f      	cmp	r3, #15
 800e6e0:	d948      	bls.n	800e774 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e6e2:	e040      	b.n	800e766 <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	695a      	ldr	r2, [r3, #20]
 800e6ea:	f248 0308 	movw	r3, #32776	; 0x8008
 800e6ee:	4013      	ands	r3, r2
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d014      	beq.n	800e71e <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	681a      	ldr	r2, [r3, #0]
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e6fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800e6fe:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e704:	1d1a      	adds	r2, r3, #4
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e710:	b29b      	uxth	r3, r3
 800e712:	3b01      	subs	r3, #1
 800e714:	b29a      	uxth	r2, r3
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e71c:	e023      	b.n	800e766 <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e71e:	f7f5 f921 	bl	8003964 <HAL_GetTick>
 800e722:	4602      	mov	r2, r0
 800e724:	697b      	ldr	r3, [r7, #20]
 800e726:	1ad3      	subs	r3, r2, r3
 800e728:	683a      	ldr	r2, [r7, #0]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d803      	bhi.n	800e736 <HAL_SPI_Receive+0x182>
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e734:	d102      	bne.n	800e73c <HAL_SPI_Receive+0x188>
 800e736:	683b      	ldr	r3, [r7, #0]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d114      	bne.n	800e766 <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e73c:	68f8      	ldr	r0, [r7, #12]
 800e73e:	f000 f8c9 	bl	800e8d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2200      	movs	r2, #0
 800e746:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e750:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	2201      	movs	r2, #1
 800e75e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e762:	2303      	movs	r3, #3
 800e764:	e0af      	b.n	800e8c6 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e76c:	b29b      	uxth	r3, r3
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d1b8      	bne.n	800e6e4 <HAL_SPI_Receive+0x130>
 800e772:	e095      	b.n	800e8a0 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	68db      	ldr	r3, [r3, #12]
 800e778:	2b07      	cmp	r3, #7
 800e77a:	f240 808b 	bls.w	800e894 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800e77e:	e03f      	b.n	800e800 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	695b      	ldr	r3, [r3, #20]
 800e786:	f003 0301 	and.w	r3, r3, #1
 800e78a:	2b01      	cmp	r3, #1
 800e78c:	d114      	bne.n	800e7b8 <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e792:	69ba      	ldr	r2, [r7, #24]
 800e794:	8812      	ldrh	r2, [r2, #0]
 800e796:	b292      	uxth	r2, r2
 800e798:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e79a:	68fb      	ldr	r3, [r7, #12]
 800e79c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e79e:	1c9a      	adds	r2, r3, #2
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7aa:	b29b      	uxth	r3, r3
 800e7ac:	3b01      	subs	r3, #1
 800e7ae:	b29a      	uxth	r2, r3
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e7b6:	e023      	b.n	800e800 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e7b8:	f7f5 f8d4 	bl	8003964 <HAL_GetTick>
 800e7bc:	4602      	mov	r2, r0
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	1ad3      	subs	r3, r2, r3
 800e7c2:	683a      	ldr	r2, [r7, #0]
 800e7c4:	429a      	cmp	r2, r3
 800e7c6:	d803      	bhi.n	800e7d0 <HAL_SPI_Receive+0x21c>
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7ce:	d102      	bne.n	800e7d6 <HAL_SPI_Receive+0x222>
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d114      	bne.n	800e800 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e7d6:	68f8      	ldr	r0, [r7, #12]
 800e7d8:	f000 f87c 	bl	800e8d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	2200      	movs	r2, #0
 800e7e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e7ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e7fc:	2303      	movs	r3, #3
 800e7fe:	e062      	b.n	800e8c6 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e806:	b29b      	uxth	r3, r3
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d1b9      	bne.n	800e780 <HAL_SPI_Receive+0x1cc>
 800e80c:	e048      	b.n	800e8a0 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	695b      	ldr	r3, [r3, #20]
 800e814:	f003 0301 	and.w	r3, r3, #1
 800e818:	2b01      	cmp	r3, #1
 800e81a:	d117      	bne.n	800e84c <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e828:	7812      	ldrb	r2, [r2, #0]
 800e82a:	b2d2      	uxtb	r2, r2
 800e82c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e832:	1c5a      	adds	r2, r3, #1
 800e834:	68fb      	ldr	r3, [r7, #12]
 800e836:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e83e:	b29b      	uxth	r3, r3
 800e840:	3b01      	subs	r3, #1
 800e842:	b29a      	uxth	r2, r3
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e84a:	e023      	b.n	800e894 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e84c:	f7f5 f88a 	bl	8003964 <HAL_GetTick>
 800e850:	4602      	mov	r2, r0
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	1ad3      	subs	r3, r2, r3
 800e856:	683a      	ldr	r2, [r7, #0]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d803      	bhi.n	800e864 <HAL_SPI_Receive+0x2b0>
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e862:	d102      	bne.n	800e86a <HAL_SPI_Receive+0x2b6>
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	2b00      	cmp	r3, #0
 800e868:	d114      	bne.n	800e894 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e86a:	68f8      	ldr	r0, [r7, #12]
 800e86c:	f000 f832 	bl	800e8d4 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	2200      	movs	r2, #0
 800e874:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e878:	68fb      	ldr	r3, [r7, #12]
 800e87a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e87e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e888:	68fb      	ldr	r3, [r7, #12]
 800e88a:	2201      	movs	r2, #1
 800e88c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800e890:	2303      	movs	r3, #3
 800e892:	e018      	b.n	800e8c6 <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d1b6      	bne.n	800e80e <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e8a0:	68f8      	ldr	r0, [r7, #12]
 800e8a2:	f000 f817 	bl	800e8d4 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	2200      	movs	r2, #0
 800e8aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d001      	beq.n	800e8c4 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	e000      	b.n	800e8c6 <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800e8c4:	7ffb      	ldrb	r3, [r7, #31]
}
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	3720      	adds	r7, #32
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	bd80      	pop	{r7, pc}
 800e8ce:	bf00      	nop
 800e8d0:	ffff0000 	.word	0xffff0000

0800e8d4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e8d4:	b480      	push	{r7}
 800e8d6:	b085      	sub	sp, #20
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	695b      	ldr	r3, [r3, #20]
 800e8e2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	699a      	ldr	r2, [r3, #24]
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f042 0208 	orr.w	r2, r2, #8
 800e8f2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	699a      	ldr	r2, [r3, #24]
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f042 0210 	orr.w	r2, r2, #16
 800e902:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	681a      	ldr	r2, [r3, #0]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f022 0201 	bic.w	r2, r2, #1
 800e912:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	6919      	ldr	r1, [r3, #16]
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681a      	ldr	r2, [r3, #0]
 800e91e:	4b3c      	ldr	r3, [pc, #240]	; (800ea10 <SPI_CloseTransfer+0x13c>)
 800e920:	400b      	ands	r3, r1
 800e922:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	689a      	ldr	r2, [r3, #8]
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e932:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e93a:	b2db      	uxtb	r3, r3
 800e93c:	2b04      	cmp	r3, #4
 800e93e:	d014      	beq.n	800e96a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f003 0320 	and.w	r3, r3, #32
 800e946:	2b00      	cmp	r3, #0
 800e948:	d00f      	beq.n	800e96a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e950:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	699a      	ldr	r2, [r3, #24]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f042 0220 	orr.w	r2, r2, #32
 800e968:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e970:	b2db      	uxtb	r3, r3
 800e972:	2b03      	cmp	r3, #3
 800e974:	d014      	beq.n	800e9a0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d00f      	beq.n	800e9a0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e986:	f043 0204 	orr.w	r2, r3, #4
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	699a      	ldr	r2, [r3, #24]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e99e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e9a0:	68fb      	ldr	r3, [r7, #12]
 800e9a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d00f      	beq.n	800e9ca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9b0:	f043 0201 	orr.w	r2, r3, #1
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	699a      	ldr	r2, [r3, #24]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e9c8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d00f      	beq.n	800e9f4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e9da:	f043 0208 	orr.w	r2, r3, #8
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	699a      	ldr	r2, [r3, #24]
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e9f2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ea04:	bf00      	nop
 800ea06:	3714      	adds	r7, #20
 800ea08:	46bd      	mov	sp, r7
 800ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0e:	4770      	bx	lr
 800ea10:	fffffc90 	.word	0xfffffc90

0800ea14 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	b084      	sub	sp, #16
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	60f8      	str	r0, [r7, #12]
 800ea1c:	60b9      	str	r1, [r7, #8]
 800ea1e:	603b      	str	r3, [r7, #0]
 800ea20:	4613      	mov	r3, r2
 800ea22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ea24:	e010      	b.n	800ea48 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ea26:	f7f4 ff9d 	bl	8003964 <HAL_GetTick>
 800ea2a:	4602      	mov	r2, r0
 800ea2c:	69bb      	ldr	r3, [r7, #24]
 800ea2e:	1ad3      	subs	r3, r2, r3
 800ea30:	683a      	ldr	r2, [r7, #0]
 800ea32:	429a      	cmp	r2, r3
 800ea34:	d803      	bhi.n	800ea3e <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea3c:	d102      	bne.n	800ea44 <SPI_WaitOnFlagUntilTimeout+0x30>
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d101      	bne.n	800ea48 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ea44:	2303      	movs	r3, #3
 800ea46:	e00f      	b.n	800ea68 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	695a      	ldr	r2, [r3, #20]
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	4013      	ands	r3, r2
 800ea52:	68ba      	ldr	r2, [r7, #8]
 800ea54:	429a      	cmp	r2, r3
 800ea56:	bf0c      	ite	eq
 800ea58:	2301      	moveq	r3, #1
 800ea5a:	2300      	movne	r3, #0
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	461a      	mov	r2, r3
 800ea60:	79fb      	ldrb	r3, [r7, #7]
 800ea62:	429a      	cmp	r2, r3
 800ea64:	d0df      	beq.n	800ea26 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ea66:	2300      	movs	r3, #0
}
 800ea68:	4618      	mov	r0, r3
 800ea6a:	3710      	adds	r7, #16
 800ea6c:	46bd      	mov	sp, r7
 800ea6e:	bd80      	pop	{r7, pc}

0800ea70 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ea70:	b480      	push	{r7}
 800ea72:	b085      	sub	sp, #20
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea7c:	095b      	lsrs	r3, r3, #5
 800ea7e:	3301      	adds	r3, #1
 800ea80:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	68db      	ldr	r3, [r3, #12]
 800ea86:	3301      	adds	r3, #1
 800ea88:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ea8a:	68bb      	ldr	r3, [r7, #8]
 800ea8c:	3307      	adds	r3, #7
 800ea8e:	08db      	lsrs	r3, r3, #3
 800ea90:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	68fa      	ldr	r2, [r7, #12]
 800ea96:	fb02 f303 	mul.w	r3, r2, r3
}
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	3714      	adds	r7, #20
 800ea9e:	46bd      	mov	sp, r7
 800eaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa4:	4770      	bx	lr

0800eaa6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800eaa6:	b580      	push	{r7, lr}
 800eaa8:	b082      	sub	sp, #8
 800eaaa:	af00      	add	r7, sp, #0
 800eaac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d101      	bne.n	800eab8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800eab4:	2301      	movs	r3, #1
 800eab6:	e049      	b.n	800eb4c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d106      	bne.n	800ead2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2200      	movs	r2, #0
 800eac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f7f4 fb2d 	bl	800312c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2202      	movs	r2, #2
 800ead6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	681a      	ldr	r2, [r3, #0]
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	3304      	adds	r3, #4
 800eae2:	4619      	mov	r1, r3
 800eae4:	4610      	mov	r0, r2
 800eae6:	f000 fc8d 	bl	800f404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2201      	movs	r2, #1
 800eaee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2201      	movs	r2, #1
 800eafe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2201      	movs	r2, #1
 800eb06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	2201      	movs	r2, #1
 800eb0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2201      	movs	r2, #1
 800eb16:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2201      	movs	r2, #1
 800eb1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2201      	movs	r2, #1
 800eb26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2201      	movs	r2, #1
 800eb2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	2201      	movs	r2, #1
 800eb36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2201      	movs	r2, #1
 800eb3e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	2201      	movs	r2, #1
 800eb46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eb4a:	2300      	movs	r3, #0
}
 800eb4c:	4618      	mov	r0, r3
 800eb4e:	3708      	adds	r7, #8
 800eb50:	46bd      	mov	sp, r7
 800eb52:	bd80      	pop	{r7, pc}

0800eb54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800eb54:	b480      	push	{r7}
 800eb56:	b085      	sub	sp, #20
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	2b01      	cmp	r3, #1
 800eb66:	d001      	beq.n	800eb6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800eb68:	2301      	movs	r3, #1
 800eb6a:	e056      	b.n	800ec1a <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2202      	movs	r2, #2
 800eb70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	4a2b      	ldr	r2, [pc, #172]	; (800ec28 <HAL_TIM_Base_Start+0xd4>)
 800eb7a:	4293      	cmp	r3, r2
 800eb7c:	d02c      	beq.n	800ebd8 <HAL_TIM_Base_Start+0x84>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eb86:	d027      	beq.n	800ebd8 <HAL_TIM_Base_Start+0x84>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	4a27      	ldr	r2, [pc, #156]	; (800ec2c <HAL_TIM_Base_Start+0xd8>)
 800eb8e:	4293      	cmp	r3, r2
 800eb90:	d022      	beq.n	800ebd8 <HAL_TIM_Base_Start+0x84>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	4a26      	ldr	r2, [pc, #152]	; (800ec30 <HAL_TIM_Base_Start+0xdc>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d01d      	beq.n	800ebd8 <HAL_TIM_Base_Start+0x84>
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	4a24      	ldr	r2, [pc, #144]	; (800ec34 <HAL_TIM_Base_Start+0xe0>)
 800eba2:	4293      	cmp	r3, r2
 800eba4:	d018      	beq.n	800ebd8 <HAL_TIM_Base_Start+0x84>
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	4a23      	ldr	r2, [pc, #140]	; (800ec38 <HAL_TIM_Base_Start+0xe4>)
 800ebac:	4293      	cmp	r3, r2
 800ebae:	d013      	beq.n	800ebd8 <HAL_TIM_Base_Start+0x84>
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	4a21      	ldr	r2, [pc, #132]	; (800ec3c <HAL_TIM_Base_Start+0xe8>)
 800ebb6:	4293      	cmp	r3, r2
 800ebb8:	d00e      	beq.n	800ebd8 <HAL_TIM_Base_Start+0x84>
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	4a20      	ldr	r2, [pc, #128]	; (800ec40 <HAL_TIM_Base_Start+0xec>)
 800ebc0:	4293      	cmp	r3, r2
 800ebc2:	d009      	beq.n	800ebd8 <HAL_TIM_Base_Start+0x84>
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	4a1e      	ldr	r2, [pc, #120]	; (800ec44 <HAL_TIM_Base_Start+0xf0>)
 800ebca:	4293      	cmp	r3, r2
 800ebcc:	d004      	beq.n	800ebd8 <HAL_TIM_Base_Start+0x84>
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	4a1d      	ldr	r2, [pc, #116]	; (800ec48 <HAL_TIM_Base_Start+0xf4>)
 800ebd4:	4293      	cmp	r3, r2
 800ebd6:	d115      	bne.n	800ec04 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	689a      	ldr	r2, [r3, #8]
 800ebde:	4b1b      	ldr	r3, [pc, #108]	; (800ec4c <HAL_TIM_Base_Start+0xf8>)
 800ebe0:	4013      	ands	r3, r2
 800ebe2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2b06      	cmp	r3, #6
 800ebe8:	d015      	beq.n	800ec16 <HAL_TIM_Base_Start+0xc2>
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ebf0:	d011      	beq.n	800ec16 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	681a      	ldr	r2, [r3, #0]
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	f042 0201 	orr.w	r2, r2, #1
 800ec00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec02:	e008      	b.n	800ec16 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f042 0201 	orr.w	r2, r2, #1
 800ec12:	601a      	str	r2, [r3, #0]
 800ec14:	e000      	b.n	800ec18 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec16:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ec18:	2300      	movs	r3, #0
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3714      	adds	r7, #20
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec24:	4770      	bx	lr
 800ec26:	bf00      	nop
 800ec28:	40010000 	.word	0x40010000
 800ec2c:	40000400 	.word	0x40000400
 800ec30:	40000800 	.word	0x40000800
 800ec34:	40000c00 	.word	0x40000c00
 800ec38:	40010400 	.word	0x40010400
 800ec3c:	40001800 	.word	0x40001800
 800ec40:	40014000 	.word	0x40014000
 800ec44:	4000e000 	.word	0x4000e000
 800ec48:	4000e400 	.word	0x4000e400
 800ec4c:	00010007 	.word	0x00010007

0800ec50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ec50:	b580      	push	{r7, lr}
 800ec52:	b082      	sub	sp, #8
 800ec54:	af00      	add	r7, sp, #0
 800ec56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d101      	bne.n	800ec62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ec5e:	2301      	movs	r3, #1
 800ec60:	e049      	b.n	800ecf6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ec68:	b2db      	uxtb	r3, r3
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d106      	bne.n	800ec7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	2200      	movs	r2, #0
 800ec72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f7f4 f8c2 	bl	8002e00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	2202      	movs	r2, #2
 800ec80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681a      	ldr	r2, [r3, #0]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	3304      	adds	r3, #4
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	4610      	mov	r0, r2
 800ec90:	f000 fbb8 	bl	800f404 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	2201      	movs	r2, #1
 800ec98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2201      	movs	r2, #1
 800eca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	2201      	movs	r2, #1
 800eca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	2201      	movs	r2, #1
 800ecb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	2201      	movs	r2, #1
 800ecb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2201      	movs	r2, #1
 800ecc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2201      	movs	r2, #1
 800ecd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2201      	movs	r2, #1
 800ecd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2201      	movs	r2, #1
 800ece0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	2201      	movs	r2, #1
 800ece8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	2201      	movs	r2, #1
 800ecf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ecf4:	2300      	movs	r3, #0
}
 800ecf6:	4618      	mov	r0, r3
 800ecf8:	3708      	adds	r7, #8
 800ecfa:	46bd      	mov	sp, r7
 800ecfc:	bd80      	pop	{r7, pc}
	...

0800ed00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	6078      	str	r0, [r7, #4]
 800ed08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d109      	bne.n	800ed24 <HAL_TIM_PWM_Start+0x24>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ed16:	b2db      	uxtb	r3, r3
 800ed18:	2b01      	cmp	r3, #1
 800ed1a:	bf14      	ite	ne
 800ed1c:	2301      	movne	r3, #1
 800ed1e:	2300      	moveq	r3, #0
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	e03c      	b.n	800ed9e <HAL_TIM_PWM_Start+0x9e>
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	2b04      	cmp	r3, #4
 800ed28:	d109      	bne.n	800ed3e <HAL_TIM_PWM_Start+0x3e>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ed30:	b2db      	uxtb	r3, r3
 800ed32:	2b01      	cmp	r3, #1
 800ed34:	bf14      	ite	ne
 800ed36:	2301      	movne	r3, #1
 800ed38:	2300      	moveq	r3, #0
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	e02f      	b.n	800ed9e <HAL_TIM_PWM_Start+0x9e>
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	2b08      	cmp	r3, #8
 800ed42:	d109      	bne.n	800ed58 <HAL_TIM_PWM_Start+0x58>
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ed4a:	b2db      	uxtb	r3, r3
 800ed4c:	2b01      	cmp	r3, #1
 800ed4e:	bf14      	ite	ne
 800ed50:	2301      	movne	r3, #1
 800ed52:	2300      	moveq	r3, #0
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	e022      	b.n	800ed9e <HAL_TIM_PWM_Start+0x9e>
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	2b0c      	cmp	r3, #12
 800ed5c:	d109      	bne.n	800ed72 <HAL_TIM_PWM_Start+0x72>
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ed64:	b2db      	uxtb	r3, r3
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	bf14      	ite	ne
 800ed6a:	2301      	movne	r3, #1
 800ed6c:	2300      	moveq	r3, #0
 800ed6e:	b2db      	uxtb	r3, r3
 800ed70:	e015      	b.n	800ed9e <HAL_TIM_PWM_Start+0x9e>
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	2b10      	cmp	r3, #16
 800ed76:	d109      	bne.n	800ed8c <HAL_TIM_PWM_Start+0x8c>
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ed7e:	b2db      	uxtb	r3, r3
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	bf14      	ite	ne
 800ed84:	2301      	movne	r3, #1
 800ed86:	2300      	moveq	r3, #0
 800ed88:	b2db      	uxtb	r3, r3
 800ed8a:	e008      	b.n	800ed9e <HAL_TIM_PWM_Start+0x9e>
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed92:	b2db      	uxtb	r3, r3
 800ed94:	2b01      	cmp	r3, #1
 800ed96:	bf14      	ite	ne
 800ed98:	2301      	movne	r3, #1
 800ed9a:	2300      	moveq	r3, #0
 800ed9c:	b2db      	uxtb	r3, r3
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d001      	beq.n	800eda6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800eda2:	2301      	movs	r3, #1
 800eda4:	e0ab      	b.n	800eefe <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d104      	bne.n	800edb6 <HAL_TIM_PWM_Start+0xb6>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2202      	movs	r2, #2
 800edb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800edb4:	e023      	b.n	800edfe <HAL_TIM_PWM_Start+0xfe>
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	2b04      	cmp	r3, #4
 800edba:	d104      	bne.n	800edc6 <HAL_TIM_PWM_Start+0xc6>
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2202      	movs	r2, #2
 800edc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800edc4:	e01b      	b.n	800edfe <HAL_TIM_PWM_Start+0xfe>
 800edc6:	683b      	ldr	r3, [r7, #0]
 800edc8:	2b08      	cmp	r3, #8
 800edca:	d104      	bne.n	800edd6 <HAL_TIM_PWM_Start+0xd6>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2202      	movs	r2, #2
 800edd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800edd4:	e013      	b.n	800edfe <HAL_TIM_PWM_Start+0xfe>
 800edd6:	683b      	ldr	r3, [r7, #0]
 800edd8:	2b0c      	cmp	r3, #12
 800edda:	d104      	bne.n	800ede6 <HAL_TIM_PWM_Start+0xe6>
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2202      	movs	r2, #2
 800ede0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ede4:	e00b      	b.n	800edfe <HAL_TIM_PWM_Start+0xfe>
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	2b10      	cmp	r3, #16
 800edea:	d104      	bne.n	800edf6 <HAL_TIM_PWM_Start+0xf6>
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	2202      	movs	r2, #2
 800edf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800edf4:	e003      	b.n	800edfe <HAL_TIM_PWM_Start+0xfe>
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2202      	movs	r2, #2
 800edfa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	2201      	movs	r2, #1
 800ee04:	6839      	ldr	r1, [r7, #0]
 800ee06:	4618      	mov	r0, r3
 800ee08:	f000 fe78 	bl	800fafc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	4a3d      	ldr	r2, [pc, #244]	; (800ef08 <HAL_TIM_PWM_Start+0x208>)
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d013      	beq.n	800ee3e <HAL_TIM_PWM_Start+0x13e>
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	4a3c      	ldr	r2, [pc, #240]	; (800ef0c <HAL_TIM_PWM_Start+0x20c>)
 800ee1c:	4293      	cmp	r3, r2
 800ee1e:	d00e      	beq.n	800ee3e <HAL_TIM_PWM_Start+0x13e>
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	4a3a      	ldr	r2, [pc, #232]	; (800ef10 <HAL_TIM_PWM_Start+0x210>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d009      	beq.n	800ee3e <HAL_TIM_PWM_Start+0x13e>
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	4a39      	ldr	r2, [pc, #228]	; (800ef14 <HAL_TIM_PWM_Start+0x214>)
 800ee30:	4293      	cmp	r3, r2
 800ee32:	d004      	beq.n	800ee3e <HAL_TIM_PWM_Start+0x13e>
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	4a37      	ldr	r2, [pc, #220]	; (800ef18 <HAL_TIM_PWM_Start+0x218>)
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	d101      	bne.n	800ee42 <HAL_TIM_PWM_Start+0x142>
 800ee3e:	2301      	movs	r3, #1
 800ee40:	e000      	b.n	800ee44 <HAL_TIM_PWM_Start+0x144>
 800ee42:	2300      	movs	r3, #0
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d007      	beq.n	800ee58 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ee56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	4a2a      	ldr	r2, [pc, #168]	; (800ef08 <HAL_TIM_PWM_Start+0x208>)
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d02c      	beq.n	800eebc <HAL_TIM_PWM_Start+0x1bc>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee6a:	d027      	beq.n	800eebc <HAL_TIM_PWM_Start+0x1bc>
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	4a2a      	ldr	r2, [pc, #168]	; (800ef1c <HAL_TIM_PWM_Start+0x21c>)
 800ee72:	4293      	cmp	r3, r2
 800ee74:	d022      	beq.n	800eebc <HAL_TIM_PWM_Start+0x1bc>
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	4a29      	ldr	r2, [pc, #164]	; (800ef20 <HAL_TIM_PWM_Start+0x220>)
 800ee7c:	4293      	cmp	r3, r2
 800ee7e:	d01d      	beq.n	800eebc <HAL_TIM_PWM_Start+0x1bc>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	4a27      	ldr	r2, [pc, #156]	; (800ef24 <HAL_TIM_PWM_Start+0x224>)
 800ee86:	4293      	cmp	r3, r2
 800ee88:	d018      	beq.n	800eebc <HAL_TIM_PWM_Start+0x1bc>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	4a1f      	ldr	r2, [pc, #124]	; (800ef0c <HAL_TIM_PWM_Start+0x20c>)
 800ee90:	4293      	cmp	r3, r2
 800ee92:	d013      	beq.n	800eebc <HAL_TIM_PWM_Start+0x1bc>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	4a23      	ldr	r2, [pc, #140]	; (800ef28 <HAL_TIM_PWM_Start+0x228>)
 800ee9a:	4293      	cmp	r3, r2
 800ee9c:	d00e      	beq.n	800eebc <HAL_TIM_PWM_Start+0x1bc>
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	4a1b      	ldr	r2, [pc, #108]	; (800ef10 <HAL_TIM_PWM_Start+0x210>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d009      	beq.n	800eebc <HAL_TIM_PWM_Start+0x1bc>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	4a1f      	ldr	r2, [pc, #124]	; (800ef2c <HAL_TIM_PWM_Start+0x22c>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d004      	beq.n	800eebc <HAL_TIM_PWM_Start+0x1bc>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	4a1e      	ldr	r2, [pc, #120]	; (800ef30 <HAL_TIM_PWM_Start+0x230>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d115      	bne.n	800eee8 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	689a      	ldr	r2, [r3, #8]
 800eec2:	4b1c      	ldr	r3, [pc, #112]	; (800ef34 <HAL_TIM_PWM_Start+0x234>)
 800eec4:	4013      	ands	r3, r2
 800eec6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eec8:	68fb      	ldr	r3, [r7, #12]
 800eeca:	2b06      	cmp	r3, #6
 800eecc:	d015      	beq.n	800eefa <HAL_TIM_PWM_Start+0x1fa>
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eed4:	d011      	beq.n	800eefa <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	681a      	ldr	r2, [r3, #0]
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	f042 0201 	orr.w	r2, r2, #1
 800eee4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eee6:	e008      	b.n	800eefa <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	681a      	ldr	r2, [r3, #0]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	681b      	ldr	r3, [r3, #0]
 800eef2:	f042 0201 	orr.w	r2, r2, #1
 800eef6:	601a      	str	r2, [r3, #0]
 800eef8:	e000      	b.n	800eefc <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eefa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800eefc:	2300      	movs	r3, #0
}
 800eefe:	4618      	mov	r0, r3
 800ef00:	3710      	adds	r7, #16
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd80      	pop	{r7, pc}
 800ef06:	bf00      	nop
 800ef08:	40010000 	.word	0x40010000
 800ef0c:	40010400 	.word	0x40010400
 800ef10:	40014000 	.word	0x40014000
 800ef14:	40014400 	.word	0x40014400
 800ef18:	40014800 	.word	0x40014800
 800ef1c:	40000400 	.word	0x40000400
 800ef20:	40000800 	.word	0x40000800
 800ef24:	40000c00 	.word	0x40000c00
 800ef28:	40001800 	.word	0x40001800
 800ef2c:	4000e000 	.word	0x4000e000
 800ef30:	4000e400 	.word	0x4000e400
 800ef34:	00010007 	.word	0x00010007

0800ef38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b082      	sub	sp, #8
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	691b      	ldr	r3, [r3, #16]
 800ef46:	f003 0302 	and.w	r3, r3, #2
 800ef4a:	2b02      	cmp	r3, #2
 800ef4c:	d122      	bne.n	800ef94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	68db      	ldr	r3, [r3, #12]
 800ef54:	f003 0302 	and.w	r3, r3, #2
 800ef58:	2b02      	cmp	r3, #2
 800ef5a:	d11b      	bne.n	800ef94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f06f 0202 	mvn.w	r2, #2
 800ef64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2201      	movs	r2, #1
 800ef6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	699b      	ldr	r3, [r3, #24]
 800ef72:	f003 0303 	and.w	r3, r3, #3
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d003      	beq.n	800ef82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ef7a:	6878      	ldr	r0, [r7, #4]
 800ef7c:	f000 fa24 	bl	800f3c8 <HAL_TIM_IC_CaptureCallback>
 800ef80:	e005      	b.n	800ef8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f000 fa16 	bl	800f3b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ef88:	6878      	ldr	r0, [r7, #4]
 800ef8a:	f000 fa27 	bl	800f3dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2200      	movs	r2, #0
 800ef92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	691b      	ldr	r3, [r3, #16]
 800ef9a:	f003 0304 	and.w	r3, r3, #4
 800ef9e:	2b04      	cmp	r3, #4
 800efa0:	d122      	bne.n	800efe8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	68db      	ldr	r3, [r3, #12]
 800efa8:	f003 0304 	and.w	r3, r3, #4
 800efac:	2b04      	cmp	r3, #4
 800efae:	d11b      	bne.n	800efe8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	f06f 0204 	mvn.w	r2, #4
 800efb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2202      	movs	r2, #2
 800efbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	699b      	ldr	r3, [r3, #24]
 800efc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d003      	beq.n	800efd6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800efce:	6878      	ldr	r0, [r7, #4]
 800efd0:	f000 f9fa 	bl	800f3c8 <HAL_TIM_IC_CaptureCallback>
 800efd4:	e005      	b.n	800efe2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800efd6:	6878      	ldr	r0, [r7, #4]
 800efd8:	f000 f9ec 	bl	800f3b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f000 f9fd 	bl	800f3dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2200      	movs	r2, #0
 800efe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	691b      	ldr	r3, [r3, #16]
 800efee:	f003 0308 	and.w	r3, r3, #8
 800eff2:	2b08      	cmp	r3, #8
 800eff4:	d122      	bne.n	800f03c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	f003 0308 	and.w	r3, r3, #8
 800f000:	2b08      	cmp	r3, #8
 800f002:	d11b      	bne.n	800f03c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	f06f 0208 	mvn.w	r2, #8
 800f00c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2204      	movs	r2, #4
 800f012:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	681b      	ldr	r3, [r3, #0]
 800f018:	69db      	ldr	r3, [r3, #28]
 800f01a:	f003 0303 	and.w	r3, r3, #3
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d003      	beq.n	800f02a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f022:	6878      	ldr	r0, [r7, #4]
 800f024:	f000 f9d0 	bl	800f3c8 <HAL_TIM_IC_CaptureCallback>
 800f028:	e005      	b.n	800f036 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f02a:	6878      	ldr	r0, [r7, #4]
 800f02c:	f000 f9c2 	bl	800f3b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f000 f9d3 	bl	800f3dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2200      	movs	r2, #0
 800f03a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	691b      	ldr	r3, [r3, #16]
 800f042:	f003 0310 	and.w	r3, r3, #16
 800f046:	2b10      	cmp	r3, #16
 800f048:	d122      	bne.n	800f090 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	f003 0310 	and.w	r3, r3, #16
 800f054:	2b10      	cmp	r3, #16
 800f056:	d11b      	bne.n	800f090 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	f06f 0210 	mvn.w	r2, #16
 800f060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	2208      	movs	r2, #8
 800f066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	69db      	ldr	r3, [r3, #28]
 800f06e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f072:	2b00      	cmp	r3, #0
 800f074:	d003      	beq.n	800f07e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	f000 f9a6 	bl	800f3c8 <HAL_TIM_IC_CaptureCallback>
 800f07c:	e005      	b.n	800f08a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f07e:	6878      	ldr	r0, [r7, #4]
 800f080:	f000 f998 	bl	800f3b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f084:	6878      	ldr	r0, [r7, #4]
 800f086:	f000 f9a9 	bl	800f3dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	2200      	movs	r2, #0
 800f08e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	691b      	ldr	r3, [r3, #16]
 800f096:	f003 0301 	and.w	r3, r3, #1
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	d10e      	bne.n	800f0bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	f003 0301 	and.w	r3, r3, #1
 800f0a8:	2b01      	cmp	r3, #1
 800f0aa:	d107      	bne.n	800f0bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	f06f 0201 	mvn.w	r2, #1
 800f0b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f000 f972 	bl	800f3a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	691b      	ldr	r3, [r3, #16]
 800f0c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0c6:	2b80      	cmp	r3, #128	; 0x80
 800f0c8:	d10e      	bne.n	800f0e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	68db      	ldr	r3, [r3, #12]
 800f0d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f0d4:	2b80      	cmp	r3, #128	; 0x80
 800f0d6:	d107      	bne.n	800f0e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f0e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f0e2:	6878      	ldr	r0, [r7, #4]
 800f0e4:	f000 fdd6 	bl	800fc94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	691b      	ldr	r3, [r3, #16]
 800f0ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f0f6:	d10e      	bne.n	800f116 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	68db      	ldr	r3, [r3, #12]
 800f0fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f102:	2b80      	cmp	r3, #128	; 0x80
 800f104:	d107      	bne.n	800f116 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f10e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f110:	6878      	ldr	r0, [r7, #4]
 800f112:	f000 fdc9 	bl	800fca8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	691b      	ldr	r3, [r3, #16]
 800f11c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f120:	2b40      	cmp	r3, #64	; 0x40
 800f122:	d10e      	bne.n	800f142 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	68db      	ldr	r3, [r3, #12]
 800f12a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f12e:	2b40      	cmp	r3, #64	; 0x40
 800f130:	d107      	bne.n	800f142 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f13a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f000 f957 	bl	800f3f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	691b      	ldr	r3, [r3, #16]
 800f148:	f003 0320 	and.w	r3, r3, #32
 800f14c:	2b20      	cmp	r3, #32
 800f14e:	d10e      	bne.n	800f16e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	68db      	ldr	r3, [r3, #12]
 800f156:	f003 0320 	and.w	r3, r3, #32
 800f15a:	2b20      	cmp	r3, #32
 800f15c:	d107      	bne.n	800f16e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	f06f 0220 	mvn.w	r2, #32
 800f166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f168:	6878      	ldr	r0, [r7, #4]
 800f16a:	f000 fd89 	bl	800fc80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f16e:	bf00      	nop
 800f170:	3708      	adds	r7, #8
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
	...

0800f178 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b086      	sub	sp, #24
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	60f8      	str	r0, [r7, #12]
 800f180:	60b9      	str	r1, [r7, #8]
 800f182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f184:	2300      	movs	r3, #0
 800f186:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f18e:	2b01      	cmp	r3, #1
 800f190:	d101      	bne.n	800f196 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f192:	2302      	movs	r3, #2
 800f194:	e0ff      	b.n	800f396 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	2201      	movs	r2, #1
 800f19a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	2b14      	cmp	r3, #20
 800f1a2:	f200 80f0 	bhi.w	800f386 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800f1a6:	a201      	add	r2, pc, #4	; (adr r2, 800f1ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ac:	0800f201 	.word	0x0800f201
 800f1b0:	0800f387 	.word	0x0800f387
 800f1b4:	0800f387 	.word	0x0800f387
 800f1b8:	0800f387 	.word	0x0800f387
 800f1bc:	0800f241 	.word	0x0800f241
 800f1c0:	0800f387 	.word	0x0800f387
 800f1c4:	0800f387 	.word	0x0800f387
 800f1c8:	0800f387 	.word	0x0800f387
 800f1cc:	0800f283 	.word	0x0800f283
 800f1d0:	0800f387 	.word	0x0800f387
 800f1d4:	0800f387 	.word	0x0800f387
 800f1d8:	0800f387 	.word	0x0800f387
 800f1dc:	0800f2c3 	.word	0x0800f2c3
 800f1e0:	0800f387 	.word	0x0800f387
 800f1e4:	0800f387 	.word	0x0800f387
 800f1e8:	0800f387 	.word	0x0800f387
 800f1ec:	0800f305 	.word	0x0800f305
 800f1f0:	0800f387 	.word	0x0800f387
 800f1f4:	0800f387 	.word	0x0800f387
 800f1f8:	0800f387 	.word	0x0800f387
 800f1fc:	0800f345 	.word	0x0800f345
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	68b9      	ldr	r1, [r7, #8]
 800f206:	4618      	mov	r0, r3
 800f208:	f000 f9a2 	bl	800f550 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	699a      	ldr	r2, [r3, #24]
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f042 0208 	orr.w	r2, r2, #8
 800f21a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	699a      	ldr	r2, [r3, #24]
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f022 0204 	bic.w	r2, r2, #4
 800f22a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	6999      	ldr	r1, [r3, #24]
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	691a      	ldr	r2, [r3, #16]
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	430a      	orrs	r2, r1
 800f23c:	619a      	str	r2, [r3, #24]
      break;
 800f23e:	e0a5      	b.n	800f38c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	68b9      	ldr	r1, [r7, #8]
 800f246:	4618      	mov	r0, r3
 800f248:	f000 fa12 	bl	800f670 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	699a      	ldr	r2, [r3, #24]
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f25a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	699a      	ldr	r2, [r3, #24]
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f26a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	6999      	ldr	r1, [r3, #24]
 800f272:	68bb      	ldr	r3, [r7, #8]
 800f274:	691b      	ldr	r3, [r3, #16]
 800f276:	021a      	lsls	r2, r3, #8
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	681b      	ldr	r3, [r3, #0]
 800f27c:	430a      	orrs	r2, r1
 800f27e:	619a      	str	r2, [r3, #24]
      break;
 800f280:	e084      	b.n	800f38c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	68b9      	ldr	r1, [r7, #8]
 800f288:	4618      	mov	r0, r3
 800f28a:	f000 fa7b 	bl	800f784 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	69da      	ldr	r2, [r3, #28]
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f042 0208 	orr.w	r2, r2, #8
 800f29c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	69da      	ldr	r2, [r3, #28]
 800f2a4:	68fb      	ldr	r3, [r7, #12]
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	f022 0204 	bic.w	r2, r2, #4
 800f2ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	69d9      	ldr	r1, [r3, #28]
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	691a      	ldr	r2, [r3, #16]
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	430a      	orrs	r2, r1
 800f2be:	61da      	str	r2, [r3, #28]
      break;
 800f2c0:	e064      	b.n	800f38c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	68b9      	ldr	r1, [r7, #8]
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	f000 fae3 	bl	800f894 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f2ce:	68fb      	ldr	r3, [r7, #12]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	69da      	ldr	r2, [r3, #28]
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f2dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	69da      	ldr	r2, [r3, #28]
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f2ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	69d9      	ldr	r1, [r3, #28]
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	691b      	ldr	r3, [r3, #16]
 800f2f8:	021a      	lsls	r2, r3, #8
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	430a      	orrs	r2, r1
 800f300:	61da      	str	r2, [r3, #28]
      break;
 800f302:	e043      	b.n	800f38c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	68b9      	ldr	r1, [r7, #8]
 800f30a:	4618      	mov	r0, r3
 800f30c:	f000 fb2c 	bl	800f968 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f316:	68fb      	ldr	r3, [r7, #12]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f042 0208 	orr.w	r2, r2, #8
 800f31e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	f022 0204 	bic.w	r2, r2, #4
 800f32e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	691a      	ldr	r2, [r3, #16]
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	430a      	orrs	r2, r1
 800f340:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f342:	e023      	b.n	800f38c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	68b9      	ldr	r1, [r7, #8]
 800f34a:	4618      	mov	r0, r3
 800f34c:	f000 fb70 	bl	800fa30 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f35e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f36e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	691b      	ldr	r3, [r3, #16]
 800f37a:	021a      	lsls	r2, r3, #8
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	430a      	orrs	r2, r1
 800f382:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f384:	e002      	b.n	800f38c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800f386:	2301      	movs	r3, #1
 800f388:	75fb      	strb	r3, [r7, #23]
      break;
 800f38a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	2200      	movs	r2, #0
 800f390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f394:	7dfb      	ldrb	r3, [r7, #23]
}
 800f396:	4618      	mov	r0, r3
 800f398:	3718      	adds	r7, #24
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}
 800f39e:	bf00      	nop

0800f3a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f3a0:	b480      	push	{r7}
 800f3a2:	b083      	sub	sp, #12
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800f3a8:	bf00      	nop
 800f3aa:	370c      	adds	r7, #12
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b2:	4770      	bx	lr

0800f3b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f3b4:	b480      	push	{r7}
 800f3b6:	b083      	sub	sp, #12
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f3bc:	bf00      	nop
 800f3be:	370c      	adds	r7, #12
 800f3c0:	46bd      	mov	sp, r7
 800f3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3c6:	4770      	bx	lr

0800f3c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f3c8:	b480      	push	{r7}
 800f3ca:	b083      	sub	sp, #12
 800f3cc:	af00      	add	r7, sp, #0
 800f3ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f3d0:	bf00      	nop
 800f3d2:	370c      	adds	r7, #12
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr

0800f3dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f3dc:	b480      	push	{r7}
 800f3de:	b083      	sub	sp, #12
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f3e4:	bf00      	nop
 800f3e6:	370c      	adds	r7, #12
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ee:	4770      	bx	lr

0800f3f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	b083      	sub	sp, #12
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f3f8:	bf00      	nop
 800f3fa:	370c      	adds	r7, #12
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f402:	4770      	bx	lr

0800f404 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f404:	b480      	push	{r7}
 800f406:	b085      	sub	sp, #20
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
 800f40c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	4a44      	ldr	r2, [pc, #272]	; (800f528 <TIM_Base_SetConfig+0x124>)
 800f418:	4293      	cmp	r3, r2
 800f41a:	d013      	beq.n	800f444 <TIM_Base_SetConfig+0x40>
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f422:	d00f      	beq.n	800f444 <TIM_Base_SetConfig+0x40>
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	4a41      	ldr	r2, [pc, #260]	; (800f52c <TIM_Base_SetConfig+0x128>)
 800f428:	4293      	cmp	r3, r2
 800f42a:	d00b      	beq.n	800f444 <TIM_Base_SetConfig+0x40>
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	4a40      	ldr	r2, [pc, #256]	; (800f530 <TIM_Base_SetConfig+0x12c>)
 800f430:	4293      	cmp	r3, r2
 800f432:	d007      	beq.n	800f444 <TIM_Base_SetConfig+0x40>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	4a3f      	ldr	r2, [pc, #252]	; (800f534 <TIM_Base_SetConfig+0x130>)
 800f438:	4293      	cmp	r3, r2
 800f43a:	d003      	beq.n	800f444 <TIM_Base_SetConfig+0x40>
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	4a3e      	ldr	r2, [pc, #248]	; (800f538 <TIM_Base_SetConfig+0x134>)
 800f440:	4293      	cmp	r3, r2
 800f442:	d108      	bne.n	800f456 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f44a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	685b      	ldr	r3, [r3, #4]
 800f450:	68fa      	ldr	r2, [r7, #12]
 800f452:	4313      	orrs	r3, r2
 800f454:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	4a33      	ldr	r2, [pc, #204]	; (800f528 <TIM_Base_SetConfig+0x124>)
 800f45a:	4293      	cmp	r3, r2
 800f45c:	d027      	beq.n	800f4ae <TIM_Base_SetConfig+0xaa>
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f464:	d023      	beq.n	800f4ae <TIM_Base_SetConfig+0xaa>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	4a30      	ldr	r2, [pc, #192]	; (800f52c <TIM_Base_SetConfig+0x128>)
 800f46a:	4293      	cmp	r3, r2
 800f46c:	d01f      	beq.n	800f4ae <TIM_Base_SetConfig+0xaa>
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	4a2f      	ldr	r2, [pc, #188]	; (800f530 <TIM_Base_SetConfig+0x12c>)
 800f472:	4293      	cmp	r3, r2
 800f474:	d01b      	beq.n	800f4ae <TIM_Base_SetConfig+0xaa>
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	4a2e      	ldr	r2, [pc, #184]	; (800f534 <TIM_Base_SetConfig+0x130>)
 800f47a:	4293      	cmp	r3, r2
 800f47c:	d017      	beq.n	800f4ae <TIM_Base_SetConfig+0xaa>
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	4a2d      	ldr	r2, [pc, #180]	; (800f538 <TIM_Base_SetConfig+0x134>)
 800f482:	4293      	cmp	r3, r2
 800f484:	d013      	beq.n	800f4ae <TIM_Base_SetConfig+0xaa>
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	4a2c      	ldr	r2, [pc, #176]	; (800f53c <TIM_Base_SetConfig+0x138>)
 800f48a:	4293      	cmp	r3, r2
 800f48c:	d00f      	beq.n	800f4ae <TIM_Base_SetConfig+0xaa>
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	4a2b      	ldr	r2, [pc, #172]	; (800f540 <TIM_Base_SetConfig+0x13c>)
 800f492:	4293      	cmp	r3, r2
 800f494:	d00b      	beq.n	800f4ae <TIM_Base_SetConfig+0xaa>
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	4a2a      	ldr	r2, [pc, #168]	; (800f544 <TIM_Base_SetConfig+0x140>)
 800f49a:	4293      	cmp	r3, r2
 800f49c:	d007      	beq.n	800f4ae <TIM_Base_SetConfig+0xaa>
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	4a29      	ldr	r2, [pc, #164]	; (800f548 <TIM_Base_SetConfig+0x144>)
 800f4a2:	4293      	cmp	r3, r2
 800f4a4:	d003      	beq.n	800f4ae <TIM_Base_SetConfig+0xaa>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	4a28      	ldr	r2, [pc, #160]	; (800f54c <TIM_Base_SetConfig+0x148>)
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	d108      	bne.n	800f4c0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f4b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	68db      	ldr	r3, [r3, #12]
 800f4ba:	68fa      	ldr	r2, [r7, #12]
 800f4bc:	4313      	orrs	r3, r2
 800f4be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	695b      	ldr	r3, [r3, #20]
 800f4ca:	4313      	orrs	r3, r2
 800f4cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	689a      	ldr	r2, [r3, #8]
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f4dc:	683b      	ldr	r3, [r7, #0]
 800f4de:	681a      	ldr	r2, [r3, #0]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	4a10      	ldr	r2, [pc, #64]	; (800f528 <TIM_Base_SetConfig+0x124>)
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d00f      	beq.n	800f50c <TIM_Base_SetConfig+0x108>
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	4a12      	ldr	r2, [pc, #72]	; (800f538 <TIM_Base_SetConfig+0x134>)
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	d00b      	beq.n	800f50c <TIM_Base_SetConfig+0x108>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	4a11      	ldr	r2, [pc, #68]	; (800f53c <TIM_Base_SetConfig+0x138>)
 800f4f8:	4293      	cmp	r3, r2
 800f4fa:	d007      	beq.n	800f50c <TIM_Base_SetConfig+0x108>
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	4a10      	ldr	r2, [pc, #64]	; (800f540 <TIM_Base_SetConfig+0x13c>)
 800f500:	4293      	cmp	r3, r2
 800f502:	d003      	beq.n	800f50c <TIM_Base_SetConfig+0x108>
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	4a0f      	ldr	r2, [pc, #60]	; (800f544 <TIM_Base_SetConfig+0x140>)
 800f508:	4293      	cmp	r3, r2
 800f50a:	d103      	bne.n	800f514 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	691a      	ldr	r2, [r3, #16]
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2201      	movs	r2, #1
 800f518:	615a      	str	r2, [r3, #20]
}
 800f51a:	bf00      	nop
 800f51c:	3714      	adds	r7, #20
 800f51e:	46bd      	mov	sp, r7
 800f520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f524:	4770      	bx	lr
 800f526:	bf00      	nop
 800f528:	40010000 	.word	0x40010000
 800f52c:	40000400 	.word	0x40000400
 800f530:	40000800 	.word	0x40000800
 800f534:	40000c00 	.word	0x40000c00
 800f538:	40010400 	.word	0x40010400
 800f53c:	40014000 	.word	0x40014000
 800f540:	40014400 	.word	0x40014400
 800f544:	40014800 	.word	0x40014800
 800f548:	4000e000 	.word	0x4000e000
 800f54c:	4000e400 	.word	0x4000e400

0800f550 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f550:	b480      	push	{r7}
 800f552:	b087      	sub	sp, #28
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
 800f558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	6a1b      	ldr	r3, [r3, #32]
 800f55e:	f023 0201 	bic.w	r2, r3, #1
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6a1b      	ldr	r3, [r3, #32]
 800f56a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	685b      	ldr	r3, [r3, #4]
 800f570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	699b      	ldr	r3, [r3, #24]
 800f576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f578:	68fa      	ldr	r2, [r7, #12]
 800f57a:	4b37      	ldr	r3, [pc, #220]	; (800f658 <TIM_OC1_SetConfig+0x108>)
 800f57c:	4013      	ands	r3, r2
 800f57e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	f023 0303 	bic.w	r3, r3, #3
 800f586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f588:	683b      	ldr	r3, [r7, #0]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	68fa      	ldr	r2, [r7, #12]
 800f58e:	4313      	orrs	r3, r2
 800f590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	f023 0302 	bic.w	r3, r3, #2
 800f598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	689b      	ldr	r3, [r3, #8]
 800f59e:	697a      	ldr	r2, [r7, #20]
 800f5a0:	4313      	orrs	r3, r2
 800f5a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	4a2d      	ldr	r2, [pc, #180]	; (800f65c <TIM_OC1_SetConfig+0x10c>)
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	d00f      	beq.n	800f5cc <TIM_OC1_SetConfig+0x7c>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	4a2c      	ldr	r2, [pc, #176]	; (800f660 <TIM_OC1_SetConfig+0x110>)
 800f5b0:	4293      	cmp	r3, r2
 800f5b2:	d00b      	beq.n	800f5cc <TIM_OC1_SetConfig+0x7c>
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	4a2b      	ldr	r2, [pc, #172]	; (800f664 <TIM_OC1_SetConfig+0x114>)
 800f5b8:	4293      	cmp	r3, r2
 800f5ba:	d007      	beq.n	800f5cc <TIM_OC1_SetConfig+0x7c>
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	4a2a      	ldr	r2, [pc, #168]	; (800f668 <TIM_OC1_SetConfig+0x118>)
 800f5c0:	4293      	cmp	r3, r2
 800f5c2:	d003      	beq.n	800f5cc <TIM_OC1_SetConfig+0x7c>
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	4a29      	ldr	r2, [pc, #164]	; (800f66c <TIM_OC1_SetConfig+0x11c>)
 800f5c8:	4293      	cmp	r3, r2
 800f5ca:	d10c      	bne.n	800f5e6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	f023 0308 	bic.w	r3, r3, #8
 800f5d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	68db      	ldr	r3, [r3, #12]
 800f5d8:	697a      	ldr	r2, [r7, #20]
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	f023 0304 	bic.w	r3, r3, #4
 800f5e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	4a1c      	ldr	r2, [pc, #112]	; (800f65c <TIM_OC1_SetConfig+0x10c>)
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d00f      	beq.n	800f60e <TIM_OC1_SetConfig+0xbe>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	4a1b      	ldr	r2, [pc, #108]	; (800f660 <TIM_OC1_SetConfig+0x110>)
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d00b      	beq.n	800f60e <TIM_OC1_SetConfig+0xbe>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	4a1a      	ldr	r2, [pc, #104]	; (800f664 <TIM_OC1_SetConfig+0x114>)
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	d007      	beq.n	800f60e <TIM_OC1_SetConfig+0xbe>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	4a19      	ldr	r2, [pc, #100]	; (800f668 <TIM_OC1_SetConfig+0x118>)
 800f602:	4293      	cmp	r3, r2
 800f604:	d003      	beq.n	800f60e <TIM_OC1_SetConfig+0xbe>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	4a18      	ldr	r2, [pc, #96]	; (800f66c <TIM_OC1_SetConfig+0x11c>)
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d111      	bne.n	800f632 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f614:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f61c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	695b      	ldr	r3, [r3, #20]
 800f622:	693a      	ldr	r2, [r7, #16]
 800f624:	4313      	orrs	r3, r2
 800f626:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	699b      	ldr	r3, [r3, #24]
 800f62c:	693a      	ldr	r2, [r7, #16]
 800f62e:	4313      	orrs	r3, r2
 800f630:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	693a      	ldr	r2, [r7, #16]
 800f636:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	68fa      	ldr	r2, [r7, #12]
 800f63c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	685a      	ldr	r2, [r3, #4]
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	697a      	ldr	r2, [r7, #20]
 800f64a:	621a      	str	r2, [r3, #32]
}
 800f64c:	bf00      	nop
 800f64e:	371c      	adds	r7, #28
 800f650:	46bd      	mov	sp, r7
 800f652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f656:	4770      	bx	lr
 800f658:	fffeff8f 	.word	0xfffeff8f
 800f65c:	40010000 	.word	0x40010000
 800f660:	40010400 	.word	0x40010400
 800f664:	40014000 	.word	0x40014000
 800f668:	40014400 	.word	0x40014400
 800f66c:	40014800 	.word	0x40014800

0800f670 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f670:	b480      	push	{r7}
 800f672:	b087      	sub	sp, #28
 800f674:	af00      	add	r7, sp, #0
 800f676:	6078      	str	r0, [r7, #4]
 800f678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	6a1b      	ldr	r3, [r3, #32]
 800f67e:	f023 0210 	bic.w	r2, r3, #16
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6a1b      	ldr	r3, [r3, #32]
 800f68a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	685b      	ldr	r3, [r3, #4]
 800f690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	699b      	ldr	r3, [r3, #24]
 800f696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f698:	68fa      	ldr	r2, [r7, #12]
 800f69a:	4b34      	ldr	r3, [pc, #208]	; (800f76c <TIM_OC2_SetConfig+0xfc>)
 800f69c:	4013      	ands	r3, r2
 800f69e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f6a8:	683b      	ldr	r3, [r7, #0]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	021b      	lsls	r3, r3, #8
 800f6ae:	68fa      	ldr	r2, [r7, #12]
 800f6b0:	4313      	orrs	r3, r2
 800f6b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f6b4:	697b      	ldr	r3, [r7, #20]
 800f6b6:	f023 0320 	bic.w	r3, r3, #32
 800f6ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	689b      	ldr	r3, [r3, #8]
 800f6c0:	011b      	lsls	r3, r3, #4
 800f6c2:	697a      	ldr	r2, [r7, #20]
 800f6c4:	4313      	orrs	r3, r2
 800f6c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	4a29      	ldr	r2, [pc, #164]	; (800f770 <TIM_OC2_SetConfig+0x100>)
 800f6cc:	4293      	cmp	r3, r2
 800f6ce:	d003      	beq.n	800f6d8 <TIM_OC2_SetConfig+0x68>
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	4a28      	ldr	r2, [pc, #160]	; (800f774 <TIM_OC2_SetConfig+0x104>)
 800f6d4:	4293      	cmp	r3, r2
 800f6d6:	d10d      	bne.n	800f6f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f6d8:	697b      	ldr	r3, [r7, #20]
 800f6da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f6de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f6e0:	683b      	ldr	r3, [r7, #0]
 800f6e2:	68db      	ldr	r3, [r3, #12]
 800f6e4:	011b      	lsls	r3, r3, #4
 800f6e6:	697a      	ldr	r2, [r7, #20]
 800f6e8:	4313      	orrs	r3, r2
 800f6ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f6ec:	697b      	ldr	r3, [r7, #20]
 800f6ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f6f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	4a1e      	ldr	r2, [pc, #120]	; (800f770 <TIM_OC2_SetConfig+0x100>)
 800f6f8:	4293      	cmp	r3, r2
 800f6fa:	d00f      	beq.n	800f71c <TIM_OC2_SetConfig+0xac>
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	4a1d      	ldr	r2, [pc, #116]	; (800f774 <TIM_OC2_SetConfig+0x104>)
 800f700:	4293      	cmp	r3, r2
 800f702:	d00b      	beq.n	800f71c <TIM_OC2_SetConfig+0xac>
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	4a1c      	ldr	r2, [pc, #112]	; (800f778 <TIM_OC2_SetConfig+0x108>)
 800f708:	4293      	cmp	r3, r2
 800f70a:	d007      	beq.n	800f71c <TIM_OC2_SetConfig+0xac>
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	4a1b      	ldr	r2, [pc, #108]	; (800f77c <TIM_OC2_SetConfig+0x10c>)
 800f710:	4293      	cmp	r3, r2
 800f712:	d003      	beq.n	800f71c <TIM_OC2_SetConfig+0xac>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	4a1a      	ldr	r2, [pc, #104]	; (800f780 <TIM_OC2_SetConfig+0x110>)
 800f718:	4293      	cmp	r3, r2
 800f71a:	d113      	bne.n	800f744 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f71c:	693b      	ldr	r3, [r7, #16]
 800f71e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f722:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f724:	693b      	ldr	r3, [r7, #16]
 800f726:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f72a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	695b      	ldr	r3, [r3, #20]
 800f730:	009b      	lsls	r3, r3, #2
 800f732:	693a      	ldr	r2, [r7, #16]
 800f734:	4313      	orrs	r3, r2
 800f736:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f738:	683b      	ldr	r3, [r7, #0]
 800f73a:	699b      	ldr	r3, [r3, #24]
 800f73c:	009b      	lsls	r3, r3, #2
 800f73e:	693a      	ldr	r2, [r7, #16]
 800f740:	4313      	orrs	r3, r2
 800f742:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	693a      	ldr	r2, [r7, #16]
 800f748:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	68fa      	ldr	r2, [r7, #12]
 800f74e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	685a      	ldr	r2, [r3, #4]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	697a      	ldr	r2, [r7, #20]
 800f75c:	621a      	str	r2, [r3, #32]
}
 800f75e:	bf00      	nop
 800f760:	371c      	adds	r7, #28
 800f762:	46bd      	mov	sp, r7
 800f764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f768:	4770      	bx	lr
 800f76a:	bf00      	nop
 800f76c:	feff8fff 	.word	0xfeff8fff
 800f770:	40010000 	.word	0x40010000
 800f774:	40010400 	.word	0x40010400
 800f778:	40014000 	.word	0x40014000
 800f77c:	40014400 	.word	0x40014400
 800f780:	40014800 	.word	0x40014800

0800f784 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f784:	b480      	push	{r7}
 800f786:	b087      	sub	sp, #28
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
 800f78c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6a1b      	ldr	r3, [r3, #32]
 800f792:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	6a1b      	ldr	r3, [r3, #32]
 800f79e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	685b      	ldr	r3, [r3, #4]
 800f7a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	69db      	ldr	r3, [r3, #28]
 800f7aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f7ac:	68fa      	ldr	r2, [r7, #12]
 800f7ae:	4b33      	ldr	r3, [pc, #204]	; (800f87c <TIM_OC3_SetConfig+0xf8>)
 800f7b0:	4013      	ands	r3, r2
 800f7b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	f023 0303 	bic.w	r3, r3, #3
 800f7ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f7bc:	683b      	ldr	r3, [r7, #0]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	68fa      	ldr	r2, [r7, #12]
 800f7c2:	4313      	orrs	r3, r2
 800f7c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f7c6:	697b      	ldr	r3, [r7, #20]
 800f7c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f7cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	689b      	ldr	r3, [r3, #8]
 800f7d2:	021b      	lsls	r3, r3, #8
 800f7d4:	697a      	ldr	r2, [r7, #20]
 800f7d6:	4313      	orrs	r3, r2
 800f7d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	4a28      	ldr	r2, [pc, #160]	; (800f880 <TIM_OC3_SetConfig+0xfc>)
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	d003      	beq.n	800f7ea <TIM_OC3_SetConfig+0x66>
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	4a27      	ldr	r2, [pc, #156]	; (800f884 <TIM_OC3_SetConfig+0x100>)
 800f7e6:	4293      	cmp	r3, r2
 800f7e8:	d10d      	bne.n	800f806 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f7ea:	697b      	ldr	r3, [r7, #20]
 800f7ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f7f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f7f2:	683b      	ldr	r3, [r7, #0]
 800f7f4:	68db      	ldr	r3, [r3, #12]
 800f7f6:	021b      	lsls	r3, r3, #8
 800f7f8:	697a      	ldr	r2, [r7, #20]
 800f7fa:	4313      	orrs	r3, r2
 800f7fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f7fe:	697b      	ldr	r3, [r7, #20]
 800f800:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f804:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	4a1d      	ldr	r2, [pc, #116]	; (800f880 <TIM_OC3_SetConfig+0xfc>)
 800f80a:	4293      	cmp	r3, r2
 800f80c:	d00f      	beq.n	800f82e <TIM_OC3_SetConfig+0xaa>
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	4a1c      	ldr	r2, [pc, #112]	; (800f884 <TIM_OC3_SetConfig+0x100>)
 800f812:	4293      	cmp	r3, r2
 800f814:	d00b      	beq.n	800f82e <TIM_OC3_SetConfig+0xaa>
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4a1b      	ldr	r2, [pc, #108]	; (800f888 <TIM_OC3_SetConfig+0x104>)
 800f81a:	4293      	cmp	r3, r2
 800f81c:	d007      	beq.n	800f82e <TIM_OC3_SetConfig+0xaa>
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	4a1a      	ldr	r2, [pc, #104]	; (800f88c <TIM_OC3_SetConfig+0x108>)
 800f822:	4293      	cmp	r3, r2
 800f824:	d003      	beq.n	800f82e <TIM_OC3_SetConfig+0xaa>
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	4a19      	ldr	r2, [pc, #100]	; (800f890 <TIM_OC3_SetConfig+0x10c>)
 800f82a:	4293      	cmp	r3, r2
 800f82c:	d113      	bne.n	800f856 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f82e:	693b      	ldr	r3, [r7, #16]
 800f830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f836:	693b      	ldr	r3, [r7, #16]
 800f838:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f83c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f83e:	683b      	ldr	r3, [r7, #0]
 800f840:	695b      	ldr	r3, [r3, #20]
 800f842:	011b      	lsls	r3, r3, #4
 800f844:	693a      	ldr	r2, [r7, #16]
 800f846:	4313      	orrs	r3, r2
 800f848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f84a:	683b      	ldr	r3, [r7, #0]
 800f84c:	699b      	ldr	r3, [r3, #24]
 800f84e:	011b      	lsls	r3, r3, #4
 800f850:	693a      	ldr	r2, [r7, #16]
 800f852:	4313      	orrs	r3, r2
 800f854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	693a      	ldr	r2, [r7, #16]
 800f85a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	68fa      	ldr	r2, [r7, #12]
 800f860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	685a      	ldr	r2, [r3, #4]
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	697a      	ldr	r2, [r7, #20]
 800f86e:	621a      	str	r2, [r3, #32]
}
 800f870:	bf00      	nop
 800f872:	371c      	adds	r7, #28
 800f874:	46bd      	mov	sp, r7
 800f876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f87a:	4770      	bx	lr
 800f87c:	fffeff8f 	.word	0xfffeff8f
 800f880:	40010000 	.word	0x40010000
 800f884:	40010400 	.word	0x40010400
 800f888:	40014000 	.word	0x40014000
 800f88c:	40014400 	.word	0x40014400
 800f890:	40014800 	.word	0x40014800

0800f894 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f894:	b480      	push	{r7}
 800f896:	b087      	sub	sp, #28
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6a1b      	ldr	r3, [r3, #32]
 800f8a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	6a1b      	ldr	r3, [r3, #32]
 800f8ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	685b      	ldr	r3, [r3, #4]
 800f8b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	69db      	ldr	r3, [r3, #28]
 800f8ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f8bc:	68fa      	ldr	r2, [r7, #12]
 800f8be:	4b24      	ldr	r3, [pc, #144]	; (800f950 <TIM_OC4_SetConfig+0xbc>)
 800f8c0:	4013      	ands	r3, r2
 800f8c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	021b      	lsls	r3, r3, #8
 800f8d2:	68fa      	ldr	r2, [r7, #12]
 800f8d4:	4313      	orrs	r3, r2
 800f8d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f8d8:	693b      	ldr	r3, [r7, #16]
 800f8da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f8de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	689b      	ldr	r3, [r3, #8]
 800f8e4:	031b      	lsls	r3, r3, #12
 800f8e6:	693a      	ldr	r2, [r7, #16]
 800f8e8:	4313      	orrs	r3, r2
 800f8ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	4a19      	ldr	r2, [pc, #100]	; (800f954 <TIM_OC4_SetConfig+0xc0>)
 800f8f0:	4293      	cmp	r3, r2
 800f8f2:	d00f      	beq.n	800f914 <TIM_OC4_SetConfig+0x80>
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	4a18      	ldr	r2, [pc, #96]	; (800f958 <TIM_OC4_SetConfig+0xc4>)
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d00b      	beq.n	800f914 <TIM_OC4_SetConfig+0x80>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	4a17      	ldr	r2, [pc, #92]	; (800f95c <TIM_OC4_SetConfig+0xc8>)
 800f900:	4293      	cmp	r3, r2
 800f902:	d007      	beq.n	800f914 <TIM_OC4_SetConfig+0x80>
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	4a16      	ldr	r2, [pc, #88]	; (800f960 <TIM_OC4_SetConfig+0xcc>)
 800f908:	4293      	cmp	r3, r2
 800f90a:	d003      	beq.n	800f914 <TIM_OC4_SetConfig+0x80>
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	4a15      	ldr	r2, [pc, #84]	; (800f964 <TIM_OC4_SetConfig+0xd0>)
 800f910:	4293      	cmp	r3, r2
 800f912:	d109      	bne.n	800f928 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f914:	697b      	ldr	r3, [r7, #20]
 800f916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f91a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f91c:	683b      	ldr	r3, [r7, #0]
 800f91e:	695b      	ldr	r3, [r3, #20]
 800f920:	019b      	lsls	r3, r3, #6
 800f922:	697a      	ldr	r2, [r7, #20]
 800f924:	4313      	orrs	r3, r2
 800f926:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	697a      	ldr	r2, [r7, #20]
 800f92c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	68fa      	ldr	r2, [r7, #12]
 800f932:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	685a      	ldr	r2, [r3, #4]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f93c:	687b      	ldr	r3, [r7, #4]
 800f93e:	693a      	ldr	r2, [r7, #16]
 800f940:	621a      	str	r2, [r3, #32]
}
 800f942:	bf00      	nop
 800f944:	371c      	adds	r7, #28
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr
 800f94e:	bf00      	nop
 800f950:	feff8fff 	.word	0xfeff8fff
 800f954:	40010000 	.word	0x40010000
 800f958:	40010400 	.word	0x40010400
 800f95c:	40014000 	.word	0x40014000
 800f960:	40014400 	.word	0x40014400
 800f964:	40014800 	.word	0x40014800

0800f968 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f968:	b480      	push	{r7}
 800f96a:	b087      	sub	sp, #28
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	6078      	str	r0, [r7, #4]
 800f970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	6a1b      	ldr	r3, [r3, #32]
 800f976:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6a1b      	ldr	r3, [r3, #32]
 800f982:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	685b      	ldr	r3, [r3, #4]
 800f988:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f98e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f990:	68fa      	ldr	r2, [r7, #12]
 800f992:	4b21      	ldr	r3, [pc, #132]	; (800fa18 <TIM_OC5_SetConfig+0xb0>)
 800f994:	4013      	ands	r3, r2
 800f996:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	68fa      	ldr	r2, [r7, #12]
 800f99e:	4313      	orrs	r3, r2
 800f9a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f9a2:	693b      	ldr	r3, [r7, #16]
 800f9a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f9a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f9aa:	683b      	ldr	r3, [r7, #0]
 800f9ac:	689b      	ldr	r3, [r3, #8]
 800f9ae:	041b      	lsls	r3, r3, #16
 800f9b0:	693a      	ldr	r2, [r7, #16]
 800f9b2:	4313      	orrs	r3, r2
 800f9b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	4a18      	ldr	r2, [pc, #96]	; (800fa1c <TIM_OC5_SetConfig+0xb4>)
 800f9ba:	4293      	cmp	r3, r2
 800f9bc:	d00f      	beq.n	800f9de <TIM_OC5_SetConfig+0x76>
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	4a17      	ldr	r2, [pc, #92]	; (800fa20 <TIM_OC5_SetConfig+0xb8>)
 800f9c2:	4293      	cmp	r3, r2
 800f9c4:	d00b      	beq.n	800f9de <TIM_OC5_SetConfig+0x76>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	4a16      	ldr	r2, [pc, #88]	; (800fa24 <TIM_OC5_SetConfig+0xbc>)
 800f9ca:	4293      	cmp	r3, r2
 800f9cc:	d007      	beq.n	800f9de <TIM_OC5_SetConfig+0x76>
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	4a15      	ldr	r2, [pc, #84]	; (800fa28 <TIM_OC5_SetConfig+0xc0>)
 800f9d2:	4293      	cmp	r3, r2
 800f9d4:	d003      	beq.n	800f9de <TIM_OC5_SetConfig+0x76>
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	4a14      	ldr	r2, [pc, #80]	; (800fa2c <TIM_OC5_SetConfig+0xc4>)
 800f9da:	4293      	cmp	r3, r2
 800f9dc:	d109      	bne.n	800f9f2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f9e4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	695b      	ldr	r3, [r3, #20]
 800f9ea:	021b      	lsls	r3, r3, #8
 800f9ec:	697a      	ldr	r2, [r7, #20]
 800f9ee:	4313      	orrs	r3, r2
 800f9f0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	697a      	ldr	r2, [r7, #20]
 800f9f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	68fa      	ldr	r2, [r7, #12]
 800f9fc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	685a      	ldr	r2, [r3, #4]
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	693a      	ldr	r2, [r7, #16]
 800fa0a:	621a      	str	r2, [r3, #32]
}
 800fa0c:	bf00      	nop
 800fa0e:	371c      	adds	r7, #28
 800fa10:	46bd      	mov	sp, r7
 800fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa16:	4770      	bx	lr
 800fa18:	fffeff8f 	.word	0xfffeff8f
 800fa1c:	40010000 	.word	0x40010000
 800fa20:	40010400 	.word	0x40010400
 800fa24:	40014000 	.word	0x40014000
 800fa28:	40014400 	.word	0x40014400
 800fa2c:	40014800 	.word	0x40014800

0800fa30 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800fa30:	b480      	push	{r7}
 800fa32:	b087      	sub	sp, #28
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	6a1b      	ldr	r3, [r3, #32]
 800fa3e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	6a1b      	ldr	r3, [r3, #32]
 800fa4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	685b      	ldr	r3, [r3, #4]
 800fa50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fa56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800fa58:	68fa      	ldr	r2, [r7, #12]
 800fa5a:	4b22      	ldr	r3, [pc, #136]	; (800fae4 <TIM_OC6_SetConfig+0xb4>)
 800fa5c:	4013      	ands	r3, r2
 800fa5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	021b      	lsls	r3, r3, #8
 800fa66:	68fa      	ldr	r2, [r7, #12]
 800fa68:	4313      	orrs	r3, r2
 800fa6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800fa6c:	693b      	ldr	r3, [r7, #16]
 800fa6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800fa72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	689b      	ldr	r3, [r3, #8]
 800fa78:	051b      	lsls	r3, r3, #20
 800fa7a:	693a      	ldr	r2, [r7, #16]
 800fa7c:	4313      	orrs	r3, r2
 800fa7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	4a19      	ldr	r2, [pc, #100]	; (800fae8 <TIM_OC6_SetConfig+0xb8>)
 800fa84:	4293      	cmp	r3, r2
 800fa86:	d00f      	beq.n	800faa8 <TIM_OC6_SetConfig+0x78>
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	4a18      	ldr	r2, [pc, #96]	; (800faec <TIM_OC6_SetConfig+0xbc>)
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d00b      	beq.n	800faa8 <TIM_OC6_SetConfig+0x78>
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	4a17      	ldr	r2, [pc, #92]	; (800faf0 <TIM_OC6_SetConfig+0xc0>)
 800fa94:	4293      	cmp	r3, r2
 800fa96:	d007      	beq.n	800faa8 <TIM_OC6_SetConfig+0x78>
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	4a16      	ldr	r2, [pc, #88]	; (800faf4 <TIM_OC6_SetConfig+0xc4>)
 800fa9c:	4293      	cmp	r3, r2
 800fa9e:	d003      	beq.n	800faa8 <TIM_OC6_SetConfig+0x78>
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	4a15      	ldr	r2, [pc, #84]	; (800faf8 <TIM_OC6_SetConfig+0xc8>)
 800faa4:	4293      	cmp	r3, r2
 800faa6:	d109      	bne.n	800fabc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800faa8:	697b      	ldr	r3, [r7, #20]
 800faaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800faae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800fab0:	683b      	ldr	r3, [r7, #0]
 800fab2:	695b      	ldr	r3, [r3, #20]
 800fab4:	029b      	lsls	r3, r3, #10
 800fab6:	697a      	ldr	r2, [r7, #20]
 800fab8:	4313      	orrs	r3, r2
 800faba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	697a      	ldr	r2, [r7, #20]
 800fac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	68fa      	ldr	r2, [r7, #12]
 800fac6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	685a      	ldr	r2, [r3, #4]
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	693a      	ldr	r2, [r7, #16]
 800fad4:	621a      	str	r2, [r3, #32]
}
 800fad6:	bf00      	nop
 800fad8:	371c      	adds	r7, #28
 800fada:	46bd      	mov	sp, r7
 800fadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae0:	4770      	bx	lr
 800fae2:	bf00      	nop
 800fae4:	feff8fff 	.word	0xfeff8fff
 800fae8:	40010000 	.word	0x40010000
 800faec:	40010400 	.word	0x40010400
 800faf0:	40014000 	.word	0x40014000
 800faf4:	40014400 	.word	0x40014400
 800faf8:	40014800 	.word	0x40014800

0800fafc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fafc:	b480      	push	{r7}
 800fafe:	b087      	sub	sp, #28
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	60f8      	str	r0, [r7, #12]
 800fb04:	60b9      	str	r1, [r7, #8]
 800fb06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fb08:	68bb      	ldr	r3, [r7, #8]
 800fb0a:	f003 031f 	and.w	r3, r3, #31
 800fb0e:	2201      	movs	r2, #1
 800fb10:	fa02 f303 	lsl.w	r3, r2, r3
 800fb14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	6a1a      	ldr	r2, [r3, #32]
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	43db      	mvns	r3, r3
 800fb1e:	401a      	ands	r2, r3
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	6a1a      	ldr	r2, [r3, #32]
 800fb28:	68bb      	ldr	r3, [r7, #8]
 800fb2a:	f003 031f 	and.w	r3, r3, #31
 800fb2e:	6879      	ldr	r1, [r7, #4]
 800fb30:	fa01 f303 	lsl.w	r3, r1, r3
 800fb34:	431a      	orrs	r2, r3
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	621a      	str	r2, [r3, #32]
}
 800fb3a:	bf00      	nop
 800fb3c:	371c      	adds	r7, #28
 800fb3e:	46bd      	mov	sp, r7
 800fb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb44:	4770      	bx	lr
	...

0800fb48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fb48:	b480      	push	{r7}
 800fb4a:	b085      	sub	sp, #20
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb58:	2b01      	cmp	r3, #1
 800fb5a:	d101      	bne.n	800fb60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fb5c:	2302      	movs	r3, #2
 800fb5e:	e077      	b.n	800fc50 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2201      	movs	r2, #1
 800fb64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2202      	movs	r2, #2
 800fb6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	685b      	ldr	r3, [r3, #4]
 800fb76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	689b      	ldr	r3, [r3, #8]
 800fb7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	4a35      	ldr	r2, [pc, #212]	; (800fc5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fb86:	4293      	cmp	r3, r2
 800fb88:	d004      	beq.n	800fb94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	4a34      	ldr	r2, [pc, #208]	; (800fc60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fb90:	4293      	cmp	r3, r2
 800fb92:	d108      	bne.n	800fba6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fb9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	685b      	ldr	r3, [r3, #4]
 800fba0:	68fa      	ldr	r2, [r7, #12]
 800fba2:	4313      	orrs	r3, r2
 800fba4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fbac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fbae:	683b      	ldr	r3, [r7, #0]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	68fa      	ldr	r2, [r7, #12]
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	68fa      	ldr	r2, [r7, #12]
 800fbbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	4a25      	ldr	r2, [pc, #148]	; (800fc5c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	d02c      	beq.n	800fc24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fbd2:	d027      	beq.n	800fc24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	4a22      	ldr	r2, [pc, #136]	; (800fc64 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800fbda:	4293      	cmp	r3, r2
 800fbdc:	d022      	beq.n	800fc24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	4a21      	ldr	r2, [pc, #132]	; (800fc68 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800fbe4:	4293      	cmp	r3, r2
 800fbe6:	d01d      	beq.n	800fc24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	4a1f      	ldr	r2, [pc, #124]	; (800fc6c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800fbee:	4293      	cmp	r3, r2
 800fbf0:	d018      	beq.n	800fc24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	4a1a      	ldr	r2, [pc, #104]	; (800fc60 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fbf8:	4293      	cmp	r3, r2
 800fbfa:	d013      	beq.n	800fc24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	4a1b      	ldr	r2, [pc, #108]	; (800fc70 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d00e      	beq.n	800fc24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	4a1a      	ldr	r2, [pc, #104]	; (800fc74 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800fc0c:	4293      	cmp	r3, r2
 800fc0e:	d009      	beq.n	800fc24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	4a18      	ldr	r2, [pc, #96]	; (800fc78 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800fc16:	4293      	cmp	r3, r2
 800fc18:	d004      	beq.n	800fc24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	4a17      	ldr	r2, [pc, #92]	; (800fc7c <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d10c      	bne.n	800fc3e <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fc2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fc2c:	683b      	ldr	r3, [r7, #0]
 800fc2e:	689b      	ldr	r3, [r3, #8]
 800fc30:	68ba      	ldr	r2, [r7, #8]
 800fc32:	4313      	orrs	r3, r2
 800fc34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	68ba      	ldr	r2, [r7, #8]
 800fc3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2201      	movs	r2, #1
 800fc42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc4e:	2300      	movs	r3, #0
}
 800fc50:	4618      	mov	r0, r3
 800fc52:	3714      	adds	r7, #20
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr
 800fc5c:	40010000 	.word	0x40010000
 800fc60:	40010400 	.word	0x40010400
 800fc64:	40000400 	.word	0x40000400
 800fc68:	40000800 	.word	0x40000800
 800fc6c:	40000c00 	.word	0x40000c00
 800fc70:	40001800 	.word	0x40001800
 800fc74:	40014000 	.word	0x40014000
 800fc78:	4000e000 	.word	0x4000e000
 800fc7c:	4000e400 	.word	0x4000e400

0800fc80 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fc80:	b480      	push	{r7}
 800fc82:	b083      	sub	sp, #12
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fc88:	bf00      	nop
 800fc8a:	370c      	adds	r7, #12
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc92:	4770      	bx	lr

0800fc94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fc94:	b480      	push	{r7}
 800fc96:	b083      	sub	sp, #12
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fc9c:	bf00      	nop
 800fc9e:	370c      	adds	r7, #12
 800fca0:	46bd      	mov	sp, r7
 800fca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca6:	4770      	bx	lr

0800fca8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fca8:	b480      	push	{r7}
 800fcaa:	b083      	sub	sp, #12
 800fcac:	af00      	add	r7, sp, #0
 800fcae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fcb0:	bf00      	nop
 800fcb2:	370c      	adds	r7, #12
 800fcb4:	46bd      	mov	sp, r7
 800fcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcba:	4770      	bx	lr

0800fcbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fcbc:	b580      	push	{r7, lr}
 800fcbe:	b082      	sub	sp, #8
 800fcc0:	af00      	add	r7, sp, #0
 800fcc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d101      	bne.n	800fcce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fcca:	2301      	movs	r3, #1
 800fccc:	e042      	b.n	800fd54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d106      	bne.n	800fce6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f7f3 fb09 	bl	80032f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2224      	movs	r2, #36	; 0x24
 800fcea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	681a      	ldr	r2, [r3, #0]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	f022 0201 	bic.w	r2, r2, #1
 800fcfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fcfe:	6878      	ldr	r0, [r7, #4]
 800fd00:	f000 f82c 	bl	800fd5c <UART_SetConfig>
 800fd04:	4603      	mov	r3, r0
 800fd06:	2b01      	cmp	r3, #1
 800fd08:	d101      	bne.n	800fd0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	e022      	b.n	800fd54 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d002      	beq.n	800fd1c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f000 fe8c 	bl	8010a34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	685a      	ldr	r2, [r3, #4]
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fd2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	689a      	ldr	r2, [r3, #8]
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	681b      	ldr	r3, [r3, #0]
 800fd36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fd3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	681a      	ldr	r2, [r3, #0]
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	681b      	ldr	r3, [r3, #0]
 800fd46:	f042 0201 	orr.w	r2, r2, #1
 800fd4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fd4c:	6878      	ldr	r0, [r7, #4]
 800fd4e:	f000 ff13 	bl	8010b78 <UART_CheckIdleState>
 800fd52:	4603      	mov	r3, r0
}
 800fd54:	4618      	mov	r0, r3
 800fd56:	3708      	adds	r7, #8
 800fd58:	46bd      	mov	sp, r7
 800fd5a:	bd80      	pop	{r7, pc}

0800fd5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fd5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800fd60:	b092      	sub	sp, #72	; 0x48
 800fd62:	af00      	add	r7, sp, #0
 800fd64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fd66:	2300      	movs	r3, #0
 800fd68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fd6c:	697b      	ldr	r3, [r7, #20]
 800fd6e:	689a      	ldr	r2, [r3, #8]
 800fd70:	697b      	ldr	r3, [r7, #20]
 800fd72:	691b      	ldr	r3, [r3, #16]
 800fd74:	431a      	orrs	r2, r3
 800fd76:	697b      	ldr	r3, [r7, #20]
 800fd78:	695b      	ldr	r3, [r3, #20]
 800fd7a:	431a      	orrs	r2, r3
 800fd7c:	697b      	ldr	r3, [r7, #20]
 800fd7e:	69db      	ldr	r3, [r3, #28]
 800fd80:	4313      	orrs	r3, r2
 800fd82:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	681b      	ldr	r3, [r3, #0]
 800fd88:	681a      	ldr	r2, [r3, #0]
 800fd8a:	4bbe      	ldr	r3, [pc, #760]	; (8010084 <UART_SetConfig+0x328>)
 800fd8c:	4013      	ands	r3, r2
 800fd8e:	697a      	ldr	r2, [r7, #20]
 800fd90:	6812      	ldr	r2, [r2, #0]
 800fd92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fd94:	430b      	orrs	r3, r1
 800fd96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	681b      	ldr	r3, [r3, #0]
 800fd9c:	685b      	ldr	r3, [r3, #4]
 800fd9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fda2:	697b      	ldr	r3, [r7, #20]
 800fda4:	68da      	ldr	r2, [r3, #12]
 800fda6:	697b      	ldr	r3, [r7, #20]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	430a      	orrs	r2, r1
 800fdac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fdae:	697b      	ldr	r3, [r7, #20]
 800fdb0:	699b      	ldr	r3, [r3, #24]
 800fdb2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fdb4:	697b      	ldr	r3, [r7, #20]
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	4ab3      	ldr	r2, [pc, #716]	; (8010088 <UART_SetConfig+0x32c>)
 800fdba:	4293      	cmp	r3, r2
 800fdbc:	d004      	beq.n	800fdc8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	6a1b      	ldr	r3, [r3, #32]
 800fdc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fdc4:	4313      	orrs	r3, r2
 800fdc6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	689a      	ldr	r2, [r3, #8]
 800fdce:	4baf      	ldr	r3, [pc, #700]	; (801008c <UART_SetConfig+0x330>)
 800fdd0:	4013      	ands	r3, r2
 800fdd2:	697a      	ldr	r2, [r7, #20]
 800fdd4:	6812      	ldr	r2, [r2, #0]
 800fdd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800fdd8:	430b      	orrs	r3, r1
 800fdda:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fddc:	697b      	ldr	r3, [r7, #20]
 800fdde:	681b      	ldr	r3, [r3, #0]
 800fde0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fde2:	f023 010f 	bic.w	r1, r3, #15
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdea:	697b      	ldr	r3, [r7, #20]
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	430a      	orrs	r2, r1
 800fdf0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fdf2:	697b      	ldr	r3, [r7, #20]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	4aa6      	ldr	r2, [pc, #664]	; (8010090 <UART_SetConfig+0x334>)
 800fdf8:	4293      	cmp	r3, r2
 800fdfa:	d177      	bne.n	800feec <UART_SetConfig+0x190>
 800fdfc:	4ba5      	ldr	r3, [pc, #660]	; (8010094 <UART_SetConfig+0x338>)
 800fdfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fe04:	2b28      	cmp	r3, #40	; 0x28
 800fe06:	d86d      	bhi.n	800fee4 <UART_SetConfig+0x188>
 800fe08:	a201      	add	r2, pc, #4	; (adr r2, 800fe10 <UART_SetConfig+0xb4>)
 800fe0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe0e:	bf00      	nop
 800fe10:	0800feb5 	.word	0x0800feb5
 800fe14:	0800fee5 	.word	0x0800fee5
 800fe18:	0800fee5 	.word	0x0800fee5
 800fe1c:	0800fee5 	.word	0x0800fee5
 800fe20:	0800fee5 	.word	0x0800fee5
 800fe24:	0800fee5 	.word	0x0800fee5
 800fe28:	0800fee5 	.word	0x0800fee5
 800fe2c:	0800fee5 	.word	0x0800fee5
 800fe30:	0800febd 	.word	0x0800febd
 800fe34:	0800fee5 	.word	0x0800fee5
 800fe38:	0800fee5 	.word	0x0800fee5
 800fe3c:	0800fee5 	.word	0x0800fee5
 800fe40:	0800fee5 	.word	0x0800fee5
 800fe44:	0800fee5 	.word	0x0800fee5
 800fe48:	0800fee5 	.word	0x0800fee5
 800fe4c:	0800fee5 	.word	0x0800fee5
 800fe50:	0800fec5 	.word	0x0800fec5
 800fe54:	0800fee5 	.word	0x0800fee5
 800fe58:	0800fee5 	.word	0x0800fee5
 800fe5c:	0800fee5 	.word	0x0800fee5
 800fe60:	0800fee5 	.word	0x0800fee5
 800fe64:	0800fee5 	.word	0x0800fee5
 800fe68:	0800fee5 	.word	0x0800fee5
 800fe6c:	0800fee5 	.word	0x0800fee5
 800fe70:	0800fecd 	.word	0x0800fecd
 800fe74:	0800fee5 	.word	0x0800fee5
 800fe78:	0800fee5 	.word	0x0800fee5
 800fe7c:	0800fee5 	.word	0x0800fee5
 800fe80:	0800fee5 	.word	0x0800fee5
 800fe84:	0800fee5 	.word	0x0800fee5
 800fe88:	0800fee5 	.word	0x0800fee5
 800fe8c:	0800fee5 	.word	0x0800fee5
 800fe90:	0800fed5 	.word	0x0800fed5
 800fe94:	0800fee5 	.word	0x0800fee5
 800fe98:	0800fee5 	.word	0x0800fee5
 800fe9c:	0800fee5 	.word	0x0800fee5
 800fea0:	0800fee5 	.word	0x0800fee5
 800fea4:	0800fee5 	.word	0x0800fee5
 800fea8:	0800fee5 	.word	0x0800fee5
 800feac:	0800fee5 	.word	0x0800fee5
 800feb0:	0800fedd 	.word	0x0800fedd
 800feb4:	2301      	movs	r3, #1
 800feb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800feba:	e326      	b.n	801050a <UART_SetConfig+0x7ae>
 800febc:	2304      	movs	r3, #4
 800febe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fec2:	e322      	b.n	801050a <UART_SetConfig+0x7ae>
 800fec4:	2308      	movs	r3, #8
 800fec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800feca:	e31e      	b.n	801050a <UART_SetConfig+0x7ae>
 800fecc:	2310      	movs	r3, #16
 800fece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fed2:	e31a      	b.n	801050a <UART_SetConfig+0x7ae>
 800fed4:	2320      	movs	r3, #32
 800fed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800feda:	e316      	b.n	801050a <UART_SetConfig+0x7ae>
 800fedc:	2340      	movs	r3, #64	; 0x40
 800fede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fee2:	e312      	b.n	801050a <UART_SetConfig+0x7ae>
 800fee4:	2380      	movs	r3, #128	; 0x80
 800fee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800feea:	e30e      	b.n	801050a <UART_SetConfig+0x7ae>
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	4a69      	ldr	r2, [pc, #420]	; (8010098 <UART_SetConfig+0x33c>)
 800fef2:	4293      	cmp	r3, r2
 800fef4:	d130      	bne.n	800ff58 <UART_SetConfig+0x1fc>
 800fef6:	4b67      	ldr	r3, [pc, #412]	; (8010094 <UART_SetConfig+0x338>)
 800fef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fefa:	f003 0307 	and.w	r3, r3, #7
 800fefe:	2b05      	cmp	r3, #5
 800ff00:	d826      	bhi.n	800ff50 <UART_SetConfig+0x1f4>
 800ff02:	a201      	add	r2, pc, #4	; (adr r2, 800ff08 <UART_SetConfig+0x1ac>)
 800ff04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff08:	0800ff21 	.word	0x0800ff21
 800ff0c:	0800ff29 	.word	0x0800ff29
 800ff10:	0800ff31 	.word	0x0800ff31
 800ff14:	0800ff39 	.word	0x0800ff39
 800ff18:	0800ff41 	.word	0x0800ff41
 800ff1c:	0800ff49 	.word	0x0800ff49
 800ff20:	2300      	movs	r3, #0
 800ff22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff26:	e2f0      	b.n	801050a <UART_SetConfig+0x7ae>
 800ff28:	2304      	movs	r3, #4
 800ff2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff2e:	e2ec      	b.n	801050a <UART_SetConfig+0x7ae>
 800ff30:	2308      	movs	r3, #8
 800ff32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff36:	e2e8      	b.n	801050a <UART_SetConfig+0x7ae>
 800ff38:	2310      	movs	r3, #16
 800ff3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff3e:	e2e4      	b.n	801050a <UART_SetConfig+0x7ae>
 800ff40:	2320      	movs	r3, #32
 800ff42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff46:	e2e0      	b.n	801050a <UART_SetConfig+0x7ae>
 800ff48:	2340      	movs	r3, #64	; 0x40
 800ff4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff4e:	e2dc      	b.n	801050a <UART_SetConfig+0x7ae>
 800ff50:	2380      	movs	r3, #128	; 0x80
 800ff52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff56:	e2d8      	b.n	801050a <UART_SetConfig+0x7ae>
 800ff58:	697b      	ldr	r3, [r7, #20]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	4a4f      	ldr	r2, [pc, #316]	; (801009c <UART_SetConfig+0x340>)
 800ff5e:	4293      	cmp	r3, r2
 800ff60:	d130      	bne.n	800ffc4 <UART_SetConfig+0x268>
 800ff62:	4b4c      	ldr	r3, [pc, #304]	; (8010094 <UART_SetConfig+0x338>)
 800ff64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff66:	f003 0307 	and.w	r3, r3, #7
 800ff6a:	2b05      	cmp	r3, #5
 800ff6c:	d826      	bhi.n	800ffbc <UART_SetConfig+0x260>
 800ff6e:	a201      	add	r2, pc, #4	; (adr r2, 800ff74 <UART_SetConfig+0x218>)
 800ff70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff74:	0800ff8d 	.word	0x0800ff8d
 800ff78:	0800ff95 	.word	0x0800ff95
 800ff7c:	0800ff9d 	.word	0x0800ff9d
 800ff80:	0800ffa5 	.word	0x0800ffa5
 800ff84:	0800ffad 	.word	0x0800ffad
 800ff88:	0800ffb5 	.word	0x0800ffb5
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff92:	e2ba      	b.n	801050a <UART_SetConfig+0x7ae>
 800ff94:	2304      	movs	r3, #4
 800ff96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ff9a:	e2b6      	b.n	801050a <UART_SetConfig+0x7ae>
 800ff9c:	2308      	movs	r3, #8
 800ff9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffa2:	e2b2      	b.n	801050a <UART_SetConfig+0x7ae>
 800ffa4:	2310      	movs	r3, #16
 800ffa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffaa:	e2ae      	b.n	801050a <UART_SetConfig+0x7ae>
 800ffac:	2320      	movs	r3, #32
 800ffae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffb2:	e2aa      	b.n	801050a <UART_SetConfig+0x7ae>
 800ffb4:	2340      	movs	r3, #64	; 0x40
 800ffb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffba:	e2a6      	b.n	801050a <UART_SetConfig+0x7ae>
 800ffbc:	2380      	movs	r3, #128	; 0x80
 800ffbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ffc2:	e2a2      	b.n	801050a <UART_SetConfig+0x7ae>
 800ffc4:	697b      	ldr	r3, [r7, #20]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	4a35      	ldr	r2, [pc, #212]	; (80100a0 <UART_SetConfig+0x344>)
 800ffca:	4293      	cmp	r3, r2
 800ffcc:	d130      	bne.n	8010030 <UART_SetConfig+0x2d4>
 800ffce:	4b31      	ldr	r3, [pc, #196]	; (8010094 <UART_SetConfig+0x338>)
 800ffd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffd2:	f003 0307 	and.w	r3, r3, #7
 800ffd6:	2b05      	cmp	r3, #5
 800ffd8:	d826      	bhi.n	8010028 <UART_SetConfig+0x2cc>
 800ffda:	a201      	add	r2, pc, #4	; (adr r2, 800ffe0 <UART_SetConfig+0x284>)
 800ffdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffe0:	0800fff9 	.word	0x0800fff9
 800ffe4:	08010001 	.word	0x08010001
 800ffe8:	08010009 	.word	0x08010009
 800ffec:	08010011 	.word	0x08010011
 800fff0:	08010019 	.word	0x08010019
 800fff4:	08010021 	.word	0x08010021
 800fff8:	2300      	movs	r3, #0
 800fffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fffe:	e284      	b.n	801050a <UART_SetConfig+0x7ae>
 8010000:	2304      	movs	r3, #4
 8010002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010006:	e280      	b.n	801050a <UART_SetConfig+0x7ae>
 8010008:	2308      	movs	r3, #8
 801000a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801000e:	e27c      	b.n	801050a <UART_SetConfig+0x7ae>
 8010010:	2310      	movs	r3, #16
 8010012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010016:	e278      	b.n	801050a <UART_SetConfig+0x7ae>
 8010018:	2320      	movs	r3, #32
 801001a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801001e:	e274      	b.n	801050a <UART_SetConfig+0x7ae>
 8010020:	2340      	movs	r3, #64	; 0x40
 8010022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010026:	e270      	b.n	801050a <UART_SetConfig+0x7ae>
 8010028:	2380      	movs	r3, #128	; 0x80
 801002a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801002e:	e26c      	b.n	801050a <UART_SetConfig+0x7ae>
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	4a1b      	ldr	r2, [pc, #108]	; (80100a4 <UART_SetConfig+0x348>)
 8010036:	4293      	cmp	r3, r2
 8010038:	d142      	bne.n	80100c0 <UART_SetConfig+0x364>
 801003a:	4b16      	ldr	r3, [pc, #88]	; (8010094 <UART_SetConfig+0x338>)
 801003c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801003e:	f003 0307 	and.w	r3, r3, #7
 8010042:	2b05      	cmp	r3, #5
 8010044:	d838      	bhi.n	80100b8 <UART_SetConfig+0x35c>
 8010046:	a201      	add	r2, pc, #4	; (adr r2, 801004c <UART_SetConfig+0x2f0>)
 8010048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801004c:	08010065 	.word	0x08010065
 8010050:	0801006d 	.word	0x0801006d
 8010054:	08010075 	.word	0x08010075
 8010058:	0801007d 	.word	0x0801007d
 801005c:	080100a9 	.word	0x080100a9
 8010060:	080100b1 	.word	0x080100b1
 8010064:	2300      	movs	r3, #0
 8010066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801006a:	e24e      	b.n	801050a <UART_SetConfig+0x7ae>
 801006c:	2304      	movs	r3, #4
 801006e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010072:	e24a      	b.n	801050a <UART_SetConfig+0x7ae>
 8010074:	2308      	movs	r3, #8
 8010076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801007a:	e246      	b.n	801050a <UART_SetConfig+0x7ae>
 801007c:	2310      	movs	r3, #16
 801007e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010082:	e242      	b.n	801050a <UART_SetConfig+0x7ae>
 8010084:	cfff69f3 	.word	0xcfff69f3
 8010088:	58000c00 	.word	0x58000c00
 801008c:	11fff4ff 	.word	0x11fff4ff
 8010090:	40011000 	.word	0x40011000
 8010094:	58024400 	.word	0x58024400
 8010098:	40004400 	.word	0x40004400
 801009c:	40004800 	.word	0x40004800
 80100a0:	40004c00 	.word	0x40004c00
 80100a4:	40005000 	.word	0x40005000
 80100a8:	2320      	movs	r3, #32
 80100aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80100ae:	e22c      	b.n	801050a <UART_SetConfig+0x7ae>
 80100b0:	2340      	movs	r3, #64	; 0x40
 80100b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80100b6:	e228      	b.n	801050a <UART_SetConfig+0x7ae>
 80100b8:	2380      	movs	r3, #128	; 0x80
 80100ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80100be:	e224      	b.n	801050a <UART_SetConfig+0x7ae>
 80100c0:	697b      	ldr	r3, [r7, #20]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	4ab1      	ldr	r2, [pc, #708]	; (801038c <UART_SetConfig+0x630>)
 80100c6:	4293      	cmp	r3, r2
 80100c8:	d176      	bne.n	80101b8 <UART_SetConfig+0x45c>
 80100ca:	4bb1      	ldr	r3, [pc, #708]	; (8010390 <UART_SetConfig+0x634>)
 80100cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80100d2:	2b28      	cmp	r3, #40	; 0x28
 80100d4:	d86c      	bhi.n	80101b0 <UART_SetConfig+0x454>
 80100d6:	a201      	add	r2, pc, #4	; (adr r2, 80100dc <UART_SetConfig+0x380>)
 80100d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80100dc:	08010181 	.word	0x08010181
 80100e0:	080101b1 	.word	0x080101b1
 80100e4:	080101b1 	.word	0x080101b1
 80100e8:	080101b1 	.word	0x080101b1
 80100ec:	080101b1 	.word	0x080101b1
 80100f0:	080101b1 	.word	0x080101b1
 80100f4:	080101b1 	.word	0x080101b1
 80100f8:	080101b1 	.word	0x080101b1
 80100fc:	08010189 	.word	0x08010189
 8010100:	080101b1 	.word	0x080101b1
 8010104:	080101b1 	.word	0x080101b1
 8010108:	080101b1 	.word	0x080101b1
 801010c:	080101b1 	.word	0x080101b1
 8010110:	080101b1 	.word	0x080101b1
 8010114:	080101b1 	.word	0x080101b1
 8010118:	080101b1 	.word	0x080101b1
 801011c:	08010191 	.word	0x08010191
 8010120:	080101b1 	.word	0x080101b1
 8010124:	080101b1 	.word	0x080101b1
 8010128:	080101b1 	.word	0x080101b1
 801012c:	080101b1 	.word	0x080101b1
 8010130:	080101b1 	.word	0x080101b1
 8010134:	080101b1 	.word	0x080101b1
 8010138:	080101b1 	.word	0x080101b1
 801013c:	08010199 	.word	0x08010199
 8010140:	080101b1 	.word	0x080101b1
 8010144:	080101b1 	.word	0x080101b1
 8010148:	080101b1 	.word	0x080101b1
 801014c:	080101b1 	.word	0x080101b1
 8010150:	080101b1 	.word	0x080101b1
 8010154:	080101b1 	.word	0x080101b1
 8010158:	080101b1 	.word	0x080101b1
 801015c:	080101a1 	.word	0x080101a1
 8010160:	080101b1 	.word	0x080101b1
 8010164:	080101b1 	.word	0x080101b1
 8010168:	080101b1 	.word	0x080101b1
 801016c:	080101b1 	.word	0x080101b1
 8010170:	080101b1 	.word	0x080101b1
 8010174:	080101b1 	.word	0x080101b1
 8010178:	080101b1 	.word	0x080101b1
 801017c:	080101a9 	.word	0x080101a9
 8010180:	2301      	movs	r3, #1
 8010182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010186:	e1c0      	b.n	801050a <UART_SetConfig+0x7ae>
 8010188:	2304      	movs	r3, #4
 801018a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801018e:	e1bc      	b.n	801050a <UART_SetConfig+0x7ae>
 8010190:	2308      	movs	r3, #8
 8010192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010196:	e1b8      	b.n	801050a <UART_SetConfig+0x7ae>
 8010198:	2310      	movs	r3, #16
 801019a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801019e:	e1b4      	b.n	801050a <UART_SetConfig+0x7ae>
 80101a0:	2320      	movs	r3, #32
 80101a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80101a6:	e1b0      	b.n	801050a <UART_SetConfig+0x7ae>
 80101a8:	2340      	movs	r3, #64	; 0x40
 80101aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80101ae:	e1ac      	b.n	801050a <UART_SetConfig+0x7ae>
 80101b0:	2380      	movs	r3, #128	; 0x80
 80101b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80101b6:	e1a8      	b.n	801050a <UART_SetConfig+0x7ae>
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	4a75      	ldr	r2, [pc, #468]	; (8010394 <UART_SetConfig+0x638>)
 80101be:	4293      	cmp	r3, r2
 80101c0:	d130      	bne.n	8010224 <UART_SetConfig+0x4c8>
 80101c2:	4b73      	ldr	r3, [pc, #460]	; (8010390 <UART_SetConfig+0x634>)
 80101c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80101c6:	f003 0307 	and.w	r3, r3, #7
 80101ca:	2b05      	cmp	r3, #5
 80101cc:	d826      	bhi.n	801021c <UART_SetConfig+0x4c0>
 80101ce:	a201      	add	r2, pc, #4	; (adr r2, 80101d4 <UART_SetConfig+0x478>)
 80101d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101d4:	080101ed 	.word	0x080101ed
 80101d8:	080101f5 	.word	0x080101f5
 80101dc:	080101fd 	.word	0x080101fd
 80101e0:	08010205 	.word	0x08010205
 80101e4:	0801020d 	.word	0x0801020d
 80101e8:	08010215 	.word	0x08010215
 80101ec:	2300      	movs	r3, #0
 80101ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80101f2:	e18a      	b.n	801050a <UART_SetConfig+0x7ae>
 80101f4:	2304      	movs	r3, #4
 80101f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80101fa:	e186      	b.n	801050a <UART_SetConfig+0x7ae>
 80101fc:	2308      	movs	r3, #8
 80101fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010202:	e182      	b.n	801050a <UART_SetConfig+0x7ae>
 8010204:	2310      	movs	r3, #16
 8010206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801020a:	e17e      	b.n	801050a <UART_SetConfig+0x7ae>
 801020c:	2320      	movs	r3, #32
 801020e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010212:	e17a      	b.n	801050a <UART_SetConfig+0x7ae>
 8010214:	2340      	movs	r3, #64	; 0x40
 8010216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801021a:	e176      	b.n	801050a <UART_SetConfig+0x7ae>
 801021c:	2380      	movs	r3, #128	; 0x80
 801021e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010222:	e172      	b.n	801050a <UART_SetConfig+0x7ae>
 8010224:	697b      	ldr	r3, [r7, #20]
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	4a5b      	ldr	r2, [pc, #364]	; (8010398 <UART_SetConfig+0x63c>)
 801022a:	4293      	cmp	r3, r2
 801022c:	d130      	bne.n	8010290 <UART_SetConfig+0x534>
 801022e:	4b58      	ldr	r3, [pc, #352]	; (8010390 <UART_SetConfig+0x634>)
 8010230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010232:	f003 0307 	and.w	r3, r3, #7
 8010236:	2b05      	cmp	r3, #5
 8010238:	d826      	bhi.n	8010288 <UART_SetConfig+0x52c>
 801023a:	a201      	add	r2, pc, #4	; (adr r2, 8010240 <UART_SetConfig+0x4e4>)
 801023c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010240:	08010259 	.word	0x08010259
 8010244:	08010261 	.word	0x08010261
 8010248:	08010269 	.word	0x08010269
 801024c:	08010271 	.word	0x08010271
 8010250:	08010279 	.word	0x08010279
 8010254:	08010281 	.word	0x08010281
 8010258:	2300      	movs	r3, #0
 801025a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801025e:	e154      	b.n	801050a <UART_SetConfig+0x7ae>
 8010260:	2304      	movs	r3, #4
 8010262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010266:	e150      	b.n	801050a <UART_SetConfig+0x7ae>
 8010268:	2308      	movs	r3, #8
 801026a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801026e:	e14c      	b.n	801050a <UART_SetConfig+0x7ae>
 8010270:	2310      	movs	r3, #16
 8010272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010276:	e148      	b.n	801050a <UART_SetConfig+0x7ae>
 8010278:	2320      	movs	r3, #32
 801027a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801027e:	e144      	b.n	801050a <UART_SetConfig+0x7ae>
 8010280:	2340      	movs	r3, #64	; 0x40
 8010282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010286:	e140      	b.n	801050a <UART_SetConfig+0x7ae>
 8010288:	2380      	movs	r3, #128	; 0x80
 801028a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801028e:	e13c      	b.n	801050a <UART_SetConfig+0x7ae>
 8010290:	697b      	ldr	r3, [r7, #20]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	4a41      	ldr	r2, [pc, #260]	; (801039c <UART_SetConfig+0x640>)
 8010296:	4293      	cmp	r3, r2
 8010298:	f040 8082 	bne.w	80103a0 <UART_SetConfig+0x644>
 801029c:	4b3c      	ldr	r3, [pc, #240]	; (8010390 <UART_SetConfig+0x634>)
 801029e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80102a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80102a4:	2b28      	cmp	r3, #40	; 0x28
 80102a6:	d86d      	bhi.n	8010384 <UART_SetConfig+0x628>
 80102a8:	a201      	add	r2, pc, #4	; (adr r2, 80102b0 <UART_SetConfig+0x554>)
 80102aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80102ae:	bf00      	nop
 80102b0:	08010355 	.word	0x08010355
 80102b4:	08010385 	.word	0x08010385
 80102b8:	08010385 	.word	0x08010385
 80102bc:	08010385 	.word	0x08010385
 80102c0:	08010385 	.word	0x08010385
 80102c4:	08010385 	.word	0x08010385
 80102c8:	08010385 	.word	0x08010385
 80102cc:	08010385 	.word	0x08010385
 80102d0:	0801035d 	.word	0x0801035d
 80102d4:	08010385 	.word	0x08010385
 80102d8:	08010385 	.word	0x08010385
 80102dc:	08010385 	.word	0x08010385
 80102e0:	08010385 	.word	0x08010385
 80102e4:	08010385 	.word	0x08010385
 80102e8:	08010385 	.word	0x08010385
 80102ec:	08010385 	.word	0x08010385
 80102f0:	08010365 	.word	0x08010365
 80102f4:	08010385 	.word	0x08010385
 80102f8:	08010385 	.word	0x08010385
 80102fc:	08010385 	.word	0x08010385
 8010300:	08010385 	.word	0x08010385
 8010304:	08010385 	.word	0x08010385
 8010308:	08010385 	.word	0x08010385
 801030c:	08010385 	.word	0x08010385
 8010310:	0801036d 	.word	0x0801036d
 8010314:	08010385 	.word	0x08010385
 8010318:	08010385 	.word	0x08010385
 801031c:	08010385 	.word	0x08010385
 8010320:	08010385 	.word	0x08010385
 8010324:	08010385 	.word	0x08010385
 8010328:	08010385 	.word	0x08010385
 801032c:	08010385 	.word	0x08010385
 8010330:	08010375 	.word	0x08010375
 8010334:	08010385 	.word	0x08010385
 8010338:	08010385 	.word	0x08010385
 801033c:	08010385 	.word	0x08010385
 8010340:	08010385 	.word	0x08010385
 8010344:	08010385 	.word	0x08010385
 8010348:	08010385 	.word	0x08010385
 801034c:	08010385 	.word	0x08010385
 8010350:	0801037d 	.word	0x0801037d
 8010354:	2301      	movs	r3, #1
 8010356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801035a:	e0d6      	b.n	801050a <UART_SetConfig+0x7ae>
 801035c:	2304      	movs	r3, #4
 801035e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010362:	e0d2      	b.n	801050a <UART_SetConfig+0x7ae>
 8010364:	2308      	movs	r3, #8
 8010366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801036a:	e0ce      	b.n	801050a <UART_SetConfig+0x7ae>
 801036c:	2310      	movs	r3, #16
 801036e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010372:	e0ca      	b.n	801050a <UART_SetConfig+0x7ae>
 8010374:	2320      	movs	r3, #32
 8010376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801037a:	e0c6      	b.n	801050a <UART_SetConfig+0x7ae>
 801037c:	2340      	movs	r3, #64	; 0x40
 801037e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010382:	e0c2      	b.n	801050a <UART_SetConfig+0x7ae>
 8010384:	2380      	movs	r3, #128	; 0x80
 8010386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801038a:	e0be      	b.n	801050a <UART_SetConfig+0x7ae>
 801038c:	40011400 	.word	0x40011400
 8010390:	58024400 	.word	0x58024400
 8010394:	40007800 	.word	0x40007800
 8010398:	40007c00 	.word	0x40007c00
 801039c:	40011800 	.word	0x40011800
 80103a0:	697b      	ldr	r3, [r7, #20]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	4aad      	ldr	r2, [pc, #692]	; (801065c <UART_SetConfig+0x900>)
 80103a6:	4293      	cmp	r3, r2
 80103a8:	d176      	bne.n	8010498 <UART_SetConfig+0x73c>
 80103aa:	4bad      	ldr	r3, [pc, #692]	; (8010660 <UART_SetConfig+0x904>)
 80103ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80103b2:	2b28      	cmp	r3, #40	; 0x28
 80103b4:	d86c      	bhi.n	8010490 <UART_SetConfig+0x734>
 80103b6:	a201      	add	r2, pc, #4	; (adr r2, 80103bc <UART_SetConfig+0x660>)
 80103b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103bc:	08010461 	.word	0x08010461
 80103c0:	08010491 	.word	0x08010491
 80103c4:	08010491 	.word	0x08010491
 80103c8:	08010491 	.word	0x08010491
 80103cc:	08010491 	.word	0x08010491
 80103d0:	08010491 	.word	0x08010491
 80103d4:	08010491 	.word	0x08010491
 80103d8:	08010491 	.word	0x08010491
 80103dc:	08010469 	.word	0x08010469
 80103e0:	08010491 	.word	0x08010491
 80103e4:	08010491 	.word	0x08010491
 80103e8:	08010491 	.word	0x08010491
 80103ec:	08010491 	.word	0x08010491
 80103f0:	08010491 	.word	0x08010491
 80103f4:	08010491 	.word	0x08010491
 80103f8:	08010491 	.word	0x08010491
 80103fc:	08010471 	.word	0x08010471
 8010400:	08010491 	.word	0x08010491
 8010404:	08010491 	.word	0x08010491
 8010408:	08010491 	.word	0x08010491
 801040c:	08010491 	.word	0x08010491
 8010410:	08010491 	.word	0x08010491
 8010414:	08010491 	.word	0x08010491
 8010418:	08010491 	.word	0x08010491
 801041c:	08010479 	.word	0x08010479
 8010420:	08010491 	.word	0x08010491
 8010424:	08010491 	.word	0x08010491
 8010428:	08010491 	.word	0x08010491
 801042c:	08010491 	.word	0x08010491
 8010430:	08010491 	.word	0x08010491
 8010434:	08010491 	.word	0x08010491
 8010438:	08010491 	.word	0x08010491
 801043c:	08010481 	.word	0x08010481
 8010440:	08010491 	.word	0x08010491
 8010444:	08010491 	.word	0x08010491
 8010448:	08010491 	.word	0x08010491
 801044c:	08010491 	.word	0x08010491
 8010450:	08010491 	.word	0x08010491
 8010454:	08010491 	.word	0x08010491
 8010458:	08010491 	.word	0x08010491
 801045c:	08010489 	.word	0x08010489
 8010460:	2301      	movs	r3, #1
 8010462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010466:	e050      	b.n	801050a <UART_SetConfig+0x7ae>
 8010468:	2304      	movs	r3, #4
 801046a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801046e:	e04c      	b.n	801050a <UART_SetConfig+0x7ae>
 8010470:	2308      	movs	r3, #8
 8010472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010476:	e048      	b.n	801050a <UART_SetConfig+0x7ae>
 8010478:	2310      	movs	r3, #16
 801047a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801047e:	e044      	b.n	801050a <UART_SetConfig+0x7ae>
 8010480:	2320      	movs	r3, #32
 8010482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010486:	e040      	b.n	801050a <UART_SetConfig+0x7ae>
 8010488:	2340      	movs	r3, #64	; 0x40
 801048a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801048e:	e03c      	b.n	801050a <UART_SetConfig+0x7ae>
 8010490:	2380      	movs	r3, #128	; 0x80
 8010492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010496:	e038      	b.n	801050a <UART_SetConfig+0x7ae>
 8010498:	697b      	ldr	r3, [r7, #20]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	4a71      	ldr	r2, [pc, #452]	; (8010664 <UART_SetConfig+0x908>)
 801049e:	4293      	cmp	r3, r2
 80104a0:	d130      	bne.n	8010504 <UART_SetConfig+0x7a8>
 80104a2:	4b6f      	ldr	r3, [pc, #444]	; (8010660 <UART_SetConfig+0x904>)
 80104a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104a6:	f003 0307 	and.w	r3, r3, #7
 80104aa:	2b05      	cmp	r3, #5
 80104ac:	d826      	bhi.n	80104fc <UART_SetConfig+0x7a0>
 80104ae:	a201      	add	r2, pc, #4	; (adr r2, 80104b4 <UART_SetConfig+0x758>)
 80104b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80104b4:	080104cd 	.word	0x080104cd
 80104b8:	080104d5 	.word	0x080104d5
 80104bc:	080104dd 	.word	0x080104dd
 80104c0:	080104e5 	.word	0x080104e5
 80104c4:	080104ed 	.word	0x080104ed
 80104c8:	080104f5 	.word	0x080104f5
 80104cc:	2302      	movs	r3, #2
 80104ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104d2:	e01a      	b.n	801050a <UART_SetConfig+0x7ae>
 80104d4:	2304      	movs	r3, #4
 80104d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104da:	e016      	b.n	801050a <UART_SetConfig+0x7ae>
 80104dc:	2308      	movs	r3, #8
 80104de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104e2:	e012      	b.n	801050a <UART_SetConfig+0x7ae>
 80104e4:	2310      	movs	r3, #16
 80104e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104ea:	e00e      	b.n	801050a <UART_SetConfig+0x7ae>
 80104ec:	2320      	movs	r3, #32
 80104ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104f2:	e00a      	b.n	801050a <UART_SetConfig+0x7ae>
 80104f4:	2340      	movs	r3, #64	; 0x40
 80104f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80104fa:	e006      	b.n	801050a <UART_SetConfig+0x7ae>
 80104fc:	2380      	movs	r3, #128	; 0x80
 80104fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010502:	e002      	b.n	801050a <UART_SetConfig+0x7ae>
 8010504:	2380      	movs	r3, #128	; 0x80
 8010506:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	4a55      	ldr	r2, [pc, #340]	; (8010664 <UART_SetConfig+0x908>)
 8010510:	4293      	cmp	r3, r2
 8010512:	f040 80f8 	bne.w	8010706 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010516:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801051a:	2b20      	cmp	r3, #32
 801051c:	dc46      	bgt.n	80105ac <UART_SetConfig+0x850>
 801051e:	2b02      	cmp	r3, #2
 8010520:	db75      	blt.n	801060e <UART_SetConfig+0x8b2>
 8010522:	3b02      	subs	r3, #2
 8010524:	2b1e      	cmp	r3, #30
 8010526:	d872      	bhi.n	801060e <UART_SetConfig+0x8b2>
 8010528:	a201      	add	r2, pc, #4	; (adr r2, 8010530 <UART_SetConfig+0x7d4>)
 801052a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801052e:	bf00      	nop
 8010530:	080105b3 	.word	0x080105b3
 8010534:	0801060f 	.word	0x0801060f
 8010538:	080105bb 	.word	0x080105bb
 801053c:	0801060f 	.word	0x0801060f
 8010540:	0801060f 	.word	0x0801060f
 8010544:	0801060f 	.word	0x0801060f
 8010548:	080105cb 	.word	0x080105cb
 801054c:	0801060f 	.word	0x0801060f
 8010550:	0801060f 	.word	0x0801060f
 8010554:	0801060f 	.word	0x0801060f
 8010558:	0801060f 	.word	0x0801060f
 801055c:	0801060f 	.word	0x0801060f
 8010560:	0801060f 	.word	0x0801060f
 8010564:	0801060f 	.word	0x0801060f
 8010568:	080105db 	.word	0x080105db
 801056c:	0801060f 	.word	0x0801060f
 8010570:	0801060f 	.word	0x0801060f
 8010574:	0801060f 	.word	0x0801060f
 8010578:	0801060f 	.word	0x0801060f
 801057c:	0801060f 	.word	0x0801060f
 8010580:	0801060f 	.word	0x0801060f
 8010584:	0801060f 	.word	0x0801060f
 8010588:	0801060f 	.word	0x0801060f
 801058c:	0801060f 	.word	0x0801060f
 8010590:	0801060f 	.word	0x0801060f
 8010594:	0801060f 	.word	0x0801060f
 8010598:	0801060f 	.word	0x0801060f
 801059c:	0801060f 	.word	0x0801060f
 80105a0:	0801060f 	.word	0x0801060f
 80105a4:	0801060f 	.word	0x0801060f
 80105a8:	08010601 	.word	0x08010601
 80105ac:	2b40      	cmp	r3, #64	; 0x40
 80105ae:	d02a      	beq.n	8010606 <UART_SetConfig+0x8aa>
 80105b0:	e02d      	b.n	801060e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80105b2:	f7fb fb07 	bl	800bbc4 <HAL_RCCEx_GetD3PCLK1Freq>
 80105b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80105b8:	e02f      	b.n	801061a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80105ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80105be:	4618      	mov	r0, r3
 80105c0:	f7fb fb16 	bl	800bbf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80105c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105c8:	e027      	b.n	801061a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80105ca:	f107 0318 	add.w	r3, r7, #24
 80105ce:	4618      	mov	r0, r3
 80105d0:	f7fb fc62 	bl	800be98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80105d4:	69fb      	ldr	r3, [r7, #28]
 80105d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105d8:	e01f      	b.n	801061a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80105da:	4b21      	ldr	r3, [pc, #132]	; (8010660 <UART_SetConfig+0x904>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	f003 0320 	and.w	r3, r3, #32
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d009      	beq.n	80105fa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80105e6:	4b1e      	ldr	r3, [pc, #120]	; (8010660 <UART_SetConfig+0x904>)
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	08db      	lsrs	r3, r3, #3
 80105ec:	f003 0303 	and.w	r3, r3, #3
 80105f0:	4a1d      	ldr	r2, [pc, #116]	; (8010668 <UART_SetConfig+0x90c>)
 80105f2:	fa22 f303 	lsr.w	r3, r2, r3
 80105f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80105f8:	e00f      	b.n	801061a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80105fa:	4b1b      	ldr	r3, [pc, #108]	; (8010668 <UART_SetConfig+0x90c>)
 80105fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80105fe:	e00c      	b.n	801061a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010600:	4b1a      	ldr	r3, [pc, #104]	; (801066c <UART_SetConfig+0x910>)
 8010602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010604:	e009      	b.n	801061a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801060a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801060c:	e005      	b.n	801061a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801060e:	2300      	movs	r3, #0
 8010610:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010612:	2301      	movs	r3, #1
 8010614:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010618:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801061a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801061c:	2b00      	cmp	r3, #0
 801061e:	f000 81ee 	beq.w	80109fe <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010622:	697b      	ldr	r3, [r7, #20]
 8010624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010626:	4a12      	ldr	r2, [pc, #72]	; (8010670 <UART_SetConfig+0x914>)
 8010628:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801062c:	461a      	mov	r2, r3
 801062e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010630:	fbb3 f3f2 	udiv	r3, r3, r2
 8010634:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010636:	697b      	ldr	r3, [r7, #20]
 8010638:	685a      	ldr	r2, [r3, #4]
 801063a:	4613      	mov	r3, r2
 801063c:	005b      	lsls	r3, r3, #1
 801063e:	4413      	add	r3, r2
 8010640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010642:	429a      	cmp	r2, r3
 8010644:	d305      	bcc.n	8010652 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010646:	697b      	ldr	r3, [r7, #20]
 8010648:	685b      	ldr	r3, [r3, #4]
 801064a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801064c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801064e:	429a      	cmp	r2, r3
 8010650:	d910      	bls.n	8010674 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8010652:	2301      	movs	r3, #1
 8010654:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010658:	e1d1      	b.n	80109fe <UART_SetConfig+0xca2>
 801065a:	bf00      	nop
 801065c:	40011c00 	.word	0x40011c00
 8010660:	58024400 	.word	0x58024400
 8010664:	58000c00 	.word	0x58000c00
 8010668:	03d09000 	.word	0x03d09000
 801066c:	003d0900 	.word	0x003d0900
 8010670:	0801ad18 	.word	0x0801ad18
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010676:	2200      	movs	r2, #0
 8010678:	60bb      	str	r3, [r7, #8]
 801067a:	60fa      	str	r2, [r7, #12]
 801067c:	697b      	ldr	r3, [r7, #20]
 801067e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010680:	4ac0      	ldr	r2, [pc, #768]	; (8010984 <UART_SetConfig+0xc28>)
 8010682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010686:	b29b      	uxth	r3, r3
 8010688:	2200      	movs	r2, #0
 801068a:	603b      	str	r3, [r7, #0]
 801068c:	607a      	str	r2, [r7, #4]
 801068e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010692:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010696:	f7f0 f84f 	bl	8000738 <__aeabi_uldivmod>
 801069a:	4602      	mov	r2, r0
 801069c:	460b      	mov	r3, r1
 801069e:	4610      	mov	r0, r2
 80106a0:	4619      	mov	r1, r3
 80106a2:	f04f 0200 	mov.w	r2, #0
 80106a6:	f04f 0300 	mov.w	r3, #0
 80106aa:	020b      	lsls	r3, r1, #8
 80106ac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80106b0:	0202      	lsls	r2, r0, #8
 80106b2:	6979      	ldr	r1, [r7, #20]
 80106b4:	6849      	ldr	r1, [r1, #4]
 80106b6:	0849      	lsrs	r1, r1, #1
 80106b8:	2000      	movs	r0, #0
 80106ba:	460c      	mov	r4, r1
 80106bc:	4605      	mov	r5, r0
 80106be:	eb12 0804 	adds.w	r8, r2, r4
 80106c2:	eb43 0905 	adc.w	r9, r3, r5
 80106c6:	697b      	ldr	r3, [r7, #20]
 80106c8:	685b      	ldr	r3, [r3, #4]
 80106ca:	2200      	movs	r2, #0
 80106cc:	469a      	mov	sl, r3
 80106ce:	4693      	mov	fp, r2
 80106d0:	4652      	mov	r2, sl
 80106d2:	465b      	mov	r3, fp
 80106d4:	4640      	mov	r0, r8
 80106d6:	4649      	mov	r1, r9
 80106d8:	f7f0 f82e 	bl	8000738 <__aeabi_uldivmod>
 80106dc:	4602      	mov	r2, r0
 80106de:	460b      	mov	r3, r1
 80106e0:	4613      	mov	r3, r2
 80106e2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80106e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80106ea:	d308      	bcc.n	80106fe <UART_SetConfig+0x9a2>
 80106ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80106f2:	d204      	bcs.n	80106fe <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	681b      	ldr	r3, [r3, #0]
 80106f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106fa:	60da      	str	r2, [r3, #12]
 80106fc:	e17f      	b.n	80109fe <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80106fe:	2301      	movs	r3, #1
 8010700:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010704:	e17b      	b.n	80109fe <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	69db      	ldr	r3, [r3, #28]
 801070a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801070e:	f040 80bd 	bne.w	801088c <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8010712:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010716:	2b20      	cmp	r3, #32
 8010718:	dc48      	bgt.n	80107ac <UART_SetConfig+0xa50>
 801071a:	2b00      	cmp	r3, #0
 801071c:	db7b      	blt.n	8010816 <UART_SetConfig+0xaba>
 801071e:	2b20      	cmp	r3, #32
 8010720:	d879      	bhi.n	8010816 <UART_SetConfig+0xaba>
 8010722:	a201      	add	r2, pc, #4	; (adr r2, 8010728 <UART_SetConfig+0x9cc>)
 8010724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010728:	080107b3 	.word	0x080107b3
 801072c:	080107bb 	.word	0x080107bb
 8010730:	08010817 	.word	0x08010817
 8010734:	08010817 	.word	0x08010817
 8010738:	080107c3 	.word	0x080107c3
 801073c:	08010817 	.word	0x08010817
 8010740:	08010817 	.word	0x08010817
 8010744:	08010817 	.word	0x08010817
 8010748:	080107d3 	.word	0x080107d3
 801074c:	08010817 	.word	0x08010817
 8010750:	08010817 	.word	0x08010817
 8010754:	08010817 	.word	0x08010817
 8010758:	08010817 	.word	0x08010817
 801075c:	08010817 	.word	0x08010817
 8010760:	08010817 	.word	0x08010817
 8010764:	08010817 	.word	0x08010817
 8010768:	080107e3 	.word	0x080107e3
 801076c:	08010817 	.word	0x08010817
 8010770:	08010817 	.word	0x08010817
 8010774:	08010817 	.word	0x08010817
 8010778:	08010817 	.word	0x08010817
 801077c:	08010817 	.word	0x08010817
 8010780:	08010817 	.word	0x08010817
 8010784:	08010817 	.word	0x08010817
 8010788:	08010817 	.word	0x08010817
 801078c:	08010817 	.word	0x08010817
 8010790:	08010817 	.word	0x08010817
 8010794:	08010817 	.word	0x08010817
 8010798:	08010817 	.word	0x08010817
 801079c:	08010817 	.word	0x08010817
 80107a0:	08010817 	.word	0x08010817
 80107a4:	08010817 	.word	0x08010817
 80107a8:	08010809 	.word	0x08010809
 80107ac:	2b40      	cmp	r3, #64	; 0x40
 80107ae:	d02e      	beq.n	801080e <UART_SetConfig+0xab2>
 80107b0:	e031      	b.n	8010816 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80107b2:	f7f9 fb69 	bl	8009e88 <HAL_RCC_GetPCLK1Freq>
 80107b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80107b8:	e033      	b.n	8010822 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80107ba:	f7f9 fb7b 	bl	8009eb4 <HAL_RCC_GetPCLK2Freq>
 80107be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80107c0:	e02f      	b.n	8010822 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80107c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80107c6:	4618      	mov	r0, r3
 80107c8:	f7fb fa12 	bl	800bbf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80107cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107d0:	e027      	b.n	8010822 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80107d2:	f107 0318 	add.w	r3, r7, #24
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7fb fb5e 	bl	800be98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80107dc:	69fb      	ldr	r3, [r7, #28]
 80107de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80107e0:	e01f      	b.n	8010822 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80107e2:	4b69      	ldr	r3, [pc, #420]	; (8010988 <UART_SetConfig+0xc2c>)
 80107e4:	681b      	ldr	r3, [r3, #0]
 80107e6:	f003 0320 	and.w	r3, r3, #32
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d009      	beq.n	8010802 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80107ee:	4b66      	ldr	r3, [pc, #408]	; (8010988 <UART_SetConfig+0xc2c>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	08db      	lsrs	r3, r3, #3
 80107f4:	f003 0303 	and.w	r3, r3, #3
 80107f8:	4a64      	ldr	r2, [pc, #400]	; (801098c <UART_SetConfig+0xc30>)
 80107fa:	fa22 f303 	lsr.w	r3, r2, r3
 80107fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010800:	e00f      	b.n	8010822 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8010802:	4b62      	ldr	r3, [pc, #392]	; (801098c <UART_SetConfig+0xc30>)
 8010804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010806:	e00c      	b.n	8010822 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010808:	4b61      	ldr	r3, [pc, #388]	; (8010990 <UART_SetConfig+0xc34>)
 801080a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801080c:	e009      	b.n	8010822 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801080e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010814:	e005      	b.n	8010822 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8010816:	2300      	movs	r3, #0
 8010818:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801081a:	2301      	movs	r3, #1
 801081c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010820:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010824:	2b00      	cmp	r3, #0
 8010826:	f000 80ea 	beq.w	80109fe <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801082e:	4a55      	ldr	r2, [pc, #340]	; (8010984 <UART_SetConfig+0xc28>)
 8010830:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010834:	461a      	mov	r2, r3
 8010836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010838:	fbb3 f3f2 	udiv	r3, r3, r2
 801083c:	005a      	lsls	r2, r3, #1
 801083e:	697b      	ldr	r3, [r7, #20]
 8010840:	685b      	ldr	r3, [r3, #4]
 8010842:	085b      	lsrs	r3, r3, #1
 8010844:	441a      	add	r2, r3
 8010846:	697b      	ldr	r3, [r7, #20]
 8010848:	685b      	ldr	r3, [r3, #4]
 801084a:	fbb2 f3f3 	udiv	r3, r2, r3
 801084e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010852:	2b0f      	cmp	r3, #15
 8010854:	d916      	bls.n	8010884 <UART_SetConfig+0xb28>
 8010856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010858:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801085c:	d212      	bcs.n	8010884 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801085e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010860:	b29b      	uxth	r3, r3
 8010862:	f023 030f 	bic.w	r3, r3, #15
 8010866:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801086a:	085b      	lsrs	r3, r3, #1
 801086c:	b29b      	uxth	r3, r3
 801086e:	f003 0307 	and.w	r3, r3, #7
 8010872:	b29a      	uxth	r2, r3
 8010874:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010876:	4313      	orrs	r3, r2
 8010878:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	681b      	ldr	r3, [r3, #0]
 801087e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010880:	60da      	str	r2, [r3, #12]
 8010882:	e0bc      	b.n	80109fe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8010884:	2301      	movs	r3, #1
 8010886:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801088a:	e0b8      	b.n	80109fe <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 801088c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010890:	2b20      	cmp	r3, #32
 8010892:	dc4b      	bgt.n	801092c <UART_SetConfig+0xbd0>
 8010894:	2b00      	cmp	r3, #0
 8010896:	f2c0 8087 	blt.w	80109a8 <UART_SetConfig+0xc4c>
 801089a:	2b20      	cmp	r3, #32
 801089c:	f200 8084 	bhi.w	80109a8 <UART_SetConfig+0xc4c>
 80108a0:	a201      	add	r2, pc, #4	; (adr r2, 80108a8 <UART_SetConfig+0xb4c>)
 80108a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108a6:	bf00      	nop
 80108a8:	08010933 	.word	0x08010933
 80108ac:	0801093b 	.word	0x0801093b
 80108b0:	080109a9 	.word	0x080109a9
 80108b4:	080109a9 	.word	0x080109a9
 80108b8:	08010943 	.word	0x08010943
 80108bc:	080109a9 	.word	0x080109a9
 80108c0:	080109a9 	.word	0x080109a9
 80108c4:	080109a9 	.word	0x080109a9
 80108c8:	08010953 	.word	0x08010953
 80108cc:	080109a9 	.word	0x080109a9
 80108d0:	080109a9 	.word	0x080109a9
 80108d4:	080109a9 	.word	0x080109a9
 80108d8:	080109a9 	.word	0x080109a9
 80108dc:	080109a9 	.word	0x080109a9
 80108e0:	080109a9 	.word	0x080109a9
 80108e4:	080109a9 	.word	0x080109a9
 80108e8:	08010963 	.word	0x08010963
 80108ec:	080109a9 	.word	0x080109a9
 80108f0:	080109a9 	.word	0x080109a9
 80108f4:	080109a9 	.word	0x080109a9
 80108f8:	080109a9 	.word	0x080109a9
 80108fc:	080109a9 	.word	0x080109a9
 8010900:	080109a9 	.word	0x080109a9
 8010904:	080109a9 	.word	0x080109a9
 8010908:	080109a9 	.word	0x080109a9
 801090c:	080109a9 	.word	0x080109a9
 8010910:	080109a9 	.word	0x080109a9
 8010914:	080109a9 	.word	0x080109a9
 8010918:	080109a9 	.word	0x080109a9
 801091c:	080109a9 	.word	0x080109a9
 8010920:	080109a9 	.word	0x080109a9
 8010924:	080109a9 	.word	0x080109a9
 8010928:	0801099b 	.word	0x0801099b
 801092c:	2b40      	cmp	r3, #64	; 0x40
 801092e:	d037      	beq.n	80109a0 <UART_SetConfig+0xc44>
 8010930:	e03a      	b.n	80109a8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010932:	f7f9 faa9 	bl	8009e88 <HAL_RCC_GetPCLK1Freq>
 8010936:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010938:	e03c      	b.n	80109b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801093a:	f7f9 fabb 	bl	8009eb4 <HAL_RCC_GetPCLK2Freq>
 801093e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010940:	e038      	b.n	80109b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010942:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010946:	4618      	mov	r0, r3
 8010948:	f7fb f952 	bl	800bbf0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801094c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801094e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010950:	e030      	b.n	80109b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010952:	f107 0318 	add.w	r3, r7, #24
 8010956:	4618      	mov	r0, r3
 8010958:	f7fb fa9e 	bl	800be98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801095c:	69fb      	ldr	r3, [r7, #28]
 801095e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010960:	e028      	b.n	80109b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010962:	4b09      	ldr	r3, [pc, #36]	; (8010988 <UART_SetConfig+0xc2c>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	f003 0320 	and.w	r3, r3, #32
 801096a:	2b00      	cmp	r3, #0
 801096c:	d012      	beq.n	8010994 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801096e:	4b06      	ldr	r3, [pc, #24]	; (8010988 <UART_SetConfig+0xc2c>)
 8010970:	681b      	ldr	r3, [r3, #0]
 8010972:	08db      	lsrs	r3, r3, #3
 8010974:	f003 0303 	and.w	r3, r3, #3
 8010978:	4a04      	ldr	r2, [pc, #16]	; (801098c <UART_SetConfig+0xc30>)
 801097a:	fa22 f303 	lsr.w	r3, r2, r3
 801097e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010980:	e018      	b.n	80109b4 <UART_SetConfig+0xc58>
 8010982:	bf00      	nop
 8010984:	0801ad18 	.word	0x0801ad18
 8010988:	58024400 	.word	0x58024400
 801098c:	03d09000 	.word	0x03d09000
 8010990:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8010994:	4b24      	ldr	r3, [pc, #144]	; (8010a28 <UART_SetConfig+0xccc>)
 8010996:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010998:	e00c      	b.n	80109b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801099a:	4b24      	ldr	r3, [pc, #144]	; (8010a2c <UART_SetConfig+0xcd0>)
 801099c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801099e:	e009      	b.n	80109b4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80109a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80109a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80109a6:	e005      	b.n	80109b4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80109a8:	2300      	movs	r3, #0
 80109aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80109ac:	2301      	movs	r3, #1
 80109ae:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80109b2:	bf00      	nop
    }

    if (pclk != 0U)
 80109b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d021      	beq.n	80109fe <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80109ba:	697b      	ldr	r3, [r7, #20]
 80109bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109be:	4a1c      	ldr	r2, [pc, #112]	; (8010a30 <UART_SetConfig+0xcd4>)
 80109c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80109c4:	461a      	mov	r2, r3
 80109c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80109c8:	fbb3 f2f2 	udiv	r2, r3, r2
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	685b      	ldr	r3, [r3, #4]
 80109d0:	085b      	lsrs	r3, r3, #1
 80109d2:	441a      	add	r2, r3
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	685b      	ldr	r3, [r3, #4]
 80109d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80109dc:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80109de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e0:	2b0f      	cmp	r3, #15
 80109e2:	d909      	bls.n	80109f8 <UART_SetConfig+0xc9c>
 80109e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80109ea:	d205      	bcs.n	80109f8 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80109ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ee:	b29a      	uxth	r2, r3
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	60da      	str	r2, [r3, #12]
 80109f6:	e002      	b.n	80109fe <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80109f8:	2301      	movs	r3, #1
 80109fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	2201      	movs	r2, #1
 8010a02:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8010a06:	697b      	ldr	r3, [r7, #20]
 8010a08:	2201      	movs	r2, #1
 8010a0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010a0e:	697b      	ldr	r3, [r7, #20]
 8010a10:	2200      	movs	r2, #0
 8010a12:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8010a14:	697b      	ldr	r3, [r7, #20]
 8010a16:	2200      	movs	r2, #0
 8010a18:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8010a1a:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3748      	adds	r7, #72	; 0x48
 8010a22:	46bd      	mov	sp, r7
 8010a24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010a28:	03d09000 	.word	0x03d09000
 8010a2c:	003d0900 	.word	0x003d0900
 8010a30:	0801ad18 	.word	0x0801ad18

08010a34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010a34:	b480      	push	{r7}
 8010a36:	b083      	sub	sp, #12
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a40:	f003 0301 	and.w	r3, r3, #1
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d00a      	beq.n	8010a5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	685b      	ldr	r3, [r3, #4]
 8010a4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	430a      	orrs	r2, r1
 8010a5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a62:	f003 0302 	and.w	r3, r3, #2
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d00a      	beq.n	8010a80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	685b      	ldr	r3, [r3, #4]
 8010a70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	430a      	orrs	r2, r1
 8010a7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a84:	f003 0304 	and.w	r3, r3, #4
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d00a      	beq.n	8010aa2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	685b      	ldr	r3, [r3, #4]
 8010a92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	681b      	ldr	r3, [r3, #0]
 8010a9e:	430a      	orrs	r2, r1
 8010aa0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aa6:	f003 0308 	and.w	r3, r3, #8
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d00a      	beq.n	8010ac4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	685b      	ldr	r3, [r3, #4]
 8010ab4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	681b      	ldr	r3, [r3, #0]
 8010ac0:	430a      	orrs	r2, r1
 8010ac2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ac8:	f003 0310 	and.w	r3, r3, #16
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d00a      	beq.n	8010ae6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	681b      	ldr	r3, [r3, #0]
 8010ad4:	689b      	ldr	r3, [r3, #8]
 8010ad6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	430a      	orrs	r2, r1
 8010ae4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010aea:	f003 0320 	and.w	r3, r3, #32
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d00a      	beq.n	8010b08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	689b      	ldr	r3, [r3, #8]
 8010af8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	430a      	orrs	r2, r1
 8010b06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d01a      	beq.n	8010b4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	685b      	ldr	r3, [r3, #4]
 8010b1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	430a      	orrs	r2, r1
 8010b28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010b32:	d10a      	bne.n	8010b4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	685b      	ldr	r3, [r3, #4]
 8010b3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	430a      	orrs	r2, r1
 8010b48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d00a      	beq.n	8010b6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	685b      	ldr	r3, [r3, #4]
 8010b5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	430a      	orrs	r2, r1
 8010b6a:	605a      	str	r2, [r3, #4]
  }
}
 8010b6c:	bf00      	nop
 8010b6e:	370c      	adds	r7, #12
 8010b70:	46bd      	mov	sp, r7
 8010b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b76:	4770      	bx	lr

08010b78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b098      	sub	sp, #96	; 0x60
 8010b7c:	af02      	add	r7, sp, #8
 8010b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	2200      	movs	r2, #0
 8010b84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010b88:	f7f2 feec 	bl	8003964 <HAL_GetTick>
 8010b8c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	f003 0308 	and.w	r3, r3, #8
 8010b98:	2b08      	cmp	r3, #8
 8010b9a:	d12f      	bne.n	8010bfc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010b9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010ba0:	9300      	str	r3, [sp, #0]
 8010ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ba4:	2200      	movs	r2, #0
 8010ba6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010baa:	6878      	ldr	r0, [r7, #4]
 8010bac:	f000 f88e 	bl	8010ccc <UART_WaitOnFlagUntilTimeout>
 8010bb0:	4603      	mov	r3, r0
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d022      	beq.n	8010bfc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	681b      	ldr	r3, [r3, #0]
 8010bba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010bbe:	e853 3f00 	ldrex	r3, [r3]
 8010bc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010bca:	653b      	str	r3, [r7, #80]	; 0x50
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	461a      	mov	r2, r3
 8010bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bd4:	647b      	str	r3, [r7, #68]	; 0x44
 8010bd6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010bd8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010bda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010bdc:	e841 2300 	strex	r3, r2, [r1]
 8010be0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010be2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d1e6      	bne.n	8010bb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2220      	movs	r2, #32
 8010bec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010bf8:	2303      	movs	r3, #3
 8010bfa:	e063      	b.n	8010cc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	681b      	ldr	r3, [r3, #0]
 8010c02:	f003 0304 	and.w	r3, r3, #4
 8010c06:	2b04      	cmp	r3, #4
 8010c08:	d149      	bne.n	8010c9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010c0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010c0e:	9300      	str	r3, [sp, #0]
 8010c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010c12:	2200      	movs	r2, #0
 8010c14:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f000 f857 	bl	8010ccc <UART_WaitOnFlagUntilTimeout>
 8010c1e:	4603      	mov	r3, r0
 8010c20:	2b00      	cmp	r3, #0
 8010c22:	d03c      	beq.n	8010c9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c2c:	e853 3f00 	ldrex	r3, [r3]
 8010c30:	623b      	str	r3, [r7, #32]
   return(result);
 8010c32:	6a3b      	ldr	r3, [r7, #32]
 8010c34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010c38:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	461a      	mov	r2, r3
 8010c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c42:	633b      	str	r3, [r7, #48]	; 0x30
 8010c44:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010c48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c4a:	e841 2300 	strex	r3, r2, [r1]
 8010c4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d1e6      	bne.n	8010c24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	3308      	adds	r3, #8
 8010c5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c5e:	693b      	ldr	r3, [r7, #16]
 8010c60:	e853 3f00 	ldrex	r3, [r3]
 8010c64:	60fb      	str	r3, [r7, #12]
   return(result);
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	f023 0301 	bic.w	r3, r3, #1
 8010c6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8010c6e:	687b      	ldr	r3, [r7, #4]
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	3308      	adds	r3, #8
 8010c74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010c76:	61fa      	str	r2, [r7, #28]
 8010c78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c7a:	69b9      	ldr	r1, [r7, #24]
 8010c7c:	69fa      	ldr	r2, [r7, #28]
 8010c7e:	e841 2300 	strex	r3, r2, [r1]
 8010c82:	617b      	str	r3, [r7, #20]
   return(result);
 8010c84:	697b      	ldr	r3, [r7, #20]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	d1e5      	bne.n	8010c56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	2220      	movs	r2, #32
 8010c8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	2200      	movs	r2, #0
 8010c96:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010c9a:	2303      	movs	r3, #3
 8010c9c:	e012      	b.n	8010cc4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	2220      	movs	r2, #32
 8010ca2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	2220      	movs	r2, #32
 8010caa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	2200      	movs	r2, #0
 8010cb2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010cc2:	2300      	movs	r3, #0
}
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	3758      	adds	r7, #88	; 0x58
 8010cc8:	46bd      	mov	sp, r7
 8010cca:	bd80      	pop	{r7, pc}

08010ccc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010ccc:	b580      	push	{r7, lr}
 8010cce:	b084      	sub	sp, #16
 8010cd0:	af00      	add	r7, sp, #0
 8010cd2:	60f8      	str	r0, [r7, #12]
 8010cd4:	60b9      	str	r1, [r7, #8]
 8010cd6:	603b      	str	r3, [r7, #0]
 8010cd8:	4613      	mov	r3, r2
 8010cda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010cdc:	e049      	b.n	8010d72 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010cde:	69bb      	ldr	r3, [r7, #24]
 8010ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ce4:	d045      	beq.n	8010d72 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010ce6:	f7f2 fe3d 	bl	8003964 <HAL_GetTick>
 8010cea:	4602      	mov	r2, r0
 8010cec:	683b      	ldr	r3, [r7, #0]
 8010cee:	1ad3      	subs	r3, r2, r3
 8010cf0:	69ba      	ldr	r2, [r7, #24]
 8010cf2:	429a      	cmp	r2, r3
 8010cf4:	d302      	bcc.n	8010cfc <UART_WaitOnFlagUntilTimeout+0x30>
 8010cf6:	69bb      	ldr	r3, [r7, #24]
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d101      	bne.n	8010d00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010cfc:	2303      	movs	r3, #3
 8010cfe:	e048      	b.n	8010d92 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	681b      	ldr	r3, [r3, #0]
 8010d06:	f003 0304 	and.w	r3, r3, #4
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d031      	beq.n	8010d72 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	681b      	ldr	r3, [r3, #0]
 8010d12:	69db      	ldr	r3, [r3, #28]
 8010d14:	f003 0308 	and.w	r3, r3, #8
 8010d18:	2b08      	cmp	r3, #8
 8010d1a:	d110      	bne.n	8010d3e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	2208      	movs	r2, #8
 8010d22:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8010d24:	68f8      	ldr	r0, [r7, #12]
 8010d26:	f000 f839 	bl	8010d9c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	2208      	movs	r2, #8
 8010d2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	2200      	movs	r2, #0
 8010d36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8010d3a:	2301      	movs	r3, #1
 8010d3c:	e029      	b.n	8010d92 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	69db      	ldr	r3, [r3, #28]
 8010d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010d4c:	d111      	bne.n	8010d72 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010d56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010d58:	68f8      	ldr	r0, [r7, #12]
 8010d5a:	f000 f81f 	bl	8010d9c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	2220      	movs	r2, #32
 8010d62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	2200      	movs	r2, #0
 8010d6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8010d6e:	2303      	movs	r3, #3
 8010d70:	e00f      	b.n	8010d92 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	69da      	ldr	r2, [r3, #28]
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	4013      	ands	r3, r2
 8010d7c:	68ba      	ldr	r2, [r7, #8]
 8010d7e:	429a      	cmp	r2, r3
 8010d80:	bf0c      	ite	eq
 8010d82:	2301      	moveq	r3, #1
 8010d84:	2300      	movne	r3, #0
 8010d86:	b2db      	uxtb	r3, r3
 8010d88:	461a      	mov	r2, r3
 8010d8a:	79fb      	ldrb	r3, [r7, #7]
 8010d8c:	429a      	cmp	r2, r3
 8010d8e:	d0a6      	beq.n	8010cde <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010d90:	2300      	movs	r3, #0
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3710      	adds	r7, #16
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}
	...

08010d9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	b095      	sub	sp, #84	; 0x54
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	681b      	ldr	r3, [r3, #0]
 8010da8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010dac:	e853 3f00 	ldrex	r3, [r3]
 8010db0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010db4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010db8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	461a      	mov	r2, r3
 8010dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010dc2:	643b      	str	r3, [r7, #64]	; 0x40
 8010dc4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dc6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010dc8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010dca:	e841 2300 	strex	r3, r2, [r1]
 8010dce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d1e6      	bne.n	8010da4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	3308      	adds	r3, #8
 8010ddc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dde:	6a3b      	ldr	r3, [r7, #32]
 8010de0:	e853 3f00 	ldrex	r3, [r3]
 8010de4:	61fb      	str	r3, [r7, #28]
   return(result);
 8010de6:	69fa      	ldr	r2, [r7, #28]
 8010de8:	4b1e      	ldr	r3, [pc, #120]	; (8010e64 <UART_EndRxTransfer+0xc8>)
 8010dea:	4013      	ands	r3, r2
 8010dec:	64bb      	str	r3, [r7, #72]	; 0x48
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	3308      	adds	r3, #8
 8010df4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010df6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010df8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010dfe:	e841 2300 	strex	r3, r2, [r1]
 8010e02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d1e5      	bne.n	8010dd6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e0e:	2b01      	cmp	r3, #1
 8010e10:	d118      	bne.n	8010e44 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	e853 3f00 	ldrex	r3, [r3]
 8010e1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010e20:	68bb      	ldr	r3, [r7, #8]
 8010e22:	f023 0310 	bic.w	r3, r3, #16
 8010e26:	647b      	str	r3, [r7, #68]	; 0x44
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	461a      	mov	r2, r3
 8010e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e30:	61bb      	str	r3, [r7, #24]
 8010e32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e34:	6979      	ldr	r1, [r7, #20]
 8010e36:	69ba      	ldr	r2, [r7, #24]
 8010e38:	e841 2300 	strex	r3, r2, [r1]
 8010e3c:	613b      	str	r3, [r7, #16]
   return(result);
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d1e6      	bne.n	8010e12 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	2220      	movs	r2, #32
 8010e48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2200      	movs	r2, #0
 8010e50:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2200      	movs	r2, #0
 8010e56:	675a      	str	r2, [r3, #116]	; 0x74
}
 8010e58:	bf00      	nop
 8010e5a:	3754      	adds	r7, #84	; 0x54
 8010e5c:	46bd      	mov	sp, r7
 8010e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e62:	4770      	bx	lr
 8010e64:	effffffe 	.word	0xeffffffe

08010e68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b085      	sub	sp, #20
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010e76:	2b01      	cmp	r3, #1
 8010e78:	d101      	bne.n	8010e7e <HAL_UARTEx_DisableFifoMode+0x16>
 8010e7a:	2302      	movs	r3, #2
 8010e7c:	e027      	b.n	8010ece <HAL_UARTEx_DisableFifoMode+0x66>
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2201      	movs	r2, #1
 8010e82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	2224      	movs	r2, #36	; 0x24
 8010e8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	681a      	ldr	r2, [r3, #0]
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	f022 0201 	bic.w	r2, r2, #1
 8010ea4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010ea6:	68fb      	ldr	r3, [r7, #12]
 8010ea8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010eac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	68fa      	ldr	r2, [r7, #12]
 8010eba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	2220      	movs	r2, #32
 8010ec0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	2200      	movs	r2, #0
 8010ec8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010ecc:	2300      	movs	r3, #0
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3714      	adds	r7, #20
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed8:	4770      	bx	lr

08010eda <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010eda:	b580      	push	{r7, lr}
 8010edc:	b084      	sub	sp, #16
 8010ede:	af00      	add	r7, sp, #0
 8010ee0:	6078      	str	r0, [r7, #4]
 8010ee2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010eea:	2b01      	cmp	r3, #1
 8010eec:	d101      	bne.n	8010ef2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010eee:	2302      	movs	r3, #2
 8010ef0:	e02d      	b.n	8010f4e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	2201      	movs	r2, #1
 8010ef6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2224      	movs	r2, #36	; 0x24
 8010efe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	681b      	ldr	r3, [r3, #0]
 8010f08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	681a      	ldr	r2, [r3, #0]
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	f022 0201 	bic.w	r2, r2, #1
 8010f18:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	681b      	ldr	r3, [r3, #0]
 8010f1e:	689b      	ldr	r3, [r3, #8]
 8010f20:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	683a      	ldr	r2, [r7, #0]
 8010f2a:	430a      	orrs	r2, r1
 8010f2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010f2e:	6878      	ldr	r0, [r7, #4]
 8010f30:	f000 f850 	bl	8010fd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	68fa      	ldr	r2, [r7, #12]
 8010f3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	2220      	movs	r2, #32
 8010f40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	2200      	movs	r2, #0
 8010f48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010f4c:	2300      	movs	r3, #0
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3710      	adds	r7, #16
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}

08010f56 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010f56:	b580      	push	{r7, lr}
 8010f58:	b084      	sub	sp, #16
 8010f5a:	af00      	add	r7, sp, #0
 8010f5c:	6078      	str	r0, [r7, #4]
 8010f5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8010f66:	2b01      	cmp	r3, #1
 8010f68:	d101      	bne.n	8010f6e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010f6a:	2302      	movs	r3, #2
 8010f6c:	e02d      	b.n	8010fca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2201      	movs	r2, #1
 8010f72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2224      	movs	r2, #36	; 0x24
 8010f7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010f7e:	687b      	ldr	r3, [r7, #4]
 8010f80:	681b      	ldr	r3, [r3, #0]
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	681a      	ldr	r2, [r3, #0]
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	681b      	ldr	r3, [r3, #0]
 8010f90:	f022 0201 	bic.w	r2, r2, #1
 8010f94:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	689b      	ldr	r3, [r3, #8]
 8010f9c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	683a      	ldr	r2, [r7, #0]
 8010fa6:	430a      	orrs	r2, r1
 8010fa8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010faa:	6878      	ldr	r0, [r7, #4]
 8010fac:	f000 f812 	bl	8010fd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	68fa      	ldr	r2, [r7, #12]
 8010fb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	2220      	movs	r2, #32
 8010fbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8010fc8:	2300      	movs	r3, #0
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3710      	adds	r7, #16
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
	...

08010fd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b085      	sub	sp, #20
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d108      	bne.n	8010ff6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	2201      	movs	r2, #1
 8010fe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2201      	movs	r2, #1
 8010ff0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010ff4:	e031      	b.n	801105a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010ff6:	2310      	movs	r3, #16
 8010ff8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010ffa:	2310      	movs	r3, #16
 8010ffc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	689b      	ldr	r3, [r3, #8]
 8011004:	0e5b      	lsrs	r3, r3, #25
 8011006:	b2db      	uxtb	r3, r3
 8011008:	f003 0307 	and.w	r3, r3, #7
 801100c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	689b      	ldr	r3, [r3, #8]
 8011014:	0f5b      	lsrs	r3, r3, #29
 8011016:	b2db      	uxtb	r3, r3
 8011018:	f003 0307 	and.w	r3, r3, #7
 801101c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801101e:	7bbb      	ldrb	r3, [r7, #14]
 8011020:	7b3a      	ldrb	r2, [r7, #12]
 8011022:	4911      	ldr	r1, [pc, #68]	; (8011068 <UARTEx_SetNbDataToProcess+0x94>)
 8011024:	5c8a      	ldrb	r2, [r1, r2]
 8011026:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801102a:	7b3a      	ldrb	r2, [r7, #12]
 801102c:	490f      	ldr	r1, [pc, #60]	; (801106c <UARTEx_SetNbDataToProcess+0x98>)
 801102e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011030:	fb93 f3f2 	sdiv	r3, r3, r2
 8011034:	b29a      	uxth	r2, r3
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801103c:	7bfb      	ldrb	r3, [r7, #15]
 801103e:	7b7a      	ldrb	r2, [r7, #13]
 8011040:	4909      	ldr	r1, [pc, #36]	; (8011068 <UARTEx_SetNbDataToProcess+0x94>)
 8011042:	5c8a      	ldrb	r2, [r1, r2]
 8011044:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011048:	7b7a      	ldrb	r2, [r7, #13]
 801104a:	4908      	ldr	r1, [pc, #32]	; (801106c <UARTEx_SetNbDataToProcess+0x98>)
 801104c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801104e:	fb93 f3f2 	sdiv	r3, r3, r2
 8011052:	b29a      	uxth	r2, r3
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801105a:	bf00      	nop
 801105c:	3714      	adds	r7, #20
 801105e:	46bd      	mov	sp, r7
 8011060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011064:	4770      	bx	lr
 8011066:	bf00      	nop
 8011068:	0801ad30 	.word	0x0801ad30
 801106c:	0801ad38 	.word	0x0801ad38

08011070 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011070:	b084      	sub	sp, #16
 8011072:	b480      	push	{r7}
 8011074:	b085      	sub	sp, #20
 8011076:	af00      	add	r7, sp, #0
 8011078:	6078      	str	r0, [r7, #4]
 801107a:	f107 001c 	add.w	r0, r7, #28
 801107e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011082:	2300      	movs	r3, #0
 8011084:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011086:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011088:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 801108a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 801108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 801108e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011090:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011092:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011096:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011098:	68fa      	ldr	r2, [r7, #12]
 801109a:	4313      	orrs	r3, r2
 801109c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	685a      	ldr	r2, [r3, #4]
 80110a2:	4b07      	ldr	r3, [pc, #28]	; (80110c0 <SDMMC_Init+0x50>)
 80110a4:	4013      	ands	r3, r2
 80110a6:	68fa      	ldr	r2, [r7, #12]
 80110a8:	431a      	orrs	r2, r3
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80110ae:	2300      	movs	r3, #0
}
 80110b0:	4618      	mov	r0, r3
 80110b2:	3714      	adds	r7, #20
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	b004      	add	sp, #16
 80110bc:	4770      	bx	lr
 80110be:	bf00      	nop
 80110c0:	ffc02c00 	.word	0xffc02c00

080110c4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80110c4:	b480      	push	{r7}
 80110c6:	b083      	sub	sp, #12
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	370c      	adds	r7, #12
 80110d6:	46bd      	mov	sp, r7
 80110d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110dc:	4770      	bx	lr

080110de <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80110de:	b480      	push	{r7}
 80110e0:	b083      	sub	sp, #12
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	6078      	str	r0, [r7, #4]
 80110e6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	681a      	ldr	r2, [r3, #0]
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80110f2:	2300      	movs	r3, #0
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	370c      	adds	r7, #12
 80110f8:	46bd      	mov	sp, r7
 80110fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110fe:	4770      	bx	lr

08011100 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011100:	b480      	push	{r7}
 8011102:	b083      	sub	sp, #12
 8011104:	af00      	add	r7, sp, #0
 8011106:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	681b      	ldr	r3, [r3, #0]
 801110c:	f043 0203 	orr.w	r2, r3, #3
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011114:	2300      	movs	r3, #0
}
 8011116:	4618      	mov	r0, r3
 8011118:	370c      	adds	r7, #12
 801111a:	46bd      	mov	sp, r7
 801111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011120:	4770      	bx	lr

08011122 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011122:	b480      	push	{r7}
 8011124:	b083      	sub	sp, #12
 8011126:	af00      	add	r7, sp, #0
 8011128:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	f003 0303 	and.w	r3, r3, #3
}
 8011132:	4618      	mov	r0, r3
 8011134:	370c      	adds	r7, #12
 8011136:	46bd      	mov	sp, r7
 8011138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801113c:	4770      	bx	lr
	...

08011140 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011140:	b480      	push	{r7}
 8011142:	b085      	sub	sp, #20
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801114a:	2300      	movs	r3, #0
 801114c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	681a      	ldr	r2, [r3, #0]
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 801115a:	683b      	ldr	r3, [r7, #0]
 801115c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801115e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011164:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 801116a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 801116c:	68fa      	ldr	r2, [r7, #12]
 801116e:	4313      	orrs	r3, r2
 8011170:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	68da      	ldr	r2, [r3, #12]
 8011176:	4b06      	ldr	r3, [pc, #24]	; (8011190 <SDMMC_SendCommand+0x50>)
 8011178:	4013      	ands	r3, r2
 801117a:	68fa      	ldr	r2, [r7, #12]
 801117c:	431a      	orrs	r2, r3
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011182:	2300      	movs	r3, #0
}
 8011184:	4618      	mov	r0, r3
 8011186:	3714      	adds	r7, #20
 8011188:	46bd      	mov	sp, r7
 801118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118e:	4770      	bx	lr
 8011190:	fffee0c0 	.word	0xfffee0c0

08011194 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011194:	b480      	push	{r7}
 8011196:	b083      	sub	sp, #12
 8011198:	af00      	add	r7, sp, #0
 801119a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	691b      	ldr	r3, [r3, #16]
 80111a0:	b2db      	uxtb	r3, r3
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	370c      	adds	r7, #12
 80111a6:	46bd      	mov	sp, r7
 80111a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ac:	4770      	bx	lr

080111ae <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80111ae:	b480      	push	{r7}
 80111b0:	b085      	sub	sp, #20
 80111b2:	af00      	add	r7, sp, #0
 80111b4:	6078      	str	r0, [r7, #4]
 80111b6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	3314      	adds	r3, #20
 80111bc:	461a      	mov	r2, r3
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	4413      	add	r3, r2
 80111c2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	681b      	ldr	r3, [r3, #0]
}
 80111c8:	4618      	mov	r0, r3
 80111ca:	3714      	adds	r7, #20
 80111cc:	46bd      	mov	sp, r7
 80111ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d2:	4770      	bx	lr

080111d4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 80111d4:	b480      	push	{r7}
 80111d6:	b085      	sub	sp, #20
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
 80111dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80111de:	2300      	movs	r3, #0
 80111e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	681a      	ldr	r2, [r3, #0]
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	685a      	ldr	r2, [r3, #4]
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80111f2:	683b      	ldr	r3, [r7, #0]
 80111f4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 80111f6:	683b      	ldr	r3, [r7, #0]
 80111f8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80111fa:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011200:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011202:	683b      	ldr	r3, [r7, #0]
 8011204:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8011206:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011208:	68fa      	ldr	r2, [r7, #12]
 801120a:	4313      	orrs	r3, r2
 801120c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011212:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	431a      	orrs	r2, r3
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801121e:	2300      	movs	r3, #0

}
 8011220:	4618      	mov	r0, r3
 8011222:	3714      	adds	r7, #20
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr

0801122c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 801122c:	b580      	push	{r7, lr}
 801122e:	b088      	sub	sp, #32
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
 8011234:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 801123a:	2310      	movs	r3, #16
 801123c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801123e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011242:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011244:	2300      	movs	r3, #0
 8011246:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801124c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801124e:	f107 0308 	add.w	r3, r7, #8
 8011252:	4619      	mov	r1, r3
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f7ff ff73 	bl	8011140 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 801125a:	f241 3288 	movw	r2, #5000	; 0x1388
 801125e:	2110      	movs	r1, #16
 8011260:	6878      	ldr	r0, [r7, #4]
 8011262:	f000 fa5f 	bl	8011724 <SDMMC_GetCmdResp1>
 8011266:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011268:	69fb      	ldr	r3, [r7, #28]
}
 801126a:	4618      	mov	r0, r3
 801126c:	3720      	adds	r7, #32
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}

08011272 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011272:	b580      	push	{r7, lr}
 8011274:	b088      	sub	sp, #32
 8011276:	af00      	add	r7, sp, #0
 8011278:	6078      	str	r0, [r7, #4]
 801127a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801127c:	683b      	ldr	r3, [r7, #0]
 801127e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011280:	2311      	movs	r3, #17
 8011282:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011284:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801128a:	2300      	movs	r3, #0
 801128c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801128e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011292:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011294:	f107 0308 	add.w	r3, r7, #8
 8011298:	4619      	mov	r1, r3
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	f7ff ff50 	bl	8011140 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80112a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80112a4:	2111      	movs	r1, #17
 80112a6:	6878      	ldr	r0, [r7, #4]
 80112a8:	f000 fa3c 	bl	8011724 <SDMMC_GetCmdResp1>
 80112ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112ae:	69fb      	ldr	r3, [r7, #28]
}
 80112b0:	4618      	mov	r0, r3
 80112b2:	3720      	adds	r7, #32
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}

080112b8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b088      	sub	sp, #32
 80112bc:	af00      	add	r7, sp, #0
 80112be:	6078      	str	r0, [r7, #4]
 80112c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80112c2:	683b      	ldr	r3, [r7, #0]
 80112c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80112c6:	2312      	movs	r3, #18
 80112c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112d0:	2300      	movs	r3, #0
 80112d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112da:	f107 0308 	add.w	r3, r7, #8
 80112de:	4619      	mov	r1, r3
 80112e0:	6878      	ldr	r0, [r7, #4]
 80112e2:	f7ff ff2d 	bl	8011140 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 80112e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80112ea:	2112      	movs	r1, #18
 80112ec:	6878      	ldr	r0, [r7, #4]
 80112ee:	f000 fa19 	bl	8011724 <SDMMC_GetCmdResp1>
 80112f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80112f4:	69fb      	ldr	r3, [r7, #28]
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3720      	adds	r7, #32
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}

080112fe <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80112fe:	b580      	push	{r7, lr}
 8011300:	b088      	sub	sp, #32
 8011302:	af00      	add	r7, sp, #0
 8011304:	6078      	str	r0, [r7, #4]
 8011306:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 801130c:	2318      	movs	r3, #24
 801130e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011314:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011316:	2300      	movs	r3, #0
 8011318:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801131a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801131e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011320:	f107 0308 	add.w	r3, r7, #8
 8011324:	4619      	mov	r1, r3
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	f7ff ff0a 	bl	8011140 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801132c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011330:	2118      	movs	r1, #24
 8011332:	6878      	ldr	r0, [r7, #4]
 8011334:	f000 f9f6 	bl	8011724 <SDMMC_GetCmdResp1>
 8011338:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801133a:	69fb      	ldr	r3, [r7, #28]
}
 801133c:	4618      	mov	r0, r3
 801133e:	3720      	adds	r7, #32
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}

08011344 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011344:	b580      	push	{r7, lr}
 8011346:	b088      	sub	sp, #32
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
 801134c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011352:	2319      	movs	r3, #25
 8011354:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011356:	f44f 7380 	mov.w	r3, #256	; 0x100
 801135a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801135c:	2300      	movs	r3, #0
 801135e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011360:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011364:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011366:	f107 0308 	add.w	r3, r7, #8
 801136a:	4619      	mov	r1, r3
 801136c:	6878      	ldr	r0, [r7, #4]
 801136e:	f7ff fee7 	bl	8011140 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011372:	f241 3288 	movw	r2, #5000	; 0x1388
 8011376:	2119      	movs	r1, #25
 8011378:	6878      	ldr	r0, [r7, #4]
 801137a:	f000 f9d3 	bl	8011724 <SDMMC_GetCmdResp1>
 801137e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011380:	69fb      	ldr	r3, [r7, #28]
}
 8011382:	4618      	mov	r0, r3
 8011384:	3720      	adds	r7, #32
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}
	...

0801138c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b088      	sub	sp, #32
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011394:	2300      	movs	r3, #0
 8011396:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011398:	230c      	movs	r3, #12
 801139a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801139c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80113a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113a2:	2300      	movs	r3, #0
 80113a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113aa:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	68db      	ldr	r3, [r3, #12]
 80113b0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	68db      	ldr	r3, [r3, #12]
 80113bc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113c4:	f107 0308 	add.w	r3, r7, #8
 80113c8:	4619      	mov	r1, r3
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	f7ff feb8 	bl	8011140 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80113d0:	4a0b      	ldr	r2, [pc, #44]	; (8011400 <SDMMC_CmdStopTransfer+0x74>)
 80113d2:	210c      	movs	r1, #12
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f000 f9a5 	bl	8011724 <SDMMC_GetCmdResp1>
 80113da:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	68db      	ldr	r3, [r3, #12]
 80113e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80113e8:	69fb      	ldr	r3, [r7, #28]
 80113ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80113ee:	d101      	bne.n	80113f4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80113f0:	2300      	movs	r3, #0
 80113f2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80113f4:	69fb      	ldr	r3, [r7, #28]
}
 80113f6:	4618      	mov	r0, r3
 80113f8:	3720      	adds	r7, #32
 80113fa:	46bd      	mov	sp, r7
 80113fc:	bd80      	pop	{r7, pc}
 80113fe:	bf00      	nop
 8011400:	05f5e100 	.word	0x05f5e100

08011404 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b088      	sub	sp, #32
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
 801140c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011412:	2307      	movs	r3, #7
 8011414:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011416:	f44f 7380 	mov.w	r3, #256	; 0x100
 801141a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801141c:	2300      	movs	r3, #0
 801141e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011420:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011424:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011426:	f107 0308 	add.w	r3, r7, #8
 801142a:	4619      	mov	r1, r3
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f7ff fe87 	bl	8011140 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011432:	f241 3288 	movw	r2, #5000	; 0x1388
 8011436:	2107      	movs	r1, #7
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f000 f973 	bl	8011724 <SDMMC_GetCmdResp1>
 801143e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011440:	69fb      	ldr	r3, [r7, #28]
}
 8011442:	4618      	mov	r0, r3
 8011444:	3720      	adds	r7, #32
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}

0801144a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 801144a:	b580      	push	{r7, lr}
 801144c:	b088      	sub	sp, #32
 801144e:	af00      	add	r7, sp, #0
 8011450:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011452:	2300      	movs	r3, #0
 8011454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011456:	2300      	movs	r3, #0
 8011458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 801145a:	2300      	movs	r3, #0
 801145c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801145e:	2300      	movs	r3, #0
 8011460:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011462:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011466:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011468:	f107 0308 	add.w	r3, r7, #8
 801146c:	4619      	mov	r1, r3
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f7ff fe66 	bl	8011140 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f000 fb97 	bl	8011ba8 <SDMMC_GetCmdError>
 801147a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801147c:	69fb      	ldr	r3, [r7, #28]
}
 801147e:	4618      	mov	r0, r3
 8011480:	3720      	adds	r7, #32
 8011482:	46bd      	mov	sp, r7
 8011484:	bd80      	pop	{r7, pc}

08011486 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011486:	b580      	push	{r7, lr}
 8011488:	b088      	sub	sp, #32
 801148a:	af00      	add	r7, sp, #0
 801148c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801148e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011492:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011494:	2308      	movs	r3, #8
 8011496:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011498:	f44f 7380 	mov.w	r3, #256	; 0x100
 801149c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801149e:	2300      	movs	r3, #0
 80114a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114a8:	f107 0308 	add.w	r3, r7, #8
 80114ac:	4619      	mov	r1, r3
 80114ae:	6878      	ldr	r0, [r7, #4]
 80114b0:	f7ff fe46 	bl	8011140 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80114b4:	6878      	ldr	r0, [r7, #4]
 80114b6:	f000 fb29 	bl	8011b0c <SDMMC_GetCmdResp7>
 80114ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114bc:	69fb      	ldr	r3, [r7, #28]
}
 80114be:	4618      	mov	r0, r3
 80114c0:	3720      	adds	r7, #32
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}

080114c6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80114c6:	b580      	push	{r7, lr}
 80114c8:	b088      	sub	sp, #32
 80114ca:	af00      	add	r7, sp, #0
 80114cc:	6078      	str	r0, [r7, #4]
 80114ce:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80114d0:	683b      	ldr	r3, [r7, #0]
 80114d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80114d4:	2337      	movs	r3, #55	; 0x37
 80114d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80114d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80114dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80114de:	2300      	movs	r3, #0
 80114e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114e8:	f107 0308 	add.w	r3, r7, #8
 80114ec:	4619      	mov	r1, r3
 80114ee:	6878      	ldr	r0, [r7, #4]
 80114f0:	f7ff fe26 	bl	8011140 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80114f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80114f8:	2137      	movs	r1, #55	; 0x37
 80114fa:	6878      	ldr	r0, [r7, #4]
 80114fc:	f000 f912 	bl	8011724 <SDMMC_GetCmdResp1>
 8011500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011502:	69fb      	ldr	r3, [r7, #28]
}
 8011504:	4618      	mov	r0, r3
 8011506:	3720      	adds	r7, #32
 8011508:	46bd      	mov	sp, r7
 801150a:	bd80      	pop	{r7, pc}

0801150c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b088      	sub	sp, #32
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
 8011514:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011516:	683b      	ldr	r3, [r7, #0]
 8011518:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 801151a:	2329      	movs	r3, #41	; 0x29
 801151c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801151e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011522:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011524:	2300      	movs	r3, #0
 8011526:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801152c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801152e:	f107 0308 	add.w	r3, r7, #8
 8011532:	4619      	mov	r1, r3
 8011534:	6878      	ldr	r0, [r7, #4]
 8011536:	f7ff fe03 	bl	8011140 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 801153a:	6878      	ldr	r0, [r7, #4]
 801153c:	f000 fa2e 	bl	801199c <SDMMC_GetCmdResp3>
 8011540:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011542:	69fb      	ldr	r3, [r7, #28]
}
 8011544:	4618      	mov	r0, r3
 8011546:	3720      	adds	r7, #32
 8011548:	46bd      	mov	sp, r7
 801154a:	bd80      	pop	{r7, pc}

0801154c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801154c:	b580      	push	{r7, lr}
 801154e:	b088      	sub	sp, #32
 8011550:	af00      	add	r7, sp, #0
 8011552:	6078      	str	r0, [r7, #4]
 8011554:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011556:	683b      	ldr	r3, [r7, #0]
 8011558:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 801155a:	2306      	movs	r3, #6
 801155c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801155e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011562:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011564:	2300      	movs	r3, #0
 8011566:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801156c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801156e:	f107 0308 	add.w	r3, r7, #8
 8011572:	4619      	mov	r1, r3
 8011574:	6878      	ldr	r0, [r7, #4]
 8011576:	f7ff fde3 	bl	8011140 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 801157a:	f241 3288 	movw	r2, #5000	; 0x1388
 801157e:	2106      	movs	r1, #6
 8011580:	6878      	ldr	r0, [r7, #4]
 8011582:	f000 f8cf 	bl	8011724 <SDMMC_GetCmdResp1>
 8011586:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011588:	69fb      	ldr	r3, [r7, #28]
}
 801158a:	4618      	mov	r0, r3
 801158c:	3720      	adds	r7, #32
 801158e:	46bd      	mov	sp, r7
 8011590:	bd80      	pop	{r7, pc}

08011592 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011592:	b580      	push	{r7, lr}
 8011594:	b088      	sub	sp, #32
 8011596:	af00      	add	r7, sp, #0
 8011598:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801159a:	2300      	movs	r3, #0
 801159c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801159e:	2333      	movs	r3, #51	; 0x33
 80115a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80115a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80115a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80115a8:	2300      	movs	r3, #0
 80115aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80115ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80115b2:	f107 0308 	add.w	r3, r7, #8
 80115b6:	4619      	mov	r1, r3
 80115b8:	6878      	ldr	r0, [r7, #4]
 80115ba:	f7ff fdc1 	bl	8011140 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80115be:	f241 3288 	movw	r2, #5000	; 0x1388
 80115c2:	2133      	movs	r1, #51	; 0x33
 80115c4:	6878      	ldr	r0, [r7, #4]
 80115c6:	f000 f8ad 	bl	8011724 <SDMMC_GetCmdResp1>
 80115ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115cc:	69fb      	ldr	r3, [r7, #28]
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	3720      	adds	r7, #32
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bd80      	pop	{r7, pc}

080115d6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80115d6:	b580      	push	{r7, lr}
 80115d8:	b088      	sub	sp, #32
 80115da:	af00      	add	r7, sp, #0
 80115dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80115de:	2300      	movs	r3, #0
 80115e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80115e2:	2302      	movs	r3, #2
 80115e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80115e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80115ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80115ec:	2300      	movs	r3, #0
 80115ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80115f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80115f6:	f107 0308 	add.w	r3, r7, #8
 80115fa:	4619      	mov	r1, r3
 80115fc:	6878      	ldr	r0, [r7, #4]
 80115fe:	f7ff fd9f 	bl	8011140 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011602:	6878      	ldr	r0, [r7, #4]
 8011604:	f000 f980 	bl	8011908 <SDMMC_GetCmdResp2>
 8011608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801160a:	69fb      	ldr	r3, [r7, #28]
}
 801160c:	4618      	mov	r0, r3
 801160e:	3720      	adds	r7, #32
 8011610:	46bd      	mov	sp, r7
 8011612:	bd80      	pop	{r7, pc}

08011614 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011614:	b580      	push	{r7, lr}
 8011616:	b088      	sub	sp, #32
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
 801161c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011622:	2309      	movs	r3, #9
 8011624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011626:	f44f 7340 	mov.w	r3, #768	; 0x300
 801162a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801162c:	2300      	movs	r3, #0
 801162e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011634:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011636:	f107 0308 	add.w	r3, r7, #8
 801163a:	4619      	mov	r1, r3
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f7ff fd7f 	bl	8011140 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011642:	6878      	ldr	r0, [r7, #4]
 8011644:	f000 f960 	bl	8011908 <SDMMC_GetCmdResp2>
 8011648:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801164a:	69fb      	ldr	r3, [r7, #28]
}
 801164c:	4618      	mov	r0, r3
 801164e:	3720      	adds	r7, #32
 8011650:	46bd      	mov	sp, r7
 8011652:	bd80      	pop	{r7, pc}

08011654 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b088      	sub	sp, #32
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
 801165c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801165e:	2300      	movs	r3, #0
 8011660:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011662:	2303      	movs	r3, #3
 8011664:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011666:	f44f 7380 	mov.w	r3, #256	; 0x100
 801166a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801166c:	2300      	movs	r3, #0
 801166e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011674:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011676:	f107 0308 	add.w	r3, r7, #8
 801167a:	4619      	mov	r1, r3
 801167c:	6878      	ldr	r0, [r7, #4]
 801167e:	f7ff fd5f 	bl	8011140 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011682:	683a      	ldr	r2, [r7, #0]
 8011684:	2103      	movs	r1, #3
 8011686:	6878      	ldr	r0, [r7, #4]
 8011688:	f000 f9c8 	bl	8011a1c <SDMMC_GetCmdResp6>
 801168c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801168e:	69fb      	ldr	r3, [r7, #28]
}
 8011690:	4618      	mov	r0, r3
 8011692:	3720      	adds	r7, #32
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}

08011698 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b088      	sub	sp, #32
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
 80116a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80116a2:	683b      	ldr	r3, [r7, #0]
 80116a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80116a6:	230d      	movs	r3, #13
 80116a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80116aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80116ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80116b0:	2300      	movs	r3, #0
 80116b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80116b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80116b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80116ba:	f107 0308 	add.w	r3, r7, #8
 80116be:	4619      	mov	r1, r3
 80116c0:	6878      	ldr	r0, [r7, #4]
 80116c2:	f7ff fd3d 	bl	8011140 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80116c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80116ca:	210d      	movs	r1, #13
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f000 f829 	bl	8011724 <SDMMC_GetCmdResp1>
 80116d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80116d4:	69fb      	ldr	r3, [r7, #28]
}
 80116d6:	4618      	mov	r0, r3
 80116d8:	3720      	adds	r7, #32
 80116da:	46bd      	mov	sp, r7
 80116dc:	bd80      	pop	{r7, pc}

080116de <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80116de:	b580      	push	{r7, lr}
 80116e0:	b088      	sub	sp, #32
 80116e2:	af00      	add	r7, sp, #0
 80116e4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80116e6:	2300      	movs	r3, #0
 80116e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80116ea:	230d      	movs	r3, #13
 80116ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80116ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80116f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80116f4:	2300      	movs	r3, #0
 80116f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80116f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80116fc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80116fe:	f107 0308 	add.w	r3, r7, #8
 8011702:	4619      	mov	r1, r3
 8011704:	6878      	ldr	r0, [r7, #4]
 8011706:	f7ff fd1b 	bl	8011140 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 801170a:	f241 3288 	movw	r2, #5000	; 0x1388
 801170e:	210d      	movs	r1, #13
 8011710:	6878      	ldr	r0, [r7, #4]
 8011712:	f000 f807 	bl	8011724 <SDMMC_GetCmdResp1>
 8011716:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011718:	69fb      	ldr	r3, [r7, #28]
}
 801171a:	4618      	mov	r0, r3
 801171c:	3720      	adds	r7, #32
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}
	...

08011724 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b088      	sub	sp, #32
 8011728:	af00      	add	r7, sp, #0
 801172a:	60f8      	str	r0, [r7, #12]
 801172c:	460b      	mov	r3, r1
 801172e:	607a      	str	r2, [r7, #4]
 8011730:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8011732:	4b70      	ldr	r3, [pc, #448]	; (80118f4 <SDMMC_GetCmdResp1+0x1d0>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	4a70      	ldr	r2, [pc, #448]	; (80118f8 <SDMMC_GetCmdResp1+0x1d4>)
 8011738:	fba2 2303 	umull	r2, r3, r2, r3
 801173c:	0a5a      	lsrs	r2, r3, #9
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	fb02 f303 	mul.w	r3, r2, r3
 8011744:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011746:	69fb      	ldr	r3, [r7, #28]
 8011748:	1e5a      	subs	r2, r3, #1
 801174a:	61fa      	str	r2, [r7, #28]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d102      	bne.n	8011756 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011750:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011754:	e0c9      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801175a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801175c:	69ba      	ldr	r2, [r7, #24]
 801175e:	4b67      	ldr	r3, [pc, #412]	; (80118fc <SDMMC_GetCmdResp1+0x1d8>)
 8011760:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011762:	2b00      	cmp	r3, #0
 8011764:	d0ef      	beq.n	8011746 <SDMMC_GetCmdResp1+0x22>
 8011766:	69bb      	ldr	r3, [r7, #24]
 8011768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801176c:	2b00      	cmp	r3, #0
 801176e:	d1ea      	bne.n	8011746 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011774:	f003 0304 	and.w	r3, r3, #4
 8011778:	2b00      	cmp	r3, #0
 801177a:	d004      	beq.n	8011786 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	2204      	movs	r2, #4
 8011780:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011782:	2304      	movs	r3, #4
 8011784:	e0b1      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801178a:	f003 0301 	and.w	r3, r3, #1
 801178e:	2b00      	cmp	r3, #0
 8011790:	d004      	beq.n	801179c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	2201      	movs	r2, #1
 8011796:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011798:	2301      	movs	r3, #1
 801179a:	e0a6      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	4a58      	ldr	r2, [pc, #352]	; (8011900 <SDMMC_GetCmdResp1+0x1dc>)
 80117a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80117a2:	68f8      	ldr	r0, [r7, #12]
 80117a4:	f7ff fcf6 	bl	8011194 <SDMMC_GetCommandResponse>
 80117a8:	4603      	mov	r3, r0
 80117aa:	461a      	mov	r2, r3
 80117ac:	7afb      	ldrb	r3, [r7, #11]
 80117ae:	4293      	cmp	r3, r2
 80117b0:	d001      	beq.n	80117b6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80117b2:	2301      	movs	r3, #1
 80117b4:	e099      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80117b6:	2100      	movs	r1, #0
 80117b8:	68f8      	ldr	r0, [r7, #12]
 80117ba:	f7ff fcf8 	bl	80111ae <SDMMC_GetResponse>
 80117be:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80117c0:	697a      	ldr	r2, [r7, #20]
 80117c2:	4b50      	ldr	r3, [pc, #320]	; (8011904 <SDMMC_GetCmdResp1+0x1e0>)
 80117c4:	4013      	ands	r3, r2
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d101      	bne.n	80117ce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80117ca:	2300      	movs	r3, #0
 80117cc:	e08d      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80117ce:	697b      	ldr	r3, [r7, #20]
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	da02      	bge.n	80117da <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80117d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80117d8:	e087      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80117da:	697b      	ldr	r3, [r7, #20]
 80117dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d001      	beq.n	80117e8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80117e4:	2340      	movs	r3, #64	; 0x40
 80117e6:	e080      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d001      	beq.n	80117f6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80117f2:	2380      	movs	r3, #128	; 0x80
 80117f4:	e079      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80117f6:	697b      	ldr	r3, [r7, #20]
 80117f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d002      	beq.n	8011806 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8011800:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011804:	e071      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011806:	697b      	ldr	r3, [r7, #20]
 8011808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801180c:	2b00      	cmp	r3, #0
 801180e:	d002      	beq.n	8011816 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011814:	e069      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8011816:	697b      	ldr	r3, [r7, #20]
 8011818:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801181c:	2b00      	cmp	r3, #0
 801181e:	d002      	beq.n	8011826 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011824:	e061      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801182c:	2b00      	cmp	r3, #0
 801182e:	d002      	beq.n	8011836 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8011830:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011834:	e059      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011836:	697b      	ldr	r3, [r7, #20]
 8011838:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801183c:	2b00      	cmp	r3, #0
 801183e:	d002      	beq.n	8011846 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011844:	e051      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011846:	697b      	ldr	r3, [r7, #20]
 8011848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801184c:	2b00      	cmp	r3, #0
 801184e:	d002      	beq.n	8011856 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011850:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011854:	e049      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011856:	697b      	ldr	r3, [r7, #20]
 8011858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801185c:	2b00      	cmp	r3, #0
 801185e:	d002      	beq.n	8011866 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011860:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011864:	e041      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011866:	697b      	ldr	r3, [r7, #20]
 8011868:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801186c:	2b00      	cmp	r3, #0
 801186e:	d002      	beq.n	8011876 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8011870:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011874:	e039      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801187c:	2b00      	cmp	r3, #0
 801187e:	d002      	beq.n	8011886 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011880:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011884:	e031      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011886:	697b      	ldr	r3, [r7, #20]
 8011888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801188c:	2b00      	cmp	r3, #0
 801188e:	d002      	beq.n	8011896 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011890:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011894:	e029      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011896:	697b      	ldr	r3, [r7, #20]
 8011898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801189c:	2b00      	cmp	r3, #0
 801189e:	d002      	beq.n	80118a6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80118a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80118a4:	e021      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80118a6:	697b      	ldr	r3, [r7, #20]
 80118a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d002      	beq.n	80118b6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80118b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80118b4:	e019      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80118b6:	697b      	ldr	r3, [r7, #20]
 80118b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d002      	beq.n	80118c6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80118c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80118c4:	e011      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80118c6:	697b      	ldr	r3, [r7, #20]
 80118c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d002      	beq.n	80118d6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80118d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80118d4:	e009      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80118d6:	697b      	ldr	r3, [r7, #20]
 80118d8:	f003 0308 	and.w	r3, r3, #8
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d002      	beq.n	80118e6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80118e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80118e4:	e001      	b.n	80118ea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80118e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80118ea:	4618      	mov	r0, r3
 80118ec:	3720      	adds	r7, #32
 80118ee:	46bd      	mov	sp, r7
 80118f0:	bd80      	pop	{r7, pc}
 80118f2:	bf00      	nop
 80118f4:	24000000 	.word	0x24000000
 80118f8:	10624dd3 	.word	0x10624dd3
 80118fc:	00200045 	.word	0x00200045
 8011900:	002000c5 	.word	0x002000c5
 8011904:	fdffe008 	.word	0xfdffe008

08011908 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8011908:	b480      	push	{r7}
 801190a:	b085      	sub	sp, #20
 801190c:	af00      	add	r7, sp, #0
 801190e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011910:	4b1f      	ldr	r3, [pc, #124]	; (8011990 <SDMMC_GetCmdResp2+0x88>)
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	4a1f      	ldr	r2, [pc, #124]	; (8011994 <SDMMC_GetCmdResp2+0x8c>)
 8011916:	fba2 2303 	umull	r2, r3, r2, r3
 801191a:	0a5b      	lsrs	r3, r3, #9
 801191c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011920:	fb02 f303 	mul.w	r3, r2, r3
 8011924:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	1e5a      	subs	r2, r3, #1
 801192a:	60fa      	str	r2, [r7, #12]
 801192c:	2b00      	cmp	r3, #0
 801192e:	d102      	bne.n	8011936 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011930:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011934:	e026      	b.n	8011984 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801193a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801193c:	68bb      	ldr	r3, [r7, #8]
 801193e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011942:	2b00      	cmp	r3, #0
 8011944:	d0ef      	beq.n	8011926 <SDMMC_GetCmdResp2+0x1e>
 8011946:	68bb      	ldr	r3, [r7, #8]
 8011948:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801194c:	2b00      	cmp	r3, #0
 801194e:	d1ea      	bne.n	8011926 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011954:	f003 0304 	and.w	r3, r3, #4
 8011958:	2b00      	cmp	r3, #0
 801195a:	d004      	beq.n	8011966 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	2204      	movs	r2, #4
 8011960:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011962:	2304      	movs	r3, #4
 8011964:	e00e      	b.n	8011984 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801196a:	f003 0301 	and.w	r3, r3, #1
 801196e:	2b00      	cmp	r3, #0
 8011970:	d004      	beq.n	801197c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2201      	movs	r2, #1
 8011976:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011978:	2301      	movs	r3, #1
 801197a:	e003      	b.n	8011984 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	4a06      	ldr	r2, [pc, #24]	; (8011998 <SDMMC_GetCmdResp2+0x90>)
 8011980:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011982:	2300      	movs	r3, #0
}
 8011984:	4618      	mov	r0, r3
 8011986:	3714      	adds	r7, #20
 8011988:	46bd      	mov	sp, r7
 801198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801198e:	4770      	bx	lr
 8011990:	24000000 	.word	0x24000000
 8011994:	10624dd3 	.word	0x10624dd3
 8011998:	002000c5 	.word	0x002000c5

0801199c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 801199c:	b480      	push	{r7}
 801199e:	b085      	sub	sp, #20
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80119a4:	4b1a      	ldr	r3, [pc, #104]	; (8011a10 <SDMMC_GetCmdResp3+0x74>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	4a1a      	ldr	r2, [pc, #104]	; (8011a14 <SDMMC_GetCmdResp3+0x78>)
 80119aa:	fba2 2303 	umull	r2, r3, r2, r3
 80119ae:	0a5b      	lsrs	r3, r3, #9
 80119b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80119b4:	fb02 f303 	mul.w	r3, r2, r3
 80119b8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	1e5a      	subs	r2, r3, #1
 80119be:	60fa      	str	r2, [r7, #12]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d102      	bne.n	80119ca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80119c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80119c8:	e01b      	b.n	8011a02 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119ce:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80119d0:	68bb      	ldr	r3, [r7, #8]
 80119d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d0ef      	beq.n	80119ba <SDMMC_GetCmdResp3+0x1e>
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d1ea      	bne.n	80119ba <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119e8:	f003 0304 	and.w	r3, r3, #4
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d004      	beq.n	80119fa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	2204      	movs	r2, #4
 80119f4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80119f6:	2304      	movs	r3, #4
 80119f8:	e003      	b.n	8011a02 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	4a06      	ldr	r2, [pc, #24]	; (8011a18 <SDMMC_GetCmdResp3+0x7c>)
 80119fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011a00:	2300      	movs	r3, #0
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	3714      	adds	r7, #20
 8011a06:	46bd      	mov	sp, r7
 8011a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a0c:	4770      	bx	lr
 8011a0e:	bf00      	nop
 8011a10:	24000000 	.word	0x24000000
 8011a14:	10624dd3 	.word	0x10624dd3
 8011a18:	002000c5 	.word	0x002000c5

08011a1c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b088      	sub	sp, #32
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	60f8      	str	r0, [r7, #12]
 8011a24:	460b      	mov	r3, r1
 8011a26:	607a      	str	r2, [r7, #4]
 8011a28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011a2a:	4b35      	ldr	r3, [pc, #212]	; (8011b00 <SDMMC_GetCmdResp6+0xe4>)
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	4a35      	ldr	r2, [pc, #212]	; (8011b04 <SDMMC_GetCmdResp6+0xe8>)
 8011a30:	fba2 2303 	umull	r2, r3, r2, r3
 8011a34:	0a5b      	lsrs	r3, r3, #9
 8011a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a3a:	fb02 f303 	mul.w	r3, r2, r3
 8011a3e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011a40:	69fb      	ldr	r3, [r7, #28]
 8011a42:	1e5a      	subs	r2, r3, #1
 8011a44:	61fa      	str	r2, [r7, #28]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d102      	bne.n	8011a50 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011a4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011a4e:	e052      	b.n	8011af6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a54:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a56:	69bb      	ldr	r3, [r7, #24]
 8011a58:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d0ef      	beq.n	8011a40 <SDMMC_GetCmdResp6+0x24>
 8011a60:	69bb      	ldr	r3, [r7, #24]
 8011a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d1ea      	bne.n	8011a40 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a6e:	f003 0304 	and.w	r3, r3, #4
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d004      	beq.n	8011a80 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	2204      	movs	r2, #4
 8011a7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011a7c:	2304      	movs	r3, #4
 8011a7e:	e03a      	b.n	8011af6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a84:	f003 0301 	and.w	r3, r3, #1
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d004      	beq.n	8011a96 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011a8c:	68fb      	ldr	r3, [r7, #12]
 8011a8e:	2201      	movs	r2, #1
 8011a90:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011a92:	2301      	movs	r3, #1
 8011a94:	e02f      	b.n	8011af6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011a96:	68f8      	ldr	r0, [r7, #12]
 8011a98:	f7ff fb7c 	bl	8011194 <SDMMC_GetCommandResponse>
 8011a9c:	4603      	mov	r3, r0
 8011a9e:	461a      	mov	r2, r3
 8011aa0:	7afb      	ldrb	r3, [r7, #11]
 8011aa2:	4293      	cmp	r3, r2
 8011aa4:	d001      	beq.n	8011aaa <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011aa6:	2301      	movs	r3, #1
 8011aa8:	e025      	b.n	8011af6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	4a16      	ldr	r2, [pc, #88]	; (8011b08 <SDMMC_GetCmdResp6+0xec>)
 8011aae:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011ab0:	2100      	movs	r1, #0
 8011ab2:	68f8      	ldr	r0, [r7, #12]
 8011ab4:	f7ff fb7b 	bl	80111ae <SDMMC_GetResponse>
 8011ab8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8011aba:	697b      	ldr	r3, [r7, #20]
 8011abc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d106      	bne.n	8011ad2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8011ac4:	697b      	ldr	r3, [r7, #20]
 8011ac6:	0c1b      	lsrs	r3, r3, #16
 8011ac8:	b29a      	uxth	r2, r3
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011ace:	2300      	movs	r3, #0
 8011ad0:	e011      	b.n	8011af6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d002      	beq.n	8011ae2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011adc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011ae0:	e009      	b.n	8011af6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011ae2:	697b      	ldr	r3, [r7, #20]
 8011ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d002      	beq.n	8011af2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011af0:	e001      	b.n	8011af6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011af2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	3720      	adds	r7, #32
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}
 8011afe:	bf00      	nop
 8011b00:	24000000 	.word	0x24000000
 8011b04:	10624dd3 	.word	0x10624dd3
 8011b08:	002000c5 	.word	0x002000c5

08011b0c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011b0c:	b480      	push	{r7}
 8011b0e:	b085      	sub	sp, #20
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011b14:	4b22      	ldr	r3, [pc, #136]	; (8011ba0 <SDMMC_GetCmdResp7+0x94>)
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	4a22      	ldr	r2, [pc, #136]	; (8011ba4 <SDMMC_GetCmdResp7+0x98>)
 8011b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8011b1e:	0a5b      	lsrs	r3, r3, #9
 8011b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b24:	fb02 f303 	mul.w	r3, r2, r3
 8011b28:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	1e5a      	subs	r2, r3, #1
 8011b2e:	60fa      	str	r2, [r7, #12]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d102      	bne.n	8011b3a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011b34:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011b38:	e02c      	b.n	8011b94 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b3e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b40:	68bb      	ldr	r3, [r7, #8]
 8011b42:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d0ef      	beq.n	8011b2a <SDMMC_GetCmdResp7+0x1e>
 8011b4a:	68bb      	ldr	r3, [r7, #8]
 8011b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d1ea      	bne.n	8011b2a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b58:	f003 0304 	and.w	r3, r3, #4
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d004      	beq.n	8011b6a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	2204      	movs	r2, #4
 8011b64:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011b66:	2304      	movs	r3, #4
 8011b68:	e014      	b.n	8011b94 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b6e:	f003 0301 	and.w	r3, r3, #1
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d004      	beq.n	8011b80 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2201      	movs	r2, #1
 8011b7a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	e009      	b.n	8011b94 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d002      	beq.n	8011b92 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2240      	movs	r2, #64	; 0x40
 8011b90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011b92:	2300      	movs	r3, #0

}
 8011b94:	4618      	mov	r0, r3
 8011b96:	3714      	adds	r7, #20
 8011b98:	46bd      	mov	sp, r7
 8011b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b9e:	4770      	bx	lr
 8011ba0:	24000000 	.word	0x24000000
 8011ba4:	10624dd3 	.word	0x10624dd3

08011ba8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011ba8:	b480      	push	{r7}
 8011baa:	b085      	sub	sp, #20
 8011bac:	af00      	add	r7, sp, #0
 8011bae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8011bb0:	4b11      	ldr	r3, [pc, #68]	; (8011bf8 <SDMMC_GetCmdError+0x50>)
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	4a11      	ldr	r2, [pc, #68]	; (8011bfc <SDMMC_GetCmdError+0x54>)
 8011bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8011bba:	0a5b      	lsrs	r3, r3, #9
 8011bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8011bc0:	fb02 f303 	mul.w	r3, r2, r3
 8011bc4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	1e5a      	subs	r2, r3, #1
 8011bca:	60fa      	str	r2, [r7, #12]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d102      	bne.n	8011bd6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011bd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011bd4:	e009      	b.n	8011bea <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d0f1      	beq.n	8011bc6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	4a06      	ldr	r2, [pc, #24]	; (8011c00 <SDMMC_GetCmdError+0x58>)
 8011be6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8011be8:	2300      	movs	r3, #0
}
 8011bea:	4618      	mov	r0, r3
 8011bec:	3714      	adds	r7, #20
 8011bee:	46bd      	mov	sp, r7
 8011bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bf4:	4770      	bx	lr
 8011bf6:	bf00      	nop
 8011bf8:	24000000 	.word	0x24000000
 8011bfc:	10624dd3 	.word	0x10624dd3
 8011c00:	002000c5 	.word	0x002000c5

08011c04 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011c04:	b084      	sub	sp, #16
 8011c06:	b580      	push	{r7, lr}
 8011c08:	b084      	sub	sp, #16
 8011c0a:	af00      	add	r7, sp, #0
 8011c0c:	6078      	str	r0, [r7, #4]
 8011c0e:	f107 001c 	add.w	r0, r7, #28
 8011c12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c18:	2b01      	cmp	r3, #1
 8011c1a:	d120      	bne.n	8011c5e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c20:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	68da      	ldr	r2, [r3, #12]
 8011c2c:	4b2a      	ldr	r3, [pc, #168]	; (8011cd8 <USB_CoreInit+0xd4>)
 8011c2e:	4013      	ands	r3, r2
 8011c30:	687a      	ldr	r2, [r7, #4]
 8011c32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	68db      	ldr	r3, [r3, #12]
 8011c38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011c42:	2b01      	cmp	r3, #1
 8011c44:	d105      	bne.n	8011c52 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	68db      	ldr	r3, [r3, #12]
 8011c4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f001 faf8 	bl	8013248 <USB_CoreReset>
 8011c58:	4603      	mov	r3, r0
 8011c5a:	73fb      	strb	r3, [r7, #15]
 8011c5c:	e01a      	b.n	8011c94 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	68db      	ldr	r3, [r3, #12]
 8011c62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011c6a:	6878      	ldr	r0, [r7, #4]
 8011c6c:	f001 faec 	bl	8013248 <USB_CoreReset>
 8011c70:	4603      	mov	r3, r0
 8011c72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d106      	bne.n	8011c88 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	639a      	str	r2, [r3, #56]	; 0x38
 8011c86:	e005      	b.n	8011c94 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c96:	2b01      	cmp	r3, #1
 8011c98:	d116      	bne.n	8011cc8 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011c9e:	b29a      	uxth	r2, r3
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011ca8:	4b0c      	ldr	r3, [pc, #48]	; (8011cdc <USB_CoreInit+0xd8>)
 8011caa:	4313      	orrs	r3, r2
 8011cac:	687a      	ldr	r2, [r7, #4]
 8011cae:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	689b      	ldr	r3, [r3, #8]
 8011cb4:	f043 0206 	orr.w	r2, r3, #6
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	689b      	ldr	r3, [r3, #8]
 8011cc0:	f043 0220 	orr.w	r2, r3, #32
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cca:	4618      	mov	r0, r3
 8011ccc:	3710      	adds	r7, #16
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011cd4:	b004      	add	sp, #16
 8011cd6:	4770      	bx	lr
 8011cd8:	ffbdffbf 	.word	0xffbdffbf
 8011cdc:	03ee0000 	.word	0x03ee0000

08011ce0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011ce0:	b480      	push	{r7}
 8011ce2:	b087      	sub	sp, #28
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	60f8      	str	r0, [r7, #12]
 8011ce8:	60b9      	str	r1, [r7, #8]
 8011cea:	4613      	mov	r3, r2
 8011cec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011cee:	79fb      	ldrb	r3, [r7, #7]
 8011cf0:	2b02      	cmp	r3, #2
 8011cf2:	d165      	bne.n	8011dc0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	4a41      	ldr	r2, [pc, #260]	; (8011dfc <USB_SetTurnaroundTime+0x11c>)
 8011cf8:	4293      	cmp	r3, r2
 8011cfa:	d906      	bls.n	8011d0a <USB_SetTurnaroundTime+0x2a>
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	4a40      	ldr	r2, [pc, #256]	; (8011e00 <USB_SetTurnaroundTime+0x120>)
 8011d00:	4293      	cmp	r3, r2
 8011d02:	d202      	bcs.n	8011d0a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011d04:	230f      	movs	r3, #15
 8011d06:	617b      	str	r3, [r7, #20]
 8011d08:	e062      	b.n	8011dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011d0a:	68bb      	ldr	r3, [r7, #8]
 8011d0c:	4a3c      	ldr	r2, [pc, #240]	; (8011e00 <USB_SetTurnaroundTime+0x120>)
 8011d0e:	4293      	cmp	r3, r2
 8011d10:	d306      	bcc.n	8011d20 <USB_SetTurnaroundTime+0x40>
 8011d12:	68bb      	ldr	r3, [r7, #8]
 8011d14:	4a3b      	ldr	r2, [pc, #236]	; (8011e04 <USB_SetTurnaroundTime+0x124>)
 8011d16:	4293      	cmp	r3, r2
 8011d18:	d202      	bcs.n	8011d20 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011d1a:	230e      	movs	r3, #14
 8011d1c:	617b      	str	r3, [r7, #20]
 8011d1e:	e057      	b.n	8011dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011d20:	68bb      	ldr	r3, [r7, #8]
 8011d22:	4a38      	ldr	r2, [pc, #224]	; (8011e04 <USB_SetTurnaroundTime+0x124>)
 8011d24:	4293      	cmp	r3, r2
 8011d26:	d306      	bcc.n	8011d36 <USB_SetTurnaroundTime+0x56>
 8011d28:	68bb      	ldr	r3, [r7, #8]
 8011d2a:	4a37      	ldr	r2, [pc, #220]	; (8011e08 <USB_SetTurnaroundTime+0x128>)
 8011d2c:	4293      	cmp	r3, r2
 8011d2e:	d202      	bcs.n	8011d36 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011d30:	230d      	movs	r3, #13
 8011d32:	617b      	str	r3, [r7, #20]
 8011d34:	e04c      	b.n	8011dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011d36:	68bb      	ldr	r3, [r7, #8]
 8011d38:	4a33      	ldr	r2, [pc, #204]	; (8011e08 <USB_SetTurnaroundTime+0x128>)
 8011d3a:	4293      	cmp	r3, r2
 8011d3c:	d306      	bcc.n	8011d4c <USB_SetTurnaroundTime+0x6c>
 8011d3e:	68bb      	ldr	r3, [r7, #8]
 8011d40:	4a32      	ldr	r2, [pc, #200]	; (8011e0c <USB_SetTurnaroundTime+0x12c>)
 8011d42:	4293      	cmp	r3, r2
 8011d44:	d802      	bhi.n	8011d4c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011d46:	230c      	movs	r3, #12
 8011d48:	617b      	str	r3, [r7, #20]
 8011d4a:	e041      	b.n	8011dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	4a2f      	ldr	r2, [pc, #188]	; (8011e0c <USB_SetTurnaroundTime+0x12c>)
 8011d50:	4293      	cmp	r3, r2
 8011d52:	d906      	bls.n	8011d62 <USB_SetTurnaroundTime+0x82>
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	4a2e      	ldr	r2, [pc, #184]	; (8011e10 <USB_SetTurnaroundTime+0x130>)
 8011d58:	4293      	cmp	r3, r2
 8011d5a:	d802      	bhi.n	8011d62 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011d5c:	230b      	movs	r3, #11
 8011d5e:	617b      	str	r3, [r7, #20]
 8011d60:	e036      	b.n	8011dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011d62:	68bb      	ldr	r3, [r7, #8]
 8011d64:	4a2a      	ldr	r2, [pc, #168]	; (8011e10 <USB_SetTurnaroundTime+0x130>)
 8011d66:	4293      	cmp	r3, r2
 8011d68:	d906      	bls.n	8011d78 <USB_SetTurnaroundTime+0x98>
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	4a29      	ldr	r2, [pc, #164]	; (8011e14 <USB_SetTurnaroundTime+0x134>)
 8011d6e:	4293      	cmp	r3, r2
 8011d70:	d802      	bhi.n	8011d78 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011d72:	230a      	movs	r3, #10
 8011d74:	617b      	str	r3, [r7, #20]
 8011d76:	e02b      	b.n	8011dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011d78:	68bb      	ldr	r3, [r7, #8]
 8011d7a:	4a26      	ldr	r2, [pc, #152]	; (8011e14 <USB_SetTurnaroundTime+0x134>)
 8011d7c:	4293      	cmp	r3, r2
 8011d7e:	d906      	bls.n	8011d8e <USB_SetTurnaroundTime+0xae>
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	4a25      	ldr	r2, [pc, #148]	; (8011e18 <USB_SetTurnaroundTime+0x138>)
 8011d84:	4293      	cmp	r3, r2
 8011d86:	d202      	bcs.n	8011d8e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011d88:	2309      	movs	r3, #9
 8011d8a:	617b      	str	r3, [r7, #20]
 8011d8c:	e020      	b.n	8011dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011d8e:	68bb      	ldr	r3, [r7, #8]
 8011d90:	4a21      	ldr	r2, [pc, #132]	; (8011e18 <USB_SetTurnaroundTime+0x138>)
 8011d92:	4293      	cmp	r3, r2
 8011d94:	d306      	bcc.n	8011da4 <USB_SetTurnaroundTime+0xc4>
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	4a20      	ldr	r2, [pc, #128]	; (8011e1c <USB_SetTurnaroundTime+0x13c>)
 8011d9a:	4293      	cmp	r3, r2
 8011d9c:	d802      	bhi.n	8011da4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011d9e:	2308      	movs	r3, #8
 8011da0:	617b      	str	r3, [r7, #20]
 8011da2:	e015      	b.n	8011dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	4a1d      	ldr	r2, [pc, #116]	; (8011e1c <USB_SetTurnaroundTime+0x13c>)
 8011da8:	4293      	cmp	r3, r2
 8011daa:	d906      	bls.n	8011dba <USB_SetTurnaroundTime+0xda>
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	4a1c      	ldr	r2, [pc, #112]	; (8011e20 <USB_SetTurnaroundTime+0x140>)
 8011db0:	4293      	cmp	r3, r2
 8011db2:	d202      	bcs.n	8011dba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011db4:	2307      	movs	r3, #7
 8011db6:	617b      	str	r3, [r7, #20]
 8011db8:	e00a      	b.n	8011dd0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011dba:	2306      	movs	r3, #6
 8011dbc:	617b      	str	r3, [r7, #20]
 8011dbe:	e007      	b.n	8011dd0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011dc0:	79fb      	ldrb	r3, [r7, #7]
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d102      	bne.n	8011dcc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011dc6:	2309      	movs	r3, #9
 8011dc8:	617b      	str	r3, [r7, #20]
 8011dca:	e001      	b.n	8011dd0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011dcc:	2309      	movs	r3, #9
 8011dce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	68db      	ldr	r3, [r3, #12]
 8011dd4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	68da      	ldr	r2, [r3, #12]
 8011de0:	697b      	ldr	r3, [r7, #20]
 8011de2:	029b      	lsls	r3, r3, #10
 8011de4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011de8:	431a      	orrs	r2, r3
 8011dea:	68fb      	ldr	r3, [r7, #12]
 8011dec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011dee:	2300      	movs	r3, #0
}
 8011df0:	4618      	mov	r0, r3
 8011df2:	371c      	adds	r7, #28
 8011df4:	46bd      	mov	sp, r7
 8011df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfa:	4770      	bx	lr
 8011dfc:	00d8acbf 	.word	0x00d8acbf
 8011e00:	00e4e1c0 	.word	0x00e4e1c0
 8011e04:	00f42400 	.word	0x00f42400
 8011e08:	01067380 	.word	0x01067380
 8011e0c:	011a499f 	.word	0x011a499f
 8011e10:	01312cff 	.word	0x01312cff
 8011e14:	014ca43f 	.word	0x014ca43f
 8011e18:	016e3600 	.word	0x016e3600
 8011e1c:	01a6ab1f 	.word	0x01a6ab1f
 8011e20:	01e84800 	.word	0x01e84800

08011e24 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011e24:	b480      	push	{r7}
 8011e26:	b083      	sub	sp, #12
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	689b      	ldr	r3, [r3, #8]
 8011e30:	f043 0201 	orr.w	r2, r3, #1
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011e38:	2300      	movs	r3, #0
}
 8011e3a:	4618      	mov	r0, r3
 8011e3c:	370c      	adds	r7, #12
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e44:	4770      	bx	lr

08011e46 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011e46:	b480      	push	{r7}
 8011e48:	b083      	sub	sp, #12
 8011e4a:	af00      	add	r7, sp, #0
 8011e4c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	689b      	ldr	r3, [r3, #8]
 8011e52:	f023 0201 	bic.w	r2, r3, #1
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011e5a:	2300      	movs	r3, #0
}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	370c      	adds	r7, #12
 8011e60:	46bd      	mov	sp, r7
 8011e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e66:	4770      	bx	lr

08011e68 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b084      	sub	sp, #16
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	6078      	str	r0, [r7, #4]
 8011e70:	460b      	mov	r3, r1
 8011e72:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011e74:	2300      	movs	r3, #0
 8011e76:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	68db      	ldr	r3, [r3, #12]
 8011e7c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011e84:	78fb      	ldrb	r3, [r7, #3]
 8011e86:	2b01      	cmp	r3, #1
 8011e88:	d115      	bne.n	8011eb6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	68db      	ldr	r3, [r3, #12]
 8011e8e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011e96:	2001      	movs	r0, #1
 8011e98:	f7f1 fd70 	bl	800397c <HAL_Delay>
      ms++;
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	3301      	adds	r3, #1
 8011ea0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f001 f93f 	bl	8013126 <USB_GetMode>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	2b01      	cmp	r3, #1
 8011eac:	d01e      	beq.n	8011eec <USB_SetCurrentMode+0x84>
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	2b31      	cmp	r3, #49	; 0x31
 8011eb2:	d9f0      	bls.n	8011e96 <USB_SetCurrentMode+0x2e>
 8011eb4:	e01a      	b.n	8011eec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8011eb6:	78fb      	ldrb	r3, [r7, #3]
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d115      	bne.n	8011ee8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	68db      	ldr	r3, [r3, #12]
 8011ec0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8011ec8:	2001      	movs	r0, #1
 8011eca:	f7f1 fd57 	bl	800397c <HAL_Delay>
      ms++;
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	3301      	adds	r3, #1
 8011ed2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f001 f926 	bl	8013126 <USB_GetMode>
 8011eda:	4603      	mov	r3, r0
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d005      	beq.n	8011eec <USB_SetCurrentMode+0x84>
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	2b31      	cmp	r3, #49	; 0x31
 8011ee4:	d9f0      	bls.n	8011ec8 <USB_SetCurrentMode+0x60>
 8011ee6:	e001      	b.n	8011eec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8011ee8:	2301      	movs	r3, #1
 8011eea:	e005      	b.n	8011ef8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	2b32      	cmp	r3, #50	; 0x32
 8011ef0:	d101      	bne.n	8011ef6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	e000      	b.n	8011ef8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8011ef6:	2300      	movs	r3, #0
}
 8011ef8:	4618      	mov	r0, r3
 8011efa:	3710      	adds	r7, #16
 8011efc:	46bd      	mov	sp, r7
 8011efe:	bd80      	pop	{r7, pc}

08011f00 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011f00:	b084      	sub	sp, #16
 8011f02:	b580      	push	{r7, lr}
 8011f04:	b086      	sub	sp, #24
 8011f06:	af00      	add	r7, sp, #0
 8011f08:	6078      	str	r0, [r7, #4]
 8011f0a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011f0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011f12:	2300      	movs	r3, #0
 8011f14:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011f1a:	2300      	movs	r3, #0
 8011f1c:	613b      	str	r3, [r7, #16]
 8011f1e:	e009      	b.n	8011f34 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011f20:	687a      	ldr	r2, [r7, #4]
 8011f22:	693b      	ldr	r3, [r7, #16]
 8011f24:	3340      	adds	r3, #64	; 0x40
 8011f26:	009b      	lsls	r3, r3, #2
 8011f28:	4413      	add	r3, r2
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011f2e:	693b      	ldr	r3, [r7, #16]
 8011f30:	3301      	adds	r3, #1
 8011f32:	613b      	str	r3, [r7, #16]
 8011f34:	693b      	ldr	r3, [r7, #16]
 8011f36:	2b0e      	cmp	r3, #14
 8011f38:	d9f2      	bls.n	8011f20 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d11c      	bne.n	8011f7a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f46:	685b      	ldr	r3, [r3, #4]
 8011f48:	68fa      	ldr	r2, [r7, #12]
 8011f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011f4e:	f043 0302 	orr.w	r3, r3, #2
 8011f52:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f58:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011f5c:	687b      	ldr	r3, [r7, #4]
 8011f5e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	601a      	str	r2, [r3, #0]
 8011f78:	e005      	b.n	8011f86 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f7e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011f8c:	461a      	mov	r2, r3
 8011f8e:	2300      	movs	r3, #0
 8011f90:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f98:	4619      	mov	r1, r3
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011fa0:	461a      	mov	r2, r3
 8011fa2:	680b      	ldr	r3, [r1, #0]
 8011fa4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fa8:	2b01      	cmp	r3, #1
 8011faa:	d10c      	bne.n	8011fc6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d104      	bne.n	8011fbc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011fb2:	2100      	movs	r1, #0
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	f000 f965 	bl	8012284 <USB_SetDevSpeed>
 8011fba:	e008      	b.n	8011fce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011fbc:	2101      	movs	r1, #1
 8011fbe:	6878      	ldr	r0, [r7, #4]
 8011fc0:	f000 f960 	bl	8012284 <USB_SetDevSpeed>
 8011fc4:	e003      	b.n	8011fce <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011fc6:	2103      	movs	r1, #3
 8011fc8:	6878      	ldr	r0, [r7, #4]
 8011fca:	f000 f95b 	bl	8012284 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011fce:	2110      	movs	r1, #16
 8011fd0:	6878      	ldr	r0, [r7, #4]
 8011fd2:	f000 f8f3 	bl	80121bc <USB_FlushTxFifo>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d001      	beq.n	8011fe0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8011fdc:	2301      	movs	r3, #1
 8011fde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011fe0:	6878      	ldr	r0, [r7, #4]
 8011fe2:	f000 f91f 	bl	8012224 <USB_FlushRxFifo>
 8011fe6:	4603      	mov	r3, r0
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d001      	beq.n	8011ff0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8011fec:	2301      	movs	r3, #1
 8011fee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ff6:	461a      	mov	r2, r3
 8011ff8:	2300      	movs	r3, #0
 8011ffa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012002:	461a      	mov	r2, r3
 8012004:	2300      	movs	r3, #0
 8012006:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012008:	68fb      	ldr	r3, [r7, #12]
 801200a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801200e:	461a      	mov	r2, r3
 8012010:	2300      	movs	r3, #0
 8012012:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012014:	2300      	movs	r3, #0
 8012016:	613b      	str	r3, [r7, #16]
 8012018:	e043      	b.n	80120a2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801201a:	693b      	ldr	r3, [r7, #16]
 801201c:	015a      	lsls	r2, r3, #5
 801201e:	68fb      	ldr	r3, [r7, #12]
 8012020:	4413      	add	r3, r2
 8012022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801202c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012030:	d118      	bne.n	8012064 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012032:	693b      	ldr	r3, [r7, #16]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d10a      	bne.n	801204e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012038:	693b      	ldr	r3, [r7, #16]
 801203a:	015a      	lsls	r2, r3, #5
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	4413      	add	r3, r2
 8012040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012044:	461a      	mov	r2, r3
 8012046:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801204a:	6013      	str	r3, [r2, #0]
 801204c:	e013      	b.n	8012076 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801204e:	693b      	ldr	r3, [r7, #16]
 8012050:	015a      	lsls	r2, r3, #5
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	4413      	add	r3, r2
 8012056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801205a:	461a      	mov	r2, r3
 801205c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012060:	6013      	str	r3, [r2, #0]
 8012062:	e008      	b.n	8012076 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012064:	693b      	ldr	r3, [r7, #16]
 8012066:	015a      	lsls	r2, r3, #5
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	4413      	add	r3, r2
 801206c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012070:	461a      	mov	r2, r3
 8012072:	2300      	movs	r3, #0
 8012074:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012076:	693b      	ldr	r3, [r7, #16]
 8012078:	015a      	lsls	r2, r3, #5
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	4413      	add	r3, r2
 801207e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012082:	461a      	mov	r2, r3
 8012084:	2300      	movs	r3, #0
 8012086:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012088:	693b      	ldr	r3, [r7, #16]
 801208a:	015a      	lsls	r2, r3, #5
 801208c:	68fb      	ldr	r3, [r7, #12]
 801208e:	4413      	add	r3, r2
 8012090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012094:	461a      	mov	r2, r3
 8012096:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801209a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801209c:	693b      	ldr	r3, [r7, #16]
 801209e:	3301      	adds	r3, #1
 80120a0:	613b      	str	r3, [r7, #16]
 80120a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120a4:	693a      	ldr	r2, [r7, #16]
 80120a6:	429a      	cmp	r2, r3
 80120a8:	d3b7      	bcc.n	801201a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80120aa:	2300      	movs	r3, #0
 80120ac:	613b      	str	r3, [r7, #16]
 80120ae:	e043      	b.n	8012138 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80120b0:	693b      	ldr	r3, [r7, #16]
 80120b2:	015a      	lsls	r2, r3, #5
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	4413      	add	r3, r2
 80120b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80120c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80120c6:	d118      	bne.n	80120fa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80120c8:	693b      	ldr	r3, [r7, #16]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d10a      	bne.n	80120e4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80120ce:	693b      	ldr	r3, [r7, #16]
 80120d0:	015a      	lsls	r2, r3, #5
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	4413      	add	r3, r2
 80120d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120da:	461a      	mov	r2, r3
 80120dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80120e0:	6013      	str	r3, [r2, #0]
 80120e2:	e013      	b.n	801210c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80120e4:	693b      	ldr	r3, [r7, #16]
 80120e6:	015a      	lsls	r2, r3, #5
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	4413      	add	r3, r2
 80120ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80120f0:	461a      	mov	r2, r3
 80120f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80120f6:	6013      	str	r3, [r2, #0]
 80120f8:	e008      	b.n	801210c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80120fa:	693b      	ldr	r3, [r7, #16]
 80120fc:	015a      	lsls	r2, r3, #5
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	4413      	add	r3, r2
 8012102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012106:	461a      	mov	r2, r3
 8012108:	2300      	movs	r3, #0
 801210a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801210c:	693b      	ldr	r3, [r7, #16]
 801210e:	015a      	lsls	r2, r3, #5
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	4413      	add	r3, r2
 8012114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012118:	461a      	mov	r2, r3
 801211a:	2300      	movs	r3, #0
 801211c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801211e:	693b      	ldr	r3, [r7, #16]
 8012120:	015a      	lsls	r2, r3, #5
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	4413      	add	r3, r2
 8012126:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801212a:	461a      	mov	r2, r3
 801212c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012130:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012132:	693b      	ldr	r3, [r7, #16]
 8012134:	3301      	adds	r3, #1
 8012136:	613b      	str	r3, [r7, #16]
 8012138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801213a:	693a      	ldr	r2, [r7, #16]
 801213c:	429a      	cmp	r2, r3
 801213e:	d3b7      	bcc.n	80120b0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012146:	691b      	ldr	r3, [r3, #16]
 8012148:	68fa      	ldr	r2, [r7, #12]
 801214a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801214e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012152:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	2200      	movs	r2, #0
 8012158:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012160:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012164:	2b00      	cmp	r3, #0
 8012166:	d105      	bne.n	8012174 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	699b      	ldr	r3, [r3, #24]
 801216c:	f043 0210 	orr.w	r2, r3, #16
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	699a      	ldr	r2, [r3, #24]
 8012178:	4b0e      	ldr	r3, [pc, #56]	; (80121b4 <USB_DevInit+0x2b4>)
 801217a:	4313      	orrs	r3, r2
 801217c:	687a      	ldr	r2, [r7, #4]
 801217e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012182:	2b00      	cmp	r3, #0
 8012184:	d005      	beq.n	8012192 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	699b      	ldr	r3, [r3, #24]
 801218a:	f043 0208 	orr.w	r2, r3, #8
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012194:	2b01      	cmp	r3, #1
 8012196:	d105      	bne.n	80121a4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	699a      	ldr	r2, [r3, #24]
 801219c:	4b06      	ldr	r3, [pc, #24]	; (80121b8 <USB_DevInit+0x2b8>)
 801219e:	4313      	orrs	r3, r2
 80121a0:	687a      	ldr	r2, [r7, #4]
 80121a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80121a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80121a6:	4618      	mov	r0, r3
 80121a8:	3718      	adds	r7, #24
 80121aa:	46bd      	mov	sp, r7
 80121ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80121b0:	b004      	add	sp, #16
 80121b2:	4770      	bx	lr
 80121b4:	803c3800 	.word	0x803c3800
 80121b8:	40000004 	.word	0x40000004

080121bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80121bc:	b480      	push	{r7}
 80121be:	b085      	sub	sp, #20
 80121c0:	af00      	add	r7, sp, #0
 80121c2:	6078      	str	r0, [r7, #4]
 80121c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80121c6:	2300      	movs	r3, #0
 80121c8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	3301      	adds	r3, #1
 80121ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	4a13      	ldr	r2, [pc, #76]	; (8012220 <USB_FlushTxFifo+0x64>)
 80121d4:	4293      	cmp	r3, r2
 80121d6:	d901      	bls.n	80121dc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80121d8:	2303      	movs	r3, #3
 80121da:	e01b      	b.n	8012214 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	691b      	ldr	r3, [r3, #16]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	daf2      	bge.n	80121ca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80121e4:	2300      	movs	r3, #0
 80121e6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80121e8:	683b      	ldr	r3, [r7, #0]
 80121ea:	019b      	lsls	r3, r3, #6
 80121ec:	f043 0220 	orr.w	r2, r3, #32
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	3301      	adds	r3, #1
 80121f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	4a08      	ldr	r2, [pc, #32]	; (8012220 <USB_FlushTxFifo+0x64>)
 80121fe:	4293      	cmp	r3, r2
 8012200:	d901      	bls.n	8012206 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012202:	2303      	movs	r3, #3
 8012204:	e006      	b.n	8012214 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	691b      	ldr	r3, [r3, #16]
 801220a:	f003 0320 	and.w	r3, r3, #32
 801220e:	2b20      	cmp	r3, #32
 8012210:	d0f0      	beq.n	80121f4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012212:	2300      	movs	r3, #0
}
 8012214:	4618      	mov	r0, r3
 8012216:	3714      	adds	r7, #20
 8012218:	46bd      	mov	sp, r7
 801221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221e:	4770      	bx	lr
 8012220:	00030d40 	.word	0x00030d40

08012224 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012224:	b480      	push	{r7}
 8012226:	b085      	sub	sp, #20
 8012228:	af00      	add	r7, sp, #0
 801222a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801222c:	2300      	movs	r3, #0
 801222e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	3301      	adds	r3, #1
 8012234:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	4a11      	ldr	r2, [pc, #68]	; (8012280 <USB_FlushRxFifo+0x5c>)
 801223a:	4293      	cmp	r3, r2
 801223c:	d901      	bls.n	8012242 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801223e:	2303      	movs	r3, #3
 8012240:	e018      	b.n	8012274 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	691b      	ldr	r3, [r3, #16]
 8012246:	2b00      	cmp	r3, #0
 8012248:	daf2      	bge.n	8012230 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 801224a:	2300      	movs	r3, #0
 801224c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	2210      	movs	r2, #16
 8012252:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012254:	68fb      	ldr	r3, [r7, #12]
 8012256:	3301      	adds	r3, #1
 8012258:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	4a08      	ldr	r2, [pc, #32]	; (8012280 <USB_FlushRxFifo+0x5c>)
 801225e:	4293      	cmp	r3, r2
 8012260:	d901      	bls.n	8012266 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012262:	2303      	movs	r3, #3
 8012264:	e006      	b.n	8012274 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	691b      	ldr	r3, [r3, #16]
 801226a:	f003 0310 	and.w	r3, r3, #16
 801226e:	2b10      	cmp	r3, #16
 8012270:	d0f0      	beq.n	8012254 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012272:	2300      	movs	r3, #0
}
 8012274:	4618      	mov	r0, r3
 8012276:	3714      	adds	r7, #20
 8012278:	46bd      	mov	sp, r7
 801227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227e:	4770      	bx	lr
 8012280:	00030d40 	.word	0x00030d40

08012284 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012284:	b480      	push	{r7}
 8012286:	b085      	sub	sp, #20
 8012288:	af00      	add	r7, sp, #0
 801228a:	6078      	str	r0, [r7, #4]
 801228c:	460b      	mov	r3, r1
 801228e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801229a:	681a      	ldr	r2, [r3, #0]
 801229c:	78fb      	ldrb	r3, [r7, #3]
 801229e:	68f9      	ldr	r1, [r7, #12]
 80122a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80122a4:	4313      	orrs	r3, r2
 80122a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80122a8:	2300      	movs	r3, #0
}
 80122aa:	4618      	mov	r0, r3
 80122ac:	3714      	adds	r7, #20
 80122ae:	46bd      	mov	sp, r7
 80122b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122b4:	4770      	bx	lr

080122b6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80122b6:	b480      	push	{r7}
 80122b8:	b087      	sub	sp, #28
 80122ba:	af00      	add	r7, sp, #0
 80122bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80122c2:	693b      	ldr	r3, [r7, #16]
 80122c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80122c8:	689b      	ldr	r3, [r3, #8]
 80122ca:	f003 0306 	and.w	r3, r3, #6
 80122ce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d102      	bne.n	80122dc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80122d6:	2300      	movs	r3, #0
 80122d8:	75fb      	strb	r3, [r7, #23]
 80122da:	e00a      	b.n	80122f2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	2b02      	cmp	r3, #2
 80122e0:	d002      	beq.n	80122e8 <USB_GetDevSpeed+0x32>
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	2b06      	cmp	r3, #6
 80122e6:	d102      	bne.n	80122ee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80122e8:	2302      	movs	r3, #2
 80122ea:	75fb      	strb	r3, [r7, #23]
 80122ec:	e001      	b.n	80122f2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80122ee:	230f      	movs	r3, #15
 80122f0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80122f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80122f4:	4618      	mov	r0, r3
 80122f6:	371c      	adds	r7, #28
 80122f8:	46bd      	mov	sp, r7
 80122fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fe:	4770      	bx	lr

08012300 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012300:	b480      	push	{r7}
 8012302:	b085      	sub	sp, #20
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]
 8012308:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	781b      	ldrb	r3, [r3, #0]
 8012312:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	785b      	ldrb	r3, [r3, #1]
 8012318:	2b01      	cmp	r3, #1
 801231a:	d139      	bne.n	8012390 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012322:	69da      	ldr	r2, [r3, #28]
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	781b      	ldrb	r3, [r3, #0]
 8012328:	f003 030f 	and.w	r3, r3, #15
 801232c:	2101      	movs	r1, #1
 801232e:	fa01 f303 	lsl.w	r3, r1, r3
 8012332:	b29b      	uxth	r3, r3
 8012334:	68f9      	ldr	r1, [r7, #12]
 8012336:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801233a:	4313      	orrs	r3, r2
 801233c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801233e:	68bb      	ldr	r3, [r7, #8]
 8012340:	015a      	lsls	r2, r3, #5
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	4413      	add	r3, r2
 8012346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012350:	2b00      	cmp	r3, #0
 8012352:	d153      	bne.n	80123fc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012354:	68bb      	ldr	r3, [r7, #8]
 8012356:	015a      	lsls	r2, r3, #5
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	4413      	add	r3, r2
 801235c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012360:	681a      	ldr	r2, [r3, #0]
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	689b      	ldr	r3, [r3, #8]
 8012366:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801236a:	683b      	ldr	r3, [r7, #0]
 801236c:	791b      	ldrb	r3, [r3, #4]
 801236e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012370:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012372:	68bb      	ldr	r3, [r7, #8]
 8012374:	059b      	lsls	r3, r3, #22
 8012376:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012378:	431a      	orrs	r2, r3
 801237a:	68bb      	ldr	r3, [r7, #8]
 801237c:	0159      	lsls	r1, r3, #5
 801237e:	68fb      	ldr	r3, [r7, #12]
 8012380:	440b      	add	r3, r1
 8012382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012386:	4619      	mov	r1, r3
 8012388:	4b20      	ldr	r3, [pc, #128]	; (801240c <USB_ActivateEndpoint+0x10c>)
 801238a:	4313      	orrs	r3, r2
 801238c:	600b      	str	r3, [r1, #0]
 801238e:	e035      	b.n	80123fc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012396:	69da      	ldr	r2, [r3, #28]
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	781b      	ldrb	r3, [r3, #0]
 801239c:	f003 030f 	and.w	r3, r3, #15
 80123a0:	2101      	movs	r1, #1
 80123a2:	fa01 f303 	lsl.w	r3, r1, r3
 80123a6:	041b      	lsls	r3, r3, #16
 80123a8:	68f9      	ldr	r1, [r7, #12]
 80123aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80123ae:	4313      	orrs	r3, r2
 80123b0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80123b2:	68bb      	ldr	r3, [r7, #8]
 80123b4:	015a      	lsls	r2, r3, #5
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	4413      	add	r3, r2
 80123ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d119      	bne.n	80123fc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80123c8:	68bb      	ldr	r3, [r7, #8]
 80123ca:	015a      	lsls	r2, r3, #5
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	4413      	add	r3, r2
 80123d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123d4:	681a      	ldr	r2, [r3, #0]
 80123d6:	683b      	ldr	r3, [r7, #0]
 80123d8:	689b      	ldr	r3, [r3, #8]
 80123da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80123de:	683b      	ldr	r3, [r7, #0]
 80123e0:	791b      	ldrb	r3, [r3, #4]
 80123e2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80123e4:	430b      	orrs	r3, r1
 80123e6:	431a      	orrs	r2, r3
 80123e8:	68bb      	ldr	r3, [r7, #8]
 80123ea:	0159      	lsls	r1, r3, #5
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	440b      	add	r3, r1
 80123f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123f4:	4619      	mov	r1, r3
 80123f6:	4b05      	ldr	r3, [pc, #20]	; (801240c <USB_ActivateEndpoint+0x10c>)
 80123f8:	4313      	orrs	r3, r2
 80123fa:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80123fc:	2300      	movs	r3, #0
}
 80123fe:	4618      	mov	r0, r3
 8012400:	3714      	adds	r7, #20
 8012402:	46bd      	mov	sp, r7
 8012404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012408:	4770      	bx	lr
 801240a:	bf00      	nop
 801240c:	10008000 	.word	0x10008000

08012410 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012410:	b480      	push	{r7}
 8012412:	b085      	sub	sp, #20
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
 8012418:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	781b      	ldrb	r3, [r3, #0]
 8012422:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	785b      	ldrb	r3, [r3, #1]
 8012428:	2b01      	cmp	r3, #1
 801242a:	d161      	bne.n	80124f0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801242c:	68bb      	ldr	r3, [r7, #8]
 801242e:	015a      	lsls	r2, r3, #5
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	4413      	add	r3, r2
 8012434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012438:	681b      	ldr	r3, [r3, #0]
 801243a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801243e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012442:	d11f      	bne.n	8012484 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	015a      	lsls	r2, r3, #5
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	4413      	add	r3, r2
 801244c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	68ba      	ldr	r2, [r7, #8]
 8012454:	0151      	lsls	r1, r2, #5
 8012456:	68fa      	ldr	r2, [r7, #12]
 8012458:	440a      	add	r2, r1
 801245a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801245e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012462:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	015a      	lsls	r2, r3, #5
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	4413      	add	r3, r2
 801246c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012470:	681b      	ldr	r3, [r3, #0]
 8012472:	68ba      	ldr	r2, [r7, #8]
 8012474:	0151      	lsls	r1, r2, #5
 8012476:	68fa      	ldr	r2, [r7, #12]
 8012478:	440a      	add	r2, r1
 801247a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801247e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012482:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801248a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801248c:	683b      	ldr	r3, [r7, #0]
 801248e:	781b      	ldrb	r3, [r3, #0]
 8012490:	f003 030f 	and.w	r3, r3, #15
 8012494:	2101      	movs	r1, #1
 8012496:	fa01 f303 	lsl.w	r3, r1, r3
 801249a:	b29b      	uxth	r3, r3
 801249c:	43db      	mvns	r3, r3
 801249e:	68f9      	ldr	r1, [r7, #12]
 80124a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80124a4:	4013      	ands	r3, r2
 80124a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80124ae:	69da      	ldr	r2, [r3, #28]
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	781b      	ldrb	r3, [r3, #0]
 80124b4:	f003 030f 	and.w	r3, r3, #15
 80124b8:	2101      	movs	r1, #1
 80124ba:	fa01 f303 	lsl.w	r3, r1, r3
 80124be:	b29b      	uxth	r3, r3
 80124c0:	43db      	mvns	r3, r3
 80124c2:	68f9      	ldr	r1, [r7, #12]
 80124c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80124c8:	4013      	ands	r3, r2
 80124ca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80124cc:	68bb      	ldr	r3, [r7, #8]
 80124ce:	015a      	lsls	r2, r3, #5
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	4413      	add	r3, r2
 80124d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124d8:	681a      	ldr	r2, [r3, #0]
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	0159      	lsls	r1, r3, #5
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	440b      	add	r3, r1
 80124e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124e6:	4619      	mov	r1, r3
 80124e8:	4b35      	ldr	r3, [pc, #212]	; (80125c0 <USB_DeactivateEndpoint+0x1b0>)
 80124ea:	4013      	ands	r3, r2
 80124ec:	600b      	str	r3, [r1, #0]
 80124ee:	e060      	b.n	80125b2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80124f0:	68bb      	ldr	r3, [r7, #8]
 80124f2:	015a      	lsls	r2, r3, #5
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	4413      	add	r3, r2
 80124f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012502:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012506:	d11f      	bne.n	8012548 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012508:	68bb      	ldr	r3, [r7, #8]
 801250a:	015a      	lsls	r2, r3, #5
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	4413      	add	r3, r2
 8012510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	68ba      	ldr	r2, [r7, #8]
 8012518:	0151      	lsls	r1, r2, #5
 801251a:	68fa      	ldr	r2, [r7, #12]
 801251c:	440a      	add	r2, r1
 801251e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012522:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012526:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	015a      	lsls	r2, r3, #5
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	4413      	add	r3, r2
 8012530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	68ba      	ldr	r2, [r7, #8]
 8012538:	0151      	lsls	r1, r2, #5
 801253a:	68fa      	ldr	r2, [r7, #12]
 801253c:	440a      	add	r2, r1
 801253e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012542:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012546:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801254e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012550:	683b      	ldr	r3, [r7, #0]
 8012552:	781b      	ldrb	r3, [r3, #0]
 8012554:	f003 030f 	and.w	r3, r3, #15
 8012558:	2101      	movs	r1, #1
 801255a:	fa01 f303 	lsl.w	r3, r1, r3
 801255e:	041b      	lsls	r3, r3, #16
 8012560:	43db      	mvns	r3, r3
 8012562:	68f9      	ldr	r1, [r7, #12]
 8012564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012568:	4013      	ands	r3, r2
 801256a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012572:	69da      	ldr	r2, [r3, #28]
 8012574:	683b      	ldr	r3, [r7, #0]
 8012576:	781b      	ldrb	r3, [r3, #0]
 8012578:	f003 030f 	and.w	r3, r3, #15
 801257c:	2101      	movs	r1, #1
 801257e:	fa01 f303 	lsl.w	r3, r1, r3
 8012582:	041b      	lsls	r3, r3, #16
 8012584:	43db      	mvns	r3, r3
 8012586:	68f9      	ldr	r1, [r7, #12]
 8012588:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801258c:	4013      	ands	r3, r2
 801258e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012590:	68bb      	ldr	r3, [r7, #8]
 8012592:	015a      	lsls	r2, r3, #5
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	4413      	add	r3, r2
 8012598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801259c:	681a      	ldr	r2, [r3, #0]
 801259e:	68bb      	ldr	r3, [r7, #8]
 80125a0:	0159      	lsls	r1, r3, #5
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	440b      	add	r3, r1
 80125a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80125aa:	4619      	mov	r1, r3
 80125ac:	4b05      	ldr	r3, [pc, #20]	; (80125c4 <USB_DeactivateEndpoint+0x1b4>)
 80125ae:	4013      	ands	r3, r2
 80125b0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80125b2:	2300      	movs	r3, #0
}
 80125b4:	4618      	mov	r0, r3
 80125b6:	3714      	adds	r7, #20
 80125b8:	46bd      	mov	sp, r7
 80125ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125be:	4770      	bx	lr
 80125c0:	ec337800 	.word	0xec337800
 80125c4:	eff37800 	.word	0xeff37800

080125c8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b08a      	sub	sp, #40	; 0x28
 80125cc:	af02      	add	r7, sp, #8
 80125ce:	60f8      	str	r0, [r7, #12]
 80125d0:	60b9      	str	r1, [r7, #8]
 80125d2:	4613      	mov	r3, r2
 80125d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80125da:	68bb      	ldr	r3, [r7, #8]
 80125dc:	781b      	ldrb	r3, [r3, #0]
 80125de:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80125e0:	68bb      	ldr	r3, [r7, #8]
 80125e2:	785b      	ldrb	r3, [r3, #1]
 80125e4:	2b01      	cmp	r3, #1
 80125e6:	f040 8181 	bne.w	80128ec <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80125ea:	68bb      	ldr	r3, [r7, #8]
 80125ec:	691b      	ldr	r3, [r3, #16]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d132      	bne.n	8012658 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80125f2:	69bb      	ldr	r3, [r7, #24]
 80125f4:	015a      	lsls	r2, r3, #5
 80125f6:	69fb      	ldr	r3, [r7, #28]
 80125f8:	4413      	add	r3, r2
 80125fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125fe:	691a      	ldr	r2, [r3, #16]
 8012600:	69bb      	ldr	r3, [r7, #24]
 8012602:	0159      	lsls	r1, r3, #5
 8012604:	69fb      	ldr	r3, [r7, #28]
 8012606:	440b      	add	r3, r1
 8012608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801260c:	4619      	mov	r1, r3
 801260e:	4ba5      	ldr	r3, [pc, #660]	; (80128a4 <USB_EPStartXfer+0x2dc>)
 8012610:	4013      	ands	r3, r2
 8012612:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012614:	69bb      	ldr	r3, [r7, #24]
 8012616:	015a      	lsls	r2, r3, #5
 8012618:	69fb      	ldr	r3, [r7, #28]
 801261a:	4413      	add	r3, r2
 801261c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012620:	691b      	ldr	r3, [r3, #16]
 8012622:	69ba      	ldr	r2, [r7, #24]
 8012624:	0151      	lsls	r1, r2, #5
 8012626:	69fa      	ldr	r2, [r7, #28]
 8012628:	440a      	add	r2, r1
 801262a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801262e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012632:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012634:	69bb      	ldr	r3, [r7, #24]
 8012636:	015a      	lsls	r2, r3, #5
 8012638:	69fb      	ldr	r3, [r7, #28]
 801263a:	4413      	add	r3, r2
 801263c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012640:	691a      	ldr	r2, [r3, #16]
 8012642:	69bb      	ldr	r3, [r7, #24]
 8012644:	0159      	lsls	r1, r3, #5
 8012646:	69fb      	ldr	r3, [r7, #28]
 8012648:	440b      	add	r3, r1
 801264a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801264e:	4619      	mov	r1, r3
 8012650:	4b95      	ldr	r3, [pc, #596]	; (80128a8 <USB_EPStartXfer+0x2e0>)
 8012652:	4013      	ands	r3, r2
 8012654:	610b      	str	r3, [r1, #16]
 8012656:	e092      	b.n	801277e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012658:	69bb      	ldr	r3, [r7, #24]
 801265a:	015a      	lsls	r2, r3, #5
 801265c:	69fb      	ldr	r3, [r7, #28]
 801265e:	4413      	add	r3, r2
 8012660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012664:	691a      	ldr	r2, [r3, #16]
 8012666:	69bb      	ldr	r3, [r7, #24]
 8012668:	0159      	lsls	r1, r3, #5
 801266a:	69fb      	ldr	r3, [r7, #28]
 801266c:	440b      	add	r3, r1
 801266e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012672:	4619      	mov	r1, r3
 8012674:	4b8c      	ldr	r3, [pc, #560]	; (80128a8 <USB_EPStartXfer+0x2e0>)
 8012676:	4013      	ands	r3, r2
 8012678:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801267a:	69bb      	ldr	r3, [r7, #24]
 801267c:	015a      	lsls	r2, r3, #5
 801267e:	69fb      	ldr	r3, [r7, #28]
 8012680:	4413      	add	r3, r2
 8012682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012686:	691a      	ldr	r2, [r3, #16]
 8012688:	69bb      	ldr	r3, [r7, #24]
 801268a:	0159      	lsls	r1, r3, #5
 801268c:	69fb      	ldr	r3, [r7, #28]
 801268e:	440b      	add	r3, r1
 8012690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012694:	4619      	mov	r1, r3
 8012696:	4b83      	ldr	r3, [pc, #524]	; (80128a4 <USB_EPStartXfer+0x2dc>)
 8012698:	4013      	ands	r3, r2
 801269a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 801269c:	69bb      	ldr	r3, [r7, #24]
 801269e:	2b00      	cmp	r3, #0
 80126a0:	d11a      	bne.n	80126d8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80126a2:	68bb      	ldr	r3, [r7, #8]
 80126a4:	691a      	ldr	r2, [r3, #16]
 80126a6:	68bb      	ldr	r3, [r7, #8]
 80126a8:	689b      	ldr	r3, [r3, #8]
 80126aa:	429a      	cmp	r2, r3
 80126ac:	d903      	bls.n	80126b6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80126ae:	68bb      	ldr	r3, [r7, #8]
 80126b0:	689a      	ldr	r2, [r3, #8]
 80126b2:	68bb      	ldr	r3, [r7, #8]
 80126b4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80126b6:	69bb      	ldr	r3, [r7, #24]
 80126b8:	015a      	lsls	r2, r3, #5
 80126ba:	69fb      	ldr	r3, [r7, #28]
 80126bc:	4413      	add	r3, r2
 80126be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126c2:	691b      	ldr	r3, [r3, #16]
 80126c4:	69ba      	ldr	r2, [r7, #24]
 80126c6:	0151      	lsls	r1, r2, #5
 80126c8:	69fa      	ldr	r2, [r7, #28]
 80126ca:	440a      	add	r2, r1
 80126cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80126d4:	6113      	str	r3, [r2, #16]
 80126d6:	e01b      	b.n	8012710 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80126d8:	69bb      	ldr	r3, [r7, #24]
 80126da:	015a      	lsls	r2, r3, #5
 80126dc:	69fb      	ldr	r3, [r7, #28]
 80126de:	4413      	add	r3, r2
 80126e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126e4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80126e6:	68bb      	ldr	r3, [r7, #8]
 80126e8:	6919      	ldr	r1, [r3, #16]
 80126ea:	68bb      	ldr	r3, [r7, #8]
 80126ec:	689b      	ldr	r3, [r3, #8]
 80126ee:	440b      	add	r3, r1
 80126f0:	1e59      	subs	r1, r3, #1
 80126f2:	68bb      	ldr	r3, [r7, #8]
 80126f4:	689b      	ldr	r3, [r3, #8]
 80126f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80126fa:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80126fc:	4b6b      	ldr	r3, [pc, #428]	; (80128ac <USB_EPStartXfer+0x2e4>)
 80126fe:	400b      	ands	r3, r1
 8012700:	69b9      	ldr	r1, [r7, #24]
 8012702:	0148      	lsls	r0, r1, #5
 8012704:	69f9      	ldr	r1, [r7, #28]
 8012706:	4401      	add	r1, r0
 8012708:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801270c:	4313      	orrs	r3, r2
 801270e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012710:	69bb      	ldr	r3, [r7, #24]
 8012712:	015a      	lsls	r2, r3, #5
 8012714:	69fb      	ldr	r3, [r7, #28]
 8012716:	4413      	add	r3, r2
 8012718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801271c:	691a      	ldr	r2, [r3, #16]
 801271e:	68bb      	ldr	r3, [r7, #8]
 8012720:	691b      	ldr	r3, [r3, #16]
 8012722:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012726:	69b9      	ldr	r1, [r7, #24]
 8012728:	0148      	lsls	r0, r1, #5
 801272a:	69f9      	ldr	r1, [r7, #28]
 801272c:	4401      	add	r1, r0
 801272e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012732:	4313      	orrs	r3, r2
 8012734:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8012736:	68bb      	ldr	r3, [r7, #8]
 8012738:	791b      	ldrb	r3, [r3, #4]
 801273a:	2b01      	cmp	r3, #1
 801273c:	d11f      	bne.n	801277e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801273e:	69bb      	ldr	r3, [r7, #24]
 8012740:	015a      	lsls	r2, r3, #5
 8012742:	69fb      	ldr	r3, [r7, #28]
 8012744:	4413      	add	r3, r2
 8012746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801274a:	691b      	ldr	r3, [r3, #16]
 801274c:	69ba      	ldr	r2, [r7, #24]
 801274e:	0151      	lsls	r1, r2, #5
 8012750:	69fa      	ldr	r2, [r7, #28]
 8012752:	440a      	add	r2, r1
 8012754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012758:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801275c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801275e:	69bb      	ldr	r3, [r7, #24]
 8012760:	015a      	lsls	r2, r3, #5
 8012762:	69fb      	ldr	r3, [r7, #28]
 8012764:	4413      	add	r3, r2
 8012766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801276a:	691b      	ldr	r3, [r3, #16]
 801276c:	69ba      	ldr	r2, [r7, #24]
 801276e:	0151      	lsls	r1, r2, #5
 8012770:	69fa      	ldr	r2, [r7, #28]
 8012772:	440a      	add	r2, r1
 8012774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012778:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801277c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801277e:	79fb      	ldrb	r3, [r7, #7]
 8012780:	2b01      	cmp	r3, #1
 8012782:	d14b      	bne.n	801281c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012784:	68bb      	ldr	r3, [r7, #8]
 8012786:	69db      	ldr	r3, [r3, #28]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d009      	beq.n	80127a0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801278c:	69bb      	ldr	r3, [r7, #24]
 801278e:	015a      	lsls	r2, r3, #5
 8012790:	69fb      	ldr	r3, [r7, #28]
 8012792:	4413      	add	r3, r2
 8012794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012798:	461a      	mov	r2, r3
 801279a:	68bb      	ldr	r3, [r7, #8]
 801279c:	69db      	ldr	r3, [r3, #28]
 801279e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80127a0:	68bb      	ldr	r3, [r7, #8]
 80127a2:	791b      	ldrb	r3, [r3, #4]
 80127a4:	2b01      	cmp	r3, #1
 80127a6:	d128      	bne.n	80127fa <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80127a8:	69fb      	ldr	r3, [r7, #28]
 80127aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80127ae:	689b      	ldr	r3, [r3, #8]
 80127b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d110      	bne.n	80127da <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80127b8:	69bb      	ldr	r3, [r7, #24]
 80127ba:	015a      	lsls	r2, r3, #5
 80127bc:	69fb      	ldr	r3, [r7, #28]
 80127be:	4413      	add	r3, r2
 80127c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	69ba      	ldr	r2, [r7, #24]
 80127c8:	0151      	lsls	r1, r2, #5
 80127ca:	69fa      	ldr	r2, [r7, #28]
 80127cc:	440a      	add	r2, r1
 80127ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80127d6:	6013      	str	r3, [r2, #0]
 80127d8:	e00f      	b.n	80127fa <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80127da:	69bb      	ldr	r3, [r7, #24]
 80127dc:	015a      	lsls	r2, r3, #5
 80127de:	69fb      	ldr	r3, [r7, #28]
 80127e0:	4413      	add	r3, r2
 80127e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	69ba      	ldr	r2, [r7, #24]
 80127ea:	0151      	lsls	r1, r2, #5
 80127ec:	69fa      	ldr	r2, [r7, #28]
 80127ee:	440a      	add	r2, r1
 80127f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80127f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80127f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80127fa:	69bb      	ldr	r3, [r7, #24]
 80127fc:	015a      	lsls	r2, r3, #5
 80127fe:	69fb      	ldr	r3, [r7, #28]
 8012800:	4413      	add	r3, r2
 8012802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	69ba      	ldr	r2, [r7, #24]
 801280a:	0151      	lsls	r1, r2, #5
 801280c:	69fa      	ldr	r2, [r7, #28]
 801280e:	440a      	add	r2, r1
 8012810:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012814:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012818:	6013      	str	r3, [r2, #0]
 801281a:	e16a      	b.n	8012af2 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801281c:	69bb      	ldr	r3, [r7, #24]
 801281e:	015a      	lsls	r2, r3, #5
 8012820:	69fb      	ldr	r3, [r7, #28]
 8012822:	4413      	add	r3, r2
 8012824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	69ba      	ldr	r2, [r7, #24]
 801282c:	0151      	lsls	r1, r2, #5
 801282e:	69fa      	ldr	r2, [r7, #28]
 8012830:	440a      	add	r2, r1
 8012832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012836:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801283a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	791b      	ldrb	r3, [r3, #4]
 8012840:	2b01      	cmp	r3, #1
 8012842:	d015      	beq.n	8012870 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012844:	68bb      	ldr	r3, [r7, #8]
 8012846:	691b      	ldr	r3, [r3, #16]
 8012848:	2b00      	cmp	r3, #0
 801284a:	f000 8152 	beq.w	8012af2 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801284e:	69fb      	ldr	r3, [r7, #28]
 8012850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012856:	68bb      	ldr	r3, [r7, #8]
 8012858:	781b      	ldrb	r3, [r3, #0]
 801285a:	f003 030f 	and.w	r3, r3, #15
 801285e:	2101      	movs	r1, #1
 8012860:	fa01 f303 	lsl.w	r3, r1, r3
 8012864:	69f9      	ldr	r1, [r7, #28]
 8012866:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801286a:	4313      	orrs	r3, r2
 801286c:	634b      	str	r3, [r1, #52]	; 0x34
 801286e:	e140      	b.n	8012af2 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012870:	69fb      	ldr	r3, [r7, #28]
 8012872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012876:	689b      	ldr	r3, [r3, #8]
 8012878:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801287c:	2b00      	cmp	r3, #0
 801287e:	d117      	bne.n	80128b0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012880:	69bb      	ldr	r3, [r7, #24]
 8012882:	015a      	lsls	r2, r3, #5
 8012884:	69fb      	ldr	r3, [r7, #28]
 8012886:	4413      	add	r3, r2
 8012888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	69ba      	ldr	r2, [r7, #24]
 8012890:	0151      	lsls	r1, r2, #5
 8012892:	69fa      	ldr	r2, [r7, #28]
 8012894:	440a      	add	r2, r1
 8012896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801289a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801289e:	6013      	str	r3, [r2, #0]
 80128a0:	e016      	b.n	80128d0 <USB_EPStartXfer+0x308>
 80128a2:	bf00      	nop
 80128a4:	e007ffff 	.word	0xe007ffff
 80128a8:	fff80000 	.word	0xfff80000
 80128ac:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80128b0:	69bb      	ldr	r3, [r7, #24]
 80128b2:	015a      	lsls	r2, r3, #5
 80128b4:	69fb      	ldr	r3, [r7, #28]
 80128b6:	4413      	add	r3, r2
 80128b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	69ba      	ldr	r2, [r7, #24]
 80128c0:	0151      	lsls	r1, r2, #5
 80128c2:	69fa      	ldr	r2, [r7, #28]
 80128c4:	440a      	add	r2, r1
 80128c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80128ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80128ce:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80128d0:	68bb      	ldr	r3, [r7, #8]
 80128d2:	68d9      	ldr	r1, [r3, #12]
 80128d4:	68bb      	ldr	r3, [r7, #8]
 80128d6:	781a      	ldrb	r2, [r3, #0]
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	691b      	ldr	r3, [r3, #16]
 80128dc:	b298      	uxth	r0, r3
 80128de:	79fb      	ldrb	r3, [r7, #7]
 80128e0:	9300      	str	r3, [sp, #0]
 80128e2:	4603      	mov	r3, r0
 80128e4:	68f8      	ldr	r0, [r7, #12]
 80128e6:	f000 f9b9 	bl	8012c5c <USB_WritePacket>
 80128ea:	e102      	b.n	8012af2 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80128ec:	69bb      	ldr	r3, [r7, #24]
 80128ee:	015a      	lsls	r2, r3, #5
 80128f0:	69fb      	ldr	r3, [r7, #28]
 80128f2:	4413      	add	r3, r2
 80128f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128f8:	691a      	ldr	r2, [r3, #16]
 80128fa:	69bb      	ldr	r3, [r7, #24]
 80128fc:	0159      	lsls	r1, r3, #5
 80128fe:	69fb      	ldr	r3, [r7, #28]
 8012900:	440b      	add	r3, r1
 8012902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012906:	4619      	mov	r1, r3
 8012908:	4b7c      	ldr	r3, [pc, #496]	; (8012afc <USB_EPStartXfer+0x534>)
 801290a:	4013      	ands	r3, r2
 801290c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801290e:	69bb      	ldr	r3, [r7, #24]
 8012910:	015a      	lsls	r2, r3, #5
 8012912:	69fb      	ldr	r3, [r7, #28]
 8012914:	4413      	add	r3, r2
 8012916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801291a:	691a      	ldr	r2, [r3, #16]
 801291c:	69bb      	ldr	r3, [r7, #24]
 801291e:	0159      	lsls	r1, r3, #5
 8012920:	69fb      	ldr	r3, [r7, #28]
 8012922:	440b      	add	r3, r1
 8012924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012928:	4619      	mov	r1, r3
 801292a:	4b75      	ldr	r3, [pc, #468]	; (8012b00 <USB_EPStartXfer+0x538>)
 801292c:	4013      	ands	r3, r2
 801292e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8012930:	69bb      	ldr	r3, [r7, #24]
 8012932:	2b00      	cmp	r3, #0
 8012934:	d12f      	bne.n	8012996 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8012936:	68bb      	ldr	r3, [r7, #8]
 8012938:	691b      	ldr	r3, [r3, #16]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d003      	beq.n	8012946 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 801293e:	68bb      	ldr	r3, [r7, #8]
 8012940:	689a      	ldr	r2, [r3, #8]
 8012942:	68bb      	ldr	r3, [r7, #8]
 8012944:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8012946:	68bb      	ldr	r3, [r7, #8]
 8012948:	689a      	ldr	r2, [r3, #8]
 801294a:	68bb      	ldr	r3, [r7, #8]
 801294c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801294e:	69bb      	ldr	r3, [r7, #24]
 8012950:	015a      	lsls	r2, r3, #5
 8012952:	69fb      	ldr	r3, [r7, #28]
 8012954:	4413      	add	r3, r2
 8012956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801295a:	691a      	ldr	r2, [r3, #16]
 801295c:	68bb      	ldr	r3, [r7, #8]
 801295e:	6a1b      	ldr	r3, [r3, #32]
 8012960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012964:	69b9      	ldr	r1, [r7, #24]
 8012966:	0148      	lsls	r0, r1, #5
 8012968:	69f9      	ldr	r1, [r7, #28]
 801296a:	4401      	add	r1, r0
 801296c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012970:	4313      	orrs	r3, r2
 8012972:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012974:	69bb      	ldr	r3, [r7, #24]
 8012976:	015a      	lsls	r2, r3, #5
 8012978:	69fb      	ldr	r3, [r7, #28]
 801297a:	4413      	add	r3, r2
 801297c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012980:	691b      	ldr	r3, [r3, #16]
 8012982:	69ba      	ldr	r2, [r7, #24]
 8012984:	0151      	lsls	r1, r2, #5
 8012986:	69fa      	ldr	r2, [r7, #28]
 8012988:	440a      	add	r2, r1
 801298a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801298e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012992:	6113      	str	r3, [r2, #16]
 8012994:	e05f      	b.n	8012a56 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8012996:	68bb      	ldr	r3, [r7, #8]
 8012998:	691b      	ldr	r3, [r3, #16]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d123      	bne.n	80129e6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801299e:	69bb      	ldr	r3, [r7, #24]
 80129a0:	015a      	lsls	r2, r3, #5
 80129a2:	69fb      	ldr	r3, [r7, #28]
 80129a4:	4413      	add	r3, r2
 80129a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129aa:	691a      	ldr	r2, [r3, #16]
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	689b      	ldr	r3, [r3, #8]
 80129b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80129b4:	69b9      	ldr	r1, [r7, #24]
 80129b6:	0148      	lsls	r0, r1, #5
 80129b8:	69f9      	ldr	r1, [r7, #28]
 80129ba:	4401      	add	r1, r0
 80129bc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80129c0:	4313      	orrs	r3, r2
 80129c2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80129c4:	69bb      	ldr	r3, [r7, #24]
 80129c6:	015a      	lsls	r2, r3, #5
 80129c8:	69fb      	ldr	r3, [r7, #28]
 80129ca:	4413      	add	r3, r2
 80129cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80129d0:	691b      	ldr	r3, [r3, #16]
 80129d2:	69ba      	ldr	r2, [r7, #24]
 80129d4:	0151      	lsls	r1, r2, #5
 80129d6:	69fa      	ldr	r2, [r7, #28]
 80129d8:	440a      	add	r2, r1
 80129da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80129de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80129e2:	6113      	str	r3, [r2, #16]
 80129e4:	e037      	b.n	8012a56 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80129e6:	68bb      	ldr	r3, [r7, #8]
 80129e8:	691a      	ldr	r2, [r3, #16]
 80129ea:	68bb      	ldr	r3, [r7, #8]
 80129ec:	689b      	ldr	r3, [r3, #8]
 80129ee:	4413      	add	r3, r2
 80129f0:	1e5a      	subs	r2, r3, #1
 80129f2:	68bb      	ldr	r3, [r7, #8]
 80129f4:	689b      	ldr	r3, [r3, #8]
 80129f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80129fa:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80129fc:	68bb      	ldr	r3, [r7, #8]
 80129fe:	689b      	ldr	r3, [r3, #8]
 8012a00:	8afa      	ldrh	r2, [r7, #22]
 8012a02:	fb03 f202 	mul.w	r2, r3, r2
 8012a06:	68bb      	ldr	r3, [r7, #8]
 8012a08:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8012a0a:	69bb      	ldr	r3, [r7, #24]
 8012a0c:	015a      	lsls	r2, r3, #5
 8012a0e:	69fb      	ldr	r3, [r7, #28]
 8012a10:	4413      	add	r3, r2
 8012a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a16:	691a      	ldr	r2, [r3, #16]
 8012a18:	8afb      	ldrh	r3, [r7, #22]
 8012a1a:	04d9      	lsls	r1, r3, #19
 8012a1c:	4b39      	ldr	r3, [pc, #228]	; (8012b04 <USB_EPStartXfer+0x53c>)
 8012a1e:	400b      	ands	r3, r1
 8012a20:	69b9      	ldr	r1, [r7, #24]
 8012a22:	0148      	lsls	r0, r1, #5
 8012a24:	69f9      	ldr	r1, [r7, #28]
 8012a26:	4401      	add	r1, r0
 8012a28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012a2c:	4313      	orrs	r3, r2
 8012a2e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8012a30:	69bb      	ldr	r3, [r7, #24]
 8012a32:	015a      	lsls	r2, r3, #5
 8012a34:	69fb      	ldr	r3, [r7, #28]
 8012a36:	4413      	add	r3, r2
 8012a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a3c:	691a      	ldr	r2, [r3, #16]
 8012a3e:	68bb      	ldr	r3, [r7, #8]
 8012a40:	6a1b      	ldr	r3, [r3, #32]
 8012a42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012a46:	69b9      	ldr	r1, [r7, #24]
 8012a48:	0148      	lsls	r0, r1, #5
 8012a4a:	69f9      	ldr	r1, [r7, #28]
 8012a4c:	4401      	add	r1, r0
 8012a4e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012a52:	4313      	orrs	r3, r2
 8012a54:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8012a56:	79fb      	ldrb	r3, [r7, #7]
 8012a58:	2b01      	cmp	r3, #1
 8012a5a:	d10d      	bne.n	8012a78 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012a5c:	68bb      	ldr	r3, [r7, #8]
 8012a5e:	68db      	ldr	r3, [r3, #12]
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d009      	beq.n	8012a78 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012a64:	68bb      	ldr	r3, [r7, #8]
 8012a66:	68d9      	ldr	r1, [r3, #12]
 8012a68:	69bb      	ldr	r3, [r7, #24]
 8012a6a:	015a      	lsls	r2, r3, #5
 8012a6c:	69fb      	ldr	r3, [r7, #28]
 8012a6e:	4413      	add	r3, r2
 8012a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a74:	460a      	mov	r2, r1
 8012a76:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	791b      	ldrb	r3, [r3, #4]
 8012a7c:	2b01      	cmp	r3, #1
 8012a7e:	d128      	bne.n	8012ad2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012a80:	69fb      	ldr	r3, [r7, #28]
 8012a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a86:	689b      	ldr	r3, [r3, #8]
 8012a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d110      	bne.n	8012ab2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8012a90:	69bb      	ldr	r3, [r7, #24]
 8012a92:	015a      	lsls	r2, r3, #5
 8012a94:	69fb      	ldr	r3, [r7, #28]
 8012a96:	4413      	add	r3, r2
 8012a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	69ba      	ldr	r2, [r7, #24]
 8012aa0:	0151      	lsls	r1, r2, #5
 8012aa2:	69fa      	ldr	r2, [r7, #28]
 8012aa4:	440a      	add	r2, r1
 8012aa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012aaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012aae:	6013      	str	r3, [r2, #0]
 8012ab0:	e00f      	b.n	8012ad2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8012ab2:	69bb      	ldr	r3, [r7, #24]
 8012ab4:	015a      	lsls	r2, r3, #5
 8012ab6:	69fb      	ldr	r3, [r7, #28]
 8012ab8:	4413      	add	r3, r2
 8012aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	69ba      	ldr	r2, [r7, #24]
 8012ac2:	0151      	lsls	r1, r2, #5
 8012ac4:	69fa      	ldr	r2, [r7, #28]
 8012ac6:	440a      	add	r2, r1
 8012ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012ad0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012ad2:	69bb      	ldr	r3, [r7, #24]
 8012ad4:	015a      	lsls	r2, r3, #5
 8012ad6:	69fb      	ldr	r3, [r7, #28]
 8012ad8:	4413      	add	r3, r2
 8012ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	69ba      	ldr	r2, [r7, #24]
 8012ae2:	0151      	lsls	r1, r2, #5
 8012ae4:	69fa      	ldr	r2, [r7, #28]
 8012ae6:	440a      	add	r2, r1
 8012ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012aec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012af0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012af2:	2300      	movs	r3, #0
}
 8012af4:	4618      	mov	r0, r3
 8012af6:	3720      	adds	r7, #32
 8012af8:	46bd      	mov	sp, r7
 8012afa:	bd80      	pop	{r7, pc}
 8012afc:	fff80000 	.word	0xfff80000
 8012b00:	e007ffff 	.word	0xe007ffff
 8012b04:	1ff80000 	.word	0x1ff80000

08012b08 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012b08:	b480      	push	{r7}
 8012b0a:	b087      	sub	sp, #28
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
 8012b10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012b12:	2300      	movs	r3, #0
 8012b14:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8012b16:	2300      	movs	r3, #0
 8012b18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012b1e:	683b      	ldr	r3, [r7, #0]
 8012b20:	785b      	ldrb	r3, [r3, #1]
 8012b22:	2b01      	cmp	r3, #1
 8012b24:	d14a      	bne.n	8012bbc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	781b      	ldrb	r3, [r3, #0]
 8012b2a:	015a      	lsls	r2, r3, #5
 8012b2c:	693b      	ldr	r3, [r7, #16]
 8012b2e:	4413      	add	r3, r2
 8012b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012b3e:	f040 8086 	bne.w	8012c4e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8012b42:	683b      	ldr	r3, [r7, #0]
 8012b44:	781b      	ldrb	r3, [r3, #0]
 8012b46:	015a      	lsls	r2, r3, #5
 8012b48:	693b      	ldr	r3, [r7, #16]
 8012b4a:	4413      	add	r3, r2
 8012b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b50:	681b      	ldr	r3, [r3, #0]
 8012b52:	683a      	ldr	r2, [r7, #0]
 8012b54:	7812      	ldrb	r2, [r2, #0]
 8012b56:	0151      	lsls	r1, r2, #5
 8012b58:	693a      	ldr	r2, [r7, #16]
 8012b5a:	440a      	add	r2, r1
 8012b5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012b64:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8012b66:	683b      	ldr	r3, [r7, #0]
 8012b68:	781b      	ldrb	r3, [r3, #0]
 8012b6a:	015a      	lsls	r2, r3, #5
 8012b6c:	693b      	ldr	r3, [r7, #16]
 8012b6e:	4413      	add	r3, r2
 8012b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	683a      	ldr	r2, [r7, #0]
 8012b78:	7812      	ldrb	r2, [r2, #0]
 8012b7a:	0151      	lsls	r1, r2, #5
 8012b7c:	693a      	ldr	r2, [r7, #16]
 8012b7e:	440a      	add	r2, r1
 8012b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012b84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012b88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012b8a:	68fb      	ldr	r3, [r7, #12]
 8012b8c:	3301      	adds	r3, #1
 8012b8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	f242 7210 	movw	r2, #10000	; 0x2710
 8012b96:	4293      	cmp	r3, r2
 8012b98:	d902      	bls.n	8012ba0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8012b9a:	2301      	movs	r3, #1
 8012b9c:	75fb      	strb	r3, [r7, #23]
          break;
 8012b9e:	e056      	b.n	8012c4e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8012ba0:	683b      	ldr	r3, [r7, #0]
 8012ba2:	781b      	ldrb	r3, [r3, #0]
 8012ba4:	015a      	lsls	r2, r3, #5
 8012ba6:	693b      	ldr	r3, [r7, #16]
 8012ba8:	4413      	add	r3, r2
 8012baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012bb8:	d0e7      	beq.n	8012b8a <USB_EPStopXfer+0x82>
 8012bba:	e048      	b.n	8012c4e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012bbc:	683b      	ldr	r3, [r7, #0]
 8012bbe:	781b      	ldrb	r3, [r3, #0]
 8012bc0:	015a      	lsls	r2, r3, #5
 8012bc2:	693b      	ldr	r3, [r7, #16]
 8012bc4:	4413      	add	r3, r2
 8012bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012bd4:	d13b      	bne.n	8012c4e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8012bd6:	683b      	ldr	r3, [r7, #0]
 8012bd8:	781b      	ldrb	r3, [r3, #0]
 8012bda:	015a      	lsls	r2, r3, #5
 8012bdc:	693b      	ldr	r3, [r7, #16]
 8012bde:	4413      	add	r3, r2
 8012be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	683a      	ldr	r2, [r7, #0]
 8012be8:	7812      	ldrb	r2, [r2, #0]
 8012bea:	0151      	lsls	r1, r2, #5
 8012bec:	693a      	ldr	r2, [r7, #16]
 8012bee:	440a      	add	r2, r1
 8012bf0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012bf4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012bf8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	781b      	ldrb	r3, [r3, #0]
 8012bfe:	015a      	lsls	r2, r3, #5
 8012c00:	693b      	ldr	r3, [r7, #16]
 8012c02:	4413      	add	r3, r2
 8012c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	683a      	ldr	r2, [r7, #0]
 8012c0c:	7812      	ldrb	r2, [r2, #0]
 8012c0e:	0151      	lsls	r1, r2, #5
 8012c10:	693a      	ldr	r2, [r7, #16]
 8012c12:	440a      	add	r2, r1
 8012c14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c18:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012c1c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	3301      	adds	r3, #1
 8012c22:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	f242 7210 	movw	r2, #10000	; 0x2710
 8012c2a:	4293      	cmp	r3, r2
 8012c2c:	d902      	bls.n	8012c34 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8012c2e:	2301      	movs	r3, #1
 8012c30:	75fb      	strb	r3, [r7, #23]
          break;
 8012c32:	e00c      	b.n	8012c4e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8012c34:	683b      	ldr	r3, [r7, #0]
 8012c36:	781b      	ldrb	r3, [r3, #0]
 8012c38:	015a      	lsls	r2, r3, #5
 8012c3a:	693b      	ldr	r3, [r7, #16]
 8012c3c:	4413      	add	r3, r2
 8012c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012c4c:	d0e7      	beq.n	8012c1e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8012c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c50:	4618      	mov	r0, r3
 8012c52:	371c      	adds	r7, #28
 8012c54:	46bd      	mov	sp, r7
 8012c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5a:	4770      	bx	lr

08012c5c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012c5c:	b480      	push	{r7}
 8012c5e:	b089      	sub	sp, #36	; 0x24
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	60f8      	str	r0, [r7, #12]
 8012c64:	60b9      	str	r1, [r7, #8]
 8012c66:	4611      	mov	r1, r2
 8012c68:	461a      	mov	r2, r3
 8012c6a:	460b      	mov	r3, r1
 8012c6c:	71fb      	strb	r3, [r7, #7]
 8012c6e:	4613      	mov	r3, r2
 8012c70:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8012c76:	68bb      	ldr	r3, [r7, #8]
 8012c78:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8012c7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d123      	bne.n	8012cca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012c82:	88bb      	ldrh	r3, [r7, #4]
 8012c84:	3303      	adds	r3, #3
 8012c86:	089b      	lsrs	r3, r3, #2
 8012c88:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	61bb      	str	r3, [r7, #24]
 8012c8e:	e018      	b.n	8012cc2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012c90:	79fb      	ldrb	r3, [r7, #7]
 8012c92:	031a      	lsls	r2, r3, #12
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	4413      	add	r3, r2
 8012c98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012c9c:	461a      	mov	r2, r3
 8012c9e:	69fb      	ldr	r3, [r7, #28]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012ca4:	69fb      	ldr	r3, [r7, #28]
 8012ca6:	3301      	adds	r3, #1
 8012ca8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012caa:	69fb      	ldr	r3, [r7, #28]
 8012cac:	3301      	adds	r3, #1
 8012cae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012cb0:	69fb      	ldr	r3, [r7, #28]
 8012cb2:	3301      	adds	r3, #1
 8012cb4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8012cb6:	69fb      	ldr	r3, [r7, #28]
 8012cb8:	3301      	adds	r3, #1
 8012cba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012cbc:	69bb      	ldr	r3, [r7, #24]
 8012cbe:	3301      	adds	r3, #1
 8012cc0:	61bb      	str	r3, [r7, #24]
 8012cc2:	69ba      	ldr	r2, [r7, #24]
 8012cc4:	693b      	ldr	r3, [r7, #16]
 8012cc6:	429a      	cmp	r2, r3
 8012cc8:	d3e2      	bcc.n	8012c90 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012cca:	2300      	movs	r3, #0
}
 8012ccc:	4618      	mov	r0, r3
 8012cce:	3724      	adds	r7, #36	; 0x24
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd6:	4770      	bx	lr

08012cd8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012cd8:	b480      	push	{r7}
 8012cda:	b08b      	sub	sp, #44	; 0x2c
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	60f8      	str	r0, [r7, #12]
 8012ce0:	60b9      	str	r1, [r7, #8]
 8012ce2:	4613      	mov	r3, r2
 8012ce4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8012cea:	68bb      	ldr	r3, [r7, #8]
 8012cec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8012cee:	88fb      	ldrh	r3, [r7, #6]
 8012cf0:	089b      	lsrs	r3, r3, #2
 8012cf2:	b29b      	uxth	r3, r3
 8012cf4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8012cf6:	88fb      	ldrh	r3, [r7, #6]
 8012cf8:	f003 0303 	and.w	r3, r3, #3
 8012cfc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8012cfe:	2300      	movs	r3, #0
 8012d00:	623b      	str	r3, [r7, #32]
 8012d02:	e014      	b.n	8012d2e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012d04:	69bb      	ldr	r3, [r7, #24]
 8012d06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012d0a:	681a      	ldr	r2, [r3, #0]
 8012d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d0e:	601a      	str	r2, [r3, #0]
    pDest++;
 8012d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d12:	3301      	adds	r3, #1
 8012d14:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d18:	3301      	adds	r3, #1
 8012d1a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d1e:	3301      	adds	r3, #1
 8012d20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8012d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d24:	3301      	adds	r3, #1
 8012d26:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8012d28:	6a3b      	ldr	r3, [r7, #32]
 8012d2a:	3301      	adds	r3, #1
 8012d2c:	623b      	str	r3, [r7, #32]
 8012d2e:	6a3a      	ldr	r2, [r7, #32]
 8012d30:	697b      	ldr	r3, [r7, #20]
 8012d32:	429a      	cmp	r2, r3
 8012d34:	d3e6      	bcc.n	8012d04 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8012d36:	8bfb      	ldrh	r3, [r7, #30]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d01e      	beq.n	8012d7a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012d40:	69bb      	ldr	r3, [r7, #24]
 8012d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012d46:	461a      	mov	r2, r3
 8012d48:	f107 0310 	add.w	r3, r7, #16
 8012d4c:	6812      	ldr	r2, [r2, #0]
 8012d4e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012d50:	693a      	ldr	r2, [r7, #16]
 8012d52:	6a3b      	ldr	r3, [r7, #32]
 8012d54:	b2db      	uxtb	r3, r3
 8012d56:	00db      	lsls	r3, r3, #3
 8012d58:	fa22 f303 	lsr.w	r3, r2, r3
 8012d5c:	b2da      	uxtb	r2, r3
 8012d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d60:	701a      	strb	r2, [r3, #0]
      i++;
 8012d62:	6a3b      	ldr	r3, [r7, #32]
 8012d64:	3301      	adds	r3, #1
 8012d66:	623b      	str	r3, [r7, #32]
      pDest++;
 8012d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d6a:	3301      	adds	r3, #1
 8012d6c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8012d6e:	8bfb      	ldrh	r3, [r7, #30]
 8012d70:	3b01      	subs	r3, #1
 8012d72:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012d74:	8bfb      	ldrh	r3, [r7, #30]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d1ea      	bne.n	8012d50 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8012d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	372c      	adds	r7, #44	; 0x2c
 8012d80:	46bd      	mov	sp, r7
 8012d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d86:	4770      	bx	lr

08012d88 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012d88:	b480      	push	{r7}
 8012d8a:	b085      	sub	sp, #20
 8012d8c:	af00      	add	r7, sp, #0
 8012d8e:	6078      	str	r0, [r7, #4]
 8012d90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012d96:	683b      	ldr	r3, [r7, #0]
 8012d98:	781b      	ldrb	r3, [r3, #0]
 8012d9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012d9c:	683b      	ldr	r3, [r7, #0]
 8012d9e:	785b      	ldrb	r3, [r3, #1]
 8012da0:	2b01      	cmp	r3, #1
 8012da2:	d12c      	bne.n	8012dfe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012da4:	68bb      	ldr	r3, [r7, #8]
 8012da6:	015a      	lsls	r2, r3, #5
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	4413      	add	r3, r2
 8012dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	2b00      	cmp	r3, #0
 8012db4:	db12      	blt.n	8012ddc <USB_EPSetStall+0x54>
 8012db6:	68bb      	ldr	r3, [r7, #8]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d00f      	beq.n	8012ddc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012dbc:	68bb      	ldr	r3, [r7, #8]
 8012dbe:	015a      	lsls	r2, r3, #5
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	4413      	add	r3, r2
 8012dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	68ba      	ldr	r2, [r7, #8]
 8012dcc:	0151      	lsls	r1, r2, #5
 8012dce:	68fa      	ldr	r2, [r7, #12]
 8012dd0:	440a      	add	r2, r1
 8012dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012dd6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012dda:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012ddc:	68bb      	ldr	r3, [r7, #8]
 8012dde:	015a      	lsls	r2, r3, #5
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	4413      	add	r3, r2
 8012de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	68ba      	ldr	r2, [r7, #8]
 8012dec:	0151      	lsls	r1, r2, #5
 8012dee:	68fa      	ldr	r2, [r7, #12]
 8012df0:	440a      	add	r2, r1
 8012df2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012df6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012dfa:	6013      	str	r3, [r2, #0]
 8012dfc:	e02b      	b.n	8012e56 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012dfe:	68bb      	ldr	r3, [r7, #8]
 8012e00:	015a      	lsls	r2, r3, #5
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	4413      	add	r3, r2
 8012e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	db12      	blt.n	8012e36 <USB_EPSetStall+0xae>
 8012e10:	68bb      	ldr	r3, [r7, #8]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d00f      	beq.n	8012e36 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	015a      	lsls	r2, r3, #5
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	4413      	add	r3, r2
 8012e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	68ba      	ldr	r2, [r7, #8]
 8012e26:	0151      	lsls	r1, r2, #5
 8012e28:	68fa      	ldr	r2, [r7, #12]
 8012e2a:	440a      	add	r2, r1
 8012e2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012e34:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012e36:	68bb      	ldr	r3, [r7, #8]
 8012e38:	015a      	lsls	r2, r3, #5
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	4413      	add	r3, r2
 8012e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	68ba      	ldr	r2, [r7, #8]
 8012e46:	0151      	lsls	r1, r2, #5
 8012e48:	68fa      	ldr	r2, [r7, #12]
 8012e4a:	440a      	add	r2, r1
 8012e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012e54:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012e56:	2300      	movs	r3, #0
}
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3714      	adds	r7, #20
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e62:	4770      	bx	lr

08012e64 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012e64:	b480      	push	{r7}
 8012e66:	b085      	sub	sp, #20
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
 8012e6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	781b      	ldrb	r3, [r3, #0]
 8012e76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012e78:	683b      	ldr	r3, [r7, #0]
 8012e7a:	785b      	ldrb	r3, [r3, #1]
 8012e7c:	2b01      	cmp	r3, #1
 8012e7e:	d128      	bne.n	8012ed2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012e80:	68bb      	ldr	r3, [r7, #8]
 8012e82:	015a      	lsls	r2, r3, #5
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	4413      	add	r3, r2
 8012e88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	68ba      	ldr	r2, [r7, #8]
 8012e90:	0151      	lsls	r1, r2, #5
 8012e92:	68fa      	ldr	r2, [r7, #12]
 8012e94:	440a      	add	r2, r1
 8012e96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012e9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012ea0:	683b      	ldr	r3, [r7, #0]
 8012ea2:	791b      	ldrb	r3, [r3, #4]
 8012ea4:	2b03      	cmp	r3, #3
 8012ea6:	d003      	beq.n	8012eb0 <USB_EPClearStall+0x4c>
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	791b      	ldrb	r3, [r3, #4]
 8012eac:	2b02      	cmp	r3, #2
 8012eae:	d138      	bne.n	8012f22 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	015a      	lsls	r2, r3, #5
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	4413      	add	r3, r2
 8012eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	68ba      	ldr	r2, [r7, #8]
 8012ec0:	0151      	lsls	r1, r2, #5
 8012ec2:	68fa      	ldr	r2, [r7, #12]
 8012ec4:	440a      	add	r2, r1
 8012ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012ece:	6013      	str	r3, [r2, #0]
 8012ed0:	e027      	b.n	8012f22 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012ed2:	68bb      	ldr	r3, [r7, #8]
 8012ed4:	015a      	lsls	r2, r3, #5
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	4413      	add	r3, r2
 8012eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	68ba      	ldr	r2, [r7, #8]
 8012ee2:	0151      	lsls	r1, r2, #5
 8012ee4:	68fa      	ldr	r2, [r7, #12]
 8012ee6:	440a      	add	r2, r1
 8012ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012eec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012ef0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012ef2:	683b      	ldr	r3, [r7, #0]
 8012ef4:	791b      	ldrb	r3, [r3, #4]
 8012ef6:	2b03      	cmp	r3, #3
 8012ef8:	d003      	beq.n	8012f02 <USB_EPClearStall+0x9e>
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	791b      	ldrb	r3, [r3, #4]
 8012efe:	2b02      	cmp	r3, #2
 8012f00:	d10f      	bne.n	8012f22 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012f02:	68bb      	ldr	r3, [r7, #8]
 8012f04:	015a      	lsls	r2, r3, #5
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	4413      	add	r3, r2
 8012f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	68ba      	ldr	r2, [r7, #8]
 8012f12:	0151      	lsls	r1, r2, #5
 8012f14:	68fa      	ldr	r2, [r7, #12]
 8012f16:	440a      	add	r2, r1
 8012f18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012f20:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012f22:	2300      	movs	r3, #0
}
 8012f24:	4618      	mov	r0, r3
 8012f26:	3714      	adds	r7, #20
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f2e:	4770      	bx	lr

08012f30 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012f30:	b480      	push	{r7}
 8012f32:	b085      	sub	sp, #20
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
 8012f38:	460b      	mov	r3, r1
 8012f3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	68fa      	ldr	r2, [r7, #12]
 8012f4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012f4e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012f52:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f5a:	681a      	ldr	r2, [r3, #0]
 8012f5c:	78fb      	ldrb	r3, [r7, #3]
 8012f5e:	011b      	lsls	r3, r3, #4
 8012f60:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012f64:	68f9      	ldr	r1, [r7, #12]
 8012f66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012f6a:	4313      	orrs	r3, r2
 8012f6c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012f6e:	2300      	movs	r3, #0
}
 8012f70:	4618      	mov	r0, r3
 8012f72:	3714      	adds	r7, #20
 8012f74:	46bd      	mov	sp, r7
 8012f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7a:	4770      	bx	lr

08012f7c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012f7c:	b480      	push	{r7}
 8012f7e:	b085      	sub	sp, #20
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	68fa      	ldr	r2, [r7, #12]
 8012f92:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012f96:	f023 0303 	bic.w	r3, r3, #3
 8012f9a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fa2:	685b      	ldr	r3, [r3, #4]
 8012fa4:	68fa      	ldr	r2, [r7, #12]
 8012fa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012faa:	f023 0302 	bic.w	r3, r3, #2
 8012fae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012fb0:	2300      	movs	r3, #0
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	3714      	adds	r7, #20
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbc:	4770      	bx	lr

08012fbe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012fbe:	b480      	push	{r7}
 8012fc0:	b085      	sub	sp, #20
 8012fc2:	af00      	add	r7, sp, #0
 8012fc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	68fa      	ldr	r2, [r7, #12]
 8012fd4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012fd8:	f023 0303 	bic.w	r3, r3, #3
 8012fdc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fe4:	685b      	ldr	r3, [r3, #4]
 8012fe6:	68fa      	ldr	r2, [r7, #12]
 8012fe8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012fec:	f043 0302 	orr.w	r3, r3, #2
 8012ff0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012ff2:	2300      	movs	r3, #0
}
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	3714      	adds	r7, #20
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ffe:	4770      	bx	lr

08013000 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013000:	b480      	push	{r7}
 8013002:	b085      	sub	sp, #20
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	695b      	ldr	r3, [r3, #20]
 801300c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	699b      	ldr	r3, [r3, #24]
 8013012:	68fa      	ldr	r2, [r7, #12]
 8013014:	4013      	ands	r3, r2
 8013016:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013018:	68fb      	ldr	r3, [r7, #12]
}
 801301a:	4618      	mov	r0, r3
 801301c:	3714      	adds	r7, #20
 801301e:	46bd      	mov	sp, r7
 8013020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013024:	4770      	bx	lr

08013026 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013026:	b480      	push	{r7}
 8013028:	b085      	sub	sp, #20
 801302a:	af00      	add	r7, sp, #0
 801302c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013038:	699b      	ldr	r3, [r3, #24]
 801303a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013042:	69db      	ldr	r3, [r3, #28]
 8013044:	68ba      	ldr	r2, [r7, #8]
 8013046:	4013      	ands	r3, r2
 8013048:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801304a:	68bb      	ldr	r3, [r7, #8]
 801304c:	0c1b      	lsrs	r3, r3, #16
}
 801304e:	4618      	mov	r0, r3
 8013050:	3714      	adds	r7, #20
 8013052:	46bd      	mov	sp, r7
 8013054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013058:	4770      	bx	lr

0801305a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801305a:	b480      	push	{r7}
 801305c:	b085      	sub	sp, #20
 801305e:	af00      	add	r7, sp, #0
 8013060:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801306c:	699b      	ldr	r3, [r3, #24]
 801306e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013076:	69db      	ldr	r3, [r3, #28]
 8013078:	68ba      	ldr	r2, [r7, #8]
 801307a:	4013      	ands	r3, r2
 801307c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801307e:	68bb      	ldr	r3, [r7, #8]
 8013080:	b29b      	uxth	r3, r3
}
 8013082:	4618      	mov	r0, r3
 8013084:	3714      	adds	r7, #20
 8013086:	46bd      	mov	sp, r7
 8013088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801308c:	4770      	bx	lr

0801308e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801308e:	b480      	push	{r7}
 8013090:	b085      	sub	sp, #20
 8013092:	af00      	add	r7, sp, #0
 8013094:	6078      	str	r0, [r7, #4]
 8013096:	460b      	mov	r3, r1
 8013098:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801309e:	78fb      	ldrb	r3, [r7, #3]
 80130a0:	015a      	lsls	r2, r3, #5
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	4413      	add	r3, r2
 80130a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130aa:	689b      	ldr	r3, [r3, #8]
 80130ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130b4:	695b      	ldr	r3, [r3, #20]
 80130b6:	68ba      	ldr	r2, [r7, #8]
 80130b8:	4013      	ands	r3, r2
 80130ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80130bc:	68bb      	ldr	r3, [r7, #8]
}
 80130be:	4618      	mov	r0, r3
 80130c0:	3714      	adds	r7, #20
 80130c2:	46bd      	mov	sp, r7
 80130c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130c8:	4770      	bx	lr

080130ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80130ca:	b480      	push	{r7}
 80130cc:	b087      	sub	sp, #28
 80130ce:	af00      	add	r7, sp, #0
 80130d0:	6078      	str	r0, [r7, #4]
 80130d2:	460b      	mov	r3, r1
 80130d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80130da:	697b      	ldr	r3, [r7, #20]
 80130dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130e0:	691b      	ldr	r3, [r3, #16]
 80130e2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80130e4:	697b      	ldr	r3, [r7, #20]
 80130e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80130ec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80130ee:	78fb      	ldrb	r3, [r7, #3]
 80130f0:	f003 030f 	and.w	r3, r3, #15
 80130f4:	68fa      	ldr	r2, [r7, #12]
 80130f6:	fa22 f303 	lsr.w	r3, r2, r3
 80130fa:	01db      	lsls	r3, r3, #7
 80130fc:	b2db      	uxtb	r3, r3
 80130fe:	693a      	ldr	r2, [r7, #16]
 8013100:	4313      	orrs	r3, r2
 8013102:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013104:	78fb      	ldrb	r3, [r7, #3]
 8013106:	015a      	lsls	r2, r3, #5
 8013108:	697b      	ldr	r3, [r7, #20]
 801310a:	4413      	add	r3, r2
 801310c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013110:	689b      	ldr	r3, [r3, #8]
 8013112:	693a      	ldr	r2, [r7, #16]
 8013114:	4013      	ands	r3, r2
 8013116:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013118:	68bb      	ldr	r3, [r7, #8]
}
 801311a:	4618      	mov	r0, r3
 801311c:	371c      	adds	r7, #28
 801311e:	46bd      	mov	sp, r7
 8013120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013124:	4770      	bx	lr

08013126 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013126:	b480      	push	{r7}
 8013128:	b083      	sub	sp, #12
 801312a:	af00      	add	r7, sp, #0
 801312c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	695b      	ldr	r3, [r3, #20]
 8013132:	f003 0301 	and.w	r3, r3, #1
}
 8013136:	4618      	mov	r0, r3
 8013138:	370c      	adds	r7, #12
 801313a:	46bd      	mov	sp, r7
 801313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013140:	4770      	bx	lr
	...

08013144 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013144:	b480      	push	{r7}
 8013146:	b085      	sub	sp, #20
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013156:	681a      	ldr	r2, [r3, #0]
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801315e:	4619      	mov	r1, r3
 8013160:	4b09      	ldr	r3, [pc, #36]	; (8013188 <USB_ActivateSetup+0x44>)
 8013162:	4013      	ands	r3, r2
 8013164:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801316c:	685b      	ldr	r3, [r3, #4]
 801316e:	68fa      	ldr	r2, [r7, #12]
 8013170:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013178:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801317a:	2300      	movs	r3, #0
}
 801317c:	4618      	mov	r0, r3
 801317e:	3714      	adds	r7, #20
 8013180:	46bd      	mov	sp, r7
 8013182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013186:	4770      	bx	lr
 8013188:	fffff800 	.word	0xfffff800

0801318c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801318c:	b480      	push	{r7}
 801318e:	b087      	sub	sp, #28
 8013190:	af00      	add	r7, sp, #0
 8013192:	60f8      	str	r0, [r7, #12]
 8013194:	460b      	mov	r3, r1
 8013196:	607a      	str	r2, [r7, #4]
 8013198:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	333c      	adds	r3, #60	; 0x3c
 80131a2:	3304      	adds	r3, #4
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80131a8:	693b      	ldr	r3, [r7, #16]
 80131aa:	4a26      	ldr	r2, [pc, #152]	; (8013244 <USB_EP0_OutStart+0xb8>)
 80131ac:	4293      	cmp	r3, r2
 80131ae:	d90a      	bls.n	80131c6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80131b0:	697b      	ldr	r3, [r7, #20]
 80131b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80131bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80131c0:	d101      	bne.n	80131c6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80131c2:	2300      	movs	r3, #0
 80131c4:	e037      	b.n	8013236 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80131c6:	697b      	ldr	r3, [r7, #20]
 80131c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131cc:	461a      	mov	r2, r3
 80131ce:	2300      	movs	r3, #0
 80131d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80131d2:	697b      	ldr	r3, [r7, #20]
 80131d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131d8:	691b      	ldr	r3, [r3, #16]
 80131da:	697a      	ldr	r2, [r7, #20]
 80131dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80131e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80131e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80131ec:	691b      	ldr	r3, [r3, #16]
 80131ee:	697a      	ldr	r2, [r7, #20]
 80131f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80131f4:	f043 0318 	orr.w	r3, r3, #24
 80131f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013200:	691b      	ldr	r3, [r3, #16]
 8013202:	697a      	ldr	r2, [r7, #20]
 8013204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013208:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801320c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801320e:	7afb      	ldrb	r3, [r7, #11]
 8013210:	2b01      	cmp	r3, #1
 8013212:	d10f      	bne.n	8013234 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801321a:	461a      	mov	r2, r3
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013220:	697b      	ldr	r3, [r7, #20]
 8013222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013226:	681b      	ldr	r3, [r3, #0]
 8013228:	697a      	ldr	r2, [r7, #20]
 801322a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801322e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013232:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013234:	2300      	movs	r3, #0
}
 8013236:	4618      	mov	r0, r3
 8013238:	371c      	adds	r7, #28
 801323a:	46bd      	mov	sp, r7
 801323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013240:	4770      	bx	lr
 8013242:	bf00      	nop
 8013244:	4f54300a 	.word	0x4f54300a

08013248 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013248:	b480      	push	{r7}
 801324a:	b085      	sub	sp, #20
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013250:	2300      	movs	r3, #0
 8013252:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	3301      	adds	r3, #1
 8013258:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	4a13      	ldr	r2, [pc, #76]	; (80132ac <USB_CoreReset+0x64>)
 801325e:	4293      	cmp	r3, r2
 8013260:	d901      	bls.n	8013266 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013262:	2303      	movs	r3, #3
 8013264:	e01b      	b.n	801329e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	691b      	ldr	r3, [r3, #16]
 801326a:	2b00      	cmp	r3, #0
 801326c:	daf2      	bge.n	8013254 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801326e:	2300      	movs	r3, #0
 8013270:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	691b      	ldr	r3, [r3, #16]
 8013276:	f043 0201 	orr.w	r2, r3, #1
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	3301      	adds	r3, #1
 8013282:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	4a09      	ldr	r2, [pc, #36]	; (80132ac <USB_CoreReset+0x64>)
 8013288:	4293      	cmp	r3, r2
 801328a:	d901      	bls.n	8013290 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801328c:	2303      	movs	r3, #3
 801328e:	e006      	b.n	801329e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	691b      	ldr	r3, [r3, #16]
 8013294:	f003 0301 	and.w	r3, r3, #1
 8013298:	2b01      	cmp	r3, #1
 801329a:	d0f0      	beq.n	801327e <USB_CoreReset+0x36>

  return HAL_OK;
 801329c:	2300      	movs	r3, #0
}
 801329e:	4618      	mov	r0, r3
 80132a0:	3714      	adds	r7, #20
 80132a2:	46bd      	mov	sp, r7
 80132a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a8:	4770      	bx	lr
 80132aa:	bf00      	nop
 80132ac:	00030d40 	.word	0x00030d40

080132b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80132b0:	b580      	push	{r7, lr}
 80132b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80132b4:	4904      	ldr	r1, [pc, #16]	; (80132c8 <MX_FATFS_Init+0x18>)
 80132b6:	4805      	ldr	r0, [pc, #20]	; (80132cc <MX_FATFS_Init+0x1c>)
 80132b8:	f002 fa56 	bl	8015768 <FATFS_LinkDriver>
 80132bc:	4603      	mov	r3, r0
 80132be:	461a      	mov	r2, r3
 80132c0:	4b03      	ldr	r3, [pc, #12]	; (80132d0 <MX_FATFS_Init+0x20>)
 80132c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80132c4:	bf00      	nop
 80132c6:	bd80      	pop	{r7, pc}
 80132c8:	24000cf4 	.word	0x24000cf4
 80132cc:	0801ad40 	.word	0x0801ad40
 80132d0:	24000cf0 	.word	0x24000cf0

080132d4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b082      	sub	sp, #8
 80132d8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80132da:	2300      	movs	r3, #0
 80132dc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80132de:	f000 f885 	bl	80133ec <BSP_SD_IsDetected>
 80132e2:	4603      	mov	r3, r0
 80132e4:	2b01      	cmp	r3, #1
 80132e6:	d001      	beq.n	80132ec <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80132e8:	2302      	movs	r3, #2
 80132ea:	e012      	b.n	8013312 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 80132ec:	480b      	ldr	r0, [pc, #44]	; (801331c <BSP_SD_Init+0x48>)
 80132ee:	f7f9 f9dd 	bl	800c6ac <HAL_SD_Init>
 80132f2:	4603      	mov	r3, r0
 80132f4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80132f6:	79fb      	ldrb	r3, [r7, #7]
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d109      	bne.n	8013310 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80132fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013300:	4806      	ldr	r0, [pc, #24]	; (801331c <BSP_SD_Init+0x48>)
 8013302:	f7fa f893 	bl	800d42c <HAL_SD_ConfigWideBusOperation>
 8013306:	4603      	mov	r3, r0
 8013308:	2b00      	cmp	r3, #0
 801330a:	d001      	beq.n	8013310 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 801330c:	2301      	movs	r3, #1
 801330e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013310:	79fb      	ldrb	r3, [r7, #7]
}
 8013312:	4618      	mov	r0, r3
 8013314:	3708      	adds	r7, #8
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	bf00      	nop
 801331c:	240005b8 	.word	0x240005b8

08013320 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013320:	b580      	push	{r7, lr}
 8013322:	b086      	sub	sp, #24
 8013324:	af00      	add	r7, sp, #0
 8013326:	60f8      	str	r0, [r7, #12]
 8013328:	60b9      	str	r1, [r7, #8]
 801332a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801332c:	2300      	movs	r3, #0
 801332e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	68ba      	ldr	r2, [r7, #8]
 8013334:	68f9      	ldr	r1, [r7, #12]
 8013336:	4806      	ldr	r0, [pc, #24]	; (8013350 <BSP_SD_ReadBlocks_DMA+0x30>)
 8013338:	f7f9 fad8 	bl	800c8ec <HAL_SD_ReadBlocks_DMA>
 801333c:	4603      	mov	r3, r0
 801333e:	2b00      	cmp	r3, #0
 8013340:	d001      	beq.n	8013346 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013342:	2301      	movs	r3, #1
 8013344:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013346:	7dfb      	ldrb	r3, [r7, #23]
}
 8013348:	4618      	mov	r0, r3
 801334a:	3718      	adds	r7, #24
 801334c:	46bd      	mov	sp, r7
 801334e:	bd80      	pop	{r7, pc}
 8013350:	240005b8 	.word	0x240005b8

08013354 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013354:	b580      	push	{r7, lr}
 8013356:	b086      	sub	sp, #24
 8013358:	af00      	add	r7, sp, #0
 801335a:	60f8      	str	r0, [r7, #12]
 801335c:	60b9      	str	r1, [r7, #8]
 801335e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013360:	2300      	movs	r3, #0
 8013362:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	68ba      	ldr	r2, [r7, #8]
 8013368:	68f9      	ldr	r1, [r7, #12]
 801336a:	4806      	ldr	r0, [pc, #24]	; (8013384 <BSP_SD_WriteBlocks_DMA+0x30>)
 801336c:	f7f9 fb66 	bl	800ca3c <HAL_SD_WriteBlocks_DMA>
 8013370:	4603      	mov	r3, r0
 8013372:	2b00      	cmp	r3, #0
 8013374:	d001      	beq.n	801337a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013376:	2301      	movs	r3, #1
 8013378:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 801337a:	7dfb      	ldrb	r3, [r7, #23]
}
 801337c:	4618      	mov	r0, r3
 801337e:	3718      	adds	r7, #24
 8013380:	46bd      	mov	sp, r7
 8013382:	bd80      	pop	{r7, pc}
 8013384:	240005b8 	.word	0x240005b8

08013388 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013388:	b580      	push	{r7, lr}
 801338a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 801338c:	4805      	ldr	r0, [pc, #20]	; (80133a4 <BSP_SD_GetCardState+0x1c>)
 801338e:	f7fa f95f 	bl	800d650 <HAL_SD_GetCardState>
 8013392:	4603      	mov	r3, r0
 8013394:	2b04      	cmp	r3, #4
 8013396:	bf14      	ite	ne
 8013398:	2301      	movne	r3, #1
 801339a:	2300      	moveq	r3, #0
 801339c:	b2db      	uxtb	r3, r3
}
 801339e:	4618      	mov	r0, r3
 80133a0:	bd80      	pop	{r7, pc}
 80133a2:	bf00      	nop
 80133a4:	240005b8 	.word	0x240005b8

080133a8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b082      	sub	sp, #8
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80133b0:	6879      	ldr	r1, [r7, #4]
 80133b2:	4803      	ldr	r0, [pc, #12]	; (80133c0 <BSP_SD_GetCardInfo+0x18>)
 80133b4:	f7fa f80e 	bl	800d3d4 <HAL_SD_GetCardInfo>
}
 80133b8:	bf00      	nop
 80133ba:	3708      	adds	r7, #8
 80133bc:	46bd      	mov	sp, r7
 80133be:	bd80      	pop	{r7, pc}
 80133c0:	240005b8 	.word	0x240005b8

080133c4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80133c4:	b580      	push	{r7, lr}
 80133c6:	b082      	sub	sp, #8
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80133cc:	f000 f9a0 	bl	8013710 <BSP_SD_WriteCpltCallback>
}
 80133d0:	bf00      	nop
 80133d2:	3708      	adds	r7, #8
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}

080133d8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80133d8:	b580      	push	{r7, lr}
 80133da:	b082      	sub	sp, #8
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80133e0:	f000 f9a2 	bl	8013728 <BSP_SD_ReadCpltCallback>
}
 80133e4:	bf00      	nop
 80133e6:	3708      	adds	r7, #8
 80133e8:	46bd      	mov	sp, r7
 80133ea:	bd80      	pop	{r7, pc}

080133ec <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b082      	sub	sp, #8
 80133f0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80133f2:	2301      	movs	r3, #1
 80133f4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80133f6:	f000 f80b 	bl	8013410 <BSP_PlatformIsDetected>
 80133fa:	4603      	mov	r3, r0
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d101      	bne.n	8013404 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013400:	2300      	movs	r3, #0
 8013402:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013404:	79fb      	ldrb	r3, [r7, #7]
 8013406:	b2db      	uxtb	r3, r3
}
 8013408:	4618      	mov	r0, r3
 801340a:	3708      	adds	r7, #8
 801340c:	46bd      	mov	sp, r7
 801340e:	bd80      	pop	{r7, pc}

08013410 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013410:	b580      	push	{r7, lr}
 8013412:	b082      	sub	sp, #8
 8013414:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013416:	2301      	movs	r3, #1
 8013418:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801341a:	2104      	movs	r1, #4
 801341c:	4806      	ldr	r0, [pc, #24]	; (8013438 <BSP_PlatformIsDetected+0x28>)
 801341e:	f7f4 f933 	bl	8007688 <HAL_GPIO_ReadPin>
 8013422:	4603      	mov	r3, r0
 8013424:	2b00      	cmp	r3, #0
 8013426:	d001      	beq.n	801342c <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8013428:	2300      	movs	r3, #0
 801342a:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801342c:	79fb      	ldrb	r3, [r7, #7]
}
 801342e:	4618      	mov	r0, r3
 8013430:	3708      	adds	r7, #8
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}
 8013436:	bf00      	nop
 8013438:	58020400 	.word	0x58020400

0801343c <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b084      	sub	sp, #16
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8013444:	f7f0 fa8e 	bl	8003964 <HAL_GetTick>
 8013448:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 801344a:	e006      	b.n	801345a <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801344c:	f7ff ff9c 	bl	8013388 <BSP_SD_GetCardState>
 8013450:	4603      	mov	r3, r0
 8013452:	2b00      	cmp	r3, #0
 8013454:	d101      	bne.n	801345a <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013456:	2300      	movs	r3, #0
 8013458:	e009      	b.n	801346e <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 801345a:	f7f0 fa83 	bl	8003964 <HAL_GetTick>
 801345e:	4602      	mov	r2, r0
 8013460:	68fb      	ldr	r3, [r7, #12]
 8013462:	1ad3      	subs	r3, r2, r3
 8013464:	687a      	ldr	r2, [r7, #4]
 8013466:	429a      	cmp	r2, r3
 8013468:	d8f0      	bhi.n	801344c <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 801346a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801346e:	4618      	mov	r0, r3
 8013470:	3710      	adds	r7, #16
 8013472:	46bd      	mov	sp, r7
 8013474:	bd80      	pop	{r7, pc}
	...

08013478 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b082      	sub	sp, #8
 801347c:	af00      	add	r7, sp, #0
 801347e:	4603      	mov	r3, r0
 8013480:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013482:	4b0b      	ldr	r3, [pc, #44]	; (80134b0 <SD_CheckStatus+0x38>)
 8013484:	2201      	movs	r2, #1
 8013486:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013488:	f7ff ff7e 	bl	8013388 <BSP_SD_GetCardState>
 801348c:	4603      	mov	r3, r0
 801348e:	2b00      	cmp	r3, #0
 8013490:	d107      	bne.n	80134a2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013492:	4b07      	ldr	r3, [pc, #28]	; (80134b0 <SD_CheckStatus+0x38>)
 8013494:	781b      	ldrb	r3, [r3, #0]
 8013496:	b2db      	uxtb	r3, r3
 8013498:	f023 0301 	bic.w	r3, r3, #1
 801349c:	b2da      	uxtb	r2, r3
 801349e:	4b04      	ldr	r3, [pc, #16]	; (80134b0 <SD_CheckStatus+0x38>)
 80134a0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80134a2:	4b03      	ldr	r3, [pc, #12]	; (80134b0 <SD_CheckStatus+0x38>)
 80134a4:	781b      	ldrb	r3, [r3, #0]
 80134a6:	b2db      	uxtb	r3, r3
}
 80134a8:	4618      	mov	r0, r3
 80134aa:	3708      	adds	r7, #8
 80134ac:	46bd      	mov	sp, r7
 80134ae:	bd80      	pop	{r7, pc}
 80134b0:	2400000d 	.word	0x2400000d

080134b4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b082      	sub	sp, #8
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	4603      	mov	r3, r0
 80134bc:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80134be:	f7ff ff09 	bl	80132d4 <BSP_SD_Init>
 80134c2:	4603      	mov	r3, r0
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d107      	bne.n	80134d8 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80134c8:	79fb      	ldrb	r3, [r7, #7]
 80134ca:	4618      	mov	r0, r3
 80134cc:	f7ff ffd4 	bl	8013478 <SD_CheckStatus>
 80134d0:	4603      	mov	r3, r0
 80134d2:	461a      	mov	r2, r3
 80134d4:	4b04      	ldr	r3, [pc, #16]	; (80134e8 <SD_initialize+0x34>)
 80134d6:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80134d8:	4b03      	ldr	r3, [pc, #12]	; (80134e8 <SD_initialize+0x34>)
 80134da:	781b      	ldrb	r3, [r3, #0]
 80134dc:	b2db      	uxtb	r3, r3
}
 80134de:	4618      	mov	r0, r3
 80134e0:	3708      	adds	r7, #8
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bd80      	pop	{r7, pc}
 80134e6:	bf00      	nop
 80134e8:	2400000d 	.word	0x2400000d

080134ec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b082      	sub	sp, #8
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	4603      	mov	r3, r0
 80134f4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80134f6:	79fb      	ldrb	r3, [r7, #7]
 80134f8:	4618      	mov	r0, r3
 80134fa:	f7ff ffbd 	bl	8013478 <SD_CheckStatus>
 80134fe:	4603      	mov	r3, r0
}
 8013500:	4618      	mov	r0, r3
 8013502:	3708      	adds	r7, #8
 8013504:	46bd      	mov	sp, r7
 8013506:	bd80      	pop	{r7, pc}

08013508 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b086      	sub	sp, #24
 801350c:	af00      	add	r7, sp, #0
 801350e:	60b9      	str	r1, [r7, #8]
 8013510:	607a      	str	r2, [r7, #4]
 8013512:	603b      	str	r3, [r7, #0]
 8013514:	4603      	mov	r3, r0
 8013516:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013518:	2301      	movs	r3, #1
 801351a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801351c:	f247 5030 	movw	r0, #30000	; 0x7530
 8013520:	f7ff ff8c 	bl	801343c <SD_CheckStatusWithTimeout>
 8013524:	4603      	mov	r3, r0
 8013526:	2b00      	cmp	r3, #0
 8013528:	da01      	bge.n	801352e <SD_read+0x26>
  {
    return res;
 801352a:	7dfb      	ldrb	r3, [r7, #23]
 801352c:	e03b      	b.n	80135a6 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801352e:	683a      	ldr	r2, [r7, #0]
 8013530:	6879      	ldr	r1, [r7, #4]
 8013532:	68b8      	ldr	r0, [r7, #8]
 8013534:	f7ff fef4 	bl	8013320 <BSP_SD_ReadBlocks_DMA>
 8013538:	4603      	mov	r3, r0
 801353a:	2b00      	cmp	r3, #0
 801353c:	d132      	bne.n	80135a4 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801353e:	4b1c      	ldr	r3, [pc, #112]	; (80135b0 <SD_read+0xa8>)
 8013540:	2200      	movs	r2, #0
 8013542:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8013544:	f7f0 fa0e 	bl	8003964 <HAL_GetTick>
 8013548:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 801354a:	bf00      	nop
 801354c:	4b18      	ldr	r3, [pc, #96]	; (80135b0 <SD_read+0xa8>)
 801354e:	681b      	ldr	r3, [r3, #0]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d108      	bne.n	8013566 <SD_read+0x5e>
 8013554:	f7f0 fa06 	bl	8003964 <HAL_GetTick>
 8013558:	4602      	mov	r2, r0
 801355a:	693b      	ldr	r3, [r7, #16]
 801355c:	1ad3      	subs	r3, r2, r3
 801355e:	f247 522f 	movw	r2, #29999	; 0x752f
 8013562:	4293      	cmp	r3, r2
 8013564:	d9f2      	bls.n	801354c <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8013566:	4b12      	ldr	r3, [pc, #72]	; (80135b0 <SD_read+0xa8>)
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d102      	bne.n	8013574 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801356e:	2301      	movs	r3, #1
 8013570:	75fb      	strb	r3, [r7, #23]
 8013572:	e017      	b.n	80135a4 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8013574:	4b0e      	ldr	r3, [pc, #56]	; (80135b0 <SD_read+0xa8>)
 8013576:	2200      	movs	r2, #0
 8013578:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 801357a:	f7f0 f9f3 	bl	8003964 <HAL_GetTick>
 801357e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013580:	e007      	b.n	8013592 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013582:	f7ff ff01 	bl	8013388 <BSP_SD_GetCardState>
 8013586:	4603      	mov	r3, r0
 8013588:	2b00      	cmp	r3, #0
 801358a:	d102      	bne.n	8013592 <SD_read+0x8a>
          {
            res = RES_OK;
 801358c:	2300      	movs	r3, #0
 801358e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8013590:	e008      	b.n	80135a4 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013592:	f7f0 f9e7 	bl	8003964 <HAL_GetTick>
 8013596:	4602      	mov	r2, r0
 8013598:	693b      	ldr	r3, [r7, #16]
 801359a:	1ad3      	subs	r3, r2, r3
 801359c:	f247 522f 	movw	r2, #29999	; 0x752f
 80135a0:	4293      	cmp	r3, r2
 80135a2:	d9ee      	bls.n	8013582 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80135a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80135a6:	4618      	mov	r0, r3
 80135a8:	3718      	adds	r7, #24
 80135aa:	46bd      	mov	sp, r7
 80135ac:	bd80      	pop	{r7, pc}
 80135ae:	bf00      	nop
 80135b0:	24000cfc 	.word	0x24000cfc

080135b4 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80135b4:	b580      	push	{r7, lr}
 80135b6:	b086      	sub	sp, #24
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	60b9      	str	r1, [r7, #8]
 80135bc:	607a      	str	r2, [r7, #4]
 80135be:	603b      	str	r3, [r7, #0]
 80135c0:	4603      	mov	r3, r0
 80135c2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80135c4:	2301      	movs	r3, #1
 80135c6:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80135c8:	4b24      	ldr	r3, [pc, #144]	; (801365c <SD_write+0xa8>)
 80135ca:	2200      	movs	r2, #0
 80135cc:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80135ce:	f247 5030 	movw	r0, #30000	; 0x7530
 80135d2:	f7ff ff33 	bl	801343c <SD_CheckStatusWithTimeout>
 80135d6:	4603      	mov	r3, r0
 80135d8:	2b00      	cmp	r3, #0
 80135da:	da01      	bge.n	80135e0 <SD_write+0x2c>
  {
    return res;
 80135dc:	7dfb      	ldrb	r3, [r7, #23]
 80135de:	e038      	b.n	8013652 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80135e0:	683a      	ldr	r2, [r7, #0]
 80135e2:	6879      	ldr	r1, [r7, #4]
 80135e4:	68b8      	ldr	r0, [r7, #8]
 80135e6:	f7ff feb5 	bl	8013354 <BSP_SD_WriteBlocks_DMA>
 80135ea:	4603      	mov	r3, r0
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d12f      	bne.n	8013650 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80135f0:	f7f0 f9b8 	bl	8003964 <HAL_GetTick>
 80135f4:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80135f6:	bf00      	nop
 80135f8:	4b18      	ldr	r3, [pc, #96]	; (801365c <SD_write+0xa8>)
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	2b00      	cmp	r3, #0
 80135fe:	d108      	bne.n	8013612 <SD_write+0x5e>
 8013600:	f7f0 f9b0 	bl	8003964 <HAL_GetTick>
 8013604:	4602      	mov	r2, r0
 8013606:	693b      	ldr	r3, [r7, #16]
 8013608:	1ad3      	subs	r3, r2, r3
 801360a:	f247 522f 	movw	r2, #29999	; 0x752f
 801360e:	4293      	cmp	r3, r2
 8013610:	d9f2      	bls.n	80135f8 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8013612:	4b12      	ldr	r3, [pc, #72]	; (801365c <SD_write+0xa8>)
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	2b00      	cmp	r3, #0
 8013618:	d102      	bne.n	8013620 <SD_write+0x6c>
      {
        res = RES_ERROR;
 801361a:	2301      	movs	r3, #1
 801361c:	75fb      	strb	r3, [r7, #23]
 801361e:	e017      	b.n	8013650 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8013620:	4b0e      	ldr	r3, [pc, #56]	; (801365c <SD_write+0xa8>)
 8013622:	2200      	movs	r2, #0
 8013624:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013626:	f7f0 f99d 	bl	8003964 <HAL_GetTick>
 801362a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801362c:	e007      	b.n	801363e <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801362e:	f7ff feab 	bl	8013388 <BSP_SD_GetCardState>
 8013632:	4603      	mov	r3, r0
 8013634:	2b00      	cmp	r3, #0
 8013636:	d102      	bne.n	801363e <SD_write+0x8a>
          {
            res = RES_OK;
 8013638:	2300      	movs	r3, #0
 801363a:	75fb      	strb	r3, [r7, #23]
            break;
 801363c:	e008      	b.n	8013650 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801363e:	f7f0 f991 	bl	8003964 <HAL_GetTick>
 8013642:	4602      	mov	r2, r0
 8013644:	693b      	ldr	r3, [r7, #16]
 8013646:	1ad3      	subs	r3, r2, r3
 8013648:	f247 522f 	movw	r2, #29999	; 0x752f
 801364c:	4293      	cmp	r3, r2
 801364e:	d9ee      	bls.n	801362e <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8013650:	7dfb      	ldrb	r3, [r7, #23]
}
 8013652:	4618      	mov	r0, r3
 8013654:	3718      	adds	r7, #24
 8013656:	46bd      	mov	sp, r7
 8013658:	bd80      	pop	{r7, pc}
 801365a:	bf00      	nop
 801365c:	24000cf8 	.word	0x24000cf8

08013660 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b08c      	sub	sp, #48	; 0x30
 8013664:	af00      	add	r7, sp, #0
 8013666:	4603      	mov	r3, r0
 8013668:	603a      	str	r2, [r7, #0]
 801366a:	71fb      	strb	r3, [r7, #7]
 801366c:	460b      	mov	r3, r1
 801366e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013670:	2301      	movs	r3, #1
 8013672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013676:	4b25      	ldr	r3, [pc, #148]	; (801370c <SD_ioctl+0xac>)
 8013678:	781b      	ldrb	r3, [r3, #0]
 801367a:	b2db      	uxtb	r3, r3
 801367c:	f003 0301 	and.w	r3, r3, #1
 8013680:	2b00      	cmp	r3, #0
 8013682:	d001      	beq.n	8013688 <SD_ioctl+0x28>
 8013684:	2303      	movs	r3, #3
 8013686:	e03c      	b.n	8013702 <SD_ioctl+0xa2>

  switch (cmd)
 8013688:	79bb      	ldrb	r3, [r7, #6]
 801368a:	2b03      	cmp	r3, #3
 801368c:	d834      	bhi.n	80136f8 <SD_ioctl+0x98>
 801368e:	a201      	add	r2, pc, #4	; (adr r2, 8013694 <SD_ioctl+0x34>)
 8013690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013694:	080136a5 	.word	0x080136a5
 8013698:	080136ad 	.word	0x080136ad
 801369c:	080136c5 	.word	0x080136c5
 80136a0:	080136df 	.word	0x080136df
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80136a4:	2300      	movs	r3, #0
 80136a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80136aa:	e028      	b.n	80136fe <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80136ac:	f107 0308 	add.w	r3, r7, #8
 80136b0:	4618      	mov	r0, r3
 80136b2:	f7ff fe79 	bl	80133a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80136b6:	6a3a      	ldr	r2, [r7, #32]
 80136b8:	683b      	ldr	r3, [r7, #0]
 80136ba:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80136bc:	2300      	movs	r3, #0
 80136be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80136c2:	e01c      	b.n	80136fe <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80136c4:	f107 0308 	add.w	r3, r7, #8
 80136c8:	4618      	mov	r0, r3
 80136ca:	f7ff fe6d 	bl	80133a8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80136ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136d0:	b29a      	uxth	r2, r3
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80136d6:	2300      	movs	r3, #0
 80136d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80136dc:	e00f      	b.n	80136fe <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80136de:	f107 0308 	add.w	r3, r7, #8
 80136e2:	4618      	mov	r0, r3
 80136e4:	f7ff fe60 	bl	80133a8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80136e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136ea:	0a5a      	lsrs	r2, r3, #9
 80136ec:	683b      	ldr	r3, [r7, #0]
 80136ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80136f0:	2300      	movs	r3, #0
 80136f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80136f6:	e002      	b.n	80136fe <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80136f8:	2304      	movs	r3, #4
 80136fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80136fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013702:	4618      	mov	r0, r3
 8013704:	3730      	adds	r7, #48	; 0x30
 8013706:	46bd      	mov	sp, r7
 8013708:	bd80      	pop	{r7, pc}
 801370a:	bf00      	nop
 801370c:	2400000d 	.word	0x2400000d

08013710 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8013710:	b480      	push	{r7}
 8013712:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8013714:	4b03      	ldr	r3, [pc, #12]	; (8013724 <BSP_SD_WriteCpltCallback+0x14>)
 8013716:	2201      	movs	r2, #1
 8013718:	601a      	str	r2, [r3, #0]
}
 801371a:	bf00      	nop
 801371c:	46bd      	mov	sp, r7
 801371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013722:	4770      	bx	lr
 8013724:	24000cf8 	.word	0x24000cf8

08013728 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8013728:	b480      	push	{r7}
 801372a:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 801372c:	4b03      	ldr	r3, [pc, #12]	; (801373c <BSP_SD_ReadCpltCallback+0x14>)
 801372e:	2201      	movs	r2, #1
 8013730:	601a      	str	r2, [r3, #0]
}
 8013732:	bf00      	nop
 8013734:	46bd      	mov	sp, r7
 8013736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801373a:	4770      	bx	lr
 801373c:	24000cfc 	.word	0x24000cfc

08013740 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013740:	b580      	push	{r7, lr}
 8013742:	b084      	sub	sp, #16
 8013744:	af00      	add	r7, sp, #0
 8013746:	6078      	str	r0, [r7, #4]
 8013748:	460b      	mov	r3, r1
 801374a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801374c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013750:	f002 fcea 	bl	8016128 <USBD_static_malloc>
 8013754:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013756:	68fb      	ldr	r3, [r7, #12]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d109      	bne.n	8013770 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	32b0      	adds	r2, #176	; 0xb0
 8013766:	2100      	movs	r1, #0
 8013768:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 801376c:	2302      	movs	r3, #2
 801376e:	e0d4      	b.n	801391a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8013770:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8013774:	2100      	movs	r1, #0
 8013776:	68f8      	ldr	r0, [r7, #12]
 8013778:	f002 fd52 	bl	8016220 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	32b0      	adds	r2, #176	; 0xb0
 8013786:	68f9      	ldr	r1, [r7, #12]
 8013788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	32b0      	adds	r2, #176	; 0xb0
 8013796:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	7c1b      	ldrb	r3, [r3, #16]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d138      	bne.n	801381a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80137a8:	4b5e      	ldr	r3, [pc, #376]	; (8013924 <USBD_CDC_Init+0x1e4>)
 80137aa:	7819      	ldrb	r1, [r3, #0]
 80137ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80137b0:	2202      	movs	r2, #2
 80137b2:	6878      	ldr	r0, [r7, #4]
 80137b4:	f002 fb95 	bl	8015ee2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80137b8:	4b5a      	ldr	r3, [pc, #360]	; (8013924 <USBD_CDC_Init+0x1e4>)
 80137ba:	781b      	ldrb	r3, [r3, #0]
 80137bc:	f003 020f 	and.w	r2, r3, #15
 80137c0:	6879      	ldr	r1, [r7, #4]
 80137c2:	4613      	mov	r3, r2
 80137c4:	009b      	lsls	r3, r3, #2
 80137c6:	4413      	add	r3, r2
 80137c8:	009b      	lsls	r3, r3, #2
 80137ca:	440b      	add	r3, r1
 80137cc:	3324      	adds	r3, #36	; 0x24
 80137ce:	2201      	movs	r2, #1
 80137d0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80137d2:	4b55      	ldr	r3, [pc, #340]	; (8013928 <USBD_CDC_Init+0x1e8>)
 80137d4:	7819      	ldrb	r1, [r3, #0]
 80137d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80137da:	2202      	movs	r2, #2
 80137dc:	6878      	ldr	r0, [r7, #4]
 80137de:	f002 fb80 	bl	8015ee2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80137e2:	4b51      	ldr	r3, [pc, #324]	; (8013928 <USBD_CDC_Init+0x1e8>)
 80137e4:	781b      	ldrb	r3, [r3, #0]
 80137e6:	f003 020f 	and.w	r2, r3, #15
 80137ea:	6879      	ldr	r1, [r7, #4]
 80137ec:	4613      	mov	r3, r2
 80137ee:	009b      	lsls	r3, r3, #2
 80137f0:	4413      	add	r3, r2
 80137f2:	009b      	lsls	r3, r3, #2
 80137f4:	440b      	add	r3, r1
 80137f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80137fa:	2201      	movs	r2, #1
 80137fc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80137fe:	4b4b      	ldr	r3, [pc, #300]	; (801392c <USBD_CDC_Init+0x1ec>)
 8013800:	781b      	ldrb	r3, [r3, #0]
 8013802:	f003 020f 	and.w	r2, r3, #15
 8013806:	6879      	ldr	r1, [r7, #4]
 8013808:	4613      	mov	r3, r2
 801380a:	009b      	lsls	r3, r3, #2
 801380c:	4413      	add	r3, r2
 801380e:	009b      	lsls	r3, r3, #2
 8013810:	440b      	add	r3, r1
 8013812:	3326      	adds	r3, #38	; 0x26
 8013814:	2210      	movs	r2, #16
 8013816:	801a      	strh	r2, [r3, #0]
 8013818:	e035      	b.n	8013886 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 801381a:	4b42      	ldr	r3, [pc, #264]	; (8013924 <USBD_CDC_Init+0x1e4>)
 801381c:	7819      	ldrb	r1, [r3, #0]
 801381e:	2340      	movs	r3, #64	; 0x40
 8013820:	2202      	movs	r2, #2
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	f002 fb5d 	bl	8015ee2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8013828:	4b3e      	ldr	r3, [pc, #248]	; (8013924 <USBD_CDC_Init+0x1e4>)
 801382a:	781b      	ldrb	r3, [r3, #0]
 801382c:	f003 020f 	and.w	r2, r3, #15
 8013830:	6879      	ldr	r1, [r7, #4]
 8013832:	4613      	mov	r3, r2
 8013834:	009b      	lsls	r3, r3, #2
 8013836:	4413      	add	r3, r2
 8013838:	009b      	lsls	r3, r3, #2
 801383a:	440b      	add	r3, r1
 801383c:	3324      	adds	r3, #36	; 0x24
 801383e:	2201      	movs	r2, #1
 8013840:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8013842:	4b39      	ldr	r3, [pc, #228]	; (8013928 <USBD_CDC_Init+0x1e8>)
 8013844:	7819      	ldrb	r1, [r3, #0]
 8013846:	2340      	movs	r3, #64	; 0x40
 8013848:	2202      	movs	r2, #2
 801384a:	6878      	ldr	r0, [r7, #4]
 801384c:	f002 fb49 	bl	8015ee2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8013850:	4b35      	ldr	r3, [pc, #212]	; (8013928 <USBD_CDC_Init+0x1e8>)
 8013852:	781b      	ldrb	r3, [r3, #0]
 8013854:	f003 020f 	and.w	r2, r3, #15
 8013858:	6879      	ldr	r1, [r7, #4]
 801385a:	4613      	mov	r3, r2
 801385c:	009b      	lsls	r3, r3, #2
 801385e:	4413      	add	r3, r2
 8013860:	009b      	lsls	r3, r3, #2
 8013862:	440b      	add	r3, r1
 8013864:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013868:	2201      	movs	r2, #1
 801386a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 801386c:	4b2f      	ldr	r3, [pc, #188]	; (801392c <USBD_CDC_Init+0x1ec>)
 801386e:	781b      	ldrb	r3, [r3, #0]
 8013870:	f003 020f 	and.w	r2, r3, #15
 8013874:	6879      	ldr	r1, [r7, #4]
 8013876:	4613      	mov	r3, r2
 8013878:	009b      	lsls	r3, r3, #2
 801387a:	4413      	add	r3, r2
 801387c:	009b      	lsls	r3, r3, #2
 801387e:	440b      	add	r3, r1
 8013880:	3326      	adds	r3, #38	; 0x26
 8013882:	2210      	movs	r2, #16
 8013884:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013886:	4b29      	ldr	r3, [pc, #164]	; (801392c <USBD_CDC_Init+0x1ec>)
 8013888:	7819      	ldrb	r1, [r3, #0]
 801388a:	2308      	movs	r3, #8
 801388c:	2203      	movs	r2, #3
 801388e:	6878      	ldr	r0, [r7, #4]
 8013890:	f002 fb27 	bl	8015ee2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8013894:	4b25      	ldr	r3, [pc, #148]	; (801392c <USBD_CDC_Init+0x1ec>)
 8013896:	781b      	ldrb	r3, [r3, #0]
 8013898:	f003 020f 	and.w	r2, r3, #15
 801389c:	6879      	ldr	r1, [r7, #4]
 801389e:	4613      	mov	r3, r2
 80138a0:	009b      	lsls	r3, r3, #2
 80138a2:	4413      	add	r3, r2
 80138a4:	009b      	lsls	r3, r3, #2
 80138a6:	440b      	add	r3, r1
 80138a8:	3324      	adds	r3, #36	; 0x24
 80138aa:	2201      	movs	r2, #1
 80138ac:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80138ae:	68fb      	ldr	r3, [r7, #12]
 80138b0:	2200      	movs	r2, #0
 80138b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80138bc:	687a      	ldr	r2, [r7, #4]
 80138be:	33b0      	adds	r3, #176	; 0xb0
 80138c0:	009b      	lsls	r3, r3, #2
 80138c2:	4413      	add	r3, r2
 80138c4:	685b      	ldr	r3, [r3, #4]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	2200      	movs	r2, #0
 80138ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	2200      	movs	r2, #0
 80138d6:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d101      	bne.n	80138e8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80138e4:	2302      	movs	r3, #2
 80138e6:	e018      	b.n	801391a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	7c1b      	ldrb	r3, [r3, #16]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d10a      	bne.n	8013906 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80138f0:	4b0d      	ldr	r3, [pc, #52]	; (8013928 <USBD_CDC_Init+0x1e8>)
 80138f2:	7819      	ldrb	r1, [r3, #0]
 80138f4:	68fb      	ldr	r3, [r7, #12]
 80138f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80138fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80138fe:	6878      	ldr	r0, [r7, #4]
 8013900:	f002 fbde 	bl	80160c0 <USBD_LL_PrepareReceive>
 8013904:	e008      	b.n	8013918 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013906:	4b08      	ldr	r3, [pc, #32]	; (8013928 <USBD_CDC_Init+0x1e8>)
 8013908:	7819      	ldrb	r1, [r3, #0]
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013910:	2340      	movs	r3, #64	; 0x40
 8013912:	6878      	ldr	r0, [r7, #4]
 8013914:	f002 fbd4 	bl	80160c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013918:	2300      	movs	r3, #0
}
 801391a:	4618      	mov	r0, r3
 801391c:	3710      	adds	r7, #16
 801391e:	46bd      	mov	sp, r7
 8013920:	bd80      	pop	{r7, pc}
 8013922:	bf00      	nop
 8013924:	24000097 	.word	0x24000097
 8013928:	24000098 	.word	0x24000098
 801392c:	24000099 	.word	0x24000099

08013930 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b082      	sub	sp, #8
 8013934:	af00      	add	r7, sp, #0
 8013936:	6078      	str	r0, [r7, #4]
 8013938:	460b      	mov	r3, r1
 801393a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 801393c:	4b3a      	ldr	r3, [pc, #232]	; (8013a28 <USBD_CDC_DeInit+0xf8>)
 801393e:	781b      	ldrb	r3, [r3, #0]
 8013940:	4619      	mov	r1, r3
 8013942:	6878      	ldr	r0, [r7, #4]
 8013944:	f002 faf3 	bl	8015f2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8013948:	4b37      	ldr	r3, [pc, #220]	; (8013a28 <USBD_CDC_DeInit+0xf8>)
 801394a:	781b      	ldrb	r3, [r3, #0]
 801394c:	f003 020f 	and.w	r2, r3, #15
 8013950:	6879      	ldr	r1, [r7, #4]
 8013952:	4613      	mov	r3, r2
 8013954:	009b      	lsls	r3, r3, #2
 8013956:	4413      	add	r3, r2
 8013958:	009b      	lsls	r3, r3, #2
 801395a:	440b      	add	r3, r1
 801395c:	3324      	adds	r3, #36	; 0x24
 801395e:	2200      	movs	r2, #0
 8013960:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8013962:	4b32      	ldr	r3, [pc, #200]	; (8013a2c <USBD_CDC_DeInit+0xfc>)
 8013964:	781b      	ldrb	r3, [r3, #0]
 8013966:	4619      	mov	r1, r3
 8013968:	6878      	ldr	r0, [r7, #4]
 801396a:	f002 fae0 	bl	8015f2e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801396e:	4b2f      	ldr	r3, [pc, #188]	; (8013a2c <USBD_CDC_DeInit+0xfc>)
 8013970:	781b      	ldrb	r3, [r3, #0]
 8013972:	f003 020f 	and.w	r2, r3, #15
 8013976:	6879      	ldr	r1, [r7, #4]
 8013978:	4613      	mov	r3, r2
 801397a:	009b      	lsls	r3, r3, #2
 801397c:	4413      	add	r3, r2
 801397e:	009b      	lsls	r3, r3, #2
 8013980:	440b      	add	r3, r1
 8013982:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8013986:	2200      	movs	r2, #0
 8013988:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 801398a:	4b29      	ldr	r3, [pc, #164]	; (8013a30 <USBD_CDC_DeInit+0x100>)
 801398c:	781b      	ldrb	r3, [r3, #0]
 801398e:	4619      	mov	r1, r3
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f002 facc 	bl	8015f2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8013996:	4b26      	ldr	r3, [pc, #152]	; (8013a30 <USBD_CDC_DeInit+0x100>)
 8013998:	781b      	ldrb	r3, [r3, #0]
 801399a:	f003 020f 	and.w	r2, r3, #15
 801399e:	6879      	ldr	r1, [r7, #4]
 80139a0:	4613      	mov	r3, r2
 80139a2:	009b      	lsls	r3, r3, #2
 80139a4:	4413      	add	r3, r2
 80139a6:	009b      	lsls	r3, r3, #2
 80139a8:	440b      	add	r3, r1
 80139aa:	3324      	adds	r3, #36	; 0x24
 80139ac:	2200      	movs	r2, #0
 80139ae:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80139b0:	4b1f      	ldr	r3, [pc, #124]	; (8013a30 <USBD_CDC_DeInit+0x100>)
 80139b2:	781b      	ldrb	r3, [r3, #0]
 80139b4:	f003 020f 	and.w	r2, r3, #15
 80139b8:	6879      	ldr	r1, [r7, #4]
 80139ba:	4613      	mov	r3, r2
 80139bc:	009b      	lsls	r3, r3, #2
 80139be:	4413      	add	r3, r2
 80139c0:	009b      	lsls	r3, r3, #2
 80139c2:	440b      	add	r3, r1
 80139c4:	3326      	adds	r3, #38	; 0x26
 80139c6:	2200      	movs	r2, #0
 80139c8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	32b0      	adds	r2, #176	; 0xb0
 80139d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d01f      	beq.n	8013a1c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80139e2:	687a      	ldr	r2, [r7, #4]
 80139e4:	33b0      	adds	r3, #176	; 0xb0
 80139e6:	009b      	lsls	r3, r3, #2
 80139e8:	4413      	add	r3, r2
 80139ea:	685b      	ldr	r3, [r3, #4]
 80139ec:	685b      	ldr	r3, [r3, #4]
 80139ee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	32b0      	adds	r2, #176	; 0xb0
 80139fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80139fe:	4618      	mov	r0, r3
 8013a00:	f002 fba0 	bl	8016144 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	32b0      	adds	r2, #176	; 0xb0
 8013a0e:	2100      	movs	r1, #0
 8013a10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	2200      	movs	r2, #0
 8013a18:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013a1c:	2300      	movs	r3, #0
}
 8013a1e:	4618      	mov	r0, r3
 8013a20:	3708      	adds	r7, #8
 8013a22:	46bd      	mov	sp, r7
 8013a24:	bd80      	pop	{r7, pc}
 8013a26:	bf00      	nop
 8013a28:	24000097 	.word	0x24000097
 8013a2c:	24000098 	.word	0x24000098
 8013a30:	24000099 	.word	0x24000099

08013a34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013a34:	b580      	push	{r7, lr}
 8013a36:	b086      	sub	sp, #24
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
 8013a3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	32b0      	adds	r2, #176	; 0xb0
 8013a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a4c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013a4e:	2300      	movs	r3, #0
 8013a50:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013a52:	2300      	movs	r3, #0
 8013a54:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013a56:	2300      	movs	r3, #0
 8013a58:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013a5a:	693b      	ldr	r3, [r7, #16]
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d101      	bne.n	8013a64 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8013a60:	2303      	movs	r3, #3
 8013a62:	e0bf      	b.n	8013be4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013a64:	683b      	ldr	r3, [r7, #0]
 8013a66:	781b      	ldrb	r3, [r3, #0]
 8013a68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d050      	beq.n	8013b12 <USBD_CDC_Setup+0xde>
 8013a70:	2b20      	cmp	r3, #32
 8013a72:	f040 80af 	bne.w	8013bd4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8013a76:	683b      	ldr	r3, [r7, #0]
 8013a78:	88db      	ldrh	r3, [r3, #6]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d03a      	beq.n	8013af4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013a7e:	683b      	ldr	r3, [r7, #0]
 8013a80:	781b      	ldrb	r3, [r3, #0]
 8013a82:	b25b      	sxtb	r3, r3
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	da1b      	bge.n	8013ac0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013a8e:	687a      	ldr	r2, [r7, #4]
 8013a90:	33b0      	adds	r3, #176	; 0xb0
 8013a92:	009b      	lsls	r3, r3, #2
 8013a94:	4413      	add	r3, r2
 8013a96:	685b      	ldr	r3, [r3, #4]
 8013a98:	689b      	ldr	r3, [r3, #8]
 8013a9a:	683a      	ldr	r2, [r7, #0]
 8013a9c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8013a9e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013aa0:	683a      	ldr	r2, [r7, #0]
 8013aa2:	88d2      	ldrh	r2, [r2, #6]
 8013aa4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8013aa6:	683b      	ldr	r3, [r7, #0]
 8013aa8:	88db      	ldrh	r3, [r3, #6]
 8013aaa:	2b07      	cmp	r3, #7
 8013aac:	bf28      	it	cs
 8013aae:	2307      	movcs	r3, #7
 8013ab0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8013ab2:	693b      	ldr	r3, [r7, #16]
 8013ab4:	89fa      	ldrh	r2, [r7, #14]
 8013ab6:	4619      	mov	r1, r3
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f001 fd89 	bl	80155d0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8013abe:	e090      	b.n	8013be2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8013ac0:	683b      	ldr	r3, [r7, #0]
 8013ac2:	785a      	ldrb	r2, [r3, #1]
 8013ac4:	693b      	ldr	r3, [r7, #16]
 8013ac6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8013aca:	683b      	ldr	r3, [r7, #0]
 8013acc:	88db      	ldrh	r3, [r3, #6]
 8013ace:	2b3f      	cmp	r3, #63	; 0x3f
 8013ad0:	d803      	bhi.n	8013ada <USBD_CDC_Setup+0xa6>
 8013ad2:	683b      	ldr	r3, [r7, #0]
 8013ad4:	88db      	ldrh	r3, [r3, #6]
 8013ad6:	b2da      	uxtb	r2, r3
 8013ad8:	e000      	b.n	8013adc <USBD_CDC_Setup+0xa8>
 8013ada:	2240      	movs	r2, #64	; 0x40
 8013adc:	693b      	ldr	r3, [r7, #16]
 8013ade:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8013ae2:	6939      	ldr	r1, [r7, #16]
 8013ae4:	693b      	ldr	r3, [r7, #16]
 8013ae6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8013aea:	461a      	mov	r2, r3
 8013aec:	6878      	ldr	r0, [r7, #4]
 8013aee:	f001 fd9b 	bl	8015628 <USBD_CtlPrepareRx>
      break;
 8013af2:	e076      	b.n	8013be2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013afa:	687a      	ldr	r2, [r7, #4]
 8013afc:	33b0      	adds	r3, #176	; 0xb0
 8013afe:	009b      	lsls	r3, r3, #2
 8013b00:	4413      	add	r3, r2
 8013b02:	685b      	ldr	r3, [r3, #4]
 8013b04:	689b      	ldr	r3, [r3, #8]
 8013b06:	683a      	ldr	r2, [r7, #0]
 8013b08:	7850      	ldrb	r0, [r2, #1]
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	6839      	ldr	r1, [r7, #0]
 8013b0e:	4798      	blx	r3
      break;
 8013b10:	e067      	b.n	8013be2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013b12:	683b      	ldr	r3, [r7, #0]
 8013b14:	785b      	ldrb	r3, [r3, #1]
 8013b16:	2b0b      	cmp	r3, #11
 8013b18:	d851      	bhi.n	8013bbe <USBD_CDC_Setup+0x18a>
 8013b1a:	a201      	add	r2, pc, #4	; (adr r2, 8013b20 <USBD_CDC_Setup+0xec>)
 8013b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b20:	08013b51 	.word	0x08013b51
 8013b24:	08013bcd 	.word	0x08013bcd
 8013b28:	08013bbf 	.word	0x08013bbf
 8013b2c:	08013bbf 	.word	0x08013bbf
 8013b30:	08013bbf 	.word	0x08013bbf
 8013b34:	08013bbf 	.word	0x08013bbf
 8013b38:	08013bbf 	.word	0x08013bbf
 8013b3c:	08013bbf 	.word	0x08013bbf
 8013b40:	08013bbf 	.word	0x08013bbf
 8013b44:	08013bbf 	.word	0x08013bbf
 8013b48:	08013b7b 	.word	0x08013b7b
 8013b4c:	08013ba5 	.word	0x08013ba5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b56:	b2db      	uxtb	r3, r3
 8013b58:	2b03      	cmp	r3, #3
 8013b5a:	d107      	bne.n	8013b6c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013b5c:	f107 030a 	add.w	r3, r7, #10
 8013b60:	2202      	movs	r2, #2
 8013b62:	4619      	mov	r1, r3
 8013b64:	6878      	ldr	r0, [r7, #4]
 8013b66:	f001 fd33 	bl	80155d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013b6a:	e032      	b.n	8013bd2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013b6c:	6839      	ldr	r1, [r7, #0]
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f001 fcbd 	bl	80154ee <USBD_CtlError>
            ret = USBD_FAIL;
 8013b74:	2303      	movs	r3, #3
 8013b76:	75fb      	strb	r3, [r7, #23]
          break;
 8013b78:	e02b      	b.n	8013bd2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013b80:	b2db      	uxtb	r3, r3
 8013b82:	2b03      	cmp	r3, #3
 8013b84:	d107      	bne.n	8013b96 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8013b86:	f107 030d 	add.w	r3, r7, #13
 8013b8a:	2201      	movs	r2, #1
 8013b8c:	4619      	mov	r1, r3
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	f001 fd1e 	bl	80155d0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013b94:	e01d      	b.n	8013bd2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8013b96:	6839      	ldr	r1, [r7, #0]
 8013b98:	6878      	ldr	r0, [r7, #4]
 8013b9a:	f001 fca8 	bl	80154ee <USBD_CtlError>
            ret = USBD_FAIL;
 8013b9e:	2303      	movs	r3, #3
 8013ba0:	75fb      	strb	r3, [r7, #23]
          break;
 8013ba2:	e016      	b.n	8013bd2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013baa:	b2db      	uxtb	r3, r3
 8013bac:	2b03      	cmp	r3, #3
 8013bae:	d00f      	beq.n	8013bd0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8013bb0:	6839      	ldr	r1, [r7, #0]
 8013bb2:	6878      	ldr	r0, [r7, #4]
 8013bb4:	f001 fc9b 	bl	80154ee <USBD_CtlError>
            ret = USBD_FAIL;
 8013bb8:	2303      	movs	r3, #3
 8013bba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8013bbc:	e008      	b.n	8013bd0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8013bbe:	6839      	ldr	r1, [r7, #0]
 8013bc0:	6878      	ldr	r0, [r7, #4]
 8013bc2:	f001 fc94 	bl	80154ee <USBD_CtlError>
          ret = USBD_FAIL;
 8013bc6:	2303      	movs	r3, #3
 8013bc8:	75fb      	strb	r3, [r7, #23]
          break;
 8013bca:	e002      	b.n	8013bd2 <USBD_CDC_Setup+0x19e>
          break;
 8013bcc:	bf00      	nop
 8013bce:	e008      	b.n	8013be2 <USBD_CDC_Setup+0x1ae>
          break;
 8013bd0:	bf00      	nop
      }
      break;
 8013bd2:	e006      	b.n	8013be2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8013bd4:	6839      	ldr	r1, [r7, #0]
 8013bd6:	6878      	ldr	r0, [r7, #4]
 8013bd8:	f001 fc89 	bl	80154ee <USBD_CtlError>
      ret = USBD_FAIL;
 8013bdc:	2303      	movs	r3, #3
 8013bde:	75fb      	strb	r3, [r7, #23]
      break;
 8013be0:	bf00      	nop
  }

  return (uint8_t)ret;
 8013be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013be4:	4618      	mov	r0, r3
 8013be6:	3718      	adds	r7, #24
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}

08013bec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b084      	sub	sp, #16
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
 8013bf4:	460b      	mov	r3, r1
 8013bf6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013bfe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	32b0      	adds	r2, #176	; 0xb0
 8013c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d101      	bne.n	8013c16 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8013c12:	2303      	movs	r3, #3
 8013c14:	e065      	b.n	8013ce2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	32b0      	adds	r2, #176	; 0xb0
 8013c20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c24:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013c26:	78fb      	ldrb	r3, [r7, #3]
 8013c28:	f003 020f 	and.w	r2, r3, #15
 8013c2c:	6879      	ldr	r1, [r7, #4]
 8013c2e:	4613      	mov	r3, r2
 8013c30:	009b      	lsls	r3, r3, #2
 8013c32:	4413      	add	r3, r2
 8013c34:	009b      	lsls	r3, r3, #2
 8013c36:	440b      	add	r3, r1
 8013c38:	3318      	adds	r3, #24
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d02f      	beq.n	8013ca0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8013c40:	78fb      	ldrb	r3, [r7, #3]
 8013c42:	f003 020f 	and.w	r2, r3, #15
 8013c46:	6879      	ldr	r1, [r7, #4]
 8013c48:	4613      	mov	r3, r2
 8013c4a:	009b      	lsls	r3, r3, #2
 8013c4c:	4413      	add	r3, r2
 8013c4e:	009b      	lsls	r3, r3, #2
 8013c50:	440b      	add	r3, r1
 8013c52:	3318      	adds	r3, #24
 8013c54:	681a      	ldr	r2, [r3, #0]
 8013c56:	78fb      	ldrb	r3, [r7, #3]
 8013c58:	f003 010f 	and.w	r1, r3, #15
 8013c5c:	68f8      	ldr	r0, [r7, #12]
 8013c5e:	460b      	mov	r3, r1
 8013c60:	00db      	lsls	r3, r3, #3
 8013c62:	440b      	add	r3, r1
 8013c64:	009b      	lsls	r3, r3, #2
 8013c66:	4403      	add	r3, r0
 8013c68:	3344      	adds	r3, #68	; 0x44
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	fbb2 f1f3 	udiv	r1, r2, r3
 8013c70:	fb01 f303 	mul.w	r3, r1, r3
 8013c74:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d112      	bne.n	8013ca0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8013c7a:	78fb      	ldrb	r3, [r7, #3]
 8013c7c:	f003 020f 	and.w	r2, r3, #15
 8013c80:	6879      	ldr	r1, [r7, #4]
 8013c82:	4613      	mov	r3, r2
 8013c84:	009b      	lsls	r3, r3, #2
 8013c86:	4413      	add	r3, r2
 8013c88:	009b      	lsls	r3, r3, #2
 8013c8a:	440b      	add	r3, r1
 8013c8c:	3318      	adds	r3, #24
 8013c8e:	2200      	movs	r2, #0
 8013c90:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013c92:	78f9      	ldrb	r1, [r7, #3]
 8013c94:	2300      	movs	r3, #0
 8013c96:	2200      	movs	r2, #0
 8013c98:	6878      	ldr	r0, [r7, #4]
 8013c9a:	f002 f9f0 	bl	801607e <USBD_LL_Transmit>
 8013c9e:	e01f      	b.n	8013ce0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8013ca0:	68bb      	ldr	r3, [r7, #8]
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013cae:	687a      	ldr	r2, [r7, #4]
 8013cb0:	33b0      	adds	r3, #176	; 0xb0
 8013cb2:	009b      	lsls	r3, r3, #2
 8013cb4:	4413      	add	r3, r2
 8013cb6:	685b      	ldr	r3, [r3, #4]
 8013cb8:	691b      	ldr	r3, [r3, #16]
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d010      	beq.n	8013ce0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013cc4:	687a      	ldr	r2, [r7, #4]
 8013cc6:	33b0      	adds	r3, #176	; 0xb0
 8013cc8:	009b      	lsls	r3, r3, #2
 8013cca:	4413      	add	r3, r2
 8013ccc:	685b      	ldr	r3, [r3, #4]
 8013cce:	691b      	ldr	r3, [r3, #16]
 8013cd0:	68ba      	ldr	r2, [r7, #8]
 8013cd2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8013cd6:	68ba      	ldr	r2, [r7, #8]
 8013cd8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8013cdc:	78fa      	ldrb	r2, [r7, #3]
 8013cde:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8013ce0:	2300      	movs	r3, #0
}
 8013ce2:	4618      	mov	r0, r3
 8013ce4:	3710      	adds	r7, #16
 8013ce6:	46bd      	mov	sp, r7
 8013ce8:	bd80      	pop	{r7, pc}

08013cea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013cea:	b580      	push	{r7, lr}
 8013cec:	b084      	sub	sp, #16
 8013cee:	af00      	add	r7, sp, #0
 8013cf0:	6078      	str	r0, [r7, #4]
 8013cf2:	460b      	mov	r3, r1
 8013cf4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	32b0      	adds	r2, #176	; 0xb0
 8013d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d04:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	32b0      	adds	r2, #176	; 0xb0
 8013d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d14:	2b00      	cmp	r3, #0
 8013d16:	d101      	bne.n	8013d1c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8013d18:	2303      	movs	r3, #3
 8013d1a:	e01a      	b.n	8013d52 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013d1c:	78fb      	ldrb	r3, [r7, #3]
 8013d1e:	4619      	mov	r1, r3
 8013d20:	6878      	ldr	r0, [r7, #4]
 8013d22:	f002 f9ee 	bl	8016102 <USBD_LL_GetRxDataSize>
 8013d26:	4602      	mov	r2, r0
 8013d28:	68fb      	ldr	r3, [r7, #12]
 8013d2a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013d34:	687a      	ldr	r2, [r7, #4]
 8013d36:	33b0      	adds	r3, #176	; 0xb0
 8013d38:	009b      	lsls	r3, r3, #2
 8013d3a:	4413      	add	r3, r2
 8013d3c:	685b      	ldr	r3, [r3, #4]
 8013d3e:	68db      	ldr	r3, [r3, #12]
 8013d40:	68fa      	ldr	r2, [r7, #12]
 8013d42:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8013d46:	68fa      	ldr	r2, [r7, #12]
 8013d48:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8013d4c:	4611      	mov	r1, r2
 8013d4e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8013d50:	2300      	movs	r3, #0
}
 8013d52:	4618      	mov	r0, r3
 8013d54:	3710      	adds	r7, #16
 8013d56:	46bd      	mov	sp, r7
 8013d58:	bd80      	pop	{r7, pc}

08013d5a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013d5a:	b580      	push	{r7, lr}
 8013d5c:	b084      	sub	sp, #16
 8013d5e:	af00      	add	r7, sp, #0
 8013d60:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	32b0      	adds	r2, #176	; 0xb0
 8013d6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013d70:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d101      	bne.n	8013d7c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8013d78:	2303      	movs	r3, #3
 8013d7a:	e025      	b.n	8013dc8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013d82:	687a      	ldr	r2, [r7, #4]
 8013d84:	33b0      	adds	r3, #176	; 0xb0
 8013d86:	009b      	lsls	r3, r3, #2
 8013d88:	4413      	add	r3, r2
 8013d8a:	685b      	ldr	r3, [r3, #4]
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d01a      	beq.n	8013dc6 <USBD_CDC_EP0_RxReady+0x6c>
 8013d90:	68fb      	ldr	r3, [r7, #12]
 8013d92:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8013d96:	2bff      	cmp	r3, #255	; 0xff
 8013d98:	d015      	beq.n	8013dc6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013da0:	687a      	ldr	r2, [r7, #4]
 8013da2:	33b0      	adds	r3, #176	; 0xb0
 8013da4:	009b      	lsls	r3, r3, #2
 8013da6:	4413      	add	r3, r2
 8013da8:	685b      	ldr	r3, [r3, #4]
 8013daa:	689b      	ldr	r3, [r3, #8]
 8013dac:	68fa      	ldr	r2, [r7, #12]
 8013dae:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8013db2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8013db4:	68fa      	ldr	r2, [r7, #12]
 8013db6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8013dba:	b292      	uxth	r2, r2
 8013dbc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013dbe:	68fb      	ldr	r3, [r7, #12]
 8013dc0:	22ff      	movs	r2, #255	; 0xff
 8013dc2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8013dc6:	2300      	movs	r3, #0
}
 8013dc8:	4618      	mov	r0, r3
 8013dca:	3710      	adds	r7, #16
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	bd80      	pop	{r7, pc}

08013dd0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b086      	sub	sp, #24
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013dd8:	2182      	movs	r1, #130	; 0x82
 8013dda:	4818      	ldr	r0, [pc, #96]	; (8013e3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013ddc:	f000 fd4f 	bl	801487e <USBD_GetEpDesc>
 8013de0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013de2:	2101      	movs	r1, #1
 8013de4:	4815      	ldr	r0, [pc, #84]	; (8013e3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013de6:	f000 fd4a 	bl	801487e <USBD_GetEpDesc>
 8013dea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013dec:	2181      	movs	r1, #129	; 0x81
 8013dee:	4813      	ldr	r0, [pc, #76]	; (8013e3c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8013df0:	f000 fd45 	bl	801487e <USBD_GetEpDesc>
 8013df4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013df6:	697b      	ldr	r3, [r7, #20]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d002      	beq.n	8013e02 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013dfc:	697b      	ldr	r3, [r7, #20]
 8013dfe:	2210      	movs	r2, #16
 8013e00:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013e02:	693b      	ldr	r3, [r7, #16]
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d006      	beq.n	8013e16 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013e08:	693b      	ldr	r3, [r7, #16]
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013e10:	711a      	strb	r2, [r3, #4]
 8013e12:	2200      	movs	r2, #0
 8013e14:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d006      	beq.n	8013e2a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013e1c:	68fb      	ldr	r3, [r7, #12]
 8013e1e:	2200      	movs	r2, #0
 8013e20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013e24:	711a      	strb	r2, [r3, #4]
 8013e26:	2200      	movs	r2, #0
 8013e28:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	2243      	movs	r2, #67	; 0x43
 8013e2e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013e30:	4b02      	ldr	r3, [pc, #8]	; (8013e3c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3718      	adds	r7, #24
 8013e36:	46bd      	mov	sp, r7
 8013e38:	bd80      	pop	{r7, pc}
 8013e3a:	bf00      	nop
 8013e3c:	24000054 	.word	0x24000054

08013e40 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b086      	sub	sp, #24
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013e48:	2182      	movs	r1, #130	; 0x82
 8013e4a:	4818      	ldr	r0, [pc, #96]	; (8013eac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013e4c:	f000 fd17 	bl	801487e <USBD_GetEpDesc>
 8013e50:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013e52:	2101      	movs	r1, #1
 8013e54:	4815      	ldr	r0, [pc, #84]	; (8013eac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013e56:	f000 fd12 	bl	801487e <USBD_GetEpDesc>
 8013e5a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013e5c:	2181      	movs	r1, #129	; 0x81
 8013e5e:	4813      	ldr	r0, [pc, #76]	; (8013eac <USBD_CDC_GetHSCfgDesc+0x6c>)
 8013e60:	f000 fd0d 	bl	801487e <USBD_GetEpDesc>
 8013e64:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013e66:	697b      	ldr	r3, [r7, #20]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d002      	beq.n	8013e72 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8013e6c:	697b      	ldr	r3, [r7, #20]
 8013e6e:	2210      	movs	r2, #16
 8013e70:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013e72:	693b      	ldr	r3, [r7, #16]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d006      	beq.n	8013e86 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013e78:	693b      	ldr	r3, [r7, #16]
 8013e7a:	2200      	movs	r2, #0
 8013e7c:	711a      	strb	r2, [r3, #4]
 8013e7e:	2200      	movs	r2, #0
 8013e80:	f042 0202 	orr.w	r2, r2, #2
 8013e84:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d006      	beq.n	8013e9a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	2200      	movs	r2, #0
 8013e90:	711a      	strb	r2, [r3, #4]
 8013e92:	2200      	movs	r2, #0
 8013e94:	f042 0202 	orr.w	r2, r2, #2
 8013e98:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	2243      	movs	r2, #67	; 0x43
 8013e9e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013ea0:	4b02      	ldr	r3, [pc, #8]	; (8013eac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	3718      	adds	r7, #24
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	bd80      	pop	{r7, pc}
 8013eaa:	bf00      	nop
 8013eac:	24000054 	.word	0x24000054

08013eb0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013eb0:	b580      	push	{r7, lr}
 8013eb2:	b086      	sub	sp, #24
 8013eb4:	af00      	add	r7, sp, #0
 8013eb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8013eb8:	2182      	movs	r1, #130	; 0x82
 8013eba:	4818      	ldr	r0, [pc, #96]	; (8013f1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013ebc:	f000 fcdf 	bl	801487e <USBD_GetEpDesc>
 8013ec0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8013ec2:	2101      	movs	r1, #1
 8013ec4:	4815      	ldr	r0, [pc, #84]	; (8013f1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013ec6:	f000 fcda 	bl	801487e <USBD_GetEpDesc>
 8013eca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8013ecc:	2181      	movs	r1, #129	; 0x81
 8013ece:	4813      	ldr	r0, [pc, #76]	; (8013f1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8013ed0:	f000 fcd5 	bl	801487e <USBD_GetEpDesc>
 8013ed4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8013ed6:	697b      	ldr	r3, [r7, #20]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d002      	beq.n	8013ee2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8013edc:	697b      	ldr	r3, [r7, #20]
 8013ede:	2210      	movs	r2, #16
 8013ee0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8013ee2:	693b      	ldr	r3, [r7, #16]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d006      	beq.n	8013ef6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013ee8:	693b      	ldr	r3, [r7, #16]
 8013eea:	2200      	movs	r2, #0
 8013eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013ef0:	711a      	strb	r2, [r3, #4]
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d006      	beq.n	8013f0a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	2200      	movs	r2, #0
 8013f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013f04:	711a      	strb	r2, [r3, #4]
 8013f06:	2200      	movs	r2, #0
 8013f08:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	2243      	movs	r2, #67	; 0x43
 8013f0e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8013f10:	4b02      	ldr	r3, [pc, #8]	; (8013f1c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8013f12:	4618      	mov	r0, r3
 8013f14:	3718      	adds	r7, #24
 8013f16:	46bd      	mov	sp, r7
 8013f18:	bd80      	pop	{r7, pc}
 8013f1a:	bf00      	nop
 8013f1c:	24000054 	.word	0x24000054

08013f20 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013f20:	b480      	push	{r7}
 8013f22:	b083      	sub	sp, #12
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	220a      	movs	r2, #10
 8013f2c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8013f2e:	4b03      	ldr	r3, [pc, #12]	; (8013f3c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8013f30:	4618      	mov	r0, r3
 8013f32:	370c      	adds	r7, #12
 8013f34:	46bd      	mov	sp, r7
 8013f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f3a:	4770      	bx	lr
 8013f3c:	24000010 	.word	0x24000010

08013f40 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8013f40:	b480      	push	{r7}
 8013f42:	b083      	sub	sp, #12
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
 8013f48:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8013f4a:	683b      	ldr	r3, [r7, #0]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d101      	bne.n	8013f54 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8013f50:	2303      	movs	r3, #3
 8013f52:	e009      	b.n	8013f68 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8013f5a:	687a      	ldr	r2, [r7, #4]
 8013f5c:	33b0      	adds	r3, #176	; 0xb0
 8013f5e:	009b      	lsls	r3, r3, #2
 8013f60:	4413      	add	r3, r2
 8013f62:	683a      	ldr	r2, [r7, #0]
 8013f64:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8013f66:	2300      	movs	r3, #0
}
 8013f68:	4618      	mov	r0, r3
 8013f6a:	370c      	adds	r7, #12
 8013f6c:	46bd      	mov	sp, r7
 8013f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f72:	4770      	bx	lr

08013f74 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8013f74:	b480      	push	{r7}
 8013f76:	b087      	sub	sp, #28
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	60f8      	str	r0, [r7, #12]
 8013f7c:	60b9      	str	r1, [r7, #8]
 8013f7e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013f80:	68fb      	ldr	r3, [r7, #12]
 8013f82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	32b0      	adds	r2, #176	; 0xb0
 8013f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013f8e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8013f90:	697b      	ldr	r3, [r7, #20]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d101      	bne.n	8013f9a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8013f96:	2303      	movs	r3, #3
 8013f98:	e008      	b.n	8013fac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8013f9a:	697b      	ldr	r3, [r7, #20]
 8013f9c:	68ba      	ldr	r2, [r7, #8]
 8013f9e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8013fa2:	697b      	ldr	r3, [r7, #20]
 8013fa4:	687a      	ldr	r2, [r7, #4]
 8013fa6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8013faa:	2300      	movs	r3, #0
}
 8013fac:	4618      	mov	r0, r3
 8013fae:	371c      	adds	r7, #28
 8013fb0:	46bd      	mov	sp, r7
 8013fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb6:	4770      	bx	lr

08013fb8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8013fb8:	b480      	push	{r7}
 8013fba:	b085      	sub	sp, #20
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	6078      	str	r0, [r7, #4]
 8013fc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	32b0      	adds	r2, #176	; 0xb0
 8013fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013fd0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d101      	bne.n	8013fdc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8013fd8:	2303      	movs	r3, #3
 8013fda:	e004      	b.n	8013fe6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	683a      	ldr	r2, [r7, #0]
 8013fe0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8013fe4:	2300      	movs	r3, #0
}
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	3714      	adds	r7, #20
 8013fea:	46bd      	mov	sp, r7
 8013fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff0:	4770      	bx	lr
	...

08013ff4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8013ff4:	b580      	push	{r7, lr}
 8013ff6:	b084      	sub	sp, #16
 8013ff8:	af00      	add	r7, sp, #0
 8013ffa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	32b0      	adds	r2, #176	; 0xb0
 8014006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801400a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 801400c:	2301      	movs	r3, #1
 801400e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014010:	68bb      	ldr	r3, [r7, #8]
 8014012:	2b00      	cmp	r3, #0
 8014014:	d101      	bne.n	801401a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014016:	2303      	movs	r3, #3
 8014018:	e025      	b.n	8014066 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014020:	2b00      	cmp	r3, #0
 8014022:	d11f      	bne.n	8014064 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014024:	68bb      	ldr	r3, [r7, #8]
 8014026:	2201      	movs	r2, #1
 8014028:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 801402c:	4b10      	ldr	r3, [pc, #64]	; (8014070 <USBD_CDC_TransmitPacket+0x7c>)
 801402e:	781b      	ldrb	r3, [r3, #0]
 8014030:	f003 020f 	and.w	r2, r3, #15
 8014034:	68bb      	ldr	r3, [r7, #8]
 8014036:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 801403a:	6878      	ldr	r0, [r7, #4]
 801403c:	4613      	mov	r3, r2
 801403e:	009b      	lsls	r3, r3, #2
 8014040:	4413      	add	r3, r2
 8014042:	009b      	lsls	r3, r3, #2
 8014044:	4403      	add	r3, r0
 8014046:	3318      	adds	r3, #24
 8014048:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 801404a:	4b09      	ldr	r3, [pc, #36]	; (8014070 <USBD_CDC_TransmitPacket+0x7c>)
 801404c:	7819      	ldrb	r1, [r3, #0]
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801405a:	6878      	ldr	r0, [r7, #4]
 801405c:	f002 f80f 	bl	801607e <USBD_LL_Transmit>

    ret = USBD_OK;
 8014060:	2300      	movs	r3, #0
 8014062:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014064:	7bfb      	ldrb	r3, [r7, #15]
}
 8014066:	4618      	mov	r0, r3
 8014068:	3710      	adds	r7, #16
 801406a:	46bd      	mov	sp, r7
 801406c:	bd80      	pop	{r7, pc}
 801406e:	bf00      	nop
 8014070:	24000097 	.word	0x24000097

08014074 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014074:	b580      	push	{r7, lr}
 8014076:	b084      	sub	sp, #16
 8014078:	af00      	add	r7, sp, #0
 801407a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	32b0      	adds	r2, #176	; 0xb0
 8014086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801408a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	32b0      	adds	r2, #176	; 0xb0
 8014096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d101      	bne.n	80140a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801409e:	2303      	movs	r3, #3
 80140a0:	e018      	b.n	80140d4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	7c1b      	ldrb	r3, [r3, #16]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d10a      	bne.n	80140c0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80140aa:	4b0c      	ldr	r3, [pc, #48]	; (80140dc <USBD_CDC_ReceivePacket+0x68>)
 80140ac:	7819      	ldrb	r1, [r3, #0]
 80140ae:	68fb      	ldr	r3, [r7, #12]
 80140b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80140b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80140b8:	6878      	ldr	r0, [r7, #4]
 80140ba:	f002 f801 	bl	80160c0 <USBD_LL_PrepareReceive>
 80140be:	e008      	b.n	80140d2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80140c0:	4b06      	ldr	r3, [pc, #24]	; (80140dc <USBD_CDC_ReceivePacket+0x68>)
 80140c2:	7819      	ldrb	r1, [r3, #0]
 80140c4:	68fb      	ldr	r3, [r7, #12]
 80140c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80140ca:	2340      	movs	r3, #64	; 0x40
 80140cc:	6878      	ldr	r0, [r7, #4]
 80140ce:	f001 fff7 	bl	80160c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80140d2:	2300      	movs	r3, #0
}
 80140d4:	4618      	mov	r0, r3
 80140d6:	3710      	adds	r7, #16
 80140d8:	46bd      	mov	sp, r7
 80140da:	bd80      	pop	{r7, pc}
 80140dc:	24000098 	.word	0x24000098

080140e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80140e0:	b580      	push	{r7, lr}
 80140e2:	b086      	sub	sp, #24
 80140e4:	af00      	add	r7, sp, #0
 80140e6:	60f8      	str	r0, [r7, #12]
 80140e8:	60b9      	str	r1, [r7, #8]
 80140ea:	4613      	mov	r3, r2
 80140ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	2b00      	cmp	r3, #0
 80140f2:	d101      	bne.n	80140f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80140f4:	2303      	movs	r3, #3
 80140f6:	e01f      	b.n	8014138 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	2200      	movs	r2, #0
 80140fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	2200      	movs	r2, #0
 8014104:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	2200      	movs	r2, #0
 801410c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014110:	68bb      	ldr	r3, [r7, #8]
 8014112:	2b00      	cmp	r3, #0
 8014114:	d003      	beq.n	801411e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	68ba      	ldr	r2, [r7, #8]
 801411a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801411e:	68fb      	ldr	r3, [r7, #12]
 8014120:	2201      	movs	r2, #1
 8014122:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014126:	68fb      	ldr	r3, [r7, #12]
 8014128:	79fa      	ldrb	r2, [r7, #7]
 801412a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801412c:	68f8      	ldr	r0, [r7, #12]
 801412e:	f001 fe6b 	bl	8015e08 <USBD_LL_Init>
 8014132:	4603      	mov	r3, r0
 8014134:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014136:	7dfb      	ldrb	r3, [r7, #23]
}
 8014138:	4618      	mov	r0, r3
 801413a:	3718      	adds	r7, #24
 801413c:	46bd      	mov	sp, r7
 801413e:	bd80      	pop	{r7, pc}

08014140 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b084      	sub	sp, #16
 8014144:	af00      	add	r7, sp, #0
 8014146:	6078      	str	r0, [r7, #4]
 8014148:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801414a:	2300      	movs	r3, #0
 801414c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801414e:	683b      	ldr	r3, [r7, #0]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d101      	bne.n	8014158 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014154:	2303      	movs	r3, #3
 8014156:	e025      	b.n	80141a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	683a      	ldr	r2, [r7, #0]
 801415c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014166:	687b      	ldr	r3, [r7, #4]
 8014168:	32ae      	adds	r2, #174	; 0xae
 801416a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801416e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014170:	2b00      	cmp	r3, #0
 8014172:	d00f      	beq.n	8014194 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014174:	687b      	ldr	r3, [r7, #4]
 8014176:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	32ae      	adds	r2, #174	; 0xae
 801417e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014184:	f107 020e 	add.w	r2, r7, #14
 8014188:	4610      	mov	r0, r2
 801418a:	4798      	blx	r3
 801418c:	4602      	mov	r2, r0
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 801419a:	1c5a      	adds	r2, r3, #1
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80141a2:	2300      	movs	r3, #0
}
 80141a4:	4618      	mov	r0, r3
 80141a6:	3710      	adds	r7, #16
 80141a8:	46bd      	mov	sp, r7
 80141aa:	bd80      	pop	{r7, pc}

080141ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80141ac:	b580      	push	{r7, lr}
 80141ae:	b082      	sub	sp, #8
 80141b0:	af00      	add	r7, sp, #0
 80141b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80141b4:	6878      	ldr	r0, [r7, #4]
 80141b6:	f001 fe79 	bl	8015eac <USBD_LL_Start>
 80141ba:	4603      	mov	r3, r0
}
 80141bc:	4618      	mov	r0, r3
 80141be:	3708      	adds	r7, #8
 80141c0:	46bd      	mov	sp, r7
 80141c2:	bd80      	pop	{r7, pc}

080141c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80141c4:	b480      	push	{r7}
 80141c6:	b083      	sub	sp, #12
 80141c8:	af00      	add	r7, sp, #0
 80141ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80141cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80141ce:	4618      	mov	r0, r3
 80141d0:	370c      	adds	r7, #12
 80141d2:	46bd      	mov	sp, r7
 80141d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141d8:	4770      	bx	lr

080141da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80141da:	b580      	push	{r7, lr}
 80141dc:	b084      	sub	sp, #16
 80141de:	af00      	add	r7, sp, #0
 80141e0:	6078      	str	r0, [r7, #4]
 80141e2:	460b      	mov	r3, r1
 80141e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80141e6:	2300      	movs	r3, #0
 80141e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d009      	beq.n	8014208 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80141fa:	681b      	ldr	r3, [r3, #0]
 80141fc:	78fa      	ldrb	r2, [r7, #3]
 80141fe:	4611      	mov	r1, r2
 8014200:	6878      	ldr	r0, [r7, #4]
 8014202:	4798      	blx	r3
 8014204:	4603      	mov	r3, r0
 8014206:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014208:	7bfb      	ldrb	r3, [r7, #15]
}
 801420a:	4618      	mov	r0, r3
 801420c:	3710      	adds	r7, #16
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}

08014212 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014212:	b580      	push	{r7, lr}
 8014214:	b084      	sub	sp, #16
 8014216:	af00      	add	r7, sp, #0
 8014218:	6078      	str	r0, [r7, #4]
 801421a:	460b      	mov	r3, r1
 801421c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801421e:	2300      	movs	r3, #0
 8014220:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014228:	685b      	ldr	r3, [r3, #4]
 801422a:	78fa      	ldrb	r2, [r7, #3]
 801422c:	4611      	mov	r1, r2
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	4798      	blx	r3
 8014232:	4603      	mov	r3, r0
 8014234:	2b00      	cmp	r3, #0
 8014236:	d001      	beq.n	801423c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014238:	2303      	movs	r3, #3
 801423a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801423c:	7bfb      	ldrb	r3, [r7, #15]
}
 801423e:	4618      	mov	r0, r3
 8014240:	3710      	adds	r7, #16
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}

08014246 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014246:	b580      	push	{r7, lr}
 8014248:	b084      	sub	sp, #16
 801424a:	af00      	add	r7, sp, #0
 801424c:	6078      	str	r0, [r7, #4]
 801424e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014256:	6839      	ldr	r1, [r7, #0]
 8014258:	4618      	mov	r0, r3
 801425a:	f001 f90e 	bl	801547a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	2201      	movs	r2, #1
 8014262:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 801426c:	461a      	mov	r2, r3
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801427a:	f003 031f 	and.w	r3, r3, #31
 801427e:	2b02      	cmp	r3, #2
 8014280:	d01a      	beq.n	80142b8 <USBD_LL_SetupStage+0x72>
 8014282:	2b02      	cmp	r3, #2
 8014284:	d822      	bhi.n	80142cc <USBD_LL_SetupStage+0x86>
 8014286:	2b00      	cmp	r3, #0
 8014288:	d002      	beq.n	8014290 <USBD_LL_SetupStage+0x4a>
 801428a:	2b01      	cmp	r3, #1
 801428c:	d00a      	beq.n	80142a4 <USBD_LL_SetupStage+0x5e>
 801428e:	e01d      	b.n	80142cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014296:	4619      	mov	r1, r3
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f000 fb65 	bl	8014968 <USBD_StdDevReq>
 801429e:	4603      	mov	r3, r0
 80142a0:	73fb      	strb	r3, [r7, #15]
      break;
 80142a2:	e020      	b.n	80142e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80142aa:	4619      	mov	r1, r3
 80142ac:	6878      	ldr	r0, [r7, #4]
 80142ae:	f000 fbcd 	bl	8014a4c <USBD_StdItfReq>
 80142b2:	4603      	mov	r3, r0
 80142b4:	73fb      	strb	r3, [r7, #15]
      break;
 80142b6:	e016      	b.n	80142e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80142be:	4619      	mov	r1, r3
 80142c0:	6878      	ldr	r0, [r7, #4]
 80142c2:	f000 fc2f 	bl	8014b24 <USBD_StdEPReq>
 80142c6:	4603      	mov	r3, r0
 80142c8:	73fb      	strb	r3, [r7, #15]
      break;
 80142ca:	e00c      	b.n	80142e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80142d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80142d6:	b2db      	uxtb	r3, r3
 80142d8:	4619      	mov	r1, r3
 80142da:	6878      	ldr	r0, [r7, #4]
 80142dc:	f001 fe46 	bl	8015f6c <USBD_LL_StallEP>
 80142e0:	4603      	mov	r3, r0
 80142e2:	73fb      	strb	r3, [r7, #15]
      break;
 80142e4:	bf00      	nop
  }

  return ret;
 80142e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80142e8:	4618      	mov	r0, r3
 80142ea:	3710      	adds	r7, #16
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd80      	pop	{r7, pc}

080142f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b086      	sub	sp, #24
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	60f8      	str	r0, [r7, #12]
 80142f8:	460b      	mov	r3, r1
 80142fa:	607a      	str	r2, [r7, #4]
 80142fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80142fe:	2300      	movs	r3, #0
 8014300:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8014302:	7afb      	ldrb	r3, [r7, #11]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d16e      	bne.n	80143e6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801430e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014316:	2b03      	cmp	r3, #3
 8014318:	f040 8098 	bne.w	801444c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801431c:	693b      	ldr	r3, [r7, #16]
 801431e:	689a      	ldr	r2, [r3, #8]
 8014320:	693b      	ldr	r3, [r7, #16]
 8014322:	68db      	ldr	r3, [r3, #12]
 8014324:	429a      	cmp	r2, r3
 8014326:	d913      	bls.n	8014350 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8014328:	693b      	ldr	r3, [r7, #16]
 801432a:	689a      	ldr	r2, [r3, #8]
 801432c:	693b      	ldr	r3, [r7, #16]
 801432e:	68db      	ldr	r3, [r3, #12]
 8014330:	1ad2      	subs	r2, r2, r3
 8014332:	693b      	ldr	r3, [r7, #16]
 8014334:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8014336:	693b      	ldr	r3, [r7, #16]
 8014338:	68da      	ldr	r2, [r3, #12]
 801433a:	693b      	ldr	r3, [r7, #16]
 801433c:	689b      	ldr	r3, [r3, #8]
 801433e:	4293      	cmp	r3, r2
 8014340:	bf28      	it	cs
 8014342:	4613      	movcs	r3, r2
 8014344:	461a      	mov	r2, r3
 8014346:	6879      	ldr	r1, [r7, #4]
 8014348:	68f8      	ldr	r0, [r7, #12]
 801434a:	f001 f98a 	bl	8015662 <USBD_CtlContinueRx>
 801434e:	e07d      	b.n	801444c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014356:	f003 031f 	and.w	r3, r3, #31
 801435a:	2b02      	cmp	r3, #2
 801435c:	d014      	beq.n	8014388 <USBD_LL_DataOutStage+0x98>
 801435e:	2b02      	cmp	r3, #2
 8014360:	d81d      	bhi.n	801439e <USBD_LL_DataOutStage+0xae>
 8014362:	2b00      	cmp	r3, #0
 8014364:	d002      	beq.n	801436c <USBD_LL_DataOutStage+0x7c>
 8014366:	2b01      	cmp	r3, #1
 8014368:	d003      	beq.n	8014372 <USBD_LL_DataOutStage+0x82>
 801436a:	e018      	b.n	801439e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 801436c:	2300      	movs	r3, #0
 801436e:	75bb      	strb	r3, [r7, #22]
            break;
 8014370:	e018      	b.n	80143a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8014378:	b2db      	uxtb	r3, r3
 801437a:	4619      	mov	r1, r3
 801437c:	68f8      	ldr	r0, [r7, #12]
 801437e:	f000 fa64 	bl	801484a <USBD_CoreFindIF>
 8014382:	4603      	mov	r3, r0
 8014384:	75bb      	strb	r3, [r7, #22]
            break;
 8014386:	e00d      	b.n	80143a4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8014388:	68fb      	ldr	r3, [r7, #12]
 801438a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801438e:	b2db      	uxtb	r3, r3
 8014390:	4619      	mov	r1, r3
 8014392:	68f8      	ldr	r0, [r7, #12]
 8014394:	f000 fa66 	bl	8014864 <USBD_CoreFindEP>
 8014398:	4603      	mov	r3, r0
 801439a:	75bb      	strb	r3, [r7, #22]
            break;
 801439c:	e002      	b.n	80143a4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801439e:	2300      	movs	r3, #0
 80143a0:	75bb      	strb	r3, [r7, #22]
            break;
 80143a2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80143a4:	7dbb      	ldrb	r3, [r7, #22]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	d119      	bne.n	80143de <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80143b0:	b2db      	uxtb	r3, r3
 80143b2:	2b03      	cmp	r3, #3
 80143b4:	d113      	bne.n	80143de <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80143b6:	7dba      	ldrb	r2, [r7, #22]
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	32ae      	adds	r2, #174	; 0xae
 80143bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143c0:	691b      	ldr	r3, [r3, #16]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d00b      	beq.n	80143de <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80143c6:	7dba      	ldrb	r2, [r7, #22]
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80143ce:	7dba      	ldrb	r2, [r7, #22]
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	32ae      	adds	r2, #174	; 0xae
 80143d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80143d8:	691b      	ldr	r3, [r3, #16]
 80143da:	68f8      	ldr	r0, [r7, #12]
 80143dc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80143de:	68f8      	ldr	r0, [r7, #12]
 80143e0:	f001 f950 	bl	8015684 <USBD_CtlSendStatus>
 80143e4:	e032      	b.n	801444c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80143e6:	7afb      	ldrb	r3, [r7, #11]
 80143e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80143ec:	b2db      	uxtb	r3, r3
 80143ee:	4619      	mov	r1, r3
 80143f0:	68f8      	ldr	r0, [r7, #12]
 80143f2:	f000 fa37 	bl	8014864 <USBD_CoreFindEP>
 80143f6:	4603      	mov	r3, r0
 80143f8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80143fa:	7dbb      	ldrb	r3, [r7, #22]
 80143fc:	2bff      	cmp	r3, #255	; 0xff
 80143fe:	d025      	beq.n	801444c <USBD_LL_DataOutStage+0x15c>
 8014400:	7dbb      	ldrb	r3, [r7, #22]
 8014402:	2b00      	cmp	r3, #0
 8014404:	d122      	bne.n	801444c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801440c:	b2db      	uxtb	r3, r3
 801440e:	2b03      	cmp	r3, #3
 8014410:	d117      	bne.n	8014442 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8014412:	7dba      	ldrb	r2, [r7, #22]
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	32ae      	adds	r2, #174	; 0xae
 8014418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801441c:	699b      	ldr	r3, [r3, #24]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d00f      	beq.n	8014442 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8014422:	7dba      	ldrb	r2, [r7, #22]
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801442a:	7dba      	ldrb	r2, [r7, #22]
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	32ae      	adds	r2, #174	; 0xae
 8014430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014434:	699b      	ldr	r3, [r3, #24]
 8014436:	7afa      	ldrb	r2, [r7, #11]
 8014438:	4611      	mov	r1, r2
 801443a:	68f8      	ldr	r0, [r7, #12]
 801443c:	4798      	blx	r3
 801443e:	4603      	mov	r3, r0
 8014440:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8014442:	7dfb      	ldrb	r3, [r7, #23]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d001      	beq.n	801444c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8014448:	7dfb      	ldrb	r3, [r7, #23]
 801444a:	e000      	b.n	801444e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801444c:	2300      	movs	r3, #0
}
 801444e:	4618      	mov	r0, r3
 8014450:	3718      	adds	r7, #24
 8014452:	46bd      	mov	sp, r7
 8014454:	bd80      	pop	{r7, pc}

08014456 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8014456:	b580      	push	{r7, lr}
 8014458:	b086      	sub	sp, #24
 801445a:	af00      	add	r7, sp, #0
 801445c:	60f8      	str	r0, [r7, #12]
 801445e:	460b      	mov	r3, r1
 8014460:	607a      	str	r2, [r7, #4]
 8014462:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8014464:	7afb      	ldrb	r3, [r7, #11]
 8014466:	2b00      	cmp	r3, #0
 8014468:	d16f      	bne.n	801454a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	3314      	adds	r3, #20
 801446e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8014476:	2b02      	cmp	r3, #2
 8014478:	d15a      	bne.n	8014530 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 801447a:	693b      	ldr	r3, [r7, #16]
 801447c:	689a      	ldr	r2, [r3, #8]
 801447e:	693b      	ldr	r3, [r7, #16]
 8014480:	68db      	ldr	r3, [r3, #12]
 8014482:	429a      	cmp	r2, r3
 8014484:	d914      	bls.n	80144b0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8014486:	693b      	ldr	r3, [r7, #16]
 8014488:	689a      	ldr	r2, [r3, #8]
 801448a:	693b      	ldr	r3, [r7, #16]
 801448c:	68db      	ldr	r3, [r3, #12]
 801448e:	1ad2      	subs	r2, r2, r3
 8014490:	693b      	ldr	r3, [r7, #16]
 8014492:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014494:	693b      	ldr	r3, [r7, #16]
 8014496:	689b      	ldr	r3, [r3, #8]
 8014498:	461a      	mov	r2, r3
 801449a:	6879      	ldr	r1, [r7, #4]
 801449c:	68f8      	ldr	r0, [r7, #12]
 801449e:	f001 f8b2 	bl	8015606 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80144a2:	2300      	movs	r3, #0
 80144a4:	2200      	movs	r2, #0
 80144a6:	2100      	movs	r1, #0
 80144a8:	68f8      	ldr	r0, [r7, #12]
 80144aa:	f001 fe09 	bl	80160c0 <USBD_LL_PrepareReceive>
 80144ae:	e03f      	b.n	8014530 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80144b0:	693b      	ldr	r3, [r7, #16]
 80144b2:	68da      	ldr	r2, [r3, #12]
 80144b4:	693b      	ldr	r3, [r7, #16]
 80144b6:	689b      	ldr	r3, [r3, #8]
 80144b8:	429a      	cmp	r2, r3
 80144ba:	d11c      	bne.n	80144f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80144bc:	693b      	ldr	r3, [r7, #16]
 80144be:	685a      	ldr	r2, [r3, #4]
 80144c0:	693b      	ldr	r3, [r7, #16]
 80144c2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80144c4:	429a      	cmp	r2, r3
 80144c6:	d316      	bcc.n	80144f6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80144c8:	693b      	ldr	r3, [r7, #16]
 80144ca:	685a      	ldr	r2, [r3, #4]
 80144cc:	68fb      	ldr	r3, [r7, #12]
 80144ce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80144d2:	429a      	cmp	r2, r3
 80144d4:	d20f      	bcs.n	80144f6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80144d6:	2200      	movs	r2, #0
 80144d8:	2100      	movs	r1, #0
 80144da:	68f8      	ldr	r0, [r7, #12]
 80144dc:	f001 f893 	bl	8015606 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80144e0:	68fb      	ldr	r3, [r7, #12]
 80144e2:	2200      	movs	r2, #0
 80144e4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80144e8:	2300      	movs	r3, #0
 80144ea:	2200      	movs	r2, #0
 80144ec:	2100      	movs	r1, #0
 80144ee:	68f8      	ldr	r0, [r7, #12]
 80144f0:	f001 fde6 	bl	80160c0 <USBD_LL_PrepareReceive>
 80144f4:	e01c      	b.n	8014530 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80144fc:	b2db      	uxtb	r3, r3
 80144fe:	2b03      	cmp	r3, #3
 8014500:	d10f      	bne.n	8014522 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014508:	68db      	ldr	r3, [r3, #12]
 801450a:	2b00      	cmp	r3, #0
 801450c:	d009      	beq.n	8014522 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	2200      	movs	r2, #0
 8014512:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8014516:	68fb      	ldr	r3, [r7, #12]
 8014518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801451c:	68db      	ldr	r3, [r3, #12]
 801451e:	68f8      	ldr	r0, [r7, #12]
 8014520:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014522:	2180      	movs	r1, #128	; 0x80
 8014524:	68f8      	ldr	r0, [r7, #12]
 8014526:	f001 fd21 	bl	8015f6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 801452a:	68f8      	ldr	r0, [r7, #12]
 801452c:	f001 f8bd 	bl	80156aa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014536:	2b00      	cmp	r3, #0
 8014538:	d03a      	beq.n	80145b0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 801453a:	68f8      	ldr	r0, [r7, #12]
 801453c:	f7ff fe42 	bl	80141c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	2200      	movs	r2, #0
 8014544:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014548:	e032      	b.n	80145b0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 801454a:	7afb      	ldrb	r3, [r7, #11]
 801454c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014550:	b2db      	uxtb	r3, r3
 8014552:	4619      	mov	r1, r3
 8014554:	68f8      	ldr	r0, [r7, #12]
 8014556:	f000 f985 	bl	8014864 <USBD_CoreFindEP>
 801455a:	4603      	mov	r3, r0
 801455c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801455e:	7dfb      	ldrb	r3, [r7, #23]
 8014560:	2bff      	cmp	r3, #255	; 0xff
 8014562:	d025      	beq.n	80145b0 <USBD_LL_DataInStage+0x15a>
 8014564:	7dfb      	ldrb	r3, [r7, #23]
 8014566:	2b00      	cmp	r3, #0
 8014568:	d122      	bne.n	80145b0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014570:	b2db      	uxtb	r3, r3
 8014572:	2b03      	cmp	r3, #3
 8014574:	d11c      	bne.n	80145b0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8014576:	7dfa      	ldrb	r2, [r7, #23]
 8014578:	68fb      	ldr	r3, [r7, #12]
 801457a:	32ae      	adds	r2, #174	; 0xae
 801457c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014580:	695b      	ldr	r3, [r3, #20]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d014      	beq.n	80145b0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8014586:	7dfa      	ldrb	r2, [r7, #23]
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801458e:	7dfa      	ldrb	r2, [r7, #23]
 8014590:	68fb      	ldr	r3, [r7, #12]
 8014592:	32ae      	adds	r2, #174	; 0xae
 8014594:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014598:	695b      	ldr	r3, [r3, #20]
 801459a:	7afa      	ldrb	r2, [r7, #11]
 801459c:	4611      	mov	r1, r2
 801459e:	68f8      	ldr	r0, [r7, #12]
 80145a0:	4798      	blx	r3
 80145a2:	4603      	mov	r3, r0
 80145a4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80145a6:	7dbb      	ldrb	r3, [r7, #22]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d001      	beq.n	80145b0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80145ac:	7dbb      	ldrb	r3, [r7, #22]
 80145ae:	e000      	b.n	80145b2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80145b0:	2300      	movs	r3, #0
}
 80145b2:	4618      	mov	r0, r3
 80145b4:	3718      	adds	r7, #24
 80145b6:	46bd      	mov	sp, r7
 80145b8:	bd80      	pop	{r7, pc}

080145ba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80145ba:	b580      	push	{r7, lr}
 80145bc:	b084      	sub	sp, #16
 80145be:	af00      	add	r7, sp, #0
 80145c0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80145c2:	2300      	movs	r3, #0
 80145c4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	2201      	movs	r2, #1
 80145ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	2200      	movs	r2, #0
 80145d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	2200      	movs	r2, #0
 80145da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	2200      	movs	r2, #0
 80145e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	2200      	movs	r2, #0
 80145e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d014      	beq.n	8014620 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80145fc:	685b      	ldr	r3, [r3, #4]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d00e      	beq.n	8014620 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014608:	685b      	ldr	r3, [r3, #4]
 801460a:	687a      	ldr	r2, [r7, #4]
 801460c:	6852      	ldr	r2, [r2, #4]
 801460e:	b2d2      	uxtb	r2, r2
 8014610:	4611      	mov	r1, r2
 8014612:	6878      	ldr	r0, [r7, #4]
 8014614:	4798      	blx	r3
 8014616:	4603      	mov	r3, r0
 8014618:	2b00      	cmp	r3, #0
 801461a:	d001      	beq.n	8014620 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 801461c:	2303      	movs	r3, #3
 801461e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014620:	2340      	movs	r3, #64	; 0x40
 8014622:	2200      	movs	r2, #0
 8014624:	2100      	movs	r1, #0
 8014626:	6878      	ldr	r0, [r7, #4]
 8014628:	f001 fc5b 	bl	8015ee2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	2201      	movs	r2, #1
 8014630:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	2240      	movs	r2, #64	; 0x40
 8014638:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801463c:	2340      	movs	r3, #64	; 0x40
 801463e:	2200      	movs	r2, #0
 8014640:	2180      	movs	r1, #128	; 0x80
 8014642:	6878      	ldr	r0, [r7, #4]
 8014644:	f001 fc4d 	bl	8015ee2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	2201      	movs	r2, #1
 801464c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	2240      	movs	r2, #64	; 0x40
 8014652:	621a      	str	r2, [r3, #32]

  return ret;
 8014654:	7bfb      	ldrb	r3, [r7, #15]
}
 8014656:	4618      	mov	r0, r3
 8014658:	3710      	adds	r7, #16
 801465a:	46bd      	mov	sp, r7
 801465c:	bd80      	pop	{r7, pc}

0801465e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801465e:	b480      	push	{r7}
 8014660:	b083      	sub	sp, #12
 8014662:	af00      	add	r7, sp, #0
 8014664:	6078      	str	r0, [r7, #4]
 8014666:	460b      	mov	r3, r1
 8014668:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	78fa      	ldrb	r2, [r7, #3]
 801466e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014670:	2300      	movs	r3, #0
}
 8014672:	4618      	mov	r0, r3
 8014674:	370c      	adds	r7, #12
 8014676:	46bd      	mov	sp, r7
 8014678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467c:	4770      	bx	lr

0801467e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801467e:	b480      	push	{r7}
 8014680:	b083      	sub	sp, #12
 8014682:	af00      	add	r7, sp, #0
 8014684:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801468c:	b2db      	uxtb	r3, r3
 801468e:	2b04      	cmp	r3, #4
 8014690:	d006      	beq.n	80146a0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014698:	b2da      	uxtb	r2, r3
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	2204      	movs	r2, #4
 80146a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80146a8:	2300      	movs	r3, #0
}
 80146aa:	4618      	mov	r0, r3
 80146ac:	370c      	adds	r7, #12
 80146ae:	46bd      	mov	sp, r7
 80146b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b4:	4770      	bx	lr

080146b6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80146b6:	b480      	push	{r7}
 80146b8:	b083      	sub	sp, #12
 80146ba:	af00      	add	r7, sp, #0
 80146bc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146c4:	b2db      	uxtb	r3, r3
 80146c6:	2b04      	cmp	r3, #4
 80146c8:	d106      	bne.n	80146d8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80146d0:	b2da      	uxtb	r2, r3
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80146d8:	2300      	movs	r3, #0
}
 80146da:	4618      	mov	r0, r3
 80146dc:	370c      	adds	r7, #12
 80146de:	46bd      	mov	sp, r7
 80146e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e4:	4770      	bx	lr

080146e6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80146e6:	b580      	push	{r7, lr}
 80146e8:	b082      	sub	sp, #8
 80146ea:	af00      	add	r7, sp, #0
 80146ec:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80146f4:	b2db      	uxtb	r3, r3
 80146f6:	2b03      	cmp	r3, #3
 80146f8:	d110      	bne.n	801471c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014700:	2b00      	cmp	r3, #0
 8014702:	d00b      	beq.n	801471c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801470a:	69db      	ldr	r3, [r3, #28]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d005      	beq.n	801471c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014716:	69db      	ldr	r3, [r3, #28]
 8014718:	6878      	ldr	r0, [r7, #4]
 801471a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 801471c:	2300      	movs	r3, #0
}
 801471e:	4618      	mov	r0, r3
 8014720:	3708      	adds	r7, #8
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}

08014726 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8014726:	b580      	push	{r7, lr}
 8014728:	b082      	sub	sp, #8
 801472a:	af00      	add	r7, sp, #0
 801472c:	6078      	str	r0, [r7, #4]
 801472e:	460b      	mov	r3, r1
 8014730:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	32ae      	adds	r2, #174	; 0xae
 801473c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d101      	bne.n	8014748 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8014744:	2303      	movs	r3, #3
 8014746:	e01c      	b.n	8014782 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801474e:	b2db      	uxtb	r3, r3
 8014750:	2b03      	cmp	r3, #3
 8014752:	d115      	bne.n	8014780 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	32ae      	adds	r2, #174	; 0xae
 801475e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014762:	6a1b      	ldr	r3, [r3, #32]
 8014764:	2b00      	cmp	r3, #0
 8014766:	d00b      	beq.n	8014780 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	32ae      	adds	r2, #174	; 0xae
 8014772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014776:	6a1b      	ldr	r3, [r3, #32]
 8014778:	78fa      	ldrb	r2, [r7, #3]
 801477a:	4611      	mov	r1, r2
 801477c:	6878      	ldr	r0, [r7, #4]
 801477e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8014780:	2300      	movs	r3, #0
}
 8014782:	4618      	mov	r0, r3
 8014784:	3708      	adds	r7, #8
 8014786:	46bd      	mov	sp, r7
 8014788:	bd80      	pop	{r7, pc}

0801478a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801478a:	b580      	push	{r7, lr}
 801478c:	b082      	sub	sp, #8
 801478e:	af00      	add	r7, sp, #0
 8014790:	6078      	str	r0, [r7, #4]
 8014792:	460b      	mov	r3, r1
 8014794:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	32ae      	adds	r2, #174	; 0xae
 80147a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d101      	bne.n	80147ac <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80147a8:	2303      	movs	r3, #3
 80147aa:	e01c      	b.n	80147e6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80147b2:	b2db      	uxtb	r3, r3
 80147b4:	2b03      	cmp	r3, #3
 80147b6:	d115      	bne.n	80147e4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	32ae      	adds	r2, #174	; 0xae
 80147c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d00b      	beq.n	80147e4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	32ae      	adds	r2, #174	; 0xae
 80147d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80147da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80147dc:	78fa      	ldrb	r2, [r7, #3]
 80147de:	4611      	mov	r1, r2
 80147e0:	6878      	ldr	r0, [r7, #4]
 80147e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80147e4:	2300      	movs	r3, #0
}
 80147e6:	4618      	mov	r0, r3
 80147e8:	3708      	adds	r7, #8
 80147ea:	46bd      	mov	sp, r7
 80147ec:	bd80      	pop	{r7, pc}

080147ee <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80147ee:	b480      	push	{r7}
 80147f0:	b083      	sub	sp, #12
 80147f2:	af00      	add	r7, sp, #0
 80147f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80147f6:	2300      	movs	r3, #0
}
 80147f8:	4618      	mov	r0, r3
 80147fa:	370c      	adds	r7, #12
 80147fc:	46bd      	mov	sp, r7
 80147fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014802:	4770      	bx	lr

08014804 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8014804:	b580      	push	{r7, lr}
 8014806:	b084      	sub	sp, #16
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 801480c:	2300      	movs	r3, #0
 801480e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	2201      	movs	r2, #1
 8014814:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801481e:	2b00      	cmp	r3, #0
 8014820:	d00e      	beq.n	8014840 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014828:	685b      	ldr	r3, [r3, #4]
 801482a:	687a      	ldr	r2, [r7, #4]
 801482c:	6852      	ldr	r2, [r2, #4]
 801482e:	b2d2      	uxtb	r2, r2
 8014830:	4611      	mov	r1, r2
 8014832:	6878      	ldr	r0, [r7, #4]
 8014834:	4798      	blx	r3
 8014836:	4603      	mov	r3, r0
 8014838:	2b00      	cmp	r3, #0
 801483a:	d001      	beq.n	8014840 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 801483c:	2303      	movs	r3, #3
 801483e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014840:	7bfb      	ldrb	r3, [r7, #15]
}
 8014842:	4618      	mov	r0, r3
 8014844:	3710      	adds	r7, #16
 8014846:	46bd      	mov	sp, r7
 8014848:	bd80      	pop	{r7, pc}

0801484a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801484a:	b480      	push	{r7}
 801484c:	b083      	sub	sp, #12
 801484e:	af00      	add	r7, sp, #0
 8014850:	6078      	str	r0, [r7, #4]
 8014852:	460b      	mov	r3, r1
 8014854:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014856:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014858:	4618      	mov	r0, r3
 801485a:	370c      	adds	r7, #12
 801485c:	46bd      	mov	sp, r7
 801485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014862:	4770      	bx	lr

08014864 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8014864:	b480      	push	{r7}
 8014866:	b083      	sub	sp, #12
 8014868:	af00      	add	r7, sp, #0
 801486a:	6078      	str	r0, [r7, #4]
 801486c:	460b      	mov	r3, r1
 801486e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8014870:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8014872:	4618      	mov	r0, r3
 8014874:	370c      	adds	r7, #12
 8014876:	46bd      	mov	sp, r7
 8014878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487c:	4770      	bx	lr

0801487e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801487e:	b580      	push	{r7, lr}
 8014880:	b086      	sub	sp, #24
 8014882:	af00      	add	r7, sp, #0
 8014884:	6078      	str	r0, [r7, #4]
 8014886:	460b      	mov	r3, r1
 8014888:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8014892:	2300      	movs	r3, #0
 8014894:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	885b      	ldrh	r3, [r3, #2]
 801489a:	b29a      	uxth	r2, r3
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	781b      	ldrb	r3, [r3, #0]
 80148a0:	b29b      	uxth	r3, r3
 80148a2:	429a      	cmp	r2, r3
 80148a4:	d920      	bls.n	80148e8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	781b      	ldrb	r3, [r3, #0]
 80148aa:	b29b      	uxth	r3, r3
 80148ac:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80148ae:	e013      	b.n	80148d8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80148b0:	f107 030a 	add.w	r3, r7, #10
 80148b4:	4619      	mov	r1, r3
 80148b6:	6978      	ldr	r0, [r7, #20]
 80148b8:	f000 f81b 	bl	80148f2 <USBD_GetNextDesc>
 80148bc:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80148be:	697b      	ldr	r3, [r7, #20]
 80148c0:	785b      	ldrb	r3, [r3, #1]
 80148c2:	2b05      	cmp	r3, #5
 80148c4:	d108      	bne.n	80148d8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80148c6:	697b      	ldr	r3, [r7, #20]
 80148c8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80148ca:	693b      	ldr	r3, [r7, #16]
 80148cc:	789b      	ldrb	r3, [r3, #2]
 80148ce:	78fa      	ldrb	r2, [r7, #3]
 80148d0:	429a      	cmp	r2, r3
 80148d2:	d008      	beq.n	80148e6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80148d4:	2300      	movs	r3, #0
 80148d6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	885b      	ldrh	r3, [r3, #2]
 80148dc:	b29a      	uxth	r2, r3
 80148de:	897b      	ldrh	r3, [r7, #10]
 80148e0:	429a      	cmp	r2, r3
 80148e2:	d8e5      	bhi.n	80148b0 <USBD_GetEpDesc+0x32>
 80148e4:	e000      	b.n	80148e8 <USBD_GetEpDesc+0x6a>
          break;
 80148e6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80148e8:	693b      	ldr	r3, [r7, #16]
}
 80148ea:	4618      	mov	r0, r3
 80148ec:	3718      	adds	r7, #24
 80148ee:	46bd      	mov	sp, r7
 80148f0:	bd80      	pop	{r7, pc}

080148f2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80148f2:	b480      	push	{r7}
 80148f4:	b085      	sub	sp, #20
 80148f6:	af00      	add	r7, sp, #0
 80148f8:	6078      	str	r0, [r7, #4]
 80148fa:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8014900:	683b      	ldr	r3, [r7, #0]
 8014902:	881a      	ldrh	r2, [r3, #0]
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	781b      	ldrb	r3, [r3, #0]
 8014908:	b29b      	uxth	r3, r3
 801490a:	4413      	add	r3, r2
 801490c:	b29a      	uxth	r2, r3
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	781b      	ldrb	r3, [r3, #0]
 8014916:	461a      	mov	r2, r3
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	4413      	add	r3, r2
 801491c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801491e:	68fb      	ldr	r3, [r7, #12]
}
 8014920:	4618      	mov	r0, r3
 8014922:	3714      	adds	r7, #20
 8014924:	46bd      	mov	sp, r7
 8014926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492a:	4770      	bx	lr

0801492c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801492c:	b480      	push	{r7}
 801492e:	b087      	sub	sp, #28
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014938:	697b      	ldr	r3, [r7, #20]
 801493a:	781b      	ldrb	r3, [r3, #0]
 801493c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801493e:	697b      	ldr	r3, [r7, #20]
 8014940:	3301      	adds	r3, #1
 8014942:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8014944:	697b      	ldr	r3, [r7, #20]
 8014946:	781b      	ldrb	r3, [r3, #0]
 8014948:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801494a:	8a3b      	ldrh	r3, [r7, #16]
 801494c:	021b      	lsls	r3, r3, #8
 801494e:	b21a      	sxth	r2, r3
 8014950:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014954:	4313      	orrs	r3, r2
 8014956:	b21b      	sxth	r3, r3
 8014958:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801495a:	89fb      	ldrh	r3, [r7, #14]
}
 801495c:	4618      	mov	r0, r3
 801495e:	371c      	adds	r7, #28
 8014960:	46bd      	mov	sp, r7
 8014962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014966:	4770      	bx	lr

08014968 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b084      	sub	sp, #16
 801496c:	af00      	add	r7, sp, #0
 801496e:	6078      	str	r0, [r7, #4]
 8014970:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014972:	2300      	movs	r3, #0
 8014974:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014976:	683b      	ldr	r3, [r7, #0]
 8014978:	781b      	ldrb	r3, [r3, #0]
 801497a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801497e:	2b40      	cmp	r3, #64	; 0x40
 8014980:	d005      	beq.n	801498e <USBD_StdDevReq+0x26>
 8014982:	2b40      	cmp	r3, #64	; 0x40
 8014984:	d857      	bhi.n	8014a36 <USBD_StdDevReq+0xce>
 8014986:	2b00      	cmp	r3, #0
 8014988:	d00f      	beq.n	80149aa <USBD_StdDevReq+0x42>
 801498a:	2b20      	cmp	r3, #32
 801498c:	d153      	bne.n	8014a36 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	32ae      	adds	r2, #174	; 0xae
 8014998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801499c:	689b      	ldr	r3, [r3, #8]
 801499e:	6839      	ldr	r1, [r7, #0]
 80149a0:	6878      	ldr	r0, [r7, #4]
 80149a2:	4798      	blx	r3
 80149a4:	4603      	mov	r3, r0
 80149a6:	73fb      	strb	r3, [r7, #15]
      break;
 80149a8:	e04a      	b.n	8014a40 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80149aa:	683b      	ldr	r3, [r7, #0]
 80149ac:	785b      	ldrb	r3, [r3, #1]
 80149ae:	2b09      	cmp	r3, #9
 80149b0:	d83b      	bhi.n	8014a2a <USBD_StdDevReq+0xc2>
 80149b2:	a201      	add	r2, pc, #4	; (adr r2, 80149b8 <USBD_StdDevReq+0x50>)
 80149b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80149b8:	08014a0d 	.word	0x08014a0d
 80149bc:	08014a21 	.word	0x08014a21
 80149c0:	08014a2b 	.word	0x08014a2b
 80149c4:	08014a17 	.word	0x08014a17
 80149c8:	08014a2b 	.word	0x08014a2b
 80149cc:	080149eb 	.word	0x080149eb
 80149d0:	080149e1 	.word	0x080149e1
 80149d4:	08014a2b 	.word	0x08014a2b
 80149d8:	08014a03 	.word	0x08014a03
 80149dc:	080149f5 	.word	0x080149f5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80149e0:	6839      	ldr	r1, [r7, #0]
 80149e2:	6878      	ldr	r0, [r7, #4]
 80149e4:	f000 fa3c 	bl	8014e60 <USBD_GetDescriptor>
          break;
 80149e8:	e024      	b.n	8014a34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80149ea:	6839      	ldr	r1, [r7, #0]
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f000 fba1 	bl	8015134 <USBD_SetAddress>
          break;
 80149f2:	e01f      	b.n	8014a34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80149f4:	6839      	ldr	r1, [r7, #0]
 80149f6:	6878      	ldr	r0, [r7, #4]
 80149f8:	f000 fbe0 	bl	80151bc <USBD_SetConfig>
 80149fc:	4603      	mov	r3, r0
 80149fe:	73fb      	strb	r3, [r7, #15]
          break;
 8014a00:	e018      	b.n	8014a34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8014a02:	6839      	ldr	r1, [r7, #0]
 8014a04:	6878      	ldr	r0, [r7, #4]
 8014a06:	f000 fc83 	bl	8015310 <USBD_GetConfig>
          break;
 8014a0a:	e013      	b.n	8014a34 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014a0c:	6839      	ldr	r1, [r7, #0]
 8014a0e:	6878      	ldr	r0, [r7, #4]
 8014a10:	f000 fcb4 	bl	801537c <USBD_GetStatus>
          break;
 8014a14:	e00e      	b.n	8014a34 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014a16:	6839      	ldr	r1, [r7, #0]
 8014a18:	6878      	ldr	r0, [r7, #4]
 8014a1a:	f000 fce3 	bl	80153e4 <USBD_SetFeature>
          break;
 8014a1e:	e009      	b.n	8014a34 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014a20:	6839      	ldr	r1, [r7, #0]
 8014a22:	6878      	ldr	r0, [r7, #4]
 8014a24:	f000 fd07 	bl	8015436 <USBD_ClrFeature>
          break;
 8014a28:	e004      	b.n	8014a34 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8014a2a:	6839      	ldr	r1, [r7, #0]
 8014a2c:	6878      	ldr	r0, [r7, #4]
 8014a2e:	f000 fd5e 	bl	80154ee <USBD_CtlError>
          break;
 8014a32:	bf00      	nop
      }
      break;
 8014a34:	e004      	b.n	8014a40 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8014a36:	6839      	ldr	r1, [r7, #0]
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f000 fd58 	bl	80154ee <USBD_CtlError>
      break;
 8014a3e:	bf00      	nop
  }

  return ret;
 8014a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a42:	4618      	mov	r0, r3
 8014a44:	3710      	adds	r7, #16
 8014a46:	46bd      	mov	sp, r7
 8014a48:	bd80      	pop	{r7, pc}
 8014a4a:	bf00      	nop

08014a4c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a4c:	b580      	push	{r7, lr}
 8014a4e:	b084      	sub	sp, #16
 8014a50:	af00      	add	r7, sp, #0
 8014a52:	6078      	str	r0, [r7, #4]
 8014a54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014a56:	2300      	movs	r3, #0
 8014a58:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014a5a:	683b      	ldr	r3, [r7, #0]
 8014a5c:	781b      	ldrb	r3, [r3, #0]
 8014a5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014a62:	2b40      	cmp	r3, #64	; 0x40
 8014a64:	d005      	beq.n	8014a72 <USBD_StdItfReq+0x26>
 8014a66:	2b40      	cmp	r3, #64	; 0x40
 8014a68:	d852      	bhi.n	8014b10 <USBD_StdItfReq+0xc4>
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d001      	beq.n	8014a72 <USBD_StdItfReq+0x26>
 8014a6e:	2b20      	cmp	r3, #32
 8014a70:	d14e      	bne.n	8014b10 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a78:	b2db      	uxtb	r3, r3
 8014a7a:	3b01      	subs	r3, #1
 8014a7c:	2b02      	cmp	r3, #2
 8014a7e:	d840      	bhi.n	8014b02 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014a80:	683b      	ldr	r3, [r7, #0]
 8014a82:	889b      	ldrh	r3, [r3, #4]
 8014a84:	b2db      	uxtb	r3, r3
 8014a86:	2b01      	cmp	r3, #1
 8014a88:	d836      	bhi.n	8014af8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8014a8a:	683b      	ldr	r3, [r7, #0]
 8014a8c:	889b      	ldrh	r3, [r3, #4]
 8014a8e:	b2db      	uxtb	r3, r3
 8014a90:	4619      	mov	r1, r3
 8014a92:	6878      	ldr	r0, [r7, #4]
 8014a94:	f7ff fed9 	bl	801484a <USBD_CoreFindIF>
 8014a98:	4603      	mov	r3, r0
 8014a9a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014a9c:	7bbb      	ldrb	r3, [r7, #14]
 8014a9e:	2bff      	cmp	r3, #255	; 0xff
 8014aa0:	d01d      	beq.n	8014ade <USBD_StdItfReq+0x92>
 8014aa2:	7bbb      	ldrb	r3, [r7, #14]
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	d11a      	bne.n	8014ade <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8014aa8:	7bba      	ldrb	r2, [r7, #14]
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	32ae      	adds	r2, #174	; 0xae
 8014aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ab2:	689b      	ldr	r3, [r3, #8]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d00f      	beq.n	8014ad8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8014ab8:	7bba      	ldrb	r2, [r7, #14]
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014ac0:	7bba      	ldrb	r2, [r7, #14]
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	32ae      	adds	r2, #174	; 0xae
 8014ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014aca:	689b      	ldr	r3, [r3, #8]
 8014acc:	6839      	ldr	r1, [r7, #0]
 8014ace:	6878      	ldr	r0, [r7, #4]
 8014ad0:	4798      	blx	r3
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014ad6:	e004      	b.n	8014ae2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8014ad8:	2303      	movs	r3, #3
 8014ada:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8014adc:	e001      	b.n	8014ae2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8014ade:	2303      	movs	r3, #3
 8014ae0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014ae2:	683b      	ldr	r3, [r7, #0]
 8014ae4:	88db      	ldrh	r3, [r3, #6]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d110      	bne.n	8014b0c <USBD_StdItfReq+0xc0>
 8014aea:	7bfb      	ldrb	r3, [r7, #15]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d10d      	bne.n	8014b0c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014af0:	6878      	ldr	r0, [r7, #4]
 8014af2:	f000 fdc7 	bl	8015684 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014af6:	e009      	b.n	8014b0c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8014af8:	6839      	ldr	r1, [r7, #0]
 8014afa:	6878      	ldr	r0, [r7, #4]
 8014afc:	f000 fcf7 	bl	80154ee <USBD_CtlError>
          break;
 8014b00:	e004      	b.n	8014b0c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014b02:	6839      	ldr	r1, [r7, #0]
 8014b04:	6878      	ldr	r0, [r7, #4]
 8014b06:	f000 fcf2 	bl	80154ee <USBD_CtlError>
          break;
 8014b0a:	e000      	b.n	8014b0e <USBD_StdItfReq+0xc2>
          break;
 8014b0c:	bf00      	nop
      }
      break;
 8014b0e:	e004      	b.n	8014b1a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8014b10:	6839      	ldr	r1, [r7, #0]
 8014b12:	6878      	ldr	r0, [r7, #4]
 8014b14:	f000 fceb 	bl	80154ee <USBD_CtlError>
      break;
 8014b18:	bf00      	nop
  }

  return ret;
 8014b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	3710      	adds	r7, #16
 8014b20:	46bd      	mov	sp, r7
 8014b22:	bd80      	pop	{r7, pc}

08014b24 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014b24:	b580      	push	{r7, lr}
 8014b26:	b084      	sub	sp, #16
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
 8014b2c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8014b2e:	2300      	movs	r3, #0
 8014b30:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8014b32:	683b      	ldr	r3, [r7, #0]
 8014b34:	889b      	ldrh	r3, [r3, #4]
 8014b36:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014b38:	683b      	ldr	r3, [r7, #0]
 8014b3a:	781b      	ldrb	r3, [r3, #0]
 8014b3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014b40:	2b40      	cmp	r3, #64	; 0x40
 8014b42:	d007      	beq.n	8014b54 <USBD_StdEPReq+0x30>
 8014b44:	2b40      	cmp	r3, #64	; 0x40
 8014b46:	f200 817f 	bhi.w	8014e48 <USBD_StdEPReq+0x324>
 8014b4a:	2b00      	cmp	r3, #0
 8014b4c:	d02a      	beq.n	8014ba4 <USBD_StdEPReq+0x80>
 8014b4e:	2b20      	cmp	r3, #32
 8014b50:	f040 817a 	bne.w	8014e48 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8014b54:	7bbb      	ldrb	r3, [r7, #14]
 8014b56:	4619      	mov	r1, r3
 8014b58:	6878      	ldr	r0, [r7, #4]
 8014b5a:	f7ff fe83 	bl	8014864 <USBD_CoreFindEP>
 8014b5e:	4603      	mov	r3, r0
 8014b60:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014b62:	7b7b      	ldrb	r3, [r7, #13]
 8014b64:	2bff      	cmp	r3, #255	; 0xff
 8014b66:	f000 8174 	beq.w	8014e52 <USBD_StdEPReq+0x32e>
 8014b6a:	7b7b      	ldrb	r3, [r7, #13]
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	f040 8170 	bne.w	8014e52 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8014b72:	7b7a      	ldrb	r2, [r7, #13]
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8014b7a:	7b7a      	ldrb	r2, [r7, #13]
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	32ae      	adds	r2, #174	; 0xae
 8014b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b84:	689b      	ldr	r3, [r3, #8]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	f000 8163 	beq.w	8014e52 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8014b8c:	7b7a      	ldrb	r2, [r7, #13]
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	32ae      	adds	r2, #174	; 0xae
 8014b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b96:	689b      	ldr	r3, [r3, #8]
 8014b98:	6839      	ldr	r1, [r7, #0]
 8014b9a:	6878      	ldr	r0, [r7, #4]
 8014b9c:	4798      	blx	r3
 8014b9e:	4603      	mov	r3, r0
 8014ba0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8014ba2:	e156      	b.n	8014e52 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014ba4:	683b      	ldr	r3, [r7, #0]
 8014ba6:	785b      	ldrb	r3, [r3, #1]
 8014ba8:	2b03      	cmp	r3, #3
 8014baa:	d008      	beq.n	8014bbe <USBD_StdEPReq+0x9a>
 8014bac:	2b03      	cmp	r3, #3
 8014bae:	f300 8145 	bgt.w	8014e3c <USBD_StdEPReq+0x318>
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	f000 809b 	beq.w	8014cee <USBD_StdEPReq+0x1ca>
 8014bb8:	2b01      	cmp	r3, #1
 8014bba:	d03c      	beq.n	8014c36 <USBD_StdEPReq+0x112>
 8014bbc:	e13e      	b.n	8014e3c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014bbe:	687b      	ldr	r3, [r7, #4]
 8014bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014bc4:	b2db      	uxtb	r3, r3
 8014bc6:	2b02      	cmp	r3, #2
 8014bc8:	d002      	beq.n	8014bd0 <USBD_StdEPReq+0xac>
 8014bca:	2b03      	cmp	r3, #3
 8014bcc:	d016      	beq.n	8014bfc <USBD_StdEPReq+0xd8>
 8014bce:	e02c      	b.n	8014c2a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014bd0:	7bbb      	ldrb	r3, [r7, #14]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d00d      	beq.n	8014bf2 <USBD_StdEPReq+0xce>
 8014bd6:	7bbb      	ldrb	r3, [r7, #14]
 8014bd8:	2b80      	cmp	r3, #128	; 0x80
 8014bda:	d00a      	beq.n	8014bf2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014bdc:	7bbb      	ldrb	r3, [r7, #14]
 8014bde:	4619      	mov	r1, r3
 8014be0:	6878      	ldr	r0, [r7, #4]
 8014be2:	f001 f9c3 	bl	8015f6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014be6:	2180      	movs	r1, #128	; 0x80
 8014be8:	6878      	ldr	r0, [r7, #4]
 8014bea:	f001 f9bf 	bl	8015f6c <USBD_LL_StallEP>
 8014bee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014bf0:	e020      	b.n	8014c34 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8014bf2:	6839      	ldr	r1, [r7, #0]
 8014bf4:	6878      	ldr	r0, [r7, #4]
 8014bf6:	f000 fc7a 	bl	80154ee <USBD_CtlError>
              break;
 8014bfa:	e01b      	b.n	8014c34 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014bfc:	683b      	ldr	r3, [r7, #0]
 8014bfe:	885b      	ldrh	r3, [r3, #2]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d10e      	bne.n	8014c22 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014c04:	7bbb      	ldrb	r3, [r7, #14]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d00b      	beq.n	8014c22 <USBD_StdEPReq+0xfe>
 8014c0a:	7bbb      	ldrb	r3, [r7, #14]
 8014c0c:	2b80      	cmp	r3, #128	; 0x80
 8014c0e:	d008      	beq.n	8014c22 <USBD_StdEPReq+0xfe>
 8014c10:	683b      	ldr	r3, [r7, #0]
 8014c12:	88db      	ldrh	r3, [r3, #6]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d104      	bne.n	8014c22 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014c18:	7bbb      	ldrb	r3, [r7, #14]
 8014c1a:	4619      	mov	r1, r3
 8014c1c:	6878      	ldr	r0, [r7, #4]
 8014c1e:	f001 f9a5 	bl	8015f6c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014c22:	6878      	ldr	r0, [r7, #4]
 8014c24:	f000 fd2e 	bl	8015684 <USBD_CtlSendStatus>

              break;
 8014c28:	e004      	b.n	8014c34 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8014c2a:	6839      	ldr	r1, [r7, #0]
 8014c2c:	6878      	ldr	r0, [r7, #4]
 8014c2e:	f000 fc5e 	bl	80154ee <USBD_CtlError>
              break;
 8014c32:	bf00      	nop
          }
          break;
 8014c34:	e107      	b.n	8014e46 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014c3c:	b2db      	uxtb	r3, r3
 8014c3e:	2b02      	cmp	r3, #2
 8014c40:	d002      	beq.n	8014c48 <USBD_StdEPReq+0x124>
 8014c42:	2b03      	cmp	r3, #3
 8014c44:	d016      	beq.n	8014c74 <USBD_StdEPReq+0x150>
 8014c46:	e04b      	b.n	8014ce0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014c48:	7bbb      	ldrb	r3, [r7, #14]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d00d      	beq.n	8014c6a <USBD_StdEPReq+0x146>
 8014c4e:	7bbb      	ldrb	r3, [r7, #14]
 8014c50:	2b80      	cmp	r3, #128	; 0x80
 8014c52:	d00a      	beq.n	8014c6a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014c54:	7bbb      	ldrb	r3, [r7, #14]
 8014c56:	4619      	mov	r1, r3
 8014c58:	6878      	ldr	r0, [r7, #4]
 8014c5a:	f001 f987 	bl	8015f6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014c5e:	2180      	movs	r1, #128	; 0x80
 8014c60:	6878      	ldr	r0, [r7, #4]
 8014c62:	f001 f983 	bl	8015f6c <USBD_LL_StallEP>
 8014c66:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014c68:	e040      	b.n	8014cec <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8014c6a:	6839      	ldr	r1, [r7, #0]
 8014c6c:	6878      	ldr	r0, [r7, #4]
 8014c6e:	f000 fc3e 	bl	80154ee <USBD_CtlError>
              break;
 8014c72:	e03b      	b.n	8014cec <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014c74:	683b      	ldr	r3, [r7, #0]
 8014c76:	885b      	ldrh	r3, [r3, #2]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d136      	bne.n	8014cea <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014c7c:	7bbb      	ldrb	r3, [r7, #14]
 8014c7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d004      	beq.n	8014c90 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014c86:	7bbb      	ldrb	r3, [r7, #14]
 8014c88:	4619      	mov	r1, r3
 8014c8a:	6878      	ldr	r0, [r7, #4]
 8014c8c:	f001 f98d 	bl	8015faa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014c90:	6878      	ldr	r0, [r7, #4]
 8014c92:	f000 fcf7 	bl	8015684 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8014c96:	7bbb      	ldrb	r3, [r7, #14]
 8014c98:	4619      	mov	r1, r3
 8014c9a:	6878      	ldr	r0, [r7, #4]
 8014c9c:	f7ff fde2 	bl	8014864 <USBD_CoreFindEP>
 8014ca0:	4603      	mov	r3, r0
 8014ca2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8014ca4:	7b7b      	ldrb	r3, [r7, #13]
 8014ca6:	2bff      	cmp	r3, #255	; 0xff
 8014ca8:	d01f      	beq.n	8014cea <USBD_StdEPReq+0x1c6>
 8014caa:	7b7b      	ldrb	r3, [r7, #13]
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d11c      	bne.n	8014cea <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8014cb0:	7b7a      	ldrb	r2, [r7, #13]
 8014cb2:	687b      	ldr	r3, [r7, #4]
 8014cb4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8014cb8:	7b7a      	ldrb	r2, [r7, #13]
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	32ae      	adds	r2, #174	; 0xae
 8014cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cc2:	689b      	ldr	r3, [r3, #8]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d010      	beq.n	8014cea <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8014cc8:	7b7a      	ldrb	r2, [r7, #13]
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	32ae      	adds	r2, #174	; 0xae
 8014cce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cd2:	689b      	ldr	r3, [r3, #8]
 8014cd4:	6839      	ldr	r1, [r7, #0]
 8014cd6:	6878      	ldr	r0, [r7, #4]
 8014cd8:	4798      	blx	r3
 8014cda:	4603      	mov	r3, r0
 8014cdc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8014cde:	e004      	b.n	8014cea <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8014ce0:	6839      	ldr	r1, [r7, #0]
 8014ce2:	6878      	ldr	r0, [r7, #4]
 8014ce4:	f000 fc03 	bl	80154ee <USBD_CtlError>
              break;
 8014ce8:	e000      	b.n	8014cec <USBD_StdEPReq+0x1c8>
              break;
 8014cea:	bf00      	nop
          }
          break;
 8014cec:	e0ab      	b.n	8014e46 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014cf4:	b2db      	uxtb	r3, r3
 8014cf6:	2b02      	cmp	r3, #2
 8014cf8:	d002      	beq.n	8014d00 <USBD_StdEPReq+0x1dc>
 8014cfa:	2b03      	cmp	r3, #3
 8014cfc:	d032      	beq.n	8014d64 <USBD_StdEPReq+0x240>
 8014cfe:	e097      	b.n	8014e30 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014d00:	7bbb      	ldrb	r3, [r7, #14]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d007      	beq.n	8014d16 <USBD_StdEPReq+0x1f2>
 8014d06:	7bbb      	ldrb	r3, [r7, #14]
 8014d08:	2b80      	cmp	r3, #128	; 0x80
 8014d0a:	d004      	beq.n	8014d16 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8014d0c:	6839      	ldr	r1, [r7, #0]
 8014d0e:	6878      	ldr	r0, [r7, #4]
 8014d10:	f000 fbed 	bl	80154ee <USBD_CtlError>
                break;
 8014d14:	e091      	b.n	8014e3a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014d16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	da0b      	bge.n	8014d36 <USBD_StdEPReq+0x212>
 8014d1e:	7bbb      	ldrb	r3, [r7, #14]
 8014d20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014d24:	4613      	mov	r3, r2
 8014d26:	009b      	lsls	r3, r3, #2
 8014d28:	4413      	add	r3, r2
 8014d2a:	009b      	lsls	r3, r3, #2
 8014d2c:	3310      	adds	r3, #16
 8014d2e:	687a      	ldr	r2, [r7, #4]
 8014d30:	4413      	add	r3, r2
 8014d32:	3304      	adds	r3, #4
 8014d34:	e00b      	b.n	8014d4e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014d36:	7bbb      	ldrb	r3, [r7, #14]
 8014d38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014d3c:	4613      	mov	r3, r2
 8014d3e:	009b      	lsls	r3, r3, #2
 8014d40:	4413      	add	r3, r2
 8014d42:	009b      	lsls	r3, r3, #2
 8014d44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014d48:	687a      	ldr	r2, [r7, #4]
 8014d4a:	4413      	add	r3, r2
 8014d4c:	3304      	adds	r3, #4
 8014d4e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	2200      	movs	r2, #0
 8014d54:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014d56:	68bb      	ldr	r3, [r7, #8]
 8014d58:	2202      	movs	r2, #2
 8014d5a:	4619      	mov	r1, r3
 8014d5c:	6878      	ldr	r0, [r7, #4]
 8014d5e:	f000 fc37 	bl	80155d0 <USBD_CtlSendData>
              break;
 8014d62:	e06a      	b.n	8014e3a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014d64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	da11      	bge.n	8014d90 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014d6c:	7bbb      	ldrb	r3, [r7, #14]
 8014d6e:	f003 020f 	and.w	r2, r3, #15
 8014d72:	6879      	ldr	r1, [r7, #4]
 8014d74:	4613      	mov	r3, r2
 8014d76:	009b      	lsls	r3, r3, #2
 8014d78:	4413      	add	r3, r2
 8014d7a:	009b      	lsls	r3, r3, #2
 8014d7c:	440b      	add	r3, r1
 8014d7e:	3324      	adds	r3, #36	; 0x24
 8014d80:	881b      	ldrh	r3, [r3, #0]
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	d117      	bne.n	8014db6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014d86:	6839      	ldr	r1, [r7, #0]
 8014d88:	6878      	ldr	r0, [r7, #4]
 8014d8a:	f000 fbb0 	bl	80154ee <USBD_CtlError>
                  break;
 8014d8e:	e054      	b.n	8014e3a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014d90:	7bbb      	ldrb	r3, [r7, #14]
 8014d92:	f003 020f 	and.w	r2, r3, #15
 8014d96:	6879      	ldr	r1, [r7, #4]
 8014d98:	4613      	mov	r3, r2
 8014d9a:	009b      	lsls	r3, r3, #2
 8014d9c:	4413      	add	r3, r2
 8014d9e:	009b      	lsls	r3, r3, #2
 8014da0:	440b      	add	r3, r1
 8014da2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014da6:	881b      	ldrh	r3, [r3, #0]
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d104      	bne.n	8014db6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8014dac:	6839      	ldr	r1, [r7, #0]
 8014dae:	6878      	ldr	r0, [r7, #4]
 8014db0:	f000 fb9d 	bl	80154ee <USBD_CtlError>
                  break;
 8014db4:	e041      	b.n	8014e3a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014db6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014dba:	2b00      	cmp	r3, #0
 8014dbc:	da0b      	bge.n	8014dd6 <USBD_StdEPReq+0x2b2>
 8014dbe:	7bbb      	ldrb	r3, [r7, #14]
 8014dc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014dc4:	4613      	mov	r3, r2
 8014dc6:	009b      	lsls	r3, r3, #2
 8014dc8:	4413      	add	r3, r2
 8014dca:	009b      	lsls	r3, r3, #2
 8014dcc:	3310      	adds	r3, #16
 8014dce:	687a      	ldr	r2, [r7, #4]
 8014dd0:	4413      	add	r3, r2
 8014dd2:	3304      	adds	r3, #4
 8014dd4:	e00b      	b.n	8014dee <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014dd6:	7bbb      	ldrb	r3, [r7, #14]
 8014dd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014ddc:	4613      	mov	r3, r2
 8014dde:	009b      	lsls	r3, r3, #2
 8014de0:	4413      	add	r3, r2
 8014de2:	009b      	lsls	r3, r3, #2
 8014de4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014de8:	687a      	ldr	r2, [r7, #4]
 8014dea:	4413      	add	r3, r2
 8014dec:	3304      	adds	r3, #4
 8014dee:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014df0:	7bbb      	ldrb	r3, [r7, #14]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d002      	beq.n	8014dfc <USBD_StdEPReq+0x2d8>
 8014df6:	7bbb      	ldrb	r3, [r7, #14]
 8014df8:	2b80      	cmp	r3, #128	; 0x80
 8014dfa:	d103      	bne.n	8014e04 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8014dfc:	68bb      	ldr	r3, [r7, #8]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	601a      	str	r2, [r3, #0]
 8014e02:	e00e      	b.n	8014e22 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014e04:	7bbb      	ldrb	r3, [r7, #14]
 8014e06:	4619      	mov	r1, r3
 8014e08:	6878      	ldr	r0, [r7, #4]
 8014e0a:	f001 f8ed 	bl	8015fe8 <USBD_LL_IsStallEP>
 8014e0e:	4603      	mov	r3, r0
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	d003      	beq.n	8014e1c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8014e14:	68bb      	ldr	r3, [r7, #8]
 8014e16:	2201      	movs	r2, #1
 8014e18:	601a      	str	r2, [r3, #0]
 8014e1a:	e002      	b.n	8014e22 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8014e1c:	68bb      	ldr	r3, [r7, #8]
 8014e1e:	2200      	movs	r2, #0
 8014e20:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014e22:	68bb      	ldr	r3, [r7, #8]
 8014e24:	2202      	movs	r2, #2
 8014e26:	4619      	mov	r1, r3
 8014e28:	6878      	ldr	r0, [r7, #4]
 8014e2a:	f000 fbd1 	bl	80155d0 <USBD_CtlSendData>
              break;
 8014e2e:	e004      	b.n	8014e3a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8014e30:	6839      	ldr	r1, [r7, #0]
 8014e32:	6878      	ldr	r0, [r7, #4]
 8014e34:	f000 fb5b 	bl	80154ee <USBD_CtlError>
              break;
 8014e38:	bf00      	nop
          }
          break;
 8014e3a:	e004      	b.n	8014e46 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8014e3c:	6839      	ldr	r1, [r7, #0]
 8014e3e:	6878      	ldr	r0, [r7, #4]
 8014e40:	f000 fb55 	bl	80154ee <USBD_CtlError>
          break;
 8014e44:	bf00      	nop
      }
      break;
 8014e46:	e005      	b.n	8014e54 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8014e48:	6839      	ldr	r1, [r7, #0]
 8014e4a:	6878      	ldr	r0, [r7, #4]
 8014e4c:	f000 fb4f 	bl	80154ee <USBD_CtlError>
      break;
 8014e50:	e000      	b.n	8014e54 <USBD_StdEPReq+0x330>
      break;
 8014e52:	bf00      	nop
  }

  return ret;
 8014e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8014e56:	4618      	mov	r0, r3
 8014e58:	3710      	adds	r7, #16
 8014e5a:	46bd      	mov	sp, r7
 8014e5c:	bd80      	pop	{r7, pc}
	...

08014e60 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b084      	sub	sp, #16
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
 8014e68:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014e6a:	2300      	movs	r3, #0
 8014e6c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014e6e:	2300      	movs	r3, #0
 8014e70:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014e72:	2300      	movs	r3, #0
 8014e74:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014e76:	683b      	ldr	r3, [r7, #0]
 8014e78:	885b      	ldrh	r3, [r3, #2]
 8014e7a:	0a1b      	lsrs	r3, r3, #8
 8014e7c:	b29b      	uxth	r3, r3
 8014e7e:	3b01      	subs	r3, #1
 8014e80:	2b06      	cmp	r3, #6
 8014e82:	f200 8128 	bhi.w	80150d6 <USBD_GetDescriptor+0x276>
 8014e86:	a201      	add	r2, pc, #4	; (adr r2, 8014e8c <USBD_GetDescriptor+0x2c>)
 8014e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e8c:	08014ea9 	.word	0x08014ea9
 8014e90:	08014ec1 	.word	0x08014ec1
 8014e94:	08014f01 	.word	0x08014f01
 8014e98:	080150d7 	.word	0x080150d7
 8014e9c:	080150d7 	.word	0x080150d7
 8014ea0:	08015077 	.word	0x08015077
 8014ea4:	080150a3 	.word	0x080150a3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	687a      	ldr	r2, [r7, #4]
 8014eb2:	7c12      	ldrb	r2, [r2, #16]
 8014eb4:	f107 0108 	add.w	r1, r7, #8
 8014eb8:	4610      	mov	r0, r2
 8014eba:	4798      	blx	r3
 8014ebc:	60f8      	str	r0, [r7, #12]
      break;
 8014ebe:	e112      	b.n	80150e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	7c1b      	ldrb	r3, [r3, #16]
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d10d      	bne.n	8014ee4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014ed0:	f107 0208 	add.w	r2, r7, #8
 8014ed4:	4610      	mov	r0, r2
 8014ed6:	4798      	blx	r3
 8014ed8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	3301      	adds	r3, #1
 8014ede:	2202      	movs	r2, #2
 8014ee0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014ee2:	e100      	b.n	80150e6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014eec:	f107 0208 	add.w	r2, r7, #8
 8014ef0:	4610      	mov	r0, r2
 8014ef2:	4798      	blx	r3
 8014ef4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014ef6:	68fb      	ldr	r3, [r7, #12]
 8014ef8:	3301      	adds	r3, #1
 8014efa:	2202      	movs	r2, #2
 8014efc:	701a      	strb	r2, [r3, #0]
      break;
 8014efe:	e0f2      	b.n	80150e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014f00:	683b      	ldr	r3, [r7, #0]
 8014f02:	885b      	ldrh	r3, [r3, #2]
 8014f04:	b2db      	uxtb	r3, r3
 8014f06:	2b05      	cmp	r3, #5
 8014f08:	f200 80ac 	bhi.w	8015064 <USBD_GetDescriptor+0x204>
 8014f0c:	a201      	add	r2, pc, #4	; (adr r2, 8014f14 <USBD_GetDescriptor+0xb4>)
 8014f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f12:	bf00      	nop
 8014f14:	08014f2d 	.word	0x08014f2d
 8014f18:	08014f61 	.word	0x08014f61
 8014f1c:	08014f95 	.word	0x08014f95
 8014f20:	08014fc9 	.word	0x08014fc9
 8014f24:	08014ffd 	.word	0x08014ffd
 8014f28:	08015031 	.word	0x08015031
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f32:	685b      	ldr	r3, [r3, #4]
 8014f34:	2b00      	cmp	r3, #0
 8014f36:	d00b      	beq.n	8014f50 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f3e:	685b      	ldr	r3, [r3, #4]
 8014f40:	687a      	ldr	r2, [r7, #4]
 8014f42:	7c12      	ldrb	r2, [r2, #16]
 8014f44:	f107 0108 	add.w	r1, r7, #8
 8014f48:	4610      	mov	r0, r2
 8014f4a:	4798      	blx	r3
 8014f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014f4e:	e091      	b.n	8015074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014f50:	6839      	ldr	r1, [r7, #0]
 8014f52:	6878      	ldr	r0, [r7, #4]
 8014f54:	f000 facb 	bl	80154ee <USBD_CtlError>
            err++;
 8014f58:	7afb      	ldrb	r3, [r7, #11]
 8014f5a:	3301      	adds	r3, #1
 8014f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8014f5e:	e089      	b.n	8015074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f66:	689b      	ldr	r3, [r3, #8]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d00b      	beq.n	8014f84 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f72:	689b      	ldr	r3, [r3, #8]
 8014f74:	687a      	ldr	r2, [r7, #4]
 8014f76:	7c12      	ldrb	r2, [r2, #16]
 8014f78:	f107 0108 	add.w	r1, r7, #8
 8014f7c:	4610      	mov	r0, r2
 8014f7e:	4798      	blx	r3
 8014f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014f82:	e077      	b.n	8015074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014f84:	6839      	ldr	r1, [r7, #0]
 8014f86:	6878      	ldr	r0, [r7, #4]
 8014f88:	f000 fab1 	bl	80154ee <USBD_CtlError>
            err++;
 8014f8c:	7afb      	ldrb	r3, [r7, #11]
 8014f8e:	3301      	adds	r3, #1
 8014f90:	72fb      	strb	r3, [r7, #11]
          break;
 8014f92:	e06f      	b.n	8015074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f9a:	68db      	ldr	r3, [r3, #12]
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	d00b      	beq.n	8014fb8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014fa6:	68db      	ldr	r3, [r3, #12]
 8014fa8:	687a      	ldr	r2, [r7, #4]
 8014faa:	7c12      	ldrb	r2, [r2, #16]
 8014fac:	f107 0108 	add.w	r1, r7, #8
 8014fb0:	4610      	mov	r0, r2
 8014fb2:	4798      	blx	r3
 8014fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014fb6:	e05d      	b.n	8015074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014fb8:	6839      	ldr	r1, [r7, #0]
 8014fba:	6878      	ldr	r0, [r7, #4]
 8014fbc:	f000 fa97 	bl	80154ee <USBD_CtlError>
            err++;
 8014fc0:	7afb      	ldrb	r3, [r7, #11]
 8014fc2:	3301      	adds	r3, #1
 8014fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8014fc6:	e055      	b.n	8015074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014fce:	691b      	ldr	r3, [r3, #16]
 8014fd0:	2b00      	cmp	r3, #0
 8014fd2:	d00b      	beq.n	8014fec <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014fda:	691b      	ldr	r3, [r3, #16]
 8014fdc:	687a      	ldr	r2, [r7, #4]
 8014fde:	7c12      	ldrb	r2, [r2, #16]
 8014fe0:	f107 0108 	add.w	r1, r7, #8
 8014fe4:	4610      	mov	r0, r2
 8014fe6:	4798      	blx	r3
 8014fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014fea:	e043      	b.n	8015074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8014fec:	6839      	ldr	r1, [r7, #0]
 8014fee:	6878      	ldr	r0, [r7, #4]
 8014ff0:	f000 fa7d 	bl	80154ee <USBD_CtlError>
            err++;
 8014ff4:	7afb      	ldrb	r3, [r7, #11]
 8014ff6:	3301      	adds	r3, #1
 8014ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8014ffa:	e03b      	b.n	8015074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015002:	695b      	ldr	r3, [r3, #20]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d00b      	beq.n	8015020 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801500e:	695b      	ldr	r3, [r3, #20]
 8015010:	687a      	ldr	r2, [r7, #4]
 8015012:	7c12      	ldrb	r2, [r2, #16]
 8015014:	f107 0108 	add.w	r1, r7, #8
 8015018:	4610      	mov	r0, r2
 801501a:	4798      	blx	r3
 801501c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801501e:	e029      	b.n	8015074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015020:	6839      	ldr	r1, [r7, #0]
 8015022:	6878      	ldr	r0, [r7, #4]
 8015024:	f000 fa63 	bl	80154ee <USBD_CtlError>
            err++;
 8015028:	7afb      	ldrb	r3, [r7, #11]
 801502a:	3301      	adds	r3, #1
 801502c:	72fb      	strb	r3, [r7, #11]
          break;
 801502e:	e021      	b.n	8015074 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015036:	699b      	ldr	r3, [r3, #24]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d00b      	beq.n	8015054 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015042:	699b      	ldr	r3, [r3, #24]
 8015044:	687a      	ldr	r2, [r7, #4]
 8015046:	7c12      	ldrb	r2, [r2, #16]
 8015048:	f107 0108 	add.w	r1, r7, #8
 801504c:	4610      	mov	r0, r2
 801504e:	4798      	blx	r3
 8015050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015052:	e00f      	b.n	8015074 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015054:	6839      	ldr	r1, [r7, #0]
 8015056:	6878      	ldr	r0, [r7, #4]
 8015058:	f000 fa49 	bl	80154ee <USBD_CtlError>
            err++;
 801505c:	7afb      	ldrb	r3, [r7, #11]
 801505e:	3301      	adds	r3, #1
 8015060:	72fb      	strb	r3, [r7, #11]
          break;
 8015062:	e007      	b.n	8015074 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015064:	6839      	ldr	r1, [r7, #0]
 8015066:	6878      	ldr	r0, [r7, #4]
 8015068:	f000 fa41 	bl	80154ee <USBD_CtlError>
          err++;
 801506c:	7afb      	ldrb	r3, [r7, #11]
 801506e:	3301      	adds	r3, #1
 8015070:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015072:	bf00      	nop
      }
      break;
 8015074:	e037      	b.n	80150e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	7c1b      	ldrb	r3, [r3, #16]
 801507a:	2b00      	cmp	r3, #0
 801507c:	d109      	bne.n	8015092 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015086:	f107 0208 	add.w	r2, r7, #8
 801508a:	4610      	mov	r0, r2
 801508c:	4798      	blx	r3
 801508e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015090:	e029      	b.n	80150e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015092:	6839      	ldr	r1, [r7, #0]
 8015094:	6878      	ldr	r0, [r7, #4]
 8015096:	f000 fa2a 	bl	80154ee <USBD_CtlError>
        err++;
 801509a:	7afb      	ldrb	r3, [r7, #11]
 801509c:	3301      	adds	r3, #1
 801509e:	72fb      	strb	r3, [r7, #11]
      break;
 80150a0:	e021      	b.n	80150e6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	7c1b      	ldrb	r3, [r3, #16]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d10d      	bne.n	80150c6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80150b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150b2:	f107 0208 	add.w	r2, r7, #8
 80150b6:	4610      	mov	r0, r2
 80150b8:	4798      	blx	r3
 80150ba:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	3301      	adds	r3, #1
 80150c0:	2207      	movs	r2, #7
 80150c2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80150c4:	e00f      	b.n	80150e6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80150c6:	6839      	ldr	r1, [r7, #0]
 80150c8:	6878      	ldr	r0, [r7, #4]
 80150ca:	f000 fa10 	bl	80154ee <USBD_CtlError>
        err++;
 80150ce:	7afb      	ldrb	r3, [r7, #11]
 80150d0:	3301      	adds	r3, #1
 80150d2:	72fb      	strb	r3, [r7, #11]
      break;
 80150d4:	e007      	b.n	80150e6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80150d6:	6839      	ldr	r1, [r7, #0]
 80150d8:	6878      	ldr	r0, [r7, #4]
 80150da:	f000 fa08 	bl	80154ee <USBD_CtlError>
      err++;
 80150de:	7afb      	ldrb	r3, [r7, #11]
 80150e0:	3301      	adds	r3, #1
 80150e2:	72fb      	strb	r3, [r7, #11]
      break;
 80150e4:	bf00      	nop
  }

  if (err != 0U)
 80150e6:	7afb      	ldrb	r3, [r7, #11]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d11e      	bne.n	801512a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80150ec:	683b      	ldr	r3, [r7, #0]
 80150ee:	88db      	ldrh	r3, [r3, #6]
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	d016      	beq.n	8015122 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80150f4:	893b      	ldrh	r3, [r7, #8]
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	d00e      	beq.n	8015118 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80150fa:	683b      	ldr	r3, [r7, #0]
 80150fc:	88da      	ldrh	r2, [r3, #6]
 80150fe:	893b      	ldrh	r3, [r7, #8]
 8015100:	4293      	cmp	r3, r2
 8015102:	bf28      	it	cs
 8015104:	4613      	movcs	r3, r2
 8015106:	b29b      	uxth	r3, r3
 8015108:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801510a:	893b      	ldrh	r3, [r7, #8]
 801510c:	461a      	mov	r2, r3
 801510e:	68f9      	ldr	r1, [r7, #12]
 8015110:	6878      	ldr	r0, [r7, #4]
 8015112:	f000 fa5d 	bl	80155d0 <USBD_CtlSendData>
 8015116:	e009      	b.n	801512c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015118:	6839      	ldr	r1, [r7, #0]
 801511a:	6878      	ldr	r0, [r7, #4]
 801511c:	f000 f9e7 	bl	80154ee <USBD_CtlError>
 8015120:	e004      	b.n	801512c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015122:	6878      	ldr	r0, [r7, #4]
 8015124:	f000 faae 	bl	8015684 <USBD_CtlSendStatus>
 8015128:	e000      	b.n	801512c <USBD_GetDescriptor+0x2cc>
    return;
 801512a:	bf00      	nop
  }
}
 801512c:	3710      	adds	r7, #16
 801512e:	46bd      	mov	sp, r7
 8015130:	bd80      	pop	{r7, pc}
 8015132:	bf00      	nop

08015134 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015134:	b580      	push	{r7, lr}
 8015136:	b084      	sub	sp, #16
 8015138:	af00      	add	r7, sp, #0
 801513a:	6078      	str	r0, [r7, #4]
 801513c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801513e:	683b      	ldr	r3, [r7, #0]
 8015140:	889b      	ldrh	r3, [r3, #4]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d131      	bne.n	80151aa <USBD_SetAddress+0x76>
 8015146:	683b      	ldr	r3, [r7, #0]
 8015148:	88db      	ldrh	r3, [r3, #6]
 801514a:	2b00      	cmp	r3, #0
 801514c:	d12d      	bne.n	80151aa <USBD_SetAddress+0x76>
 801514e:	683b      	ldr	r3, [r7, #0]
 8015150:	885b      	ldrh	r3, [r3, #2]
 8015152:	2b7f      	cmp	r3, #127	; 0x7f
 8015154:	d829      	bhi.n	80151aa <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015156:	683b      	ldr	r3, [r7, #0]
 8015158:	885b      	ldrh	r3, [r3, #2]
 801515a:	b2db      	uxtb	r3, r3
 801515c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015160:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015168:	b2db      	uxtb	r3, r3
 801516a:	2b03      	cmp	r3, #3
 801516c:	d104      	bne.n	8015178 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801516e:	6839      	ldr	r1, [r7, #0]
 8015170:	6878      	ldr	r0, [r7, #4]
 8015172:	f000 f9bc 	bl	80154ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015176:	e01d      	b.n	80151b4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	7bfa      	ldrb	r2, [r7, #15]
 801517c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015180:	7bfb      	ldrb	r3, [r7, #15]
 8015182:	4619      	mov	r1, r3
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f000 ff5b 	bl	8016040 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801518a:	6878      	ldr	r0, [r7, #4]
 801518c:	f000 fa7a 	bl	8015684 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015190:	7bfb      	ldrb	r3, [r7, #15]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d004      	beq.n	80151a0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	2202      	movs	r2, #2
 801519a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801519e:	e009      	b.n	80151b4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80151a0:	687b      	ldr	r3, [r7, #4]
 80151a2:	2201      	movs	r2, #1
 80151a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80151a8:	e004      	b.n	80151b4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80151aa:	6839      	ldr	r1, [r7, #0]
 80151ac:	6878      	ldr	r0, [r7, #4]
 80151ae:	f000 f99e 	bl	80154ee <USBD_CtlError>
  }
}
 80151b2:	bf00      	nop
 80151b4:	bf00      	nop
 80151b6:	3710      	adds	r7, #16
 80151b8:	46bd      	mov	sp, r7
 80151ba:	bd80      	pop	{r7, pc}

080151bc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	b084      	sub	sp, #16
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	6078      	str	r0, [r7, #4]
 80151c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80151c6:	2300      	movs	r3, #0
 80151c8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80151ca:	683b      	ldr	r3, [r7, #0]
 80151cc:	885b      	ldrh	r3, [r3, #2]
 80151ce:	b2da      	uxtb	r2, r3
 80151d0:	4b4e      	ldr	r3, [pc, #312]	; (801530c <USBD_SetConfig+0x150>)
 80151d2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80151d4:	4b4d      	ldr	r3, [pc, #308]	; (801530c <USBD_SetConfig+0x150>)
 80151d6:	781b      	ldrb	r3, [r3, #0]
 80151d8:	2b01      	cmp	r3, #1
 80151da:	d905      	bls.n	80151e8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80151dc:	6839      	ldr	r1, [r7, #0]
 80151de:	6878      	ldr	r0, [r7, #4]
 80151e0:	f000 f985 	bl	80154ee <USBD_CtlError>
    return USBD_FAIL;
 80151e4:	2303      	movs	r3, #3
 80151e6:	e08c      	b.n	8015302 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80151e8:	687b      	ldr	r3, [r7, #4]
 80151ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80151ee:	b2db      	uxtb	r3, r3
 80151f0:	2b02      	cmp	r3, #2
 80151f2:	d002      	beq.n	80151fa <USBD_SetConfig+0x3e>
 80151f4:	2b03      	cmp	r3, #3
 80151f6:	d029      	beq.n	801524c <USBD_SetConfig+0x90>
 80151f8:	e075      	b.n	80152e6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80151fa:	4b44      	ldr	r3, [pc, #272]	; (801530c <USBD_SetConfig+0x150>)
 80151fc:	781b      	ldrb	r3, [r3, #0]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d020      	beq.n	8015244 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015202:	4b42      	ldr	r3, [pc, #264]	; (801530c <USBD_SetConfig+0x150>)
 8015204:	781b      	ldrb	r3, [r3, #0]
 8015206:	461a      	mov	r2, r3
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 801520c:	4b3f      	ldr	r3, [pc, #252]	; (801530c <USBD_SetConfig+0x150>)
 801520e:	781b      	ldrb	r3, [r3, #0]
 8015210:	4619      	mov	r1, r3
 8015212:	6878      	ldr	r0, [r7, #4]
 8015214:	f7fe ffe1 	bl	80141da <USBD_SetClassConfig>
 8015218:	4603      	mov	r3, r0
 801521a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801521c:	7bfb      	ldrb	r3, [r7, #15]
 801521e:	2b00      	cmp	r3, #0
 8015220:	d008      	beq.n	8015234 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015222:	6839      	ldr	r1, [r7, #0]
 8015224:	6878      	ldr	r0, [r7, #4]
 8015226:	f000 f962 	bl	80154ee <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	2202      	movs	r2, #2
 801522e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015232:	e065      	b.n	8015300 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015234:	6878      	ldr	r0, [r7, #4]
 8015236:	f000 fa25 	bl	8015684 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	2203      	movs	r2, #3
 801523e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015242:	e05d      	b.n	8015300 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015244:	6878      	ldr	r0, [r7, #4]
 8015246:	f000 fa1d 	bl	8015684 <USBD_CtlSendStatus>
      break;
 801524a:	e059      	b.n	8015300 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801524c:	4b2f      	ldr	r3, [pc, #188]	; (801530c <USBD_SetConfig+0x150>)
 801524e:	781b      	ldrb	r3, [r3, #0]
 8015250:	2b00      	cmp	r3, #0
 8015252:	d112      	bne.n	801527a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	2202      	movs	r2, #2
 8015258:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801525c:	4b2b      	ldr	r3, [pc, #172]	; (801530c <USBD_SetConfig+0x150>)
 801525e:	781b      	ldrb	r3, [r3, #0]
 8015260:	461a      	mov	r2, r3
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015266:	4b29      	ldr	r3, [pc, #164]	; (801530c <USBD_SetConfig+0x150>)
 8015268:	781b      	ldrb	r3, [r3, #0]
 801526a:	4619      	mov	r1, r3
 801526c:	6878      	ldr	r0, [r7, #4]
 801526e:	f7fe ffd0 	bl	8014212 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015272:	6878      	ldr	r0, [r7, #4]
 8015274:	f000 fa06 	bl	8015684 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015278:	e042      	b.n	8015300 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801527a:	4b24      	ldr	r3, [pc, #144]	; (801530c <USBD_SetConfig+0x150>)
 801527c:	781b      	ldrb	r3, [r3, #0]
 801527e:	461a      	mov	r2, r3
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	685b      	ldr	r3, [r3, #4]
 8015284:	429a      	cmp	r2, r3
 8015286:	d02a      	beq.n	80152de <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	685b      	ldr	r3, [r3, #4]
 801528c:	b2db      	uxtb	r3, r3
 801528e:	4619      	mov	r1, r3
 8015290:	6878      	ldr	r0, [r7, #4]
 8015292:	f7fe ffbe 	bl	8014212 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015296:	4b1d      	ldr	r3, [pc, #116]	; (801530c <USBD_SetConfig+0x150>)
 8015298:	781b      	ldrb	r3, [r3, #0]
 801529a:	461a      	mov	r2, r3
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80152a0:	4b1a      	ldr	r3, [pc, #104]	; (801530c <USBD_SetConfig+0x150>)
 80152a2:	781b      	ldrb	r3, [r3, #0]
 80152a4:	4619      	mov	r1, r3
 80152a6:	6878      	ldr	r0, [r7, #4]
 80152a8:	f7fe ff97 	bl	80141da <USBD_SetClassConfig>
 80152ac:	4603      	mov	r3, r0
 80152ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80152b0:	7bfb      	ldrb	r3, [r7, #15]
 80152b2:	2b00      	cmp	r3, #0
 80152b4:	d00f      	beq.n	80152d6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80152b6:	6839      	ldr	r1, [r7, #0]
 80152b8:	6878      	ldr	r0, [r7, #4]
 80152ba:	f000 f918 	bl	80154ee <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	685b      	ldr	r3, [r3, #4]
 80152c2:	b2db      	uxtb	r3, r3
 80152c4:	4619      	mov	r1, r3
 80152c6:	6878      	ldr	r0, [r7, #4]
 80152c8:	f7fe ffa3 	bl	8014212 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	2202      	movs	r2, #2
 80152d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80152d4:	e014      	b.n	8015300 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80152d6:	6878      	ldr	r0, [r7, #4]
 80152d8:	f000 f9d4 	bl	8015684 <USBD_CtlSendStatus>
      break;
 80152dc:	e010      	b.n	8015300 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80152de:	6878      	ldr	r0, [r7, #4]
 80152e0:	f000 f9d0 	bl	8015684 <USBD_CtlSendStatus>
      break;
 80152e4:	e00c      	b.n	8015300 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80152e6:	6839      	ldr	r1, [r7, #0]
 80152e8:	6878      	ldr	r0, [r7, #4]
 80152ea:	f000 f900 	bl	80154ee <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80152ee:	4b07      	ldr	r3, [pc, #28]	; (801530c <USBD_SetConfig+0x150>)
 80152f0:	781b      	ldrb	r3, [r3, #0]
 80152f2:	4619      	mov	r1, r3
 80152f4:	6878      	ldr	r0, [r7, #4]
 80152f6:	f7fe ff8c 	bl	8014212 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80152fa:	2303      	movs	r3, #3
 80152fc:	73fb      	strb	r3, [r7, #15]
      break;
 80152fe:	bf00      	nop
  }

  return ret;
 8015300:	7bfb      	ldrb	r3, [r7, #15]
}
 8015302:	4618      	mov	r0, r3
 8015304:	3710      	adds	r7, #16
 8015306:	46bd      	mov	sp, r7
 8015308:	bd80      	pop	{r7, pc}
 801530a:	bf00      	nop
 801530c:	24000d00 	.word	0x24000d00

08015310 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015310:	b580      	push	{r7, lr}
 8015312:	b082      	sub	sp, #8
 8015314:	af00      	add	r7, sp, #0
 8015316:	6078      	str	r0, [r7, #4]
 8015318:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801531a:	683b      	ldr	r3, [r7, #0]
 801531c:	88db      	ldrh	r3, [r3, #6]
 801531e:	2b01      	cmp	r3, #1
 8015320:	d004      	beq.n	801532c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015322:	6839      	ldr	r1, [r7, #0]
 8015324:	6878      	ldr	r0, [r7, #4]
 8015326:	f000 f8e2 	bl	80154ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801532a:	e023      	b.n	8015374 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015332:	b2db      	uxtb	r3, r3
 8015334:	2b02      	cmp	r3, #2
 8015336:	dc02      	bgt.n	801533e <USBD_GetConfig+0x2e>
 8015338:	2b00      	cmp	r3, #0
 801533a:	dc03      	bgt.n	8015344 <USBD_GetConfig+0x34>
 801533c:	e015      	b.n	801536a <USBD_GetConfig+0x5a>
 801533e:	2b03      	cmp	r3, #3
 8015340:	d00b      	beq.n	801535a <USBD_GetConfig+0x4a>
 8015342:	e012      	b.n	801536a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	2200      	movs	r2, #0
 8015348:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	3308      	adds	r3, #8
 801534e:	2201      	movs	r2, #1
 8015350:	4619      	mov	r1, r3
 8015352:	6878      	ldr	r0, [r7, #4]
 8015354:	f000 f93c 	bl	80155d0 <USBD_CtlSendData>
        break;
 8015358:	e00c      	b.n	8015374 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	3304      	adds	r3, #4
 801535e:	2201      	movs	r2, #1
 8015360:	4619      	mov	r1, r3
 8015362:	6878      	ldr	r0, [r7, #4]
 8015364:	f000 f934 	bl	80155d0 <USBD_CtlSendData>
        break;
 8015368:	e004      	b.n	8015374 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801536a:	6839      	ldr	r1, [r7, #0]
 801536c:	6878      	ldr	r0, [r7, #4]
 801536e:	f000 f8be 	bl	80154ee <USBD_CtlError>
        break;
 8015372:	bf00      	nop
}
 8015374:	bf00      	nop
 8015376:	3708      	adds	r7, #8
 8015378:	46bd      	mov	sp, r7
 801537a:	bd80      	pop	{r7, pc}

0801537c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b082      	sub	sp, #8
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
 8015384:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801538c:	b2db      	uxtb	r3, r3
 801538e:	3b01      	subs	r3, #1
 8015390:	2b02      	cmp	r3, #2
 8015392:	d81e      	bhi.n	80153d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8015394:	683b      	ldr	r3, [r7, #0]
 8015396:	88db      	ldrh	r3, [r3, #6]
 8015398:	2b02      	cmp	r3, #2
 801539a:	d004      	beq.n	80153a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801539c:	6839      	ldr	r1, [r7, #0]
 801539e:	6878      	ldr	r0, [r7, #4]
 80153a0:	f000 f8a5 	bl	80154ee <USBD_CtlError>
        break;
 80153a4:	e01a      	b.n	80153dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	2201      	movs	r2, #1
 80153aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d005      	beq.n	80153c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	68db      	ldr	r3, [r3, #12]
 80153ba:	f043 0202 	orr.w	r2, r3, #2
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	330c      	adds	r3, #12
 80153c6:	2202      	movs	r2, #2
 80153c8:	4619      	mov	r1, r3
 80153ca:	6878      	ldr	r0, [r7, #4]
 80153cc:	f000 f900 	bl	80155d0 <USBD_CtlSendData>
      break;
 80153d0:	e004      	b.n	80153dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80153d2:	6839      	ldr	r1, [r7, #0]
 80153d4:	6878      	ldr	r0, [r7, #4]
 80153d6:	f000 f88a 	bl	80154ee <USBD_CtlError>
      break;
 80153da:	bf00      	nop
  }
}
 80153dc:	bf00      	nop
 80153de:	3708      	adds	r7, #8
 80153e0:	46bd      	mov	sp, r7
 80153e2:	bd80      	pop	{r7, pc}

080153e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b082      	sub	sp, #8
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
 80153ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80153ee:	683b      	ldr	r3, [r7, #0]
 80153f0:	885b      	ldrh	r3, [r3, #2]
 80153f2:	2b01      	cmp	r3, #1
 80153f4:	d107      	bne.n	8015406 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	2201      	movs	r2, #1
 80153fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80153fe:	6878      	ldr	r0, [r7, #4]
 8015400:	f000 f940 	bl	8015684 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8015404:	e013      	b.n	801542e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8015406:	683b      	ldr	r3, [r7, #0]
 8015408:	885b      	ldrh	r3, [r3, #2]
 801540a:	2b02      	cmp	r3, #2
 801540c:	d10b      	bne.n	8015426 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801540e:	683b      	ldr	r3, [r7, #0]
 8015410:	889b      	ldrh	r3, [r3, #4]
 8015412:	0a1b      	lsrs	r3, r3, #8
 8015414:	b29b      	uxth	r3, r3
 8015416:	b2da      	uxtb	r2, r3
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801541e:	6878      	ldr	r0, [r7, #4]
 8015420:	f000 f930 	bl	8015684 <USBD_CtlSendStatus>
}
 8015424:	e003      	b.n	801542e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8015426:	6839      	ldr	r1, [r7, #0]
 8015428:	6878      	ldr	r0, [r7, #4]
 801542a:	f000 f860 	bl	80154ee <USBD_CtlError>
}
 801542e:	bf00      	nop
 8015430:	3708      	adds	r7, #8
 8015432:	46bd      	mov	sp, r7
 8015434:	bd80      	pop	{r7, pc}

08015436 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015436:	b580      	push	{r7, lr}
 8015438:	b082      	sub	sp, #8
 801543a:	af00      	add	r7, sp, #0
 801543c:	6078      	str	r0, [r7, #4]
 801543e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015446:	b2db      	uxtb	r3, r3
 8015448:	3b01      	subs	r3, #1
 801544a:	2b02      	cmp	r3, #2
 801544c:	d80b      	bhi.n	8015466 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801544e:	683b      	ldr	r3, [r7, #0]
 8015450:	885b      	ldrh	r3, [r3, #2]
 8015452:	2b01      	cmp	r3, #1
 8015454:	d10c      	bne.n	8015470 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	2200      	movs	r2, #0
 801545a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801545e:	6878      	ldr	r0, [r7, #4]
 8015460:	f000 f910 	bl	8015684 <USBD_CtlSendStatus>
      }
      break;
 8015464:	e004      	b.n	8015470 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8015466:	6839      	ldr	r1, [r7, #0]
 8015468:	6878      	ldr	r0, [r7, #4]
 801546a:	f000 f840 	bl	80154ee <USBD_CtlError>
      break;
 801546e:	e000      	b.n	8015472 <USBD_ClrFeature+0x3c>
      break;
 8015470:	bf00      	nop
  }
}
 8015472:	bf00      	nop
 8015474:	3708      	adds	r7, #8
 8015476:	46bd      	mov	sp, r7
 8015478:	bd80      	pop	{r7, pc}

0801547a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801547a:	b580      	push	{r7, lr}
 801547c:	b084      	sub	sp, #16
 801547e:	af00      	add	r7, sp, #0
 8015480:	6078      	str	r0, [r7, #4]
 8015482:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8015484:	683b      	ldr	r3, [r7, #0]
 8015486:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	781a      	ldrb	r2, [r3, #0]
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	3301      	adds	r3, #1
 8015494:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	781a      	ldrb	r2, [r3, #0]
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	3301      	adds	r3, #1
 80154a2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80154a4:	68f8      	ldr	r0, [r7, #12]
 80154a6:	f7ff fa41 	bl	801492c <SWAPBYTE>
 80154aa:	4603      	mov	r3, r0
 80154ac:	461a      	mov	r2, r3
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	3301      	adds	r3, #1
 80154b6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	3301      	adds	r3, #1
 80154bc:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80154be:	68f8      	ldr	r0, [r7, #12]
 80154c0:	f7ff fa34 	bl	801492c <SWAPBYTE>
 80154c4:	4603      	mov	r3, r0
 80154c6:	461a      	mov	r2, r3
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	3301      	adds	r3, #1
 80154d0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	3301      	adds	r3, #1
 80154d6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80154d8:	68f8      	ldr	r0, [r7, #12]
 80154da:	f7ff fa27 	bl	801492c <SWAPBYTE>
 80154de:	4603      	mov	r3, r0
 80154e0:	461a      	mov	r2, r3
 80154e2:	687b      	ldr	r3, [r7, #4]
 80154e4:	80da      	strh	r2, [r3, #6]
}
 80154e6:	bf00      	nop
 80154e8:	3710      	adds	r7, #16
 80154ea:	46bd      	mov	sp, r7
 80154ec:	bd80      	pop	{r7, pc}

080154ee <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80154ee:	b580      	push	{r7, lr}
 80154f0:	b082      	sub	sp, #8
 80154f2:	af00      	add	r7, sp, #0
 80154f4:	6078      	str	r0, [r7, #4]
 80154f6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80154f8:	2180      	movs	r1, #128	; 0x80
 80154fa:	6878      	ldr	r0, [r7, #4]
 80154fc:	f000 fd36 	bl	8015f6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015500:	2100      	movs	r1, #0
 8015502:	6878      	ldr	r0, [r7, #4]
 8015504:	f000 fd32 	bl	8015f6c <USBD_LL_StallEP>
}
 8015508:	bf00      	nop
 801550a:	3708      	adds	r7, #8
 801550c:	46bd      	mov	sp, r7
 801550e:	bd80      	pop	{r7, pc}

08015510 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b086      	sub	sp, #24
 8015514:	af00      	add	r7, sp, #0
 8015516:	60f8      	str	r0, [r7, #12]
 8015518:	60b9      	str	r1, [r7, #8]
 801551a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801551c:	2300      	movs	r3, #0
 801551e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d036      	beq.n	8015594 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 801552a:	6938      	ldr	r0, [r7, #16]
 801552c:	f000 f836 	bl	801559c <USBD_GetLen>
 8015530:	4603      	mov	r3, r0
 8015532:	3301      	adds	r3, #1
 8015534:	b29b      	uxth	r3, r3
 8015536:	005b      	lsls	r3, r3, #1
 8015538:	b29a      	uxth	r2, r3
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801553e:	7dfb      	ldrb	r3, [r7, #23]
 8015540:	68ba      	ldr	r2, [r7, #8]
 8015542:	4413      	add	r3, r2
 8015544:	687a      	ldr	r2, [r7, #4]
 8015546:	7812      	ldrb	r2, [r2, #0]
 8015548:	701a      	strb	r2, [r3, #0]
  idx++;
 801554a:	7dfb      	ldrb	r3, [r7, #23]
 801554c:	3301      	adds	r3, #1
 801554e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015550:	7dfb      	ldrb	r3, [r7, #23]
 8015552:	68ba      	ldr	r2, [r7, #8]
 8015554:	4413      	add	r3, r2
 8015556:	2203      	movs	r2, #3
 8015558:	701a      	strb	r2, [r3, #0]
  idx++;
 801555a:	7dfb      	ldrb	r3, [r7, #23]
 801555c:	3301      	adds	r3, #1
 801555e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015560:	e013      	b.n	801558a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015562:	7dfb      	ldrb	r3, [r7, #23]
 8015564:	68ba      	ldr	r2, [r7, #8]
 8015566:	4413      	add	r3, r2
 8015568:	693a      	ldr	r2, [r7, #16]
 801556a:	7812      	ldrb	r2, [r2, #0]
 801556c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801556e:	693b      	ldr	r3, [r7, #16]
 8015570:	3301      	adds	r3, #1
 8015572:	613b      	str	r3, [r7, #16]
    idx++;
 8015574:	7dfb      	ldrb	r3, [r7, #23]
 8015576:	3301      	adds	r3, #1
 8015578:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801557a:	7dfb      	ldrb	r3, [r7, #23]
 801557c:	68ba      	ldr	r2, [r7, #8]
 801557e:	4413      	add	r3, r2
 8015580:	2200      	movs	r2, #0
 8015582:	701a      	strb	r2, [r3, #0]
    idx++;
 8015584:	7dfb      	ldrb	r3, [r7, #23]
 8015586:	3301      	adds	r3, #1
 8015588:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801558a:	693b      	ldr	r3, [r7, #16]
 801558c:	781b      	ldrb	r3, [r3, #0]
 801558e:	2b00      	cmp	r3, #0
 8015590:	d1e7      	bne.n	8015562 <USBD_GetString+0x52>
 8015592:	e000      	b.n	8015596 <USBD_GetString+0x86>
    return;
 8015594:	bf00      	nop
  }
}
 8015596:	3718      	adds	r7, #24
 8015598:	46bd      	mov	sp, r7
 801559a:	bd80      	pop	{r7, pc}

0801559c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801559c:	b480      	push	{r7}
 801559e:	b085      	sub	sp, #20
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80155a4:	2300      	movs	r3, #0
 80155a6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80155ac:	e005      	b.n	80155ba <USBD_GetLen+0x1e>
  {
    len++;
 80155ae:	7bfb      	ldrb	r3, [r7, #15]
 80155b0:	3301      	adds	r3, #1
 80155b2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80155b4:	68bb      	ldr	r3, [r7, #8]
 80155b6:	3301      	adds	r3, #1
 80155b8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80155ba:	68bb      	ldr	r3, [r7, #8]
 80155bc:	781b      	ldrb	r3, [r3, #0]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d1f5      	bne.n	80155ae <USBD_GetLen+0x12>
  }

  return len;
 80155c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80155c4:	4618      	mov	r0, r3
 80155c6:	3714      	adds	r7, #20
 80155c8:	46bd      	mov	sp, r7
 80155ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ce:	4770      	bx	lr

080155d0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b084      	sub	sp, #16
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	60f8      	str	r0, [r7, #12]
 80155d8:	60b9      	str	r1, [r7, #8]
 80155da:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80155dc:	68fb      	ldr	r3, [r7, #12]
 80155de:	2202      	movs	r2, #2
 80155e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	687a      	ldr	r2, [r7, #4]
 80155e8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80155ea:	68fb      	ldr	r3, [r7, #12]
 80155ec:	687a      	ldr	r2, [r7, #4]
 80155ee:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	68ba      	ldr	r2, [r7, #8]
 80155f4:	2100      	movs	r1, #0
 80155f6:	68f8      	ldr	r0, [r7, #12]
 80155f8:	f000 fd41 	bl	801607e <USBD_LL_Transmit>

  return USBD_OK;
 80155fc:	2300      	movs	r3, #0
}
 80155fe:	4618      	mov	r0, r3
 8015600:	3710      	adds	r7, #16
 8015602:	46bd      	mov	sp, r7
 8015604:	bd80      	pop	{r7, pc}

08015606 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8015606:	b580      	push	{r7, lr}
 8015608:	b084      	sub	sp, #16
 801560a:	af00      	add	r7, sp, #0
 801560c:	60f8      	str	r0, [r7, #12]
 801560e:	60b9      	str	r1, [r7, #8]
 8015610:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	68ba      	ldr	r2, [r7, #8]
 8015616:	2100      	movs	r1, #0
 8015618:	68f8      	ldr	r0, [r7, #12]
 801561a:	f000 fd30 	bl	801607e <USBD_LL_Transmit>

  return USBD_OK;
 801561e:	2300      	movs	r3, #0
}
 8015620:	4618      	mov	r0, r3
 8015622:	3710      	adds	r7, #16
 8015624:	46bd      	mov	sp, r7
 8015626:	bd80      	pop	{r7, pc}

08015628 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8015628:	b580      	push	{r7, lr}
 801562a:	b084      	sub	sp, #16
 801562c:	af00      	add	r7, sp, #0
 801562e:	60f8      	str	r0, [r7, #12]
 8015630:	60b9      	str	r1, [r7, #8]
 8015632:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	2203      	movs	r2, #3
 8015638:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	687a      	ldr	r2, [r7, #4]
 8015640:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	687a      	ldr	r2, [r7, #4]
 8015648:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	68ba      	ldr	r2, [r7, #8]
 8015650:	2100      	movs	r1, #0
 8015652:	68f8      	ldr	r0, [r7, #12]
 8015654:	f000 fd34 	bl	80160c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015658:	2300      	movs	r3, #0
}
 801565a:	4618      	mov	r0, r3
 801565c:	3710      	adds	r7, #16
 801565e:	46bd      	mov	sp, r7
 8015660:	bd80      	pop	{r7, pc}

08015662 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015662:	b580      	push	{r7, lr}
 8015664:	b084      	sub	sp, #16
 8015666:	af00      	add	r7, sp, #0
 8015668:	60f8      	str	r0, [r7, #12]
 801566a:	60b9      	str	r1, [r7, #8]
 801566c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	68ba      	ldr	r2, [r7, #8]
 8015672:	2100      	movs	r1, #0
 8015674:	68f8      	ldr	r0, [r7, #12]
 8015676:	f000 fd23 	bl	80160c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801567a:	2300      	movs	r3, #0
}
 801567c:	4618      	mov	r0, r3
 801567e:	3710      	adds	r7, #16
 8015680:	46bd      	mov	sp, r7
 8015682:	bd80      	pop	{r7, pc}

08015684 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8015684:	b580      	push	{r7, lr}
 8015686:	b082      	sub	sp, #8
 8015688:	af00      	add	r7, sp, #0
 801568a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	2204      	movs	r2, #4
 8015690:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8015694:	2300      	movs	r3, #0
 8015696:	2200      	movs	r2, #0
 8015698:	2100      	movs	r1, #0
 801569a:	6878      	ldr	r0, [r7, #4]
 801569c:	f000 fcef 	bl	801607e <USBD_LL_Transmit>

  return USBD_OK;
 80156a0:	2300      	movs	r3, #0
}
 80156a2:	4618      	mov	r0, r3
 80156a4:	3708      	adds	r7, #8
 80156a6:	46bd      	mov	sp, r7
 80156a8:	bd80      	pop	{r7, pc}

080156aa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80156aa:	b580      	push	{r7, lr}
 80156ac:	b082      	sub	sp, #8
 80156ae:	af00      	add	r7, sp, #0
 80156b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	2205      	movs	r2, #5
 80156b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80156ba:	2300      	movs	r3, #0
 80156bc:	2200      	movs	r2, #0
 80156be:	2100      	movs	r1, #0
 80156c0:	6878      	ldr	r0, [r7, #4]
 80156c2:	f000 fcfd 	bl	80160c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80156c6:	2300      	movs	r3, #0
}
 80156c8:	4618      	mov	r0, r3
 80156ca:	3708      	adds	r7, #8
 80156cc:	46bd      	mov	sp, r7
 80156ce:	bd80      	pop	{r7, pc}

080156d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80156d0:	b480      	push	{r7}
 80156d2:	b087      	sub	sp, #28
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	60f8      	str	r0, [r7, #12]
 80156d8:	60b9      	str	r1, [r7, #8]
 80156da:	4613      	mov	r3, r2
 80156dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80156de:	2301      	movs	r3, #1
 80156e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80156e2:	2300      	movs	r3, #0
 80156e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80156e6:	4b1f      	ldr	r3, [pc, #124]	; (8015764 <FATFS_LinkDriverEx+0x94>)
 80156e8:	7a5b      	ldrb	r3, [r3, #9]
 80156ea:	b2db      	uxtb	r3, r3
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d131      	bne.n	8015754 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80156f0:	4b1c      	ldr	r3, [pc, #112]	; (8015764 <FATFS_LinkDriverEx+0x94>)
 80156f2:	7a5b      	ldrb	r3, [r3, #9]
 80156f4:	b2db      	uxtb	r3, r3
 80156f6:	461a      	mov	r2, r3
 80156f8:	4b1a      	ldr	r3, [pc, #104]	; (8015764 <FATFS_LinkDriverEx+0x94>)
 80156fa:	2100      	movs	r1, #0
 80156fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80156fe:	4b19      	ldr	r3, [pc, #100]	; (8015764 <FATFS_LinkDriverEx+0x94>)
 8015700:	7a5b      	ldrb	r3, [r3, #9]
 8015702:	b2db      	uxtb	r3, r3
 8015704:	4a17      	ldr	r2, [pc, #92]	; (8015764 <FATFS_LinkDriverEx+0x94>)
 8015706:	009b      	lsls	r3, r3, #2
 8015708:	4413      	add	r3, r2
 801570a:	68fa      	ldr	r2, [r7, #12]
 801570c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801570e:	4b15      	ldr	r3, [pc, #84]	; (8015764 <FATFS_LinkDriverEx+0x94>)
 8015710:	7a5b      	ldrb	r3, [r3, #9]
 8015712:	b2db      	uxtb	r3, r3
 8015714:	461a      	mov	r2, r3
 8015716:	4b13      	ldr	r3, [pc, #76]	; (8015764 <FATFS_LinkDriverEx+0x94>)
 8015718:	4413      	add	r3, r2
 801571a:	79fa      	ldrb	r2, [r7, #7]
 801571c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801571e:	4b11      	ldr	r3, [pc, #68]	; (8015764 <FATFS_LinkDriverEx+0x94>)
 8015720:	7a5b      	ldrb	r3, [r3, #9]
 8015722:	b2db      	uxtb	r3, r3
 8015724:	1c5a      	adds	r2, r3, #1
 8015726:	b2d1      	uxtb	r1, r2
 8015728:	4a0e      	ldr	r2, [pc, #56]	; (8015764 <FATFS_LinkDriverEx+0x94>)
 801572a:	7251      	strb	r1, [r2, #9]
 801572c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801572e:	7dbb      	ldrb	r3, [r7, #22]
 8015730:	3330      	adds	r3, #48	; 0x30
 8015732:	b2da      	uxtb	r2, r3
 8015734:	68bb      	ldr	r3, [r7, #8]
 8015736:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015738:	68bb      	ldr	r3, [r7, #8]
 801573a:	3301      	adds	r3, #1
 801573c:	223a      	movs	r2, #58	; 0x3a
 801573e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015740:	68bb      	ldr	r3, [r7, #8]
 8015742:	3302      	adds	r3, #2
 8015744:	222f      	movs	r2, #47	; 0x2f
 8015746:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015748:	68bb      	ldr	r3, [r7, #8]
 801574a:	3303      	adds	r3, #3
 801574c:	2200      	movs	r2, #0
 801574e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015750:	2300      	movs	r3, #0
 8015752:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015754:	7dfb      	ldrb	r3, [r7, #23]
}
 8015756:	4618      	mov	r0, r3
 8015758:	371c      	adds	r7, #28
 801575a:	46bd      	mov	sp, r7
 801575c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015760:	4770      	bx	lr
 8015762:	bf00      	nop
 8015764:	24000d04 	.word	0x24000d04

08015768 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b082      	sub	sp, #8
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
 8015770:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015772:	2200      	movs	r2, #0
 8015774:	6839      	ldr	r1, [r7, #0]
 8015776:	6878      	ldr	r0, [r7, #4]
 8015778:	f7ff ffaa 	bl	80156d0 <FATFS_LinkDriverEx>
 801577c:	4603      	mov	r3, r0
}
 801577e:	4618      	mov	r0, r3
 8015780:	3708      	adds	r7, #8
 8015782:	46bd      	mov	sp, r7
 8015784:	bd80      	pop	{r7, pc}
	...

08015788 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8015788:	b580      	push	{r7, lr}
 801578a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801578c:	2201      	movs	r2, #1
 801578e:	4913      	ldr	r1, [pc, #76]	; (80157dc <MX_USB_DEVICE_Init+0x54>)
 8015790:	4813      	ldr	r0, [pc, #76]	; (80157e0 <MX_USB_DEVICE_Init+0x58>)
 8015792:	f7fe fca5 	bl	80140e0 <USBD_Init>
 8015796:	4603      	mov	r3, r0
 8015798:	2b00      	cmp	r3, #0
 801579a:	d001      	beq.n	80157a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801579c:	f7ec ffd2 	bl	8002744 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80157a0:	4910      	ldr	r1, [pc, #64]	; (80157e4 <MX_USB_DEVICE_Init+0x5c>)
 80157a2:	480f      	ldr	r0, [pc, #60]	; (80157e0 <MX_USB_DEVICE_Init+0x58>)
 80157a4:	f7fe fccc 	bl	8014140 <USBD_RegisterClass>
 80157a8:	4603      	mov	r3, r0
 80157aa:	2b00      	cmp	r3, #0
 80157ac:	d001      	beq.n	80157b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80157ae:	f7ec ffc9 	bl	8002744 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80157b2:	490d      	ldr	r1, [pc, #52]	; (80157e8 <MX_USB_DEVICE_Init+0x60>)
 80157b4:	480a      	ldr	r0, [pc, #40]	; (80157e0 <MX_USB_DEVICE_Init+0x58>)
 80157b6:	f7fe fbc3 	bl	8013f40 <USBD_CDC_RegisterInterface>
 80157ba:	4603      	mov	r3, r0
 80157bc:	2b00      	cmp	r3, #0
 80157be:	d001      	beq.n	80157c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80157c0:	f7ec ffc0 	bl	8002744 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80157c4:	4806      	ldr	r0, [pc, #24]	; (80157e0 <MX_USB_DEVICE_Init+0x58>)
 80157c6:	f7fe fcf1 	bl	80141ac <USBD_Start>
 80157ca:	4603      	mov	r3, r0
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d001      	beq.n	80157d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80157d0:	f7ec ffb8 	bl	8002744 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80157d4:	f7f3 fba4 	bl	8008f20 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80157d8:	bf00      	nop
 80157da:	bd80      	pop	{r7, pc}
 80157dc:	240000b0 	.word	0x240000b0
 80157e0:	24000d10 	.word	0x24000d10
 80157e4:	2400001c 	.word	0x2400001c
 80157e8:	2400009c 	.word	0x2400009c

080157ec <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80157f0:	2200      	movs	r2, #0
 80157f2:	4905      	ldr	r1, [pc, #20]	; (8015808 <CDC_Init_HS+0x1c>)
 80157f4:	4805      	ldr	r0, [pc, #20]	; (801580c <CDC_Init_HS+0x20>)
 80157f6:	f7fe fbbd 	bl	8013f74 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80157fa:	4905      	ldr	r1, [pc, #20]	; (8015810 <CDC_Init_HS+0x24>)
 80157fc:	4803      	ldr	r0, [pc, #12]	; (801580c <CDC_Init_HS+0x20>)
 80157fe:	f7fe fbdb 	bl	8013fb8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015802:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8015804:	4618      	mov	r0, r3
 8015806:	bd80      	pop	{r7, pc}
 8015808:	240017ec 	.word	0x240017ec
 801580c:	24000d10 	.word	0x24000d10
 8015810:	24000fec 	.word	0x24000fec

08015814 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8015814:	b480      	push	{r7}
 8015816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8015818:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801581a:	4618      	mov	r0, r3
 801581c:	46bd      	mov	sp, r7
 801581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015822:	4770      	bx	lr

08015824 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015824:	b480      	push	{r7}
 8015826:	b083      	sub	sp, #12
 8015828:	af00      	add	r7, sp, #0
 801582a:	4603      	mov	r3, r0
 801582c:	6039      	str	r1, [r7, #0]
 801582e:	71fb      	strb	r3, [r7, #7]
 8015830:	4613      	mov	r3, r2
 8015832:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8015834:	79fb      	ldrb	r3, [r7, #7]
 8015836:	2b23      	cmp	r3, #35	; 0x23
 8015838:	d84a      	bhi.n	80158d0 <CDC_Control_HS+0xac>
 801583a:	a201      	add	r2, pc, #4	; (adr r2, 8015840 <CDC_Control_HS+0x1c>)
 801583c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015840:	080158d1 	.word	0x080158d1
 8015844:	080158d1 	.word	0x080158d1
 8015848:	080158d1 	.word	0x080158d1
 801584c:	080158d1 	.word	0x080158d1
 8015850:	080158d1 	.word	0x080158d1
 8015854:	080158d1 	.word	0x080158d1
 8015858:	080158d1 	.word	0x080158d1
 801585c:	080158d1 	.word	0x080158d1
 8015860:	080158d1 	.word	0x080158d1
 8015864:	080158d1 	.word	0x080158d1
 8015868:	080158d1 	.word	0x080158d1
 801586c:	080158d1 	.word	0x080158d1
 8015870:	080158d1 	.word	0x080158d1
 8015874:	080158d1 	.word	0x080158d1
 8015878:	080158d1 	.word	0x080158d1
 801587c:	080158d1 	.word	0x080158d1
 8015880:	080158d1 	.word	0x080158d1
 8015884:	080158d1 	.word	0x080158d1
 8015888:	080158d1 	.word	0x080158d1
 801588c:	080158d1 	.word	0x080158d1
 8015890:	080158d1 	.word	0x080158d1
 8015894:	080158d1 	.word	0x080158d1
 8015898:	080158d1 	.word	0x080158d1
 801589c:	080158d1 	.word	0x080158d1
 80158a0:	080158d1 	.word	0x080158d1
 80158a4:	080158d1 	.word	0x080158d1
 80158a8:	080158d1 	.word	0x080158d1
 80158ac:	080158d1 	.word	0x080158d1
 80158b0:	080158d1 	.word	0x080158d1
 80158b4:	080158d1 	.word	0x080158d1
 80158b8:	080158d1 	.word	0x080158d1
 80158bc:	080158d1 	.word	0x080158d1
 80158c0:	080158d1 	.word	0x080158d1
 80158c4:	080158d1 	.word	0x080158d1
 80158c8:	080158d1 	.word	0x080158d1
 80158cc:	080158d1 	.word	0x080158d1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80158d0:	bf00      	nop
  }

  return (USBD_OK);
 80158d2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80158d4:	4618      	mov	r0, r3
 80158d6:	370c      	adds	r7, #12
 80158d8:	46bd      	mov	sp, r7
 80158da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158de:	4770      	bx	lr

080158e0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b082      	sub	sp, #8
 80158e4:	af00      	add	r7, sp, #0
 80158e6:	6078      	str	r0, [r7, #4]
 80158e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80158ea:	6879      	ldr	r1, [r7, #4]
 80158ec:	4805      	ldr	r0, [pc, #20]	; (8015904 <CDC_Receive_HS+0x24>)
 80158ee:	f7fe fb63 	bl	8013fb8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80158f2:	4804      	ldr	r0, [pc, #16]	; (8015904 <CDC_Receive_HS+0x24>)
 80158f4:	f7fe fbbe 	bl	8014074 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80158f8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 80158fa:	4618      	mov	r0, r3
 80158fc:	3708      	adds	r7, #8
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}
 8015902:	bf00      	nop
 8015904:	24000d10 	.word	0x24000d10

08015908 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b084      	sub	sp, #16
 801590c:	af00      	add	r7, sp, #0
 801590e:	6078      	str	r0, [r7, #4]
 8015910:	460b      	mov	r3, r1
 8015912:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015914:	2300      	movs	r3, #0
 8015916:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8015918:	4b0d      	ldr	r3, [pc, #52]	; (8015950 <CDC_Transmit_HS+0x48>)
 801591a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801591e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015920:	68bb      	ldr	r3, [r7, #8]
 8015922:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015926:	2b00      	cmp	r3, #0
 8015928:	d001      	beq.n	801592e <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 801592a:	2301      	movs	r3, #1
 801592c:	e00b      	b.n	8015946 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801592e:	887b      	ldrh	r3, [r7, #2]
 8015930:	461a      	mov	r2, r3
 8015932:	6879      	ldr	r1, [r7, #4]
 8015934:	4806      	ldr	r0, [pc, #24]	; (8015950 <CDC_Transmit_HS+0x48>)
 8015936:	f7fe fb1d 	bl	8013f74 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 801593a:	4805      	ldr	r0, [pc, #20]	; (8015950 <CDC_Transmit_HS+0x48>)
 801593c:	f7fe fb5a 	bl	8013ff4 <USBD_CDC_TransmitPacket>
 8015940:	4603      	mov	r3, r0
 8015942:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8015944:	7bfb      	ldrb	r3, [r7, #15]
}
 8015946:	4618      	mov	r0, r3
 8015948:	3710      	adds	r7, #16
 801594a:	46bd      	mov	sp, r7
 801594c:	bd80      	pop	{r7, pc}
 801594e:	bf00      	nop
 8015950:	24000d10 	.word	0x24000d10

08015954 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015954:	b480      	push	{r7}
 8015956:	b087      	sub	sp, #28
 8015958:	af00      	add	r7, sp, #0
 801595a:	60f8      	str	r0, [r7, #12]
 801595c:	60b9      	str	r1, [r7, #8]
 801595e:	4613      	mov	r3, r2
 8015960:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015962:	2300      	movs	r3, #0
 8015964:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8015966:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801596a:	4618      	mov	r0, r3
 801596c:	371c      	adds	r7, #28
 801596e:	46bd      	mov	sp, r7
 8015970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015974:	4770      	bx	lr
	...

08015978 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015978:	b480      	push	{r7}
 801597a:	b083      	sub	sp, #12
 801597c:	af00      	add	r7, sp, #0
 801597e:	4603      	mov	r3, r0
 8015980:	6039      	str	r1, [r7, #0]
 8015982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8015984:	683b      	ldr	r3, [r7, #0]
 8015986:	2212      	movs	r2, #18
 8015988:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801598a:	4b03      	ldr	r3, [pc, #12]	; (8015998 <USBD_HS_DeviceDescriptor+0x20>)
}
 801598c:	4618      	mov	r0, r3
 801598e:	370c      	adds	r7, #12
 8015990:	46bd      	mov	sp, r7
 8015992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015996:	4770      	bx	lr
 8015998:	240000cc 	.word	0x240000cc

0801599c <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801599c:	b480      	push	{r7}
 801599e:	b083      	sub	sp, #12
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	4603      	mov	r3, r0
 80159a4:	6039      	str	r1, [r7, #0]
 80159a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80159a8:	683b      	ldr	r3, [r7, #0]
 80159aa:	2204      	movs	r2, #4
 80159ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80159ae:	4b03      	ldr	r3, [pc, #12]	; (80159bc <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80159b0:	4618      	mov	r0, r3
 80159b2:	370c      	adds	r7, #12
 80159b4:	46bd      	mov	sp, r7
 80159b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ba:	4770      	bx	lr
 80159bc:	240000e0 	.word	0x240000e0

080159c0 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80159c0:	b580      	push	{r7, lr}
 80159c2:	b082      	sub	sp, #8
 80159c4:	af00      	add	r7, sp, #0
 80159c6:	4603      	mov	r3, r0
 80159c8:	6039      	str	r1, [r7, #0]
 80159ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80159cc:	79fb      	ldrb	r3, [r7, #7]
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d105      	bne.n	80159de <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80159d2:	683a      	ldr	r2, [r7, #0]
 80159d4:	4907      	ldr	r1, [pc, #28]	; (80159f4 <USBD_HS_ProductStrDescriptor+0x34>)
 80159d6:	4808      	ldr	r0, [pc, #32]	; (80159f8 <USBD_HS_ProductStrDescriptor+0x38>)
 80159d8:	f7ff fd9a 	bl	8015510 <USBD_GetString>
 80159dc:	e004      	b.n	80159e8 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80159de:	683a      	ldr	r2, [r7, #0]
 80159e0:	4904      	ldr	r1, [pc, #16]	; (80159f4 <USBD_HS_ProductStrDescriptor+0x34>)
 80159e2:	4805      	ldr	r0, [pc, #20]	; (80159f8 <USBD_HS_ProductStrDescriptor+0x38>)
 80159e4:	f7ff fd94 	bl	8015510 <USBD_GetString>
  }
  return USBD_StrDesc;
 80159e8:	4b02      	ldr	r3, [pc, #8]	; (80159f4 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80159ea:	4618      	mov	r0, r3
 80159ec:	3708      	adds	r7, #8
 80159ee:	46bd      	mov	sp, r7
 80159f0:	bd80      	pop	{r7, pc}
 80159f2:	bf00      	nop
 80159f4:	24001fec 	.word	0x24001fec
 80159f8:	0801acc4 	.word	0x0801acc4

080159fc <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b082      	sub	sp, #8
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	4603      	mov	r3, r0
 8015a04:	6039      	str	r1, [r7, #0]
 8015a06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015a08:	683a      	ldr	r2, [r7, #0]
 8015a0a:	4904      	ldr	r1, [pc, #16]	; (8015a1c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8015a0c:	4804      	ldr	r0, [pc, #16]	; (8015a20 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8015a0e:	f7ff fd7f 	bl	8015510 <USBD_GetString>
  return USBD_StrDesc;
 8015a12:	4b02      	ldr	r3, [pc, #8]	; (8015a1c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8015a14:	4618      	mov	r0, r3
 8015a16:	3708      	adds	r7, #8
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bd80      	pop	{r7, pc}
 8015a1c:	24001fec 	.word	0x24001fec
 8015a20:	0801ace0 	.word	0x0801ace0

08015a24 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b082      	sub	sp, #8
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	4603      	mov	r3, r0
 8015a2c:	6039      	str	r1, [r7, #0]
 8015a2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015a30:	683b      	ldr	r3, [r7, #0]
 8015a32:	221a      	movs	r2, #26
 8015a34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015a36:	f000 f843 	bl	8015ac0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8015a3a:	4b02      	ldr	r3, [pc, #8]	; (8015a44 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	3708      	adds	r7, #8
 8015a40:	46bd      	mov	sp, r7
 8015a42:	bd80      	pop	{r7, pc}
 8015a44:	240000e4 	.word	0x240000e4

08015a48 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a48:	b580      	push	{r7, lr}
 8015a4a:	b082      	sub	sp, #8
 8015a4c:	af00      	add	r7, sp, #0
 8015a4e:	4603      	mov	r3, r0
 8015a50:	6039      	str	r1, [r7, #0]
 8015a52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015a54:	79fb      	ldrb	r3, [r7, #7]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d105      	bne.n	8015a66 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8015a5a:	683a      	ldr	r2, [r7, #0]
 8015a5c:	4907      	ldr	r1, [pc, #28]	; (8015a7c <USBD_HS_ConfigStrDescriptor+0x34>)
 8015a5e:	4808      	ldr	r0, [pc, #32]	; (8015a80 <USBD_HS_ConfigStrDescriptor+0x38>)
 8015a60:	f7ff fd56 	bl	8015510 <USBD_GetString>
 8015a64:	e004      	b.n	8015a70 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8015a66:	683a      	ldr	r2, [r7, #0]
 8015a68:	4904      	ldr	r1, [pc, #16]	; (8015a7c <USBD_HS_ConfigStrDescriptor+0x34>)
 8015a6a:	4805      	ldr	r0, [pc, #20]	; (8015a80 <USBD_HS_ConfigStrDescriptor+0x38>)
 8015a6c:	f7ff fd50 	bl	8015510 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015a70:	4b02      	ldr	r3, [pc, #8]	; (8015a7c <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8015a72:	4618      	mov	r0, r3
 8015a74:	3708      	adds	r7, #8
 8015a76:	46bd      	mov	sp, r7
 8015a78:	bd80      	pop	{r7, pc}
 8015a7a:	bf00      	nop
 8015a7c:	24001fec 	.word	0x24001fec
 8015a80:	0801ace4 	.word	0x0801ace4

08015a84 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b082      	sub	sp, #8
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	6039      	str	r1, [r7, #0]
 8015a8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015a90:	79fb      	ldrb	r3, [r7, #7]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d105      	bne.n	8015aa2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8015a96:	683a      	ldr	r2, [r7, #0]
 8015a98:	4907      	ldr	r1, [pc, #28]	; (8015ab8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8015a9a:	4808      	ldr	r0, [pc, #32]	; (8015abc <USBD_HS_InterfaceStrDescriptor+0x38>)
 8015a9c:	f7ff fd38 	bl	8015510 <USBD_GetString>
 8015aa0:	e004      	b.n	8015aac <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8015aa2:	683a      	ldr	r2, [r7, #0]
 8015aa4:	4904      	ldr	r1, [pc, #16]	; (8015ab8 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8015aa6:	4805      	ldr	r0, [pc, #20]	; (8015abc <USBD_HS_InterfaceStrDescriptor+0x38>)
 8015aa8:	f7ff fd32 	bl	8015510 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015aac:	4b02      	ldr	r3, [pc, #8]	; (8015ab8 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8015aae:	4618      	mov	r0, r3
 8015ab0:	3708      	adds	r7, #8
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd80      	pop	{r7, pc}
 8015ab6:	bf00      	nop
 8015ab8:	24001fec 	.word	0x24001fec
 8015abc:	0801acf0 	.word	0x0801acf0

08015ac0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015ac0:	b580      	push	{r7, lr}
 8015ac2:	b084      	sub	sp, #16
 8015ac4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015ac6:	4b0f      	ldr	r3, [pc, #60]	; (8015b04 <Get_SerialNum+0x44>)
 8015ac8:	681b      	ldr	r3, [r3, #0]
 8015aca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015acc:	4b0e      	ldr	r3, [pc, #56]	; (8015b08 <Get_SerialNum+0x48>)
 8015ace:	681b      	ldr	r3, [r3, #0]
 8015ad0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015ad2:	4b0e      	ldr	r3, [pc, #56]	; (8015b0c <Get_SerialNum+0x4c>)
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015ad8:	68fa      	ldr	r2, [r7, #12]
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	4413      	add	r3, r2
 8015ade:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d009      	beq.n	8015afa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015ae6:	2208      	movs	r2, #8
 8015ae8:	4909      	ldr	r1, [pc, #36]	; (8015b10 <Get_SerialNum+0x50>)
 8015aea:	68f8      	ldr	r0, [r7, #12]
 8015aec:	f000 f814 	bl	8015b18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015af0:	2204      	movs	r2, #4
 8015af2:	4908      	ldr	r1, [pc, #32]	; (8015b14 <Get_SerialNum+0x54>)
 8015af4:	68b8      	ldr	r0, [r7, #8]
 8015af6:	f000 f80f 	bl	8015b18 <IntToUnicode>
  }
}
 8015afa:	bf00      	nop
 8015afc:	3710      	adds	r7, #16
 8015afe:	46bd      	mov	sp, r7
 8015b00:	bd80      	pop	{r7, pc}
 8015b02:	bf00      	nop
 8015b04:	1ff1e800 	.word	0x1ff1e800
 8015b08:	1ff1e804 	.word	0x1ff1e804
 8015b0c:	1ff1e808 	.word	0x1ff1e808
 8015b10:	240000e6 	.word	0x240000e6
 8015b14:	240000f6 	.word	0x240000f6

08015b18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015b18:	b480      	push	{r7}
 8015b1a:	b087      	sub	sp, #28
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	60f8      	str	r0, [r7, #12]
 8015b20:	60b9      	str	r1, [r7, #8]
 8015b22:	4613      	mov	r3, r2
 8015b24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015b26:	2300      	movs	r3, #0
 8015b28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015b2a:	2300      	movs	r3, #0
 8015b2c:	75fb      	strb	r3, [r7, #23]
 8015b2e:	e027      	b.n	8015b80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015b30:	68fb      	ldr	r3, [r7, #12]
 8015b32:	0f1b      	lsrs	r3, r3, #28
 8015b34:	2b09      	cmp	r3, #9
 8015b36:	d80b      	bhi.n	8015b50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	0f1b      	lsrs	r3, r3, #28
 8015b3c:	b2da      	uxtb	r2, r3
 8015b3e:	7dfb      	ldrb	r3, [r7, #23]
 8015b40:	005b      	lsls	r3, r3, #1
 8015b42:	4619      	mov	r1, r3
 8015b44:	68bb      	ldr	r3, [r7, #8]
 8015b46:	440b      	add	r3, r1
 8015b48:	3230      	adds	r2, #48	; 0x30
 8015b4a:	b2d2      	uxtb	r2, r2
 8015b4c:	701a      	strb	r2, [r3, #0]
 8015b4e:	e00a      	b.n	8015b66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015b50:	68fb      	ldr	r3, [r7, #12]
 8015b52:	0f1b      	lsrs	r3, r3, #28
 8015b54:	b2da      	uxtb	r2, r3
 8015b56:	7dfb      	ldrb	r3, [r7, #23]
 8015b58:	005b      	lsls	r3, r3, #1
 8015b5a:	4619      	mov	r1, r3
 8015b5c:	68bb      	ldr	r3, [r7, #8]
 8015b5e:	440b      	add	r3, r1
 8015b60:	3237      	adds	r2, #55	; 0x37
 8015b62:	b2d2      	uxtb	r2, r2
 8015b64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	011b      	lsls	r3, r3, #4
 8015b6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015b6c:	7dfb      	ldrb	r3, [r7, #23]
 8015b6e:	005b      	lsls	r3, r3, #1
 8015b70:	3301      	adds	r3, #1
 8015b72:	68ba      	ldr	r2, [r7, #8]
 8015b74:	4413      	add	r3, r2
 8015b76:	2200      	movs	r2, #0
 8015b78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015b7a:	7dfb      	ldrb	r3, [r7, #23]
 8015b7c:	3301      	adds	r3, #1
 8015b7e:	75fb      	strb	r3, [r7, #23]
 8015b80:	7dfa      	ldrb	r2, [r7, #23]
 8015b82:	79fb      	ldrb	r3, [r7, #7]
 8015b84:	429a      	cmp	r2, r3
 8015b86:	d3d3      	bcc.n	8015b30 <IntToUnicode+0x18>
  }
}
 8015b88:	bf00      	nop
 8015b8a:	bf00      	nop
 8015b8c:	371c      	adds	r7, #28
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b94:	4770      	bx	lr
	...

08015b98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	b0b2      	sub	sp, #200	; 0xc8
 8015b9c:	af00      	add	r7, sp, #0
 8015b9e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015ba0:	f107 0310 	add.w	r3, r7, #16
 8015ba4:	22b8      	movs	r2, #184	; 0xb8
 8015ba6:	2100      	movs	r1, #0
 8015ba8:	4618      	mov	r0, r3
 8015baa:	f000 fb39 	bl	8016220 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	4a1a      	ldr	r2, [pc, #104]	; (8015c1c <HAL_PCD_MspInit+0x84>)
 8015bb4:	4293      	cmp	r3, r2
 8015bb6:	d12c      	bne.n	8015c12 <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8015bb8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8015bbc:	f04f 0300 	mov.w	r3, #0
 8015bc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8015bc4:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8015bc8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015bcc:	f107 0310 	add.w	r3, r7, #16
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	f7f4 f985 	bl	8009ee0 <HAL_RCCEx_PeriphCLKConfig>
 8015bd6:	4603      	mov	r3, r0
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	d001      	beq.n	8015be0 <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 8015bdc:	f7ec fdb2 	bl	8002744 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8015be0:	f7f3 f99e 	bl	8008f20 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8015be4:	4b0e      	ldr	r3, [pc, #56]	; (8015c20 <HAL_PCD_MspInit+0x88>)
 8015be6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015bea:	4a0d      	ldr	r2, [pc, #52]	; (8015c20 <HAL_PCD_MspInit+0x88>)
 8015bec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8015bf0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8015bf4:	4b0a      	ldr	r3, [pc, #40]	; (8015c20 <HAL_PCD_MspInit+0x88>)
 8015bf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8015bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015bfe:	60fb      	str	r3, [r7, #12]
 8015c00:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8015c02:	2200      	movs	r2, #0
 8015c04:	2100      	movs	r1, #0
 8015c06:	204d      	movs	r0, #77	; 0x4d
 8015c08:	f7ef fb3d 	bl	8005286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8015c0c:	204d      	movs	r0, #77	; 0x4d
 8015c0e:	f7ef fb54 	bl	80052ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8015c12:	bf00      	nop
 8015c14:	37c8      	adds	r7, #200	; 0xc8
 8015c16:	46bd      	mov	sp, r7
 8015c18:	bd80      	pop	{r7, pc}
 8015c1a:	bf00      	nop
 8015c1c:	40040000 	.word	0x40040000
 8015c20:	58024400 	.word	0x58024400

08015c24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b082      	sub	sp, #8
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015c2c:	687b      	ldr	r3, [r7, #4]
 8015c2e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8015c38:	4619      	mov	r1, r3
 8015c3a:	4610      	mov	r0, r2
 8015c3c:	f7fe fb03 	bl	8014246 <USBD_LL_SetupStage>
}
 8015c40:	bf00      	nop
 8015c42:	3708      	adds	r7, #8
 8015c44:	46bd      	mov	sp, r7
 8015c46:	bd80      	pop	{r7, pc}

08015c48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c48:	b580      	push	{r7, lr}
 8015c4a:	b082      	sub	sp, #8
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
 8015c50:	460b      	mov	r3, r1
 8015c52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8015c5a:	78fa      	ldrb	r2, [r7, #3]
 8015c5c:	6879      	ldr	r1, [r7, #4]
 8015c5e:	4613      	mov	r3, r2
 8015c60:	00db      	lsls	r3, r3, #3
 8015c62:	4413      	add	r3, r2
 8015c64:	009b      	lsls	r3, r3, #2
 8015c66:	440b      	add	r3, r1
 8015c68:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8015c6c:	681a      	ldr	r2, [r3, #0]
 8015c6e:	78fb      	ldrb	r3, [r7, #3]
 8015c70:	4619      	mov	r1, r3
 8015c72:	f7fe fb3d 	bl	80142f0 <USBD_LL_DataOutStage>
}
 8015c76:	bf00      	nop
 8015c78:	3708      	adds	r7, #8
 8015c7a:	46bd      	mov	sp, r7
 8015c7c:	bd80      	pop	{r7, pc}

08015c7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015c7e:	b580      	push	{r7, lr}
 8015c80:	b082      	sub	sp, #8
 8015c82:	af00      	add	r7, sp, #0
 8015c84:	6078      	str	r0, [r7, #4]
 8015c86:	460b      	mov	r3, r1
 8015c88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8015c90:	78fa      	ldrb	r2, [r7, #3]
 8015c92:	6879      	ldr	r1, [r7, #4]
 8015c94:	4613      	mov	r3, r2
 8015c96:	00db      	lsls	r3, r3, #3
 8015c98:	4413      	add	r3, r2
 8015c9a:	009b      	lsls	r3, r3, #2
 8015c9c:	440b      	add	r3, r1
 8015c9e:	3348      	adds	r3, #72	; 0x48
 8015ca0:	681a      	ldr	r2, [r3, #0]
 8015ca2:	78fb      	ldrb	r3, [r7, #3]
 8015ca4:	4619      	mov	r1, r3
 8015ca6:	f7fe fbd6 	bl	8014456 <USBD_LL_DataInStage>
}
 8015caa:	bf00      	nop
 8015cac:	3708      	adds	r7, #8
 8015cae:	46bd      	mov	sp, r7
 8015cb0:	bd80      	pop	{r7, pc}

08015cb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015cb2:	b580      	push	{r7, lr}
 8015cb4:	b082      	sub	sp, #8
 8015cb6:	af00      	add	r7, sp, #0
 8015cb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	f7fe fd10 	bl	80146e6 <USBD_LL_SOF>
}
 8015cc6:	bf00      	nop
 8015cc8:	3708      	adds	r7, #8
 8015cca:	46bd      	mov	sp, r7
 8015ccc:	bd80      	pop	{r7, pc}

08015cce <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015cce:	b580      	push	{r7, lr}
 8015cd0:	b084      	sub	sp, #16
 8015cd2:	af00      	add	r7, sp, #0
 8015cd4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015cd6:	2301      	movs	r3, #1
 8015cd8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	691b      	ldr	r3, [r3, #16]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d102      	bne.n	8015ce8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015ce2:	2300      	movs	r3, #0
 8015ce4:	73fb      	strb	r3, [r7, #15]
 8015ce6:	e008      	b.n	8015cfa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	691b      	ldr	r3, [r3, #16]
 8015cec:	2b02      	cmp	r3, #2
 8015cee:	d102      	bne.n	8015cf6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015cf0:	2301      	movs	r3, #1
 8015cf2:	73fb      	strb	r3, [r7, #15]
 8015cf4:	e001      	b.n	8015cfa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015cf6:	f7ec fd25 	bl	8002744 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015d00:	7bfa      	ldrb	r2, [r7, #15]
 8015d02:	4611      	mov	r1, r2
 8015d04:	4618      	mov	r0, r3
 8015d06:	f7fe fcaa 	bl	801465e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015d10:	4618      	mov	r0, r3
 8015d12:	f7fe fc52 	bl	80145ba <USBD_LL_Reset>
}
 8015d16:	bf00      	nop
 8015d18:	3710      	adds	r7, #16
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	bd80      	pop	{r7, pc}
	...

08015d20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b082      	sub	sp, #8
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015d2e:	4618      	mov	r0, r3
 8015d30:	f7fe fca5 	bl	801467e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	687a      	ldr	r2, [r7, #4]
 8015d40:	6812      	ldr	r2, [r2, #0]
 8015d42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015d46:	f043 0301 	orr.w	r3, r3, #1
 8015d4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	6a1b      	ldr	r3, [r3, #32]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d005      	beq.n	8015d60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015d54:	4b04      	ldr	r3, [pc, #16]	; (8015d68 <HAL_PCD_SuspendCallback+0x48>)
 8015d56:	691b      	ldr	r3, [r3, #16]
 8015d58:	4a03      	ldr	r2, [pc, #12]	; (8015d68 <HAL_PCD_SuspendCallback+0x48>)
 8015d5a:	f043 0306 	orr.w	r3, r3, #6
 8015d5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015d60:	bf00      	nop
 8015d62:	3708      	adds	r7, #8
 8015d64:	46bd      	mov	sp, r7
 8015d66:	bd80      	pop	{r7, pc}
 8015d68:	e000ed00 	.word	0xe000ed00

08015d6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b082      	sub	sp, #8
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	f7fe fc9b 	bl	80146b6 <USBD_LL_Resume>
}
 8015d80:	bf00      	nop
 8015d82:	3708      	adds	r7, #8
 8015d84:	46bd      	mov	sp, r7
 8015d86:	bd80      	pop	{r7, pc}

08015d88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b082      	sub	sp, #8
 8015d8c:	af00      	add	r7, sp, #0
 8015d8e:	6078      	str	r0, [r7, #4]
 8015d90:	460b      	mov	r3, r1
 8015d92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015d94:	687b      	ldr	r3, [r7, #4]
 8015d96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015d9a:	78fa      	ldrb	r2, [r7, #3]
 8015d9c:	4611      	mov	r1, r2
 8015d9e:	4618      	mov	r0, r3
 8015da0:	f7fe fcf3 	bl	801478a <USBD_LL_IsoOUTIncomplete>
}
 8015da4:	bf00      	nop
 8015da6:	3708      	adds	r7, #8
 8015da8:	46bd      	mov	sp, r7
 8015daa:	bd80      	pop	{r7, pc}

08015dac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015dac:	b580      	push	{r7, lr}
 8015dae:	b082      	sub	sp, #8
 8015db0:	af00      	add	r7, sp, #0
 8015db2:	6078      	str	r0, [r7, #4]
 8015db4:	460b      	mov	r3, r1
 8015db6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015dbe:	78fa      	ldrb	r2, [r7, #3]
 8015dc0:	4611      	mov	r1, r2
 8015dc2:	4618      	mov	r0, r3
 8015dc4:	f7fe fcaf 	bl	8014726 <USBD_LL_IsoINIncomplete>
}
 8015dc8:	bf00      	nop
 8015dca:	3708      	adds	r7, #8
 8015dcc:	46bd      	mov	sp, r7
 8015dce:	bd80      	pop	{r7, pc}

08015dd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015dd0:	b580      	push	{r7, lr}
 8015dd2:	b082      	sub	sp, #8
 8015dd4:	af00      	add	r7, sp, #0
 8015dd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015dde:	4618      	mov	r0, r3
 8015de0:	f7fe fd05 	bl	80147ee <USBD_LL_DevConnected>
}
 8015de4:	bf00      	nop
 8015de6:	3708      	adds	r7, #8
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd80      	pop	{r7, pc}

08015dec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015dec:	b580      	push	{r7, lr}
 8015dee:	b082      	sub	sp, #8
 8015df0:	af00      	add	r7, sp, #0
 8015df2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	f7fe fd02 	bl	8014804 <USBD_LL_DevDisconnected>
}
 8015e00:	bf00      	nop
 8015e02:	3708      	adds	r7, #8
 8015e04:	46bd      	mov	sp, r7
 8015e06:	bd80      	pop	{r7, pc}

08015e08 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b082      	sub	sp, #8
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8015e10:	687b      	ldr	r3, [r7, #4]
 8015e12:	781b      	ldrb	r3, [r3, #0]
 8015e14:	2b01      	cmp	r3, #1
 8015e16:	d140      	bne.n	8015e9a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8015e18:	4a22      	ldr	r2, [pc, #136]	; (8015ea4 <USBD_LL_Init+0x9c>)
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	4a20      	ldr	r2, [pc, #128]	; (8015ea4 <USBD_LL_Init+0x9c>)
 8015e24:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8015e28:	4b1e      	ldr	r3, [pc, #120]	; (8015ea4 <USBD_LL_Init+0x9c>)
 8015e2a:	4a1f      	ldr	r2, [pc, #124]	; (8015ea8 <USBD_LL_Init+0xa0>)
 8015e2c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8015e2e:	4b1d      	ldr	r3, [pc, #116]	; (8015ea4 <USBD_LL_Init+0x9c>)
 8015e30:	2209      	movs	r2, #9
 8015e32:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8015e34:	4b1b      	ldr	r3, [pc, #108]	; (8015ea4 <USBD_LL_Init+0x9c>)
 8015e36:	2202      	movs	r2, #2
 8015e38:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8015e3a:	4b1a      	ldr	r3, [pc, #104]	; (8015ea4 <USBD_LL_Init+0x9c>)
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8015e40:	4b18      	ldr	r3, [pc, #96]	; (8015ea4 <USBD_LL_Init+0x9c>)
 8015e42:	2202      	movs	r2, #2
 8015e44:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8015e46:	4b17      	ldr	r3, [pc, #92]	; (8015ea4 <USBD_LL_Init+0x9c>)
 8015e48:	2200      	movs	r2, #0
 8015e4a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8015e4c:	4b15      	ldr	r3, [pc, #84]	; (8015ea4 <USBD_LL_Init+0x9c>)
 8015e4e:	2200      	movs	r2, #0
 8015e50:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8015e52:	4b14      	ldr	r3, [pc, #80]	; (8015ea4 <USBD_LL_Init+0x9c>)
 8015e54:	2200      	movs	r2, #0
 8015e56:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8015e58:	4b12      	ldr	r3, [pc, #72]	; (8015ea4 <USBD_LL_Init+0x9c>)
 8015e5a:	2200      	movs	r2, #0
 8015e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8015e5e:	4b11      	ldr	r3, [pc, #68]	; (8015ea4 <USBD_LL_Init+0x9c>)
 8015e60:	2200      	movs	r2, #0
 8015e62:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8015e64:	4b0f      	ldr	r3, [pc, #60]	; (8015ea4 <USBD_LL_Init+0x9c>)
 8015e66:	2200      	movs	r2, #0
 8015e68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8015e6a:	480e      	ldr	r0, [pc, #56]	; (8015ea4 <USBD_LL_Init+0x9c>)
 8015e6c:	f7f1 fd65 	bl	800793a <HAL_PCD_Init>
 8015e70:	4603      	mov	r3, r0
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d001      	beq.n	8015e7a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8015e76:	f7ec fc65 	bl	8002744 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8015e7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8015e7e:	4809      	ldr	r0, [pc, #36]	; (8015ea4 <USBD_LL_Init+0x9c>)
 8015e80:	f7f2 ffd3 	bl	8008e2a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8015e84:	2280      	movs	r2, #128	; 0x80
 8015e86:	2100      	movs	r1, #0
 8015e88:	4806      	ldr	r0, [pc, #24]	; (8015ea4 <USBD_LL_Init+0x9c>)
 8015e8a:	f7f2 ff87 	bl	8008d9c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8015e8e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8015e92:	2101      	movs	r1, #1
 8015e94:	4803      	ldr	r0, [pc, #12]	; (8015ea4 <USBD_LL_Init+0x9c>)
 8015e96:	f7f2 ff81 	bl	8008d9c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8015e9a:	2300      	movs	r3, #0
}
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	3708      	adds	r7, #8
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	bd80      	pop	{r7, pc}
 8015ea4:	240021ec 	.word	0x240021ec
 8015ea8:	40040000 	.word	0x40040000

08015eac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b084      	sub	sp, #16
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015eb8:	2300      	movs	r3, #0
 8015eba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	f7f1 fe5d 	bl	8007b82 <HAL_PCD_Start>
 8015ec8:	4603      	mov	r3, r0
 8015eca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ecc:	7bfb      	ldrb	r3, [r7, #15]
 8015ece:	4618      	mov	r0, r3
 8015ed0:	f000 f942 	bl	8016158 <USBD_Get_USB_Status>
 8015ed4:	4603      	mov	r3, r0
 8015ed6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015ed8:	7bbb      	ldrb	r3, [r7, #14]
}
 8015eda:	4618      	mov	r0, r3
 8015edc:	3710      	adds	r7, #16
 8015ede:	46bd      	mov	sp, r7
 8015ee0:	bd80      	pop	{r7, pc}

08015ee2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015ee2:	b580      	push	{r7, lr}
 8015ee4:	b084      	sub	sp, #16
 8015ee6:	af00      	add	r7, sp, #0
 8015ee8:	6078      	str	r0, [r7, #4]
 8015eea:	4608      	mov	r0, r1
 8015eec:	4611      	mov	r1, r2
 8015eee:	461a      	mov	r2, r3
 8015ef0:	4603      	mov	r3, r0
 8015ef2:	70fb      	strb	r3, [r7, #3]
 8015ef4:	460b      	mov	r3, r1
 8015ef6:	70bb      	strb	r3, [r7, #2]
 8015ef8:	4613      	mov	r3, r2
 8015efa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015efc:	2300      	movs	r3, #0
 8015efe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f00:	2300      	movs	r3, #0
 8015f02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015f0a:	78bb      	ldrb	r3, [r7, #2]
 8015f0c:	883a      	ldrh	r2, [r7, #0]
 8015f0e:	78f9      	ldrb	r1, [r7, #3]
 8015f10:	f7f2 fb5d 	bl	80085ce <HAL_PCD_EP_Open>
 8015f14:	4603      	mov	r3, r0
 8015f16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f18:	7bfb      	ldrb	r3, [r7, #15]
 8015f1a:	4618      	mov	r0, r3
 8015f1c:	f000 f91c 	bl	8016158 <USBD_Get_USB_Status>
 8015f20:	4603      	mov	r3, r0
 8015f22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f24:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f26:	4618      	mov	r0, r3
 8015f28:	3710      	adds	r7, #16
 8015f2a:	46bd      	mov	sp, r7
 8015f2c:	bd80      	pop	{r7, pc}

08015f2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015f2e:	b580      	push	{r7, lr}
 8015f30:	b084      	sub	sp, #16
 8015f32:	af00      	add	r7, sp, #0
 8015f34:	6078      	str	r0, [r7, #4]
 8015f36:	460b      	mov	r3, r1
 8015f38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f3e:	2300      	movs	r3, #0
 8015f40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015f48:	78fa      	ldrb	r2, [r7, #3]
 8015f4a:	4611      	mov	r1, r2
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	f7f2 fba6 	bl	800869e <HAL_PCD_EP_Close>
 8015f52:	4603      	mov	r3, r0
 8015f54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f56:	7bfb      	ldrb	r3, [r7, #15]
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f000 f8fd 	bl	8016158 <USBD_Get_USB_Status>
 8015f5e:	4603      	mov	r3, r0
 8015f60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015f62:	7bbb      	ldrb	r3, [r7, #14]
}
 8015f64:	4618      	mov	r0, r3
 8015f66:	3710      	adds	r7, #16
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	bd80      	pop	{r7, pc}

08015f6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015f6c:	b580      	push	{r7, lr}
 8015f6e:	b084      	sub	sp, #16
 8015f70:	af00      	add	r7, sp, #0
 8015f72:	6078      	str	r0, [r7, #4]
 8015f74:	460b      	mov	r3, r1
 8015f76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015f78:	2300      	movs	r3, #0
 8015f7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015f7c:	2300      	movs	r3, #0
 8015f7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015f86:	78fa      	ldrb	r2, [r7, #3]
 8015f88:	4611      	mov	r1, r2
 8015f8a:	4618      	mov	r0, r3
 8015f8c:	f7f2 fc60 	bl	8008850 <HAL_PCD_EP_SetStall>
 8015f90:	4603      	mov	r3, r0
 8015f92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015f94:	7bfb      	ldrb	r3, [r7, #15]
 8015f96:	4618      	mov	r0, r3
 8015f98:	f000 f8de 	bl	8016158 <USBD_Get_USB_Status>
 8015f9c:	4603      	mov	r3, r0
 8015f9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015fa0:	7bbb      	ldrb	r3, [r7, #14]
}
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	3710      	adds	r7, #16
 8015fa6:	46bd      	mov	sp, r7
 8015fa8:	bd80      	pop	{r7, pc}

08015faa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015faa:	b580      	push	{r7, lr}
 8015fac:	b084      	sub	sp, #16
 8015fae:	af00      	add	r7, sp, #0
 8015fb0:	6078      	str	r0, [r7, #4]
 8015fb2:	460b      	mov	r3, r1
 8015fb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015fba:	2300      	movs	r3, #0
 8015fbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015fc4:	78fa      	ldrb	r2, [r7, #3]
 8015fc6:	4611      	mov	r1, r2
 8015fc8:	4618      	mov	r0, r3
 8015fca:	f7f2 fca5 	bl	8008918 <HAL_PCD_EP_ClrStall>
 8015fce:	4603      	mov	r3, r0
 8015fd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015fd2:	7bfb      	ldrb	r3, [r7, #15]
 8015fd4:	4618      	mov	r0, r3
 8015fd6:	f000 f8bf 	bl	8016158 <USBD_Get_USB_Status>
 8015fda:	4603      	mov	r3, r0
 8015fdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015fde:	7bbb      	ldrb	r3, [r7, #14]
}
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	3710      	adds	r7, #16
 8015fe4:	46bd      	mov	sp, r7
 8015fe6:	bd80      	pop	{r7, pc}

08015fe8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015fe8:	b480      	push	{r7}
 8015fea:	b085      	sub	sp, #20
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
 8015ff0:	460b      	mov	r3, r1
 8015ff2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015ffa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015ffc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016000:	2b00      	cmp	r3, #0
 8016002:	da0b      	bge.n	801601c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016004:	78fb      	ldrb	r3, [r7, #3]
 8016006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801600a:	68f9      	ldr	r1, [r7, #12]
 801600c:	4613      	mov	r3, r2
 801600e:	00db      	lsls	r3, r3, #3
 8016010:	4413      	add	r3, r2
 8016012:	009b      	lsls	r3, r3, #2
 8016014:	440b      	add	r3, r1
 8016016:	333e      	adds	r3, #62	; 0x3e
 8016018:	781b      	ldrb	r3, [r3, #0]
 801601a:	e00b      	b.n	8016034 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801601c:	78fb      	ldrb	r3, [r7, #3]
 801601e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016022:	68f9      	ldr	r1, [r7, #12]
 8016024:	4613      	mov	r3, r2
 8016026:	00db      	lsls	r3, r3, #3
 8016028:	4413      	add	r3, r2
 801602a:	009b      	lsls	r3, r3, #2
 801602c:	440b      	add	r3, r1
 801602e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016032:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016034:	4618      	mov	r0, r3
 8016036:	3714      	adds	r7, #20
 8016038:	46bd      	mov	sp, r7
 801603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603e:	4770      	bx	lr

08016040 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016040:	b580      	push	{r7, lr}
 8016042:	b084      	sub	sp, #16
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
 8016048:	460b      	mov	r3, r1
 801604a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801604c:	2300      	movs	r3, #0
 801604e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016050:	2300      	movs	r3, #0
 8016052:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016054:	687b      	ldr	r3, [r7, #4]
 8016056:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801605a:	78fa      	ldrb	r2, [r7, #3]
 801605c:	4611      	mov	r1, r2
 801605e:	4618      	mov	r0, r3
 8016060:	f7f2 fa90 	bl	8008584 <HAL_PCD_SetAddress>
 8016064:	4603      	mov	r3, r0
 8016066:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016068:	7bfb      	ldrb	r3, [r7, #15]
 801606a:	4618      	mov	r0, r3
 801606c:	f000 f874 	bl	8016158 <USBD_Get_USB_Status>
 8016070:	4603      	mov	r3, r0
 8016072:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016074:	7bbb      	ldrb	r3, [r7, #14]
}
 8016076:	4618      	mov	r0, r3
 8016078:	3710      	adds	r7, #16
 801607a:	46bd      	mov	sp, r7
 801607c:	bd80      	pop	{r7, pc}

0801607e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801607e:	b580      	push	{r7, lr}
 8016080:	b086      	sub	sp, #24
 8016082:	af00      	add	r7, sp, #0
 8016084:	60f8      	str	r0, [r7, #12]
 8016086:	607a      	str	r2, [r7, #4]
 8016088:	603b      	str	r3, [r7, #0]
 801608a:	460b      	mov	r3, r1
 801608c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801608e:	2300      	movs	r3, #0
 8016090:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016092:	2300      	movs	r3, #0
 8016094:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801609c:	7af9      	ldrb	r1, [r7, #11]
 801609e:	683b      	ldr	r3, [r7, #0]
 80160a0:	687a      	ldr	r2, [r7, #4]
 80160a2:	f7f2 fb9a 	bl	80087da <HAL_PCD_EP_Transmit>
 80160a6:	4603      	mov	r3, r0
 80160a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80160aa:	7dfb      	ldrb	r3, [r7, #23]
 80160ac:	4618      	mov	r0, r3
 80160ae:	f000 f853 	bl	8016158 <USBD_Get_USB_Status>
 80160b2:	4603      	mov	r3, r0
 80160b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80160b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80160b8:	4618      	mov	r0, r3
 80160ba:	3718      	adds	r7, #24
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd80      	pop	{r7, pc}

080160c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80160c0:	b580      	push	{r7, lr}
 80160c2:	b086      	sub	sp, #24
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	60f8      	str	r0, [r7, #12]
 80160c8:	607a      	str	r2, [r7, #4]
 80160ca:	603b      	str	r3, [r7, #0]
 80160cc:	460b      	mov	r3, r1
 80160ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80160d0:	2300      	movs	r3, #0
 80160d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80160d4:	2300      	movs	r3, #0
 80160d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80160de:	7af9      	ldrb	r1, [r7, #11]
 80160e0:	683b      	ldr	r3, [r7, #0]
 80160e2:	687a      	ldr	r2, [r7, #4]
 80160e4:	f7f2 fb25 	bl	8008732 <HAL_PCD_EP_Receive>
 80160e8:	4603      	mov	r3, r0
 80160ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80160ec:	7dfb      	ldrb	r3, [r7, #23]
 80160ee:	4618      	mov	r0, r3
 80160f0:	f000 f832 	bl	8016158 <USBD_Get_USB_Status>
 80160f4:	4603      	mov	r3, r0
 80160f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80160f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80160fa:	4618      	mov	r0, r3
 80160fc:	3718      	adds	r7, #24
 80160fe:	46bd      	mov	sp, r7
 8016100:	bd80      	pop	{r7, pc}

08016102 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016102:	b580      	push	{r7, lr}
 8016104:	b082      	sub	sp, #8
 8016106:	af00      	add	r7, sp, #0
 8016108:	6078      	str	r0, [r7, #4]
 801610a:	460b      	mov	r3, r1
 801610c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016114:	78fa      	ldrb	r2, [r7, #3]
 8016116:	4611      	mov	r1, r2
 8016118:	4618      	mov	r0, r3
 801611a:	f7f2 fb46 	bl	80087aa <HAL_PCD_EP_GetRxCount>
 801611e:	4603      	mov	r3, r0
}
 8016120:	4618      	mov	r0, r3
 8016122:	3708      	adds	r7, #8
 8016124:	46bd      	mov	sp, r7
 8016126:	bd80      	pop	{r7, pc}

08016128 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016128:	b480      	push	{r7}
 801612a:	b083      	sub	sp, #12
 801612c:	af00      	add	r7, sp, #0
 801612e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016130:	4b03      	ldr	r3, [pc, #12]	; (8016140 <USBD_static_malloc+0x18>)
}
 8016132:	4618      	mov	r0, r3
 8016134:	370c      	adds	r7, #12
 8016136:	46bd      	mov	sp, r7
 8016138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801613c:	4770      	bx	lr
 801613e:	bf00      	nop
 8016140:	240026f8 	.word	0x240026f8

08016144 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016144:	b480      	push	{r7}
 8016146:	b083      	sub	sp, #12
 8016148:	af00      	add	r7, sp, #0
 801614a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 801614c:	bf00      	nop
 801614e:	370c      	adds	r7, #12
 8016150:	46bd      	mov	sp, r7
 8016152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016156:	4770      	bx	lr

08016158 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016158:	b480      	push	{r7}
 801615a:	b085      	sub	sp, #20
 801615c:	af00      	add	r7, sp, #0
 801615e:	4603      	mov	r3, r0
 8016160:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016162:	2300      	movs	r3, #0
 8016164:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016166:	79fb      	ldrb	r3, [r7, #7]
 8016168:	2b03      	cmp	r3, #3
 801616a:	d817      	bhi.n	801619c <USBD_Get_USB_Status+0x44>
 801616c:	a201      	add	r2, pc, #4	; (adr r2, 8016174 <USBD_Get_USB_Status+0x1c>)
 801616e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016172:	bf00      	nop
 8016174:	08016185 	.word	0x08016185
 8016178:	0801618b 	.word	0x0801618b
 801617c:	08016191 	.word	0x08016191
 8016180:	08016197 	.word	0x08016197
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016184:	2300      	movs	r3, #0
 8016186:	73fb      	strb	r3, [r7, #15]
    break;
 8016188:	e00b      	b.n	80161a2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801618a:	2303      	movs	r3, #3
 801618c:	73fb      	strb	r3, [r7, #15]
    break;
 801618e:	e008      	b.n	80161a2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016190:	2301      	movs	r3, #1
 8016192:	73fb      	strb	r3, [r7, #15]
    break;
 8016194:	e005      	b.n	80161a2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016196:	2303      	movs	r3, #3
 8016198:	73fb      	strb	r3, [r7, #15]
    break;
 801619a:	e002      	b.n	80161a2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801619c:	2303      	movs	r3, #3
 801619e:	73fb      	strb	r3, [r7, #15]
    break;
 80161a0:	bf00      	nop
  }
  return usb_status;
 80161a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80161a4:	4618      	mov	r0, r3
 80161a6:	3714      	adds	r7, #20
 80161a8:	46bd      	mov	sp, r7
 80161aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ae:	4770      	bx	lr

080161b0 <__errno>:
 80161b0:	4b01      	ldr	r3, [pc, #4]	; (80161b8 <__errno+0x8>)
 80161b2:	6818      	ldr	r0, [r3, #0]
 80161b4:	4770      	bx	lr
 80161b6:	bf00      	nop
 80161b8:	24000100 	.word	0x24000100

080161bc <__libc_init_array>:
 80161bc:	b570      	push	{r4, r5, r6, lr}
 80161be:	4d0d      	ldr	r5, [pc, #52]	; (80161f4 <__libc_init_array+0x38>)
 80161c0:	4c0d      	ldr	r4, [pc, #52]	; (80161f8 <__libc_init_array+0x3c>)
 80161c2:	1b64      	subs	r4, r4, r5
 80161c4:	10a4      	asrs	r4, r4, #2
 80161c6:	2600      	movs	r6, #0
 80161c8:	42a6      	cmp	r6, r4
 80161ca:	d109      	bne.n	80161e0 <__libc_init_array+0x24>
 80161cc:	4d0b      	ldr	r5, [pc, #44]	; (80161fc <__libc_init_array+0x40>)
 80161ce:	4c0c      	ldr	r4, [pc, #48]	; (8016200 <__libc_init_array+0x44>)
 80161d0:	f004 fcec 	bl	801abac <_init>
 80161d4:	1b64      	subs	r4, r4, r5
 80161d6:	10a4      	asrs	r4, r4, #2
 80161d8:	2600      	movs	r6, #0
 80161da:	42a6      	cmp	r6, r4
 80161dc:	d105      	bne.n	80161ea <__libc_init_array+0x2e>
 80161de:	bd70      	pop	{r4, r5, r6, pc}
 80161e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80161e4:	4798      	blx	r3
 80161e6:	3601      	adds	r6, #1
 80161e8:	e7ee      	b.n	80161c8 <__libc_init_array+0xc>
 80161ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80161ee:	4798      	blx	r3
 80161f0:	3601      	adds	r6, #1
 80161f2:	e7f2      	b.n	80161da <__libc_init_array+0x1e>
 80161f4:	0801b204 	.word	0x0801b204
 80161f8:	0801b204 	.word	0x0801b204
 80161fc:	0801b204 	.word	0x0801b204
 8016200:	0801b208 	.word	0x0801b208

08016204 <memcpy>:
 8016204:	440a      	add	r2, r1
 8016206:	4291      	cmp	r1, r2
 8016208:	f100 33ff 	add.w	r3, r0, #4294967295
 801620c:	d100      	bne.n	8016210 <memcpy+0xc>
 801620e:	4770      	bx	lr
 8016210:	b510      	push	{r4, lr}
 8016212:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016216:	f803 4f01 	strb.w	r4, [r3, #1]!
 801621a:	4291      	cmp	r1, r2
 801621c:	d1f9      	bne.n	8016212 <memcpy+0xe>
 801621e:	bd10      	pop	{r4, pc}

08016220 <memset>:
 8016220:	4402      	add	r2, r0
 8016222:	4603      	mov	r3, r0
 8016224:	4293      	cmp	r3, r2
 8016226:	d100      	bne.n	801622a <memset+0xa>
 8016228:	4770      	bx	lr
 801622a:	f803 1b01 	strb.w	r1, [r3], #1
 801622e:	e7f9      	b.n	8016224 <memset+0x4>

08016230 <__cvt>:
 8016230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016232:	ed2d 8b02 	vpush	{d8}
 8016236:	eeb0 8b40 	vmov.f64	d8, d0
 801623a:	b085      	sub	sp, #20
 801623c:	4617      	mov	r7, r2
 801623e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8016240:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8016242:	ee18 2a90 	vmov	r2, s17
 8016246:	f025 0520 	bic.w	r5, r5, #32
 801624a:	2a00      	cmp	r2, #0
 801624c:	bfb6      	itet	lt
 801624e:	222d      	movlt	r2, #45	; 0x2d
 8016250:	2200      	movge	r2, #0
 8016252:	eeb1 8b40 	vneglt.f64	d8, d0
 8016256:	2d46      	cmp	r5, #70	; 0x46
 8016258:	460c      	mov	r4, r1
 801625a:	701a      	strb	r2, [r3, #0]
 801625c:	d004      	beq.n	8016268 <__cvt+0x38>
 801625e:	2d45      	cmp	r5, #69	; 0x45
 8016260:	d100      	bne.n	8016264 <__cvt+0x34>
 8016262:	3401      	adds	r4, #1
 8016264:	2102      	movs	r1, #2
 8016266:	e000      	b.n	801626a <__cvt+0x3a>
 8016268:	2103      	movs	r1, #3
 801626a:	ab03      	add	r3, sp, #12
 801626c:	9301      	str	r3, [sp, #4]
 801626e:	ab02      	add	r3, sp, #8
 8016270:	9300      	str	r3, [sp, #0]
 8016272:	4622      	mov	r2, r4
 8016274:	4633      	mov	r3, r6
 8016276:	eeb0 0b48 	vmov.f64	d0, d8
 801627a:	f001 fd2d 	bl	8017cd8 <_dtoa_r>
 801627e:	2d47      	cmp	r5, #71	; 0x47
 8016280:	d101      	bne.n	8016286 <__cvt+0x56>
 8016282:	07fb      	lsls	r3, r7, #31
 8016284:	d51a      	bpl.n	80162bc <__cvt+0x8c>
 8016286:	2d46      	cmp	r5, #70	; 0x46
 8016288:	eb00 0204 	add.w	r2, r0, r4
 801628c:	d10c      	bne.n	80162a8 <__cvt+0x78>
 801628e:	7803      	ldrb	r3, [r0, #0]
 8016290:	2b30      	cmp	r3, #48	; 0x30
 8016292:	d107      	bne.n	80162a4 <__cvt+0x74>
 8016294:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8016298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801629c:	bf1c      	itt	ne
 801629e:	f1c4 0401 	rsbne	r4, r4, #1
 80162a2:	6034      	strne	r4, [r6, #0]
 80162a4:	6833      	ldr	r3, [r6, #0]
 80162a6:	441a      	add	r2, r3
 80162a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80162ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80162b0:	bf08      	it	eq
 80162b2:	9203      	streq	r2, [sp, #12]
 80162b4:	2130      	movs	r1, #48	; 0x30
 80162b6:	9b03      	ldr	r3, [sp, #12]
 80162b8:	4293      	cmp	r3, r2
 80162ba:	d307      	bcc.n	80162cc <__cvt+0x9c>
 80162bc:	9b03      	ldr	r3, [sp, #12]
 80162be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80162c0:	1a1b      	subs	r3, r3, r0
 80162c2:	6013      	str	r3, [r2, #0]
 80162c4:	b005      	add	sp, #20
 80162c6:	ecbd 8b02 	vpop	{d8}
 80162ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162cc:	1c5c      	adds	r4, r3, #1
 80162ce:	9403      	str	r4, [sp, #12]
 80162d0:	7019      	strb	r1, [r3, #0]
 80162d2:	e7f0      	b.n	80162b6 <__cvt+0x86>

080162d4 <__exponent>:
 80162d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80162d6:	4603      	mov	r3, r0
 80162d8:	2900      	cmp	r1, #0
 80162da:	bfb8      	it	lt
 80162dc:	4249      	neglt	r1, r1
 80162de:	f803 2b02 	strb.w	r2, [r3], #2
 80162e2:	bfb4      	ite	lt
 80162e4:	222d      	movlt	r2, #45	; 0x2d
 80162e6:	222b      	movge	r2, #43	; 0x2b
 80162e8:	2909      	cmp	r1, #9
 80162ea:	7042      	strb	r2, [r0, #1]
 80162ec:	dd2a      	ble.n	8016344 <__exponent+0x70>
 80162ee:	f10d 0407 	add.w	r4, sp, #7
 80162f2:	46a4      	mov	ip, r4
 80162f4:	270a      	movs	r7, #10
 80162f6:	46a6      	mov	lr, r4
 80162f8:	460a      	mov	r2, r1
 80162fa:	fb91 f6f7 	sdiv	r6, r1, r7
 80162fe:	fb07 1516 	mls	r5, r7, r6, r1
 8016302:	3530      	adds	r5, #48	; 0x30
 8016304:	2a63      	cmp	r2, #99	; 0x63
 8016306:	f104 34ff 	add.w	r4, r4, #4294967295
 801630a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801630e:	4631      	mov	r1, r6
 8016310:	dcf1      	bgt.n	80162f6 <__exponent+0x22>
 8016312:	3130      	adds	r1, #48	; 0x30
 8016314:	f1ae 0502 	sub.w	r5, lr, #2
 8016318:	f804 1c01 	strb.w	r1, [r4, #-1]
 801631c:	1c44      	adds	r4, r0, #1
 801631e:	4629      	mov	r1, r5
 8016320:	4561      	cmp	r1, ip
 8016322:	d30a      	bcc.n	801633a <__exponent+0x66>
 8016324:	f10d 0209 	add.w	r2, sp, #9
 8016328:	eba2 020e 	sub.w	r2, r2, lr
 801632c:	4565      	cmp	r5, ip
 801632e:	bf88      	it	hi
 8016330:	2200      	movhi	r2, #0
 8016332:	4413      	add	r3, r2
 8016334:	1a18      	subs	r0, r3, r0
 8016336:	b003      	add	sp, #12
 8016338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801633a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801633e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016342:	e7ed      	b.n	8016320 <__exponent+0x4c>
 8016344:	2330      	movs	r3, #48	; 0x30
 8016346:	3130      	adds	r1, #48	; 0x30
 8016348:	7083      	strb	r3, [r0, #2]
 801634a:	70c1      	strb	r1, [r0, #3]
 801634c:	1d03      	adds	r3, r0, #4
 801634e:	e7f1      	b.n	8016334 <__exponent+0x60>

08016350 <_printf_float>:
 8016350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016354:	b08b      	sub	sp, #44	; 0x2c
 8016356:	460c      	mov	r4, r1
 8016358:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801635c:	4616      	mov	r6, r2
 801635e:	461f      	mov	r7, r3
 8016360:	4605      	mov	r5, r0
 8016362:	f002 fd97 	bl	8018e94 <_localeconv_r>
 8016366:	f8d0 b000 	ldr.w	fp, [r0]
 801636a:	4658      	mov	r0, fp
 801636c:	f7e9 ffd0 	bl	8000310 <strlen>
 8016370:	2300      	movs	r3, #0
 8016372:	9308      	str	r3, [sp, #32]
 8016374:	f8d8 3000 	ldr.w	r3, [r8]
 8016378:	f894 9018 	ldrb.w	r9, [r4, #24]
 801637c:	6822      	ldr	r2, [r4, #0]
 801637e:	3307      	adds	r3, #7
 8016380:	f023 0307 	bic.w	r3, r3, #7
 8016384:	f103 0108 	add.w	r1, r3, #8
 8016388:	f8c8 1000 	str.w	r1, [r8]
 801638c:	4682      	mov	sl, r0
 801638e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8016392:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8016396:	ed9f 7b98 	vldr	d7, [pc, #608]	; 80165f8 <_printf_float+0x2a8>
 801639a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 801639e:	eeb0 6bc0 	vabs.f64	d6, d0
 80163a2:	eeb4 6b47 	vcmp.f64	d6, d7
 80163a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163aa:	dd24      	ble.n	80163f6 <_printf_float+0xa6>
 80163ac:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80163b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163b4:	d502      	bpl.n	80163bc <_printf_float+0x6c>
 80163b6:	232d      	movs	r3, #45	; 0x2d
 80163b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80163bc:	4b90      	ldr	r3, [pc, #576]	; (8016600 <_printf_float+0x2b0>)
 80163be:	4891      	ldr	r0, [pc, #580]	; (8016604 <_printf_float+0x2b4>)
 80163c0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80163c4:	bf94      	ite	ls
 80163c6:	4698      	movls	r8, r3
 80163c8:	4680      	movhi	r8, r0
 80163ca:	2303      	movs	r3, #3
 80163cc:	6123      	str	r3, [r4, #16]
 80163ce:	f022 0204 	bic.w	r2, r2, #4
 80163d2:	2300      	movs	r3, #0
 80163d4:	6022      	str	r2, [r4, #0]
 80163d6:	9304      	str	r3, [sp, #16]
 80163d8:	9700      	str	r7, [sp, #0]
 80163da:	4633      	mov	r3, r6
 80163dc:	aa09      	add	r2, sp, #36	; 0x24
 80163de:	4621      	mov	r1, r4
 80163e0:	4628      	mov	r0, r5
 80163e2:	f000 f9d3 	bl	801678c <_printf_common>
 80163e6:	3001      	adds	r0, #1
 80163e8:	f040 808a 	bne.w	8016500 <_printf_float+0x1b0>
 80163ec:	f04f 30ff 	mov.w	r0, #4294967295
 80163f0:	b00b      	add	sp, #44	; 0x2c
 80163f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163f6:	eeb4 0b40 	vcmp.f64	d0, d0
 80163fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80163fe:	d709      	bvc.n	8016414 <_printf_float+0xc4>
 8016400:	ee10 3a90 	vmov	r3, s1
 8016404:	2b00      	cmp	r3, #0
 8016406:	bfbc      	itt	lt
 8016408:	232d      	movlt	r3, #45	; 0x2d
 801640a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801640e:	487e      	ldr	r0, [pc, #504]	; (8016608 <_printf_float+0x2b8>)
 8016410:	4b7e      	ldr	r3, [pc, #504]	; (801660c <_printf_float+0x2bc>)
 8016412:	e7d5      	b.n	80163c0 <_printf_float+0x70>
 8016414:	6863      	ldr	r3, [r4, #4]
 8016416:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801641a:	9104      	str	r1, [sp, #16]
 801641c:	1c59      	adds	r1, r3, #1
 801641e:	d13c      	bne.n	801649a <_printf_float+0x14a>
 8016420:	2306      	movs	r3, #6
 8016422:	6063      	str	r3, [r4, #4]
 8016424:	2300      	movs	r3, #0
 8016426:	9303      	str	r3, [sp, #12]
 8016428:	ab08      	add	r3, sp, #32
 801642a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801642e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8016432:	ab07      	add	r3, sp, #28
 8016434:	6861      	ldr	r1, [r4, #4]
 8016436:	9300      	str	r3, [sp, #0]
 8016438:	6022      	str	r2, [r4, #0]
 801643a:	f10d 031b 	add.w	r3, sp, #27
 801643e:	4628      	mov	r0, r5
 8016440:	f7ff fef6 	bl	8016230 <__cvt>
 8016444:	9b04      	ldr	r3, [sp, #16]
 8016446:	9907      	ldr	r1, [sp, #28]
 8016448:	2b47      	cmp	r3, #71	; 0x47
 801644a:	4680      	mov	r8, r0
 801644c:	d108      	bne.n	8016460 <_printf_float+0x110>
 801644e:	1cc8      	adds	r0, r1, #3
 8016450:	db02      	blt.n	8016458 <_printf_float+0x108>
 8016452:	6863      	ldr	r3, [r4, #4]
 8016454:	4299      	cmp	r1, r3
 8016456:	dd41      	ble.n	80164dc <_printf_float+0x18c>
 8016458:	f1a9 0902 	sub.w	r9, r9, #2
 801645c:	fa5f f989 	uxtb.w	r9, r9
 8016460:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8016464:	d820      	bhi.n	80164a8 <_printf_float+0x158>
 8016466:	3901      	subs	r1, #1
 8016468:	464a      	mov	r2, r9
 801646a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801646e:	9107      	str	r1, [sp, #28]
 8016470:	f7ff ff30 	bl	80162d4 <__exponent>
 8016474:	9a08      	ldr	r2, [sp, #32]
 8016476:	9004      	str	r0, [sp, #16]
 8016478:	1813      	adds	r3, r2, r0
 801647a:	2a01      	cmp	r2, #1
 801647c:	6123      	str	r3, [r4, #16]
 801647e:	dc02      	bgt.n	8016486 <_printf_float+0x136>
 8016480:	6822      	ldr	r2, [r4, #0]
 8016482:	07d2      	lsls	r2, r2, #31
 8016484:	d501      	bpl.n	801648a <_printf_float+0x13a>
 8016486:	3301      	adds	r3, #1
 8016488:	6123      	str	r3, [r4, #16]
 801648a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801648e:	2b00      	cmp	r3, #0
 8016490:	d0a2      	beq.n	80163d8 <_printf_float+0x88>
 8016492:	232d      	movs	r3, #45	; 0x2d
 8016494:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016498:	e79e      	b.n	80163d8 <_printf_float+0x88>
 801649a:	9904      	ldr	r1, [sp, #16]
 801649c:	2947      	cmp	r1, #71	; 0x47
 801649e:	d1c1      	bne.n	8016424 <_printf_float+0xd4>
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d1bf      	bne.n	8016424 <_printf_float+0xd4>
 80164a4:	2301      	movs	r3, #1
 80164a6:	e7bc      	b.n	8016422 <_printf_float+0xd2>
 80164a8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80164ac:	d118      	bne.n	80164e0 <_printf_float+0x190>
 80164ae:	2900      	cmp	r1, #0
 80164b0:	6863      	ldr	r3, [r4, #4]
 80164b2:	dd0b      	ble.n	80164cc <_printf_float+0x17c>
 80164b4:	6121      	str	r1, [r4, #16]
 80164b6:	b913      	cbnz	r3, 80164be <_printf_float+0x16e>
 80164b8:	6822      	ldr	r2, [r4, #0]
 80164ba:	07d0      	lsls	r0, r2, #31
 80164bc:	d502      	bpl.n	80164c4 <_printf_float+0x174>
 80164be:	3301      	adds	r3, #1
 80164c0:	440b      	add	r3, r1
 80164c2:	6123      	str	r3, [r4, #16]
 80164c4:	2300      	movs	r3, #0
 80164c6:	65a1      	str	r1, [r4, #88]	; 0x58
 80164c8:	9304      	str	r3, [sp, #16]
 80164ca:	e7de      	b.n	801648a <_printf_float+0x13a>
 80164cc:	b913      	cbnz	r3, 80164d4 <_printf_float+0x184>
 80164ce:	6822      	ldr	r2, [r4, #0]
 80164d0:	07d2      	lsls	r2, r2, #31
 80164d2:	d501      	bpl.n	80164d8 <_printf_float+0x188>
 80164d4:	3302      	adds	r3, #2
 80164d6:	e7f4      	b.n	80164c2 <_printf_float+0x172>
 80164d8:	2301      	movs	r3, #1
 80164da:	e7f2      	b.n	80164c2 <_printf_float+0x172>
 80164dc:	f04f 0967 	mov.w	r9, #103	; 0x67
 80164e0:	9b08      	ldr	r3, [sp, #32]
 80164e2:	4299      	cmp	r1, r3
 80164e4:	db05      	blt.n	80164f2 <_printf_float+0x1a2>
 80164e6:	6823      	ldr	r3, [r4, #0]
 80164e8:	6121      	str	r1, [r4, #16]
 80164ea:	07d8      	lsls	r0, r3, #31
 80164ec:	d5ea      	bpl.n	80164c4 <_printf_float+0x174>
 80164ee:	1c4b      	adds	r3, r1, #1
 80164f0:	e7e7      	b.n	80164c2 <_printf_float+0x172>
 80164f2:	2900      	cmp	r1, #0
 80164f4:	bfd4      	ite	le
 80164f6:	f1c1 0202 	rsble	r2, r1, #2
 80164fa:	2201      	movgt	r2, #1
 80164fc:	4413      	add	r3, r2
 80164fe:	e7e0      	b.n	80164c2 <_printf_float+0x172>
 8016500:	6823      	ldr	r3, [r4, #0]
 8016502:	055a      	lsls	r2, r3, #21
 8016504:	d407      	bmi.n	8016516 <_printf_float+0x1c6>
 8016506:	6923      	ldr	r3, [r4, #16]
 8016508:	4642      	mov	r2, r8
 801650a:	4631      	mov	r1, r6
 801650c:	4628      	mov	r0, r5
 801650e:	47b8      	blx	r7
 8016510:	3001      	adds	r0, #1
 8016512:	d12a      	bne.n	801656a <_printf_float+0x21a>
 8016514:	e76a      	b.n	80163ec <_printf_float+0x9c>
 8016516:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801651a:	f240 80e2 	bls.w	80166e2 <_printf_float+0x392>
 801651e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8016522:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801652a:	d133      	bne.n	8016594 <_printf_float+0x244>
 801652c:	4a38      	ldr	r2, [pc, #224]	; (8016610 <_printf_float+0x2c0>)
 801652e:	2301      	movs	r3, #1
 8016530:	4631      	mov	r1, r6
 8016532:	4628      	mov	r0, r5
 8016534:	47b8      	blx	r7
 8016536:	3001      	adds	r0, #1
 8016538:	f43f af58 	beq.w	80163ec <_printf_float+0x9c>
 801653c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016540:	429a      	cmp	r2, r3
 8016542:	db02      	blt.n	801654a <_printf_float+0x1fa>
 8016544:	6823      	ldr	r3, [r4, #0]
 8016546:	07d8      	lsls	r0, r3, #31
 8016548:	d50f      	bpl.n	801656a <_printf_float+0x21a>
 801654a:	4653      	mov	r3, sl
 801654c:	465a      	mov	r2, fp
 801654e:	4631      	mov	r1, r6
 8016550:	4628      	mov	r0, r5
 8016552:	47b8      	blx	r7
 8016554:	3001      	adds	r0, #1
 8016556:	f43f af49 	beq.w	80163ec <_printf_float+0x9c>
 801655a:	f04f 0800 	mov.w	r8, #0
 801655e:	f104 091a 	add.w	r9, r4, #26
 8016562:	9b08      	ldr	r3, [sp, #32]
 8016564:	3b01      	subs	r3, #1
 8016566:	4543      	cmp	r3, r8
 8016568:	dc09      	bgt.n	801657e <_printf_float+0x22e>
 801656a:	6823      	ldr	r3, [r4, #0]
 801656c:	079b      	lsls	r3, r3, #30
 801656e:	f100 8108 	bmi.w	8016782 <_printf_float+0x432>
 8016572:	68e0      	ldr	r0, [r4, #12]
 8016574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016576:	4298      	cmp	r0, r3
 8016578:	bfb8      	it	lt
 801657a:	4618      	movlt	r0, r3
 801657c:	e738      	b.n	80163f0 <_printf_float+0xa0>
 801657e:	2301      	movs	r3, #1
 8016580:	464a      	mov	r2, r9
 8016582:	4631      	mov	r1, r6
 8016584:	4628      	mov	r0, r5
 8016586:	47b8      	blx	r7
 8016588:	3001      	adds	r0, #1
 801658a:	f43f af2f 	beq.w	80163ec <_printf_float+0x9c>
 801658e:	f108 0801 	add.w	r8, r8, #1
 8016592:	e7e6      	b.n	8016562 <_printf_float+0x212>
 8016594:	9b07      	ldr	r3, [sp, #28]
 8016596:	2b00      	cmp	r3, #0
 8016598:	dc3c      	bgt.n	8016614 <_printf_float+0x2c4>
 801659a:	4a1d      	ldr	r2, [pc, #116]	; (8016610 <_printf_float+0x2c0>)
 801659c:	2301      	movs	r3, #1
 801659e:	4631      	mov	r1, r6
 80165a0:	4628      	mov	r0, r5
 80165a2:	47b8      	blx	r7
 80165a4:	3001      	adds	r0, #1
 80165a6:	f43f af21 	beq.w	80163ec <_printf_float+0x9c>
 80165aa:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80165ae:	4313      	orrs	r3, r2
 80165b0:	d102      	bne.n	80165b8 <_printf_float+0x268>
 80165b2:	6823      	ldr	r3, [r4, #0]
 80165b4:	07d9      	lsls	r1, r3, #31
 80165b6:	d5d8      	bpl.n	801656a <_printf_float+0x21a>
 80165b8:	4653      	mov	r3, sl
 80165ba:	465a      	mov	r2, fp
 80165bc:	4631      	mov	r1, r6
 80165be:	4628      	mov	r0, r5
 80165c0:	47b8      	blx	r7
 80165c2:	3001      	adds	r0, #1
 80165c4:	f43f af12 	beq.w	80163ec <_printf_float+0x9c>
 80165c8:	f04f 0900 	mov.w	r9, #0
 80165cc:	f104 0a1a 	add.w	sl, r4, #26
 80165d0:	9b07      	ldr	r3, [sp, #28]
 80165d2:	425b      	negs	r3, r3
 80165d4:	454b      	cmp	r3, r9
 80165d6:	dc01      	bgt.n	80165dc <_printf_float+0x28c>
 80165d8:	9b08      	ldr	r3, [sp, #32]
 80165da:	e795      	b.n	8016508 <_printf_float+0x1b8>
 80165dc:	2301      	movs	r3, #1
 80165de:	4652      	mov	r2, sl
 80165e0:	4631      	mov	r1, r6
 80165e2:	4628      	mov	r0, r5
 80165e4:	47b8      	blx	r7
 80165e6:	3001      	adds	r0, #1
 80165e8:	f43f af00 	beq.w	80163ec <_printf_float+0x9c>
 80165ec:	f109 0901 	add.w	r9, r9, #1
 80165f0:	e7ee      	b.n	80165d0 <_printf_float+0x280>
 80165f2:	bf00      	nop
 80165f4:	f3af 8000 	nop.w
 80165f8:	ffffffff 	.word	0xffffffff
 80165fc:	7fefffff 	.word	0x7fefffff
 8016600:	0801ad58 	.word	0x0801ad58
 8016604:	0801ad5c 	.word	0x0801ad5c
 8016608:	0801ad64 	.word	0x0801ad64
 801660c:	0801ad60 	.word	0x0801ad60
 8016610:	0801ad68 	.word	0x0801ad68
 8016614:	9a08      	ldr	r2, [sp, #32]
 8016616:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016618:	429a      	cmp	r2, r3
 801661a:	bfa8      	it	ge
 801661c:	461a      	movge	r2, r3
 801661e:	2a00      	cmp	r2, #0
 8016620:	4691      	mov	r9, r2
 8016622:	dc38      	bgt.n	8016696 <_printf_float+0x346>
 8016624:	2300      	movs	r3, #0
 8016626:	9305      	str	r3, [sp, #20]
 8016628:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801662c:	f104 021a 	add.w	r2, r4, #26
 8016630:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016632:	9905      	ldr	r1, [sp, #20]
 8016634:	9304      	str	r3, [sp, #16]
 8016636:	eba3 0309 	sub.w	r3, r3, r9
 801663a:	428b      	cmp	r3, r1
 801663c:	dc33      	bgt.n	80166a6 <_printf_float+0x356>
 801663e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016642:	429a      	cmp	r2, r3
 8016644:	db3c      	blt.n	80166c0 <_printf_float+0x370>
 8016646:	6823      	ldr	r3, [r4, #0]
 8016648:	07da      	lsls	r2, r3, #31
 801664a:	d439      	bmi.n	80166c0 <_printf_float+0x370>
 801664c:	9b08      	ldr	r3, [sp, #32]
 801664e:	9a04      	ldr	r2, [sp, #16]
 8016650:	9907      	ldr	r1, [sp, #28]
 8016652:	1a9a      	subs	r2, r3, r2
 8016654:	eba3 0901 	sub.w	r9, r3, r1
 8016658:	4591      	cmp	r9, r2
 801665a:	bfa8      	it	ge
 801665c:	4691      	movge	r9, r2
 801665e:	f1b9 0f00 	cmp.w	r9, #0
 8016662:	dc35      	bgt.n	80166d0 <_printf_float+0x380>
 8016664:	f04f 0800 	mov.w	r8, #0
 8016668:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801666c:	f104 0a1a 	add.w	sl, r4, #26
 8016670:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8016674:	1a9b      	subs	r3, r3, r2
 8016676:	eba3 0309 	sub.w	r3, r3, r9
 801667a:	4543      	cmp	r3, r8
 801667c:	f77f af75 	ble.w	801656a <_printf_float+0x21a>
 8016680:	2301      	movs	r3, #1
 8016682:	4652      	mov	r2, sl
 8016684:	4631      	mov	r1, r6
 8016686:	4628      	mov	r0, r5
 8016688:	47b8      	blx	r7
 801668a:	3001      	adds	r0, #1
 801668c:	f43f aeae 	beq.w	80163ec <_printf_float+0x9c>
 8016690:	f108 0801 	add.w	r8, r8, #1
 8016694:	e7ec      	b.n	8016670 <_printf_float+0x320>
 8016696:	4613      	mov	r3, r2
 8016698:	4631      	mov	r1, r6
 801669a:	4642      	mov	r2, r8
 801669c:	4628      	mov	r0, r5
 801669e:	47b8      	blx	r7
 80166a0:	3001      	adds	r0, #1
 80166a2:	d1bf      	bne.n	8016624 <_printf_float+0x2d4>
 80166a4:	e6a2      	b.n	80163ec <_printf_float+0x9c>
 80166a6:	2301      	movs	r3, #1
 80166a8:	4631      	mov	r1, r6
 80166aa:	4628      	mov	r0, r5
 80166ac:	9204      	str	r2, [sp, #16]
 80166ae:	47b8      	blx	r7
 80166b0:	3001      	adds	r0, #1
 80166b2:	f43f ae9b 	beq.w	80163ec <_printf_float+0x9c>
 80166b6:	9b05      	ldr	r3, [sp, #20]
 80166b8:	9a04      	ldr	r2, [sp, #16]
 80166ba:	3301      	adds	r3, #1
 80166bc:	9305      	str	r3, [sp, #20]
 80166be:	e7b7      	b.n	8016630 <_printf_float+0x2e0>
 80166c0:	4653      	mov	r3, sl
 80166c2:	465a      	mov	r2, fp
 80166c4:	4631      	mov	r1, r6
 80166c6:	4628      	mov	r0, r5
 80166c8:	47b8      	blx	r7
 80166ca:	3001      	adds	r0, #1
 80166cc:	d1be      	bne.n	801664c <_printf_float+0x2fc>
 80166ce:	e68d      	b.n	80163ec <_printf_float+0x9c>
 80166d0:	9a04      	ldr	r2, [sp, #16]
 80166d2:	464b      	mov	r3, r9
 80166d4:	4442      	add	r2, r8
 80166d6:	4631      	mov	r1, r6
 80166d8:	4628      	mov	r0, r5
 80166da:	47b8      	blx	r7
 80166dc:	3001      	adds	r0, #1
 80166de:	d1c1      	bne.n	8016664 <_printf_float+0x314>
 80166e0:	e684      	b.n	80163ec <_printf_float+0x9c>
 80166e2:	9a08      	ldr	r2, [sp, #32]
 80166e4:	2a01      	cmp	r2, #1
 80166e6:	dc01      	bgt.n	80166ec <_printf_float+0x39c>
 80166e8:	07db      	lsls	r3, r3, #31
 80166ea:	d537      	bpl.n	801675c <_printf_float+0x40c>
 80166ec:	2301      	movs	r3, #1
 80166ee:	4642      	mov	r2, r8
 80166f0:	4631      	mov	r1, r6
 80166f2:	4628      	mov	r0, r5
 80166f4:	47b8      	blx	r7
 80166f6:	3001      	adds	r0, #1
 80166f8:	f43f ae78 	beq.w	80163ec <_printf_float+0x9c>
 80166fc:	4653      	mov	r3, sl
 80166fe:	465a      	mov	r2, fp
 8016700:	4631      	mov	r1, r6
 8016702:	4628      	mov	r0, r5
 8016704:	47b8      	blx	r7
 8016706:	3001      	adds	r0, #1
 8016708:	f43f ae70 	beq.w	80163ec <_printf_float+0x9c>
 801670c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8016710:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8016714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016718:	d01b      	beq.n	8016752 <_printf_float+0x402>
 801671a:	9b08      	ldr	r3, [sp, #32]
 801671c:	f108 0201 	add.w	r2, r8, #1
 8016720:	3b01      	subs	r3, #1
 8016722:	4631      	mov	r1, r6
 8016724:	4628      	mov	r0, r5
 8016726:	47b8      	blx	r7
 8016728:	3001      	adds	r0, #1
 801672a:	d10e      	bne.n	801674a <_printf_float+0x3fa>
 801672c:	e65e      	b.n	80163ec <_printf_float+0x9c>
 801672e:	2301      	movs	r3, #1
 8016730:	464a      	mov	r2, r9
 8016732:	4631      	mov	r1, r6
 8016734:	4628      	mov	r0, r5
 8016736:	47b8      	blx	r7
 8016738:	3001      	adds	r0, #1
 801673a:	f43f ae57 	beq.w	80163ec <_printf_float+0x9c>
 801673e:	f108 0801 	add.w	r8, r8, #1
 8016742:	9b08      	ldr	r3, [sp, #32]
 8016744:	3b01      	subs	r3, #1
 8016746:	4543      	cmp	r3, r8
 8016748:	dcf1      	bgt.n	801672e <_printf_float+0x3de>
 801674a:	9b04      	ldr	r3, [sp, #16]
 801674c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016750:	e6db      	b.n	801650a <_printf_float+0x1ba>
 8016752:	f04f 0800 	mov.w	r8, #0
 8016756:	f104 091a 	add.w	r9, r4, #26
 801675a:	e7f2      	b.n	8016742 <_printf_float+0x3f2>
 801675c:	2301      	movs	r3, #1
 801675e:	4642      	mov	r2, r8
 8016760:	e7df      	b.n	8016722 <_printf_float+0x3d2>
 8016762:	2301      	movs	r3, #1
 8016764:	464a      	mov	r2, r9
 8016766:	4631      	mov	r1, r6
 8016768:	4628      	mov	r0, r5
 801676a:	47b8      	blx	r7
 801676c:	3001      	adds	r0, #1
 801676e:	f43f ae3d 	beq.w	80163ec <_printf_float+0x9c>
 8016772:	f108 0801 	add.w	r8, r8, #1
 8016776:	68e3      	ldr	r3, [r4, #12]
 8016778:	9909      	ldr	r1, [sp, #36]	; 0x24
 801677a:	1a5b      	subs	r3, r3, r1
 801677c:	4543      	cmp	r3, r8
 801677e:	dcf0      	bgt.n	8016762 <_printf_float+0x412>
 8016780:	e6f7      	b.n	8016572 <_printf_float+0x222>
 8016782:	f04f 0800 	mov.w	r8, #0
 8016786:	f104 0919 	add.w	r9, r4, #25
 801678a:	e7f4      	b.n	8016776 <_printf_float+0x426>

0801678c <_printf_common>:
 801678c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016790:	4616      	mov	r6, r2
 8016792:	4699      	mov	r9, r3
 8016794:	688a      	ldr	r2, [r1, #8]
 8016796:	690b      	ldr	r3, [r1, #16]
 8016798:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801679c:	4293      	cmp	r3, r2
 801679e:	bfb8      	it	lt
 80167a0:	4613      	movlt	r3, r2
 80167a2:	6033      	str	r3, [r6, #0]
 80167a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80167a8:	4607      	mov	r7, r0
 80167aa:	460c      	mov	r4, r1
 80167ac:	b10a      	cbz	r2, 80167b2 <_printf_common+0x26>
 80167ae:	3301      	adds	r3, #1
 80167b0:	6033      	str	r3, [r6, #0]
 80167b2:	6823      	ldr	r3, [r4, #0]
 80167b4:	0699      	lsls	r1, r3, #26
 80167b6:	bf42      	ittt	mi
 80167b8:	6833      	ldrmi	r3, [r6, #0]
 80167ba:	3302      	addmi	r3, #2
 80167bc:	6033      	strmi	r3, [r6, #0]
 80167be:	6825      	ldr	r5, [r4, #0]
 80167c0:	f015 0506 	ands.w	r5, r5, #6
 80167c4:	d106      	bne.n	80167d4 <_printf_common+0x48>
 80167c6:	f104 0a19 	add.w	sl, r4, #25
 80167ca:	68e3      	ldr	r3, [r4, #12]
 80167cc:	6832      	ldr	r2, [r6, #0]
 80167ce:	1a9b      	subs	r3, r3, r2
 80167d0:	42ab      	cmp	r3, r5
 80167d2:	dc26      	bgt.n	8016822 <_printf_common+0x96>
 80167d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80167d8:	1e13      	subs	r3, r2, #0
 80167da:	6822      	ldr	r2, [r4, #0]
 80167dc:	bf18      	it	ne
 80167de:	2301      	movne	r3, #1
 80167e0:	0692      	lsls	r2, r2, #26
 80167e2:	d42b      	bmi.n	801683c <_printf_common+0xb0>
 80167e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80167e8:	4649      	mov	r1, r9
 80167ea:	4638      	mov	r0, r7
 80167ec:	47c0      	blx	r8
 80167ee:	3001      	adds	r0, #1
 80167f0:	d01e      	beq.n	8016830 <_printf_common+0xa4>
 80167f2:	6823      	ldr	r3, [r4, #0]
 80167f4:	68e5      	ldr	r5, [r4, #12]
 80167f6:	6832      	ldr	r2, [r6, #0]
 80167f8:	f003 0306 	and.w	r3, r3, #6
 80167fc:	2b04      	cmp	r3, #4
 80167fe:	bf08      	it	eq
 8016800:	1aad      	subeq	r5, r5, r2
 8016802:	68a3      	ldr	r3, [r4, #8]
 8016804:	6922      	ldr	r2, [r4, #16]
 8016806:	bf0c      	ite	eq
 8016808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801680c:	2500      	movne	r5, #0
 801680e:	4293      	cmp	r3, r2
 8016810:	bfc4      	itt	gt
 8016812:	1a9b      	subgt	r3, r3, r2
 8016814:	18ed      	addgt	r5, r5, r3
 8016816:	2600      	movs	r6, #0
 8016818:	341a      	adds	r4, #26
 801681a:	42b5      	cmp	r5, r6
 801681c:	d11a      	bne.n	8016854 <_printf_common+0xc8>
 801681e:	2000      	movs	r0, #0
 8016820:	e008      	b.n	8016834 <_printf_common+0xa8>
 8016822:	2301      	movs	r3, #1
 8016824:	4652      	mov	r2, sl
 8016826:	4649      	mov	r1, r9
 8016828:	4638      	mov	r0, r7
 801682a:	47c0      	blx	r8
 801682c:	3001      	adds	r0, #1
 801682e:	d103      	bne.n	8016838 <_printf_common+0xac>
 8016830:	f04f 30ff 	mov.w	r0, #4294967295
 8016834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016838:	3501      	adds	r5, #1
 801683a:	e7c6      	b.n	80167ca <_printf_common+0x3e>
 801683c:	18e1      	adds	r1, r4, r3
 801683e:	1c5a      	adds	r2, r3, #1
 8016840:	2030      	movs	r0, #48	; 0x30
 8016842:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016846:	4422      	add	r2, r4
 8016848:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801684c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016850:	3302      	adds	r3, #2
 8016852:	e7c7      	b.n	80167e4 <_printf_common+0x58>
 8016854:	2301      	movs	r3, #1
 8016856:	4622      	mov	r2, r4
 8016858:	4649      	mov	r1, r9
 801685a:	4638      	mov	r0, r7
 801685c:	47c0      	blx	r8
 801685e:	3001      	adds	r0, #1
 8016860:	d0e6      	beq.n	8016830 <_printf_common+0xa4>
 8016862:	3601      	adds	r6, #1
 8016864:	e7d9      	b.n	801681a <_printf_common+0x8e>
	...

08016868 <_printf_i>:
 8016868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801686c:	7e0f      	ldrb	r7, [r1, #24]
 801686e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016870:	2f78      	cmp	r7, #120	; 0x78
 8016872:	4691      	mov	r9, r2
 8016874:	4680      	mov	r8, r0
 8016876:	460c      	mov	r4, r1
 8016878:	469a      	mov	sl, r3
 801687a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801687e:	d807      	bhi.n	8016890 <_printf_i+0x28>
 8016880:	2f62      	cmp	r7, #98	; 0x62
 8016882:	d80a      	bhi.n	801689a <_printf_i+0x32>
 8016884:	2f00      	cmp	r7, #0
 8016886:	f000 80d8 	beq.w	8016a3a <_printf_i+0x1d2>
 801688a:	2f58      	cmp	r7, #88	; 0x58
 801688c:	f000 80a3 	beq.w	80169d6 <_printf_i+0x16e>
 8016890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016894:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016898:	e03a      	b.n	8016910 <_printf_i+0xa8>
 801689a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801689e:	2b15      	cmp	r3, #21
 80168a0:	d8f6      	bhi.n	8016890 <_printf_i+0x28>
 80168a2:	a101      	add	r1, pc, #4	; (adr r1, 80168a8 <_printf_i+0x40>)
 80168a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80168a8:	08016901 	.word	0x08016901
 80168ac:	08016915 	.word	0x08016915
 80168b0:	08016891 	.word	0x08016891
 80168b4:	08016891 	.word	0x08016891
 80168b8:	08016891 	.word	0x08016891
 80168bc:	08016891 	.word	0x08016891
 80168c0:	08016915 	.word	0x08016915
 80168c4:	08016891 	.word	0x08016891
 80168c8:	08016891 	.word	0x08016891
 80168cc:	08016891 	.word	0x08016891
 80168d0:	08016891 	.word	0x08016891
 80168d4:	08016a21 	.word	0x08016a21
 80168d8:	08016945 	.word	0x08016945
 80168dc:	08016a03 	.word	0x08016a03
 80168e0:	08016891 	.word	0x08016891
 80168e4:	08016891 	.word	0x08016891
 80168e8:	08016a43 	.word	0x08016a43
 80168ec:	08016891 	.word	0x08016891
 80168f0:	08016945 	.word	0x08016945
 80168f4:	08016891 	.word	0x08016891
 80168f8:	08016891 	.word	0x08016891
 80168fc:	08016a0b 	.word	0x08016a0b
 8016900:	682b      	ldr	r3, [r5, #0]
 8016902:	1d1a      	adds	r2, r3, #4
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	602a      	str	r2, [r5, #0]
 8016908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801690c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016910:	2301      	movs	r3, #1
 8016912:	e0a3      	b.n	8016a5c <_printf_i+0x1f4>
 8016914:	6820      	ldr	r0, [r4, #0]
 8016916:	6829      	ldr	r1, [r5, #0]
 8016918:	0606      	lsls	r6, r0, #24
 801691a:	f101 0304 	add.w	r3, r1, #4
 801691e:	d50a      	bpl.n	8016936 <_printf_i+0xce>
 8016920:	680e      	ldr	r6, [r1, #0]
 8016922:	602b      	str	r3, [r5, #0]
 8016924:	2e00      	cmp	r6, #0
 8016926:	da03      	bge.n	8016930 <_printf_i+0xc8>
 8016928:	232d      	movs	r3, #45	; 0x2d
 801692a:	4276      	negs	r6, r6
 801692c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016930:	485e      	ldr	r0, [pc, #376]	; (8016aac <_printf_i+0x244>)
 8016932:	230a      	movs	r3, #10
 8016934:	e019      	b.n	801696a <_printf_i+0x102>
 8016936:	680e      	ldr	r6, [r1, #0]
 8016938:	602b      	str	r3, [r5, #0]
 801693a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801693e:	bf18      	it	ne
 8016940:	b236      	sxthne	r6, r6
 8016942:	e7ef      	b.n	8016924 <_printf_i+0xbc>
 8016944:	682b      	ldr	r3, [r5, #0]
 8016946:	6820      	ldr	r0, [r4, #0]
 8016948:	1d19      	adds	r1, r3, #4
 801694a:	6029      	str	r1, [r5, #0]
 801694c:	0601      	lsls	r1, r0, #24
 801694e:	d501      	bpl.n	8016954 <_printf_i+0xec>
 8016950:	681e      	ldr	r6, [r3, #0]
 8016952:	e002      	b.n	801695a <_printf_i+0xf2>
 8016954:	0646      	lsls	r6, r0, #25
 8016956:	d5fb      	bpl.n	8016950 <_printf_i+0xe8>
 8016958:	881e      	ldrh	r6, [r3, #0]
 801695a:	4854      	ldr	r0, [pc, #336]	; (8016aac <_printf_i+0x244>)
 801695c:	2f6f      	cmp	r7, #111	; 0x6f
 801695e:	bf0c      	ite	eq
 8016960:	2308      	moveq	r3, #8
 8016962:	230a      	movne	r3, #10
 8016964:	2100      	movs	r1, #0
 8016966:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801696a:	6865      	ldr	r5, [r4, #4]
 801696c:	60a5      	str	r5, [r4, #8]
 801696e:	2d00      	cmp	r5, #0
 8016970:	bfa2      	ittt	ge
 8016972:	6821      	ldrge	r1, [r4, #0]
 8016974:	f021 0104 	bicge.w	r1, r1, #4
 8016978:	6021      	strge	r1, [r4, #0]
 801697a:	b90e      	cbnz	r6, 8016980 <_printf_i+0x118>
 801697c:	2d00      	cmp	r5, #0
 801697e:	d04d      	beq.n	8016a1c <_printf_i+0x1b4>
 8016980:	4615      	mov	r5, r2
 8016982:	fbb6 f1f3 	udiv	r1, r6, r3
 8016986:	fb03 6711 	mls	r7, r3, r1, r6
 801698a:	5dc7      	ldrb	r7, [r0, r7]
 801698c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8016990:	4637      	mov	r7, r6
 8016992:	42bb      	cmp	r3, r7
 8016994:	460e      	mov	r6, r1
 8016996:	d9f4      	bls.n	8016982 <_printf_i+0x11a>
 8016998:	2b08      	cmp	r3, #8
 801699a:	d10b      	bne.n	80169b4 <_printf_i+0x14c>
 801699c:	6823      	ldr	r3, [r4, #0]
 801699e:	07de      	lsls	r6, r3, #31
 80169a0:	d508      	bpl.n	80169b4 <_printf_i+0x14c>
 80169a2:	6923      	ldr	r3, [r4, #16]
 80169a4:	6861      	ldr	r1, [r4, #4]
 80169a6:	4299      	cmp	r1, r3
 80169a8:	bfde      	ittt	le
 80169aa:	2330      	movle	r3, #48	; 0x30
 80169ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80169b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80169b4:	1b52      	subs	r2, r2, r5
 80169b6:	6122      	str	r2, [r4, #16]
 80169b8:	f8cd a000 	str.w	sl, [sp]
 80169bc:	464b      	mov	r3, r9
 80169be:	aa03      	add	r2, sp, #12
 80169c0:	4621      	mov	r1, r4
 80169c2:	4640      	mov	r0, r8
 80169c4:	f7ff fee2 	bl	801678c <_printf_common>
 80169c8:	3001      	adds	r0, #1
 80169ca:	d14c      	bne.n	8016a66 <_printf_i+0x1fe>
 80169cc:	f04f 30ff 	mov.w	r0, #4294967295
 80169d0:	b004      	add	sp, #16
 80169d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169d6:	4835      	ldr	r0, [pc, #212]	; (8016aac <_printf_i+0x244>)
 80169d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80169dc:	6829      	ldr	r1, [r5, #0]
 80169de:	6823      	ldr	r3, [r4, #0]
 80169e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80169e4:	6029      	str	r1, [r5, #0]
 80169e6:	061d      	lsls	r5, r3, #24
 80169e8:	d514      	bpl.n	8016a14 <_printf_i+0x1ac>
 80169ea:	07df      	lsls	r7, r3, #31
 80169ec:	bf44      	itt	mi
 80169ee:	f043 0320 	orrmi.w	r3, r3, #32
 80169f2:	6023      	strmi	r3, [r4, #0]
 80169f4:	b91e      	cbnz	r6, 80169fe <_printf_i+0x196>
 80169f6:	6823      	ldr	r3, [r4, #0]
 80169f8:	f023 0320 	bic.w	r3, r3, #32
 80169fc:	6023      	str	r3, [r4, #0]
 80169fe:	2310      	movs	r3, #16
 8016a00:	e7b0      	b.n	8016964 <_printf_i+0xfc>
 8016a02:	6823      	ldr	r3, [r4, #0]
 8016a04:	f043 0320 	orr.w	r3, r3, #32
 8016a08:	6023      	str	r3, [r4, #0]
 8016a0a:	2378      	movs	r3, #120	; 0x78
 8016a0c:	4828      	ldr	r0, [pc, #160]	; (8016ab0 <_printf_i+0x248>)
 8016a0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8016a12:	e7e3      	b.n	80169dc <_printf_i+0x174>
 8016a14:	0659      	lsls	r1, r3, #25
 8016a16:	bf48      	it	mi
 8016a18:	b2b6      	uxthmi	r6, r6
 8016a1a:	e7e6      	b.n	80169ea <_printf_i+0x182>
 8016a1c:	4615      	mov	r5, r2
 8016a1e:	e7bb      	b.n	8016998 <_printf_i+0x130>
 8016a20:	682b      	ldr	r3, [r5, #0]
 8016a22:	6826      	ldr	r6, [r4, #0]
 8016a24:	6961      	ldr	r1, [r4, #20]
 8016a26:	1d18      	adds	r0, r3, #4
 8016a28:	6028      	str	r0, [r5, #0]
 8016a2a:	0635      	lsls	r5, r6, #24
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	d501      	bpl.n	8016a34 <_printf_i+0x1cc>
 8016a30:	6019      	str	r1, [r3, #0]
 8016a32:	e002      	b.n	8016a3a <_printf_i+0x1d2>
 8016a34:	0670      	lsls	r0, r6, #25
 8016a36:	d5fb      	bpl.n	8016a30 <_printf_i+0x1c8>
 8016a38:	8019      	strh	r1, [r3, #0]
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	6123      	str	r3, [r4, #16]
 8016a3e:	4615      	mov	r5, r2
 8016a40:	e7ba      	b.n	80169b8 <_printf_i+0x150>
 8016a42:	682b      	ldr	r3, [r5, #0]
 8016a44:	1d1a      	adds	r2, r3, #4
 8016a46:	602a      	str	r2, [r5, #0]
 8016a48:	681d      	ldr	r5, [r3, #0]
 8016a4a:	6862      	ldr	r2, [r4, #4]
 8016a4c:	2100      	movs	r1, #0
 8016a4e:	4628      	mov	r0, r5
 8016a50:	f7e9 fc66 	bl	8000320 <memchr>
 8016a54:	b108      	cbz	r0, 8016a5a <_printf_i+0x1f2>
 8016a56:	1b40      	subs	r0, r0, r5
 8016a58:	6060      	str	r0, [r4, #4]
 8016a5a:	6863      	ldr	r3, [r4, #4]
 8016a5c:	6123      	str	r3, [r4, #16]
 8016a5e:	2300      	movs	r3, #0
 8016a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016a64:	e7a8      	b.n	80169b8 <_printf_i+0x150>
 8016a66:	6923      	ldr	r3, [r4, #16]
 8016a68:	462a      	mov	r2, r5
 8016a6a:	4649      	mov	r1, r9
 8016a6c:	4640      	mov	r0, r8
 8016a6e:	47d0      	blx	sl
 8016a70:	3001      	adds	r0, #1
 8016a72:	d0ab      	beq.n	80169cc <_printf_i+0x164>
 8016a74:	6823      	ldr	r3, [r4, #0]
 8016a76:	079b      	lsls	r3, r3, #30
 8016a78:	d413      	bmi.n	8016aa2 <_printf_i+0x23a>
 8016a7a:	68e0      	ldr	r0, [r4, #12]
 8016a7c:	9b03      	ldr	r3, [sp, #12]
 8016a7e:	4298      	cmp	r0, r3
 8016a80:	bfb8      	it	lt
 8016a82:	4618      	movlt	r0, r3
 8016a84:	e7a4      	b.n	80169d0 <_printf_i+0x168>
 8016a86:	2301      	movs	r3, #1
 8016a88:	4632      	mov	r2, r6
 8016a8a:	4649      	mov	r1, r9
 8016a8c:	4640      	mov	r0, r8
 8016a8e:	47d0      	blx	sl
 8016a90:	3001      	adds	r0, #1
 8016a92:	d09b      	beq.n	80169cc <_printf_i+0x164>
 8016a94:	3501      	adds	r5, #1
 8016a96:	68e3      	ldr	r3, [r4, #12]
 8016a98:	9903      	ldr	r1, [sp, #12]
 8016a9a:	1a5b      	subs	r3, r3, r1
 8016a9c:	42ab      	cmp	r3, r5
 8016a9e:	dcf2      	bgt.n	8016a86 <_printf_i+0x21e>
 8016aa0:	e7eb      	b.n	8016a7a <_printf_i+0x212>
 8016aa2:	2500      	movs	r5, #0
 8016aa4:	f104 0619 	add.w	r6, r4, #25
 8016aa8:	e7f5      	b.n	8016a96 <_printf_i+0x22e>
 8016aaa:	bf00      	nop
 8016aac:	0801ad6a 	.word	0x0801ad6a
 8016ab0:	0801ad7b 	.word	0x0801ad7b

08016ab4 <_scanf_float>:
 8016ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ab8:	b087      	sub	sp, #28
 8016aba:	4617      	mov	r7, r2
 8016abc:	9303      	str	r3, [sp, #12]
 8016abe:	688b      	ldr	r3, [r1, #8]
 8016ac0:	1e5a      	subs	r2, r3, #1
 8016ac2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8016ac6:	bf83      	ittte	hi
 8016ac8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016acc:	195b      	addhi	r3, r3, r5
 8016ace:	9302      	strhi	r3, [sp, #8]
 8016ad0:	2300      	movls	r3, #0
 8016ad2:	bf86      	itte	hi
 8016ad4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016ad8:	608b      	strhi	r3, [r1, #8]
 8016ada:	9302      	strls	r3, [sp, #8]
 8016adc:	680b      	ldr	r3, [r1, #0]
 8016ade:	468b      	mov	fp, r1
 8016ae0:	2500      	movs	r5, #0
 8016ae2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8016ae6:	f84b 3b1c 	str.w	r3, [fp], #28
 8016aea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8016aee:	4680      	mov	r8, r0
 8016af0:	460c      	mov	r4, r1
 8016af2:	465e      	mov	r6, fp
 8016af4:	46aa      	mov	sl, r5
 8016af6:	46a9      	mov	r9, r5
 8016af8:	9501      	str	r5, [sp, #4]
 8016afa:	68a2      	ldr	r2, [r4, #8]
 8016afc:	b152      	cbz	r2, 8016b14 <_scanf_float+0x60>
 8016afe:	683b      	ldr	r3, [r7, #0]
 8016b00:	781b      	ldrb	r3, [r3, #0]
 8016b02:	2b4e      	cmp	r3, #78	; 0x4e
 8016b04:	d864      	bhi.n	8016bd0 <_scanf_float+0x11c>
 8016b06:	2b40      	cmp	r3, #64	; 0x40
 8016b08:	d83c      	bhi.n	8016b84 <_scanf_float+0xd0>
 8016b0a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8016b0e:	b2c8      	uxtb	r0, r1
 8016b10:	280e      	cmp	r0, #14
 8016b12:	d93a      	bls.n	8016b8a <_scanf_float+0xd6>
 8016b14:	f1b9 0f00 	cmp.w	r9, #0
 8016b18:	d003      	beq.n	8016b22 <_scanf_float+0x6e>
 8016b1a:	6823      	ldr	r3, [r4, #0]
 8016b1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016b20:	6023      	str	r3, [r4, #0]
 8016b22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016b26:	f1ba 0f01 	cmp.w	sl, #1
 8016b2a:	f200 8113 	bhi.w	8016d54 <_scanf_float+0x2a0>
 8016b2e:	455e      	cmp	r6, fp
 8016b30:	f200 8105 	bhi.w	8016d3e <_scanf_float+0x28a>
 8016b34:	2501      	movs	r5, #1
 8016b36:	4628      	mov	r0, r5
 8016b38:	b007      	add	sp, #28
 8016b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016b3e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8016b42:	2a0d      	cmp	r2, #13
 8016b44:	d8e6      	bhi.n	8016b14 <_scanf_float+0x60>
 8016b46:	a101      	add	r1, pc, #4	; (adr r1, 8016b4c <_scanf_float+0x98>)
 8016b48:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8016b4c:	08016c8b 	.word	0x08016c8b
 8016b50:	08016b15 	.word	0x08016b15
 8016b54:	08016b15 	.word	0x08016b15
 8016b58:	08016b15 	.word	0x08016b15
 8016b5c:	08016ceb 	.word	0x08016ceb
 8016b60:	08016cc3 	.word	0x08016cc3
 8016b64:	08016b15 	.word	0x08016b15
 8016b68:	08016b15 	.word	0x08016b15
 8016b6c:	08016c99 	.word	0x08016c99
 8016b70:	08016b15 	.word	0x08016b15
 8016b74:	08016b15 	.word	0x08016b15
 8016b78:	08016b15 	.word	0x08016b15
 8016b7c:	08016b15 	.word	0x08016b15
 8016b80:	08016c51 	.word	0x08016c51
 8016b84:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8016b88:	e7db      	b.n	8016b42 <_scanf_float+0x8e>
 8016b8a:	290e      	cmp	r1, #14
 8016b8c:	d8c2      	bhi.n	8016b14 <_scanf_float+0x60>
 8016b8e:	a001      	add	r0, pc, #4	; (adr r0, 8016b94 <_scanf_float+0xe0>)
 8016b90:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8016b94:	08016c43 	.word	0x08016c43
 8016b98:	08016b15 	.word	0x08016b15
 8016b9c:	08016c43 	.word	0x08016c43
 8016ba0:	08016cd7 	.word	0x08016cd7
 8016ba4:	08016b15 	.word	0x08016b15
 8016ba8:	08016bf1 	.word	0x08016bf1
 8016bac:	08016c2d 	.word	0x08016c2d
 8016bb0:	08016c2d 	.word	0x08016c2d
 8016bb4:	08016c2d 	.word	0x08016c2d
 8016bb8:	08016c2d 	.word	0x08016c2d
 8016bbc:	08016c2d 	.word	0x08016c2d
 8016bc0:	08016c2d 	.word	0x08016c2d
 8016bc4:	08016c2d 	.word	0x08016c2d
 8016bc8:	08016c2d 	.word	0x08016c2d
 8016bcc:	08016c2d 	.word	0x08016c2d
 8016bd0:	2b6e      	cmp	r3, #110	; 0x6e
 8016bd2:	d809      	bhi.n	8016be8 <_scanf_float+0x134>
 8016bd4:	2b60      	cmp	r3, #96	; 0x60
 8016bd6:	d8b2      	bhi.n	8016b3e <_scanf_float+0x8a>
 8016bd8:	2b54      	cmp	r3, #84	; 0x54
 8016bda:	d077      	beq.n	8016ccc <_scanf_float+0x218>
 8016bdc:	2b59      	cmp	r3, #89	; 0x59
 8016bde:	d199      	bne.n	8016b14 <_scanf_float+0x60>
 8016be0:	2d07      	cmp	r5, #7
 8016be2:	d197      	bne.n	8016b14 <_scanf_float+0x60>
 8016be4:	2508      	movs	r5, #8
 8016be6:	e029      	b.n	8016c3c <_scanf_float+0x188>
 8016be8:	2b74      	cmp	r3, #116	; 0x74
 8016bea:	d06f      	beq.n	8016ccc <_scanf_float+0x218>
 8016bec:	2b79      	cmp	r3, #121	; 0x79
 8016bee:	e7f6      	b.n	8016bde <_scanf_float+0x12a>
 8016bf0:	6821      	ldr	r1, [r4, #0]
 8016bf2:	05c8      	lsls	r0, r1, #23
 8016bf4:	d51a      	bpl.n	8016c2c <_scanf_float+0x178>
 8016bf6:	9b02      	ldr	r3, [sp, #8]
 8016bf8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8016bfc:	6021      	str	r1, [r4, #0]
 8016bfe:	f109 0901 	add.w	r9, r9, #1
 8016c02:	b11b      	cbz	r3, 8016c0c <_scanf_float+0x158>
 8016c04:	3b01      	subs	r3, #1
 8016c06:	3201      	adds	r2, #1
 8016c08:	9302      	str	r3, [sp, #8]
 8016c0a:	60a2      	str	r2, [r4, #8]
 8016c0c:	68a3      	ldr	r3, [r4, #8]
 8016c0e:	3b01      	subs	r3, #1
 8016c10:	60a3      	str	r3, [r4, #8]
 8016c12:	6923      	ldr	r3, [r4, #16]
 8016c14:	3301      	adds	r3, #1
 8016c16:	6123      	str	r3, [r4, #16]
 8016c18:	687b      	ldr	r3, [r7, #4]
 8016c1a:	3b01      	subs	r3, #1
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	607b      	str	r3, [r7, #4]
 8016c20:	f340 8084 	ble.w	8016d2c <_scanf_float+0x278>
 8016c24:	683b      	ldr	r3, [r7, #0]
 8016c26:	3301      	adds	r3, #1
 8016c28:	603b      	str	r3, [r7, #0]
 8016c2a:	e766      	b.n	8016afa <_scanf_float+0x46>
 8016c2c:	eb1a 0f05 	cmn.w	sl, r5
 8016c30:	f47f af70 	bne.w	8016b14 <_scanf_float+0x60>
 8016c34:	6822      	ldr	r2, [r4, #0]
 8016c36:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8016c3a:	6022      	str	r2, [r4, #0]
 8016c3c:	f806 3b01 	strb.w	r3, [r6], #1
 8016c40:	e7e4      	b.n	8016c0c <_scanf_float+0x158>
 8016c42:	6822      	ldr	r2, [r4, #0]
 8016c44:	0610      	lsls	r0, r2, #24
 8016c46:	f57f af65 	bpl.w	8016b14 <_scanf_float+0x60>
 8016c4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016c4e:	e7f4      	b.n	8016c3a <_scanf_float+0x186>
 8016c50:	f1ba 0f00 	cmp.w	sl, #0
 8016c54:	d10e      	bne.n	8016c74 <_scanf_float+0x1c0>
 8016c56:	f1b9 0f00 	cmp.w	r9, #0
 8016c5a:	d10e      	bne.n	8016c7a <_scanf_float+0x1c6>
 8016c5c:	6822      	ldr	r2, [r4, #0]
 8016c5e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016c62:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016c66:	d108      	bne.n	8016c7a <_scanf_float+0x1c6>
 8016c68:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016c6c:	6022      	str	r2, [r4, #0]
 8016c6e:	f04f 0a01 	mov.w	sl, #1
 8016c72:	e7e3      	b.n	8016c3c <_scanf_float+0x188>
 8016c74:	f1ba 0f02 	cmp.w	sl, #2
 8016c78:	d055      	beq.n	8016d26 <_scanf_float+0x272>
 8016c7a:	2d01      	cmp	r5, #1
 8016c7c:	d002      	beq.n	8016c84 <_scanf_float+0x1d0>
 8016c7e:	2d04      	cmp	r5, #4
 8016c80:	f47f af48 	bne.w	8016b14 <_scanf_float+0x60>
 8016c84:	3501      	adds	r5, #1
 8016c86:	b2ed      	uxtb	r5, r5
 8016c88:	e7d8      	b.n	8016c3c <_scanf_float+0x188>
 8016c8a:	f1ba 0f01 	cmp.w	sl, #1
 8016c8e:	f47f af41 	bne.w	8016b14 <_scanf_float+0x60>
 8016c92:	f04f 0a02 	mov.w	sl, #2
 8016c96:	e7d1      	b.n	8016c3c <_scanf_float+0x188>
 8016c98:	b97d      	cbnz	r5, 8016cba <_scanf_float+0x206>
 8016c9a:	f1b9 0f00 	cmp.w	r9, #0
 8016c9e:	f47f af3c 	bne.w	8016b1a <_scanf_float+0x66>
 8016ca2:	6822      	ldr	r2, [r4, #0]
 8016ca4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8016ca8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8016cac:	f47f af39 	bne.w	8016b22 <_scanf_float+0x6e>
 8016cb0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016cb4:	6022      	str	r2, [r4, #0]
 8016cb6:	2501      	movs	r5, #1
 8016cb8:	e7c0      	b.n	8016c3c <_scanf_float+0x188>
 8016cba:	2d03      	cmp	r5, #3
 8016cbc:	d0e2      	beq.n	8016c84 <_scanf_float+0x1d0>
 8016cbe:	2d05      	cmp	r5, #5
 8016cc0:	e7de      	b.n	8016c80 <_scanf_float+0x1cc>
 8016cc2:	2d02      	cmp	r5, #2
 8016cc4:	f47f af26 	bne.w	8016b14 <_scanf_float+0x60>
 8016cc8:	2503      	movs	r5, #3
 8016cca:	e7b7      	b.n	8016c3c <_scanf_float+0x188>
 8016ccc:	2d06      	cmp	r5, #6
 8016cce:	f47f af21 	bne.w	8016b14 <_scanf_float+0x60>
 8016cd2:	2507      	movs	r5, #7
 8016cd4:	e7b2      	b.n	8016c3c <_scanf_float+0x188>
 8016cd6:	6822      	ldr	r2, [r4, #0]
 8016cd8:	0591      	lsls	r1, r2, #22
 8016cda:	f57f af1b 	bpl.w	8016b14 <_scanf_float+0x60>
 8016cde:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8016ce2:	6022      	str	r2, [r4, #0]
 8016ce4:	f8cd 9004 	str.w	r9, [sp, #4]
 8016ce8:	e7a8      	b.n	8016c3c <_scanf_float+0x188>
 8016cea:	6822      	ldr	r2, [r4, #0]
 8016cec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8016cf0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8016cf4:	d006      	beq.n	8016d04 <_scanf_float+0x250>
 8016cf6:	0550      	lsls	r0, r2, #21
 8016cf8:	f57f af0c 	bpl.w	8016b14 <_scanf_float+0x60>
 8016cfc:	f1b9 0f00 	cmp.w	r9, #0
 8016d00:	f43f af0f 	beq.w	8016b22 <_scanf_float+0x6e>
 8016d04:	0591      	lsls	r1, r2, #22
 8016d06:	bf58      	it	pl
 8016d08:	9901      	ldrpl	r1, [sp, #4]
 8016d0a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8016d0e:	bf58      	it	pl
 8016d10:	eba9 0101 	subpl.w	r1, r9, r1
 8016d14:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8016d18:	bf58      	it	pl
 8016d1a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8016d1e:	6022      	str	r2, [r4, #0]
 8016d20:	f04f 0900 	mov.w	r9, #0
 8016d24:	e78a      	b.n	8016c3c <_scanf_float+0x188>
 8016d26:	f04f 0a03 	mov.w	sl, #3
 8016d2a:	e787      	b.n	8016c3c <_scanf_float+0x188>
 8016d2c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8016d30:	4639      	mov	r1, r7
 8016d32:	4640      	mov	r0, r8
 8016d34:	4798      	blx	r3
 8016d36:	2800      	cmp	r0, #0
 8016d38:	f43f aedf 	beq.w	8016afa <_scanf_float+0x46>
 8016d3c:	e6ea      	b.n	8016b14 <_scanf_float+0x60>
 8016d3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016d42:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016d46:	463a      	mov	r2, r7
 8016d48:	4640      	mov	r0, r8
 8016d4a:	4798      	blx	r3
 8016d4c:	6923      	ldr	r3, [r4, #16]
 8016d4e:	3b01      	subs	r3, #1
 8016d50:	6123      	str	r3, [r4, #16]
 8016d52:	e6ec      	b.n	8016b2e <_scanf_float+0x7a>
 8016d54:	1e6b      	subs	r3, r5, #1
 8016d56:	2b06      	cmp	r3, #6
 8016d58:	d825      	bhi.n	8016da6 <_scanf_float+0x2f2>
 8016d5a:	2d02      	cmp	r5, #2
 8016d5c:	d836      	bhi.n	8016dcc <_scanf_float+0x318>
 8016d5e:	455e      	cmp	r6, fp
 8016d60:	f67f aee8 	bls.w	8016b34 <_scanf_float+0x80>
 8016d64:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016d68:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016d6c:	463a      	mov	r2, r7
 8016d6e:	4640      	mov	r0, r8
 8016d70:	4798      	blx	r3
 8016d72:	6923      	ldr	r3, [r4, #16]
 8016d74:	3b01      	subs	r3, #1
 8016d76:	6123      	str	r3, [r4, #16]
 8016d78:	e7f1      	b.n	8016d5e <_scanf_float+0x2aa>
 8016d7a:	9802      	ldr	r0, [sp, #8]
 8016d7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016d80:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8016d84:	9002      	str	r0, [sp, #8]
 8016d86:	463a      	mov	r2, r7
 8016d88:	4640      	mov	r0, r8
 8016d8a:	4798      	blx	r3
 8016d8c:	6923      	ldr	r3, [r4, #16]
 8016d8e:	3b01      	subs	r3, #1
 8016d90:	6123      	str	r3, [r4, #16]
 8016d92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016d96:	fa5f fa8a 	uxtb.w	sl, sl
 8016d9a:	f1ba 0f02 	cmp.w	sl, #2
 8016d9e:	d1ec      	bne.n	8016d7a <_scanf_float+0x2c6>
 8016da0:	3d03      	subs	r5, #3
 8016da2:	b2ed      	uxtb	r5, r5
 8016da4:	1b76      	subs	r6, r6, r5
 8016da6:	6823      	ldr	r3, [r4, #0]
 8016da8:	05da      	lsls	r2, r3, #23
 8016daa:	d52f      	bpl.n	8016e0c <_scanf_float+0x358>
 8016dac:	055b      	lsls	r3, r3, #21
 8016dae:	d510      	bpl.n	8016dd2 <_scanf_float+0x31e>
 8016db0:	455e      	cmp	r6, fp
 8016db2:	f67f aebf 	bls.w	8016b34 <_scanf_float+0x80>
 8016db6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016dba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8016dbe:	463a      	mov	r2, r7
 8016dc0:	4640      	mov	r0, r8
 8016dc2:	4798      	blx	r3
 8016dc4:	6923      	ldr	r3, [r4, #16]
 8016dc6:	3b01      	subs	r3, #1
 8016dc8:	6123      	str	r3, [r4, #16]
 8016dca:	e7f1      	b.n	8016db0 <_scanf_float+0x2fc>
 8016dcc:	46aa      	mov	sl, r5
 8016dce:	9602      	str	r6, [sp, #8]
 8016dd0:	e7df      	b.n	8016d92 <_scanf_float+0x2de>
 8016dd2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8016dd6:	6923      	ldr	r3, [r4, #16]
 8016dd8:	2965      	cmp	r1, #101	; 0x65
 8016dda:	f103 33ff 	add.w	r3, r3, #4294967295
 8016dde:	f106 35ff 	add.w	r5, r6, #4294967295
 8016de2:	6123      	str	r3, [r4, #16]
 8016de4:	d00c      	beq.n	8016e00 <_scanf_float+0x34c>
 8016de6:	2945      	cmp	r1, #69	; 0x45
 8016de8:	d00a      	beq.n	8016e00 <_scanf_float+0x34c>
 8016dea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016dee:	463a      	mov	r2, r7
 8016df0:	4640      	mov	r0, r8
 8016df2:	4798      	blx	r3
 8016df4:	6923      	ldr	r3, [r4, #16]
 8016df6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8016dfa:	3b01      	subs	r3, #1
 8016dfc:	1eb5      	subs	r5, r6, #2
 8016dfe:	6123      	str	r3, [r4, #16]
 8016e00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016e04:	463a      	mov	r2, r7
 8016e06:	4640      	mov	r0, r8
 8016e08:	4798      	blx	r3
 8016e0a:	462e      	mov	r6, r5
 8016e0c:	6825      	ldr	r5, [r4, #0]
 8016e0e:	f015 0510 	ands.w	r5, r5, #16
 8016e12:	d14e      	bne.n	8016eb2 <_scanf_float+0x3fe>
 8016e14:	7035      	strb	r5, [r6, #0]
 8016e16:	6823      	ldr	r3, [r4, #0]
 8016e18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8016e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016e20:	d119      	bne.n	8016e56 <_scanf_float+0x3a2>
 8016e22:	9b01      	ldr	r3, [sp, #4]
 8016e24:	454b      	cmp	r3, r9
 8016e26:	eba3 0209 	sub.w	r2, r3, r9
 8016e2a:	d121      	bne.n	8016e70 <_scanf_float+0x3bc>
 8016e2c:	2200      	movs	r2, #0
 8016e2e:	4659      	mov	r1, fp
 8016e30:	4640      	mov	r0, r8
 8016e32:	f000 fe3b 	bl	8017aac <_strtod_r>
 8016e36:	6822      	ldr	r2, [r4, #0]
 8016e38:	9b03      	ldr	r3, [sp, #12]
 8016e3a:	f012 0f02 	tst.w	r2, #2
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	d021      	beq.n	8016e86 <_scanf_float+0x3d2>
 8016e42:	9903      	ldr	r1, [sp, #12]
 8016e44:	1d1a      	adds	r2, r3, #4
 8016e46:	600a      	str	r2, [r1, #0]
 8016e48:	681b      	ldr	r3, [r3, #0]
 8016e4a:	ed83 0b00 	vstr	d0, [r3]
 8016e4e:	68e3      	ldr	r3, [r4, #12]
 8016e50:	3301      	adds	r3, #1
 8016e52:	60e3      	str	r3, [r4, #12]
 8016e54:	e66f      	b.n	8016b36 <_scanf_float+0x82>
 8016e56:	9b04      	ldr	r3, [sp, #16]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d0e7      	beq.n	8016e2c <_scanf_float+0x378>
 8016e5c:	9905      	ldr	r1, [sp, #20]
 8016e5e:	230a      	movs	r3, #10
 8016e60:	462a      	mov	r2, r5
 8016e62:	3101      	adds	r1, #1
 8016e64:	4640      	mov	r0, r8
 8016e66:	f000 fea9 	bl	8017bbc <_strtol_r>
 8016e6a:	9b04      	ldr	r3, [sp, #16]
 8016e6c:	9e05      	ldr	r6, [sp, #20]
 8016e6e:	1ac2      	subs	r2, r0, r3
 8016e70:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8016e74:	429e      	cmp	r6, r3
 8016e76:	bf28      	it	cs
 8016e78:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8016e7c:	490e      	ldr	r1, [pc, #56]	; (8016eb8 <_scanf_float+0x404>)
 8016e7e:	4630      	mov	r0, r6
 8016e80:	f000 f824 	bl	8016ecc <siprintf>
 8016e84:	e7d2      	b.n	8016e2c <_scanf_float+0x378>
 8016e86:	9903      	ldr	r1, [sp, #12]
 8016e88:	f012 0f04 	tst.w	r2, #4
 8016e8c:	f103 0204 	add.w	r2, r3, #4
 8016e90:	600a      	str	r2, [r1, #0]
 8016e92:	d1d9      	bne.n	8016e48 <_scanf_float+0x394>
 8016e94:	eeb4 0b40 	vcmp.f64	d0, d0
 8016e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016e9c:	681e      	ldr	r6, [r3, #0]
 8016e9e:	d705      	bvc.n	8016eac <_scanf_float+0x3f8>
 8016ea0:	4806      	ldr	r0, [pc, #24]	; (8016ebc <_scanf_float+0x408>)
 8016ea2:	f000 f80d 	bl	8016ec0 <nanf>
 8016ea6:	ed86 0a00 	vstr	s0, [r6]
 8016eaa:	e7d0      	b.n	8016e4e <_scanf_float+0x39a>
 8016eac:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8016eb0:	e7f9      	b.n	8016ea6 <_scanf_float+0x3f2>
 8016eb2:	2500      	movs	r5, #0
 8016eb4:	e63f      	b.n	8016b36 <_scanf_float+0x82>
 8016eb6:	bf00      	nop
 8016eb8:	0801ad8c 	.word	0x0801ad8c
 8016ebc:	0801b198 	.word	0x0801b198

08016ec0 <nanf>:
 8016ec0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8016ec8 <nanf+0x8>
 8016ec4:	4770      	bx	lr
 8016ec6:	bf00      	nop
 8016ec8:	7fc00000 	.word	0x7fc00000

08016ecc <siprintf>:
 8016ecc:	b40e      	push	{r1, r2, r3}
 8016ece:	b500      	push	{lr}
 8016ed0:	b09c      	sub	sp, #112	; 0x70
 8016ed2:	ab1d      	add	r3, sp, #116	; 0x74
 8016ed4:	9002      	str	r0, [sp, #8]
 8016ed6:	9006      	str	r0, [sp, #24]
 8016ed8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016edc:	4809      	ldr	r0, [pc, #36]	; (8016f04 <siprintf+0x38>)
 8016ede:	9107      	str	r1, [sp, #28]
 8016ee0:	9104      	str	r1, [sp, #16]
 8016ee2:	4909      	ldr	r1, [pc, #36]	; (8016f08 <siprintf+0x3c>)
 8016ee4:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ee8:	9105      	str	r1, [sp, #20]
 8016eea:	6800      	ldr	r0, [r0, #0]
 8016eec:	9301      	str	r3, [sp, #4]
 8016eee:	a902      	add	r1, sp, #8
 8016ef0:	f002 fdfe 	bl	8019af0 <_svfiprintf_r>
 8016ef4:	9b02      	ldr	r3, [sp, #8]
 8016ef6:	2200      	movs	r2, #0
 8016ef8:	701a      	strb	r2, [r3, #0]
 8016efa:	b01c      	add	sp, #112	; 0x70
 8016efc:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f00:	b003      	add	sp, #12
 8016f02:	4770      	bx	lr
 8016f04:	24000100 	.word	0x24000100
 8016f08:	ffff0208 	.word	0xffff0208

08016f0c <sulp>:
 8016f0c:	b570      	push	{r4, r5, r6, lr}
 8016f0e:	4604      	mov	r4, r0
 8016f10:	460d      	mov	r5, r1
 8016f12:	4616      	mov	r6, r2
 8016f14:	ec45 4b10 	vmov	d0, r4, r5
 8016f18:	f002 fb4c 	bl	80195b4 <__ulp>
 8016f1c:	b17e      	cbz	r6, 8016f3e <sulp+0x32>
 8016f1e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8016f22:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	dd09      	ble.n	8016f3e <sulp+0x32>
 8016f2a:	051b      	lsls	r3, r3, #20
 8016f2c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8016f30:	2000      	movs	r0, #0
 8016f32:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8016f36:	ec41 0b17 	vmov	d7, r0, r1
 8016f3a:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016f3e:	bd70      	pop	{r4, r5, r6, pc}

08016f40 <_strtod_l>:
 8016f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f44:	ed2d 8b0e 	vpush	{d8-d14}
 8016f48:	b097      	sub	sp, #92	; 0x5c
 8016f4a:	461f      	mov	r7, r3
 8016f4c:	2300      	movs	r3, #0
 8016f4e:	9312      	str	r3, [sp, #72]	; 0x48
 8016f50:	4ba1      	ldr	r3, [pc, #644]	; (80171d8 <_strtod_l+0x298>)
 8016f52:	920d      	str	r2, [sp, #52]	; 0x34
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	9307      	str	r3, [sp, #28]
 8016f58:	4604      	mov	r4, r0
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	468b      	mov	fp, r1
 8016f5e:	f7e9 f9d7 	bl	8000310 <strlen>
 8016f62:	f04f 0800 	mov.w	r8, #0
 8016f66:	4605      	mov	r5, r0
 8016f68:	f04f 0900 	mov.w	r9, #0
 8016f6c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8016f70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016f72:	7813      	ldrb	r3, [r2, #0]
 8016f74:	2b2b      	cmp	r3, #43	; 0x2b
 8016f76:	d04d      	beq.n	8017014 <_strtod_l+0xd4>
 8016f78:	d83a      	bhi.n	8016ff0 <_strtod_l+0xb0>
 8016f7a:	2b0d      	cmp	r3, #13
 8016f7c:	d833      	bhi.n	8016fe6 <_strtod_l+0xa6>
 8016f7e:	2b08      	cmp	r3, #8
 8016f80:	d833      	bhi.n	8016fea <_strtod_l+0xaa>
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d03d      	beq.n	8017002 <_strtod_l+0xc2>
 8016f86:	2300      	movs	r3, #0
 8016f88:	9308      	str	r3, [sp, #32]
 8016f8a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8016f8c:	7833      	ldrb	r3, [r6, #0]
 8016f8e:	2b30      	cmp	r3, #48	; 0x30
 8016f90:	f040 80b0 	bne.w	80170f4 <_strtod_l+0x1b4>
 8016f94:	7873      	ldrb	r3, [r6, #1]
 8016f96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016f9a:	2b58      	cmp	r3, #88	; 0x58
 8016f9c:	d167      	bne.n	801706e <_strtod_l+0x12e>
 8016f9e:	9b08      	ldr	r3, [sp, #32]
 8016fa0:	9301      	str	r3, [sp, #4]
 8016fa2:	ab12      	add	r3, sp, #72	; 0x48
 8016fa4:	9702      	str	r7, [sp, #8]
 8016fa6:	9300      	str	r3, [sp, #0]
 8016fa8:	4a8c      	ldr	r2, [pc, #560]	; (80171dc <_strtod_l+0x29c>)
 8016faa:	ab13      	add	r3, sp, #76	; 0x4c
 8016fac:	a911      	add	r1, sp, #68	; 0x44
 8016fae:	4620      	mov	r0, r4
 8016fb0:	f001 fc68 	bl	8018884 <__gethex>
 8016fb4:	f010 0507 	ands.w	r5, r0, #7
 8016fb8:	4607      	mov	r7, r0
 8016fba:	d005      	beq.n	8016fc8 <_strtod_l+0x88>
 8016fbc:	2d06      	cmp	r5, #6
 8016fbe:	d12b      	bne.n	8017018 <_strtod_l+0xd8>
 8016fc0:	3601      	adds	r6, #1
 8016fc2:	2300      	movs	r3, #0
 8016fc4:	9611      	str	r6, [sp, #68]	; 0x44
 8016fc6:	9308      	str	r3, [sp, #32]
 8016fc8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	f040 854e 	bne.w	8017a6c <_strtod_l+0xb2c>
 8016fd0:	9b08      	ldr	r3, [sp, #32]
 8016fd2:	b1e3      	cbz	r3, 801700e <_strtod_l+0xce>
 8016fd4:	ec49 8b17 	vmov	d7, r8, r9
 8016fd8:	eeb1 0b47 	vneg.f64	d0, d7
 8016fdc:	b017      	add	sp, #92	; 0x5c
 8016fde:	ecbd 8b0e 	vpop	{d8-d14}
 8016fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fe6:	2b20      	cmp	r3, #32
 8016fe8:	d1cd      	bne.n	8016f86 <_strtod_l+0x46>
 8016fea:	3201      	adds	r2, #1
 8016fec:	9211      	str	r2, [sp, #68]	; 0x44
 8016fee:	e7bf      	b.n	8016f70 <_strtod_l+0x30>
 8016ff0:	2b2d      	cmp	r3, #45	; 0x2d
 8016ff2:	d1c8      	bne.n	8016f86 <_strtod_l+0x46>
 8016ff4:	2301      	movs	r3, #1
 8016ff6:	9308      	str	r3, [sp, #32]
 8016ff8:	1c53      	adds	r3, r2, #1
 8016ffa:	9311      	str	r3, [sp, #68]	; 0x44
 8016ffc:	7853      	ldrb	r3, [r2, #1]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d1c3      	bne.n	8016f8a <_strtod_l+0x4a>
 8017002:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017004:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8017008:	2b00      	cmp	r3, #0
 801700a:	f040 852d 	bne.w	8017a68 <_strtod_l+0xb28>
 801700e:	ec49 8b10 	vmov	d0, r8, r9
 8017012:	e7e3      	b.n	8016fdc <_strtod_l+0x9c>
 8017014:	2300      	movs	r3, #0
 8017016:	e7ee      	b.n	8016ff6 <_strtod_l+0xb6>
 8017018:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801701a:	b13a      	cbz	r2, 801702c <_strtod_l+0xec>
 801701c:	2135      	movs	r1, #53	; 0x35
 801701e:	a814      	add	r0, sp, #80	; 0x50
 8017020:	f002 fbd0 	bl	80197c4 <__copybits>
 8017024:	9912      	ldr	r1, [sp, #72]	; 0x48
 8017026:	4620      	mov	r0, r4
 8017028:	f001 ff92 	bl	8018f50 <_Bfree>
 801702c:	3d01      	subs	r5, #1
 801702e:	2d04      	cmp	r5, #4
 8017030:	d806      	bhi.n	8017040 <_strtod_l+0x100>
 8017032:	e8df f005 	tbb	[pc, r5]
 8017036:	030a      	.short	0x030a
 8017038:	1714      	.short	0x1714
 801703a:	0a          	.byte	0x0a
 801703b:	00          	.byte	0x00
 801703c:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8017040:	073f      	lsls	r7, r7, #28
 8017042:	d5c1      	bpl.n	8016fc8 <_strtod_l+0x88>
 8017044:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8017048:	e7be      	b.n	8016fc8 <_strtod_l+0x88>
 801704a:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 801704e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017050:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8017054:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8017058:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 801705c:	e7f0      	b.n	8017040 <_strtod_l+0x100>
 801705e:	f8df 9180 	ldr.w	r9, [pc, #384]	; 80171e0 <_strtod_l+0x2a0>
 8017062:	e7ed      	b.n	8017040 <_strtod_l+0x100>
 8017064:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8017068:	f04f 38ff 	mov.w	r8, #4294967295
 801706c:	e7e8      	b.n	8017040 <_strtod_l+0x100>
 801706e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017070:	1c5a      	adds	r2, r3, #1
 8017072:	9211      	str	r2, [sp, #68]	; 0x44
 8017074:	785b      	ldrb	r3, [r3, #1]
 8017076:	2b30      	cmp	r3, #48	; 0x30
 8017078:	d0f9      	beq.n	801706e <_strtod_l+0x12e>
 801707a:	2b00      	cmp	r3, #0
 801707c:	d0a4      	beq.n	8016fc8 <_strtod_l+0x88>
 801707e:	2301      	movs	r3, #1
 8017080:	f04f 0a00 	mov.w	sl, #0
 8017084:	9304      	str	r3, [sp, #16]
 8017086:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017088:	930a      	str	r3, [sp, #40]	; 0x28
 801708a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801708e:	f8cd a018 	str.w	sl, [sp, #24]
 8017092:	220a      	movs	r2, #10
 8017094:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017096:	7807      	ldrb	r7, [r0, #0]
 8017098:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 801709c:	b2d9      	uxtb	r1, r3
 801709e:	2909      	cmp	r1, #9
 80170a0:	d92a      	bls.n	80170f8 <_strtod_l+0x1b8>
 80170a2:	9907      	ldr	r1, [sp, #28]
 80170a4:	462a      	mov	r2, r5
 80170a6:	f002 fe3b 	bl	8019d20 <strncmp>
 80170aa:	2800      	cmp	r0, #0
 80170ac:	d033      	beq.n	8017116 <_strtod_l+0x1d6>
 80170ae:	2000      	movs	r0, #0
 80170b0:	9b06      	ldr	r3, [sp, #24]
 80170b2:	463a      	mov	r2, r7
 80170b4:	4601      	mov	r1, r0
 80170b6:	4607      	mov	r7, r0
 80170b8:	2a65      	cmp	r2, #101	; 0x65
 80170ba:	d001      	beq.n	80170c0 <_strtod_l+0x180>
 80170bc:	2a45      	cmp	r2, #69	; 0x45
 80170be:	d117      	bne.n	80170f0 <_strtod_l+0x1b0>
 80170c0:	b91b      	cbnz	r3, 80170ca <_strtod_l+0x18a>
 80170c2:	9b04      	ldr	r3, [sp, #16]
 80170c4:	4303      	orrs	r3, r0
 80170c6:	d09c      	beq.n	8017002 <_strtod_l+0xc2>
 80170c8:	2300      	movs	r3, #0
 80170ca:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 80170ce:	f10b 0201 	add.w	r2, fp, #1
 80170d2:	9211      	str	r2, [sp, #68]	; 0x44
 80170d4:	f89b 2001 	ldrb.w	r2, [fp, #1]
 80170d8:	2a2b      	cmp	r2, #43	; 0x2b
 80170da:	d071      	beq.n	80171c0 <_strtod_l+0x280>
 80170dc:	2a2d      	cmp	r2, #45	; 0x2d
 80170de:	d077      	beq.n	80171d0 <_strtod_l+0x290>
 80170e0:	f04f 0e00 	mov.w	lr, #0
 80170e4:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80170e8:	2d09      	cmp	r5, #9
 80170ea:	d97f      	bls.n	80171ec <_strtod_l+0x2ac>
 80170ec:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 80170f0:	2500      	movs	r5, #0
 80170f2:	e09b      	b.n	801722c <_strtod_l+0x2ec>
 80170f4:	2300      	movs	r3, #0
 80170f6:	e7c3      	b.n	8017080 <_strtod_l+0x140>
 80170f8:	9906      	ldr	r1, [sp, #24]
 80170fa:	2908      	cmp	r1, #8
 80170fc:	bfdd      	ittte	le
 80170fe:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8017100:	fb02 3301 	mlale	r3, r2, r1, r3
 8017104:	9309      	strle	r3, [sp, #36]	; 0x24
 8017106:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801710a:	9b06      	ldr	r3, [sp, #24]
 801710c:	3001      	adds	r0, #1
 801710e:	3301      	adds	r3, #1
 8017110:	9306      	str	r3, [sp, #24]
 8017112:	9011      	str	r0, [sp, #68]	; 0x44
 8017114:	e7be      	b.n	8017094 <_strtod_l+0x154>
 8017116:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017118:	195a      	adds	r2, r3, r5
 801711a:	9211      	str	r2, [sp, #68]	; 0x44
 801711c:	5d5a      	ldrb	r2, [r3, r5]
 801711e:	9b06      	ldr	r3, [sp, #24]
 8017120:	b3a3      	cbz	r3, 801718c <_strtod_l+0x24c>
 8017122:	4607      	mov	r7, r0
 8017124:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8017128:	2909      	cmp	r1, #9
 801712a:	d912      	bls.n	8017152 <_strtod_l+0x212>
 801712c:	2101      	movs	r1, #1
 801712e:	e7c3      	b.n	80170b8 <_strtod_l+0x178>
 8017130:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017132:	1c5a      	adds	r2, r3, #1
 8017134:	9211      	str	r2, [sp, #68]	; 0x44
 8017136:	785a      	ldrb	r2, [r3, #1]
 8017138:	3001      	adds	r0, #1
 801713a:	2a30      	cmp	r2, #48	; 0x30
 801713c:	d0f8      	beq.n	8017130 <_strtod_l+0x1f0>
 801713e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8017142:	2b08      	cmp	r3, #8
 8017144:	f200 8497 	bhi.w	8017a76 <_strtod_l+0xb36>
 8017148:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801714a:	930a      	str	r3, [sp, #40]	; 0x28
 801714c:	4607      	mov	r7, r0
 801714e:	2000      	movs	r0, #0
 8017150:	4603      	mov	r3, r0
 8017152:	3a30      	subs	r2, #48	; 0x30
 8017154:	f100 0101 	add.w	r1, r0, #1
 8017158:	d012      	beq.n	8017180 <_strtod_l+0x240>
 801715a:	440f      	add	r7, r1
 801715c:	eb00 0c03 	add.w	ip, r0, r3
 8017160:	4619      	mov	r1, r3
 8017162:	250a      	movs	r5, #10
 8017164:	4561      	cmp	r1, ip
 8017166:	d113      	bne.n	8017190 <_strtod_l+0x250>
 8017168:	1819      	adds	r1, r3, r0
 801716a:	2908      	cmp	r1, #8
 801716c:	f103 0301 	add.w	r3, r3, #1
 8017170:	4403      	add	r3, r0
 8017172:	dc1c      	bgt.n	80171ae <_strtod_l+0x26e>
 8017174:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017176:	210a      	movs	r1, #10
 8017178:	fb01 2200 	mla	r2, r1, r0, r2
 801717c:	9209      	str	r2, [sp, #36]	; 0x24
 801717e:	2100      	movs	r1, #0
 8017180:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017182:	1c50      	adds	r0, r2, #1
 8017184:	9011      	str	r0, [sp, #68]	; 0x44
 8017186:	7852      	ldrb	r2, [r2, #1]
 8017188:	4608      	mov	r0, r1
 801718a:	e7cb      	b.n	8017124 <_strtod_l+0x1e4>
 801718c:	9806      	ldr	r0, [sp, #24]
 801718e:	e7d4      	b.n	801713a <_strtod_l+0x1fa>
 8017190:	2908      	cmp	r1, #8
 8017192:	dc04      	bgt.n	801719e <_strtod_l+0x25e>
 8017194:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8017196:	436e      	muls	r6, r5
 8017198:	9609      	str	r6, [sp, #36]	; 0x24
 801719a:	3101      	adds	r1, #1
 801719c:	e7e2      	b.n	8017164 <_strtod_l+0x224>
 801719e:	f101 0e01 	add.w	lr, r1, #1
 80171a2:	f1be 0f10 	cmp.w	lr, #16
 80171a6:	bfd8      	it	le
 80171a8:	fb05 fa0a 	mulle.w	sl, r5, sl
 80171ac:	e7f5      	b.n	801719a <_strtod_l+0x25a>
 80171ae:	2b10      	cmp	r3, #16
 80171b0:	bfdc      	itt	le
 80171b2:	210a      	movle	r1, #10
 80171b4:	fb01 2a0a 	mlale	sl, r1, sl, r2
 80171b8:	e7e1      	b.n	801717e <_strtod_l+0x23e>
 80171ba:	2700      	movs	r7, #0
 80171bc:	2101      	movs	r1, #1
 80171be:	e780      	b.n	80170c2 <_strtod_l+0x182>
 80171c0:	f04f 0e00 	mov.w	lr, #0
 80171c4:	f10b 0202 	add.w	r2, fp, #2
 80171c8:	9211      	str	r2, [sp, #68]	; 0x44
 80171ca:	f89b 2002 	ldrb.w	r2, [fp, #2]
 80171ce:	e789      	b.n	80170e4 <_strtod_l+0x1a4>
 80171d0:	f04f 0e01 	mov.w	lr, #1
 80171d4:	e7f6      	b.n	80171c4 <_strtod_l+0x284>
 80171d6:	bf00      	nop
 80171d8:	0801afe0 	.word	0x0801afe0
 80171dc:	0801ad94 	.word	0x0801ad94
 80171e0:	7ff00000 	.word	0x7ff00000
 80171e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80171e6:	1c55      	adds	r5, r2, #1
 80171e8:	9511      	str	r5, [sp, #68]	; 0x44
 80171ea:	7852      	ldrb	r2, [r2, #1]
 80171ec:	2a30      	cmp	r2, #48	; 0x30
 80171ee:	d0f9      	beq.n	80171e4 <_strtod_l+0x2a4>
 80171f0:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 80171f4:	2d08      	cmp	r5, #8
 80171f6:	f63f af7b 	bhi.w	80170f0 <_strtod_l+0x1b0>
 80171fa:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80171fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017200:	9207      	str	r2, [sp, #28]
 8017202:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017204:	1c55      	adds	r5, r2, #1
 8017206:	9511      	str	r5, [sp, #68]	; 0x44
 8017208:	7852      	ldrb	r2, [r2, #1]
 801720a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 801720e:	2e09      	cmp	r6, #9
 8017210:	d937      	bls.n	8017282 <_strtod_l+0x342>
 8017212:	9e07      	ldr	r6, [sp, #28]
 8017214:	1bad      	subs	r5, r5, r6
 8017216:	2d08      	cmp	r5, #8
 8017218:	f644 651f 	movw	r5, #19999	; 0x4e1f
 801721c:	dc02      	bgt.n	8017224 <_strtod_l+0x2e4>
 801721e:	4565      	cmp	r5, ip
 8017220:	bfa8      	it	ge
 8017222:	4665      	movge	r5, ip
 8017224:	f1be 0f00 	cmp.w	lr, #0
 8017228:	d000      	beq.n	801722c <_strtod_l+0x2ec>
 801722a:	426d      	negs	r5, r5
 801722c:	2b00      	cmp	r3, #0
 801722e:	d14d      	bne.n	80172cc <_strtod_l+0x38c>
 8017230:	9b04      	ldr	r3, [sp, #16]
 8017232:	4303      	orrs	r3, r0
 8017234:	f47f aec8 	bne.w	8016fc8 <_strtod_l+0x88>
 8017238:	2900      	cmp	r1, #0
 801723a:	f47f aee2 	bne.w	8017002 <_strtod_l+0xc2>
 801723e:	2a69      	cmp	r2, #105	; 0x69
 8017240:	d027      	beq.n	8017292 <_strtod_l+0x352>
 8017242:	dc24      	bgt.n	801728e <_strtod_l+0x34e>
 8017244:	2a49      	cmp	r2, #73	; 0x49
 8017246:	d024      	beq.n	8017292 <_strtod_l+0x352>
 8017248:	2a4e      	cmp	r2, #78	; 0x4e
 801724a:	f47f aeda 	bne.w	8017002 <_strtod_l+0xc2>
 801724e:	4996      	ldr	r1, [pc, #600]	; (80174a8 <_strtod_l+0x568>)
 8017250:	a811      	add	r0, sp, #68	; 0x44
 8017252:	f001 fd6f 	bl	8018d34 <__match>
 8017256:	2800      	cmp	r0, #0
 8017258:	f43f aed3 	beq.w	8017002 <_strtod_l+0xc2>
 801725c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801725e:	781b      	ldrb	r3, [r3, #0]
 8017260:	2b28      	cmp	r3, #40	; 0x28
 8017262:	d12d      	bne.n	80172c0 <_strtod_l+0x380>
 8017264:	4991      	ldr	r1, [pc, #580]	; (80174ac <_strtod_l+0x56c>)
 8017266:	aa14      	add	r2, sp, #80	; 0x50
 8017268:	a811      	add	r0, sp, #68	; 0x44
 801726a:	f001 fd77 	bl	8018d5c <__hexnan>
 801726e:	2805      	cmp	r0, #5
 8017270:	d126      	bne.n	80172c0 <_strtod_l+0x380>
 8017272:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017274:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8017278:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 801727c:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8017280:	e6a2      	b.n	8016fc8 <_strtod_l+0x88>
 8017282:	250a      	movs	r5, #10
 8017284:	fb05 250c 	mla	r5, r5, ip, r2
 8017288:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 801728c:	e7b9      	b.n	8017202 <_strtod_l+0x2c2>
 801728e:	2a6e      	cmp	r2, #110	; 0x6e
 8017290:	e7db      	b.n	801724a <_strtod_l+0x30a>
 8017292:	4987      	ldr	r1, [pc, #540]	; (80174b0 <_strtod_l+0x570>)
 8017294:	a811      	add	r0, sp, #68	; 0x44
 8017296:	f001 fd4d 	bl	8018d34 <__match>
 801729a:	2800      	cmp	r0, #0
 801729c:	f43f aeb1 	beq.w	8017002 <_strtod_l+0xc2>
 80172a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80172a2:	4984      	ldr	r1, [pc, #528]	; (80174b4 <_strtod_l+0x574>)
 80172a4:	3b01      	subs	r3, #1
 80172a6:	a811      	add	r0, sp, #68	; 0x44
 80172a8:	9311      	str	r3, [sp, #68]	; 0x44
 80172aa:	f001 fd43 	bl	8018d34 <__match>
 80172ae:	b910      	cbnz	r0, 80172b6 <_strtod_l+0x376>
 80172b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80172b2:	3301      	adds	r3, #1
 80172b4:	9311      	str	r3, [sp, #68]	; 0x44
 80172b6:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80174c8 <_strtod_l+0x588>
 80172ba:	f04f 0800 	mov.w	r8, #0
 80172be:	e683      	b.n	8016fc8 <_strtod_l+0x88>
 80172c0:	487d      	ldr	r0, [pc, #500]	; (80174b8 <_strtod_l+0x578>)
 80172c2:	f002 fd15 	bl	8019cf0 <nan>
 80172c6:	ec59 8b10 	vmov	r8, r9, d0
 80172ca:	e67d      	b.n	8016fc8 <_strtod_l+0x88>
 80172cc:	1bea      	subs	r2, r5, r7
 80172ce:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 80172d2:	9207      	str	r2, [sp, #28]
 80172d4:	9a06      	ldr	r2, [sp, #24]
 80172d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80172da:	2a00      	cmp	r2, #0
 80172dc:	bf08      	it	eq
 80172de:	461a      	moveq	r2, r3
 80172e0:	2b10      	cmp	r3, #16
 80172e2:	9206      	str	r2, [sp, #24]
 80172e4:	461a      	mov	r2, r3
 80172e6:	bfa8      	it	ge
 80172e8:	2210      	movge	r2, #16
 80172ea:	2b09      	cmp	r3, #9
 80172ec:	ec59 8b17 	vmov	r8, r9, d7
 80172f0:	dd0c      	ble.n	801730c <_strtod_l+0x3cc>
 80172f2:	4972      	ldr	r1, [pc, #456]	; (80174bc <_strtod_l+0x57c>)
 80172f4:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 80172f8:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 80172fc:	ee06 aa90 	vmov	s13, sl
 8017300:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8017304:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017308:	ec59 8b16 	vmov	r8, r9, d6
 801730c:	2b0f      	cmp	r3, #15
 801730e:	dc36      	bgt.n	801737e <_strtod_l+0x43e>
 8017310:	9907      	ldr	r1, [sp, #28]
 8017312:	2900      	cmp	r1, #0
 8017314:	f43f ae58 	beq.w	8016fc8 <_strtod_l+0x88>
 8017318:	dd23      	ble.n	8017362 <_strtod_l+0x422>
 801731a:	2916      	cmp	r1, #22
 801731c:	dc0b      	bgt.n	8017336 <_strtod_l+0x3f6>
 801731e:	4b67      	ldr	r3, [pc, #412]	; (80174bc <_strtod_l+0x57c>)
 8017320:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8017324:	ed93 7b00 	vldr	d7, [r3]
 8017328:	ec49 8b16 	vmov	d6, r8, r9
 801732c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017330:	ec59 8b17 	vmov	r8, r9, d7
 8017334:	e648      	b.n	8016fc8 <_strtod_l+0x88>
 8017336:	9807      	ldr	r0, [sp, #28]
 8017338:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 801733c:	4281      	cmp	r1, r0
 801733e:	db1e      	blt.n	801737e <_strtod_l+0x43e>
 8017340:	4a5e      	ldr	r2, [pc, #376]	; (80174bc <_strtod_l+0x57c>)
 8017342:	f1c3 030f 	rsb	r3, r3, #15
 8017346:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 801734a:	ed91 7b00 	vldr	d7, [r1]
 801734e:	ec49 8b16 	vmov	d6, r8, r9
 8017352:	1ac3      	subs	r3, r0, r3
 8017354:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8017358:	ee27 7b06 	vmul.f64	d7, d7, d6
 801735c:	ed92 6b00 	vldr	d6, [r2]
 8017360:	e7e4      	b.n	801732c <_strtod_l+0x3ec>
 8017362:	9907      	ldr	r1, [sp, #28]
 8017364:	3116      	adds	r1, #22
 8017366:	db0a      	blt.n	801737e <_strtod_l+0x43e>
 8017368:	4b54      	ldr	r3, [pc, #336]	; (80174bc <_strtod_l+0x57c>)
 801736a:	1b7d      	subs	r5, r7, r5
 801736c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8017370:	ed95 7b00 	vldr	d7, [r5]
 8017374:	ec49 8b16 	vmov	d6, r8, r9
 8017378:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801737c:	e7d8      	b.n	8017330 <_strtod_l+0x3f0>
 801737e:	9907      	ldr	r1, [sp, #28]
 8017380:	1a9a      	subs	r2, r3, r2
 8017382:	440a      	add	r2, r1
 8017384:	2a00      	cmp	r2, #0
 8017386:	dd6f      	ble.n	8017468 <_strtod_l+0x528>
 8017388:	f012 000f 	ands.w	r0, r2, #15
 801738c:	d00a      	beq.n	80173a4 <_strtod_l+0x464>
 801738e:	494b      	ldr	r1, [pc, #300]	; (80174bc <_strtod_l+0x57c>)
 8017390:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017394:	ed91 7b00 	vldr	d7, [r1]
 8017398:	ec49 8b16 	vmov	d6, r8, r9
 801739c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80173a0:	ec59 8b17 	vmov	r8, r9, d7
 80173a4:	f032 020f 	bics.w	r2, r2, #15
 80173a8:	d04f      	beq.n	801744a <_strtod_l+0x50a>
 80173aa:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 80173ae:	dd22      	ble.n	80173f6 <_strtod_l+0x4b6>
 80173b0:	2500      	movs	r5, #0
 80173b2:	462e      	mov	r6, r5
 80173b4:	9506      	str	r5, [sp, #24]
 80173b6:	462f      	mov	r7, r5
 80173b8:	2322      	movs	r3, #34	; 0x22
 80173ba:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80174c8 <_strtod_l+0x588>
 80173be:	6023      	str	r3, [r4, #0]
 80173c0:	f04f 0800 	mov.w	r8, #0
 80173c4:	9b06      	ldr	r3, [sp, #24]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	f43f adfe 	beq.w	8016fc8 <_strtod_l+0x88>
 80173cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80173ce:	4620      	mov	r0, r4
 80173d0:	f001 fdbe 	bl	8018f50 <_Bfree>
 80173d4:	4639      	mov	r1, r7
 80173d6:	4620      	mov	r0, r4
 80173d8:	f001 fdba 	bl	8018f50 <_Bfree>
 80173dc:	4631      	mov	r1, r6
 80173de:	4620      	mov	r0, r4
 80173e0:	f001 fdb6 	bl	8018f50 <_Bfree>
 80173e4:	9906      	ldr	r1, [sp, #24]
 80173e6:	4620      	mov	r0, r4
 80173e8:	f001 fdb2 	bl	8018f50 <_Bfree>
 80173ec:	4629      	mov	r1, r5
 80173ee:	4620      	mov	r0, r4
 80173f0:	f001 fdae 	bl	8018f50 <_Bfree>
 80173f4:	e5e8      	b.n	8016fc8 <_strtod_l+0x88>
 80173f6:	2000      	movs	r0, #0
 80173f8:	ec49 8b17 	vmov	d7, r8, r9
 80173fc:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80174c0 <_strtod_l+0x580>
 8017400:	1112      	asrs	r2, r2, #4
 8017402:	4601      	mov	r1, r0
 8017404:	2a01      	cmp	r2, #1
 8017406:	dc23      	bgt.n	8017450 <_strtod_l+0x510>
 8017408:	b108      	cbz	r0, 801740e <_strtod_l+0x4ce>
 801740a:	ec59 8b17 	vmov	r8, r9, d7
 801740e:	4a2c      	ldr	r2, [pc, #176]	; (80174c0 <_strtod_l+0x580>)
 8017410:	482c      	ldr	r0, [pc, #176]	; (80174c4 <_strtod_l+0x584>)
 8017412:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8017416:	ed92 7b00 	vldr	d7, [r2]
 801741a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801741e:	ec49 8b16 	vmov	d6, r8, r9
 8017422:	4a29      	ldr	r2, [pc, #164]	; (80174c8 <_strtod_l+0x588>)
 8017424:	ee27 7b06 	vmul.f64	d7, d7, d6
 8017428:	ee17 1a90 	vmov	r1, s15
 801742c:	400a      	ands	r2, r1
 801742e:	4282      	cmp	r2, r0
 8017430:	ec59 8b17 	vmov	r8, r9, d7
 8017434:	d8bc      	bhi.n	80173b0 <_strtod_l+0x470>
 8017436:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801743a:	4282      	cmp	r2, r0
 801743c:	bf86      	itte	hi
 801743e:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 80174cc <_strtod_l+0x58c>
 8017442:	f04f 38ff 	movhi.w	r8, #4294967295
 8017446:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 801744a:	2200      	movs	r2, #0
 801744c:	9204      	str	r2, [sp, #16]
 801744e:	e078      	b.n	8017542 <_strtod_l+0x602>
 8017450:	07d6      	lsls	r6, r2, #31
 8017452:	d504      	bpl.n	801745e <_strtod_l+0x51e>
 8017454:	ed9c 6b00 	vldr	d6, [ip]
 8017458:	2001      	movs	r0, #1
 801745a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801745e:	3101      	adds	r1, #1
 8017460:	1052      	asrs	r2, r2, #1
 8017462:	f10c 0c08 	add.w	ip, ip, #8
 8017466:	e7cd      	b.n	8017404 <_strtod_l+0x4c4>
 8017468:	d0ef      	beq.n	801744a <_strtod_l+0x50a>
 801746a:	4252      	negs	r2, r2
 801746c:	f012 000f 	ands.w	r0, r2, #15
 8017470:	d00a      	beq.n	8017488 <_strtod_l+0x548>
 8017472:	4912      	ldr	r1, [pc, #72]	; (80174bc <_strtod_l+0x57c>)
 8017474:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8017478:	ed91 7b00 	vldr	d7, [r1]
 801747c:	ec49 8b16 	vmov	d6, r8, r9
 8017480:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8017484:	ec59 8b17 	vmov	r8, r9, d7
 8017488:	1112      	asrs	r2, r2, #4
 801748a:	d0de      	beq.n	801744a <_strtod_l+0x50a>
 801748c:	2a1f      	cmp	r2, #31
 801748e:	dd1f      	ble.n	80174d0 <_strtod_l+0x590>
 8017490:	2500      	movs	r5, #0
 8017492:	462e      	mov	r6, r5
 8017494:	9506      	str	r5, [sp, #24]
 8017496:	462f      	mov	r7, r5
 8017498:	2322      	movs	r3, #34	; 0x22
 801749a:	f04f 0800 	mov.w	r8, #0
 801749e:	f04f 0900 	mov.w	r9, #0
 80174a2:	6023      	str	r3, [r4, #0]
 80174a4:	e78e      	b.n	80173c4 <_strtod_l+0x484>
 80174a6:	bf00      	nop
 80174a8:	0801ad65 	.word	0x0801ad65
 80174ac:	0801ada8 	.word	0x0801ada8
 80174b0:	0801ad5d 	.word	0x0801ad5d
 80174b4:	0801aeec 	.word	0x0801aeec
 80174b8:	0801b198 	.word	0x0801b198
 80174bc:	0801b078 	.word	0x0801b078
 80174c0:	0801b050 	.word	0x0801b050
 80174c4:	7ca00000 	.word	0x7ca00000
 80174c8:	7ff00000 	.word	0x7ff00000
 80174cc:	7fefffff 	.word	0x7fefffff
 80174d0:	f012 0110 	ands.w	r1, r2, #16
 80174d4:	bf18      	it	ne
 80174d6:	216a      	movne	r1, #106	; 0x6a
 80174d8:	9104      	str	r1, [sp, #16]
 80174da:	ec49 8b17 	vmov	d7, r8, r9
 80174de:	49be      	ldr	r1, [pc, #760]	; (80177d8 <_strtod_l+0x898>)
 80174e0:	2000      	movs	r0, #0
 80174e2:	07d6      	lsls	r6, r2, #31
 80174e4:	d504      	bpl.n	80174f0 <_strtod_l+0x5b0>
 80174e6:	ed91 6b00 	vldr	d6, [r1]
 80174ea:	2001      	movs	r0, #1
 80174ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80174f0:	1052      	asrs	r2, r2, #1
 80174f2:	f101 0108 	add.w	r1, r1, #8
 80174f6:	d1f4      	bne.n	80174e2 <_strtod_l+0x5a2>
 80174f8:	b108      	cbz	r0, 80174fe <_strtod_l+0x5be>
 80174fa:	ec59 8b17 	vmov	r8, r9, d7
 80174fe:	9a04      	ldr	r2, [sp, #16]
 8017500:	b1c2      	cbz	r2, 8017534 <_strtod_l+0x5f4>
 8017502:	f3c9 510a 	ubfx	r1, r9, #20, #11
 8017506:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 801750a:	2a00      	cmp	r2, #0
 801750c:	4648      	mov	r0, r9
 801750e:	dd11      	ble.n	8017534 <_strtod_l+0x5f4>
 8017510:	2a1f      	cmp	r2, #31
 8017512:	f340 812e 	ble.w	8017772 <_strtod_l+0x832>
 8017516:	2a34      	cmp	r2, #52	; 0x34
 8017518:	bfde      	ittt	le
 801751a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 801751e:	f04f 32ff 	movle.w	r2, #4294967295
 8017522:	fa02 f101 	lslle.w	r1, r2, r1
 8017526:	f04f 0800 	mov.w	r8, #0
 801752a:	bfcc      	ite	gt
 801752c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8017530:	ea01 0900 	andle.w	r9, r1, r0
 8017534:	ec49 8b17 	vmov	d7, r8, r9
 8017538:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801753c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017540:	d0a6      	beq.n	8017490 <_strtod_l+0x550>
 8017542:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017544:	9200      	str	r2, [sp, #0]
 8017546:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017548:	9a06      	ldr	r2, [sp, #24]
 801754a:	4620      	mov	r0, r4
 801754c:	f001 fd68 	bl	8019020 <__s2b>
 8017550:	9006      	str	r0, [sp, #24]
 8017552:	2800      	cmp	r0, #0
 8017554:	f43f af2c 	beq.w	80173b0 <_strtod_l+0x470>
 8017558:	9b07      	ldr	r3, [sp, #28]
 801755a:	1b7d      	subs	r5, r7, r5
 801755c:	2b00      	cmp	r3, #0
 801755e:	bfb4      	ite	lt
 8017560:	462b      	movlt	r3, r5
 8017562:	2300      	movge	r3, #0
 8017564:	9309      	str	r3, [sp, #36]	; 0x24
 8017566:	9b07      	ldr	r3, [sp, #28]
 8017568:	ed9f 9b93 	vldr	d9, [pc, #588]	; 80177b8 <_strtod_l+0x878>
 801756c:	ed9f ab94 	vldr	d10, [pc, #592]	; 80177c0 <_strtod_l+0x880>
 8017570:	ed9f bb95 	vldr	d11, [pc, #596]	; 80177c8 <_strtod_l+0x888>
 8017574:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017578:	2500      	movs	r5, #0
 801757a:	930c      	str	r3, [sp, #48]	; 0x30
 801757c:	462e      	mov	r6, r5
 801757e:	9b06      	ldr	r3, [sp, #24]
 8017580:	4620      	mov	r0, r4
 8017582:	6859      	ldr	r1, [r3, #4]
 8017584:	f001 fca4 	bl	8018ed0 <_Balloc>
 8017588:	4607      	mov	r7, r0
 801758a:	2800      	cmp	r0, #0
 801758c:	f43f af14 	beq.w	80173b8 <_strtod_l+0x478>
 8017590:	9b06      	ldr	r3, [sp, #24]
 8017592:	691a      	ldr	r2, [r3, #16]
 8017594:	3202      	adds	r2, #2
 8017596:	f103 010c 	add.w	r1, r3, #12
 801759a:	0092      	lsls	r2, r2, #2
 801759c:	300c      	adds	r0, #12
 801759e:	f7fe fe31 	bl	8016204 <memcpy>
 80175a2:	ec49 8b10 	vmov	d0, r8, r9
 80175a6:	aa14      	add	r2, sp, #80	; 0x50
 80175a8:	a913      	add	r1, sp, #76	; 0x4c
 80175aa:	4620      	mov	r0, r4
 80175ac:	f002 f87e 	bl	80196ac <__d2b>
 80175b0:	ec49 8b18 	vmov	d8, r8, r9
 80175b4:	9012      	str	r0, [sp, #72]	; 0x48
 80175b6:	2800      	cmp	r0, #0
 80175b8:	f43f aefe 	beq.w	80173b8 <_strtod_l+0x478>
 80175bc:	2101      	movs	r1, #1
 80175be:	4620      	mov	r0, r4
 80175c0:	f001 fdc8 	bl	8019154 <__i2b>
 80175c4:	4606      	mov	r6, r0
 80175c6:	2800      	cmp	r0, #0
 80175c8:	f43f aef6 	beq.w	80173b8 <_strtod_l+0x478>
 80175cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80175ce:	9914      	ldr	r1, [sp, #80]	; 0x50
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	bfab      	itete	ge
 80175d4:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 80175d6:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 80175d8:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 80175dc:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 80175e0:	bfac      	ite	ge
 80175e2:	eb03 0b02 	addge.w	fp, r3, r2
 80175e6:	eba2 0a03 	sublt.w	sl, r2, r3
 80175ea:	9a04      	ldr	r2, [sp, #16]
 80175ec:	1a9b      	subs	r3, r3, r2
 80175ee:	440b      	add	r3, r1
 80175f0:	4a7a      	ldr	r2, [pc, #488]	; (80177dc <_strtod_l+0x89c>)
 80175f2:	3b01      	subs	r3, #1
 80175f4:	4293      	cmp	r3, r2
 80175f6:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 80175fa:	f280 80cd 	bge.w	8017798 <_strtod_l+0x858>
 80175fe:	1ad2      	subs	r2, r2, r3
 8017600:	2a1f      	cmp	r2, #31
 8017602:	eba1 0102 	sub.w	r1, r1, r2
 8017606:	f04f 0001 	mov.w	r0, #1
 801760a:	f300 80b9 	bgt.w	8017780 <_strtod_l+0x840>
 801760e:	fa00 f302 	lsl.w	r3, r0, r2
 8017612:	930b      	str	r3, [sp, #44]	; 0x2c
 8017614:	2300      	movs	r3, #0
 8017616:	930a      	str	r3, [sp, #40]	; 0x28
 8017618:	eb0b 0301 	add.w	r3, fp, r1
 801761c:	9a04      	ldr	r2, [sp, #16]
 801761e:	459b      	cmp	fp, r3
 8017620:	448a      	add	sl, r1
 8017622:	4492      	add	sl, r2
 8017624:	465a      	mov	r2, fp
 8017626:	bfa8      	it	ge
 8017628:	461a      	movge	r2, r3
 801762a:	4552      	cmp	r2, sl
 801762c:	bfa8      	it	ge
 801762e:	4652      	movge	r2, sl
 8017630:	2a00      	cmp	r2, #0
 8017632:	bfc2      	ittt	gt
 8017634:	1a9b      	subgt	r3, r3, r2
 8017636:	ebaa 0a02 	subgt.w	sl, sl, r2
 801763a:	ebab 0b02 	subgt.w	fp, fp, r2
 801763e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017640:	2a00      	cmp	r2, #0
 8017642:	dd18      	ble.n	8017676 <_strtod_l+0x736>
 8017644:	4631      	mov	r1, r6
 8017646:	4620      	mov	r0, r4
 8017648:	930f      	str	r3, [sp, #60]	; 0x3c
 801764a:	f001 fe43 	bl	80192d4 <__pow5mult>
 801764e:	4606      	mov	r6, r0
 8017650:	2800      	cmp	r0, #0
 8017652:	f43f aeb1 	beq.w	80173b8 <_strtod_l+0x478>
 8017656:	4601      	mov	r1, r0
 8017658:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801765a:	4620      	mov	r0, r4
 801765c:	f001 fd90 	bl	8019180 <__multiply>
 8017660:	900e      	str	r0, [sp, #56]	; 0x38
 8017662:	2800      	cmp	r0, #0
 8017664:	f43f aea8 	beq.w	80173b8 <_strtod_l+0x478>
 8017668:	9912      	ldr	r1, [sp, #72]	; 0x48
 801766a:	4620      	mov	r0, r4
 801766c:	f001 fc70 	bl	8018f50 <_Bfree>
 8017670:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017674:	9212      	str	r2, [sp, #72]	; 0x48
 8017676:	2b00      	cmp	r3, #0
 8017678:	f300 8093 	bgt.w	80177a2 <_strtod_l+0x862>
 801767c:	9b07      	ldr	r3, [sp, #28]
 801767e:	2b00      	cmp	r3, #0
 8017680:	dd08      	ble.n	8017694 <_strtod_l+0x754>
 8017682:	4639      	mov	r1, r7
 8017684:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017686:	4620      	mov	r0, r4
 8017688:	f001 fe24 	bl	80192d4 <__pow5mult>
 801768c:	4607      	mov	r7, r0
 801768e:	2800      	cmp	r0, #0
 8017690:	f43f ae92 	beq.w	80173b8 <_strtod_l+0x478>
 8017694:	f1ba 0f00 	cmp.w	sl, #0
 8017698:	dd08      	ble.n	80176ac <_strtod_l+0x76c>
 801769a:	4639      	mov	r1, r7
 801769c:	4652      	mov	r2, sl
 801769e:	4620      	mov	r0, r4
 80176a0:	f001 fe72 	bl	8019388 <__lshift>
 80176a4:	4607      	mov	r7, r0
 80176a6:	2800      	cmp	r0, #0
 80176a8:	f43f ae86 	beq.w	80173b8 <_strtod_l+0x478>
 80176ac:	f1bb 0f00 	cmp.w	fp, #0
 80176b0:	dd08      	ble.n	80176c4 <_strtod_l+0x784>
 80176b2:	4631      	mov	r1, r6
 80176b4:	465a      	mov	r2, fp
 80176b6:	4620      	mov	r0, r4
 80176b8:	f001 fe66 	bl	8019388 <__lshift>
 80176bc:	4606      	mov	r6, r0
 80176be:	2800      	cmp	r0, #0
 80176c0:	f43f ae7a 	beq.w	80173b8 <_strtod_l+0x478>
 80176c4:	9912      	ldr	r1, [sp, #72]	; 0x48
 80176c6:	463a      	mov	r2, r7
 80176c8:	4620      	mov	r0, r4
 80176ca:	f001 fee9 	bl	80194a0 <__mdiff>
 80176ce:	4605      	mov	r5, r0
 80176d0:	2800      	cmp	r0, #0
 80176d2:	f43f ae71 	beq.w	80173b8 <_strtod_l+0x478>
 80176d6:	2300      	movs	r3, #0
 80176d8:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 80176dc:	60c3      	str	r3, [r0, #12]
 80176de:	4631      	mov	r1, r6
 80176e0:	f001 fec2 	bl	8019468 <__mcmp>
 80176e4:	2800      	cmp	r0, #0
 80176e6:	da7d      	bge.n	80177e4 <_strtod_l+0x8a4>
 80176e8:	ea5a 0308 	orrs.w	r3, sl, r8
 80176ec:	f040 80a3 	bne.w	8017836 <_strtod_l+0x8f6>
 80176f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	f040 809e 	bne.w	8017836 <_strtod_l+0x8f6>
 80176fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80176fe:	0d1b      	lsrs	r3, r3, #20
 8017700:	051b      	lsls	r3, r3, #20
 8017702:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8017706:	f240 8096 	bls.w	8017836 <_strtod_l+0x8f6>
 801770a:	696b      	ldr	r3, [r5, #20]
 801770c:	b91b      	cbnz	r3, 8017716 <_strtod_l+0x7d6>
 801770e:	692b      	ldr	r3, [r5, #16]
 8017710:	2b01      	cmp	r3, #1
 8017712:	f340 8090 	ble.w	8017836 <_strtod_l+0x8f6>
 8017716:	4629      	mov	r1, r5
 8017718:	2201      	movs	r2, #1
 801771a:	4620      	mov	r0, r4
 801771c:	f001 fe34 	bl	8019388 <__lshift>
 8017720:	4631      	mov	r1, r6
 8017722:	4605      	mov	r5, r0
 8017724:	f001 fea0 	bl	8019468 <__mcmp>
 8017728:	2800      	cmp	r0, #0
 801772a:	f340 8084 	ble.w	8017836 <_strtod_l+0x8f6>
 801772e:	9904      	ldr	r1, [sp, #16]
 8017730:	4a2b      	ldr	r2, [pc, #172]	; (80177e0 <_strtod_l+0x8a0>)
 8017732:	464b      	mov	r3, r9
 8017734:	2900      	cmp	r1, #0
 8017736:	f000 809d 	beq.w	8017874 <_strtod_l+0x934>
 801773a:	ea02 0109 	and.w	r1, r2, r9
 801773e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8017742:	f300 8097 	bgt.w	8017874 <_strtod_l+0x934>
 8017746:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801774a:	f77f aea5 	ble.w	8017498 <_strtod_l+0x558>
 801774e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 80177d0 <_strtod_l+0x890>
 8017752:	ec49 8b16 	vmov	d6, r8, r9
 8017756:	ee26 7b07 	vmul.f64	d7, d6, d7
 801775a:	ed8d 7b04 	vstr	d7, [sp, #16]
 801775e:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8017762:	4313      	orrs	r3, r2
 8017764:	bf08      	it	eq
 8017766:	2322      	moveq	r3, #34	; 0x22
 8017768:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 801776c:	bf08      	it	eq
 801776e:	6023      	streq	r3, [r4, #0]
 8017770:	e62c      	b.n	80173cc <_strtod_l+0x48c>
 8017772:	f04f 31ff 	mov.w	r1, #4294967295
 8017776:	fa01 f202 	lsl.w	r2, r1, r2
 801777a:	ea02 0808 	and.w	r8, r2, r8
 801777e:	e6d9      	b.n	8017534 <_strtod_l+0x5f4>
 8017780:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8017784:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8017788:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 801778c:	33e2      	adds	r3, #226	; 0xe2
 801778e:	fa00 f303 	lsl.w	r3, r0, r3
 8017792:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 8017796:	e73f      	b.n	8017618 <_strtod_l+0x6d8>
 8017798:	2200      	movs	r2, #0
 801779a:	2301      	movs	r3, #1
 801779c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80177a0:	e73a      	b.n	8017618 <_strtod_l+0x6d8>
 80177a2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80177a4:	461a      	mov	r2, r3
 80177a6:	4620      	mov	r0, r4
 80177a8:	f001 fdee 	bl	8019388 <__lshift>
 80177ac:	9012      	str	r0, [sp, #72]	; 0x48
 80177ae:	2800      	cmp	r0, #0
 80177b0:	f47f af64 	bne.w	801767c <_strtod_l+0x73c>
 80177b4:	e600      	b.n	80173b8 <_strtod_l+0x478>
 80177b6:	bf00      	nop
 80177b8:	94a03595 	.word	0x94a03595
 80177bc:	3fcfffff 	.word	0x3fcfffff
 80177c0:	94a03595 	.word	0x94a03595
 80177c4:	3fdfffff 	.word	0x3fdfffff
 80177c8:	35afe535 	.word	0x35afe535
 80177cc:	3fe00000 	.word	0x3fe00000
 80177d0:	00000000 	.word	0x00000000
 80177d4:	39500000 	.word	0x39500000
 80177d8:	0801adc0 	.word	0x0801adc0
 80177dc:	fffffc02 	.word	0xfffffc02
 80177e0:	7ff00000 	.word	0x7ff00000
 80177e4:	46cb      	mov	fp, r9
 80177e6:	d15f      	bne.n	80178a8 <_strtod_l+0x968>
 80177e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80177ec:	f1ba 0f00 	cmp.w	sl, #0
 80177f0:	d02a      	beq.n	8017848 <_strtod_l+0x908>
 80177f2:	4aa7      	ldr	r2, [pc, #668]	; (8017a90 <_strtod_l+0xb50>)
 80177f4:	4293      	cmp	r3, r2
 80177f6:	d12b      	bne.n	8017850 <_strtod_l+0x910>
 80177f8:	9b04      	ldr	r3, [sp, #16]
 80177fa:	4642      	mov	r2, r8
 80177fc:	b1fb      	cbz	r3, 801783e <_strtod_l+0x8fe>
 80177fe:	4ba5      	ldr	r3, [pc, #660]	; (8017a94 <_strtod_l+0xb54>)
 8017800:	ea09 0303 	and.w	r3, r9, r3
 8017804:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8017808:	f04f 31ff 	mov.w	r1, #4294967295
 801780c:	d81a      	bhi.n	8017844 <_strtod_l+0x904>
 801780e:	0d1b      	lsrs	r3, r3, #20
 8017810:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8017814:	fa01 f303 	lsl.w	r3, r1, r3
 8017818:	429a      	cmp	r2, r3
 801781a:	d119      	bne.n	8017850 <_strtod_l+0x910>
 801781c:	4b9e      	ldr	r3, [pc, #632]	; (8017a98 <_strtod_l+0xb58>)
 801781e:	459b      	cmp	fp, r3
 8017820:	d102      	bne.n	8017828 <_strtod_l+0x8e8>
 8017822:	3201      	adds	r2, #1
 8017824:	f43f adc8 	beq.w	80173b8 <_strtod_l+0x478>
 8017828:	4b9a      	ldr	r3, [pc, #616]	; (8017a94 <_strtod_l+0xb54>)
 801782a:	ea0b 0303 	and.w	r3, fp, r3
 801782e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8017832:	f04f 0800 	mov.w	r8, #0
 8017836:	9b04      	ldr	r3, [sp, #16]
 8017838:	2b00      	cmp	r3, #0
 801783a:	d188      	bne.n	801774e <_strtod_l+0x80e>
 801783c:	e5c6      	b.n	80173cc <_strtod_l+0x48c>
 801783e:	f04f 33ff 	mov.w	r3, #4294967295
 8017842:	e7e9      	b.n	8017818 <_strtod_l+0x8d8>
 8017844:	460b      	mov	r3, r1
 8017846:	e7e7      	b.n	8017818 <_strtod_l+0x8d8>
 8017848:	ea53 0308 	orrs.w	r3, r3, r8
 801784c:	f43f af6f 	beq.w	801772e <_strtod_l+0x7ee>
 8017850:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017852:	b1cb      	cbz	r3, 8017888 <_strtod_l+0x948>
 8017854:	ea13 0f0b 	tst.w	r3, fp
 8017858:	d0ed      	beq.n	8017836 <_strtod_l+0x8f6>
 801785a:	9a04      	ldr	r2, [sp, #16]
 801785c:	4640      	mov	r0, r8
 801785e:	4649      	mov	r1, r9
 8017860:	f1ba 0f00 	cmp.w	sl, #0
 8017864:	d014      	beq.n	8017890 <_strtod_l+0x950>
 8017866:	f7ff fb51 	bl	8016f0c <sulp>
 801786a:	ee38 7b00 	vadd.f64	d7, d8, d0
 801786e:	ec59 8b17 	vmov	r8, r9, d7
 8017872:	e7e0      	b.n	8017836 <_strtod_l+0x8f6>
 8017874:	4013      	ands	r3, r2
 8017876:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801787a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 801787e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8017882:	f04f 38ff 	mov.w	r8, #4294967295
 8017886:	e7d6      	b.n	8017836 <_strtod_l+0x8f6>
 8017888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801788a:	ea13 0f08 	tst.w	r3, r8
 801788e:	e7e3      	b.n	8017858 <_strtod_l+0x918>
 8017890:	f7ff fb3c 	bl	8016f0c <sulp>
 8017894:	ee38 0b40 	vsub.f64	d0, d8, d0
 8017898:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801789c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178a0:	ec59 8b10 	vmov	r8, r9, d0
 80178a4:	d1c7      	bne.n	8017836 <_strtod_l+0x8f6>
 80178a6:	e5f7      	b.n	8017498 <_strtod_l+0x558>
 80178a8:	4631      	mov	r1, r6
 80178aa:	4628      	mov	r0, r5
 80178ac:	f001 ff5a 	bl	8019764 <__ratio>
 80178b0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80178b4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80178b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178bc:	d865      	bhi.n	801798a <_strtod_l+0xa4a>
 80178be:	f1ba 0f00 	cmp.w	sl, #0
 80178c2:	d042      	beq.n	801794a <_strtod_l+0xa0a>
 80178c4:	4b75      	ldr	r3, [pc, #468]	; (8017a9c <_strtod_l+0xb5c>)
 80178c6:	2200      	movs	r2, #0
 80178c8:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 80178cc:	4871      	ldr	r0, [pc, #452]	; (8017a94 <_strtod_l+0xb54>)
 80178ce:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 8017aa8 <_strtod_l+0xb68>
 80178d2:	ea0b 0100 	and.w	r1, fp, r0
 80178d6:	4561      	cmp	r1, ip
 80178d8:	f040 808e 	bne.w	80179f8 <_strtod_l+0xab8>
 80178dc:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 80178e0:	ec49 8b10 	vmov	d0, r8, r9
 80178e4:	ec43 2b1c 	vmov	d12, r2, r3
 80178e8:	910a      	str	r1, [sp, #40]	; 0x28
 80178ea:	f001 fe63 	bl	80195b4 <__ulp>
 80178ee:	ec49 8b1e 	vmov	d14, r8, r9
 80178f2:	4868      	ldr	r0, [pc, #416]	; (8017a94 <_strtod_l+0xb54>)
 80178f4:	eeac eb00 	vfma.f64	d14, d12, d0
 80178f8:	ee1e 3a90 	vmov	r3, s29
 80178fc:	4a68      	ldr	r2, [pc, #416]	; (8017aa0 <_strtod_l+0xb60>)
 80178fe:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017900:	4018      	ands	r0, r3
 8017902:	4290      	cmp	r0, r2
 8017904:	ec59 8b1e 	vmov	r8, r9, d14
 8017908:	d94e      	bls.n	80179a8 <_strtod_l+0xa68>
 801790a:	ee18 3a90 	vmov	r3, s17
 801790e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8017912:	4293      	cmp	r3, r2
 8017914:	d104      	bne.n	8017920 <_strtod_l+0x9e0>
 8017916:	ee18 3a10 	vmov	r3, s16
 801791a:	3301      	adds	r3, #1
 801791c:	f43f ad4c 	beq.w	80173b8 <_strtod_l+0x478>
 8017920:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8017a98 <_strtod_l+0xb58>
 8017924:	f04f 38ff 	mov.w	r8, #4294967295
 8017928:	9912      	ldr	r1, [sp, #72]	; 0x48
 801792a:	4620      	mov	r0, r4
 801792c:	f001 fb10 	bl	8018f50 <_Bfree>
 8017930:	4639      	mov	r1, r7
 8017932:	4620      	mov	r0, r4
 8017934:	f001 fb0c 	bl	8018f50 <_Bfree>
 8017938:	4631      	mov	r1, r6
 801793a:	4620      	mov	r0, r4
 801793c:	f001 fb08 	bl	8018f50 <_Bfree>
 8017940:	4629      	mov	r1, r5
 8017942:	4620      	mov	r0, r4
 8017944:	f001 fb04 	bl	8018f50 <_Bfree>
 8017948:	e619      	b.n	801757e <_strtod_l+0x63e>
 801794a:	f1b8 0f00 	cmp.w	r8, #0
 801794e:	d112      	bne.n	8017976 <_strtod_l+0xa36>
 8017950:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017954:	b9b3      	cbnz	r3, 8017984 <_strtod_l+0xa44>
 8017956:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801795a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801795e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017962:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 8017966:	bf58      	it	pl
 8017968:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 801796c:	eeb1 7b4d 	vneg.f64	d7, d13
 8017970:	ec53 2b17 	vmov	r2, r3, d7
 8017974:	e7aa      	b.n	80178cc <_strtod_l+0x98c>
 8017976:	f1b8 0f01 	cmp.w	r8, #1
 801797a:	d103      	bne.n	8017984 <_strtod_l+0xa44>
 801797c:	f1b9 0f00 	cmp.w	r9, #0
 8017980:	f43f ad8a 	beq.w	8017498 <_strtod_l+0x558>
 8017984:	4b47      	ldr	r3, [pc, #284]	; (8017aa4 <_strtod_l+0xb64>)
 8017986:	2200      	movs	r2, #0
 8017988:	e79e      	b.n	80178c8 <_strtod_l+0x988>
 801798a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 801798e:	ee20 db0d 	vmul.f64	d13, d0, d13
 8017992:	f1ba 0f00 	cmp.w	sl, #0
 8017996:	d104      	bne.n	80179a2 <_strtod_l+0xa62>
 8017998:	eeb1 7b4d 	vneg.f64	d7, d13
 801799c:	ec53 2b17 	vmov	r2, r3, d7
 80179a0:	e794      	b.n	80178cc <_strtod_l+0x98c>
 80179a2:	eeb0 7b4d 	vmov.f64	d7, d13
 80179a6:	e7f9      	b.n	801799c <_strtod_l+0xa5c>
 80179a8:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80179ac:	9b04      	ldr	r3, [sp, #16]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d1ba      	bne.n	8017928 <_strtod_l+0x9e8>
 80179b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80179b6:	0d1b      	lsrs	r3, r3, #20
 80179b8:	051b      	lsls	r3, r3, #20
 80179ba:	4299      	cmp	r1, r3
 80179bc:	d1b4      	bne.n	8017928 <_strtod_l+0x9e8>
 80179be:	ec51 0b1d 	vmov	r0, r1, d13
 80179c2:	f7e8 fed1 	bl	8000768 <__aeabi_d2lz>
 80179c6:	f7e8 fe89 	bl	80006dc <__aeabi_l2d>
 80179ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80179ce:	ec41 0b17 	vmov	d7, r0, r1
 80179d2:	ea43 0308 	orr.w	r3, r3, r8
 80179d6:	ea53 030a 	orrs.w	r3, r3, sl
 80179da:	ee3d db47 	vsub.f64	d13, d13, d7
 80179de:	d03c      	beq.n	8017a5a <_strtod_l+0xb1a>
 80179e0:	eeb4 dbca 	vcmpe.f64	d13, d10
 80179e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179e8:	f53f acf0 	bmi.w	80173cc <_strtod_l+0x48c>
 80179ec:	eeb4 dbcb 	vcmpe.f64	d13, d11
 80179f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80179f4:	dd98      	ble.n	8017928 <_strtod_l+0x9e8>
 80179f6:	e4e9      	b.n	80173cc <_strtod_l+0x48c>
 80179f8:	9804      	ldr	r0, [sp, #16]
 80179fa:	b1f0      	cbz	r0, 8017a3a <_strtod_l+0xafa>
 80179fc:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8017a00:	d81b      	bhi.n	8017a3a <_strtod_l+0xafa>
 8017a02:	ed9f 7b21 	vldr	d7, [pc, #132]	; 8017a88 <_strtod_l+0xb48>
 8017a06:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8017a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a0e:	d811      	bhi.n	8017a34 <_strtod_l+0xaf4>
 8017a10:	eebc dbcd 	vcvt.u32.f64	s26, d13
 8017a14:	ee1d 3a10 	vmov	r3, s26
 8017a18:	2b01      	cmp	r3, #1
 8017a1a:	bf38      	it	cc
 8017a1c:	2301      	movcc	r3, #1
 8017a1e:	ee0d 3a10 	vmov	s26, r3
 8017a22:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 8017a26:	f1ba 0f00 	cmp.w	sl, #0
 8017a2a:	d113      	bne.n	8017a54 <_strtod_l+0xb14>
 8017a2c:	eeb1 7b4d 	vneg.f64	d7, d13
 8017a30:	ec53 2b17 	vmov	r2, r3, d7
 8017a34:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8017a38:	1a43      	subs	r3, r0, r1
 8017a3a:	eeb0 0b48 	vmov.f64	d0, d8
 8017a3e:	ec43 2b1c 	vmov	d12, r2, r3
 8017a42:	910a      	str	r1, [sp, #40]	; 0x28
 8017a44:	f001 fdb6 	bl	80195b4 <__ulp>
 8017a48:	990a      	ldr	r1, [sp, #40]	; 0x28
 8017a4a:	eeac 8b00 	vfma.f64	d8, d12, d0
 8017a4e:	ec59 8b18 	vmov	r8, r9, d8
 8017a52:	e7ab      	b.n	80179ac <_strtod_l+0xa6c>
 8017a54:	eeb0 7b4d 	vmov.f64	d7, d13
 8017a58:	e7ea      	b.n	8017a30 <_strtod_l+0xaf0>
 8017a5a:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8017a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017a62:	f57f af61 	bpl.w	8017928 <_strtod_l+0x9e8>
 8017a66:	e4b1      	b.n	80173cc <_strtod_l+0x48c>
 8017a68:	2300      	movs	r3, #0
 8017a6a:	9308      	str	r3, [sp, #32]
 8017a6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017a6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017a70:	6013      	str	r3, [r2, #0]
 8017a72:	f7ff baad 	b.w	8016fd0 <_strtod_l+0x90>
 8017a76:	2a65      	cmp	r2, #101	; 0x65
 8017a78:	f43f ab9f 	beq.w	80171ba <_strtod_l+0x27a>
 8017a7c:	2a45      	cmp	r2, #69	; 0x45
 8017a7e:	f43f ab9c 	beq.w	80171ba <_strtod_l+0x27a>
 8017a82:	2101      	movs	r1, #1
 8017a84:	f7ff bbd4 	b.w	8017230 <_strtod_l+0x2f0>
 8017a88:	ffc00000 	.word	0xffc00000
 8017a8c:	41dfffff 	.word	0x41dfffff
 8017a90:	000fffff 	.word	0x000fffff
 8017a94:	7ff00000 	.word	0x7ff00000
 8017a98:	7fefffff 	.word	0x7fefffff
 8017a9c:	3ff00000 	.word	0x3ff00000
 8017aa0:	7c9fffff 	.word	0x7c9fffff
 8017aa4:	bff00000 	.word	0xbff00000
 8017aa8:	7fe00000 	.word	0x7fe00000

08017aac <_strtod_r>:
 8017aac:	4b01      	ldr	r3, [pc, #4]	; (8017ab4 <_strtod_r+0x8>)
 8017aae:	f7ff ba47 	b.w	8016f40 <_strtod_l>
 8017ab2:	bf00      	nop
 8017ab4:	24000168 	.word	0x24000168

08017ab8 <_strtol_l.constprop.0>:
 8017ab8:	2b01      	cmp	r3, #1
 8017aba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017abe:	d001      	beq.n	8017ac4 <_strtol_l.constprop.0+0xc>
 8017ac0:	2b24      	cmp	r3, #36	; 0x24
 8017ac2:	d906      	bls.n	8017ad2 <_strtol_l.constprop.0+0x1a>
 8017ac4:	f7fe fb74 	bl	80161b0 <__errno>
 8017ac8:	2316      	movs	r3, #22
 8017aca:	6003      	str	r3, [r0, #0]
 8017acc:	2000      	movs	r0, #0
 8017ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ad2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8017bb8 <_strtol_l.constprop.0+0x100>
 8017ad6:	460d      	mov	r5, r1
 8017ad8:	462e      	mov	r6, r5
 8017ada:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017ade:	f814 700c 	ldrb.w	r7, [r4, ip]
 8017ae2:	f017 0708 	ands.w	r7, r7, #8
 8017ae6:	d1f7      	bne.n	8017ad8 <_strtol_l.constprop.0+0x20>
 8017ae8:	2c2d      	cmp	r4, #45	; 0x2d
 8017aea:	d132      	bne.n	8017b52 <_strtol_l.constprop.0+0x9a>
 8017aec:	782c      	ldrb	r4, [r5, #0]
 8017aee:	2701      	movs	r7, #1
 8017af0:	1cb5      	adds	r5, r6, #2
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d05b      	beq.n	8017bae <_strtol_l.constprop.0+0xf6>
 8017af6:	2b10      	cmp	r3, #16
 8017af8:	d109      	bne.n	8017b0e <_strtol_l.constprop.0+0x56>
 8017afa:	2c30      	cmp	r4, #48	; 0x30
 8017afc:	d107      	bne.n	8017b0e <_strtol_l.constprop.0+0x56>
 8017afe:	782c      	ldrb	r4, [r5, #0]
 8017b00:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8017b04:	2c58      	cmp	r4, #88	; 0x58
 8017b06:	d14d      	bne.n	8017ba4 <_strtol_l.constprop.0+0xec>
 8017b08:	786c      	ldrb	r4, [r5, #1]
 8017b0a:	2310      	movs	r3, #16
 8017b0c:	3502      	adds	r5, #2
 8017b0e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8017b12:	f108 38ff 	add.w	r8, r8, #4294967295
 8017b16:	f04f 0c00 	mov.w	ip, #0
 8017b1a:	fbb8 f9f3 	udiv	r9, r8, r3
 8017b1e:	4666      	mov	r6, ip
 8017b20:	fb03 8a19 	mls	sl, r3, r9, r8
 8017b24:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8017b28:	f1be 0f09 	cmp.w	lr, #9
 8017b2c:	d816      	bhi.n	8017b5c <_strtol_l.constprop.0+0xa4>
 8017b2e:	4674      	mov	r4, lr
 8017b30:	42a3      	cmp	r3, r4
 8017b32:	dd24      	ble.n	8017b7e <_strtol_l.constprop.0+0xc6>
 8017b34:	f1bc 0f00 	cmp.w	ip, #0
 8017b38:	db1e      	blt.n	8017b78 <_strtol_l.constprop.0+0xc0>
 8017b3a:	45b1      	cmp	r9, r6
 8017b3c:	d31c      	bcc.n	8017b78 <_strtol_l.constprop.0+0xc0>
 8017b3e:	d101      	bne.n	8017b44 <_strtol_l.constprop.0+0x8c>
 8017b40:	45a2      	cmp	sl, r4
 8017b42:	db19      	blt.n	8017b78 <_strtol_l.constprop.0+0xc0>
 8017b44:	fb06 4603 	mla	r6, r6, r3, r4
 8017b48:	f04f 0c01 	mov.w	ip, #1
 8017b4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017b50:	e7e8      	b.n	8017b24 <_strtol_l.constprop.0+0x6c>
 8017b52:	2c2b      	cmp	r4, #43	; 0x2b
 8017b54:	bf04      	itt	eq
 8017b56:	782c      	ldrbeq	r4, [r5, #0]
 8017b58:	1cb5      	addeq	r5, r6, #2
 8017b5a:	e7ca      	b.n	8017af2 <_strtol_l.constprop.0+0x3a>
 8017b5c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8017b60:	f1be 0f19 	cmp.w	lr, #25
 8017b64:	d801      	bhi.n	8017b6a <_strtol_l.constprop.0+0xb2>
 8017b66:	3c37      	subs	r4, #55	; 0x37
 8017b68:	e7e2      	b.n	8017b30 <_strtol_l.constprop.0+0x78>
 8017b6a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8017b6e:	f1be 0f19 	cmp.w	lr, #25
 8017b72:	d804      	bhi.n	8017b7e <_strtol_l.constprop.0+0xc6>
 8017b74:	3c57      	subs	r4, #87	; 0x57
 8017b76:	e7db      	b.n	8017b30 <_strtol_l.constprop.0+0x78>
 8017b78:	f04f 3cff 	mov.w	ip, #4294967295
 8017b7c:	e7e6      	b.n	8017b4c <_strtol_l.constprop.0+0x94>
 8017b7e:	f1bc 0f00 	cmp.w	ip, #0
 8017b82:	da05      	bge.n	8017b90 <_strtol_l.constprop.0+0xd8>
 8017b84:	2322      	movs	r3, #34	; 0x22
 8017b86:	6003      	str	r3, [r0, #0]
 8017b88:	4646      	mov	r6, r8
 8017b8a:	b942      	cbnz	r2, 8017b9e <_strtol_l.constprop.0+0xe6>
 8017b8c:	4630      	mov	r0, r6
 8017b8e:	e79e      	b.n	8017ace <_strtol_l.constprop.0+0x16>
 8017b90:	b107      	cbz	r7, 8017b94 <_strtol_l.constprop.0+0xdc>
 8017b92:	4276      	negs	r6, r6
 8017b94:	2a00      	cmp	r2, #0
 8017b96:	d0f9      	beq.n	8017b8c <_strtol_l.constprop.0+0xd4>
 8017b98:	f1bc 0f00 	cmp.w	ip, #0
 8017b9c:	d000      	beq.n	8017ba0 <_strtol_l.constprop.0+0xe8>
 8017b9e:	1e69      	subs	r1, r5, #1
 8017ba0:	6011      	str	r1, [r2, #0]
 8017ba2:	e7f3      	b.n	8017b8c <_strtol_l.constprop.0+0xd4>
 8017ba4:	2430      	movs	r4, #48	; 0x30
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d1b1      	bne.n	8017b0e <_strtol_l.constprop.0+0x56>
 8017baa:	2308      	movs	r3, #8
 8017bac:	e7af      	b.n	8017b0e <_strtol_l.constprop.0+0x56>
 8017bae:	2c30      	cmp	r4, #48	; 0x30
 8017bb0:	d0a5      	beq.n	8017afe <_strtol_l.constprop.0+0x46>
 8017bb2:	230a      	movs	r3, #10
 8017bb4:	e7ab      	b.n	8017b0e <_strtol_l.constprop.0+0x56>
 8017bb6:	bf00      	nop
 8017bb8:	0801ade9 	.word	0x0801ade9

08017bbc <_strtol_r>:
 8017bbc:	f7ff bf7c 	b.w	8017ab8 <_strtol_l.constprop.0>

08017bc0 <quorem>:
 8017bc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017bc4:	6903      	ldr	r3, [r0, #16]
 8017bc6:	690c      	ldr	r4, [r1, #16]
 8017bc8:	42a3      	cmp	r3, r4
 8017bca:	4607      	mov	r7, r0
 8017bcc:	f2c0 8081 	blt.w	8017cd2 <quorem+0x112>
 8017bd0:	3c01      	subs	r4, #1
 8017bd2:	f101 0814 	add.w	r8, r1, #20
 8017bd6:	f100 0514 	add.w	r5, r0, #20
 8017bda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017bde:	9301      	str	r3, [sp, #4]
 8017be0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017be4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017be8:	3301      	adds	r3, #1
 8017bea:	429a      	cmp	r2, r3
 8017bec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017bf0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017bf4:	fbb2 f6f3 	udiv	r6, r2, r3
 8017bf8:	d331      	bcc.n	8017c5e <quorem+0x9e>
 8017bfa:	f04f 0e00 	mov.w	lr, #0
 8017bfe:	4640      	mov	r0, r8
 8017c00:	46ac      	mov	ip, r5
 8017c02:	46f2      	mov	sl, lr
 8017c04:	f850 2b04 	ldr.w	r2, [r0], #4
 8017c08:	b293      	uxth	r3, r2
 8017c0a:	fb06 e303 	mla	r3, r6, r3, lr
 8017c0e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017c12:	b29b      	uxth	r3, r3
 8017c14:	ebaa 0303 	sub.w	r3, sl, r3
 8017c18:	f8dc a000 	ldr.w	sl, [ip]
 8017c1c:	0c12      	lsrs	r2, r2, #16
 8017c1e:	fa13 f38a 	uxtah	r3, r3, sl
 8017c22:	fb06 e202 	mla	r2, r6, r2, lr
 8017c26:	9300      	str	r3, [sp, #0]
 8017c28:	9b00      	ldr	r3, [sp, #0]
 8017c2a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017c2e:	b292      	uxth	r2, r2
 8017c30:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8017c34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017c38:	f8bd 3000 	ldrh.w	r3, [sp]
 8017c3c:	4581      	cmp	r9, r0
 8017c3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017c42:	f84c 3b04 	str.w	r3, [ip], #4
 8017c46:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017c4a:	d2db      	bcs.n	8017c04 <quorem+0x44>
 8017c4c:	f855 300b 	ldr.w	r3, [r5, fp]
 8017c50:	b92b      	cbnz	r3, 8017c5e <quorem+0x9e>
 8017c52:	9b01      	ldr	r3, [sp, #4]
 8017c54:	3b04      	subs	r3, #4
 8017c56:	429d      	cmp	r5, r3
 8017c58:	461a      	mov	r2, r3
 8017c5a:	d32e      	bcc.n	8017cba <quorem+0xfa>
 8017c5c:	613c      	str	r4, [r7, #16]
 8017c5e:	4638      	mov	r0, r7
 8017c60:	f001 fc02 	bl	8019468 <__mcmp>
 8017c64:	2800      	cmp	r0, #0
 8017c66:	db24      	blt.n	8017cb2 <quorem+0xf2>
 8017c68:	3601      	adds	r6, #1
 8017c6a:	4628      	mov	r0, r5
 8017c6c:	f04f 0c00 	mov.w	ip, #0
 8017c70:	f858 2b04 	ldr.w	r2, [r8], #4
 8017c74:	f8d0 e000 	ldr.w	lr, [r0]
 8017c78:	b293      	uxth	r3, r2
 8017c7a:	ebac 0303 	sub.w	r3, ip, r3
 8017c7e:	0c12      	lsrs	r2, r2, #16
 8017c80:	fa13 f38e 	uxtah	r3, r3, lr
 8017c84:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017c88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017c8c:	b29b      	uxth	r3, r3
 8017c8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017c92:	45c1      	cmp	r9, r8
 8017c94:	f840 3b04 	str.w	r3, [r0], #4
 8017c98:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017c9c:	d2e8      	bcs.n	8017c70 <quorem+0xb0>
 8017c9e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017ca2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017ca6:	b922      	cbnz	r2, 8017cb2 <quorem+0xf2>
 8017ca8:	3b04      	subs	r3, #4
 8017caa:	429d      	cmp	r5, r3
 8017cac:	461a      	mov	r2, r3
 8017cae:	d30a      	bcc.n	8017cc6 <quorem+0x106>
 8017cb0:	613c      	str	r4, [r7, #16]
 8017cb2:	4630      	mov	r0, r6
 8017cb4:	b003      	add	sp, #12
 8017cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cba:	6812      	ldr	r2, [r2, #0]
 8017cbc:	3b04      	subs	r3, #4
 8017cbe:	2a00      	cmp	r2, #0
 8017cc0:	d1cc      	bne.n	8017c5c <quorem+0x9c>
 8017cc2:	3c01      	subs	r4, #1
 8017cc4:	e7c7      	b.n	8017c56 <quorem+0x96>
 8017cc6:	6812      	ldr	r2, [r2, #0]
 8017cc8:	3b04      	subs	r3, #4
 8017cca:	2a00      	cmp	r2, #0
 8017ccc:	d1f0      	bne.n	8017cb0 <quorem+0xf0>
 8017cce:	3c01      	subs	r4, #1
 8017cd0:	e7eb      	b.n	8017caa <quorem+0xea>
 8017cd2:	2000      	movs	r0, #0
 8017cd4:	e7ee      	b.n	8017cb4 <quorem+0xf4>
	...

08017cd8 <_dtoa_r>:
 8017cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cdc:	ed2d 8b02 	vpush	{d8}
 8017ce0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017ce2:	b091      	sub	sp, #68	; 0x44
 8017ce4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8017ce8:	ec59 8b10 	vmov	r8, r9, d0
 8017cec:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8017cee:	9106      	str	r1, [sp, #24]
 8017cf0:	4606      	mov	r6, r0
 8017cf2:	9208      	str	r2, [sp, #32]
 8017cf4:	930c      	str	r3, [sp, #48]	; 0x30
 8017cf6:	b975      	cbnz	r5, 8017d16 <_dtoa_r+0x3e>
 8017cf8:	2010      	movs	r0, #16
 8017cfa:	f001 f8cf 	bl	8018e9c <malloc>
 8017cfe:	4602      	mov	r2, r0
 8017d00:	6270      	str	r0, [r6, #36]	; 0x24
 8017d02:	b920      	cbnz	r0, 8017d0e <_dtoa_r+0x36>
 8017d04:	4baa      	ldr	r3, [pc, #680]	; (8017fb0 <_dtoa_r+0x2d8>)
 8017d06:	21ea      	movs	r1, #234	; 0xea
 8017d08:	48aa      	ldr	r0, [pc, #680]	; (8017fb4 <_dtoa_r+0x2dc>)
 8017d0a:	f002 f82b 	bl	8019d64 <__assert_func>
 8017d0e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017d12:	6005      	str	r5, [r0, #0]
 8017d14:	60c5      	str	r5, [r0, #12]
 8017d16:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017d18:	6819      	ldr	r1, [r3, #0]
 8017d1a:	b151      	cbz	r1, 8017d32 <_dtoa_r+0x5a>
 8017d1c:	685a      	ldr	r2, [r3, #4]
 8017d1e:	604a      	str	r2, [r1, #4]
 8017d20:	2301      	movs	r3, #1
 8017d22:	4093      	lsls	r3, r2
 8017d24:	608b      	str	r3, [r1, #8]
 8017d26:	4630      	mov	r0, r6
 8017d28:	f001 f912 	bl	8018f50 <_Bfree>
 8017d2c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017d2e:	2200      	movs	r2, #0
 8017d30:	601a      	str	r2, [r3, #0]
 8017d32:	f1b9 0300 	subs.w	r3, r9, #0
 8017d36:	bfbb      	ittet	lt
 8017d38:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017d3c:	9303      	strlt	r3, [sp, #12]
 8017d3e:	2300      	movge	r3, #0
 8017d40:	2201      	movlt	r2, #1
 8017d42:	bfac      	ite	ge
 8017d44:	6023      	strge	r3, [r4, #0]
 8017d46:	6022      	strlt	r2, [r4, #0]
 8017d48:	4b9b      	ldr	r3, [pc, #620]	; (8017fb8 <_dtoa_r+0x2e0>)
 8017d4a:	9c03      	ldr	r4, [sp, #12]
 8017d4c:	43a3      	bics	r3, r4
 8017d4e:	d11c      	bne.n	8017d8a <_dtoa_r+0xb2>
 8017d50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017d52:	f242 730f 	movw	r3, #9999	; 0x270f
 8017d56:	6013      	str	r3, [r2, #0]
 8017d58:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8017d5c:	ea53 0308 	orrs.w	r3, r3, r8
 8017d60:	f000 84fd 	beq.w	801875e <_dtoa_r+0xa86>
 8017d64:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017d66:	b963      	cbnz	r3, 8017d82 <_dtoa_r+0xaa>
 8017d68:	4b94      	ldr	r3, [pc, #592]	; (8017fbc <_dtoa_r+0x2e4>)
 8017d6a:	e01f      	b.n	8017dac <_dtoa_r+0xd4>
 8017d6c:	4b94      	ldr	r3, [pc, #592]	; (8017fc0 <_dtoa_r+0x2e8>)
 8017d6e:	9301      	str	r3, [sp, #4]
 8017d70:	3308      	adds	r3, #8
 8017d72:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8017d74:	6013      	str	r3, [r2, #0]
 8017d76:	9801      	ldr	r0, [sp, #4]
 8017d78:	b011      	add	sp, #68	; 0x44
 8017d7a:	ecbd 8b02 	vpop	{d8}
 8017d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d82:	4b8e      	ldr	r3, [pc, #568]	; (8017fbc <_dtoa_r+0x2e4>)
 8017d84:	9301      	str	r3, [sp, #4]
 8017d86:	3303      	adds	r3, #3
 8017d88:	e7f3      	b.n	8017d72 <_dtoa_r+0x9a>
 8017d8a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8017d8e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d96:	d10b      	bne.n	8017db0 <_dtoa_r+0xd8>
 8017d98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017d9a:	2301      	movs	r3, #1
 8017d9c:	6013      	str	r3, [r2, #0]
 8017d9e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	f000 84d9 	beq.w	8018758 <_dtoa_r+0xa80>
 8017da6:	4887      	ldr	r0, [pc, #540]	; (8017fc4 <_dtoa_r+0x2ec>)
 8017da8:	6018      	str	r0, [r3, #0]
 8017daa:	1e43      	subs	r3, r0, #1
 8017dac:	9301      	str	r3, [sp, #4]
 8017dae:	e7e2      	b.n	8017d76 <_dtoa_r+0x9e>
 8017db0:	a90f      	add	r1, sp, #60	; 0x3c
 8017db2:	aa0e      	add	r2, sp, #56	; 0x38
 8017db4:	4630      	mov	r0, r6
 8017db6:	eeb0 0b48 	vmov.f64	d0, d8
 8017dba:	f001 fc77 	bl	80196ac <__d2b>
 8017dbe:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8017dc2:	4605      	mov	r5, r0
 8017dc4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8017dc6:	2900      	cmp	r1, #0
 8017dc8:	d046      	beq.n	8017e58 <_dtoa_r+0x180>
 8017dca:	ee18 4a90 	vmov	r4, s17
 8017dce:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8017dd2:	ec53 2b18 	vmov	r2, r3, d8
 8017dd6:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8017dda:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017dde:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8017de2:	2400      	movs	r4, #0
 8017de4:	ec43 2b16 	vmov	d6, r2, r3
 8017de8:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8017dec:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8017f98 <_dtoa_r+0x2c0>
 8017df0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8017df4:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8017fa0 <_dtoa_r+0x2c8>
 8017df8:	eea7 6b05 	vfma.f64	d6, d7, d5
 8017dfc:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8017fa8 <_dtoa_r+0x2d0>
 8017e00:	ee07 1a90 	vmov	s15, r1
 8017e04:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8017e08:	eeb0 7b46 	vmov.f64	d7, d6
 8017e0c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8017e10:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8017e14:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8017e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e1c:	ee16 ba90 	vmov	fp, s13
 8017e20:	940a      	str	r4, [sp, #40]	; 0x28
 8017e22:	d508      	bpl.n	8017e36 <_dtoa_r+0x15e>
 8017e24:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8017e28:	eeb4 6b47 	vcmp.f64	d6, d7
 8017e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e30:	bf18      	it	ne
 8017e32:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8017e36:	f1bb 0f16 	cmp.w	fp, #22
 8017e3a:	d82f      	bhi.n	8017e9c <_dtoa_r+0x1c4>
 8017e3c:	4b62      	ldr	r3, [pc, #392]	; (8017fc8 <_dtoa_r+0x2f0>)
 8017e3e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8017e42:	ed93 7b00 	vldr	d7, [r3]
 8017e46:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8017e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e4e:	d501      	bpl.n	8017e54 <_dtoa_r+0x17c>
 8017e50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017e54:	2300      	movs	r3, #0
 8017e56:	e022      	b.n	8017e9e <_dtoa_r+0x1c6>
 8017e58:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8017e5a:	4401      	add	r1, r0
 8017e5c:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8017e60:	2b20      	cmp	r3, #32
 8017e62:	bfc1      	itttt	gt
 8017e64:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8017e68:	fa04 f303 	lslgt.w	r3, r4, r3
 8017e6c:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8017e70:	fa28 f804 	lsrgt.w	r8, r8, r4
 8017e74:	bfd6      	itet	le
 8017e76:	f1c3 0320 	rsble	r3, r3, #32
 8017e7a:	ea43 0808 	orrgt.w	r8, r3, r8
 8017e7e:	fa08 f803 	lslle.w	r8, r8, r3
 8017e82:	ee07 8a90 	vmov	s15, r8
 8017e86:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8017e8a:	3901      	subs	r1, #1
 8017e8c:	ee17 4a90 	vmov	r4, s15
 8017e90:	ec53 2b17 	vmov	r2, r3, d7
 8017e94:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8017e98:	2401      	movs	r4, #1
 8017e9a:	e7a3      	b.n	8017de4 <_dtoa_r+0x10c>
 8017e9c:	2301      	movs	r3, #1
 8017e9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8017ea0:	1a43      	subs	r3, r0, r1
 8017ea2:	1e5a      	subs	r2, r3, #1
 8017ea4:	bf45      	ittet	mi
 8017ea6:	f1c3 0301 	rsbmi	r3, r3, #1
 8017eaa:	9304      	strmi	r3, [sp, #16]
 8017eac:	2300      	movpl	r3, #0
 8017eae:	2300      	movmi	r3, #0
 8017eb0:	9205      	str	r2, [sp, #20]
 8017eb2:	bf54      	ite	pl
 8017eb4:	9304      	strpl	r3, [sp, #16]
 8017eb6:	9305      	strmi	r3, [sp, #20]
 8017eb8:	f1bb 0f00 	cmp.w	fp, #0
 8017ebc:	db18      	blt.n	8017ef0 <_dtoa_r+0x218>
 8017ebe:	9b05      	ldr	r3, [sp, #20]
 8017ec0:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8017ec4:	445b      	add	r3, fp
 8017ec6:	9305      	str	r3, [sp, #20]
 8017ec8:	2300      	movs	r3, #0
 8017eca:	9a06      	ldr	r2, [sp, #24]
 8017ecc:	2a09      	cmp	r2, #9
 8017ece:	d849      	bhi.n	8017f64 <_dtoa_r+0x28c>
 8017ed0:	2a05      	cmp	r2, #5
 8017ed2:	bfc4      	itt	gt
 8017ed4:	3a04      	subgt	r2, #4
 8017ed6:	9206      	strgt	r2, [sp, #24]
 8017ed8:	9a06      	ldr	r2, [sp, #24]
 8017eda:	f1a2 0202 	sub.w	r2, r2, #2
 8017ede:	bfcc      	ite	gt
 8017ee0:	2400      	movgt	r4, #0
 8017ee2:	2401      	movle	r4, #1
 8017ee4:	2a03      	cmp	r2, #3
 8017ee6:	d848      	bhi.n	8017f7a <_dtoa_r+0x2a2>
 8017ee8:	e8df f002 	tbb	[pc, r2]
 8017eec:	3a2c2e0b 	.word	0x3a2c2e0b
 8017ef0:	9b04      	ldr	r3, [sp, #16]
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	eba3 030b 	sub.w	r3, r3, fp
 8017ef8:	9304      	str	r3, [sp, #16]
 8017efa:	9209      	str	r2, [sp, #36]	; 0x24
 8017efc:	f1cb 0300 	rsb	r3, fp, #0
 8017f00:	e7e3      	b.n	8017eca <_dtoa_r+0x1f2>
 8017f02:	2200      	movs	r2, #0
 8017f04:	9207      	str	r2, [sp, #28]
 8017f06:	9a08      	ldr	r2, [sp, #32]
 8017f08:	2a00      	cmp	r2, #0
 8017f0a:	dc39      	bgt.n	8017f80 <_dtoa_r+0x2a8>
 8017f0c:	f04f 0a01 	mov.w	sl, #1
 8017f10:	46d1      	mov	r9, sl
 8017f12:	4652      	mov	r2, sl
 8017f14:	f8cd a020 	str.w	sl, [sp, #32]
 8017f18:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8017f1a:	2100      	movs	r1, #0
 8017f1c:	6079      	str	r1, [r7, #4]
 8017f1e:	2004      	movs	r0, #4
 8017f20:	f100 0c14 	add.w	ip, r0, #20
 8017f24:	4594      	cmp	ip, r2
 8017f26:	6879      	ldr	r1, [r7, #4]
 8017f28:	d92f      	bls.n	8017f8a <_dtoa_r+0x2b2>
 8017f2a:	4630      	mov	r0, r6
 8017f2c:	930d      	str	r3, [sp, #52]	; 0x34
 8017f2e:	f000 ffcf 	bl	8018ed0 <_Balloc>
 8017f32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017f34:	9001      	str	r0, [sp, #4]
 8017f36:	4602      	mov	r2, r0
 8017f38:	2800      	cmp	r0, #0
 8017f3a:	d149      	bne.n	8017fd0 <_dtoa_r+0x2f8>
 8017f3c:	4b23      	ldr	r3, [pc, #140]	; (8017fcc <_dtoa_r+0x2f4>)
 8017f3e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8017f42:	e6e1      	b.n	8017d08 <_dtoa_r+0x30>
 8017f44:	2201      	movs	r2, #1
 8017f46:	e7dd      	b.n	8017f04 <_dtoa_r+0x22c>
 8017f48:	2200      	movs	r2, #0
 8017f4a:	9207      	str	r2, [sp, #28]
 8017f4c:	9a08      	ldr	r2, [sp, #32]
 8017f4e:	eb0b 0a02 	add.w	sl, fp, r2
 8017f52:	f10a 0901 	add.w	r9, sl, #1
 8017f56:	464a      	mov	r2, r9
 8017f58:	2a01      	cmp	r2, #1
 8017f5a:	bfb8      	it	lt
 8017f5c:	2201      	movlt	r2, #1
 8017f5e:	e7db      	b.n	8017f18 <_dtoa_r+0x240>
 8017f60:	2201      	movs	r2, #1
 8017f62:	e7f2      	b.n	8017f4a <_dtoa_r+0x272>
 8017f64:	2401      	movs	r4, #1
 8017f66:	2200      	movs	r2, #0
 8017f68:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8017f6c:	f04f 3aff 	mov.w	sl, #4294967295
 8017f70:	2100      	movs	r1, #0
 8017f72:	46d1      	mov	r9, sl
 8017f74:	2212      	movs	r2, #18
 8017f76:	9108      	str	r1, [sp, #32]
 8017f78:	e7ce      	b.n	8017f18 <_dtoa_r+0x240>
 8017f7a:	2201      	movs	r2, #1
 8017f7c:	9207      	str	r2, [sp, #28]
 8017f7e:	e7f5      	b.n	8017f6c <_dtoa_r+0x294>
 8017f80:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017f84:	46d1      	mov	r9, sl
 8017f86:	4652      	mov	r2, sl
 8017f88:	e7c6      	b.n	8017f18 <_dtoa_r+0x240>
 8017f8a:	3101      	adds	r1, #1
 8017f8c:	6079      	str	r1, [r7, #4]
 8017f8e:	0040      	lsls	r0, r0, #1
 8017f90:	e7c6      	b.n	8017f20 <_dtoa_r+0x248>
 8017f92:	bf00      	nop
 8017f94:	f3af 8000 	nop.w
 8017f98:	636f4361 	.word	0x636f4361
 8017f9c:	3fd287a7 	.word	0x3fd287a7
 8017fa0:	8b60c8b3 	.word	0x8b60c8b3
 8017fa4:	3fc68a28 	.word	0x3fc68a28
 8017fa8:	509f79fb 	.word	0x509f79fb
 8017fac:	3fd34413 	.word	0x3fd34413
 8017fb0:	0801aef6 	.word	0x0801aef6
 8017fb4:	0801af0d 	.word	0x0801af0d
 8017fb8:	7ff00000 	.word	0x7ff00000
 8017fbc:	0801aef2 	.word	0x0801aef2
 8017fc0:	0801aee9 	.word	0x0801aee9
 8017fc4:	0801ad69 	.word	0x0801ad69
 8017fc8:	0801b078 	.word	0x0801b078
 8017fcc:	0801af68 	.word	0x0801af68
 8017fd0:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8017fd2:	9901      	ldr	r1, [sp, #4]
 8017fd4:	6011      	str	r1, [r2, #0]
 8017fd6:	f1b9 0f0e 	cmp.w	r9, #14
 8017fda:	d86c      	bhi.n	80180b6 <_dtoa_r+0x3de>
 8017fdc:	2c00      	cmp	r4, #0
 8017fde:	d06a      	beq.n	80180b6 <_dtoa_r+0x3de>
 8017fe0:	f1bb 0f00 	cmp.w	fp, #0
 8017fe4:	f340 80a0 	ble.w	8018128 <_dtoa_r+0x450>
 8017fe8:	49c1      	ldr	r1, [pc, #772]	; (80182f0 <_dtoa_r+0x618>)
 8017fea:	f00b 020f 	and.w	r2, fp, #15
 8017fee:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8017ff2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8017ff6:	ed92 7b00 	vldr	d7, [r2]
 8017ffa:	ea4f 112b 	mov.w	r1, fp, asr #4
 8017ffe:	f000 8087 	beq.w	8018110 <_dtoa_r+0x438>
 8018002:	4abc      	ldr	r2, [pc, #752]	; (80182f4 <_dtoa_r+0x61c>)
 8018004:	ed92 6b08 	vldr	d6, [r2, #32]
 8018008:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801800c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8018010:	f001 010f 	and.w	r1, r1, #15
 8018014:	2203      	movs	r2, #3
 8018016:	48b7      	ldr	r0, [pc, #732]	; (80182f4 <_dtoa_r+0x61c>)
 8018018:	2900      	cmp	r1, #0
 801801a:	d17b      	bne.n	8018114 <_dtoa_r+0x43c>
 801801c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8018020:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018024:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018028:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801802a:	2900      	cmp	r1, #0
 801802c:	f000 80a2 	beq.w	8018174 <_dtoa_r+0x49c>
 8018030:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8018034:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018038:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801803c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018040:	f140 8098 	bpl.w	8018174 <_dtoa_r+0x49c>
 8018044:	f1b9 0f00 	cmp.w	r9, #0
 8018048:	f000 8094 	beq.w	8018174 <_dtoa_r+0x49c>
 801804c:	f1ba 0f00 	cmp.w	sl, #0
 8018050:	dd2f      	ble.n	80180b2 <_dtoa_r+0x3da>
 8018052:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8018056:	ee27 7b06 	vmul.f64	d7, d7, d6
 801805a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801805e:	f10b 37ff 	add.w	r7, fp, #4294967295
 8018062:	3201      	adds	r2, #1
 8018064:	4650      	mov	r0, sl
 8018066:	ed9d 6b02 	vldr	d6, [sp, #8]
 801806a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801806e:	ee07 2a90 	vmov	s15, r2
 8018072:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018076:	eea7 5b06 	vfma.f64	d5, d7, d6
 801807a:	ee15 4a90 	vmov	r4, s11
 801807e:	ec52 1b15 	vmov	r1, r2, d5
 8018082:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8018086:	2800      	cmp	r0, #0
 8018088:	d177      	bne.n	801817a <_dtoa_r+0x4a2>
 801808a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801808e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8018092:	ec42 1b17 	vmov	d7, r1, r2
 8018096:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801809a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801809e:	f300 8263 	bgt.w	8018568 <_dtoa_r+0x890>
 80180a2:	eeb1 7b47 	vneg.f64	d7, d7
 80180a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80180aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180ae:	f100 8258 	bmi.w	8018562 <_dtoa_r+0x88a>
 80180b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80180b6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80180b8:	2a00      	cmp	r2, #0
 80180ba:	f2c0 811d 	blt.w	80182f8 <_dtoa_r+0x620>
 80180be:	f1bb 0f0e 	cmp.w	fp, #14
 80180c2:	f300 8119 	bgt.w	80182f8 <_dtoa_r+0x620>
 80180c6:	4b8a      	ldr	r3, [pc, #552]	; (80182f0 <_dtoa_r+0x618>)
 80180c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80180cc:	ed93 6b00 	vldr	d6, [r3]
 80180d0:	9b08      	ldr	r3, [sp, #32]
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	f280 80b7 	bge.w	8018246 <_dtoa_r+0x56e>
 80180d8:	f1b9 0f00 	cmp.w	r9, #0
 80180dc:	f300 80b3 	bgt.w	8018246 <_dtoa_r+0x56e>
 80180e0:	f040 823f 	bne.w	8018562 <_dtoa_r+0x88a>
 80180e4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80180e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80180ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 80180f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80180f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180f8:	464c      	mov	r4, r9
 80180fa:	464f      	mov	r7, r9
 80180fc:	f280 8215 	bge.w	801852a <_dtoa_r+0x852>
 8018100:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018104:	2331      	movs	r3, #49	; 0x31
 8018106:	f808 3b01 	strb.w	r3, [r8], #1
 801810a:	f10b 0b01 	add.w	fp, fp, #1
 801810e:	e211      	b.n	8018534 <_dtoa_r+0x85c>
 8018110:	2202      	movs	r2, #2
 8018112:	e780      	b.n	8018016 <_dtoa_r+0x33e>
 8018114:	07cc      	lsls	r4, r1, #31
 8018116:	d504      	bpl.n	8018122 <_dtoa_r+0x44a>
 8018118:	ed90 6b00 	vldr	d6, [r0]
 801811c:	3201      	adds	r2, #1
 801811e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8018122:	1049      	asrs	r1, r1, #1
 8018124:	3008      	adds	r0, #8
 8018126:	e777      	b.n	8018018 <_dtoa_r+0x340>
 8018128:	d022      	beq.n	8018170 <_dtoa_r+0x498>
 801812a:	f1cb 0100 	rsb	r1, fp, #0
 801812e:	4a70      	ldr	r2, [pc, #448]	; (80182f0 <_dtoa_r+0x618>)
 8018130:	f001 000f 	and.w	r0, r1, #15
 8018134:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8018138:	ed92 7b00 	vldr	d7, [r2]
 801813c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8018140:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018144:	486b      	ldr	r0, [pc, #428]	; (80182f4 <_dtoa_r+0x61c>)
 8018146:	1109      	asrs	r1, r1, #4
 8018148:	2400      	movs	r4, #0
 801814a:	2202      	movs	r2, #2
 801814c:	b929      	cbnz	r1, 801815a <_dtoa_r+0x482>
 801814e:	2c00      	cmp	r4, #0
 8018150:	f43f af6a 	beq.w	8018028 <_dtoa_r+0x350>
 8018154:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018158:	e766      	b.n	8018028 <_dtoa_r+0x350>
 801815a:	07cf      	lsls	r7, r1, #31
 801815c:	d505      	bpl.n	801816a <_dtoa_r+0x492>
 801815e:	ed90 6b00 	vldr	d6, [r0]
 8018162:	3201      	adds	r2, #1
 8018164:	2401      	movs	r4, #1
 8018166:	ee27 7b06 	vmul.f64	d7, d7, d6
 801816a:	1049      	asrs	r1, r1, #1
 801816c:	3008      	adds	r0, #8
 801816e:	e7ed      	b.n	801814c <_dtoa_r+0x474>
 8018170:	2202      	movs	r2, #2
 8018172:	e759      	b.n	8018028 <_dtoa_r+0x350>
 8018174:	465f      	mov	r7, fp
 8018176:	4648      	mov	r0, r9
 8018178:	e775      	b.n	8018066 <_dtoa_r+0x38e>
 801817a:	ec42 1b17 	vmov	d7, r1, r2
 801817e:	4a5c      	ldr	r2, [pc, #368]	; (80182f0 <_dtoa_r+0x618>)
 8018180:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8018184:	ed12 4b02 	vldr	d4, [r2, #-8]
 8018188:	9a01      	ldr	r2, [sp, #4]
 801818a:	1814      	adds	r4, r2, r0
 801818c:	9a07      	ldr	r2, [sp, #28]
 801818e:	b352      	cbz	r2, 80181e6 <_dtoa_r+0x50e>
 8018190:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8018194:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8018198:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801819c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80181a0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80181a4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80181a8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80181ac:	ee14 2a90 	vmov	r2, s9
 80181b0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80181b4:	3230      	adds	r2, #48	; 0x30
 80181b6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80181ba:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80181be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181c2:	f808 2b01 	strb.w	r2, [r8], #1
 80181c6:	d439      	bmi.n	801823c <_dtoa_r+0x564>
 80181c8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80181cc:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80181d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181d4:	d472      	bmi.n	80182bc <_dtoa_r+0x5e4>
 80181d6:	45a0      	cmp	r8, r4
 80181d8:	f43f af6b 	beq.w	80180b2 <_dtoa_r+0x3da>
 80181dc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80181e0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80181e4:	e7e0      	b.n	80181a8 <_dtoa_r+0x4d0>
 80181e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80181ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 80181ee:	4621      	mov	r1, r4
 80181f0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80181f4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80181f8:	ee14 2a90 	vmov	r2, s9
 80181fc:	3230      	adds	r2, #48	; 0x30
 80181fe:	f808 2b01 	strb.w	r2, [r8], #1
 8018202:	45a0      	cmp	r8, r4
 8018204:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018208:	ee36 6b45 	vsub.f64	d6, d6, d5
 801820c:	d118      	bne.n	8018240 <_dtoa_r+0x568>
 801820e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8018212:	ee37 4b05 	vadd.f64	d4, d7, d5
 8018216:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801821a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801821e:	dc4d      	bgt.n	80182bc <_dtoa_r+0x5e4>
 8018220:	ee35 7b47 	vsub.f64	d7, d5, d7
 8018224:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801822c:	f57f af41 	bpl.w	80180b2 <_dtoa_r+0x3da>
 8018230:	4688      	mov	r8, r1
 8018232:	3901      	subs	r1, #1
 8018234:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8018238:	2b30      	cmp	r3, #48	; 0x30
 801823a:	d0f9      	beq.n	8018230 <_dtoa_r+0x558>
 801823c:	46bb      	mov	fp, r7
 801823e:	e02a      	b.n	8018296 <_dtoa_r+0x5be>
 8018240:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018244:	e7d6      	b.n	80181f4 <_dtoa_r+0x51c>
 8018246:	ed9d 7b02 	vldr	d7, [sp, #8]
 801824a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801824e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018252:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8018256:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801825a:	ee15 3a10 	vmov	r3, s10
 801825e:	3330      	adds	r3, #48	; 0x30
 8018260:	f808 3b01 	strb.w	r3, [r8], #1
 8018264:	9b01      	ldr	r3, [sp, #4]
 8018266:	eba8 0303 	sub.w	r3, r8, r3
 801826a:	4599      	cmp	r9, r3
 801826c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8018270:	eea3 7b46 	vfms.f64	d7, d3, d6
 8018274:	d133      	bne.n	80182de <_dtoa_r+0x606>
 8018276:	ee37 7b07 	vadd.f64	d7, d7, d7
 801827a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801827e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018282:	dc1a      	bgt.n	80182ba <_dtoa_r+0x5e2>
 8018284:	eeb4 7b46 	vcmp.f64	d7, d6
 8018288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801828c:	d103      	bne.n	8018296 <_dtoa_r+0x5be>
 801828e:	ee15 3a10 	vmov	r3, s10
 8018292:	07d9      	lsls	r1, r3, #31
 8018294:	d411      	bmi.n	80182ba <_dtoa_r+0x5e2>
 8018296:	4629      	mov	r1, r5
 8018298:	4630      	mov	r0, r6
 801829a:	f000 fe59 	bl	8018f50 <_Bfree>
 801829e:	2300      	movs	r3, #0
 80182a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80182a2:	f888 3000 	strb.w	r3, [r8]
 80182a6:	f10b 0301 	add.w	r3, fp, #1
 80182aa:	6013      	str	r3, [r2, #0]
 80182ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	f43f ad61 	beq.w	8017d76 <_dtoa_r+0x9e>
 80182b4:	f8c3 8000 	str.w	r8, [r3]
 80182b8:	e55d      	b.n	8017d76 <_dtoa_r+0x9e>
 80182ba:	465f      	mov	r7, fp
 80182bc:	4643      	mov	r3, r8
 80182be:	4698      	mov	r8, r3
 80182c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80182c4:	2a39      	cmp	r2, #57	; 0x39
 80182c6:	d106      	bne.n	80182d6 <_dtoa_r+0x5fe>
 80182c8:	9a01      	ldr	r2, [sp, #4]
 80182ca:	429a      	cmp	r2, r3
 80182cc:	d1f7      	bne.n	80182be <_dtoa_r+0x5e6>
 80182ce:	9901      	ldr	r1, [sp, #4]
 80182d0:	2230      	movs	r2, #48	; 0x30
 80182d2:	3701      	adds	r7, #1
 80182d4:	700a      	strb	r2, [r1, #0]
 80182d6:	781a      	ldrb	r2, [r3, #0]
 80182d8:	3201      	adds	r2, #1
 80182da:	701a      	strb	r2, [r3, #0]
 80182dc:	e7ae      	b.n	801823c <_dtoa_r+0x564>
 80182de:	ee27 7b04 	vmul.f64	d7, d7, d4
 80182e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80182e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182ea:	d1b2      	bne.n	8018252 <_dtoa_r+0x57a>
 80182ec:	e7d3      	b.n	8018296 <_dtoa_r+0x5be>
 80182ee:	bf00      	nop
 80182f0:	0801b078 	.word	0x0801b078
 80182f4:	0801b050 	.word	0x0801b050
 80182f8:	9907      	ldr	r1, [sp, #28]
 80182fa:	2900      	cmp	r1, #0
 80182fc:	f000 80d0 	beq.w	80184a0 <_dtoa_r+0x7c8>
 8018300:	9906      	ldr	r1, [sp, #24]
 8018302:	2901      	cmp	r1, #1
 8018304:	f300 80b4 	bgt.w	8018470 <_dtoa_r+0x798>
 8018308:	990a      	ldr	r1, [sp, #40]	; 0x28
 801830a:	2900      	cmp	r1, #0
 801830c:	f000 80ac 	beq.w	8018468 <_dtoa_r+0x790>
 8018310:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8018314:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8018318:	461c      	mov	r4, r3
 801831a:	930a      	str	r3, [sp, #40]	; 0x28
 801831c:	9b04      	ldr	r3, [sp, #16]
 801831e:	4413      	add	r3, r2
 8018320:	9304      	str	r3, [sp, #16]
 8018322:	9b05      	ldr	r3, [sp, #20]
 8018324:	2101      	movs	r1, #1
 8018326:	4413      	add	r3, r2
 8018328:	4630      	mov	r0, r6
 801832a:	9305      	str	r3, [sp, #20]
 801832c:	f000 ff12 	bl	8019154 <__i2b>
 8018330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018332:	4607      	mov	r7, r0
 8018334:	f1b8 0f00 	cmp.w	r8, #0
 8018338:	dd0d      	ble.n	8018356 <_dtoa_r+0x67e>
 801833a:	9a05      	ldr	r2, [sp, #20]
 801833c:	2a00      	cmp	r2, #0
 801833e:	dd0a      	ble.n	8018356 <_dtoa_r+0x67e>
 8018340:	4542      	cmp	r2, r8
 8018342:	9904      	ldr	r1, [sp, #16]
 8018344:	bfa8      	it	ge
 8018346:	4642      	movge	r2, r8
 8018348:	1a89      	subs	r1, r1, r2
 801834a:	9104      	str	r1, [sp, #16]
 801834c:	9905      	ldr	r1, [sp, #20]
 801834e:	eba8 0802 	sub.w	r8, r8, r2
 8018352:	1a8a      	subs	r2, r1, r2
 8018354:	9205      	str	r2, [sp, #20]
 8018356:	b303      	cbz	r3, 801839a <_dtoa_r+0x6c2>
 8018358:	9a07      	ldr	r2, [sp, #28]
 801835a:	2a00      	cmp	r2, #0
 801835c:	f000 80a5 	beq.w	80184aa <_dtoa_r+0x7d2>
 8018360:	2c00      	cmp	r4, #0
 8018362:	dd13      	ble.n	801838c <_dtoa_r+0x6b4>
 8018364:	4639      	mov	r1, r7
 8018366:	4622      	mov	r2, r4
 8018368:	4630      	mov	r0, r6
 801836a:	930d      	str	r3, [sp, #52]	; 0x34
 801836c:	f000 ffb2 	bl	80192d4 <__pow5mult>
 8018370:	462a      	mov	r2, r5
 8018372:	4601      	mov	r1, r0
 8018374:	4607      	mov	r7, r0
 8018376:	4630      	mov	r0, r6
 8018378:	f000 ff02 	bl	8019180 <__multiply>
 801837c:	4629      	mov	r1, r5
 801837e:	900a      	str	r0, [sp, #40]	; 0x28
 8018380:	4630      	mov	r0, r6
 8018382:	f000 fde5 	bl	8018f50 <_Bfree>
 8018386:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018388:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801838a:	4615      	mov	r5, r2
 801838c:	1b1a      	subs	r2, r3, r4
 801838e:	d004      	beq.n	801839a <_dtoa_r+0x6c2>
 8018390:	4629      	mov	r1, r5
 8018392:	4630      	mov	r0, r6
 8018394:	f000 ff9e 	bl	80192d4 <__pow5mult>
 8018398:	4605      	mov	r5, r0
 801839a:	2101      	movs	r1, #1
 801839c:	4630      	mov	r0, r6
 801839e:	f000 fed9 	bl	8019154 <__i2b>
 80183a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	4604      	mov	r4, r0
 80183a8:	f340 8081 	ble.w	80184ae <_dtoa_r+0x7d6>
 80183ac:	461a      	mov	r2, r3
 80183ae:	4601      	mov	r1, r0
 80183b0:	4630      	mov	r0, r6
 80183b2:	f000 ff8f 	bl	80192d4 <__pow5mult>
 80183b6:	9b06      	ldr	r3, [sp, #24]
 80183b8:	2b01      	cmp	r3, #1
 80183ba:	4604      	mov	r4, r0
 80183bc:	dd7a      	ble.n	80184b4 <_dtoa_r+0x7dc>
 80183be:	2300      	movs	r3, #0
 80183c0:	930a      	str	r3, [sp, #40]	; 0x28
 80183c2:	6922      	ldr	r2, [r4, #16]
 80183c4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80183c8:	6910      	ldr	r0, [r2, #16]
 80183ca:	f000 fe73 	bl	80190b4 <__hi0bits>
 80183ce:	f1c0 0020 	rsb	r0, r0, #32
 80183d2:	9b05      	ldr	r3, [sp, #20]
 80183d4:	4418      	add	r0, r3
 80183d6:	f010 001f 	ands.w	r0, r0, #31
 80183da:	f000 808c 	beq.w	80184f6 <_dtoa_r+0x81e>
 80183de:	f1c0 0220 	rsb	r2, r0, #32
 80183e2:	2a04      	cmp	r2, #4
 80183e4:	f340 8085 	ble.w	80184f2 <_dtoa_r+0x81a>
 80183e8:	f1c0 001c 	rsb	r0, r0, #28
 80183ec:	9b04      	ldr	r3, [sp, #16]
 80183ee:	4403      	add	r3, r0
 80183f0:	9304      	str	r3, [sp, #16]
 80183f2:	9b05      	ldr	r3, [sp, #20]
 80183f4:	4403      	add	r3, r0
 80183f6:	4480      	add	r8, r0
 80183f8:	9305      	str	r3, [sp, #20]
 80183fa:	9b04      	ldr	r3, [sp, #16]
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	dd05      	ble.n	801840c <_dtoa_r+0x734>
 8018400:	4629      	mov	r1, r5
 8018402:	461a      	mov	r2, r3
 8018404:	4630      	mov	r0, r6
 8018406:	f000 ffbf 	bl	8019388 <__lshift>
 801840a:	4605      	mov	r5, r0
 801840c:	9b05      	ldr	r3, [sp, #20]
 801840e:	2b00      	cmp	r3, #0
 8018410:	dd05      	ble.n	801841e <_dtoa_r+0x746>
 8018412:	4621      	mov	r1, r4
 8018414:	461a      	mov	r2, r3
 8018416:	4630      	mov	r0, r6
 8018418:	f000 ffb6 	bl	8019388 <__lshift>
 801841c:	4604      	mov	r4, r0
 801841e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018420:	2b00      	cmp	r3, #0
 8018422:	d06a      	beq.n	80184fa <_dtoa_r+0x822>
 8018424:	4621      	mov	r1, r4
 8018426:	4628      	mov	r0, r5
 8018428:	f001 f81e 	bl	8019468 <__mcmp>
 801842c:	2800      	cmp	r0, #0
 801842e:	da64      	bge.n	80184fa <_dtoa_r+0x822>
 8018430:	2300      	movs	r3, #0
 8018432:	4629      	mov	r1, r5
 8018434:	220a      	movs	r2, #10
 8018436:	4630      	mov	r0, r6
 8018438:	f000 fdac 	bl	8018f94 <__multadd>
 801843c:	9b07      	ldr	r3, [sp, #28]
 801843e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8018442:	4605      	mov	r5, r0
 8018444:	2b00      	cmp	r3, #0
 8018446:	f000 8191 	beq.w	801876c <_dtoa_r+0xa94>
 801844a:	4639      	mov	r1, r7
 801844c:	2300      	movs	r3, #0
 801844e:	220a      	movs	r2, #10
 8018450:	4630      	mov	r0, r6
 8018452:	f000 fd9f 	bl	8018f94 <__multadd>
 8018456:	f1ba 0f00 	cmp.w	sl, #0
 801845a:	4607      	mov	r7, r0
 801845c:	f300 808d 	bgt.w	801857a <_dtoa_r+0x8a2>
 8018460:	9b06      	ldr	r3, [sp, #24]
 8018462:	2b02      	cmp	r3, #2
 8018464:	dc50      	bgt.n	8018508 <_dtoa_r+0x830>
 8018466:	e088      	b.n	801857a <_dtoa_r+0x8a2>
 8018468:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801846a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801846e:	e751      	b.n	8018314 <_dtoa_r+0x63c>
 8018470:	f109 34ff 	add.w	r4, r9, #4294967295
 8018474:	42a3      	cmp	r3, r4
 8018476:	bfbf      	itttt	lt
 8018478:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 801847a:	1ae3      	sublt	r3, r4, r3
 801847c:	18d2      	addlt	r2, r2, r3
 801847e:	9209      	strlt	r2, [sp, #36]	; 0x24
 8018480:	bfb6      	itet	lt
 8018482:	4623      	movlt	r3, r4
 8018484:	1b1c      	subge	r4, r3, r4
 8018486:	2400      	movlt	r4, #0
 8018488:	f1b9 0f00 	cmp.w	r9, #0
 801848c:	bfb5      	itete	lt
 801848e:	9a04      	ldrlt	r2, [sp, #16]
 8018490:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8018494:	eba2 0809 	sublt.w	r8, r2, r9
 8018498:	464a      	movge	r2, r9
 801849a:	bfb8      	it	lt
 801849c:	2200      	movlt	r2, #0
 801849e:	e73c      	b.n	801831a <_dtoa_r+0x642>
 80184a0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80184a4:	9f07      	ldr	r7, [sp, #28]
 80184a6:	461c      	mov	r4, r3
 80184a8:	e744      	b.n	8018334 <_dtoa_r+0x65c>
 80184aa:	461a      	mov	r2, r3
 80184ac:	e770      	b.n	8018390 <_dtoa_r+0x6b8>
 80184ae:	9b06      	ldr	r3, [sp, #24]
 80184b0:	2b01      	cmp	r3, #1
 80184b2:	dc18      	bgt.n	80184e6 <_dtoa_r+0x80e>
 80184b4:	9b02      	ldr	r3, [sp, #8]
 80184b6:	b9b3      	cbnz	r3, 80184e6 <_dtoa_r+0x80e>
 80184b8:	9b03      	ldr	r3, [sp, #12]
 80184ba:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80184be:	b9a2      	cbnz	r2, 80184ea <_dtoa_r+0x812>
 80184c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80184c4:	0d12      	lsrs	r2, r2, #20
 80184c6:	0512      	lsls	r2, r2, #20
 80184c8:	b18a      	cbz	r2, 80184ee <_dtoa_r+0x816>
 80184ca:	9b04      	ldr	r3, [sp, #16]
 80184cc:	3301      	adds	r3, #1
 80184ce:	9304      	str	r3, [sp, #16]
 80184d0:	9b05      	ldr	r3, [sp, #20]
 80184d2:	3301      	adds	r3, #1
 80184d4:	9305      	str	r3, [sp, #20]
 80184d6:	2301      	movs	r3, #1
 80184d8:	930a      	str	r3, [sp, #40]	; 0x28
 80184da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80184dc:	2b00      	cmp	r3, #0
 80184de:	f47f af70 	bne.w	80183c2 <_dtoa_r+0x6ea>
 80184e2:	2001      	movs	r0, #1
 80184e4:	e775      	b.n	80183d2 <_dtoa_r+0x6fa>
 80184e6:	2300      	movs	r3, #0
 80184e8:	e7f6      	b.n	80184d8 <_dtoa_r+0x800>
 80184ea:	9b02      	ldr	r3, [sp, #8]
 80184ec:	e7f4      	b.n	80184d8 <_dtoa_r+0x800>
 80184ee:	920a      	str	r2, [sp, #40]	; 0x28
 80184f0:	e7f3      	b.n	80184da <_dtoa_r+0x802>
 80184f2:	d082      	beq.n	80183fa <_dtoa_r+0x722>
 80184f4:	4610      	mov	r0, r2
 80184f6:	301c      	adds	r0, #28
 80184f8:	e778      	b.n	80183ec <_dtoa_r+0x714>
 80184fa:	f1b9 0f00 	cmp.w	r9, #0
 80184fe:	dc37      	bgt.n	8018570 <_dtoa_r+0x898>
 8018500:	9b06      	ldr	r3, [sp, #24]
 8018502:	2b02      	cmp	r3, #2
 8018504:	dd34      	ble.n	8018570 <_dtoa_r+0x898>
 8018506:	46ca      	mov	sl, r9
 8018508:	f1ba 0f00 	cmp.w	sl, #0
 801850c:	d10d      	bne.n	801852a <_dtoa_r+0x852>
 801850e:	4621      	mov	r1, r4
 8018510:	4653      	mov	r3, sl
 8018512:	2205      	movs	r2, #5
 8018514:	4630      	mov	r0, r6
 8018516:	f000 fd3d 	bl	8018f94 <__multadd>
 801851a:	4601      	mov	r1, r0
 801851c:	4604      	mov	r4, r0
 801851e:	4628      	mov	r0, r5
 8018520:	f000 ffa2 	bl	8019468 <__mcmp>
 8018524:	2800      	cmp	r0, #0
 8018526:	f73f adeb 	bgt.w	8018100 <_dtoa_r+0x428>
 801852a:	9b08      	ldr	r3, [sp, #32]
 801852c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8018530:	ea6f 0b03 	mvn.w	fp, r3
 8018534:	f04f 0900 	mov.w	r9, #0
 8018538:	4621      	mov	r1, r4
 801853a:	4630      	mov	r0, r6
 801853c:	f000 fd08 	bl	8018f50 <_Bfree>
 8018540:	2f00      	cmp	r7, #0
 8018542:	f43f aea8 	beq.w	8018296 <_dtoa_r+0x5be>
 8018546:	f1b9 0f00 	cmp.w	r9, #0
 801854a:	d005      	beq.n	8018558 <_dtoa_r+0x880>
 801854c:	45b9      	cmp	r9, r7
 801854e:	d003      	beq.n	8018558 <_dtoa_r+0x880>
 8018550:	4649      	mov	r1, r9
 8018552:	4630      	mov	r0, r6
 8018554:	f000 fcfc 	bl	8018f50 <_Bfree>
 8018558:	4639      	mov	r1, r7
 801855a:	4630      	mov	r0, r6
 801855c:	f000 fcf8 	bl	8018f50 <_Bfree>
 8018560:	e699      	b.n	8018296 <_dtoa_r+0x5be>
 8018562:	2400      	movs	r4, #0
 8018564:	4627      	mov	r7, r4
 8018566:	e7e0      	b.n	801852a <_dtoa_r+0x852>
 8018568:	46bb      	mov	fp, r7
 801856a:	4604      	mov	r4, r0
 801856c:	4607      	mov	r7, r0
 801856e:	e5c7      	b.n	8018100 <_dtoa_r+0x428>
 8018570:	9b07      	ldr	r3, [sp, #28]
 8018572:	46ca      	mov	sl, r9
 8018574:	2b00      	cmp	r3, #0
 8018576:	f000 8100 	beq.w	801877a <_dtoa_r+0xaa2>
 801857a:	f1b8 0f00 	cmp.w	r8, #0
 801857e:	dd05      	ble.n	801858c <_dtoa_r+0x8b4>
 8018580:	4639      	mov	r1, r7
 8018582:	4642      	mov	r2, r8
 8018584:	4630      	mov	r0, r6
 8018586:	f000 feff 	bl	8019388 <__lshift>
 801858a:	4607      	mov	r7, r0
 801858c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801858e:	2b00      	cmp	r3, #0
 8018590:	d05d      	beq.n	801864e <_dtoa_r+0x976>
 8018592:	6879      	ldr	r1, [r7, #4]
 8018594:	4630      	mov	r0, r6
 8018596:	f000 fc9b 	bl	8018ed0 <_Balloc>
 801859a:	4680      	mov	r8, r0
 801859c:	b928      	cbnz	r0, 80185aa <_dtoa_r+0x8d2>
 801859e:	4b82      	ldr	r3, [pc, #520]	; (80187a8 <_dtoa_r+0xad0>)
 80185a0:	4602      	mov	r2, r0
 80185a2:	f240 21ea 	movw	r1, #746	; 0x2ea
 80185a6:	f7ff bbaf 	b.w	8017d08 <_dtoa_r+0x30>
 80185aa:	693a      	ldr	r2, [r7, #16]
 80185ac:	3202      	adds	r2, #2
 80185ae:	0092      	lsls	r2, r2, #2
 80185b0:	f107 010c 	add.w	r1, r7, #12
 80185b4:	300c      	adds	r0, #12
 80185b6:	f7fd fe25 	bl	8016204 <memcpy>
 80185ba:	2201      	movs	r2, #1
 80185bc:	4641      	mov	r1, r8
 80185be:	4630      	mov	r0, r6
 80185c0:	f000 fee2 	bl	8019388 <__lshift>
 80185c4:	9b01      	ldr	r3, [sp, #4]
 80185c6:	3301      	adds	r3, #1
 80185c8:	9304      	str	r3, [sp, #16]
 80185ca:	9b01      	ldr	r3, [sp, #4]
 80185cc:	4453      	add	r3, sl
 80185ce:	9308      	str	r3, [sp, #32]
 80185d0:	9b02      	ldr	r3, [sp, #8]
 80185d2:	f003 0301 	and.w	r3, r3, #1
 80185d6:	46b9      	mov	r9, r7
 80185d8:	9307      	str	r3, [sp, #28]
 80185da:	4607      	mov	r7, r0
 80185dc:	9b04      	ldr	r3, [sp, #16]
 80185de:	4621      	mov	r1, r4
 80185e0:	3b01      	subs	r3, #1
 80185e2:	4628      	mov	r0, r5
 80185e4:	9302      	str	r3, [sp, #8]
 80185e6:	f7ff faeb 	bl	8017bc0 <quorem>
 80185ea:	4603      	mov	r3, r0
 80185ec:	3330      	adds	r3, #48	; 0x30
 80185ee:	9005      	str	r0, [sp, #20]
 80185f0:	4649      	mov	r1, r9
 80185f2:	4628      	mov	r0, r5
 80185f4:	9309      	str	r3, [sp, #36]	; 0x24
 80185f6:	f000 ff37 	bl	8019468 <__mcmp>
 80185fa:	463a      	mov	r2, r7
 80185fc:	4682      	mov	sl, r0
 80185fe:	4621      	mov	r1, r4
 8018600:	4630      	mov	r0, r6
 8018602:	f000 ff4d 	bl	80194a0 <__mdiff>
 8018606:	68c2      	ldr	r2, [r0, #12]
 8018608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801860a:	4680      	mov	r8, r0
 801860c:	bb0a      	cbnz	r2, 8018652 <_dtoa_r+0x97a>
 801860e:	4601      	mov	r1, r0
 8018610:	4628      	mov	r0, r5
 8018612:	f000 ff29 	bl	8019468 <__mcmp>
 8018616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018618:	4602      	mov	r2, r0
 801861a:	4641      	mov	r1, r8
 801861c:	4630      	mov	r0, r6
 801861e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8018622:	f000 fc95 	bl	8018f50 <_Bfree>
 8018626:	9b06      	ldr	r3, [sp, #24]
 8018628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801862a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801862e:	ea43 0102 	orr.w	r1, r3, r2
 8018632:	9b07      	ldr	r3, [sp, #28]
 8018634:	430b      	orrs	r3, r1
 8018636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018638:	d10d      	bne.n	8018656 <_dtoa_r+0x97e>
 801863a:	2b39      	cmp	r3, #57	; 0x39
 801863c:	d029      	beq.n	8018692 <_dtoa_r+0x9ba>
 801863e:	f1ba 0f00 	cmp.w	sl, #0
 8018642:	dd01      	ble.n	8018648 <_dtoa_r+0x970>
 8018644:	9b05      	ldr	r3, [sp, #20]
 8018646:	3331      	adds	r3, #49	; 0x31
 8018648:	9a02      	ldr	r2, [sp, #8]
 801864a:	7013      	strb	r3, [r2, #0]
 801864c:	e774      	b.n	8018538 <_dtoa_r+0x860>
 801864e:	4638      	mov	r0, r7
 8018650:	e7b8      	b.n	80185c4 <_dtoa_r+0x8ec>
 8018652:	2201      	movs	r2, #1
 8018654:	e7e1      	b.n	801861a <_dtoa_r+0x942>
 8018656:	f1ba 0f00 	cmp.w	sl, #0
 801865a:	db06      	blt.n	801866a <_dtoa_r+0x992>
 801865c:	9906      	ldr	r1, [sp, #24]
 801865e:	ea41 0a0a 	orr.w	sl, r1, sl
 8018662:	9907      	ldr	r1, [sp, #28]
 8018664:	ea5a 0101 	orrs.w	r1, sl, r1
 8018668:	d120      	bne.n	80186ac <_dtoa_r+0x9d4>
 801866a:	2a00      	cmp	r2, #0
 801866c:	ddec      	ble.n	8018648 <_dtoa_r+0x970>
 801866e:	4629      	mov	r1, r5
 8018670:	2201      	movs	r2, #1
 8018672:	4630      	mov	r0, r6
 8018674:	9304      	str	r3, [sp, #16]
 8018676:	f000 fe87 	bl	8019388 <__lshift>
 801867a:	4621      	mov	r1, r4
 801867c:	4605      	mov	r5, r0
 801867e:	f000 fef3 	bl	8019468 <__mcmp>
 8018682:	2800      	cmp	r0, #0
 8018684:	9b04      	ldr	r3, [sp, #16]
 8018686:	dc02      	bgt.n	801868e <_dtoa_r+0x9b6>
 8018688:	d1de      	bne.n	8018648 <_dtoa_r+0x970>
 801868a:	07da      	lsls	r2, r3, #31
 801868c:	d5dc      	bpl.n	8018648 <_dtoa_r+0x970>
 801868e:	2b39      	cmp	r3, #57	; 0x39
 8018690:	d1d8      	bne.n	8018644 <_dtoa_r+0x96c>
 8018692:	9a02      	ldr	r2, [sp, #8]
 8018694:	2339      	movs	r3, #57	; 0x39
 8018696:	7013      	strb	r3, [r2, #0]
 8018698:	4643      	mov	r3, r8
 801869a:	4698      	mov	r8, r3
 801869c:	3b01      	subs	r3, #1
 801869e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80186a2:	2a39      	cmp	r2, #57	; 0x39
 80186a4:	d051      	beq.n	801874a <_dtoa_r+0xa72>
 80186a6:	3201      	adds	r2, #1
 80186a8:	701a      	strb	r2, [r3, #0]
 80186aa:	e745      	b.n	8018538 <_dtoa_r+0x860>
 80186ac:	2a00      	cmp	r2, #0
 80186ae:	dd03      	ble.n	80186b8 <_dtoa_r+0x9e0>
 80186b0:	2b39      	cmp	r3, #57	; 0x39
 80186b2:	d0ee      	beq.n	8018692 <_dtoa_r+0x9ba>
 80186b4:	3301      	adds	r3, #1
 80186b6:	e7c7      	b.n	8018648 <_dtoa_r+0x970>
 80186b8:	9a04      	ldr	r2, [sp, #16]
 80186ba:	9908      	ldr	r1, [sp, #32]
 80186bc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80186c0:	428a      	cmp	r2, r1
 80186c2:	d02b      	beq.n	801871c <_dtoa_r+0xa44>
 80186c4:	4629      	mov	r1, r5
 80186c6:	2300      	movs	r3, #0
 80186c8:	220a      	movs	r2, #10
 80186ca:	4630      	mov	r0, r6
 80186cc:	f000 fc62 	bl	8018f94 <__multadd>
 80186d0:	45b9      	cmp	r9, r7
 80186d2:	4605      	mov	r5, r0
 80186d4:	f04f 0300 	mov.w	r3, #0
 80186d8:	f04f 020a 	mov.w	r2, #10
 80186dc:	4649      	mov	r1, r9
 80186de:	4630      	mov	r0, r6
 80186e0:	d107      	bne.n	80186f2 <_dtoa_r+0xa1a>
 80186e2:	f000 fc57 	bl	8018f94 <__multadd>
 80186e6:	4681      	mov	r9, r0
 80186e8:	4607      	mov	r7, r0
 80186ea:	9b04      	ldr	r3, [sp, #16]
 80186ec:	3301      	adds	r3, #1
 80186ee:	9304      	str	r3, [sp, #16]
 80186f0:	e774      	b.n	80185dc <_dtoa_r+0x904>
 80186f2:	f000 fc4f 	bl	8018f94 <__multadd>
 80186f6:	4639      	mov	r1, r7
 80186f8:	4681      	mov	r9, r0
 80186fa:	2300      	movs	r3, #0
 80186fc:	220a      	movs	r2, #10
 80186fe:	4630      	mov	r0, r6
 8018700:	f000 fc48 	bl	8018f94 <__multadd>
 8018704:	4607      	mov	r7, r0
 8018706:	e7f0      	b.n	80186ea <_dtoa_r+0xa12>
 8018708:	f1ba 0f00 	cmp.w	sl, #0
 801870c:	9a01      	ldr	r2, [sp, #4]
 801870e:	bfcc      	ite	gt
 8018710:	46d0      	movgt	r8, sl
 8018712:	f04f 0801 	movle.w	r8, #1
 8018716:	4490      	add	r8, r2
 8018718:	f04f 0900 	mov.w	r9, #0
 801871c:	4629      	mov	r1, r5
 801871e:	2201      	movs	r2, #1
 8018720:	4630      	mov	r0, r6
 8018722:	9302      	str	r3, [sp, #8]
 8018724:	f000 fe30 	bl	8019388 <__lshift>
 8018728:	4621      	mov	r1, r4
 801872a:	4605      	mov	r5, r0
 801872c:	f000 fe9c 	bl	8019468 <__mcmp>
 8018730:	2800      	cmp	r0, #0
 8018732:	dcb1      	bgt.n	8018698 <_dtoa_r+0x9c0>
 8018734:	d102      	bne.n	801873c <_dtoa_r+0xa64>
 8018736:	9b02      	ldr	r3, [sp, #8]
 8018738:	07db      	lsls	r3, r3, #31
 801873a:	d4ad      	bmi.n	8018698 <_dtoa_r+0x9c0>
 801873c:	4643      	mov	r3, r8
 801873e:	4698      	mov	r8, r3
 8018740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018744:	2a30      	cmp	r2, #48	; 0x30
 8018746:	d0fa      	beq.n	801873e <_dtoa_r+0xa66>
 8018748:	e6f6      	b.n	8018538 <_dtoa_r+0x860>
 801874a:	9a01      	ldr	r2, [sp, #4]
 801874c:	429a      	cmp	r2, r3
 801874e:	d1a4      	bne.n	801869a <_dtoa_r+0x9c2>
 8018750:	f10b 0b01 	add.w	fp, fp, #1
 8018754:	2331      	movs	r3, #49	; 0x31
 8018756:	e778      	b.n	801864a <_dtoa_r+0x972>
 8018758:	4b14      	ldr	r3, [pc, #80]	; (80187ac <_dtoa_r+0xad4>)
 801875a:	f7ff bb27 	b.w	8017dac <_dtoa_r+0xd4>
 801875e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018760:	2b00      	cmp	r3, #0
 8018762:	f47f ab03 	bne.w	8017d6c <_dtoa_r+0x94>
 8018766:	4b12      	ldr	r3, [pc, #72]	; (80187b0 <_dtoa_r+0xad8>)
 8018768:	f7ff bb20 	b.w	8017dac <_dtoa_r+0xd4>
 801876c:	f1ba 0f00 	cmp.w	sl, #0
 8018770:	dc03      	bgt.n	801877a <_dtoa_r+0xaa2>
 8018772:	9b06      	ldr	r3, [sp, #24]
 8018774:	2b02      	cmp	r3, #2
 8018776:	f73f aec7 	bgt.w	8018508 <_dtoa_r+0x830>
 801877a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801877e:	4621      	mov	r1, r4
 8018780:	4628      	mov	r0, r5
 8018782:	f7ff fa1d 	bl	8017bc0 <quorem>
 8018786:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801878a:	f808 3b01 	strb.w	r3, [r8], #1
 801878e:	9a01      	ldr	r2, [sp, #4]
 8018790:	eba8 0202 	sub.w	r2, r8, r2
 8018794:	4592      	cmp	sl, r2
 8018796:	ddb7      	ble.n	8018708 <_dtoa_r+0xa30>
 8018798:	4629      	mov	r1, r5
 801879a:	2300      	movs	r3, #0
 801879c:	220a      	movs	r2, #10
 801879e:	4630      	mov	r0, r6
 80187a0:	f000 fbf8 	bl	8018f94 <__multadd>
 80187a4:	4605      	mov	r5, r0
 80187a6:	e7ea      	b.n	801877e <_dtoa_r+0xaa6>
 80187a8:	0801af68 	.word	0x0801af68
 80187ac:	0801ad68 	.word	0x0801ad68
 80187b0:	0801aee9 	.word	0x0801aee9

080187b4 <rshift>:
 80187b4:	6903      	ldr	r3, [r0, #16]
 80187b6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80187ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80187be:	ea4f 1261 	mov.w	r2, r1, asr #5
 80187c2:	f100 0414 	add.w	r4, r0, #20
 80187c6:	dd45      	ble.n	8018854 <rshift+0xa0>
 80187c8:	f011 011f 	ands.w	r1, r1, #31
 80187cc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80187d0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80187d4:	d10c      	bne.n	80187f0 <rshift+0x3c>
 80187d6:	f100 0710 	add.w	r7, r0, #16
 80187da:	4629      	mov	r1, r5
 80187dc:	42b1      	cmp	r1, r6
 80187de:	d334      	bcc.n	801884a <rshift+0x96>
 80187e0:	1a9b      	subs	r3, r3, r2
 80187e2:	009b      	lsls	r3, r3, #2
 80187e4:	1eea      	subs	r2, r5, #3
 80187e6:	4296      	cmp	r6, r2
 80187e8:	bf38      	it	cc
 80187ea:	2300      	movcc	r3, #0
 80187ec:	4423      	add	r3, r4
 80187ee:	e015      	b.n	801881c <rshift+0x68>
 80187f0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80187f4:	f1c1 0820 	rsb	r8, r1, #32
 80187f8:	40cf      	lsrs	r7, r1
 80187fa:	f105 0e04 	add.w	lr, r5, #4
 80187fe:	46a1      	mov	r9, r4
 8018800:	4576      	cmp	r6, lr
 8018802:	46f4      	mov	ip, lr
 8018804:	d815      	bhi.n	8018832 <rshift+0x7e>
 8018806:	1a9a      	subs	r2, r3, r2
 8018808:	0092      	lsls	r2, r2, #2
 801880a:	3a04      	subs	r2, #4
 801880c:	3501      	adds	r5, #1
 801880e:	42ae      	cmp	r6, r5
 8018810:	bf38      	it	cc
 8018812:	2200      	movcc	r2, #0
 8018814:	18a3      	adds	r3, r4, r2
 8018816:	50a7      	str	r7, [r4, r2]
 8018818:	b107      	cbz	r7, 801881c <rshift+0x68>
 801881a:	3304      	adds	r3, #4
 801881c:	1b1a      	subs	r2, r3, r4
 801881e:	42a3      	cmp	r3, r4
 8018820:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8018824:	bf08      	it	eq
 8018826:	2300      	moveq	r3, #0
 8018828:	6102      	str	r2, [r0, #16]
 801882a:	bf08      	it	eq
 801882c:	6143      	streq	r3, [r0, #20]
 801882e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018832:	f8dc c000 	ldr.w	ip, [ip]
 8018836:	fa0c fc08 	lsl.w	ip, ip, r8
 801883a:	ea4c 0707 	orr.w	r7, ip, r7
 801883e:	f849 7b04 	str.w	r7, [r9], #4
 8018842:	f85e 7b04 	ldr.w	r7, [lr], #4
 8018846:	40cf      	lsrs	r7, r1
 8018848:	e7da      	b.n	8018800 <rshift+0x4c>
 801884a:	f851 cb04 	ldr.w	ip, [r1], #4
 801884e:	f847 cf04 	str.w	ip, [r7, #4]!
 8018852:	e7c3      	b.n	80187dc <rshift+0x28>
 8018854:	4623      	mov	r3, r4
 8018856:	e7e1      	b.n	801881c <rshift+0x68>

08018858 <__hexdig_fun>:
 8018858:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801885c:	2b09      	cmp	r3, #9
 801885e:	d802      	bhi.n	8018866 <__hexdig_fun+0xe>
 8018860:	3820      	subs	r0, #32
 8018862:	b2c0      	uxtb	r0, r0
 8018864:	4770      	bx	lr
 8018866:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801886a:	2b05      	cmp	r3, #5
 801886c:	d801      	bhi.n	8018872 <__hexdig_fun+0x1a>
 801886e:	3847      	subs	r0, #71	; 0x47
 8018870:	e7f7      	b.n	8018862 <__hexdig_fun+0xa>
 8018872:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8018876:	2b05      	cmp	r3, #5
 8018878:	d801      	bhi.n	801887e <__hexdig_fun+0x26>
 801887a:	3827      	subs	r0, #39	; 0x27
 801887c:	e7f1      	b.n	8018862 <__hexdig_fun+0xa>
 801887e:	2000      	movs	r0, #0
 8018880:	4770      	bx	lr
	...

08018884 <__gethex>:
 8018884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018888:	ed2d 8b02 	vpush	{d8}
 801888c:	b089      	sub	sp, #36	; 0x24
 801888e:	ee08 0a10 	vmov	s16, r0
 8018892:	9304      	str	r3, [sp, #16]
 8018894:	4bb4      	ldr	r3, [pc, #720]	; (8018b68 <__gethex+0x2e4>)
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	9301      	str	r3, [sp, #4]
 801889a:	4618      	mov	r0, r3
 801889c:	468b      	mov	fp, r1
 801889e:	4690      	mov	r8, r2
 80188a0:	f7e7 fd36 	bl	8000310 <strlen>
 80188a4:	9b01      	ldr	r3, [sp, #4]
 80188a6:	f8db 2000 	ldr.w	r2, [fp]
 80188aa:	4403      	add	r3, r0
 80188ac:	4682      	mov	sl, r0
 80188ae:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80188b2:	9305      	str	r3, [sp, #20]
 80188b4:	1c93      	adds	r3, r2, #2
 80188b6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80188ba:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80188be:	32fe      	adds	r2, #254	; 0xfe
 80188c0:	18d1      	adds	r1, r2, r3
 80188c2:	461f      	mov	r7, r3
 80188c4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80188c8:	9100      	str	r1, [sp, #0]
 80188ca:	2830      	cmp	r0, #48	; 0x30
 80188cc:	d0f8      	beq.n	80188c0 <__gethex+0x3c>
 80188ce:	f7ff ffc3 	bl	8018858 <__hexdig_fun>
 80188d2:	4604      	mov	r4, r0
 80188d4:	2800      	cmp	r0, #0
 80188d6:	d13a      	bne.n	801894e <__gethex+0xca>
 80188d8:	9901      	ldr	r1, [sp, #4]
 80188da:	4652      	mov	r2, sl
 80188dc:	4638      	mov	r0, r7
 80188de:	f001 fa1f 	bl	8019d20 <strncmp>
 80188e2:	4605      	mov	r5, r0
 80188e4:	2800      	cmp	r0, #0
 80188e6:	d168      	bne.n	80189ba <__gethex+0x136>
 80188e8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80188ec:	eb07 060a 	add.w	r6, r7, sl
 80188f0:	f7ff ffb2 	bl	8018858 <__hexdig_fun>
 80188f4:	2800      	cmp	r0, #0
 80188f6:	d062      	beq.n	80189be <__gethex+0x13a>
 80188f8:	4633      	mov	r3, r6
 80188fa:	7818      	ldrb	r0, [r3, #0]
 80188fc:	2830      	cmp	r0, #48	; 0x30
 80188fe:	461f      	mov	r7, r3
 8018900:	f103 0301 	add.w	r3, r3, #1
 8018904:	d0f9      	beq.n	80188fa <__gethex+0x76>
 8018906:	f7ff ffa7 	bl	8018858 <__hexdig_fun>
 801890a:	2301      	movs	r3, #1
 801890c:	fab0 f480 	clz	r4, r0
 8018910:	0964      	lsrs	r4, r4, #5
 8018912:	4635      	mov	r5, r6
 8018914:	9300      	str	r3, [sp, #0]
 8018916:	463a      	mov	r2, r7
 8018918:	4616      	mov	r6, r2
 801891a:	3201      	adds	r2, #1
 801891c:	7830      	ldrb	r0, [r6, #0]
 801891e:	f7ff ff9b 	bl	8018858 <__hexdig_fun>
 8018922:	2800      	cmp	r0, #0
 8018924:	d1f8      	bne.n	8018918 <__gethex+0x94>
 8018926:	9901      	ldr	r1, [sp, #4]
 8018928:	4652      	mov	r2, sl
 801892a:	4630      	mov	r0, r6
 801892c:	f001 f9f8 	bl	8019d20 <strncmp>
 8018930:	b980      	cbnz	r0, 8018954 <__gethex+0xd0>
 8018932:	b94d      	cbnz	r5, 8018948 <__gethex+0xc4>
 8018934:	eb06 050a 	add.w	r5, r6, sl
 8018938:	462a      	mov	r2, r5
 801893a:	4616      	mov	r6, r2
 801893c:	3201      	adds	r2, #1
 801893e:	7830      	ldrb	r0, [r6, #0]
 8018940:	f7ff ff8a 	bl	8018858 <__hexdig_fun>
 8018944:	2800      	cmp	r0, #0
 8018946:	d1f8      	bne.n	801893a <__gethex+0xb6>
 8018948:	1bad      	subs	r5, r5, r6
 801894a:	00ad      	lsls	r5, r5, #2
 801894c:	e004      	b.n	8018958 <__gethex+0xd4>
 801894e:	2400      	movs	r4, #0
 8018950:	4625      	mov	r5, r4
 8018952:	e7e0      	b.n	8018916 <__gethex+0x92>
 8018954:	2d00      	cmp	r5, #0
 8018956:	d1f7      	bne.n	8018948 <__gethex+0xc4>
 8018958:	7833      	ldrb	r3, [r6, #0]
 801895a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801895e:	2b50      	cmp	r3, #80	; 0x50
 8018960:	d13b      	bne.n	80189da <__gethex+0x156>
 8018962:	7873      	ldrb	r3, [r6, #1]
 8018964:	2b2b      	cmp	r3, #43	; 0x2b
 8018966:	d02c      	beq.n	80189c2 <__gethex+0x13e>
 8018968:	2b2d      	cmp	r3, #45	; 0x2d
 801896a:	d02e      	beq.n	80189ca <__gethex+0x146>
 801896c:	1c71      	adds	r1, r6, #1
 801896e:	f04f 0900 	mov.w	r9, #0
 8018972:	7808      	ldrb	r0, [r1, #0]
 8018974:	f7ff ff70 	bl	8018858 <__hexdig_fun>
 8018978:	1e43      	subs	r3, r0, #1
 801897a:	b2db      	uxtb	r3, r3
 801897c:	2b18      	cmp	r3, #24
 801897e:	d82c      	bhi.n	80189da <__gethex+0x156>
 8018980:	f1a0 0210 	sub.w	r2, r0, #16
 8018984:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8018988:	f7ff ff66 	bl	8018858 <__hexdig_fun>
 801898c:	1e43      	subs	r3, r0, #1
 801898e:	b2db      	uxtb	r3, r3
 8018990:	2b18      	cmp	r3, #24
 8018992:	d91d      	bls.n	80189d0 <__gethex+0x14c>
 8018994:	f1b9 0f00 	cmp.w	r9, #0
 8018998:	d000      	beq.n	801899c <__gethex+0x118>
 801899a:	4252      	negs	r2, r2
 801899c:	4415      	add	r5, r2
 801899e:	f8cb 1000 	str.w	r1, [fp]
 80189a2:	b1e4      	cbz	r4, 80189de <__gethex+0x15a>
 80189a4:	9b00      	ldr	r3, [sp, #0]
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	bf14      	ite	ne
 80189aa:	2700      	movne	r7, #0
 80189ac:	2706      	moveq	r7, #6
 80189ae:	4638      	mov	r0, r7
 80189b0:	b009      	add	sp, #36	; 0x24
 80189b2:	ecbd 8b02 	vpop	{d8}
 80189b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189ba:	463e      	mov	r6, r7
 80189bc:	4625      	mov	r5, r4
 80189be:	2401      	movs	r4, #1
 80189c0:	e7ca      	b.n	8018958 <__gethex+0xd4>
 80189c2:	f04f 0900 	mov.w	r9, #0
 80189c6:	1cb1      	adds	r1, r6, #2
 80189c8:	e7d3      	b.n	8018972 <__gethex+0xee>
 80189ca:	f04f 0901 	mov.w	r9, #1
 80189ce:	e7fa      	b.n	80189c6 <__gethex+0x142>
 80189d0:	230a      	movs	r3, #10
 80189d2:	fb03 0202 	mla	r2, r3, r2, r0
 80189d6:	3a10      	subs	r2, #16
 80189d8:	e7d4      	b.n	8018984 <__gethex+0x100>
 80189da:	4631      	mov	r1, r6
 80189dc:	e7df      	b.n	801899e <__gethex+0x11a>
 80189de:	1bf3      	subs	r3, r6, r7
 80189e0:	3b01      	subs	r3, #1
 80189e2:	4621      	mov	r1, r4
 80189e4:	2b07      	cmp	r3, #7
 80189e6:	dc0b      	bgt.n	8018a00 <__gethex+0x17c>
 80189e8:	ee18 0a10 	vmov	r0, s16
 80189ec:	f000 fa70 	bl	8018ed0 <_Balloc>
 80189f0:	4604      	mov	r4, r0
 80189f2:	b940      	cbnz	r0, 8018a06 <__gethex+0x182>
 80189f4:	4b5d      	ldr	r3, [pc, #372]	; (8018b6c <__gethex+0x2e8>)
 80189f6:	4602      	mov	r2, r0
 80189f8:	21de      	movs	r1, #222	; 0xde
 80189fa:	485d      	ldr	r0, [pc, #372]	; (8018b70 <__gethex+0x2ec>)
 80189fc:	f001 f9b2 	bl	8019d64 <__assert_func>
 8018a00:	3101      	adds	r1, #1
 8018a02:	105b      	asrs	r3, r3, #1
 8018a04:	e7ee      	b.n	80189e4 <__gethex+0x160>
 8018a06:	f100 0914 	add.w	r9, r0, #20
 8018a0a:	f04f 0b00 	mov.w	fp, #0
 8018a0e:	f1ca 0301 	rsb	r3, sl, #1
 8018a12:	f8cd 9008 	str.w	r9, [sp, #8]
 8018a16:	f8cd b000 	str.w	fp, [sp]
 8018a1a:	9306      	str	r3, [sp, #24]
 8018a1c:	42b7      	cmp	r7, r6
 8018a1e:	d340      	bcc.n	8018aa2 <__gethex+0x21e>
 8018a20:	9802      	ldr	r0, [sp, #8]
 8018a22:	9b00      	ldr	r3, [sp, #0]
 8018a24:	f840 3b04 	str.w	r3, [r0], #4
 8018a28:	eba0 0009 	sub.w	r0, r0, r9
 8018a2c:	1080      	asrs	r0, r0, #2
 8018a2e:	0146      	lsls	r6, r0, #5
 8018a30:	6120      	str	r0, [r4, #16]
 8018a32:	4618      	mov	r0, r3
 8018a34:	f000 fb3e 	bl	80190b4 <__hi0bits>
 8018a38:	1a30      	subs	r0, r6, r0
 8018a3a:	f8d8 6000 	ldr.w	r6, [r8]
 8018a3e:	42b0      	cmp	r0, r6
 8018a40:	dd63      	ble.n	8018b0a <__gethex+0x286>
 8018a42:	1b87      	subs	r7, r0, r6
 8018a44:	4639      	mov	r1, r7
 8018a46:	4620      	mov	r0, r4
 8018a48:	f000 fedf 	bl	801980a <__any_on>
 8018a4c:	4682      	mov	sl, r0
 8018a4e:	b1a8      	cbz	r0, 8018a7c <__gethex+0x1f8>
 8018a50:	1e7b      	subs	r3, r7, #1
 8018a52:	1159      	asrs	r1, r3, #5
 8018a54:	f003 021f 	and.w	r2, r3, #31
 8018a58:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8018a5c:	f04f 0a01 	mov.w	sl, #1
 8018a60:	fa0a f202 	lsl.w	r2, sl, r2
 8018a64:	420a      	tst	r2, r1
 8018a66:	d009      	beq.n	8018a7c <__gethex+0x1f8>
 8018a68:	4553      	cmp	r3, sl
 8018a6a:	dd05      	ble.n	8018a78 <__gethex+0x1f4>
 8018a6c:	1eb9      	subs	r1, r7, #2
 8018a6e:	4620      	mov	r0, r4
 8018a70:	f000 fecb 	bl	801980a <__any_on>
 8018a74:	2800      	cmp	r0, #0
 8018a76:	d145      	bne.n	8018b04 <__gethex+0x280>
 8018a78:	f04f 0a02 	mov.w	sl, #2
 8018a7c:	4639      	mov	r1, r7
 8018a7e:	4620      	mov	r0, r4
 8018a80:	f7ff fe98 	bl	80187b4 <rshift>
 8018a84:	443d      	add	r5, r7
 8018a86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018a8a:	42ab      	cmp	r3, r5
 8018a8c:	da4c      	bge.n	8018b28 <__gethex+0x2a4>
 8018a8e:	ee18 0a10 	vmov	r0, s16
 8018a92:	4621      	mov	r1, r4
 8018a94:	f000 fa5c 	bl	8018f50 <_Bfree>
 8018a98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018a9a:	2300      	movs	r3, #0
 8018a9c:	6013      	str	r3, [r2, #0]
 8018a9e:	27a3      	movs	r7, #163	; 0xa3
 8018aa0:	e785      	b.n	80189ae <__gethex+0x12a>
 8018aa2:	1e73      	subs	r3, r6, #1
 8018aa4:	9a05      	ldr	r2, [sp, #20]
 8018aa6:	9303      	str	r3, [sp, #12]
 8018aa8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8018aac:	4293      	cmp	r3, r2
 8018aae:	d019      	beq.n	8018ae4 <__gethex+0x260>
 8018ab0:	f1bb 0f20 	cmp.w	fp, #32
 8018ab4:	d107      	bne.n	8018ac6 <__gethex+0x242>
 8018ab6:	9b02      	ldr	r3, [sp, #8]
 8018ab8:	9a00      	ldr	r2, [sp, #0]
 8018aba:	f843 2b04 	str.w	r2, [r3], #4
 8018abe:	9302      	str	r3, [sp, #8]
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	9300      	str	r3, [sp, #0]
 8018ac4:	469b      	mov	fp, r3
 8018ac6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8018aca:	f7ff fec5 	bl	8018858 <__hexdig_fun>
 8018ace:	9b00      	ldr	r3, [sp, #0]
 8018ad0:	f000 000f 	and.w	r0, r0, #15
 8018ad4:	fa00 f00b 	lsl.w	r0, r0, fp
 8018ad8:	4303      	orrs	r3, r0
 8018ada:	9300      	str	r3, [sp, #0]
 8018adc:	f10b 0b04 	add.w	fp, fp, #4
 8018ae0:	9b03      	ldr	r3, [sp, #12]
 8018ae2:	e00d      	b.n	8018b00 <__gethex+0x27c>
 8018ae4:	9b03      	ldr	r3, [sp, #12]
 8018ae6:	9a06      	ldr	r2, [sp, #24]
 8018ae8:	4413      	add	r3, r2
 8018aea:	42bb      	cmp	r3, r7
 8018aec:	d3e0      	bcc.n	8018ab0 <__gethex+0x22c>
 8018aee:	4618      	mov	r0, r3
 8018af0:	9901      	ldr	r1, [sp, #4]
 8018af2:	9307      	str	r3, [sp, #28]
 8018af4:	4652      	mov	r2, sl
 8018af6:	f001 f913 	bl	8019d20 <strncmp>
 8018afa:	9b07      	ldr	r3, [sp, #28]
 8018afc:	2800      	cmp	r0, #0
 8018afe:	d1d7      	bne.n	8018ab0 <__gethex+0x22c>
 8018b00:	461e      	mov	r6, r3
 8018b02:	e78b      	b.n	8018a1c <__gethex+0x198>
 8018b04:	f04f 0a03 	mov.w	sl, #3
 8018b08:	e7b8      	b.n	8018a7c <__gethex+0x1f8>
 8018b0a:	da0a      	bge.n	8018b22 <__gethex+0x29e>
 8018b0c:	1a37      	subs	r7, r6, r0
 8018b0e:	4621      	mov	r1, r4
 8018b10:	ee18 0a10 	vmov	r0, s16
 8018b14:	463a      	mov	r2, r7
 8018b16:	f000 fc37 	bl	8019388 <__lshift>
 8018b1a:	1bed      	subs	r5, r5, r7
 8018b1c:	4604      	mov	r4, r0
 8018b1e:	f100 0914 	add.w	r9, r0, #20
 8018b22:	f04f 0a00 	mov.w	sl, #0
 8018b26:	e7ae      	b.n	8018a86 <__gethex+0x202>
 8018b28:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8018b2c:	42a8      	cmp	r0, r5
 8018b2e:	dd72      	ble.n	8018c16 <__gethex+0x392>
 8018b30:	1b45      	subs	r5, r0, r5
 8018b32:	42ae      	cmp	r6, r5
 8018b34:	dc36      	bgt.n	8018ba4 <__gethex+0x320>
 8018b36:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018b3a:	2b02      	cmp	r3, #2
 8018b3c:	d02a      	beq.n	8018b94 <__gethex+0x310>
 8018b3e:	2b03      	cmp	r3, #3
 8018b40:	d02c      	beq.n	8018b9c <__gethex+0x318>
 8018b42:	2b01      	cmp	r3, #1
 8018b44:	d11c      	bne.n	8018b80 <__gethex+0x2fc>
 8018b46:	42ae      	cmp	r6, r5
 8018b48:	d11a      	bne.n	8018b80 <__gethex+0x2fc>
 8018b4a:	2e01      	cmp	r6, #1
 8018b4c:	d112      	bne.n	8018b74 <__gethex+0x2f0>
 8018b4e:	9a04      	ldr	r2, [sp, #16]
 8018b50:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8018b54:	6013      	str	r3, [r2, #0]
 8018b56:	2301      	movs	r3, #1
 8018b58:	6123      	str	r3, [r4, #16]
 8018b5a:	f8c9 3000 	str.w	r3, [r9]
 8018b5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018b60:	2762      	movs	r7, #98	; 0x62
 8018b62:	601c      	str	r4, [r3, #0]
 8018b64:	e723      	b.n	80189ae <__gethex+0x12a>
 8018b66:	bf00      	nop
 8018b68:	0801afe0 	.word	0x0801afe0
 8018b6c:	0801af68 	.word	0x0801af68
 8018b70:	0801af79 	.word	0x0801af79
 8018b74:	1e71      	subs	r1, r6, #1
 8018b76:	4620      	mov	r0, r4
 8018b78:	f000 fe47 	bl	801980a <__any_on>
 8018b7c:	2800      	cmp	r0, #0
 8018b7e:	d1e6      	bne.n	8018b4e <__gethex+0x2ca>
 8018b80:	ee18 0a10 	vmov	r0, s16
 8018b84:	4621      	mov	r1, r4
 8018b86:	f000 f9e3 	bl	8018f50 <_Bfree>
 8018b8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	6013      	str	r3, [r2, #0]
 8018b90:	2750      	movs	r7, #80	; 0x50
 8018b92:	e70c      	b.n	80189ae <__gethex+0x12a>
 8018b94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d1f2      	bne.n	8018b80 <__gethex+0x2fc>
 8018b9a:	e7d8      	b.n	8018b4e <__gethex+0x2ca>
 8018b9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d1d5      	bne.n	8018b4e <__gethex+0x2ca>
 8018ba2:	e7ed      	b.n	8018b80 <__gethex+0x2fc>
 8018ba4:	1e6f      	subs	r7, r5, #1
 8018ba6:	f1ba 0f00 	cmp.w	sl, #0
 8018baa:	d131      	bne.n	8018c10 <__gethex+0x38c>
 8018bac:	b127      	cbz	r7, 8018bb8 <__gethex+0x334>
 8018bae:	4639      	mov	r1, r7
 8018bb0:	4620      	mov	r0, r4
 8018bb2:	f000 fe2a 	bl	801980a <__any_on>
 8018bb6:	4682      	mov	sl, r0
 8018bb8:	117b      	asrs	r3, r7, #5
 8018bba:	2101      	movs	r1, #1
 8018bbc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8018bc0:	f007 071f 	and.w	r7, r7, #31
 8018bc4:	fa01 f707 	lsl.w	r7, r1, r7
 8018bc8:	421f      	tst	r7, r3
 8018bca:	4629      	mov	r1, r5
 8018bcc:	4620      	mov	r0, r4
 8018bce:	bf18      	it	ne
 8018bd0:	f04a 0a02 	orrne.w	sl, sl, #2
 8018bd4:	1b76      	subs	r6, r6, r5
 8018bd6:	f7ff fded 	bl	80187b4 <rshift>
 8018bda:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8018bde:	2702      	movs	r7, #2
 8018be0:	f1ba 0f00 	cmp.w	sl, #0
 8018be4:	d048      	beq.n	8018c78 <__gethex+0x3f4>
 8018be6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8018bea:	2b02      	cmp	r3, #2
 8018bec:	d015      	beq.n	8018c1a <__gethex+0x396>
 8018bee:	2b03      	cmp	r3, #3
 8018bf0:	d017      	beq.n	8018c22 <__gethex+0x39e>
 8018bf2:	2b01      	cmp	r3, #1
 8018bf4:	d109      	bne.n	8018c0a <__gethex+0x386>
 8018bf6:	f01a 0f02 	tst.w	sl, #2
 8018bfa:	d006      	beq.n	8018c0a <__gethex+0x386>
 8018bfc:	f8d9 0000 	ldr.w	r0, [r9]
 8018c00:	ea4a 0a00 	orr.w	sl, sl, r0
 8018c04:	f01a 0f01 	tst.w	sl, #1
 8018c08:	d10e      	bne.n	8018c28 <__gethex+0x3a4>
 8018c0a:	f047 0710 	orr.w	r7, r7, #16
 8018c0e:	e033      	b.n	8018c78 <__gethex+0x3f4>
 8018c10:	f04f 0a01 	mov.w	sl, #1
 8018c14:	e7d0      	b.n	8018bb8 <__gethex+0x334>
 8018c16:	2701      	movs	r7, #1
 8018c18:	e7e2      	b.n	8018be0 <__gethex+0x35c>
 8018c1a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c1c:	f1c3 0301 	rsb	r3, r3, #1
 8018c20:	9315      	str	r3, [sp, #84]	; 0x54
 8018c22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	d0f0      	beq.n	8018c0a <__gethex+0x386>
 8018c28:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8018c2c:	f104 0314 	add.w	r3, r4, #20
 8018c30:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8018c34:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8018c38:	f04f 0c00 	mov.w	ip, #0
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018c42:	f1b2 3fff 	cmp.w	r2, #4294967295
 8018c46:	d01c      	beq.n	8018c82 <__gethex+0x3fe>
 8018c48:	3201      	adds	r2, #1
 8018c4a:	6002      	str	r2, [r0, #0]
 8018c4c:	2f02      	cmp	r7, #2
 8018c4e:	f104 0314 	add.w	r3, r4, #20
 8018c52:	d13f      	bne.n	8018cd4 <__gethex+0x450>
 8018c54:	f8d8 2000 	ldr.w	r2, [r8]
 8018c58:	3a01      	subs	r2, #1
 8018c5a:	42b2      	cmp	r2, r6
 8018c5c:	d10a      	bne.n	8018c74 <__gethex+0x3f0>
 8018c5e:	1171      	asrs	r1, r6, #5
 8018c60:	2201      	movs	r2, #1
 8018c62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8018c66:	f006 061f 	and.w	r6, r6, #31
 8018c6a:	fa02 f606 	lsl.w	r6, r2, r6
 8018c6e:	421e      	tst	r6, r3
 8018c70:	bf18      	it	ne
 8018c72:	4617      	movne	r7, r2
 8018c74:	f047 0720 	orr.w	r7, r7, #32
 8018c78:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8018c7a:	601c      	str	r4, [r3, #0]
 8018c7c:	9b04      	ldr	r3, [sp, #16]
 8018c7e:	601d      	str	r5, [r3, #0]
 8018c80:	e695      	b.n	80189ae <__gethex+0x12a>
 8018c82:	4299      	cmp	r1, r3
 8018c84:	f843 cc04 	str.w	ip, [r3, #-4]
 8018c88:	d8d8      	bhi.n	8018c3c <__gethex+0x3b8>
 8018c8a:	68a3      	ldr	r3, [r4, #8]
 8018c8c:	459b      	cmp	fp, r3
 8018c8e:	db19      	blt.n	8018cc4 <__gethex+0x440>
 8018c90:	6861      	ldr	r1, [r4, #4]
 8018c92:	ee18 0a10 	vmov	r0, s16
 8018c96:	3101      	adds	r1, #1
 8018c98:	f000 f91a 	bl	8018ed0 <_Balloc>
 8018c9c:	4681      	mov	r9, r0
 8018c9e:	b918      	cbnz	r0, 8018ca8 <__gethex+0x424>
 8018ca0:	4b1a      	ldr	r3, [pc, #104]	; (8018d0c <__gethex+0x488>)
 8018ca2:	4602      	mov	r2, r0
 8018ca4:	2184      	movs	r1, #132	; 0x84
 8018ca6:	e6a8      	b.n	80189fa <__gethex+0x176>
 8018ca8:	6922      	ldr	r2, [r4, #16]
 8018caa:	3202      	adds	r2, #2
 8018cac:	f104 010c 	add.w	r1, r4, #12
 8018cb0:	0092      	lsls	r2, r2, #2
 8018cb2:	300c      	adds	r0, #12
 8018cb4:	f7fd faa6 	bl	8016204 <memcpy>
 8018cb8:	4621      	mov	r1, r4
 8018cba:	ee18 0a10 	vmov	r0, s16
 8018cbe:	f000 f947 	bl	8018f50 <_Bfree>
 8018cc2:	464c      	mov	r4, r9
 8018cc4:	6923      	ldr	r3, [r4, #16]
 8018cc6:	1c5a      	adds	r2, r3, #1
 8018cc8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018ccc:	6122      	str	r2, [r4, #16]
 8018cce:	2201      	movs	r2, #1
 8018cd0:	615a      	str	r2, [r3, #20]
 8018cd2:	e7bb      	b.n	8018c4c <__gethex+0x3c8>
 8018cd4:	6922      	ldr	r2, [r4, #16]
 8018cd6:	455a      	cmp	r2, fp
 8018cd8:	dd0b      	ble.n	8018cf2 <__gethex+0x46e>
 8018cda:	2101      	movs	r1, #1
 8018cdc:	4620      	mov	r0, r4
 8018cde:	f7ff fd69 	bl	80187b4 <rshift>
 8018ce2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018ce6:	3501      	adds	r5, #1
 8018ce8:	42ab      	cmp	r3, r5
 8018cea:	f6ff aed0 	blt.w	8018a8e <__gethex+0x20a>
 8018cee:	2701      	movs	r7, #1
 8018cf0:	e7c0      	b.n	8018c74 <__gethex+0x3f0>
 8018cf2:	f016 061f 	ands.w	r6, r6, #31
 8018cf6:	d0fa      	beq.n	8018cee <__gethex+0x46a>
 8018cf8:	4453      	add	r3, sl
 8018cfa:	f1c6 0620 	rsb	r6, r6, #32
 8018cfe:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8018d02:	f000 f9d7 	bl	80190b4 <__hi0bits>
 8018d06:	42b0      	cmp	r0, r6
 8018d08:	dbe7      	blt.n	8018cda <__gethex+0x456>
 8018d0a:	e7f0      	b.n	8018cee <__gethex+0x46a>
 8018d0c:	0801af68 	.word	0x0801af68

08018d10 <L_shift>:
 8018d10:	f1c2 0208 	rsb	r2, r2, #8
 8018d14:	0092      	lsls	r2, r2, #2
 8018d16:	b570      	push	{r4, r5, r6, lr}
 8018d18:	f1c2 0620 	rsb	r6, r2, #32
 8018d1c:	6843      	ldr	r3, [r0, #4]
 8018d1e:	6804      	ldr	r4, [r0, #0]
 8018d20:	fa03 f506 	lsl.w	r5, r3, r6
 8018d24:	432c      	orrs	r4, r5
 8018d26:	40d3      	lsrs	r3, r2
 8018d28:	6004      	str	r4, [r0, #0]
 8018d2a:	f840 3f04 	str.w	r3, [r0, #4]!
 8018d2e:	4288      	cmp	r0, r1
 8018d30:	d3f4      	bcc.n	8018d1c <L_shift+0xc>
 8018d32:	bd70      	pop	{r4, r5, r6, pc}

08018d34 <__match>:
 8018d34:	b530      	push	{r4, r5, lr}
 8018d36:	6803      	ldr	r3, [r0, #0]
 8018d38:	3301      	adds	r3, #1
 8018d3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018d3e:	b914      	cbnz	r4, 8018d46 <__match+0x12>
 8018d40:	6003      	str	r3, [r0, #0]
 8018d42:	2001      	movs	r0, #1
 8018d44:	bd30      	pop	{r4, r5, pc}
 8018d46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018d4a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8018d4e:	2d19      	cmp	r5, #25
 8018d50:	bf98      	it	ls
 8018d52:	3220      	addls	r2, #32
 8018d54:	42a2      	cmp	r2, r4
 8018d56:	d0f0      	beq.n	8018d3a <__match+0x6>
 8018d58:	2000      	movs	r0, #0
 8018d5a:	e7f3      	b.n	8018d44 <__match+0x10>

08018d5c <__hexnan>:
 8018d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d60:	680b      	ldr	r3, [r1, #0]
 8018d62:	115e      	asrs	r6, r3, #5
 8018d64:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018d68:	f013 031f 	ands.w	r3, r3, #31
 8018d6c:	b087      	sub	sp, #28
 8018d6e:	bf18      	it	ne
 8018d70:	3604      	addne	r6, #4
 8018d72:	2500      	movs	r5, #0
 8018d74:	1f37      	subs	r7, r6, #4
 8018d76:	4690      	mov	r8, r2
 8018d78:	6802      	ldr	r2, [r0, #0]
 8018d7a:	9301      	str	r3, [sp, #4]
 8018d7c:	4682      	mov	sl, r0
 8018d7e:	f846 5c04 	str.w	r5, [r6, #-4]
 8018d82:	46b9      	mov	r9, r7
 8018d84:	463c      	mov	r4, r7
 8018d86:	9502      	str	r5, [sp, #8]
 8018d88:	46ab      	mov	fp, r5
 8018d8a:	7851      	ldrb	r1, [r2, #1]
 8018d8c:	1c53      	adds	r3, r2, #1
 8018d8e:	9303      	str	r3, [sp, #12]
 8018d90:	b341      	cbz	r1, 8018de4 <__hexnan+0x88>
 8018d92:	4608      	mov	r0, r1
 8018d94:	9205      	str	r2, [sp, #20]
 8018d96:	9104      	str	r1, [sp, #16]
 8018d98:	f7ff fd5e 	bl	8018858 <__hexdig_fun>
 8018d9c:	2800      	cmp	r0, #0
 8018d9e:	d14f      	bne.n	8018e40 <__hexnan+0xe4>
 8018da0:	9904      	ldr	r1, [sp, #16]
 8018da2:	9a05      	ldr	r2, [sp, #20]
 8018da4:	2920      	cmp	r1, #32
 8018da6:	d818      	bhi.n	8018dda <__hexnan+0x7e>
 8018da8:	9b02      	ldr	r3, [sp, #8]
 8018daa:	459b      	cmp	fp, r3
 8018dac:	dd13      	ble.n	8018dd6 <__hexnan+0x7a>
 8018dae:	454c      	cmp	r4, r9
 8018db0:	d206      	bcs.n	8018dc0 <__hexnan+0x64>
 8018db2:	2d07      	cmp	r5, #7
 8018db4:	dc04      	bgt.n	8018dc0 <__hexnan+0x64>
 8018db6:	462a      	mov	r2, r5
 8018db8:	4649      	mov	r1, r9
 8018dba:	4620      	mov	r0, r4
 8018dbc:	f7ff ffa8 	bl	8018d10 <L_shift>
 8018dc0:	4544      	cmp	r4, r8
 8018dc2:	d950      	bls.n	8018e66 <__hexnan+0x10a>
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	f1a4 0904 	sub.w	r9, r4, #4
 8018dca:	f844 3c04 	str.w	r3, [r4, #-4]
 8018dce:	f8cd b008 	str.w	fp, [sp, #8]
 8018dd2:	464c      	mov	r4, r9
 8018dd4:	461d      	mov	r5, r3
 8018dd6:	9a03      	ldr	r2, [sp, #12]
 8018dd8:	e7d7      	b.n	8018d8a <__hexnan+0x2e>
 8018dda:	2929      	cmp	r1, #41	; 0x29
 8018ddc:	d156      	bne.n	8018e8c <__hexnan+0x130>
 8018dde:	3202      	adds	r2, #2
 8018de0:	f8ca 2000 	str.w	r2, [sl]
 8018de4:	f1bb 0f00 	cmp.w	fp, #0
 8018de8:	d050      	beq.n	8018e8c <__hexnan+0x130>
 8018dea:	454c      	cmp	r4, r9
 8018dec:	d206      	bcs.n	8018dfc <__hexnan+0xa0>
 8018dee:	2d07      	cmp	r5, #7
 8018df0:	dc04      	bgt.n	8018dfc <__hexnan+0xa0>
 8018df2:	462a      	mov	r2, r5
 8018df4:	4649      	mov	r1, r9
 8018df6:	4620      	mov	r0, r4
 8018df8:	f7ff ff8a 	bl	8018d10 <L_shift>
 8018dfc:	4544      	cmp	r4, r8
 8018dfe:	d934      	bls.n	8018e6a <__hexnan+0x10e>
 8018e00:	f1a8 0204 	sub.w	r2, r8, #4
 8018e04:	4623      	mov	r3, r4
 8018e06:	f853 1b04 	ldr.w	r1, [r3], #4
 8018e0a:	f842 1f04 	str.w	r1, [r2, #4]!
 8018e0e:	429f      	cmp	r7, r3
 8018e10:	d2f9      	bcs.n	8018e06 <__hexnan+0xaa>
 8018e12:	1b3b      	subs	r3, r7, r4
 8018e14:	f023 0303 	bic.w	r3, r3, #3
 8018e18:	3304      	adds	r3, #4
 8018e1a:	3401      	adds	r4, #1
 8018e1c:	3e03      	subs	r6, #3
 8018e1e:	42b4      	cmp	r4, r6
 8018e20:	bf88      	it	hi
 8018e22:	2304      	movhi	r3, #4
 8018e24:	4443      	add	r3, r8
 8018e26:	2200      	movs	r2, #0
 8018e28:	f843 2b04 	str.w	r2, [r3], #4
 8018e2c:	429f      	cmp	r7, r3
 8018e2e:	d2fb      	bcs.n	8018e28 <__hexnan+0xcc>
 8018e30:	683b      	ldr	r3, [r7, #0]
 8018e32:	b91b      	cbnz	r3, 8018e3c <__hexnan+0xe0>
 8018e34:	4547      	cmp	r7, r8
 8018e36:	d127      	bne.n	8018e88 <__hexnan+0x12c>
 8018e38:	2301      	movs	r3, #1
 8018e3a:	603b      	str	r3, [r7, #0]
 8018e3c:	2005      	movs	r0, #5
 8018e3e:	e026      	b.n	8018e8e <__hexnan+0x132>
 8018e40:	3501      	adds	r5, #1
 8018e42:	2d08      	cmp	r5, #8
 8018e44:	f10b 0b01 	add.w	fp, fp, #1
 8018e48:	dd06      	ble.n	8018e58 <__hexnan+0xfc>
 8018e4a:	4544      	cmp	r4, r8
 8018e4c:	d9c3      	bls.n	8018dd6 <__hexnan+0x7a>
 8018e4e:	2300      	movs	r3, #0
 8018e50:	f844 3c04 	str.w	r3, [r4, #-4]
 8018e54:	2501      	movs	r5, #1
 8018e56:	3c04      	subs	r4, #4
 8018e58:	6822      	ldr	r2, [r4, #0]
 8018e5a:	f000 000f 	and.w	r0, r0, #15
 8018e5e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8018e62:	6022      	str	r2, [r4, #0]
 8018e64:	e7b7      	b.n	8018dd6 <__hexnan+0x7a>
 8018e66:	2508      	movs	r5, #8
 8018e68:	e7b5      	b.n	8018dd6 <__hexnan+0x7a>
 8018e6a:	9b01      	ldr	r3, [sp, #4]
 8018e6c:	2b00      	cmp	r3, #0
 8018e6e:	d0df      	beq.n	8018e30 <__hexnan+0xd4>
 8018e70:	f04f 32ff 	mov.w	r2, #4294967295
 8018e74:	f1c3 0320 	rsb	r3, r3, #32
 8018e78:	fa22 f303 	lsr.w	r3, r2, r3
 8018e7c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8018e80:	401a      	ands	r2, r3
 8018e82:	f846 2c04 	str.w	r2, [r6, #-4]
 8018e86:	e7d3      	b.n	8018e30 <__hexnan+0xd4>
 8018e88:	3f04      	subs	r7, #4
 8018e8a:	e7d1      	b.n	8018e30 <__hexnan+0xd4>
 8018e8c:	2004      	movs	r0, #4
 8018e8e:	b007      	add	sp, #28
 8018e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018e94 <_localeconv_r>:
 8018e94:	4800      	ldr	r0, [pc, #0]	; (8018e98 <_localeconv_r+0x4>)
 8018e96:	4770      	bx	lr
 8018e98:	24000258 	.word	0x24000258

08018e9c <malloc>:
 8018e9c:	4b02      	ldr	r3, [pc, #8]	; (8018ea8 <malloc+0xc>)
 8018e9e:	4601      	mov	r1, r0
 8018ea0:	6818      	ldr	r0, [r3, #0]
 8018ea2:	f000 bd55 	b.w	8019950 <_malloc_r>
 8018ea6:	bf00      	nop
 8018ea8:	24000100 	.word	0x24000100

08018eac <__ascii_mbtowc>:
 8018eac:	b082      	sub	sp, #8
 8018eae:	b901      	cbnz	r1, 8018eb2 <__ascii_mbtowc+0x6>
 8018eb0:	a901      	add	r1, sp, #4
 8018eb2:	b142      	cbz	r2, 8018ec6 <__ascii_mbtowc+0x1a>
 8018eb4:	b14b      	cbz	r3, 8018eca <__ascii_mbtowc+0x1e>
 8018eb6:	7813      	ldrb	r3, [r2, #0]
 8018eb8:	600b      	str	r3, [r1, #0]
 8018eba:	7812      	ldrb	r2, [r2, #0]
 8018ebc:	1e10      	subs	r0, r2, #0
 8018ebe:	bf18      	it	ne
 8018ec0:	2001      	movne	r0, #1
 8018ec2:	b002      	add	sp, #8
 8018ec4:	4770      	bx	lr
 8018ec6:	4610      	mov	r0, r2
 8018ec8:	e7fb      	b.n	8018ec2 <__ascii_mbtowc+0x16>
 8018eca:	f06f 0001 	mvn.w	r0, #1
 8018ece:	e7f8      	b.n	8018ec2 <__ascii_mbtowc+0x16>

08018ed0 <_Balloc>:
 8018ed0:	b570      	push	{r4, r5, r6, lr}
 8018ed2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018ed4:	4604      	mov	r4, r0
 8018ed6:	460d      	mov	r5, r1
 8018ed8:	b976      	cbnz	r6, 8018ef8 <_Balloc+0x28>
 8018eda:	2010      	movs	r0, #16
 8018edc:	f7ff ffde 	bl	8018e9c <malloc>
 8018ee0:	4602      	mov	r2, r0
 8018ee2:	6260      	str	r0, [r4, #36]	; 0x24
 8018ee4:	b920      	cbnz	r0, 8018ef0 <_Balloc+0x20>
 8018ee6:	4b18      	ldr	r3, [pc, #96]	; (8018f48 <_Balloc+0x78>)
 8018ee8:	4818      	ldr	r0, [pc, #96]	; (8018f4c <_Balloc+0x7c>)
 8018eea:	2166      	movs	r1, #102	; 0x66
 8018eec:	f000 ff3a 	bl	8019d64 <__assert_func>
 8018ef0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018ef4:	6006      	str	r6, [r0, #0]
 8018ef6:	60c6      	str	r6, [r0, #12]
 8018ef8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018efa:	68f3      	ldr	r3, [r6, #12]
 8018efc:	b183      	cbz	r3, 8018f20 <_Balloc+0x50>
 8018efe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018f00:	68db      	ldr	r3, [r3, #12]
 8018f02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018f06:	b9b8      	cbnz	r0, 8018f38 <_Balloc+0x68>
 8018f08:	2101      	movs	r1, #1
 8018f0a:	fa01 f605 	lsl.w	r6, r1, r5
 8018f0e:	1d72      	adds	r2, r6, #5
 8018f10:	0092      	lsls	r2, r2, #2
 8018f12:	4620      	mov	r0, r4
 8018f14:	f000 fc9a 	bl	801984c <_calloc_r>
 8018f18:	b160      	cbz	r0, 8018f34 <_Balloc+0x64>
 8018f1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018f1e:	e00e      	b.n	8018f3e <_Balloc+0x6e>
 8018f20:	2221      	movs	r2, #33	; 0x21
 8018f22:	2104      	movs	r1, #4
 8018f24:	4620      	mov	r0, r4
 8018f26:	f000 fc91 	bl	801984c <_calloc_r>
 8018f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018f2c:	60f0      	str	r0, [r6, #12]
 8018f2e:	68db      	ldr	r3, [r3, #12]
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d1e4      	bne.n	8018efe <_Balloc+0x2e>
 8018f34:	2000      	movs	r0, #0
 8018f36:	bd70      	pop	{r4, r5, r6, pc}
 8018f38:	6802      	ldr	r2, [r0, #0]
 8018f3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018f3e:	2300      	movs	r3, #0
 8018f40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018f44:	e7f7      	b.n	8018f36 <_Balloc+0x66>
 8018f46:	bf00      	nop
 8018f48:	0801aef6 	.word	0x0801aef6
 8018f4c:	0801aff4 	.word	0x0801aff4

08018f50 <_Bfree>:
 8018f50:	b570      	push	{r4, r5, r6, lr}
 8018f52:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018f54:	4605      	mov	r5, r0
 8018f56:	460c      	mov	r4, r1
 8018f58:	b976      	cbnz	r6, 8018f78 <_Bfree+0x28>
 8018f5a:	2010      	movs	r0, #16
 8018f5c:	f7ff ff9e 	bl	8018e9c <malloc>
 8018f60:	4602      	mov	r2, r0
 8018f62:	6268      	str	r0, [r5, #36]	; 0x24
 8018f64:	b920      	cbnz	r0, 8018f70 <_Bfree+0x20>
 8018f66:	4b09      	ldr	r3, [pc, #36]	; (8018f8c <_Bfree+0x3c>)
 8018f68:	4809      	ldr	r0, [pc, #36]	; (8018f90 <_Bfree+0x40>)
 8018f6a:	218a      	movs	r1, #138	; 0x8a
 8018f6c:	f000 fefa 	bl	8019d64 <__assert_func>
 8018f70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018f74:	6006      	str	r6, [r0, #0]
 8018f76:	60c6      	str	r6, [r0, #12]
 8018f78:	b13c      	cbz	r4, 8018f8a <_Bfree+0x3a>
 8018f7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018f7c:	6862      	ldr	r2, [r4, #4]
 8018f7e:	68db      	ldr	r3, [r3, #12]
 8018f80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018f84:	6021      	str	r1, [r4, #0]
 8018f86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018f8a:	bd70      	pop	{r4, r5, r6, pc}
 8018f8c:	0801aef6 	.word	0x0801aef6
 8018f90:	0801aff4 	.word	0x0801aff4

08018f94 <__multadd>:
 8018f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f98:	690d      	ldr	r5, [r1, #16]
 8018f9a:	4607      	mov	r7, r0
 8018f9c:	460c      	mov	r4, r1
 8018f9e:	461e      	mov	r6, r3
 8018fa0:	f101 0c14 	add.w	ip, r1, #20
 8018fa4:	2000      	movs	r0, #0
 8018fa6:	f8dc 3000 	ldr.w	r3, [ip]
 8018faa:	b299      	uxth	r1, r3
 8018fac:	fb02 6101 	mla	r1, r2, r1, r6
 8018fb0:	0c1e      	lsrs	r6, r3, #16
 8018fb2:	0c0b      	lsrs	r3, r1, #16
 8018fb4:	fb02 3306 	mla	r3, r2, r6, r3
 8018fb8:	b289      	uxth	r1, r1
 8018fba:	3001      	adds	r0, #1
 8018fbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018fc0:	4285      	cmp	r5, r0
 8018fc2:	f84c 1b04 	str.w	r1, [ip], #4
 8018fc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018fca:	dcec      	bgt.n	8018fa6 <__multadd+0x12>
 8018fcc:	b30e      	cbz	r6, 8019012 <__multadd+0x7e>
 8018fce:	68a3      	ldr	r3, [r4, #8]
 8018fd0:	42ab      	cmp	r3, r5
 8018fd2:	dc19      	bgt.n	8019008 <__multadd+0x74>
 8018fd4:	6861      	ldr	r1, [r4, #4]
 8018fd6:	4638      	mov	r0, r7
 8018fd8:	3101      	adds	r1, #1
 8018fda:	f7ff ff79 	bl	8018ed0 <_Balloc>
 8018fde:	4680      	mov	r8, r0
 8018fe0:	b928      	cbnz	r0, 8018fee <__multadd+0x5a>
 8018fe2:	4602      	mov	r2, r0
 8018fe4:	4b0c      	ldr	r3, [pc, #48]	; (8019018 <__multadd+0x84>)
 8018fe6:	480d      	ldr	r0, [pc, #52]	; (801901c <__multadd+0x88>)
 8018fe8:	21b5      	movs	r1, #181	; 0xb5
 8018fea:	f000 febb 	bl	8019d64 <__assert_func>
 8018fee:	6922      	ldr	r2, [r4, #16]
 8018ff0:	3202      	adds	r2, #2
 8018ff2:	f104 010c 	add.w	r1, r4, #12
 8018ff6:	0092      	lsls	r2, r2, #2
 8018ff8:	300c      	adds	r0, #12
 8018ffa:	f7fd f903 	bl	8016204 <memcpy>
 8018ffe:	4621      	mov	r1, r4
 8019000:	4638      	mov	r0, r7
 8019002:	f7ff ffa5 	bl	8018f50 <_Bfree>
 8019006:	4644      	mov	r4, r8
 8019008:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801900c:	3501      	adds	r5, #1
 801900e:	615e      	str	r6, [r3, #20]
 8019010:	6125      	str	r5, [r4, #16]
 8019012:	4620      	mov	r0, r4
 8019014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019018:	0801af68 	.word	0x0801af68
 801901c:	0801aff4 	.word	0x0801aff4

08019020 <__s2b>:
 8019020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019024:	460c      	mov	r4, r1
 8019026:	4615      	mov	r5, r2
 8019028:	461f      	mov	r7, r3
 801902a:	2209      	movs	r2, #9
 801902c:	3308      	adds	r3, #8
 801902e:	4606      	mov	r6, r0
 8019030:	fb93 f3f2 	sdiv	r3, r3, r2
 8019034:	2100      	movs	r1, #0
 8019036:	2201      	movs	r2, #1
 8019038:	429a      	cmp	r2, r3
 801903a:	db09      	blt.n	8019050 <__s2b+0x30>
 801903c:	4630      	mov	r0, r6
 801903e:	f7ff ff47 	bl	8018ed0 <_Balloc>
 8019042:	b940      	cbnz	r0, 8019056 <__s2b+0x36>
 8019044:	4602      	mov	r2, r0
 8019046:	4b19      	ldr	r3, [pc, #100]	; (80190ac <__s2b+0x8c>)
 8019048:	4819      	ldr	r0, [pc, #100]	; (80190b0 <__s2b+0x90>)
 801904a:	21ce      	movs	r1, #206	; 0xce
 801904c:	f000 fe8a 	bl	8019d64 <__assert_func>
 8019050:	0052      	lsls	r2, r2, #1
 8019052:	3101      	adds	r1, #1
 8019054:	e7f0      	b.n	8019038 <__s2b+0x18>
 8019056:	9b08      	ldr	r3, [sp, #32]
 8019058:	6143      	str	r3, [r0, #20]
 801905a:	2d09      	cmp	r5, #9
 801905c:	f04f 0301 	mov.w	r3, #1
 8019060:	6103      	str	r3, [r0, #16]
 8019062:	dd16      	ble.n	8019092 <__s2b+0x72>
 8019064:	f104 0909 	add.w	r9, r4, #9
 8019068:	46c8      	mov	r8, r9
 801906a:	442c      	add	r4, r5
 801906c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8019070:	4601      	mov	r1, r0
 8019072:	3b30      	subs	r3, #48	; 0x30
 8019074:	220a      	movs	r2, #10
 8019076:	4630      	mov	r0, r6
 8019078:	f7ff ff8c 	bl	8018f94 <__multadd>
 801907c:	45a0      	cmp	r8, r4
 801907e:	d1f5      	bne.n	801906c <__s2b+0x4c>
 8019080:	f1a5 0408 	sub.w	r4, r5, #8
 8019084:	444c      	add	r4, r9
 8019086:	1b2d      	subs	r5, r5, r4
 8019088:	1963      	adds	r3, r4, r5
 801908a:	42bb      	cmp	r3, r7
 801908c:	db04      	blt.n	8019098 <__s2b+0x78>
 801908e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019092:	340a      	adds	r4, #10
 8019094:	2509      	movs	r5, #9
 8019096:	e7f6      	b.n	8019086 <__s2b+0x66>
 8019098:	f814 3b01 	ldrb.w	r3, [r4], #1
 801909c:	4601      	mov	r1, r0
 801909e:	3b30      	subs	r3, #48	; 0x30
 80190a0:	220a      	movs	r2, #10
 80190a2:	4630      	mov	r0, r6
 80190a4:	f7ff ff76 	bl	8018f94 <__multadd>
 80190a8:	e7ee      	b.n	8019088 <__s2b+0x68>
 80190aa:	bf00      	nop
 80190ac:	0801af68 	.word	0x0801af68
 80190b0:	0801aff4 	.word	0x0801aff4

080190b4 <__hi0bits>:
 80190b4:	0c03      	lsrs	r3, r0, #16
 80190b6:	041b      	lsls	r3, r3, #16
 80190b8:	b9d3      	cbnz	r3, 80190f0 <__hi0bits+0x3c>
 80190ba:	0400      	lsls	r0, r0, #16
 80190bc:	2310      	movs	r3, #16
 80190be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80190c2:	bf04      	itt	eq
 80190c4:	0200      	lsleq	r0, r0, #8
 80190c6:	3308      	addeq	r3, #8
 80190c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80190cc:	bf04      	itt	eq
 80190ce:	0100      	lsleq	r0, r0, #4
 80190d0:	3304      	addeq	r3, #4
 80190d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80190d6:	bf04      	itt	eq
 80190d8:	0080      	lsleq	r0, r0, #2
 80190da:	3302      	addeq	r3, #2
 80190dc:	2800      	cmp	r0, #0
 80190de:	db05      	blt.n	80190ec <__hi0bits+0x38>
 80190e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80190e4:	f103 0301 	add.w	r3, r3, #1
 80190e8:	bf08      	it	eq
 80190ea:	2320      	moveq	r3, #32
 80190ec:	4618      	mov	r0, r3
 80190ee:	4770      	bx	lr
 80190f0:	2300      	movs	r3, #0
 80190f2:	e7e4      	b.n	80190be <__hi0bits+0xa>

080190f4 <__lo0bits>:
 80190f4:	6803      	ldr	r3, [r0, #0]
 80190f6:	f013 0207 	ands.w	r2, r3, #7
 80190fa:	4601      	mov	r1, r0
 80190fc:	d00b      	beq.n	8019116 <__lo0bits+0x22>
 80190fe:	07da      	lsls	r2, r3, #31
 8019100:	d423      	bmi.n	801914a <__lo0bits+0x56>
 8019102:	0798      	lsls	r0, r3, #30
 8019104:	bf49      	itett	mi
 8019106:	085b      	lsrmi	r3, r3, #1
 8019108:	089b      	lsrpl	r3, r3, #2
 801910a:	2001      	movmi	r0, #1
 801910c:	600b      	strmi	r3, [r1, #0]
 801910e:	bf5c      	itt	pl
 8019110:	600b      	strpl	r3, [r1, #0]
 8019112:	2002      	movpl	r0, #2
 8019114:	4770      	bx	lr
 8019116:	b298      	uxth	r0, r3
 8019118:	b9a8      	cbnz	r0, 8019146 <__lo0bits+0x52>
 801911a:	0c1b      	lsrs	r3, r3, #16
 801911c:	2010      	movs	r0, #16
 801911e:	b2da      	uxtb	r2, r3
 8019120:	b90a      	cbnz	r2, 8019126 <__lo0bits+0x32>
 8019122:	3008      	adds	r0, #8
 8019124:	0a1b      	lsrs	r3, r3, #8
 8019126:	071a      	lsls	r2, r3, #28
 8019128:	bf04      	itt	eq
 801912a:	091b      	lsreq	r3, r3, #4
 801912c:	3004      	addeq	r0, #4
 801912e:	079a      	lsls	r2, r3, #30
 8019130:	bf04      	itt	eq
 8019132:	089b      	lsreq	r3, r3, #2
 8019134:	3002      	addeq	r0, #2
 8019136:	07da      	lsls	r2, r3, #31
 8019138:	d403      	bmi.n	8019142 <__lo0bits+0x4e>
 801913a:	085b      	lsrs	r3, r3, #1
 801913c:	f100 0001 	add.w	r0, r0, #1
 8019140:	d005      	beq.n	801914e <__lo0bits+0x5a>
 8019142:	600b      	str	r3, [r1, #0]
 8019144:	4770      	bx	lr
 8019146:	4610      	mov	r0, r2
 8019148:	e7e9      	b.n	801911e <__lo0bits+0x2a>
 801914a:	2000      	movs	r0, #0
 801914c:	4770      	bx	lr
 801914e:	2020      	movs	r0, #32
 8019150:	4770      	bx	lr
	...

08019154 <__i2b>:
 8019154:	b510      	push	{r4, lr}
 8019156:	460c      	mov	r4, r1
 8019158:	2101      	movs	r1, #1
 801915a:	f7ff feb9 	bl	8018ed0 <_Balloc>
 801915e:	4602      	mov	r2, r0
 8019160:	b928      	cbnz	r0, 801916e <__i2b+0x1a>
 8019162:	4b05      	ldr	r3, [pc, #20]	; (8019178 <__i2b+0x24>)
 8019164:	4805      	ldr	r0, [pc, #20]	; (801917c <__i2b+0x28>)
 8019166:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801916a:	f000 fdfb 	bl	8019d64 <__assert_func>
 801916e:	2301      	movs	r3, #1
 8019170:	6144      	str	r4, [r0, #20]
 8019172:	6103      	str	r3, [r0, #16]
 8019174:	bd10      	pop	{r4, pc}
 8019176:	bf00      	nop
 8019178:	0801af68 	.word	0x0801af68
 801917c:	0801aff4 	.word	0x0801aff4

08019180 <__multiply>:
 8019180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019184:	4691      	mov	r9, r2
 8019186:	690a      	ldr	r2, [r1, #16]
 8019188:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801918c:	429a      	cmp	r2, r3
 801918e:	bfb8      	it	lt
 8019190:	460b      	movlt	r3, r1
 8019192:	460c      	mov	r4, r1
 8019194:	bfbc      	itt	lt
 8019196:	464c      	movlt	r4, r9
 8019198:	4699      	movlt	r9, r3
 801919a:	6927      	ldr	r7, [r4, #16]
 801919c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80191a0:	68a3      	ldr	r3, [r4, #8]
 80191a2:	6861      	ldr	r1, [r4, #4]
 80191a4:	eb07 060a 	add.w	r6, r7, sl
 80191a8:	42b3      	cmp	r3, r6
 80191aa:	b085      	sub	sp, #20
 80191ac:	bfb8      	it	lt
 80191ae:	3101      	addlt	r1, #1
 80191b0:	f7ff fe8e 	bl	8018ed0 <_Balloc>
 80191b4:	b930      	cbnz	r0, 80191c4 <__multiply+0x44>
 80191b6:	4602      	mov	r2, r0
 80191b8:	4b44      	ldr	r3, [pc, #272]	; (80192cc <__multiply+0x14c>)
 80191ba:	4845      	ldr	r0, [pc, #276]	; (80192d0 <__multiply+0x150>)
 80191bc:	f240 115d 	movw	r1, #349	; 0x15d
 80191c0:	f000 fdd0 	bl	8019d64 <__assert_func>
 80191c4:	f100 0514 	add.w	r5, r0, #20
 80191c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80191cc:	462b      	mov	r3, r5
 80191ce:	2200      	movs	r2, #0
 80191d0:	4543      	cmp	r3, r8
 80191d2:	d321      	bcc.n	8019218 <__multiply+0x98>
 80191d4:	f104 0314 	add.w	r3, r4, #20
 80191d8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80191dc:	f109 0314 	add.w	r3, r9, #20
 80191e0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80191e4:	9202      	str	r2, [sp, #8]
 80191e6:	1b3a      	subs	r2, r7, r4
 80191e8:	3a15      	subs	r2, #21
 80191ea:	f022 0203 	bic.w	r2, r2, #3
 80191ee:	3204      	adds	r2, #4
 80191f0:	f104 0115 	add.w	r1, r4, #21
 80191f4:	428f      	cmp	r7, r1
 80191f6:	bf38      	it	cc
 80191f8:	2204      	movcc	r2, #4
 80191fa:	9201      	str	r2, [sp, #4]
 80191fc:	9a02      	ldr	r2, [sp, #8]
 80191fe:	9303      	str	r3, [sp, #12]
 8019200:	429a      	cmp	r2, r3
 8019202:	d80c      	bhi.n	801921e <__multiply+0x9e>
 8019204:	2e00      	cmp	r6, #0
 8019206:	dd03      	ble.n	8019210 <__multiply+0x90>
 8019208:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801920c:	2b00      	cmp	r3, #0
 801920e:	d05a      	beq.n	80192c6 <__multiply+0x146>
 8019210:	6106      	str	r6, [r0, #16]
 8019212:	b005      	add	sp, #20
 8019214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019218:	f843 2b04 	str.w	r2, [r3], #4
 801921c:	e7d8      	b.n	80191d0 <__multiply+0x50>
 801921e:	f8b3 a000 	ldrh.w	sl, [r3]
 8019222:	f1ba 0f00 	cmp.w	sl, #0
 8019226:	d024      	beq.n	8019272 <__multiply+0xf2>
 8019228:	f104 0e14 	add.w	lr, r4, #20
 801922c:	46a9      	mov	r9, r5
 801922e:	f04f 0c00 	mov.w	ip, #0
 8019232:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019236:	f8d9 1000 	ldr.w	r1, [r9]
 801923a:	fa1f fb82 	uxth.w	fp, r2
 801923e:	b289      	uxth	r1, r1
 8019240:	fb0a 110b 	mla	r1, sl, fp, r1
 8019244:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019248:	f8d9 2000 	ldr.w	r2, [r9]
 801924c:	4461      	add	r1, ip
 801924e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019252:	fb0a c20b 	mla	r2, sl, fp, ip
 8019256:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801925a:	b289      	uxth	r1, r1
 801925c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019260:	4577      	cmp	r7, lr
 8019262:	f849 1b04 	str.w	r1, [r9], #4
 8019266:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801926a:	d8e2      	bhi.n	8019232 <__multiply+0xb2>
 801926c:	9a01      	ldr	r2, [sp, #4]
 801926e:	f845 c002 	str.w	ip, [r5, r2]
 8019272:	9a03      	ldr	r2, [sp, #12]
 8019274:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019278:	3304      	adds	r3, #4
 801927a:	f1b9 0f00 	cmp.w	r9, #0
 801927e:	d020      	beq.n	80192c2 <__multiply+0x142>
 8019280:	6829      	ldr	r1, [r5, #0]
 8019282:	f104 0c14 	add.w	ip, r4, #20
 8019286:	46ae      	mov	lr, r5
 8019288:	f04f 0a00 	mov.w	sl, #0
 801928c:	f8bc b000 	ldrh.w	fp, [ip]
 8019290:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019294:	fb09 220b 	mla	r2, r9, fp, r2
 8019298:	4492      	add	sl, r2
 801929a:	b289      	uxth	r1, r1
 801929c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80192a0:	f84e 1b04 	str.w	r1, [lr], #4
 80192a4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80192a8:	f8be 1000 	ldrh.w	r1, [lr]
 80192ac:	0c12      	lsrs	r2, r2, #16
 80192ae:	fb09 1102 	mla	r1, r9, r2, r1
 80192b2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80192b6:	4567      	cmp	r7, ip
 80192b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80192bc:	d8e6      	bhi.n	801928c <__multiply+0x10c>
 80192be:	9a01      	ldr	r2, [sp, #4]
 80192c0:	50a9      	str	r1, [r5, r2]
 80192c2:	3504      	adds	r5, #4
 80192c4:	e79a      	b.n	80191fc <__multiply+0x7c>
 80192c6:	3e01      	subs	r6, #1
 80192c8:	e79c      	b.n	8019204 <__multiply+0x84>
 80192ca:	bf00      	nop
 80192cc:	0801af68 	.word	0x0801af68
 80192d0:	0801aff4 	.word	0x0801aff4

080192d4 <__pow5mult>:
 80192d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80192d8:	4615      	mov	r5, r2
 80192da:	f012 0203 	ands.w	r2, r2, #3
 80192de:	4606      	mov	r6, r0
 80192e0:	460f      	mov	r7, r1
 80192e2:	d007      	beq.n	80192f4 <__pow5mult+0x20>
 80192e4:	4c25      	ldr	r4, [pc, #148]	; (801937c <__pow5mult+0xa8>)
 80192e6:	3a01      	subs	r2, #1
 80192e8:	2300      	movs	r3, #0
 80192ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80192ee:	f7ff fe51 	bl	8018f94 <__multadd>
 80192f2:	4607      	mov	r7, r0
 80192f4:	10ad      	asrs	r5, r5, #2
 80192f6:	d03d      	beq.n	8019374 <__pow5mult+0xa0>
 80192f8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80192fa:	b97c      	cbnz	r4, 801931c <__pow5mult+0x48>
 80192fc:	2010      	movs	r0, #16
 80192fe:	f7ff fdcd 	bl	8018e9c <malloc>
 8019302:	4602      	mov	r2, r0
 8019304:	6270      	str	r0, [r6, #36]	; 0x24
 8019306:	b928      	cbnz	r0, 8019314 <__pow5mult+0x40>
 8019308:	4b1d      	ldr	r3, [pc, #116]	; (8019380 <__pow5mult+0xac>)
 801930a:	481e      	ldr	r0, [pc, #120]	; (8019384 <__pow5mult+0xb0>)
 801930c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8019310:	f000 fd28 	bl	8019d64 <__assert_func>
 8019314:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019318:	6004      	str	r4, [r0, #0]
 801931a:	60c4      	str	r4, [r0, #12]
 801931c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8019320:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019324:	b94c      	cbnz	r4, 801933a <__pow5mult+0x66>
 8019326:	f240 2171 	movw	r1, #625	; 0x271
 801932a:	4630      	mov	r0, r6
 801932c:	f7ff ff12 	bl	8019154 <__i2b>
 8019330:	2300      	movs	r3, #0
 8019332:	f8c8 0008 	str.w	r0, [r8, #8]
 8019336:	4604      	mov	r4, r0
 8019338:	6003      	str	r3, [r0, #0]
 801933a:	f04f 0900 	mov.w	r9, #0
 801933e:	07eb      	lsls	r3, r5, #31
 8019340:	d50a      	bpl.n	8019358 <__pow5mult+0x84>
 8019342:	4639      	mov	r1, r7
 8019344:	4622      	mov	r2, r4
 8019346:	4630      	mov	r0, r6
 8019348:	f7ff ff1a 	bl	8019180 <__multiply>
 801934c:	4639      	mov	r1, r7
 801934e:	4680      	mov	r8, r0
 8019350:	4630      	mov	r0, r6
 8019352:	f7ff fdfd 	bl	8018f50 <_Bfree>
 8019356:	4647      	mov	r7, r8
 8019358:	106d      	asrs	r5, r5, #1
 801935a:	d00b      	beq.n	8019374 <__pow5mult+0xa0>
 801935c:	6820      	ldr	r0, [r4, #0]
 801935e:	b938      	cbnz	r0, 8019370 <__pow5mult+0x9c>
 8019360:	4622      	mov	r2, r4
 8019362:	4621      	mov	r1, r4
 8019364:	4630      	mov	r0, r6
 8019366:	f7ff ff0b 	bl	8019180 <__multiply>
 801936a:	6020      	str	r0, [r4, #0]
 801936c:	f8c0 9000 	str.w	r9, [r0]
 8019370:	4604      	mov	r4, r0
 8019372:	e7e4      	b.n	801933e <__pow5mult+0x6a>
 8019374:	4638      	mov	r0, r7
 8019376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801937a:	bf00      	nop
 801937c:	0801b140 	.word	0x0801b140
 8019380:	0801aef6 	.word	0x0801aef6
 8019384:	0801aff4 	.word	0x0801aff4

08019388 <__lshift>:
 8019388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801938c:	460c      	mov	r4, r1
 801938e:	6849      	ldr	r1, [r1, #4]
 8019390:	6923      	ldr	r3, [r4, #16]
 8019392:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019396:	68a3      	ldr	r3, [r4, #8]
 8019398:	4607      	mov	r7, r0
 801939a:	4691      	mov	r9, r2
 801939c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80193a0:	f108 0601 	add.w	r6, r8, #1
 80193a4:	42b3      	cmp	r3, r6
 80193a6:	db0b      	blt.n	80193c0 <__lshift+0x38>
 80193a8:	4638      	mov	r0, r7
 80193aa:	f7ff fd91 	bl	8018ed0 <_Balloc>
 80193ae:	4605      	mov	r5, r0
 80193b0:	b948      	cbnz	r0, 80193c6 <__lshift+0x3e>
 80193b2:	4602      	mov	r2, r0
 80193b4:	4b2a      	ldr	r3, [pc, #168]	; (8019460 <__lshift+0xd8>)
 80193b6:	482b      	ldr	r0, [pc, #172]	; (8019464 <__lshift+0xdc>)
 80193b8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80193bc:	f000 fcd2 	bl	8019d64 <__assert_func>
 80193c0:	3101      	adds	r1, #1
 80193c2:	005b      	lsls	r3, r3, #1
 80193c4:	e7ee      	b.n	80193a4 <__lshift+0x1c>
 80193c6:	2300      	movs	r3, #0
 80193c8:	f100 0114 	add.w	r1, r0, #20
 80193cc:	f100 0210 	add.w	r2, r0, #16
 80193d0:	4618      	mov	r0, r3
 80193d2:	4553      	cmp	r3, sl
 80193d4:	db37      	blt.n	8019446 <__lshift+0xbe>
 80193d6:	6920      	ldr	r0, [r4, #16]
 80193d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80193dc:	f104 0314 	add.w	r3, r4, #20
 80193e0:	f019 091f 	ands.w	r9, r9, #31
 80193e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80193e8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80193ec:	d02f      	beq.n	801944e <__lshift+0xc6>
 80193ee:	f1c9 0e20 	rsb	lr, r9, #32
 80193f2:	468a      	mov	sl, r1
 80193f4:	f04f 0c00 	mov.w	ip, #0
 80193f8:	681a      	ldr	r2, [r3, #0]
 80193fa:	fa02 f209 	lsl.w	r2, r2, r9
 80193fe:	ea42 020c 	orr.w	r2, r2, ip
 8019402:	f84a 2b04 	str.w	r2, [sl], #4
 8019406:	f853 2b04 	ldr.w	r2, [r3], #4
 801940a:	4298      	cmp	r0, r3
 801940c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8019410:	d8f2      	bhi.n	80193f8 <__lshift+0x70>
 8019412:	1b03      	subs	r3, r0, r4
 8019414:	3b15      	subs	r3, #21
 8019416:	f023 0303 	bic.w	r3, r3, #3
 801941a:	3304      	adds	r3, #4
 801941c:	f104 0215 	add.w	r2, r4, #21
 8019420:	4290      	cmp	r0, r2
 8019422:	bf38      	it	cc
 8019424:	2304      	movcc	r3, #4
 8019426:	f841 c003 	str.w	ip, [r1, r3]
 801942a:	f1bc 0f00 	cmp.w	ip, #0
 801942e:	d001      	beq.n	8019434 <__lshift+0xac>
 8019430:	f108 0602 	add.w	r6, r8, #2
 8019434:	3e01      	subs	r6, #1
 8019436:	4638      	mov	r0, r7
 8019438:	612e      	str	r6, [r5, #16]
 801943a:	4621      	mov	r1, r4
 801943c:	f7ff fd88 	bl	8018f50 <_Bfree>
 8019440:	4628      	mov	r0, r5
 8019442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019446:	f842 0f04 	str.w	r0, [r2, #4]!
 801944a:	3301      	adds	r3, #1
 801944c:	e7c1      	b.n	80193d2 <__lshift+0x4a>
 801944e:	3904      	subs	r1, #4
 8019450:	f853 2b04 	ldr.w	r2, [r3], #4
 8019454:	f841 2f04 	str.w	r2, [r1, #4]!
 8019458:	4298      	cmp	r0, r3
 801945a:	d8f9      	bhi.n	8019450 <__lshift+0xc8>
 801945c:	e7ea      	b.n	8019434 <__lshift+0xac>
 801945e:	bf00      	nop
 8019460:	0801af68 	.word	0x0801af68
 8019464:	0801aff4 	.word	0x0801aff4

08019468 <__mcmp>:
 8019468:	b530      	push	{r4, r5, lr}
 801946a:	6902      	ldr	r2, [r0, #16]
 801946c:	690c      	ldr	r4, [r1, #16]
 801946e:	1b12      	subs	r2, r2, r4
 8019470:	d10e      	bne.n	8019490 <__mcmp+0x28>
 8019472:	f100 0314 	add.w	r3, r0, #20
 8019476:	3114      	adds	r1, #20
 8019478:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801947c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019480:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019484:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019488:	42a5      	cmp	r5, r4
 801948a:	d003      	beq.n	8019494 <__mcmp+0x2c>
 801948c:	d305      	bcc.n	801949a <__mcmp+0x32>
 801948e:	2201      	movs	r2, #1
 8019490:	4610      	mov	r0, r2
 8019492:	bd30      	pop	{r4, r5, pc}
 8019494:	4283      	cmp	r3, r0
 8019496:	d3f3      	bcc.n	8019480 <__mcmp+0x18>
 8019498:	e7fa      	b.n	8019490 <__mcmp+0x28>
 801949a:	f04f 32ff 	mov.w	r2, #4294967295
 801949e:	e7f7      	b.n	8019490 <__mcmp+0x28>

080194a0 <__mdiff>:
 80194a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194a4:	460c      	mov	r4, r1
 80194a6:	4606      	mov	r6, r0
 80194a8:	4611      	mov	r1, r2
 80194aa:	4620      	mov	r0, r4
 80194ac:	4690      	mov	r8, r2
 80194ae:	f7ff ffdb 	bl	8019468 <__mcmp>
 80194b2:	1e05      	subs	r5, r0, #0
 80194b4:	d110      	bne.n	80194d8 <__mdiff+0x38>
 80194b6:	4629      	mov	r1, r5
 80194b8:	4630      	mov	r0, r6
 80194ba:	f7ff fd09 	bl	8018ed0 <_Balloc>
 80194be:	b930      	cbnz	r0, 80194ce <__mdiff+0x2e>
 80194c0:	4b3a      	ldr	r3, [pc, #232]	; (80195ac <__mdiff+0x10c>)
 80194c2:	4602      	mov	r2, r0
 80194c4:	f240 2132 	movw	r1, #562	; 0x232
 80194c8:	4839      	ldr	r0, [pc, #228]	; (80195b0 <__mdiff+0x110>)
 80194ca:	f000 fc4b 	bl	8019d64 <__assert_func>
 80194ce:	2301      	movs	r3, #1
 80194d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80194d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194d8:	bfa4      	itt	ge
 80194da:	4643      	movge	r3, r8
 80194dc:	46a0      	movge	r8, r4
 80194de:	4630      	mov	r0, r6
 80194e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80194e4:	bfa6      	itte	ge
 80194e6:	461c      	movge	r4, r3
 80194e8:	2500      	movge	r5, #0
 80194ea:	2501      	movlt	r5, #1
 80194ec:	f7ff fcf0 	bl	8018ed0 <_Balloc>
 80194f0:	b920      	cbnz	r0, 80194fc <__mdiff+0x5c>
 80194f2:	4b2e      	ldr	r3, [pc, #184]	; (80195ac <__mdiff+0x10c>)
 80194f4:	4602      	mov	r2, r0
 80194f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80194fa:	e7e5      	b.n	80194c8 <__mdiff+0x28>
 80194fc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8019500:	6926      	ldr	r6, [r4, #16]
 8019502:	60c5      	str	r5, [r0, #12]
 8019504:	f104 0914 	add.w	r9, r4, #20
 8019508:	f108 0514 	add.w	r5, r8, #20
 801950c:	f100 0e14 	add.w	lr, r0, #20
 8019510:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8019514:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8019518:	f108 0210 	add.w	r2, r8, #16
 801951c:	46f2      	mov	sl, lr
 801951e:	2100      	movs	r1, #0
 8019520:	f859 3b04 	ldr.w	r3, [r9], #4
 8019524:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019528:	fa1f f883 	uxth.w	r8, r3
 801952c:	fa11 f18b 	uxtah	r1, r1, fp
 8019530:	0c1b      	lsrs	r3, r3, #16
 8019532:	eba1 0808 	sub.w	r8, r1, r8
 8019536:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801953a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801953e:	fa1f f888 	uxth.w	r8, r8
 8019542:	1419      	asrs	r1, r3, #16
 8019544:	454e      	cmp	r6, r9
 8019546:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801954a:	f84a 3b04 	str.w	r3, [sl], #4
 801954e:	d8e7      	bhi.n	8019520 <__mdiff+0x80>
 8019550:	1b33      	subs	r3, r6, r4
 8019552:	3b15      	subs	r3, #21
 8019554:	f023 0303 	bic.w	r3, r3, #3
 8019558:	3304      	adds	r3, #4
 801955a:	3415      	adds	r4, #21
 801955c:	42a6      	cmp	r6, r4
 801955e:	bf38      	it	cc
 8019560:	2304      	movcc	r3, #4
 8019562:	441d      	add	r5, r3
 8019564:	4473      	add	r3, lr
 8019566:	469e      	mov	lr, r3
 8019568:	462e      	mov	r6, r5
 801956a:	4566      	cmp	r6, ip
 801956c:	d30e      	bcc.n	801958c <__mdiff+0xec>
 801956e:	f10c 0203 	add.w	r2, ip, #3
 8019572:	1b52      	subs	r2, r2, r5
 8019574:	f022 0203 	bic.w	r2, r2, #3
 8019578:	3d03      	subs	r5, #3
 801957a:	45ac      	cmp	ip, r5
 801957c:	bf38      	it	cc
 801957e:	2200      	movcc	r2, #0
 8019580:	441a      	add	r2, r3
 8019582:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019586:	b17b      	cbz	r3, 80195a8 <__mdiff+0x108>
 8019588:	6107      	str	r7, [r0, #16]
 801958a:	e7a3      	b.n	80194d4 <__mdiff+0x34>
 801958c:	f856 8b04 	ldr.w	r8, [r6], #4
 8019590:	fa11 f288 	uxtah	r2, r1, r8
 8019594:	1414      	asrs	r4, r2, #16
 8019596:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801959a:	b292      	uxth	r2, r2
 801959c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80195a0:	f84e 2b04 	str.w	r2, [lr], #4
 80195a4:	1421      	asrs	r1, r4, #16
 80195a6:	e7e0      	b.n	801956a <__mdiff+0xca>
 80195a8:	3f01      	subs	r7, #1
 80195aa:	e7ea      	b.n	8019582 <__mdiff+0xe2>
 80195ac:	0801af68 	.word	0x0801af68
 80195b0:	0801aff4 	.word	0x0801aff4

080195b4 <__ulp>:
 80195b4:	b082      	sub	sp, #8
 80195b6:	ed8d 0b00 	vstr	d0, [sp]
 80195ba:	9b01      	ldr	r3, [sp, #4]
 80195bc:	4912      	ldr	r1, [pc, #72]	; (8019608 <__ulp+0x54>)
 80195be:	4019      	ands	r1, r3
 80195c0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80195c4:	2900      	cmp	r1, #0
 80195c6:	dd05      	ble.n	80195d4 <__ulp+0x20>
 80195c8:	2200      	movs	r2, #0
 80195ca:	460b      	mov	r3, r1
 80195cc:	ec43 2b10 	vmov	d0, r2, r3
 80195d0:	b002      	add	sp, #8
 80195d2:	4770      	bx	lr
 80195d4:	4249      	negs	r1, r1
 80195d6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80195da:	ea4f 5021 	mov.w	r0, r1, asr #20
 80195de:	f04f 0200 	mov.w	r2, #0
 80195e2:	f04f 0300 	mov.w	r3, #0
 80195e6:	da04      	bge.n	80195f2 <__ulp+0x3e>
 80195e8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80195ec:	fa41 f300 	asr.w	r3, r1, r0
 80195f0:	e7ec      	b.n	80195cc <__ulp+0x18>
 80195f2:	f1a0 0114 	sub.w	r1, r0, #20
 80195f6:	291e      	cmp	r1, #30
 80195f8:	bfda      	itte	le
 80195fa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80195fe:	fa20 f101 	lsrle.w	r1, r0, r1
 8019602:	2101      	movgt	r1, #1
 8019604:	460a      	mov	r2, r1
 8019606:	e7e1      	b.n	80195cc <__ulp+0x18>
 8019608:	7ff00000 	.word	0x7ff00000

0801960c <__b2d>:
 801960c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801960e:	6905      	ldr	r5, [r0, #16]
 8019610:	f100 0714 	add.w	r7, r0, #20
 8019614:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8019618:	1f2e      	subs	r6, r5, #4
 801961a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801961e:	4620      	mov	r0, r4
 8019620:	f7ff fd48 	bl	80190b4 <__hi0bits>
 8019624:	f1c0 0320 	rsb	r3, r0, #32
 8019628:	280a      	cmp	r0, #10
 801962a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80196a8 <__b2d+0x9c>
 801962e:	600b      	str	r3, [r1, #0]
 8019630:	dc14      	bgt.n	801965c <__b2d+0x50>
 8019632:	f1c0 0e0b 	rsb	lr, r0, #11
 8019636:	fa24 f10e 	lsr.w	r1, r4, lr
 801963a:	42b7      	cmp	r7, r6
 801963c:	ea41 030c 	orr.w	r3, r1, ip
 8019640:	bf34      	ite	cc
 8019642:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019646:	2100      	movcs	r1, #0
 8019648:	3015      	adds	r0, #21
 801964a:	fa04 f000 	lsl.w	r0, r4, r0
 801964e:	fa21 f10e 	lsr.w	r1, r1, lr
 8019652:	ea40 0201 	orr.w	r2, r0, r1
 8019656:	ec43 2b10 	vmov	d0, r2, r3
 801965a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801965c:	42b7      	cmp	r7, r6
 801965e:	bf3a      	itte	cc
 8019660:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8019664:	f1a5 0608 	subcc.w	r6, r5, #8
 8019668:	2100      	movcs	r1, #0
 801966a:	380b      	subs	r0, #11
 801966c:	d017      	beq.n	801969e <__b2d+0x92>
 801966e:	f1c0 0c20 	rsb	ip, r0, #32
 8019672:	fa04 f500 	lsl.w	r5, r4, r0
 8019676:	42be      	cmp	r6, r7
 8019678:	fa21 f40c 	lsr.w	r4, r1, ip
 801967c:	ea45 0504 	orr.w	r5, r5, r4
 8019680:	bf8c      	ite	hi
 8019682:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8019686:	2400      	movls	r4, #0
 8019688:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801968c:	fa01 f000 	lsl.w	r0, r1, r0
 8019690:	fa24 f40c 	lsr.w	r4, r4, ip
 8019694:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8019698:	ea40 0204 	orr.w	r2, r0, r4
 801969c:	e7db      	b.n	8019656 <__b2d+0x4a>
 801969e:	ea44 030c 	orr.w	r3, r4, ip
 80196a2:	460a      	mov	r2, r1
 80196a4:	e7d7      	b.n	8019656 <__b2d+0x4a>
 80196a6:	bf00      	nop
 80196a8:	3ff00000 	.word	0x3ff00000

080196ac <__d2b>:
 80196ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80196b0:	4689      	mov	r9, r1
 80196b2:	2101      	movs	r1, #1
 80196b4:	ec57 6b10 	vmov	r6, r7, d0
 80196b8:	4690      	mov	r8, r2
 80196ba:	f7ff fc09 	bl	8018ed0 <_Balloc>
 80196be:	4604      	mov	r4, r0
 80196c0:	b930      	cbnz	r0, 80196d0 <__d2b+0x24>
 80196c2:	4602      	mov	r2, r0
 80196c4:	4b25      	ldr	r3, [pc, #148]	; (801975c <__d2b+0xb0>)
 80196c6:	4826      	ldr	r0, [pc, #152]	; (8019760 <__d2b+0xb4>)
 80196c8:	f240 310a 	movw	r1, #778	; 0x30a
 80196cc:	f000 fb4a 	bl	8019d64 <__assert_func>
 80196d0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80196d4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80196d8:	bb35      	cbnz	r5, 8019728 <__d2b+0x7c>
 80196da:	2e00      	cmp	r6, #0
 80196dc:	9301      	str	r3, [sp, #4]
 80196de:	d028      	beq.n	8019732 <__d2b+0x86>
 80196e0:	4668      	mov	r0, sp
 80196e2:	9600      	str	r6, [sp, #0]
 80196e4:	f7ff fd06 	bl	80190f4 <__lo0bits>
 80196e8:	9900      	ldr	r1, [sp, #0]
 80196ea:	b300      	cbz	r0, 801972e <__d2b+0x82>
 80196ec:	9a01      	ldr	r2, [sp, #4]
 80196ee:	f1c0 0320 	rsb	r3, r0, #32
 80196f2:	fa02 f303 	lsl.w	r3, r2, r3
 80196f6:	430b      	orrs	r3, r1
 80196f8:	40c2      	lsrs	r2, r0
 80196fa:	6163      	str	r3, [r4, #20]
 80196fc:	9201      	str	r2, [sp, #4]
 80196fe:	9b01      	ldr	r3, [sp, #4]
 8019700:	61a3      	str	r3, [r4, #24]
 8019702:	2b00      	cmp	r3, #0
 8019704:	bf14      	ite	ne
 8019706:	2202      	movne	r2, #2
 8019708:	2201      	moveq	r2, #1
 801970a:	6122      	str	r2, [r4, #16]
 801970c:	b1d5      	cbz	r5, 8019744 <__d2b+0x98>
 801970e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019712:	4405      	add	r5, r0
 8019714:	f8c9 5000 	str.w	r5, [r9]
 8019718:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801971c:	f8c8 0000 	str.w	r0, [r8]
 8019720:	4620      	mov	r0, r4
 8019722:	b003      	add	sp, #12
 8019724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019728:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801972c:	e7d5      	b.n	80196da <__d2b+0x2e>
 801972e:	6161      	str	r1, [r4, #20]
 8019730:	e7e5      	b.n	80196fe <__d2b+0x52>
 8019732:	a801      	add	r0, sp, #4
 8019734:	f7ff fcde 	bl	80190f4 <__lo0bits>
 8019738:	9b01      	ldr	r3, [sp, #4]
 801973a:	6163      	str	r3, [r4, #20]
 801973c:	2201      	movs	r2, #1
 801973e:	6122      	str	r2, [r4, #16]
 8019740:	3020      	adds	r0, #32
 8019742:	e7e3      	b.n	801970c <__d2b+0x60>
 8019744:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019748:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801974c:	f8c9 0000 	str.w	r0, [r9]
 8019750:	6918      	ldr	r0, [r3, #16]
 8019752:	f7ff fcaf 	bl	80190b4 <__hi0bits>
 8019756:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801975a:	e7df      	b.n	801971c <__d2b+0x70>
 801975c:	0801af68 	.word	0x0801af68
 8019760:	0801aff4 	.word	0x0801aff4

08019764 <__ratio>:
 8019764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019768:	4688      	mov	r8, r1
 801976a:	4669      	mov	r1, sp
 801976c:	4681      	mov	r9, r0
 801976e:	f7ff ff4d 	bl	801960c <__b2d>
 8019772:	a901      	add	r1, sp, #4
 8019774:	4640      	mov	r0, r8
 8019776:	ec55 4b10 	vmov	r4, r5, d0
 801977a:	ee10 aa10 	vmov	sl, s0
 801977e:	f7ff ff45 	bl	801960c <__b2d>
 8019782:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019786:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801978a:	1a59      	subs	r1, r3, r1
 801978c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019790:	1ad3      	subs	r3, r2, r3
 8019792:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8019796:	ec57 6b10 	vmov	r6, r7, d0
 801979a:	2b00      	cmp	r3, #0
 801979c:	bfd6      	itet	le
 801979e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80197a2:	462a      	movgt	r2, r5
 80197a4:	463a      	movle	r2, r7
 80197a6:	46ab      	mov	fp, r5
 80197a8:	bfd6      	itet	le
 80197aa:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80197ae:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80197b2:	ee00 3a90 	vmovle	s1, r3
 80197b6:	ec4b ab17 	vmov	d7, sl, fp
 80197ba:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80197be:	b003      	add	sp, #12
 80197c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080197c4 <__copybits>:
 80197c4:	3901      	subs	r1, #1
 80197c6:	b570      	push	{r4, r5, r6, lr}
 80197c8:	1149      	asrs	r1, r1, #5
 80197ca:	6914      	ldr	r4, [r2, #16]
 80197cc:	3101      	adds	r1, #1
 80197ce:	f102 0314 	add.w	r3, r2, #20
 80197d2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80197d6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80197da:	1f05      	subs	r5, r0, #4
 80197dc:	42a3      	cmp	r3, r4
 80197de:	d30c      	bcc.n	80197fa <__copybits+0x36>
 80197e0:	1aa3      	subs	r3, r4, r2
 80197e2:	3b11      	subs	r3, #17
 80197e4:	f023 0303 	bic.w	r3, r3, #3
 80197e8:	3211      	adds	r2, #17
 80197ea:	42a2      	cmp	r2, r4
 80197ec:	bf88      	it	hi
 80197ee:	2300      	movhi	r3, #0
 80197f0:	4418      	add	r0, r3
 80197f2:	2300      	movs	r3, #0
 80197f4:	4288      	cmp	r0, r1
 80197f6:	d305      	bcc.n	8019804 <__copybits+0x40>
 80197f8:	bd70      	pop	{r4, r5, r6, pc}
 80197fa:	f853 6b04 	ldr.w	r6, [r3], #4
 80197fe:	f845 6f04 	str.w	r6, [r5, #4]!
 8019802:	e7eb      	b.n	80197dc <__copybits+0x18>
 8019804:	f840 3b04 	str.w	r3, [r0], #4
 8019808:	e7f4      	b.n	80197f4 <__copybits+0x30>

0801980a <__any_on>:
 801980a:	f100 0214 	add.w	r2, r0, #20
 801980e:	6900      	ldr	r0, [r0, #16]
 8019810:	114b      	asrs	r3, r1, #5
 8019812:	4298      	cmp	r0, r3
 8019814:	b510      	push	{r4, lr}
 8019816:	db11      	blt.n	801983c <__any_on+0x32>
 8019818:	dd0a      	ble.n	8019830 <__any_on+0x26>
 801981a:	f011 011f 	ands.w	r1, r1, #31
 801981e:	d007      	beq.n	8019830 <__any_on+0x26>
 8019820:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8019824:	fa24 f001 	lsr.w	r0, r4, r1
 8019828:	fa00 f101 	lsl.w	r1, r0, r1
 801982c:	428c      	cmp	r4, r1
 801982e:	d10b      	bne.n	8019848 <__any_on+0x3e>
 8019830:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019834:	4293      	cmp	r3, r2
 8019836:	d803      	bhi.n	8019840 <__any_on+0x36>
 8019838:	2000      	movs	r0, #0
 801983a:	bd10      	pop	{r4, pc}
 801983c:	4603      	mov	r3, r0
 801983e:	e7f7      	b.n	8019830 <__any_on+0x26>
 8019840:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019844:	2900      	cmp	r1, #0
 8019846:	d0f5      	beq.n	8019834 <__any_on+0x2a>
 8019848:	2001      	movs	r0, #1
 801984a:	e7f6      	b.n	801983a <__any_on+0x30>

0801984c <_calloc_r>:
 801984c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801984e:	fba1 2402 	umull	r2, r4, r1, r2
 8019852:	b94c      	cbnz	r4, 8019868 <_calloc_r+0x1c>
 8019854:	4611      	mov	r1, r2
 8019856:	9201      	str	r2, [sp, #4]
 8019858:	f000 f87a 	bl	8019950 <_malloc_r>
 801985c:	9a01      	ldr	r2, [sp, #4]
 801985e:	4605      	mov	r5, r0
 8019860:	b930      	cbnz	r0, 8019870 <_calloc_r+0x24>
 8019862:	4628      	mov	r0, r5
 8019864:	b003      	add	sp, #12
 8019866:	bd30      	pop	{r4, r5, pc}
 8019868:	220c      	movs	r2, #12
 801986a:	6002      	str	r2, [r0, #0]
 801986c:	2500      	movs	r5, #0
 801986e:	e7f8      	b.n	8019862 <_calloc_r+0x16>
 8019870:	4621      	mov	r1, r4
 8019872:	f7fc fcd5 	bl	8016220 <memset>
 8019876:	e7f4      	b.n	8019862 <_calloc_r+0x16>

08019878 <_free_r>:
 8019878:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801987a:	2900      	cmp	r1, #0
 801987c:	d044      	beq.n	8019908 <_free_r+0x90>
 801987e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019882:	9001      	str	r0, [sp, #4]
 8019884:	2b00      	cmp	r3, #0
 8019886:	f1a1 0404 	sub.w	r4, r1, #4
 801988a:	bfb8      	it	lt
 801988c:	18e4      	addlt	r4, r4, r3
 801988e:	f000 fab3 	bl	8019df8 <__malloc_lock>
 8019892:	4a1e      	ldr	r2, [pc, #120]	; (801990c <_free_r+0x94>)
 8019894:	9801      	ldr	r0, [sp, #4]
 8019896:	6813      	ldr	r3, [r2, #0]
 8019898:	b933      	cbnz	r3, 80198a8 <_free_r+0x30>
 801989a:	6063      	str	r3, [r4, #4]
 801989c:	6014      	str	r4, [r2, #0]
 801989e:	b003      	add	sp, #12
 80198a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80198a4:	f000 baae 	b.w	8019e04 <__malloc_unlock>
 80198a8:	42a3      	cmp	r3, r4
 80198aa:	d908      	bls.n	80198be <_free_r+0x46>
 80198ac:	6825      	ldr	r5, [r4, #0]
 80198ae:	1961      	adds	r1, r4, r5
 80198b0:	428b      	cmp	r3, r1
 80198b2:	bf01      	itttt	eq
 80198b4:	6819      	ldreq	r1, [r3, #0]
 80198b6:	685b      	ldreq	r3, [r3, #4]
 80198b8:	1949      	addeq	r1, r1, r5
 80198ba:	6021      	streq	r1, [r4, #0]
 80198bc:	e7ed      	b.n	801989a <_free_r+0x22>
 80198be:	461a      	mov	r2, r3
 80198c0:	685b      	ldr	r3, [r3, #4]
 80198c2:	b10b      	cbz	r3, 80198c8 <_free_r+0x50>
 80198c4:	42a3      	cmp	r3, r4
 80198c6:	d9fa      	bls.n	80198be <_free_r+0x46>
 80198c8:	6811      	ldr	r1, [r2, #0]
 80198ca:	1855      	adds	r5, r2, r1
 80198cc:	42a5      	cmp	r5, r4
 80198ce:	d10b      	bne.n	80198e8 <_free_r+0x70>
 80198d0:	6824      	ldr	r4, [r4, #0]
 80198d2:	4421      	add	r1, r4
 80198d4:	1854      	adds	r4, r2, r1
 80198d6:	42a3      	cmp	r3, r4
 80198d8:	6011      	str	r1, [r2, #0]
 80198da:	d1e0      	bne.n	801989e <_free_r+0x26>
 80198dc:	681c      	ldr	r4, [r3, #0]
 80198de:	685b      	ldr	r3, [r3, #4]
 80198e0:	6053      	str	r3, [r2, #4]
 80198e2:	4421      	add	r1, r4
 80198e4:	6011      	str	r1, [r2, #0]
 80198e6:	e7da      	b.n	801989e <_free_r+0x26>
 80198e8:	d902      	bls.n	80198f0 <_free_r+0x78>
 80198ea:	230c      	movs	r3, #12
 80198ec:	6003      	str	r3, [r0, #0]
 80198ee:	e7d6      	b.n	801989e <_free_r+0x26>
 80198f0:	6825      	ldr	r5, [r4, #0]
 80198f2:	1961      	adds	r1, r4, r5
 80198f4:	428b      	cmp	r3, r1
 80198f6:	bf04      	itt	eq
 80198f8:	6819      	ldreq	r1, [r3, #0]
 80198fa:	685b      	ldreq	r3, [r3, #4]
 80198fc:	6063      	str	r3, [r4, #4]
 80198fe:	bf04      	itt	eq
 8019900:	1949      	addeq	r1, r1, r5
 8019902:	6021      	streq	r1, [r4, #0]
 8019904:	6054      	str	r4, [r2, #4]
 8019906:	e7ca      	b.n	801989e <_free_r+0x26>
 8019908:	b003      	add	sp, #12
 801990a:	bd30      	pop	{r4, r5, pc}
 801990c:	24002918 	.word	0x24002918

08019910 <sbrk_aligned>:
 8019910:	b570      	push	{r4, r5, r6, lr}
 8019912:	4e0e      	ldr	r6, [pc, #56]	; (801994c <sbrk_aligned+0x3c>)
 8019914:	460c      	mov	r4, r1
 8019916:	6831      	ldr	r1, [r6, #0]
 8019918:	4605      	mov	r5, r0
 801991a:	b911      	cbnz	r1, 8019922 <sbrk_aligned+0x12>
 801991c:	f000 f9f0 	bl	8019d00 <_sbrk_r>
 8019920:	6030      	str	r0, [r6, #0]
 8019922:	4621      	mov	r1, r4
 8019924:	4628      	mov	r0, r5
 8019926:	f000 f9eb 	bl	8019d00 <_sbrk_r>
 801992a:	1c43      	adds	r3, r0, #1
 801992c:	d00a      	beq.n	8019944 <sbrk_aligned+0x34>
 801992e:	1cc4      	adds	r4, r0, #3
 8019930:	f024 0403 	bic.w	r4, r4, #3
 8019934:	42a0      	cmp	r0, r4
 8019936:	d007      	beq.n	8019948 <sbrk_aligned+0x38>
 8019938:	1a21      	subs	r1, r4, r0
 801993a:	4628      	mov	r0, r5
 801993c:	f000 f9e0 	bl	8019d00 <_sbrk_r>
 8019940:	3001      	adds	r0, #1
 8019942:	d101      	bne.n	8019948 <sbrk_aligned+0x38>
 8019944:	f04f 34ff 	mov.w	r4, #4294967295
 8019948:	4620      	mov	r0, r4
 801994a:	bd70      	pop	{r4, r5, r6, pc}
 801994c:	2400291c 	.word	0x2400291c

08019950 <_malloc_r>:
 8019950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019954:	1ccd      	adds	r5, r1, #3
 8019956:	f025 0503 	bic.w	r5, r5, #3
 801995a:	3508      	adds	r5, #8
 801995c:	2d0c      	cmp	r5, #12
 801995e:	bf38      	it	cc
 8019960:	250c      	movcc	r5, #12
 8019962:	2d00      	cmp	r5, #0
 8019964:	4607      	mov	r7, r0
 8019966:	db01      	blt.n	801996c <_malloc_r+0x1c>
 8019968:	42a9      	cmp	r1, r5
 801996a:	d905      	bls.n	8019978 <_malloc_r+0x28>
 801996c:	230c      	movs	r3, #12
 801996e:	603b      	str	r3, [r7, #0]
 8019970:	2600      	movs	r6, #0
 8019972:	4630      	mov	r0, r6
 8019974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019978:	4e2e      	ldr	r6, [pc, #184]	; (8019a34 <_malloc_r+0xe4>)
 801997a:	f000 fa3d 	bl	8019df8 <__malloc_lock>
 801997e:	6833      	ldr	r3, [r6, #0]
 8019980:	461c      	mov	r4, r3
 8019982:	bb34      	cbnz	r4, 80199d2 <_malloc_r+0x82>
 8019984:	4629      	mov	r1, r5
 8019986:	4638      	mov	r0, r7
 8019988:	f7ff ffc2 	bl	8019910 <sbrk_aligned>
 801998c:	1c43      	adds	r3, r0, #1
 801998e:	4604      	mov	r4, r0
 8019990:	d14d      	bne.n	8019a2e <_malloc_r+0xde>
 8019992:	6834      	ldr	r4, [r6, #0]
 8019994:	4626      	mov	r6, r4
 8019996:	2e00      	cmp	r6, #0
 8019998:	d140      	bne.n	8019a1c <_malloc_r+0xcc>
 801999a:	6823      	ldr	r3, [r4, #0]
 801999c:	4631      	mov	r1, r6
 801999e:	4638      	mov	r0, r7
 80199a0:	eb04 0803 	add.w	r8, r4, r3
 80199a4:	f000 f9ac 	bl	8019d00 <_sbrk_r>
 80199a8:	4580      	cmp	r8, r0
 80199aa:	d13a      	bne.n	8019a22 <_malloc_r+0xd2>
 80199ac:	6821      	ldr	r1, [r4, #0]
 80199ae:	3503      	adds	r5, #3
 80199b0:	1a6d      	subs	r5, r5, r1
 80199b2:	f025 0503 	bic.w	r5, r5, #3
 80199b6:	3508      	adds	r5, #8
 80199b8:	2d0c      	cmp	r5, #12
 80199ba:	bf38      	it	cc
 80199bc:	250c      	movcc	r5, #12
 80199be:	4629      	mov	r1, r5
 80199c0:	4638      	mov	r0, r7
 80199c2:	f7ff ffa5 	bl	8019910 <sbrk_aligned>
 80199c6:	3001      	adds	r0, #1
 80199c8:	d02b      	beq.n	8019a22 <_malloc_r+0xd2>
 80199ca:	6823      	ldr	r3, [r4, #0]
 80199cc:	442b      	add	r3, r5
 80199ce:	6023      	str	r3, [r4, #0]
 80199d0:	e00e      	b.n	80199f0 <_malloc_r+0xa0>
 80199d2:	6822      	ldr	r2, [r4, #0]
 80199d4:	1b52      	subs	r2, r2, r5
 80199d6:	d41e      	bmi.n	8019a16 <_malloc_r+0xc6>
 80199d8:	2a0b      	cmp	r2, #11
 80199da:	d916      	bls.n	8019a0a <_malloc_r+0xba>
 80199dc:	1961      	adds	r1, r4, r5
 80199de:	42a3      	cmp	r3, r4
 80199e0:	6025      	str	r5, [r4, #0]
 80199e2:	bf18      	it	ne
 80199e4:	6059      	strne	r1, [r3, #4]
 80199e6:	6863      	ldr	r3, [r4, #4]
 80199e8:	bf08      	it	eq
 80199ea:	6031      	streq	r1, [r6, #0]
 80199ec:	5162      	str	r2, [r4, r5]
 80199ee:	604b      	str	r3, [r1, #4]
 80199f0:	4638      	mov	r0, r7
 80199f2:	f104 060b 	add.w	r6, r4, #11
 80199f6:	f000 fa05 	bl	8019e04 <__malloc_unlock>
 80199fa:	f026 0607 	bic.w	r6, r6, #7
 80199fe:	1d23      	adds	r3, r4, #4
 8019a00:	1af2      	subs	r2, r6, r3
 8019a02:	d0b6      	beq.n	8019972 <_malloc_r+0x22>
 8019a04:	1b9b      	subs	r3, r3, r6
 8019a06:	50a3      	str	r3, [r4, r2]
 8019a08:	e7b3      	b.n	8019972 <_malloc_r+0x22>
 8019a0a:	6862      	ldr	r2, [r4, #4]
 8019a0c:	42a3      	cmp	r3, r4
 8019a0e:	bf0c      	ite	eq
 8019a10:	6032      	streq	r2, [r6, #0]
 8019a12:	605a      	strne	r2, [r3, #4]
 8019a14:	e7ec      	b.n	80199f0 <_malloc_r+0xa0>
 8019a16:	4623      	mov	r3, r4
 8019a18:	6864      	ldr	r4, [r4, #4]
 8019a1a:	e7b2      	b.n	8019982 <_malloc_r+0x32>
 8019a1c:	4634      	mov	r4, r6
 8019a1e:	6876      	ldr	r6, [r6, #4]
 8019a20:	e7b9      	b.n	8019996 <_malloc_r+0x46>
 8019a22:	230c      	movs	r3, #12
 8019a24:	603b      	str	r3, [r7, #0]
 8019a26:	4638      	mov	r0, r7
 8019a28:	f000 f9ec 	bl	8019e04 <__malloc_unlock>
 8019a2c:	e7a1      	b.n	8019972 <_malloc_r+0x22>
 8019a2e:	6025      	str	r5, [r4, #0]
 8019a30:	e7de      	b.n	80199f0 <_malloc_r+0xa0>
 8019a32:	bf00      	nop
 8019a34:	24002918 	.word	0x24002918

08019a38 <__ssputs_r>:
 8019a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a3c:	688e      	ldr	r6, [r1, #8]
 8019a3e:	429e      	cmp	r6, r3
 8019a40:	4682      	mov	sl, r0
 8019a42:	460c      	mov	r4, r1
 8019a44:	4690      	mov	r8, r2
 8019a46:	461f      	mov	r7, r3
 8019a48:	d838      	bhi.n	8019abc <__ssputs_r+0x84>
 8019a4a:	898a      	ldrh	r2, [r1, #12]
 8019a4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019a50:	d032      	beq.n	8019ab8 <__ssputs_r+0x80>
 8019a52:	6825      	ldr	r5, [r4, #0]
 8019a54:	6909      	ldr	r1, [r1, #16]
 8019a56:	eba5 0901 	sub.w	r9, r5, r1
 8019a5a:	6965      	ldr	r5, [r4, #20]
 8019a5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019a60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019a64:	3301      	adds	r3, #1
 8019a66:	444b      	add	r3, r9
 8019a68:	106d      	asrs	r5, r5, #1
 8019a6a:	429d      	cmp	r5, r3
 8019a6c:	bf38      	it	cc
 8019a6e:	461d      	movcc	r5, r3
 8019a70:	0553      	lsls	r3, r2, #21
 8019a72:	d531      	bpl.n	8019ad8 <__ssputs_r+0xa0>
 8019a74:	4629      	mov	r1, r5
 8019a76:	f7ff ff6b 	bl	8019950 <_malloc_r>
 8019a7a:	4606      	mov	r6, r0
 8019a7c:	b950      	cbnz	r0, 8019a94 <__ssputs_r+0x5c>
 8019a7e:	230c      	movs	r3, #12
 8019a80:	f8ca 3000 	str.w	r3, [sl]
 8019a84:	89a3      	ldrh	r3, [r4, #12]
 8019a86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019a8a:	81a3      	strh	r3, [r4, #12]
 8019a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8019a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a94:	6921      	ldr	r1, [r4, #16]
 8019a96:	464a      	mov	r2, r9
 8019a98:	f7fc fbb4 	bl	8016204 <memcpy>
 8019a9c:	89a3      	ldrh	r3, [r4, #12]
 8019a9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019aa6:	81a3      	strh	r3, [r4, #12]
 8019aa8:	6126      	str	r6, [r4, #16]
 8019aaa:	6165      	str	r5, [r4, #20]
 8019aac:	444e      	add	r6, r9
 8019aae:	eba5 0509 	sub.w	r5, r5, r9
 8019ab2:	6026      	str	r6, [r4, #0]
 8019ab4:	60a5      	str	r5, [r4, #8]
 8019ab6:	463e      	mov	r6, r7
 8019ab8:	42be      	cmp	r6, r7
 8019aba:	d900      	bls.n	8019abe <__ssputs_r+0x86>
 8019abc:	463e      	mov	r6, r7
 8019abe:	6820      	ldr	r0, [r4, #0]
 8019ac0:	4632      	mov	r2, r6
 8019ac2:	4641      	mov	r1, r8
 8019ac4:	f000 f97e 	bl	8019dc4 <memmove>
 8019ac8:	68a3      	ldr	r3, [r4, #8]
 8019aca:	1b9b      	subs	r3, r3, r6
 8019acc:	60a3      	str	r3, [r4, #8]
 8019ace:	6823      	ldr	r3, [r4, #0]
 8019ad0:	4433      	add	r3, r6
 8019ad2:	6023      	str	r3, [r4, #0]
 8019ad4:	2000      	movs	r0, #0
 8019ad6:	e7db      	b.n	8019a90 <__ssputs_r+0x58>
 8019ad8:	462a      	mov	r2, r5
 8019ada:	f000 f999 	bl	8019e10 <_realloc_r>
 8019ade:	4606      	mov	r6, r0
 8019ae0:	2800      	cmp	r0, #0
 8019ae2:	d1e1      	bne.n	8019aa8 <__ssputs_r+0x70>
 8019ae4:	6921      	ldr	r1, [r4, #16]
 8019ae6:	4650      	mov	r0, sl
 8019ae8:	f7ff fec6 	bl	8019878 <_free_r>
 8019aec:	e7c7      	b.n	8019a7e <__ssputs_r+0x46>
	...

08019af0 <_svfiprintf_r>:
 8019af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019af4:	4698      	mov	r8, r3
 8019af6:	898b      	ldrh	r3, [r1, #12]
 8019af8:	061b      	lsls	r3, r3, #24
 8019afa:	b09d      	sub	sp, #116	; 0x74
 8019afc:	4607      	mov	r7, r0
 8019afe:	460d      	mov	r5, r1
 8019b00:	4614      	mov	r4, r2
 8019b02:	d50e      	bpl.n	8019b22 <_svfiprintf_r+0x32>
 8019b04:	690b      	ldr	r3, [r1, #16]
 8019b06:	b963      	cbnz	r3, 8019b22 <_svfiprintf_r+0x32>
 8019b08:	2140      	movs	r1, #64	; 0x40
 8019b0a:	f7ff ff21 	bl	8019950 <_malloc_r>
 8019b0e:	6028      	str	r0, [r5, #0]
 8019b10:	6128      	str	r0, [r5, #16]
 8019b12:	b920      	cbnz	r0, 8019b1e <_svfiprintf_r+0x2e>
 8019b14:	230c      	movs	r3, #12
 8019b16:	603b      	str	r3, [r7, #0]
 8019b18:	f04f 30ff 	mov.w	r0, #4294967295
 8019b1c:	e0d1      	b.n	8019cc2 <_svfiprintf_r+0x1d2>
 8019b1e:	2340      	movs	r3, #64	; 0x40
 8019b20:	616b      	str	r3, [r5, #20]
 8019b22:	2300      	movs	r3, #0
 8019b24:	9309      	str	r3, [sp, #36]	; 0x24
 8019b26:	2320      	movs	r3, #32
 8019b28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019b2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8019b30:	2330      	movs	r3, #48	; 0x30
 8019b32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019cdc <_svfiprintf_r+0x1ec>
 8019b36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019b3a:	f04f 0901 	mov.w	r9, #1
 8019b3e:	4623      	mov	r3, r4
 8019b40:	469a      	mov	sl, r3
 8019b42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019b46:	b10a      	cbz	r2, 8019b4c <_svfiprintf_r+0x5c>
 8019b48:	2a25      	cmp	r2, #37	; 0x25
 8019b4a:	d1f9      	bne.n	8019b40 <_svfiprintf_r+0x50>
 8019b4c:	ebba 0b04 	subs.w	fp, sl, r4
 8019b50:	d00b      	beq.n	8019b6a <_svfiprintf_r+0x7a>
 8019b52:	465b      	mov	r3, fp
 8019b54:	4622      	mov	r2, r4
 8019b56:	4629      	mov	r1, r5
 8019b58:	4638      	mov	r0, r7
 8019b5a:	f7ff ff6d 	bl	8019a38 <__ssputs_r>
 8019b5e:	3001      	adds	r0, #1
 8019b60:	f000 80aa 	beq.w	8019cb8 <_svfiprintf_r+0x1c8>
 8019b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019b66:	445a      	add	r2, fp
 8019b68:	9209      	str	r2, [sp, #36]	; 0x24
 8019b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	f000 80a2 	beq.w	8019cb8 <_svfiprintf_r+0x1c8>
 8019b74:	2300      	movs	r3, #0
 8019b76:	f04f 32ff 	mov.w	r2, #4294967295
 8019b7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019b7e:	f10a 0a01 	add.w	sl, sl, #1
 8019b82:	9304      	str	r3, [sp, #16]
 8019b84:	9307      	str	r3, [sp, #28]
 8019b86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019b8a:	931a      	str	r3, [sp, #104]	; 0x68
 8019b8c:	4654      	mov	r4, sl
 8019b8e:	2205      	movs	r2, #5
 8019b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b94:	4851      	ldr	r0, [pc, #324]	; (8019cdc <_svfiprintf_r+0x1ec>)
 8019b96:	f7e6 fbc3 	bl	8000320 <memchr>
 8019b9a:	9a04      	ldr	r2, [sp, #16]
 8019b9c:	b9d8      	cbnz	r0, 8019bd6 <_svfiprintf_r+0xe6>
 8019b9e:	06d0      	lsls	r0, r2, #27
 8019ba0:	bf44      	itt	mi
 8019ba2:	2320      	movmi	r3, #32
 8019ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019ba8:	0711      	lsls	r1, r2, #28
 8019baa:	bf44      	itt	mi
 8019bac:	232b      	movmi	r3, #43	; 0x2b
 8019bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8019bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8019bb8:	d015      	beq.n	8019be6 <_svfiprintf_r+0xf6>
 8019bba:	9a07      	ldr	r2, [sp, #28]
 8019bbc:	4654      	mov	r4, sl
 8019bbe:	2000      	movs	r0, #0
 8019bc0:	f04f 0c0a 	mov.w	ip, #10
 8019bc4:	4621      	mov	r1, r4
 8019bc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019bca:	3b30      	subs	r3, #48	; 0x30
 8019bcc:	2b09      	cmp	r3, #9
 8019bce:	d94e      	bls.n	8019c6e <_svfiprintf_r+0x17e>
 8019bd0:	b1b0      	cbz	r0, 8019c00 <_svfiprintf_r+0x110>
 8019bd2:	9207      	str	r2, [sp, #28]
 8019bd4:	e014      	b.n	8019c00 <_svfiprintf_r+0x110>
 8019bd6:	eba0 0308 	sub.w	r3, r0, r8
 8019bda:	fa09 f303 	lsl.w	r3, r9, r3
 8019bde:	4313      	orrs	r3, r2
 8019be0:	9304      	str	r3, [sp, #16]
 8019be2:	46a2      	mov	sl, r4
 8019be4:	e7d2      	b.n	8019b8c <_svfiprintf_r+0x9c>
 8019be6:	9b03      	ldr	r3, [sp, #12]
 8019be8:	1d19      	adds	r1, r3, #4
 8019bea:	681b      	ldr	r3, [r3, #0]
 8019bec:	9103      	str	r1, [sp, #12]
 8019bee:	2b00      	cmp	r3, #0
 8019bf0:	bfbb      	ittet	lt
 8019bf2:	425b      	neglt	r3, r3
 8019bf4:	f042 0202 	orrlt.w	r2, r2, #2
 8019bf8:	9307      	strge	r3, [sp, #28]
 8019bfa:	9307      	strlt	r3, [sp, #28]
 8019bfc:	bfb8      	it	lt
 8019bfe:	9204      	strlt	r2, [sp, #16]
 8019c00:	7823      	ldrb	r3, [r4, #0]
 8019c02:	2b2e      	cmp	r3, #46	; 0x2e
 8019c04:	d10c      	bne.n	8019c20 <_svfiprintf_r+0x130>
 8019c06:	7863      	ldrb	r3, [r4, #1]
 8019c08:	2b2a      	cmp	r3, #42	; 0x2a
 8019c0a:	d135      	bne.n	8019c78 <_svfiprintf_r+0x188>
 8019c0c:	9b03      	ldr	r3, [sp, #12]
 8019c0e:	1d1a      	adds	r2, r3, #4
 8019c10:	681b      	ldr	r3, [r3, #0]
 8019c12:	9203      	str	r2, [sp, #12]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	bfb8      	it	lt
 8019c18:	f04f 33ff 	movlt.w	r3, #4294967295
 8019c1c:	3402      	adds	r4, #2
 8019c1e:	9305      	str	r3, [sp, #20]
 8019c20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019cec <_svfiprintf_r+0x1fc>
 8019c24:	7821      	ldrb	r1, [r4, #0]
 8019c26:	2203      	movs	r2, #3
 8019c28:	4650      	mov	r0, sl
 8019c2a:	f7e6 fb79 	bl	8000320 <memchr>
 8019c2e:	b140      	cbz	r0, 8019c42 <_svfiprintf_r+0x152>
 8019c30:	2340      	movs	r3, #64	; 0x40
 8019c32:	eba0 000a 	sub.w	r0, r0, sl
 8019c36:	fa03 f000 	lsl.w	r0, r3, r0
 8019c3a:	9b04      	ldr	r3, [sp, #16]
 8019c3c:	4303      	orrs	r3, r0
 8019c3e:	3401      	adds	r4, #1
 8019c40:	9304      	str	r3, [sp, #16]
 8019c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c46:	4826      	ldr	r0, [pc, #152]	; (8019ce0 <_svfiprintf_r+0x1f0>)
 8019c48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019c4c:	2206      	movs	r2, #6
 8019c4e:	f7e6 fb67 	bl	8000320 <memchr>
 8019c52:	2800      	cmp	r0, #0
 8019c54:	d038      	beq.n	8019cc8 <_svfiprintf_r+0x1d8>
 8019c56:	4b23      	ldr	r3, [pc, #140]	; (8019ce4 <_svfiprintf_r+0x1f4>)
 8019c58:	bb1b      	cbnz	r3, 8019ca2 <_svfiprintf_r+0x1b2>
 8019c5a:	9b03      	ldr	r3, [sp, #12]
 8019c5c:	3307      	adds	r3, #7
 8019c5e:	f023 0307 	bic.w	r3, r3, #7
 8019c62:	3308      	adds	r3, #8
 8019c64:	9303      	str	r3, [sp, #12]
 8019c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019c68:	4433      	add	r3, r6
 8019c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8019c6c:	e767      	b.n	8019b3e <_svfiprintf_r+0x4e>
 8019c6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019c72:	460c      	mov	r4, r1
 8019c74:	2001      	movs	r0, #1
 8019c76:	e7a5      	b.n	8019bc4 <_svfiprintf_r+0xd4>
 8019c78:	2300      	movs	r3, #0
 8019c7a:	3401      	adds	r4, #1
 8019c7c:	9305      	str	r3, [sp, #20]
 8019c7e:	4619      	mov	r1, r3
 8019c80:	f04f 0c0a 	mov.w	ip, #10
 8019c84:	4620      	mov	r0, r4
 8019c86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c8a:	3a30      	subs	r2, #48	; 0x30
 8019c8c:	2a09      	cmp	r2, #9
 8019c8e:	d903      	bls.n	8019c98 <_svfiprintf_r+0x1a8>
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d0c5      	beq.n	8019c20 <_svfiprintf_r+0x130>
 8019c94:	9105      	str	r1, [sp, #20]
 8019c96:	e7c3      	b.n	8019c20 <_svfiprintf_r+0x130>
 8019c98:	fb0c 2101 	mla	r1, ip, r1, r2
 8019c9c:	4604      	mov	r4, r0
 8019c9e:	2301      	movs	r3, #1
 8019ca0:	e7f0      	b.n	8019c84 <_svfiprintf_r+0x194>
 8019ca2:	ab03      	add	r3, sp, #12
 8019ca4:	9300      	str	r3, [sp, #0]
 8019ca6:	462a      	mov	r2, r5
 8019ca8:	4b0f      	ldr	r3, [pc, #60]	; (8019ce8 <_svfiprintf_r+0x1f8>)
 8019caa:	a904      	add	r1, sp, #16
 8019cac:	4638      	mov	r0, r7
 8019cae:	f7fc fb4f 	bl	8016350 <_printf_float>
 8019cb2:	1c42      	adds	r2, r0, #1
 8019cb4:	4606      	mov	r6, r0
 8019cb6:	d1d6      	bne.n	8019c66 <_svfiprintf_r+0x176>
 8019cb8:	89ab      	ldrh	r3, [r5, #12]
 8019cba:	065b      	lsls	r3, r3, #25
 8019cbc:	f53f af2c 	bmi.w	8019b18 <_svfiprintf_r+0x28>
 8019cc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019cc2:	b01d      	add	sp, #116	; 0x74
 8019cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019cc8:	ab03      	add	r3, sp, #12
 8019cca:	9300      	str	r3, [sp, #0]
 8019ccc:	462a      	mov	r2, r5
 8019cce:	4b06      	ldr	r3, [pc, #24]	; (8019ce8 <_svfiprintf_r+0x1f8>)
 8019cd0:	a904      	add	r1, sp, #16
 8019cd2:	4638      	mov	r0, r7
 8019cd4:	f7fc fdc8 	bl	8016868 <_printf_i>
 8019cd8:	e7eb      	b.n	8019cb2 <_svfiprintf_r+0x1c2>
 8019cda:	bf00      	nop
 8019cdc:	0801b14c 	.word	0x0801b14c
 8019ce0:	0801b156 	.word	0x0801b156
 8019ce4:	08016351 	.word	0x08016351
 8019ce8:	08019a39 	.word	0x08019a39
 8019cec:	0801b152 	.word	0x0801b152

08019cf0 <nan>:
 8019cf0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8019cf8 <nan+0x8>
 8019cf4:	4770      	bx	lr
 8019cf6:	bf00      	nop
 8019cf8:	00000000 	.word	0x00000000
 8019cfc:	7ff80000 	.word	0x7ff80000

08019d00 <_sbrk_r>:
 8019d00:	b538      	push	{r3, r4, r5, lr}
 8019d02:	4d06      	ldr	r5, [pc, #24]	; (8019d1c <_sbrk_r+0x1c>)
 8019d04:	2300      	movs	r3, #0
 8019d06:	4604      	mov	r4, r0
 8019d08:	4608      	mov	r0, r1
 8019d0a:	602b      	str	r3, [r5, #0]
 8019d0c:	f7e9 fccc 	bl	80036a8 <_sbrk>
 8019d10:	1c43      	adds	r3, r0, #1
 8019d12:	d102      	bne.n	8019d1a <_sbrk_r+0x1a>
 8019d14:	682b      	ldr	r3, [r5, #0]
 8019d16:	b103      	cbz	r3, 8019d1a <_sbrk_r+0x1a>
 8019d18:	6023      	str	r3, [r4, #0]
 8019d1a:	bd38      	pop	{r3, r4, r5, pc}
 8019d1c:	24002920 	.word	0x24002920

08019d20 <strncmp>:
 8019d20:	b510      	push	{r4, lr}
 8019d22:	b17a      	cbz	r2, 8019d44 <strncmp+0x24>
 8019d24:	4603      	mov	r3, r0
 8019d26:	3901      	subs	r1, #1
 8019d28:	1884      	adds	r4, r0, r2
 8019d2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8019d2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8019d32:	4290      	cmp	r0, r2
 8019d34:	d101      	bne.n	8019d3a <strncmp+0x1a>
 8019d36:	42a3      	cmp	r3, r4
 8019d38:	d101      	bne.n	8019d3e <strncmp+0x1e>
 8019d3a:	1a80      	subs	r0, r0, r2
 8019d3c:	bd10      	pop	{r4, pc}
 8019d3e:	2800      	cmp	r0, #0
 8019d40:	d1f3      	bne.n	8019d2a <strncmp+0xa>
 8019d42:	e7fa      	b.n	8019d3a <strncmp+0x1a>
 8019d44:	4610      	mov	r0, r2
 8019d46:	e7f9      	b.n	8019d3c <strncmp+0x1c>

08019d48 <__ascii_wctomb>:
 8019d48:	b149      	cbz	r1, 8019d5e <__ascii_wctomb+0x16>
 8019d4a:	2aff      	cmp	r2, #255	; 0xff
 8019d4c:	bf85      	ittet	hi
 8019d4e:	238a      	movhi	r3, #138	; 0x8a
 8019d50:	6003      	strhi	r3, [r0, #0]
 8019d52:	700a      	strbls	r2, [r1, #0]
 8019d54:	f04f 30ff 	movhi.w	r0, #4294967295
 8019d58:	bf98      	it	ls
 8019d5a:	2001      	movls	r0, #1
 8019d5c:	4770      	bx	lr
 8019d5e:	4608      	mov	r0, r1
 8019d60:	4770      	bx	lr
	...

08019d64 <__assert_func>:
 8019d64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019d66:	4614      	mov	r4, r2
 8019d68:	461a      	mov	r2, r3
 8019d6a:	4b09      	ldr	r3, [pc, #36]	; (8019d90 <__assert_func+0x2c>)
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	4605      	mov	r5, r0
 8019d70:	68d8      	ldr	r0, [r3, #12]
 8019d72:	b14c      	cbz	r4, 8019d88 <__assert_func+0x24>
 8019d74:	4b07      	ldr	r3, [pc, #28]	; (8019d94 <__assert_func+0x30>)
 8019d76:	9100      	str	r1, [sp, #0]
 8019d78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019d7c:	4906      	ldr	r1, [pc, #24]	; (8019d98 <__assert_func+0x34>)
 8019d7e:	462b      	mov	r3, r5
 8019d80:	f000 f80e 	bl	8019da0 <fiprintf>
 8019d84:	f000 fa8c 	bl	801a2a0 <abort>
 8019d88:	4b04      	ldr	r3, [pc, #16]	; (8019d9c <__assert_func+0x38>)
 8019d8a:	461c      	mov	r4, r3
 8019d8c:	e7f3      	b.n	8019d76 <__assert_func+0x12>
 8019d8e:	bf00      	nop
 8019d90:	24000100 	.word	0x24000100
 8019d94:	0801b15d 	.word	0x0801b15d
 8019d98:	0801b16a 	.word	0x0801b16a
 8019d9c:	0801b198 	.word	0x0801b198

08019da0 <fiprintf>:
 8019da0:	b40e      	push	{r1, r2, r3}
 8019da2:	b503      	push	{r0, r1, lr}
 8019da4:	4601      	mov	r1, r0
 8019da6:	ab03      	add	r3, sp, #12
 8019da8:	4805      	ldr	r0, [pc, #20]	; (8019dc0 <fiprintf+0x20>)
 8019daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8019dae:	6800      	ldr	r0, [r0, #0]
 8019db0:	9301      	str	r3, [sp, #4]
 8019db2:	f000 f885 	bl	8019ec0 <_vfiprintf_r>
 8019db6:	b002      	add	sp, #8
 8019db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8019dbc:	b003      	add	sp, #12
 8019dbe:	4770      	bx	lr
 8019dc0:	24000100 	.word	0x24000100

08019dc4 <memmove>:
 8019dc4:	4288      	cmp	r0, r1
 8019dc6:	b510      	push	{r4, lr}
 8019dc8:	eb01 0402 	add.w	r4, r1, r2
 8019dcc:	d902      	bls.n	8019dd4 <memmove+0x10>
 8019dce:	4284      	cmp	r4, r0
 8019dd0:	4623      	mov	r3, r4
 8019dd2:	d807      	bhi.n	8019de4 <memmove+0x20>
 8019dd4:	1e43      	subs	r3, r0, #1
 8019dd6:	42a1      	cmp	r1, r4
 8019dd8:	d008      	beq.n	8019dec <memmove+0x28>
 8019dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019dde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019de2:	e7f8      	b.n	8019dd6 <memmove+0x12>
 8019de4:	4402      	add	r2, r0
 8019de6:	4601      	mov	r1, r0
 8019de8:	428a      	cmp	r2, r1
 8019dea:	d100      	bne.n	8019dee <memmove+0x2a>
 8019dec:	bd10      	pop	{r4, pc}
 8019dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019df2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019df6:	e7f7      	b.n	8019de8 <memmove+0x24>

08019df8 <__malloc_lock>:
 8019df8:	4801      	ldr	r0, [pc, #4]	; (8019e00 <__malloc_lock+0x8>)
 8019dfa:	f000 bc11 	b.w	801a620 <__retarget_lock_acquire_recursive>
 8019dfe:	bf00      	nop
 8019e00:	24002924 	.word	0x24002924

08019e04 <__malloc_unlock>:
 8019e04:	4801      	ldr	r0, [pc, #4]	; (8019e0c <__malloc_unlock+0x8>)
 8019e06:	f000 bc0c 	b.w	801a622 <__retarget_lock_release_recursive>
 8019e0a:	bf00      	nop
 8019e0c:	24002924 	.word	0x24002924

08019e10 <_realloc_r>:
 8019e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e14:	4680      	mov	r8, r0
 8019e16:	4614      	mov	r4, r2
 8019e18:	460e      	mov	r6, r1
 8019e1a:	b921      	cbnz	r1, 8019e26 <_realloc_r+0x16>
 8019e1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019e20:	4611      	mov	r1, r2
 8019e22:	f7ff bd95 	b.w	8019950 <_malloc_r>
 8019e26:	b92a      	cbnz	r2, 8019e34 <_realloc_r+0x24>
 8019e28:	f7ff fd26 	bl	8019878 <_free_r>
 8019e2c:	4625      	mov	r5, r4
 8019e2e:	4628      	mov	r0, r5
 8019e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e34:	f000 fc5c 	bl	801a6f0 <_malloc_usable_size_r>
 8019e38:	4284      	cmp	r4, r0
 8019e3a:	4607      	mov	r7, r0
 8019e3c:	d802      	bhi.n	8019e44 <_realloc_r+0x34>
 8019e3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8019e42:	d812      	bhi.n	8019e6a <_realloc_r+0x5a>
 8019e44:	4621      	mov	r1, r4
 8019e46:	4640      	mov	r0, r8
 8019e48:	f7ff fd82 	bl	8019950 <_malloc_r>
 8019e4c:	4605      	mov	r5, r0
 8019e4e:	2800      	cmp	r0, #0
 8019e50:	d0ed      	beq.n	8019e2e <_realloc_r+0x1e>
 8019e52:	42bc      	cmp	r4, r7
 8019e54:	4622      	mov	r2, r4
 8019e56:	4631      	mov	r1, r6
 8019e58:	bf28      	it	cs
 8019e5a:	463a      	movcs	r2, r7
 8019e5c:	f7fc f9d2 	bl	8016204 <memcpy>
 8019e60:	4631      	mov	r1, r6
 8019e62:	4640      	mov	r0, r8
 8019e64:	f7ff fd08 	bl	8019878 <_free_r>
 8019e68:	e7e1      	b.n	8019e2e <_realloc_r+0x1e>
 8019e6a:	4635      	mov	r5, r6
 8019e6c:	e7df      	b.n	8019e2e <_realloc_r+0x1e>

08019e6e <__sfputc_r>:
 8019e6e:	6893      	ldr	r3, [r2, #8]
 8019e70:	3b01      	subs	r3, #1
 8019e72:	2b00      	cmp	r3, #0
 8019e74:	b410      	push	{r4}
 8019e76:	6093      	str	r3, [r2, #8]
 8019e78:	da08      	bge.n	8019e8c <__sfputc_r+0x1e>
 8019e7a:	6994      	ldr	r4, [r2, #24]
 8019e7c:	42a3      	cmp	r3, r4
 8019e7e:	db01      	blt.n	8019e84 <__sfputc_r+0x16>
 8019e80:	290a      	cmp	r1, #10
 8019e82:	d103      	bne.n	8019e8c <__sfputc_r+0x1e>
 8019e84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e88:	f000 b94a 	b.w	801a120 <__swbuf_r>
 8019e8c:	6813      	ldr	r3, [r2, #0]
 8019e8e:	1c58      	adds	r0, r3, #1
 8019e90:	6010      	str	r0, [r2, #0]
 8019e92:	7019      	strb	r1, [r3, #0]
 8019e94:	4608      	mov	r0, r1
 8019e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019e9a:	4770      	bx	lr

08019e9c <__sfputs_r>:
 8019e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e9e:	4606      	mov	r6, r0
 8019ea0:	460f      	mov	r7, r1
 8019ea2:	4614      	mov	r4, r2
 8019ea4:	18d5      	adds	r5, r2, r3
 8019ea6:	42ac      	cmp	r4, r5
 8019ea8:	d101      	bne.n	8019eae <__sfputs_r+0x12>
 8019eaa:	2000      	movs	r0, #0
 8019eac:	e007      	b.n	8019ebe <__sfputs_r+0x22>
 8019eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019eb2:	463a      	mov	r2, r7
 8019eb4:	4630      	mov	r0, r6
 8019eb6:	f7ff ffda 	bl	8019e6e <__sfputc_r>
 8019eba:	1c43      	adds	r3, r0, #1
 8019ebc:	d1f3      	bne.n	8019ea6 <__sfputs_r+0xa>
 8019ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08019ec0 <_vfiprintf_r>:
 8019ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ec4:	460d      	mov	r5, r1
 8019ec6:	b09d      	sub	sp, #116	; 0x74
 8019ec8:	4614      	mov	r4, r2
 8019eca:	4698      	mov	r8, r3
 8019ecc:	4606      	mov	r6, r0
 8019ece:	b118      	cbz	r0, 8019ed8 <_vfiprintf_r+0x18>
 8019ed0:	6983      	ldr	r3, [r0, #24]
 8019ed2:	b90b      	cbnz	r3, 8019ed8 <_vfiprintf_r+0x18>
 8019ed4:	f000 fb06 	bl	801a4e4 <__sinit>
 8019ed8:	4b89      	ldr	r3, [pc, #548]	; (801a100 <_vfiprintf_r+0x240>)
 8019eda:	429d      	cmp	r5, r3
 8019edc:	d11b      	bne.n	8019f16 <_vfiprintf_r+0x56>
 8019ede:	6875      	ldr	r5, [r6, #4]
 8019ee0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019ee2:	07d9      	lsls	r1, r3, #31
 8019ee4:	d405      	bmi.n	8019ef2 <_vfiprintf_r+0x32>
 8019ee6:	89ab      	ldrh	r3, [r5, #12]
 8019ee8:	059a      	lsls	r2, r3, #22
 8019eea:	d402      	bmi.n	8019ef2 <_vfiprintf_r+0x32>
 8019eec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019eee:	f000 fb97 	bl	801a620 <__retarget_lock_acquire_recursive>
 8019ef2:	89ab      	ldrh	r3, [r5, #12]
 8019ef4:	071b      	lsls	r3, r3, #28
 8019ef6:	d501      	bpl.n	8019efc <_vfiprintf_r+0x3c>
 8019ef8:	692b      	ldr	r3, [r5, #16]
 8019efa:	b9eb      	cbnz	r3, 8019f38 <_vfiprintf_r+0x78>
 8019efc:	4629      	mov	r1, r5
 8019efe:	4630      	mov	r0, r6
 8019f00:	f000 f960 	bl	801a1c4 <__swsetup_r>
 8019f04:	b1c0      	cbz	r0, 8019f38 <_vfiprintf_r+0x78>
 8019f06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8019f08:	07dc      	lsls	r4, r3, #31
 8019f0a:	d50e      	bpl.n	8019f2a <_vfiprintf_r+0x6a>
 8019f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8019f10:	b01d      	add	sp, #116	; 0x74
 8019f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f16:	4b7b      	ldr	r3, [pc, #492]	; (801a104 <_vfiprintf_r+0x244>)
 8019f18:	429d      	cmp	r5, r3
 8019f1a:	d101      	bne.n	8019f20 <_vfiprintf_r+0x60>
 8019f1c:	68b5      	ldr	r5, [r6, #8]
 8019f1e:	e7df      	b.n	8019ee0 <_vfiprintf_r+0x20>
 8019f20:	4b79      	ldr	r3, [pc, #484]	; (801a108 <_vfiprintf_r+0x248>)
 8019f22:	429d      	cmp	r5, r3
 8019f24:	bf08      	it	eq
 8019f26:	68f5      	ldreq	r5, [r6, #12]
 8019f28:	e7da      	b.n	8019ee0 <_vfiprintf_r+0x20>
 8019f2a:	89ab      	ldrh	r3, [r5, #12]
 8019f2c:	0598      	lsls	r0, r3, #22
 8019f2e:	d4ed      	bmi.n	8019f0c <_vfiprintf_r+0x4c>
 8019f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019f32:	f000 fb76 	bl	801a622 <__retarget_lock_release_recursive>
 8019f36:	e7e9      	b.n	8019f0c <_vfiprintf_r+0x4c>
 8019f38:	2300      	movs	r3, #0
 8019f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8019f3c:	2320      	movs	r3, #32
 8019f3e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019f42:	f8cd 800c 	str.w	r8, [sp, #12]
 8019f46:	2330      	movs	r3, #48	; 0x30
 8019f48:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a10c <_vfiprintf_r+0x24c>
 8019f4c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019f50:	f04f 0901 	mov.w	r9, #1
 8019f54:	4623      	mov	r3, r4
 8019f56:	469a      	mov	sl, r3
 8019f58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019f5c:	b10a      	cbz	r2, 8019f62 <_vfiprintf_r+0xa2>
 8019f5e:	2a25      	cmp	r2, #37	; 0x25
 8019f60:	d1f9      	bne.n	8019f56 <_vfiprintf_r+0x96>
 8019f62:	ebba 0b04 	subs.w	fp, sl, r4
 8019f66:	d00b      	beq.n	8019f80 <_vfiprintf_r+0xc0>
 8019f68:	465b      	mov	r3, fp
 8019f6a:	4622      	mov	r2, r4
 8019f6c:	4629      	mov	r1, r5
 8019f6e:	4630      	mov	r0, r6
 8019f70:	f7ff ff94 	bl	8019e9c <__sfputs_r>
 8019f74:	3001      	adds	r0, #1
 8019f76:	f000 80aa 	beq.w	801a0ce <_vfiprintf_r+0x20e>
 8019f7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019f7c:	445a      	add	r2, fp
 8019f7e:	9209      	str	r2, [sp, #36]	; 0x24
 8019f80:	f89a 3000 	ldrb.w	r3, [sl]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	f000 80a2 	beq.w	801a0ce <_vfiprintf_r+0x20e>
 8019f8a:	2300      	movs	r3, #0
 8019f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8019f90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019f94:	f10a 0a01 	add.w	sl, sl, #1
 8019f98:	9304      	str	r3, [sp, #16]
 8019f9a:	9307      	str	r3, [sp, #28]
 8019f9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019fa0:	931a      	str	r3, [sp, #104]	; 0x68
 8019fa2:	4654      	mov	r4, sl
 8019fa4:	2205      	movs	r2, #5
 8019fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019faa:	4858      	ldr	r0, [pc, #352]	; (801a10c <_vfiprintf_r+0x24c>)
 8019fac:	f7e6 f9b8 	bl	8000320 <memchr>
 8019fb0:	9a04      	ldr	r2, [sp, #16]
 8019fb2:	b9d8      	cbnz	r0, 8019fec <_vfiprintf_r+0x12c>
 8019fb4:	06d1      	lsls	r1, r2, #27
 8019fb6:	bf44      	itt	mi
 8019fb8:	2320      	movmi	r3, #32
 8019fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019fbe:	0713      	lsls	r3, r2, #28
 8019fc0:	bf44      	itt	mi
 8019fc2:	232b      	movmi	r3, #43	; 0x2b
 8019fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8019fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8019fce:	d015      	beq.n	8019ffc <_vfiprintf_r+0x13c>
 8019fd0:	9a07      	ldr	r2, [sp, #28]
 8019fd2:	4654      	mov	r4, sl
 8019fd4:	2000      	movs	r0, #0
 8019fd6:	f04f 0c0a 	mov.w	ip, #10
 8019fda:	4621      	mov	r1, r4
 8019fdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019fe0:	3b30      	subs	r3, #48	; 0x30
 8019fe2:	2b09      	cmp	r3, #9
 8019fe4:	d94e      	bls.n	801a084 <_vfiprintf_r+0x1c4>
 8019fe6:	b1b0      	cbz	r0, 801a016 <_vfiprintf_r+0x156>
 8019fe8:	9207      	str	r2, [sp, #28]
 8019fea:	e014      	b.n	801a016 <_vfiprintf_r+0x156>
 8019fec:	eba0 0308 	sub.w	r3, r0, r8
 8019ff0:	fa09 f303 	lsl.w	r3, r9, r3
 8019ff4:	4313      	orrs	r3, r2
 8019ff6:	9304      	str	r3, [sp, #16]
 8019ff8:	46a2      	mov	sl, r4
 8019ffa:	e7d2      	b.n	8019fa2 <_vfiprintf_r+0xe2>
 8019ffc:	9b03      	ldr	r3, [sp, #12]
 8019ffe:	1d19      	adds	r1, r3, #4
 801a000:	681b      	ldr	r3, [r3, #0]
 801a002:	9103      	str	r1, [sp, #12]
 801a004:	2b00      	cmp	r3, #0
 801a006:	bfbb      	ittet	lt
 801a008:	425b      	neglt	r3, r3
 801a00a:	f042 0202 	orrlt.w	r2, r2, #2
 801a00e:	9307      	strge	r3, [sp, #28]
 801a010:	9307      	strlt	r3, [sp, #28]
 801a012:	bfb8      	it	lt
 801a014:	9204      	strlt	r2, [sp, #16]
 801a016:	7823      	ldrb	r3, [r4, #0]
 801a018:	2b2e      	cmp	r3, #46	; 0x2e
 801a01a:	d10c      	bne.n	801a036 <_vfiprintf_r+0x176>
 801a01c:	7863      	ldrb	r3, [r4, #1]
 801a01e:	2b2a      	cmp	r3, #42	; 0x2a
 801a020:	d135      	bne.n	801a08e <_vfiprintf_r+0x1ce>
 801a022:	9b03      	ldr	r3, [sp, #12]
 801a024:	1d1a      	adds	r2, r3, #4
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	9203      	str	r2, [sp, #12]
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	bfb8      	it	lt
 801a02e:	f04f 33ff 	movlt.w	r3, #4294967295
 801a032:	3402      	adds	r4, #2
 801a034:	9305      	str	r3, [sp, #20]
 801a036:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a11c <_vfiprintf_r+0x25c>
 801a03a:	7821      	ldrb	r1, [r4, #0]
 801a03c:	2203      	movs	r2, #3
 801a03e:	4650      	mov	r0, sl
 801a040:	f7e6 f96e 	bl	8000320 <memchr>
 801a044:	b140      	cbz	r0, 801a058 <_vfiprintf_r+0x198>
 801a046:	2340      	movs	r3, #64	; 0x40
 801a048:	eba0 000a 	sub.w	r0, r0, sl
 801a04c:	fa03 f000 	lsl.w	r0, r3, r0
 801a050:	9b04      	ldr	r3, [sp, #16]
 801a052:	4303      	orrs	r3, r0
 801a054:	3401      	adds	r4, #1
 801a056:	9304      	str	r3, [sp, #16]
 801a058:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a05c:	482c      	ldr	r0, [pc, #176]	; (801a110 <_vfiprintf_r+0x250>)
 801a05e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a062:	2206      	movs	r2, #6
 801a064:	f7e6 f95c 	bl	8000320 <memchr>
 801a068:	2800      	cmp	r0, #0
 801a06a:	d03f      	beq.n	801a0ec <_vfiprintf_r+0x22c>
 801a06c:	4b29      	ldr	r3, [pc, #164]	; (801a114 <_vfiprintf_r+0x254>)
 801a06e:	bb1b      	cbnz	r3, 801a0b8 <_vfiprintf_r+0x1f8>
 801a070:	9b03      	ldr	r3, [sp, #12]
 801a072:	3307      	adds	r3, #7
 801a074:	f023 0307 	bic.w	r3, r3, #7
 801a078:	3308      	adds	r3, #8
 801a07a:	9303      	str	r3, [sp, #12]
 801a07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a07e:	443b      	add	r3, r7
 801a080:	9309      	str	r3, [sp, #36]	; 0x24
 801a082:	e767      	b.n	8019f54 <_vfiprintf_r+0x94>
 801a084:	fb0c 3202 	mla	r2, ip, r2, r3
 801a088:	460c      	mov	r4, r1
 801a08a:	2001      	movs	r0, #1
 801a08c:	e7a5      	b.n	8019fda <_vfiprintf_r+0x11a>
 801a08e:	2300      	movs	r3, #0
 801a090:	3401      	adds	r4, #1
 801a092:	9305      	str	r3, [sp, #20]
 801a094:	4619      	mov	r1, r3
 801a096:	f04f 0c0a 	mov.w	ip, #10
 801a09a:	4620      	mov	r0, r4
 801a09c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a0a0:	3a30      	subs	r2, #48	; 0x30
 801a0a2:	2a09      	cmp	r2, #9
 801a0a4:	d903      	bls.n	801a0ae <_vfiprintf_r+0x1ee>
 801a0a6:	2b00      	cmp	r3, #0
 801a0a8:	d0c5      	beq.n	801a036 <_vfiprintf_r+0x176>
 801a0aa:	9105      	str	r1, [sp, #20]
 801a0ac:	e7c3      	b.n	801a036 <_vfiprintf_r+0x176>
 801a0ae:	fb0c 2101 	mla	r1, ip, r1, r2
 801a0b2:	4604      	mov	r4, r0
 801a0b4:	2301      	movs	r3, #1
 801a0b6:	e7f0      	b.n	801a09a <_vfiprintf_r+0x1da>
 801a0b8:	ab03      	add	r3, sp, #12
 801a0ba:	9300      	str	r3, [sp, #0]
 801a0bc:	462a      	mov	r2, r5
 801a0be:	4b16      	ldr	r3, [pc, #88]	; (801a118 <_vfiprintf_r+0x258>)
 801a0c0:	a904      	add	r1, sp, #16
 801a0c2:	4630      	mov	r0, r6
 801a0c4:	f7fc f944 	bl	8016350 <_printf_float>
 801a0c8:	4607      	mov	r7, r0
 801a0ca:	1c78      	adds	r0, r7, #1
 801a0cc:	d1d6      	bne.n	801a07c <_vfiprintf_r+0x1bc>
 801a0ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a0d0:	07d9      	lsls	r1, r3, #31
 801a0d2:	d405      	bmi.n	801a0e0 <_vfiprintf_r+0x220>
 801a0d4:	89ab      	ldrh	r3, [r5, #12]
 801a0d6:	059a      	lsls	r2, r3, #22
 801a0d8:	d402      	bmi.n	801a0e0 <_vfiprintf_r+0x220>
 801a0da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a0dc:	f000 faa1 	bl	801a622 <__retarget_lock_release_recursive>
 801a0e0:	89ab      	ldrh	r3, [r5, #12]
 801a0e2:	065b      	lsls	r3, r3, #25
 801a0e4:	f53f af12 	bmi.w	8019f0c <_vfiprintf_r+0x4c>
 801a0e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a0ea:	e711      	b.n	8019f10 <_vfiprintf_r+0x50>
 801a0ec:	ab03      	add	r3, sp, #12
 801a0ee:	9300      	str	r3, [sp, #0]
 801a0f0:	462a      	mov	r2, r5
 801a0f2:	4b09      	ldr	r3, [pc, #36]	; (801a118 <_vfiprintf_r+0x258>)
 801a0f4:	a904      	add	r1, sp, #16
 801a0f6:	4630      	mov	r0, r6
 801a0f8:	f7fc fbb6 	bl	8016868 <_printf_i>
 801a0fc:	e7e4      	b.n	801a0c8 <_vfiprintf_r+0x208>
 801a0fe:	bf00      	nop
 801a100:	0801b1bc 	.word	0x0801b1bc
 801a104:	0801b1dc 	.word	0x0801b1dc
 801a108:	0801b19c 	.word	0x0801b19c
 801a10c:	0801b14c 	.word	0x0801b14c
 801a110:	0801b156 	.word	0x0801b156
 801a114:	08016351 	.word	0x08016351
 801a118:	08019e9d 	.word	0x08019e9d
 801a11c:	0801b152 	.word	0x0801b152

0801a120 <__swbuf_r>:
 801a120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a122:	460e      	mov	r6, r1
 801a124:	4614      	mov	r4, r2
 801a126:	4605      	mov	r5, r0
 801a128:	b118      	cbz	r0, 801a132 <__swbuf_r+0x12>
 801a12a:	6983      	ldr	r3, [r0, #24]
 801a12c:	b90b      	cbnz	r3, 801a132 <__swbuf_r+0x12>
 801a12e:	f000 f9d9 	bl	801a4e4 <__sinit>
 801a132:	4b21      	ldr	r3, [pc, #132]	; (801a1b8 <__swbuf_r+0x98>)
 801a134:	429c      	cmp	r4, r3
 801a136:	d12b      	bne.n	801a190 <__swbuf_r+0x70>
 801a138:	686c      	ldr	r4, [r5, #4]
 801a13a:	69a3      	ldr	r3, [r4, #24]
 801a13c:	60a3      	str	r3, [r4, #8]
 801a13e:	89a3      	ldrh	r3, [r4, #12]
 801a140:	071a      	lsls	r2, r3, #28
 801a142:	d52f      	bpl.n	801a1a4 <__swbuf_r+0x84>
 801a144:	6923      	ldr	r3, [r4, #16]
 801a146:	b36b      	cbz	r3, 801a1a4 <__swbuf_r+0x84>
 801a148:	6923      	ldr	r3, [r4, #16]
 801a14a:	6820      	ldr	r0, [r4, #0]
 801a14c:	1ac0      	subs	r0, r0, r3
 801a14e:	6963      	ldr	r3, [r4, #20]
 801a150:	b2f6      	uxtb	r6, r6
 801a152:	4283      	cmp	r3, r0
 801a154:	4637      	mov	r7, r6
 801a156:	dc04      	bgt.n	801a162 <__swbuf_r+0x42>
 801a158:	4621      	mov	r1, r4
 801a15a:	4628      	mov	r0, r5
 801a15c:	f000 f92e 	bl	801a3bc <_fflush_r>
 801a160:	bb30      	cbnz	r0, 801a1b0 <__swbuf_r+0x90>
 801a162:	68a3      	ldr	r3, [r4, #8]
 801a164:	3b01      	subs	r3, #1
 801a166:	60a3      	str	r3, [r4, #8]
 801a168:	6823      	ldr	r3, [r4, #0]
 801a16a:	1c5a      	adds	r2, r3, #1
 801a16c:	6022      	str	r2, [r4, #0]
 801a16e:	701e      	strb	r6, [r3, #0]
 801a170:	6963      	ldr	r3, [r4, #20]
 801a172:	3001      	adds	r0, #1
 801a174:	4283      	cmp	r3, r0
 801a176:	d004      	beq.n	801a182 <__swbuf_r+0x62>
 801a178:	89a3      	ldrh	r3, [r4, #12]
 801a17a:	07db      	lsls	r3, r3, #31
 801a17c:	d506      	bpl.n	801a18c <__swbuf_r+0x6c>
 801a17e:	2e0a      	cmp	r6, #10
 801a180:	d104      	bne.n	801a18c <__swbuf_r+0x6c>
 801a182:	4621      	mov	r1, r4
 801a184:	4628      	mov	r0, r5
 801a186:	f000 f919 	bl	801a3bc <_fflush_r>
 801a18a:	b988      	cbnz	r0, 801a1b0 <__swbuf_r+0x90>
 801a18c:	4638      	mov	r0, r7
 801a18e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a190:	4b0a      	ldr	r3, [pc, #40]	; (801a1bc <__swbuf_r+0x9c>)
 801a192:	429c      	cmp	r4, r3
 801a194:	d101      	bne.n	801a19a <__swbuf_r+0x7a>
 801a196:	68ac      	ldr	r4, [r5, #8]
 801a198:	e7cf      	b.n	801a13a <__swbuf_r+0x1a>
 801a19a:	4b09      	ldr	r3, [pc, #36]	; (801a1c0 <__swbuf_r+0xa0>)
 801a19c:	429c      	cmp	r4, r3
 801a19e:	bf08      	it	eq
 801a1a0:	68ec      	ldreq	r4, [r5, #12]
 801a1a2:	e7ca      	b.n	801a13a <__swbuf_r+0x1a>
 801a1a4:	4621      	mov	r1, r4
 801a1a6:	4628      	mov	r0, r5
 801a1a8:	f000 f80c 	bl	801a1c4 <__swsetup_r>
 801a1ac:	2800      	cmp	r0, #0
 801a1ae:	d0cb      	beq.n	801a148 <__swbuf_r+0x28>
 801a1b0:	f04f 37ff 	mov.w	r7, #4294967295
 801a1b4:	e7ea      	b.n	801a18c <__swbuf_r+0x6c>
 801a1b6:	bf00      	nop
 801a1b8:	0801b1bc 	.word	0x0801b1bc
 801a1bc:	0801b1dc 	.word	0x0801b1dc
 801a1c0:	0801b19c 	.word	0x0801b19c

0801a1c4 <__swsetup_r>:
 801a1c4:	4b32      	ldr	r3, [pc, #200]	; (801a290 <__swsetup_r+0xcc>)
 801a1c6:	b570      	push	{r4, r5, r6, lr}
 801a1c8:	681d      	ldr	r5, [r3, #0]
 801a1ca:	4606      	mov	r6, r0
 801a1cc:	460c      	mov	r4, r1
 801a1ce:	b125      	cbz	r5, 801a1da <__swsetup_r+0x16>
 801a1d0:	69ab      	ldr	r3, [r5, #24]
 801a1d2:	b913      	cbnz	r3, 801a1da <__swsetup_r+0x16>
 801a1d4:	4628      	mov	r0, r5
 801a1d6:	f000 f985 	bl	801a4e4 <__sinit>
 801a1da:	4b2e      	ldr	r3, [pc, #184]	; (801a294 <__swsetup_r+0xd0>)
 801a1dc:	429c      	cmp	r4, r3
 801a1de:	d10f      	bne.n	801a200 <__swsetup_r+0x3c>
 801a1e0:	686c      	ldr	r4, [r5, #4]
 801a1e2:	89a3      	ldrh	r3, [r4, #12]
 801a1e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a1e8:	0719      	lsls	r1, r3, #28
 801a1ea:	d42c      	bmi.n	801a246 <__swsetup_r+0x82>
 801a1ec:	06dd      	lsls	r5, r3, #27
 801a1ee:	d411      	bmi.n	801a214 <__swsetup_r+0x50>
 801a1f0:	2309      	movs	r3, #9
 801a1f2:	6033      	str	r3, [r6, #0]
 801a1f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a1f8:	81a3      	strh	r3, [r4, #12]
 801a1fa:	f04f 30ff 	mov.w	r0, #4294967295
 801a1fe:	e03e      	b.n	801a27e <__swsetup_r+0xba>
 801a200:	4b25      	ldr	r3, [pc, #148]	; (801a298 <__swsetup_r+0xd4>)
 801a202:	429c      	cmp	r4, r3
 801a204:	d101      	bne.n	801a20a <__swsetup_r+0x46>
 801a206:	68ac      	ldr	r4, [r5, #8]
 801a208:	e7eb      	b.n	801a1e2 <__swsetup_r+0x1e>
 801a20a:	4b24      	ldr	r3, [pc, #144]	; (801a29c <__swsetup_r+0xd8>)
 801a20c:	429c      	cmp	r4, r3
 801a20e:	bf08      	it	eq
 801a210:	68ec      	ldreq	r4, [r5, #12]
 801a212:	e7e6      	b.n	801a1e2 <__swsetup_r+0x1e>
 801a214:	0758      	lsls	r0, r3, #29
 801a216:	d512      	bpl.n	801a23e <__swsetup_r+0x7a>
 801a218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a21a:	b141      	cbz	r1, 801a22e <__swsetup_r+0x6a>
 801a21c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a220:	4299      	cmp	r1, r3
 801a222:	d002      	beq.n	801a22a <__swsetup_r+0x66>
 801a224:	4630      	mov	r0, r6
 801a226:	f7ff fb27 	bl	8019878 <_free_r>
 801a22a:	2300      	movs	r3, #0
 801a22c:	6363      	str	r3, [r4, #52]	; 0x34
 801a22e:	89a3      	ldrh	r3, [r4, #12]
 801a230:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a234:	81a3      	strh	r3, [r4, #12]
 801a236:	2300      	movs	r3, #0
 801a238:	6063      	str	r3, [r4, #4]
 801a23a:	6923      	ldr	r3, [r4, #16]
 801a23c:	6023      	str	r3, [r4, #0]
 801a23e:	89a3      	ldrh	r3, [r4, #12]
 801a240:	f043 0308 	orr.w	r3, r3, #8
 801a244:	81a3      	strh	r3, [r4, #12]
 801a246:	6923      	ldr	r3, [r4, #16]
 801a248:	b94b      	cbnz	r3, 801a25e <__swsetup_r+0x9a>
 801a24a:	89a3      	ldrh	r3, [r4, #12]
 801a24c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a254:	d003      	beq.n	801a25e <__swsetup_r+0x9a>
 801a256:	4621      	mov	r1, r4
 801a258:	4630      	mov	r0, r6
 801a25a:	f000 fa09 	bl	801a670 <__smakebuf_r>
 801a25e:	89a0      	ldrh	r0, [r4, #12]
 801a260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a264:	f010 0301 	ands.w	r3, r0, #1
 801a268:	d00a      	beq.n	801a280 <__swsetup_r+0xbc>
 801a26a:	2300      	movs	r3, #0
 801a26c:	60a3      	str	r3, [r4, #8]
 801a26e:	6963      	ldr	r3, [r4, #20]
 801a270:	425b      	negs	r3, r3
 801a272:	61a3      	str	r3, [r4, #24]
 801a274:	6923      	ldr	r3, [r4, #16]
 801a276:	b943      	cbnz	r3, 801a28a <__swsetup_r+0xc6>
 801a278:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a27c:	d1ba      	bne.n	801a1f4 <__swsetup_r+0x30>
 801a27e:	bd70      	pop	{r4, r5, r6, pc}
 801a280:	0781      	lsls	r1, r0, #30
 801a282:	bf58      	it	pl
 801a284:	6963      	ldrpl	r3, [r4, #20]
 801a286:	60a3      	str	r3, [r4, #8]
 801a288:	e7f4      	b.n	801a274 <__swsetup_r+0xb0>
 801a28a:	2000      	movs	r0, #0
 801a28c:	e7f7      	b.n	801a27e <__swsetup_r+0xba>
 801a28e:	bf00      	nop
 801a290:	24000100 	.word	0x24000100
 801a294:	0801b1bc 	.word	0x0801b1bc
 801a298:	0801b1dc 	.word	0x0801b1dc
 801a29c:	0801b19c 	.word	0x0801b19c

0801a2a0 <abort>:
 801a2a0:	b508      	push	{r3, lr}
 801a2a2:	2006      	movs	r0, #6
 801a2a4:	f000 fa54 	bl	801a750 <raise>
 801a2a8:	2001      	movs	r0, #1
 801a2aa:	f7e9 f985 	bl	80035b8 <_exit>
	...

0801a2b0 <__sflush_r>:
 801a2b0:	898a      	ldrh	r2, [r1, #12]
 801a2b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2b6:	4605      	mov	r5, r0
 801a2b8:	0710      	lsls	r0, r2, #28
 801a2ba:	460c      	mov	r4, r1
 801a2bc:	d458      	bmi.n	801a370 <__sflush_r+0xc0>
 801a2be:	684b      	ldr	r3, [r1, #4]
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	dc05      	bgt.n	801a2d0 <__sflush_r+0x20>
 801a2c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	dc02      	bgt.n	801a2d0 <__sflush_r+0x20>
 801a2ca:	2000      	movs	r0, #0
 801a2cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a2d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a2d2:	2e00      	cmp	r6, #0
 801a2d4:	d0f9      	beq.n	801a2ca <__sflush_r+0x1a>
 801a2d6:	2300      	movs	r3, #0
 801a2d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a2dc:	682f      	ldr	r7, [r5, #0]
 801a2de:	602b      	str	r3, [r5, #0]
 801a2e0:	d032      	beq.n	801a348 <__sflush_r+0x98>
 801a2e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a2e4:	89a3      	ldrh	r3, [r4, #12]
 801a2e6:	075a      	lsls	r2, r3, #29
 801a2e8:	d505      	bpl.n	801a2f6 <__sflush_r+0x46>
 801a2ea:	6863      	ldr	r3, [r4, #4]
 801a2ec:	1ac0      	subs	r0, r0, r3
 801a2ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a2f0:	b10b      	cbz	r3, 801a2f6 <__sflush_r+0x46>
 801a2f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a2f4:	1ac0      	subs	r0, r0, r3
 801a2f6:	2300      	movs	r3, #0
 801a2f8:	4602      	mov	r2, r0
 801a2fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a2fc:	6a21      	ldr	r1, [r4, #32]
 801a2fe:	4628      	mov	r0, r5
 801a300:	47b0      	blx	r6
 801a302:	1c43      	adds	r3, r0, #1
 801a304:	89a3      	ldrh	r3, [r4, #12]
 801a306:	d106      	bne.n	801a316 <__sflush_r+0x66>
 801a308:	6829      	ldr	r1, [r5, #0]
 801a30a:	291d      	cmp	r1, #29
 801a30c:	d82c      	bhi.n	801a368 <__sflush_r+0xb8>
 801a30e:	4a2a      	ldr	r2, [pc, #168]	; (801a3b8 <__sflush_r+0x108>)
 801a310:	40ca      	lsrs	r2, r1
 801a312:	07d6      	lsls	r6, r2, #31
 801a314:	d528      	bpl.n	801a368 <__sflush_r+0xb8>
 801a316:	2200      	movs	r2, #0
 801a318:	6062      	str	r2, [r4, #4]
 801a31a:	04d9      	lsls	r1, r3, #19
 801a31c:	6922      	ldr	r2, [r4, #16]
 801a31e:	6022      	str	r2, [r4, #0]
 801a320:	d504      	bpl.n	801a32c <__sflush_r+0x7c>
 801a322:	1c42      	adds	r2, r0, #1
 801a324:	d101      	bne.n	801a32a <__sflush_r+0x7a>
 801a326:	682b      	ldr	r3, [r5, #0]
 801a328:	b903      	cbnz	r3, 801a32c <__sflush_r+0x7c>
 801a32a:	6560      	str	r0, [r4, #84]	; 0x54
 801a32c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a32e:	602f      	str	r7, [r5, #0]
 801a330:	2900      	cmp	r1, #0
 801a332:	d0ca      	beq.n	801a2ca <__sflush_r+0x1a>
 801a334:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a338:	4299      	cmp	r1, r3
 801a33a:	d002      	beq.n	801a342 <__sflush_r+0x92>
 801a33c:	4628      	mov	r0, r5
 801a33e:	f7ff fa9b 	bl	8019878 <_free_r>
 801a342:	2000      	movs	r0, #0
 801a344:	6360      	str	r0, [r4, #52]	; 0x34
 801a346:	e7c1      	b.n	801a2cc <__sflush_r+0x1c>
 801a348:	6a21      	ldr	r1, [r4, #32]
 801a34a:	2301      	movs	r3, #1
 801a34c:	4628      	mov	r0, r5
 801a34e:	47b0      	blx	r6
 801a350:	1c41      	adds	r1, r0, #1
 801a352:	d1c7      	bne.n	801a2e4 <__sflush_r+0x34>
 801a354:	682b      	ldr	r3, [r5, #0]
 801a356:	2b00      	cmp	r3, #0
 801a358:	d0c4      	beq.n	801a2e4 <__sflush_r+0x34>
 801a35a:	2b1d      	cmp	r3, #29
 801a35c:	d001      	beq.n	801a362 <__sflush_r+0xb2>
 801a35e:	2b16      	cmp	r3, #22
 801a360:	d101      	bne.n	801a366 <__sflush_r+0xb6>
 801a362:	602f      	str	r7, [r5, #0]
 801a364:	e7b1      	b.n	801a2ca <__sflush_r+0x1a>
 801a366:	89a3      	ldrh	r3, [r4, #12]
 801a368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a36c:	81a3      	strh	r3, [r4, #12]
 801a36e:	e7ad      	b.n	801a2cc <__sflush_r+0x1c>
 801a370:	690f      	ldr	r7, [r1, #16]
 801a372:	2f00      	cmp	r7, #0
 801a374:	d0a9      	beq.n	801a2ca <__sflush_r+0x1a>
 801a376:	0793      	lsls	r3, r2, #30
 801a378:	680e      	ldr	r6, [r1, #0]
 801a37a:	bf08      	it	eq
 801a37c:	694b      	ldreq	r3, [r1, #20]
 801a37e:	600f      	str	r7, [r1, #0]
 801a380:	bf18      	it	ne
 801a382:	2300      	movne	r3, #0
 801a384:	eba6 0807 	sub.w	r8, r6, r7
 801a388:	608b      	str	r3, [r1, #8]
 801a38a:	f1b8 0f00 	cmp.w	r8, #0
 801a38e:	dd9c      	ble.n	801a2ca <__sflush_r+0x1a>
 801a390:	6a21      	ldr	r1, [r4, #32]
 801a392:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a394:	4643      	mov	r3, r8
 801a396:	463a      	mov	r2, r7
 801a398:	4628      	mov	r0, r5
 801a39a:	47b0      	blx	r6
 801a39c:	2800      	cmp	r0, #0
 801a39e:	dc06      	bgt.n	801a3ae <__sflush_r+0xfe>
 801a3a0:	89a3      	ldrh	r3, [r4, #12]
 801a3a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a3a6:	81a3      	strh	r3, [r4, #12]
 801a3a8:	f04f 30ff 	mov.w	r0, #4294967295
 801a3ac:	e78e      	b.n	801a2cc <__sflush_r+0x1c>
 801a3ae:	4407      	add	r7, r0
 801a3b0:	eba8 0800 	sub.w	r8, r8, r0
 801a3b4:	e7e9      	b.n	801a38a <__sflush_r+0xda>
 801a3b6:	bf00      	nop
 801a3b8:	20400001 	.word	0x20400001

0801a3bc <_fflush_r>:
 801a3bc:	b538      	push	{r3, r4, r5, lr}
 801a3be:	690b      	ldr	r3, [r1, #16]
 801a3c0:	4605      	mov	r5, r0
 801a3c2:	460c      	mov	r4, r1
 801a3c4:	b913      	cbnz	r3, 801a3cc <_fflush_r+0x10>
 801a3c6:	2500      	movs	r5, #0
 801a3c8:	4628      	mov	r0, r5
 801a3ca:	bd38      	pop	{r3, r4, r5, pc}
 801a3cc:	b118      	cbz	r0, 801a3d6 <_fflush_r+0x1a>
 801a3ce:	6983      	ldr	r3, [r0, #24]
 801a3d0:	b90b      	cbnz	r3, 801a3d6 <_fflush_r+0x1a>
 801a3d2:	f000 f887 	bl	801a4e4 <__sinit>
 801a3d6:	4b14      	ldr	r3, [pc, #80]	; (801a428 <_fflush_r+0x6c>)
 801a3d8:	429c      	cmp	r4, r3
 801a3da:	d11b      	bne.n	801a414 <_fflush_r+0x58>
 801a3dc:	686c      	ldr	r4, [r5, #4]
 801a3de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	d0ef      	beq.n	801a3c6 <_fflush_r+0xa>
 801a3e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a3e8:	07d0      	lsls	r0, r2, #31
 801a3ea:	d404      	bmi.n	801a3f6 <_fflush_r+0x3a>
 801a3ec:	0599      	lsls	r1, r3, #22
 801a3ee:	d402      	bmi.n	801a3f6 <_fflush_r+0x3a>
 801a3f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a3f2:	f000 f915 	bl	801a620 <__retarget_lock_acquire_recursive>
 801a3f6:	4628      	mov	r0, r5
 801a3f8:	4621      	mov	r1, r4
 801a3fa:	f7ff ff59 	bl	801a2b0 <__sflush_r>
 801a3fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a400:	07da      	lsls	r2, r3, #31
 801a402:	4605      	mov	r5, r0
 801a404:	d4e0      	bmi.n	801a3c8 <_fflush_r+0xc>
 801a406:	89a3      	ldrh	r3, [r4, #12]
 801a408:	059b      	lsls	r3, r3, #22
 801a40a:	d4dd      	bmi.n	801a3c8 <_fflush_r+0xc>
 801a40c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a40e:	f000 f908 	bl	801a622 <__retarget_lock_release_recursive>
 801a412:	e7d9      	b.n	801a3c8 <_fflush_r+0xc>
 801a414:	4b05      	ldr	r3, [pc, #20]	; (801a42c <_fflush_r+0x70>)
 801a416:	429c      	cmp	r4, r3
 801a418:	d101      	bne.n	801a41e <_fflush_r+0x62>
 801a41a:	68ac      	ldr	r4, [r5, #8]
 801a41c:	e7df      	b.n	801a3de <_fflush_r+0x22>
 801a41e:	4b04      	ldr	r3, [pc, #16]	; (801a430 <_fflush_r+0x74>)
 801a420:	429c      	cmp	r4, r3
 801a422:	bf08      	it	eq
 801a424:	68ec      	ldreq	r4, [r5, #12]
 801a426:	e7da      	b.n	801a3de <_fflush_r+0x22>
 801a428:	0801b1bc 	.word	0x0801b1bc
 801a42c:	0801b1dc 	.word	0x0801b1dc
 801a430:	0801b19c 	.word	0x0801b19c

0801a434 <std>:
 801a434:	2300      	movs	r3, #0
 801a436:	b510      	push	{r4, lr}
 801a438:	4604      	mov	r4, r0
 801a43a:	e9c0 3300 	strd	r3, r3, [r0]
 801a43e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a442:	6083      	str	r3, [r0, #8]
 801a444:	8181      	strh	r1, [r0, #12]
 801a446:	6643      	str	r3, [r0, #100]	; 0x64
 801a448:	81c2      	strh	r2, [r0, #14]
 801a44a:	6183      	str	r3, [r0, #24]
 801a44c:	4619      	mov	r1, r3
 801a44e:	2208      	movs	r2, #8
 801a450:	305c      	adds	r0, #92	; 0x5c
 801a452:	f7fb fee5 	bl	8016220 <memset>
 801a456:	4b05      	ldr	r3, [pc, #20]	; (801a46c <std+0x38>)
 801a458:	6263      	str	r3, [r4, #36]	; 0x24
 801a45a:	4b05      	ldr	r3, [pc, #20]	; (801a470 <std+0x3c>)
 801a45c:	62a3      	str	r3, [r4, #40]	; 0x28
 801a45e:	4b05      	ldr	r3, [pc, #20]	; (801a474 <std+0x40>)
 801a460:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a462:	4b05      	ldr	r3, [pc, #20]	; (801a478 <std+0x44>)
 801a464:	6224      	str	r4, [r4, #32]
 801a466:	6323      	str	r3, [r4, #48]	; 0x30
 801a468:	bd10      	pop	{r4, pc}
 801a46a:	bf00      	nop
 801a46c:	0801a789 	.word	0x0801a789
 801a470:	0801a7ab 	.word	0x0801a7ab
 801a474:	0801a7e3 	.word	0x0801a7e3
 801a478:	0801a807 	.word	0x0801a807

0801a47c <_cleanup_r>:
 801a47c:	4901      	ldr	r1, [pc, #4]	; (801a484 <_cleanup_r+0x8>)
 801a47e:	f000 b8af 	b.w	801a5e0 <_fwalk_reent>
 801a482:	bf00      	nop
 801a484:	0801a3bd 	.word	0x0801a3bd

0801a488 <__sfmoreglue>:
 801a488:	b570      	push	{r4, r5, r6, lr}
 801a48a:	2268      	movs	r2, #104	; 0x68
 801a48c:	1e4d      	subs	r5, r1, #1
 801a48e:	4355      	muls	r5, r2
 801a490:	460e      	mov	r6, r1
 801a492:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a496:	f7ff fa5b 	bl	8019950 <_malloc_r>
 801a49a:	4604      	mov	r4, r0
 801a49c:	b140      	cbz	r0, 801a4b0 <__sfmoreglue+0x28>
 801a49e:	2100      	movs	r1, #0
 801a4a0:	e9c0 1600 	strd	r1, r6, [r0]
 801a4a4:	300c      	adds	r0, #12
 801a4a6:	60a0      	str	r0, [r4, #8]
 801a4a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a4ac:	f7fb feb8 	bl	8016220 <memset>
 801a4b0:	4620      	mov	r0, r4
 801a4b2:	bd70      	pop	{r4, r5, r6, pc}

0801a4b4 <__sfp_lock_acquire>:
 801a4b4:	4801      	ldr	r0, [pc, #4]	; (801a4bc <__sfp_lock_acquire+0x8>)
 801a4b6:	f000 b8b3 	b.w	801a620 <__retarget_lock_acquire_recursive>
 801a4ba:	bf00      	nop
 801a4bc:	24002925 	.word	0x24002925

0801a4c0 <__sfp_lock_release>:
 801a4c0:	4801      	ldr	r0, [pc, #4]	; (801a4c8 <__sfp_lock_release+0x8>)
 801a4c2:	f000 b8ae 	b.w	801a622 <__retarget_lock_release_recursive>
 801a4c6:	bf00      	nop
 801a4c8:	24002925 	.word	0x24002925

0801a4cc <__sinit_lock_acquire>:
 801a4cc:	4801      	ldr	r0, [pc, #4]	; (801a4d4 <__sinit_lock_acquire+0x8>)
 801a4ce:	f000 b8a7 	b.w	801a620 <__retarget_lock_acquire_recursive>
 801a4d2:	bf00      	nop
 801a4d4:	24002926 	.word	0x24002926

0801a4d8 <__sinit_lock_release>:
 801a4d8:	4801      	ldr	r0, [pc, #4]	; (801a4e0 <__sinit_lock_release+0x8>)
 801a4da:	f000 b8a2 	b.w	801a622 <__retarget_lock_release_recursive>
 801a4de:	bf00      	nop
 801a4e0:	24002926 	.word	0x24002926

0801a4e4 <__sinit>:
 801a4e4:	b510      	push	{r4, lr}
 801a4e6:	4604      	mov	r4, r0
 801a4e8:	f7ff fff0 	bl	801a4cc <__sinit_lock_acquire>
 801a4ec:	69a3      	ldr	r3, [r4, #24]
 801a4ee:	b11b      	cbz	r3, 801a4f8 <__sinit+0x14>
 801a4f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4f4:	f7ff bff0 	b.w	801a4d8 <__sinit_lock_release>
 801a4f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a4fc:	6523      	str	r3, [r4, #80]	; 0x50
 801a4fe:	4b13      	ldr	r3, [pc, #76]	; (801a54c <__sinit+0x68>)
 801a500:	4a13      	ldr	r2, [pc, #76]	; (801a550 <__sinit+0x6c>)
 801a502:	681b      	ldr	r3, [r3, #0]
 801a504:	62a2      	str	r2, [r4, #40]	; 0x28
 801a506:	42a3      	cmp	r3, r4
 801a508:	bf04      	itt	eq
 801a50a:	2301      	moveq	r3, #1
 801a50c:	61a3      	streq	r3, [r4, #24]
 801a50e:	4620      	mov	r0, r4
 801a510:	f000 f820 	bl	801a554 <__sfp>
 801a514:	6060      	str	r0, [r4, #4]
 801a516:	4620      	mov	r0, r4
 801a518:	f000 f81c 	bl	801a554 <__sfp>
 801a51c:	60a0      	str	r0, [r4, #8]
 801a51e:	4620      	mov	r0, r4
 801a520:	f000 f818 	bl	801a554 <__sfp>
 801a524:	2200      	movs	r2, #0
 801a526:	60e0      	str	r0, [r4, #12]
 801a528:	2104      	movs	r1, #4
 801a52a:	6860      	ldr	r0, [r4, #4]
 801a52c:	f7ff ff82 	bl	801a434 <std>
 801a530:	68a0      	ldr	r0, [r4, #8]
 801a532:	2201      	movs	r2, #1
 801a534:	2109      	movs	r1, #9
 801a536:	f7ff ff7d 	bl	801a434 <std>
 801a53a:	68e0      	ldr	r0, [r4, #12]
 801a53c:	2202      	movs	r2, #2
 801a53e:	2112      	movs	r1, #18
 801a540:	f7ff ff78 	bl	801a434 <std>
 801a544:	2301      	movs	r3, #1
 801a546:	61a3      	str	r3, [r4, #24]
 801a548:	e7d2      	b.n	801a4f0 <__sinit+0xc>
 801a54a:	bf00      	nop
 801a54c:	0801ad54 	.word	0x0801ad54
 801a550:	0801a47d 	.word	0x0801a47d

0801a554 <__sfp>:
 801a554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a556:	4607      	mov	r7, r0
 801a558:	f7ff ffac 	bl	801a4b4 <__sfp_lock_acquire>
 801a55c:	4b1e      	ldr	r3, [pc, #120]	; (801a5d8 <__sfp+0x84>)
 801a55e:	681e      	ldr	r6, [r3, #0]
 801a560:	69b3      	ldr	r3, [r6, #24]
 801a562:	b913      	cbnz	r3, 801a56a <__sfp+0x16>
 801a564:	4630      	mov	r0, r6
 801a566:	f7ff ffbd 	bl	801a4e4 <__sinit>
 801a56a:	3648      	adds	r6, #72	; 0x48
 801a56c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a570:	3b01      	subs	r3, #1
 801a572:	d503      	bpl.n	801a57c <__sfp+0x28>
 801a574:	6833      	ldr	r3, [r6, #0]
 801a576:	b30b      	cbz	r3, 801a5bc <__sfp+0x68>
 801a578:	6836      	ldr	r6, [r6, #0]
 801a57a:	e7f7      	b.n	801a56c <__sfp+0x18>
 801a57c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a580:	b9d5      	cbnz	r5, 801a5b8 <__sfp+0x64>
 801a582:	4b16      	ldr	r3, [pc, #88]	; (801a5dc <__sfp+0x88>)
 801a584:	60e3      	str	r3, [r4, #12]
 801a586:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a58a:	6665      	str	r5, [r4, #100]	; 0x64
 801a58c:	f000 f847 	bl	801a61e <__retarget_lock_init_recursive>
 801a590:	f7ff ff96 	bl	801a4c0 <__sfp_lock_release>
 801a594:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a598:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a59c:	6025      	str	r5, [r4, #0]
 801a59e:	61a5      	str	r5, [r4, #24]
 801a5a0:	2208      	movs	r2, #8
 801a5a2:	4629      	mov	r1, r5
 801a5a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a5a8:	f7fb fe3a 	bl	8016220 <memset>
 801a5ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a5b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a5b4:	4620      	mov	r0, r4
 801a5b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5b8:	3468      	adds	r4, #104	; 0x68
 801a5ba:	e7d9      	b.n	801a570 <__sfp+0x1c>
 801a5bc:	2104      	movs	r1, #4
 801a5be:	4638      	mov	r0, r7
 801a5c0:	f7ff ff62 	bl	801a488 <__sfmoreglue>
 801a5c4:	4604      	mov	r4, r0
 801a5c6:	6030      	str	r0, [r6, #0]
 801a5c8:	2800      	cmp	r0, #0
 801a5ca:	d1d5      	bne.n	801a578 <__sfp+0x24>
 801a5cc:	f7ff ff78 	bl	801a4c0 <__sfp_lock_release>
 801a5d0:	230c      	movs	r3, #12
 801a5d2:	603b      	str	r3, [r7, #0]
 801a5d4:	e7ee      	b.n	801a5b4 <__sfp+0x60>
 801a5d6:	bf00      	nop
 801a5d8:	0801ad54 	.word	0x0801ad54
 801a5dc:	ffff0001 	.word	0xffff0001

0801a5e0 <_fwalk_reent>:
 801a5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a5e4:	4606      	mov	r6, r0
 801a5e6:	4688      	mov	r8, r1
 801a5e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a5ec:	2700      	movs	r7, #0
 801a5ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a5f2:	f1b9 0901 	subs.w	r9, r9, #1
 801a5f6:	d505      	bpl.n	801a604 <_fwalk_reent+0x24>
 801a5f8:	6824      	ldr	r4, [r4, #0]
 801a5fa:	2c00      	cmp	r4, #0
 801a5fc:	d1f7      	bne.n	801a5ee <_fwalk_reent+0xe>
 801a5fe:	4638      	mov	r0, r7
 801a600:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a604:	89ab      	ldrh	r3, [r5, #12]
 801a606:	2b01      	cmp	r3, #1
 801a608:	d907      	bls.n	801a61a <_fwalk_reent+0x3a>
 801a60a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a60e:	3301      	adds	r3, #1
 801a610:	d003      	beq.n	801a61a <_fwalk_reent+0x3a>
 801a612:	4629      	mov	r1, r5
 801a614:	4630      	mov	r0, r6
 801a616:	47c0      	blx	r8
 801a618:	4307      	orrs	r7, r0
 801a61a:	3568      	adds	r5, #104	; 0x68
 801a61c:	e7e9      	b.n	801a5f2 <_fwalk_reent+0x12>

0801a61e <__retarget_lock_init_recursive>:
 801a61e:	4770      	bx	lr

0801a620 <__retarget_lock_acquire_recursive>:
 801a620:	4770      	bx	lr

0801a622 <__retarget_lock_release_recursive>:
 801a622:	4770      	bx	lr

0801a624 <__swhatbuf_r>:
 801a624:	b570      	push	{r4, r5, r6, lr}
 801a626:	460e      	mov	r6, r1
 801a628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a62c:	2900      	cmp	r1, #0
 801a62e:	b096      	sub	sp, #88	; 0x58
 801a630:	4614      	mov	r4, r2
 801a632:	461d      	mov	r5, r3
 801a634:	da08      	bge.n	801a648 <__swhatbuf_r+0x24>
 801a636:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801a63a:	2200      	movs	r2, #0
 801a63c:	602a      	str	r2, [r5, #0]
 801a63e:	061a      	lsls	r2, r3, #24
 801a640:	d410      	bmi.n	801a664 <__swhatbuf_r+0x40>
 801a642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a646:	e00e      	b.n	801a666 <__swhatbuf_r+0x42>
 801a648:	466a      	mov	r2, sp
 801a64a:	f000 f903 	bl	801a854 <_fstat_r>
 801a64e:	2800      	cmp	r0, #0
 801a650:	dbf1      	blt.n	801a636 <__swhatbuf_r+0x12>
 801a652:	9a01      	ldr	r2, [sp, #4]
 801a654:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a658:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a65c:	425a      	negs	r2, r3
 801a65e:	415a      	adcs	r2, r3
 801a660:	602a      	str	r2, [r5, #0]
 801a662:	e7ee      	b.n	801a642 <__swhatbuf_r+0x1e>
 801a664:	2340      	movs	r3, #64	; 0x40
 801a666:	2000      	movs	r0, #0
 801a668:	6023      	str	r3, [r4, #0]
 801a66a:	b016      	add	sp, #88	; 0x58
 801a66c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a670 <__smakebuf_r>:
 801a670:	898b      	ldrh	r3, [r1, #12]
 801a672:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a674:	079d      	lsls	r5, r3, #30
 801a676:	4606      	mov	r6, r0
 801a678:	460c      	mov	r4, r1
 801a67a:	d507      	bpl.n	801a68c <__smakebuf_r+0x1c>
 801a67c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a680:	6023      	str	r3, [r4, #0]
 801a682:	6123      	str	r3, [r4, #16]
 801a684:	2301      	movs	r3, #1
 801a686:	6163      	str	r3, [r4, #20]
 801a688:	b002      	add	sp, #8
 801a68a:	bd70      	pop	{r4, r5, r6, pc}
 801a68c:	ab01      	add	r3, sp, #4
 801a68e:	466a      	mov	r2, sp
 801a690:	f7ff ffc8 	bl	801a624 <__swhatbuf_r>
 801a694:	9900      	ldr	r1, [sp, #0]
 801a696:	4605      	mov	r5, r0
 801a698:	4630      	mov	r0, r6
 801a69a:	f7ff f959 	bl	8019950 <_malloc_r>
 801a69e:	b948      	cbnz	r0, 801a6b4 <__smakebuf_r+0x44>
 801a6a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a6a4:	059a      	lsls	r2, r3, #22
 801a6a6:	d4ef      	bmi.n	801a688 <__smakebuf_r+0x18>
 801a6a8:	f023 0303 	bic.w	r3, r3, #3
 801a6ac:	f043 0302 	orr.w	r3, r3, #2
 801a6b0:	81a3      	strh	r3, [r4, #12]
 801a6b2:	e7e3      	b.n	801a67c <__smakebuf_r+0xc>
 801a6b4:	4b0d      	ldr	r3, [pc, #52]	; (801a6ec <__smakebuf_r+0x7c>)
 801a6b6:	62b3      	str	r3, [r6, #40]	; 0x28
 801a6b8:	89a3      	ldrh	r3, [r4, #12]
 801a6ba:	6020      	str	r0, [r4, #0]
 801a6bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a6c0:	81a3      	strh	r3, [r4, #12]
 801a6c2:	9b00      	ldr	r3, [sp, #0]
 801a6c4:	6163      	str	r3, [r4, #20]
 801a6c6:	9b01      	ldr	r3, [sp, #4]
 801a6c8:	6120      	str	r0, [r4, #16]
 801a6ca:	b15b      	cbz	r3, 801a6e4 <__smakebuf_r+0x74>
 801a6cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a6d0:	4630      	mov	r0, r6
 801a6d2:	f000 f8d1 	bl	801a878 <_isatty_r>
 801a6d6:	b128      	cbz	r0, 801a6e4 <__smakebuf_r+0x74>
 801a6d8:	89a3      	ldrh	r3, [r4, #12]
 801a6da:	f023 0303 	bic.w	r3, r3, #3
 801a6de:	f043 0301 	orr.w	r3, r3, #1
 801a6e2:	81a3      	strh	r3, [r4, #12]
 801a6e4:	89a0      	ldrh	r0, [r4, #12]
 801a6e6:	4305      	orrs	r5, r0
 801a6e8:	81a5      	strh	r5, [r4, #12]
 801a6ea:	e7cd      	b.n	801a688 <__smakebuf_r+0x18>
 801a6ec:	0801a47d 	.word	0x0801a47d

0801a6f0 <_malloc_usable_size_r>:
 801a6f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a6f4:	1f18      	subs	r0, r3, #4
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	bfbc      	itt	lt
 801a6fa:	580b      	ldrlt	r3, [r1, r0]
 801a6fc:	18c0      	addlt	r0, r0, r3
 801a6fe:	4770      	bx	lr

0801a700 <_raise_r>:
 801a700:	291f      	cmp	r1, #31
 801a702:	b538      	push	{r3, r4, r5, lr}
 801a704:	4604      	mov	r4, r0
 801a706:	460d      	mov	r5, r1
 801a708:	d904      	bls.n	801a714 <_raise_r+0x14>
 801a70a:	2316      	movs	r3, #22
 801a70c:	6003      	str	r3, [r0, #0]
 801a70e:	f04f 30ff 	mov.w	r0, #4294967295
 801a712:	bd38      	pop	{r3, r4, r5, pc}
 801a714:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a716:	b112      	cbz	r2, 801a71e <_raise_r+0x1e>
 801a718:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a71c:	b94b      	cbnz	r3, 801a732 <_raise_r+0x32>
 801a71e:	4620      	mov	r0, r4
 801a720:	f000 f830 	bl	801a784 <_getpid_r>
 801a724:	462a      	mov	r2, r5
 801a726:	4601      	mov	r1, r0
 801a728:	4620      	mov	r0, r4
 801a72a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a72e:	f000 b817 	b.w	801a760 <_kill_r>
 801a732:	2b01      	cmp	r3, #1
 801a734:	d00a      	beq.n	801a74c <_raise_r+0x4c>
 801a736:	1c59      	adds	r1, r3, #1
 801a738:	d103      	bne.n	801a742 <_raise_r+0x42>
 801a73a:	2316      	movs	r3, #22
 801a73c:	6003      	str	r3, [r0, #0]
 801a73e:	2001      	movs	r0, #1
 801a740:	e7e7      	b.n	801a712 <_raise_r+0x12>
 801a742:	2400      	movs	r4, #0
 801a744:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a748:	4628      	mov	r0, r5
 801a74a:	4798      	blx	r3
 801a74c:	2000      	movs	r0, #0
 801a74e:	e7e0      	b.n	801a712 <_raise_r+0x12>

0801a750 <raise>:
 801a750:	4b02      	ldr	r3, [pc, #8]	; (801a75c <raise+0xc>)
 801a752:	4601      	mov	r1, r0
 801a754:	6818      	ldr	r0, [r3, #0]
 801a756:	f7ff bfd3 	b.w	801a700 <_raise_r>
 801a75a:	bf00      	nop
 801a75c:	24000100 	.word	0x24000100

0801a760 <_kill_r>:
 801a760:	b538      	push	{r3, r4, r5, lr}
 801a762:	4d07      	ldr	r5, [pc, #28]	; (801a780 <_kill_r+0x20>)
 801a764:	2300      	movs	r3, #0
 801a766:	4604      	mov	r4, r0
 801a768:	4608      	mov	r0, r1
 801a76a:	4611      	mov	r1, r2
 801a76c:	602b      	str	r3, [r5, #0]
 801a76e:	f7e8 ff13 	bl	8003598 <_kill>
 801a772:	1c43      	adds	r3, r0, #1
 801a774:	d102      	bne.n	801a77c <_kill_r+0x1c>
 801a776:	682b      	ldr	r3, [r5, #0]
 801a778:	b103      	cbz	r3, 801a77c <_kill_r+0x1c>
 801a77a:	6023      	str	r3, [r4, #0]
 801a77c:	bd38      	pop	{r3, r4, r5, pc}
 801a77e:	bf00      	nop
 801a780:	24002920 	.word	0x24002920

0801a784 <_getpid_r>:
 801a784:	f7e8 bf00 	b.w	8003588 <_getpid>

0801a788 <__sread>:
 801a788:	b510      	push	{r4, lr}
 801a78a:	460c      	mov	r4, r1
 801a78c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a790:	f000 f894 	bl	801a8bc <_read_r>
 801a794:	2800      	cmp	r0, #0
 801a796:	bfab      	itete	ge
 801a798:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a79a:	89a3      	ldrhlt	r3, [r4, #12]
 801a79c:	181b      	addge	r3, r3, r0
 801a79e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a7a2:	bfac      	ite	ge
 801a7a4:	6563      	strge	r3, [r4, #84]	; 0x54
 801a7a6:	81a3      	strhlt	r3, [r4, #12]
 801a7a8:	bd10      	pop	{r4, pc}

0801a7aa <__swrite>:
 801a7aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a7ae:	461f      	mov	r7, r3
 801a7b0:	898b      	ldrh	r3, [r1, #12]
 801a7b2:	05db      	lsls	r3, r3, #23
 801a7b4:	4605      	mov	r5, r0
 801a7b6:	460c      	mov	r4, r1
 801a7b8:	4616      	mov	r6, r2
 801a7ba:	d505      	bpl.n	801a7c8 <__swrite+0x1e>
 801a7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a7c0:	2302      	movs	r3, #2
 801a7c2:	2200      	movs	r2, #0
 801a7c4:	f000 f868 	bl	801a898 <_lseek_r>
 801a7c8:	89a3      	ldrh	r3, [r4, #12]
 801a7ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a7ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a7d2:	81a3      	strh	r3, [r4, #12]
 801a7d4:	4632      	mov	r2, r6
 801a7d6:	463b      	mov	r3, r7
 801a7d8:	4628      	mov	r0, r5
 801a7da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a7de:	f000 b817 	b.w	801a810 <_write_r>

0801a7e2 <__sseek>:
 801a7e2:	b510      	push	{r4, lr}
 801a7e4:	460c      	mov	r4, r1
 801a7e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a7ea:	f000 f855 	bl	801a898 <_lseek_r>
 801a7ee:	1c43      	adds	r3, r0, #1
 801a7f0:	89a3      	ldrh	r3, [r4, #12]
 801a7f2:	bf15      	itete	ne
 801a7f4:	6560      	strne	r0, [r4, #84]	; 0x54
 801a7f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a7fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a7fe:	81a3      	strheq	r3, [r4, #12]
 801a800:	bf18      	it	ne
 801a802:	81a3      	strhne	r3, [r4, #12]
 801a804:	bd10      	pop	{r4, pc}

0801a806 <__sclose>:
 801a806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a80a:	f000 b813 	b.w	801a834 <_close_r>
	...

0801a810 <_write_r>:
 801a810:	b538      	push	{r3, r4, r5, lr}
 801a812:	4d07      	ldr	r5, [pc, #28]	; (801a830 <_write_r+0x20>)
 801a814:	4604      	mov	r4, r0
 801a816:	4608      	mov	r0, r1
 801a818:	4611      	mov	r1, r2
 801a81a:	2200      	movs	r2, #0
 801a81c:	602a      	str	r2, [r5, #0]
 801a81e:	461a      	mov	r2, r3
 801a820:	f7e8 fef1 	bl	8003606 <_write>
 801a824:	1c43      	adds	r3, r0, #1
 801a826:	d102      	bne.n	801a82e <_write_r+0x1e>
 801a828:	682b      	ldr	r3, [r5, #0]
 801a82a:	b103      	cbz	r3, 801a82e <_write_r+0x1e>
 801a82c:	6023      	str	r3, [r4, #0]
 801a82e:	bd38      	pop	{r3, r4, r5, pc}
 801a830:	24002920 	.word	0x24002920

0801a834 <_close_r>:
 801a834:	b538      	push	{r3, r4, r5, lr}
 801a836:	4d06      	ldr	r5, [pc, #24]	; (801a850 <_close_r+0x1c>)
 801a838:	2300      	movs	r3, #0
 801a83a:	4604      	mov	r4, r0
 801a83c:	4608      	mov	r0, r1
 801a83e:	602b      	str	r3, [r5, #0]
 801a840:	f7e8 fefd 	bl	800363e <_close>
 801a844:	1c43      	adds	r3, r0, #1
 801a846:	d102      	bne.n	801a84e <_close_r+0x1a>
 801a848:	682b      	ldr	r3, [r5, #0]
 801a84a:	b103      	cbz	r3, 801a84e <_close_r+0x1a>
 801a84c:	6023      	str	r3, [r4, #0]
 801a84e:	bd38      	pop	{r3, r4, r5, pc}
 801a850:	24002920 	.word	0x24002920

0801a854 <_fstat_r>:
 801a854:	b538      	push	{r3, r4, r5, lr}
 801a856:	4d07      	ldr	r5, [pc, #28]	; (801a874 <_fstat_r+0x20>)
 801a858:	2300      	movs	r3, #0
 801a85a:	4604      	mov	r4, r0
 801a85c:	4608      	mov	r0, r1
 801a85e:	4611      	mov	r1, r2
 801a860:	602b      	str	r3, [r5, #0]
 801a862:	f7e8 fef8 	bl	8003656 <_fstat>
 801a866:	1c43      	adds	r3, r0, #1
 801a868:	d102      	bne.n	801a870 <_fstat_r+0x1c>
 801a86a:	682b      	ldr	r3, [r5, #0]
 801a86c:	b103      	cbz	r3, 801a870 <_fstat_r+0x1c>
 801a86e:	6023      	str	r3, [r4, #0]
 801a870:	bd38      	pop	{r3, r4, r5, pc}
 801a872:	bf00      	nop
 801a874:	24002920 	.word	0x24002920

0801a878 <_isatty_r>:
 801a878:	b538      	push	{r3, r4, r5, lr}
 801a87a:	4d06      	ldr	r5, [pc, #24]	; (801a894 <_isatty_r+0x1c>)
 801a87c:	2300      	movs	r3, #0
 801a87e:	4604      	mov	r4, r0
 801a880:	4608      	mov	r0, r1
 801a882:	602b      	str	r3, [r5, #0]
 801a884:	f7e8 fef7 	bl	8003676 <_isatty>
 801a888:	1c43      	adds	r3, r0, #1
 801a88a:	d102      	bne.n	801a892 <_isatty_r+0x1a>
 801a88c:	682b      	ldr	r3, [r5, #0]
 801a88e:	b103      	cbz	r3, 801a892 <_isatty_r+0x1a>
 801a890:	6023      	str	r3, [r4, #0]
 801a892:	bd38      	pop	{r3, r4, r5, pc}
 801a894:	24002920 	.word	0x24002920

0801a898 <_lseek_r>:
 801a898:	b538      	push	{r3, r4, r5, lr}
 801a89a:	4d07      	ldr	r5, [pc, #28]	; (801a8b8 <_lseek_r+0x20>)
 801a89c:	4604      	mov	r4, r0
 801a89e:	4608      	mov	r0, r1
 801a8a0:	4611      	mov	r1, r2
 801a8a2:	2200      	movs	r2, #0
 801a8a4:	602a      	str	r2, [r5, #0]
 801a8a6:	461a      	mov	r2, r3
 801a8a8:	f7e8 fef0 	bl	800368c <_lseek>
 801a8ac:	1c43      	adds	r3, r0, #1
 801a8ae:	d102      	bne.n	801a8b6 <_lseek_r+0x1e>
 801a8b0:	682b      	ldr	r3, [r5, #0]
 801a8b2:	b103      	cbz	r3, 801a8b6 <_lseek_r+0x1e>
 801a8b4:	6023      	str	r3, [r4, #0]
 801a8b6:	bd38      	pop	{r3, r4, r5, pc}
 801a8b8:	24002920 	.word	0x24002920

0801a8bc <_read_r>:
 801a8bc:	b538      	push	{r3, r4, r5, lr}
 801a8be:	4d07      	ldr	r5, [pc, #28]	; (801a8dc <_read_r+0x20>)
 801a8c0:	4604      	mov	r4, r0
 801a8c2:	4608      	mov	r0, r1
 801a8c4:	4611      	mov	r1, r2
 801a8c6:	2200      	movs	r2, #0
 801a8c8:	602a      	str	r2, [r5, #0]
 801a8ca:	461a      	mov	r2, r3
 801a8cc:	f7e8 fe7e 	bl	80035cc <_read>
 801a8d0:	1c43      	adds	r3, r0, #1
 801a8d2:	d102      	bne.n	801a8da <_read_r+0x1e>
 801a8d4:	682b      	ldr	r3, [r5, #0]
 801a8d6:	b103      	cbz	r3, 801a8da <_read_r+0x1e>
 801a8d8:	6023      	str	r3, [r4, #0]
 801a8da:	bd38      	pop	{r3, r4, r5, pc}
 801a8dc:	24002920 	.word	0x24002920

0801a8e0 <asin>:
 801a8e0:	b508      	push	{r3, lr}
 801a8e2:	ed2d 8b04 	vpush	{d8-d9}
 801a8e6:	eeb0 8b40 	vmov.f64	d8, d0
 801a8ea:	f000 f845 	bl	801a978 <__ieee754_asin>
 801a8ee:	eeb4 8b48 	vcmp.f64	d8, d8
 801a8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8f6:	eeb0 9b40 	vmov.f64	d9, d0
 801a8fa:	d615      	bvs.n	801a928 <asin+0x48>
 801a8fc:	eeb0 0b48 	vmov.f64	d0, d8
 801a900:	f000 f94b 	bl	801ab9a <fabs>
 801a904:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801a908:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801a90c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a910:	dd0a      	ble.n	801a928 <asin+0x48>
 801a912:	f7fb fc4d 	bl	80161b0 <__errno>
 801a916:	ecbd 8b04 	vpop	{d8-d9}
 801a91a:	2321      	movs	r3, #33	; 0x21
 801a91c:	6003      	str	r3, [r0, #0]
 801a91e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801a922:	4804      	ldr	r0, [pc, #16]	; (801a934 <asin+0x54>)
 801a924:	f7ff b9e4 	b.w	8019cf0 <nan>
 801a928:	eeb0 0b49 	vmov.f64	d0, d9
 801a92c:	ecbd 8b04 	vpop	{d8-d9}
 801a930:	bd08      	pop	{r3, pc}
 801a932:	bf00      	nop
 801a934:	0801b198 	.word	0x0801b198

0801a938 <sqrt>:
 801a938:	b508      	push	{r3, lr}
 801a93a:	ed2d 8b04 	vpush	{d8-d9}
 801a93e:	eeb0 8b40 	vmov.f64	d8, d0
 801a942:	f000 f927 	bl	801ab94 <__ieee754_sqrt>
 801a946:	eeb4 8b48 	vcmp.f64	d8, d8
 801a94a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a94e:	d60c      	bvs.n	801a96a <sqrt+0x32>
 801a950:	ed9f 9b07 	vldr	d9, [pc, #28]	; 801a970 <sqrt+0x38>
 801a954:	eeb4 8bc9 	vcmpe.f64	d8, d9
 801a958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a95c:	d505      	bpl.n	801a96a <sqrt+0x32>
 801a95e:	f7fb fc27 	bl	80161b0 <__errno>
 801a962:	ee89 0b09 	vdiv.f64	d0, d9, d9
 801a966:	2321      	movs	r3, #33	; 0x21
 801a968:	6003      	str	r3, [r0, #0]
 801a96a:	ecbd 8b04 	vpop	{d8-d9}
 801a96e:	bd08      	pop	{r3, pc}
	...

0801a978 <__ieee754_asin>:
 801a978:	b538      	push	{r3, r4, r5, lr}
 801a97a:	ee10 5a90 	vmov	r5, s1
 801a97e:	4b82      	ldr	r3, [pc, #520]	; (801ab88 <__ieee754_asin+0x210>)
 801a980:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 801a984:	429c      	cmp	r4, r3
 801a986:	ed2d 8b06 	vpush	{d8-d10}
 801a98a:	dd19      	ble.n	801a9c0 <__ieee754_asin+0x48>
 801a98c:	ee10 3a10 	vmov	r3, s0
 801a990:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a994:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a998:	4323      	orrs	r3, r4
 801a99a:	d10c      	bne.n	801a9b6 <__ieee754_asin+0x3e>
 801a99c:	ed9f 7b5c 	vldr	d7, [pc, #368]	; 801ab10 <__ieee754_asin+0x198>
 801a9a0:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 801ab18 <__ieee754_asin+0x1a0>
 801a9a4:	ee20 7b07 	vmul.f64	d7, d0, d7
 801a9a8:	eea0 7b06 	vfma.f64	d7, d0, d6
 801a9ac:	eeb0 0b47 	vmov.f64	d0, d7
 801a9b0:	ecbd 8b06 	vpop	{d8-d10}
 801a9b4:	bd38      	pop	{r3, r4, r5, pc}
 801a9b6:	ee30 7b40 	vsub.f64	d7, d0, d0
 801a9ba:	ee87 0b07 	vdiv.f64	d0, d7, d7
 801a9be:	e7f7      	b.n	801a9b0 <__ieee754_asin+0x38>
 801a9c0:	4b72      	ldr	r3, [pc, #456]	; (801ab8c <__ieee754_asin+0x214>)
 801a9c2:	eeb7 9b00 	vmov.f64	d9, #112	; 0x3f800000  1.0
 801a9c6:	429c      	cmp	r4, r3
 801a9c8:	dc0b      	bgt.n	801a9e2 <__ieee754_asin+0x6a>
 801a9ca:	f1b4 5f79 	cmp.w	r4, #1044381696	; 0x3e400000
 801a9ce:	da52      	bge.n	801aa76 <__ieee754_asin+0xfe>
 801a9d0:	ed9f 7b53 	vldr	d7, [pc, #332]	; 801ab20 <__ieee754_asin+0x1a8>
 801a9d4:	ee30 7b07 	vadd.f64	d7, d0, d7
 801a9d8:	eeb4 7bc9 	vcmpe.f64	d7, d9
 801a9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9e0:	dce6      	bgt.n	801a9b0 <__ieee754_asin+0x38>
 801a9e2:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
 801a9e6:	f000 f8d8 	bl	801ab9a <fabs>
 801a9ea:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 801ab28 <__ieee754_asin+0x1b0>
 801a9ee:	ee39 0b40 	vsub.f64	d0, d9, d0
 801a9f2:	ee20 8b08 	vmul.f64	d8, d0, d8
 801a9f6:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 801ab30 <__ieee754_asin+0x1b8>
 801a9fa:	eeb0 0b48 	vmov.f64	d0, d8
 801a9fe:	eea8 6b07 	vfma.f64	d6, d8, d7
 801aa02:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 801ab38 <__ieee754_asin+0x1c0>
 801aa06:	eea6 7b08 	vfma.f64	d7, d6, d8
 801aa0a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 801ab40 <__ieee754_asin+0x1c8>
 801aa0e:	ed9f ab4e 	vldr	d10, [pc, #312]	; 801ab48 <__ieee754_asin+0x1d0>
 801aa12:	eea7 6b08 	vfma.f64	d6, d7, d8
 801aa16:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 801ab50 <__ieee754_asin+0x1d8>
 801aa1a:	eea6 7b08 	vfma.f64	d7, d6, d8
 801aa1e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 801ab58 <__ieee754_asin+0x1e0>
 801aa22:	eea7 ab08 	vfma.f64	d10, d7, d8
 801aa26:	ee2a ab08 	vmul.f64	d10, d10, d8
 801aa2a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 801ab60 <__ieee754_asin+0x1e8>
 801aa2e:	eea8 7b06 	vfma.f64	d7, d8, d6
 801aa32:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 801ab68 <__ieee754_asin+0x1f0>
 801aa36:	eea7 6b08 	vfma.f64	d6, d7, d8
 801aa3a:	ed9f 7b4d 	vldr	d7, [pc, #308]	; 801ab70 <__ieee754_asin+0x1f8>
 801aa3e:	eea6 7b08 	vfma.f64	d7, d6, d8
 801aa42:	eea7 9b08 	vfma.f64	d9, d7, d8
 801aa46:	f000 f8a5 	bl	801ab94 <__ieee754_sqrt>
 801aa4a:	ee8a 5b09 	vdiv.f64	d5, d10, d9
 801aa4e:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 801aa52:	4b4f      	ldr	r3, [pc, #316]	; (801ab90 <__ieee754_asin+0x218>)
 801aa54:	429c      	cmp	r4, r3
 801aa56:	dd3d      	ble.n	801aad4 <__ieee754_asin+0x15c>
 801aa58:	eea0 0b05 	vfma.f64	d0, d0, d5
 801aa5c:	ed9f 7b46 	vldr	d7, [pc, #280]	; 801ab78 <__ieee754_asin+0x200>
 801aa60:	eea0 7b04 	vfma.f64	d7, d0, d4
 801aa64:	ed9f 0b2c 	vldr	d0, [pc, #176]	; 801ab18 <__ieee754_asin+0x1a0>
 801aa68:	ee30 0b47 	vsub.f64	d0, d0, d7
 801aa6c:	2d00      	cmp	r5, #0
 801aa6e:	bfd8      	it	le
 801aa70:	eeb1 0b40 	vnegle.f64	d0, d0
 801aa74:	e79c      	b.n	801a9b0 <__ieee754_asin+0x38>
 801aa76:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 801ab28 <__ieee754_asin+0x1b0>
 801aa7a:	ee20 7b00 	vmul.f64	d7, d0, d0
 801aa7e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 801ab30 <__ieee754_asin+0x1b8>
 801aa82:	eea7 6b05 	vfma.f64	d6, d7, d5
 801aa86:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 801ab38 <__ieee754_asin+0x1c0>
 801aa8a:	eea6 5b07 	vfma.f64	d5, d6, d7
 801aa8e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 801ab40 <__ieee754_asin+0x1c8>
 801aa92:	eea5 6b07 	vfma.f64	d6, d5, d7
 801aa96:	ed9f 5b2e 	vldr	d5, [pc, #184]	; 801ab50 <__ieee754_asin+0x1d8>
 801aa9a:	eea6 5b07 	vfma.f64	d5, d6, d7
 801aa9e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 801ab48 <__ieee754_asin+0x1d0>
 801aaa2:	ed9f 4b2d 	vldr	d4, [pc, #180]	; 801ab58 <__ieee754_asin+0x1e0>
 801aaa6:	eea5 6b07 	vfma.f64	d6, d5, d7
 801aaaa:	ee26 6b07 	vmul.f64	d6, d6, d7
 801aaae:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 801ab60 <__ieee754_asin+0x1e8>
 801aab2:	eea7 5b04 	vfma.f64	d5, d7, d4
 801aab6:	ed9f 4b2c 	vldr	d4, [pc, #176]	; 801ab68 <__ieee754_asin+0x1f0>
 801aaba:	eea5 4b07 	vfma.f64	d4, d5, d7
 801aabe:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 801ab70 <__ieee754_asin+0x1f8>
 801aac2:	eea4 5b07 	vfma.f64	d5, d4, d7
 801aac6:	eea5 9b07 	vfma.f64	d9, d5, d7
 801aaca:	ee86 7b09 	vdiv.f64	d7, d6, d9
 801aace:	eea0 0b07 	vfma.f64	d0, d0, d7
 801aad2:	e76d      	b.n	801a9b0 <__ieee754_asin+0x38>
 801aad4:	ec53 2b10 	vmov	r2, r3, d0
 801aad8:	2200      	movs	r2, #0
 801aada:	ec43 2b16 	vmov	d6, r2, r3
 801aade:	ee30 7b06 	vadd.f64	d7, d0, d6
 801aae2:	eea6 8b46 	vfms.f64	d8, d6, d6
 801aae6:	ee88 3b07 	vdiv.f64	d3, d8, d7
 801aaea:	ed9f 7b09 	vldr	d7, [pc, #36]	; 801ab10 <__ieee754_asin+0x198>
 801aaee:	ee30 0b00 	vadd.f64	d0, d0, d0
 801aaf2:	eea3 7b44 	vfms.f64	d7, d3, d4
 801aaf6:	ee90 7b05 	vfnms.f64	d7, d0, d5
 801aafa:	ed9f 5b21 	vldr	d5, [pc, #132]	; 801ab80 <__ieee754_asin+0x208>
 801aafe:	eeb0 0b45 	vmov.f64	d0, d5
 801ab02:	eea6 0b44 	vfms.f64	d0, d6, d4
 801ab06:	ee37 0b40 	vsub.f64	d0, d7, d0
 801ab0a:	ee35 0b40 	vsub.f64	d0, d5, d0
 801ab0e:	e7ad      	b.n	801aa6c <__ieee754_asin+0xf4>
 801ab10:	33145c07 	.word	0x33145c07
 801ab14:	3c91a626 	.word	0x3c91a626
 801ab18:	54442d18 	.word	0x54442d18
 801ab1c:	3ff921fb 	.word	0x3ff921fb
 801ab20:	8800759c 	.word	0x8800759c
 801ab24:	7e37e43c 	.word	0x7e37e43c
 801ab28:	0dfdf709 	.word	0x0dfdf709
 801ab2c:	3f023de1 	.word	0x3f023de1
 801ab30:	7501b288 	.word	0x7501b288
 801ab34:	3f49efe0 	.word	0x3f49efe0
 801ab38:	b5688f3b 	.word	0xb5688f3b
 801ab3c:	bfa48228 	.word	0xbfa48228
 801ab40:	0e884455 	.word	0x0e884455
 801ab44:	3fc9c155 	.word	0x3fc9c155
 801ab48:	55555555 	.word	0x55555555
 801ab4c:	3fc55555 	.word	0x3fc55555
 801ab50:	03eb6f7d 	.word	0x03eb6f7d
 801ab54:	bfd4d612 	.word	0xbfd4d612
 801ab58:	b12e9282 	.word	0xb12e9282
 801ab5c:	3fb3b8c5 	.word	0x3fb3b8c5
 801ab60:	1b8d0159 	.word	0x1b8d0159
 801ab64:	bfe6066c 	.word	0xbfe6066c
 801ab68:	9c598ac8 	.word	0x9c598ac8
 801ab6c:	40002ae5 	.word	0x40002ae5
 801ab70:	1c8a2d4b 	.word	0x1c8a2d4b
 801ab74:	c0033a27 	.word	0xc0033a27
 801ab78:	33145c07 	.word	0x33145c07
 801ab7c:	bc91a626 	.word	0xbc91a626
 801ab80:	54442d18 	.word	0x54442d18
 801ab84:	3fe921fb 	.word	0x3fe921fb
 801ab88:	3fefffff 	.word	0x3fefffff
 801ab8c:	3fdfffff 	.word	0x3fdfffff
 801ab90:	3fef3332 	.word	0x3fef3332

0801ab94 <__ieee754_sqrt>:
 801ab94:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801ab98:	4770      	bx	lr

0801ab9a <fabs>:
 801ab9a:	ec51 0b10 	vmov	r0, r1, d0
 801ab9e:	ee10 2a10 	vmov	r2, s0
 801aba2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801aba6:	ec43 2b10 	vmov	d0, r2, r3
 801abaa:	4770      	bx	lr

0801abac <_init>:
 801abac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abae:	bf00      	nop
 801abb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801abb2:	bc08      	pop	{r3}
 801abb4:	469e      	mov	lr, r3
 801abb6:	4770      	bx	lr

0801abb8 <_fini>:
 801abb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abba:	bf00      	nop
 801abbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801abbe:	bc08      	pop	{r3}
 801abc0:	469e      	mov	lr, r3
 801abc2:	4770      	bx	lr
