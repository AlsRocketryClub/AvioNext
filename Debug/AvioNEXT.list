
AvioNext.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001755c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002dc  0801782c  0801782c  0002782c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017b08  08017b08  00027b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017b10  08017b10  00027b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017b14  08017b14  00027b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000150  24000000  08017b18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000030a4  24000150  08017c68  00030150  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  240031f4  08017c68  000331f4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030150  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003017e  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003517c  00000000  00000000  000301c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 000061fd  00000000  00000000  0006533d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002ab8  00000000  00000000  0006b540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002125  00000000  00000000  0006dff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003dfeb  00000000  00000000  0007011d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003a805  00000000  00000000  000ae108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017d31a  00000000  00000000  000e890d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000bed0  00000000  00000000  00265c28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  00271af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000150 	.word	0x24000150
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08017814 	.word	0x08017814

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000154 	.word	0x24000154
 800030c:	08017814 	.word	0x08017814

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b970 	b.w	80006d8 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	460f      	mov	r7, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0xe2>
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	b143      	cbz	r3, 800043e <__udivmoddi4+0x2e>
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	f1c3 0220 	rsb	r2, r3, #32
 8000434:	409f      	lsls	r7, r3
 8000436:	fa20 f202 	lsr.w	r2, r0, r2
 800043a:	4317      	orrs	r7, r2
 800043c:	409c      	lsls	r4, r3
 800043e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000442:	fa1f f58c 	uxth.w	r5, ip
 8000446:	fbb7 f1fe 	udiv	r1, r7, lr
 800044a:	0c22      	lsrs	r2, r4, #16
 800044c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000450:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000454:	fb01 f005 	mul.w	r0, r1, r5
 8000458:	4290      	cmp	r0, r2
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x62>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f101 37ff 	add.w	r7, r1, #4294967295
 8000464:	f080 811c 	bcs.w	80006a0 <__udivmoddi4+0x290>
 8000468:	4290      	cmp	r0, r2
 800046a:	f240 8119 	bls.w	80006a0 <__udivmoddi4+0x290>
 800046e:	3902      	subs	r1, #2
 8000470:	4462      	add	r2, ip
 8000472:	1a12      	subs	r2, r2, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000482:	fb00 f505 	mul.w	r5, r0, r5
 8000486:	42a5      	cmp	r5, r4
 8000488:	d90a      	bls.n	80004a0 <__udivmoddi4+0x90>
 800048a:	eb1c 0404 	adds.w	r4, ip, r4
 800048e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000492:	f080 8107 	bcs.w	80006a4 <__udivmoddi4+0x294>
 8000496:	42a5      	cmp	r5, r4
 8000498:	f240 8104 	bls.w	80006a4 <__udivmoddi4+0x294>
 800049c:	4464      	add	r4, ip
 800049e:	3802      	subs	r0, #2
 80004a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11e      	cbz	r6, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40dc      	lsrs	r4, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	e9c6 4300 	strd	r4, r3, [r6]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0xbc>
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	f000 80ed 	beq.w	800069a <__udivmoddi4+0x28a>
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 0500 	strd	r0, r5, [r6]
 80004c6:	4608      	mov	r0, r1
 80004c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004cc:	fab3 f183 	clz	r1, r3
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d149      	bne.n	8000568 <__udivmoddi4+0x158>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0xce>
 80004d8:	4282      	cmp	r2, r0
 80004da:	f200 80f8 	bhi.w	80006ce <__udivmoddi4+0x2be>
 80004de:	1a84      	subs	r4, r0, r2
 80004e0:	eb65 0203 	sbc.w	r2, r5, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	4617      	mov	r7, r2
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d0e2      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	e9c6 4700 	strd	r4, r7, [r6]
 80004f0:	e7df      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004f2:	b902      	cbnz	r2, 80004f6 <__udivmoddi4+0xe6>
 80004f4:	deff      	udf	#255	; 0xff
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8090 	bne.w	8000620 <__udivmoddi4+0x210>
 8000500:	1a8a      	subs	r2, r1, r2
 8000502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000506:	fa1f fe8c 	uxth.w	lr, ip
 800050a:	2101      	movs	r1, #1
 800050c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000510:	fb07 2015 	mls	r0, r7, r5, r2
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800051a:	fb0e f005 	mul.w	r0, lr, r5
 800051e:	4290      	cmp	r0, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x124>
 8000522:	eb1c 0202 	adds.w	r2, ip, r2
 8000526:	f105 38ff 	add.w	r8, r5, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x122>
 800052c:	4290      	cmp	r0, r2
 800052e:	f200 80cb 	bhi.w	80006c8 <__udivmoddi4+0x2b8>
 8000532:	4645      	mov	r5, r8
 8000534:	1a12      	subs	r2, r2, r0
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb2 f0f7 	udiv	r0, r2, r7
 800053c:	fb07 2210 	mls	r2, r7, r0, r2
 8000540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000544:	fb0e fe00 	mul.w	lr, lr, r0
 8000548:	45a6      	cmp	lr, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x14e>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f100 32ff 	add.w	r2, r0, #4294967295
 8000554:	d202      	bcs.n	800055c <__udivmoddi4+0x14c>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f200 80bb 	bhi.w	80006d2 <__udivmoddi4+0x2c2>
 800055c:	4610      	mov	r0, r2
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000566:	e79f      	b.n	80004a8 <__udivmoddi4+0x98>
 8000568:	f1c1 0720 	rsb	r7, r1, #32
 800056c:	408b      	lsls	r3, r1
 800056e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000572:	ea4c 0c03 	orr.w	ip, ip, r3
 8000576:	fa05 f401 	lsl.w	r4, r5, r1
 800057a:	fa20 f307 	lsr.w	r3, r0, r7
 800057e:	40fd      	lsrs	r5, r7
 8000580:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000584:	4323      	orrs	r3, r4
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	fa1f fe8c 	uxth.w	lr, ip
 800058e:	fb09 5518 	mls	r5, r9, r8, r5
 8000592:	0c1c      	lsrs	r4, r3, #16
 8000594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000598:	fb08 f50e 	mul.w	r5, r8, lr
 800059c:	42a5      	cmp	r5, r4
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	fa00 f001 	lsl.w	r0, r0, r1
 80005a6:	d90b      	bls.n	80005c0 <__udivmoddi4+0x1b0>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b0:	f080 8088 	bcs.w	80006c4 <__udivmoddi4+0x2b4>
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	f240 8085 	bls.w	80006c4 <__udivmoddi4+0x2b4>
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	4464      	add	r4, ip
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005c8:	fb09 4413 	mls	r4, r9, r3, r4
 80005cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005d4:	45a6      	cmp	lr, r4
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x1da>
 80005d8:	eb1c 0404 	adds.w	r4, ip, r4
 80005dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005e0:	d26c      	bcs.n	80006bc <__udivmoddi4+0x2ac>
 80005e2:	45a6      	cmp	lr, r4
 80005e4:	d96a      	bls.n	80006bc <__udivmoddi4+0x2ac>
 80005e6:	3b02      	subs	r3, #2
 80005e8:	4464      	add	r4, ip
 80005ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ee:	fba3 9502 	umull	r9, r5, r3, r2
 80005f2:	eba4 040e 	sub.w	r4, r4, lr
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	46c8      	mov	r8, r9
 80005fa:	46ae      	mov	lr, r5
 80005fc:	d356      	bcc.n	80006ac <__udivmoddi4+0x29c>
 80005fe:	d053      	beq.n	80006a8 <__udivmoddi4+0x298>
 8000600:	b156      	cbz	r6, 8000618 <__udivmoddi4+0x208>
 8000602:	ebb0 0208 	subs.w	r2, r0, r8
 8000606:	eb64 040e 	sbc.w	r4, r4, lr
 800060a:	fa04 f707 	lsl.w	r7, r4, r7
 800060e:	40ca      	lsrs	r2, r1
 8000610:	40cc      	lsrs	r4, r1
 8000612:	4317      	orrs	r7, r2
 8000614:	e9c6 7400 	strd	r7, r4, [r6]
 8000618:	4618      	mov	r0, r3
 800061a:	2100      	movs	r1, #0
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000620:	f1c3 0120 	rsb	r1, r3, #32
 8000624:	fa02 fc03 	lsl.w	ip, r2, r3
 8000628:	fa20 f201 	lsr.w	r2, r0, r1
 800062c:	fa25 f101 	lsr.w	r1, r5, r1
 8000630:	409d      	lsls	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa1f fe8c 	uxth.w	lr, ip
 800063c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000640:	fb07 1510 	mls	r5, r7, r0, r1
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800064a:	fb00 f50e 	mul.w	r5, r0, lr
 800064e:	428d      	cmp	r5, r1
 8000650:	fa04 f403 	lsl.w	r4, r4, r3
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x258>
 8000656:	eb1c 0101 	adds.w	r1, ip, r1
 800065a:	f100 38ff 	add.w	r8, r0, #4294967295
 800065e:	d22f      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000660:	428d      	cmp	r5, r1
 8000662:	d92d      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000664:	3802      	subs	r0, #2
 8000666:	4461      	add	r1, ip
 8000668:	1b49      	subs	r1, r1, r5
 800066a:	b292      	uxth	r2, r2
 800066c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000670:	fb07 1115 	mls	r1, r7, r5, r1
 8000674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000678:	fb05 f10e 	mul.w	r1, r5, lr
 800067c:	4291      	cmp	r1, r2
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x282>
 8000680:	eb1c 0202 	adds.w	r2, ip, r2
 8000684:	f105 38ff 	add.w	r8, r5, #4294967295
 8000688:	d216      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 800068a:	4291      	cmp	r1, r2
 800068c:	d914      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800068e:	3d02      	subs	r5, #2
 8000690:	4462      	add	r2, ip
 8000692:	1a52      	subs	r2, r2, r1
 8000694:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000698:	e738      	b.n	800050c <__udivmoddi4+0xfc>
 800069a:	4631      	mov	r1, r6
 800069c:	4630      	mov	r0, r6
 800069e:	e708      	b.n	80004b2 <__udivmoddi4+0xa2>
 80006a0:	4639      	mov	r1, r7
 80006a2:	e6e6      	b.n	8000472 <__udivmoddi4+0x62>
 80006a4:	4610      	mov	r0, r2
 80006a6:	e6fb      	b.n	80004a0 <__udivmoddi4+0x90>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	d2a9      	bcs.n	8000600 <__udivmoddi4+0x1f0>
 80006ac:	ebb9 0802 	subs.w	r8, r9, r2
 80006b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006b4:	3b01      	subs	r3, #1
 80006b6:	e7a3      	b.n	8000600 <__udivmoddi4+0x1f0>
 80006b8:	4645      	mov	r5, r8
 80006ba:	e7ea      	b.n	8000692 <__udivmoddi4+0x282>
 80006bc:	462b      	mov	r3, r5
 80006be:	e794      	b.n	80005ea <__udivmoddi4+0x1da>
 80006c0:	4640      	mov	r0, r8
 80006c2:	e7d1      	b.n	8000668 <__udivmoddi4+0x258>
 80006c4:	46d0      	mov	r8, sl
 80006c6:	e77b      	b.n	80005c0 <__udivmoddi4+0x1b0>
 80006c8:	3d02      	subs	r5, #2
 80006ca:	4462      	add	r2, ip
 80006cc:	e732      	b.n	8000534 <__udivmoddi4+0x124>
 80006ce:	4608      	mov	r0, r1
 80006d0:	e70a      	b.n	80004e8 <__udivmoddi4+0xd8>
 80006d2:	4464      	add	r4, ip
 80006d4:	3802      	subs	r0, #2
 80006d6:	e742      	b.n	800055e <__udivmoddi4+0x14e>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HG2_Write_Register+0x48>)
 80006f4:	f007 fc22 	bl	8007f3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80006f8:	1df9      	adds	r1, r7, #7
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	2201      	movs	r2, #1
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <HG2_Write_Register+0x4c>)
 8000700:	f00e f99e 	bl	800ea40 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000704:	1db9      	adds	r1, r7, #6
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <HG2_Write_Register+0x4c>)
 800070c:	f00e f998 	bl	800ea40 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <HG2_Write_Register+0x48>)
 8000718:	f007 fc10 	bl	8007f3c <HAL_GPIO_WritePin>

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	58020c00 	.word	0x58020c00
 8000728:	24000ebc 	.word	0x24000ebc

0800072c <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073c:	b2db      	uxtb	r3, r3
 800073e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <LG2_Read_Register+0x50>)
 8000748:	f007 fbf8 	bl	8007f3c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 800074c:	1df9      	adds	r1, r7, #7
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LG2_Read_Register+0x54>)
 8000754:	f00e f974 	bl	800ea40 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000758:	f107 010f 	add.w	r1, r7, #15
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2201      	movs	r2, #1
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <LG2_Read_Register+0x54>)
 8000762:	f00e fb69 	bl	800ee38 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <LG2_Read_Register+0x50>)
 800076e:	f007 fbe5 	bl	8007f3c <HAL_GPIO_WritePin>

	return reg_value;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58020c00 	.word	0x58020c00
 8000780:	24000ebc 	.word	0x24000ebc

08000784 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <LG2_Write_Register+0x48>)
 800079c:	f007 fbce 	bl	8007f3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2201      	movs	r2, #1
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007a8:	f00e f94a 	bl	800ea40 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007ac:	1db9      	adds	r1, r7, #6
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007b4:	f00e f944 	bl	800ea40 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <LG2_Write_Register+0x48>)
 80007c0:	f007 fbbc 	bl	8007f3c <HAL_GPIO_WritePin>

}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58020c00 	.word	0x58020c00
 80007d0:	24000ebc 	.word	0x24000ebc

080007d4 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007da:	2022      	movs	r0, #34	; 0x22
 80007dc:	f7ff ffa6 	bl	800072c <LG2_Read_Register>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007e4:	2023      	movs	r0, #35	; 0x23
 80007e6:	f7ff ffa1 	bl	800072c <LG2_Read_Register>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 80007fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000808:	eddf 6a08 	vldr	s13, [pc, #32]	; 800082c <LG2_Get_Gyro_X+0x58>
 800080c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000810:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000830 <LG2_Get_Gyro_X+0x5c>
 8000814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000818:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	ee07 3a90 	vmov	s15, r3
}
 8000822:	eeb0 0a67 	vmov.f32	s0, s15
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	46fffe00 	.word	0x46fffe00
 8000830:	437a0000 	.word	0x437a0000

08000834 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 800083a:	2024      	movs	r0, #36	; 0x24
 800083c:	f7ff ff76 	bl	800072c <LG2_Read_Register>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000844:	2025      	movs	r0, #37	; 0x25
 8000846:	f7ff ff71 	bl	800072c <LG2_Read_Register>
 800084a:	4603      	mov	r3, r0
 800084c:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 800085c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000868:	eddf 6a08 	vldr	s13, [pc, #32]	; 800088c <LG2_Get_Gyro_Y+0x58>
 800086c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000870:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000890 <LG2_Get_Gyro_Y+0x5c>
 8000874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000878:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	ee07 3a90 	vmov	s15, r3
}
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	46fffe00 	.word	0x46fffe00
 8000890:	437a0000 	.word	0x437a0000
 8000894:	00000000 	.word	0x00000000

08000898 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f7ff ff44 	bl	800072c <LG2_Read_Register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008a8:	2027      	movs	r0, #39	; 0x27
 80008aa:	f7ff ff3f 	bl	800072c <LG2_Read_Register>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80008f8 <LG2_Get_Gyro_Z+0x60>
 80008d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x68>
 80008dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
}
 80008ee:	eeb0 0a67 	vmov.f32	s0, s15
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	00000000 	.word	0x00000000
 80008fc:	40dfffc0 	.word	0x40dfffc0
 8000900:	00000000 	.word	0x00000000
 8000904:	406f4000 	.word	0x406f4000

08000908 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8000914:	ed97 7a00 	vldr	s14, [r7]
 8000918:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8000988 <setServo+0x80>
 800091c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000920:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800098c <setServo+0x84>
 8000924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000928:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8000990 <setServo+0x88>
 800092c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000930:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000934:	ee17 3a90 	vmov	r3, s15
 8000938:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	3b01      	subs	r3, #1
 800093e:	2b03      	cmp	r3, #3
 8000940:	d81a      	bhi.n	8000978 <setServo+0x70>
 8000942:	a201      	add	r2, pc, #4	; (adr r2, 8000948 <setServo+0x40>)
 8000944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000948:	08000959 	.word	0x08000959
 800094c:	08000961 	.word	0x08000961
 8000950:	08000969 	.word	0x08000969
 8000954:	08000971 	.word	0x08000971
		case 1:
			TIM4->CCR4 = timerVal;
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <setServo+0x8c>)
 800095a:	89fb      	ldrh	r3, [r7, #14]
 800095c:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 800095e:	e00c      	b.n	800097a <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 8000960:	4a0c      	ldr	r2, [pc, #48]	; (8000994 <setServo+0x8c>)
 8000962:	89fb      	ldrh	r3, [r7, #14]
 8000964:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 8000966:	e008      	b.n	800097a <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 8000968:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <setServo+0x8c>)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800096e:	e004      	b.n	800097a <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 8000970:	4a08      	ldr	r2, [pc, #32]	; (8000994 <setServo+0x8c>)
 8000972:	89fb      	ldrh	r3, [r7, #14]
 8000974:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000976:	e000      	b.n	800097a <setServo+0x72>

		default:
			break;
 8000978:	bf00      	nop
	}
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	43340000 	.word	0x43340000
 800098c:	457a0000 	.word	0x457a0000
 8000990:	453b8000 	.word	0x453b8000
 8000994:	40000800 	.word	0x40000800

08000998 <setLEDs>:

void setLEDs(void) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b08e      	sub	sp, #56	; 0x38
 800099c:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 800099e:	2300      	movs	r3, #0
 80009a0:	637b      	str	r3, [r7, #52]	; 0x34
 80009a2:	e181      	b.n	8000ca8 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 80009a4:	4aa1      	ldr	r2, [pc, #644]	; (8000c2c <setLEDs+0x294>)
 80009a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	f200 8177 	bhi.w	8000ca0 <setLEDs+0x308>
 80009b2:	a201      	add	r2, pc, #4	; (adr r2, 80009b8 <setLEDs+0x20>)
 80009b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b8:	080009c9 	.word	0x080009c9
 80009bc:	08000a79 	.word	0x08000a79
 80009c0:	08000b29 	.word	0x08000b29
 80009c4:	08000bd9 	.word	0x08000bd9
		case 0:
			for (int j = 0; j < 3; j++) {
 80009c8:	2300      	movs	r3, #0
 80009ca:	633b      	str	r3, [r7, #48]	; 0x30
 80009cc:	e042      	b.n	8000a54 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80009d2:	e039      	b.n	8000a48 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80009d4:	4996      	ldr	r1, [pc, #600]	; (8000c30 <setLEDs+0x298>)
 80009d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80009d8:	4613      	mov	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	4413      	add	r3, r2
 80009de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009e0:	4413      	add	r3, r2
 80009e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009e6:	2180      	movs	r1, #128	; 0x80
 80009e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ea:	fa41 f202 	asr.w	r2, r1, r2
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d013      	beq.n	8000a1c <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80009f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009f6:	00da      	lsls	r2, r3, #3
 80009f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fa:	18d1      	adds	r1, r2, r3
 80009fc:	4a8b      	ldr	r2, [pc, #556]	; (8000c2c <setLEDs+0x294>)
 80009fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	4413      	add	r3, r2
 8000a04:	685a      	ldr	r2, [r3, #4]
 8000a06:	4613      	mov	r3, r2
 8000a08:	005b      	lsls	r3, r3, #1
 8000a0a:	4413      	add	r3, r2
 8000a0c:	00db      	lsls	r3, r3, #3
 8000a0e:	440b      	add	r3, r1
 8000a10:	3308      	adds	r3, #8
 8000a12:	4a88      	ldr	r2, [pc, #544]	; (8000c34 <setLEDs+0x29c>)
 8000a14:	213c      	movs	r1, #60	; 0x3c
 8000a16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a1a:	e012      	b.n	8000a42 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a1e:	00da      	lsls	r2, r3, #3
 8000a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a22:	18d1      	adds	r1, r2, r3
 8000a24:	4a81      	ldr	r2, [pc, #516]	; (8000c2c <setLEDs+0x294>)
 8000a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	4413      	add	r3, r2
 8000a2c:	685a      	ldr	r2, [r3, #4]
 8000a2e:	4613      	mov	r3, r2
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	4413      	add	r3, r2
 8000a34:	00db      	lsls	r3, r3, #3
 8000a36:	440b      	add	r3, r1
 8000a38:	3308      	adds	r3, #8
 8000a3a:	4a7e      	ldr	r2, [pc, #504]	; (8000c34 <setLEDs+0x29c>)
 8000a3c:	211e      	movs	r1, #30
 8000a3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a44:	3301      	adds	r3, #1
 8000a46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a4a:	2b07      	cmp	r3, #7
 8000a4c:	ddc2      	ble.n	80009d4 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 8000a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a50:	3301      	adds	r3, #1
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
 8000a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a56:	2b02      	cmp	r3, #2
 8000a58:	ddb9      	ble.n	80009ce <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a5a:	2380      	movs	r3, #128	; 0x80
 8000a5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a5e:	e007      	b.n	8000a70 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 8000a60:	4a74      	ldr	r2, [pc, #464]	; (8000c34 <setLEDs+0x29c>)
 8000a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a64:	2100      	movs	r1, #0
 8000a66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 8000a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a72:	2bb1      	cmp	r3, #177	; 0xb1
 8000a74:	ddf4      	ble.n	8000a60 <setLEDs+0xc8>
			}
			break;
 8000a76:	e114      	b.n	8000ca2 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000a7c:	e042      	b.n	8000b04 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
 8000a82:	e039      	b.n	8000af8 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000a84:	496a      	ldr	r1, [pc, #424]	; (8000c30 <setLEDs+0x298>)
 8000a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000a88:	4613      	mov	r3, r2
 8000a8a:	005b      	lsls	r3, r3, #1
 8000a8c:	4413      	add	r3, r2
 8000a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a90:	4413      	add	r3, r2
 8000a92:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	6a3a      	ldr	r2, [r7, #32]
 8000a9a:	fa41 f202 	asr.w	r2, r1, r2
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d013      	beq.n	8000acc <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000aa6:	00da      	lsls	r2, r3, #3
 8000aa8:	6a3b      	ldr	r3, [r7, #32]
 8000aaa:	18d1      	adds	r1, r2, r3
 8000aac:	4a5f      	ldr	r2, [pc, #380]	; (8000c2c <setLEDs+0x294>)
 8000aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ab0:	00db      	lsls	r3, r3, #3
 8000ab2:	4413      	add	r3, r2
 8000ab4:	685a      	ldr	r2, [r3, #4]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	4413      	add	r3, r2
 8000abc:	00db      	lsls	r3, r3, #3
 8000abe:	440b      	add	r3, r1
 8000ac0:	3308      	adds	r3, #8
 8000ac2:	4a5d      	ldr	r2, [pc, #372]	; (8000c38 <setLEDs+0x2a0>)
 8000ac4:	213c      	movs	r1, #60	; 0x3c
 8000ac6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000aca:	e012      	b.n	8000af2 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ace:	00da      	lsls	r2, r3, #3
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	18d1      	adds	r1, r2, r3
 8000ad4:	4a55      	ldr	r2, [pc, #340]	; (8000c2c <setLEDs+0x294>)
 8000ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	4413      	add	r3, r2
 8000adc:	685a      	ldr	r2, [r3, #4]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	00db      	lsls	r3, r3, #3
 8000ae6:	440b      	add	r3, r1
 8000ae8:	3308      	adds	r3, #8
 8000aea:	4a53      	ldr	r2, [pc, #332]	; (8000c38 <setLEDs+0x2a0>)
 8000aec:	211e      	movs	r1, #30
 8000aee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000af2:	6a3b      	ldr	r3, [r7, #32]
 8000af4:	3301      	adds	r3, #1
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	6a3b      	ldr	r3, [r7, #32]
 8000afa:	2b07      	cmp	r3, #7
 8000afc:	ddc2      	ble.n	8000a84 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 8000afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b00:	3301      	adds	r3, #1
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
 8000b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	ddb9      	ble.n	8000a7e <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b0a:	2380      	movs	r3, #128	; 0x80
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e007      	b.n	8000b20 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8000b10:	4a49      	ldr	r2, [pc, #292]	; (8000c38 <setLEDs+0x2a0>)
 8000b12:	69fb      	ldr	r3, [r7, #28]
 8000b14:	2100      	movs	r1, #0
 8000b16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2bb1      	cmp	r3, #177	; 0xb1
 8000b24:	ddf4      	ble.n	8000b10 <setLEDs+0x178>
			}
			break;
 8000b26:	e0bc      	b.n	8000ca2 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	e042      	b.n	8000bb4 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
 8000b32:	e039      	b.n	8000ba8 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000b34:	493e      	ldr	r1, [pc, #248]	; (8000c30 <setLEDs+0x298>)
 8000b36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b38:	4613      	mov	r3, r2
 8000b3a:	005b      	lsls	r3, r3, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	69ba      	ldr	r2, [r7, #24]
 8000b40:	4413      	add	r3, r2
 8000b42:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b46:	2180      	movs	r1, #128	; 0x80
 8000b48:	697a      	ldr	r2, [r7, #20]
 8000b4a:	fa41 f202 	asr.w	r2, r1, r2
 8000b4e:	4013      	ands	r3, r2
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d013      	beq.n	8000b7c <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	00da      	lsls	r2, r3, #3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	18d1      	adds	r1, r2, r3
 8000b5c:	4a33      	ldr	r2, [pc, #204]	; (8000c2c <setLEDs+0x294>)
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	4413      	add	r3, r2
 8000b64:	685a      	ldr	r2, [r3, #4]
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	00db      	lsls	r3, r3, #3
 8000b6e:	440b      	add	r3, r1
 8000b70:	3308      	adds	r3, #8
 8000b72:	4a32      	ldr	r2, [pc, #200]	; (8000c3c <setLEDs+0x2a4>)
 8000b74:	213c      	movs	r1, #60	; 0x3c
 8000b76:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000b7a:	e012      	b.n	8000ba2 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	00da      	lsls	r2, r3, #3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	18d1      	adds	r1, r2, r3
 8000b84:	4a29      	ldr	r2, [pc, #164]	; (8000c2c <setLEDs+0x294>)
 8000b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	4413      	add	r3, r2
 8000b8c:	685a      	ldr	r2, [r3, #4]
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	00db      	lsls	r3, r3, #3
 8000b96:	440b      	add	r3, r1
 8000b98:	3308      	adds	r3, #8
 8000b9a:	4a28      	ldr	r2, [pc, #160]	; (8000c3c <setLEDs+0x2a4>)
 8000b9c:	211e      	movs	r1, #30
 8000b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b07      	cmp	r3, #7
 8000bac:	ddc2      	ble.n	8000b34 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 8000bae:	69bb      	ldr	r3, [r7, #24]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	61bb      	str	r3, [r7, #24]
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	2b02      	cmp	r3, #2
 8000bb8:	ddb9      	ble.n	8000b2e <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bba:	2338      	movs	r3, #56	; 0x38
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	e007      	b.n	8000bd0 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8000bc0:	4a1e      	ldr	r2, [pc, #120]	; (8000c3c <setLEDs+0x2a4>)
 8000bc2:	693b      	ldr	r3, [r7, #16]
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	2b69      	cmp	r3, #105	; 0x69
 8000bd4:	ddf4      	ble.n	8000bc0 <setLEDs+0x228>
			}
			break;
 8000bd6:	e064      	b.n	8000ca2 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	e04e      	b.n	8000c7c <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	e045      	b.n	8000c70 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8000be4:	4912      	ldr	r1, [pc, #72]	; (8000c30 <setLEDs+0x298>)
 8000be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000be8:	4613      	mov	r3, r2
 8000bea:	005b      	lsls	r3, r3, #1
 8000bec:	4413      	add	r3, r2
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bf6:	2180      	movs	r1, #128	; 0x80
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	fa41 f202 	asr.w	r2, r1, r2
 8000bfe:	4013      	ands	r3, r2
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d01f      	beq.n	8000c44 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	00da      	lsls	r2, r3, #3
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	18d1      	adds	r1, r2, r3
 8000c0c:	4a07      	ldr	r2, [pc, #28]	; (8000c2c <setLEDs+0x294>)
 8000c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	4413      	add	r3, r2
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	4613      	mov	r3, r2
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	4413      	add	r3, r2
 8000c1c:	00db      	lsls	r3, r3, #3
 8000c1e:	440b      	add	r3, r1
 8000c20:	3308      	adds	r3, #8
 8000c22:	4a07      	ldr	r2, [pc, #28]	; (8000c40 <setLEDs+0x2a8>)
 8000c24:	213c      	movs	r1, #60	; 0x3c
 8000c26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000c2a:	e01e      	b.n	8000c6a <setLEDs+0x2d2>
 8000c2c:	08017a10 	.word	0x08017a10
 8000c30:	24000a4c 	.word	0x24000a4c
 8000c34:	2400016c 	.word	0x2400016c
 8000c38:	24000434 	.word	0x24000434
 8000c3c:	240006fc 	.word	0x240006fc
 8000c40:	240008a4 	.word	0x240008a4
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	00da      	lsls	r2, r3, #3
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	18d1      	adds	r1, r2, r3
 8000c4c:	4a26      	ldr	r2, [pc, #152]	; (8000ce8 <setLEDs+0x350>)
 8000c4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4413      	add	r3, r2
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	440b      	add	r3, r1
 8000c60:	3308      	adds	r3, #8
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <setLEDs+0x354>)
 8000c64:	211e      	movs	r1, #30
 8000c66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b07      	cmp	r3, #7
 8000c74:	ddb6      	ble.n	8000be4 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	ddad      	ble.n	8000bde <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c82:	2338      	movs	r3, #56	; 0x38
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	e007      	b.n	8000c98 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 8000c88:	4a18      	ldr	r2, [pc, #96]	; (8000cec <setLEDs+0x354>)
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	3301      	adds	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2b69      	cmp	r3, #105	; 0x69
 8000c9c:	ddf4      	ble.n	8000c88 <setLEDs+0x2f0>
			}
			break;
 8000c9e:	e000      	b.n	8000ca2 <setLEDs+0x30a>
		default:
			break;
 8000ca0:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8000ca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8000ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000caa:	2b0d      	cmp	r3, #13
 8000cac:	f77f ae7a 	ble.w	80009a4 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8000cb0:	23b2      	movs	r3, #178	; 0xb2
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <setLEDs+0x358>)
 8000cb4:	210c      	movs	r1, #12
 8000cb6:	480f      	ldr	r0, [pc, #60]	; (8000cf4 <setLEDs+0x35c>)
 8000cb8:	f00e fcaa 	bl	800f610 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 8000cbc:	23b2      	movs	r3, #178	; 0xb2
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <setLEDs+0x360>)
 8000cc0:	2108      	movs	r1, #8
 8000cc2:	480e      	ldr	r0, [pc, #56]	; (8000cfc <setLEDs+0x364>)
 8000cc4:	f00e fca4 	bl	800f610 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8000cc8:	236a      	movs	r3, #106	; 0x6a
 8000cca:	4a0d      	ldr	r2, [pc, #52]	; (8000d00 <setLEDs+0x368>)
 8000ccc:	2104      	movs	r1, #4
 8000cce:	480d      	ldr	r0, [pc, #52]	; (8000d04 <setLEDs+0x36c>)
 8000cd0:	f00e fc9e 	bl	800f610 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8000cd4:	236a      	movs	r3, #106	; 0x6a
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <setLEDs+0x354>)
 8000cd8:	2100      	movs	r1, #0
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <setLEDs+0x36c>)
 8000cdc:	f00e fc98 	bl	800f610 <HAL_TIM_PWM_Start_DMA>

}
 8000ce0:	bf00      	nop
 8000ce2:	3738      	adds	r7, #56	; 0x38
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	08017a10 	.word	0x08017a10
 8000cec:	240008a4 	.word	0x240008a4
 8000cf0:	2400016c 	.word	0x2400016c
 8000cf4:	240010b0 	.word	0x240010b0
 8000cf8:	24000434 	.word	0x24000434
 8000cfc:	24000fcc 	.word	0x24000fcc
 8000d00:	240006fc 	.word	0x240006fc
 8000d04:	24001018 	.word	0x24001018

08000d08 <LoRA_Read_Register>:
	}
}



uint8_t LoRA_Read_Register(uint8_t addr){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d18:	480d      	ldr	r0, [pc, #52]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d1a:	f007 f90f 	bl	8007f3c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d1e:	1df9      	adds	r1, r7, #7
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	2201      	movs	r2, #1
 8000d24:	480b      	ldr	r0, [pc, #44]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d26:	f00d fe8b 	bl	800ea40 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 8000d2a:	f107 010f 	add.w	r1, r7, #15
 8000d2e:	2364      	movs	r3, #100	; 0x64
 8000d30:	2201      	movs	r2, #1
 8000d32:	4808      	ldr	r0, [pc, #32]	; (8000d54 <LoRA_Read_Register+0x4c>)
 8000d34:	f00e f880 	bl	800ee38 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d3e:	4804      	ldr	r0, [pc, #16]	; (8000d50 <LoRA_Read_Register+0x48>)
 8000d40:	f007 f8fc 	bl	8007f3c <HAL_GPIO_WritePin>

	return reg_value;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	58020000 	.word	0x58020000
 8000d54:	24000f44 	.word	0x24000f44

08000d58 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d78:	480c      	ldr	r0, [pc, #48]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d7a:	f007 f8df 	bl	8007f3c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 8000d7e:	1df9      	adds	r1, r7, #7
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	2201      	movs	r2, #1
 8000d84:	480a      	ldr	r0, [pc, #40]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d86:	f00d fe5b 	bl	800ea40 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 8000d8a:	1db9      	adds	r1, r7, #6
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	2201      	movs	r2, #1
 8000d90:	4807      	ldr	r0, [pc, #28]	; (8000db0 <LoRA_Write_Register+0x58>)
 8000d92:	f00d fe55 	bl	800ea40 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000d96:	2201      	movs	r2, #1
 8000d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d9c:	4803      	ldr	r0, [pc, #12]	; (8000dac <LoRA_Write_Register+0x54>)
 8000d9e:	f007 f8cd 	bl	8007f3c <HAL_GPIO_WritePin>

}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	58020000 	.word	0x58020000
 8000db0:	24000f44 	.word	0x24000f44

08000db4 <LoRA_sleep>:


void LoRA_sleep(void){
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 8000db8:	2180      	movs	r1, #128	; 0x80
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f7ff ffcc 	bl	8000d58 <LoRA_Write_Register>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 8000dc4:	b5b0      	push	{r4, r5, r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8000dcc:	6879      	ldr	r1, [r7, #4]
 8000dce:	17c8      	asrs	r0, r1, #31
 8000dd0:	460a      	mov	r2, r1
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	1355      	asrs	r5, r2, #13
 8000dd6:	04d4      	lsls	r4, r2, #19
 8000dd8:	4a18      	ldr	r2, [pc, #96]	; (8000e3c <LoRA_set_frequency+0x78>)
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	4620      	mov	r0, r4
 8000de0:	4629      	mov	r1, r5
 8000de2:	f7ff fafd 	bl	80003e0 <__aeabi_uldivmod>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 8000dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000df2:	f04f 0200 	mov.w	r2, #0
 8000df6:	f04f 0300 	mov.w	r3, #0
 8000dfa:	0c02      	lsrs	r2, r0, #16
 8000dfc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e00:	0c0b      	lsrs	r3, r1, #16
 8000e02:	b2d3      	uxtb	r3, r2
 8000e04:	4619      	mov	r1, r3
 8000e06:	2006      	movs	r0, #6
 8000e08:	f7ff ffa6 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000e0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000e10:	f04f 0200 	mov.w	r2, #0
 8000e14:	f04f 0300 	mov.w	r3, #0
 8000e18:	0a02      	lsrs	r2, r0, #8
 8000e1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000e1e:	0a0b      	lsrs	r3, r1, #8
 8000e20:	b2d3      	uxtb	r3, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	2007      	movs	r0, #7
 8000e26:	f7ff ff97 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000e2a:	7a3b      	ldrb	r3, [r7, #8]
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	2008      	movs	r0, #8
 8000e30:	f7ff ff92 	bl	8000d58 <LoRA_Write_Register>
}
 8000e34:	bf00      	nop
 8000e36:	3710      	adds	r7, #16
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3c:	01e84800 	.word	0x01e84800

08000e40 <LoRA_idle>:

void LoRA_idle(){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000e44:	2181      	movs	r1, #129	; 0x81
 8000e46:	2001      	movs	r0, #1
 8000e48:	f7ff ff86 	bl	8000d58 <LoRA_Write_Register>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000e5a:	231b      	movs	r3, #27
 8000e5c:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	2b78      	cmp	r3, #120	; 0x78
 8000e62:	d809      	bhi.n	8000e78 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	3b2d      	subs	r3, #45	; 0x2d
 8000e68:	4a11      	ldr	r2, [pc, #68]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e6e:	1052      	asrs	r2, r2, #1
 8000e70:	17db      	asrs	r3, r3, #31
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	73fb      	strb	r3, [r7, #15]
 8000e76:	e00b      	b.n	8000e90 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	2bf0      	cmp	r3, #240	; 0xf0
 8000e7c:	d808      	bhi.n	8000e90 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	331e      	adds	r3, #30
 8000e82:	4a0b      	ldr	r2, [pc, #44]	; (8000eb0 <LoRA_setOCP+0x60>)
 8000e84:	fb82 1203 	smull	r1, r2, r2, r3
 8000e88:	1092      	asrs	r2, r2, #2
 8000e8a:	17db      	asrs	r3, r3, #31
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000e90:	7bfb      	ldrb	r3, [r7, #15]
 8000e92:	f003 031f 	and.w	r3, r3, #31
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	f043 0320 	orr.w	r3, r3, #32
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	200b      	movs	r0, #11
 8000ea2:	f7ff ff59 	bl	8000d58 <LoRA_Write_Register>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	66666667 	.word	0x66666667

08000eb4 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2b11      	cmp	r3, #17
 8000ec0:	dd0f      	ble.n	8000ee2 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b14      	cmp	r3, #20
 8000ec6:	dd01      	ble.n	8000ecc <LoRA_setTxPower+0x18>
        level = 20;
 8000ec8:	2314      	movs	r3, #20
 8000eca:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b03      	subs	r3, #3
 8000ed0:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000ed2:	2187      	movs	r1, #135	; 0x87
 8000ed4:	204d      	movs	r0, #77	; 0x4d
 8000ed6:	f7ff ff3f 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000eda:	208c      	movs	r0, #140	; 0x8c
 8000edc:	f7ff ffb8 	bl	8000e50 <LoRA_setOCP>
 8000ee0:	e00b      	b.n	8000efa <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	dc01      	bgt.n	8000eec <LoRA_setTxPower+0x38>
        level = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000eec:	2184      	movs	r1, #132	; 0x84
 8000eee:	204d      	movs	r0, #77	; 0x4d
 8000ef0:	f7ff ff32 	bl	8000d58 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000ef4:	2064      	movs	r0, #100	; 0x64
 8000ef6:	f7ff ffab 	bl	8000e50 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	3b02      	subs	r3, #2
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	b25b      	sxtb	r3, r3
 8000f04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f08:	b25b      	sxtb	r3, r3
 8000f0a:	b2db      	uxtb	r3, r3
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	2009      	movs	r0, #9
 8000f10:	f7ff ff22 	bl	8000d58 <LoRA_Write_Register>
}
 8000f14:	bf00      	nop
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000f20:	201d      	movs	r0, #29
 8000f22:	f7ff fef1 	bl	8000d08 <LoRA_Read_Register>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	4619      	mov	r1, r3
 8000f30:	201d      	movs	r0, #29
 8000f32:	f7ff ff11 	bl	8000d58 <LoRA_Write_Register>
}
 8000f36:	bf00      	nop
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <LoRA_begin>:

void LoRA_begin(long frequency){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b09c      	sub	sp, #112	; 0x70
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2101      	movs	r1, #1
 8000f48:	4822      	ldr	r0, [pc, #136]	; (8000fd4 <LoRA_begin+0x98>)
 8000f4a:	f006 fff7 	bl	8007f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f54:	4820      	ldr	r0, [pc, #128]	; (8000fd8 <LoRA_begin+0x9c>)
 8000f56:	f006 fff1 	bl	8007f3c <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000f5a:	2042      	movs	r0, #66	; 0x42
 8000f5c:	f7ff fed4 	bl	8000d08 <LoRA_Read_Register>
 8000f60:	4603      	mov	r3, r0
 8000f62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000f66:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	491b      	ldr	r1, [pc, #108]	; (8000fdc <LoRA_begin+0xa0>)
 8000f70:	4618      	mov	r0, r3
 8000f72:	f015 ffa3 	bl	8016ebc <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff f9d2 	bl	8000324 <strlen>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f107 0308 	add.w	r3, r7, #8
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f015 fb43 	bl	8016614 <CDC_Transmit_HS>

	LoRA_sleep();
 8000f8e:	f7ff ff11 	bl	8000db4 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000f92:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <LoRA_begin+0xa4>)
 8000f94:	f7ff ff16 	bl	8000dc4 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000f98:	2100      	movs	r1, #0
 8000f9a:	200f      	movs	r0, #15
 8000f9c:	f7ff fedc 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200e      	movs	r0, #14
 8000fa4:	f7ff fed8 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000fa8:	200c      	movs	r0, #12
 8000faa:	f7ff fead 	bl	8000d08 <LoRA_Read_Register>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	f043 0303 	orr.w	r3, r3, #3
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	200c      	movs	r0, #12
 8000fba:	f7ff fecd 	bl	8000d58 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000fbe:	2104      	movs	r1, #4
 8000fc0:	2026      	movs	r0, #38	; 0x26
 8000fc2:	f7ff fec9 	bl	8000d58 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000fc6:	2011      	movs	r0, #17
 8000fc8:	f7ff ff74 	bl	8000eb4 <LoRA_setTxPower>

}
 8000fcc:	bf00      	nop
 8000fce:	3770      	adds	r7, #112	; 0x70
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	58020c00 	.word	0x58020c00
 8000fd8:	58020000 	.word	0x58020000
 8000fdc:	0801782c 	.word	0x0801782c
 8000fe0:	33bca100 	.word	0x33bca100

08000fe4 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000fe8:	f7ff ff98 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000fec:	2100      	movs	r1, #0
 8000fee:	200d      	movs	r0, #13
 8000ff0:	f7ff feb2 	bl	8000d58 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2022      	movs	r0, #34	; 0x22
 8000ff8:	f7ff feae 	bl	8000d58 <LoRA_Write_Register>
}
 8000ffc:	bf00      	nop
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <LoRA_endPacket>:

void LoRA_endPacket(){
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8001006:	2183      	movs	r1, #131	; 0x83
 8001008:	2001      	movs	r0, #1
 800100a:	f7ff fea5 	bl	8000d58 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 800100e:	bf00      	nop
 8001010:	2012      	movs	r0, #18
 8001012:	f7ff fe79 	bl	8000d08 <LoRA_Read_Register>
 8001016:	4603      	mov	r3, r0
 8001018:	f003 0308 	and.w	r3, r3, #8
 800101c:	2b00      	cmp	r3, #0
 800101e:	d0f7      	beq.n	8001010 <LoRA_endPacket+0x10>

	}

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8001020:	2108      	movs	r1, #8
 8001022:	2012      	movs	r0, #18
 8001024:	f7ff fe98 	bl	8000d58 <LoRA_Write_Register>

	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8001028:	2012      	movs	r0, #18
 800102a:	f7ff fe6d 	bl	8000d08 <LoRA_Read_Register>
 800102e:	4603      	mov	r3, r0
 8001030:	607b      	str	r3, [r7, #4]

	LoRA_explicit_header_mode();
 8001032:	f7ff ff73 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	b2db      	uxtb	r3, r3
 800103a:	4619      	mov	r1, r3
 800103c:	2012      	movs	r0, #18
 800103e:	f7ff fe8b 	bl	8000d58 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001048:	2b00      	cmp	r3, #0
 800104a:	d00f      	beq.n	800106c <LoRA_endPacket+0x6c>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	f003 0320 	and.w	r3, r3, #32
 8001052:	2b00      	cmp	r3, #0
 8001054:	d10a      	bne.n	800106c <LoRA_endPacket+0x6c>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8001056:	2010      	movs	r0, #16
 8001058:	f7ff fe56 	bl	8000d08 <LoRA_Read_Register>
 800105c:	4603      	mov	r3, r0
 800105e:	4619      	mov	r1, r3
 8001060:	200d      	movs	r0, #13
 8001062:	f7ff fe79 	bl	8000d58 <LoRA_Write_Register>
		LoRA_idle();
 8001066:	f7ff feeb 	bl	8000e40 <LoRA_idle>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
	}
}
 800106a:	e00d      	b.n	8001088 <LoRA_endPacket+0x88>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 800106c:	2001      	movs	r0, #1
 800106e:	f7ff fe4b 	bl	8000d08 <LoRA_Read_Register>
 8001072:	4603      	mov	r3, r0
 8001074:	2b86      	cmp	r3, #134	; 0x86
 8001076:	d007      	beq.n	8001088 <LoRA_endPacket+0x88>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8001078:	2100      	movs	r1, #0
 800107a:	200d      	movs	r0, #13
 800107c:	f7ff fe6c 	bl	8000d58 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 8001080:	2186      	movs	r1, #134	; 0x86
 8001082:	2001      	movs	r0, #1
 8001084:	f7ff fe68 	bl	8000d58 <LoRA_Write_Register>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}

08001090 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 800109a:	2012      	movs	r0, #18
 800109c:	f7ff fe34 	bl	8000d08 <LoRA_Read_Register>
 80010a0:	4603      	mov	r3, r0
 80010a2:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 80010a4:	f7ff ff3a 	bl	8000f1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	4619      	mov	r1, r3
 80010ae:	2012      	movs	r0, #18
 80010b0:	f7ff fe52 	bl	8000d58 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d014      	beq.n	80010e8 <LoRA_parsePacket+0x58>
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	f003 0320 	and.w	r3, r3, #32
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d10f      	bne.n	80010e8 <LoRA_parsePacket+0x58>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 80010c8:	2013      	movs	r0, #19
 80010ca:	f7ff fe1d 	bl	8000d08 <LoRA_Read_Register>
 80010ce:	4603      	mov	r3, r0
 80010d0:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 80010d2:	2010      	movs	r0, #16
 80010d4:	f7ff fe18 	bl	8000d08 <LoRA_Read_Register>
 80010d8:	4603      	mov	r3, r0
 80010da:	4619      	mov	r1, r3
 80010dc:	200d      	movs	r0, #13
 80010de:	f7ff fe3b 	bl	8000d58 <LoRA_Write_Register>
		LoRA_idle();
 80010e2:	f7ff fead 	bl	8000e40 <LoRA_idle>
 80010e6:	e00d      	b.n	8001104 <LoRA_parsePacket+0x74>
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_SINGLE)){
 80010e8:	2001      	movs	r0, #1
 80010ea:	f7ff fe0d 	bl	8000d08 <LoRA_Read_Register>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b86      	cmp	r3, #134	; 0x86
 80010f2:	d007      	beq.n	8001104 <LoRA_parsePacket+0x74>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 80010f4:	2100      	movs	r1, #0
 80010f6:	200d      	movs	r0, #13
 80010f8:	f7ff fe2e 	bl	8000d58 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_SINGLE);
 80010fc:	2186      	movs	r1, #134	; 0x86
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff fe2a 	bl	8000d58 <LoRA_Write_Register>
	}
	return packetLenght;
 8001104:	687b      	ldr	r3, [r7, #4]

}
 8001106:	4618      	mov	r0, r3
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 800110e:	b580      	push	{r7, lr}
 8001110:	b084      	sub	sp, #16
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
    LoRA_beginPacket();
 8001116:	f7ff ff65 	bl	8000fe4 <LoRA_beginPacket>
    for(int i = 0; i < strlen(data); i++){
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	e00a      	b.n	8001136 <LoRA_sendPacket+0x28>
    	LoRA_Write_Register(REG_FIFO, data[i]);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	2000      	movs	r0, #0
 800112c:	f7ff fe14 	bl	8000d58 <LoRA_Write_Register>
    for(int i = 0; i < strlen(data); i++){
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	3301      	adds	r3, #1
 8001134:	60fb      	str	r3, [r7, #12]
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff f8f4 	bl	8000324 <strlen>
 800113c:	4602      	mov	r2, r0
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8ed      	bhi.n	8001120 <LoRA_sendPacket+0x12>
    }
    LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff f8ed 	bl	8000324 <strlen>
 800114a:	4603      	mov	r3, r0
 800114c:	b2db      	uxtb	r3, r3
 800114e:	4619      	mov	r1, r3
 8001150:	2022      	movs	r0, #34	; 0x22
 8001152:	f7ff fe01 	bl	8000d58 <LoRA_Write_Register>
    LoRA_endPacket();
 8001156:	f7ff ff53 	bl	8001000 <LoRA_endPacket>
}
 800115a:	bf00      	nop
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 800116c:	2200      	movs	r2, #0
 800116e:	2102      	movs	r1, #2
 8001170:	4827      	ldr	r0, [pc, #156]	; (8001210 <disarm+0xac>)
 8001172:	f006 fee3 	bl	8007f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2104      	movs	r1, #4
 800117a:	4825      	ldr	r0, [pc, #148]	; (8001210 <disarm+0xac>)
 800117c:	f006 fede 	bl	8007f3c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2102      	movs	r1, #2
 8001184:	4823      	ldr	r0, [pc, #140]	; (8001214 <disarm+0xb0>)
 8001186:	f006 fed9 	bl	8007f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 800118a:	2200      	movs	r2, #0
 800118c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001190:	4821      	ldr	r0, [pc, #132]	; (8001218 <disarm+0xb4>)
 8001192:	f006 fed3 	bl	8007f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800119c:	481e      	ldr	r0, [pc, #120]	; (8001218 <disarm+0xb4>)
 800119e:	f006 fecd 	bl	8007f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a8:	481b      	ldr	r0, [pc, #108]	; (8001218 <disarm+0xb4>)
 80011aa:	f006 fec7 	bl	8007f3c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2102      	movs	r1, #2
 80011b2:	481a      	ldr	r0, [pc, #104]	; (800121c <disarm+0xb8>)
 80011b4:	f006 fec2 	bl	8007f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 80011b8:	2200      	movs	r2, #0
 80011ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011be:	4818      	ldr	r0, [pc, #96]	; (8001220 <disarm+0xbc>)
 80011c0:	f006 febc 	bl	8007f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ca:	4815      	ldr	r0, [pc, #84]	; (8001220 <disarm+0xbc>)
 80011cc:	f006 feb6 	bl	8007f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011d6:	4812      	ldr	r0, [pc, #72]	; (8001220 <disarm+0xbc>)
 80011d8:	f006 feb0 	bl	8007f3c <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <disarm+0xc0>)
 80011de:	22ff      	movs	r2, #255	; 0xff
 80011e0:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <disarm+0xc0>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <disarm+0xc0>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 80011ee:	f7ff fbd3 	bl	8000998 <setLEDs>

  strcpy(state,"DISARMED");
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <disarm+0xc4>)
 80011f6:	461a      	mov	r2, r3
 80011f8:	460b      	mov	r3, r1
 80011fa:	cb03      	ldmia	r3!, {r0, r1}
 80011fc:	6010      	str	r0, [r2, #0]
 80011fe:	6051      	str	r1, [r2, #4]
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	7213      	strb	r3, [r2, #8]
  return 0;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	58020000 	.word	0x58020000
 8001214:	58020400 	.word	0x58020400
 8001218:	58021400 	.word	0x58021400
 800121c:	58021800 	.word	0x58021800
 8001220:	58021000 	.word	0x58021000
 8001224:	24000a4c 	.word	0x24000a4c
 8001228:	08017830 	.word	0x08017830

0800122c <arm>:

int arm(char* state)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 1);
 8001234:	2201      	movs	r2, #1
 8001236:	2102      	movs	r1, #2
 8001238:	480e      	ldr	r0, [pc, #56]	; (8001274 <arm+0x48>)
 800123a:	f006 fe7f 	bl	8007f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 1);
 800123e:	2201      	movs	r2, #1
 8001240:	2104      	movs	r1, #4
 8001242:	480c      	ldr	r0, [pc, #48]	; (8001274 <arm+0x48>)
 8001244:	f006 fe7a 	bl	8007f3c <HAL_GPIO_WritePin>


  strcpy(state,"ARMED");
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a0b      	ldr	r2, [pc, #44]	; (8001278 <arm+0x4c>)
 800124c:	6810      	ldr	r0, [r2, #0]
 800124e:	6018      	str	r0, [r3, #0]
 8001250:	8892      	ldrh	r2, [r2, #4]
 8001252:	809a      	strh	r2, [r3, #4]
  LED_Color_Data[7][0] = 0;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <arm+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 255;
 800125a:	4b08      	ldr	r3, [pc, #32]	; (800127c <arm+0x50>)
 800125c:	22ff      	movs	r2, #255	; 0xff
 800125e:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <arm+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 8001266:	f7ff fb97 	bl	8000998 <setLEDs>
  return 0;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	58020000 	.word	0x58020000
 8001278:	0801783c 	.word	0x0801783c
 800127c:	24000a4c 	.word	0x24000a4c

08001280 <recv_packet>:

int recv_packet(char* LoRA_data, int max_length)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 800128a:	f7ff ff01 	bl	8001090 <LoRA_parsePacket>
 800128e:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8001290:	683a      	ldr	r2, [r7, #0]
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	429a      	cmp	r2, r3
 8001296:	dc01      	bgt.n	800129c <recv_packet+0x1c>
  {
    return 0;
 8001298:	2300      	movs	r3, #0
 800129a:	e01c      	b.n	80012d6 <recv_packet+0x56>
  }
  if(packet_length){
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d018      	beq.n	80012d4 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	e00a      	b.n	80012be <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	687a      	ldr	r2, [r7, #4]
 80012ac:	18d4      	adds	r4, r2, r3
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff fd2a 	bl	8000d08 <LoRA_Read_Register>
 80012b4:	4603      	mov	r3, r0
 80012b6:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3301      	adds	r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	dbf0      	blt.n	80012a8 <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4413      	add	r3, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	701a      	strb	r2, [r3, #0]
    return packet_length;
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	e000      	b.n	80012d6 <recv_packet+0x56>
  }
  else{
    return 0;
 80012d4:	2300      	movs	r3, #0
  }
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd90      	pop	{r4, r7, pc}

080012de <reliable_send_packet>:

void reliable_send_packet(char* LoRA_data)
{
 80012de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	466b      	mov	r3, sp
 80012ea:	461e      	mov	r6, r3
  uint16_t length = strlen(LoRA_data)+1; //+1 for the \0
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff f819 	bl	8000324 <strlen>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b29b      	uxth	r3, r3
 80012f6:	3301      	adds	r3, #1
 80012f8:	82fb      	strh	r3, [r7, #22]
  char acknowledge[length]; 
 80012fa:	8af9      	ldrh	r1, [r7, #22]
 80012fc:	460b      	mov	r3, r1
 80012fe:	3b01      	subs	r3, #1
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	b28b      	uxth	r3, r1
 8001304:	2200      	movs	r2, #0
 8001306:	4698      	mov	r8, r3
 8001308:	4691      	mov	r9, r2
 800130a:	f04f 0200 	mov.w	r2, #0
 800130e:	f04f 0300 	mov.w	r3, #0
 8001312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800131a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800131e:	b28b      	uxth	r3, r1
 8001320:	2200      	movs	r2, #0
 8001322:	461c      	mov	r4, r3
 8001324:	4615      	mov	r5, r2
 8001326:	f04f 0200 	mov.w	r2, #0
 800132a:	f04f 0300 	mov.w	r3, #0
 800132e:	00eb      	lsls	r3, r5, #3
 8001330:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001334:	00e2      	lsls	r2, r4, #3
 8001336:	460b      	mov	r3, r1
 8001338:	3307      	adds	r3, #7
 800133a:	08db      	lsrs	r3, r3, #3
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	ebad 0d03 	sub.w	sp, sp, r3
 8001342:	466b      	mov	r3, sp
 8001344:	3300      	adds	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
  LoRA_sendPacket(LoRA_data);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f7ff fee0 	bl	800110e <LoRA_sendPacket>
  while(1)
  {
    
    if(recv_packet(acknowledge, length))
 800134e:	8afb      	ldrh	r3, [r7, #22]
 8001350:	4619      	mov	r1, r3
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f7ff ff94 	bl	8001280 <recv_packet>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f7      	beq.n	800134e <reliable_send_packet+0x70>
    {
      //cehck crc
      if(strcmp(acknowledge, LoRA_data) != 0)
 800135e:	6879      	ldr	r1, [r7, #4]
 8001360:	68f8      	ldr	r0, [r7, #12]
 8001362:	f7fe ffd5 	bl	8000310 <strcmp>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <reliable_send_packet+0x96>
      {
        LoRA_sendPacket(LoRA_data);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff fece 	bl	800110e <LoRA_sendPacket>
    if(recv_packet(acknowledge, length))
 8001372:	e7ec      	b.n	800134e <reliable_send_packet+0x70>
      }
      else
      {
        break;
 8001374:	bf00      	nop
 8001376:	46b5      	mov	sp, r6
      }
    }

    //delay
  }
}
 8001378:	bf00      	nop
 800137a:	371c      	adds	r7, #28
 800137c:	46bd      	mov	sp, r7
 800137e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001382:	0000      	movs	r0, r0
 8001384:	0000      	movs	r0, r0
	...

08001388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001388:	b5b0      	push	{r4, r5, r7, lr}
 800138a:	f5ad 6d96 	sub.w	sp, sp, #1200	; 0x4b0
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001390:	4bd5      	ldr	r3, [pc, #852]	; (80016e8 <main+0x360>)
 8001392:	f207 443c 	addw	r4, r7, #1084	; 0x43c
 8001396:	461d      	mov	r5, r3
 8001398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800139a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800139c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80013a0:	c403      	stmia	r4!, {r0, r1}
 80013a2:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a4:	f002 fa86 	bl	80038b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a8:	f000 fb56 	bl	8001a58 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80013ac:	f000 fbd0 	bl	8001b50 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013b0:	f001 f934 	bl	800261c <MX_GPIO_Init>
  MX_DMA_Init();
 80013b4:	f001 f8d2 	bl	800255c <MX_DMA_Init>
  MX_SPI3_Init();
 80013b8:	f000 fe50 	bl	800205c <MX_SPI3_Init>
  MX_FDCAN3_Init();
 80013bc:	f000 fce0 	bl	8001d80 <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 80013c0:	f001 f880 	bl	80024c4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80013c4:	f000 fbf6 	bl	8001bb4 <MX_ADC1_Init>
  MX_TIM4_Init();
 80013c8:	f000 ff5a 	bl	8002280 <MX_TIM4_Init>
  MX_ADC3_Init();
 80013cc:	f000 fc6a 	bl	8001ca4 <MX_ADC3_Init>
  MX_SPI2_Init();
 80013d0:	f000 fdee 	bl	8001fb0 <MX_SPI2_Init>
  MX_I2C2_Init();
 80013d4:	f000 fd38 	bl	8001e48 <MX_I2C2_Init>
  MX_TIM2_Init();
 80013d8:	f000 fe96 	bl	8002108 <MX_TIM2_Init>
  MX_TIM5_Init();
 80013dc:	f000 ffcc 	bl	8002378 <MX_TIM5_Init>
  MX_TIM3_Init();
 80013e0:	f000 feea 	bl	80021b8 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 80013e4:	f015 f856 	bl	8016494 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80013e8:	f000 fd8c 	bl	8001f04 <MX_SPI1_Init>
  MX_UART4_Init();
 80013ec:	f001 f81e 	bl	800242c <MX_UART4_Init>
  MX_FATFS_Init();
 80013f0:	f012 fde4 	bl	8013fbc <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 80013f4:	f000 fd68 	bl	8001ec8 <MX_SDMMC2_SD_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 80013f8:	2332      	movs	r3, #50	; 0x32
 80013fa:	f8c7 3490 	str.w	r3, [r7, #1168]	; 0x490
	const double SPEED = 2.0/2000;
 80013fe:	a3b8      	add	r3, pc, #736	; (adr r3, 80016e0 <main+0x358>)
 8001400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001404:	f507 6191 	add.w	r1, r7, #1160	; 0x488
 8001408:	e9c1 2300 	strd	r2, r3, [r1]
	const double r_offset = 0;
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	f507 6190 	add.w	r1, r7, #1152	; 0x480
 8001418:	e9c1 2300 	strd	r2, r3, [r1]
	const double g_offset = 1;
 800141c:	f04f 0200 	mov.w	r2, #0
 8001420:	4bb2      	ldr	r3, [pc, #712]	; (80016ec <main+0x364>)
 8001422:	f507 618f 	add.w	r1, r7, #1144	; 0x478
 8001426:	e9c1 2300 	strd	r2, r3, [r1]
	const double b_offset = 2;
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001432:	f507 618e 	add.w	r1, r7, #1136	; 0x470
 8001436:	e9c1 2300 	strd	r2, r3, [r1]

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 800143a:	213c      	movs	r1, #60	; 0x3c
 800143c:	2010      	movs	r0, #16
 800143e:	f7ff f9a1 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 8001442:	2130      	movs	r1, #48	; 0x30
 8001444:	2011      	movs	r0, #17
 8001446:	f7ff f99d 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 800144a:	2104      	movs	r1, #4
 800144c:	2013      	movs	r0, #19
 800144e:	f7ff f999 	bl	8000784 <LG2_Write_Register>

	HAL_Delay(3000);
 8001452:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001456:	f002 fabf 	bl	80039d8 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 800145a:	21bf      	movs	r1, #191	; 0xbf
 800145c:	201c      	movs	r0, #28
 800145e:	f7ff f93d 	bl	80006dc <HG2_Write_Register>
	HAL_Delay(2);
 8001462:	2002      	movs	r0, #2
 8001464:	f002 fab8 	bl	80039d8 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8001468:	2158      	movs	r1, #88	; 0x58
 800146a:	201b      	movs	r0, #27
 800146c:	f7ff f936 	bl	80006dc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8001470:	21d8      	movs	r1, #216	; 0xd8
 8001472:	201b      	movs	r0, #27
 8001474:	f7ff f932 	bl	80006dc <HG2_Write_Register>

	float rotZ = 0;
 8001478:	f04f 0300 	mov.w	r3, #0
 800147c:	f207 426c 	addw	r2, r7, #1132	; 0x46c
 8001480:	6013      	str	r3, [r2, #0]
	uint32_t lastTime = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac

	float calOmegaX = 0;
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	f507 6295 	add.w	r2, r7, #1192	; 0x4a8
 8001490:	6013      	str	r3, [r2, #0]
	float calOmegaY = 0;
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	f207 42a4 	addw	r2, r7, #1188	; 0x4a4
 800149a:	6013      	str	r3, [r2, #0]
	float calOmegaZ = 0;
 800149c:	f04f 0300 	mov.w	r3, #0
 80014a0:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 80014a4:	6013      	str	r3, [r2, #0]
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 80014a6:	2300      	movs	r3, #0
 80014a8:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 80014ac:	e02e      	b.n	800150c <main+0x184>
		calOmegaX += LG2_Get_Gyro_X();
 80014ae:	f7ff f991 	bl	80007d4 <LG2_Get_Gyro_X>
 80014b2:	eeb0 7a40 	vmov.f32	s14, s0
 80014b6:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80014ba:	edd3 7a00 	vldr	s15, [r3]
 80014be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014c2:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80014c6:	edc3 7a00 	vstr	s15, [r3]
		calOmegaY += LG2_Get_Gyro_Y();
 80014ca:	f7ff f9b3 	bl	8000834 <LG2_Get_Gyro_Y>
 80014ce:	eeb0 7a40 	vmov.f32	s14, s0
 80014d2:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014de:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 80014e2:	edc3 7a00 	vstr	s15, [r3]
		calOmegaZ += LG2_Get_Gyro_Z();
 80014e6:	f7ff f9d7 	bl	8000898 <LG2_Get_Gyro_Z>
 80014ea:	eeb0 7a40 	vmov.f32	s14, s0
 80014ee:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80014f2:	edd3 7a00 	vldr	s15, [r3]
 80014f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80014fa:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80014fe:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < 500; i++){
 8001502:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001506:	3301      	adds	r3, #1
 8001508:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 800150c:	f8d7 349c 	ldr.w	r3, [r7, #1180]	; 0x49c
 8001510:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001514:	dbcb      	blt.n	80014ae <main+0x126>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 8001516:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800151a:	ed93 7a00 	vldr	s14, [r3]
 800151e:	eddf 6a74 	vldr	s13, [pc, #464]	; 80016f0 <main+0x368>
 8001522:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001526:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 800152a:	edc3 7a00 	vstr	s15, [r3]
	calOmegaY /= 500;
 800152e:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 8001532:	ed93 7a00 	vldr	s14, [r3]
 8001536:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80016f0 <main+0x368>
 800153a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153e:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 8001542:	edc3 7a00 	vstr	s15, [r3]
	calOmegaZ /= 500;
 8001546:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800154a:	ed93 7a00 	vldr	s14, [r3]
 800154e:	eddf 6a68 	vldr	s13, [pc, #416]	; 80016f0 <main+0x368>
 8001552:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001556:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800155a:	edc3 7a00 	vstr	s15, [r3]

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800155e:	2201      	movs	r2, #1
 8001560:	2101      	movs	r1, #1
 8001562:	4864      	ldr	r0, [pc, #400]	; (80016f4 <main+0x36c>)
 8001564:	f006 fcea 	bl	8007f3c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001568:	20c8      	movs	r0, #200	; 0xc8
 800156a:	f002 fa35 	bl	80039d8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2101      	movs	r1, #1
 8001572:	4860      	ldr	r0, [pc, #384]	; (80016f4 <main+0x36c>)
 8001574:	f006 fce2 	bl	8007f3c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001578:	20c8      	movs	r0, #200	; 0xc8
 800157a:	f002 fa2d 	bl	80039d8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 800157e:	2201      	movs	r2, #1
 8001580:	2101      	movs	r1, #1
 8001582:	485c      	ldr	r0, [pc, #368]	; (80016f4 <main+0x36c>)
 8001584:	f006 fcda 	bl	8007f3c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001588:	20c8      	movs	r0, #200	; 0xc8
 800158a:	f002 fa25 	bl	80039d8 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 800158e:	2201      	movs	r2, #1
 8001590:	2104      	movs	r1, #4
 8001592:	4859      	ldr	r0, [pc, #356]	; (80016f8 <main+0x370>)
 8001594:	f006 fcd2 	bl	8007f3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001598:	2201      	movs	r2, #1
 800159a:	2108      	movs	r1, #8
 800159c:	4856      	ldr	r0, [pc, #344]	; (80016f8 <main+0x370>)
 800159e:	f006 fccd 	bl	8007f3c <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80015a2:	2100      	movs	r1, #0
 80015a4:	4855      	ldr	r0, [pc, #340]	; (80016fc <main+0x374>)
 80015a6:	f00d ff17 	bl	800f3d8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80015aa:	2104      	movs	r1, #4
 80015ac:	4853      	ldr	r0, [pc, #332]	; (80016fc <main+0x374>)
 80015ae:	f00d ff13 	bl	800f3d8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80015b2:	2108      	movs	r1, #8
 80015b4:	4851      	ldr	r0, [pc, #324]	; (80016fc <main+0x374>)
 80015b6:	f00d ff0f 	bl	800f3d8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80015ba:	210c      	movs	r1, #12
 80015bc:	484f      	ldr	r0, [pc, #316]	; (80016fc <main+0x374>)
 80015be:	f00d ff0b 	bl	800f3d8 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 80015c2:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8001700 <main+0x378>
 80015c6:	2001      	movs	r0, #1
 80015c8:	f7ff f99e 	bl	8000908 <setServo>
    setServo(2, 180);
 80015cc:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8001704 <main+0x37c>
 80015d0:	2002      	movs	r0, #2
 80015d2:	f7ff f999 	bl	8000908 <setServo>
    setServo(3, 0);
 80015d6:	ed9f 0a4c 	vldr	s0, [pc, #304]	; 8001708 <main+0x380>
 80015da:	2003      	movs	r0, #3
 80015dc:	f7ff f994 	bl	8000908 <setServo>
    setServo(4, 45);
 80015e0:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800170c <main+0x384>
 80015e4:	2004      	movs	r0, #4
 80015e6:	f7ff f98f 	bl	8000908 <setServo>

    LoRA_begin(868000000);
 80015ea:	4849      	ldr	r0, [pc, #292]	; (8001710 <main+0x388>)
 80015ec:	f7ff fca6 	bl	8000f3c <LoRA_begin>
//    		}
//    	}
//    	f_mount(&SDFatFS, (TCHAR const*)NULL, 0);


	int connected = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
	long last_packet = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
	int ARMED = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  char state[50] = "DISARMED";
 8001602:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8001606:	f5a3 7443 	sub.w	r4, r3, #780	; 0x30c
 800160a:	4a42      	ldr	r2, [pc, #264]	; (8001714 <main+0x38c>)
 800160c:	4623      	mov	r3, r4
 800160e:	6810      	ldr	r0, [r2, #0]
 8001610:	6851      	ldr	r1, [r2, #4]
 8001612:	c303      	stmia	r3!, {r0, r1}
 8001614:	7a12      	ldrb	r2, [r2, #8]
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	f104 0309 	add.w	r3, r4, #9
 800161c:	2229      	movs	r2, #41	; 0x29
 800161e:	2100      	movs	r1, #0
 8001620:	4618      	mov	r0, r3
 8001622:	f015 fc6b 	bl	8016efc <memset>
  char command[50];
  char acknowledge[50];
  char recieved_packet[50];
  char response_packet[50];
  char sendMessage[50];
  int last = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
  int packetId;
  char communication_state[50] = "RECIEVING";
 800162c:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8001630:	f2a3 4444 	subw	r4, r3, #1092	; 0x444
 8001634:	4a38      	ldr	r2, [pc, #224]	; (8001718 <main+0x390>)
 8001636:	4623      	mov	r3, r4
 8001638:	6810      	ldr	r0, [r2, #0]
 800163a:	6851      	ldr	r1, [r2, #4]
 800163c:	c303      	stmia	r3!, {r0, r1}
 800163e:	8912      	ldrh	r2, [r2, #8]
 8001640:	801a      	strh	r2, [r3, #0]
 8001642:	f104 030a 	add.w	r3, r4, #10
 8001646:	2228      	movs	r2, #40	; 0x28
 8001648:	2100      	movs	r1, #0
 800164a:	4618      	mov	r0, r3
 800164c:	f015 fc56 	bl	8016efc <memset>
  uint32_t previousTime = HAL_GetTick();
 8001650:	f002 f9b6 	bl	80039c0 <HAL_GetTick>
 8001654:	f8c7 0498 	str.w	r0, [r7, #1176]	; 0x498
  disarm(state);
 8001658:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fd81 	bl	8001164 <disarm>
while (1) {

    if(strcmp(communication_state,"RECIEVING") == 0)
 8001662:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001666:	492c      	ldr	r1, [pc, #176]	; (8001718 <main+0x390>)
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe fe51 	bl	8000310 <strcmp>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d157      	bne.n	8001724 <main+0x39c>
    {
      if(recv_packet(recieved_packet, 50))
 8001674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001678:	2132      	movs	r1, #50	; 0x32
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff fe00 	bl	8001280 <recv_packet>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d019      	beq.n	80016ba <main+0x332>
      {
        //if crc then:
        //send acknowledge
        //{
        strcpy(command, recieved_packet);
 8001686:	f507 7284 	add.w	r2, r7, #264	; 0x108
 800168a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800168e:	4611      	mov	r1, r2
 8001690:	4618      	mov	r0, r3
 8001692:	f015 fc67 	bl	8016f64 <strcpy>
        LoRA_sendPacket(recieved_packet);
 8001696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fd37 	bl	800110e <LoRA_sendPacket>
        strcpy(communication_state,"WAITING FOR PRIVILIGE");
 80016a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016a4:	4a1d      	ldr	r2, [pc, #116]	; (800171c <main+0x394>)
 80016a6:	461c      	mov	r4, r3
 80016a8:	4615      	mov	r5, r2
 80016aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80016b2:	6020      	str	r0, [r4, #0]
 80016b4:	3404      	adds	r4, #4
 80016b6:	8021      	strh	r1, [r4, #0]
 80016b8:	e186      	b.n	80019c8 <main+0x640>
        //}
      }
      else if(HAL_GetTick()-previousTime > 1000)
 80016ba:	f002 f981 	bl	80039c0 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	f8d7 3498 	ldr.w	r3, [r7, #1176]	; 0x498
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80016ca:	f240 817d 	bls.w	80019c8 <main+0x640>
      {
    	previousTime = HAL_GetTick();
 80016ce:	f002 f977 	bl	80039c0 <HAL_GetTick>
 80016d2:	f8c7 0498 	str.w	r0, [r7, #1176]	; 0x498
        //give up MASTER
        LoRA_sendPacket("$");
 80016d6:	4812      	ldr	r0, [pc, #72]	; (8001720 <main+0x398>)
 80016d8:	f7ff fd19 	bl	800110e <LoRA_sendPacket>
 80016dc:	e174      	b.n	80019c8 <main+0x640>
 80016de:	bf00      	nop
 80016e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80016e4:	3f50624d 	.word	0x3f50624d
 80016e8:	08017968 	.word	0x08017968
 80016ec:	3ff00000 	.word	0x3ff00000
 80016f0:	43fa0000 	.word	0x43fa0000
 80016f4:	58020c00 	.word	0x58020c00
 80016f8:	58021800 	.word	0x58021800
 80016fc:	24001064 	.word	0x24001064
 8001700:	42b40000 	.word	0x42b40000
 8001704:	43340000 	.word	0x43340000
 8001708:	00000000 	.word	0x00000000
 800170c:	42340000 	.word	0x42340000
 8001710:	33bca100 	.word	0x33bca100
 8001714:	08017830 	.word	0x08017830
 8001718:	08017844 	.word	0x08017844
 800171c:	08017850 	.word	0x08017850
 8001720:	08017868 	.word	0x08017868
      }
    }
    else if(strcmp(communication_state,"WAITING FOR PRIVILIGE") == 0)
 8001724:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001728:	49b3      	ldr	r1, [pc, #716]	; (80019f8 <main+0x670>)
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe fdf0 	bl	8000310 <strcmp>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d12c      	bne.n	8001790 <main+0x408>
    {
      if(recv_packet(recieved_packet, 50))
 8001736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800173a:	2132      	movs	r1, #50	; 0x32
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fd9f 	bl	8001280 <recv_packet>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	f000 813f 	beq.w	80019c8 <main+0x640>
      {
        //if crc then:
        //{
          if(strcmp(recieved_packet, "$") == 0)
 800174a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800174e:	49ab      	ldr	r1, [pc, #684]	; (80019fc <main+0x674>)
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fddd 	bl	8000310 <strcmp>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d10b      	bne.n	8001774 <main+0x3ec>
          {

            strcpy(communication_state,"MASTER");
 800175c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001760:	4aa7      	ldr	r2, [pc, #668]	; (8001a00 <main+0x678>)
 8001762:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001766:	6018      	str	r0, [r3, #0]
 8001768:	3304      	adds	r3, #4
 800176a:	8019      	strh	r1, [r3, #0]
 800176c:	3302      	adds	r3, #2
 800176e:	0c0a      	lsrs	r2, r1, #16
 8001770:	701a      	strb	r2, [r3, #0]
 8001772:	e129      	b.n	80019c8 <main+0x640>
          }
          else
          {
            //send acknowledge again
            strcpy(command, recieved_packet);
 8001774:	f507 7284 	add.w	r2, r7, #264	; 0x108
 8001778:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800177c:	4611      	mov	r1, r2
 800177e:	4618      	mov	r0, r3
 8001780:	f015 fbf0 	bl	8016f64 <strcpy>
            LoRA_sendPacket(recieved_packet);
 8001784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff fcc0 	bl	800110e <LoRA_sendPacket>
 800178e:	e11b      	b.n	80019c8 <main+0x640>

          }
        //}
      }     
    }
    else if(strcmp(communication_state,"MASTER") == 0)
 8001790:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001794:	499a      	ldr	r1, [pc, #616]	; (8001a00 <main+0x678>)
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fdba 	bl	8000310 <strcmp>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	f040 8112 	bne.w	80019c8 <main+0x640>
    {
        if(strcmp(state, "DISARMED") == 0)
 80017a4:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80017a8:	4996      	ldr	r1, [pc, #600]	; (8001a04 <main+0x67c>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fdb0 	bl	8000310 <strcmp>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f040 80ba 	bne.w	800192c <main+0x5a4>
        {
        	if(strcmp(command, "ARM") == 0)
 80017b8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80017bc:	4992      	ldr	r1, [pc, #584]	; (8001a08 <main+0x680>)
 80017be:	4618      	mov	r0, r3
 80017c0:	f7fe fda6 	bl	8000310 <strcmp>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d10f      	bne.n	80017ea <main+0x462>
        	{
        		if(!arm(state))
 80017ca:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff fd2c 	bl	800122c <arm>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d103      	bne.n	80017e2 <main+0x45a>
        		{
        			reliable_send_packet("ARM SUCCESS");
 80017da:	488c      	ldr	r0, [pc, #560]	; (8001a0c <main+0x684>)
 80017dc:	f7ff fd7f 	bl	80012de <reliable_send_packet>
 80017e0:	e0ec      	b.n	80019bc <main+0x634>
        		}
        		else
        		{
        			reliable_send_packet("ARM UNSUCCESSFUL");
 80017e2:	488b      	ldr	r0, [pc, #556]	; (8001a10 <main+0x688>)
 80017e4:	f7ff fd7b 	bl	80012de <reliable_send_packet>
 80017e8:	e0e8      	b.n	80019bc <main+0x634>
        		}
        	}
        	else if(strcmp(command, "DISARM") == 0)
 80017ea:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80017ee:	4989      	ldr	r1, [pc, #548]	; (8001a14 <main+0x68c>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7fe fd8d 	bl	8000310 <strcmp>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d103      	bne.n	8001804 <main+0x47c>
        	{
        		reliable_send_packet("ALREADY DISARMED");
 80017fc:	4886      	ldr	r0, [pc, #536]	; (8001a18 <main+0x690>)
 80017fe:	f7ff fd6e 	bl	80012de <reliable_send_packet>
 8001802:	e0db      	b.n	80019bc <main+0x634>
        	}
        	else if(strcmp(command, "CONT") == 0)
 8001804:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001808:	4984      	ldr	r1, [pc, #528]	; (8001a1c <main+0x694>)
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fd80 	bl	8000310 <strcmp>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	f040 80d2 	bne.w	80019bc <main+0x634>
        	{
        		uint8_t CONTS[8];
        		CONTS[0] = HAL_GPIO_ReadPin(CONT1_GPIO_Port, CONT1_Pin);
 8001818:	2104      	movs	r1, #4
 800181a:	4881      	ldr	r0, [pc, #516]	; (8001a20 <main+0x698>)
 800181c:	f006 fb76 	bl	8007f0c <HAL_GPIO_ReadPin>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8001828:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800182c:	701a      	strb	r2, [r3, #0]
        		CONTS[1] = HAL_GPIO_ReadPin(CONT2_GPIO_Port, CONT2_Pin);
 800182e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001832:	487c      	ldr	r0, [pc, #496]	; (8001a24 <main+0x69c>)
 8001834:	f006 fb6a 	bl	8007f0c <HAL_GPIO_ReadPin>
 8001838:	4603      	mov	r3, r0
 800183a:	461a      	mov	r2, r3
 800183c:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8001840:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8001844:	705a      	strb	r2, [r3, #1]
        		CONTS[2] = HAL_GPIO_ReadPin(CONT3_GPIO_Port, CONT3_Pin);
 8001846:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800184a:	4876      	ldr	r0, [pc, #472]	; (8001a24 <main+0x69c>)
 800184c:	f006 fb5e 	bl	8007f0c <HAL_GPIO_ReadPin>
 8001850:	4603      	mov	r3, r0
 8001852:	461a      	mov	r2, r3
 8001854:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8001858:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800185c:	709a      	strb	r2, [r3, #2]
        		CONTS[3] = HAL_GPIO_ReadPin(CONT4_GPIO_Port, CONT4_Pin);
 800185e:	2101      	movs	r1, #1
 8001860:	4871      	ldr	r0, [pc, #452]	; (8001a28 <main+0x6a0>)
 8001862:	f006 fb53 	bl	8007f0c <HAL_GPIO_ReadPin>
 8001866:	4603      	mov	r3, r0
 8001868:	461a      	mov	r2, r3
 800186a:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800186e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8001872:	70da      	strb	r2, [r3, #3]
        		CONTS[4] = HAL_GPIO_ReadPin(CONT5_GPIO_Port, CONT5_Pin);
 8001874:	2180      	movs	r1, #128	; 0x80
 8001876:	486d      	ldr	r0, [pc, #436]	; (8001a2c <main+0x6a4>)
 8001878:	f006 fb48 	bl	8007f0c <HAL_GPIO_ReadPin>
 800187c:	4603      	mov	r3, r0
 800187e:	461a      	mov	r2, r3
 8001880:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8001884:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8001888:	711a      	strb	r2, [r3, #4]
        		CONTS[5] = HAL_GPIO_ReadPin(CONT6_GPIO_Port, CONT6_Pin);
 800188a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800188e:	4867      	ldr	r0, [pc, #412]	; (8001a2c <main+0x6a4>)
 8001890:	f006 fb3c 	bl	8007f0c <HAL_GPIO_ReadPin>
 8001894:	4603      	mov	r3, r0
 8001896:	461a      	mov	r2, r3
 8001898:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 800189c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80018a0:	715a      	strb	r2, [r3, #5]
        		CONTS[6] = HAL_GPIO_ReadPin(CONT7_GPIO_Port, CONT7_Pin);
 80018a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018a6:	4861      	ldr	r0, [pc, #388]	; (8001a2c <main+0x6a4>)
 80018a8:	f006 fb30 	bl	8007f0c <HAL_GPIO_ReadPin>
 80018ac:	4603      	mov	r3, r0
 80018ae:	461a      	mov	r2, r3
 80018b0:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80018b4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80018b8:	719a      	strb	r2, [r3, #6]
        		CONTS[7] = HAL_GPIO_ReadPin(CONT8_GPIO_Port, CONT8_Pin);
 80018ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018be:	485b      	ldr	r0, [pc, #364]	; (8001a2c <main+0x6a4>)
 80018c0:	f006 fb24 	bl	8007f0c <HAL_GPIO_ReadPin>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461a      	mov	r2, r3
 80018c8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80018cc:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80018d0:	71da      	strb	r2, [r3, #7]

        		char message[100];
        		for(int i=0; i<8; i++)
 80018d2:	2300      	movs	r3, #0
 80018d4:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 80018d8:	e023      	b.n	8001922 <main+0x59a>
        		{
        			if(CONTS[i])
 80018da:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80018de:	f2a3 424c 	subw	r2, r3, #1100	; 0x44c
 80018e2:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 80018e6:	4413      	add	r3, r2
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d008      	beq.n	8001900 <main+0x578>
        			{
        				sprintf( message,  "PYRO %d DOESN'T HAVE CONTINUITY", i+1);
 80018ee:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	463b      	mov	r3, r7
 80018f6:	494e      	ldr	r1, [pc, #312]	; (8001a30 <main+0x6a8>)
 80018f8:	4618      	mov	r0, r3
 80018fa:	f015 fadf 	bl	8016ebc <siprintf>
 80018fe:	e007      	b.n	8001910 <main+0x588>
        			}
        			else
        			{
        				sprintf( message,  "PYRO %d HAS CONTINUITY", i+1);
 8001900:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8001904:	1c5a      	adds	r2, r3, #1
 8001906:	463b      	mov	r3, r7
 8001908:	494a      	ldr	r1, [pc, #296]	; (8001a34 <main+0x6ac>)
 800190a:	4618      	mov	r0, r3
 800190c:	f015 fad6 	bl	8016ebc <siprintf>
        			}

        			reliable_send_packet(message);
 8001910:	463b      	mov	r3, r7
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fce3 	bl	80012de <reliable_send_packet>
        		for(int i=0; i<8; i++)
 8001918:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 800191c:	3301      	adds	r3, #1
 800191e:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 8001922:	f8d7 3494 	ldr.w	r3, [r7, #1172]	; 0x494
 8001926:	2b07      	cmp	r3, #7
 8001928:	ddd7      	ble.n	80018da <main+0x552>
 800192a:	e047      	b.n	80019bc <main+0x634>
        		}
        	}
        }
        else if(strcmp(state, "ARMED") == 0)
 800192c:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001930:	4941      	ldr	r1, [pc, #260]	; (8001a38 <main+0x6b0>)
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fcec 	bl	8000310 <strcmp>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d118      	bne.n	8001970 <main+0x5e8>
        {
          if(strcmp(command, "DISARM") == 0)
 800193e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001942:	4934      	ldr	r1, [pc, #208]	; (8001a14 <main+0x68c>)
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fce3 	bl	8000310 <strcmp>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d135      	bne.n	80019bc <main+0x634>
          {
            if(!disarm(state))
 8001950:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff fc05 	bl	8001164 <disarm>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d103      	bne.n	8001968 <main+0x5e0>
            {
            	reliable_send_packet("DISARM SUCCESS");
 8001960:	4836      	ldr	r0, [pc, #216]	; (8001a3c <main+0x6b4>)
 8001962:	f7ff fcbc 	bl	80012de <reliable_send_packet>
 8001966:	e029      	b.n	80019bc <main+0x634>
            }
            else
            {
            	reliable_send_packet("DISARM UNSUCCESSFUL");
 8001968:	4835      	ldr	r0, [pc, #212]	; (8001a40 <main+0x6b8>)
 800196a:	f7ff fcb8 	bl	80012de <reliable_send_packet>
 800196e:	e025      	b.n	80019bc <main+0x634>
            }
          }
        }
        else if(strcmp(state, "STATIC_FIRE_LOGGING") == 0)
 8001970:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001974:	4933      	ldr	r1, [pc, #204]	; (8001a44 <main+0x6bc>)
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fcca 	bl	8000310 <strcmp>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d111      	bne.n	80019a6 <main+0x61e>
        {
          if(strcmp(command, "STOP") == 0)
 8001982:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8001986:	4930      	ldr	r1, [pc, #192]	; (8001a48 <main+0x6c0>)
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fcc1 	bl	8000310 <strcmp>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d113      	bne.n	80019bc <main+0x634>
          {
            strcpy(state,"ARMED");
 8001994:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8001998:	4a27      	ldr	r2, [pc, #156]	; (8001a38 <main+0x6b0>)
 800199a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800199e:	6018      	str	r0, [r3, #0]
 80019a0:	3304      	adds	r3, #4
 80019a2:	8019      	strh	r1, [r3, #0]
 80019a4:	e00a      	b.n	80019bc <main+0x634>
          }
        }
       else
       {
    	   LoRA_sendPacket(state);
 80019a6:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7ff fbaf 	bl	800110e <LoRA_sendPacket>
    	   HAL_Delay(10);
 80019b0:	200a      	movs	r0, #10
 80019b2:	f002 f811 	bl	80039d8 <HAL_Delay>
        	reliable_send_packet("PANIC! FLIGHT COMPUTER IS NOT IN ANY VALID STATE.");
 80019b6:	4825      	ldr	r0, [pc, #148]	; (8001a4c <main+0x6c4>)
 80019b8:	f7ff fc91 	bl	80012de <reliable_send_packet>
       }

      strcpy(communication_state,"RECIEVING");
 80019bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80019c0:	4a23      	ldr	r2, [pc, #140]	; (8001a50 <main+0x6c8>)
 80019c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80019c4:	c303      	stmia	r3!, {r0, r1}
 80019c6:	801a      	strh	r2, [r3, #0]
//			LED_Color_Data[i][0] = (uint32_t)MAX*triangle_space(color_offset+r_offset);
//			LED_Color_Data[i][1] = (uint32_t)MAX*triangle_space(color_offset+g_offset);
//			LED_Color_Data[i][2] = (uint32_t)MAX*triangle_space(color_offset+b_offset);
//		}

		float timeElapsed = ((float)(HAL_GetTick() - lastTime)) / 1000;
 80019c8:	f001 fffa 	bl	80039c0 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	; 0x4ac
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	ee07 3a90 	vmov	s15, r3
 80019d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80019dc:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8001a54 <main+0x6cc>
 80019e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019e4:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80019e8:	edc3 7a00 	vstr	s15, [r3]

		//float GyroX = LG2_Get_Gyro_X() - calOmegaX;
		//float GyroY = LG2_Get_Gyro_Y() - calOmegaY;
		//float GyroZ = LG2_Get_Gyro_Z() - calOmegaZ;

		lastTime = HAL_GetTick();
 80019ec:	f001 ffe8 	bl	80039c0 <HAL_GetTick>
 80019f0:	f8c7 04ac 	str.w	r0, [r7, #1196]	; 0x4ac
while (1) {
 80019f4:	e635      	b.n	8001662 <main+0x2da>
 80019f6:	bf00      	nop
 80019f8:	08017850 	.word	0x08017850
 80019fc:	08017868 	.word	0x08017868
 8001a00:	0801786c 	.word	0x0801786c
 8001a04:	08017830 	.word	0x08017830
 8001a08:	08017874 	.word	0x08017874
 8001a0c:	08017878 	.word	0x08017878
 8001a10:	08017884 	.word	0x08017884
 8001a14:	08017898 	.word	0x08017898
 8001a18:	080178a0 	.word	0x080178a0
 8001a1c:	080178b4 	.word	0x080178b4
 8001a20:	58020400 	.word	0x58020400
 8001a24:	58021400 	.word	0x58021400
 8001a28:	58021800 	.word	0x58021800
 8001a2c:	58021000 	.word	0x58021000
 8001a30:	080178bc 	.word	0x080178bc
 8001a34:	080178dc 	.word	0x080178dc
 8001a38:	0801783c 	.word	0x0801783c
 8001a3c:	080178f4 	.word	0x080178f4
 8001a40:	08017904 	.word	0x08017904
 8001a44:	08017918 	.word	0x08017918
 8001a48:	0801792c 	.word	0x0801792c
 8001a4c:	08017934 	.word	0x08017934
 8001a50:	08017844 	.word	0x08017844
 8001a54:	447a0000 	.word	0x447a0000

08001a58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b09c      	sub	sp, #112	; 0x70
 8001a5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a62:	224c      	movs	r2, #76	; 0x4c
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f015 fa48 	bl	8016efc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	2220      	movs	r2, #32
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f015 fa42 	bl	8016efc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001a78:	2002      	movs	r0, #2
 8001a7a:	f007 fe59 	bl	8009730 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a7e:	2300      	movs	r3, #0
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	4b32      	ldr	r3, [pc, #200]	; (8001b4c <SystemClock_Config+0xf4>)
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a8a:	4a30      	ldr	r2, [pc, #192]	; (8001b4c <SystemClock_Config+0xf4>)
 8001a8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a90:	6193      	str	r3, [r2, #24]
 8001a92:	4b2e      	ldr	r3, [pc, #184]	; (8001b4c <SystemClock_Config+0xf4>)
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001a9e:	bf00      	nop
 8001aa0:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <SystemClock_Config+0xf4>)
 8001aa2:	699b      	ldr	r3, [r3, #24]
 8001aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001aac:	d1f8      	bne.n	8001aa0 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8001aae:	2323      	movs	r3, #35	; 0x23
 8001ab0:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ab2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001abc:	2340      	movs	r3, #64	; 0x40
 8001abe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001acc:	2304      	movs	r3, #4
 8001ace:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001ad0:	230c      	movs	r3, #12
 8001ad2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001ad8:	230c      	movs	r3, #12
 8001ada:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001adc:	2302      	movs	r3, #2
 8001ade:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001ae0:	230c      	movs	r3, #12
 8001ae2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af0:	4618      	mov	r0, r3
 8001af2:	f007 fe67 	bl	80097c4 <HAL_RCC_OscConfig>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8001afc:	f000 ff02 	bl	8002904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b00:	233f      	movs	r3, #63	; 0x3f
 8001b02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b04:	2303      	movs	r3, #3
 8001b06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001b0c:	2308      	movs	r3, #8
 8001b0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001b10:	2340      	movs	r3, #64	; 0x40
 8001b12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001b14:	2340      	movs	r3, #64	; 0x40
 8001b16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001b18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b1c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001b1e:	2340      	movs	r3, #64	; 0x40
 8001b20:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2101      	movs	r1, #1
 8001b26:	4618      	mov	r0, r3
 8001b28:	f008 fa26 	bl	8009f78 <HAL_RCC_ClockConfig>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <SystemClock_Config+0xde>
  {
    Error_Handler();
 8001b32:	f000 fee7 	bl	8002904 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001b36:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f008 fbd1 	bl	800a2e4 <HAL_RCC_MCOConfig>
}
 8001b42:	bf00      	nop
 8001b44:	3770      	adds	r7, #112	; 0x70
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	58024800 	.word	0x58024800

08001b50 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b0ae      	sub	sp, #184	; 0xb8
 8001b54:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b56:	463b      	mov	r3, r7
 8001b58:	22b8      	movs	r2, #184	; 0xb8
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f015 f9cd 	bl	8016efc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001b62:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001b6e:	2304      	movs	r3, #4
 8001b70:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001b72:	230c      	movs	r3, #12
 8001b74:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001b76:	2304      	movs	r3, #4
 8001b78:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001b82:	23c0      	movs	r3, #192	; 0xc0
 8001b84:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001b8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b92:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b9a:	463b      	mov	r3, r7
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f008 fde1 	bl	800a764 <HAL_RCCEx_PeriphCLKConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001ba8:	f000 feac 	bl	8002904 <Error_Handler>
  }
}
 8001bac:	bf00      	nop
 8001bae:	37b8      	adds	r7, #184	; 0xb8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08c      	sub	sp, #48	; 0x30
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2224      	movs	r2, #36	; 0x24
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f015 f995 	bl	8016efc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001bd2:	4b31      	ldr	r3, [pc, #196]	; (8001c98 <MX_ADC1_Init+0xe4>)
 8001bd4:	4a31      	ldr	r2, [pc, #196]	; (8001c9c <MX_ADC1_Init+0xe8>)
 8001bd6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001bd8:	4b2f      	ldr	r3, [pc, #188]	; (8001c98 <MX_ADC1_Init+0xe4>)
 8001bda:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001bde:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001be0:	4b2d      	ldr	r3, [pc, #180]	; (8001c98 <MX_ADC1_Init+0xe4>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001be6:	4b2c      	ldr	r3, [pc, #176]	; (8001c98 <MX_ADC1_Init+0xe4>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001bec:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <MX_ADC1_Init+0xe4>)
 8001bee:	2204      	movs	r2, #4
 8001bf0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001bf2:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <MX_ADC1_Init+0xe4>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <MX_ADC1_Init+0xe4>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001bfe:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <MX_ADC1_Init+0xe4>)
 8001c00:	2201      	movs	r2, #1
 8001c02:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c04:	4b24      	ldr	r3, [pc, #144]	; (8001c98 <MX_ADC1_Init+0xe4>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c0c:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <MX_ADC1_Init+0xe4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001c12:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <MX_ADC1_Init+0xe4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001c18:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <MX_ADC1_Init+0xe4>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <MX_ADC1_Init+0xe4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001c24:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <MX_ADC1_Init+0xe4>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <MX_ADC1_Init+0xe4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c32:	4819      	ldr	r0, [pc, #100]	; (8001c98 <MX_ADC1_Init+0xe4>)
 8001c34:	f002 f950 	bl	8003ed8 <HAL_ADC_Init>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001c3e:	f000 fe61 	bl	8002904 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001c46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4812      	ldr	r0, [pc, #72]	; (8001c98 <MX_ADC1_Init+0xe4>)
 8001c4e:	f003 f98b 	bl	8004f68 <HAL_ADCEx_MultiModeConfigChannel>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001c58:	f000 fe54 	bl	8002904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001c5c:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <MX_ADC1_Init+0xec>)
 8001c5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c60:	2306      	movs	r3, #6
 8001c62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001c64:	2303      	movs	r3, #3
 8001c66:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001c68:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001c6c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001c6e:	2304      	movs	r3, #4
 8001c70:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_ADC1_Init+0xe4>)
 8001c82:	f002 fb31 	bl	80042e8 <HAL_ADC_ConfigChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d001      	beq.n	8001c90 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001c8c:	f000 fe3a 	bl	8002904 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c90:	bf00      	nop
 8001c92:	3730      	adds	r7, #48	; 0x30
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	24000af4 	.word	0x24000af4
 8001c9c:	40022000 	.word	0x40022000
 8001ca0:	2a000400 	.word	0x2a000400

08001ca4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08a      	sub	sp, #40	; 0x28
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001caa:	1d3b      	adds	r3, r7, #4
 8001cac:	2224      	movs	r2, #36	; 0x24
 8001cae:	2100      	movs	r1, #0
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f015 f923 	bl	8016efc <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001cb6:	4b2f      	ldr	r3, [pc, #188]	; (8001d74 <MX_ADC3_Init+0xd0>)
 8001cb8:	4a2f      	ldr	r2, [pc, #188]	; (8001d78 <MX_ADC3_Init+0xd4>)
 8001cba:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <MX_ADC3_Init+0xd0>)
 8001cbe:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001cc2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	; (8001d74 <MX_ADC3_Init+0xd0>)
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001cca:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <MX_ADC3_Init+0xd0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001cd0:	4b28      	ldr	r3, [pc, #160]	; (8001d74 <MX_ADC3_Init+0xd0>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001cd6:	4b27      	ldr	r3, [pc, #156]	; (8001d74 <MX_ADC3_Init+0xd0>)
 8001cd8:	2204      	movs	r2, #4
 8001cda:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001cdc:	4b25      	ldr	r3, [pc, #148]	; (8001d74 <MX_ADC3_Init+0xd0>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001ce2:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <MX_ADC3_Init+0xd0>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001ce8:	4b22      	ldr	r3, [pc, #136]	; (8001d74 <MX_ADC3_Init+0xd0>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001cee:	4b21      	ldr	r3, [pc, #132]	; (8001d74 <MX_ADC3_Init+0xd0>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001cf6:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <MX_ADC3_Init+0xd0>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001cfc:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <MX_ADC3_Init+0xd0>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001d02:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <MX_ADC3_Init+0xd0>)
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001d0a:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <MX_ADC3_Init+0xd0>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001d10:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <MX_ADC3_Init+0xd0>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d16:	4b17      	ldr	r3, [pc, #92]	; (8001d74 <MX_ADC3_Init+0xd0>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001d1c:	4b15      	ldr	r3, [pc, #84]	; (8001d74 <MX_ADC3_Init+0xd0>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001d22:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <MX_ADC3_Init+0xd0>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001d2a:	4812      	ldr	r0, [pc, #72]	; (8001d74 <MX_ADC3_Init+0xd0>)
 8001d2c:	f002 f8d4 	bl	8003ed8 <HAL_ADC_Init>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001d36:	f000 fde5 	bl	8002904 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <MX_ADC3_Init+0xd8>)
 8001d3c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d3e:	2306      	movs	r3, #6
 8001d40:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001d46:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001d4a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001d4c:	2304      	movs	r3, #4
 8001d4e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001d58:	1d3b      	adds	r3, r7, #4
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4805      	ldr	r0, [pc, #20]	; (8001d74 <MX_ADC3_Init+0xd0>)
 8001d5e:	f002 fac3 	bl	80042e8 <HAL_ADC_ConfigChannel>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001d68:	f000 fdcc 	bl	8002904 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001d6c:	bf00      	nop
 8001d6e:	3728      	adds	r7, #40	; 0x28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	24000b64 	.word	0x24000b64
 8001d78:	58026000 	.word	0x58026000
 8001d7c:	04300002 	.word	0x04300002

08001d80 <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001d84:	4b2e      	ldr	r3, [pc, #184]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001d86:	4a2f      	ldr	r2, [pc, #188]	; (8001e44 <MX_FDCAN3_Init+0xc4>)
 8001d88:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001d8a:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001d90:	4b2b      	ldr	r3, [pc, #172]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001d96:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001d9c:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001da2:	4b27      	ldr	r3, [pc, #156]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001da8:	4b25      	ldr	r3, [pc, #148]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001daa:	2210      	movs	r2, #16
 8001dac:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001dae:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001db0:	2201      	movs	r2, #1
 8001db2:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001db4:	4b22      	ldr	r3, [pc, #136]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001db6:	2202      	movs	r2, #2
 8001db8:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001dba:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001dc0:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001dc8:	2201      	movs	r2, #1
 8001dca:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001dcc:	4b1c      	ldr	r3, [pc, #112]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001dd2:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001de4:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001df0:	4b13      	ldr	r3, [pc, #76]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001df2:	2204      	movs	r2, #4
 8001df4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001dfc:	4b10      	ldr	r3, [pc, #64]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001dfe:	2204      	movs	r2, #4
 8001e00:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001e02:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001e0a:	2204      	movs	r2, #4
 8001e0c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001e0e:	4b0c      	ldr	r3, [pc, #48]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001e14:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001e1a:	4b09      	ldr	r3, [pc, #36]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001e26:	4b06      	ldr	r3, [pc, #24]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001e28:	2204      	movs	r2, #4
 8001e2a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001e2c:	4804      	ldr	r0, [pc, #16]	; (8001e40 <MX_FDCAN3_Init+0xc0>)
 8001e2e:	f005 fb61 	bl	80074f4 <HAL_FDCAN_Init>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001e38:	f000 fd64 	bl	8002904 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	24000cc4 	.word	0x24000cc4
 8001e44:	4000d400 	.word	0x4000d400

08001e48 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <MX_I2C2_Init+0x74>)
 8001e4e:	4a1c      	ldr	r2, [pc, #112]	; (8001ec0 <MX_I2C2_Init+0x78>)
 8001e50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001e52:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <MX_I2C2_Init+0x74>)
 8001e54:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <MX_I2C2_Init+0x7c>)
 8001e56:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001e58:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <MX_I2C2_Init+0x74>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <MX_I2C2_Init+0x74>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001e64:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <MX_I2C2_Init+0x74>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001e6a:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <MX_I2C2_Init+0x74>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <MX_I2C2_Init+0x74>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e76:	4b11      	ldr	r3, [pc, #68]	; (8001ebc <MX_I2C2_Init+0x74>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <MX_I2C2_Init+0x74>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001e82:	480e      	ldr	r0, [pc, #56]	; (8001ebc <MX_I2C2_Init+0x74>)
 8001e84:	f006 f874 	bl	8007f70 <HAL_I2C_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001e8e:	f000 fd39 	bl	8002904 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001e92:	2100      	movs	r1, #0
 8001e94:	4809      	ldr	r0, [pc, #36]	; (8001ebc <MX_I2C2_Init+0x74>)
 8001e96:	f006 f8fb 	bl	8008090 <HAL_I2CEx_ConfigAnalogFilter>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001ea0:	f000 fd30 	bl	8002904 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	4805      	ldr	r0, [pc, #20]	; (8001ebc <MX_I2C2_Init+0x74>)
 8001ea8:	f006 f93d 	bl	8008126 <HAL_I2CEx_ConfigDigitalFilter>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001eb2:	f000 fd27 	bl	8002904 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	24000d64 	.word	0x24000d64
 8001ec0:	40005800 	.word	0x40005800
 8001ec4:	20303e5d 	.word	0x20303e5d

08001ec8 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <MX_SDMMC2_SD_Init+0x34>)
 8001ece:	4a0c      	ldr	r2, [pc, #48]	; (8001f00 <MX_SDMMC2_SD_Init+0x38>)
 8001ed0:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <MX_SDMMC2_SD_Init+0x34>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <MX_SDMMC2_SD_Init+0x34>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8001ede:	4b07      	ldr	r3, [pc, #28]	; (8001efc <MX_SDMMC2_SD_Init+0x34>)
 8001ee0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ee4:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <MX_SDMMC2_SD_Init+0x34>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8001eec:	4b03      	ldr	r3, [pc, #12]	; (8001efc <MX_SDMMC2_SD_Init+0x34>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	24000db8 	.word	0x24000db8
 8001f00:	48022400 	.word	0x48022400

08001f04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001f08:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f0a:	4a28      	ldr	r2, [pc, #160]	; (8001fac <MX_SPI1_Init+0xa8>)
 8001f0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001f0e:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f10:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001f16:	4b24      	ldr	r3, [pc, #144]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f1c:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f1e:	2207      	movs	r2, #7
 8001f20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f22:	4b21      	ldr	r3, [pc, #132]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f30:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001f36:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f38:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001f3c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f44:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f4a:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8001f50:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001f56:	4b14      	ldr	r3, [pc, #80]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f5c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001f64:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001f70:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001f88:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001f94:	4804      	ldr	r0, [pc, #16]	; (8001fa8 <MX_SPI1_Init+0xa4>)
 8001f96:	f00c fc2f 	bl	800e7f8 <HAL_SPI_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001fa0:	f000 fcb0 	bl	8002904 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	24000e34 	.word	0x24000e34
 8001fac:	40013000 	.word	0x40013000

08001fb0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001fb4:	4b27      	ldr	r3, [pc, #156]	; (8002054 <MX_SPI2_Init+0xa4>)
 8001fb6:	4a28      	ldr	r2, [pc, #160]	; (8002058 <MX_SPI2_Init+0xa8>)
 8001fb8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001fba:	4b26      	ldr	r3, [pc, #152]	; (8002054 <MX_SPI2_Init+0xa4>)
 8001fbc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001fc0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001fc2:	4b24      	ldr	r3, [pc, #144]	; (8002054 <MX_SPI2_Init+0xa4>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fc8:	4b22      	ldr	r3, [pc, #136]	; (8002054 <MX_SPI2_Init+0xa4>)
 8001fca:	2207      	movs	r2, #7
 8001fcc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fce:	4b21      	ldr	r3, [pc, #132]	; (8002054 <MX_SPI2_Init+0xa4>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fd4:	4b1f      	ldr	r3, [pc, #124]	; (8002054 <MX_SPI2_Init+0xa4>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <MX_SPI2_Init+0xa4>)
 8001fdc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fe0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	; (8002054 <MX_SPI2_Init+0xa4>)
 8001fe4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8001fe8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <MX_SPI2_Init+0xa4>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001ff0:	4b18      	ldr	r3, [pc, #96]	; (8002054 <MX_SPI2_Init+0xa4>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ff6:	4b17      	ldr	r3, [pc, #92]	; (8002054 <MX_SPI2_Init+0xa4>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8001ffc:	4b15      	ldr	r3, [pc, #84]	; (8002054 <MX_SPI2_Init+0xa4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <MX_SPI2_Init+0xa4>)
 8002004:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002008:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800200a:	4b12      	ldr	r3, [pc, #72]	; (8002054 <MX_SPI2_Init+0xa4>)
 800200c:	2200      	movs	r2, #0
 800200e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002010:	4b10      	ldr	r3, [pc, #64]	; (8002054 <MX_SPI2_Init+0xa4>)
 8002012:	2200      	movs	r2, #0
 8002014:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002016:	4b0f      	ldr	r3, [pc, #60]	; (8002054 <MX_SPI2_Init+0xa4>)
 8002018:	2200      	movs	r2, #0
 800201a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800201c:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <MX_SPI2_Init+0xa4>)
 800201e:	2200      	movs	r2, #0
 8002020:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002022:	4b0c      	ldr	r3, [pc, #48]	; (8002054 <MX_SPI2_Init+0xa4>)
 8002024:	2200      	movs	r2, #0
 8002026:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <MX_SPI2_Init+0xa4>)
 800202a:	2200      	movs	r2, #0
 800202c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <MX_SPI2_Init+0xa4>)
 8002030:	2200      	movs	r2, #0
 8002032:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002034:	4b07      	ldr	r3, [pc, #28]	; (8002054 <MX_SPI2_Init+0xa4>)
 8002036:	2200      	movs	r2, #0
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <MX_SPI2_Init+0xa4>)
 800203c:	2200      	movs	r2, #0
 800203e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002040:	4804      	ldr	r0, [pc, #16]	; (8002054 <MX_SPI2_Init+0xa4>)
 8002042:	f00c fbd9 	bl	800e7f8 <HAL_SPI_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 800204c:	f000 fc5a 	bl	8002904 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002050:	bf00      	nop
 8002052:	bd80      	pop	{r7, pc}
 8002054:	24000ebc 	.word	0x24000ebc
 8002058:	40003800 	.word	0x40003800

0800205c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <MX_SPI3_Init+0xa4>)
 8002062:	4a28      	ldr	r2, [pc, #160]	; (8002104 <MX_SPI3_Init+0xa8>)
 8002064:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002066:	4b26      	ldr	r3, [pc, #152]	; (8002100 <MX_SPI3_Init+0xa4>)
 8002068:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800206c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <MX_SPI3_Init+0xa4>)
 8002070:	2200      	movs	r2, #0
 8002072:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <MX_SPI3_Init+0xa4>)
 8002076:	2207      	movs	r2, #7
 8002078:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800207a:	4b21      	ldr	r3, [pc, #132]	; (8002100 <MX_SPI3_Init+0xa4>)
 800207c:	2200      	movs	r2, #0
 800207e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002080:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <MX_SPI3_Init+0xa4>)
 8002082:	2200      	movs	r2, #0
 8002084:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <MX_SPI3_Init+0xa4>)
 8002088:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800208c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800208e:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <MX_SPI3_Init+0xa4>)
 8002090:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002094:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002096:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <MX_SPI3_Init+0xa4>)
 8002098:	2200      	movs	r2, #0
 800209a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800209c:	4b18      	ldr	r3, [pc, #96]	; (8002100 <MX_SPI3_Init+0xa4>)
 800209e:	2200      	movs	r2, #0
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a2:	4b17      	ldr	r3, [pc, #92]	; (8002100 <MX_SPI3_Init+0xa4>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80020a8:	4b15      	ldr	r3, [pc, #84]	; (8002100 <MX_SPI3_Init+0xa4>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020ae:	4b14      	ldr	r3, [pc, #80]	; (8002100 <MX_SPI3_Init+0xa4>)
 80020b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020b4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020b6:	4b12      	ldr	r3, [pc, #72]	; (8002100 <MX_SPI3_Init+0xa4>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020bc:	4b10      	ldr	r3, [pc, #64]	; (8002100 <MX_SPI3_Init+0xa4>)
 80020be:	2200      	movs	r2, #0
 80020c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <MX_SPI3_Init+0xa4>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020c8:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <MX_SPI3_Init+0xa4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80020ce:	4b0c      	ldr	r3, [pc, #48]	; (8002100 <MX_SPI3_Init+0xa4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80020d4:	4b0a      	ldr	r3, [pc, #40]	; (8002100 <MX_SPI3_Init+0xa4>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <MX_SPI3_Init+0xa4>)
 80020dc:	2200      	movs	r2, #0
 80020de:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <MX_SPI3_Init+0xa4>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <MX_SPI3_Init+0xa4>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80020ec:	4804      	ldr	r0, [pc, #16]	; (8002100 <MX_SPI3_Init+0xa4>)
 80020ee:	f00c fb83 	bl	800e7f8 <HAL_SPI_Init>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d001      	beq.n	80020fc <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 80020f8:	f000 fc04 	bl	8002904 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	24000f44 	.word	0x24000f44
 8002104:	40003c00 	.word	0x40003c00

08002108 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	; 0x28
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800210e:	f107 031c 	add.w	r3, r7, #28
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800211a:	463b      	mov	r3, r7
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
 8002128:	615a      	str	r2, [r3, #20]
 800212a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800212c:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <MX_TIM2_Init+0xac>)
 800212e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002132:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002134:	4b1f      	ldr	r3, [pc, #124]	; (80021b4 <MX_TIM2_Init+0xac>)
 8002136:	2200      	movs	r2, #0
 8002138:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213a:	4b1e      	ldr	r3, [pc, #120]	; (80021b4 <MX_TIM2_Init+0xac>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 8002140:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <MX_TIM2_Init+0xac>)
 8002142:	225a      	movs	r2, #90	; 0x5a
 8002144:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002146:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <MX_TIM2_Init+0xac>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800214c:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <MX_TIM2_Init+0xac>)
 800214e:	2200      	movs	r2, #0
 8002150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002152:	4818      	ldr	r0, [pc, #96]	; (80021b4 <MX_TIM2_Init+0xac>)
 8002154:	f00d f8e9 	bl	800f32a <HAL_TIM_PWM_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800215e:	f000 fbd1 	bl	8002904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002162:	2300      	movs	r3, #0
 8002164:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800216a:	f107 031c 	add.w	r3, r7, #28
 800216e:	4619      	mov	r1, r3
 8002170:	4810      	ldr	r0, [pc, #64]	; (80021b4 <MX_TIM2_Init+0xac>)
 8002172:	f00e fb6f 	bl	8010854 <HAL_TIMEx_MasterConfigSynchronization>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800217c:	f000 fbc2 	bl	8002904 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002180:	2360      	movs	r3, #96	; 0x60
 8002182:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002188:	2300      	movs	r3, #0
 800218a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002190:	463b      	mov	r3, r7
 8002192:	2208      	movs	r2, #8
 8002194:	4619      	mov	r1, r3
 8002196:	4807      	ldr	r0, [pc, #28]	; (80021b4 <MX_TIM2_Init+0xac>)
 8002198:	f00d fd8e 	bl	800fcb8 <HAL_TIM_PWM_ConfigChannel>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80021a2:	f000 fbaf 	bl	8002904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021a6:	4803      	ldr	r0, [pc, #12]	; (80021b4 <MX_TIM2_Init+0xac>)
 80021a8:	f001 f8a0 	bl	80032ec <HAL_TIM_MspPostInit>

}
 80021ac:	bf00      	nop
 80021ae:	3728      	adds	r7, #40	; 0x28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	24000fcc 	.word	0x24000fcc

080021b8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021be:	f107 031c 	add.w	r3, r7, #28
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	605a      	str	r2, [r3, #4]
 80021c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021ca:	463b      	mov	r3, r7
 80021cc:	2200      	movs	r2, #0
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	605a      	str	r2, [r3, #4]
 80021d2:	609a      	str	r2, [r3, #8]
 80021d4:	60da      	str	r2, [r3, #12]
 80021d6:	611a      	str	r2, [r3, #16]
 80021d8:	615a      	str	r2, [r3, #20]
 80021da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80021dc:	4b26      	ldr	r3, [pc, #152]	; (8002278 <MX_TIM3_Init+0xc0>)
 80021de:	4a27      	ldr	r2, [pc, #156]	; (800227c <MX_TIM3_Init+0xc4>)
 80021e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80021e2:	4b25      	ldr	r3, [pc, #148]	; (8002278 <MX_TIM3_Init+0xc0>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021e8:	4b23      	ldr	r3, [pc, #140]	; (8002278 <MX_TIM3_Init+0xc0>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 80021ee:	4b22      	ldr	r3, [pc, #136]	; (8002278 <MX_TIM3_Init+0xc0>)
 80021f0:	225a      	movs	r2, #90	; 0x5a
 80021f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021f4:	4b20      	ldr	r3, [pc, #128]	; (8002278 <MX_TIM3_Init+0xc0>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021fa:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <MX_TIM3_Init+0xc0>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002200:	481d      	ldr	r0, [pc, #116]	; (8002278 <MX_TIM3_Init+0xc0>)
 8002202:	f00d f892 	bl	800f32a <HAL_TIM_PWM_Init>
 8002206:	4603      	mov	r3, r0
 8002208:	2b00      	cmp	r3, #0
 800220a:	d001      	beq.n	8002210 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800220c:	f000 fb7a 	bl	8002904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002210:	2300      	movs	r3, #0
 8002212:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002214:	2300      	movs	r3, #0
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002218:	f107 031c 	add.w	r3, r7, #28
 800221c:	4619      	mov	r1, r3
 800221e:	4816      	ldr	r0, [pc, #88]	; (8002278 <MX_TIM3_Init+0xc0>)
 8002220:	f00e fb18 	bl	8010854 <HAL_TIMEx_MasterConfigSynchronization>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800222a:	f000 fb6b 	bl	8002904 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800222e:	2360      	movs	r3, #96	; 0x60
 8002230:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002232:	2300      	movs	r3, #0
 8002234:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002236:	2300      	movs	r3, #0
 8002238:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800223e:	463b      	mov	r3, r7
 8002240:	2200      	movs	r2, #0
 8002242:	4619      	mov	r1, r3
 8002244:	480c      	ldr	r0, [pc, #48]	; (8002278 <MX_TIM3_Init+0xc0>)
 8002246:	f00d fd37 	bl	800fcb8 <HAL_TIM_PWM_ConfigChannel>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8002250:	f000 fb58 	bl	8002904 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002254:	463b      	mov	r3, r7
 8002256:	2204      	movs	r2, #4
 8002258:	4619      	mov	r1, r3
 800225a:	4807      	ldr	r0, [pc, #28]	; (8002278 <MX_TIM3_Init+0xc0>)
 800225c:	f00d fd2c 	bl	800fcb8 <HAL_TIM_PWM_ConfigChannel>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002266:	f000 fb4d 	bl	8002904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800226a:	4803      	ldr	r0, [pc, #12]	; (8002278 <MX_TIM3_Init+0xc0>)
 800226c:	f001 f83e 	bl	80032ec <HAL_TIM_MspPostInit>

}
 8002270:	bf00      	nop
 8002272:	3728      	adds	r7, #40	; 0x28
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	24001018 	.word	0x24001018
 800227c:	40000400 	.word	0x40000400

08002280 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08a      	sub	sp, #40	; 0x28
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002286:	f107 031c 	add.w	r3, r7, #28
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002292:	463b      	mov	r3, r7
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
 80022a0:	615a      	str	r2, [r3, #20]
 80022a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80022a4:	4b32      	ldr	r3, [pc, #200]	; (8002370 <MX_TIM4_Init+0xf0>)
 80022a6:	4a33      	ldr	r2, [pc, #204]	; (8002374 <MX_TIM4_Init+0xf4>)
 80022a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 80022aa:	4b31      	ldr	r3, [pc, #196]	; (8002370 <MX_TIM4_Init+0xf0>)
 80022ac:	221c      	movs	r2, #28
 80022ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b0:	4b2f      	ldr	r3, [pc, #188]	; (8002370 <MX_TIM4_Init+0xf0>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 80022b6:	4b2e      	ldr	r3, [pc, #184]	; (8002370 <MX_TIM4_Init+0xf0>)
 80022b8:	f242 720f 	movw	r2, #9999	; 0x270f
 80022bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022be:	4b2c      	ldr	r3, [pc, #176]	; (8002370 <MX_TIM4_Init+0xf0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c4:	4b2a      	ldr	r3, [pc, #168]	; (8002370 <MX_TIM4_Init+0xf0>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80022ca:	4829      	ldr	r0, [pc, #164]	; (8002370 <MX_TIM4_Init+0xf0>)
 80022cc:	f00d f82d 	bl	800f32a <HAL_TIM_PWM_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80022d6:	f000 fb15 	bl	8002904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022de:	2300      	movs	r3, #0
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80022e2:	f107 031c 	add.w	r3, r7, #28
 80022e6:	4619      	mov	r1, r3
 80022e8:	4821      	ldr	r0, [pc, #132]	; (8002370 <MX_TIM4_Init+0xf0>)
 80022ea:	f00e fab3 	bl	8010854 <HAL_TIMEx_MasterConfigSynchronization>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80022f4:	f000 fb06 	bl	8002904 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022f8:	2360      	movs	r3, #96	; 0x60
 80022fa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002300:	2300      	movs	r3, #0
 8002302:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002304:	2300      	movs	r3, #0
 8002306:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002308:	463b      	mov	r3, r7
 800230a:	2200      	movs	r2, #0
 800230c:	4619      	mov	r1, r3
 800230e:	4818      	ldr	r0, [pc, #96]	; (8002370 <MX_TIM4_Init+0xf0>)
 8002310:	f00d fcd2 	bl	800fcb8 <HAL_TIM_PWM_ConfigChannel>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800231a:	f000 faf3 	bl	8002904 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800231e:	463b      	mov	r3, r7
 8002320:	2204      	movs	r2, #4
 8002322:	4619      	mov	r1, r3
 8002324:	4812      	ldr	r0, [pc, #72]	; (8002370 <MX_TIM4_Init+0xf0>)
 8002326:	f00d fcc7 	bl	800fcb8 <HAL_TIM_PWM_ConfigChannel>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8002330:	f000 fae8 	bl	8002904 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002334:	463b      	mov	r3, r7
 8002336:	2208      	movs	r2, #8
 8002338:	4619      	mov	r1, r3
 800233a:	480d      	ldr	r0, [pc, #52]	; (8002370 <MX_TIM4_Init+0xf0>)
 800233c:	f00d fcbc 	bl	800fcb8 <HAL_TIM_PWM_ConfigChannel>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 8002346:	f000 fadd 	bl	8002904 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800234a:	463b      	mov	r3, r7
 800234c:	220c      	movs	r2, #12
 800234e:	4619      	mov	r1, r3
 8002350:	4807      	ldr	r0, [pc, #28]	; (8002370 <MX_TIM4_Init+0xf0>)
 8002352:	f00d fcb1 	bl	800fcb8 <HAL_TIM_PWM_ConfigChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 800235c:	f000 fad2 	bl	8002904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002360:	4803      	ldr	r0, [pc, #12]	; (8002370 <MX_TIM4_Init+0xf0>)
 8002362:	f000 ffc3 	bl	80032ec <HAL_TIM_MspPostInit>

}
 8002366:	bf00      	nop
 8002368:	3728      	adds	r7, #40	; 0x28
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	24001064 	.word	0x24001064
 8002374:	40000800 	.word	0x40000800

08002378 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b08a      	sub	sp, #40	; 0x28
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800237e:	f107 031c 	add.w	r3, r7, #28
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800238a:	463b      	mov	r3, r7
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	60da      	str	r2, [r3, #12]
 8002396:	611a      	str	r2, [r3, #16]
 8002398:	615a      	str	r2, [r3, #20]
 800239a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800239c:	4b21      	ldr	r3, [pc, #132]	; (8002424 <MX_TIM5_Init+0xac>)
 800239e:	4a22      	ldr	r2, [pc, #136]	; (8002428 <MX_TIM5_Init+0xb0>)
 80023a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80023a2:	4b20      	ldr	r3, [pc, #128]	; (8002424 <MX_TIM5_Init+0xac>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a8:	4b1e      	ldr	r3, [pc, #120]	; (8002424 <MX_TIM5_Init+0xac>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 80023ae:	4b1d      	ldr	r3, [pc, #116]	; (8002424 <MX_TIM5_Init+0xac>)
 80023b0:	225a      	movs	r2, #90	; 0x5a
 80023b2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b4:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <MX_TIM5_Init+0xac>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ba:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <MX_TIM5_Init+0xac>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80023c0:	4818      	ldr	r0, [pc, #96]	; (8002424 <MX_TIM5_Init+0xac>)
 80023c2:	f00c ffb2 	bl	800f32a <HAL_TIM_PWM_Init>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80023cc:	f000 fa9a 	bl	8002904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023d4:	2300      	movs	r3, #0
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	4619      	mov	r1, r3
 80023de:	4811      	ldr	r0, [pc, #68]	; (8002424 <MX_TIM5_Init+0xac>)
 80023e0:	f00e fa38 	bl	8010854 <HAL_TIMEx_MasterConfigSynchronization>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80023ea:	f000 fa8b 	bl	8002904 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ee:	2360      	movs	r3, #96	; 0x60
 80023f0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023fe:	463b      	mov	r3, r7
 8002400:	220c      	movs	r2, #12
 8002402:	4619      	mov	r1, r3
 8002404:	4807      	ldr	r0, [pc, #28]	; (8002424 <MX_TIM5_Init+0xac>)
 8002406:	f00d fc57 	bl	800fcb8 <HAL_TIM_PWM_ConfigChannel>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002410:	f000 fa78 	bl	8002904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002414:	4803      	ldr	r0, [pc, #12]	; (8002424 <MX_TIM5_Init+0xac>)
 8002416:	f000 ff69 	bl	80032ec <HAL_TIM_MspPostInit>

}
 800241a:	bf00      	nop
 800241c:	3728      	adds	r7, #40	; 0x28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	240010b0 	.word	0x240010b0
 8002428:	40000c00 	.word	0x40000c00

0800242c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002430:	4b22      	ldr	r3, [pc, #136]	; (80024bc <MX_UART4_Init+0x90>)
 8002432:	4a23      	ldr	r2, [pc, #140]	; (80024c0 <MX_UART4_Init+0x94>)
 8002434:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002436:	4b21      	ldr	r3, [pc, #132]	; (80024bc <MX_UART4_Init+0x90>)
 8002438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800243c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800243e:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <MX_UART4_Init+0x90>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002444:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <MX_UART4_Init+0x90>)
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800244a:	4b1c      	ldr	r3, [pc, #112]	; (80024bc <MX_UART4_Init+0x90>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002450:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <MX_UART4_Init+0x90>)
 8002452:	220c      	movs	r2, #12
 8002454:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002456:	4b19      	ldr	r3, [pc, #100]	; (80024bc <MX_UART4_Init+0x90>)
 8002458:	2200      	movs	r2, #0
 800245a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800245c:	4b17      	ldr	r3, [pc, #92]	; (80024bc <MX_UART4_Init+0x90>)
 800245e:	2200      	movs	r2, #0
 8002460:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002462:	4b16      	ldr	r3, [pc, #88]	; (80024bc <MX_UART4_Init+0x90>)
 8002464:	2200      	movs	r2, #0
 8002466:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002468:	4b14      	ldr	r3, [pc, #80]	; (80024bc <MX_UART4_Init+0x90>)
 800246a:	2200      	movs	r2, #0
 800246c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <MX_UART4_Init+0x90>)
 8002470:	2200      	movs	r2, #0
 8002472:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002474:	4811      	ldr	r0, [pc, #68]	; (80024bc <MX_UART4_Init+0x90>)
 8002476:	f00e faa7 	bl	80109c8 <HAL_UART_Init>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002480:	f000 fa40 	bl	8002904 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002484:	2100      	movs	r1, #0
 8002486:	480d      	ldr	r0, [pc, #52]	; (80024bc <MX_UART4_Init+0x90>)
 8002488:	f00f fbad 	bl	8011be6 <HAL_UARTEx_SetTxFifoThreshold>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002492:	f000 fa37 	bl	8002904 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002496:	2100      	movs	r1, #0
 8002498:	4808      	ldr	r0, [pc, #32]	; (80024bc <MX_UART4_Init+0x90>)
 800249a:	f00f fbe2 	bl	8011c62 <HAL_UARTEx_SetRxFifoThreshold>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 80024a4:	f000 fa2e 	bl	8002904 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80024a8:	4804      	ldr	r0, [pc, #16]	; (80024bc <MX_UART4_Init+0x90>)
 80024aa:	f00f fb63 	bl	8011b74 <HAL_UARTEx_DisableFifoMode>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d001      	beq.n	80024b8 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80024b4:	f000 fa26 	bl	8002904 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	24001354 	.word	0x24001354
 80024c0:	40004c00 	.word	0x40004c00

080024c4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80024c8:	4b22      	ldr	r3, [pc, #136]	; (8002554 <MX_USART6_UART_Init+0x90>)
 80024ca:	4a23      	ldr	r2, [pc, #140]	; (8002558 <MX_USART6_UART_Init+0x94>)
 80024cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80024ce:	4b21      	ldr	r3, [pc, #132]	; (8002554 <MX_USART6_UART_Init+0x90>)
 80024d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80024d6:	4b1f      	ldr	r3, [pc, #124]	; (8002554 <MX_USART6_UART_Init+0x90>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024dc:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <MX_USART6_UART_Init+0x90>)
 80024de:	2200      	movs	r2, #0
 80024e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024e2:	4b1c      	ldr	r3, [pc, #112]	; (8002554 <MX_USART6_UART_Init+0x90>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024e8:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <MX_USART6_UART_Init+0x90>)
 80024ea:	220c      	movs	r2, #12
 80024ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ee:	4b19      	ldr	r3, [pc, #100]	; (8002554 <MX_USART6_UART_Init+0x90>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f4:	4b17      	ldr	r3, [pc, #92]	; (8002554 <MX_USART6_UART_Init+0x90>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024fa:	4b16      	ldr	r3, [pc, #88]	; (8002554 <MX_USART6_UART_Init+0x90>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002500:	4b14      	ldr	r3, [pc, #80]	; (8002554 <MX_USART6_UART_Init+0x90>)
 8002502:	2200      	movs	r2, #0
 8002504:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002506:	4b13      	ldr	r3, [pc, #76]	; (8002554 <MX_USART6_UART_Init+0x90>)
 8002508:	2200      	movs	r2, #0
 800250a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800250c:	4811      	ldr	r0, [pc, #68]	; (8002554 <MX_USART6_UART_Init+0x90>)
 800250e:	f00e fa5b 	bl	80109c8 <HAL_UART_Init>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d001      	beq.n	800251c <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 8002518:	f000 f9f4 	bl	8002904 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800251c:	2100      	movs	r1, #0
 800251e:	480d      	ldr	r0, [pc, #52]	; (8002554 <MX_USART6_UART_Init+0x90>)
 8002520:	f00f fb61 	bl	8011be6 <HAL_UARTEx_SetTxFifoThreshold>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d001      	beq.n	800252e <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 800252a:	f000 f9eb 	bl	8002904 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800252e:	2100      	movs	r1, #0
 8002530:	4808      	ldr	r0, [pc, #32]	; (8002554 <MX_USART6_UART_Init+0x90>)
 8002532:	f00f fb96 	bl	8011c62 <HAL_UARTEx_SetRxFifoThreshold>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 800253c:	f000 f9e2 	bl	8002904 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002540:	4804      	ldr	r0, [pc, #16]	; (8002554 <MX_USART6_UART_Init+0x90>)
 8002542:	f00f fb17 	bl	8011b74 <HAL_UARTEx_DisableFifoMode>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 800254c:	f000 f9da 	bl	8002904 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}
 8002554:	240013e8 	.word	0x240013e8
 8002558:	40011400 	.word	0x40011400

0800255c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002562:	4b2d      	ldr	r3, [pc, #180]	; (8002618 <MX_DMA_Init+0xbc>)
 8002564:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002568:	4a2b      	ldr	r2, [pc, #172]	; (8002618 <MX_DMA_Init+0xbc>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002572:	4b29      	ldr	r3, [pc, #164]	; (8002618 <MX_DMA_Init+0xbc>)
 8002574:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002580:	4b25      	ldr	r3, [pc, #148]	; (8002618 <MX_DMA_Init+0xbc>)
 8002582:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002586:	4a24      	ldr	r2, [pc, #144]	; (8002618 <MX_DMA_Init+0xbc>)
 8002588:	f043 0302 	orr.w	r3, r3, #2
 800258c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002590:	4b21      	ldr	r3, [pc, #132]	; (8002618 <MX_DMA_Init+0xbc>)
 8002592:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002596:	f003 0302 	and.w	r3, r3, #2
 800259a:	603b      	str	r3, [r7, #0]
 800259c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	200b      	movs	r0, #11
 80025a4:	f002 fe9d 	bl	80052e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80025a8:	200b      	movs	r0, #11
 80025aa:	f002 feb4 	bl	8005316 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80025ae:	2200      	movs	r2, #0
 80025b0:	2100      	movs	r1, #0
 80025b2:	200c      	movs	r0, #12
 80025b4:	f002 fe95 	bl	80052e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80025b8:	200c      	movs	r0, #12
 80025ba:	f002 feac 	bl	8005316 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80025be:	2200      	movs	r2, #0
 80025c0:	2100      	movs	r1, #0
 80025c2:	200d      	movs	r0, #13
 80025c4:	f002 fe8d 	bl	80052e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80025c8:	200d      	movs	r0, #13
 80025ca:	f002 fea4 	bl	8005316 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2100      	movs	r1, #0
 80025d2:	200e      	movs	r0, #14
 80025d4:	f002 fe85 	bl	80052e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80025d8:	200e      	movs	r0, #14
 80025da:	f002 fe9c 	bl	8005316 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80025de:	2200      	movs	r2, #0
 80025e0:	2100      	movs	r1, #0
 80025e2:	200f      	movs	r0, #15
 80025e4:	f002 fe7d 	bl	80052e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80025e8:	200f      	movs	r0, #15
 80025ea:	f002 fe94 	bl	8005316 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80025ee:	2200      	movs	r2, #0
 80025f0:	2100      	movs	r1, #0
 80025f2:	2010      	movs	r0, #16
 80025f4:	f002 fe75 	bl	80052e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80025f8:	2010      	movs	r0, #16
 80025fa:	f002 fe8c 	bl	8005316 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2100      	movs	r1, #0
 8002602:	2046      	movs	r0, #70	; 0x46
 8002604:	f002 fe6d 	bl	80052e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002608:	2046      	movs	r0, #70	; 0x46
 800260a:	f002 fe84 	bl	8005316 <HAL_NVIC_EnableIRQ>

}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	58024400 	.word	0x58024400

0800261c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08e      	sub	sp, #56	; 0x38
 8002620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	60da      	str	r2, [r3, #12]
 8002630:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002632:	4bac      	ldr	r3, [pc, #688]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 8002634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002638:	4aaa      	ldr	r2, [pc, #680]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 800263a:	f043 0310 	orr.w	r3, r3, #16
 800263e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002642:	4ba8      	ldr	r3, [pc, #672]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 8002644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	623b      	str	r3, [r7, #32]
 800264e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002650:	4ba4      	ldr	r3, [pc, #656]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 8002652:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002656:	4aa3      	ldr	r2, [pc, #652]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 8002658:	f043 0320 	orr.w	r3, r3, #32
 800265c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002660:	4ba0      	ldr	r3, [pc, #640]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 8002662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800266e:	4b9d      	ldr	r3, [pc, #628]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 8002670:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002674:	4a9b      	ldr	r2, [pc, #620]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 8002676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800267a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800267e:	4b99      	ldr	r3, [pc, #612]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 8002680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800268c:	4b95      	ldr	r3, [pc, #596]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 800268e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002692:	4a94      	ldr	r2, [pc, #592]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 8002694:	f043 0304 	orr.w	r3, r3, #4
 8002698:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800269c:	4b91      	ldr	r3, [pc, #580]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 800269e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026aa:	4b8e      	ldr	r3, [pc, #568]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 80026ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b0:	4a8c      	ldr	r2, [pc, #560]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026ba:	4b8a      	ldr	r3, [pc, #552]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 80026bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c8:	4b86      	ldr	r3, [pc, #536]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 80026ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ce:	4a85      	ldr	r2, [pc, #532]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 80026d0:	f043 0302 	orr.w	r3, r3, #2
 80026d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026d8:	4b82      	ldr	r3, [pc, #520]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 80026da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	60fb      	str	r3, [r7, #12]
 80026e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026e6:	4b7f      	ldr	r3, [pc, #508]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 80026e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026ec:	4a7d      	ldr	r2, [pc, #500]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 80026ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026f6:	4b7b      	ldr	r3, [pc, #492]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 80026f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002704:	4b77      	ldr	r3, [pc, #476]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 8002706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800270a:	4a76      	ldr	r2, [pc, #472]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 800270c:	f043 0308 	orr.w	r3, r3, #8
 8002710:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002714:	4b73      	ldr	r3, [pc, #460]	; (80028e4 <MX_GPIO_Init+0x2c8>)
 8002716:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800271a:	f003 0308 	and.w	r3, r3, #8
 800271e:	607b      	str	r3, [r7, #4]
 8002720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 8002722:	2200      	movs	r2, #0
 8002724:	f241 5104 	movw	r1, #5380	; 0x1504
 8002728:	486f      	ldr	r0, [pc, #444]	; (80028e8 <MX_GPIO_Init+0x2cc>)
 800272a:	f005 fc07 	bl	8007f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 800272e:	2200      	movs	r2, #0
 8002730:	f248 0106 	movw	r1, #32774	; 0x8006
 8002734:	486d      	ldr	r0, [pc, #436]	; (80028ec <MX_GPIO_Init+0x2d0>)
 8002736:	f005 fc01 	bl	8007f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800273a:	2200      	movs	r2, #0
 800273c:	2130      	movs	r1, #48	; 0x30
 800273e:	486c      	ldr	r0, [pc, #432]	; (80028f0 <MX_GPIO_Init+0x2d4>)
 8002740:	f005 fbfc 	bl	8007f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, GPIO_PIN_RESET);
 8002744:	2200      	movs	r2, #0
 8002746:	2102      	movs	r1, #2
 8002748:	486a      	ldr	r0, [pc, #424]	; (80028f4 <MX_GPIO_Init+0x2d8>)
 800274a:	f005 fbf7 	bl	8007f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 800274e:	2200      	movs	r2, #0
 8002750:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002754:	4868      	ldr	r0, [pc, #416]	; (80028f8 <MX_GPIO_Init+0x2dc>)
 8002756:	f005 fbf1 	bl	8007f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800275a:	2200      	movs	r2, #0
 800275c:	210e      	movs	r1, #14
 800275e:	4867      	ldr	r0, [pc, #412]	; (80028fc <MX_GPIO_Init+0x2e0>)
 8002760:	f005 fbec 	bl	8007f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0, GPIO_PIN_RESET);
 8002764:	2200      	movs	r2, #0
 8002766:	f240 3101 	movw	r1, #769	; 0x301
 800276a:	4865      	ldr	r0, [pc, #404]	; (8002900 <MX_GPIO_Init+0x2e4>)
 800276c:	f005 fbe6 	bl	8007f3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8002770:	f241 5304 	movw	r3, #5380	; 0x1504
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002776:	2301      	movs	r3, #1
 8002778:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277e:	2300      	movs	r3, #0
 8002780:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002786:	4619      	mov	r1, r3
 8002788:	4857      	ldr	r0, [pc, #348]	; (80028e8 <MX_GPIO_Init+0x2cc>)
 800278a:	f005 fa17 	bl	8007bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 800278e:	f248 0306 	movw	r3, #32774	; 0x8006
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002794:	2301      	movs	r3, #1
 8002796:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002798:	2300      	movs	r3, #0
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800279c:	2300      	movs	r3, #0
 800279e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a4:	4619      	mov	r1, r3
 80027a6:	4851      	ldr	r0, [pc, #324]	; (80028ec <MX_GPIO_Init+0x2d0>)
 80027a8:	f005 fa08 	bl	8007bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80027ac:	2330      	movs	r3, #48	; 0x30
 80027ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027b0:	2301      	movs	r3, #1
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b8:	2300      	movs	r3, #0
 80027ba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c0:	4619      	mov	r1, r3
 80027c2:	484b      	ldr	r0, [pc, #300]	; (80028f0 <MX_GPIO_Init+0x2d4>)
 80027c4:	f005 f9fa 	bl	8007bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PYRO1_Pin */
  GPIO_InitStruct.Pin = PYRO1_Pin;
 80027c8:	2302      	movs	r3, #2
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027cc:	2301      	movs	r3, #1
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d0:	2300      	movs	r3, #0
 80027d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d4:	2300      	movs	r3, #0
 80027d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(PYRO1_GPIO_Port, &GPIO_InitStruct);
 80027d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027dc:	4619      	mov	r1, r3
 80027de:	4845      	ldr	r0, [pc, #276]	; (80028f4 <MX_GPIO_Init+0x2d8>)
 80027e0:	f005 f9ec 	bl	8007bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 80027e4:	2304      	movs	r3, #4
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027e8:	2300      	movs	r3, #0
 80027ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ec:	2301      	movs	r3, #1
 80027ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 80027f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027f4:	4619      	mov	r1, r3
 80027f6:	483f      	ldr	r0, [pc, #252]	; (80028f4 <MX_GPIO_Init+0x2d8>)
 80027f8:	f005 f9e0 	bl	8007bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 80027fc:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8002800:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002802:	2301      	movs	r3, #1
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	2300      	movs	r3, #0
 800280c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800280e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002812:	4619      	mov	r1, r3
 8002814:	4838      	ldr	r0, [pc, #224]	; (80028f8 <MX_GPIO_Init+0x2dc>)
 8002816:	f005 f9d1 	bl	8007bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 800281a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002820:	2300      	movs	r3, #0
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002824:	2301      	movs	r3, #1
 8002826:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800282c:	4619      	mov	r1, r3
 800282e:	4832      	ldr	r0, [pc, #200]	; (80028f8 <MX_GPIO_Init+0x2dc>)
 8002830:	f005 f9c4 	bl	8007bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 8002834:	2301      	movs	r3, #1
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002838:	2300      	movs	r3, #0
 800283a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800283c:	2301      	movs	r3, #1
 800283e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 8002840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002844:	4619      	mov	r1, r3
 8002846:	482d      	ldr	r0, [pc, #180]	; (80028fc <MX_GPIO_Init+0x2e0>)
 8002848:	f005 f9b8 	bl	8007bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 800284c:	230e      	movs	r3, #14
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002850:	2301      	movs	r3, #1
 8002852:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002858:	2300      	movs	r3, #0
 800285a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800285c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002860:	4619      	mov	r1, r3
 8002862:	4826      	ldr	r0, [pc, #152]	; (80028fc <MX_GPIO_Init+0x2e0>)
 8002864:	f005 f9aa 	bl	8007bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002868:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 800286c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800286e:	2300      	movs	r3, #0
 8002870:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002872:	2301      	movs	r3, #1
 8002874:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002876:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800287a:	4619      	mov	r1, r3
 800287c:	481a      	ldr	r0, [pc, #104]	; (80028e8 <MX_GPIO_Init+0x2cc>)
 800287e:	f005 f99d 	bl	8007bbc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0;
 8002882:	f240 3301 	movw	r3, #769	; 0x301
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002888:	2301      	movs	r3, #1
 800288a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002898:	4619      	mov	r1, r3
 800289a:	4819      	ldr	r0, [pc, #100]	; (8002900 <MX_GPIO_Init+0x2e4>)
 800289c:	f005 f98e 	bl	8007bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 80028a0:	2310      	movs	r3, #16
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028a4:	2300      	movs	r3, #0
 80028a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80028ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028b0:	4619      	mov	r1, r3
 80028b2:	4812      	ldr	r0, [pc, #72]	; (80028fc <MX_GPIO_Init+0x2e0>)
 80028b4:	f005 f982 	bl	8007bbc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c6:	2300      	movs	r3, #0
 80028c8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80028ca:	2300      	movs	r3, #0
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d2:	4619      	mov	r1, r3
 80028d4:	4805      	ldr	r0, [pc, #20]	; (80028ec <MX_GPIO_Init+0x2d0>)
 80028d6:	f005 f971 	bl	8007bbc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028da:	bf00      	nop
 80028dc:	3738      	adds	r7, #56	; 0x38
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	58024400 	.word	0x58024400
 80028e8:	58021000 	.word	0x58021000
 80028ec:	58020000 	.word	0x58020000
 80028f0:	58020800 	.word	0x58020800
 80028f4:	58020400 	.word	0x58020400
 80028f8:	58021400 	.word	0x58021400
 80028fc:	58021800 	.word	0x58021800
 8002900:	58020c00 	.word	0x58020c00

08002904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002908:	b672      	cpsid	i
}
 800290a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800290c:	e7fe      	b.n	800290c <Error_Handler+0x8>
	...

08002910 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	4b0a      	ldr	r3, [pc, #40]	; (8002940 <HAL_MspInit+0x30>)
 8002918:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800291c:	4a08      	ldr	r2, [pc, #32]	; (8002940 <HAL_MspInit+0x30>)
 800291e:	f043 0302 	orr.w	r3, r3, #2
 8002922:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002926:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_MspInit+0x30>)
 8002928:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	607b      	str	r3, [r7, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002934:	bf00      	nop
 8002936:	370c      	adds	r7, #12
 8002938:	46bd      	mov	sp, r7
 800293a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293e:	4770      	bx	lr
 8002940:	58024400 	.word	0x58024400

08002944 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b08c      	sub	sp, #48	; 0x30
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800294c:	f107 031c 	add.w	r3, r7, #28
 8002950:	2200      	movs	r2, #0
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	605a      	str	r2, [r3, #4]
 8002956:	609a      	str	r2, [r3, #8]
 8002958:	60da      	str	r2, [r3, #12]
 800295a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a5d      	ldr	r2, [pc, #372]	; (8002ad8 <HAL_ADC_MspInit+0x194>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d159      	bne.n	8002a1a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002966:	4b5d      	ldr	r3, [pc, #372]	; (8002adc <HAL_ADC_MspInit+0x198>)
 8002968:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800296c:	4a5b      	ldr	r2, [pc, #364]	; (8002adc <HAL_ADC_MspInit+0x198>)
 800296e:	f043 0320 	orr.w	r3, r3, #32
 8002972:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002976:	4b59      	ldr	r3, [pc, #356]	; (8002adc <HAL_ADC_MspInit+0x198>)
 8002978:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800297c:	f003 0320 	and.w	r3, r3, #32
 8002980:	61bb      	str	r3, [r7, #24]
 8002982:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002984:	4b55      	ldr	r3, [pc, #340]	; (8002adc <HAL_ADC_MspInit+0x198>)
 8002986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800298a:	4a54      	ldr	r2, [pc, #336]	; (8002adc <HAL_ADC_MspInit+0x198>)
 800298c:	f043 0304 	orr.w	r3, r3, #4
 8002990:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002994:	4b51      	ldr	r3, [pc, #324]	; (8002adc <HAL_ADC_MspInit+0x198>)
 8002996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800299a:	f003 0304 	and.w	r3, r3, #4
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 80029a2:	2301      	movs	r3, #1
 80029a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029a6:	2303      	movs	r3, #3
 80029a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 80029ae:	f107 031c 	add.w	r3, r7, #28
 80029b2:	4619      	mov	r1, r3
 80029b4:	484a      	ldr	r0, [pc, #296]	; (8002ae0 <HAL_ADC_MspInit+0x19c>)
 80029b6:	f005 f901 	bl	8007bbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 80029ba:	4b4a      	ldr	r3, [pc, #296]	; (8002ae4 <HAL_ADC_MspInit+0x1a0>)
 80029bc:	4a4a      	ldr	r2, [pc, #296]	; (8002ae8 <HAL_ADC_MspInit+0x1a4>)
 80029be:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80029c0:	4b48      	ldr	r3, [pc, #288]	; (8002ae4 <HAL_ADC_MspInit+0x1a0>)
 80029c2:	2209      	movs	r2, #9
 80029c4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029c6:	4b47      	ldr	r3, [pc, #284]	; (8002ae4 <HAL_ADC_MspInit+0x1a0>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80029cc:	4b45      	ldr	r3, [pc, #276]	; (8002ae4 <HAL_ADC_MspInit+0x1a0>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80029d2:	4b44      	ldr	r3, [pc, #272]	; (8002ae4 <HAL_ADC_MspInit+0x1a0>)
 80029d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029d8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80029da:	4b42      	ldr	r3, [pc, #264]	; (8002ae4 <HAL_ADC_MspInit+0x1a0>)
 80029dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029e0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80029e2:	4b40      	ldr	r3, [pc, #256]	; (8002ae4 <HAL_ADC_MspInit+0x1a0>)
 80029e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029e8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80029ea:	4b3e      	ldr	r3, [pc, #248]	; (8002ae4 <HAL_ADC_MspInit+0x1a0>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80029f0:	4b3c      	ldr	r3, [pc, #240]	; (8002ae4 <HAL_ADC_MspInit+0x1a0>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029f6:	4b3b      	ldr	r3, [pc, #236]	; (8002ae4 <HAL_ADC_MspInit+0x1a0>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80029fc:	4839      	ldr	r0, [pc, #228]	; (8002ae4 <HAL_ADC_MspInit+0x1a0>)
 80029fe:	f002 fca5 	bl	800534c <HAL_DMA_Init>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002a08:	f7ff ff7c 	bl	8002904 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a35      	ldr	r2, [pc, #212]	; (8002ae4 <HAL_ADC_MspInit+0x1a0>)
 8002a10:	659a      	str	r2, [r3, #88]	; 0x58
 8002a12:	4a34      	ldr	r2, [pc, #208]	; (8002ae4 <HAL_ADC_MspInit+0x1a0>)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002a18:	e059      	b.n	8002ace <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a33      	ldr	r2, [pc, #204]	; (8002aec <HAL_ADC_MspInit+0x1a8>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d154      	bne.n	8002ace <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002a24:	4b2d      	ldr	r3, [pc, #180]	; (8002adc <HAL_ADC_MspInit+0x198>)
 8002a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a2a:	4a2c      	ldr	r2, [pc, #176]	; (8002adc <HAL_ADC_MspInit+0x198>)
 8002a2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a34:	4b29      	ldr	r3, [pc, #164]	; (8002adc <HAL_ADC_MspInit+0x198>)
 8002a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a3e:	613b      	str	r3, [r7, #16]
 8002a40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a42:	4b26      	ldr	r3, [pc, #152]	; (8002adc <HAL_ADC_MspInit+0x198>)
 8002a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a48:	4a24      	ldr	r2, [pc, #144]	; (8002adc <HAL_ADC_MspInit+0x198>)
 8002a4a:	f043 0304 	orr.w	r3, r3, #4
 8002a4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a52:	4b22      	ldr	r3, [pc, #136]	; (8002adc <HAL_ADC_MspInit+0x198>)
 8002a54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002a60:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002a64:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002a68:	f000 ffda 	bl	8003a20 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002a6c:	4b20      	ldr	r3, [pc, #128]	; (8002af0 <HAL_ADC_MspInit+0x1ac>)
 8002a6e:	4a21      	ldr	r2, [pc, #132]	; (8002af4 <HAL_ADC_MspInit+0x1b0>)
 8002a70:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002a72:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <HAL_ADC_MspInit+0x1ac>)
 8002a74:	2273      	movs	r2, #115	; 0x73
 8002a76:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a78:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HAL_ADC_MspInit+0x1ac>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a7e:	4b1c      	ldr	r3, [pc, #112]	; (8002af0 <HAL_ADC_MspInit+0x1ac>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002a84:	4b1a      	ldr	r3, [pc, #104]	; (8002af0 <HAL_ADC_MspInit+0x1ac>)
 8002a86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a8a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a8c:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <HAL_ADC_MspInit+0x1ac>)
 8002a8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a92:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a94:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <HAL_ADC_MspInit+0x1ac>)
 8002a96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a9a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002a9c:	4b14      	ldr	r3, [pc, #80]	; (8002af0 <HAL_ADC_MspInit+0x1ac>)
 8002a9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aa2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002aa4:	4b12      	ldr	r3, [pc, #72]	; (8002af0 <HAL_ADC_MspInit+0x1ac>)
 8002aa6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002aaa:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aac:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <HAL_ADC_MspInit+0x1ac>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002ab2:	480f      	ldr	r0, [pc, #60]	; (8002af0 <HAL_ADC_MspInit+0x1ac>)
 8002ab4:	f002 fc4a 	bl	800534c <HAL_DMA_Init>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002abe:	f7ff ff21 	bl	8002904 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <HAL_ADC_MspInit+0x1ac>)
 8002ac6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ac8:	4a09      	ldr	r2, [pc, #36]	; (8002af0 <HAL_ADC_MspInit+0x1ac>)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002ace:	bf00      	nop
 8002ad0:	3730      	adds	r7, #48	; 0x30
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40022000 	.word	0x40022000
 8002adc:	58024400 	.word	0x58024400
 8002ae0:	58020800 	.word	0x58020800
 8002ae4:	24000bd4 	.word	0x24000bd4
 8002ae8:	40020088 	.word	0x40020088
 8002aec:	58026000 	.word	0x58026000
 8002af0:	24000c4c 	.word	0x24000c4c
 8002af4:	400204b8 	.word	0x400204b8

08002af8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b0b8      	sub	sp, #224	; 0xe0
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b10:	f107 0310 	add.w	r3, r7, #16
 8002b14:	22b8      	movs	r2, #184	; 0xb8
 8002b16:	2100      	movs	r1, #0
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f014 f9ef 	bl	8016efc <memset>
  if(hfdcan->Instance==FDCAN3)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a26      	ldr	r2, [pc, #152]	; (8002bbc <HAL_FDCAN_MspInit+0xc4>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d144      	bne.n	8002bb2 <HAL_FDCAN_MspInit+0xba>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002b28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b38:	f107 0310 	add.w	r3, r7, #16
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f007 fe11 	bl	800a764 <HAL_RCCEx_PeriphCLKConfig>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_FDCAN_MspInit+0x54>
    {
      Error_Handler();
 8002b48:	f7ff fedc 	bl	8002904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002b4c:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <HAL_FDCAN_MspInit+0xc8>)
 8002b4e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002b52:	4a1b      	ldr	r2, [pc, #108]	; (8002bc0 <HAL_FDCAN_MspInit+0xc8>)
 8002b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b58:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002b5c:	4b18      	ldr	r3, [pc, #96]	; (8002bc0 <HAL_FDCAN_MspInit+0xc8>)
 8002b5e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b6a:	4b15      	ldr	r3, [pc, #84]	; (8002bc0 <HAL_FDCAN_MspInit+0xc8>)
 8002b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b70:	4a13      	ldr	r2, [pc, #76]	; (8002bc0 <HAL_FDCAN_MspInit+0xc8>)
 8002b72:	f043 0320 	orr.w	r3, r3, #32
 8002b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b7a:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <HAL_FDCAN_MspInit+0xc8>)
 8002b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b80:	f003 0320 	and.w	r3, r3, #32
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b88:	23c0      	movs	r3, #192	; 0xc0
 8002b8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b8e:	2302      	movs	r3, #2
 8002b90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ba6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002baa:	4619      	mov	r1, r3
 8002bac:	4805      	ldr	r0, [pc, #20]	; (8002bc4 <HAL_FDCAN_MspInit+0xcc>)
 8002bae:	f005 f805 	bl	8007bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002bb2:	bf00      	nop
 8002bb4:	37e0      	adds	r7, #224	; 0xe0
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	4000d400 	.word	0x4000d400
 8002bc0:	58024400 	.word	0x58024400
 8002bc4:	58021400 	.word	0x58021400

08002bc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b0b8      	sub	sp, #224	; 0xe0
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	60da      	str	r2, [r3, #12]
 8002bde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002be0:	f107 0310 	add.w	r3, r7, #16
 8002be4:	22b8      	movs	r2, #184	; 0xb8
 8002be6:	2100      	movs	r1, #0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f014 f987 	bl	8016efc <memset>
  if(hi2c->Instance==I2C2)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a26      	ldr	r2, [pc, #152]	; (8002c8c <HAL_I2C_MspInit+0xc4>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d145      	bne.n	8002c84 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002bf8:	f04f 0208 	mov.w	r2, #8
 8002bfc:	f04f 0300 	mov.w	r3, #0
 8002c00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002c04:	2300      	movs	r3, #0
 8002c06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c0a:	f107 0310 	add.w	r3, r7, #16
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f007 fda8 	bl	800a764 <HAL_RCCEx_PeriphCLKConfig>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002c1a:	f7ff fe73 	bl	8002904 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <HAL_I2C_MspInit+0xc8>)
 8002c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c24:	4a1a      	ldr	r2, [pc, #104]	; (8002c90 <HAL_I2C_MspInit+0xc8>)
 8002c26:	f043 0320 	orr.w	r3, r3, #32
 8002c2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c2e:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <HAL_I2C_MspInit+0xc8>)
 8002c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c34:	f003 0320 	and.w	r3, r3, #32
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c42:	2312      	movs	r3, #18
 8002c44:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002c54:	2304      	movs	r3, #4
 8002c56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c5a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002c5e:	4619      	mov	r1, r3
 8002c60:	480c      	ldr	r0, [pc, #48]	; (8002c94 <HAL_I2C_MspInit+0xcc>)
 8002c62:	f004 ffab 	bl	8007bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002c66:	4b0a      	ldr	r3, [pc, #40]	; (8002c90 <HAL_I2C_MspInit+0xc8>)
 8002c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c6c:	4a08      	ldr	r2, [pc, #32]	; (8002c90 <HAL_I2C_MspInit+0xc8>)
 8002c6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c76:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_I2C_MspInit+0xc8>)
 8002c78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c80:	60bb      	str	r3, [r7, #8]
 8002c82:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002c84:	bf00      	nop
 8002c86:	37e0      	adds	r7, #224	; 0xe0
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40005800 	.word	0x40005800
 8002c90:	58024400 	.word	0x58024400
 8002c94:	58021400 	.word	0x58021400

08002c98 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b0ba      	sub	sp, #232	; 0xe8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002cb0:	f107 0318 	add.w	r3, r7, #24
 8002cb4:	22b8      	movs	r2, #184	; 0xb8
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f014 f91f 	bl	8016efc <memset>
  if(hsd->Instance==SDMMC2)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a5d      	ldr	r2, [pc, #372]	; (8002e38 <HAL_SD_MspInit+0x1a0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	f040 80b3 	bne.w	8002e30 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002cca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cda:	f107 0318 	add.w	r3, r7, #24
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f007 fd40 	bl	800a764 <HAL_RCCEx_PeriphCLKConfig>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002cea:	f7ff fe0b 	bl	8002904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002cee:	4b53      	ldr	r3, [pc, #332]	; (8002e3c <HAL_SD_MspInit+0x1a4>)
 8002cf0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002cf4:	4a51      	ldr	r2, [pc, #324]	; (8002e3c <HAL_SD_MspInit+0x1a4>)
 8002cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cfa:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002cfe:	4b4f      	ldr	r3, [pc, #316]	; (8002e3c <HAL_SD_MspInit+0x1a4>)
 8002d00:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002d04:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d0c:	4b4b      	ldr	r3, [pc, #300]	; (8002e3c <HAL_SD_MspInit+0x1a4>)
 8002d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d12:	4a4a      	ldr	r2, [pc, #296]	; (8002e3c <HAL_SD_MspInit+0x1a4>)
 8002d14:	f043 0308 	orr.w	r3, r3, #8
 8002d18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d1c:	4b47      	ldr	r3, [pc, #284]	; (8002e3c <HAL_SD_MspInit+0x1a4>)
 8002d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d2a:	4b44      	ldr	r3, [pc, #272]	; (8002e3c <HAL_SD_MspInit+0x1a4>)
 8002d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d30:	4a42      	ldr	r2, [pc, #264]	; (8002e3c <HAL_SD_MspInit+0x1a4>)
 8002d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d3a:	4b40      	ldr	r3, [pc, #256]	; (8002e3c <HAL_SD_MspInit+0x1a4>)
 8002d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d44:	60fb      	str	r3, [r7, #12]
 8002d46:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002d48:	2340      	movs	r3, #64	; 0x40
 8002d4a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d54:	2300      	movs	r3, #0
 8002d56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002d60:	230b      	movs	r3, #11
 8002d62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d66:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4834      	ldr	r0, [pc, #208]	; (8002e40 <HAL_SD_MspInit+0x1a8>)
 8002d6e:	f004 ff25 	bl	8007bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002d72:	2380      	movs	r3, #128	; 0x80
 8002d74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d78:	2302      	movs	r3, #2
 8002d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d84:	2303      	movs	r3, #3
 8002d86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002d8a:	230b      	movs	r3, #11
 8002d8c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d90:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d94:	4619      	mov	r1, r3
 8002d96:	482a      	ldr	r0, [pc, #168]	; (8002e40 <HAL_SD_MspInit+0x1a8>)
 8002d98:	f004 ff10 	bl	8007bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002da0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db0:	2303      	movs	r3, #3
 8002db2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002db6:	230b      	movs	r3, #11
 8002db8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002dbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4820      	ldr	r0, [pc, #128]	; (8002e44 <HAL_SD_MspInit+0x1ac>)
 8002dc4:	f004 fefa 	bl	8007bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002dcc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8002de2:	230b      	movs	r3, #11
 8002de4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002de8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002dec:	4619      	mov	r1, r3
 8002dee:	4815      	ldr	r0, [pc, #84]	; (8002e44 <HAL_SD_MspInit+0x1ac>)
 8002df0:	f004 fee4 	bl	8007bbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002df4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002df8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8002e0e:	230a      	movs	r3, #10
 8002e10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002e14:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e18:	4619      	mov	r1, r3
 8002e1a:	480a      	ldr	r0, [pc, #40]	; (8002e44 <HAL_SD_MspInit+0x1ac>)
 8002e1c:	f004 fece 	bl	8007bbc <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8002e20:	2200      	movs	r2, #0
 8002e22:	2100      	movs	r1, #0
 8002e24:	207c      	movs	r0, #124	; 0x7c
 8002e26:	f002 fa5c 	bl	80052e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8002e2a:	207c      	movs	r0, #124	; 0x7c
 8002e2c:	f002 fa73 	bl	8005316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8002e30:	bf00      	nop
 8002e32:	37e8      	adds	r7, #232	; 0xe8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	48022400 	.word	0x48022400
 8002e3c:	58024400 	.word	0x58024400
 8002e40:	58020c00 	.word	0x58020c00
 8002e44:	58021800 	.word	0x58021800

08002e48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08e      	sub	sp, #56	; 0x38
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a4f      	ldr	r2, [pc, #316]	; (8002fa4 <HAL_SPI_MspInit+0x15c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d12e      	bne.n	8002ec8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e6a:	4b4f      	ldr	r3, [pc, #316]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002e6c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e70:	4a4d      	ldr	r2, [pc, #308]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002e72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002e7a:	4b4b      	ldr	r3, [pc, #300]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002e7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002e80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e84:	623b      	str	r3, [r7, #32]
 8002e86:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e88:	4b47      	ldr	r3, [pc, #284]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e8e:	4a46      	ldr	r2, [pc, #280]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e98:	4b43      	ldr	r3, [pc, #268]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	61fb      	str	r3, [r7, #28]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ea6:	23e0      	movs	r3, #224	; 0xe0
 8002ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eaa:	2302      	movs	r3, #2
 8002eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002eb6:	2305      	movs	r3, #5
 8002eb8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ebe:	4619      	mov	r1, r3
 8002ec0:	483a      	ldr	r0, [pc, #232]	; (8002fac <HAL_SPI_MspInit+0x164>)
 8002ec2:	f004 fe7b 	bl	8007bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002ec6:	e068      	b.n	8002f9a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a38      	ldr	r2, [pc, #224]	; (8002fb0 <HAL_SPI_MspInit+0x168>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d12f      	bne.n	8002f32 <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002ed2:	4b35      	ldr	r3, [pc, #212]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002ed4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ed8:	4a33      	ldr	r2, [pc, #204]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002eda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ede:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ee2:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002ee4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ee8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef0:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ef6:	4a2c      	ldr	r2, [pc, #176]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002ef8:	f043 0302 	orr.w	r3, r3, #2
 8002efc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f00:	4b29      	ldr	r3, [pc, #164]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002f02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002f0e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8002f12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f14:	2302      	movs	r3, #2
 8002f16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f20:	2305      	movs	r3, #5
 8002f22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4822      	ldr	r0, [pc, #136]	; (8002fb4 <HAL_SPI_MspInit+0x16c>)
 8002f2c:	f004 fe46 	bl	8007bbc <HAL_GPIO_Init>
}
 8002f30:	e033      	b.n	8002f9a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a20      	ldr	r2, [pc, #128]	; (8002fb8 <HAL_SPI_MspInit+0x170>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d12e      	bne.n	8002f9a <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002f3c:	4b1a      	ldr	r3, [pc, #104]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f42:	4a19      	ldr	r2, [pc, #100]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f48:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f4c:	4b16      	ldr	r3, [pc, #88]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002f4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f5a:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f60:	4a11      	ldr	r2, [pc, #68]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002f62:	f043 0304 	orr.w	r3, r3, #4
 8002f66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f6a:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <HAL_SPI_MspInit+0x160>)
 8002f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002f78:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f86:	2300      	movs	r3, #0
 8002f88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f8a:	2306      	movs	r3, #6
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f92:	4619      	mov	r1, r3
 8002f94:	4809      	ldr	r0, [pc, #36]	; (8002fbc <HAL_SPI_MspInit+0x174>)
 8002f96:	f004 fe11 	bl	8007bbc <HAL_GPIO_Init>
}
 8002f9a:	bf00      	nop
 8002f9c:	3738      	adds	r7, #56	; 0x38
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40013000 	.word	0x40013000
 8002fa8:	58024400 	.word	0x58024400
 8002fac:	58020000 	.word	0x58020000
 8002fb0:	40003800 	.word	0x40003800
 8002fb4:	58020400 	.word	0x58020400
 8002fb8:	40003c00 	.word	0x40003c00
 8002fbc:	58020800 	.word	0x58020800

08002fc0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08c      	sub	sp, #48	; 0x30
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc8:	f107 031c 	add.w	r3, r7, #28
 8002fcc:	2200      	movs	r2, #0
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	605a      	str	r2, [r3, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	60da      	str	r2, [r3, #12]
 8002fd6:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe0:	d15d      	bne.n	800309e <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fe2:	4b8e      	ldr	r3, [pc, #568]	; (800321c <HAL_TIM_PWM_MspInit+0x25c>)
 8002fe4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002fe8:	4a8c      	ldr	r2, [pc, #560]	; (800321c <HAL_TIM_PWM_MspInit+0x25c>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002ff2:	4b8a      	ldr	r3, [pc, #552]	; (800321c <HAL_TIM_PWM_MspInit+0x25c>)
 8002ff4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	61bb      	str	r3, [r7, #24]
 8002ffe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003000:	4b86      	ldr	r3, [pc, #536]	; (800321c <HAL_TIM_PWM_MspInit+0x25c>)
 8003002:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003006:	4a85      	ldr	r2, [pc, #532]	; (800321c <HAL_TIM_PWM_MspInit+0x25c>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003010:	4b82      	ldr	r3, [pc, #520]	; (800321c <HAL_TIM_PWM_MspInit+0x25c>)
 8003012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	617b      	str	r3, [r7, #20]
 800301c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800301e:	2301      	movs	r3, #1
 8003020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003022:	2302      	movs	r3, #2
 8003024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302a:	2300      	movs	r3, #0
 800302c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800302e:	2301      	movs	r3, #1
 8003030:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003032:	f107 031c 	add.w	r3, r7, #28
 8003036:	4619      	mov	r1, r3
 8003038:	4879      	ldr	r0, [pc, #484]	; (8003220 <HAL_TIM_PWM_MspInit+0x260>)
 800303a:	f004 fdbf 	bl	8007bbc <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 800303e:	4b79      	ldr	r3, [pc, #484]	; (8003224 <HAL_TIM_PWM_MspInit+0x264>)
 8003040:	4a79      	ldr	r2, [pc, #484]	; (8003228 <HAL_TIM_PWM_MspInit+0x268>)
 8003042:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8003044:	4b77      	ldr	r3, [pc, #476]	; (8003224 <HAL_TIM_PWM_MspInit+0x264>)
 8003046:	2214      	movs	r2, #20
 8003048:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800304a:	4b76      	ldr	r3, [pc, #472]	; (8003224 <HAL_TIM_PWM_MspInit+0x264>)
 800304c:	2240      	movs	r2, #64	; 0x40
 800304e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003050:	4b74      	ldr	r3, [pc, #464]	; (8003224 <HAL_TIM_PWM_MspInit+0x264>)
 8003052:	2200      	movs	r2, #0
 8003054:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8003056:	4b73      	ldr	r3, [pc, #460]	; (8003224 <HAL_TIM_PWM_MspInit+0x264>)
 8003058:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800305c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800305e:	4b71      	ldr	r3, [pc, #452]	; (8003224 <HAL_TIM_PWM_MspInit+0x264>)
 8003060:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003064:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003066:	4b6f      	ldr	r3, [pc, #444]	; (8003224 <HAL_TIM_PWM_MspInit+0x264>)
 8003068:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800306c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 800306e:	4b6d      	ldr	r3, [pc, #436]	; (8003224 <HAL_TIM_PWM_MspInit+0x264>)
 8003070:	2200      	movs	r2, #0
 8003072:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8003074:	4b6b      	ldr	r3, [pc, #428]	; (8003224 <HAL_TIM_PWM_MspInit+0x264>)
 8003076:	2200      	movs	r2, #0
 8003078:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800307a:	4b6a      	ldr	r3, [pc, #424]	; (8003224 <HAL_TIM_PWM_MspInit+0x264>)
 800307c:	2200      	movs	r2, #0
 800307e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003080:	4868      	ldr	r0, [pc, #416]	; (8003224 <HAL_TIM_PWM_MspInit+0x264>)
 8003082:	f002 f963 	bl	800534c <HAL_DMA_Init>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 800308c:	f7ff fc3a 	bl	8002904 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a64      	ldr	r2, [pc, #400]	; (8003224 <HAL_TIM_PWM_MspInit+0x264>)
 8003094:	62da      	str	r2, [r3, #44]	; 0x2c
 8003096:	4a63      	ldr	r2, [pc, #396]	; (8003224 <HAL_TIM_PWM_MspInit+0x264>)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800309c:	e119      	b.n	80032d2 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a62      	ldr	r2, [pc, #392]	; (800322c <HAL_TIM_PWM_MspInit+0x26c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d16d      	bne.n	8003184 <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030a8:	4b5c      	ldr	r3, [pc, #368]	; (800321c <HAL_TIM_PWM_MspInit+0x25c>)
 80030aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030ae:	4a5b      	ldr	r2, [pc, #364]	; (800321c <HAL_TIM_PWM_MspInit+0x25c>)
 80030b0:	f043 0302 	orr.w	r3, r3, #2
 80030b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80030b8:	4b58      	ldr	r3, [pc, #352]	; (800321c <HAL_TIM_PWM_MspInit+0x25c>)
 80030ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030be:	f003 0302 	and.w	r3, r3, #2
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 80030c6:	4b5a      	ldr	r3, [pc, #360]	; (8003230 <HAL_TIM_PWM_MspInit+0x270>)
 80030c8:	4a5a      	ldr	r2, [pc, #360]	; (8003234 <HAL_TIM_PWM_MspInit+0x274>)
 80030ca:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80030cc:	4b58      	ldr	r3, [pc, #352]	; (8003230 <HAL_TIM_PWM_MspInit+0x270>)
 80030ce:	2218      	movs	r2, #24
 80030d0:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030d2:	4b57      	ldr	r3, [pc, #348]	; (8003230 <HAL_TIM_PWM_MspInit+0x270>)
 80030d4:	2240      	movs	r2, #64	; 0x40
 80030d6:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80030d8:	4b55      	ldr	r3, [pc, #340]	; (8003230 <HAL_TIM_PWM_MspInit+0x270>)
 80030da:	2200      	movs	r2, #0
 80030dc:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80030de:	4b54      	ldr	r3, [pc, #336]	; (8003230 <HAL_TIM_PWM_MspInit+0x270>)
 80030e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030e4:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80030e6:	4b52      	ldr	r3, [pc, #328]	; (8003230 <HAL_TIM_PWM_MspInit+0x270>)
 80030e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030ec:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80030ee:	4b50      	ldr	r3, [pc, #320]	; (8003230 <HAL_TIM_PWM_MspInit+0x270>)
 80030f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80030f4:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80030f6:	4b4e      	ldr	r3, [pc, #312]	; (8003230 <HAL_TIM_PWM_MspInit+0x270>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80030fc:	4b4c      	ldr	r3, [pc, #304]	; (8003230 <HAL_TIM_PWM_MspInit+0x270>)
 80030fe:	2200      	movs	r2, #0
 8003100:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003102:	4b4b      	ldr	r3, [pc, #300]	; (8003230 <HAL_TIM_PWM_MspInit+0x270>)
 8003104:	2200      	movs	r2, #0
 8003106:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003108:	4849      	ldr	r0, [pc, #292]	; (8003230 <HAL_TIM_PWM_MspInit+0x270>)
 800310a:	f002 f91f 	bl	800534c <HAL_DMA_Init>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 8003114:	f7ff fbf6 	bl	8002904 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	4a45      	ldr	r2, [pc, #276]	; (8003230 <HAL_TIM_PWM_MspInit+0x270>)
 800311c:	629a      	str	r2, [r3, #40]	; 0x28
 800311e:	4a44      	ldr	r2, [pc, #272]	; (8003230 <HAL_TIM_PWM_MspInit+0x270>)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 8003124:	4b44      	ldr	r3, [pc, #272]	; (8003238 <HAL_TIM_PWM_MspInit+0x278>)
 8003126:	4a45      	ldr	r2, [pc, #276]	; (800323c <HAL_TIM_PWM_MspInit+0x27c>)
 8003128:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 800312a:	4b43      	ldr	r3, [pc, #268]	; (8003238 <HAL_TIM_PWM_MspInit+0x278>)
 800312c:	2217      	movs	r2, #23
 800312e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003130:	4b41      	ldr	r3, [pc, #260]	; (8003238 <HAL_TIM_PWM_MspInit+0x278>)
 8003132:	2240      	movs	r2, #64	; 0x40
 8003134:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003136:	4b40      	ldr	r3, [pc, #256]	; (8003238 <HAL_TIM_PWM_MspInit+0x278>)
 8003138:	2200      	movs	r2, #0
 800313a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800313c:	4b3e      	ldr	r3, [pc, #248]	; (8003238 <HAL_TIM_PWM_MspInit+0x278>)
 800313e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003142:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003144:	4b3c      	ldr	r3, [pc, #240]	; (8003238 <HAL_TIM_PWM_MspInit+0x278>)
 8003146:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800314a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800314c:	4b3a      	ldr	r3, [pc, #232]	; (8003238 <HAL_TIM_PWM_MspInit+0x278>)
 800314e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003152:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 8003154:	4b38      	ldr	r3, [pc, #224]	; (8003238 <HAL_TIM_PWM_MspInit+0x278>)
 8003156:	2200      	movs	r2, #0
 8003158:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800315a:	4b37      	ldr	r3, [pc, #220]	; (8003238 <HAL_TIM_PWM_MspInit+0x278>)
 800315c:	2200      	movs	r2, #0
 800315e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003160:	4b35      	ldr	r3, [pc, #212]	; (8003238 <HAL_TIM_PWM_MspInit+0x278>)
 8003162:	2200      	movs	r2, #0
 8003164:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 8003166:	4834      	ldr	r0, [pc, #208]	; (8003238 <HAL_TIM_PWM_MspInit+0x278>)
 8003168:	f002 f8f0 	bl	800534c <HAL_DMA_Init>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 8003172:	f7ff fbc7 	bl	8002904 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a2f      	ldr	r2, [pc, #188]	; (8003238 <HAL_TIM_PWM_MspInit+0x278>)
 800317a:	625a      	str	r2, [r3, #36]	; 0x24
 800317c:	4a2e      	ldr	r2, [pc, #184]	; (8003238 <HAL_TIM_PWM_MspInit+0x278>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003182:	e0a6      	b.n	80032d2 <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a2d      	ldr	r2, [pc, #180]	; (8003240 <HAL_TIM_PWM_MspInit+0x280>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d15e      	bne.n	800324c <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800318e:	4b23      	ldr	r3, [pc, #140]	; (800321c <HAL_TIM_PWM_MspInit+0x25c>)
 8003190:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003194:	4a21      	ldr	r2, [pc, #132]	; (800321c <HAL_TIM_PWM_MspInit+0x25c>)
 8003196:	f043 0304 	orr.w	r3, r3, #4
 800319a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800319e:	4b1f      	ldr	r3, [pc, #124]	; (800321c <HAL_TIM_PWM_MspInit+0x25c>)
 80031a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031a4:	f003 0304 	and.w	r3, r3, #4
 80031a8:	60fb      	str	r3, [r7, #12]
 80031aa:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 80031ac:	4b25      	ldr	r3, [pc, #148]	; (8003244 <HAL_TIM_PWM_MspInit+0x284>)
 80031ae:	4a26      	ldr	r2, [pc, #152]	; (8003248 <HAL_TIM_PWM_MspInit+0x288>)
 80031b0:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <HAL_TIM_PWM_MspInit+0x284>)
 80031b4:	221f      	movs	r2, #31
 80031b6:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031b8:	4b22      	ldr	r3, [pc, #136]	; (8003244 <HAL_TIM_PWM_MspInit+0x284>)
 80031ba:	2240      	movs	r2, #64	; 0x40
 80031bc:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80031be:	4b21      	ldr	r3, [pc, #132]	; (8003244 <HAL_TIM_PWM_MspInit+0x284>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80031c4:	4b1f      	ldr	r3, [pc, #124]	; (8003244 <HAL_TIM_PWM_MspInit+0x284>)
 80031c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031ca:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80031cc:	4b1d      	ldr	r3, [pc, #116]	; (8003244 <HAL_TIM_PWM_MspInit+0x284>)
 80031ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031d2:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80031d4:	4b1b      	ldr	r3, [pc, #108]	; (8003244 <HAL_TIM_PWM_MspInit+0x284>)
 80031d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031da:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80031dc:	4b19      	ldr	r3, [pc, #100]	; (8003244 <HAL_TIM_PWM_MspInit+0x284>)
 80031de:	2200      	movs	r2, #0
 80031e0:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80031e2:	4b18      	ldr	r3, [pc, #96]	; (8003244 <HAL_TIM_PWM_MspInit+0x284>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031e8:	4b16      	ldr	r3, [pc, #88]	; (8003244 <HAL_TIM_PWM_MspInit+0x284>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80031ee:	4815      	ldr	r0, [pc, #84]	; (8003244 <HAL_TIM_PWM_MspInit+0x284>)
 80031f0:	f002 f8ac 	bl	800534c <HAL_DMA_Init>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 80031fa:	f7ff fb83 	bl	8002904 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a10      	ldr	r2, [pc, #64]	; (8003244 <HAL_TIM_PWM_MspInit+0x284>)
 8003202:	62da      	str	r2, [r3, #44]	; 0x2c
 8003204:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <HAL_TIM_PWM_MspInit+0x284>)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800320a:	2200      	movs	r2, #0
 800320c:	2100      	movs	r1, #0
 800320e:	201e      	movs	r0, #30
 8003210:	f002 f867 	bl	80052e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003214:	201e      	movs	r0, #30
 8003216:	f002 f87e 	bl	8005316 <HAL_NVIC_EnableIRQ>
}
 800321a:	e05a      	b.n	80032d2 <HAL_TIM_PWM_MspInit+0x312>
 800321c:	58024400 	.word	0x58024400
 8003220:	58020000 	.word	0x58020000
 8003224:	240010fc 	.word	0x240010fc
 8003228:	40020028 	.word	0x40020028
 800322c:	40000400 	.word	0x40000400
 8003230:	24001174 	.word	0x24001174
 8003234:	40020058 	.word	0x40020058
 8003238:	240011ec 	.word	0x240011ec
 800323c:	40020070 	.word	0x40020070
 8003240:	40000800 	.word	0x40000800
 8003244:	24001264 	.word	0x24001264
 8003248:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a22      	ldr	r2, [pc, #136]	; (80032dc <HAL_TIM_PWM_MspInit+0x31c>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d13d      	bne.n	80032d2 <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003256:	4b22      	ldr	r3, [pc, #136]	; (80032e0 <HAL_TIM_PWM_MspInit+0x320>)
 8003258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800325c:	4a20      	ldr	r2, [pc, #128]	; (80032e0 <HAL_TIM_PWM_MspInit+0x320>)
 800325e:	f043 0308 	orr.w	r3, r3, #8
 8003262:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003266:	4b1e      	ldr	r3, [pc, #120]	; (80032e0 <HAL_TIM_PWM_MspInit+0x320>)
 8003268:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800326c:	f003 0308 	and.w	r3, r3, #8
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 8003274:	4b1b      	ldr	r3, [pc, #108]	; (80032e4 <HAL_TIM_PWM_MspInit+0x324>)
 8003276:	4a1c      	ldr	r2, [pc, #112]	; (80032e8 <HAL_TIM_PWM_MspInit+0x328>)
 8003278:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 800327a:	4b1a      	ldr	r3, [pc, #104]	; (80032e4 <HAL_TIM_PWM_MspInit+0x324>)
 800327c:	223a      	movs	r2, #58	; 0x3a
 800327e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003280:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <HAL_TIM_PWM_MspInit+0x324>)
 8003282:	2240      	movs	r2, #64	; 0x40
 8003284:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8003286:	4b17      	ldr	r3, [pc, #92]	; (80032e4 <HAL_TIM_PWM_MspInit+0x324>)
 8003288:	2200      	movs	r2, #0
 800328a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 800328c:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <HAL_TIM_PWM_MspInit+0x324>)
 800328e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003292:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003294:	4b13      	ldr	r3, [pc, #76]	; (80032e4 <HAL_TIM_PWM_MspInit+0x324>)
 8003296:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800329a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800329c:	4b11      	ldr	r3, [pc, #68]	; (80032e4 <HAL_TIM_PWM_MspInit+0x324>)
 800329e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032a2:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80032a4:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <HAL_TIM_PWM_MspInit+0x324>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80032aa:	4b0e      	ldr	r3, [pc, #56]	; (80032e4 <HAL_TIM_PWM_MspInit+0x324>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <HAL_TIM_PWM_MspInit+0x324>)
 80032b2:	2200      	movs	r2, #0
 80032b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80032b6:	480b      	ldr	r0, [pc, #44]	; (80032e4 <HAL_TIM_PWM_MspInit+0x324>)
 80032b8:	f002 f848 	bl	800534c <HAL_DMA_Init>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d001      	beq.n	80032c6 <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 80032c2:	f7ff fb1f 	bl	8002904 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a06      	ldr	r2, [pc, #24]	; (80032e4 <HAL_TIM_PWM_MspInit+0x324>)
 80032ca:	631a      	str	r2, [r3, #48]	; 0x30
 80032cc:	4a05      	ldr	r2, [pc, #20]	; (80032e4 <HAL_TIM_PWM_MspInit+0x324>)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80032d2:	bf00      	nop
 80032d4:	3730      	adds	r7, #48	; 0x30
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40000c00 	.word	0x40000c00
 80032e0:	58024400 	.word	0x58024400
 80032e4:	240012dc 	.word	0x240012dc
 80032e8:	40020040 	.word	0x40020040

080032ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08c      	sub	sp, #48	; 0x30
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f4:	f107 031c 	add.w	r3, r7, #28
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	609a      	str	r2, [r3, #8]
 8003300:	60da      	str	r2, [r3, #12]
 8003302:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800330c:	d120      	bne.n	8003350 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800330e:	4b52      	ldr	r3, [pc, #328]	; (8003458 <HAL_TIM_MspPostInit+0x16c>)
 8003310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003314:	4a50      	ldr	r2, [pc, #320]	; (8003458 <HAL_TIM_MspPostInit+0x16c>)
 8003316:	f043 0302 	orr.w	r3, r3, #2
 800331a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800331e:	4b4e      	ldr	r3, [pc, #312]	; (8003458 <HAL_TIM_MspPostInit+0x16c>)
 8003320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800332c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003330:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003332:	2302      	movs	r3, #2
 8003334:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003336:	2302      	movs	r3, #2
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800333a:	2300      	movs	r3, #0
 800333c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800333e:	2301      	movs	r3, #1
 8003340:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003342:	f107 031c 	add.w	r3, r7, #28
 8003346:	4619      	mov	r1, r3
 8003348:	4844      	ldr	r0, [pc, #272]	; (800345c <HAL_TIM_MspPostInit+0x170>)
 800334a:	f004 fc37 	bl	8007bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800334e:	e07f      	b.n	8003450 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a42      	ldr	r2, [pc, #264]	; (8003460 <HAL_TIM_MspPostInit+0x174>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d11f      	bne.n	800339a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800335a:	4b3f      	ldr	r3, [pc, #252]	; (8003458 <HAL_TIM_MspPostInit+0x16c>)
 800335c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003360:	4a3d      	ldr	r2, [pc, #244]	; (8003458 <HAL_TIM_MspPostInit+0x16c>)
 8003362:	f043 0302 	orr.w	r3, r3, #2
 8003366:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800336a:	4b3b      	ldr	r3, [pc, #236]	; (8003458 <HAL_TIM_MspPostInit+0x16c>)
 800336c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003378:	2330      	movs	r3, #48	; 0x30
 800337a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800337c:	2302      	movs	r3, #2
 800337e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003380:	2302      	movs	r3, #2
 8003382:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003384:	2300      	movs	r3, #0
 8003386:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003388:	2302      	movs	r3, #2
 800338a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800338c:	f107 031c 	add.w	r3, r7, #28
 8003390:	4619      	mov	r1, r3
 8003392:	4832      	ldr	r0, [pc, #200]	; (800345c <HAL_TIM_MspPostInit+0x170>)
 8003394:	f004 fc12 	bl	8007bbc <HAL_GPIO_Init>
}
 8003398:	e05a      	b.n	8003450 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a31      	ldr	r2, [pc, #196]	; (8003464 <HAL_TIM_MspPostInit+0x178>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d131      	bne.n	8003408 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80033a4:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <HAL_TIM_MspPostInit+0x16c>)
 80033a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033aa:	4a2b      	ldr	r2, [pc, #172]	; (8003458 <HAL_TIM_MspPostInit+0x16c>)
 80033ac:	f043 0308 	orr.w	r3, r3, #8
 80033b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033b4:	4b28      	ldr	r3, [pc, #160]	; (8003458 <HAL_TIM_MspPostInit+0x16c>)
 80033b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	613b      	str	r3, [r7, #16]
 80033c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80033c2:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 80033c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c8:	2302      	movs	r3, #2
 80033ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033cc:	2300      	movs	r3, #0
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033d0:	2300      	movs	r3, #0
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033d4:	2302      	movs	r3, #2
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033d8:	f107 031c 	add.w	r3, r7, #28
 80033dc:	4619      	mov	r1, r3
 80033de:	4822      	ldr	r0, [pc, #136]	; (8003468 <HAL_TIM_MspPostInit+0x17c>)
 80033e0:	f004 fbec 	bl	8007bbc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80033e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80033e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ea:	2302      	movs	r3, #2
 80033ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80033ee:	2302      	movs	r3, #2
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f2:	2300      	movs	r3, #0
 80033f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80033f6:	2302      	movs	r3, #2
 80033f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033fa:	f107 031c 	add.w	r3, r7, #28
 80033fe:	4619      	mov	r1, r3
 8003400:	4819      	ldr	r0, [pc, #100]	; (8003468 <HAL_TIM_MspPostInit+0x17c>)
 8003402:	f004 fbdb 	bl	8007bbc <HAL_GPIO_Init>
}
 8003406:	e023      	b.n	8003450 <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a17      	ldr	r2, [pc, #92]	; (800346c <HAL_TIM_MspPostInit+0x180>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d11e      	bne.n	8003450 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <HAL_TIM_MspPostInit+0x16c>)
 8003414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003418:	4a0f      	ldr	r2, [pc, #60]	; (8003458 <HAL_TIM_MspPostInit+0x16c>)
 800341a:	f043 0301 	orr.w	r3, r3, #1
 800341e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003422:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <HAL_TIM_MspPostInit+0x16c>)
 8003424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003430:	2308      	movs	r3, #8
 8003432:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003434:	2302      	movs	r3, #2
 8003436:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003438:	2302      	movs	r3, #2
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800343c:	2300      	movs	r3, #0
 800343e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003440:	2302      	movs	r3, #2
 8003442:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003444:	f107 031c 	add.w	r3, r7, #28
 8003448:	4619      	mov	r1, r3
 800344a:	4809      	ldr	r0, [pc, #36]	; (8003470 <HAL_TIM_MspPostInit+0x184>)
 800344c:	f004 fbb6 	bl	8007bbc <HAL_GPIO_Init>
}
 8003450:	bf00      	nop
 8003452:	3730      	adds	r7, #48	; 0x30
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	58024400 	.word	0x58024400
 800345c:	58020400 	.word	0x58020400
 8003460:	40000400 	.word	0x40000400
 8003464:	40000800 	.word	0x40000800
 8003468:	58020c00 	.word	0x58020c00
 800346c:	40000c00 	.word	0x40000c00
 8003470:	58020000 	.word	0x58020000

08003474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b0ba      	sub	sp, #232	; 0xe8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800348c:	f107 0318 	add.w	r3, r7, #24
 8003490:	22b8      	movs	r2, #184	; 0xb8
 8003492:	2100      	movs	r1, #0
 8003494:	4618      	mov	r0, r3
 8003496:	f013 fd31 	bl	8016efc <memset>
  if(huart->Instance==UART4)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a4d      	ldr	r2, [pc, #308]	; (80035d4 <HAL_UART_MspInit+0x160>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d147      	bne.n	8003534 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80034a4:	f04f 0202 	mov.w	r2, #2
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034b6:	f107 0318 	add.w	r3, r7, #24
 80034ba:	4618      	mov	r0, r3
 80034bc:	f007 f952 	bl	800a764 <HAL_RCCEx_PeriphCLKConfig>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80034c6:	f7ff fa1d 	bl	8002904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80034ca:	4b43      	ldr	r3, [pc, #268]	; (80035d8 <HAL_UART_MspInit+0x164>)
 80034cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034d0:	4a41      	ldr	r2, [pc, #260]	; (80035d8 <HAL_UART_MspInit+0x164>)
 80034d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034da:	4b3f      	ldr	r3, [pc, #252]	; (80035d8 <HAL_UART_MspInit+0x164>)
 80034dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80034e8:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <HAL_UART_MspInit+0x164>)
 80034ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ee:	4a3a      	ldr	r2, [pc, #232]	; (80035d8 <HAL_UART_MspInit+0x164>)
 80034f0:	f043 0302 	orr.w	r3, r3, #2
 80034f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034f8:	4b37      	ldr	r3, [pc, #220]	; (80035d8 <HAL_UART_MspInit+0x164>)
 80034fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	613b      	str	r3, [r7, #16]
 8003504:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003506:	f44f 7340 	mov.w	r3, #768	; 0x300
 800350a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350e:	2302      	movs	r3, #2
 8003510:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003514:	2300      	movs	r3, #0
 8003516:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351a:	2300      	movs	r3, #0
 800351c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003520:	2308      	movs	r3, #8
 8003522:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003526:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800352a:	4619      	mov	r1, r3
 800352c:	482b      	ldr	r0, [pc, #172]	; (80035dc <HAL_UART_MspInit+0x168>)
 800352e:	f004 fb45 	bl	8007bbc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003532:	e04a      	b.n	80035ca <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a29      	ldr	r2, [pc, #164]	; (80035e0 <HAL_UART_MspInit+0x16c>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d145      	bne.n	80035ca <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800353e:	f04f 0201 	mov.w	r2, #1
 8003542:	f04f 0300 	mov.w	r3, #0
 8003546:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 800354a:	2300      	movs	r3, #0
 800354c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003550:	f107 0318 	add.w	r3, r7, #24
 8003554:	4618      	mov	r0, r3
 8003556:	f007 f905 	bl	800a764 <HAL_RCCEx_PeriphCLKConfig>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d001      	beq.n	8003564 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8003560:	f7ff f9d0 	bl	8002904 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003564:	4b1c      	ldr	r3, [pc, #112]	; (80035d8 <HAL_UART_MspInit+0x164>)
 8003566:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800356a:	4a1b      	ldr	r2, [pc, #108]	; (80035d8 <HAL_UART_MspInit+0x164>)
 800356c:	f043 0320 	orr.w	r3, r3, #32
 8003570:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003574:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <HAL_UART_MspInit+0x164>)
 8003576:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	60fb      	str	r3, [r7, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003582:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <HAL_UART_MspInit+0x164>)
 8003584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003588:	4a13      	ldr	r2, [pc, #76]	; (80035d8 <HAL_UART_MspInit+0x164>)
 800358a:	f043 0304 	orr.w	r3, r3, #4
 800358e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003592:	4b11      	ldr	r3, [pc, #68]	; (80035d8 <HAL_UART_MspInit+0x164>)
 8003594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	60bb      	str	r3, [r7, #8]
 800359e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035a0:	23c0      	movs	r3, #192	; 0xc0
 80035a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035a6:	2302      	movs	r3, #2
 80035a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035ac:	2300      	movs	r3, #0
 80035ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035b2:	2300      	movs	r3, #0
 80035b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80035b8:	2307      	movs	r3, #7
 80035ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035be:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80035c2:	4619      	mov	r1, r3
 80035c4:	4807      	ldr	r0, [pc, #28]	; (80035e4 <HAL_UART_MspInit+0x170>)
 80035c6:	f004 faf9 	bl	8007bbc <HAL_GPIO_Init>
}
 80035ca:	bf00      	nop
 80035cc:	37e8      	adds	r7, #232	; 0xe8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40004c00 	.word	0x40004c00
 80035d8:	58024400 	.word	0x58024400
 80035dc:	58020400 	.word	0x58020400
 80035e0:	40011400 	.word	0x40011400
 80035e4:	58020800 	.word	0x58020800

080035e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80035e8:	b480      	push	{r7}
 80035ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80035ec:	e7fe      	b.n	80035ec <NMI_Handler+0x4>

080035ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80035ee:	b480      	push	{r7}
 80035f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035f2:	e7fe      	b.n	80035f2 <HardFault_Handler+0x4>

080035f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035f8:	e7fe      	b.n	80035f8 <MemManage_Handler+0x4>

080035fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035fa:	b480      	push	{r7}
 80035fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035fe:	e7fe      	b.n	80035fe <BusFault_Handler+0x4>

08003600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003604:	e7fe      	b.n	8003604 <UsageFault_Handler+0x4>

08003606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003606:	b480      	push	{r7}
 8003608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr

08003622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003622:	b480      	push	{r7}
 8003624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003626:	bf00      	nop
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003634:	f000 f9b0 	bl	8003998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003638:	bf00      	nop
 800363a:	bd80      	pop	{r7, pc}

0800363c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8003640:	4802      	ldr	r0, [pc, #8]	; (800364c <DMA1_Stream0_IRQHandler+0x10>)
 8003642:	f002 fc45 	bl	8005ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	24001264 	.word	0x24001264

08003650 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003654:	4802      	ldr	r0, [pc, #8]	; (8003660 <DMA1_Stream1_IRQHandler+0x10>)
 8003656:	f002 fc3b 	bl	8005ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800365a:	bf00      	nop
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	240010fc 	.word	0x240010fc

08003664 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8003668:	4802      	ldr	r0, [pc, #8]	; (8003674 <DMA1_Stream2_IRQHandler+0x10>)
 800366a:	f002 fc31 	bl	8005ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800366e:	bf00      	nop
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	240012dc 	.word	0x240012dc

08003678 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 800367c:	4802      	ldr	r0, [pc, #8]	; (8003688 <DMA1_Stream3_IRQHandler+0x10>)
 800367e:	f002 fc27 	bl	8005ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	24001174 	.word	0x24001174

0800368c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 8003690:	4802      	ldr	r0, [pc, #8]	; (800369c <DMA1_Stream4_IRQHandler+0x10>)
 8003692:	f002 fc1d 	bl	8005ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003696:	bf00      	nop
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	240011ec 	.word	0x240011ec

080036a0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80036a4:	4802      	ldr	r0, [pc, #8]	; (80036b0 <DMA1_Stream5_IRQHandler+0x10>)
 80036a6:	f002 fc13 	bl	8005ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	24000bd4 	.word	0x24000bd4

080036b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80036b8:	4802      	ldr	r0, [pc, #8]	; (80036c4 <TIM4_IRQHandler+0x10>)
 80036ba:	f00c f9dd 	bl	800fa78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	24001064 	.word	0x24001064

080036c8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80036cc:	4802      	ldr	r0, [pc, #8]	; (80036d8 <DMA2_Stream7_IRQHandler+0x10>)
 80036ce:	f002 fbff 	bl	8005ed0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	24000c4c 	.word	0x24000c4c

080036dc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 80036e0:	4802      	ldr	r0, [pc, #8]	; (80036ec <OTG_HS_IRQHandler+0x10>)
 80036e2:	f004 fec5 	bl	8008470 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80036e6:	bf00      	nop
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	24002980 	.word	0x24002980

080036f0 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 80036f4:	4802      	ldr	r0, [pc, #8]	; (8003700 <SDMMC2_IRQHandler+0x10>)
 80036f6:	f009 fe8b 	bl	800d410 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	24000db8 	.word	0x24000db8

08003704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800370c:	4a14      	ldr	r2, [pc, #80]	; (8003760 <_sbrk+0x5c>)
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <_sbrk+0x60>)
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003718:	4b13      	ldr	r3, [pc, #76]	; (8003768 <_sbrk+0x64>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d102      	bne.n	8003726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <_sbrk+0x64>)
 8003722:	4a12      	ldr	r2, [pc, #72]	; (800376c <_sbrk+0x68>)
 8003724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003726:	4b10      	ldr	r3, [pc, #64]	; (8003768 <_sbrk+0x64>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4413      	add	r3, r2
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	429a      	cmp	r2, r3
 8003732:	d207      	bcs.n	8003744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003734:	f013 fbea 	bl	8016f0c <__errno>
 8003738:	4603      	mov	r3, r0
 800373a:	220c      	movs	r2, #12
 800373c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800373e:	f04f 33ff 	mov.w	r3, #4294967295
 8003742:	e009      	b.n	8003758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003744:	4b08      	ldr	r3, [pc, #32]	; (8003768 <_sbrk+0x64>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800374a:	4b07      	ldr	r3, [pc, #28]	; (8003768 <_sbrk+0x64>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4413      	add	r3, r2
 8003752:	4a05      	ldr	r2, [pc, #20]	; (8003768 <_sbrk+0x64>)
 8003754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003756:	68fb      	ldr	r3, [r7, #12]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	24050000 	.word	0x24050000
 8003764:	00000800 	.word	0x00000800
 8003768:	2400147c 	.word	0x2400147c
 800376c:	240031f8 	.word	0x240031f8

08003770 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003774:	4b32      	ldr	r3, [pc, #200]	; (8003840 <SystemInit+0xd0>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377a:	4a31      	ldr	r2, [pc, #196]	; (8003840 <SystemInit+0xd0>)
 800377c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003780:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003784:	4b2f      	ldr	r3, [pc, #188]	; (8003844 <SystemInit+0xd4>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 030f 	and.w	r3, r3, #15
 800378c:	2b06      	cmp	r3, #6
 800378e:	d807      	bhi.n	80037a0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003790:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <SystemInit+0xd4>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f023 030f 	bic.w	r3, r3, #15
 8003798:	4a2a      	ldr	r2, [pc, #168]	; (8003844 <SystemInit+0xd4>)
 800379a:	f043 0307 	orr.w	r3, r3, #7
 800379e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80037a0:	4b29      	ldr	r3, [pc, #164]	; (8003848 <SystemInit+0xd8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a28      	ldr	r2, [pc, #160]	; (8003848 <SystemInit+0xd8>)
 80037a6:	f043 0301 	orr.w	r3, r3, #1
 80037aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80037ac:	4b26      	ldr	r3, [pc, #152]	; (8003848 <SystemInit+0xd8>)
 80037ae:	2200      	movs	r2, #0
 80037b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80037b2:	4b25      	ldr	r3, [pc, #148]	; (8003848 <SystemInit+0xd8>)
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	4924      	ldr	r1, [pc, #144]	; (8003848 <SystemInit+0xd8>)
 80037b8:	4b24      	ldr	r3, [pc, #144]	; (800384c <SystemInit+0xdc>)
 80037ba:	4013      	ands	r3, r2
 80037bc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80037be:	4b21      	ldr	r3, [pc, #132]	; (8003844 <SystemInit+0xd4>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80037ca:	4b1e      	ldr	r3, [pc, #120]	; (8003844 <SystemInit+0xd4>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f023 030f 	bic.w	r3, r3, #15
 80037d2:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <SystemInit+0xd4>)
 80037d4:	f043 0307 	orr.w	r3, r3, #7
 80037d8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80037da:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <SystemInit+0xd8>)
 80037dc:	2200      	movs	r2, #0
 80037de:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80037e0:	4b19      	ldr	r3, [pc, #100]	; (8003848 <SystemInit+0xd8>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80037e6:	4b18      	ldr	r3, [pc, #96]	; (8003848 <SystemInit+0xd8>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80037ec:	4b16      	ldr	r3, [pc, #88]	; (8003848 <SystemInit+0xd8>)
 80037ee:	4a18      	ldr	r2, [pc, #96]	; (8003850 <SystemInit+0xe0>)
 80037f0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80037f2:	4b15      	ldr	r3, [pc, #84]	; (8003848 <SystemInit+0xd8>)
 80037f4:	4a17      	ldr	r2, [pc, #92]	; (8003854 <SystemInit+0xe4>)
 80037f6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80037f8:	4b13      	ldr	r3, [pc, #76]	; (8003848 <SystemInit+0xd8>)
 80037fa:	4a17      	ldr	r2, [pc, #92]	; (8003858 <SystemInit+0xe8>)
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <SystemInit+0xd8>)
 8003800:	2200      	movs	r2, #0
 8003802:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003804:	4b10      	ldr	r3, [pc, #64]	; (8003848 <SystemInit+0xd8>)
 8003806:	4a14      	ldr	r2, [pc, #80]	; (8003858 <SystemInit+0xe8>)
 8003808:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800380a:	4b0f      	ldr	r3, [pc, #60]	; (8003848 <SystemInit+0xd8>)
 800380c:	2200      	movs	r2, #0
 800380e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003810:	4b0d      	ldr	r3, [pc, #52]	; (8003848 <SystemInit+0xd8>)
 8003812:	4a11      	ldr	r2, [pc, #68]	; (8003858 <SystemInit+0xe8>)
 8003814:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003816:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <SystemInit+0xd8>)
 8003818:	2200      	movs	r2, #0
 800381a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800381c:	4b0a      	ldr	r3, [pc, #40]	; (8003848 <SystemInit+0xd8>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a09      	ldr	r2, [pc, #36]	; (8003848 <SystemInit+0xd8>)
 8003822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003826:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003828:	4b07      	ldr	r3, [pc, #28]	; (8003848 <SystemInit+0xd8>)
 800382a:	2200      	movs	r2, #0
 800382c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800382e:	4b0b      	ldr	r3, [pc, #44]	; (800385c <SystemInit+0xec>)
 8003830:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003834:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003836:	bf00      	nop
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr
 8003840:	e000ed00 	.word	0xe000ed00
 8003844:	52002000 	.word	0x52002000
 8003848:	58024400 	.word	0x58024400
 800384c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003850:	02020200 	.word	0x02020200
 8003854:	01ff0000 	.word	0x01ff0000
 8003858:	01010280 	.word	0x01010280
 800385c:	52004000 	.word	0x52004000

08003860 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003898 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003864:	f7ff ff84 	bl	8003770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003868:	480c      	ldr	r0, [pc, #48]	; (800389c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800386a:	490d      	ldr	r1, [pc, #52]	; (80038a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800386c:	4a0d      	ldr	r2, [pc, #52]	; (80038a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800386e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003870:	e002      	b.n	8003878 <LoopCopyDataInit>

08003872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003876:	3304      	adds	r3, #4

08003878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800387a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800387c:	d3f9      	bcc.n	8003872 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800387e:	4a0a      	ldr	r2, [pc, #40]	; (80038a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003880:	4c0a      	ldr	r4, [pc, #40]	; (80038ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8003882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003884:	e001      	b.n	800388a <LoopFillZerobss>

08003886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003888:	3204      	adds	r2, #4

0800388a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800388a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800388c:	d3fb      	bcc.n	8003886 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800388e:	f013 fb43 	bl	8016f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003892:	f7fd fd79 	bl	8001388 <main>
  bx  lr
 8003896:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003898:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800389c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80038a0:	24000150 	.word	0x24000150
  ldr r2, =_sidata
 80038a4:	08017b18 	.word	0x08017b18
  ldr r2, =_sbss
 80038a8:	24000150 	.word	0x24000150
  ldr r4, =_ebss
 80038ac:	240031f4 	.word	0x240031f4

080038b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038b0:	e7fe      	b.n	80038b0 <ADC3_IRQHandler>
	...

080038b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80038ba:	2003      	movs	r0, #3
 80038bc:	f001 fd06 	bl	80052cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80038c0:	f006 fd7a 	bl	800a3b8 <HAL_RCC_GetSysClockFreq>
 80038c4:	4602      	mov	r2, r0
 80038c6:	4b15      	ldr	r3, [pc, #84]	; (800391c <HAL_Init+0x68>)
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	0a1b      	lsrs	r3, r3, #8
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	4913      	ldr	r1, [pc, #76]	; (8003920 <HAL_Init+0x6c>)
 80038d2:	5ccb      	ldrb	r3, [r1, r3]
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
 80038dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80038de:	4b0f      	ldr	r3, [pc, #60]	; (800391c <HAL_Init+0x68>)
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	4a0e      	ldr	r2, [pc, #56]	; (8003920 <HAL_Init+0x6c>)
 80038e8:	5cd3      	ldrb	r3, [r2, r3]
 80038ea:	f003 031f 	and.w	r3, r3, #31
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	fa22 f303 	lsr.w	r3, r2, r3
 80038f4:	4a0b      	ldr	r2, [pc, #44]	; (8003924 <HAL_Init+0x70>)
 80038f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80038f8:	4a0b      	ldr	r2, [pc, #44]	; (8003928 <HAL_Init+0x74>)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80038fe:	200f      	movs	r0, #15
 8003900:	f000 f814 	bl	800392c <HAL_InitTick>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d001      	beq.n	800390e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e002      	b.n	8003914 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800390e:	f7fe ffff 	bl	8002910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3708      	adds	r7, #8
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	58024400 	.word	0x58024400
 8003920:	08017a80 	.word	0x08017a80
 8003924:	24000004 	.word	0x24000004
 8003928:	24000000 	.word	0x24000000

0800392c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003934:	4b15      	ldr	r3, [pc, #84]	; (800398c <HAL_InitTick+0x60>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e021      	b.n	8003984 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003940:	4b13      	ldr	r3, [pc, #76]	; (8003990 <HAL_InitTick+0x64>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	4b11      	ldr	r3, [pc, #68]	; (800398c <HAL_InitTick+0x60>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	4619      	mov	r1, r3
 800394a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800394e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003952:	fbb2 f3f3 	udiv	r3, r2, r3
 8003956:	4618      	mov	r0, r3
 8003958:	f001 fceb 	bl	8005332 <HAL_SYSTICK_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e00e      	b.n	8003984 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2b0f      	cmp	r3, #15
 800396a:	d80a      	bhi.n	8003982 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800396c:	2200      	movs	r2, #0
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	f04f 30ff 	mov.w	r0, #4294967295
 8003974:	f001 fcb5 	bl	80052e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003978:	4a06      	ldr	r2, [pc, #24]	; (8003994 <HAL_InitTick+0x68>)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
 8003980:	e000      	b.n	8003984 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
}
 8003984:	4618      	mov	r0, r3
 8003986:	3708      	adds	r7, #8
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	2400000c 	.word	0x2400000c
 8003990:	24000000 	.word	0x24000000
 8003994:	24000008 	.word	0x24000008

08003998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800399c:	4b06      	ldr	r3, [pc, #24]	; (80039b8 <HAL_IncTick+0x20>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	461a      	mov	r2, r3
 80039a2:	4b06      	ldr	r3, [pc, #24]	; (80039bc <HAL_IncTick+0x24>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4413      	add	r3, r2
 80039a8:	4a04      	ldr	r2, [pc, #16]	; (80039bc <HAL_IncTick+0x24>)
 80039aa:	6013      	str	r3, [r2, #0]
}
 80039ac:	bf00      	nop
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	2400000c 	.word	0x2400000c
 80039bc:	24001480 	.word	0x24001480

080039c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  return uwTick;
 80039c4:	4b03      	ldr	r3, [pc, #12]	; (80039d4 <HAL_GetTick+0x14>)
 80039c6:	681b      	ldr	r3, [r3, #0]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	24001480 	.word	0x24001480

080039d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80039e0:	f7ff ffee 	bl	80039c0 <HAL_GetTick>
 80039e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f0:	d005      	beq.n	80039fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80039f2:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <HAL_Delay+0x44>)
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	4413      	add	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80039fe:	bf00      	nop
 8003a00:	f7ff ffde 	bl	80039c0 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d8f7      	bhi.n	8003a00 <HAL_Delay+0x28>
  {
  }
}
 8003a10:	bf00      	nop
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	2400000c 	.word	0x2400000c

08003a20 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003a2a:	4b07      	ldr	r3, [pc, #28]	; (8003a48 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a2c:	685a      	ldr	r2, [r3, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	401a      	ands	r2, r3
 8003a34:	4904      	ldr	r1, [pc, #16]	; (8003a48 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	604b      	str	r3, [r1, #4]
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a46:	4770      	bx	lr
 8003a48:	58000400 	.word	0x58000400

08003a4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	431a      	orrs	r2, r3
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	609a      	str	r2, [r3, #8]
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	609a      	str	r2, [r3, #8]
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b087      	sub	sp, #28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	3360      	adds	r3, #96	; 0x60
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4413      	add	r3, r2
 8003ace:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4a10      	ldr	r2, [pc, #64]	; (8003b14 <LL_ADC_SetOffset+0x60>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d10b      	bne.n	8003af0 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003aee:	e00b      	b.n	8003b08 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	430b      	orrs	r3, r1
 8003b02:	431a      	orrs	r2, r3
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	601a      	str	r2, [r3, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	58026000 	.word	0x58026000

08003b18 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	3360      	adds	r3, #96	; 0x60
 8003b26:	461a      	mov	r2, r3
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	4413      	add	r3, r2
 8003b2e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003b38:	4618      	mov	r0, r3
 8003b3a:	3714      	adds	r7, #20
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f003 031f 	and.w	r3, r3, #31
 8003b5e:	6879      	ldr	r1, [r7, #4]
 8003b60:	fa01 f303 	lsl.w	r3, r1, r3
 8003b64:	431a      	orrs	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	611a      	str	r2, [r3, #16]
}
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
	...

08003b78 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4a0c      	ldr	r2, [pc, #48]	; (8003bb8 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00e      	beq.n	8003baa <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	3360      	adds	r3, #96	; 0x60
 8003b90:	461a      	mov	r2, r3
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	601a      	str	r2, [r3, #0]
  }
}
 8003baa:	bf00      	nop
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	58026000 	.word	0x58026000

08003bbc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4a0c      	ldr	r2, [pc, #48]	; (8003bfc <LL_ADC_SetOffsetSaturation+0x40>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d10e      	bne.n	8003bee <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	3360      	adds	r3, #96	; 0x60
 8003bd4:	461a      	mov	r2, r3
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	431a      	orrs	r2, r3
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	58026000 	.word	0x58026000

08003c00 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a0c      	ldr	r2, [pc, #48]	; (8003c40 <LL_ADC_SetOffsetSign+0x40>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d10e      	bne.n	8003c32 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3360      	adds	r3, #96	; 0x60
 8003c18:	461a      	mov	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003c32:	bf00      	nop
 8003c34:	371c      	adds	r7, #28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	58026000 	.word	0x58026000

08003c44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b087      	sub	sp, #28
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	3360      	adds	r3, #96	; 0x60
 8003c54:	461a      	mov	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4a0c      	ldr	r2, [pc, #48]	; (8003c94 <LL_ADC_SetOffsetState+0x50>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d108      	bne.n	8003c78 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	431a      	orrs	r2, r3
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003c76:	e007      	b.n	8003c88 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	431a      	orrs	r2, r3
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	601a      	str	r2, [r3, #0]
}
 8003c88:	bf00      	nop
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	58026000 	.word	0x58026000

08003c98 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b087      	sub	sp, #28
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	3330      	adds	r3, #48	; 0x30
 8003ca8:	461a      	mov	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	0a1b      	lsrs	r3, r3, #8
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	4413      	add	r3, r2
 8003cb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	f003 031f 	and.w	r3, r3, #31
 8003cc2:	211f      	movs	r1, #31
 8003cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	401a      	ands	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	0e9b      	lsrs	r3, r3, #26
 8003cd0:	f003 011f 	and.w	r1, r3, #31
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	f003 031f 	and.w	r3, r3, #31
 8003cda:	fa01 f303 	lsl.w	r3, r1, r3
 8003cde:	431a      	orrs	r2, r3
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003ce4:	bf00      	nop
 8003ce6:	371c      	adds	r7, #28
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	3314      	adds	r3, #20
 8003d00:	461a      	mov	r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	0e5b      	lsrs	r3, r3, #25
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	4413      	add	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	0d1b      	lsrs	r3, r3, #20
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2107      	movs	r1, #7
 8003d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d22:	43db      	mvns	r3, r3
 8003d24:	401a      	ands	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	0d1b      	lsrs	r3, r3, #20
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	6879      	ldr	r1, [r7, #4]
 8003d30:	fa01 f303 	lsl.w	r3, r1, r3
 8003d34:	431a      	orrs	r2, r3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
	...

08003d48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4a1a      	ldr	r2, [pc, #104]	; (8003dc0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d115      	bne.n	8003d88 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d68:	43db      	mvns	r3, r3
 8003d6a:	401a      	ands	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f003 0318 	and.w	r3, r3, #24
 8003d72:	4914      	ldr	r1, [pc, #80]	; (8003dc4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003d74:	40d9      	lsrs	r1, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	400b      	ands	r3, r1
 8003d7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d7e:	431a      	orrs	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003d86:	e014      	b.n	8003db2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d94:	43db      	mvns	r3, r3
 8003d96:	401a      	ands	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f003 0318 	and.w	r3, r3, #24
 8003d9e:	4909      	ldr	r1, [pc, #36]	; (8003dc4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8003da0:	40d9      	lsrs	r1, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	400b      	ands	r3, r1
 8003da6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003daa:	431a      	orrs	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8003db2:	bf00      	nop
 8003db4:	3714      	adds	r7, #20
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	58026000 	.word	0x58026000
 8003dc4:	000fffff 	.word	0x000fffff

08003dc8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	689a      	ldr	r2, [r3, #8]
 8003dd4:	4b04      	ldr	r3, [pc, #16]	; (8003de8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	6093      	str	r3, [r2, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	5fffffc0 	.word	0x5fffffc0

08003dec <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e00:	d101      	bne.n	8003e06 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689a      	ldr	r2, [r3, #8]
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <LL_ADC_EnableInternalRegulator+0x24>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	6fffffc0 	.word	0x6fffffc0

08003e3c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e50:	d101      	bne.n	8003e56 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003e56:	2300      	movs	r3, #0
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d101      	bne.n	8003e7c <LL_ADC_IsEnabled+0x18>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <LL_ADC_IsEnabled+0x1a>
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f003 0304 	and.w	r3, r3, #4
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d101      	bne.n	8003ea2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e000      	b.n	8003ea4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	370c      	adds	r7, #12
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	f003 0308 	and.w	r3, r3, #8
 8003ec0:	2b08      	cmp	r3, #8
 8003ec2:	d101      	bne.n	8003ec8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e000      	b.n	8003eca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ed8:	b590      	push	{r4, r7, lr}
 8003eda:	b089      	sub	sp, #36	; 0x24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e1ee      	b.n	80042d0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d109      	bne.n	8003f14 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f7fe fd1f 	bl	8002944 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4618      	mov	r0, r3
 8003f1a:	f7ff ff67 	bl	8003dec <LL_ADC_IsDeepPowerDownEnabled>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d004      	beq.n	8003f2e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff ff4d 	bl	8003dc8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7ff ff82 	bl	8003e3c <LL_ADC_IsInternalRegulatorEnabled>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d114      	bne.n	8003f68 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff ff66 	bl	8003e14 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f48:	4b8e      	ldr	r3, [pc, #568]	; (8004184 <HAL_ADC_Init+0x2ac>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	099b      	lsrs	r3, r3, #6
 8003f4e:	4a8e      	ldr	r2, [pc, #568]	; (8004188 <HAL_ADC_Init+0x2b0>)
 8003f50:	fba2 2303 	umull	r2, r3, r2, r3
 8003f54:	099b      	lsrs	r3, r3, #6
 8003f56:	3301      	adds	r3, #1
 8003f58:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f5a:	e002      	b.n	8003f62 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1f9      	bne.n	8003f5c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff ff65 	bl	8003e3c <LL_ADC_IsInternalRegulatorEnabled>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10d      	bne.n	8003f94 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f7c:	f043 0210 	orr.w	r2, r3, #16
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f88:	f043 0201 	orr.w	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff ff76 	bl	8003e8a <LL_ADC_REG_IsConversionOngoing>
 8003f9e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa4:	f003 0310 	and.w	r3, r3, #16
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f040 8188 	bne.w	80042be <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	f040 8184 	bne.w	80042be <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fba:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003fbe:	f043 0202 	orr.w	r2, r3, #2
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff ff4a 	bl	8003e64 <LL_ADC_IsEnabled>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d136      	bne.n	8004044 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a6c      	ldr	r2, [pc, #432]	; (800418c <HAL_ADC_Init+0x2b4>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d004      	beq.n	8003fea <HAL_ADC_Init+0x112>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a6a      	ldr	r2, [pc, #424]	; (8004190 <HAL_ADC_Init+0x2b8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d10e      	bne.n	8004008 <HAL_ADC_Init+0x130>
 8003fea:	4868      	ldr	r0, [pc, #416]	; (800418c <HAL_ADC_Init+0x2b4>)
 8003fec:	f7ff ff3a 	bl	8003e64 <LL_ADC_IsEnabled>
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	4867      	ldr	r0, [pc, #412]	; (8004190 <HAL_ADC_Init+0x2b8>)
 8003ff4:	f7ff ff36 	bl	8003e64 <LL_ADC_IsEnabled>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	4323      	orrs	r3, r4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	bf0c      	ite	eq
 8004000:	2301      	moveq	r3, #1
 8004002:	2300      	movne	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	e008      	b.n	800401a <HAL_ADC_Init+0x142>
 8004008:	4862      	ldr	r0, [pc, #392]	; (8004194 <HAL_ADC_Init+0x2bc>)
 800400a:	f7ff ff2b 	bl	8003e64 <LL_ADC_IsEnabled>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	bf0c      	ite	eq
 8004014:	2301      	moveq	r3, #1
 8004016:	2300      	movne	r3, #0
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b00      	cmp	r3, #0
 800401c:	d012      	beq.n	8004044 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a5a      	ldr	r2, [pc, #360]	; (800418c <HAL_ADC_Init+0x2b4>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d004      	beq.n	8004032 <HAL_ADC_Init+0x15a>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a58      	ldr	r2, [pc, #352]	; (8004190 <HAL_ADC_Init+0x2b8>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d101      	bne.n	8004036 <HAL_ADC_Init+0x15e>
 8004032:	4a59      	ldr	r2, [pc, #356]	; (8004198 <HAL_ADC_Init+0x2c0>)
 8004034:	e000      	b.n	8004038 <HAL_ADC_Init+0x160>
 8004036:	4a59      	ldr	r2, [pc, #356]	; (800419c <HAL_ADC_Init+0x2c4>)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4619      	mov	r1, r3
 800403e:	4610      	mov	r0, r2
 8004040:	f7ff fd04 	bl	8003a4c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a52      	ldr	r2, [pc, #328]	; (8004194 <HAL_ADC_Init+0x2bc>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d129      	bne.n	80040a2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	7e5b      	ldrb	r3, [r3, #25]
 8004052:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8004058:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 800405e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	2b08      	cmp	r3, #8
 8004066:	d013      	beq.n	8004090 <HAL_ADC_Init+0x1b8>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b0c      	cmp	r3, #12
 800406e:	d00d      	beq.n	800408c <HAL_ADC_Init+0x1b4>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b1c      	cmp	r3, #28
 8004076:	d007      	beq.n	8004088 <HAL_ADC_Init+0x1b0>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2b18      	cmp	r3, #24
 800407e:	d101      	bne.n	8004084 <HAL_ADC_Init+0x1ac>
 8004080:	2318      	movs	r3, #24
 8004082:	e006      	b.n	8004092 <HAL_ADC_Init+0x1ba>
 8004084:	2300      	movs	r3, #0
 8004086:	e004      	b.n	8004092 <HAL_ADC_Init+0x1ba>
 8004088:	2310      	movs	r3, #16
 800408a:	e002      	b.n	8004092 <HAL_ADC_Init+0x1ba>
 800408c:	2308      	movs	r3, #8
 800408e:	e000      	b.n	8004092 <HAL_ADC_Init+0x1ba>
 8004090:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8004092:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f893 3020 	ldrb.w	r3, [r3, #32]
 800409a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800409c:	4313      	orrs	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
 80040a0:	e00e      	b.n	80040c0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	7e5b      	ldrb	r3, [r3, #25]
 80040a6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040ac:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80040b2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040ba:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040bc:	4313      	orrs	r3, r2
 80040be:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d106      	bne.n	80040d8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	3b01      	subs	r3, #1
 80040d0:	045b      	lsls	r3, r3, #17
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d009      	beq.n	80040f4 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a26      	ldr	r2, [pc, #152]	; (8004194 <HAL_ADC_Init+0x2bc>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d115      	bne.n	800412a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68da      	ldr	r2, [r3, #12]
 8004104:	4b26      	ldr	r3, [pc, #152]	; (80041a0 <HAL_ADC_Init+0x2c8>)
 8004106:	4013      	ands	r3, r2
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6812      	ldr	r2, [r2, #0]
 800410c:	69b9      	ldr	r1, [r7, #24]
 800410e:	430b      	orrs	r3, r1
 8004110:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	611a      	str	r2, [r3, #16]
 8004128:	e009      	b.n	800413e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68da      	ldr	r2, [r3, #12]
 8004130:	4b1c      	ldr	r3, [pc, #112]	; (80041a4 <HAL_ADC_Init+0x2cc>)
 8004132:	4013      	ands	r3, r2
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6812      	ldr	r2, [r2, #0]
 8004138:	69b9      	ldr	r1, [r7, #24]
 800413a:	430b      	orrs	r3, r1
 800413c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff fea1 	bl	8003e8a <LL_ADC_REG_IsConversionOngoing>
 8004148:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f7ff feae 	bl	8003eb0 <LL_ADC_INJ_IsConversionOngoing>
 8004154:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	f040 808e 	bne.w	800427a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2b00      	cmp	r3, #0
 8004162:	f040 808a 	bne.w	800427a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a0a      	ldr	r2, [pc, #40]	; (8004194 <HAL_ADC_Init+0x2bc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d11b      	bne.n	80041a8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	7e1b      	ldrb	r3, [r3, #24]
 8004174:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800417c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 800417e:	4313      	orrs	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
 8004182:	e018      	b.n	80041b6 <HAL_ADC_Init+0x2de>
 8004184:	24000000 	.word	0x24000000
 8004188:	053e2d63 	.word	0x053e2d63
 800418c:	40022000 	.word	0x40022000
 8004190:	40022100 	.word	0x40022100
 8004194:	58026000 	.word	0x58026000
 8004198:	40022300 	.word	0x40022300
 800419c:	58026300 	.word	0x58026300
 80041a0:	fff04007 	.word	0xfff04007
 80041a4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	7e1b      	ldrb	r3, [r3, #24]
 80041ac:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 80041b2:	4313      	orrs	r3, r2
 80041b4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68da      	ldr	r2, [r3, #12]
 80041bc:	4b46      	ldr	r3, [pc, #280]	; (80042d8 <HAL_ADC_Init+0x400>)
 80041be:	4013      	ands	r3, r2
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	69b9      	ldr	r1, [r7, #24]
 80041c6:	430b      	orrs	r3, r1
 80041c8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d137      	bne.n	8004244 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a3f      	ldr	r2, [pc, #252]	; (80042dc <HAL_ADC_Init+0x404>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d116      	bne.n	8004212 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	4b3d      	ldr	r3, [pc, #244]	; (80042e0 <HAL_ADC_Init+0x408>)
 80041ec:	4013      	ands	r3, r2
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	6c91      	ldr	r1, [r2, #72]	; 0x48
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80041f6:	4311      	orrs	r1, r2
 80041f8:	687a      	ldr	r2, [r7, #4]
 80041fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80041fc:	4311      	orrs	r1, r2
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004202:	430a      	orrs	r2, r1
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f042 0201 	orr.w	r2, r2, #1
 800420e:	611a      	str	r2, [r3, #16]
 8004210:	e020      	b.n	8004254 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	691a      	ldr	r2, [r3, #16]
 8004218:	4b32      	ldr	r3, [pc, #200]	; (80042e4 <HAL_ADC_Init+0x40c>)
 800421a:	4013      	ands	r3, r2
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004220:	3a01      	subs	r2, #1
 8004222:	0411      	lsls	r1, r2, #16
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004228:	4311      	orrs	r1, r2
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800422e:	4311      	orrs	r1, r2
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004234:	430a      	orrs	r2, r1
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0201 	orr.w	r2, r2, #1
 8004240:	611a      	str	r2, [r3, #16]
 8004242:	e007      	b.n	8004254 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691a      	ldr	r2, [r3, #16]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0201 	bic.w	r2, r2, #1
 8004252:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a1b      	ldr	r2, [pc, #108]	; (80042dc <HAL_ADC_Init+0x404>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d002      	beq.n	800427a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fd63 	bl	8004d40 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d10c      	bne.n	800429c <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	f023 010f 	bic.w	r1, r3, #15
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	1e5a      	subs	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	631a      	str	r2, [r3, #48]	; 0x30
 800429a:	e007      	b.n	80042ac <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 020f 	bic.w	r2, r2, #15
 80042aa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b0:	f023 0303 	bic.w	r3, r3, #3
 80042b4:	f043 0201 	orr.w	r2, r3, #1
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	661a      	str	r2, [r3, #96]	; 0x60
 80042bc:	e007      	b.n	80042ce <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c2:	f043 0210 	orr.w	r2, r3, #16
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80042ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3724      	adds	r7, #36	; 0x24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd90      	pop	{r4, r7, pc}
 80042d8:	ffffbffc 	.word	0xffffbffc
 80042dc:	58026000 	.word	0x58026000
 80042e0:	fc00f81f 	.word	0xfc00f81f
 80042e4:	fc00f81e 	.word	0xfc00f81e

080042e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042e8:	b590      	push	{r4, r7, lr}
 80042ea:	b0b9      	sub	sp, #228	; 0xe4
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042f2:	2300      	movs	r3, #0
 80042f4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004302:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	4aa9      	ldr	r2, [pc, #676]	; (80045b0 <HAL_ADC_ConfigChannel+0x2c8>)
 800430a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004312:	2b01      	cmp	r3, #1
 8004314:	d102      	bne.n	800431c <HAL_ADC_ConfigChannel+0x34>
 8004316:	2302      	movs	r3, #2
 8004318:	f000 bcfa 	b.w	8004d10 <HAL_ADC_ConfigChannel+0xa28>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff fdae 	bl	8003e8a <LL_ADC_REG_IsConversionOngoing>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	f040 84de 	bne.w	8004cf2 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a9e      	ldr	r2, [pc, #632]	; (80045b4 <HAL_ADC_ConfigChannel+0x2cc>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d033      	beq.n	80043a8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004348:	2b00      	cmp	r3, #0
 800434a:	d108      	bne.n	800435e <HAL_ADC_ConfigChannel+0x76>
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	0e9b      	lsrs	r3, r3, #26
 8004352:	f003 031f 	and.w	r3, r3, #31
 8004356:	2201      	movs	r2, #1
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	e01d      	b.n	800439a <HAL_ADC_ConfigChannel+0xb2>
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004366:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800436a:	fa93 f3a3 	rbit	r3, r3
 800436e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004372:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004376:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800437a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8004382:	2320      	movs	r3, #32
 8004384:	e004      	b.n	8004390 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8004386:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800438a:	fab3 f383 	clz	r3, r3
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f003 031f 	and.w	r3, r3, #31
 8004394:	2201      	movs	r2, #1
 8004396:	fa02 f303 	lsl.w	r3, r2, r3
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6812      	ldr	r2, [r2, #0]
 800439e:	69d1      	ldr	r1, [r2, #28]
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	430b      	orrs	r3, r1
 80043a6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6818      	ldr	r0, [r3, #0]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	6859      	ldr	r1, [r3, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	461a      	mov	r2, r3
 80043b6:	f7ff fc6f 	bl	8003c98 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4618      	mov	r0, r3
 80043c0:	f7ff fd63 	bl	8003e8a <LL_ADC_REG_IsConversionOngoing>
 80043c4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff fd6f 	bl	8003eb0 <LL_ADC_INJ_IsConversionOngoing>
 80043d2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80043d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f040 8270 	bne.w	80048c0 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80043e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f040 826b 	bne.w	80048c0 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6819      	ldr	r1, [r3, #0]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	461a      	mov	r2, r3
 80043f8:	f7ff fc7a 	bl	8003cf0 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a6c      	ldr	r2, [pc, #432]	; (80045b4 <HAL_ADC_ConfigChannel+0x2cc>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d10d      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	695a      	ldr	r2, [r3, #20]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	08db      	lsrs	r3, r3, #3
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	fa02 f303 	lsl.w	r3, r2, r3
 800441c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004420:	e032      	b.n	8004488 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004422:	4b65      	ldr	r3, [pc, #404]	; (80045b8 <HAL_ADC_ConfigChannel+0x2d0>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800442a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800442e:	d10b      	bne.n	8004448 <HAL_ADC_ConfigChannel+0x160>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	695a      	ldr	r2, [r3, #20]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	089b      	lsrs	r3, r3, #2
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	fa02 f303 	lsl.w	r3, r2, r3
 8004446:	e01d      	b.n	8004484 <HAL_ADC_ConfigChannel+0x19c>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	f003 0310 	and.w	r3, r3, #16
 8004452:	2b00      	cmp	r3, #0
 8004454:	d10b      	bne.n	800446e <HAL_ADC_ConfigChannel+0x186>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	695a      	ldr	r2, [r3, #20]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	089b      	lsrs	r3, r3, #2
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	005b      	lsls	r3, r3, #1
 8004468:	fa02 f303 	lsl.w	r3, r2, r3
 800446c:	e00a      	b.n	8004484 <HAL_ADC_ConfigChannel+0x19c>
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	695a      	ldr	r2, [r3, #20]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	089b      	lsrs	r3, r3, #2
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	005b      	lsls	r3, r3, #1
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b04      	cmp	r3, #4
 800448e:	d048      	beq.n	8004522 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6919      	ldr	r1, [r3, #16]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80044a0:	f7ff fb08 	bl	8003ab4 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a42      	ldr	r2, [pc, #264]	; (80045b4 <HAL_ADC_ConfigChannel+0x2cc>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d119      	bne.n	80044e2 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6818      	ldr	r0, [r3, #0]
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	6919      	ldr	r1, [r3, #16]
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	461a      	mov	r2, r3
 80044bc:	f7ff fba0 	bl	8003c00 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6818      	ldr	r0, [r3, #0]
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6919      	ldr	r1, [r3, #16]
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d102      	bne.n	80044d8 <HAL_ADC_ConfigChannel+0x1f0>
 80044d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044d6:	e000      	b.n	80044da <HAL_ADC_ConfigChannel+0x1f2>
 80044d8:	2300      	movs	r3, #0
 80044da:	461a      	mov	r2, r3
 80044dc:	f7ff fb6e 	bl	8003bbc <LL_ADC_SetOffsetSaturation>
 80044e0:	e1ee      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6919      	ldr	r1, [r3, #16]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d102      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x212>
 80044f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80044f8:	e000      	b.n	80044fc <HAL_ADC_ConfigChannel+0x214>
 80044fa:	2300      	movs	r3, #0
 80044fc:	461a      	mov	r2, r3
 80044fe:	f7ff fb3b 	bl	8003b78 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	6919      	ldr	r1, [r3, #16]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	7e1b      	ldrb	r3, [r3, #24]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d102      	bne.n	8004518 <HAL_ADC_ConfigChannel+0x230>
 8004512:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004516:	e000      	b.n	800451a <HAL_ADC_ConfigChannel+0x232>
 8004518:	2300      	movs	r3, #0
 800451a:	461a      	mov	r2, r3
 800451c:	f7ff fb12 	bl	8003b44 <LL_ADC_SetDataRightShift>
 8004520:	e1ce      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a23      	ldr	r2, [pc, #140]	; (80045b4 <HAL_ADC_ConfigChannel+0x2cc>)
 8004528:	4293      	cmp	r3, r2
 800452a:	f040 8181 	bne.w	8004830 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2100      	movs	r1, #0
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff faef 	bl	8003b18 <LL_ADC_GetOffsetChannel>
 800453a:	4603      	mov	r3, r0
 800453c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004540:	2b00      	cmp	r3, #0
 8004542:	d10a      	bne.n	800455a <HAL_ADC_ConfigChannel+0x272>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2100      	movs	r1, #0
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff fae4 	bl	8003b18 <LL_ADC_GetOffsetChannel>
 8004550:	4603      	mov	r3, r0
 8004552:	0e9b      	lsrs	r3, r3, #26
 8004554:	f003 021f 	and.w	r2, r3, #31
 8004558:	e01e      	b.n	8004598 <HAL_ADC_ConfigChannel+0x2b0>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2100      	movs	r1, #0
 8004560:	4618      	mov	r0, r3
 8004562:	f7ff fad9 	bl	8003b18 <LL_ADC_GetOffsetChannel>
 8004566:	4603      	mov	r3, r0
 8004568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004570:	fa93 f3a3 	rbit	r3, r3
 8004574:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8004578:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800457c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8004580:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004584:	2b00      	cmp	r3, #0
 8004586:	d101      	bne.n	800458c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8004588:	2320      	movs	r3, #32
 800458a:	e004      	b.n	8004596 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 800458c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004590:	fab3 f383 	clz	r3, r3
 8004594:	b2db      	uxtb	r3, r3
 8004596:	461a      	mov	r2, r3
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10b      	bne.n	80045bc <HAL_ADC_ConfigChannel+0x2d4>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	0e9b      	lsrs	r3, r3, #26
 80045aa:	f003 031f 	and.w	r3, r3, #31
 80045ae:	e01e      	b.n	80045ee <HAL_ADC_ConfigChannel+0x306>
 80045b0:	47ff0000 	.word	0x47ff0000
 80045b4:	58026000 	.word	0x58026000
 80045b8:	5c001000 	.word	0x5c001000
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045c8:	fa93 f3a3 	rbit	r3, r3
 80045cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80045d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80045d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d101      	bne.n	80045e4 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80045e0:	2320      	movs	r3, #32
 80045e2:	e004      	b.n	80045ee <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80045e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80045e8:	fab3 f383 	clz	r3, r3
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d106      	bne.n	8004600 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2200      	movs	r2, #0
 80045f8:	2100      	movs	r1, #0
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fb22 	bl	8003c44 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2101      	movs	r1, #1
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fa86 	bl	8003b18 <LL_ADC_GetOffsetChannel>
 800460c:	4603      	mov	r3, r0
 800460e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004612:	2b00      	cmp	r3, #0
 8004614:	d10a      	bne.n	800462c <HAL_ADC_ConfigChannel+0x344>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2101      	movs	r1, #1
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fa7b 	bl	8003b18 <LL_ADC_GetOffsetChannel>
 8004622:	4603      	mov	r3, r0
 8004624:	0e9b      	lsrs	r3, r3, #26
 8004626:	f003 021f 	and.w	r2, r3, #31
 800462a:	e01e      	b.n	800466a <HAL_ADC_ConfigChannel+0x382>
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	2101      	movs	r1, #1
 8004632:	4618      	mov	r0, r3
 8004634:	f7ff fa70 	bl	8003b18 <LL_ADC_GetOffsetChannel>
 8004638:	4603      	mov	r3, r0
 800463a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004642:	fa93 f3a3 	rbit	r3, r3
 8004646:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800464a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800464e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8004652:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 800465a:	2320      	movs	r3, #32
 800465c:	e004      	b.n	8004668 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 800465e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004662:	fab3 f383 	clz	r3, r3
 8004666:	b2db      	uxtb	r3, r3
 8004668:	461a      	mov	r2, r3
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004672:	2b00      	cmp	r3, #0
 8004674:	d105      	bne.n	8004682 <HAL_ADC_ConfigChannel+0x39a>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	0e9b      	lsrs	r3, r3, #26
 800467c:	f003 031f 	and.w	r3, r3, #31
 8004680:	e018      	b.n	80046b4 <HAL_ADC_ConfigChannel+0x3cc>
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800468e:	fa93 f3a3 	rbit	r3, r3
 8004692:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8004696:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800469a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800469e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80046a6:	2320      	movs	r3, #32
 80046a8:	e004      	b.n	80046b4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80046aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046ae:	fab3 f383 	clz	r3, r3
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d106      	bne.n	80046c6 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2200      	movs	r2, #0
 80046be:	2101      	movs	r1, #1
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff fabf 	bl	8003c44 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2102      	movs	r1, #2
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff fa23 	bl	8003b18 <LL_ADC_GetOffsetChannel>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10a      	bne.n	80046f2 <HAL_ADC_ConfigChannel+0x40a>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2102      	movs	r1, #2
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fa18 	bl	8003b18 <LL_ADC_GetOffsetChannel>
 80046e8:	4603      	mov	r3, r0
 80046ea:	0e9b      	lsrs	r3, r3, #26
 80046ec:	f003 021f 	and.w	r2, r3, #31
 80046f0:	e01e      	b.n	8004730 <HAL_ADC_ConfigChannel+0x448>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2102      	movs	r1, #2
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff fa0d 	bl	8003b18 <LL_ADC_GetOffsetChannel>
 80046fe:	4603      	mov	r3, r0
 8004700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004704:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004708:	fa93 f3a3 	rbit	r3, r3
 800470c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004710:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004714:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004718:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800471c:	2b00      	cmp	r3, #0
 800471e:	d101      	bne.n	8004724 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004720:	2320      	movs	r3, #32
 8004722:	e004      	b.n	800472e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004724:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004728:	fab3 f383 	clz	r3, r3
 800472c:	b2db      	uxtb	r3, r3
 800472e:	461a      	mov	r2, r3
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004738:	2b00      	cmp	r3, #0
 800473a:	d105      	bne.n	8004748 <HAL_ADC_ConfigChannel+0x460>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	0e9b      	lsrs	r3, r3, #26
 8004742:	f003 031f 	and.w	r3, r3, #31
 8004746:	e014      	b.n	8004772 <HAL_ADC_ConfigChannel+0x48a>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004750:	fa93 f3a3 	rbit	r3, r3
 8004754:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004756:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004758:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800475c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004764:	2320      	movs	r3, #32
 8004766:	e004      	b.n	8004772 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004768:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800476c:	fab3 f383 	clz	r3, r3
 8004770:	b2db      	uxtb	r3, r3
 8004772:	429a      	cmp	r2, r3
 8004774:	d106      	bne.n	8004784 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2200      	movs	r2, #0
 800477c:	2102      	movs	r1, #2
 800477e:	4618      	mov	r0, r3
 8004780:	f7ff fa60 	bl	8003c44 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2103      	movs	r1, #3
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff f9c4 	bl	8003b18 <LL_ADC_GetOffsetChannel>
 8004790:	4603      	mov	r3, r0
 8004792:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x4c8>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2103      	movs	r1, #3
 80047a0:	4618      	mov	r0, r3
 80047a2:	f7ff f9b9 	bl	8003b18 <LL_ADC_GetOffsetChannel>
 80047a6:	4603      	mov	r3, r0
 80047a8:	0e9b      	lsrs	r3, r3, #26
 80047aa:	f003 021f 	and.w	r2, r3, #31
 80047ae:	e017      	b.n	80047e0 <HAL_ADC_ConfigChannel+0x4f8>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2103      	movs	r1, #3
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff f9ae 	bl	8003b18 <LL_ADC_GetOffsetChannel>
 80047bc:	4603      	mov	r3, r0
 80047be:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047c2:	fa93 f3a3 	rbit	r3, r3
 80047c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80047c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ca:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80047cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80047d2:	2320      	movs	r3, #32
 80047d4:	e003      	b.n	80047de <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80047d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047d8:	fab3 f383 	clz	r3, r3
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	461a      	mov	r2, r3
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d105      	bne.n	80047f8 <HAL_ADC_ConfigChannel+0x510>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	0e9b      	lsrs	r3, r3, #26
 80047f2:	f003 031f 	and.w	r3, r3, #31
 80047f6:	e011      	b.n	800481c <HAL_ADC_ConfigChannel+0x534>
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004800:	fa93 f3a3 	rbit	r3, r3
 8004804:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004808:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800480a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004810:	2320      	movs	r3, #32
 8004812:	e003      	b.n	800481c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004816:	fab3 f383 	clz	r3, r3
 800481a:	b2db      	uxtb	r3, r3
 800481c:	429a      	cmp	r2, r3
 800481e:	d14f      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2200      	movs	r2, #0
 8004826:	2103      	movs	r1, #3
 8004828:	4618      	mov	r0, r3
 800482a:	f7ff fa0b 	bl	8003c44 <LL_ADC_SetOffsetState>
 800482e:	e047      	b.n	80048c0 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004836:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	069b      	lsls	r3, r3, #26
 8004840:	429a      	cmp	r2, r3
 8004842:	d107      	bne.n	8004854 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004852:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800485a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	069b      	lsls	r3, r3, #26
 8004864:	429a      	cmp	r2, r3
 8004866:	d107      	bne.n	8004878 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004876:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800487e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	069b      	lsls	r3, r3, #26
 8004888:	429a      	cmp	r2, r3
 800488a:	d107      	bne.n	800489c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800489a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80048a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	069b      	lsls	r3, r3, #26
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d107      	bne.n	80048c0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80048be:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff facd 	bl	8003e64 <LL_ADC_IsEnabled>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	f040 8219 	bne.w	8004d04 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6818      	ldr	r0, [r3, #0]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	6819      	ldr	r1, [r3, #0]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	461a      	mov	r2, r3
 80048e0:	f7ff fa32 	bl	8003d48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	4aa1      	ldr	r2, [pc, #644]	; (8004b70 <HAL_ADC_ConfigChannel+0x888>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	f040 812e 	bne.w	8004b4c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10b      	bne.n	8004918 <HAL_ADC_ConfigChannel+0x630>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	0e9b      	lsrs	r3, r3, #26
 8004906:	3301      	adds	r3, #1
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	2b09      	cmp	r3, #9
 800490e:	bf94      	ite	ls
 8004910:	2301      	movls	r3, #1
 8004912:	2300      	movhi	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	e019      	b.n	800494c <HAL_ADC_ConfigChannel+0x664>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800491e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004920:	fa93 f3a3 	rbit	r3, r3
 8004924:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004928:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800492a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004930:	2320      	movs	r3, #32
 8004932:	e003      	b.n	800493c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004936:	fab3 f383 	clz	r3, r3
 800493a:	b2db      	uxtb	r3, r3
 800493c:	3301      	adds	r3, #1
 800493e:	f003 031f 	and.w	r3, r3, #31
 8004942:	2b09      	cmp	r3, #9
 8004944:	bf94      	ite	ls
 8004946:	2301      	movls	r3, #1
 8004948:	2300      	movhi	r3, #0
 800494a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800494c:	2b00      	cmp	r3, #0
 800494e:	d079      	beq.n	8004a44 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004958:	2b00      	cmp	r3, #0
 800495a:	d107      	bne.n	800496c <HAL_ADC_ConfigChannel+0x684>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	0e9b      	lsrs	r3, r3, #26
 8004962:	3301      	adds	r3, #1
 8004964:	069b      	lsls	r3, r3, #26
 8004966:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800496a:	e015      	b.n	8004998 <HAL_ADC_ConfigChannel+0x6b0>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004974:	fa93 f3a3 	rbit	r3, r3
 8004978:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800497a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800497c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800497e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004984:	2320      	movs	r3, #32
 8004986:	e003      	b.n	8004990 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800498a:	fab3 f383 	clz	r3, r3
 800498e:	b2db      	uxtb	r3, r3
 8004990:	3301      	adds	r3, #1
 8004992:	069b      	lsls	r3, r3, #26
 8004994:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d109      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x6d0>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	0e9b      	lsrs	r3, r3, #26
 80049aa:	3301      	adds	r3, #1
 80049ac:	f003 031f 	and.w	r3, r3, #31
 80049b0:	2101      	movs	r1, #1
 80049b2:	fa01 f303 	lsl.w	r3, r1, r3
 80049b6:	e017      	b.n	80049e8 <HAL_ADC_ConfigChannel+0x700>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049c0:	fa93 f3a3 	rbit	r3, r3
 80049c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80049c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80049ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80049d0:	2320      	movs	r3, #32
 80049d2:	e003      	b.n	80049dc <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80049d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049d6:	fab3 f383 	clz	r3, r3
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	3301      	adds	r3, #1
 80049de:	f003 031f 	and.w	r3, r3, #31
 80049e2:	2101      	movs	r1, #1
 80049e4:	fa01 f303 	lsl.w	r3, r1, r3
 80049e8:	ea42 0103 	orr.w	r1, r2, r3
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10a      	bne.n	8004a0e <HAL_ADC_ConfigChannel+0x726>
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	0e9b      	lsrs	r3, r3, #26
 80049fe:	3301      	adds	r3, #1
 8004a00:	f003 021f 	and.w	r2, r3, #31
 8004a04:	4613      	mov	r3, r2
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	4413      	add	r3, r2
 8004a0a:	051b      	lsls	r3, r3, #20
 8004a0c:	e018      	b.n	8004a40 <HAL_ADC_ConfigChannel+0x758>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a16:	fa93 f3a3 	rbit	r3, r3
 8004a1a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004a26:	2320      	movs	r3, #32
 8004a28:	e003      	b.n	8004a32 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	fab3 f383 	clz	r3, r3
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	3301      	adds	r3, #1
 8004a34:	f003 021f 	and.w	r2, r3, #31
 8004a38:	4613      	mov	r3, r2
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	4413      	add	r3, r2
 8004a3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a40:	430b      	orrs	r3, r1
 8004a42:	e07e      	b.n	8004b42 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d107      	bne.n	8004a60 <HAL_ADC_ConfigChannel+0x778>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	0e9b      	lsrs	r3, r3, #26
 8004a56:	3301      	adds	r3, #1
 8004a58:	069b      	lsls	r3, r3, #26
 8004a5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a5e:	e015      	b.n	8004a8c <HAL_ADC_ConfigChannel+0x7a4>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a68:	fa93 f3a3 	rbit	r3, r3
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004a78:	2320      	movs	r3, #32
 8004a7a:	e003      	b.n	8004a84 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7e:	fab3 f383 	clz	r3, r3
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	3301      	adds	r3, #1
 8004a86:	069b      	lsls	r3, r3, #26
 8004a88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d109      	bne.n	8004aac <HAL_ADC_ConfigChannel+0x7c4>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	0e9b      	lsrs	r3, r3, #26
 8004a9e:	3301      	adds	r3, #1
 8004aa0:	f003 031f 	and.w	r3, r3, #31
 8004aa4:	2101      	movs	r1, #1
 8004aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aaa:	e017      	b.n	8004adc <HAL_ADC_ConfigChannel+0x7f4>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	fa93 f3a3 	rbit	r3, r3
 8004ab8:	61bb      	str	r3, [r7, #24]
  return result;
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004ac4:	2320      	movs	r3, #32
 8004ac6:	e003      	b.n	8004ad0 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	fab3 f383 	clz	r3, r3
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	2101      	movs	r1, #1
 8004ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8004adc:	ea42 0103 	orr.w	r1, r2, r3
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10d      	bne.n	8004b08 <HAL_ADC_ConfigChannel+0x820>
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	0e9b      	lsrs	r3, r3, #26
 8004af2:	3301      	adds	r3, #1
 8004af4:	f003 021f 	and.w	r2, r3, #31
 8004af8:	4613      	mov	r3, r2
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	4413      	add	r3, r2
 8004afe:	3b1e      	subs	r3, #30
 8004b00:	051b      	lsls	r3, r3, #20
 8004b02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004b06:	e01b      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x858>
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	fa93 f3a3 	rbit	r3, r3
 8004b14:	60fb      	str	r3, [r7, #12]
  return result;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004b20:	2320      	movs	r3, #32
 8004b22:	e003      	b.n	8004b2c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	fab3 f383 	clz	r3, r3
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	f003 021f 	and.w	r2, r3, #31
 8004b32:	4613      	mov	r3, r2
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	4413      	add	r3, r2
 8004b38:	3b1e      	subs	r3, #30
 8004b3a:	051b      	lsls	r3, r3, #20
 8004b3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b40:	430b      	orrs	r3, r1
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	6892      	ldr	r2, [r2, #8]
 8004b46:	4619      	mov	r1, r3
 8004b48:	f7ff f8d2 	bl	8003cf0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f280 80d7 	bge.w	8004d04 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a06      	ldr	r2, [pc, #24]	; (8004b74 <HAL_ADC_ConfigChannel+0x88c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d004      	beq.n	8004b6a <HAL_ADC_ConfigChannel+0x882>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a04      	ldr	r2, [pc, #16]	; (8004b78 <HAL_ADC_ConfigChannel+0x890>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d10a      	bne.n	8004b80 <HAL_ADC_ConfigChannel+0x898>
 8004b6a:	4b04      	ldr	r3, [pc, #16]	; (8004b7c <HAL_ADC_ConfigChannel+0x894>)
 8004b6c:	e009      	b.n	8004b82 <HAL_ADC_ConfigChannel+0x89a>
 8004b6e:	bf00      	nop
 8004b70:	47ff0000 	.word	0x47ff0000
 8004b74:	40022000 	.word	0x40022000
 8004b78:	40022100 	.word	0x40022100
 8004b7c:	40022300 	.word	0x40022300
 8004b80:	4b65      	ldr	r3, [pc, #404]	; (8004d18 <HAL_ADC_ConfigChannel+0xa30>)
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe ff88 	bl	8003a98 <LL_ADC_GetCommonPathInternalCh>
 8004b88:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a62      	ldr	r2, [pc, #392]	; (8004d1c <HAL_ADC_ConfigChannel+0xa34>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d004      	beq.n	8004ba0 <HAL_ADC_ConfigChannel+0x8b8>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a61      	ldr	r2, [pc, #388]	; (8004d20 <HAL_ADC_ConfigChannel+0xa38>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d10e      	bne.n	8004bbe <HAL_ADC_ConfigChannel+0x8d6>
 8004ba0:	485e      	ldr	r0, [pc, #376]	; (8004d1c <HAL_ADC_ConfigChannel+0xa34>)
 8004ba2:	f7ff f95f 	bl	8003e64 <LL_ADC_IsEnabled>
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	485d      	ldr	r0, [pc, #372]	; (8004d20 <HAL_ADC_ConfigChannel+0xa38>)
 8004baa:	f7ff f95b 	bl	8003e64 <LL_ADC_IsEnabled>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	4323      	orrs	r3, r4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	bf0c      	ite	eq
 8004bb6:	2301      	moveq	r3, #1
 8004bb8:	2300      	movne	r3, #0
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	e008      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0x8e8>
 8004bbe:	4859      	ldr	r0, [pc, #356]	; (8004d24 <HAL_ADC_ConfigChannel+0xa3c>)
 8004bc0:	f7ff f950 	bl	8003e64 <LL_ADC_IsEnabled>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	bf0c      	ite	eq
 8004bca:	2301      	moveq	r3, #1
 8004bcc:	2300      	movne	r3, #0
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 8084 	beq.w	8004cde <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a53      	ldr	r2, [pc, #332]	; (8004d28 <HAL_ADC_ConfigChannel+0xa40>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d132      	bne.n	8004c46 <HAL_ADC_ConfigChannel+0x95e>
 8004be0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004be4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d12c      	bne.n	8004c46 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a4c      	ldr	r2, [pc, #304]	; (8004d24 <HAL_ADC_ConfigChannel+0xa3c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	f040 8086 	bne.w	8004d04 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a47      	ldr	r2, [pc, #284]	; (8004d1c <HAL_ADC_ConfigChannel+0xa34>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d004      	beq.n	8004c0c <HAL_ADC_ConfigChannel+0x924>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a46      	ldr	r2, [pc, #280]	; (8004d20 <HAL_ADC_ConfigChannel+0xa38>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d101      	bne.n	8004c10 <HAL_ADC_ConfigChannel+0x928>
 8004c0c:	4a47      	ldr	r2, [pc, #284]	; (8004d2c <HAL_ADC_ConfigChannel+0xa44>)
 8004c0e:	e000      	b.n	8004c12 <HAL_ADC_ConfigChannel+0x92a>
 8004c10:	4a41      	ldr	r2, [pc, #260]	; (8004d18 <HAL_ADC_ConfigChannel+0xa30>)
 8004c12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	f7fe ff28 	bl	8003a72 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c22:	4b43      	ldr	r3, [pc, #268]	; (8004d30 <HAL_ADC_ConfigChannel+0xa48>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	099b      	lsrs	r3, r3, #6
 8004c28:	4a42      	ldr	r2, [pc, #264]	; (8004d34 <HAL_ADC_ConfigChannel+0xa4c>)
 8004c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2e:	099b      	lsrs	r3, r3, #6
 8004c30:	3301      	adds	r3, #1
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004c36:	e002      	b.n	8004c3e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1f9      	bne.n	8004c38 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c44:	e05e      	b.n	8004d04 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a3b      	ldr	r2, [pc, #236]	; (8004d38 <HAL_ADC_ConfigChannel+0xa50>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d120      	bne.n	8004c92 <HAL_ADC_ConfigChannel+0x9aa>
 8004c50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d11a      	bne.n	8004c92 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a30      	ldr	r2, [pc, #192]	; (8004d24 <HAL_ADC_ConfigChannel+0xa3c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d14e      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a2c      	ldr	r2, [pc, #176]	; (8004d1c <HAL_ADC_ConfigChannel+0xa34>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d004      	beq.n	8004c7a <HAL_ADC_ConfigChannel+0x992>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a2a      	ldr	r2, [pc, #168]	; (8004d20 <HAL_ADC_ConfigChannel+0xa38>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d101      	bne.n	8004c7e <HAL_ADC_ConfigChannel+0x996>
 8004c7a:	4a2c      	ldr	r2, [pc, #176]	; (8004d2c <HAL_ADC_ConfigChannel+0xa44>)
 8004c7c:	e000      	b.n	8004c80 <HAL_ADC_ConfigChannel+0x998>
 8004c7e:	4a26      	ldr	r2, [pc, #152]	; (8004d18 <HAL_ADC_ConfigChannel+0xa30>)
 8004c80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004c84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	f7fe fef1 	bl	8003a72 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c90:	e038      	b.n	8004d04 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a29      	ldr	r2, [pc, #164]	; (8004d3c <HAL_ADC_ConfigChannel+0xa54>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d133      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0xa1c>
 8004c9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d12d      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a1d      	ldr	r2, [pc, #116]	; (8004d24 <HAL_ADC_ConfigChannel+0xa3c>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d128      	bne.n	8004d04 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a19      	ldr	r2, [pc, #100]	; (8004d1c <HAL_ADC_ConfigChannel+0xa34>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d004      	beq.n	8004cc6 <HAL_ADC_ConfigChannel+0x9de>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a17      	ldr	r2, [pc, #92]	; (8004d20 <HAL_ADC_ConfigChannel+0xa38>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d101      	bne.n	8004cca <HAL_ADC_ConfigChannel+0x9e2>
 8004cc6:	4a19      	ldr	r2, [pc, #100]	; (8004d2c <HAL_ADC_ConfigChannel+0xa44>)
 8004cc8:	e000      	b.n	8004ccc <HAL_ADC_ConfigChannel+0x9e4>
 8004cca:	4a13      	ldr	r2, [pc, #76]	; (8004d18 <HAL_ADC_ConfigChannel+0xa30>)
 8004ccc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004cd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	f7fe fecb 	bl	8003a72 <LL_ADC_SetCommonPathInternalCh>
 8004cdc:	e012      	b.n	8004d04 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce2:	f043 0220 	orr.w	r2, r3, #32
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8004cf0:	e008      	b.n	8004d04 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cf6:	f043 0220 	orr.w	r2, r3, #32
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8004d0c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	37e4      	adds	r7, #228	; 0xe4
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd90      	pop	{r4, r7, pc}
 8004d18:	58026300 	.word	0x58026300
 8004d1c:	40022000 	.word	0x40022000
 8004d20:	40022100 	.word	0x40022100
 8004d24:	58026000 	.word	0x58026000
 8004d28:	c7520000 	.word	0xc7520000
 8004d2c:	40022300 	.word	0x40022300
 8004d30:	24000000 	.word	0x24000000
 8004d34:	053e2d63 	.word	0x053e2d63
 8004d38:	c3210000 	.word	0xc3210000
 8004d3c:	cb840000 	.word	0xcb840000

08004d40 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b084      	sub	sp, #16
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a6c      	ldr	r2, [pc, #432]	; (8004f00 <ADC_ConfigureBoostMode+0x1c0>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d004      	beq.n	8004d5c <ADC_ConfigureBoostMode+0x1c>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a6b      	ldr	r2, [pc, #428]	; (8004f04 <ADC_ConfigureBoostMode+0x1c4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d109      	bne.n	8004d70 <ADC_ConfigureBoostMode+0x30>
 8004d5c:	4b6a      	ldr	r3, [pc, #424]	; (8004f08 <ADC_ConfigureBoostMode+0x1c8>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	bf14      	ite	ne
 8004d68:	2301      	movne	r3, #1
 8004d6a:	2300      	moveq	r3, #0
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	e008      	b.n	8004d82 <ADC_ConfigureBoostMode+0x42>
 8004d70:	4b66      	ldr	r3, [pc, #408]	; (8004f0c <ADC_ConfigureBoostMode+0x1cc>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	bf14      	ite	ne
 8004d7c:	2301      	movne	r3, #1
 8004d7e:	2300      	moveq	r3, #0
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d01c      	beq.n	8004dc0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004d86:	f005 fc91 	bl	800a6ac <HAL_RCC_GetHCLKFreq>
 8004d8a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d94:	d010      	beq.n	8004db8 <ADC_ConfigureBoostMode+0x78>
 8004d96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004d9a:	d873      	bhi.n	8004e84 <ADC_ConfigureBoostMode+0x144>
 8004d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da0:	d002      	beq.n	8004da8 <ADC_ConfigureBoostMode+0x68>
 8004da2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004da6:	d16d      	bne.n	8004e84 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	0c1b      	lsrs	r3, r3, #16
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db4:	60fb      	str	r3, [r7, #12]
        break;
 8004db6:	e068      	b.n	8004e8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	089b      	lsrs	r3, r3, #2
 8004dbc:	60fb      	str	r3, [r7, #12]
        break;
 8004dbe:	e064      	b.n	8004e8a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004dc0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004dc4:	f04f 0100 	mov.w	r1, #0
 8004dc8:	f006 fe6c 	bl	800baa4 <HAL_RCCEx_GetPeriphCLKFreq>
 8004dcc:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004dd6:	d051      	beq.n	8004e7c <ADC_ConfigureBoostMode+0x13c>
 8004dd8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004ddc:	d854      	bhi.n	8004e88 <ADC_ConfigureBoostMode+0x148>
 8004dde:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004de2:	d047      	beq.n	8004e74 <ADC_ConfigureBoostMode+0x134>
 8004de4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004de8:	d84e      	bhi.n	8004e88 <ADC_ConfigureBoostMode+0x148>
 8004dea:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004dee:	d03d      	beq.n	8004e6c <ADC_ConfigureBoostMode+0x12c>
 8004df0:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004df4:	d848      	bhi.n	8004e88 <ADC_ConfigureBoostMode+0x148>
 8004df6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dfa:	d033      	beq.n	8004e64 <ADC_ConfigureBoostMode+0x124>
 8004dfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e00:	d842      	bhi.n	8004e88 <ADC_ConfigureBoostMode+0x148>
 8004e02:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e06:	d029      	beq.n	8004e5c <ADC_ConfigureBoostMode+0x11c>
 8004e08:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e0c:	d83c      	bhi.n	8004e88 <ADC_ConfigureBoostMode+0x148>
 8004e0e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e12:	d01a      	beq.n	8004e4a <ADC_ConfigureBoostMode+0x10a>
 8004e14:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e18:	d836      	bhi.n	8004e88 <ADC_ConfigureBoostMode+0x148>
 8004e1a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e1e:	d014      	beq.n	8004e4a <ADC_ConfigureBoostMode+0x10a>
 8004e20:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e24:	d830      	bhi.n	8004e88 <ADC_ConfigureBoostMode+0x148>
 8004e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e2a:	d00e      	beq.n	8004e4a <ADC_ConfigureBoostMode+0x10a>
 8004e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e30:	d82a      	bhi.n	8004e88 <ADC_ConfigureBoostMode+0x148>
 8004e32:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e36:	d008      	beq.n	8004e4a <ADC_ConfigureBoostMode+0x10a>
 8004e38:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e3c:	d824      	bhi.n	8004e88 <ADC_ConfigureBoostMode+0x148>
 8004e3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e42:	d002      	beq.n	8004e4a <ADC_ConfigureBoostMode+0x10a>
 8004e44:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e48:	d11e      	bne.n	8004e88 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	0c9b      	lsrs	r3, r3, #18
 8004e50:	005b      	lsls	r3, r3, #1
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e58:	60fb      	str	r3, [r7, #12]
        break;
 8004e5a:	e016      	b.n	8004e8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	091b      	lsrs	r3, r3, #4
 8004e60:	60fb      	str	r3, [r7, #12]
        break;
 8004e62:	e012      	b.n	8004e8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	095b      	lsrs	r3, r3, #5
 8004e68:	60fb      	str	r3, [r7, #12]
        break;
 8004e6a:	e00e      	b.n	8004e8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	099b      	lsrs	r3, r3, #6
 8004e70:	60fb      	str	r3, [r7, #12]
        break;
 8004e72:	e00a      	b.n	8004e8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	09db      	lsrs	r3, r3, #7
 8004e78:	60fb      	str	r3, [r7, #12]
        break;
 8004e7a:	e006      	b.n	8004e8a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	0a1b      	lsrs	r3, r3, #8
 8004e80:	60fb      	str	r3, [r7, #12]
        break;
 8004e82:	e002      	b.n	8004e8a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004e84:	bf00      	nop
 8004e86:	e000      	b.n	8004e8a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004e88:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	085b      	lsrs	r3, r3, #1
 8004e8e:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	4a1f      	ldr	r2, [pc, #124]	; (8004f10 <ADC_ConfigureBoostMode+0x1d0>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d808      	bhi.n	8004eaa <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689a      	ldr	r2, [r3, #8]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004ea6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004ea8:	e025      	b.n	8004ef6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4a19      	ldr	r2, [pc, #100]	; (8004f14 <ADC_ConfigureBoostMode+0x1d4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d80a      	bhi.n	8004ec8 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ec4:	609a      	str	r2, [r3, #8]
}
 8004ec6:	e016      	b.n	8004ef6 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4a13      	ldr	r2, [pc, #76]	; (8004f18 <ADC_ConfigureBoostMode+0x1d8>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d80a      	bhi.n	8004ee6 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ee2:	609a      	str	r2, [r3, #8]
}
 8004ee4:	e007      	b.n	8004ef6 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004ef4:	609a      	str	r2, [r3, #8]
}
 8004ef6:	bf00      	nop
 8004ef8:	3710      	adds	r7, #16
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40022000 	.word	0x40022000
 8004f04:	40022100 	.word	0x40022100
 8004f08:	40022300 	.word	0x40022300
 8004f0c:	58026300 	.word	0x58026300
 8004f10:	005f5e10 	.word	0x005f5e10
 8004f14:	00bebc20 	.word	0x00bebc20
 8004f18:	017d7840 	.word	0x017d7840

08004f1c <LL_ADC_IsEnabled>:
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d101      	bne.n	8004f34 <LL_ADC_IsEnabled+0x18>
 8004f30:	2301      	movs	r3, #1
 8004f32:	e000      	b.n	8004f36 <LL_ADC_IsEnabled+0x1a>
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <LL_ADC_REG_IsConversionOngoing>:
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d101      	bne.n	8004f5a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004f68:	b590      	push	{r4, r7, lr}
 8004f6a:	b0a3      	sub	sp, #140	; 0x8c
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d101      	bne.n	8004f86 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004f82:	2302      	movs	r3, #2
 8004f84:	e0c1      	b.n	800510a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8004f92:	2300      	movs	r3, #0
 8004f94:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a5e      	ldr	r2, [pc, #376]	; (8005114 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d102      	bne.n	8004fa6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004fa0:	4b5d      	ldr	r3, [pc, #372]	; (8005118 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	e001      	b.n	8004faa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10b      	bne.n	8004fc8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fb4:	f043 0220 	orr.w	r2, r3, #32
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0a0      	b.n	800510a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7ff ffb9 	bl	8004f42 <LL_ADC_REG_IsConversionOngoing>
 8004fd0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7ff ffb2 	bl	8004f42 <LL_ADC_REG_IsConversionOngoing>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f040 8081 	bne.w	80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004fe6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d17c      	bne.n	80050e8 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a48      	ldr	r2, [pc, #288]	; (8005114 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d004      	beq.n	8005002 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a46      	ldr	r2, [pc, #280]	; (8005118 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d101      	bne.n	8005006 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005002:	4b46      	ldr	r3, [pc, #280]	; (800511c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005004:	e000      	b.n	8005008 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005006:	4b46      	ldr	r3, [pc, #280]	; (8005120 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005008:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d039      	beq.n	8005086 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005012:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	431a      	orrs	r2, r3
 8005020:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005022:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a3a      	ldr	r2, [pc, #232]	; (8005114 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d004      	beq.n	8005038 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a39      	ldr	r2, [pc, #228]	; (8005118 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d10e      	bne.n	8005056 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005038:	4836      	ldr	r0, [pc, #216]	; (8005114 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800503a:	f7ff ff6f 	bl	8004f1c <LL_ADC_IsEnabled>
 800503e:	4604      	mov	r4, r0
 8005040:	4835      	ldr	r0, [pc, #212]	; (8005118 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005042:	f7ff ff6b 	bl	8004f1c <LL_ADC_IsEnabled>
 8005046:	4603      	mov	r3, r0
 8005048:	4323      	orrs	r3, r4
 800504a:	2b00      	cmp	r3, #0
 800504c:	bf0c      	ite	eq
 800504e:	2301      	moveq	r3, #1
 8005050:	2300      	movne	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	e008      	b.n	8005068 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8005056:	4833      	ldr	r0, [pc, #204]	; (8005124 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005058:	f7ff ff60 	bl	8004f1c <LL_ADC_IsEnabled>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	bf0c      	ite	eq
 8005062:	2301      	moveq	r3, #1
 8005064:	2300      	movne	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d047      	beq.n	80050fc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800506c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	4b2d      	ldr	r3, [pc, #180]	; (8005128 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005072:	4013      	ands	r3, r2
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	6811      	ldr	r1, [r2, #0]
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	6892      	ldr	r2, [r2, #8]
 800507c:	430a      	orrs	r2, r1
 800507e:	431a      	orrs	r2, r3
 8005080:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005082:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005084:	e03a      	b.n	80050fc <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005086:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800508e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005090:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a1f      	ldr	r2, [pc, #124]	; (8005114 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d004      	beq.n	80050a6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a1d      	ldr	r2, [pc, #116]	; (8005118 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d10e      	bne.n	80050c4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80050a6:	481b      	ldr	r0, [pc, #108]	; (8005114 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80050a8:	f7ff ff38 	bl	8004f1c <LL_ADC_IsEnabled>
 80050ac:	4604      	mov	r4, r0
 80050ae:	481a      	ldr	r0, [pc, #104]	; (8005118 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80050b0:	f7ff ff34 	bl	8004f1c <LL_ADC_IsEnabled>
 80050b4:	4603      	mov	r3, r0
 80050b6:	4323      	orrs	r3, r4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	bf0c      	ite	eq
 80050bc:	2301      	moveq	r3, #1
 80050be:	2300      	movne	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	e008      	b.n	80050d6 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80050c4:	4817      	ldr	r0, [pc, #92]	; (8005124 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80050c6:	f7ff ff29 	bl	8004f1c <LL_ADC_IsEnabled>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	bf0c      	ite	eq
 80050d0:	2301      	moveq	r3, #1
 80050d2:	2300      	movne	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d010      	beq.n	80050fc <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80050da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80050dc:	689a      	ldr	r2, [r3, #8]
 80050de:	4b12      	ldr	r3, [pc, #72]	; (8005128 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80050e0:	4013      	ands	r3, r2
 80050e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80050e4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050e6:	e009      	b.n	80050fc <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ec:	f043 0220 	orr.w	r2, r3, #32
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80050fa:	e000      	b.n	80050fe <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80050fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005106:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800510a:	4618      	mov	r0, r3
 800510c:	378c      	adds	r7, #140	; 0x8c
 800510e:	46bd      	mov	sp, r7
 8005110:	bd90      	pop	{r4, r7, pc}
 8005112:	bf00      	nop
 8005114:	40022000 	.word	0x40022000
 8005118:	40022100 	.word	0x40022100
 800511c:	40022300 	.word	0x40022300
 8005120:	58026300 	.word	0x58026300
 8005124:	58026000 	.word	0x58026000
 8005128:	fffff0e0 	.word	0xfffff0e0

0800512c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800513c:	4b0b      	ldr	r3, [pc, #44]	; (800516c <__NVIC_SetPriorityGrouping+0x40>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005148:	4013      	ands	r3, r2
 800514a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005154:	4b06      	ldr	r3, [pc, #24]	; (8005170 <__NVIC_SetPriorityGrouping+0x44>)
 8005156:	4313      	orrs	r3, r2
 8005158:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800515a:	4a04      	ldr	r2, [pc, #16]	; (800516c <__NVIC_SetPriorityGrouping+0x40>)
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	60d3      	str	r3, [r2, #12]
}
 8005160:	bf00      	nop
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	e000ed00 	.word	0xe000ed00
 8005170:	05fa0000 	.word	0x05fa0000

08005174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005178:	4b04      	ldr	r3, [pc, #16]	; (800518c <__NVIC_GetPriorityGrouping+0x18>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	0a1b      	lsrs	r3, r3, #8
 800517e:	f003 0307 	and.w	r3, r3, #7
}
 8005182:	4618      	mov	r0, r3
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	e000ed00 	.word	0xe000ed00

08005190 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	4603      	mov	r3, r0
 8005198:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800519a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	db0b      	blt.n	80051ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051a2:	88fb      	ldrh	r3, [r7, #6]
 80051a4:	f003 021f 	and.w	r2, r3, #31
 80051a8:	4907      	ldr	r1, [pc, #28]	; (80051c8 <__NVIC_EnableIRQ+0x38>)
 80051aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051ae:	095b      	lsrs	r3, r3, #5
 80051b0:	2001      	movs	r0, #1
 80051b2:	fa00 f202 	lsl.w	r2, r0, r2
 80051b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80051ba:	bf00      	nop
 80051bc:	370c      	adds	r7, #12
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	e000e100 	.word	0xe000e100

080051cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	6039      	str	r1, [r7, #0]
 80051d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80051d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	db0a      	blt.n	80051f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	b2da      	uxtb	r2, r3
 80051e4:	490c      	ldr	r1, [pc, #48]	; (8005218 <__NVIC_SetPriority+0x4c>)
 80051e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80051ea:	0112      	lsls	r2, r2, #4
 80051ec:	b2d2      	uxtb	r2, r2
 80051ee:	440b      	add	r3, r1
 80051f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051f4:	e00a      	b.n	800520c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	b2da      	uxtb	r2, r3
 80051fa:	4908      	ldr	r1, [pc, #32]	; (800521c <__NVIC_SetPriority+0x50>)
 80051fc:	88fb      	ldrh	r3, [r7, #6]
 80051fe:	f003 030f 	and.w	r3, r3, #15
 8005202:	3b04      	subs	r3, #4
 8005204:	0112      	lsls	r2, r2, #4
 8005206:	b2d2      	uxtb	r2, r2
 8005208:	440b      	add	r3, r1
 800520a:	761a      	strb	r2, [r3, #24]
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	e000e100 	.word	0xe000e100
 800521c:	e000ed00 	.word	0xe000ed00

08005220 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005220:	b480      	push	{r7}
 8005222:	b089      	sub	sp, #36	; 0x24
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	f1c3 0307 	rsb	r3, r3, #7
 800523a:	2b04      	cmp	r3, #4
 800523c:	bf28      	it	cs
 800523e:	2304      	movcs	r3, #4
 8005240:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	3304      	adds	r3, #4
 8005246:	2b06      	cmp	r3, #6
 8005248:	d902      	bls.n	8005250 <NVIC_EncodePriority+0x30>
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	3b03      	subs	r3, #3
 800524e:	e000      	b.n	8005252 <NVIC_EncodePriority+0x32>
 8005250:	2300      	movs	r3, #0
 8005252:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005254:	f04f 32ff 	mov.w	r2, #4294967295
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	fa02 f303 	lsl.w	r3, r2, r3
 800525e:	43da      	mvns	r2, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	401a      	ands	r2, r3
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005268:	f04f 31ff 	mov.w	r1, #4294967295
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	fa01 f303 	lsl.w	r3, r1, r3
 8005272:	43d9      	mvns	r1, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005278:	4313      	orrs	r3, r2
         );
}
 800527a:	4618      	mov	r0, r3
 800527c:	3724      	adds	r7, #36	; 0x24
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
	...

08005288 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3b01      	subs	r3, #1
 8005294:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005298:	d301      	bcc.n	800529e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800529a:	2301      	movs	r3, #1
 800529c:	e00f      	b.n	80052be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800529e:	4a0a      	ldr	r2, [pc, #40]	; (80052c8 <SysTick_Config+0x40>)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	3b01      	subs	r3, #1
 80052a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80052a6:	210f      	movs	r1, #15
 80052a8:	f04f 30ff 	mov.w	r0, #4294967295
 80052ac:	f7ff ff8e 	bl	80051cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80052b0:	4b05      	ldr	r3, [pc, #20]	; (80052c8 <SysTick_Config+0x40>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80052b6:	4b04      	ldr	r3, [pc, #16]	; (80052c8 <SysTick_Config+0x40>)
 80052b8:	2207      	movs	r2, #7
 80052ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3708      	adds	r7, #8
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	e000e010 	.word	0xe000e010

080052cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7ff ff29 	bl	800512c <__NVIC_SetPriorityGrouping>
}
 80052da:	bf00      	nop
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80052e2:	b580      	push	{r7, lr}
 80052e4:	b086      	sub	sp, #24
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	4603      	mov	r3, r0
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	607a      	str	r2, [r7, #4]
 80052ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80052f0:	f7ff ff40 	bl	8005174 <__NVIC_GetPriorityGrouping>
 80052f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	68b9      	ldr	r1, [r7, #8]
 80052fa:	6978      	ldr	r0, [r7, #20]
 80052fc:	f7ff ff90 	bl	8005220 <NVIC_EncodePriority>
 8005300:	4602      	mov	r2, r0
 8005302:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005306:	4611      	mov	r1, r2
 8005308:	4618      	mov	r0, r3
 800530a:	f7ff ff5f 	bl	80051cc <__NVIC_SetPriority>
}
 800530e:	bf00      	nop
 8005310:	3718      	adds	r7, #24
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005316:	b580      	push	{r7, lr}
 8005318:	b082      	sub	sp, #8
 800531a:	af00      	add	r7, sp, #0
 800531c:	4603      	mov	r3, r0
 800531e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005320:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005324:	4618      	mov	r0, r3
 8005326:	f7ff ff33 	bl	8005190 <__NVIC_EnableIRQ>
}
 800532a:	bf00      	nop
 800532c:	3708      	adds	r7, #8
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b082      	sub	sp, #8
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7ff ffa4 	bl	8005288 <SysTick_Config>
 8005340:	4603      	mov	r3, r0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005354:	f7fe fb34 	bl	80039c0 <HAL_GetTick>
 8005358:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e312      	b.n	800598a <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a66      	ldr	r2, [pc, #408]	; (8005504 <HAL_DMA_Init+0x1b8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d04a      	beq.n	8005404 <HAL_DMA_Init+0xb8>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a65      	ldr	r2, [pc, #404]	; (8005508 <HAL_DMA_Init+0x1bc>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d045      	beq.n	8005404 <HAL_DMA_Init+0xb8>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a63      	ldr	r2, [pc, #396]	; (800550c <HAL_DMA_Init+0x1c0>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d040      	beq.n	8005404 <HAL_DMA_Init+0xb8>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a62      	ldr	r2, [pc, #392]	; (8005510 <HAL_DMA_Init+0x1c4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d03b      	beq.n	8005404 <HAL_DMA_Init+0xb8>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a60      	ldr	r2, [pc, #384]	; (8005514 <HAL_DMA_Init+0x1c8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d036      	beq.n	8005404 <HAL_DMA_Init+0xb8>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a5f      	ldr	r2, [pc, #380]	; (8005518 <HAL_DMA_Init+0x1cc>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d031      	beq.n	8005404 <HAL_DMA_Init+0xb8>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a5d      	ldr	r2, [pc, #372]	; (800551c <HAL_DMA_Init+0x1d0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d02c      	beq.n	8005404 <HAL_DMA_Init+0xb8>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a5c      	ldr	r2, [pc, #368]	; (8005520 <HAL_DMA_Init+0x1d4>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d027      	beq.n	8005404 <HAL_DMA_Init+0xb8>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a5a      	ldr	r2, [pc, #360]	; (8005524 <HAL_DMA_Init+0x1d8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d022      	beq.n	8005404 <HAL_DMA_Init+0xb8>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a59      	ldr	r2, [pc, #356]	; (8005528 <HAL_DMA_Init+0x1dc>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d01d      	beq.n	8005404 <HAL_DMA_Init+0xb8>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a57      	ldr	r2, [pc, #348]	; (800552c <HAL_DMA_Init+0x1e0>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d018      	beq.n	8005404 <HAL_DMA_Init+0xb8>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a56      	ldr	r2, [pc, #344]	; (8005530 <HAL_DMA_Init+0x1e4>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d013      	beq.n	8005404 <HAL_DMA_Init+0xb8>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a54      	ldr	r2, [pc, #336]	; (8005534 <HAL_DMA_Init+0x1e8>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d00e      	beq.n	8005404 <HAL_DMA_Init+0xb8>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a53      	ldr	r2, [pc, #332]	; (8005538 <HAL_DMA_Init+0x1ec>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d009      	beq.n	8005404 <HAL_DMA_Init+0xb8>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a51      	ldr	r2, [pc, #324]	; (800553c <HAL_DMA_Init+0x1f0>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d004      	beq.n	8005404 <HAL_DMA_Init+0xb8>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a50      	ldr	r2, [pc, #320]	; (8005540 <HAL_DMA_Init+0x1f4>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d101      	bne.n	8005408 <HAL_DMA_Init+0xbc>
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <HAL_DMA_Init+0xbe>
 8005408:	2300      	movs	r3, #0
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 813c 	beq.w	8005688 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2202      	movs	r2, #2
 8005414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a37      	ldr	r2, [pc, #220]	; (8005504 <HAL_DMA_Init+0x1b8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d04a      	beq.n	80054c0 <HAL_DMA_Init+0x174>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a36      	ldr	r2, [pc, #216]	; (8005508 <HAL_DMA_Init+0x1bc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d045      	beq.n	80054c0 <HAL_DMA_Init+0x174>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a34      	ldr	r2, [pc, #208]	; (800550c <HAL_DMA_Init+0x1c0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d040      	beq.n	80054c0 <HAL_DMA_Init+0x174>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a33      	ldr	r2, [pc, #204]	; (8005510 <HAL_DMA_Init+0x1c4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d03b      	beq.n	80054c0 <HAL_DMA_Init+0x174>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a31      	ldr	r2, [pc, #196]	; (8005514 <HAL_DMA_Init+0x1c8>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d036      	beq.n	80054c0 <HAL_DMA_Init+0x174>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a30      	ldr	r2, [pc, #192]	; (8005518 <HAL_DMA_Init+0x1cc>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d031      	beq.n	80054c0 <HAL_DMA_Init+0x174>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a2e      	ldr	r2, [pc, #184]	; (800551c <HAL_DMA_Init+0x1d0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d02c      	beq.n	80054c0 <HAL_DMA_Init+0x174>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a2d      	ldr	r2, [pc, #180]	; (8005520 <HAL_DMA_Init+0x1d4>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d027      	beq.n	80054c0 <HAL_DMA_Init+0x174>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a2b      	ldr	r2, [pc, #172]	; (8005524 <HAL_DMA_Init+0x1d8>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d022      	beq.n	80054c0 <HAL_DMA_Init+0x174>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a2a      	ldr	r2, [pc, #168]	; (8005528 <HAL_DMA_Init+0x1dc>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d01d      	beq.n	80054c0 <HAL_DMA_Init+0x174>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a28      	ldr	r2, [pc, #160]	; (800552c <HAL_DMA_Init+0x1e0>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d018      	beq.n	80054c0 <HAL_DMA_Init+0x174>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a27      	ldr	r2, [pc, #156]	; (8005530 <HAL_DMA_Init+0x1e4>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d013      	beq.n	80054c0 <HAL_DMA_Init+0x174>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a25      	ldr	r2, [pc, #148]	; (8005534 <HAL_DMA_Init+0x1e8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d00e      	beq.n	80054c0 <HAL_DMA_Init+0x174>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a24      	ldr	r2, [pc, #144]	; (8005538 <HAL_DMA_Init+0x1ec>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d009      	beq.n	80054c0 <HAL_DMA_Init+0x174>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a22      	ldr	r2, [pc, #136]	; (800553c <HAL_DMA_Init+0x1f0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d004      	beq.n	80054c0 <HAL_DMA_Init+0x174>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a21      	ldr	r2, [pc, #132]	; (8005540 <HAL_DMA_Init+0x1f4>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d108      	bne.n	80054d2 <HAL_DMA_Init+0x186>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f022 0201 	bic.w	r2, r2, #1
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	e007      	b.n	80054e2 <HAL_DMA_Init+0x196>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0201 	bic.w	r2, r2, #1
 80054e0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80054e2:	e02f      	b.n	8005544 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054e4:	f7fe fa6c 	bl	80039c0 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b05      	cmp	r3, #5
 80054f0:	d928      	bls.n	8005544 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2203      	movs	r2, #3
 80054fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005500:	2301      	movs	r3, #1
 8005502:	e242      	b.n	800598a <HAL_DMA_Init+0x63e>
 8005504:	40020010 	.word	0x40020010
 8005508:	40020028 	.word	0x40020028
 800550c:	40020040 	.word	0x40020040
 8005510:	40020058 	.word	0x40020058
 8005514:	40020070 	.word	0x40020070
 8005518:	40020088 	.word	0x40020088
 800551c:	400200a0 	.word	0x400200a0
 8005520:	400200b8 	.word	0x400200b8
 8005524:	40020410 	.word	0x40020410
 8005528:	40020428 	.word	0x40020428
 800552c:	40020440 	.word	0x40020440
 8005530:	40020458 	.word	0x40020458
 8005534:	40020470 	.word	0x40020470
 8005538:	40020488 	.word	0x40020488
 800553c:	400204a0 	.word	0x400204a0
 8005540:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1c8      	bne.n	80054e4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800555a:	697a      	ldr	r2, [r7, #20]
 800555c:	4b83      	ldr	r3, [pc, #524]	; (800576c <HAL_DMA_Init+0x420>)
 800555e:	4013      	ands	r3, r2
 8005560:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800556a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	691b      	ldr	r3, [r3, #16]
 8005570:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005576:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005582:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4313      	orrs	r3, r2
 800558e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	2b04      	cmp	r3, #4
 8005596:	d107      	bne.n	80055a8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	4313      	orrs	r3, r2
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	4313      	orrs	r3, r2
 80055a6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b28      	cmp	r3, #40	; 0x28
 80055ae:	d903      	bls.n	80055b8 <HAL_DMA_Init+0x26c>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2b2e      	cmp	r3, #46	; 0x2e
 80055b6:	d91f      	bls.n	80055f8 <HAL_DMA_Init+0x2ac>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2b3e      	cmp	r3, #62	; 0x3e
 80055be:	d903      	bls.n	80055c8 <HAL_DMA_Init+0x27c>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	2b42      	cmp	r3, #66	; 0x42
 80055c6:	d917      	bls.n	80055f8 <HAL_DMA_Init+0x2ac>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2b46      	cmp	r3, #70	; 0x46
 80055ce:	d903      	bls.n	80055d8 <HAL_DMA_Init+0x28c>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b48      	cmp	r3, #72	; 0x48
 80055d6:	d90f      	bls.n	80055f8 <HAL_DMA_Init+0x2ac>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	2b4e      	cmp	r3, #78	; 0x4e
 80055de:	d903      	bls.n	80055e8 <HAL_DMA_Init+0x29c>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	2b52      	cmp	r3, #82	; 0x52
 80055e6:	d907      	bls.n	80055f8 <HAL_DMA_Init+0x2ac>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	2b73      	cmp	r3, #115	; 0x73
 80055ee:	d905      	bls.n	80055fc <HAL_DMA_Init+0x2b0>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	2b77      	cmp	r3, #119	; 0x77
 80055f6:	d801      	bhi.n	80055fc <HAL_DMA_Init+0x2b0>
 80055f8:	2301      	movs	r3, #1
 80055fa:	e000      	b.n	80055fe <HAL_DMA_Init+0x2b2>
 80055fc:	2300      	movs	r3, #0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d003      	beq.n	800560a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005608:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f023 0307 	bic.w	r3, r3, #7
 8005620:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	4313      	orrs	r3, r2
 800562a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005630:	2b04      	cmp	r3, #4
 8005632:	d117      	bne.n	8005664 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00e      	beq.n	8005664 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f001 fdca 	bl	80071e0 <DMA_CheckFifoParam>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d008      	beq.n	8005664 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2240      	movs	r2, #64	; 0x40
 8005656:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e192      	b.n	800598a <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f001 fd05 	bl	800707c <DMA_CalcBaseAndBitshift>
 8005672:	4603      	mov	r3, r0
 8005674:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800567a:	f003 031f 	and.w	r3, r3, #31
 800567e:	223f      	movs	r2, #63	; 0x3f
 8005680:	409a      	lsls	r2, r3
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	609a      	str	r2, [r3, #8]
 8005686:	e0c8      	b.n	800581a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a38      	ldr	r2, [pc, #224]	; (8005770 <HAL_DMA_Init+0x424>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d022      	beq.n	80056d8 <HAL_DMA_Init+0x38c>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a37      	ldr	r2, [pc, #220]	; (8005774 <HAL_DMA_Init+0x428>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d01d      	beq.n	80056d8 <HAL_DMA_Init+0x38c>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a35      	ldr	r2, [pc, #212]	; (8005778 <HAL_DMA_Init+0x42c>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d018      	beq.n	80056d8 <HAL_DMA_Init+0x38c>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a34      	ldr	r2, [pc, #208]	; (800577c <HAL_DMA_Init+0x430>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d013      	beq.n	80056d8 <HAL_DMA_Init+0x38c>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a32      	ldr	r2, [pc, #200]	; (8005780 <HAL_DMA_Init+0x434>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00e      	beq.n	80056d8 <HAL_DMA_Init+0x38c>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a31      	ldr	r2, [pc, #196]	; (8005784 <HAL_DMA_Init+0x438>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d009      	beq.n	80056d8 <HAL_DMA_Init+0x38c>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a2f      	ldr	r2, [pc, #188]	; (8005788 <HAL_DMA_Init+0x43c>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d004      	beq.n	80056d8 <HAL_DMA_Init+0x38c>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a2e      	ldr	r2, [pc, #184]	; (800578c <HAL_DMA_Init+0x440>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d101      	bne.n	80056dc <HAL_DMA_Init+0x390>
 80056d8:	2301      	movs	r3, #1
 80056da:	e000      	b.n	80056de <HAL_DMA_Init+0x392>
 80056dc:	2300      	movs	r3, #0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8092 	beq.w	8005808 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a21      	ldr	r2, [pc, #132]	; (8005770 <HAL_DMA_Init+0x424>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d021      	beq.n	8005732 <HAL_DMA_Init+0x3e6>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a20      	ldr	r2, [pc, #128]	; (8005774 <HAL_DMA_Init+0x428>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d01c      	beq.n	8005732 <HAL_DMA_Init+0x3e6>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a1e      	ldr	r2, [pc, #120]	; (8005778 <HAL_DMA_Init+0x42c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d017      	beq.n	8005732 <HAL_DMA_Init+0x3e6>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a1d      	ldr	r2, [pc, #116]	; (800577c <HAL_DMA_Init+0x430>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d012      	beq.n	8005732 <HAL_DMA_Init+0x3e6>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a1b      	ldr	r2, [pc, #108]	; (8005780 <HAL_DMA_Init+0x434>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00d      	beq.n	8005732 <HAL_DMA_Init+0x3e6>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1a      	ldr	r2, [pc, #104]	; (8005784 <HAL_DMA_Init+0x438>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d008      	beq.n	8005732 <HAL_DMA_Init+0x3e6>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a18      	ldr	r2, [pc, #96]	; (8005788 <HAL_DMA_Init+0x43c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d003      	beq.n	8005732 <HAL_DMA_Init+0x3e6>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a17      	ldr	r2, [pc, #92]	; (800578c <HAL_DMA_Init+0x440>)
 8005730:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2202      	movs	r2, #2
 8005736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	4b10      	ldr	r3, [pc, #64]	; (8005790 <HAL_DMA_Init+0x444>)
 800574e:	4013      	ands	r3, r2
 8005750:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	2b40      	cmp	r3, #64	; 0x40
 8005758:	d01c      	beq.n	8005794 <HAL_DMA_Init+0x448>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	689b      	ldr	r3, [r3, #8]
 800575e:	2b80      	cmp	r3, #128	; 0x80
 8005760:	d102      	bne.n	8005768 <HAL_DMA_Init+0x41c>
 8005762:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005766:	e016      	b.n	8005796 <HAL_DMA_Init+0x44a>
 8005768:	2300      	movs	r3, #0
 800576a:	e014      	b.n	8005796 <HAL_DMA_Init+0x44a>
 800576c:	fe10803f 	.word	0xfe10803f
 8005770:	58025408 	.word	0x58025408
 8005774:	5802541c 	.word	0x5802541c
 8005778:	58025430 	.word	0x58025430
 800577c:	58025444 	.word	0x58025444
 8005780:	58025458 	.word	0x58025458
 8005784:	5802546c 	.word	0x5802546c
 8005788:	58025480 	.word	0x58025480
 800578c:	58025494 	.word	0x58025494
 8005790:	fffe000f 	.word	0xfffe000f
 8005794:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	68d2      	ldr	r2, [r2, #12]
 800579a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800579c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	691b      	ldr	r3, [r3, #16]
 80057a2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80057a4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80057ac:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80057b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80057bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80057c4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	4b6e      	ldr	r3, [pc, #440]	; (8005994 <HAL_DMA_Init+0x648>)
 80057dc:	4413      	add	r3, r2
 80057de:	4a6e      	ldr	r2, [pc, #440]	; (8005998 <HAL_DMA_Init+0x64c>)
 80057e0:	fba2 2303 	umull	r2, r3, r2, r3
 80057e4:	091b      	lsrs	r3, r3, #4
 80057e6:	009a      	lsls	r2, r3, #2
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f001 fc45 	bl	800707c <DMA_CalcBaseAndBitshift>
 80057f2:	4603      	mov	r3, r0
 80057f4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057fa:	f003 031f 	and.w	r3, r3, #31
 80057fe:	2201      	movs	r2, #1
 8005800:	409a      	lsls	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	605a      	str	r2, [r3, #4]
 8005806:	e008      	b.n	800581a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2240      	movs	r2, #64	; 0x40
 800580c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2203      	movs	r2, #3
 8005812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e0b7      	b.n	800598a <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a5f      	ldr	r2, [pc, #380]	; (800599c <HAL_DMA_Init+0x650>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d072      	beq.n	800590a <HAL_DMA_Init+0x5be>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a5d      	ldr	r2, [pc, #372]	; (80059a0 <HAL_DMA_Init+0x654>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d06d      	beq.n	800590a <HAL_DMA_Init+0x5be>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a5c      	ldr	r2, [pc, #368]	; (80059a4 <HAL_DMA_Init+0x658>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d068      	beq.n	800590a <HAL_DMA_Init+0x5be>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a5a      	ldr	r2, [pc, #360]	; (80059a8 <HAL_DMA_Init+0x65c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d063      	beq.n	800590a <HAL_DMA_Init+0x5be>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a59      	ldr	r2, [pc, #356]	; (80059ac <HAL_DMA_Init+0x660>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d05e      	beq.n	800590a <HAL_DMA_Init+0x5be>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a57      	ldr	r2, [pc, #348]	; (80059b0 <HAL_DMA_Init+0x664>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d059      	beq.n	800590a <HAL_DMA_Init+0x5be>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a56      	ldr	r2, [pc, #344]	; (80059b4 <HAL_DMA_Init+0x668>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d054      	beq.n	800590a <HAL_DMA_Init+0x5be>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a54      	ldr	r2, [pc, #336]	; (80059b8 <HAL_DMA_Init+0x66c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d04f      	beq.n	800590a <HAL_DMA_Init+0x5be>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a53      	ldr	r2, [pc, #332]	; (80059bc <HAL_DMA_Init+0x670>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d04a      	beq.n	800590a <HAL_DMA_Init+0x5be>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a51      	ldr	r2, [pc, #324]	; (80059c0 <HAL_DMA_Init+0x674>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d045      	beq.n	800590a <HAL_DMA_Init+0x5be>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a50      	ldr	r2, [pc, #320]	; (80059c4 <HAL_DMA_Init+0x678>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d040      	beq.n	800590a <HAL_DMA_Init+0x5be>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a4e      	ldr	r2, [pc, #312]	; (80059c8 <HAL_DMA_Init+0x67c>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d03b      	beq.n	800590a <HAL_DMA_Init+0x5be>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a4d      	ldr	r2, [pc, #308]	; (80059cc <HAL_DMA_Init+0x680>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d036      	beq.n	800590a <HAL_DMA_Init+0x5be>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a4b      	ldr	r2, [pc, #300]	; (80059d0 <HAL_DMA_Init+0x684>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d031      	beq.n	800590a <HAL_DMA_Init+0x5be>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a4a      	ldr	r2, [pc, #296]	; (80059d4 <HAL_DMA_Init+0x688>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d02c      	beq.n	800590a <HAL_DMA_Init+0x5be>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a48      	ldr	r2, [pc, #288]	; (80059d8 <HAL_DMA_Init+0x68c>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d027      	beq.n	800590a <HAL_DMA_Init+0x5be>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a47      	ldr	r2, [pc, #284]	; (80059dc <HAL_DMA_Init+0x690>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d022      	beq.n	800590a <HAL_DMA_Init+0x5be>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a45      	ldr	r2, [pc, #276]	; (80059e0 <HAL_DMA_Init+0x694>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d01d      	beq.n	800590a <HAL_DMA_Init+0x5be>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a44      	ldr	r2, [pc, #272]	; (80059e4 <HAL_DMA_Init+0x698>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d018      	beq.n	800590a <HAL_DMA_Init+0x5be>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a42      	ldr	r2, [pc, #264]	; (80059e8 <HAL_DMA_Init+0x69c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d013      	beq.n	800590a <HAL_DMA_Init+0x5be>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a41      	ldr	r2, [pc, #260]	; (80059ec <HAL_DMA_Init+0x6a0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d00e      	beq.n	800590a <HAL_DMA_Init+0x5be>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a3f      	ldr	r2, [pc, #252]	; (80059f0 <HAL_DMA_Init+0x6a4>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d009      	beq.n	800590a <HAL_DMA_Init+0x5be>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a3e      	ldr	r2, [pc, #248]	; (80059f4 <HAL_DMA_Init+0x6a8>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d004      	beq.n	800590a <HAL_DMA_Init+0x5be>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a3c      	ldr	r2, [pc, #240]	; (80059f8 <HAL_DMA_Init+0x6ac>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d101      	bne.n	800590e <HAL_DMA_Init+0x5c2>
 800590a:	2301      	movs	r3, #1
 800590c:	e000      	b.n	8005910 <HAL_DMA_Init+0x5c4>
 800590e:	2300      	movs	r3, #0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d032      	beq.n	800597a <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f001 fcdf 	bl	80072d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	2b80      	cmp	r3, #128	; 0x80
 8005920:	d102      	bne.n	8005928 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005930:	b2d2      	uxtb	r2, r2
 8005932:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800593c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d010      	beq.n	8005968 <HAL_DMA_Init+0x61c>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b08      	cmp	r3, #8
 800594c:	d80c      	bhi.n	8005968 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f001 fd5c 	bl	800740c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005958:	2200      	movs	r2, #0
 800595a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005964:	605a      	str	r2, [r3, #4]
 8005966:	e008      	b.n	800597a <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2200      	movs	r2, #0
 8005978:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3718      	adds	r7, #24
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	a7fdabf8 	.word	0xa7fdabf8
 8005998:	cccccccd 	.word	0xcccccccd
 800599c:	40020010 	.word	0x40020010
 80059a0:	40020028 	.word	0x40020028
 80059a4:	40020040 	.word	0x40020040
 80059a8:	40020058 	.word	0x40020058
 80059ac:	40020070 	.word	0x40020070
 80059b0:	40020088 	.word	0x40020088
 80059b4:	400200a0 	.word	0x400200a0
 80059b8:	400200b8 	.word	0x400200b8
 80059bc:	40020410 	.word	0x40020410
 80059c0:	40020428 	.word	0x40020428
 80059c4:	40020440 	.word	0x40020440
 80059c8:	40020458 	.word	0x40020458
 80059cc:	40020470 	.word	0x40020470
 80059d0:	40020488 	.word	0x40020488
 80059d4:	400204a0 	.word	0x400204a0
 80059d8:	400204b8 	.word	0x400204b8
 80059dc:	58025408 	.word	0x58025408
 80059e0:	5802541c 	.word	0x5802541c
 80059e4:	58025430 	.word	0x58025430
 80059e8:	58025444 	.word	0x58025444
 80059ec:	58025458 	.word	0x58025458
 80059f0:	5802546c 	.word	0x5802546c
 80059f4:	58025480 	.word	0x58025480
 80059f8:	58025494 	.word	0x58025494

080059fc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
 8005a08:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d101      	bne.n	8005a18 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005a14:	2301      	movs	r3, #1
 8005a16:	e226      	b.n	8005e66 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_DMA_Start_IT+0x2a>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e21f      	b.n	8005e66 <HAL_DMA_Start_IT+0x46a>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	f040 820a 	bne.w	8005e50 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a68      	ldr	r2, [pc, #416]	; (8005bf0 <HAL_DMA_Start_IT+0x1f4>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d04a      	beq.n	8005aea <HAL_DMA_Start_IT+0xee>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a66      	ldr	r2, [pc, #408]	; (8005bf4 <HAL_DMA_Start_IT+0x1f8>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d045      	beq.n	8005aea <HAL_DMA_Start_IT+0xee>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a65      	ldr	r2, [pc, #404]	; (8005bf8 <HAL_DMA_Start_IT+0x1fc>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d040      	beq.n	8005aea <HAL_DMA_Start_IT+0xee>
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a63      	ldr	r2, [pc, #396]	; (8005bfc <HAL_DMA_Start_IT+0x200>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d03b      	beq.n	8005aea <HAL_DMA_Start_IT+0xee>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a62      	ldr	r2, [pc, #392]	; (8005c00 <HAL_DMA_Start_IT+0x204>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d036      	beq.n	8005aea <HAL_DMA_Start_IT+0xee>
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a60      	ldr	r2, [pc, #384]	; (8005c04 <HAL_DMA_Start_IT+0x208>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d031      	beq.n	8005aea <HAL_DMA_Start_IT+0xee>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a5f      	ldr	r2, [pc, #380]	; (8005c08 <HAL_DMA_Start_IT+0x20c>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d02c      	beq.n	8005aea <HAL_DMA_Start_IT+0xee>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a5d      	ldr	r2, [pc, #372]	; (8005c0c <HAL_DMA_Start_IT+0x210>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d027      	beq.n	8005aea <HAL_DMA_Start_IT+0xee>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a5c      	ldr	r2, [pc, #368]	; (8005c10 <HAL_DMA_Start_IT+0x214>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d022      	beq.n	8005aea <HAL_DMA_Start_IT+0xee>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a5a      	ldr	r2, [pc, #360]	; (8005c14 <HAL_DMA_Start_IT+0x218>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d01d      	beq.n	8005aea <HAL_DMA_Start_IT+0xee>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a59      	ldr	r2, [pc, #356]	; (8005c18 <HAL_DMA_Start_IT+0x21c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d018      	beq.n	8005aea <HAL_DMA_Start_IT+0xee>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a57      	ldr	r2, [pc, #348]	; (8005c1c <HAL_DMA_Start_IT+0x220>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d013      	beq.n	8005aea <HAL_DMA_Start_IT+0xee>
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a56      	ldr	r2, [pc, #344]	; (8005c20 <HAL_DMA_Start_IT+0x224>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00e      	beq.n	8005aea <HAL_DMA_Start_IT+0xee>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a54      	ldr	r2, [pc, #336]	; (8005c24 <HAL_DMA_Start_IT+0x228>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d009      	beq.n	8005aea <HAL_DMA_Start_IT+0xee>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a53      	ldr	r2, [pc, #332]	; (8005c28 <HAL_DMA_Start_IT+0x22c>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d004      	beq.n	8005aea <HAL_DMA_Start_IT+0xee>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4a51      	ldr	r2, [pc, #324]	; (8005c2c <HAL_DMA_Start_IT+0x230>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d108      	bne.n	8005afc <HAL_DMA_Start_IT+0x100>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0201 	bic.w	r2, r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	e007      	b.n	8005b0c <HAL_DMA_Start_IT+0x110>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f022 0201 	bic.w	r2, r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	68b9      	ldr	r1, [r7, #8]
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f001 f906 	bl	8006d24 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a34      	ldr	r2, [pc, #208]	; (8005bf0 <HAL_DMA_Start_IT+0x1f4>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d04a      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x1bc>
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a33      	ldr	r2, [pc, #204]	; (8005bf4 <HAL_DMA_Start_IT+0x1f8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d045      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x1bc>
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a31      	ldr	r2, [pc, #196]	; (8005bf8 <HAL_DMA_Start_IT+0x1fc>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d040      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x1bc>
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a30      	ldr	r2, [pc, #192]	; (8005bfc <HAL_DMA_Start_IT+0x200>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d03b      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x1bc>
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a2e      	ldr	r2, [pc, #184]	; (8005c00 <HAL_DMA_Start_IT+0x204>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d036      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x1bc>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a2d      	ldr	r2, [pc, #180]	; (8005c04 <HAL_DMA_Start_IT+0x208>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d031      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x1bc>
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	4a2b      	ldr	r2, [pc, #172]	; (8005c08 <HAL_DMA_Start_IT+0x20c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d02c      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x1bc>
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a2a      	ldr	r2, [pc, #168]	; (8005c0c <HAL_DMA_Start_IT+0x210>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d027      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x1bc>
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	4a28      	ldr	r2, [pc, #160]	; (8005c10 <HAL_DMA_Start_IT+0x214>)
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d022      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x1bc>
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	4a27      	ldr	r2, [pc, #156]	; (8005c14 <HAL_DMA_Start_IT+0x218>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d01d      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x1bc>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a25      	ldr	r2, [pc, #148]	; (8005c18 <HAL_DMA_Start_IT+0x21c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d018      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x1bc>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a24      	ldr	r2, [pc, #144]	; (8005c1c <HAL_DMA_Start_IT+0x220>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d013      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x1bc>
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a22      	ldr	r2, [pc, #136]	; (8005c20 <HAL_DMA_Start_IT+0x224>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d00e      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x1bc>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a21      	ldr	r2, [pc, #132]	; (8005c24 <HAL_DMA_Start_IT+0x228>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d009      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x1bc>
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a1f      	ldr	r2, [pc, #124]	; (8005c28 <HAL_DMA_Start_IT+0x22c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <HAL_DMA_Start_IT+0x1bc>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	4a1e      	ldr	r2, [pc, #120]	; (8005c2c <HAL_DMA_Start_IT+0x230>)
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d101      	bne.n	8005bbc <HAL_DMA_Start_IT+0x1c0>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e000      	b.n	8005bbe <HAL_DMA_Start_IT+0x1c2>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d036      	beq.n	8005c30 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f023 021e 	bic.w	r2, r3, #30
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f042 0216 	orr.w	r2, r2, #22
 8005bd4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d03e      	beq.n	8005c5c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f042 0208 	orr.w	r2, r2, #8
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	e035      	b.n	8005c5c <HAL_DMA_Start_IT+0x260>
 8005bf0:	40020010 	.word	0x40020010
 8005bf4:	40020028 	.word	0x40020028
 8005bf8:	40020040 	.word	0x40020040
 8005bfc:	40020058 	.word	0x40020058
 8005c00:	40020070 	.word	0x40020070
 8005c04:	40020088 	.word	0x40020088
 8005c08:	400200a0 	.word	0x400200a0
 8005c0c:	400200b8 	.word	0x400200b8
 8005c10:	40020410 	.word	0x40020410
 8005c14:	40020428 	.word	0x40020428
 8005c18:	40020440 	.word	0x40020440
 8005c1c:	40020458 	.word	0x40020458
 8005c20:	40020470 	.word	0x40020470
 8005c24:	40020488 	.word	0x40020488
 8005c28:	400204a0 	.word	0x400204a0
 8005c2c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f023 020e 	bic.w	r2, r3, #14
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f042 020a 	orr.w	r2, r2, #10
 8005c42:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d007      	beq.n	8005c5c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f042 0204 	orr.w	r2, r2, #4
 8005c5a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a83      	ldr	r2, [pc, #524]	; (8005e70 <HAL_DMA_Start_IT+0x474>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d072      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a82      	ldr	r2, [pc, #520]	; (8005e74 <HAL_DMA_Start_IT+0x478>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d06d      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a80      	ldr	r2, [pc, #512]	; (8005e78 <HAL_DMA_Start_IT+0x47c>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d068      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	4a7f      	ldr	r2, [pc, #508]	; (8005e7c <HAL_DMA_Start_IT+0x480>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d063      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a7d      	ldr	r2, [pc, #500]	; (8005e80 <HAL_DMA_Start_IT+0x484>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d05e      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	4a7c      	ldr	r2, [pc, #496]	; (8005e84 <HAL_DMA_Start_IT+0x488>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d059      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a7a      	ldr	r2, [pc, #488]	; (8005e88 <HAL_DMA_Start_IT+0x48c>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d054      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a79      	ldr	r2, [pc, #484]	; (8005e8c <HAL_DMA_Start_IT+0x490>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d04f      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a77      	ldr	r2, [pc, #476]	; (8005e90 <HAL_DMA_Start_IT+0x494>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d04a      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a76      	ldr	r2, [pc, #472]	; (8005e94 <HAL_DMA_Start_IT+0x498>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d045      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a74      	ldr	r2, [pc, #464]	; (8005e98 <HAL_DMA_Start_IT+0x49c>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d040      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a73      	ldr	r2, [pc, #460]	; (8005e9c <HAL_DMA_Start_IT+0x4a0>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d03b      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a71      	ldr	r2, [pc, #452]	; (8005ea0 <HAL_DMA_Start_IT+0x4a4>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d036      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4a70      	ldr	r2, [pc, #448]	; (8005ea4 <HAL_DMA_Start_IT+0x4a8>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d031      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a6e      	ldr	r2, [pc, #440]	; (8005ea8 <HAL_DMA_Start_IT+0x4ac>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d02c      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a6d      	ldr	r2, [pc, #436]	; (8005eac <HAL_DMA_Start_IT+0x4b0>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d027      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a6b      	ldr	r2, [pc, #428]	; (8005eb0 <HAL_DMA_Start_IT+0x4b4>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d022      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a6a      	ldr	r2, [pc, #424]	; (8005eb4 <HAL_DMA_Start_IT+0x4b8>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d01d      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a68      	ldr	r2, [pc, #416]	; (8005eb8 <HAL_DMA_Start_IT+0x4bc>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d018      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a67      	ldr	r2, [pc, #412]	; (8005ebc <HAL_DMA_Start_IT+0x4c0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d013      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a65      	ldr	r2, [pc, #404]	; (8005ec0 <HAL_DMA_Start_IT+0x4c4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00e      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a64      	ldr	r2, [pc, #400]	; (8005ec4 <HAL_DMA_Start_IT+0x4c8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d009      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a62      	ldr	r2, [pc, #392]	; (8005ec8 <HAL_DMA_Start_IT+0x4cc>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d004      	beq.n	8005d4c <HAL_DMA_Start_IT+0x350>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a61      	ldr	r2, [pc, #388]	; (8005ecc <HAL_DMA_Start_IT+0x4d0>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d101      	bne.n	8005d50 <HAL_DMA_Start_IT+0x354>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e000      	b.n	8005d52 <HAL_DMA_Start_IT+0x356>
 8005d50:	2300      	movs	r3, #0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d01a      	beq.n	8005d8c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d007      	beq.n	8005d74 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d72:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d007      	beq.n	8005d8c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d8a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a37      	ldr	r2, [pc, #220]	; (8005e70 <HAL_DMA_Start_IT+0x474>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d04a      	beq.n	8005e2c <HAL_DMA_Start_IT+0x430>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a36      	ldr	r2, [pc, #216]	; (8005e74 <HAL_DMA_Start_IT+0x478>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d045      	beq.n	8005e2c <HAL_DMA_Start_IT+0x430>
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a34      	ldr	r2, [pc, #208]	; (8005e78 <HAL_DMA_Start_IT+0x47c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d040      	beq.n	8005e2c <HAL_DMA_Start_IT+0x430>
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a33      	ldr	r2, [pc, #204]	; (8005e7c <HAL_DMA_Start_IT+0x480>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d03b      	beq.n	8005e2c <HAL_DMA_Start_IT+0x430>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a31      	ldr	r2, [pc, #196]	; (8005e80 <HAL_DMA_Start_IT+0x484>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d036      	beq.n	8005e2c <HAL_DMA_Start_IT+0x430>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a30      	ldr	r2, [pc, #192]	; (8005e84 <HAL_DMA_Start_IT+0x488>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d031      	beq.n	8005e2c <HAL_DMA_Start_IT+0x430>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a2e      	ldr	r2, [pc, #184]	; (8005e88 <HAL_DMA_Start_IT+0x48c>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d02c      	beq.n	8005e2c <HAL_DMA_Start_IT+0x430>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a2d      	ldr	r2, [pc, #180]	; (8005e8c <HAL_DMA_Start_IT+0x490>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d027      	beq.n	8005e2c <HAL_DMA_Start_IT+0x430>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a2b      	ldr	r2, [pc, #172]	; (8005e90 <HAL_DMA_Start_IT+0x494>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d022      	beq.n	8005e2c <HAL_DMA_Start_IT+0x430>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a2a      	ldr	r2, [pc, #168]	; (8005e94 <HAL_DMA_Start_IT+0x498>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d01d      	beq.n	8005e2c <HAL_DMA_Start_IT+0x430>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	4a28      	ldr	r2, [pc, #160]	; (8005e98 <HAL_DMA_Start_IT+0x49c>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d018      	beq.n	8005e2c <HAL_DMA_Start_IT+0x430>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4a27      	ldr	r2, [pc, #156]	; (8005e9c <HAL_DMA_Start_IT+0x4a0>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d013      	beq.n	8005e2c <HAL_DMA_Start_IT+0x430>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a25      	ldr	r2, [pc, #148]	; (8005ea0 <HAL_DMA_Start_IT+0x4a4>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d00e      	beq.n	8005e2c <HAL_DMA_Start_IT+0x430>
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4a24      	ldr	r2, [pc, #144]	; (8005ea4 <HAL_DMA_Start_IT+0x4a8>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d009      	beq.n	8005e2c <HAL_DMA_Start_IT+0x430>
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a22      	ldr	r2, [pc, #136]	; (8005ea8 <HAL_DMA_Start_IT+0x4ac>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d004      	beq.n	8005e2c <HAL_DMA_Start_IT+0x430>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a21      	ldr	r2, [pc, #132]	; (8005eac <HAL_DMA_Start_IT+0x4b0>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d108      	bne.n	8005e3e <HAL_DMA_Start_IT+0x442>
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f042 0201 	orr.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	e012      	b.n	8005e64 <HAL_DMA_Start_IT+0x468>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f042 0201 	orr.w	r2, r2, #1
 8005e4c:	601a      	str	r2, [r3, #0]
 8005e4e:	e009      	b.n	8005e64 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e56:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40020010 	.word	0x40020010
 8005e74:	40020028 	.word	0x40020028
 8005e78:	40020040 	.word	0x40020040
 8005e7c:	40020058 	.word	0x40020058
 8005e80:	40020070 	.word	0x40020070
 8005e84:	40020088 	.word	0x40020088
 8005e88:	400200a0 	.word	0x400200a0
 8005e8c:	400200b8 	.word	0x400200b8
 8005e90:	40020410 	.word	0x40020410
 8005e94:	40020428 	.word	0x40020428
 8005e98:	40020440 	.word	0x40020440
 8005e9c:	40020458 	.word	0x40020458
 8005ea0:	40020470 	.word	0x40020470
 8005ea4:	40020488 	.word	0x40020488
 8005ea8:	400204a0 	.word	0x400204a0
 8005eac:	400204b8 	.word	0x400204b8
 8005eb0:	58025408 	.word	0x58025408
 8005eb4:	5802541c 	.word	0x5802541c
 8005eb8:	58025430 	.word	0x58025430
 8005ebc:	58025444 	.word	0x58025444
 8005ec0:	58025458 	.word	0x58025458
 8005ec4:	5802546c 	.word	0x5802546c
 8005ec8:	58025480 	.word	0x58025480
 8005ecc:	58025494 	.word	0x58025494

08005ed0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b08a      	sub	sp, #40	; 0x28
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005edc:	4b67      	ldr	r3, [pc, #412]	; (800607c <HAL_DMA_IRQHandler+0x1ac>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a67      	ldr	r2, [pc, #412]	; (8006080 <HAL_DMA_IRQHandler+0x1b0>)
 8005ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee6:	0a9b      	lsrs	r3, r3, #10
 8005ee8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a5f      	ldr	r2, [pc, #380]	; (8006084 <HAL_DMA_IRQHandler+0x1b4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d04a      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a5d      	ldr	r2, [pc, #372]	; (8006088 <HAL_DMA_IRQHandler+0x1b8>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d045      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a5c      	ldr	r2, [pc, #368]	; (800608c <HAL_DMA_IRQHandler+0x1bc>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d040      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a5a      	ldr	r2, [pc, #360]	; (8006090 <HAL_DMA_IRQHandler+0x1c0>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d03b      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a59      	ldr	r2, [pc, #356]	; (8006094 <HAL_DMA_IRQHandler+0x1c4>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d036      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a57      	ldr	r2, [pc, #348]	; (8006098 <HAL_DMA_IRQHandler+0x1c8>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d031      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a56      	ldr	r2, [pc, #344]	; (800609c <HAL_DMA_IRQHandler+0x1cc>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d02c      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a54      	ldr	r2, [pc, #336]	; (80060a0 <HAL_DMA_IRQHandler+0x1d0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d027      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a53      	ldr	r2, [pc, #332]	; (80060a4 <HAL_DMA_IRQHandler+0x1d4>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d022      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a51      	ldr	r2, [pc, #324]	; (80060a8 <HAL_DMA_IRQHandler+0x1d8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d01d      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	4a50      	ldr	r2, [pc, #320]	; (80060ac <HAL_DMA_IRQHandler+0x1dc>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d018      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4a4e      	ldr	r2, [pc, #312]	; (80060b0 <HAL_DMA_IRQHandler+0x1e0>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d013      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a4d      	ldr	r2, [pc, #308]	; (80060b4 <HAL_DMA_IRQHandler+0x1e4>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d00e      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a4b      	ldr	r2, [pc, #300]	; (80060b8 <HAL_DMA_IRQHandler+0x1e8>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d009      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a4a      	ldr	r2, [pc, #296]	; (80060bc <HAL_DMA_IRQHandler+0x1ec>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d004      	beq.n	8005fa2 <HAL_DMA_IRQHandler+0xd2>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a48      	ldr	r2, [pc, #288]	; (80060c0 <HAL_DMA_IRQHandler+0x1f0>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d101      	bne.n	8005fa6 <HAL_DMA_IRQHandler+0xd6>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <HAL_DMA_IRQHandler+0xd8>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 842b 	beq.w	8006804 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fb2:	f003 031f 	and.w	r3, r3, #31
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	409a      	lsls	r2, r3
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f000 80a2 	beq.w	8006108 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a2e      	ldr	r2, [pc, #184]	; (8006084 <HAL_DMA_IRQHandler+0x1b4>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d04a      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a2d      	ldr	r2, [pc, #180]	; (8006088 <HAL_DMA_IRQHandler+0x1b8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d045      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a2b      	ldr	r2, [pc, #172]	; (800608c <HAL_DMA_IRQHandler+0x1bc>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d040      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a2a      	ldr	r2, [pc, #168]	; (8006090 <HAL_DMA_IRQHandler+0x1c0>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d03b      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a28      	ldr	r2, [pc, #160]	; (8006094 <HAL_DMA_IRQHandler+0x1c4>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d036      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a27      	ldr	r2, [pc, #156]	; (8006098 <HAL_DMA_IRQHandler+0x1c8>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d031      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a25      	ldr	r2, [pc, #148]	; (800609c <HAL_DMA_IRQHandler+0x1cc>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d02c      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a24      	ldr	r2, [pc, #144]	; (80060a0 <HAL_DMA_IRQHandler+0x1d0>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d027      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a22      	ldr	r2, [pc, #136]	; (80060a4 <HAL_DMA_IRQHandler+0x1d4>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d022      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a21      	ldr	r2, [pc, #132]	; (80060a8 <HAL_DMA_IRQHandler+0x1d8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d01d      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a1f      	ldr	r2, [pc, #124]	; (80060ac <HAL_DMA_IRQHandler+0x1dc>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d018      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a1e      	ldr	r2, [pc, #120]	; (80060b0 <HAL_DMA_IRQHandler+0x1e0>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d013      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a1c      	ldr	r2, [pc, #112]	; (80060b4 <HAL_DMA_IRQHandler+0x1e4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d00e      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a1b      	ldr	r2, [pc, #108]	; (80060b8 <HAL_DMA_IRQHandler+0x1e8>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d009      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a19      	ldr	r2, [pc, #100]	; (80060bc <HAL_DMA_IRQHandler+0x1ec>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d004      	beq.n	8006064 <HAL_DMA_IRQHandler+0x194>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a18      	ldr	r2, [pc, #96]	; (80060c0 <HAL_DMA_IRQHandler+0x1f0>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d12f      	bne.n	80060c4 <HAL_DMA_IRQHandler+0x1f4>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0304 	and.w	r3, r3, #4
 800606e:	2b00      	cmp	r3, #0
 8006070:	bf14      	ite	ne
 8006072:	2301      	movne	r3, #1
 8006074:	2300      	moveq	r3, #0
 8006076:	b2db      	uxtb	r3, r3
 8006078:	e02e      	b.n	80060d8 <HAL_DMA_IRQHandler+0x208>
 800607a:	bf00      	nop
 800607c:	24000000 	.word	0x24000000
 8006080:	1b4e81b5 	.word	0x1b4e81b5
 8006084:	40020010 	.word	0x40020010
 8006088:	40020028 	.word	0x40020028
 800608c:	40020040 	.word	0x40020040
 8006090:	40020058 	.word	0x40020058
 8006094:	40020070 	.word	0x40020070
 8006098:	40020088 	.word	0x40020088
 800609c:	400200a0 	.word	0x400200a0
 80060a0:	400200b8 	.word	0x400200b8
 80060a4:	40020410 	.word	0x40020410
 80060a8:	40020428 	.word	0x40020428
 80060ac:	40020440 	.word	0x40020440
 80060b0:	40020458 	.word	0x40020458
 80060b4:	40020470 	.word	0x40020470
 80060b8:	40020488 	.word	0x40020488
 80060bc:	400204a0 	.word	0x400204a0
 80060c0:	400204b8 	.word	0x400204b8
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f003 0308 	and.w	r3, r3, #8
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	bf14      	ite	ne
 80060d2:	2301      	movne	r3, #1
 80060d4:	2300      	moveq	r3, #0
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d015      	beq.n	8006108 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0204 	bic.w	r2, r2, #4
 80060ea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f0:	f003 031f 	and.w	r3, r3, #31
 80060f4:	2208      	movs	r2, #8
 80060f6:	409a      	lsls	r2, r3
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006100:	f043 0201 	orr.w	r2, r3, #1
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800610c:	f003 031f 	and.w	r3, r3, #31
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	fa22 f303 	lsr.w	r3, r2, r3
 8006116:	f003 0301 	and.w	r3, r3, #1
 800611a:	2b00      	cmp	r3, #0
 800611c:	d06e      	beq.n	80061fc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a69      	ldr	r2, [pc, #420]	; (80062c8 <HAL_DMA_IRQHandler+0x3f8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d04a      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a67      	ldr	r2, [pc, #412]	; (80062cc <HAL_DMA_IRQHandler+0x3fc>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d045      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a66      	ldr	r2, [pc, #408]	; (80062d0 <HAL_DMA_IRQHandler+0x400>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d040      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a64      	ldr	r2, [pc, #400]	; (80062d4 <HAL_DMA_IRQHandler+0x404>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d03b      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a63      	ldr	r2, [pc, #396]	; (80062d8 <HAL_DMA_IRQHandler+0x408>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d036      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a61      	ldr	r2, [pc, #388]	; (80062dc <HAL_DMA_IRQHandler+0x40c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d031      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a60      	ldr	r2, [pc, #384]	; (80062e0 <HAL_DMA_IRQHandler+0x410>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d02c      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a5e      	ldr	r2, [pc, #376]	; (80062e4 <HAL_DMA_IRQHandler+0x414>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d027      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a5d      	ldr	r2, [pc, #372]	; (80062e8 <HAL_DMA_IRQHandler+0x418>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d022      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a5b      	ldr	r2, [pc, #364]	; (80062ec <HAL_DMA_IRQHandler+0x41c>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d01d      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a5a      	ldr	r2, [pc, #360]	; (80062f0 <HAL_DMA_IRQHandler+0x420>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d018      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a58      	ldr	r2, [pc, #352]	; (80062f4 <HAL_DMA_IRQHandler+0x424>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d013      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a57      	ldr	r2, [pc, #348]	; (80062f8 <HAL_DMA_IRQHandler+0x428>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00e      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a55      	ldr	r2, [pc, #340]	; (80062fc <HAL_DMA_IRQHandler+0x42c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d009      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a54      	ldr	r2, [pc, #336]	; (8006300 <HAL_DMA_IRQHandler+0x430>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d004      	beq.n	80061be <HAL_DMA_IRQHandler+0x2ee>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a52      	ldr	r2, [pc, #328]	; (8006304 <HAL_DMA_IRQHandler+0x434>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d10a      	bne.n	80061d4 <HAL_DMA_IRQHandler+0x304>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bf14      	ite	ne
 80061cc:	2301      	movne	r3, #1
 80061ce:	2300      	moveq	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	e003      	b.n	80061dc <HAL_DMA_IRQHandler+0x30c>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2300      	movs	r3, #0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00d      	beq.n	80061fc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e4:	f003 031f 	and.w	r3, r3, #31
 80061e8:	2201      	movs	r2, #1
 80061ea:	409a      	lsls	r2, r3
 80061ec:	6a3b      	ldr	r3, [r7, #32]
 80061ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061f4:	f043 0202 	orr.w	r2, r3, #2
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006200:	f003 031f 	and.w	r3, r3, #31
 8006204:	2204      	movs	r2, #4
 8006206:	409a      	lsls	r2, r3
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	4013      	ands	r3, r2
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 808f 	beq.w	8006330 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a2c      	ldr	r2, [pc, #176]	; (80062c8 <HAL_DMA_IRQHandler+0x3f8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d04a      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a2a      	ldr	r2, [pc, #168]	; (80062cc <HAL_DMA_IRQHandler+0x3fc>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d045      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a29      	ldr	r2, [pc, #164]	; (80062d0 <HAL_DMA_IRQHandler+0x400>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d040      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a27      	ldr	r2, [pc, #156]	; (80062d4 <HAL_DMA_IRQHandler+0x404>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d03b      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a26      	ldr	r2, [pc, #152]	; (80062d8 <HAL_DMA_IRQHandler+0x408>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d036      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a24      	ldr	r2, [pc, #144]	; (80062dc <HAL_DMA_IRQHandler+0x40c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d031      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a23      	ldr	r2, [pc, #140]	; (80062e0 <HAL_DMA_IRQHandler+0x410>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d02c      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a21      	ldr	r2, [pc, #132]	; (80062e4 <HAL_DMA_IRQHandler+0x414>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d027      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a20      	ldr	r2, [pc, #128]	; (80062e8 <HAL_DMA_IRQHandler+0x418>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d022      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1e      	ldr	r2, [pc, #120]	; (80062ec <HAL_DMA_IRQHandler+0x41c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d01d      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1d      	ldr	r2, [pc, #116]	; (80062f0 <HAL_DMA_IRQHandler+0x420>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d018      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a1b      	ldr	r2, [pc, #108]	; (80062f4 <HAL_DMA_IRQHandler+0x424>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d013      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a1a      	ldr	r2, [pc, #104]	; (80062f8 <HAL_DMA_IRQHandler+0x428>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00e      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a18      	ldr	r2, [pc, #96]	; (80062fc <HAL_DMA_IRQHandler+0x42c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d009      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a17      	ldr	r2, [pc, #92]	; (8006300 <HAL_DMA_IRQHandler+0x430>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d004      	beq.n	80062b2 <HAL_DMA_IRQHandler+0x3e2>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4a15      	ldr	r2, [pc, #84]	; (8006304 <HAL_DMA_IRQHandler+0x434>)
 80062ae:	4293      	cmp	r3, r2
 80062b0:	d12a      	bne.n	8006308 <HAL_DMA_IRQHandler+0x438>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f003 0302 	and.w	r3, r3, #2
 80062bc:	2b00      	cmp	r3, #0
 80062be:	bf14      	ite	ne
 80062c0:	2301      	movne	r3, #1
 80062c2:	2300      	moveq	r3, #0
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	e023      	b.n	8006310 <HAL_DMA_IRQHandler+0x440>
 80062c8:	40020010 	.word	0x40020010
 80062cc:	40020028 	.word	0x40020028
 80062d0:	40020040 	.word	0x40020040
 80062d4:	40020058 	.word	0x40020058
 80062d8:	40020070 	.word	0x40020070
 80062dc:	40020088 	.word	0x40020088
 80062e0:	400200a0 	.word	0x400200a0
 80062e4:	400200b8 	.word	0x400200b8
 80062e8:	40020410 	.word	0x40020410
 80062ec:	40020428 	.word	0x40020428
 80062f0:	40020440 	.word	0x40020440
 80062f4:	40020458 	.word	0x40020458
 80062f8:	40020470 	.word	0x40020470
 80062fc:	40020488 	.word	0x40020488
 8006300:	400204a0 	.word	0x400204a0
 8006304:	400204b8 	.word	0x400204b8
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2300      	movs	r3, #0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d00d      	beq.n	8006330 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006318:	f003 031f 	and.w	r3, r3, #31
 800631c:	2204      	movs	r2, #4
 800631e:	409a      	lsls	r2, r3
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006328:	f043 0204 	orr.w	r2, r3, #4
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006334:	f003 031f 	and.w	r3, r3, #31
 8006338:	2210      	movs	r2, #16
 800633a:	409a      	lsls	r2, r3
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	4013      	ands	r3, r2
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 80a6 	beq.w	8006492 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a85      	ldr	r2, [pc, #532]	; (8006560 <HAL_DMA_IRQHandler+0x690>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d04a      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a83      	ldr	r2, [pc, #524]	; (8006564 <HAL_DMA_IRQHandler+0x694>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d045      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a82      	ldr	r2, [pc, #520]	; (8006568 <HAL_DMA_IRQHandler+0x698>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d040      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a80      	ldr	r2, [pc, #512]	; (800656c <HAL_DMA_IRQHandler+0x69c>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d03b      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a7f      	ldr	r2, [pc, #508]	; (8006570 <HAL_DMA_IRQHandler+0x6a0>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d036      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a7d      	ldr	r2, [pc, #500]	; (8006574 <HAL_DMA_IRQHandler+0x6a4>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d031      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a7c      	ldr	r2, [pc, #496]	; (8006578 <HAL_DMA_IRQHandler+0x6a8>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d02c      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a7a      	ldr	r2, [pc, #488]	; (800657c <HAL_DMA_IRQHandler+0x6ac>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d027      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a79      	ldr	r2, [pc, #484]	; (8006580 <HAL_DMA_IRQHandler+0x6b0>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d022      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a77      	ldr	r2, [pc, #476]	; (8006584 <HAL_DMA_IRQHandler+0x6b4>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d01d      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a76      	ldr	r2, [pc, #472]	; (8006588 <HAL_DMA_IRQHandler+0x6b8>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d018      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a74      	ldr	r2, [pc, #464]	; (800658c <HAL_DMA_IRQHandler+0x6bc>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d013      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a73      	ldr	r2, [pc, #460]	; (8006590 <HAL_DMA_IRQHandler+0x6c0>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d00e      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a71      	ldr	r2, [pc, #452]	; (8006594 <HAL_DMA_IRQHandler+0x6c4>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d009      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a70      	ldr	r2, [pc, #448]	; (8006598 <HAL_DMA_IRQHandler+0x6c8>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d004      	beq.n	80063e6 <HAL_DMA_IRQHandler+0x516>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a6e      	ldr	r2, [pc, #440]	; (800659c <HAL_DMA_IRQHandler+0x6cc>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d10a      	bne.n	80063fc <HAL_DMA_IRQHandler+0x52c>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0308 	and.w	r3, r3, #8
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	bf14      	ite	ne
 80063f4:	2301      	movne	r3, #1
 80063f6:	2300      	moveq	r3, #0
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	e009      	b.n	8006410 <HAL_DMA_IRQHandler+0x540>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0304 	and.w	r3, r3, #4
 8006406:	2b00      	cmp	r3, #0
 8006408:	bf14      	ite	ne
 800640a:	2301      	movne	r3, #1
 800640c:	2300      	moveq	r3, #0
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d03e      	beq.n	8006492 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006418:	f003 031f 	and.w	r3, r3, #31
 800641c:	2210      	movs	r2, #16
 800641e:	409a      	lsls	r2, r3
 8006420:	6a3b      	ldr	r3, [r7, #32]
 8006422:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d018      	beq.n	8006464 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800643c:	2b00      	cmp	r3, #0
 800643e:	d108      	bne.n	8006452 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006444:	2b00      	cmp	r3, #0
 8006446:	d024      	beq.n	8006492 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	4798      	blx	r3
 8006450:	e01f      	b.n	8006492 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006456:	2b00      	cmp	r3, #0
 8006458:	d01b      	beq.n	8006492 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	4798      	blx	r3
 8006462:	e016      	b.n	8006492 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800646e:	2b00      	cmp	r3, #0
 8006470:	d107      	bne.n	8006482 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0208 	bic.w	r2, r2, #8
 8006480:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006496:	f003 031f 	and.w	r3, r3, #31
 800649a:	2220      	movs	r2, #32
 800649c:	409a      	lsls	r2, r3
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	4013      	ands	r3, r2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	f000 8110 	beq.w	80066c8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a2c      	ldr	r2, [pc, #176]	; (8006560 <HAL_DMA_IRQHandler+0x690>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d04a      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a2b      	ldr	r2, [pc, #172]	; (8006564 <HAL_DMA_IRQHandler+0x694>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d045      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a29      	ldr	r2, [pc, #164]	; (8006568 <HAL_DMA_IRQHandler+0x698>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d040      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a28      	ldr	r2, [pc, #160]	; (800656c <HAL_DMA_IRQHandler+0x69c>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d03b      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a26      	ldr	r2, [pc, #152]	; (8006570 <HAL_DMA_IRQHandler+0x6a0>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d036      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a25      	ldr	r2, [pc, #148]	; (8006574 <HAL_DMA_IRQHandler+0x6a4>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d031      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a23      	ldr	r2, [pc, #140]	; (8006578 <HAL_DMA_IRQHandler+0x6a8>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d02c      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a22      	ldr	r2, [pc, #136]	; (800657c <HAL_DMA_IRQHandler+0x6ac>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d027      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a20      	ldr	r2, [pc, #128]	; (8006580 <HAL_DMA_IRQHandler+0x6b0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d022      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a1f      	ldr	r2, [pc, #124]	; (8006584 <HAL_DMA_IRQHandler+0x6b4>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d01d      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a1d      	ldr	r2, [pc, #116]	; (8006588 <HAL_DMA_IRQHandler+0x6b8>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d018      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a1c      	ldr	r2, [pc, #112]	; (800658c <HAL_DMA_IRQHandler+0x6bc>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d013      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a1a      	ldr	r2, [pc, #104]	; (8006590 <HAL_DMA_IRQHandler+0x6c0>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d00e      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a19      	ldr	r2, [pc, #100]	; (8006594 <HAL_DMA_IRQHandler+0x6c4>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d009      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a17      	ldr	r2, [pc, #92]	; (8006598 <HAL_DMA_IRQHandler+0x6c8>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d004      	beq.n	8006548 <HAL_DMA_IRQHandler+0x678>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a16      	ldr	r2, [pc, #88]	; (800659c <HAL_DMA_IRQHandler+0x6cc>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d12b      	bne.n	80065a0 <HAL_DMA_IRQHandler+0x6d0>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0310 	and.w	r3, r3, #16
 8006552:	2b00      	cmp	r3, #0
 8006554:	bf14      	ite	ne
 8006556:	2301      	movne	r3, #1
 8006558:	2300      	moveq	r3, #0
 800655a:	b2db      	uxtb	r3, r3
 800655c:	e02a      	b.n	80065b4 <HAL_DMA_IRQHandler+0x6e4>
 800655e:	bf00      	nop
 8006560:	40020010 	.word	0x40020010
 8006564:	40020028 	.word	0x40020028
 8006568:	40020040 	.word	0x40020040
 800656c:	40020058 	.word	0x40020058
 8006570:	40020070 	.word	0x40020070
 8006574:	40020088 	.word	0x40020088
 8006578:	400200a0 	.word	0x400200a0
 800657c:	400200b8 	.word	0x400200b8
 8006580:	40020410 	.word	0x40020410
 8006584:	40020428 	.word	0x40020428
 8006588:	40020440 	.word	0x40020440
 800658c:	40020458 	.word	0x40020458
 8006590:	40020470 	.word	0x40020470
 8006594:	40020488 	.word	0x40020488
 8006598:	400204a0 	.word	0x400204a0
 800659c:	400204b8 	.word	0x400204b8
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 0302 	and.w	r3, r3, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	bf14      	ite	ne
 80065ae:	2301      	movne	r3, #1
 80065b0:	2300      	moveq	r3, #0
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 8087 	beq.w	80066c8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065be:	f003 031f 	and.w	r3, r3, #31
 80065c2:	2220      	movs	r2, #32
 80065c4:	409a      	lsls	r2, r3
 80065c6:	6a3b      	ldr	r3, [r7, #32]
 80065c8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d139      	bne.n	800664a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0216 	bic.w	r2, r2, #22
 80065e4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	695a      	ldr	r2, [r3, #20]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065f4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d103      	bne.n	8006606 <HAL_DMA_IRQHandler+0x736>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006602:	2b00      	cmp	r3, #0
 8006604:	d007      	beq.n	8006616 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 0208 	bic.w	r2, r2, #8
 8006614:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800661a:	f003 031f 	and.w	r3, r3, #31
 800661e:	223f      	movs	r2, #63	; 0x3f
 8006620:	409a      	lsls	r2, r3
 8006622:	6a3b      	ldr	r3, [r7, #32]
 8006624:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2201      	movs	r2, #1
 800662a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 834a 	beq.w	8006cd4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	4798      	blx	r3
          }
          return;
 8006648:	e344      	b.n	8006cd4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006654:	2b00      	cmp	r3, #0
 8006656:	d018      	beq.n	800668a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d108      	bne.n	8006678 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666a:	2b00      	cmp	r3, #0
 800666c:	d02c      	beq.n	80066c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	4798      	blx	r3
 8006676:	e027      	b.n	80066c8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800667c:	2b00      	cmp	r3, #0
 800667e:	d023      	beq.n	80066c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	4798      	blx	r3
 8006688:	e01e      	b.n	80066c8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10f      	bne.n	80066b8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0210 	bic.w	r2, r2, #16
 80066a6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d003      	beq.n	80066c8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 8306 	beq.w	8006cde <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f000 8088 	beq.w	80067f0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2204      	movs	r2, #4
 80066e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a7a      	ldr	r2, [pc, #488]	; (80068d8 <HAL_DMA_IRQHandler+0xa08>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d04a      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a79      	ldr	r2, [pc, #484]	; (80068dc <HAL_DMA_IRQHandler+0xa0c>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d045      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4a77      	ldr	r2, [pc, #476]	; (80068e0 <HAL_DMA_IRQHandler+0xa10>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d040      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a76      	ldr	r2, [pc, #472]	; (80068e4 <HAL_DMA_IRQHandler+0xa14>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d03b      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a74      	ldr	r2, [pc, #464]	; (80068e8 <HAL_DMA_IRQHandler+0xa18>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d036      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a73      	ldr	r2, [pc, #460]	; (80068ec <HAL_DMA_IRQHandler+0xa1c>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d031      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a71      	ldr	r2, [pc, #452]	; (80068f0 <HAL_DMA_IRQHandler+0xa20>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d02c      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4a70      	ldr	r2, [pc, #448]	; (80068f4 <HAL_DMA_IRQHandler+0xa24>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d027      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a6e      	ldr	r2, [pc, #440]	; (80068f8 <HAL_DMA_IRQHandler+0xa28>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d022      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4a6d      	ldr	r2, [pc, #436]	; (80068fc <HAL_DMA_IRQHandler+0xa2c>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d01d      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a6b      	ldr	r2, [pc, #428]	; (8006900 <HAL_DMA_IRQHandler+0xa30>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d018      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a6a      	ldr	r2, [pc, #424]	; (8006904 <HAL_DMA_IRQHandler+0xa34>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d013      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a68      	ldr	r2, [pc, #416]	; (8006908 <HAL_DMA_IRQHandler+0xa38>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00e      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a67      	ldr	r2, [pc, #412]	; (800690c <HAL_DMA_IRQHandler+0xa3c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d009      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a65      	ldr	r2, [pc, #404]	; (8006910 <HAL_DMA_IRQHandler+0xa40>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d004      	beq.n	8006788 <HAL_DMA_IRQHandler+0x8b8>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a64      	ldr	r2, [pc, #400]	; (8006914 <HAL_DMA_IRQHandler+0xa44>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d108      	bne.n	800679a <HAL_DMA_IRQHandler+0x8ca>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0201 	bic.w	r2, r2, #1
 8006796:	601a      	str	r2, [r3, #0]
 8006798:	e007      	b.n	80067aa <HAL_DMA_IRQHandler+0x8da>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	681a      	ldr	r2, [r3, #0]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f022 0201 	bic.w	r2, r2, #1
 80067a8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3301      	adds	r3, #1
 80067ae:	60fb      	str	r3, [r7, #12]
 80067b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d307      	bcc.n	80067c6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0301 	and.w	r3, r3, #1
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1f2      	bne.n	80067aa <HAL_DMA_IRQHandler+0x8da>
 80067c4:	e000      	b.n	80067c8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80067c6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0301 	and.w	r3, r3, #1
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d004      	beq.n	80067e0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2203      	movs	r2, #3
 80067da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80067de:	e003      	b.n	80067e8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	f000 8272 	beq.w	8006cde <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	4798      	blx	r3
 8006802:	e26c      	b.n	8006cde <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a43      	ldr	r2, [pc, #268]	; (8006918 <HAL_DMA_IRQHandler+0xa48>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d022      	beq.n	8006854 <HAL_DMA_IRQHandler+0x984>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a42      	ldr	r2, [pc, #264]	; (800691c <HAL_DMA_IRQHandler+0xa4c>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d01d      	beq.n	8006854 <HAL_DMA_IRQHandler+0x984>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a40      	ldr	r2, [pc, #256]	; (8006920 <HAL_DMA_IRQHandler+0xa50>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d018      	beq.n	8006854 <HAL_DMA_IRQHandler+0x984>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a3f      	ldr	r2, [pc, #252]	; (8006924 <HAL_DMA_IRQHandler+0xa54>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d013      	beq.n	8006854 <HAL_DMA_IRQHandler+0x984>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a3d      	ldr	r2, [pc, #244]	; (8006928 <HAL_DMA_IRQHandler+0xa58>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d00e      	beq.n	8006854 <HAL_DMA_IRQHandler+0x984>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a3c      	ldr	r2, [pc, #240]	; (800692c <HAL_DMA_IRQHandler+0xa5c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d009      	beq.n	8006854 <HAL_DMA_IRQHandler+0x984>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a3a      	ldr	r2, [pc, #232]	; (8006930 <HAL_DMA_IRQHandler+0xa60>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d004      	beq.n	8006854 <HAL_DMA_IRQHandler+0x984>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a39      	ldr	r2, [pc, #228]	; (8006934 <HAL_DMA_IRQHandler+0xa64>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d101      	bne.n	8006858 <HAL_DMA_IRQHandler+0x988>
 8006854:	2301      	movs	r3, #1
 8006856:	e000      	b.n	800685a <HAL_DMA_IRQHandler+0x98a>
 8006858:	2300      	movs	r3, #0
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 823f 	beq.w	8006cde <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800686c:	f003 031f 	and.w	r3, r3, #31
 8006870:	2204      	movs	r2, #4
 8006872:	409a      	lsls	r2, r3
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	4013      	ands	r3, r2
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 80cd 	beq.w	8006a18 <HAL_DMA_IRQHandler+0xb48>
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	f003 0304 	and.w	r3, r3, #4
 8006884:	2b00      	cmp	r3, #0
 8006886:	f000 80c7 	beq.w	8006a18 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800688e:	f003 031f 	and.w	r3, r3, #31
 8006892:	2204      	movs	r2, #4
 8006894:	409a      	lsls	r2, r3
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d049      	beq.n	8006938 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d109      	bne.n	80068c2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 8210 	beq.w	8006cd8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068c0:	e20a      	b.n	8006cd8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f000 8206 	beq.w	8006cd8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068d4:	e200      	b.n	8006cd8 <HAL_DMA_IRQHandler+0xe08>
 80068d6:	bf00      	nop
 80068d8:	40020010 	.word	0x40020010
 80068dc:	40020028 	.word	0x40020028
 80068e0:	40020040 	.word	0x40020040
 80068e4:	40020058 	.word	0x40020058
 80068e8:	40020070 	.word	0x40020070
 80068ec:	40020088 	.word	0x40020088
 80068f0:	400200a0 	.word	0x400200a0
 80068f4:	400200b8 	.word	0x400200b8
 80068f8:	40020410 	.word	0x40020410
 80068fc:	40020428 	.word	0x40020428
 8006900:	40020440 	.word	0x40020440
 8006904:	40020458 	.word	0x40020458
 8006908:	40020470 	.word	0x40020470
 800690c:	40020488 	.word	0x40020488
 8006910:	400204a0 	.word	0x400204a0
 8006914:	400204b8 	.word	0x400204b8
 8006918:	58025408 	.word	0x58025408
 800691c:	5802541c 	.word	0x5802541c
 8006920:	58025430 	.word	0x58025430
 8006924:	58025444 	.word	0x58025444
 8006928:	58025458 	.word	0x58025458
 800692c:	5802546c 	.word	0x5802546c
 8006930:	58025480 	.word	0x58025480
 8006934:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	f003 0320 	and.w	r3, r3, #32
 800693e:	2b00      	cmp	r3, #0
 8006940:	d160      	bne.n	8006a04 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a7f      	ldr	r2, [pc, #508]	; (8006b44 <HAL_DMA_IRQHandler+0xc74>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d04a      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a7d      	ldr	r2, [pc, #500]	; (8006b48 <HAL_DMA_IRQHandler+0xc78>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d045      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a7c      	ldr	r2, [pc, #496]	; (8006b4c <HAL_DMA_IRQHandler+0xc7c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d040      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a7a      	ldr	r2, [pc, #488]	; (8006b50 <HAL_DMA_IRQHandler+0xc80>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d03b      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a79      	ldr	r2, [pc, #484]	; (8006b54 <HAL_DMA_IRQHandler+0xc84>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d036      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a77      	ldr	r2, [pc, #476]	; (8006b58 <HAL_DMA_IRQHandler+0xc88>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d031      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a76      	ldr	r2, [pc, #472]	; (8006b5c <HAL_DMA_IRQHandler+0xc8c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d02c      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a74      	ldr	r2, [pc, #464]	; (8006b60 <HAL_DMA_IRQHandler+0xc90>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d027      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a73      	ldr	r2, [pc, #460]	; (8006b64 <HAL_DMA_IRQHandler+0xc94>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d022      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a71      	ldr	r2, [pc, #452]	; (8006b68 <HAL_DMA_IRQHandler+0xc98>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d01d      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a70      	ldr	r2, [pc, #448]	; (8006b6c <HAL_DMA_IRQHandler+0xc9c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d018      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a6e      	ldr	r2, [pc, #440]	; (8006b70 <HAL_DMA_IRQHandler+0xca0>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d013      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a6d      	ldr	r2, [pc, #436]	; (8006b74 <HAL_DMA_IRQHandler+0xca4>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d00e      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a6b      	ldr	r2, [pc, #428]	; (8006b78 <HAL_DMA_IRQHandler+0xca8>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d009      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a6a      	ldr	r2, [pc, #424]	; (8006b7c <HAL_DMA_IRQHandler+0xcac>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d004      	beq.n	80069e2 <HAL_DMA_IRQHandler+0xb12>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a68      	ldr	r2, [pc, #416]	; (8006b80 <HAL_DMA_IRQHandler+0xcb0>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d108      	bne.n	80069f4 <HAL_DMA_IRQHandler+0xb24>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 0208 	bic.w	r2, r2, #8
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	e007      	b.n	8006a04 <HAL_DMA_IRQHandler+0xb34>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f022 0204 	bic.w	r2, r2, #4
 8006a02:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 8165 	beq.w	8006cd8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a16:	e15f      	b.n	8006cd8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1c:	f003 031f 	and.w	r3, r3, #31
 8006a20:	2202      	movs	r2, #2
 8006a22:	409a      	lsls	r2, r3
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	4013      	ands	r3, r2
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 80c5 	beq.w	8006bb8 <HAL_DMA_IRQHandler+0xce8>
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	f000 80bf 	beq.w	8006bb8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a3e:	f003 031f 	and.w	r3, r3, #31
 8006a42:	2202      	movs	r2, #2
 8006a44:	409a      	lsls	r2, r3
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d018      	beq.n	8006a86 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d109      	bne.n	8006a72 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	f000 813a 	beq.w	8006cdc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a70:	e134      	b.n	8006cdc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	f000 8130 	beq.w	8006cdc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a84:	e12a      	b.n	8006cdc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f003 0320 	and.w	r3, r3, #32
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	f040 8089 	bne.w	8006ba4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a2b      	ldr	r2, [pc, #172]	; (8006b44 <HAL_DMA_IRQHandler+0xc74>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d04a      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a29      	ldr	r2, [pc, #164]	; (8006b48 <HAL_DMA_IRQHandler+0xc78>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d045      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a28      	ldr	r2, [pc, #160]	; (8006b4c <HAL_DMA_IRQHandler+0xc7c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d040      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a26      	ldr	r2, [pc, #152]	; (8006b50 <HAL_DMA_IRQHandler+0xc80>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d03b      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a25      	ldr	r2, [pc, #148]	; (8006b54 <HAL_DMA_IRQHandler+0xc84>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d036      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a23      	ldr	r2, [pc, #140]	; (8006b58 <HAL_DMA_IRQHandler+0xc88>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d031      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a22      	ldr	r2, [pc, #136]	; (8006b5c <HAL_DMA_IRQHandler+0xc8c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d02c      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a20      	ldr	r2, [pc, #128]	; (8006b60 <HAL_DMA_IRQHandler+0xc90>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d027      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a1f      	ldr	r2, [pc, #124]	; (8006b64 <HAL_DMA_IRQHandler+0xc94>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d022      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1d      	ldr	r2, [pc, #116]	; (8006b68 <HAL_DMA_IRQHandler+0xc98>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d01d      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a1c      	ldr	r2, [pc, #112]	; (8006b6c <HAL_DMA_IRQHandler+0xc9c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d018      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a1a      	ldr	r2, [pc, #104]	; (8006b70 <HAL_DMA_IRQHandler+0xca0>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d013      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a19      	ldr	r2, [pc, #100]	; (8006b74 <HAL_DMA_IRQHandler+0xca4>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00e      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a17      	ldr	r2, [pc, #92]	; (8006b78 <HAL_DMA_IRQHandler+0xca8>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d009      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a16      	ldr	r2, [pc, #88]	; (8006b7c <HAL_DMA_IRQHandler+0xcac>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d004      	beq.n	8006b32 <HAL_DMA_IRQHandler+0xc62>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a14      	ldr	r2, [pc, #80]	; (8006b80 <HAL_DMA_IRQHandler+0xcb0>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d128      	bne.n	8006b84 <HAL_DMA_IRQHandler+0xcb4>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 0214 	bic.w	r2, r2, #20
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	e027      	b.n	8006b94 <HAL_DMA_IRQHandler+0xcc4>
 8006b44:	40020010 	.word	0x40020010
 8006b48:	40020028 	.word	0x40020028
 8006b4c:	40020040 	.word	0x40020040
 8006b50:	40020058 	.word	0x40020058
 8006b54:	40020070 	.word	0x40020070
 8006b58:	40020088 	.word	0x40020088
 8006b5c:	400200a0 	.word	0x400200a0
 8006b60:	400200b8 	.word	0x400200b8
 8006b64:	40020410 	.word	0x40020410
 8006b68:	40020428 	.word	0x40020428
 8006b6c:	40020440 	.word	0x40020440
 8006b70:	40020458 	.word	0x40020458
 8006b74:	40020470 	.word	0x40020470
 8006b78:	40020488 	.word	0x40020488
 8006b7c:	400204a0 	.word	0x400204a0
 8006b80:	400204b8 	.word	0x400204b8
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 020a 	bic.w	r2, r2, #10
 8006b92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2200      	movs	r2, #0
 8006ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 8097 	beq.w	8006cdc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bb6:	e091      	b.n	8006cdc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bbc:	f003 031f 	and.w	r3, r3, #31
 8006bc0:	2208      	movs	r2, #8
 8006bc2:	409a      	lsls	r2, r3
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 8088 	beq.w	8006cde <HAL_DMA_IRQHandler+0xe0e>
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f003 0308 	and.w	r3, r3, #8
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 8082 	beq.w	8006cde <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a41      	ldr	r2, [pc, #260]	; (8006ce4 <HAL_DMA_IRQHandler+0xe14>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d04a      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a3f      	ldr	r2, [pc, #252]	; (8006ce8 <HAL_DMA_IRQHandler+0xe18>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d045      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a3e      	ldr	r2, [pc, #248]	; (8006cec <HAL_DMA_IRQHandler+0xe1c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d040      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a3c      	ldr	r2, [pc, #240]	; (8006cf0 <HAL_DMA_IRQHandler+0xe20>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d03b      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a3b      	ldr	r2, [pc, #236]	; (8006cf4 <HAL_DMA_IRQHandler+0xe24>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d036      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a39      	ldr	r2, [pc, #228]	; (8006cf8 <HAL_DMA_IRQHandler+0xe28>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d031      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a38      	ldr	r2, [pc, #224]	; (8006cfc <HAL_DMA_IRQHandler+0xe2c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d02c      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a36      	ldr	r2, [pc, #216]	; (8006d00 <HAL_DMA_IRQHandler+0xe30>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d027      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a35      	ldr	r2, [pc, #212]	; (8006d04 <HAL_DMA_IRQHandler+0xe34>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d022      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4a33      	ldr	r2, [pc, #204]	; (8006d08 <HAL_DMA_IRQHandler+0xe38>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d01d      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a32      	ldr	r2, [pc, #200]	; (8006d0c <HAL_DMA_IRQHandler+0xe3c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d018      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a30      	ldr	r2, [pc, #192]	; (8006d10 <HAL_DMA_IRQHandler+0xe40>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d013      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a2f      	ldr	r2, [pc, #188]	; (8006d14 <HAL_DMA_IRQHandler+0xe44>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d00e      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a2d      	ldr	r2, [pc, #180]	; (8006d18 <HAL_DMA_IRQHandler+0xe48>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d009      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a2c      	ldr	r2, [pc, #176]	; (8006d1c <HAL_DMA_IRQHandler+0xe4c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d004      	beq.n	8006c7a <HAL_DMA_IRQHandler+0xdaa>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a2a      	ldr	r2, [pc, #168]	; (8006d20 <HAL_DMA_IRQHandler+0xe50>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d108      	bne.n	8006c8c <HAL_DMA_IRQHandler+0xdbc>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f022 021c 	bic.w	r2, r2, #28
 8006c88:	601a      	str	r2, [r3, #0]
 8006c8a:	e007      	b.n	8006c9c <HAL_DMA_IRQHandler+0xdcc>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f022 020e 	bic.w	r2, r2, #14
 8006c9a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ca0:	f003 031f 	and.w	r3, r3, #31
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	409a      	lsls	r2, r3
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d009      	beq.n	8006cde <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	4798      	blx	r3
 8006cd2:	e004      	b.n	8006cde <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006cd4:	bf00      	nop
 8006cd6:	e002      	b.n	8006cde <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cd8:	bf00      	nop
 8006cda:	e000      	b.n	8006cde <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006cdc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006cde:	3728      	adds	r7, #40	; 0x28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	40020010 	.word	0x40020010
 8006ce8:	40020028 	.word	0x40020028
 8006cec:	40020040 	.word	0x40020040
 8006cf0:	40020058 	.word	0x40020058
 8006cf4:	40020070 	.word	0x40020070
 8006cf8:	40020088 	.word	0x40020088
 8006cfc:	400200a0 	.word	0x400200a0
 8006d00:	400200b8 	.word	0x400200b8
 8006d04:	40020410 	.word	0x40020410
 8006d08:	40020428 	.word	0x40020428
 8006d0c:	40020440 	.word	0x40020440
 8006d10:	40020458 	.word	0x40020458
 8006d14:	40020470 	.word	0x40020470
 8006d18:	40020488 	.word	0x40020488
 8006d1c:	400204a0 	.word	0x400204a0
 8006d20:	400204b8 	.word	0x400204b8

08006d24 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
 8006d30:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d36:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d3c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a7f      	ldr	r2, [pc, #508]	; (8006f40 <DMA_SetConfig+0x21c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d072      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a7d      	ldr	r2, [pc, #500]	; (8006f44 <DMA_SetConfig+0x220>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d06d      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a7c      	ldr	r2, [pc, #496]	; (8006f48 <DMA_SetConfig+0x224>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d068      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a7a      	ldr	r2, [pc, #488]	; (8006f4c <DMA_SetConfig+0x228>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d063      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a79      	ldr	r2, [pc, #484]	; (8006f50 <DMA_SetConfig+0x22c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d05e      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a77      	ldr	r2, [pc, #476]	; (8006f54 <DMA_SetConfig+0x230>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d059      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a76      	ldr	r2, [pc, #472]	; (8006f58 <DMA_SetConfig+0x234>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d054      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a74      	ldr	r2, [pc, #464]	; (8006f5c <DMA_SetConfig+0x238>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d04f      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a73      	ldr	r2, [pc, #460]	; (8006f60 <DMA_SetConfig+0x23c>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d04a      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a71      	ldr	r2, [pc, #452]	; (8006f64 <DMA_SetConfig+0x240>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d045      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a70      	ldr	r2, [pc, #448]	; (8006f68 <DMA_SetConfig+0x244>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d040      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a6e      	ldr	r2, [pc, #440]	; (8006f6c <DMA_SetConfig+0x248>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d03b      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a6d      	ldr	r2, [pc, #436]	; (8006f70 <DMA_SetConfig+0x24c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d036      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a6b      	ldr	r2, [pc, #428]	; (8006f74 <DMA_SetConfig+0x250>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d031      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a6a      	ldr	r2, [pc, #424]	; (8006f78 <DMA_SetConfig+0x254>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d02c      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a68      	ldr	r2, [pc, #416]	; (8006f7c <DMA_SetConfig+0x258>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d027      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a67      	ldr	r2, [pc, #412]	; (8006f80 <DMA_SetConfig+0x25c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d022      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a65      	ldr	r2, [pc, #404]	; (8006f84 <DMA_SetConfig+0x260>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d01d      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a64      	ldr	r2, [pc, #400]	; (8006f88 <DMA_SetConfig+0x264>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d018      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a62      	ldr	r2, [pc, #392]	; (8006f8c <DMA_SetConfig+0x268>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d013      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a61      	ldr	r2, [pc, #388]	; (8006f90 <DMA_SetConfig+0x26c>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d00e      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a5f      	ldr	r2, [pc, #380]	; (8006f94 <DMA_SetConfig+0x270>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d009      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a5e      	ldr	r2, [pc, #376]	; (8006f98 <DMA_SetConfig+0x274>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d004      	beq.n	8006e2e <DMA_SetConfig+0x10a>
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a5c      	ldr	r2, [pc, #368]	; (8006f9c <DMA_SetConfig+0x278>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d101      	bne.n	8006e32 <DMA_SetConfig+0x10e>
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e000      	b.n	8006e34 <DMA_SetConfig+0x110>
 8006e32:	2300      	movs	r3, #0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00d      	beq.n	8006e54 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006e40:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d004      	beq.n	8006e54 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e52:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a39      	ldr	r2, [pc, #228]	; (8006f40 <DMA_SetConfig+0x21c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d04a      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a38      	ldr	r2, [pc, #224]	; (8006f44 <DMA_SetConfig+0x220>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d045      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a36      	ldr	r2, [pc, #216]	; (8006f48 <DMA_SetConfig+0x224>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d040      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a35      	ldr	r2, [pc, #212]	; (8006f4c <DMA_SetConfig+0x228>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d03b      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a33      	ldr	r2, [pc, #204]	; (8006f50 <DMA_SetConfig+0x22c>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d036      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a32      	ldr	r2, [pc, #200]	; (8006f54 <DMA_SetConfig+0x230>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d031      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a30      	ldr	r2, [pc, #192]	; (8006f58 <DMA_SetConfig+0x234>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d02c      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a2f      	ldr	r2, [pc, #188]	; (8006f5c <DMA_SetConfig+0x238>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d027      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a2d      	ldr	r2, [pc, #180]	; (8006f60 <DMA_SetConfig+0x23c>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d022      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a2c      	ldr	r2, [pc, #176]	; (8006f64 <DMA_SetConfig+0x240>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d01d      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a2a      	ldr	r2, [pc, #168]	; (8006f68 <DMA_SetConfig+0x244>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d018      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	4a29      	ldr	r2, [pc, #164]	; (8006f6c <DMA_SetConfig+0x248>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d013      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a27      	ldr	r2, [pc, #156]	; (8006f70 <DMA_SetConfig+0x24c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d00e      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a26      	ldr	r2, [pc, #152]	; (8006f74 <DMA_SetConfig+0x250>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d009      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4a24      	ldr	r2, [pc, #144]	; (8006f78 <DMA_SetConfig+0x254>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d004      	beq.n	8006ef4 <DMA_SetConfig+0x1d0>
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a23      	ldr	r2, [pc, #140]	; (8006f7c <DMA_SetConfig+0x258>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d101      	bne.n	8006ef8 <DMA_SetConfig+0x1d4>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e000      	b.n	8006efa <DMA_SetConfig+0x1d6>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d059      	beq.n	8006fb2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f02:	f003 031f 	and.w	r3, r3, #31
 8006f06:	223f      	movs	r2, #63	; 0x3f
 8006f08:	409a      	lsls	r2, r3
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006f1c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	683a      	ldr	r2, [r7, #0]
 8006f24:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	2b40      	cmp	r3, #64	; 0x40
 8006f2c:	d138      	bne.n	8006fa0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006f3e:	e086      	b.n	800704e <DMA_SetConfig+0x32a>
 8006f40:	40020010 	.word	0x40020010
 8006f44:	40020028 	.word	0x40020028
 8006f48:	40020040 	.word	0x40020040
 8006f4c:	40020058 	.word	0x40020058
 8006f50:	40020070 	.word	0x40020070
 8006f54:	40020088 	.word	0x40020088
 8006f58:	400200a0 	.word	0x400200a0
 8006f5c:	400200b8 	.word	0x400200b8
 8006f60:	40020410 	.word	0x40020410
 8006f64:	40020428 	.word	0x40020428
 8006f68:	40020440 	.word	0x40020440
 8006f6c:	40020458 	.word	0x40020458
 8006f70:	40020470 	.word	0x40020470
 8006f74:	40020488 	.word	0x40020488
 8006f78:	400204a0 	.word	0x400204a0
 8006f7c:	400204b8 	.word	0x400204b8
 8006f80:	58025408 	.word	0x58025408
 8006f84:	5802541c 	.word	0x5802541c
 8006f88:	58025430 	.word	0x58025430
 8006f8c:	58025444 	.word	0x58025444
 8006f90:	58025458 	.word	0x58025458
 8006f94:	5802546c 	.word	0x5802546c
 8006f98:	58025480 	.word	0x58025480
 8006f9c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	60da      	str	r2, [r3, #12]
}
 8006fb0:	e04d      	b.n	800704e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a29      	ldr	r2, [pc, #164]	; (800705c <DMA_SetConfig+0x338>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d022      	beq.n	8007002 <DMA_SetConfig+0x2de>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a27      	ldr	r2, [pc, #156]	; (8007060 <DMA_SetConfig+0x33c>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d01d      	beq.n	8007002 <DMA_SetConfig+0x2de>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a26      	ldr	r2, [pc, #152]	; (8007064 <DMA_SetConfig+0x340>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d018      	beq.n	8007002 <DMA_SetConfig+0x2de>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a24      	ldr	r2, [pc, #144]	; (8007068 <DMA_SetConfig+0x344>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d013      	beq.n	8007002 <DMA_SetConfig+0x2de>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a23      	ldr	r2, [pc, #140]	; (800706c <DMA_SetConfig+0x348>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d00e      	beq.n	8007002 <DMA_SetConfig+0x2de>
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	4a21      	ldr	r2, [pc, #132]	; (8007070 <DMA_SetConfig+0x34c>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d009      	beq.n	8007002 <DMA_SetConfig+0x2de>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4a20      	ldr	r2, [pc, #128]	; (8007074 <DMA_SetConfig+0x350>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d004      	beq.n	8007002 <DMA_SetConfig+0x2de>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4a1e      	ldr	r2, [pc, #120]	; (8007078 <DMA_SetConfig+0x354>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d101      	bne.n	8007006 <DMA_SetConfig+0x2e2>
 8007002:	2301      	movs	r3, #1
 8007004:	e000      	b.n	8007008 <DMA_SetConfig+0x2e4>
 8007006:	2300      	movs	r3, #0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d020      	beq.n	800704e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007010:	f003 031f 	and.w	r3, r3, #31
 8007014:	2201      	movs	r2, #1
 8007016:	409a      	lsls	r2, r3
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	683a      	ldr	r2, [r7, #0]
 8007022:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	2b40      	cmp	r3, #64	; 0x40
 800702a:	d108      	bne.n	800703e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	60da      	str	r2, [r3, #12]
}
 800703c:	e007      	b.n	800704e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	60da      	str	r2, [r3, #12]
}
 800704e:	bf00      	nop
 8007050:	371c      	adds	r7, #28
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr
 800705a:	bf00      	nop
 800705c:	58025408 	.word	0x58025408
 8007060:	5802541c 	.word	0x5802541c
 8007064:	58025430 	.word	0x58025430
 8007068:	58025444 	.word	0x58025444
 800706c:	58025458 	.word	0x58025458
 8007070:	5802546c 	.word	0x5802546c
 8007074:	58025480 	.word	0x58025480
 8007078:	58025494 	.word	0x58025494

0800707c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a42      	ldr	r2, [pc, #264]	; (8007194 <DMA_CalcBaseAndBitshift+0x118>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d04a      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a41      	ldr	r2, [pc, #260]	; (8007198 <DMA_CalcBaseAndBitshift+0x11c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d045      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a3f      	ldr	r2, [pc, #252]	; (800719c <DMA_CalcBaseAndBitshift+0x120>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d040      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a3e      	ldr	r2, [pc, #248]	; (80071a0 <DMA_CalcBaseAndBitshift+0x124>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d03b      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a3c      	ldr	r2, [pc, #240]	; (80071a4 <DMA_CalcBaseAndBitshift+0x128>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d036      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a3b      	ldr	r2, [pc, #236]	; (80071a8 <DMA_CalcBaseAndBitshift+0x12c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d031      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a39      	ldr	r2, [pc, #228]	; (80071ac <DMA_CalcBaseAndBitshift+0x130>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d02c      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a38      	ldr	r2, [pc, #224]	; (80071b0 <DMA_CalcBaseAndBitshift+0x134>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d027      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a36      	ldr	r2, [pc, #216]	; (80071b4 <DMA_CalcBaseAndBitshift+0x138>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d022      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a35      	ldr	r2, [pc, #212]	; (80071b8 <DMA_CalcBaseAndBitshift+0x13c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d01d      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a33      	ldr	r2, [pc, #204]	; (80071bc <DMA_CalcBaseAndBitshift+0x140>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d018      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a32      	ldr	r2, [pc, #200]	; (80071c0 <DMA_CalcBaseAndBitshift+0x144>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d013      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a30      	ldr	r2, [pc, #192]	; (80071c4 <DMA_CalcBaseAndBitshift+0x148>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d00e      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a2f      	ldr	r2, [pc, #188]	; (80071c8 <DMA_CalcBaseAndBitshift+0x14c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d009      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a2d      	ldr	r2, [pc, #180]	; (80071cc <DMA_CalcBaseAndBitshift+0x150>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d004      	beq.n	8007124 <DMA_CalcBaseAndBitshift+0xa8>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a2c      	ldr	r2, [pc, #176]	; (80071d0 <DMA_CalcBaseAndBitshift+0x154>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d101      	bne.n	8007128 <DMA_CalcBaseAndBitshift+0xac>
 8007124:	2301      	movs	r3, #1
 8007126:	e000      	b.n	800712a <DMA_CalcBaseAndBitshift+0xae>
 8007128:	2300      	movs	r3, #0
 800712a:	2b00      	cmp	r3, #0
 800712c:	d024      	beq.n	8007178 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	b2db      	uxtb	r3, r3
 8007134:	3b10      	subs	r3, #16
 8007136:	4a27      	ldr	r2, [pc, #156]	; (80071d4 <DMA_CalcBaseAndBitshift+0x158>)
 8007138:	fba2 2303 	umull	r2, r3, r2, r3
 800713c:	091b      	lsrs	r3, r3, #4
 800713e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	4a24      	ldr	r2, [pc, #144]	; (80071d8 <DMA_CalcBaseAndBitshift+0x15c>)
 8007148:	5cd3      	ldrb	r3, [r2, r3]
 800714a:	461a      	mov	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2b03      	cmp	r3, #3
 8007154:	d908      	bls.n	8007168 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	461a      	mov	r2, r3
 800715c:	4b1f      	ldr	r3, [pc, #124]	; (80071dc <DMA_CalcBaseAndBitshift+0x160>)
 800715e:	4013      	ands	r3, r2
 8007160:	1d1a      	adds	r2, r3, #4
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	659a      	str	r2, [r3, #88]	; 0x58
 8007166:	e00d      	b.n	8007184 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	461a      	mov	r2, r3
 800716e:	4b1b      	ldr	r3, [pc, #108]	; (80071dc <DMA_CalcBaseAndBitshift+0x160>)
 8007170:	4013      	ands	r3, r2
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	6593      	str	r3, [r2, #88]	; 0x58
 8007176:	e005      	b.n	8007184 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007188:	4618      	mov	r0, r3
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr
 8007194:	40020010 	.word	0x40020010
 8007198:	40020028 	.word	0x40020028
 800719c:	40020040 	.word	0x40020040
 80071a0:	40020058 	.word	0x40020058
 80071a4:	40020070 	.word	0x40020070
 80071a8:	40020088 	.word	0x40020088
 80071ac:	400200a0 	.word	0x400200a0
 80071b0:	400200b8 	.word	0x400200b8
 80071b4:	40020410 	.word	0x40020410
 80071b8:	40020428 	.word	0x40020428
 80071bc:	40020440 	.word	0x40020440
 80071c0:	40020458 	.word	0x40020458
 80071c4:	40020470 	.word	0x40020470
 80071c8:	40020488 	.word	0x40020488
 80071cc:	400204a0 	.word	0x400204a0
 80071d0:	400204b8 	.word	0x400204b8
 80071d4:	aaaaaaab 	.word	0xaaaaaaab
 80071d8:	08017a90 	.word	0x08017a90
 80071dc:	fffffc00 	.word	0xfffffc00

080071e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071e8:	2300      	movs	r3, #0
 80071ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d120      	bne.n	8007236 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f8:	2b03      	cmp	r3, #3
 80071fa:	d858      	bhi.n	80072ae <DMA_CheckFifoParam+0xce>
 80071fc:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <DMA_CheckFifoParam+0x24>)
 80071fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007202:	bf00      	nop
 8007204:	08007215 	.word	0x08007215
 8007208:	08007227 	.word	0x08007227
 800720c:	08007215 	.word	0x08007215
 8007210:	080072af 	.word	0x080072af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d048      	beq.n	80072b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007224:	e045      	b.n	80072b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800722a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800722e:	d142      	bne.n	80072b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007230:	2301      	movs	r3, #1
 8007232:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007234:	e03f      	b.n	80072b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	699b      	ldr	r3, [r3, #24]
 800723a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800723e:	d123      	bne.n	8007288 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007244:	2b03      	cmp	r3, #3
 8007246:	d838      	bhi.n	80072ba <DMA_CheckFifoParam+0xda>
 8007248:	a201      	add	r2, pc, #4	; (adr r2, 8007250 <DMA_CheckFifoParam+0x70>)
 800724a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724e:	bf00      	nop
 8007250:	08007261 	.word	0x08007261
 8007254:	08007267 	.word	0x08007267
 8007258:	08007261 	.word	0x08007261
 800725c:	08007279 	.word	0x08007279
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	73fb      	strb	r3, [r7, #15]
        break;
 8007264:	e030      	b.n	80072c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800726a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d025      	beq.n	80072be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007276:	e022      	b.n	80072be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007280:	d11f      	bne.n	80072c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007286:	e01c      	b.n	80072c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728c:	2b02      	cmp	r3, #2
 800728e:	d902      	bls.n	8007296 <DMA_CheckFifoParam+0xb6>
 8007290:	2b03      	cmp	r3, #3
 8007292:	d003      	beq.n	800729c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007294:	e018      	b.n	80072c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	73fb      	strb	r3, [r7, #15]
        break;
 800729a:	e015      	b.n	80072c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00e      	beq.n	80072c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80072a8:	2301      	movs	r3, #1
 80072aa:	73fb      	strb	r3, [r7, #15]
    break;
 80072ac:	e00b      	b.n	80072c6 <DMA_CheckFifoParam+0xe6>
        break;
 80072ae:	bf00      	nop
 80072b0:	e00a      	b.n	80072c8 <DMA_CheckFifoParam+0xe8>
        break;
 80072b2:	bf00      	nop
 80072b4:	e008      	b.n	80072c8 <DMA_CheckFifoParam+0xe8>
        break;
 80072b6:	bf00      	nop
 80072b8:	e006      	b.n	80072c8 <DMA_CheckFifoParam+0xe8>
        break;
 80072ba:	bf00      	nop
 80072bc:	e004      	b.n	80072c8 <DMA_CheckFifoParam+0xe8>
        break;
 80072be:	bf00      	nop
 80072c0:	e002      	b.n	80072c8 <DMA_CheckFifoParam+0xe8>
        break;
 80072c2:	bf00      	nop
 80072c4:	e000      	b.n	80072c8 <DMA_CheckFifoParam+0xe8>
    break;
 80072c6:	bf00      	nop
    }
  }

  return status;
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop

080072d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a38      	ldr	r2, [pc, #224]	; (80073cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80072ec:	4293      	cmp	r3, r2
 80072ee:	d022      	beq.n	8007336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	4a36      	ldr	r2, [pc, #216]	; (80073d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d01d      	beq.n	8007336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a35      	ldr	r2, [pc, #212]	; (80073d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d018      	beq.n	8007336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a33      	ldr	r2, [pc, #204]	; (80073d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d013      	beq.n	8007336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a32      	ldr	r2, [pc, #200]	; (80073dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d00e      	beq.n	8007336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a30      	ldr	r2, [pc, #192]	; (80073e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d009      	beq.n	8007336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a2f      	ldr	r2, [pc, #188]	; (80073e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d004      	beq.n	8007336 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a2d      	ldr	r2, [pc, #180]	; (80073e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d101      	bne.n	800733a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007336:	2301      	movs	r3, #1
 8007338:	e000      	b.n	800733c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800733a:	2300      	movs	r3, #0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d01a      	beq.n	8007376 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	b2db      	uxtb	r3, r3
 8007346:	3b08      	subs	r3, #8
 8007348:	4a28      	ldr	r2, [pc, #160]	; (80073ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800734a:	fba2 2303 	umull	r2, r3, r2, r3
 800734e:	091b      	lsrs	r3, r3, #4
 8007350:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	4b26      	ldr	r3, [pc, #152]	; (80073f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007356:	4413      	add	r3, r2
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	461a      	mov	r2, r3
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a24      	ldr	r2, [pc, #144]	; (80073f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007364:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f003 031f 	and.w	r3, r3, #31
 800736c:	2201      	movs	r2, #1
 800736e:	409a      	lsls	r2, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007374:	e024      	b.n	80073c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	b2db      	uxtb	r3, r3
 800737c:	3b10      	subs	r3, #16
 800737e:	4a1e      	ldr	r2, [pc, #120]	; (80073f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007380:	fba2 2303 	umull	r2, r3, r2, r3
 8007384:	091b      	lsrs	r3, r3, #4
 8007386:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4a1c      	ldr	r2, [pc, #112]	; (80073fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d806      	bhi.n	800739e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	4a1b      	ldr	r2, [pc, #108]	; (8007400 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d902      	bls.n	800739e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3308      	adds	r3, #8
 800739c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	4b18      	ldr	r3, [pc, #96]	; (8007404 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80073a2:	4413      	add	r3, r2
 80073a4:	009b      	lsls	r3, r3, #2
 80073a6:	461a      	mov	r2, r3
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	4a16      	ldr	r2, [pc, #88]	; (8007408 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80073b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f003 031f 	and.w	r3, r3, #31
 80073b8:	2201      	movs	r2, #1
 80073ba:	409a      	lsls	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	669a      	str	r2, [r3, #104]	; 0x68
}
 80073c0:	bf00      	nop
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr
 80073cc:	58025408 	.word	0x58025408
 80073d0:	5802541c 	.word	0x5802541c
 80073d4:	58025430 	.word	0x58025430
 80073d8:	58025444 	.word	0x58025444
 80073dc:	58025458 	.word	0x58025458
 80073e0:	5802546c 	.word	0x5802546c
 80073e4:	58025480 	.word	0x58025480
 80073e8:	58025494 	.word	0x58025494
 80073ec:	cccccccd 	.word	0xcccccccd
 80073f0:	16009600 	.word	0x16009600
 80073f4:	58025880 	.word	0x58025880
 80073f8:	aaaaaaab 	.word	0xaaaaaaab
 80073fc:	400204b8 	.word	0x400204b8
 8007400:	4002040f 	.word	0x4002040f
 8007404:	10008200 	.word	0x10008200
 8007408:	40020880 	.word	0x40020880

0800740c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	b2db      	uxtb	r3, r3
 800741a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d04a      	beq.n	80074b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2b08      	cmp	r3, #8
 8007426:	d847      	bhi.n	80074b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a25      	ldr	r2, [pc, #148]	; (80074c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d022      	beq.n	8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a24      	ldr	r2, [pc, #144]	; (80074c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d01d      	beq.n	8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a22      	ldr	r2, [pc, #136]	; (80074cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d018      	beq.n	8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a21      	ldr	r2, [pc, #132]	; (80074d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d013      	beq.n	8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a1f      	ldr	r2, [pc, #124]	; (80074d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d00e      	beq.n	8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a1e      	ldr	r2, [pc, #120]	; (80074d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d009      	beq.n	8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a1c      	ldr	r2, [pc, #112]	; (80074dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d004      	beq.n	8007478 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a1b      	ldr	r2, [pc, #108]	; (80074e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d101      	bne.n	800747c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007478:	2301      	movs	r3, #1
 800747a:	e000      	b.n	800747e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800747c:	2300      	movs	r3, #0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00a      	beq.n	8007498 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	4b17      	ldr	r3, [pc, #92]	; (80074e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007486:	4413      	add	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	461a      	mov	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a15      	ldr	r2, [pc, #84]	; (80074e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007494:	671a      	str	r2, [r3, #112]	; 0x70
 8007496:	e009      	b.n	80074ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007498:	68fa      	ldr	r2, [r7, #12]
 800749a:	4b14      	ldr	r3, [pc, #80]	; (80074ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800749c:	4413      	add	r3, r2
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	461a      	mov	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a11      	ldr	r2, [pc, #68]	; (80074f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80074aa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	3b01      	subs	r3, #1
 80074b0:	2201      	movs	r2, #1
 80074b2:	409a      	lsls	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80074b8:	bf00      	nop
 80074ba:	3714      	adds	r7, #20
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr
 80074c4:	58025408 	.word	0x58025408
 80074c8:	5802541c 	.word	0x5802541c
 80074cc:	58025430 	.word	0x58025430
 80074d0:	58025444 	.word	0x58025444
 80074d4:	58025458 	.word	0x58025458
 80074d8:	5802546c 	.word	0x5802546c
 80074dc:	58025480 	.word	0x58025480
 80074e0:	58025494 	.word	0x58025494
 80074e4:	1600963f 	.word	0x1600963f
 80074e8:	58025940 	.word	0x58025940
 80074ec:	1000823f 	.word	0x1000823f
 80074f0:	40020940 	.word	0x40020940

080074f4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b098      	sub	sp, #96	; 0x60
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80074fc:	4a84      	ldr	r2, [pc, #528]	; (8007710 <HAL_FDCAN_Init+0x21c>)
 80074fe:	f107 030c 	add.w	r3, r7, #12
 8007502:	4611      	mov	r1, r2
 8007504:	224c      	movs	r2, #76	; 0x4c
 8007506:	4618      	mov	r0, r3
 8007508:	f00f fd34 	bl	8016f74 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d101      	bne.n	8007516 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	e1c6      	b.n	80078a4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a7e      	ldr	r2, [pc, #504]	; (8007714 <HAL_FDCAN_Init+0x220>)
 800751c:	4293      	cmp	r3, r2
 800751e:	d106      	bne.n	800752e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007528:	461a      	mov	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007534:	b2db      	uxtb	r3, r3
 8007536:	2b00      	cmp	r3, #0
 8007538:	d106      	bne.n	8007548 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2200      	movs	r2, #0
 800753e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fb fad8 	bl	8002af8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699a      	ldr	r2, [r3, #24]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f022 0210 	bic.w	r2, r2, #16
 8007556:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007558:	f7fc fa32 	bl	80039c0 <HAL_GetTick>
 800755c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800755e:	e014      	b.n	800758a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007560:	f7fc fa2e 	bl	80039c0 <HAL_GetTick>
 8007564:	4602      	mov	r2, r0
 8007566:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007568:	1ad3      	subs	r3, r2, r3
 800756a:	2b0a      	cmp	r3, #10
 800756c:	d90d      	bls.n	800758a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007574:	f043 0201 	orr.w	r2, r3, #1
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2203      	movs	r2, #3
 8007582:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007586:	2301      	movs	r3, #1
 8007588:	e18c      	b.n	80078a4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	f003 0308 	and.w	r3, r3, #8
 8007594:	2b08      	cmp	r3, #8
 8007596:	d0e3      	beq.n	8007560 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	699a      	ldr	r2, [r3, #24]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f042 0201 	orr.w	r2, r2, #1
 80075a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075a8:	f7fc fa0a 	bl	80039c0 <HAL_GetTick>
 80075ac:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80075ae:	e014      	b.n	80075da <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80075b0:	f7fc fa06 	bl	80039c0 <HAL_GetTick>
 80075b4:	4602      	mov	r2, r0
 80075b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	2b0a      	cmp	r3, #10
 80075bc:	d90d      	bls.n	80075da <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075c4:	f043 0201 	orr.w	r2, r3, #1
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2203      	movs	r2, #3
 80075d2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e164      	b.n	80078a4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	f003 0301 	and.w	r3, r3, #1
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d0e3      	beq.n	80075b0 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	699a      	ldr	r2, [r3, #24]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f042 0202 	orr.w	r2, r2, #2
 80075f6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	7c1b      	ldrb	r3, [r3, #16]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d108      	bne.n	8007612 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	699a      	ldr	r2, [r3, #24]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800760e:	619a      	str	r2, [r3, #24]
 8007610:	e007      	b.n	8007622 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	699a      	ldr	r2, [r3, #24]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007620:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	7c5b      	ldrb	r3, [r3, #17]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d108      	bne.n	800763c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	699a      	ldr	r2, [r3, #24]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007638:	619a      	str	r2, [r3, #24]
 800763a:	e007      	b.n	800764c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	699a      	ldr	r2, [r3, #24]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800764a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	7c9b      	ldrb	r3, [r3, #18]
 8007650:	2b01      	cmp	r3, #1
 8007652:	d108      	bne.n	8007666 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	699a      	ldr	r2, [r3, #24]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007662:	619a      	str	r2, [r3, #24]
 8007664:	e007      	b.n	8007676 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	699a      	ldr	r2, [r3, #24]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007674:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	689a      	ldr	r2, [r3, #8]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	430a      	orrs	r2, r1
 800768a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	699a      	ldr	r2, [r3, #24]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800769a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	691a      	ldr	r2, [r3, #16]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f022 0210 	bic.w	r2, r2, #16
 80076aa:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d108      	bne.n	80076c6 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	699a      	ldr	r2, [r3, #24]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f042 0204 	orr.w	r2, r2, #4
 80076c2:	619a      	str	r2, [r3, #24]
 80076c4:	e030      	b.n	8007728 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	68db      	ldr	r3, [r3, #12]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d02c      	beq.n	8007728 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d020      	beq.n	8007718 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	699a      	ldr	r2, [r3, #24]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80076e4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	691a      	ldr	r2, [r3, #16]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f042 0210 	orr.w	r2, r2, #16
 80076f4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	68db      	ldr	r3, [r3, #12]
 80076fa:	2b03      	cmp	r3, #3
 80076fc:	d114      	bne.n	8007728 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	699a      	ldr	r2, [r3, #24]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f042 0220 	orr.w	r2, r2, #32
 800770c:	619a      	str	r2, [r3, #24]
 800770e:	e00b      	b.n	8007728 <HAL_FDCAN_Init+0x234>
 8007710:	08017988 	.word	0x08017988
 8007714:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699a      	ldr	r2, [r3, #24]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f042 0220 	orr.w	r2, r2, #32
 8007726:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	3b01      	subs	r3, #1
 800772e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	69db      	ldr	r3, [r3, #28]
 8007734:	3b01      	subs	r3, #1
 8007736:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007738:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007740:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	695b      	ldr	r3, [r3, #20]
 8007748:	3b01      	subs	r3, #1
 800774a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007750:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007752:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	689b      	ldr	r3, [r3, #8]
 8007758:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800775c:	d115      	bne.n	800778a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007762:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007768:	3b01      	subs	r3, #1
 800776a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800776c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007772:	3b01      	subs	r3, #1
 8007774:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007776:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777e:	3b01      	subs	r3, #1
 8007780:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007786:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007788:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800778e:	2b00      	cmp	r3, #0
 8007790:	d00a      	beq.n	80077a8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	430a      	orrs	r2, r1
 80077a4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077b0:	4413      	add	r3, r2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d011      	beq.n	80077da <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80077be:	f023 0107 	bic.w	r1, r3, #7
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	3360      	adds	r3, #96	; 0x60
 80077ca:	443b      	add	r3, r7
 80077cc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	430a      	orrs	r2, r1
 80077d6:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d011      	beq.n	8007806 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80077ea:	f023 0107 	bic.w	r1, r3, #7
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	3360      	adds	r3, #96	; 0x60
 80077f6:	443b      	add	r3, r7
 80077f8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	430a      	orrs	r2, r1
 8007802:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800780a:	2b00      	cmp	r3, #0
 800780c:	d012      	beq.n	8007834 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007816:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	3360      	adds	r3, #96	; 0x60
 8007822:	443b      	add	r3, r7
 8007824:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007828:	011a      	lsls	r2, r3, #4
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	430a      	orrs	r2, r1
 8007830:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007838:	2b00      	cmp	r3, #0
 800783a:	d012      	beq.n	8007862 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007844:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	3360      	adds	r3, #96	; 0x60
 8007850:	443b      	add	r3, r7
 8007852:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007856:	021a      	lsls	r2, r3, #8
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	430a      	orrs	r2, r1
 800785e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a11      	ldr	r2, [pc, #68]	; (80078ac <HAL_FDCAN_Init+0x3b8>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d107      	bne.n	800787c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	689a      	ldr	r2, [r3, #8]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f022 0203 	bic.w	r2, r2, #3
 800787a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2201      	movs	r2, #1
 8007890:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 f80b 	bl	80078b0 <FDCAN_CalcultateRamBlockAddresses>
 800789a:	4603      	mov	r3, r0
 800789c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80078a0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3760      	adds	r7, #96	; 0x60
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	4000a000 	.word	0x4000a000

080078b0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b085      	sub	sp, #20
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078bc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80078c6:	4ba7      	ldr	r3, [pc, #668]	; (8007b64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80078c8:	4013      	ands	r3, r2
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	0091      	lsls	r1, r2, #2
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	6812      	ldr	r2, [r2, #0]
 80078d2:	430b      	orrs	r3, r1
 80078d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078e0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e8:	041a      	lsls	r2, r3, #16
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	430a      	orrs	r2, r1
 80078f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	4413      	add	r3, r2
 80078fc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007906:	4b97      	ldr	r3, [pc, #604]	; (8007b64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007908:	4013      	ands	r3, r2
 800790a:	68ba      	ldr	r2, [r7, #8]
 800790c:	0091      	lsls	r1, r2, #2
 800790e:	687a      	ldr	r2, [r7, #4]
 8007910:	6812      	ldr	r2, [r2, #0]
 8007912:	430b      	orrs	r3, r1
 8007914:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007920:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007928:	041a      	lsls	r2, r3, #16
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	68ba      	ldr	r2, [r7, #8]
 800793c:	4413      	add	r3, r2
 800793e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007948:	4b86      	ldr	r3, [pc, #536]	; (8007b64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800794a:	4013      	ands	r3, r2
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	0091      	lsls	r1, r2, #2
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	6812      	ldr	r2, [r2, #0]
 8007954:	430b      	orrs	r3, r1
 8007956:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007962:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800796a:	041a      	lsls	r2, r3, #16
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800797e:	fb02 f303 	mul.w	r3, r2, r3
 8007982:	68ba      	ldr	r2, [r7, #8]
 8007984:	4413      	add	r3, r2
 8007986:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007990:	4b74      	ldr	r3, [pc, #464]	; (8007b64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007992:	4013      	ands	r3, r2
 8007994:	68ba      	ldr	r2, [r7, #8]
 8007996:	0091      	lsls	r1, r2, #2
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	6812      	ldr	r2, [r2, #0]
 800799c:	430b      	orrs	r3, r1
 800799e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80079aa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079b2:	041a      	lsls	r2, r3, #16
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	430a      	orrs	r2, r1
 80079ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80079c6:	fb02 f303 	mul.w	r3, r2, r3
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	4413      	add	r3, r2
 80079ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80079d8:	4b62      	ldr	r3, [pc, #392]	; (8007b64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079da:	4013      	ands	r3, r2
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	0091      	lsls	r1, r2, #2
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	6812      	ldr	r2, [r2, #0]
 80079e4:	430b      	orrs	r3, r1
 80079e6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80079f2:	fb02 f303 	mul.w	r3, r2, r3
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	4413      	add	r3, r2
 80079fa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007a04:	4b57      	ldr	r3, [pc, #348]	; (8007b64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a06:	4013      	ands	r3, r2
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	0091      	lsls	r1, r2, #2
 8007a0c:	687a      	ldr	r2, [r7, #4]
 8007a0e:	6812      	ldr	r2, [r2, #0]
 8007a10:	430b      	orrs	r3, r1
 8007a12:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a1e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a26:	041a      	lsls	r2, r3, #16
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a36:	005b      	lsls	r3, r3, #1
 8007a38:	68ba      	ldr	r2, [r7, #8]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007a46:	4b47      	ldr	r3, [pc, #284]	; (8007b64 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a48:	4013      	ands	r3, r2
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	0091      	lsls	r1, r2, #2
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	6812      	ldr	r2, [r2, #0]
 8007a52:	430b      	orrs	r3, r1
 8007a54:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007a60:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a68:	041a      	lsls	r2, r3, #16
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	430a      	orrs	r2, r1
 8007a70:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007a7c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a84:	061a      	lsls	r2, r3, #24
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a94:	4b34      	ldr	r3, [pc, #208]	; (8007b68 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007a96:	4413      	add	r3, r2
 8007a98:	009a      	lsls	r2, r3, #2
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	441a      	add	r2, r3
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ab6:	00db      	lsls	r3, r3, #3
 8007ab8:	441a      	add	r2, r3
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac6:	6879      	ldr	r1, [r7, #4]
 8007ac8:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007aca:	fb01 f303 	mul.w	r3, r1, r3
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	441a      	add	r2, r3
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ade:	6879      	ldr	r1, [r7, #4]
 8007ae0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007ae2:	fb01 f303 	mul.w	r3, r1, r3
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	441a      	add	r2, r3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007afa:	fb01 f303 	mul.w	r3, r1, r3
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	441a      	add	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	441a      	add	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b26:	6879      	ldr	r1, [r7, #4]
 8007b28:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007b2a:	fb01 f303 	mul.w	r3, r1, r3
 8007b2e:	009b      	lsls	r3, r3, #2
 8007b30:	441a      	add	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b42:	6879      	ldr	r1, [r7, #4]
 8007b44:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007b46:	fb01 f303 	mul.w	r3, r1, r3
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	441a      	add	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5a:	4a04      	ldr	r2, [pc, #16]	; (8007b6c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d915      	bls.n	8007b8c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007b60:	e006      	b.n	8007b70 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007b62:	bf00      	nop
 8007b64:	ffff0003 	.word	0xffff0003
 8007b68:	10002b00 	.word	0x10002b00
 8007b6c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b76:	f043 0220 	orr.w	r2, r3, #32
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2203      	movs	r2, #3
 8007b84:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e010      	b.n	8007bae <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b90:	60fb      	str	r3, [r7, #12]
 8007b92:	e005      	b.n	8007ba0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	2200      	movs	r2, #0
 8007b98:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	60fb      	str	r3, [r7, #12]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d3f3      	bcc.n	8007b94 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007bac:	2300      	movs	r3, #0
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3714      	adds	r7, #20
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop

08007bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b089      	sub	sp, #36	; 0x24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
 8007bc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007bca:	4b86      	ldr	r3, [pc, #536]	; (8007de4 <HAL_GPIO_Init+0x228>)
 8007bcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007bce:	e18c      	b.n	8007eea <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	681a      	ldr	r2, [r3, #0]
 8007bd4:	2101      	movs	r1, #1
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007bdc:	4013      	ands	r3, r2
 8007bde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	f000 817e 	beq.w	8007ee4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f003 0303 	and.w	r3, r3, #3
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d005      	beq.n	8007c00 <HAL_GPIO_Init+0x44>
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f003 0303 	and.w	r3, r3, #3
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d130      	bne.n	8007c62 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c06:	69fb      	ldr	r3, [r7, #28]
 8007c08:	005b      	lsls	r3, r3, #1
 8007c0a:	2203      	movs	r2, #3
 8007c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c10:	43db      	mvns	r3, r3
 8007c12:	69ba      	ldr	r2, [r7, #24]
 8007c14:	4013      	ands	r3, r2
 8007c16:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	68da      	ldr	r2, [r3, #12]
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	fa02 f303 	lsl.w	r3, r2, r3
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	69ba      	ldr	r2, [r7, #24]
 8007c2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007c36:	2201      	movs	r2, #1
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3e:	43db      	mvns	r3, r3
 8007c40:	69ba      	ldr	r2, [r7, #24]
 8007c42:	4013      	ands	r3, r2
 8007c44:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	091b      	lsrs	r3, r3, #4
 8007c4c:	f003 0201 	and.w	r2, r3, #1
 8007c50:	69fb      	ldr	r3, [r7, #28]
 8007c52:	fa02 f303 	lsl.w	r3, r2, r3
 8007c56:	69ba      	ldr	r2, [r7, #24]
 8007c58:	4313      	orrs	r3, r2
 8007c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	f003 0303 	and.w	r3, r3, #3
 8007c6a:	2b03      	cmp	r3, #3
 8007c6c:	d017      	beq.n	8007c9e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c74:	69fb      	ldr	r3, [r7, #28]
 8007c76:	005b      	lsls	r3, r3, #1
 8007c78:	2203      	movs	r2, #3
 8007c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7e:	43db      	mvns	r3, r3
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	4013      	ands	r3, r2
 8007c84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	689a      	ldr	r2, [r3, #8]
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	005b      	lsls	r3, r3, #1
 8007c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	4313      	orrs	r3, r2
 8007c96:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	f003 0303 	and.w	r3, r3, #3
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d123      	bne.n	8007cf2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	08da      	lsrs	r2, r3, #3
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	3208      	adds	r2, #8
 8007cb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	f003 0307 	and.w	r3, r3, #7
 8007cbe:	009b      	lsls	r3, r3, #2
 8007cc0:	220f      	movs	r2, #15
 8007cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc6:	43db      	mvns	r3, r3
 8007cc8:	69ba      	ldr	r2, [r7, #24]
 8007cca:	4013      	ands	r3, r2
 8007ccc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	691a      	ldr	r2, [r3, #16]
 8007cd2:	69fb      	ldr	r3, [r7, #28]
 8007cd4:	f003 0307 	and.w	r3, r3, #7
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	fa02 f303 	lsl.w	r3, r2, r3
 8007cde:	69ba      	ldr	r2, [r7, #24]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ce4:	69fb      	ldr	r3, [r7, #28]
 8007ce6:	08da      	lsrs	r2, r3, #3
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	3208      	adds	r2, #8
 8007cec:	69b9      	ldr	r1, [r7, #24]
 8007cee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	2203      	movs	r2, #3
 8007cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8007d02:	43db      	mvns	r3, r3
 8007d04:	69ba      	ldr	r2, [r7, #24]
 8007d06:	4013      	ands	r3, r2
 8007d08:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	f003 0203 	and.w	r2, r3, #3
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	005b      	lsls	r3, r3, #1
 8007d16:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1a:	69ba      	ldr	r2, [r7, #24]
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	69ba      	ldr	r2, [r7, #24]
 8007d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f000 80d8 	beq.w	8007ee4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d34:	4b2c      	ldr	r3, [pc, #176]	; (8007de8 <HAL_GPIO_Init+0x22c>)
 8007d36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d3a:	4a2b      	ldr	r2, [pc, #172]	; (8007de8 <HAL_GPIO_Init+0x22c>)
 8007d3c:	f043 0302 	orr.w	r3, r3, #2
 8007d40:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007d44:	4b28      	ldr	r3, [pc, #160]	; (8007de8 <HAL_GPIO_Init+0x22c>)
 8007d46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d4a:	f003 0302 	and.w	r3, r3, #2
 8007d4e:	60fb      	str	r3, [r7, #12]
 8007d50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007d52:	4a26      	ldr	r2, [pc, #152]	; (8007dec <HAL_GPIO_Init+0x230>)
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	089b      	lsrs	r3, r3, #2
 8007d58:	3302      	adds	r3, #2
 8007d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	f003 0303 	and.w	r3, r3, #3
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	220f      	movs	r2, #15
 8007d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6e:	43db      	mvns	r3, r3
 8007d70:	69ba      	ldr	r2, [r7, #24]
 8007d72:	4013      	ands	r3, r2
 8007d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	4a1d      	ldr	r2, [pc, #116]	; (8007df0 <HAL_GPIO_Init+0x234>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d04a      	beq.n	8007e14 <HAL_GPIO_Init+0x258>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a1c      	ldr	r2, [pc, #112]	; (8007df4 <HAL_GPIO_Init+0x238>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d02b      	beq.n	8007dde <HAL_GPIO_Init+0x222>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	4a1b      	ldr	r2, [pc, #108]	; (8007df8 <HAL_GPIO_Init+0x23c>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d025      	beq.n	8007dda <HAL_GPIO_Init+0x21e>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a1a      	ldr	r2, [pc, #104]	; (8007dfc <HAL_GPIO_Init+0x240>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d01f      	beq.n	8007dd6 <HAL_GPIO_Init+0x21a>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a19      	ldr	r2, [pc, #100]	; (8007e00 <HAL_GPIO_Init+0x244>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d019      	beq.n	8007dd2 <HAL_GPIO_Init+0x216>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a18      	ldr	r2, [pc, #96]	; (8007e04 <HAL_GPIO_Init+0x248>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d013      	beq.n	8007dce <HAL_GPIO_Init+0x212>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a17      	ldr	r2, [pc, #92]	; (8007e08 <HAL_GPIO_Init+0x24c>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d00d      	beq.n	8007dca <HAL_GPIO_Init+0x20e>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a16      	ldr	r2, [pc, #88]	; (8007e0c <HAL_GPIO_Init+0x250>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d007      	beq.n	8007dc6 <HAL_GPIO_Init+0x20a>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a15      	ldr	r2, [pc, #84]	; (8007e10 <HAL_GPIO_Init+0x254>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d101      	bne.n	8007dc2 <HAL_GPIO_Init+0x206>
 8007dbe:	2309      	movs	r3, #9
 8007dc0:	e029      	b.n	8007e16 <HAL_GPIO_Init+0x25a>
 8007dc2:	230a      	movs	r3, #10
 8007dc4:	e027      	b.n	8007e16 <HAL_GPIO_Init+0x25a>
 8007dc6:	2307      	movs	r3, #7
 8007dc8:	e025      	b.n	8007e16 <HAL_GPIO_Init+0x25a>
 8007dca:	2306      	movs	r3, #6
 8007dcc:	e023      	b.n	8007e16 <HAL_GPIO_Init+0x25a>
 8007dce:	2305      	movs	r3, #5
 8007dd0:	e021      	b.n	8007e16 <HAL_GPIO_Init+0x25a>
 8007dd2:	2304      	movs	r3, #4
 8007dd4:	e01f      	b.n	8007e16 <HAL_GPIO_Init+0x25a>
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e01d      	b.n	8007e16 <HAL_GPIO_Init+0x25a>
 8007dda:	2302      	movs	r3, #2
 8007ddc:	e01b      	b.n	8007e16 <HAL_GPIO_Init+0x25a>
 8007dde:	2301      	movs	r3, #1
 8007de0:	e019      	b.n	8007e16 <HAL_GPIO_Init+0x25a>
 8007de2:	bf00      	nop
 8007de4:	58000080 	.word	0x58000080
 8007de8:	58024400 	.word	0x58024400
 8007dec:	58000400 	.word	0x58000400
 8007df0:	58020000 	.word	0x58020000
 8007df4:	58020400 	.word	0x58020400
 8007df8:	58020800 	.word	0x58020800
 8007dfc:	58020c00 	.word	0x58020c00
 8007e00:	58021000 	.word	0x58021000
 8007e04:	58021400 	.word	0x58021400
 8007e08:	58021800 	.word	0x58021800
 8007e0c:	58021c00 	.word	0x58021c00
 8007e10:	58022400 	.word	0x58022400
 8007e14:	2300      	movs	r3, #0
 8007e16:	69fa      	ldr	r2, [r7, #28]
 8007e18:	f002 0203 	and.w	r2, r2, #3
 8007e1c:	0092      	lsls	r2, r2, #2
 8007e1e:	4093      	lsls	r3, r2
 8007e20:	69ba      	ldr	r2, [r7, #24]
 8007e22:	4313      	orrs	r3, r2
 8007e24:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e26:	4938      	ldr	r1, [pc, #224]	; (8007f08 <HAL_GPIO_Init+0x34c>)
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	089b      	lsrs	r3, r3, #2
 8007e2c:	3302      	adds	r3, #2
 8007e2e:	69ba      	ldr	r2, [r7, #24]
 8007e30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007e34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	43db      	mvns	r3, r3
 8007e40:	69ba      	ldr	r2, [r7, #24]
 8007e42:	4013      	ands	r3, r2
 8007e44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d003      	beq.n	8007e5a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8007e52:	69ba      	ldr	r2, [r7, #24]
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007e5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e5e:	69bb      	ldr	r3, [r7, #24]
 8007e60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e66:	685b      	ldr	r3, [r3, #4]
 8007e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	43db      	mvns	r3, r3
 8007e6e:	69ba      	ldr	r2, [r7, #24]
 8007e70:	4013      	ands	r3, r2
 8007e72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d003      	beq.n	8007e88 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8007e80:	69ba      	ldr	r2, [r7, #24]
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007e88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	43db      	mvns	r3, r3
 8007e9a:	69ba      	ldr	r2, [r7, #24]
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d003      	beq.n	8007eb4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8007eac:	69ba      	ldr	r2, [r7, #24]
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	69ba      	ldr	r2, [r7, #24]
 8007eb8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	43db      	mvns	r3, r3
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	4013      	ands	r3, r2
 8007ec8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	685b      	ldr	r3, [r3, #4]
 8007ece:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d003      	beq.n	8007ede <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8007ed6:	69ba      	ldr	r2, [r7, #24]
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	69ba      	ldr	r2, [r7, #24]
 8007ee2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007ee4:	69fb      	ldr	r3, [r7, #28]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f47f ae6b 	bne.w	8007bd0 <HAL_GPIO_Init+0x14>
  }
}
 8007efa:	bf00      	nop
 8007efc:	bf00      	nop
 8007efe:	3724      	adds	r7, #36	; 0x24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	58000400 	.word	0x58000400

08007f0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b085      	sub	sp, #20
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	460b      	mov	r3, r1
 8007f16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	691a      	ldr	r2, [r3, #16]
 8007f1c:	887b      	ldrh	r3, [r7, #2]
 8007f1e:	4013      	ands	r3, r2
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d002      	beq.n	8007f2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f24:	2301      	movs	r3, #1
 8007f26:	73fb      	strb	r3, [r7, #15]
 8007f28:	e001      	b.n	8007f2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	460b      	mov	r3, r1
 8007f46:	807b      	strh	r3, [r7, #2]
 8007f48:	4613      	mov	r3, r2
 8007f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007f4c:	787b      	ldrb	r3, [r7, #1]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007f52:	887a      	ldrh	r2, [r7, #2]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007f58:	e003      	b.n	8007f62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007f5a:	887b      	ldrh	r3, [r7, #2]
 8007f5c:	041a      	lsls	r2, r3, #16
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	619a      	str	r2, [r3, #24]
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
	...

08007f70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d101      	bne.n	8007f82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e07f      	b.n	8008082 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d106      	bne.n	8007f9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7fa fe16 	bl	8002bc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2224      	movs	r2, #36	; 0x24
 8007fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 0201 	bic.w	r2, r2, #1
 8007fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	685a      	ldr	r2, [r3, #4]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007fc0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	689a      	ldr	r2, [r3, #8]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fd0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68db      	ldr	r3, [r3, #12]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d107      	bne.n	8007fea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	689a      	ldr	r2, [r3, #8]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007fe6:	609a      	str	r2, [r3, #8]
 8007fe8:	e006      	b.n	8007ff8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689a      	ldr	r2, [r3, #8]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007ff6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d104      	bne.n	800800a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008008:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	6859      	ldr	r1, [r3, #4]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	4b1d      	ldr	r3, [pc, #116]	; (800808c <HAL_I2C_Init+0x11c>)
 8008016:	430b      	orrs	r3, r1
 8008018:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68da      	ldr	r2, [r3, #12]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008028:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	691a      	ldr	r2, [r3, #16]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	695b      	ldr	r3, [r3, #20]
 8008032:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	699b      	ldr	r3, [r3, #24]
 800803a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	430a      	orrs	r2, r1
 8008042:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	69d9      	ldr	r1, [r3, #28]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6a1a      	ldr	r2, [r3, #32]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	430a      	orrs	r2, r1
 8008052:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f042 0201 	orr.w	r2, r2, #1
 8008062:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2220      	movs	r2, #32
 800806e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008080:	2300      	movs	r3, #0
}
 8008082:	4618      	mov	r0, r3
 8008084:	3708      	adds	r7, #8
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	02008000 	.word	0x02008000

08008090 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008090:	b480      	push	{r7}
 8008092:	b083      	sub	sp, #12
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b20      	cmp	r3, #32
 80080a4:	d138      	bne.n	8008118 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80080ac:	2b01      	cmp	r3, #1
 80080ae:	d101      	bne.n	80080b4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80080b0:	2302      	movs	r3, #2
 80080b2:	e032      	b.n	800811a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2224      	movs	r2, #36	; 0x24
 80080c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f022 0201 	bic.w	r2, r2, #1
 80080d2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80080e2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6819      	ldr	r1, [r3, #0]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	430a      	orrs	r2, r1
 80080f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f042 0201 	orr.w	r2, r2, #1
 8008102:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2220      	movs	r2, #32
 8008108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008114:	2300      	movs	r3, #0
 8008116:	e000      	b.n	800811a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008118:	2302      	movs	r3, #2
  }
}
 800811a:	4618      	mov	r0, r3
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008126:	b480      	push	{r7}
 8008128:	b085      	sub	sp, #20
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
 800812e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008136:	b2db      	uxtb	r3, r3
 8008138:	2b20      	cmp	r3, #32
 800813a:	d139      	bne.n	80081b0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008142:	2b01      	cmp	r3, #1
 8008144:	d101      	bne.n	800814a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008146:	2302      	movs	r3, #2
 8008148:	e033      	b.n	80081b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2224      	movs	r2, #36	; 0x24
 8008156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f022 0201 	bic.w	r2, r2, #1
 8008168:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008178:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	021b      	lsls	r3, r3, #8
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	4313      	orrs	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	68fa      	ldr	r2, [r7, #12]
 800818a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	681a      	ldr	r2, [r3, #0]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f042 0201 	orr.w	r2, r2, #1
 800819a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2220      	movs	r2, #32
 80081a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081ac:	2300      	movs	r3, #0
 80081ae:	e000      	b.n	80081b2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80081b0:	2302      	movs	r3, #2
  }
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3714      	adds	r7, #20
 80081b6:	46bd      	mov	sp, r7
 80081b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081bc:	4770      	bx	lr

080081be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80081be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081c0:	b08f      	sub	sp, #60	; 0x3c
 80081c2:	af0a      	add	r7, sp, #40	; 0x28
 80081c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d101      	bne.n	80081d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80081cc:	2301      	movs	r3, #1
 80081ce:	e116      	b.n	80083fe <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d106      	bne.n	80081f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2200      	movs	r2, #0
 80081e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	f00e fb5a 	bl	80168a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2203      	movs	r2, #3
 80081f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008200:	2b00      	cmp	r3, #0
 8008202:	d102      	bne.n	800820a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4618      	mov	r0, r3
 8008210:	f00a fc9f 	bl	8012b52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	603b      	str	r3, [r7, #0]
 800821a:	687e      	ldr	r6, [r7, #4]
 800821c:	466d      	mov	r5, sp
 800821e:	f106 0410 	add.w	r4, r6, #16
 8008222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800822a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800822e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008232:	1d33      	adds	r3, r6, #4
 8008234:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008236:	6838      	ldr	r0, [r7, #0]
 8008238:	f00a fb6a 	bl	8012910 <USB_CoreInit>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d005      	beq.n	800824e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2202      	movs	r2, #2
 8008246:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e0d7      	b.n	80083fe <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2100      	movs	r1, #0
 8008254:	4618      	mov	r0, r3
 8008256:	f00a fc8d 	bl	8012b74 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800825a:	2300      	movs	r3, #0
 800825c:	73fb      	strb	r3, [r7, #15]
 800825e:	e04a      	b.n	80082f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008260:	7bfa      	ldrb	r2, [r7, #15]
 8008262:	6879      	ldr	r1, [r7, #4]
 8008264:	4613      	mov	r3, r2
 8008266:	00db      	lsls	r3, r3, #3
 8008268:	4413      	add	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	440b      	add	r3, r1
 800826e:	333d      	adds	r3, #61	; 0x3d
 8008270:	2201      	movs	r2, #1
 8008272:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008274:	7bfa      	ldrb	r2, [r7, #15]
 8008276:	6879      	ldr	r1, [r7, #4]
 8008278:	4613      	mov	r3, r2
 800827a:	00db      	lsls	r3, r3, #3
 800827c:	4413      	add	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	440b      	add	r3, r1
 8008282:	333c      	adds	r3, #60	; 0x3c
 8008284:	7bfa      	ldrb	r2, [r7, #15]
 8008286:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008288:	7bfa      	ldrb	r2, [r7, #15]
 800828a:	7bfb      	ldrb	r3, [r7, #15]
 800828c:	b298      	uxth	r0, r3
 800828e:	6879      	ldr	r1, [r7, #4]
 8008290:	4613      	mov	r3, r2
 8008292:	00db      	lsls	r3, r3, #3
 8008294:	4413      	add	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	440b      	add	r3, r1
 800829a:	3356      	adds	r3, #86	; 0x56
 800829c:	4602      	mov	r2, r0
 800829e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80082a0:	7bfa      	ldrb	r2, [r7, #15]
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	4613      	mov	r3, r2
 80082a6:	00db      	lsls	r3, r3, #3
 80082a8:	4413      	add	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	440b      	add	r3, r1
 80082ae:	3340      	adds	r3, #64	; 0x40
 80082b0:	2200      	movs	r2, #0
 80082b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80082b4:	7bfa      	ldrb	r2, [r7, #15]
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	4613      	mov	r3, r2
 80082ba:	00db      	lsls	r3, r3, #3
 80082bc:	4413      	add	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	440b      	add	r3, r1
 80082c2:	3344      	adds	r3, #68	; 0x44
 80082c4:	2200      	movs	r2, #0
 80082c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80082c8:	7bfa      	ldrb	r2, [r7, #15]
 80082ca:	6879      	ldr	r1, [r7, #4]
 80082cc:	4613      	mov	r3, r2
 80082ce:	00db      	lsls	r3, r3, #3
 80082d0:	4413      	add	r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	440b      	add	r3, r1
 80082d6:	3348      	adds	r3, #72	; 0x48
 80082d8:	2200      	movs	r2, #0
 80082da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80082dc:	7bfa      	ldrb	r2, [r7, #15]
 80082de:	6879      	ldr	r1, [r7, #4]
 80082e0:	4613      	mov	r3, r2
 80082e2:	00db      	lsls	r3, r3, #3
 80082e4:	4413      	add	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	440b      	add	r3, r1
 80082ea:	334c      	adds	r3, #76	; 0x4c
 80082ec:	2200      	movs	r2, #0
 80082ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082f0:	7bfb      	ldrb	r3, [r7, #15]
 80082f2:	3301      	adds	r3, #1
 80082f4:	73fb      	strb	r3, [r7, #15]
 80082f6:	7bfa      	ldrb	r2, [r7, #15]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d3af      	bcc.n	8008260 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008300:	2300      	movs	r3, #0
 8008302:	73fb      	strb	r3, [r7, #15]
 8008304:	e044      	b.n	8008390 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008306:	7bfa      	ldrb	r2, [r7, #15]
 8008308:	6879      	ldr	r1, [r7, #4]
 800830a:	4613      	mov	r3, r2
 800830c:	00db      	lsls	r3, r3, #3
 800830e:	4413      	add	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	440b      	add	r3, r1
 8008314:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8008318:	2200      	movs	r2, #0
 800831a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800831c:	7bfa      	ldrb	r2, [r7, #15]
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	4613      	mov	r3, r2
 8008322:	00db      	lsls	r3, r3, #3
 8008324:	4413      	add	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	440b      	add	r3, r1
 800832a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800832e:	7bfa      	ldrb	r2, [r7, #15]
 8008330:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008332:	7bfa      	ldrb	r2, [r7, #15]
 8008334:	6879      	ldr	r1, [r7, #4]
 8008336:	4613      	mov	r3, r2
 8008338:	00db      	lsls	r3, r3, #3
 800833a:	4413      	add	r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	440b      	add	r3, r1
 8008340:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008344:	2200      	movs	r2, #0
 8008346:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008348:	7bfa      	ldrb	r2, [r7, #15]
 800834a:	6879      	ldr	r1, [r7, #4]
 800834c:	4613      	mov	r3, r2
 800834e:	00db      	lsls	r3, r3, #3
 8008350:	4413      	add	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	440b      	add	r3, r1
 8008356:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800835a:	2200      	movs	r2, #0
 800835c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800835e:	7bfa      	ldrb	r2, [r7, #15]
 8008360:	6879      	ldr	r1, [r7, #4]
 8008362:	4613      	mov	r3, r2
 8008364:	00db      	lsls	r3, r3, #3
 8008366:	4413      	add	r3, r2
 8008368:	009b      	lsls	r3, r3, #2
 800836a:	440b      	add	r3, r1
 800836c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8008370:	2200      	movs	r2, #0
 8008372:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008374:	7bfa      	ldrb	r2, [r7, #15]
 8008376:	6879      	ldr	r1, [r7, #4]
 8008378:	4613      	mov	r3, r2
 800837a:	00db      	lsls	r3, r3, #3
 800837c:	4413      	add	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	440b      	add	r3, r1
 8008382:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008386:	2200      	movs	r2, #0
 8008388:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800838a:	7bfb      	ldrb	r3, [r7, #15]
 800838c:	3301      	adds	r3, #1
 800838e:	73fb      	strb	r3, [r7, #15]
 8008390:	7bfa      	ldrb	r2, [r7, #15]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	429a      	cmp	r2, r3
 8008398:	d3b5      	bcc.n	8008306 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	603b      	str	r3, [r7, #0]
 80083a0:	687e      	ldr	r6, [r7, #4]
 80083a2:	466d      	mov	r5, sp
 80083a4:	f106 0410 	add.w	r4, r6, #16
 80083a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80083ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80083ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80083b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80083b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80083b8:	1d33      	adds	r3, r6, #4
 80083ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083bc:	6838      	ldr	r0, [r7, #0]
 80083be:	f00a fc25 	bl	8012c0c <USB_DevInit>
 80083c2:	4603      	mov	r3, r0
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d005      	beq.n	80083d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2202      	movs	r2, #2
 80083cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e014      	b.n	80083fe <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d102      	bne.n	80083f2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 f96f 	bl	80096d0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f00b fc67 	bl	8013cca <USB_DevDisconnect>

  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3714      	adds	r7, #20
 8008402:	46bd      	mov	sp, r7
 8008404:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008406 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008406:	b580      	push	{r7, lr}
 8008408:	b084      	sub	sp, #16
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800841a:	2b01      	cmp	r3, #1
 800841c:	d101      	bne.n	8008422 <HAL_PCD_Start+0x1c>
 800841e:	2302      	movs	r3, #2
 8008420:	e022      	b.n	8008468 <HAL_PCD_Start+0x62>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2201      	movs	r2, #1
 8008426:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800842e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008432:	2b00      	cmp	r3, #0
 8008434:	d109      	bne.n	800844a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800843a:	2b01      	cmp	r3, #1
 800843c:	d105      	bne.n	800844a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008442:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4618      	mov	r0, r3
 8008450:	f00a fb6e 	bl	8012b30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4618      	mov	r0, r3
 800845a:	f00b fc15 	bl	8013c88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008470:	b590      	push	{r4, r7, lr}
 8008472:	b08d      	sub	sp, #52	; 0x34
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800847e:	6a3b      	ldr	r3, [r7, #32]
 8008480:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4618      	mov	r0, r3
 8008488:	f00b fcd3 	bl	8013e32 <USB_GetMode>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	f040 84b7 	bne.w	8008e02 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4618      	mov	r0, r3
 800849a:	f00b fc37 	bl	8013d0c <USB_ReadInterrupts>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	f000 84ad 	beq.w	8008e00 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084ac:	689b      	ldr	r3, [r3, #8]
 80084ae:	0a1b      	lsrs	r3, r3, #8
 80084b0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4618      	mov	r0, r3
 80084c0:	f00b fc24 	bl	8013d0c <USB_ReadInterrupts>
 80084c4:	4603      	mov	r3, r0
 80084c6:	f003 0302 	and.w	r3, r3, #2
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d107      	bne.n	80084de <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	695a      	ldr	r2, [r3, #20]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f002 0202 	and.w	r2, r2, #2
 80084dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f00b fc12 	bl	8013d0c <USB_ReadInterrupts>
 80084e8:	4603      	mov	r3, r0
 80084ea:	f003 0310 	and.w	r3, r3, #16
 80084ee:	2b10      	cmp	r3, #16
 80084f0:	d161      	bne.n	80085b6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	699a      	ldr	r2, [r3, #24]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f022 0210 	bic.w	r2, r2, #16
 8008500:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008502:	6a3b      	ldr	r3, [r7, #32]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8008508:	69bb      	ldr	r3, [r7, #24]
 800850a:	f003 020f 	and.w	r2, r3, #15
 800850e:	4613      	mov	r3, r2
 8008510:	00db      	lsls	r3, r3, #3
 8008512:	4413      	add	r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	4413      	add	r3, r2
 800851e:	3304      	adds	r3, #4
 8008520:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008522:	69bb      	ldr	r3, [r7, #24]
 8008524:	0c5b      	lsrs	r3, r3, #17
 8008526:	f003 030f 	and.w	r3, r3, #15
 800852a:	2b02      	cmp	r3, #2
 800852c:	d124      	bne.n	8008578 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800852e:	69ba      	ldr	r2, [r7, #24]
 8008530:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008534:	4013      	ands	r3, r2
 8008536:	2b00      	cmp	r3, #0
 8008538:	d035      	beq.n	80085a6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	091b      	lsrs	r3, r3, #4
 8008542:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008544:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008548:	b29b      	uxth	r3, r3
 800854a:	461a      	mov	r2, r3
 800854c:	6a38      	ldr	r0, [r7, #32]
 800854e:	f00b fa49 	bl	80139e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	68da      	ldr	r2, [r3, #12]
 8008556:	69bb      	ldr	r3, [r7, #24]
 8008558:	091b      	lsrs	r3, r3, #4
 800855a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800855e:	441a      	add	r2, r3
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	695a      	ldr	r2, [r3, #20]
 8008568:	69bb      	ldr	r3, [r7, #24]
 800856a:	091b      	lsrs	r3, r3, #4
 800856c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008570:	441a      	add	r2, r3
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	615a      	str	r2, [r3, #20]
 8008576:	e016      	b.n	80085a6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8008578:	69bb      	ldr	r3, [r7, #24]
 800857a:	0c5b      	lsrs	r3, r3, #17
 800857c:	f003 030f 	and.w	r3, r3, #15
 8008580:	2b06      	cmp	r3, #6
 8008582:	d110      	bne.n	80085a6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800858a:	2208      	movs	r2, #8
 800858c:	4619      	mov	r1, r3
 800858e:	6a38      	ldr	r0, [r7, #32]
 8008590:	f00b fa28 	bl	80139e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008594:	697b      	ldr	r3, [r7, #20]
 8008596:	695a      	ldr	r2, [r3, #20]
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	091b      	lsrs	r3, r3, #4
 800859c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80085a0:	441a      	add	r2, r3
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	699a      	ldr	r2, [r3, #24]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f042 0210 	orr.w	r2, r2, #16
 80085b4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4618      	mov	r0, r3
 80085bc:	f00b fba6 	bl	8013d0c <USB_ReadInterrupts>
 80085c0:	4603      	mov	r3, r0
 80085c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80085ca:	f040 80a7 	bne.w	800871c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4618      	mov	r0, r3
 80085d8:	f00b fbab 	bl	8013d32 <USB_ReadDevAllOutEpInterrupt>
 80085dc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80085de:	e099      	b.n	8008714 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80085e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	f000 808e 	beq.w	8008708 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085f2:	b2d2      	uxtb	r2, r2
 80085f4:	4611      	mov	r1, r2
 80085f6:	4618      	mov	r0, r3
 80085f8:	f00b fbcf 	bl	8013d9a <USB_ReadDevOutEPInterrupt>
 80085fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	f003 0301 	and.w	r3, r3, #1
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00c      	beq.n	8008622 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	015a      	lsls	r2, r3, #5
 800860c:	69fb      	ldr	r3, [r7, #28]
 800860e:	4413      	add	r3, r2
 8008610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008614:	461a      	mov	r2, r3
 8008616:	2301      	movs	r3, #1
 8008618:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800861a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 fed1 	bl	80093c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	f003 0308 	and.w	r3, r3, #8
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00c      	beq.n	8008646 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800862c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800862e:	015a      	lsls	r2, r3, #5
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	4413      	add	r3, r2
 8008634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008638:	461a      	mov	r2, r3
 800863a:	2308      	movs	r3, #8
 800863c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800863e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 ffa7 	bl	8009594 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f003 0310 	and.w	r3, r3, #16
 800864c:	2b00      	cmp	r3, #0
 800864e:	d008      	beq.n	8008662 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	4413      	add	r3, r2
 8008658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800865c:	461a      	mov	r2, r3
 800865e:	2310      	movs	r3, #16
 8008660:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f003 0302 	and.w	r3, r3, #2
 8008668:	2b00      	cmp	r3, #0
 800866a:	d030      	beq.n	80086ce <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	695b      	ldr	r3, [r3, #20]
 8008670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008674:	2b80      	cmp	r3, #128	; 0x80
 8008676:	d109      	bne.n	800868c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	69fa      	ldr	r2, [r7, #28]
 8008682:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800868a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800868c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800868e:	4613      	mov	r3, r2
 8008690:	00db      	lsls	r3, r3, #3
 8008692:	4413      	add	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	4413      	add	r3, r2
 800869e:	3304      	adds	r3, #4
 80086a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	78db      	ldrb	r3, [r3, #3]
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d108      	bne.n	80086bc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	2200      	movs	r2, #0
 80086ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80086b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	4619      	mov	r1, r3
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f00e f9ec 	bl	8016a94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80086bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086be:	015a      	lsls	r2, r3, #5
 80086c0:	69fb      	ldr	r3, [r7, #28]
 80086c2:	4413      	add	r3, r2
 80086c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086c8:	461a      	mov	r2, r3
 80086ca:	2302      	movs	r3, #2
 80086cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	f003 0320 	and.w	r3, r3, #32
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d008      	beq.n	80086ea <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80086d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086da:	015a      	lsls	r2, r3, #5
 80086dc:	69fb      	ldr	r3, [r7, #28]
 80086de:	4413      	add	r3, r2
 80086e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80086e4:	461a      	mov	r2, r3
 80086e6:	2320      	movs	r3, #32
 80086e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d009      	beq.n	8008708 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	015a      	lsls	r2, r3, #5
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	4413      	add	r3, r2
 80086fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008700:	461a      	mov	r2, r3
 8008702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008706:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	3301      	adds	r3, #1
 800870c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800870e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008710:	085b      	lsrs	r3, r3, #1
 8008712:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008716:	2b00      	cmp	r3, #0
 8008718:	f47f af62 	bne.w	80085e0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4618      	mov	r0, r3
 8008722:	f00b faf3 	bl	8013d0c <USB_ReadInterrupts>
 8008726:	4603      	mov	r3, r0
 8008728:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800872c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008730:	f040 80db 	bne.w	80088ea <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4618      	mov	r0, r3
 800873a:	f00b fb14 	bl	8013d66 <USB_ReadDevAllInEpInterrupt>
 800873e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008740:	2300      	movs	r3, #0
 8008742:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008744:	e0cd      	b.n	80088e2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008748:	f003 0301 	and.w	r3, r3, #1
 800874c:	2b00      	cmp	r3, #0
 800874e:	f000 80c2 	beq.w	80088d6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008758:	b2d2      	uxtb	r2, r2
 800875a:	4611      	mov	r1, r2
 800875c:	4618      	mov	r0, r3
 800875e:	f00b fb3a 	bl	8013dd6 <USB_ReadDevInEPInterrupt>
 8008762:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	f003 0301 	and.w	r3, r3, #1
 800876a:	2b00      	cmp	r3, #0
 800876c:	d057      	beq.n	800881e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008770:	f003 030f 	and.w	r3, r3, #15
 8008774:	2201      	movs	r2, #1
 8008776:	fa02 f303 	lsl.w	r3, r2, r3
 800877a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	43db      	mvns	r3, r3
 8008788:	69f9      	ldr	r1, [r7, #28]
 800878a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800878e:	4013      	ands	r3, r2
 8008790:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008794:	015a      	lsls	r2, r3, #5
 8008796:	69fb      	ldr	r3, [r7, #28]
 8008798:	4413      	add	r3, r2
 800879a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800879e:	461a      	mov	r2, r3
 80087a0:	2301      	movs	r3, #1
 80087a2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d132      	bne.n	8008812 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b0:	4613      	mov	r3, r2
 80087b2:	00db      	lsls	r3, r3, #3
 80087b4:	4413      	add	r3, r2
 80087b6:	009b      	lsls	r3, r3, #2
 80087b8:	440b      	add	r3, r1
 80087ba:	3348      	adds	r3, #72	; 0x48
 80087bc:	6819      	ldr	r1, [r3, #0]
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c2:	4613      	mov	r3, r2
 80087c4:	00db      	lsls	r3, r3, #3
 80087c6:	4413      	add	r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	4403      	add	r3, r0
 80087cc:	3344      	adds	r3, #68	; 0x44
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4419      	add	r1, r3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087d6:	4613      	mov	r3, r2
 80087d8:	00db      	lsls	r3, r3, #3
 80087da:	4413      	add	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4403      	add	r3, r0
 80087e0:	3348      	adds	r3, #72	; 0x48
 80087e2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80087e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d113      	bne.n	8008812 <HAL_PCD_IRQHandler+0x3a2>
 80087ea:	6879      	ldr	r1, [r7, #4]
 80087ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ee:	4613      	mov	r3, r2
 80087f0:	00db      	lsls	r3, r3, #3
 80087f2:	4413      	add	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	440b      	add	r3, r1
 80087f8:	334c      	adds	r3, #76	; 0x4c
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d108      	bne.n	8008812 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6818      	ldr	r0, [r3, #0]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800880a:	461a      	mov	r2, r3
 800880c:	2101      	movs	r1, #1
 800880e:	f00b fb43 	bl	8013e98 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	b2db      	uxtb	r3, r3
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f00e f8b6 	bl	801698a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	f003 0308 	and.w	r3, r3, #8
 8008824:	2b00      	cmp	r3, #0
 8008826:	d008      	beq.n	800883a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882a:	015a      	lsls	r2, r3, #5
 800882c:	69fb      	ldr	r3, [r7, #28]
 800882e:	4413      	add	r3, r2
 8008830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008834:	461a      	mov	r2, r3
 8008836:	2308      	movs	r3, #8
 8008838:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	f003 0310 	and.w	r3, r3, #16
 8008840:	2b00      	cmp	r3, #0
 8008842:	d008      	beq.n	8008856 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	4413      	add	r3, r2
 800884c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008850:	461a      	mov	r2, r3
 8008852:	2310      	movs	r3, #16
 8008854:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008856:	693b      	ldr	r3, [r7, #16]
 8008858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800885c:	2b00      	cmp	r3, #0
 800885e:	d008      	beq.n	8008872 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008862:	015a      	lsls	r2, r3, #5
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	4413      	add	r3, r2
 8008868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800886c:	461a      	mov	r2, r3
 800886e:	2340      	movs	r3, #64	; 0x40
 8008870:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	f003 0302 	and.w	r3, r3, #2
 8008878:	2b00      	cmp	r3, #0
 800887a:	d023      	beq.n	80088c4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800887c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800887e:	6a38      	ldr	r0, [r7, #32]
 8008880:	f00a fb22 	bl	8012ec8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008884:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008886:	4613      	mov	r3, r2
 8008888:	00db      	lsls	r3, r3, #3
 800888a:	4413      	add	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	3338      	adds	r3, #56	; 0x38
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	4413      	add	r3, r2
 8008894:	3304      	adds	r3, #4
 8008896:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	78db      	ldrb	r3, [r3, #3]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d108      	bne.n	80088b2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80088a0:	697b      	ldr	r3, [r7, #20]
 80088a2:	2200      	movs	r2, #0
 80088a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80088a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a8:	b2db      	uxtb	r3, r3
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f00e f903 	bl	8016ab8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80088b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b4:	015a      	lsls	r2, r3, #5
 80088b6:	69fb      	ldr	r3, [r7, #28]
 80088b8:	4413      	add	r3, r2
 80088ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088be:	461a      	mov	r2, r3
 80088c0:	2302      	movs	r3, #2
 80088c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d003      	beq.n	80088d6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80088ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fcea 	bl	80092aa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80088d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088d8:	3301      	adds	r3, #1
 80088da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80088dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088de:	085b      	lsrs	r3, r3, #1
 80088e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80088e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f47f af2e 	bne.w	8008746 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4618      	mov	r0, r3
 80088f0:	f00b fa0c 	bl	8013d0c <USB_ReadInterrupts>
 80088f4:	4603      	mov	r3, r0
 80088f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088fe:	d122      	bne.n	8008946 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008900:	69fb      	ldr	r3, [r7, #28]
 8008902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	69fa      	ldr	r2, [r7, #28]
 800890a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800890e:	f023 0301 	bic.w	r3, r3, #1
 8008912:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800891a:	2b01      	cmp	r3, #1
 800891c:	d108      	bne.n	8008930 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2200      	movs	r2, #0
 8008922:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008926:	2100      	movs	r1, #0
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 fef5 	bl	8009718 <HAL_PCDEx_LPM_Callback>
 800892e:	e002      	b.n	8008936 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f00e f8a1 	bl	8016a78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	695a      	ldr	r2, [r3, #20]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008944:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4618      	mov	r0, r3
 800894c:	f00b f9de 	bl	8013d0c <USB_ReadInterrupts>
 8008950:	4603      	mov	r3, r0
 8008952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800895a:	d112      	bne.n	8008982 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	f003 0301 	and.w	r3, r3, #1
 8008968:	2b01      	cmp	r3, #1
 800896a:	d102      	bne.n	8008972 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f00e f85d 	bl	8016a2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	695a      	ldr	r2, [r3, #20]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008980:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4618      	mov	r0, r3
 8008988:	f00b f9c0 	bl	8013d0c <USB_ReadInterrupts>
 800898c:	4603      	mov	r3, r0
 800898e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008992:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008996:	d121      	bne.n	80089dc <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	695a      	ldr	r2, [r3, #20]
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80089a6:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d111      	bne.n	80089d6 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80089c0:	089b      	lsrs	r3, r3, #2
 80089c2:	f003 020f 	and.w	r2, r3, #15
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80089cc:	2101      	movs	r1, #1
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fea2 	bl	8009718 <HAL_PCDEx_LPM_Callback>
 80089d4:	e002      	b.n	80089dc <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f00e f828 	bl	8016a2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4618      	mov	r0, r3
 80089e2:	f00b f993 	bl	8013d0c <USB_ReadInterrupts>
 80089e6:	4603      	mov	r3, r0
 80089e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80089ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089f0:	f040 80b7 	bne.w	8008b62 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	69fa      	ldr	r2, [r7, #28]
 80089fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a02:	f023 0301 	bic.w	r3, r3, #1
 8008a06:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2110      	movs	r1, #16
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f00a fa5a 	bl	8012ec8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a14:	2300      	movs	r3, #0
 8008a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a18:	e046      	b.n	8008aa8 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1c:	015a      	lsls	r2, r3, #5
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	4413      	add	r3, r2
 8008a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a26:	461a      	mov	r2, r3
 8008a28:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a2c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a3e:	0151      	lsls	r1, r2, #5
 8008a40:	69fa      	ldr	r2, [r7, #28]
 8008a42:	440a      	add	r2, r1
 8008a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a4c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a50:	015a      	lsls	r2, r3, #5
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	4413      	add	r3, r2
 8008a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a60:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a64:	015a      	lsls	r2, r3, #5
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	4413      	add	r3, r2
 8008a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a72:	0151      	lsls	r1, r2, #5
 8008a74:	69fa      	ldr	r2, [r7, #28]
 8008a76:	440a      	add	r2, r1
 8008a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a7c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a80:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a84:	015a      	lsls	r2, r3, #5
 8008a86:	69fb      	ldr	r3, [r7, #28]
 8008a88:	4413      	add	r3, r2
 8008a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a92:	0151      	lsls	r1, r2, #5
 8008a94:	69fa      	ldr	r2, [r7, #28]
 8008a96:	440a      	add	r2, r1
 8008a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a9c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008aa0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	685b      	ldr	r3, [r3, #4]
 8008aac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d3b3      	bcc.n	8008a1a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	69fa      	ldr	r2, [r7, #28]
 8008abc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ac0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008ac4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d016      	beq.n	8008afc <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008ace:	69fb      	ldr	r3, [r7, #28]
 8008ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ad8:	69fa      	ldr	r2, [r7, #28]
 8008ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ade:	f043 030b 	orr.w	r3, r3, #11
 8008ae2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008ae6:	69fb      	ldr	r3, [r7, #28]
 8008ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aee:	69fa      	ldr	r2, [r7, #28]
 8008af0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008af4:	f043 030b 	orr.w	r3, r3, #11
 8008af8:	6453      	str	r3, [r2, #68]	; 0x44
 8008afa:	e015      	b.n	8008b28 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b02:	695a      	ldr	r2, [r3, #20]
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	f242 032b 	movw	r3, #8235	; 0x202b
 8008b10:	4313      	orrs	r3, r2
 8008b12:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	69fa      	ldr	r2, [r7, #28]
 8008b1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b22:	f043 030b 	orr.w	r3, r3, #11
 8008b26:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	69fa      	ldr	r2, [r7, #28]
 8008b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008b3a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6818      	ldr	r0, [r3, #0]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008b4c:	461a      	mov	r2, r3
 8008b4e:	f00b f9a3 	bl	8013e98 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	695a      	ldr	r2, [r3, #20]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	4618      	mov	r0, r3
 8008b68:	f00b f8d0 	bl	8013d0c <USB_ReadInterrupts>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b76:	d124      	bne.n	8008bc2 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f00b f967 	bl	8013e50 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	4618      	mov	r0, r3
 8008b88:	f00a fa1b 	bl	8012fc2 <USB_GetDevSpeed>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	461a      	mov	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681c      	ldr	r4, [r3, #0]
 8008b98:	f001 fd88 	bl	800a6ac <HAL_RCC_GetHCLKFreq>
 8008b9c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008ba2:	b2db      	uxtb	r3, r3
 8008ba4:	461a      	mov	r2, r3
 8008ba6:	4620      	mov	r0, r4
 8008ba8:	f009 ff20 	bl	80129ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f00d ff14 	bl	80169da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	695a      	ldr	r2, [r3, #20]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008bc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f00b f8a0 	bl	8013d0c <USB_ReadInterrupts>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	f003 0308 	and.w	r3, r3, #8
 8008bd2:	2b08      	cmp	r3, #8
 8008bd4:	d10a      	bne.n	8008bec <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f00d fef1 	bl	80169be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	695a      	ldr	r2, [r3, #20]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f002 0208 	and.w	r2, r2, #8
 8008bea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f00b f88b 	bl	8013d0c <USB_ReadInterrupts>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bfc:	2b80      	cmp	r3, #128	; 0x80
 8008bfe:	d122      	bne.n	8008c46 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	699b      	ldr	r3, [r3, #24]
 8008c04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c08:	6a3b      	ldr	r3, [r7, #32]
 8008c0a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c10:	e014      	b.n	8008c3c <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008c12:	6879      	ldr	r1, [r7, #4]
 8008c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c16:	4613      	mov	r3, r2
 8008c18:	00db      	lsls	r3, r3, #3
 8008c1a:	4413      	add	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	440b      	add	r3, r1
 8008c20:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008c24:	781b      	ldrb	r3, [r3, #0]
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d105      	bne.n	8008c36 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 fb09 	bl	8009248 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c38:	3301      	adds	r3, #1
 8008c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d3e5      	bcc.n	8008c12 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f00b f85e 	bl	8013d0c <USB_ReadInterrupts>
 8008c50:	4603      	mov	r3, r0
 8008c52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c5a:	d13b      	bne.n	8008cd4 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8008c60:	e02b      	b.n	8008cba <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	015a      	lsls	r2, r3, #5
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	4413      	add	r3, r2
 8008c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c72:	6879      	ldr	r1, [r7, #4]
 8008c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c76:	4613      	mov	r3, r2
 8008c78:	00db      	lsls	r3, r3, #3
 8008c7a:	4413      	add	r3, r2
 8008c7c:	009b      	lsls	r3, r3, #2
 8008c7e:	440b      	add	r3, r1
 8008c80:	3340      	adds	r3, #64	; 0x40
 8008c82:	781b      	ldrb	r3, [r3, #0]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d115      	bne.n	8008cb4 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008c88:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	da12      	bge.n	8008cb4 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008c8e:	6879      	ldr	r1, [r7, #4]
 8008c90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c92:	4613      	mov	r3, r2
 8008c94:	00db      	lsls	r3, r3, #3
 8008c96:	4413      	add	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	440b      	add	r3, r1
 8008c9c:	333f      	adds	r3, #63	; 0x3f
 8008c9e:	2201      	movs	r2, #1
 8008ca0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8008ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008caa:	b2db      	uxtb	r3, r3
 8008cac:	4619      	mov	r1, r3
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f000 faca 	bl	8009248 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	627b      	str	r3, [r7, #36]	; 0x24
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d3ce      	bcc.n	8008c62 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	695a      	ldr	r2, [r3, #20]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008cd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f00b f817 	bl	8013d0c <USB_ReadInterrupts>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ce4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ce8:	d155      	bne.n	8008d96 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008cea:	2301      	movs	r3, #1
 8008cec:	627b      	str	r3, [r7, #36]	; 0x24
 8008cee:	e045      	b.n	8008d7c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8008cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cf2:	015a      	lsls	r2, r3, #5
 8008cf4:	69fb      	ldr	r3, [r7, #28]
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d00:	6879      	ldr	r1, [r7, #4]
 8008d02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d04:	4613      	mov	r3, r2
 8008d06:	00db      	lsls	r3, r3, #3
 8008d08:	4413      	add	r3, r2
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	440b      	add	r3, r1
 8008d0e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8008d12:	781b      	ldrb	r3, [r3, #0]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d12e      	bne.n	8008d76 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008d18:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	da2b      	bge.n	8008d76 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8008d1e:	69bb      	ldr	r3, [r7, #24]
 8008d20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8008d2a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d121      	bne.n	8008d76 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8008d32:	6879      	ldr	r1, [r7, #4]
 8008d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d36:	4613      	mov	r3, r2
 8008d38:	00db      	lsls	r3, r3, #3
 8008d3a:	4413      	add	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	440b      	add	r3, r1
 8008d40:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008d44:	2201      	movs	r2, #1
 8008d46:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008d48:	6a3b      	ldr	r3, [r7, #32]
 8008d4a:	699b      	ldr	r3, [r3, #24]
 8008d4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008d54:	6a3b      	ldr	r3, [r7, #32]
 8008d56:	695b      	ldr	r3, [r3, #20]
 8008d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d10a      	bne.n	8008d76 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	69fa      	ldr	r2, [r7, #28]
 8008d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d72:	6053      	str	r3, [r2, #4]
            break;
 8008d74:	e007      	b.n	8008d86 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d78:	3301      	adds	r3, #1
 8008d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d3b4      	bcc.n	8008cf0 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	695a      	ldr	r2, [r3, #20]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008d94:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f00a ffb6 	bl	8013d0c <USB_ReadInterrupts>
 8008da0:	4603      	mov	r3, r0
 8008da2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008da6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008daa:	d10a      	bne.n	8008dc2 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f00d fe95 	bl	8016adc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	695a      	ldr	r2, [r3, #20]
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008dc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f00a ffa0 	bl	8013d0c <USB_ReadInterrupts>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	f003 0304 	and.w	r3, r3, #4
 8008dd2:	2b04      	cmp	r3, #4
 8008dd4:	d115      	bne.n	8008e02 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008dde:	69bb      	ldr	r3, [r7, #24]
 8008de0:	f003 0304 	and.w	r3, r3, #4
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d002      	beq.n	8008dee <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f00d fe85 	bl	8016af8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	6859      	ldr	r1, [r3, #4]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	69ba      	ldr	r2, [r7, #24]
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	605a      	str	r2, [r3, #4]
 8008dfe:	e000      	b.n	8008e02 <HAL_PCD_IRQHandler+0x992>
      return;
 8008e00:	bf00      	nop
    }
  }
}
 8008e02:	3734      	adds	r7, #52	; 0x34
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd90      	pop	{r4, r7, pc}

08008e08 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	460b      	mov	r3, r1
 8008e12:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d101      	bne.n	8008e22 <HAL_PCD_SetAddress+0x1a>
 8008e1e:	2302      	movs	r3, #2
 8008e20:	e013      	b.n	8008e4a <HAL_PCD_SetAddress+0x42>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2201      	movs	r2, #1
 8008e26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	78fa      	ldrb	r2, [r7, #3]
 8008e2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	78fa      	ldrb	r2, [r7, #3]
 8008e38:	4611      	mov	r1, r2
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f00a fefe 	bl	8013c3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8008e48:	2300      	movs	r3, #0
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3708      	adds	r7, #8
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	6078      	str	r0, [r7, #4]
 8008e5a:	4608      	mov	r0, r1
 8008e5c:	4611      	mov	r1, r2
 8008e5e:	461a      	mov	r2, r3
 8008e60:	4603      	mov	r3, r0
 8008e62:	70fb      	strb	r3, [r7, #3]
 8008e64:	460b      	mov	r3, r1
 8008e66:	803b      	strh	r3, [r7, #0]
 8008e68:	4613      	mov	r3, r2
 8008e6a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008e70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	da0f      	bge.n	8008e98 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e78:	78fb      	ldrb	r3, [r7, #3]
 8008e7a:	f003 020f 	and.w	r2, r3, #15
 8008e7e:	4613      	mov	r3, r2
 8008e80:	00db      	lsls	r3, r3, #3
 8008e82:	4413      	add	r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	3338      	adds	r3, #56	; 0x38
 8008e88:	687a      	ldr	r2, [r7, #4]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2201      	movs	r2, #1
 8008e94:	705a      	strb	r2, [r3, #1]
 8008e96:	e00f      	b.n	8008eb8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008e98:	78fb      	ldrb	r3, [r7, #3]
 8008e9a:	f003 020f 	and.w	r2, r3, #15
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	00db      	lsls	r3, r3, #3
 8008ea2:	4413      	add	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	4413      	add	r3, r2
 8008eae:	3304      	adds	r3, #4
 8008eb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008eb8:	78fb      	ldrb	r3, [r7, #3]
 8008eba:	f003 030f 	and.w	r3, r3, #15
 8008ebe:	b2da      	uxtb	r2, r3
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008ec4:	883a      	ldrh	r2, [r7, #0]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	78ba      	ldrb	r2, [r7, #2]
 8008ece:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	785b      	ldrb	r3, [r3, #1]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d004      	beq.n	8008ee2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	781b      	ldrb	r3, [r3, #0]
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008ee2:	78bb      	ldrb	r3, [r7, #2]
 8008ee4:	2b02      	cmp	r3, #2
 8008ee6:	d102      	bne.n	8008eee <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2200      	movs	r2, #0
 8008eec:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	d101      	bne.n	8008efc <HAL_PCD_EP_Open+0xaa>
 8008ef8:	2302      	movs	r3, #2
 8008efa:	e00e      	b.n	8008f1a <HAL_PCD_EP_Open+0xc8>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68f9      	ldr	r1, [r7, #12]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f00a f87e 	bl	801300c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8008f18:	7afb      	ldrb	r3, [r7, #11]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b084      	sub	sp, #16
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
 8008f2a:	460b      	mov	r3, r1
 8008f2c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008f2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	da0f      	bge.n	8008f56 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008f36:	78fb      	ldrb	r3, [r7, #3]
 8008f38:	f003 020f 	and.w	r2, r3, #15
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	00db      	lsls	r3, r3, #3
 8008f40:	4413      	add	r3, r2
 8008f42:	009b      	lsls	r3, r3, #2
 8008f44:	3338      	adds	r3, #56	; 0x38
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	4413      	add	r3, r2
 8008f4a:	3304      	adds	r3, #4
 8008f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	2201      	movs	r2, #1
 8008f52:	705a      	strb	r2, [r3, #1]
 8008f54:	e00f      	b.n	8008f76 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f56:	78fb      	ldrb	r3, [r7, #3]
 8008f58:	f003 020f 	and.w	r2, r3, #15
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	00db      	lsls	r3, r3, #3
 8008f60:	4413      	add	r3, r2
 8008f62:	009b      	lsls	r3, r3, #2
 8008f64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	4413      	add	r3, r2
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f76:	78fb      	ldrb	r3, [r7, #3]
 8008f78:	f003 030f 	and.w	r3, r3, #15
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d101      	bne.n	8008f90 <HAL_PCD_EP_Close+0x6e>
 8008f8c:	2302      	movs	r3, #2
 8008f8e:	e00e      	b.n	8008fae <HAL_PCD_EP_Close+0x8c>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	68f9      	ldr	r1, [r7, #12]
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f00a f8bc 	bl	801311c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008fb6:	b580      	push	{r7, lr}
 8008fb8:	b086      	sub	sp, #24
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	60f8      	str	r0, [r7, #12]
 8008fbe:	607a      	str	r2, [r7, #4]
 8008fc0:	603b      	str	r3, [r7, #0]
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008fc6:	7afb      	ldrb	r3, [r7, #11]
 8008fc8:	f003 020f 	and.w	r2, r3, #15
 8008fcc:	4613      	mov	r3, r2
 8008fce:	00db      	lsls	r3, r3, #3
 8008fd0:	4413      	add	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	4413      	add	r3, r2
 8008fdc:	3304      	adds	r3, #4
 8008fde:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	687a      	ldr	r2, [r7, #4]
 8008fe4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	683a      	ldr	r2, [r7, #0]
 8008fea:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ff8:	7afb      	ldrb	r3, [r7, #11]
 8008ffa:	f003 030f 	and.w	r3, r3, #15
 8008ffe:	b2da      	uxtb	r2, r3
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d102      	bne.n	8009012 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6818      	ldr	r0, [r3, #0]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	68db      	ldr	r3, [r3, #12]
 800901a:	b2db      	uxtb	r3, r3
 800901c:	461a      	mov	r2, r3
 800901e:	6979      	ldr	r1, [r7, #20]
 8009020:	f00a f958 	bl	80132d4 <USB_EPStartXfer>

  return HAL_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800902e:	b480      	push	{r7}
 8009030:	b083      	sub	sp, #12
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	460b      	mov	r3, r1
 8009038:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800903a:	78fb      	ldrb	r3, [r7, #3]
 800903c:	f003 020f 	and.w	r2, r3, #15
 8009040:	6879      	ldr	r1, [r7, #4]
 8009042:	4613      	mov	r3, r2
 8009044:	00db      	lsls	r3, r3, #3
 8009046:	4413      	add	r3, r2
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	440b      	add	r3, r1
 800904c:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8009050:	681b      	ldr	r3, [r3, #0]
}
 8009052:	4618      	mov	r0, r3
 8009054:	370c      	adds	r7, #12
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr

0800905e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800905e:	b580      	push	{r7, lr}
 8009060:	b086      	sub	sp, #24
 8009062:	af00      	add	r7, sp, #0
 8009064:	60f8      	str	r0, [r7, #12]
 8009066:	607a      	str	r2, [r7, #4]
 8009068:	603b      	str	r3, [r7, #0]
 800906a:	460b      	mov	r3, r1
 800906c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800906e:	7afb      	ldrb	r3, [r7, #11]
 8009070:	f003 020f 	and.w	r2, r3, #15
 8009074:	4613      	mov	r3, r2
 8009076:	00db      	lsls	r3, r3, #3
 8009078:	4413      	add	r3, r2
 800907a:	009b      	lsls	r3, r3, #2
 800907c:	3338      	adds	r3, #56	; 0x38
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	4413      	add	r3, r2
 8009082:	3304      	adds	r3, #4
 8009084:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800908c:	697b      	ldr	r3, [r7, #20]
 800908e:	683a      	ldr	r2, [r7, #0]
 8009090:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	2200      	movs	r2, #0
 8009096:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	2201      	movs	r2, #1
 800909c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800909e:	7afb      	ldrb	r3, [r7, #11]
 80090a0:	f003 030f 	and.w	r3, r3, #15
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	68db      	ldr	r3, [r3, #12]
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d102      	bne.n	80090b8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	697b      	ldr	r3, [r7, #20]
 80090b6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	6818      	ldr	r0, [r3, #0]
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	461a      	mov	r2, r3
 80090c4:	6979      	ldr	r1, [r7, #20]
 80090c6:	f00a f905 	bl	80132d4 <USB_EPStartXfer>

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3718      	adds	r7, #24
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b084      	sub	sp, #16
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80090e0:	78fb      	ldrb	r3, [r7, #3]
 80090e2:	f003 020f 	and.w	r2, r3, #15
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	429a      	cmp	r2, r3
 80090ec:	d901      	bls.n	80090f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80090ee:	2301      	movs	r3, #1
 80090f0:	e050      	b.n	8009194 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80090f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	da0f      	bge.n	800911a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80090fa:	78fb      	ldrb	r3, [r7, #3]
 80090fc:	f003 020f 	and.w	r2, r3, #15
 8009100:	4613      	mov	r3, r2
 8009102:	00db      	lsls	r3, r3, #3
 8009104:	4413      	add	r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	3338      	adds	r3, #56	; 0x38
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	4413      	add	r3, r2
 800910e:	3304      	adds	r3, #4
 8009110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2201      	movs	r2, #1
 8009116:	705a      	strb	r2, [r3, #1]
 8009118:	e00d      	b.n	8009136 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800911a:	78fa      	ldrb	r2, [r7, #3]
 800911c:	4613      	mov	r3, r2
 800911e:	00db      	lsls	r3, r3, #3
 8009120:	4413      	add	r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009128:	687a      	ldr	r2, [r7, #4]
 800912a:	4413      	add	r3, r2
 800912c:	3304      	adds	r3, #4
 800912e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2200      	movs	r2, #0
 8009134:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2201      	movs	r2, #1
 800913a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800913c:	78fb      	ldrb	r3, [r7, #3]
 800913e:	f003 030f 	and.w	r3, r3, #15
 8009142:	b2da      	uxtb	r2, r3
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800914e:	2b01      	cmp	r3, #1
 8009150:	d101      	bne.n	8009156 <HAL_PCD_EP_SetStall+0x82>
 8009152:	2302      	movs	r3, #2
 8009154:	e01e      	b.n	8009194 <HAL_PCD_EP_SetStall+0xc0>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2201      	movs	r2, #1
 800915a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68f9      	ldr	r1, [r7, #12]
 8009164:	4618      	mov	r0, r3
 8009166:	f00a fc95 	bl	8013a94 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800916a:	78fb      	ldrb	r3, [r7, #3]
 800916c:	f003 030f 	and.w	r3, r3, #15
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10a      	bne.n	800918a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6818      	ldr	r0, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	b2d9      	uxtb	r1, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009184:	461a      	mov	r2, r3
 8009186:	f00a fe87 	bl	8013e98 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009192:	2300      	movs	r3, #0
}
 8009194:	4618      	mov	r0, r3
 8009196:	3710      	adds	r7, #16
 8009198:	46bd      	mov	sp, r7
 800919a:	bd80      	pop	{r7, pc}

0800919c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b084      	sub	sp, #16
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80091a8:	78fb      	ldrb	r3, [r7, #3]
 80091aa:	f003 020f 	and.w	r2, r3, #15
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d901      	bls.n	80091ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80091b6:	2301      	movs	r3, #1
 80091b8:	e042      	b.n	8009240 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80091ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	da0f      	bge.n	80091e2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091c2:	78fb      	ldrb	r3, [r7, #3]
 80091c4:	f003 020f 	and.w	r2, r3, #15
 80091c8:	4613      	mov	r3, r2
 80091ca:	00db      	lsls	r3, r3, #3
 80091cc:	4413      	add	r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	3338      	adds	r3, #56	; 0x38
 80091d2:	687a      	ldr	r2, [r7, #4]
 80091d4:	4413      	add	r3, r2
 80091d6:	3304      	adds	r3, #4
 80091d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2201      	movs	r2, #1
 80091de:	705a      	strb	r2, [r3, #1]
 80091e0:	e00f      	b.n	8009202 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091e2:	78fb      	ldrb	r3, [r7, #3]
 80091e4:	f003 020f 	and.w	r2, r3, #15
 80091e8:	4613      	mov	r3, r2
 80091ea:	00db      	lsls	r3, r3, #3
 80091ec:	4413      	add	r3, r2
 80091ee:	009b      	lsls	r3, r3, #2
 80091f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	4413      	add	r3, r2
 80091f8:	3304      	adds	r3, #4
 80091fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	2200      	movs	r2, #0
 8009200:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	2200      	movs	r2, #0
 8009206:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009208:	78fb      	ldrb	r3, [r7, #3]
 800920a:	f003 030f 	and.w	r3, r3, #15
 800920e:	b2da      	uxtb	r2, r3
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800921a:	2b01      	cmp	r3, #1
 800921c:	d101      	bne.n	8009222 <HAL_PCD_EP_ClrStall+0x86>
 800921e:	2302      	movs	r3, #2
 8009220:	e00e      	b.n	8009240 <HAL_PCD_EP_ClrStall+0xa4>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	68f9      	ldr	r1, [r7, #12]
 8009230:	4618      	mov	r0, r3
 8009232:	f00a fc9d 	bl	8013b70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8009254:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009258:	2b00      	cmp	r3, #0
 800925a:	da0c      	bge.n	8009276 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800925c:	78fb      	ldrb	r3, [r7, #3]
 800925e:	f003 020f 	and.w	r2, r3, #15
 8009262:	4613      	mov	r3, r2
 8009264:	00db      	lsls	r3, r3, #3
 8009266:	4413      	add	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	3338      	adds	r3, #56	; 0x38
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	4413      	add	r3, r2
 8009270:	3304      	adds	r3, #4
 8009272:	60fb      	str	r3, [r7, #12]
 8009274:	e00c      	b.n	8009290 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009276:	78fb      	ldrb	r3, [r7, #3]
 8009278:	f003 020f 	and.w	r2, r3, #15
 800927c:	4613      	mov	r3, r2
 800927e:	00db      	lsls	r3, r3, #3
 8009280:	4413      	add	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	4413      	add	r3, r2
 800928c:	3304      	adds	r3, #4
 800928e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	68f9      	ldr	r1, [r7, #12]
 8009296:	4618      	mov	r0, r3
 8009298:	f00a fabc 	bl	8013814 <USB_EPStopXfer>
 800929c:	4603      	mov	r3, r0
 800929e:	72fb      	strb	r3, [r7, #11]

  return ret;
 80092a0:	7afb      	ldrb	r3, [r7, #11]
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	b08a      	sub	sp, #40	; 0x28
 80092ae:	af02      	add	r7, sp, #8
 80092b0:	6078      	str	r0, [r7, #4]
 80092b2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80092be:	683a      	ldr	r2, [r7, #0]
 80092c0:	4613      	mov	r3, r2
 80092c2:	00db      	lsls	r3, r3, #3
 80092c4:	4413      	add	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	3338      	adds	r3, #56	; 0x38
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	4413      	add	r3, r2
 80092ce:	3304      	adds	r3, #4
 80092d0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	695a      	ldr	r2, [r3, #20]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d901      	bls.n	80092e2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80092de:	2301      	movs	r3, #1
 80092e0:	e06c      	b.n	80093bc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	691a      	ldr	r2, [r3, #16]
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	695b      	ldr	r3, [r3, #20]
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	689b      	ldr	r3, [r3, #8]
 80092f2:	69fa      	ldr	r2, [r7, #28]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d902      	bls.n	80092fe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	3303      	adds	r3, #3
 8009302:	089b      	lsrs	r3, r3, #2
 8009304:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009306:	e02b      	b.n	8009360 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	691a      	ldr	r2, [r3, #16]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	695b      	ldr	r3, [r3, #20]
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	69fa      	ldr	r2, [r7, #28]
 800931a:	429a      	cmp	r2, r3
 800931c:	d902      	bls.n	8009324 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009324:	69fb      	ldr	r3, [r7, #28]
 8009326:	3303      	adds	r3, #3
 8009328:	089b      	lsrs	r3, r3, #2
 800932a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	68d9      	ldr	r1, [r3, #12]
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	b2da      	uxtb	r2, r3
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800933c:	b2db      	uxtb	r3, r3
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	4603      	mov	r3, r0
 8009342:	6978      	ldr	r0, [r7, #20]
 8009344:	f00a fb10 	bl	8013968 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	68da      	ldr	r2, [r3, #12]
 800934c:	69fb      	ldr	r3, [r7, #28]
 800934e:	441a      	add	r2, r3
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	695a      	ldr	r2, [r3, #20]
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	441a      	add	r2, r3
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	015a      	lsls	r2, r3, #5
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	4413      	add	r3, r2
 8009368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009370:	69ba      	ldr	r2, [r7, #24]
 8009372:	429a      	cmp	r2, r3
 8009374:	d809      	bhi.n	800938a <PCD_WriteEmptyTxFifo+0xe0>
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	695a      	ldr	r2, [r3, #20]
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800937e:	429a      	cmp	r2, r3
 8009380:	d203      	bcs.n	800938a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1be      	bne.n	8009308 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	691a      	ldr	r2, [r3, #16]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	695b      	ldr	r3, [r3, #20]
 8009392:	429a      	cmp	r2, r3
 8009394:	d811      	bhi.n	80093ba <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	f003 030f 	and.w	r3, r3, #15
 800939c:	2201      	movs	r2, #1
 800939e:	fa02 f303 	lsl.w	r3, r2, r3
 80093a2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	43db      	mvns	r3, r3
 80093b0:	6939      	ldr	r1, [r7, #16]
 80093b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093b6:	4013      	ands	r3, r2
 80093b8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3720      	adds	r7, #32
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}

080093c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b088      	sub	sp, #32
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093d4:	69fb      	ldr	r3, [r7, #28]
 80093d6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	333c      	adds	r3, #60	; 0x3c
 80093dc:	3304      	adds	r3, #4
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	015a      	lsls	r2, r3, #5
 80093e6:	69bb      	ldr	r3, [r7, #24]
 80093e8:	4413      	add	r3, r2
 80093ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d17b      	bne.n	80094f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80093fa:	693b      	ldr	r3, [r7, #16]
 80093fc:	f003 0308 	and.w	r3, r3, #8
 8009400:	2b00      	cmp	r3, #0
 8009402:	d015      	beq.n	8009430 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	4a61      	ldr	r2, [pc, #388]	; (800958c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8009408:	4293      	cmp	r3, r2
 800940a:	f240 80b9 	bls.w	8009580 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009414:	2b00      	cmp	r3, #0
 8009416:	f000 80b3 	beq.w	8009580 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	015a      	lsls	r2, r3, #5
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	4413      	add	r3, r2
 8009422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009426:	461a      	mov	r2, r3
 8009428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800942c:	6093      	str	r3, [r2, #8]
 800942e:	e0a7      	b.n	8009580 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	f003 0320 	and.w	r3, r3, #32
 8009436:	2b00      	cmp	r3, #0
 8009438:	d009      	beq.n	800944e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	015a      	lsls	r2, r3, #5
 800943e:	69bb      	ldr	r3, [r7, #24]
 8009440:	4413      	add	r3, r2
 8009442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009446:	461a      	mov	r2, r3
 8009448:	2320      	movs	r3, #32
 800944a:	6093      	str	r3, [r2, #8]
 800944c:	e098      	b.n	8009580 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009454:	2b00      	cmp	r3, #0
 8009456:	f040 8093 	bne.w	8009580 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	4a4b      	ldr	r2, [pc, #300]	; (800958c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d90f      	bls.n	8009482 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00a      	beq.n	8009482 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	015a      	lsls	r2, r3, #5
 8009470:	69bb      	ldr	r3, [r7, #24]
 8009472:	4413      	add	r3, r2
 8009474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009478:	461a      	mov	r2, r3
 800947a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800947e:	6093      	str	r3, [r2, #8]
 8009480:	e07e      	b.n	8009580 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009482:	683a      	ldr	r2, [r7, #0]
 8009484:	4613      	mov	r3, r2
 8009486:	00db      	lsls	r3, r3, #3
 8009488:	4413      	add	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	4413      	add	r3, r2
 8009494:	3304      	adds	r3, #4
 8009496:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6a1a      	ldr	r2, [r3, #32]
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	0159      	lsls	r1, r3, #5
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	440b      	add	r3, r1
 80094a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80094ae:	1ad2      	subs	r2, r2, r3
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d114      	bne.n	80094e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d109      	bne.n	80094d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6818      	ldr	r0, [r3, #0]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80094cc:	461a      	mov	r2, r3
 80094ce:	2101      	movs	r1, #1
 80094d0:	f00a fce2 	bl	8013e98 <USB_EP0_OutStart>
 80094d4:	e006      	b.n	80094e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	68da      	ldr	r2, [r3, #12]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	441a      	add	r2, r3
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	b2db      	uxtb	r3, r3
 80094e8:	4619      	mov	r1, r3
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f00d fa32 	bl	8016954 <HAL_PCD_DataOutStageCallback>
 80094f0:	e046      	b.n	8009580 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	4a26      	ldr	r2, [pc, #152]	; (8009590 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d124      	bne.n	8009544 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80094fa:	693b      	ldr	r3, [r7, #16]
 80094fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00a      	beq.n	800951a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	015a      	lsls	r2, r3, #5
 8009508:	69bb      	ldr	r3, [r7, #24]
 800950a:	4413      	add	r3, r2
 800950c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009510:	461a      	mov	r2, r3
 8009512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009516:	6093      	str	r3, [r2, #8]
 8009518:	e032      	b.n	8009580 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	f003 0320 	and.w	r3, r3, #32
 8009520:	2b00      	cmp	r3, #0
 8009522:	d008      	beq.n	8009536 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	015a      	lsls	r2, r3, #5
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	4413      	add	r3, r2
 800952c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009530:	461a      	mov	r2, r3
 8009532:	2320      	movs	r3, #32
 8009534:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	b2db      	uxtb	r3, r3
 800953a:	4619      	mov	r1, r3
 800953c:	6878      	ldr	r0, [r7, #4]
 800953e:	f00d fa09 	bl	8016954 <HAL_PCD_DataOutStageCallback>
 8009542:	e01d      	b.n	8009580 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d114      	bne.n	8009574 <PCD_EP_OutXfrComplete_int+0x1b0>
 800954a:	6879      	ldr	r1, [r7, #4]
 800954c:	683a      	ldr	r2, [r7, #0]
 800954e:	4613      	mov	r3, r2
 8009550:	00db      	lsls	r3, r3, #3
 8009552:	4413      	add	r3, r2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	440b      	add	r3, r1
 8009558:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	d108      	bne.n	8009574 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6818      	ldr	r0, [r3, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800956c:	461a      	mov	r2, r3
 800956e:	2100      	movs	r1, #0
 8009570:	f00a fc92 	bl	8013e98 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	b2db      	uxtb	r3, r3
 8009578:	4619      	mov	r1, r3
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f00d f9ea 	bl	8016954 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3720      	adds	r7, #32
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}
 800958a:	bf00      	nop
 800958c:	4f54300a 	.word	0x4f54300a
 8009590:	4f54310a 	.word	0x4f54310a

08009594 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b086      	sub	sp, #24
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80095a8:	697b      	ldr	r3, [r7, #20]
 80095aa:	333c      	adds	r3, #60	; 0x3c
 80095ac:	3304      	adds	r3, #4
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	015a      	lsls	r2, r3, #5
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	4413      	add	r3, r2
 80095ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	4a15      	ldr	r2, [pc, #84]	; (800961c <PCD_EP_OutSetupPacket_int+0x88>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d90e      	bls.n	80095e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d009      	beq.n	80095e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	015a      	lsls	r2, r3, #5
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	4413      	add	r3, r2
 80095dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e0:	461a      	mov	r2, r3
 80095e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f00d f9a1 	bl	8016930 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	4a0a      	ldr	r2, [pc, #40]	; (800961c <PCD_EP_OutSetupPacket_int+0x88>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d90c      	bls.n	8009610 <PCD_EP_OutSetupPacket_int+0x7c>
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	68db      	ldr	r3, [r3, #12]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d108      	bne.n	8009610 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6818      	ldr	r0, [r3, #0]
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009608:	461a      	mov	r2, r3
 800960a:	2101      	movs	r1, #1
 800960c:	f00a fc44 	bl	8013e98 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3718      	adds	r7, #24
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	4f54300a 	.word	0x4f54300a

08009620 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009620:	b480      	push	{r7}
 8009622:	b085      	sub	sp, #20
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	460b      	mov	r3, r1
 800962a:	70fb      	strb	r3, [r7, #3]
 800962c:	4613      	mov	r3, r2
 800962e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009636:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009638:	78fb      	ldrb	r3, [r7, #3]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d107      	bne.n	800964e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800963e:	883b      	ldrh	r3, [r7, #0]
 8009640:	0419      	lsls	r1, r3, #16
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	430a      	orrs	r2, r1
 800964a:	629a      	str	r2, [r3, #40]	; 0x28
 800964c:	e028      	b.n	80096a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009654:	0c1b      	lsrs	r3, r3, #16
 8009656:	68ba      	ldr	r2, [r7, #8]
 8009658:	4413      	add	r3, r2
 800965a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800965c:	2300      	movs	r3, #0
 800965e:	73fb      	strb	r3, [r7, #15]
 8009660:	e00d      	b.n	800967e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	7bfb      	ldrb	r3, [r7, #15]
 8009668:	3340      	adds	r3, #64	; 0x40
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4413      	add	r3, r2
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	0c1b      	lsrs	r3, r3, #16
 8009672:	68ba      	ldr	r2, [r7, #8]
 8009674:	4413      	add	r3, r2
 8009676:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009678:	7bfb      	ldrb	r3, [r7, #15]
 800967a:	3301      	adds	r3, #1
 800967c:	73fb      	strb	r3, [r7, #15]
 800967e:	7bfa      	ldrb	r2, [r7, #15]
 8009680:	78fb      	ldrb	r3, [r7, #3]
 8009682:	3b01      	subs	r3, #1
 8009684:	429a      	cmp	r2, r3
 8009686:	d3ec      	bcc.n	8009662 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009688:	883b      	ldrh	r3, [r7, #0]
 800968a:	0418      	lsls	r0, r3, #16
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6819      	ldr	r1, [r3, #0]
 8009690:	78fb      	ldrb	r3, [r7, #3]
 8009692:	3b01      	subs	r3, #1
 8009694:	68ba      	ldr	r2, [r7, #8]
 8009696:	4302      	orrs	r2, r0
 8009698:	3340      	adds	r3, #64	; 0x40
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	440b      	add	r3, r1
 800969e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80096a0:	2300      	movs	r3, #0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3714      	adds	r7, #20
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr

080096ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80096ae:	b480      	push	{r7}
 80096b0:	b083      	sub	sp, #12
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	460b      	mov	r3, r1
 80096b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	887a      	ldrh	r2, [r7, #2]
 80096c0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80096c2:	2300      	movs	r3, #0
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b085      	sub	sp, #20
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2201      	movs	r2, #1
 80096e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	699b      	ldr	r3, [r3, #24]
 80096f2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096fe:	4b05      	ldr	r3, [pc, #20]	; (8009714 <HAL_PCDEx_ActivateLPM+0x44>)
 8009700:	4313      	orrs	r3, r2
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009706:	2300      	movs	r3, #0
}
 8009708:	4618      	mov	r0, r3
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr
 8009714:	10000003 	.word	0x10000003

08009718 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009718:	b480      	push	{r7}
 800971a:	b083      	sub	sp, #12
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	460b      	mov	r3, r1
 8009722:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009738:	4b19      	ldr	r3, [pc, #100]	; (80097a0 <HAL_PWREx_ConfigSupply+0x70>)
 800973a:	68db      	ldr	r3, [r3, #12]
 800973c:	f003 0304 	and.w	r3, r3, #4
 8009740:	2b04      	cmp	r3, #4
 8009742:	d00a      	beq.n	800975a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009744:	4b16      	ldr	r3, [pc, #88]	; (80097a0 <HAL_PWREx_ConfigSupply+0x70>)
 8009746:	68db      	ldr	r3, [r3, #12]
 8009748:	f003 0307 	and.w	r3, r3, #7
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	429a      	cmp	r2, r3
 8009750:	d001      	beq.n	8009756 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e01f      	b.n	8009796 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	e01d      	b.n	8009796 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800975a:	4b11      	ldr	r3, [pc, #68]	; (80097a0 <HAL_PWREx_ConfigSupply+0x70>)
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	f023 0207 	bic.w	r2, r3, #7
 8009762:	490f      	ldr	r1, [pc, #60]	; (80097a0 <HAL_PWREx_ConfigSupply+0x70>)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4313      	orrs	r3, r2
 8009768:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800976a:	f7fa f929 	bl	80039c0 <HAL_GetTick>
 800976e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009770:	e009      	b.n	8009786 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009772:	f7fa f925 	bl	80039c0 <HAL_GetTick>
 8009776:	4602      	mov	r2, r0
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009780:	d901      	bls.n	8009786 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e007      	b.n	8009796 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009786:	4b06      	ldr	r3, [pc, #24]	; (80097a0 <HAL_PWREx_ConfigSupply+0x70>)
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800978e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009792:	d1ee      	bne.n	8009772 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
 800979e:	bf00      	nop
 80097a0:	58024800 	.word	0x58024800

080097a4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80097a4:	b480      	push	{r7}
 80097a6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80097a8:	4b05      	ldr	r3, [pc, #20]	; (80097c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80097aa:	68db      	ldr	r3, [r3, #12]
 80097ac:	4a04      	ldr	r2, [pc, #16]	; (80097c0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80097ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097b2:	60d3      	str	r3, [r2, #12]
}
 80097b4:	bf00      	nop
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	58024800 	.word	0x58024800

080097c4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b08c      	sub	sp, #48	; 0x30
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d101      	bne.n	80097d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80097d2:	2301      	movs	r3, #1
 80097d4:	e3c8      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f003 0301 	and.w	r3, r3, #1
 80097de:	2b00      	cmp	r3, #0
 80097e0:	f000 8087 	beq.w	80098f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097e4:	4b88      	ldr	r3, [pc, #544]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 80097e6:	691b      	ldr	r3, [r3, #16]
 80097e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80097ee:	4b86      	ldr	r3, [pc, #536]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 80097f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80097f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f6:	2b10      	cmp	r3, #16
 80097f8:	d007      	beq.n	800980a <HAL_RCC_OscConfig+0x46>
 80097fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097fc:	2b18      	cmp	r3, #24
 80097fe:	d110      	bne.n	8009822 <HAL_RCC_OscConfig+0x5e>
 8009800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009802:	f003 0303 	and.w	r3, r3, #3
 8009806:	2b02      	cmp	r3, #2
 8009808:	d10b      	bne.n	8009822 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800980a:	4b7f      	ldr	r3, [pc, #508]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009812:	2b00      	cmp	r3, #0
 8009814:	d06c      	beq.n	80098f0 <HAL_RCC_OscConfig+0x12c>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	685b      	ldr	r3, [r3, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d168      	bne.n	80098f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800981e:	2301      	movs	r3, #1
 8009820:	e3a2      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	685b      	ldr	r3, [r3, #4]
 8009826:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800982a:	d106      	bne.n	800983a <HAL_RCC_OscConfig+0x76>
 800982c:	4b76      	ldr	r3, [pc, #472]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a75      	ldr	r2, [pc, #468]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 8009832:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009836:	6013      	str	r3, [r2, #0]
 8009838:	e02e      	b.n	8009898 <HAL_RCC_OscConfig+0xd4>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d10c      	bne.n	800985c <HAL_RCC_OscConfig+0x98>
 8009842:	4b71      	ldr	r3, [pc, #452]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a70      	ldr	r2, [pc, #448]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 8009848:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800984c:	6013      	str	r3, [r2, #0]
 800984e:	4b6e      	ldr	r3, [pc, #440]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a6d      	ldr	r2, [pc, #436]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 8009854:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009858:	6013      	str	r3, [r2, #0]
 800985a:	e01d      	b.n	8009898 <HAL_RCC_OscConfig+0xd4>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	685b      	ldr	r3, [r3, #4]
 8009860:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009864:	d10c      	bne.n	8009880 <HAL_RCC_OscConfig+0xbc>
 8009866:	4b68      	ldr	r3, [pc, #416]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a67      	ldr	r2, [pc, #412]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 800986c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009870:	6013      	str	r3, [r2, #0]
 8009872:	4b65      	ldr	r3, [pc, #404]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a64      	ldr	r2, [pc, #400]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 8009878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800987c:	6013      	str	r3, [r2, #0]
 800987e:	e00b      	b.n	8009898 <HAL_RCC_OscConfig+0xd4>
 8009880:	4b61      	ldr	r3, [pc, #388]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4a60      	ldr	r2, [pc, #384]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 8009886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800988a:	6013      	str	r3, [r2, #0]
 800988c:	4b5e      	ldr	r3, [pc, #376]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a5d      	ldr	r2, [pc, #372]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 8009892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d013      	beq.n	80098c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098a0:	f7fa f88e 	bl	80039c0 <HAL_GetTick>
 80098a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80098a6:	e008      	b.n	80098ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098a8:	f7fa f88a 	bl	80039c0 <HAL_GetTick>
 80098ac:	4602      	mov	r2, r0
 80098ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	2b64      	cmp	r3, #100	; 0x64
 80098b4:	d901      	bls.n	80098ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80098b6:	2303      	movs	r3, #3
 80098b8:	e356      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80098ba:	4b53      	ldr	r3, [pc, #332]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d0f0      	beq.n	80098a8 <HAL_RCC_OscConfig+0xe4>
 80098c6:	e014      	b.n	80098f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098c8:	f7fa f87a 	bl	80039c0 <HAL_GetTick>
 80098cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80098ce:	e008      	b.n	80098e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098d0:	f7fa f876 	bl	80039c0 <HAL_GetTick>
 80098d4:	4602      	mov	r2, r0
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	1ad3      	subs	r3, r2, r3
 80098da:	2b64      	cmp	r3, #100	; 0x64
 80098dc:	d901      	bls.n	80098e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80098de:	2303      	movs	r3, #3
 80098e0:	e342      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80098e2:	4b49      	ldr	r3, [pc, #292]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d1f0      	bne.n	80098d0 <HAL_RCC_OscConfig+0x10c>
 80098ee:	e000      	b.n	80098f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f003 0302 	and.w	r3, r3, #2
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	f000 808c 	beq.w	8009a18 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009900:	4b41      	ldr	r3, [pc, #260]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009908:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800990a:	4b3f      	ldr	r3, [pc, #252]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 800990c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009910:	6a3b      	ldr	r3, [r7, #32]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d007      	beq.n	8009926 <HAL_RCC_OscConfig+0x162>
 8009916:	6a3b      	ldr	r3, [r7, #32]
 8009918:	2b18      	cmp	r3, #24
 800991a:	d137      	bne.n	800998c <HAL_RCC_OscConfig+0x1c8>
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	f003 0303 	and.w	r3, r3, #3
 8009922:	2b00      	cmp	r3, #0
 8009924:	d132      	bne.n	800998c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009926:	4b38      	ldr	r3, [pc, #224]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f003 0304 	and.w	r3, r3, #4
 800992e:	2b00      	cmp	r3, #0
 8009930:	d005      	beq.n	800993e <HAL_RCC_OscConfig+0x17a>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d101      	bne.n	800993e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e314      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800993e:	4b32      	ldr	r3, [pc, #200]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f023 0219 	bic.w	r2, r3, #25
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	492f      	ldr	r1, [pc, #188]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 800994c:	4313      	orrs	r3, r2
 800994e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009950:	f7fa f836 	bl	80039c0 <HAL_GetTick>
 8009954:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009956:	e008      	b.n	800996a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009958:	f7fa f832 	bl	80039c0 <HAL_GetTick>
 800995c:	4602      	mov	r2, r0
 800995e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	2b02      	cmp	r3, #2
 8009964:	d901      	bls.n	800996a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009966:	2303      	movs	r3, #3
 8009968:	e2fe      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800996a:	4b27      	ldr	r3, [pc, #156]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f003 0304 	and.w	r3, r3, #4
 8009972:	2b00      	cmp	r3, #0
 8009974:	d0f0      	beq.n	8009958 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009976:	4b24      	ldr	r3, [pc, #144]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 8009978:	685b      	ldr	r3, [r3, #4]
 800997a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	061b      	lsls	r3, r3, #24
 8009984:	4920      	ldr	r1, [pc, #128]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 8009986:	4313      	orrs	r3, r2
 8009988:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800998a:	e045      	b.n	8009a18 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	68db      	ldr	r3, [r3, #12]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d026      	beq.n	80099e2 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009994:	4b1c      	ldr	r3, [pc, #112]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f023 0219 	bic.w	r2, r3, #25
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	4919      	ldr	r1, [pc, #100]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 80099a2:	4313      	orrs	r3, r2
 80099a4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a6:	f7fa f80b 	bl	80039c0 <HAL_GetTick>
 80099aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80099ac:	e008      	b.n	80099c0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099ae:	f7fa f807 	bl	80039c0 <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d901      	bls.n	80099c0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e2d3      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80099c0:	4b11      	ldr	r3, [pc, #68]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 0304 	and.w	r3, r3, #4
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d0f0      	beq.n	80099ae <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099cc:	4b0e      	ldr	r3, [pc, #56]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	061b      	lsls	r3, r3, #24
 80099da:	490b      	ldr	r1, [pc, #44]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 80099dc:	4313      	orrs	r3, r2
 80099de:	604b      	str	r3, [r1, #4]
 80099e0:	e01a      	b.n	8009a18 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099e2:	4b09      	ldr	r3, [pc, #36]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a08      	ldr	r2, [pc, #32]	; (8009a08 <HAL_RCC_OscConfig+0x244>)
 80099e8:	f023 0301 	bic.w	r3, r3, #1
 80099ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ee:	f7f9 ffe7 	bl	80039c0 <HAL_GetTick>
 80099f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80099f4:	e00a      	b.n	8009a0c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099f6:	f7f9 ffe3 	bl	80039c0 <HAL_GetTick>
 80099fa:	4602      	mov	r2, r0
 80099fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d903      	bls.n	8009a0c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e2af      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
 8009a08:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a0c:	4b96      	ldr	r3, [pc, #600]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 0304 	and.w	r3, r3, #4
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d1ee      	bne.n	80099f6 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f003 0310 	and.w	r3, r3, #16
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d06a      	beq.n	8009afa <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a24:	4b90      	ldr	r3, [pc, #576]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009a26:	691b      	ldr	r3, [r3, #16]
 8009a28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a2c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a2e:	4b8e      	ldr	r3, [pc, #568]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a32:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009a34:	69bb      	ldr	r3, [r7, #24]
 8009a36:	2b08      	cmp	r3, #8
 8009a38:	d007      	beq.n	8009a4a <HAL_RCC_OscConfig+0x286>
 8009a3a:	69bb      	ldr	r3, [r7, #24]
 8009a3c:	2b18      	cmp	r3, #24
 8009a3e:	d11b      	bne.n	8009a78 <HAL_RCC_OscConfig+0x2b4>
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	f003 0303 	and.w	r3, r3, #3
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d116      	bne.n	8009a78 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a4a:	4b87      	ldr	r3, [pc, #540]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d005      	beq.n	8009a62 <HAL_RCC_OscConfig+0x29e>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	69db      	ldr	r3, [r3, #28]
 8009a5a:	2b80      	cmp	r3, #128	; 0x80
 8009a5c:	d001      	beq.n	8009a62 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	e282      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a62:	4b81      	ldr	r3, [pc, #516]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	6a1b      	ldr	r3, [r3, #32]
 8009a6e:	061b      	lsls	r3, r3, #24
 8009a70:	497d      	ldr	r1, [pc, #500]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009a72:	4313      	orrs	r3, r2
 8009a74:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a76:	e040      	b.n	8009afa <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	69db      	ldr	r3, [r3, #28]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d023      	beq.n	8009ac8 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009a80:	4b79      	ldr	r3, [pc, #484]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a78      	ldr	r2, [pc, #480]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009a86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a8c:	f7f9 ff98 	bl	80039c0 <HAL_GetTick>
 8009a90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a92:	e008      	b.n	8009aa6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009a94:	f7f9 ff94 	bl	80039c0 <HAL_GetTick>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a9c:	1ad3      	subs	r3, r2, r3
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	d901      	bls.n	8009aa6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009aa2:	2303      	movs	r3, #3
 8009aa4:	e260      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009aa6:	4b70      	ldr	r3, [pc, #448]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d0f0      	beq.n	8009a94 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ab2:	4b6d      	ldr	r3, [pc, #436]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a1b      	ldr	r3, [r3, #32]
 8009abe:	061b      	lsls	r3, r3, #24
 8009ac0:	4969      	ldr	r1, [pc, #420]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	60cb      	str	r3, [r1, #12]
 8009ac6:	e018      	b.n	8009afa <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009ac8:	4b67      	ldr	r3, [pc, #412]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a66      	ldr	r2, [pc, #408]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009ace:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ad2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ad4:	f7f9 ff74 	bl	80039c0 <HAL_GetTick>
 8009ad8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009ada:	e008      	b.n	8009aee <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009adc:	f7f9 ff70 	bl	80039c0 <HAL_GetTick>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d901      	bls.n	8009aee <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009aea:	2303      	movs	r3, #3
 8009aec:	e23c      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009aee:	4b5e      	ldr	r3, [pc, #376]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1f0      	bne.n	8009adc <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f003 0308 	and.w	r3, r3, #8
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d036      	beq.n	8009b74 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	695b      	ldr	r3, [r3, #20]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d019      	beq.n	8009b42 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b0e:	4b56      	ldr	r3, [pc, #344]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b12:	4a55      	ldr	r2, [pc, #340]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009b14:	f043 0301 	orr.w	r3, r3, #1
 8009b18:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b1a:	f7f9 ff51 	bl	80039c0 <HAL_GetTick>
 8009b1e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b20:	e008      	b.n	8009b34 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b22:	f7f9 ff4d 	bl	80039c0 <HAL_GetTick>
 8009b26:	4602      	mov	r2, r0
 8009b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	d901      	bls.n	8009b34 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e219      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b34:	4b4c      	ldr	r3, [pc, #304]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b38:	f003 0302 	and.w	r3, r3, #2
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d0f0      	beq.n	8009b22 <HAL_RCC_OscConfig+0x35e>
 8009b40:	e018      	b.n	8009b74 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b42:	4b49      	ldr	r3, [pc, #292]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009b44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b46:	4a48      	ldr	r2, [pc, #288]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009b48:	f023 0301 	bic.w	r3, r3, #1
 8009b4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b4e:	f7f9 ff37 	bl	80039c0 <HAL_GetTick>
 8009b52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b54:	e008      	b.n	8009b68 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009b56:	f7f9 ff33 	bl	80039c0 <HAL_GetTick>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d901      	bls.n	8009b68 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009b64:	2303      	movs	r3, #3
 8009b66:	e1ff      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b68:	4b3f      	ldr	r3, [pc, #252]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b6c:	f003 0302 	and.w	r3, r3, #2
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1f0      	bne.n	8009b56 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f003 0320 	and.w	r3, r3, #32
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d036      	beq.n	8009bee <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d019      	beq.n	8009bbc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009b88:	4b37      	ldr	r3, [pc, #220]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a36      	ldr	r2, [pc, #216]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009b8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b92:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009b94:	f7f9 ff14 	bl	80039c0 <HAL_GetTick>
 8009b98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b9a:	e008      	b.n	8009bae <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009b9c:	f7f9 ff10 	bl	80039c0 <HAL_GetTick>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	2b02      	cmp	r3, #2
 8009ba8:	d901      	bls.n	8009bae <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009baa:	2303      	movs	r3, #3
 8009bac:	e1dc      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009bae:	4b2e      	ldr	r3, [pc, #184]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d0f0      	beq.n	8009b9c <HAL_RCC_OscConfig+0x3d8>
 8009bba:	e018      	b.n	8009bee <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009bbc:	4b2a      	ldr	r3, [pc, #168]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a29      	ldr	r2, [pc, #164]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009bc2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bc6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009bc8:	f7f9 fefa 	bl	80039c0 <HAL_GetTick>
 8009bcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009bce:	e008      	b.n	8009be2 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009bd0:	f7f9 fef6 	bl	80039c0 <HAL_GetTick>
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd8:	1ad3      	subs	r3, r2, r3
 8009bda:	2b02      	cmp	r3, #2
 8009bdc:	d901      	bls.n	8009be2 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009bde:	2303      	movs	r3, #3
 8009be0:	e1c2      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009be2:	4b21      	ldr	r3, [pc, #132]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d1f0      	bne.n	8009bd0 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f003 0304 	and.w	r3, r3, #4
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	f000 8086 	beq.w	8009d08 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009bfc:	4b1b      	ldr	r3, [pc, #108]	; (8009c6c <HAL_RCC_OscConfig+0x4a8>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a1a      	ldr	r2, [pc, #104]	; (8009c6c <HAL_RCC_OscConfig+0x4a8>)
 8009c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009c08:	f7f9 feda 	bl	80039c0 <HAL_GetTick>
 8009c0c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c0e:	e008      	b.n	8009c22 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009c10:	f7f9 fed6 	bl	80039c0 <HAL_GetTick>
 8009c14:	4602      	mov	r2, r0
 8009c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	2b64      	cmp	r3, #100	; 0x64
 8009c1c:	d901      	bls.n	8009c22 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	e1a2      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c22:	4b12      	ldr	r3, [pc, #72]	; (8009c6c <HAL_RCC_OscConfig+0x4a8>)
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d0f0      	beq.n	8009c10 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	689b      	ldr	r3, [r3, #8]
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d106      	bne.n	8009c44 <HAL_RCC_OscConfig+0x480>
 8009c36:	4b0c      	ldr	r3, [pc, #48]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c3a:	4a0b      	ldr	r2, [pc, #44]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009c3c:	f043 0301 	orr.w	r3, r3, #1
 8009c40:	6713      	str	r3, [r2, #112]	; 0x70
 8009c42:	e032      	b.n	8009caa <HAL_RCC_OscConfig+0x4e6>
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	689b      	ldr	r3, [r3, #8]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d111      	bne.n	8009c70 <HAL_RCC_OscConfig+0x4ac>
 8009c4c:	4b06      	ldr	r3, [pc, #24]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c50:	4a05      	ldr	r2, [pc, #20]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009c52:	f023 0301 	bic.w	r3, r3, #1
 8009c56:	6713      	str	r3, [r2, #112]	; 0x70
 8009c58:	4b03      	ldr	r3, [pc, #12]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c5c:	4a02      	ldr	r2, [pc, #8]	; (8009c68 <HAL_RCC_OscConfig+0x4a4>)
 8009c5e:	f023 0304 	bic.w	r3, r3, #4
 8009c62:	6713      	str	r3, [r2, #112]	; 0x70
 8009c64:	e021      	b.n	8009caa <HAL_RCC_OscConfig+0x4e6>
 8009c66:	bf00      	nop
 8009c68:	58024400 	.word	0x58024400
 8009c6c:	58024800 	.word	0x58024800
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	2b05      	cmp	r3, #5
 8009c76:	d10c      	bne.n	8009c92 <HAL_RCC_OscConfig+0x4ce>
 8009c78:	4b83      	ldr	r3, [pc, #524]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c7c:	4a82      	ldr	r2, [pc, #520]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009c7e:	f043 0304 	orr.w	r3, r3, #4
 8009c82:	6713      	str	r3, [r2, #112]	; 0x70
 8009c84:	4b80      	ldr	r3, [pc, #512]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c88:	4a7f      	ldr	r2, [pc, #508]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009c8a:	f043 0301 	orr.w	r3, r3, #1
 8009c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c90:	e00b      	b.n	8009caa <HAL_RCC_OscConfig+0x4e6>
 8009c92:	4b7d      	ldr	r3, [pc, #500]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c96:	4a7c      	ldr	r2, [pc, #496]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009c98:	f023 0301 	bic.w	r3, r3, #1
 8009c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8009c9e:	4b7a      	ldr	r3, [pc, #488]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca2:	4a79      	ldr	r2, [pc, #484]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009ca4:	f023 0304 	bic.w	r3, r3, #4
 8009ca8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d015      	beq.n	8009cde <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cb2:	f7f9 fe85 	bl	80039c0 <HAL_GetTick>
 8009cb6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cb8:	e00a      	b.n	8009cd0 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009cba:	f7f9 fe81 	bl	80039c0 <HAL_GetTick>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cc8:	4293      	cmp	r3, r2
 8009cca:	d901      	bls.n	8009cd0 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8009ccc:	2303      	movs	r3, #3
 8009cce:	e14b      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cd0:	4b6d      	ldr	r3, [pc, #436]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cd4:	f003 0302 	and.w	r3, r3, #2
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d0ee      	beq.n	8009cba <HAL_RCC_OscConfig+0x4f6>
 8009cdc:	e014      	b.n	8009d08 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cde:	f7f9 fe6f 	bl	80039c0 <HAL_GetTick>
 8009ce2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009ce4:	e00a      	b.n	8009cfc <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009ce6:	f7f9 fe6b 	bl	80039c0 <HAL_GetTick>
 8009cea:	4602      	mov	r2, r0
 8009cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cee:	1ad3      	subs	r3, r2, r3
 8009cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d901      	bls.n	8009cfc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	e135      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009cfc:	4b62      	ldr	r3, [pc, #392]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d00:	f003 0302 	and.w	r3, r3, #2
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d1ee      	bne.n	8009ce6 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	f000 812a 	beq.w	8009f66 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009d12:	4b5d      	ldr	r3, [pc, #372]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009d14:	691b      	ldr	r3, [r3, #16]
 8009d16:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d1a:	2b18      	cmp	r3, #24
 8009d1c:	f000 80ba 	beq.w	8009e94 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d24:	2b02      	cmp	r3, #2
 8009d26:	f040 8095 	bne.w	8009e54 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d2a:	4b57      	ldr	r3, [pc, #348]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4a56      	ldr	r2, [pc, #344]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009d30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d36:	f7f9 fe43 	bl	80039c0 <HAL_GetTick>
 8009d3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d3c:	e008      	b.n	8009d50 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d3e:	f7f9 fe3f 	bl	80039c0 <HAL_GetTick>
 8009d42:	4602      	mov	r2, r0
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	1ad3      	subs	r3, r2, r3
 8009d48:	2b02      	cmp	r3, #2
 8009d4a:	d901      	bls.n	8009d50 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8009d4c:	2303      	movs	r3, #3
 8009d4e:	e10b      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d50:	4b4d      	ldr	r3, [pc, #308]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d1f0      	bne.n	8009d3e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d5c:	4b4a      	ldr	r3, [pc, #296]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009d5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d60:	4b4a      	ldr	r3, [pc, #296]	; (8009e8c <HAL_RCC_OscConfig+0x6c8>)
 8009d62:	4013      	ands	r3, r2
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009d6c:	0112      	lsls	r2, r2, #4
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	4945      	ldr	r1, [pc, #276]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009d72:	4313      	orrs	r3, r2
 8009d74:	628b      	str	r3, [r1, #40]	; 0x28
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d84:	3b01      	subs	r3, #1
 8009d86:	025b      	lsls	r3, r3, #9
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	431a      	orrs	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d90:	3b01      	subs	r3, #1
 8009d92:	041b      	lsls	r3, r3, #16
 8009d94:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d98:	431a      	orrs	r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d9e:	3b01      	subs	r3, #1
 8009da0:	061b      	lsls	r3, r3, #24
 8009da2:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009da6:	4938      	ldr	r1, [pc, #224]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009da8:	4313      	orrs	r3, r2
 8009daa:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009dac:	4b36      	ldr	r3, [pc, #216]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009db0:	4a35      	ldr	r2, [pc, #212]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009db2:	f023 0301 	bic.w	r3, r3, #1
 8009db6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009db8:	4b33      	ldr	r3, [pc, #204]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009dba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dbc:	4b34      	ldr	r3, [pc, #208]	; (8009e90 <HAL_RCC_OscConfig+0x6cc>)
 8009dbe:	4013      	ands	r3, r2
 8009dc0:	687a      	ldr	r2, [r7, #4]
 8009dc2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009dc4:	00d2      	lsls	r2, r2, #3
 8009dc6:	4930      	ldr	r1, [pc, #192]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009dcc:	4b2e      	ldr	r3, [pc, #184]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd0:	f023 020c 	bic.w	r2, r3, #12
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd8:	492b      	ldr	r1, [pc, #172]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009dde:	4b2a      	ldr	r3, [pc, #168]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de2:	f023 0202 	bic.w	r2, r3, #2
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dea:	4927      	ldr	r1, [pc, #156]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009dec:	4313      	orrs	r3, r2
 8009dee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009df0:	4b25      	ldr	r3, [pc, #148]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df4:	4a24      	ldr	r2, [pc, #144]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009df6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dfa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dfc:	4b22      	ldr	r3, [pc, #136]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e00:	4a21      	ldr	r2, [pc, #132]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009e02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009e06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009e08:	4b1f      	ldr	r3, [pc, #124]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e0c:	4a1e      	ldr	r2, [pc, #120]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009e0e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8009e14:	4b1c      	ldr	r3, [pc, #112]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e18:	4a1b      	ldr	r2, [pc, #108]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009e1a:	f043 0301 	orr.w	r3, r3, #1
 8009e1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e20:	4b19      	ldr	r3, [pc, #100]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a18      	ldr	r2, [pc, #96]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009e26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e2c:	f7f9 fdc8 	bl	80039c0 <HAL_GetTick>
 8009e30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e32:	e008      	b.n	8009e46 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e34:	f7f9 fdc4 	bl	80039c0 <HAL_GetTick>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3c:	1ad3      	subs	r3, r2, r3
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d901      	bls.n	8009e46 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8009e42:	2303      	movs	r3, #3
 8009e44:	e090      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e46:	4b10      	ldr	r3, [pc, #64]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d0f0      	beq.n	8009e34 <HAL_RCC_OscConfig+0x670>
 8009e52:	e088      	b.n	8009f66 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e54:	4b0c      	ldr	r3, [pc, #48]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a0b      	ldr	r2, [pc, #44]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009e5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e60:	f7f9 fdae 	bl	80039c0 <HAL_GetTick>
 8009e64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e66:	e008      	b.n	8009e7a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e68:	f7f9 fdaa 	bl	80039c0 <HAL_GetTick>
 8009e6c:	4602      	mov	r2, r0
 8009e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e70:	1ad3      	subs	r3, r2, r3
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d901      	bls.n	8009e7a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8009e76:	2303      	movs	r3, #3
 8009e78:	e076      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e7a:	4b03      	ldr	r3, [pc, #12]	; (8009e88 <HAL_RCC_OscConfig+0x6c4>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1f0      	bne.n	8009e68 <HAL_RCC_OscConfig+0x6a4>
 8009e86:	e06e      	b.n	8009f66 <HAL_RCC_OscConfig+0x7a2>
 8009e88:	58024400 	.word	0x58024400
 8009e8c:	fffffc0c 	.word	0xfffffc0c
 8009e90:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009e94:	4b36      	ldr	r3, [pc, #216]	; (8009f70 <HAL_RCC_OscConfig+0x7ac>)
 8009e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e98:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009e9a:	4b35      	ldr	r3, [pc, #212]	; (8009f70 <HAL_RCC_OscConfig+0x7ac>)
 8009e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e9e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea4:	2b01      	cmp	r3, #1
 8009ea6:	d031      	beq.n	8009f0c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	f003 0203 	and.w	r2, r3, #3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	d12a      	bne.n	8009f0c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	091b      	lsrs	r3, r3, #4
 8009eba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d122      	bne.n	8009f0c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ed2:	429a      	cmp	r2, r3
 8009ed4:	d11a      	bne.n	8009f0c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	0a5b      	lsrs	r3, r3, #9
 8009eda:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ee2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d111      	bne.n	8009f0c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	0c1b      	lsrs	r3, r3, #16
 8009eec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ef4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009ef6:	429a      	cmp	r2, r3
 8009ef8:	d108      	bne.n	8009f0c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	0e1b      	lsrs	r3, r3, #24
 8009efe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f06:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d001      	beq.n	8009f10 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	e02b      	b.n	8009f68 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009f10:	4b17      	ldr	r3, [pc, #92]	; (8009f70 <HAL_RCC_OscConfig+0x7ac>)
 8009f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f14:	08db      	lsrs	r3, r3, #3
 8009f16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009f1a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f20:	693a      	ldr	r2, [r7, #16]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	d01f      	beq.n	8009f66 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009f26:	4b12      	ldr	r3, [pc, #72]	; (8009f70 <HAL_RCC_OscConfig+0x7ac>)
 8009f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2a:	4a11      	ldr	r2, [pc, #68]	; (8009f70 <HAL_RCC_OscConfig+0x7ac>)
 8009f2c:	f023 0301 	bic.w	r3, r3, #1
 8009f30:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009f32:	f7f9 fd45 	bl	80039c0 <HAL_GetTick>
 8009f36:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009f38:	bf00      	nop
 8009f3a:	f7f9 fd41 	bl	80039c0 <HAL_GetTick>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d0f9      	beq.n	8009f3a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009f46:	4b0a      	ldr	r3, [pc, #40]	; (8009f70 <HAL_RCC_OscConfig+0x7ac>)
 8009f48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f4a:	4b0a      	ldr	r3, [pc, #40]	; (8009f74 <HAL_RCC_OscConfig+0x7b0>)
 8009f4c:	4013      	ands	r3, r2
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009f52:	00d2      	lsls	r2, r2, #3
 8009f54:	4906      	ldr	r1, [pc, #24]	; (8009f70 <HAL_RCC_OscConfig+0x7ac>)
 8009f56:	4313      	orrs	r3, r2
 8009f58:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009f5a:	4b05      	ldr	r3, [pc, #20]	; (8009f70 <HAL_RCC_OscConfig+0x7ac>)
 8009f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f5e:	4a04      	ldr	r2, [pc, #16]	; (8009f70 <HAL_RCC_OscConfig+0x7ac>)
 8009f60:	f043 0301 	orr.w	r3, r3, #1
 8009f64:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3730      	adds	r7, #48	; 0x30
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}
 8009f70:	58024400 	.word	0x58024400
 8009f74:	ffff0007 	.word	0xffff0007

08009f78 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b086      	sub	sp, #24
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d101      	bne.n	8009f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e19c      	b.n	800a2c6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009f8c:	4b8a      	ldr	r3, [pc, #552]	; (800a1b8 <HAL_RCC_ClockConfig+0x240>)
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f003 030f 	and.w	r3, r3, #15
 8009f94:	683a      	ldr	r2, [r7, #0]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d910      	bls.n	8009fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f9a:	4b87      	ldr	r3, [pc, #540]	; (800a1b8 <HAL_RCC_ClockConfig+0x240>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f023 020f 	bic.w	r2, r3, #15
 8009fa2:	4985      	ldr	r1, [pc, #532]	; (800a1b8 <HAL_RCC_ClockConfig+0x240>)
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009faa:	4b83      	ldr	r3, [pc, #524]	; (800a1b8 <HAL_RCC_ClockConfig+0x240>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f003 030f 	and.w	r3, r3, #15
 8009fb2:	683a      	ldr	r2, [r7, #0]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d001      	beq.n	8009fbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e184      	b.n	800a2c6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f003 0304 	and.w	r3, r3, #4
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d010      	beq.n	8009fea <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	691a      	ldr	r2, [r3, #16]
 8009fcc:	4b7b      	ldr	r3, [pc, #492]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 8009fce:	699b      	ldr	r3, [r3, #24]
 8009fd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d908      	bls.n	8009fea <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009fd8:	4b78      	ldr	r3, [pc, #480]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	691b      	ldr	r3, [r3, #16]
 8009fe4:	4975      	ldr	r1, [pc, #468]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 0308 	and.w	r3, r3, #8
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d010      	beq.n	800a018 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	695a      	ldr	r2, [r3, #20]
 8009ffa:	4b70      	ldr	r3, [pc, #448]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 8009ffc:	69db      	ldr	r3, [r3, #28]
 8009ffe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a002:	429a      	cmp	r2, r3
 800a004:	d908      	bls.n	800a018 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a006:	4b6d      	ldr	r3, [pc, #436]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	695b      	ldr	r3, [r3, #20]
 800a012:	496a      	ldr	r1, [pc, #424]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a014:	4313      	orrs	r3, r2
 800a016:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 0310 	and.w	r3, r3, #16
 800a020:	2b00      	cmp	r3, #0
 800a022:	d010      	beq.n	800a046 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	699a      	ldr	r2, [r3, #24]
 800a028:	4b64      	ldr	r3, [pc, #400]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a02a:	69db      	ldr	r3, [r3, #28]
 800a02c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a030:	429a      	cmp	r2, r3
 800a032:	d908      	bls.n	800a046 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a034:	4b61      	ldr	r3, [pc, #388]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a036:	69db      	ldr	r3, [r3, #28]
 800a038:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	699b      	ldr	r3, [r3, #24]
 800a040:	495e      	ldr	r1, [pc, #376]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a042:	4313      	orrs	r3, r2
 800a044:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f003 0320 	and.w	r3, r3, #32
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d010      	beq.n	800a074 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	69da      	ldr	r2, [r3, #28]
 800a056:	4b59      	ldr	r3, [pc, #356]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a058:	6a1b      	ldr	r3, [r3, #32]
 800a05a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a05e:	429a      	cmp	r2, r3
 800a060:	d908      	bls.n	800a074 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a062:	4b56      	ldr	r3, [pc, #344]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a064:	6a1b      	ldr	r3, [r3, #32]
 800a066:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	69db      	ldr	r3, [r3, #28]
 800a06e:	4953      	ldr	r1, [pc, #332]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a070:	4313      	orrs	r3, r2
 800a072:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f003 0302 	and.w	r3, r3, #2
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d010      	beq.n	800a0a2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	68da      	ldr	r2, [r3, #12]
 800a084:	4b4d      	ldr	r3, [pc, #308]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	f003 030f 	and.w	r3, r3, #15
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d908      	bls.n	800a0a2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a090:	4b4a      	ldr	r3, [pc, #296]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a092:	699b      	ldr	r3, [r3, #24]
 800a094:	f023 020f 	bic.w	r2, r3, #15
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	4947      	ldr	r1, [pc, #284]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f003 0301 	and.w	r3, r3, #1
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d055      	beq.n	800a15a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a0ae:	4b43      	ldr	r3, [pc, #268]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	689b      	ldr	r3, [r3, #8]
 800a0ba:	4940      	ldr	r1, [pc, #256]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a0bc:	4313      	orrs	r3, r2
 800a0be:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d107      	bne.n	800a0d8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a0c8:	4b3c      	ldr	r3, [pc, #240]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d121      	bne.n	800a118 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	e0f6      	b.n	800a2c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	685b      	ldr	r3, [r3, #4]
 800a0dc:	2b03      	cmp	r3, #3
 800a0de:	d107      	bne.n	800a0f0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0e0:	4b36      	ldr	r3, [pc, #216]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d115      	bne.n	800a118 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e0ea      	b.n	800a2c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	2b01      	cmp	r3, #1
 800a0f6:	d107      	bne.n	800a108 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a0f8:	4b30      	ldr	r3, [pc, #192]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a100:	2b00      	cmp	r3, #0
 800a102:	d109      	bne.n	800a118 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a104:	2301      	movs	r3, #1
 800a106:	e0de      	b.n	800a2c6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a108:	4b2c      	ldr	r3, [pc, #176]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f003 0304 	and.w	r3, r3, #4
 800a110:	2b00      	cmp	r3, #0
 800a112:	d101      	bne.n	800a118 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a114:	2301      	movs	r3, #1
 800a116:	e0d6      	b.n	800a2c6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a118:	4b28      	ldr	r3, [pc, #160]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	f023 0207 	bic.w	r2, r3, #7
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	4925      	ldr	r1, [pc, #148]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a126:	4313      	orrs	r3, r2
 800a128:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a12a:	f7f9 fc49 	bl	80039c0 <HAL_GetTick>
 800a12e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a130:	e00a      	b.n	800a148 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a132:	f7f9 fc45 	bl	80039c0 <HAL_GetTick>
 800a136:	4602      	mov	r2, r0
 800a138:	697b      	ldr	r3, [r7, #20]
 800a13a:	1ad3      	subs	r3, r2, r3
 800a13c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a140:	4293      	cmp	r3, r2
 800a142:	d901      	bls.n	800a148 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a144:	2303      	movs	r3, #3
 800a146:	e0be      	b.n	800a2c6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a148:	4b1c      	ldr	r3, [pc, #112]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	00db      	lsls	r3, r3, #3
 800a156:	429a      	cmp	r2, r3
 800a158:	d1eb      	bne.n	800a132 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f003 0302 	and.w	r3, r3, #2
 800a162:	2b00      	cmp	r3, #0
 800a164:	d010      	beq.n	800a188 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	68da      	ldr	r2, [r3, #12]
 800a16a:	4b14      	ldr	r3, [pc, #80]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a16c:	699b      	ldr	r3, [r3, #24]
 800a16e:	f003 030f 	and.w	r3, r3, #15
 800a172:	429a      	cmp	r2, r3
 800a174:	d208      	bcs.n	800a188 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a176:	4b11      	ldr	r3, [pc, #68]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	f023 020f 	bic.w	r2, r3, #15
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	68db      	ldr	r3, [r3, #12]
 800a182:	490e      	ldr	r1, [pc, #56]	; (800a1bc <HAL_RCC_ClockConfig+0x244>)
 800a184:	4313      	orrs	r3, r2
 800a186:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a188:	4b0b      	ldr	r3, [pc, #44]	; (800a1b8 <HAL_RCC_ClockConfig+0x240>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f003 030f 	and.w	r3, r3, #15
 800a190:	683a      	ldr	r2, [r7, #0]
 800a192:	429a      	cmp	r2, r3
 800a194:	d214      	bcs.n	800a1c0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a196:	4b08      	ldr	r3, [pc, #32]	; (800a1b8 <HAL_RCC_ClockConfig+0x240>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f023 020f 	bic.w	r2, r3, #15
 800a19e:	4906      	ldr	r1, [pc, #24]	; (800a1b8 <HAL_RCC_ClockConfig+0x240>)
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1a6:	4b04      	ldr	r3, [pc, #16]	; (800a1b8 <HAL_RCC_ClockConfig+0x240>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	f003 030f 	and.w	r3, r3, #15
 800a1ae:	683a      	ldr	r2, [r7, #0]
 800a1b0:	429a      	cmp	r2, r3
 800a1b2:	d005      	beq.n	800a1c0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e086      	b.n	800a2c6 <HAL_RCC_ClockConfig+0x34e>
 800a1b8:	52002000 	.word	0x52002000
 800a1bc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 0304 	and.w	r3, r3, #4
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d010      	beq.n	800a1ee <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	691a      	ldr	r2, [r3, #16]
 800a1d0:	4b3f      	ldr	r3, [pc, #252]	; (800a2d0 <HAL_RCC_ClockConfig+0x358>)
 800a1d2:	699b      	ldr	r3, [r3, #24]
 800a1d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d208      	bcs.n	800a1ee <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a1dc:	4b3c      	ldr	r3, [pc, #240]	; (800a2d0 <HAL_RCC_ClockConfig+0x358>)
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	691b      	ldr	r3, [r3, #16]
 800a1e8:	4939      	ldr	r1, [pc, #228]	; (800a2d0 <HAL_RCC_ClockConfig+0x358>)
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f003 0308 	and.w	r3, r3, #8
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d010      	beq.n	800a21c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	695a      	ldr	r2, [r3, #20]
 800a1fe:	4b34      	ldr	r3, [pc, #208]	; (800a2d0 <HAL_RCC_ClockConfig+0x358>)
 800a200:	69db      	ldr	r3, [r3, #28]
 800a202:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a206:	429a      	cmp	r2, r3
 800a208:	d208      	bcs.n	800a21c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a20a:	4b31      	ldr	r3, [pc, #196]	; (800a2d0 <HAL_RCC_ClockConfig+0x358>)
 800a20c:	69db      	ldr	r3, [r3, #28]
 800a20e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	695b      	ldr	r3, [r3, #20]
 800a216:	492e      	ldr	r1, [pc, #184]	; (800a2d0 <HAL_RCC_ClockConfig+0x358>)
 800a218:	4313      	orrs	r3, r2
 800a21a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	f003 0310 	and.w	r3, r3, #16
 800a224:	2b00      	cmp	r3, #0
 800a226:	d010      	beq.n	800a24a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	699a      	ldr	r2, [r3, #24]
 800a22c:	4b28      	ldr	r3, [pc, #160]	; (800a2d0 <HAL_RCC_ClockConfig+0x358>)
 800a22e:	69db      	ldr	r3, [r3, #28]
 800a230:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a234:	429a      	cmp	r2, r3
 800a236:	d208      	bcs.n	800a24a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a238:	4b25      	ldr	r3, [pc, #148]	; (800a2d0 <HAL_RCC_ClockConfig+0x358>)
 800a23a:	69db      	ldr	r3, [r3, #28]
 800a23c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	699b      	ldr	r3, [r3, #24]
 800a244:	4922      	ldr	r1, [pc, #136]	; (800a2d0 <HAL_RCC_ClockConfig+0x358>)
 800a246:	4313      	orrs	r3, r2
 800a248:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f003 0320 	and.w	r3, r3, #32
 800a252:	2b00      	cmp	r3, #0
 800a254:	d010      	beq.n	800a278 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	69da      	ldr	r2, [r3, #28]
 800a25a:	4b1d      	ldr	r3, [pc, #116]	; (800a2d0 <HAL_RCC_ClockConfig+0x358>)
 800a25c:	6a1b      	ldr	r3, [r3, #32]
 800a25e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a262:	429a      	cmp	r2, r3
 800a264:	d208      	bcs.n	800a278 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a266:	4b1a      	ldr	r3, [pc, #104]	; (800a2d0 <HAL_RCC_ClockConfig+0x358>)
 800a268:	6a1b      	ldr	r3, [r3, #32]
 800a26a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	69db      	ldr	r3, [r3, #28]
 800a272:	4917      	ldr	r1, [pc, #92]	; (800a2d0 <HAL_RCC_ClockConfig+0x358>)
 800a274:	4313      	orrs	r3, r2
 800a276:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a278:	f000 f89e 	bl	800a3b8 <HAL_RCC_GetSysClockFreq>
 800a27c:	4602      	mov	r2, r0
 800a27e:	4b14      	ldr	r3, [pc, #80]	; (800a2d0 <HAL_RCC_ClockConfig+0x358>)
 800a280:	699b      	ldr	r3, [r3, #24]
 800a282:	0a1b      	lsrs	r3, r3, #8
 800a284:	f003 030f 	and.w	r3, r3, #15
 800a288:	4912      	ldr	r1, [pc, #72]	; (800a2d4 <HAL_RCC_ClockConfig+0x35c>)
 800a28a:	5ccb      	ldrb	r3, [r1, r3]
 800a28c:	f003 031f 	and.w	r3, r3, #31
 800a290:	fa22 f303 	lsr.w	r3, r2, r3
 800a294:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a296:	4b0e      	ldr	r3, [pc, #56]	; (800a2d0 <HAL_RCC_ClockConfig+0x358>)
 800a298:	699b      	ldr	r3, [r3, #24]
 800a29a:	f003 030f 	and.w	r3, r3, #15
 800a29e:	4a0d      	ldr	r2, [pc, #52]	; (800a2d4 <HAL_RCC_ClockConfig+0x35c>)
 800a2a0:	5cd3      	ldrb	r3, [r2, r3]
 800a2a2:	f003 031f 	and.w	r3, r3, #31
 800a2a6:	693a      	ldr	r2, [r7, #16]
 800a2a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a2ac:	4a0a      	ldr	r2, [pc, #40]	; (800a2d8 <HAL_RCC_ClockConfig+0x360>)
 800a2ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a2b0:	4a0a      	ldr	r2, [pc, #40]	; (800a2dc <HAL_RCC_ClockConfig+0x364>)
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a2b6:	4b0a      	ldr	r3, [pc, #40]	; (800a2e0 <HAL_RCC_ClockConfig+0x368>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7f9 fb36 	bl	800392c <HAL_InitTick>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a2c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3718      	adds	r7, #24
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	58024400 	.word	0x58024400
 800a2d4:	08017a80 	.word	0x08017a80
 800a2d8:	24000004 	.word	0x24000004
 800a2dc:	24000000 	.word	0x24000000
 800a2e0:	24000008 	.word	0x24000008

0800a2e4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b08c      	sub	sp, #48	; 0x30
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d12a      	bne.n	800a34c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a2f6:	4b2d      	ldr	r3, [pc, #180]	; (800a3ac <HAL_RCC_MCOConfig+0xc8>)
 800a2f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a2fc:	4a2b      	ldr	r2, [pc, #172]	; (800a3ac <HAL_RCC_MCOConfig+0xc8>)
 800a2fe:	f043 0301 	orr.w	r3, r3, #1
 800a302:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a306:	4b29      	ldr	r3, [pc, #164]	; (800a3ac <HAL_RCC_MCOConfig+0xc8>)
 800a308:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a30c:	f003 0301 	and.w	r3, r3, #1
 800a310:	61bb      	str	r3, [r7, #24]
 800a312:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a314:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a31a:	2302      	movs	r3, #2
 800a31c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a31e:	2303      	movs	r3, #3
 800a320:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a322:	2300      	movs	r3, #0
 800a324:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a326:	2300      	movs	r3, #0
 800a328:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a32a:	f107 031c 	add.w	r3, r7, #28
 800a32e:	4619      	mov	r1, r3
 800a330:	481f      	ldr	r0, [pc, #124]	; (800a3b0 <HAL_RCC_MCOConfig+0xcc>)
 800a332:	f7fd fc43 	bl	8007bbc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a336:	4b1d      	ldr	r3, [pc, #116]	; (800a3ac <HAL_RCC_MCOConfig+0xc8>)
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a33e:	68b9      	ldr	r1, [r7, #8]
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	430b      	orrs	r3, r1
 800a344:	4919      	ldr	r1, [pc, #100]	; (800a3ac <HAL_RCC_MCOConfig+0xc8>)
 800a346:	4313      	orrs	r3, r2
 800a348:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a34a:	e02a      	b.n	800a3a2 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a34c:	4b17      	ldr	r3, [pc, #92]	; (800a3ac <HAL_RCC_MCOConfig+0xc8>)
 800a34e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a352:	4a16      	ldr	r2, [pc, #88]	; (800a3ac <HAL_RCC_MCOConfig+0xc8>)
 800a354:	f043 0304 	orr.w	r3, r3, #4
 800a358:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a35c:	4b13      	ldr	r3, [pc, #76]	; (800a3ac <HAL_RCC_MCOConfig+0xc8>)
 800a35e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a362:	f003 0304 	and.w	r3, r3, #4
 800a366:	617b      	str	r3, [r7, #20]
 800a368:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a36a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a36e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a370:	2302      	movs	r3, #2
 800a372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a374:	2303      	movs	r3, #3
 800a376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a378:	2300      	movs	r3, #0
 800a37a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a37c:	2300      	movs	r3, #0
 800a37e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a380:	f107 031c 	add.w	r3, r7, #28
 800a384:	4619      	mov	r1, r3
 800a386:	480b      	ldr	r0, [pc, #44]	; (800a3b4 <HAL_RCC_MCOConfig+0xd0>)
 800a388:	f7fd fc18 	bl	8007bbc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a38c:	4b07      	ldr	r3, [pc, #28]	; (800a3ac <HAL_RCC_MCOConfig+0xc8>)
 800a38e:	691b      	ldr	r3, [r3, #16]
 800a390:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	01d9      	lsls	r1, r3, #7
 800a398:	68bb      	ldr	r3, [r7, #8]
 800a39a:	430b      	orrs	r3, r1
 800a39c:	4903      	ldr	r1, [pc, #12]	; (800a3ac <HAL_RCC_MCOConfig+0xc8>)
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	610b      	str	r3, [r1, #16]
}
 800a3a2:	bf00      	nop
 800a3a4:	3730      	adds	r7, #48	; 0x30
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	58024400 	.word	0x58024400
 800a3b0:	58020000 	.word	0x58020000
 800a3b4:	58020800 	.word	0x58020800

0800a3b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b089      	sub	sp, #36	; 0x24
 800a3bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a3be:	4bb3      	ldr	r3, [pc, #716]	; (800a68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3c0:	691b      	ldr	r3, [r3, #16]
 800a3c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a3c6:	2b18      	cmp	r3, #24
 800a3c8:	f200 8155 	bhi.w	800a676 <HAL_RCC_GetSysClockFreq+0x2be>
 800a3cc:	a201      	add	r2, pc, #4	; (adr r2, 800a3d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a3ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d2:	bf00      	nop
 800a3d4:	0800a439 	.word	0x0800a439
 800a3d8:	0800a677 	.word	0x0800a677
 800a3dc:	0800a677 	.word	0x0800a677
 800a3e0:	0800a677 	.word	0x0800a677
 800a3e4:	0800a677 	.word	0x0800a677
 800a3e8:	0800a677 	.word	0x0800a677
 800a3ec:	0800a677 	.word	0x0800a677
 800a3f0:	0800a677 	.word	0x0800a677
 800a3f4:	0800a45f 	.word	0x0800a45f
 800a3f8:	0800a677 	.word	0x0800a677
 800a3fc:	0800a677 	.word	0x0800a677
 800a400:	0800a677 	.word	0x0800a677
 800a404:	0800a677 	.word	0x0800a677
 800a408:	0800a677 	.word	0x0800a677
 800a40c:	0800a677 	.word	0x0800a677
 800a410:	0800a677 	.word	0x0800a677
 800a414:	0800a465 	.word	0x0800a465
 800a418:	0800a677 	.word	0x0800a677
 800a41c:	0800a677 	.word	0x0800a677
 800a420:	0800a677 	.word	0x0800a677
 800a424:	0800a677 	.word	0x0800a677
 800a428:	0800a677 	.word	0x0800a677
 800a42c:	0800a677 	.word	0x0800a677
 800a430:	0800a677 	.word	0x0800a677
 800a434:	0800a46b 	.word	0x0800a46b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a438:	4b94      	ldr	r3, [pc, #592]	; (800a68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f003 0320 	and.w	r3, r3, #32
 800a440:	2b00      	cmp	r3, #0
 800a442:	d009      	beq.n	800a458 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a444:	4b91      	ldr	r3, [pc, #580]	; (800a68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	08db      	lsrs	r3, r3, #3
 800a44a:	f003 0303 	and.w	r3, r3, #3
 800a44e:	4a90      	ldr	r2, [pc, #576]	; (800a690 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a450:	fa22 f303 	lsr.w	r3, r2, r3
 800a454:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a456:	e111      	b.n	800a67c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a458:	4b8d      	ldr	r3, [pc, #564]	; (800a690 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a45a:	61bb      	str	r3, [r7, #24]
      break;
 800a45c:	e10e      	b.n	800a67c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a45e:	4b8d      	ldr	r3, [pc, #564]	; (800a694 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a460:	61bb      	str	r3, [r7, #24]
      break;
 800a462:	e10b      	b.n	800a67c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a464:	4b8c      	ldr	r3, [pc, #560]	; (800a698 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a466:	61bb      	str	r3, [r7, #24]
      break;
 800a468:	e108      	b.n	800a67c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a46a:	4b88      	ldr	r3, [pc, #544]	; (800a68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a46e:	f003 0303 	and.w	r3, r3, #3
 800a472:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a474:	4b85      	ldr	r3, [pc, #532]	; (800a68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a478:	091b      	lsrs	r3, r3, #4
 800a47a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a47e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a480:	4b82      	ldr	r3, [pc, #520]	; (800a68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a484:	f003 0301 	and.w	r3, r3, #1
 800a488:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a48a:	4b80      	ldr	r3, [pc, #512]	; (800a68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a48c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a48e:	08db      	lsrs	r3, r3, #3
 800a490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a494:	68fa      	ldr	r2, [r7, #12]
 800a496:	fb02 f303 	mul.w	r3, r2, r3
 800a49a:	ee07 3a90 	vmov	s15, r3
 800a49e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4a2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a4a6:	693b      	ldr	r3, [r7, #16]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f000 80e1 	beq.w	800a670 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	2b02      	cmp	r3, #2
 800a4b2:	f000 8083 	beq.w	800a5bc <HAL_RCC_GetSysClockFreq+0x204>
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	2b02      	cmp	r3, #2
 800a4ba:	f200 80a1 	bhi.w	800a600 <HAL_RCC_GetSysClockFreq+0x248>
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d003      	beq.n	800a4cc <HAL_RCC_GetSysClockFreq+0x114>
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d056      	beq.n	800a578 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a4ca:	e099      	b.n	800a600 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a4cc:	4b6f      	ldr	r3, [pc, #444]	; (800a68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 0320 	and.w	r3, r3, #32
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d02d      	beq.n	800a534 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4d8:	4b6c      	ldr	r3, [pc, #432]	; (800a68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	08db      	lsrs	r3, r3, #3
 800a4de:	f003 0303 	and.w	r3, r3, #3
 800a4e2:	4a6b      	ldr	r2, [pc, #428]	; (800a690 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a4e4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4e8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	ee07 3a90 	vmov	s15, r3
 800a4f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	ee07 3a90 	vmov	s15, r3
 800a4fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a502:	4b62      	ldr	r3, [pc, #392]	; (800a68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a50a:	ee07 3a90 	vmov	s15, r3
 800a50e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a512:	ed97 6a02 	vldr	s12, [r7, #8]
 800a516:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a69c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a51a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a51e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a52a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a52e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a532:	e087      	b.n	800a644 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	ee07 3a90 	vmov	s15, r3
 800a53a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a53e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a6a0 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a546:	4b51      	ldr	r3, [pc, #324]	; (800a68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a54a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a54e:	ee07 3a90 	vmov	s15, r3
 800a552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a556:	ed97 6a02 	vldr	s12, [r7, #8]
 800a55a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a69c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a55e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a56a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a56e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a572:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a576:	e065      	b.n	800a644 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	ee07 3a90 	vmov	s15, r3
 800a57e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a582:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a6a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a58a:	4b40      	ldr	r3, [pc, #256]	; (800a68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a58e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a592:	ee07 3a90 	vmov	s15, r3
 800a596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a59a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a59e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a69c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a5ba:	e043      	b.n	800a644 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	ee07 3a90 	vmov	s15, r3
 800a5c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5c6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a6a8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a5ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5ce:	4b2f      	ldr	r3, [pc, #188]	; (800a68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5d6:	ee07 3a90 	vmov	s15, r3
 800a5da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5de:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5e2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a69c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a5fe:	e021      	b.n	800a644 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	ee07 3a90 	vmov	s15, r3
 800a606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a60a:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a6a4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a60e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a612:	4b1e      	ldr	r3, [pc, #120]	; (800a68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a61a:	ee07 3a90 	vmov	s15, r3
 800a61e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a622:	ed97 6a02 	vldr	s12, [r7, #8]
 800a626:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a69c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a62a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a62e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a63a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a63e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a642:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a644:	4b11      	ldr	r3, [pc, #68]	; (800a68c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a648:	0a5b      	lsrs	r3, r3, #9
 800a64a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a64e:	3301      	adds	r3, #1
 800a650:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	ee07 3a90 	vmov	s15, r3
 800a658:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a65c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a668:	ee17 3a90 	vmov	r3, s15
 800a66c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a66e:	e005      	b.n	800a67c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a670:	2300      	movs	r3, #0
 800a672:	61bb      	str	r3, [r7, #24]
      break;
 800a674:	e002      	b.n	800a67c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a676:	4b07      	ldr	r3, [pc, #28]	; (800a694 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a678:	61bb      	str	r3, [r7, #24]
      break;
 800a67a:	bf00      	nop
  }

  return sysclockfreq;
 800a67c:	69bb      	ldr	r3, [r7, #24]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3724      	adds	r7, #36	; 0x24
 800a682:	46bd      	mov	sp, r7
 800a684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a688:	4770      	bx	lr
 800a68a:	bf00      	nop
 800a68c:	58024400 	.word	0x58024400
 800a690:	03d09000 	.word	0x03d09000
 800a694:	003d0900 	.word	0x003d0900
 800a698:	02faf080 	.word	0x02faf080
 800a69c:	46000000 	.word	0x46000000
 800a6a0:	4c742400 	.word	0x4c742400
 800a6a4:	4a742400 	.word	0x4a742400
 800a6a8:	4c3ebc20 	.word	0x4c3ebc20

0800a6ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a6b2:	f7ff fe81 	bl	800a3b8 <HAL_RCC_GetSysClockFreq>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	4b10      	ldr	r3, [pc, #64]	; (800a6fc <HAL_RCC_GetHCLKFreq+0x50>)
 800a6ba:	699b      	ldr	r3, [r3, #24]
 800a6bc:	0a1b      	lsrs	r3, r3, #8
 800a6be:	f003 030f 	and.w	r3, r3, #15
 800a6c2:	490f      	ldr	r1, [pc, #60]	; (800a700 <HAL_RCC_GetHCLKFreq+0x54>)
 800a6c4:	5ccb      	ldrb	r3, [r1, r3]
 800a6c6:	f003 031f 	and.w	r3, r3, #31
 800a6ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a6d0:	4b0a      	ldr	r3, [pc, #40]	; (800a6fc <HAL_RCC_GetHCLKFreq+0x50>)
 800a6d2:	699b      	ldr	r3, [r3, #24]
 800a6d4:	f003 030f 	and.w	r3, r3, #15
 800a6d8:	4a09      	ldr	r2, [pc, #36]	; (800a700 <HAL_RCC_GetHCLKFreq+0x54>)
 800a6da:	5cd3      	ldrb	r3, [r2, r3]
 800a6dc:	f003 031f 	and.w	r3, r3, #31
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6e6:	4a07      	ldr	r2, [pc, #28]	; (800a704 <HAL_RCC_GetHCLKFreq+0x58>)
 800a6e8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a6ea:	4a07      	ldr	r2, [pc, #28]	; (800a708 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a6f0:	4b04      	ldr	r3, [pc, #16]	; (800a704 <HAL_RCC_GetHCLKFreq+0x58>)
 800a6f2:	681b      	ldr	r3, [r3, #0]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3708      	adds	r7, #8
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	58024400 	.word	0x58024400
 800a700:	08017a80 	.word	0x08017a80
 800a704:	24000004 	.word	0x24000004
 800a708:	24000000 	.word	0x24000000

0800a70c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a710:	f7ff ffcc 	bl	800a6ac <HAL_RCC_GetHCLKFreq>
 800a714:	4602      	mov	r2, r0
 800a716:	4b06      	ldr	r3, [pc, #24]	; (800a730 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a718:	69db      	ldr	r3, [r3, #28]
 800a71a:	091b      	lsrs	r3, r3, #4
 800a71c:	f003 0307 	and.w	r3, r3, #7
 800a720:	4904      	ldr	r1, [pc, #16]	; (800a734 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a722:	5ccb      	ldrb	r3, [r1, r3]
 800a724:	f003 031f 	and.w	r3, r3, #31
 800a728:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	58024400 	.word	0x58024400
 800a734:	08017a80 	.word	0x08017a80

0800a738 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a73c:	f7ff ffb6 	bl	800a6ac <HAL_RCC_GetHCLKFreq>
 800a740:	4602      	mov	r2, r0
 800a742:	4b06      	ldr	r3, [pc, #24]	; (800a75c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a744:	69db      	ldr	r3, [r3, #28]
 800a746:	0a1b      	lsrs	r3, r3, #8
 800a748:	f003 0307 	and.w	r3, r3, #7
 800a74c:	4904      	ldr	r1, [pc, #16]	; (800a760 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a74e:	5ccb      	ldrb	r3, [r1, r3]
 800a750:	f003 031f 	and.w	r3, r3, #31
 800a754:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a758:	4618      	mov	r0, r3
 800a75a:	bd80      	pop	{r7, pc}
 800a75c:	58024400 	.word	0x58024400
 800a760:	08017a80 	.word	0x08017a80

0800a764 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a768:	b0c6      	sub	sp, #280	; 0x118
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a770:	2300      	movs	r3, #0
 800a772:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a776:	2300      	movs	r3, #0
 800a778:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a784:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a788:	2500      	movs	r5, #0
 800a78a:	ea54 0305 	orrs.w	r3, r4, r5
 800a78e:	d049      	beq.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a796:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a79a:	d02f      	beq.n	800a7fc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a79c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7a0:	d828      	bhi.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a7a2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7a6:	d01a      	beq.n	800a7de <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a7a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7ac:	d822      	bhi.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d003      	beq.n	800a7ba <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a7b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7b6:	d007      	beq.n	800a7c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a7b8:	e01c      	b.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7ba:	4bab      	ldr	r3, [pc, #684]	; (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7be:	4aaa      	ldr	r2, [pc, #680]	; (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a7c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a7c6:	e01a      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a7c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7cc:	3308      	adds	r3, #8
 800a7ce:	2102      	movs	r1, #2
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f002 fa49 	bl	800cc68 <RCCEx_PLL2_Config>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a7dc:	e00f      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e2:	3328      	adds	r3, #40	; 0x28
 800a7e4:	2102      	movs	r1, #2
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f002 faf0 	bl	800cdcc <RCCEx_PLL3_Config>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a7f2:	e004      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a7fa:	e000      	b.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800a7fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7fe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a802:	2b00      	cmp	r3, #0
 800a804:	d10a      	bne.n	800a81c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a806:	4b98      	ldr	r3, [pc, #608]	; (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a80a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a814:	4a94      	ldr	r2, [pc, #592]	; (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a816:	430b      	orrs	r3, r1
 800a818:	6513      	str	r3, [r2, #80]	; 0x50
 800a81a:	e003      	b.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a81c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a820:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800a830:	f04f 0900 	mov.w	r9, #0
 800a834:	ea58 0309 	orrs.w	r3, r8, r9
 800a838:	d047      	beq.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800a83a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a83e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a840:	2b04      	cmp	r3, #4
 800a842:	d82a      	bhi.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800a844:	a201      	add	r2, pc, #4	; (adr r2, 800a84c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800a846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a84a:	bf00      	nop
 800a84c:	0800a861 	.word	0x0800a861
 800a850:	0800a86f 	.word	0x0800a86f
 800a854:	0800a885 	.word	0x0800a885
 800a858:	0800a8a3 	.word	0x0800a8a3
 800a85c:	0800a8a3 	.word	0x0800a8a3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a860:	4b81      	ldr	r3, [pc, #516]	; (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a864:	4a80      	ldr	r2, [pc, #512]	; (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a866:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a86a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a86c:	e01a      	b.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a86e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a872:	3308      	adds	r3, #8
 800a874:	2100      	movs	r1, #0
 800a876:	4618      	mov	r0, r3
 800a878:	f002 f9f6 	bl	800cc68 <RCCEx_PLL2_Config>
 800a87c:	4603      	mov	r3, r0
 800a87e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a882:	e00f      	b.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a884:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a888:	3328      	adds	r3, #40	; 0x28
 800a88a:	2100      	movs	r1, #0
 800a88c:	4618      	mov	r0, r3
 800a88e:	f002 fa9d 	bl	800cdcc <RCCEx_PLL3_Config>
 800a892:	4603      	mov	r3, r0
 800a894:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a898:	e004      	b.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a8a0:	e000      	b.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800a8a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d10a      	bne.n	800a8c2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a8ac:	4b6e      	ldr	r3, [pc, #440]	; (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8b0:	f023 0107 	bic.w	r1, r3, #7
 800a8b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8ba:	4a6b      	ldr	r2, [pc, #428]	; (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a8bc:	430b      	orrs	r3, r1
 800a8be:	6513      	str	r3, [r2, #80]	; 0x50
 800a8c0:	e003      	b.n	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a8c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a8ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d2:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800a8d6:	f04f 0b00 	mov.w	fp, #0
 800a8da:	ea5a 030b 	orrs.w	r3, sl, fp
 800a8de:	d05b      	beq.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800a8e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a8e8:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a8ec:	d03b      	beq.n	800a966 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a8ee:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800a8f2:	d834      	bhi.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a8f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8f8:	d037      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a8fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8fe:	d82e      	bhi.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a900:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a904:	d033      	beq.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800a906:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a90a:	d828      	bhi.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a90c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a910:	d01a      	beq.n	800a948 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800a912:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a916:	d822      	bhi.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d003      	beq.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800a91c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a920:	d007      	beq.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800a922:	e01c      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a924:	4b50      	ldr	r3, [pc, #320]	; (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a928:	4a4f      	ldr	r2, [pc, #316]	; (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a92a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a92e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a930:	e01e      	b.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a936:	3308      	adds	r3, #8
 800a938:	2100      	movs	r1, #0
 800a93a:	4618      	mov	r0, r3
 800a93c:	f002 f994 	bl	800cc68 <RCCEx_PLL2_Config>
 800a940:	4603      	mov	r3, r0
 800a942:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800a946:	e013      	b.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a94c:	3328      	adds	r3, #40	; 0x28
 800a94e:	2100      	movs	r1, #0
 800a950:	4618      	mov	r0, r3
 800a952:	f002 fa3b 	bl	800cdcc <RCCEx_PLL3_Config>
 800a956:	4603      	mov	r3, r0
 800a958:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800a95c:	e008      	b.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800a95e:	2301      	movs	r3, #1
 800a960:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800a964:	e004      	b.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a966:	bf00      	nop
 800a968:	e002      	b.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a96a:	bf00      	nop
 800a96c:	e000      	b.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800a96e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a970:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a974:	2b00      	cmp	r3, #0
 800a976:	d10b      	bne.n	800a990 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a978:	4b3b      	ldr	r3, [pc, #236]	; (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a97a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a97c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800a980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a984:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a988:	4a37      	ldr	r2, [pc, #220]	; (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a98a:	430b      	orrs	r3, r1
 800a98c:	6593      	str	r3, [r2, #88]	; 0x58
 800a98e:	e003      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a990:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800a994:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a0:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800a9a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a9ae:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	d05d      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800a9b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a9c0:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a9c4:	d03b      	beq.n	800aa3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a9c6:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800a9ca:	d834      	bhi.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a9cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9d0:	d037      	beq.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800a9d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9d6:	d82e      	bhi.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a9d8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a9dc:	d033      	beq.n	800aa46 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800a9de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a9e2:	d828      	bhi.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a9e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9e8:	d01a      	beq.n	800aa20 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800a9ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9ee:	d822      	bhi.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d003      	beq.n	800a9fc <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a9f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a9f8:	d007      	beq.n	800aa0a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a9fa:	e01c      	b.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9fc:	4b1a      	ldr	r3, [pc, #104]	; (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800a9fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa00:	4a19      	ldr	r2, [pc, #100]	; (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa08:	e01e      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa0e:	3308      	adds	r3, #8
 800aa10:	2100      	movs	r1, #0
 800aa12:	4618      	mov	r0, r3
 800aa14:	f002 f928 	bl	800cc68 <RCCEx_PLL2_Config>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800aa1e:	e013      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aa20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa24:	3328      	adds	r3, #40	; 0x28
 800aa26:	2100      	movs	r1, #0
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f002 f9cf 	bl	800cdcc <RCCEx_PLL3_Config>
 800aa2e:	4603      	mov	r3, r0
 800aa30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa34:	e008      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800aa36:	2301      	movs	r3, #1
 800aa38:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aa3c:	e004      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aa3e:	bf00      	nop
 800aa40:	e002      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aa42:	bf00      	nop
 800aa44:	e000      	b.n	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800aa46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa48:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d10d      	bne.n	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800aa50:	4b05      	ldr	r3, [pc, #20]	; (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa54:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800aa58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa5c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aa60:	4a01      	ldr	r2, [pc, #4]	; (800aa68 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800aa62:	430b      	orrs	r3, r1
 800aa64:	6593      	str	r3, [r2, #88]	; 0x58
 800aa66:	e005      	b.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800aa68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa6c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aa70:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800aa74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa7c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800aa80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aa84:	2300      	movs	r3, #0
 800aa86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aa8a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800aa8e:	460b      	mov	r3, r1
 800aa90:	4313      	orrs	r3, r2
 800aa92:	d03a      	beq.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800aa94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa9a:	2b30      	cmp	r3, #48	; 0x30
 800aa9c:	d01f      	beq.n	800aade <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800aa9e:	2b30      	cmp	r3, #48	; 0x30
 800aaa0:	d819      	bhi.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800aaa2:	2b20      	cmp	r3, #32
 800aaa4:	d00c      	beq.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800aaa6:	2b20      	cmp	r3, #32
 800aaa8:	d815      	bhi.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d019      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800aaae:	2b10      	cmp	r3, #16
 800aab0:	d111      	bne.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aab2:	4baa      	ldr	r3, [pc, #680]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aab6:	4aa9      	ldr	r2, [pc, #676]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aabc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800aabe:	e011      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aac4:	3308      	adds	r3, #8
 800aac6:	2102      	movs	r1, #2
 800aac8:	4618      	mov	r0, r3
 800aaca:	f002 f8cd 	bl	800cc68 <RCCEx_PLL2_Config>
 800aace:	4603      	mov	r3, r0
 800aad0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800aad4:	e006      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aadc:	e002      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800aade:	bf00      	nop
 800aae0:	e000      	b.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800aae2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aae4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d10a      	bne.n	800ab02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800aaec:	4b9b      	ldr	r3, [pc, #620]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aaee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaf0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800aaf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aafa:	4a98      	ldr	r2, [pc, #608]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aafc:	430b      	orrs	r3, r1
 800aafe:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ab00:	e003      	b.n	800ab0a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab02:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab06:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ab0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab12:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ab16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ab20:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800ab24:	460b      	mov	r3, r1
 800ab26:	4313      	orrs	r3, r2
 800ab28:	d051      	beq.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ab2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab34:	d035      	beq.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800ab36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab3a:	d82e      	bhi.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ab3c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab40:	d031      	beq.n	800aba6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800ab42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab46:	d828      	bhi.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ab48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab4c:	d01a      	beq.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800ab4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab52:	d822      	bhi.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d003      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800ab58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab5c:	d007      	beq.n	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800ab5e:	e01c      	b.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab60:	4b7e      	ldr	r3, [pc, #504]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab64:	4a7d      	ldr	r2, [pc, #500]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ab66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab6c:	e01c      	b.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab72:	3308      	adds	r3, #8
 800ab74:	2100      	movs	r1, #0
 800ab76:	4618      	mov	r0, r3
 800ab78:	f002 f876 	bl	800cc68 <RCCEx_PLL2_Config>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab82:	e011      	b.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab88:	3328      	adds	r3, #40	; 0x28
 800ab8a:	2100      	movs	r1, #0
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f002 f91d 	bl	800cdcc <RCCEx_PLL3_Config>
 800ab92:	4603      	mov	r3, r0
 800ab94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ab98:	e006      	b.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab9a:	2301      	movs	r3, #1
 800ab9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aba0:	e002      	b.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800aba2:	bf00      	nop
 800aba4:	e000      	b.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800aba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aba8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abac:	2b00      	cmp	r3, #0
 800abae:	d10a      	bne.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800abb0:	4b6a      	ldr	r3, [pc, #424]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abb4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800abb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abbe:	4a67      	ldr	r2, [pc, #412]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800abc0:	430b      	orrs	r3, r1
 800abc2:	6513      	str	r3, [r2, #80]	; 0x50
 800abc4:	e003      	b.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abc6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800abca:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800abce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800abda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800abde:	2300      	movs	r3, #0
 800abe0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800abe4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800abe8:	460b      	mov	r3, r1
 800abea:	4313      	orrs	r3, r2
 800abec:	d053      	beq.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800abee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abf4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800abf8:	d033      	beq.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800abfa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800abfe:	d82c      	bhi.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ac00:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac04:	d02f      	beq.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0x502>
 800ac06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ac0a:	d826      	bhi.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ac0c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac10:	d02b      	beq.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ac12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ac16:	d820      	bhi.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ac18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac1c:	d012      	beq.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800ac1e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ac22:	d81a      	bhi.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d022      	beq.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800ac28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac2c:	d115      	bne.n	800ac5a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac32:	3308      	adds	r3, #8
 800ac34:	2101      	movs	r1, #1
 800ac36:	4618      	mov	r0, r3
 800ac38:	f002 f816 	bl	800cc68 <RCCEx_PLL2_Config>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ac42:	e015      	b.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac48:	3328      	adds	r3, #40	; 0x28
 800ac4a:	2101      	movs	r1, #1
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	f002 f8bd 	bl	800cdcc <RCCEx_PLL3_Config>
 800ac52:	4603      	mov	r3, r0
 800ac54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800ac58:	e00a      	b.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac60:	e006      	b.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ac62:	bf00      	nop
 800ac64:	e004      	b.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ac66:	bf00      	nop
 800ac68:	e002      	b.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ac6a:	bf00      	nop
 800ac6c:	e000      	b.n	800ac70 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800ac6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10a      	bne.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800ac78:	4b38      	ldr	r3, [pc, #224]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac7c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800ac80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac86:	4a35      	ldr	r2, [pc, #212]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ac88:	430b      	orrs	r3, r1
 800ac8a:	6513      	str	r3, [r2, #80]	; 0x50
 800ac8c:	e003      	b.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac92:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800ac96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800aca2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aca6:	2300      	movs	r3, #0
 800aca8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800acac:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800acb0:	460b      	mov	r3, r1
 800acb2:	4313      	orrs	r3, r2
 800acb4:	d058      	beq.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800acb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800acbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acc2:	d033      	beq.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800acc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800acc8:	d82c      	bhi.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800acca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acce:	d02f      	beq.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800acd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acd4:	d826      	bhi.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800acd6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800acda:	d02b      	beq.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800acdc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ace0:	d820      	bhi.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800ace2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ace6:	d012      	beq.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800ace8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acec:	d81a      	bhi.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d022      	beq.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800acf2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800acf6:	d115      	bne.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800acf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acfc:	3308      	adds	r3, #8
 800acfe:	2101      	movs	r1, #1
 800ad00:	4618      	mov	r0, r3
 800ad02:	f001 ffb1 	bl	800cc68 <RCCEx_PLL2_Config>
 800ad06:	4603      	mov	r3, r0
 800ad08:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ad0c:	e015      	b.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ad0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad12:	3328      	adds	r3, #40	; 0x28
 800ad14:	2101      	movs	r1, #1
 800ad16:	4618      	mov	r0, r3
 800ad18:	f002 f858 	bl	800cdcc <RCCEx_PLL3_Config>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800ad22:	e00a      	b.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800ad24:	2301      	movs	r3, #1
 800ad26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ad2a:	e006      	b.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad2c:	bf00      	nop
 800ad2e:	e004      	b.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad30:	bf00      	nop
 800ad32:	e002      	b.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad34:	bf00      	nop
 800ad36:	e000      	b.n	800ad3a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800ad38:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d10e      	bne.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ad42:	4b06      	ldr	r3, [pc, #24]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad46:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800ad4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad52:	4a02      	ldr	r2, [pc, #8]	; (800ad5c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ad54:	430b      	orrs	r3, r1
 800ad56:	6593      	str	r3, [r2, #88]	; 0x58
 800ad58:	e006      	b.n	800ad68 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800ad5a:	bf00      	nop
 800ad5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ad68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad70:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800ad74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ad78:	2300      	movs	r3, #0
 800ad7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800ad7e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800ad82:	460b      	mov	r3, r1
 800ad84:	4313      	orrs	r3, r2
 800ad86:	d037      	beq.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800ad88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad92:	d00e      	beq.n	800adb2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800ad94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad98:	d816      	bhi.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d018      	beq.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800ad9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ada2:	d111      	bne.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ada4:	4bc4      	ldr	r3, [pc, #784]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ada6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ada8:	4ac3      	ldr	r2, [pc, #780]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800adb0:	e00f      	b.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800adb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adb6:	3308      	adds	r3, #8
 800adb8:	2101      	movs	r1, #1
 800adba:	4618      	mov	r0, r3
 800adbc:	f001 ff54 	bl	800cc68 <RCCEx_PLL2_Config>
 800adc0:	4603      	mov	r3, r0
 800adc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800adc6:	e004      	b.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800adc8:	2301      	movs	r3, #1
 800adca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800adce:	e000      	b.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800add0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800add2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800add6:	2b00      	cmp	r3, #0
 800add8:	d10a      	bne.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800adda:	4bb7      	ldr	r3, [pc, #732]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800addc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adde:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800ade2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ade8:	4ab3      	ldr	r2, [pc, #716]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800adea:	430b      	orrs	r3, r1
 800adec:	6513      	str	r3, [r2, #80]	; 0x50
 800adee:	e003      	b.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adf0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adf4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800adf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae00:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800ae04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ae08:	2300      	movs	r3, #0
 800ae0a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ae0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800ae12:	460b      	mov	r3, r1
 800ae14:	4313      	orrs	r3, r2
 800ae16:	d039      	beq.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800ae18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae1e:	2b03      	cmp	r3, #3
 800ae20:	d81c      	bhi.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800ae22:	a201      	add	r2, pc, #4	; (adr r2, 800ae28 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800ae24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae28:	0800ae65 	.word	0x0800ae65
 800ae2c:	0800ae39 	.word	0x0800ae39
 800ae30:	0800ae47 	.word	0x0800ae47
 800ae34:	0800ae65 	.word	0x0800ae65
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae38:	4b9f      	ldr	r3, [pc, #636]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3c:	4a9e      	ldr	r2, [pc, #632]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ae44:	e00f      	b.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae4a:	3308      	adds	r3, #8
 800ae4c:	2102      	movs	r1, #2
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f001 ff0a 	bl	800cc68 <RCCEx_PLL2_Config>
 800ae54:	4603      	mov	r3, r0
 800ae56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800ae5a:	e004      	b.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae62:	e000      	b.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800ae64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d10a      	bne.n	800ae84 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ae6e:	4b92      	ldr	r3, [pc, #584]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae72:	f023 0103 	bic.w	r1, r3, #3
 800ae76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae7c:	4a8e      	ldr	r2, [pc, #568]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800ae7e:	430b      	orrs	r3, r1
 800ae80:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae82:	e003      	b.n	800ae8c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae94:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800ae98:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800aea2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800aea6:	460b      	mov	r3, r1
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	f000 8099 	beq.w	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aeae:	4b83      	ldr	r3, [pc, #524]	; (800b0bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	4a82      	ldr	r2, [pc, #520]	; (800b0bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800aeb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aeb8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aeba:	f7f8 fd81 	bl	80039c0 <HAL_GetTick>
 800aebe:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aec2:	e00b      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aec4:	f7f8 fd7c 	bl	80039c0 <HAL_GetTick>
 800aec8:	4602      	mov	r2, r0
 800aeca:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800aece:	1ad3      	subs	r3, r2, r3
 800aed0:	2b64      	cmp	r3, #100	; 0x64
 800aed2:	d903      	bls.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800aed4:	2303      	movs	r3, #3
 800aed6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800aeda:	e005      	b.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aedc:	4b77      	ldr	r3, [pc, #476]	; (800b0bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d0ed      	beq.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800aee8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d173      	bne.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800aef0:	4b71      	ldr	r3, [pc, #452]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800aef2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800aefc:	4053      	eors	r3, r2
 800aefe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af02:	2b00      	cmp	r3, #0
 800af04:	d015      	beq.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800af06:	4b6c      	ldr	r3, [pc, #432]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800af12:	4b69      	ldr	r3, [pc, #420]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af16:	4a68      	ldr	r2, [pc, #416]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af1c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800af1e:	4b66      	ldr	r3, [pc, #408]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af22:	4a65      	ldr	r2, [pc, #404]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af28:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800af2a:	4a63      	ldr	r2, [pc, #396]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800af30:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800af32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af3e:	d118      	bne.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af40:	f7f8 fd3e 	bl	80039c0 <HAL_GetTick>
 800af44:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af48:	e00d      	b.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af4a:	f7f8 fd39 	bl	80039c0 <HAL_GetTick>
 800af4e:	4602      	mov	r2, r0
 800af50:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800af54:	1ad2      	subs	r2, r2, r3
 800af56:	f241 3388 	movw	r3, #5000	; 0x1388
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d903      	bls.n	800af66 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800af5e:	2303      	movs	r3, #3
 800af60:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800af64:	e005      	b.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af66:	4b54      	ldr	r3, [pc, #336]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af6a:	f003 0302 	and.w	r3, r3, #2
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d0eb      	beq.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800af72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af76:	2b00      	cmp	r3, #0
 800af78:	d129      	bne.n	800afce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af7e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af8a:	d10e      	bne.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0x846>
 800af8c:	4b4a      	ldr	r3, [pc, #296]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800af8e:	691b      	ldr	r3, [r3, #16]
 800af90:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800af94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af9c:	091a      	lsrs	r2, r3, #4
 800af9e:	4b48      	ldr	r3, [pc, #288]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800afa0:	4013      	ands	r3, r2
 800afa2:	4a45      	ldr	r2, [pc, #276]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afa4:	430b      	orrs	r3, r1
 800afa6:	6113      	str	r3, [r2, #16]
 800afa8:	e005      	b.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800afaa:	4b43      	ldr	r3, [pc, #268]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afac:	691b      	ldr	r3, [r3, #16]
 800afae:	4a42      	ldr	r2, [pc, #264]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afb0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800afb4:	6113      	str	r3, [r2, #16]
 800afb6:	4b40      	ldr	r3, [pc, #256]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afb8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800afba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afbe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800afc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800afc6:	4a3c      	ldr	r2, [pc, #240]	; (800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800afc8:	430b      	orrs	r3, r1
 800afca:	6713      	str	r3, [r2, #112]	; 0x70
 800afcc:	e008      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800afce:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afd2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800afd6:	e003      	b.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afd8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800afdc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800afe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe8:	f002 0301 	and.w	r3, r2, #1
 800afec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aff0:	2300      	movs	r3, #0
 800aff2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800aff6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800affa:	460b      	mov	r3, r1
 800affc:	4313      	orrs	r3, r2
 800affe:	f000 808f 	beq.w	800b120 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b002:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b008:	2b28      	cmp	r3, #40	; 0x28
 800b00a:	d871      	bhi.n	800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b00c:	a201      	add	r2, pc, #4	; (adr r2, 800b014 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b012:	bf00      	nop
 800b014:	0800b0f9 	.word	0x0800b0f9
 800b018:	0800b0f1 	.word	0x0800b0f1
 800b01c:	0800b0f1 	.word	0x0800b0f1
 800b020:	0800b0f1 	.word	0x0800b0f1
 800b024:	0800b0f1 	.word	0x0800b0f1
 800b028:	0800b0f1 	.word	0x0800b0f1
 800b02c:	0800b0f1 	.word	0x0800b0f1
 800b030:	0800b0f1 	.word	0x0800b0f1
 800b034:	0800b0c5 	.word	0x0800b0c5
 800b038:	0800b0f1 	.word	0x0800b0f1
 800b03c:	0800b0f1 	.word	0x0800b0f1
 800b040:	0800b0f1 	.word	0x0800b0f1
 800b044:	0800b0f1 	.word	0x0800b0f1
 800b048:	0800b0f1 	.word	0x0800b0f1
 800b04c:	0800b0f1 	.word	0x0800b0f1
 800b050:	0800b0f1 	.word	0x0800b0f1
 800b054:	0800b0db 	.word	0x0800b0db
 800b058:	0800b0f1 	.word	0x0800b0f1
 800b05c:	0800b0f1 	.word	0x0800b0f1
 800b060:	0800b0f1 	.word	0x0800b0f1
 800b064:	0800b0f1 	.word	0x0800b0f1
 800b068:	0800b0f1 	.word	0x0800b0f1
 800b06c:	0800b0f1 	.word	0x0800b0f1
 800b070:	0800b0f1 	.word	0x0800b0f1
 800b074:	0800b0f9 	.word	0x0800b0f9
 800b078:	0800b0f1 	.word	0x0800b0f1
 800b07c:	0800b0f1 	.word	0x0800b0f1
 800b080:	0800b0f1 	.word	0x0800b0f1
 800b084:	0800b0f1 	.word	0x0800b0f1
 800b088:	0800b0f1 	.word	0x0800b0f1
 800b08c:	0800b0f1 	.word	0x0800b0f1
 800b090:	0800b0f1 	.word	0x0800b0f1
 800b094:	0800b0f9 	.word	0x0800b0f9
 800b098:	0800b0f1 	.word	0x0800b0f1
 800b09c:	0800b0f1 	.word	0x0800b0f1
 800b0a0:	0800b0f1 	.word	0x0800b0f1
 800b0a4:	0800b0f1 	.word	0x0800b0f1
 800b0a8:	0800b0f1 	.word	0x0800b0f1
 800b0ac:	0800b0f1 	.word	0x0800b0f1
 800b0b0:	0800b0f1 	.word	0x0800b0f1
 800b0b4:	0800b0f9 	.word	0x0800b0f9
 800b0b8:	58024400 	.word	0x58024400
 800b0bc:	58024800 	.word	0x58024800
 800b0c0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b0c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0c8:	3308      	adds	r3, #8
 800b0ca:	2101      	movs	r1, #1
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f001 fdcb 	bl	800cc68 <RCCEx_PLL2_Config>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b0d8:	e00f      	b.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b0da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0de:	3328      	adds	r3, #40	; 0x28
 800b0e0:	2101      	movs	r1, #1
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f001 fe72 	bl	800cdcc <RCCEx_PLL3_Config>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b0ee:	e004      	b.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b0f6:	e000      	b.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b0f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d10a      	bne.n	800b118 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b102:	4bbf      	ldr	r3, [pc, #764]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b106:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b10e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b110:	4abb      	ldr	r2, [pc, #748]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b112:	430b      	orrs	r3, r1
 800b114:	6553      	str	r3, [r2, #84]	; 0x54
 800b116:	e003      	b.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b118:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b11c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b128:	f002 0302 	and.w	r3, r2, #2
 800b12c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b130:	2300      	movs	r3, #0
 800b132:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b136:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b13a:	460b      	mov	r3, r1
 800b13c:	4313      	orrs	r3, r2
 800b13e:	d041      	beq.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b140:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b146:	2b05      	cmp	r3, #5
 800b148:	d824      	bhi.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b14a:	a201      	add	r2, pc, #4	; (adr r2, 800b150 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b150:	0800b19d 	.word	0x0800b19d
 800b154:	0800b169 	.word	0x0800b169
 800b158:	0800b17f 	.word	0x0800b17f
 800b15c:	0800b19d 	.word	0x0800b19d
 800b160:	0800b19d 	.word	0x0800b19d
 800b164:	0800b19d 	.word	0x0800b19d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b168:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b16c:	3308      	adds	r3, #8
 800b16e:	2101      	movs	r1, #1
 800b170:	4618      	mov	r0, r3
 800b172:	f001 fd79 	bl	800cc68 <RCCEx_PLL2_Config>
 800b176:	4603      	mov	r3, r0
 800b178:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b17c:	e00f      	b.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b17e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b182:	3328      	adds	r3, #40	; 0x28
 800b184:	2101      	movs	r1, #1
 800b186:	4618      	mov	r0, r3
 800b188:	f001 fe20 	bl	800cdcc <RCCEx_PLL3_Config>
 800b18c:	4603      	mov	r3, r0
 800b18e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b192:	e004      	b.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b194:	2301      	movs	r3, #1
 800b196:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b19a:	e000      	b.n	800b19e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b19c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b19e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d10a      	bne.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b1a6:	4b96      	ldr	r3, [pc, #600]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1aa:	f023 0107 	bic.w	r1, r3, #7
 800b1ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b1b4:	4a92      	ldr	r2, [pc, #584]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b1b6:	430b      	orrs	r3, r1
 800b1b8:	6553      	str	r3, [r2, #84]	; 0x54
 800b1ba:	e003      	b.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b1c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1cc:	f002 0304 	and.w	r3, r2, #4
 800b1d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b1da:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b1de:	460b      	mov	r3, r1
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	d044      	beq.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b1e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b1ec:	2b05      	cmp	r3, #5
 800b1ee:	d825      	bhi.n	800b23c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b1f0:	a201      	add	r2, pc, #4	; (adr r2, 800b1f8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b1f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1f6:	bf00      	nop
 800b1f8:	0800b245 	.word	0x0800b245
 800b1fc:	0800b211 	.word	0x0800b211
 800b200:	0800b227 	.word	0x0800b227
 800b204:	0800b245 	.word	0x0800b245
 800b208:	0800b245 	.word	0x0800b245
 800b20c:	0800b245 	.word	0x0800b245
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b214:	3308      	adds	r3, #8
 800b216:	2101      	movs	r1, #1
 800b218:	4618      	mov	r0, r3
 800b21a:	f001 fd25 	bl	800cc68 <RCCEx_PLL2_Config>
 800b21e:	4603      	mov	r3, r0
 800b220:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b224:	e00f      	b.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b226:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b22a:	3328      	adds	r3, #40	; 0x28
 800b22c:	2101      	movs	r1, #1
 800b22e:	4618      	mov	r0, r3
 800b230:	f001 fdcc 	bl	800cdcc <RCCEx_PLL3_Config>
 800b234:	4603      	mov	r3, r0
 800b236:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b23a:	e004      	b.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b242:	e000      	b.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b244:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b246:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d10b      	bne.n	800b266 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b24e:	4b6c      	ldr	r3, [pc, #432]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b252:	f023 0107 	bic.w	r1, r3, #7
 800b256:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b25a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b25e:	4a68      	ldr	r2, [pc, #416]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b260:	430b      	orrs	r3, r1
 800b262:	6593      	str	r3, [r2, #88]	; 0x58
 800b264:	e003      	b.n	800b26e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b266:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b26a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b26e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b272:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b276:	f002 0320 	and.w	r3, r2, #32
 800b27a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b27e:	2300      	movs	r3, #0
 800b280:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b284:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b288:	460b      	mov	r3, r1
 800b28a:	4313      	orrs	r3, r2
 800b28c:	d055      	beq.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b28e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b29a:	d033      	beq.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b29c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2a0:	d82c      	bhi.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b2a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2a6:	d02f      	beq.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b2a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2ac:	d826      	bhi.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b2ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2b2:	d02b      	beq.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b2b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b2b8:	d820      	bhi.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b2ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2be:	d012      	beq.n	800b2e6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b2c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2c4:	d81a      	bhi.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d022      	beq.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b2ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2ce:	d115      	bne.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d4:	3308      	adds	r3, #8
 800b2d6:	2100      	movs	r1, #0
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f001 fcc5 	bl	800cc68 <RCCEx_PLL2_Config>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b2e4:	e015      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b2e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ea:	3328      	adds	r3, #40	; 0x28
 800b2ec:	2102      	movs	r1, #2
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f001 fd6c 	bl	800cdcc <RCCEx_PLL3_Config>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b2fa:	e00a      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b302:	e006      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b304:	bf00      	nop
 800b306:	e004      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b308:	bf00      	nop
 800b30a:	e002      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b30c:	bf00      	nop
 800b30e:	e000      	b.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b310:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b312:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b316:	2b00      	cmp	r3, #0
 800b318:	d10b      	bne.n	800b332 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b31a:	4b39      	ldr	r3, [pc, #228]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b31c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b31e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b322:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b326:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b32a:	4a35      	ldr	r2, [pc, #212]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b32c:	430b      	orrs	r3, r1
 800b32e:	6553      	str	r3, [r2, #84]	; 0x54
 800b330:	e003      	b.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b332:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b336:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b342:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b346:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b34a:	2300      	movs	r3, #0
 800b34c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b350:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b354:	460b      	mov	r3, r1
 800b356:	4313      	orrs	r3, r2
 800b358:	d058      	beq.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b35a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b35e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b362:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b366:	d033      	beq.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b368:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b36c:	d82c      	bhi.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b36e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b372:	d02f      	beq.n	800b3d4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b378:	d826      	bhi.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b37a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b37e:	d02b      	beq.n	800b3d8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b380:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b384:	d820      	bhi.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b38a:	d012      	beq.n	800b3b2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b38c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b390:	d81a      	bhi.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b392:	2b00      	cmp	r3, #0
 800b394:	d022      	beq.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b39a:	d115      	bne.n	800b3c8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b39c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3a0:	3308      	adds	r3, #8
 800b3a2:	2100      	movs	r1, #0
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	f001 fc5f 	bl	800cc68 <RCCEx_PLL2_Config>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b3b0:	e015      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3b6:	3328      	adds	r3, #40	; 0x28
 800b3b8:	2102      	movs	r1, #2
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f001 fd06 	bl	800cdcc <RCCEx_PLL3_Config>
 800b3c0:	4603      	mov	r3, r0
 800b3c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b3c6:	e00a      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b3ce:	e006      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b3d0:	bf00      	nop
 800b3d2:	e004      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b3d4:	bf00      	nop
 800b3d6:	e002      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b3d8:	bf00      	nop
 800b3da:	e000      	b.n	800b3de <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b3dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d10e      	bne.n	800b404 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b3e6:	4b06      	ldr	r3, [pc, #24]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b3e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3ea:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b3ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3f6:	4a02      	ldr	r2, [pc, #8]	; (800b400 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b3f8:	430b      	orrs	r3, r1
 800b3fa:	6593      	str	r3, [r2, #88]	; 0x58
 800b3fc:	e006      	b.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b3fe:	bf00      	nop
 800b400:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b404:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b408:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b40c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b410:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b414:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b418:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b41c:	2300      	movs	r3, #0
 800b41e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b422:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b426:	460b      	mov	r3, r1
 800b428:	4313      	orrs	r3, r2
 800b42a:	d055      	beq.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b42c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b430:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b434:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b438:	d033      	beq.n	800b4a2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b43a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b43e:	d82c      	bhi.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b440:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b444:	d02f      	beq.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b446:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b44a:	d826      	bhi.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b44c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b450:	d02b      	beq.n	800b4aa <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b452:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b456:	d820      	bhi.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b45c:	d012      	beq.n	800b484 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b45e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b462:	d81a      	bhi.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b464:	2b00      	cmp	r3, #0
 800b466:	d022      	beq.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b468:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b46c:	d115      	bne.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b472:	3308      	adds	r3, #8
 800b474:	2100      	movs	r1, #0
 800b476:	4618      	mov	r0, r3
 800b478:	f001 fbf6 	bl	800cc68 <RCCEx_PLL2_Config>
 800b47c:	4603      	mov	r3, r0
 800b47e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b482:	e015      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b484:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b488:	3328      	adds	r3, #40	; 0x28
 800b48a:	2102      	movs	r1, #2
 800b48c:	4618      	mov	r0, r3
 800b48e:	f001 fc9d 	bl	800cdcc <RCCEx_PLL3_Config>
 800b492:	4603      	mov	r3, r0
 800b494:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b498:	e00a      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b4a0:	e006      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b4a2:	bf00      	nop
 800b4a4:	e004      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b4a6:	bf00      	nop
 800b4a8:	e002      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b4aa:	bf00      	nop
 800b4ac:	e000      	b.n	800b4b0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b4ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4b0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d10b      	bne.n	800b4d0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b4b8:	4ba0      	ldr	r3, [pc, #640]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b4bc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b4c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b4c8:	4a9c      	ldr	r2, [pc, #624]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b4ca:	430b      	orrs	r3, r1
 800b4cc:	6593      	str	r3, [r2, #88]	; 0x58
 800b4ce:	e003      	b.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4d4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b4d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e0:	f002 0308 	and.w	r3, r2, #8
 800b4e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b4ee:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	d01e      	beq.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b4f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b500:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b504:	d10c      	bne.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b50a:	3328      	adds	r3, #40	; 0x28
 800b50c:	2102      	movs	r1, #2
 800b50e:	4618      	mov	r0, r3
 800b510:	f001 fc5c 	bl	800cdcc <RCCEx_PLL3_Config>
 800b514:	4603      	mov	r3, r0
 800b516:	2b00      	cmp	r3, #0
 800b518:	d002      	beq.n	800b520 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b51a:	2301      	movs	r3, #1
 800b51c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b520:	4b86      	ldr	r3, [pc, #536]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b524:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b52c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b530:	4a82      	ldr	r2, [pc, #520]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b532:	430b      	orrs	r3, r1
 800b534:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b536:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b53a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b53e:	f002 0310 	and.w	r3, r2, #16
 800b542:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b546:	2300      	movs	r3, #0
 800b548:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b54c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b550:	460b      	mov	r3, r1
 800b552:	4313      	orrs	r3, r2
 800b554:	d01e      	beq.n	800b594 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b556:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b55a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b55e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b562:	d10c      	bne.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b568:	3328      	adds	r3, #40	; 0x28
 800b56a:	2102      	movs	r1, #2
 800b56c:	4618      	mov	r0, r3
 800b56e:	f001 fc2d 	bl	800cdcc <RCCEx_PLL3_Config>
 800b572:	4603      	mov	r3, r0
 800b574:	2b00      	cmp	r3, #0
 800b576:	d002      	beq.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b578:	2301      	movs	r3, #1
 800b57a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b57e:	4b6f      	ldr	r3, [pc, #444]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b582:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b586:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b58a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b58e:	4a6b      	ldr	r2, [pc, #428]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b590:	430b      	orrs	r3, r1
 800b592:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b59c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b5a0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b5a6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	d03e      	beq.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b5b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5bc:	d022      	beq.n	800b604 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b5be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b5c2:	d81b      	bhi.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d003      	beq.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b5c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b5cc:	d00b      	beq.n	800b5e6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b5ce:	e015      	b.n	800b5fc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5d4:	3308      	adds	r3, #8
 800b5d6:	2100      	movs	r1, #0
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f001 fb45 	bl	800cc68 <RCCEx_PLL2_Config>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b5e4:	e00f      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ea:	3328      	adds	r3, #40	; 0x28
 800b5ec:	2102      	movs	r1, #2
 800b5ee:	4618      	mov	r0, r3
 800b5f0:	f001 fbec 	bl	800cdcc <RCCEx_PLL3_Config>
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b5fa:	e004      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b602:	e000      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b604:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b606:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d10b      	bne.n	800b626 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b60e:	4b4b      	ldr	r3, [pc, #300]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b612:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b61a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b61e:	4a47      	ldr	r2, [pc, #284]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b620:	430b      	orrs	r3, r1
 800b622:	6593      	str	r3, [r2, #88]	; 0x58
 800b624:	e003      	b.n	800b62e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b626:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b62a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b62e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b636:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b63a:	673b      	str	r3, [r7, #112]	; 0x70
 800b63c:	2300      	movs	r3, #0
 800b63e:	677b      	str	r3, [r7, #116]	; 0x74
 800b640:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b644:	460b      	mov	r3, r1
 800b646:	4313      	orrs	r3, r2
 800b648:	d03b      	beq.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b64a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b64e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b652:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b656:	d01f      	beq.n	800b698 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b658:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b65c:	d818      	bhi.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b65e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b662:	d003      	beq.n	800b66c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b664:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b668:	d007      	beq.n	800b67a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b66a:	e011      	b.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b66c:	4b33      	ldr	r3, [pc, #204]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b66e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b670:	4a32      	ldr	r2, [pc, #200]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b672:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b676:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b678:	e00f      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b67a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b67e:	3328      	adds	r3, #40	; 0x28
 800b680:	2101      	movs	r1, #1
 800b682:	4618      	mov	r0, r3
 800b684:	f001 fba2 	bl	800cdcc <RCCEx_PLL3_Config>
 800b688:	4603      	mov	r3, r0
 800b68a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800b68e:	e004      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b690:	2301      	movs	r3, #1
 800b692:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b696:	e000      	b.n	800b69a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800b698:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b69a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d10b      	bne.n	800b6ba <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b6a2:	4b26      	ldr	r3, [pc, #152]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6a6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b6aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b6b2:	4a22      	ldr	r2, [pc, #136]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6b4:	430b      	orrs	r3, r1
 800b6b6:	6553      	str	r3, [r2, #84]	; 0x54
 800b6b8:	e003      	b.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6be:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b6c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ca:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b6ce:	66bb      	str	r3, [r7, #104]	; 0x68
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b6d4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800b6d8:	460b      	mov	r3, r1
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	d034      	beq.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d003      	beq.n	800b6f0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800b6e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b6ec:	d007      	beq.n	800b6fe <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800b6ee:	e011      	b.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b6f0:	4b12      	ldr	r3, [pc, #72]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6f4:	4a11      	ldr	r2, [pc, #68]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b6f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b6fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b6fc:	e00e      	b.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b702:	3308      	adds	r3, #8
 800b704:	2102      	movs	r1, #2
 800b706:	4618      	mov	r0, r3
 800b708:	f001 faae 	bl	800cc68 <RCCEx_PLL2_Config>
 800b70c:	4603      	mov	r3, r0
 800b70e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b712:	e003      	b.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800b714:	2301      	movs	r3, #1
 800b716:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b71a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b71c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b720:	2b00      	cmp	r3, #0
 800b722:	d10d      	bne.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b724:	4b05      	ldr	r3, [pc, #20]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b728:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b72c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b732:	4a02      	ldr	r2, [pc, #8]	; (800b73c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b734:	430b      	orrs	r3, r1
 800b736:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b738:	e006      	b.n	800b748 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800b73a:	bf00      	nop
 800b73c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b740:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b744:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b748:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b750:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800b754:	663b      	str	r3, [r7, #96]	; 0x60
 800b756:	2300      	movs	r3, #0
 800b758:	667b      	str	r3, [r7, #100]	; 0x64
 800b75a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800b75e:	460b      	mov	r3, r1
 800b760:	4313      	orrs	r3, r2
 800b762:	d00c      	beq.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b764:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b768:	3328      	adds	r3, #40	; 0x28
 800b76a:	2102      	movs	r1, #2
 800b76c:	4618      	mov	r0, r3
 800b76e:	f001 fb2d 	bl	800cdcc <RCCEx_PLL3_Config>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d002      	beq.n	800b77e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800b778:	2301      	movs	r3, #1
 800b77a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b786:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800b78a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b78c:	2300      	movs	r3, #0
 800b78e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b790:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800b794:	460b      	mov	r3, r1
 800b796:	4313      	orrs	r3, r2
 800b798:	d036      	beq.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800b79a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b79e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7a4:	d018      	beq.n	800b7d8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800b7a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b7aa:	d811      	bhi.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b7ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7b0:	d014      	beq.n	800b7dc <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800b7b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7b6:	d80b      	bhi.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d011      	beq.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800b7bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7c0:	d106      	bne.n	800b7d0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7c2:	4bb7      	ldr	r3, [pc, #732]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7c6:	4ab6      	ldr	r2, [pc, #728]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b7cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800b7ce:	e008      	b.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b7d6:	e004      	b.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b7d8:	bf00      	nop
 800b7da:	e002      	b.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b7dc:	bf00      	nop
 800b7de:	e000      	b.n	800b7e2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800b7e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d10a      	bne.n	800b800 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b7ea:	4bad      	ldr	r3, [pc, #692]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b7f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7f8:	4aa9      	ldr	r2, [pc, #676]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b7fa:	430b      	orrs	r3, r1
 800b7fc:	6553      	str	r3, [r2, #84]	; 0x54
 800b7fe:	e003      	b.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b800:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b804:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b810:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800b814:	653b      	str	r3, [r7, #80]	; 0x50
 800b816:	2300      	movs	r3, #0
 800b818:	657b      	str	r3, [r7, #84]	; 0x54
 800b81a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800b81e:	460b      	mov	r3, r1
 800b820:	4313      	orrs	r3, r2
 800b822:	d009      	beq.n	800b838 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b824:	4b9e      	ldr	r3, [pc, #632]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b828:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b82c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b832:	4a9b      	ldr	r2, [pc, #620]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b834:	430b      	orrs	r3, r1
 800b836:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b838:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b83c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b840:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800b844:	64bb      	str	r3, [r7, #72]	; 0x48
 800b846:	2300      	movs	r3, #0
 800b848:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b84a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800b84e:	460b      	mov	r3, r1
 800b850:	4313      	orrs	r3, r2
 800b852:	d009      	beq.n	800b868 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b854:	4b92      	ldr	r3, [pc, #584]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b858:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800b85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b860:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b862:	4a8f      	ldr	r2, [pc, #572]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b864:	430b      	orrs	r3, r1
 800b866:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b868:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800b874:	643b      	str	r3, [r7, #64]	; 0x40
 800b876:	2300      	movs	r3, #0
 800b878:	647b      	str	r3, [r7, #68]	; 0x44
 800b87a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800b87e:	460b      	mov	r3, r1
 800b880:	4313      	orrs	r3, r2
 800b882:	d00e      	beq.n	800b8a2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b884:	4b86      	ldr	r3, [pc, #536]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b886:	691b      	ldr	r3, [r3, #16]
 800b888:	4a85      	ldr	r2, [pc, #532]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b88a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b88e:	6113      	str	r3, [r2, #16]
 800b890:	4b83      	ldr	r3, [pc, #524]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b892:	6919      	ldr	r1, [r3, #16]
 800b894:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b898:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b89c:	4a80      	ldr	r2, [pc, #512]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b89e:	430b      	orrs	r3, r1
 800b8a0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b8a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8aa:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800b8ae:	63bb      	str	r3, [r7, #56]	; 0x38
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b8b4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	4313      	orrs	r3, r2
 800b8bc:	d009      	beq.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b8be:	4b78      	ldr	r3, [pc, #480]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8c2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b8c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8cc:	4a74      	ldr	r2, [pc, #464]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8ce:	430b      	orrs	r3, r1
 800b8d0:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b8d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8da:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800b8de:	633b      	str	r3, [r7, #48]	; 0x30
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	637b      	str	r3, [r7, #52]	; 0x34
 800b8e4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	d00a      	beq.n	800b904 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b8ee:	4b6c      	ldr	r3, [pc, #432]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b8f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8f2:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800b8f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b8fe:	4a68      	ldr	r2, [pc, #416]	; (800baa0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800b900:	430b      	orrs	r3, r1
 800b902:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b904:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90c:	2100      	movs	r1, #0
 800b90e:	62b9      	str	r1, [r7, #40]	; 0x28
 800b910:	f003 0301 	and.w	r3, r3, #1
 800b914:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b916:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800b91a:	460b      	mov	r3, r1
 800b91c:	4313      	orrs	r3, r2
 800b91e:	d011      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b924:	3308      	adds	r3, #8
 800b926:	2100      	movs	r1, #0
 800b928:	4618      	mov	r0, r3
 800b92a:	f001 f99d 	bl	800cc68 <RCCEx_PLL2_Config>
 800b92e:	4603      	mov	r3, r0
 800b930:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b934:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d003      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b93c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b940:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b944:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94c:	2100      	movs	r1, #0
 800b94e:	6239      	str	r1, [r7, #32]
 800b950:	f003 0302 	and.w	r3, r3, #2
 800b954:	627b      	str	r3, [r7, #36]	; 0x24
 800b956:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800b95a:	460b      	mov	r3, r1
 800b95c:	4313      	orrs	r3, r2
 800b95e:	d011      	beq.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b964:	3308      	adds	r3, #8
 800b966:	2101      	movs	r1, #1
 800b968:	4618      	mov	r0, r3
 800b96a:	f001 f97d 	bl	800cc68 <RCCEx_PLL2_Config>
 800b96e:	4603      	mov	r3, r0
 800b970:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b974:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d003      	beq.n	800b984 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b97c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b980:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b984:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98c:	2100      	movs	r1, #0
 800b98e:	61b9      	str	r1, [r7, #24]
 800b990:	f003 0304 	and.w	r3, r3, #4
 800b994:	61fb      	str	r3, [r7, #28]
 800b996:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800b99a:	460b      	mov	r3, r1
 800b99c:	4313      	orrs	r3, r2
 800b99e:	d011      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b9a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a4:	3308      	adds	r3, #8
 800b9a6:	2102      	movs	r1, #2
 800b9a8:	4618      	mov	r0, r3
 800b9aa:	f001 f95d 	bl	800cc68 <RCCEx_PLL2_Config>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800b9b4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d003      	beq.n	800b9c4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9bc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b9c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9cc:	2100      	movs	r1, #0
 800b9ce:	6139      	str	r1, [r7, #16]
 800b9d0:	f003 0308 	and.w	r3, r3, #8
 800b9d4:	617b      	str	r3, [r7, #20]
 800b9d6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800b9da:	460b      	mov	r3, r1
 800b9dc:	4313      	orrs	r3, r2
 800b9de:	d011      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b9e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9e4:	3328      	adds	r3, #40	; 0x28
 800b9e6:	2100      	movs	r1, #0
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f001 f9ef 	bl	800cdcc <RCCEx_PLL3_Config>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800b9f4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d003      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba00:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ba04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0c:	2100      	movs	r1, #0
 800ba0e:	60b9      	str	r1, [r7, #8]
 800ba10:	f003 0310 	and.w	r3, r3, #16
 800ba14:	60fb      	str	r3, [r7, #12]
 800ba16:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ba1a:	460b      	mov	r3, r1
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	d011      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba24:	3328      	adds	r3, #40	; 0x28
 800ba26:	2101      	movs	r1, #1
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f001 f9cf 	bl	800cdcc <RCCEx_PLL3_Config>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d003      	beq.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ba44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4c:	2100      	movs	r1, #0
 800ba4e:	6039      	str	r1, [r7, #0]
 800ba50:	f003 0320 	and.w	r3, r3, #32
 800ba54:	607b      	str	r3, [r7, #4]
 800ba56:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	d011      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba64:	3328      	adds	r3, #40	; 0x28
 800ba66:	2102      	movs	r1, #2
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f001 f9af 	bl	800cdcc <RCCEx_PLL3_Config>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800ba74:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d003      	beq.n	800ba84 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800ba84:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d101      	bne.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	e000      	b.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800ba90:	2301      	movs	r3, #1
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ba9e:	bf00      	nop
 800baa0:	58024400 	.word	0x58024400

0800baa4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b090      	sub	sp, #64	; 0x40
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800baae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bab2:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bab6:	430b      	orrs	r3, r1
 800bab8:	f040 8094 	bne.w	800bbe4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800babc:	4b9b      	ldr	r3, [pc, #620]	; (800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800babe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bac0:	f003 0307 	and.w	r3, r3, #7
 800bac4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bac8:	2b04      	cmp	r3, #4
 800baca:	f200 8087 	bhi.w	800bbdc <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bace:	a201      	add	r2, pc, #4	; (adr r2, 800bad4 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad4:	0800bae9 	.word	0x0800bae9
 800bad8:	0800bb11 	.word	0x0800bb11
 800badc:	0800bb39 	.word	0x0800bb39
 800bae0:	0800bbd5 	.word	0x0800bbd5
 800bae4:	0800bb61 	.word	0x0800bb61
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bae8:	4b90      	ldr	r3, [pc, #576]	; (800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800baf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800baf4:	d108      	bne.n	800bb08 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800baf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bafa:	4618      	mov	r0, r3
 800bafc:	f000 ff62 	bl	800c9c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bb00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb02:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb04:	f000 bc93 	b.w	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb08:	2300      	movs	r3, #0
 800bb0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb0c:	f000 bc8f 	b.w	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bb10:	4b86      	ldr	r3, [pc, #536]	; (800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bb1c:	d108      	bne.n	800bb30 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb1e:	f107 0318 	add.w	r3, r7, #24
 800bb22:	4618      	mov	r0, r3
 800bb24:	f000 fca6 	bl	800c474 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bb28:	69bb      	ldr	r3, [r7, #24]
 800bb2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb2c:	f000 bc7f 	b.w	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb30:	2300      	movs	r3, #0
 800bb32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb34:	f000 bc7b 	b.w	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bb38:	4b7c      	ldr	r3, [pc, #496]	; (800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb44:	d108      	bne.n	800bb58 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb46:	f107 030c 	add.w	r3, r7, #12
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f000 fde6 	bl	800c71c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bb54:	f000 bc6b 	b.w	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bb58:	2300      	movs	r3, #0
 800bb5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb5c:	f000 bc67 	b.w	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bb60:	4b72      	ldr	r3, [pc, #456]	; (800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bb68:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bb6a:	4b70      	ldr	r3, [pc, #448]	; (800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	f003 0304 	and.w	r3, r3, #4
 800bb72:	2b04      	cmp	r3, #4
 800bb74:	d10c      	bne.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bb76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d109      	bne.n	800bb90 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bb7c:	4b6b      	ldr	r3, [pc, #428]	; (800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	08db      	lsrs	r3, r3, #3
 800bb82:	f003 0303 	and.w	r3, r3, #3
 800bb86:	4a6a      	ldr	r2, [pc, #424]	; (800bd30 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bb88:	fa22 f303 	lsr.w	r3, r2, r3
 800bb8c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bb8e:	e01f      	b.n	800bbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bb90:	4b66      	ldr	r3, [pc, #408]	; (800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb9c:	d106      	bne.n	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bb9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bba0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bba4:	d102      	bne.n	800bbac <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bba6:	4b63      	ldr	r3, [pc, #396]	; (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bba8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbaa:	e011      	b.n	800bbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bbac:	4b5f      	ldr	r3, [pc, #380]	; (800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbb4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bbb8:	d106      	bne.n	800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bbba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bbc0:	d102      	bne.n	800bbc8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bbc2:	4b5d      	ldr	r3, [pc, #372]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bbc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbc6:	e003      	b.n	800bbd0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bbcc:	f000 bc2f 	b.w	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bbd0:	f000 bc2d 	b.w	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bbd4:	4b59      	ldr	r3, [pc, #356]	; (800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bbd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbd8:	f000 bc29 	b.w	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bbe0:	f000 bc25 	b.w	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bbe4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bbe8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bbec:	430b      	orrs	r3, r1
 800bbee:	f040 80a7 	bne.w	800bd40 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bbf2:	4b4e      	ldr	r3, [pc, #312]	; (800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bbf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbf6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bbfa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbfe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bc02:	d054      	beq.n	800bcae <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bc04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bc0a:	f200 808b 	bhi.w	800bd24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc10:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bc14:	f000 8083 	beq.w	800bd1e <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc1a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bc1e:	f200 8081 	bhi.w	800bd24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc28:	d02f      	beq.n	800bc8a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bc2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bc30:	d878      	bhi.n	800bd24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bc32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d004      	beq.n	800bc42 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bc3e:	d012      	beq.n	800bc66 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800bc40:	e070      	b.n	800bd24 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bc42:	4b3a      	ldr	r3, [pc, #232]	; (800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bc4e:	d107      	bne.n	800bc60 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bc50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bc54:	4618      	mov	r0, r3
 800bc56:	f000 feb5 	bl	800c9c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc5e:	e3e6      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc60:	2300      	movs	r3, #0
 800bc62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc64:	e3e3      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bc66:	4b31      	ldr	r3, [pc, #196]	; (800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bc72:	d107      	bne.n	800bc84 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc74:	f107 0318 	add.w	r3, r7, #24
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f000 fbfb 	bl	800c474 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bc82:	e3d4      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bc84:	2300      	movs	r3, #0
 800bc86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bc88:	e3d1      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bc8a:	4b28      	ldr	r3, [pc, #160]	; (800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bc96:	d107      	bne.n	800bca8 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bc98:	f107 030c 	add.w	r3, r7, #12
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f000 fd3d 	bl	800c71c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bca6:	e3c2      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bcac:	e3bf      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bcae:	4b1f      	ldr	r3, [pc, #124]	; (800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcb2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bcb6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bcb8:	4b1c      	ldr	r3, [pc, #112]	; (800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f003 0304 	and.w	r3, r3, #4
 800bcc0:	2b04      	cmp	r3, #4
 800bcc2:	d10c      	bne.n	800bcde <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800bcc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d109      	bne.n	800bcde <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bcca:	4b18      	ldr	r3, [pc, #96]	; (800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	08db      	lsrs	r3, r3, #3
 800bcd0:	f003 0303 	and.w	r3, r3, #3
 800bcd4:	4a16      	ldr	r2, [pc, #88]	; (800bd30 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bcd6:	fa22 f303 	lsr.w	r3, r2, r3
 800bcda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcdc:	e01e      	b.n	800bd1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bcde:	4b13      	ldr	r3, [pc, #76]	; (800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcea:	d106      	bne.n	800bcfa <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800bcec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bcf2:	d102      	bne.n	800bcfa <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bcf4:	4b0f      	ldr	r3, [pc, #60]	; (800bd34 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bcf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bcf8:	e010      	b.n	800bd1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bcfa:	4b0c      	ldr	r3, [pc, #48]	; (800bd2c <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bd06:	d106      	bne.n	800bd16 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800bd08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd0e:	d102      	bne.n	800bd16 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bd10:	4b09      	ldr	r3, [pc, #36]	; (800bd38 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bd12:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd14:	e002      	b.n	800bd1c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bd16:	2300      	movs	r3, #0
 800bd18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bd1a:	e388      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bd1c:	e387      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bd1e:	4b07      	ldr	r3, [pc, #28]	; (800bd3c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bd20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd22:	e384      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800bd24:	2300      	movs	r3, #0
 800bd26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd28:	e381      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bd2a:	bf00      	nop
 800bd2c:	58024400 	.word	0x58024400
 800bd30:	03d09000 	.word	0x03d09000
 800bd34:	003d0900 	.word	0x003d0900
 800bd38:	02faf080 	.word	0x02faf080
 800bd3c:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800bd40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd44:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800bd48:	430b      	orrs	r3, r1
 800bd4a:	f040 809c 	bne.w	800be86 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800bd4e:	4b9e      	ldr	r3, [pc, #632]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bd50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd52:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800bd56:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd5e:	d054      	beq.n	800be0a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800bd60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bd66:	f200 808b 	bhi.w	800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bd70:	f000 8083 	beq.w	800be7a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800bd74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bd7a:	f200 8081 	bhi.w	800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd84:	d02f      	beq.n	800bde6 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800bd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bd8c:	d878      	bhi.n	800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800bd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d004      	beq.n	800bd9e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800bd94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd9a:	d012      	beq.n	800bdc2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800bd9c:	e070      	b.n	800be80 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bd9e:	4b8a      	ldr	r3, [pc, #552]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bda6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bdaa:	d107      	bne.n	800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bdac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f000 fe07 	bl	800c9c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bdb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdb8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdba:	e338      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdc0:	e335      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bdc2:	4b81      	ldr	r3, [pc, #516]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bdca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdce:	d107      	bne.n	800bde0 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdd0:	f107 0318 	add.w	r3, r7, #24
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	f000 fb4d 	bl	800c474 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bdda:	69bb      	ldr	r3, [r7, #24]
 800bddc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bdde:	e326      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bde0:	2300      	movs	r3, #0
 800bde2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bde4:	e323      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bde6:	4b78      	ldr	r3, [pc, #480]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bdf2:	d107      	bne.n	800be04 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdf4:	f107 030c 	add.w	r3, r7, #12
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f000 fc8f 	bl	800c71c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be02:	e314      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be04:	2300      	movs	r3, #0
 800be06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be08:	e311      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be0a:	4b6f      	ldr	r3, [pc, #444]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be12:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be14:	4b6c      	ldr	r3, [pc, #432]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f003 0304 	and.w	r3, r3, #4
 800be1c:	2b04      	cmp	r3, #4
 800be1e:	d10c      	bne.n	800be3a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800be20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be22:	2b00      	cmp	r3, #0
 800be24:	d109      	bne.n	800be3a <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be26:	4b68      	ldr	r3, [pc, #416]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	08db      	lsrs	r3, r3, #3
 800be2c:	f003 0303 	and.w	r3, r3, #3
 800be30:	4a66      	ldr	r2, [pc, #408]	; (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800be32:	fa22 f303 	lsr.w	r3, r2, r3
 800be36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be38:	e01e      	b.n	800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be3a:	4b63      	ldr	r3, [pc, #396]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be46:	d106      	bne.n	800be56 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800be48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be4e:	d102      	bne.n	800be56 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800be50:	4b5f      	ldr	r3, [pc, #380]	; (800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800be52:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be54:	e010      	b.n	800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800be56:	4b5c      	ldr	r3, [pc, #368]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800be5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be62:	d106      	bne.n	800be72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800be64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be6a:	d102      	bne.n	800be72 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800be6c:	4b59      	ldr	r3, [pc, #356]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800be6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be70:	e002      	b.n	800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800be72:	2300      	movs	r3, #0
 800be74:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800be76:	e2da      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800be78:	e2d9      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800be7a:	4b57      	ldr	r3, [pc, #348]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800be7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be7e:	e2d6      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800be80:	2300      	movs	r3, #0
 800be82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be84:	e2d3      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800be86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be8a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800be8e:	430b      	orrs	r3, r1
 800be90:	f040 80a7 	bne.w	800bfe2 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800be94:	4b4c      	ldr	r3, [pc, #304]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800be96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be98:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800be9c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800be9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bea4:	d055      	beq.n	800bf52 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800bea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bea8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800beac:	f200 8096 	bhi.w	800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800beb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800beb6:	f000 8084 	beq.w	800bfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800beba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bebc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bec0:	f200 808c 	bhi.w	800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800beca:	d030      	beq.n	800bf2e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800becc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bed2:	f200 8083 	bhi.w	800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800bed6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d004      	beq.n	800bee6 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800bedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bee2:	d012      	beq.n	800bf0a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800bee4:	e07a      	b.n	800bfdc <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bee6:	4b38      	ldr	r3, [pc, #224]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800beee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bef2:	d107      	bne.n	800bf04 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bef8:	4618      	mov	r0, r3
 800befa:	f000 fd63 	bl	800c9c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800befe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf02:	e294      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf04:	2300      	movs	r3, #0
 800bf06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf08:	e291      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf0a:	4b2f      	ldr	r3, [pc, #188]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf16:	d107      	bne.n	800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf18:	f107 0318 	add.w	r3, r7, #24
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	f000 faa9 	bl	800c474 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf22:	69bb      	ldr	r3, [r7, #24]
 800bf24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf26:	e282      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf2c:	e27f      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf2e:	4b26      	ldr	r3, [pc, #152]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf3a:	d107      	bne.n	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf3c:	f107 030c 	add.w	r3, r7, #12
 800bf40:	4618      	mov	r0, r3
 800bf42:	f000 fbeb 	bl	800c71c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf4a:	e270      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf50:	e26d      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bf52:	4b1d      	ldr	r3, [pc, #116]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf5a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bf5c:	4b1a      	ldr	r3, [pc, #104]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f003 0304 	and.w	r3, r3, #4
 800bf64:	2b04      	cmp	r3, #4
 800bf66:	d10c      	bne.n	800bf82 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800bf68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d109      	bne.n	800bf82 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf6e:	4b16      	ldr	r3, [pc, #88]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	08db      	lsrs	r3, r3, #3
 800bf74:	f003 0303 	and.w	r3, r3, #3
 800bf78:	4a14      	ldr	r2, [pc, #80]	; (800bfcc <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800bf7a:	fa22 f303 	lsr.w	r3, r2, r3
 800bf7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf80:	e01e      	b.n	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf82:	4b11      	ldr	r3, [pc, #68]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf8e:	d106      	bne.n	800bf9e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800bf90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf96:	d102      	bne.n	800bf9e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf98:	4b0d      	ldr	r3, [pc, #52]	; (800bfd0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800bf9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf9c:	e010      	b.n	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf9e:	4b0a      	ldr	r3, [pc, #40]	; (800bfc8 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bfa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bfaa:	d106      	bne.n	800bfba <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800bfac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfb2:	d102      	bne.n	800bfba <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bfb4:	4b07      	ldr	r3, [pc, #28]	; (800bfd4 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800bfb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfb8:	e002      	b.n	800bfc0 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bfba:	2300      	movs	r3, #0
 800bfbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bfbe:	e236      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bfc0:	e235      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bfc2:	4b05      	ldr	r3, [pc, #20]	; (800bfd8 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800bfc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfc6:	e232      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bfc8:	58024400 	.word	0x58024400
 800bfcc:	03d09000 	.word	0x03d09000
 800bfd0:	003d0900 	.word	0x003d0900
 800bfd4:	02faf080 	.word	0x02faf080
 800bfd8:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800bfdc:	2300      	movs	r3, #0
 800bfde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfe0:	e225      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800bfe2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bfe6:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800bfea:	430b      	orrs	r3, r1
 800bfec:	f040 8085 	bne.w	800c0fa <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800bff0:	4b9c      	ldr	r3, [pc, #624]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800bff2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bff4:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800bff8:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800bffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c000:	d06b      	beq.n	800c0da <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c008:	d874      	bhi.n	800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c00c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c010:	d056      	beq.n	800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c014:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c018:	d86c      	bhi.n	800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c020:	d03b      	beq.n	800c09a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c024:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c028:	d864      	bhi.n	800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c030:	d021      	beq.n	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c034:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c038:	d85c      	bhi.n	800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c03a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d004      	beq.n	800c04a <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c046:	d004      	beq.n	800c052 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c048:	e054      	b.n	800c0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c04a:	f7fe fb5f 	bl	800a70c <HAL_RCC_GetPCLK1Freq>
 800c04e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c050:	e1ed      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c052:	4b84      	ldr	r3, [pc, #528]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c05a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c05e:	d107      	bne.n	800c070 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c060:	f107 0318 	add.w	r3, r7, #24
 800c064:	4618      	mov	r0, r3
 800c066:	f000 fa05 	bl	800c474 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c06a:	69fb      	ldr	r3, [r7, #28]
 800c06c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c06e:	e1de      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c070:	2300      	movs	r3, #0
 800c072:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c074:	e1db      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c076:	4b7b      	ldr	r3, [pc, #492]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c07e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c082:	d107      	bne.n	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c084:	f107 030c 	add.w	r3, r7, #12
 800c088:	4618      	mov	r0, r3
 800c08a:	f000 fb47 	bl	800c71c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c092:	e1cc      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c094:	2300      	movs	r3, #0
 800c096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c098:	e1c9      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c09a:	4b72      	ldr	r3, [pc, #456]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f003 0304 	and.w	r3, r3, #4
 800c0a2:	2b04      	cmp	r3, #4
 800c0a4:	d109      	bne.n	800c0ba <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c0a6:	4b6f      	ldr	r3, [pc, #444]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	08db      	lsrs	r3, r3, #3
 800c0ac:	f003 0303 	and.w	r3, r3, #3
 800c0b0:	4a6d      	ldr	r2, [pc, #436]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c0b2:	fa22 f303 	lsr.w	r3, r2, r3
 800c0b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0b8:	e1b9      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0be:	e1b6      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c0c0:	4b68      	ldr	r3, [pc, #416]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0cc:	d102      	bne.n	800c0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c0ce:	4b67      	ldr	r3, [pc, #412]	; (800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0d2:	e1ac      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0d8:	e1a9      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c0da:	4b62      	ldr	r3, [pc, #392]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c0e6:	d102      	bne.n	800c0ee <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c0e8:	4b61      	ldr	r3, [pc, #388]	; (800c270 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c0ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0ec:	e19f      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0f2:	e19c      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0f8:	e199      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c0fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0fe:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c102:	430b      	orrs	r3, r1
 800c104:	d173      	bne.n	800c1ee <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c106:	4b57      	ldr	r3, [pc, #348]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c10a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c10e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c112:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c116:	d02f      	beq.n	800c178 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c11a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c11e:	d863      	bhi.n	800c1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c122:	2b00      	cmp	r3, #0
 800c124:	d004      	beq.n	800c130 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c12c:	d012      	beq.n	800c154 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c12e:	e05b      	b.n	800c1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c130:	4b4c      	ldr	r3, [pc, #304]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c138:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c13c:	d107      	bne.n	800c14e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c13e:	f107 0318 	add.w	r3, r7, #24
 800c142:	4618      	mov	r0, r3
 800c144:	f000 f996 	bl	800c474 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c148:	69bb      	ldr	r3, [r7, #24]
 800c14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c14c:	e16f      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c14e:	2300      	movs	r3, #0
 800c150:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c152:	e16c      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c154:	4b43      	ldr	r3, [pc, #268]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c15c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c160:	d107      	bne.n	800c172 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c162:	f107 030c 	add.w	r3, r7, #12
 800c166:	4618      	mov	r0, r3
 800c168:	f000 fad8 	bl	800c71c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c170:	e15d      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c172:	2300      	movs	r3, #0
 800c174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c176:	e15a      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c178:	4b3a      	ldr	r3, [pc, #232]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c17a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c17c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c180:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c182:	4b38      	ldr	r3, [pc, #224]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f003 0304 	and.w	r3, r3, #4
 800c18a:	2b04      	cmp	r3, #4
 800c18c:	d10c      	bne.n	800c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c18e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c190:	2b00      	cmp	r3, #0
 800c192:	d109      	bne.n	800c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c194:	4b33      	ldr	r3, [pc, #204]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	08db      	lsrs	r3, r3, #3
 800c19a:	f003 0303 	and.w	r3, r3, #3
 800c19e:	4a32      	ldr	r2, [pc, #200]	; (800c268 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c1a0:	fa22 f303 	lsr.w	r3, r2, r3
 800c1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1a6:	e01e      	b.n	800c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c1a8:	4b2e      	ldr	r3, [pc, #184]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1b4:	d106      	bne.n	800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1bc:	d102      	bne.n	800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c1be:	4b2b      	ldr	r3, [pc, #172]	; (800c26c <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1c2:	e010      	b.n	800c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c1c4:	4b27      	ldr	r3, [pc, #156]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1d0:	d106      	bne.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1d8:	d102      	bne.n	800c1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c1da:	4b25      	ldr	r3, [pc, #148]	; (800c270 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1de:	e002      	b.n	800c1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c1e0:	2300      	movs	r3, #0
 800c1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c1e4:	e123      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c1e6:	e122      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1ec:	e11f      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c1ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1f2:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c1f6:	430b      	orrs	r3, r1
 800c1f8:	d13c      	bne.n	800c274 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c1fa:	4b1a      	ldr	r3, [pc, #104]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c1fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c202:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c206:	2b00      	cmp	r3, #0
 800c208:	d004      	beq.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c210:	d012      	beq.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c212:	e023      	b.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c214:	4b13      	ldr	r3, [pc, #76]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c21c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c220:	d107      	bne.n	800c232 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c222:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c226:	4618      	mov	r0, r3
 800c228:	f000 fbcc 	bl	800c9c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c22c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c22e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c230:	e0fd      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c232:	2300      	movs	r3, #0
 800c234:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c236:	e0fa      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c238:	4b0a      	ldr	r3, [pc, #40]	; (800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c240:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c244:	d107      	bne.n	800c256 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c246:	f107 0318 	add.w	r3, r7, #24
 800c24a:	4618      	mov	r0, r3
 800c24c:	f000 f912 	bl	800c474 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c250:	6a3b      	ldr	r3, [r7, #32]
 800c252:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c254:	e0eb      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c256:	2300      	movs	r3, #0
 800c258:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c25a:	e0e8      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c25c:	2300      	movs	r3, #0
 800c25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c260:	e0e5      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c262:	bf00      	nop
 800c264:	58024400 	.word	0x58024400
 800c268:	03d09000 	.word	0x03d09000
 800c26c:	003d0900 	.word	0x003d0900
 800c270:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c274:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c278:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c27c:	430b      	orrs	r3, r1
 800c27e:	f040 8085 	bne.w	800c38c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c282:	4b6d      	ldr	r3, [pc, #436]	; (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c286:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c28a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c292:	d06b      	beq.n	800c36c <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c29a:	d874      	bhi.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2a2:	d056      	beq.n	800c352 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2aa:	d86c      	bhi.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c2b2:	d03b      	beq.n	800c32c <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c2ba:	d864      	bhi.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c2bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2c2:	d021      	beq.n	800c308 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2ca:	d85c      	bhi.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d004      	beq.n	800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2d8:	d004      	beq.n	800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c2da:	e054      	b.n	800c386 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c2dc:	f000 f8b4 	bl	800c448 <HAL_RCCEx_GetD3PCLK1Freq>
 800c2e0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c2e2:	e0a4      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2e4:	4b54      	ldr	r3, [pc, #336]	; (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2f0:	d107      	bne.n	800c302 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2f2:	f107 0318 	add.w	r3, r7, #24
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	f000 f8bc 	bl	800c474 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c300:	e095      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c302:	2300      	movs	r3, #0
 800c304:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c306:	e092      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c308:	4b4b      	ldr	r3, [pc, #300]	; (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c310:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c314:	d107      	bne.n	800c326 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c316:	f107 030c 	add.w	r3, r7, #12
 800c31a:	4618      	mov	r0, r3
 800c31c:	f000 f9fe 	bl	800c71c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c324:	e083      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c326:	2300      	movs	r3, #0
 800c328:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c32a:	e080      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c32c:	4b42      	ldr	r3, [pc, #264]	; (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f003 0304 	and.w	r3, r3, #4
 800c334:	2b04      	cmp	r3, #4
 800c336:	d109      	bne.n	800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c338:	4b3f      	ldr	r3, [pc, #252]	; (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	08db      	lsrs	r3, r3, #3
 800c33e:	f003 0303 	and.w	r3, r3, #3
 800c342:	4a3e      	ldr	r2, [pc, #248]	; (800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c344:	fa22 f303 	lsr.w	r3, r2, r3
 800c348:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c34a:	e070      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c34c:	2300      	movs	r3, #0
 800c34e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c350:	e06d      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c352:	4b39      	ldr	r3, [pc, #228]	; (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c35a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c35e:	d102      	bne.n	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c360:	4b37      	ldr	r3, [pc, #220]	; (800c440 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c362:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c364:	e063      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c366:	2300      	movs	r3, #0
 800c368:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c36a:	e060      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c36c:	4b32      	ldr	r3, [pc, #200]	; (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c374:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c378:	d102      	bne.n	800c380 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c37a:	4b32      	ldr	r3, [pc, #200]	; (800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c37c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c37e:	e056      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c380:	2300      	movs	r3, #0
 800c382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c384:	e053      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c386:	2300      	movs	r3, #0
 800c388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c38a:	e050      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c38c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c390:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c394:	430b      	orrs	r3, r1
 800c396:	d148      	bne.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c398:	4b27      	ldr	r3, [pc, #156]	; (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c39a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c39c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c3a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3a8:	d02a      	beq.n	800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3b0:	d838      	bhi.n	800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d004      	beq.n	800c3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3be:	d00d      	beq.n	800c3dc <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c3c0:	e030      	b.n	800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c3c2:	4b1d      	ldr	r3, [pc, #116]	; (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c3ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3ce:	d102      	bne.n	800c3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c3d0:	4b1c      	ldr	r3, [pc, #112]	; (800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3d4:	e02b      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3da:	e028      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3dc:	4b16      	ldr	r3, [pc, #88]	; (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3e8:	d107      	bne.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f000 fae8 	bl	800c9c4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3f8:	e019      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3fe:	e016      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c400:	4b0d      	ldr	r3, [pc, #52]	; (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c408:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c40c:	d107      	bne.n	800c41e <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c40e:	f107 0318 	add.w	r3, r7, #24
 800c412:	4618      	mov	r0, r3
 800c414:	f000 f82e 	bl	800c474 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c418:	69fb      	ldr	r3, [r7, #28]
 800c41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c41c:	e007      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c41e:	2300      	movs	r3, #0
 800c420:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c422:	e004      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c424:	2300      	movs	r3, #0
 800c426:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c428:	e001      	b.n	800c42e <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c42a:	2300      	movs	r3, #0
 800c42c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c42e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c430:	4618      	mov	r0, r3
 800c432:	3740      	adds	r7, #64	; 0x40
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	58024400 	.word	0x58024400
 800c43c:	03d09000 	.word	0x03d09000
 800c440:	003d0900 	.word	0x003d0900
 800c444:	02faf080 	.word	0x02faf080

0800c448 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c44c:	f7fe f92e 	bl	800a6ac <HAL_RCC_GetHCLKFreq>
 800c450:	4602      	mov	r2, r0
 800c452:	4b06      	ldr	r3, [pc, #24]	; (800c46c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c454:	6a1b      	ldr	r3, [r3, #32]
 800c456:	091b      	lsrs	r3, r3, #4
 800c458:	f003 0307 	and.w	r3, r3, #7
 800c45c:	4904      	ldr	r1, [pc, #16]	; (800c470 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c45e:	5ccb      	ldrb	r3, [r1, r3]
 800c460:	f003 031f 	and.w	r3, r3, #31
 800c464:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c468:	4618      	mov	r0, r3
 800c46a:	bd80      	pop	{r7, pc}
 800c46c:	58024400 	.word	0x58024400
 800c470:	08017a80 	.word	0x08017a80

0800c474 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c474:	b480      	push	{r7}
 800c476:	b089      	sub	sp, #36	; 0x24
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c47c:	4ba1      	ldr	r3, [pc, #644]	; (800c704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c47e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c480:	f003 0303 	and.w	r3, r3, #3
 800c484:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c486:	4b9f      	ldr	r3, [pc, #636]	; (800c704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c48a:	0b1b      	lsrs	r3, r3, #12
 800c48c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c490:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c492:	4b9c      	ldr	r3, [pc, #624]	; (800c704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c496:	091b      	lsrs	r3, r3, #4
 800c498:	f003 0301 	and.w	r3, r3, #1
 800c49c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c49e:	4b99      	ldr	r3, [pc, #612]	; (800c704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4a2:	08db      	lsrs	r3, r3, #3
 800c4a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c4a8:	693a      	ldr	r2, [r7, #16]
 800c4aa:	fb02 f303 	mul.w	r3, r2, r3
 800c4ae:	ee07 3a90 	vmov	s15, r3
 800c4b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	f000 8111 	beq.w	800c6e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c4c2:	69bb      	ldr	r3, [r7, #24]
 800c4c4:	2b02      	cmp	r3, #2
 800c4c6:	f000 8083 	beq.w	800c5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c4ca:	69bb      	ldr	r3, [r7, #24]
 800c4cc:	2b02      	cmp	r3, #2
 800c4ce:	f200 80a1 	bhi.w	800c614 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c4d2:	69bb      	ldr	r3, [r7, #24]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d003      	beq.n	800c4e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c4d8:	69bb      	ldr	r3, [r7, #24]
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d056      	beq.n	800c58c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c4de:	e099      	b.n	800c614 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4e0:	4b88      	ldr	r3, [pc, #544]	; (800c704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f003 0320 	and.w	r3, r3, #32
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d02d      	beq.n	800c548 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4ec:	4b85      	ldr	r3, [pc, #532]	; (800c704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	08db      	lsrs	r3, r3, #3
 800c4f2:	f003 0303 	and.w	r3, r3, #3
 800c4f6:	4a84      	ldr	r2, [pc, #528]	; (800c708 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c4f8:	fa22 f303 	lsr.w	r3, r2, r3
 800c4fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	ee07 3a90 	vmov	s15, r3
 800c504:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	ee07 3a90 	vmov	s15, r3
 800c50e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c516:	4b7b      	ldr	r3, [pc, #492]	; (800c704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c51a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c51e:	ee07 3a90 	vmov	s15, r3
 800c522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c526:	ed97 6a03 	vldr	s12, [r7, #12]
 800c52a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c70c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c52e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c53a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c53e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c542:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c546:	e087      	b.n	800c658 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	ee07 3a90 	vmov	s15, r3
 800c54e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c552:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c710 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c556:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c55a:	4b6a      	ldr	r3, [pc, #424]	; (800c704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c55c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c55e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c562:	ee07 3a90 	vmov	s15, r3
 800c566:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c56a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c56e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c70c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c572:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c576:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c57a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c57e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c582:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c586:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c58a:	e065      	b.n	800c658 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	ee07 3a90 	vmov	s15, r3
 800c592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c596:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c59a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c59e:	4b59      	ldr	r3, [pc, #356]	; (800c704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5a6:	ee07 3a90 	vmov	s15, r3
 800c5aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c70c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c5b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c5ce:	e043      	b.n	800c658 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5d0:	697b      	ldr	r3, [r7, #20]
 800c5d2:	ee07 3a90 	vmov	s15, r3
 800c5d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c718 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c5de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5e2:	4b48      	ldr	r3, [pc, #288]	; (800c704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c5e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5ea:	ee07 3a90 	vmov	s15, r3
 800c5ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5f2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c70c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c5fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c602:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c606:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c60a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c60e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c612:	e021      	b.n	800c658 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	ee07 3a90 	vmov	s15, r3
 800c61a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c61e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c714 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c622:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c626:	4b37      	ldr	r3, [pc, #220]	; (800c704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c62a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c62e:	ee07 3a90 	vmov	s15, r3
 800c632:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c636:	ed97 6a03 	vldr	s12, [r7, #12]
 800c63a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c70c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c63e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c642:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c646:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c64a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c64e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c652:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c656:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c658:	4b2a      	ldr	r3, [pc, #168]	; (800c704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c65c:	0a5b      	lsrs	r3, r3, #9
 800c65e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c662:	ee07 3a90 	vmov	s15, r3
 800c666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c66a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c66e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c672:	edd7 6a07 	vldr	s13, [r7, #28]
 800c676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c67a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c67e:	ee17 2a90 	vmov	r2, s15
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c686:	4b1f      	ldr	r3, [pc, #124]	; (800c704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c68a:	0c1b      	lsrs	r3, r3, #16
 800c68c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c690:	ee07 3a90 	vmov	s15, r3
 800c694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c698:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c69c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6a0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6ac:	ee17 2a90 	vmov	r2, s15
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c6b4:	4b13      	ldr	r3, [pc, #76]	; (800c704 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6b8:	0e1b      	lsrs	r3, r3, #24
 800c6ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6be:	ee07 3a90 	vmov	s15, r3
 800c6c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6ce:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6da:	ee17 2a90 	vmov	r2, s15
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c6e2:	e008      	b.n	800c6f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2200      	movs	r2, #0
 800c6e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2200      	movs	r2, #0
 800c6ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	609a      	str	r2, [r3, #8]
}
 800c6f6:	bf00      	nop
 800c6f8:	3724      	adds	r7, #36	; 0x24
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	58024400 	.word	0x58024400
 800c708:	03d09000 	.word	0x03d09000
 800c70c:	46000000 	.word	0x46000000
 800c710:	4c742400 	.word	0x4c742400
 800c714:	4a742400 	.word	0x4a742400
 800c718:	4c3ebc20 	.word	0x4c3ebc20

0800c71c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b089      	sub	sp, #36	; 0x24
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c724:	4ba1      	ldr	r3, [pc, #644]	; (800c9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c728:	f003 0303 	and.w	r3, r3, #3
 800c72c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c72e:	4b9f      	ldr	r3, [pc, #636]	; (800c9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c732:	0d1b      	lsrs	r3, r3, #20
 800c734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c738:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c73a:	4b9c      	ldr	r3, [pc, #624]	; (800c9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c73c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c73e:	0a1b      	lsrs	r3, r3, #8
 800c740:	f003 0301 	and.w	r3, r3, #1
 800c744:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c746:	4b99      	ldr	r3, [pc, #612]	; (800c9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c74a:	08db      	lsrs	r3, r3, #3
 800c74c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c750:	693a      	ldr	r2, [r7, #16]
 800c752:	fb02 f303 	mul.w	r3, r2, r3
 800c756:	ee07 3a90 	vmov	s15, r3
 800c75a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c75e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	2b00      	cmp	r3, #0
 800c766:	f000 8111 	beq.w	800c98c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800c76a:	69bb      	ldr	r3, [r7, #24]
 800c76c:	2b02      	cmp	r3, #2
 800c76e:	f000 8083 	beq.w	800c878 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800c772:	69bb      	ldr	r3, [r7, #24]
 800c774:	2b02      	cmp	r3, #2
 800c776:	f200 80a1 	bhi.w	800c8bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800c77a:	69bb      	ldr	r3, [r7, #24]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d003      	beq.n	800c788 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	2b01      	cmp	r3, #1
 800c784:	d056      	beq.n	800c834 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800c786:	e099      	b.n	800c8bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c788:	4b88      	ldr	r3, [pc, #544]	; (800c9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f003 0320 	and.w	r3, r3, #32
 800c790:	2b00      	cmp	r3, #0
 800c792:	d02d      	beq.n	800c7f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c794:	4b85      	ldr	r3, [pc, #532]	; (800c9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	08db      	lsrs	r3, r3, #3
 800c79a:	f003 0303 	and.w	r3, r3, #3
 800c79e:	4a84      	ldr	r2, [pc, #528]	; (800c9b0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800c7a0:	fa22 f303 	lsr.w	r3, r2, r3
 800c7a4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	ee07 3a90 	vmov	s15, r3
 800c7ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	ee07 3a90 	vmov	s15, r3
 800c7b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7be:	4b7b      	ldr	r3, [pc, #492]	; (800c9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7c6:	ee07 3a90 	vmov	s15, r3
 800c7ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7ce:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c7d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c7ee:	e087      	b.n	800c900 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c7f0:	697b      	ldr	r3, [r7, #20]
 800c7f2:	ee07 3a90 	vmov	s15, r3
 800c7f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c9b8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800c7fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c802:	4b6a      	ldr	r3, [pc, #424]	; (800c9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c80a:	ee07 3a90 	vmov	s15, r3
 800c80e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c812:	ed97 6a03 	vldr	s12, [r7, #12]
 800c816:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c81a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c81e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c82a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c82e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c832:	e065      	b.n	800c900 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c834:	697b      	ldr	r3, [r7, #20]
 800c836:	ee07 3a90 	vmov	s15, r3
 800c83a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c83e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c9bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c842:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c846:	4b59      	ldr	r3, [pc, #356]	; (800c9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c84a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c84e:	ee07 3a90 	vmov	s15, r3
 800c852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c856:	ed97 6a03 	vldr	s12, [r7, #12]
 800c85a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c85e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c862:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c866:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c86a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c86e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c872:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c876:	e043      	b.n	800c900 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	ee07 3a90 	vmov	s15, r3
 800c87e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c882:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c9c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800c886:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c88a:	4b48      	ldr	r3, [pc, #288]	; (800c9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c88e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c892:	ee07 3a90 	vmov	s15, r3
 800c896:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c89a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c89e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8ba:	e021      	b.n	800c900 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	ee07 3a90 	vmov	s15, r3
 800c8c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c9bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800c8ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8ce:	4b37      	ldr	r3, [pc, #220]	; (800c9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8d6:	ee07 3a90 	vmov	s15, r3
 800c8da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8de:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c9b4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800c8e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c900:	4b2a      	ldr	r3, [pc, #168]	; (800c9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c904:	0a5b      	lsrs	r3, r3, #9
 800c906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c90a:	ee07 3a90 	vmov	s15, r3
 800c90e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c912:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c916:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c91a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c91e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c926:	ee17 2a90 	vmov	r2, s15
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c92e:	4b1f      	ldr	r3, [pc, #124]	; (800c9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c932:	0c1b      	lsrs	r3, r3, #16
 800c934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c938:	ee07 3a90 	vmov	s15, r3
 800c93c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c940:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c944:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c948:	edd7 6a07 	vldr	s13, [r7, #28]
 800c94c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c950:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c954:	ee17 2a90 	vmov	r2, s15
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c95c:	4b13      	ldr	r3, [pc, #76]	; (800c9ac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800c95e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c960:	0e1b      	lsrs	r3, r3, #24
 800c962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c966:	ee07 3a90 	vmov	s15, r3
 800c96a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c96e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c972:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c976:	edd7 6a07 	vldr	s13, [r7, #28]
 800c97a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c97e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c982:	ee17 2a90 	vmov	r2, s15
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c98a:	e008      	b.n	800c99e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	2200      	movs	r2, #0
 800c990:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	2200      	movs	r2, #0
 800c996:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2200      	movs	r2, #0
 800c99c:	609a      	str	r2, [r3, #8]
}
 800c99e:	bf00      	nop
 800c9a0:	3724      	adds	r7, #36	; 0x24
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop
 800c9ac:	58024400 	.word	0x58024400
 800c9b0:	03d09000 	.word	0x03d09000
 800c9b4:	46000000 	.word	0x46000000
 800c9b8:	4c742400 	.word	0x4c742400
 800c9bc:	4a742400 	.word	0x4a742400
 800c9c0:	4c3ebc20 	.word	0x4c3ebc20

0800c9c4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800c9c4:	b480      	push	{r7}
 800c9c6:	b089      	sub	sp, #36	; 0x24
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c9cc:	4ba0      	ldr	r3, [pc, #640]	; (800cc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9d0:	f003 0303 	and.w	r3, r3, #3
 800c9d4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800c9d6:	4b9e      	ldr	r3, [pc, #632]	; (800cc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9da:	091b      	lsrs	r3, r3, #4
 800c9dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9e0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c9e2:	4b9b      	ldr	r3, [pc, #620]	; (800cc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9e6:	f003 0301 	and.w	r3, r3, #1
 800c9ea:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c9ec:	4b98      	ldr	r3, [pc, #608]	; (800cc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c9ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9f0:	08db      	lsrs	r3, r3, #3
 800c9f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9f6:	693a      	ldr	r2, [r7, #16]
 800c9f8:	fb02 f303 	mul.w	r3, r2, r3
 800c9fc:	ee07 3a90 	vmov	s15, r3
 800ca00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca04:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	f000 8111 	beq.w	800cc32 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ca10:	69bb      	ldr	r3, [r7, #24]
 800ca12:	2b02      	cmp	r3, #2
 800ca14:	f000 8083 	beq.w	800cb1e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ca18:	69bb      	ldr	r3, [r7, #24]
 800ca1a:	2b02      	cmp	r3, #2
 800ca1c:	f200 80a1 	bhi.w	800cb62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ca20:	69bb      	ldr	r3, [r7, #24]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d003      	beq.n	800ca2e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ca26:	69bb      	ldr	r3, [r7, #24]
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d056      	beq.n	800cada <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ca2c:	e099      	b.n	800cb62 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca2e:	4b88      	ldr	r3, [pc, #544]	; (800cc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f003 0320 	and.w	r3, r3, #32
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d02d      	beq.n	800ca96 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca3a:	4b85      	ldr	r3, [pc, #532]	; (800cc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	08db      	lsrs	r3, r3, #3
 800ca40:	f003 0303 	and.w	r3, r3, #3
 800ca44:	4a83      	ldr	r2, [pc, #524]	; (800cc54 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ca46:	fa22 f303 	lsr.w	r3, r2, r3
 800ca4a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	ee07 3a90 	vmov	s15, r3
 800ca52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	ee07 3a90 	vmov	s15, r3
 800ca5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca64:	4b7a      	ldr	r3, [pc, #488]	; (800cc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ca66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca6c:	ee07 3a90 	vmov	s15, r3
 800ca70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca74:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca78:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cc58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ca7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca90:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ca94:	e087      	b.n	800cba6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	ee07 3a90 	vmov	s15, r3
 800ca9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caa0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800caa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caa8:	4b69      	ldr	r3, [pc, #420]	; (800cc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800caaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cab0:	ee07 3a90 	vmov	s15, r3
 800cab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cab8:	ed97 6a03 	vldr	s12, [r7, #12]
 800cabc:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cc58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cac0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cac4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cac8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cacc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cad4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cad8:	e065      	b.n	800cba6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	ee07 3a90 	vmov	s15, r3
 800cae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cae4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cc60 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cae8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caec:	4b58      	ldr	r3, [pc, #352]	; (800cc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800caee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caf4:	ee07 3a90 	vmov	s15, r3
 800caf8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cafc:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb00:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cc58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb14:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb1c:	e043      	b.n	800cba6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	ee07 3a90 	vmov	s15, r3
 800cb24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb28:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cc64 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cb2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb30:	4b47      	ldr	r3, [pc, #284]	; (800cc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb38:	ee07 3a90 	vmov	s15, r3
 800cb3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb40:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb44:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cc58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb58:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb60:	e021      	b.n	800cba6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	ee07 3a90 	vmov	s15, r3
 800cb68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb6c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cc5c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cb70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb74:	4b36      	ldr	r3, [pc, #216]	; (800cc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cb76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb7c:	ee07 3a90 	vmov	s15, r3
 800cb80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb84:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb88:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cc58 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cb8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cba0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cba4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cba6:	4b2a      	ldr	r3, [pc, #168]	; (800cc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbaa:	0a5b      	lsrs	r3, r3, #9
 800cbac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbb0:	ee07 3a90 	vmov	s15, r3
 800cbb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbbc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbc0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbcc:	ee17 2a90 	vmov	r2, s15
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cbd4:	4b1e      	ldr	r3, [pc, #120]	; (800cc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cbd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd8:	0c1b      	lsrs	r3, r3, #16
 800cbda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbde:	ee07 3a90 	vmov	s15, r3
 800cbe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbe6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cbea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cbee:	edd7 6a07 	vldr	s13, [r7, #28]
 800cbf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cbf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cbfa:	ee17 2a90 	vmov	r2, s15
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cc02:	4b13      	ldr	r3, [pc, #76]	; (800cc50 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cc04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc06:	0e1b      	lsrs	r3, r3, #24
 800cc08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc0c:	ee07 3a90 	vmov	s15, r3
 800cc10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc28:	ee17 2a90 	vmov	r2, s15
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cc30:	e008      	b.n	800cc44 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2200      	movs	r2, #0
 800cc36:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2200      	movs	r2, #0
 800cc42:	609a      	str	r2, [r3, #8]
}
 800cc44:	bf00      	nop
 800cc46:	3724      	adds	r7, #36	; 0x24
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4e:	4770      	bx	lr
 800cc50:	58024400 	.word	0x58024400
 800cc54:	03d09000 	.word	0x03d09000
 800cc58:	46000000 	.word	0x46000000
 800cc5c:	4c742400 	.word	0x4c742400
 800cc60:	4a742400 	.word	0x4a742400
 800cc64:	4c3ebc20 	.word	0x4c3ebc20

0800cc68 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b084      	sub	sp, #16
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cc72:	2300      	movs	r3, #0
 800cc74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cc76:	4b53      	ldr	r3, [pc, #332]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cc78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc7a:	f003 0303 	and.w	r3, r3, #3
 800cc7e:	2b03      	cmp	r3, #3
 800cc80:	d101      	bne.n	800cc86 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800cc82:	2301      	movs	r3, #1
 800cc84:	e099      	b.n	800cdba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800cc86:	4b4f      	ldr	r3, [pc, #316]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4a4e      	ldr	r2, [pc, #312]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cc8c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cc90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc92:	f7f6 fe95 	bl	80039c0 <HAL_GetTick>
 800cc96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800cc98:	e008      	b.n	800ccac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cc9a:	f7f6 fe91 	bl	80039c0 <HAL_GetTick>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	68bb      	ldr	r3, [r7, #8]
 800cca2:	1ad3      	subs	r3, r2, r3
 800cca4:	2b02      	cmp	r3, #2
 800cca6:	d901      	bls.n	800ccac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cca8:	2303      	movs	r3, #3
 800ccaa:	e086      	b.n	800cdba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ccac:	4b45      	ldr	r3, [pc, #276]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d1f0      	bne.n	800cc9a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ccb8:	4b42      	ldr	r3, [pc, #264]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800ccba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccbc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	031b      	lsls	r3, r3, #12
 800ccc6:	493f      	ldr	r1, [pc, #252]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800ccc8:	4313      	orrs	r3, r2
 800ccca:	628b      	str	r3, [r1, #40]	; 0x28
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	3b01      	subs	r3, #1
 800ccd2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	689b      	ldr	r3, [r3, #8]
 800ccda:	3b01      	subs	r3, #1
 800ccdc:	025b      	lsls	r3, r3, #9
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	431a      	orrs	r2, r3
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	68db      	ldr	r3, [r3, #12]
 800cce6:	3b01      	subs	r3, #1
 800cce8:	041b      	lsls	r3, r3, #16
 800ccea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ccee:	431a      	orrs	r2, r3
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	691b      	ldr	r3, [r3, #16]
 800ccf4:	3b01      	subs	r3, #1
 800ccf6:	061b      	lsls	r3, r3, #24
 800ccf8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ccfc:	4931      	ldr	r1, [pc, #196]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800cd02:	4b30      	ldr	r3, [pc, #192]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	695b      	ldr	r3, [r3, #20]
 800cd0e:	492d      	ldr	r1, [pc, #180]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd10:	4313      	orrs	r3, r2
 800cd12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800cd14:	4b2b      	ldr	r3, [pc, #172]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd18:	f023 0220 	bic.w	r2, r3, #32
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	699b      	ldr	r3, [r3, #24]
 800cd20:	4928      	ldr	r1, [pc, #160]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd22:	4313      	orrs	r3, r2
 800cd24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800cd26:	4b27      	ldr	r3, [pc, #156]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd2a:	4a26      	ldr	r2, [pc, #152]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd2c:	f023 0310 	bic.w	r3, r3, #16
 800cd30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800cd32:	4b24      	ldr	r3, [pc, #144]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd36:	4b24      	ldr	r3, [pc, #144]	; (800cdc8 <RCCEx_PLL2_Config+0x160>)
 800cd38:	4013      	ands	r3, r2
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	69d2      	ldr	r2, [r2, #28]
 800cd3e:	00d2      	lsls	r2, r2, #3
 800cd40:	4920      	ldr	r1, [pc, #128]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd42:	4313      	orrs	r3, r2
 800cd44:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800cd46:	4b1f      	ldr	r3, [pc, #124]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd4a:	4a1e      	ldr	r2, [pc, #120]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd4c:	f043 0310 	orr.w	r3, r3, #16
 800cd50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d106      	bne.n	800cd66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cd58:	4b1a      	ldr	r3, [pc, #104]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd5c:	4a19      	ldr	r2, [pc, #100]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd62:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd64:	e00f      	b.n	800cd86 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	2b01      	cmp	r3, #1
 800cd6a:	d106      	bne.n	800cd7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cd6c:	4b15      	ldr	r3, [pc, #84]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd70:	4a14      	ldr	r2, [pc, #80]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cd76:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cd78:	e005      	b.n	800cd86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cd7a:	4b12      	ldr	r3, [pc, #72]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd7e:	4a11      	ldr	r2, [pc, #68]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cd84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cd86:	4b0f      	ldr	r3, [pc, #60]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	4a0e      	ldr	r2, [pc, #56]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cd8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800cd90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cd92:	f7f6 fe15 	bl	80039c0 <HAL_GetTick>
 800cd96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cd98:	e008      	b.n	800cdac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800cd9a:	f7f6 fe11 	bl	80039c0 <HAL_GetTick>
 800cd9e:	4602      	mov	r2, r0
 800cda0:	68bb      	ldr	r3, [r7, #8]
 800cda2:	1ad3      	subs	r3, r2, r3
 800cda4:	2b02      	cmp	r3, #2
 800cda6:	d901      	bls.n	800cdac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cda8:	2303      	movs	r3, #3
 800cdaa:	e006      	b.n	800cdba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cdac:	4b05      	ldr	r3, [pc, #20]	; (800cdc4 <RCCEx_PLL2_Config+0x15c>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d0f0      	beq.n	800cd9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cdb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdba:	4618      	mov	r0, r3
 800cdbc:	3710      	adds	r7, #16
 800cdbe:	46bd      	mov	sp, r7
 800cdc0:	bd80      	pop	{r7, pc}
 800cdc2:	bf00      	nop
 800cdc4:	58024400 	.word	0x58024400
 800cdc8:	ffff0007 	.word	0xffff0007

0800cdcc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cdda:	4b53      	ldr	r3, [pc, #332]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800cddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdde:	f003 0303 	and.w	r3, r3, #3
 800cde2:	2b03      	cmp	r3, #3
 800cde4:	d101      	bne.n	800cdea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cde6:	2301      	movs	r3, #1
 800cde8:	e099      	b.n	800cf1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cdea:	4b4f      	ldr	r3, [pc, #316]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800cdec:	681b      	ldr	r3, [r3, #0]
 800cdee:	4a4e      	ldr	r2, [pc, #312]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800cdf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cdf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cdf6:	f7f6 fde3 	bl	80039c0 <HAL_GetTick>
 800cdfa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cdfc:	e008      	b.n	800ce10 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cdfe:	f7f6 fddf 	bl	80039c0 <HAL_GetTick>
 800ce02:	4602      	mov	r2, r0
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	1ad3      	subs	r3, r2, r3
 800ce08:	2b02      	cmp	r3, #2
 800ce0a:	d901      	bls.n	800ce10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ce0c:	2303      	movs	r3, #3
 800ce0e:	e086      	b.n	800cf1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ce10:	4b45      	ldr	r3, [pc, #276]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d1f0      	bne.n	800cdfe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800ce1c:	4b42      	ldr	r3, [pc, #264]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce20:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	051b      	lsls	r3, r3, #20
 800ce2a:	493f      	ldr	r1, [pc, #252]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce2c:	4313      	orrs	r3, r2
 800ce2e:	628b      	str	r3, [r1, #40]	; 0x28
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	685b      	ldr	r3, [r3, #4]
 800ce34:	3b01      	subs	r3, #1
 800ce36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	689b      	ldr	r3, [r3, #8]
 800ce3e:	3b01      	subs	r3, #1
 800ce40:	025b      	lsls	r3, r3, #9
 800ce42:	b29b      	uxth	r3, r3
 800ce44:	431a      	orrs	r2, r3
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	68db      	ldr	r3, [r3, #12]
 800ce4a:	3b01      	subs	r3, #1
 800ce4c:	041b      	lsls	r3, r3, #16
 800ce4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ce52:	431a      	orrs	r2, r3
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	691b      	ldr	r3, [r3, #16]
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	061b      	lsls	r3, r3, #24
 800ce5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ce60:	4931      	ldr	r1, [pc, #196]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce62:	4313      	orrs	r3, r2
 800ce64:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ce66:	4b30      	ldr	r3, [pc, #192]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	695b      	ldr	r3, [r3, #20]
 800ce72:	492d      	ldr	r1, [pc, #180]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce74:	4313      	orrs	r3, r2
 800ce76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ce78:	4b2b      	ldr	r3, [pc, #172]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	699b      	ldr	r3, [r3, #24]
 800ce84:	4928      	ldr	r1, [pc, #160]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce86:	4313      	orrs	r3, r2
 800ce88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ce8a:	4b27      	ldr	r3, [pc, #156]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce8e:	4a26      	ldr	r2, [pc, #152]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ce94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ce96:	4b24      	ldr	r3, [pc, #144]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ce98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ce9a:	4b24      	ldr	r3, [pc, #144]	; (800cf2c <RCCEx_PLL3_Config+0x160>)
 800ce9c:	4013      	ands	r3, r2
 800ce9e:	687a      	ldr	r2, [r7, #4]
 800cea0:	69d2      	ldr	r2, [r2, #28]
 800cea2:	00d2      	lsls	r2, r2, #3
 800cea4:	4920      	ldr	r1, [pc, #128]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800cea6:	4313      	orrs	r3, r2
 800cea8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ceaa:	4b1f      	ldr	r3, [pc, #124]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ceac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceae:	4a1e      	ldr	r2, [pc, #120]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ceb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ceb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d106      	bne.n	800ceca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cebc:	4b1a      	ldr	r3, [pc, #104]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800cebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cec0:	4a19      	ldr	r2, [pc, #100]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800cec2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cec6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cec8:	e00f      	b.n	800ceea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d106      	bne.n	800cede <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ced0:	4b15      	ldr	r3, [pc, #84]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ced2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ced4:	4a14      	ldr	r2, [pc, #80]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ced6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ceda:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cedc:	e005      	b.n	800ceea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cede:	4b12      	ldr	r3, [pc, #72]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800cee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cee2:	4a11      	ldr	r2, [pc, #68]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800cee4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cee8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ceea:	4b0f      	ldr	r3, [pc, #60]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800ceec:	681b      	ldr	r3, [r3, #0]
 800ceee:	4a0e      	ldr	r2, [pc, #56]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800cef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cef6:	f7f6 fd63 	bl	80039c0 <HAL_GetTick>
 800cefa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cefc:	e008      	b.n	800cf10 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800cefe:	f7f6 fd5f 	bl	80039c0 <HAL_GetTick>
 800cf02:	4602      	mov	r2, r0
 800cf04:	68bb      	ldr	r3, [r7, #8]
 800cf06:	1ad3      	subs	r3, r2, r3
 800cf08:	2b02      	cmp	r3, #2
 800cf0a:	d901      	bls.n	800cf10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cf0c:	2303      	movs	r3, #3
 800cf0e:	e006      	b.n	800cf1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cf10:	4b05      	ldr	r3, [pc, #20]	; (800cf28 <RCCEx_PLL3_Config+0x15c>)
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d0f0      	beq.n	800cefe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cf1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	58024400 	.word	0x58024400
 800cf2c:	ffff0007 	.word	0xffff0007

0800cf30 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800cf30:	b580      	push	{r7, lr}
 800cf32:	b08a      	sub	sp, #40	; 0x28
 800cf34:	af00      	add	r7, sp, #0
 800cf36:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d101      	bne.n	800cf42 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800cf3e:	2301      	movs	r3, #1
 800cf40:	e075      	b.n	800d02e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cf48:	b2db      	uxtb	r3, r3
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d105      	bne.n	800cf5a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2200      	movs	r2, #0
 800cf52:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f7f5 fe9f 	bl	8002c98 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2204      	movs	r2, #4
 800cf5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f000 f868 	bl	800d038 <HAL_SD_InitCard>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d001      	beq.n	800cf72 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e05d      	b.n	800d02e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800cf72:	f107 0308 	add.w	r3, r7, #8
 800cf76:	4619      	mov	r1, r3
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	f000 fdaf 	bl	800dadc <HAL_SD_GetCardStatus>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d001      	beq.n	800cf88 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800cf84:	2301      	movs	r3, #1
 800cf86:	e052      	b.n	800d02e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800cf88:	7e3b      	ldrb	r3, [r7, #24]
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800cf8e:	7e7b      	ldrb	r3, [r7, #25]
 800cf90:	b2db      	uxtb	r3, r3
 800cf92:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf98:	2b01      	cmp	r3, #1
 800cf9a:	d10a      	bne.n	800cfb2 <HAL_SD_Init+0x82>
 800cf9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d102      	bne.n	800cfa8 <HAL_SD_Init+0x78>
 800cfa2:	6a3b      	ldr	r3, [r7, #32]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d004      	beq.n	800cfb2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfae:	659a      	str	r2, [r3, #88]	; 0x58
 800cfb0:	e00b      	b.n	800cfca <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d104      	bne.n	800cfc4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cfc0:	659a      	str	r2, [r3, #88]	; 0x58
 800cfc2:	e002      	b.n	800cfca <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	68db      	ldr	r3, [r3, #12]
 800cfce:	4619      	mov	r1, r3
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	f000 fe6d 	bl	800dcb0 <HAL_SD_ConfigWideBusOperation>
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d001      	beq.n	800cfe0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800cfdc:	2301      	movs	r3, #1
 800cfde:	e026      	b.n	800d02e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800cfe0:	f7f6 fcee 	bl	80039c0 <HAL_GetTick>
 800cfe4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cfe6:	e011      	b.n	800d00c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800cfe8:	f7f6 fcea 	bl	80039c0 <HAL_GetTick>
 800cfec:	4602      	mov	r2, r0
 800cfee:	69fb      	ldr	r3, [r7, #28]
 800cff0:	1ad3      	subs	r3, r2, r3
 800cff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cff6:	d109      	bne.n	800d00c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cffe:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2201      	movs	r2, #1
 800d004:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d008:	2303      	movs	r3, #3
 800d00a:	e010      	b.n	800d02e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f000 ff61 	bl	800ded4 <HAL_SD_GetCardState>
 800d012:	4603      	mov	r3, r0
 800d014:	2b04      	cmp	r3, #4
 800d016:	d1e7      	bne.n	800cfe8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	2200      	movs	r2, #0
 800d01c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2200      	movs	r2, #0
 800d022:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	2201      	movs	r2, #1
 800d028:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d02c:	2300      	movs	r3, #0
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3728      	adds	r7, #40	; 0x28
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
	...

0800d038 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d038:	b590      	push	{r4, r7, lr}
 800d03a:	b08d      	sub	sp, #52	; 0x34
 800d03c:	af02      	add	r7, sp, #8
 800d03e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d040:	2300      	movs	r3, #0
 800d042:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d044:	2300      	movs	r3, #0
 800d046:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d048:	2300      	movs	r3, #0
 800d04a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d04c:	2300      	movs	r3, #0
 800d04e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d050:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d054:	f04f 0100 	mov.w	r1, #0
 800d058:	f7fe fd24 	bl	800baa4 <HAL_RCCEx_GetPeriphCLKFreq>
 800d05c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d060:	2b00      	cmp	r3, #0
 800d062:	d109      	bne.n	800d078 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	2201      	movs	r2, #1
 800d068:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d072:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d074:	2301      	movs	r3, #1
 800d076:	e070      	b.n	800d15a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d07a:	0a1b      	lsrs	r3, r3, #8
 800d07c:	4a39      	ldr	r2, [pc, #228]	; (800d164 <HAL_SD_InitCard+0x12c>)
 800d07e:	fba2 2303 	umull	r2, r3, r2, r3
 800d082:	091b      	lsrs	r3, r3, #4
 800d084:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	681c      	ldr	r4, [r3, #0]
 800d08a:	466a      	mov	r2, sp
 800d08c:	f107 0318 	add.w	r3, r7, #24
 800d090:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d094:	e882 0003 	stmia.w	r2, {r0, r1}
 800d098:	f107 030c 	add.w	r3, r7, #12
 800d09c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d09e:	4620      	mov	r0, r4
 800d0a0:	f004 fe6c 	bl	8011d7c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f004 feaf 	bl	8011e0c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d0ae:	69fb      	ldr	r3, [r7, #28]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d005      	beq.n	800d0c0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	005b      	lsls	r3, r3, #1
 800d0b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0be:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d0c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d007      	beq.n	800d0d6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d0c6:	4a28      	ldr	r2, [pc, #160]	; (800d168 <HAL_SD_InitCard+0x130>)
 800d0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	f7f6 fc81 	bl	80039d8 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 ffea 	bl	800e0b0 <SD_PowerON>
 800d0dc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d0de:	6a3b      	ldr	r3, [r7, #32]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d00b      	beq.n	800d0fc <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	2201      	movs	r2, #1
 800d0e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0f0:	6a3b      	ldr	r3, [r7, #32]
 800d0f2:	431a      	orrs	r2, r3
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d0f8:	2301      	movs	r3, #1
 800d0fa:	e02e      	b.n	800d15a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 ff09 	bl	800df14 <SD_InitCard>
 800d102:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d104:	6a3b      	ldr	r3, [r7, #32]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d00b      	beq.n	800d122 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	2201      	movs	r2, #1
 800d10e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d116:	6a3b      	ldr	r3, [r7, #32]
 800d118:	431a      	orrs	r2, r3
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d11e:	2301      	movs	r3, #1
 800d120:	e01b      	b.n	800d15a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d12a:	4618      	mov	r0, r3
 800d12c:	f004 ff04 	bl	8011f38 <SDMMC_CmdBlockLength>
 800d130:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d132:	6a3b      	ldr	r3, [r7, #32]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d00f      	beq.n	800d158 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a0b      	ldr	r2, [pc, #44]	; (800d16c <HAL_SD_InitCard+0x134>)
 800d13e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d144:	6a3b      	ldr	r3, [r7, #32]
 800d146:	431a      	orrs	r2, r3
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	2201      	movs	r2, #1
 800d150:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d154:	2301      	movs	r3, #1
 800d156:	e000      	b.n	800d15a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d158:	2300      	movs	r3, #0
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	372c      	adds	r7, #44	; 0x2c
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd90      	pop	{r4, r7, pc}
 800d162:	bf00      	nop
 800d164:	014f8b59 	.word	0x014f8b59
 800d168:	00012110 	.word	0x00012110
 800d16c:	1fe00fff 	.word	0x1fe00fff

0800d170 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b08c      	sub	sp, #48	; 0x30
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
 800d17c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d182:	68bb      	ldr	r3, [r7, #8]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d107      	bne.n	800d198 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d18c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d194:	2301      	movs	r3, #1
 800d196:	e08d      	b.n	800d2b4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	2b01      	cmp	r3, #1
 800d1a2:	f040 8086 	bne.w	800d2b2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d1ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	441a      	add	r2, r3
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d907      	bls.n	800d1ca <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e074      	b.n	800d2b4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	2203      	movs	r2, #3
 800d1ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	68ba      	ldr	r2, [r7, #8]
 800d1de:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	025a      	lsls	r2, r3, #9
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d002      	beq.n	800d1f6 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f2:	025b      	lsls	r3, r3, #9
 800d1f4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d1f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d1fa:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	025b      	lsls	r3, r3, #9
 800d200:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d202:	2390      	movs	r3, #144	; 0x90
 800d204:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d206:	2302      	movs	r3, #2
 800d208:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d20a:	2300      	movs	r3, #0
 800d20c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d20e:	2300      	movs	r3, #0
 800d210:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	f107 0210 	add.w	r2, r7, #16
 800d21a:	4611      	mov	r1, r2
 800d21c:	4618      	mov	r0, r3
 800d21e:	f004 fe5f 	bl	8011ee0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	68da      	ldr	r2, [r3, #12]
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d230:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	68ba      	ldr	r2, [r7, #8]
 800d238:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	2201      	movs	r2, #1
 800d240:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	2b01      	cmp	r3, #1
 800d246:	d90a      	bls.n	800d25e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	2282      	movs	r2, #130	; 0x82
 800d24c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d254:	4618      	mov	r0, r3
 800d256:	f004 feb5 	bl	8011fc4 <SDMMC_CmdReadMultiBlock>
 800d25a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d25c:	e009      	b.n	800d272 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	2281      	movs	r2, #129	; 0x81
 800d262:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
 800d268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d26a:	4618      	mov	r0, r3
 800d26c:	f004 fe87 	bl	8011f7e <SDMMC_CmdReadSingleBlock>
 800d270:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d274:	2b00      	cmp	r3, #0
 800d276:	d012      	beq.n	800d29e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	4a0f      	ldr	r2, [pc, #60]	; (800d2bc <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d27e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d286:	431a      	orrs	r2, r3
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	2201      	movs	r2, #1
 800d290:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2200      	movs	r2, #0
 800d298:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d29a:	2301      	movs	r3, #1
 800d29c:	e00a      	b.n	800d2b4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d2ac:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	e000      	b.n	800d2b4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d2b2:	2302      	movs	r3, #2
  }
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3730      	adds	r7, #48	; 0x30
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}
 800d2bc:	1fe00fff 	.word	0x1fe00fff

0800d2c0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b08c      	sub	sp, #48	; 0x30
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	60f8      	str	r0, [r7, #12]
 800d2c8:	60b9      	str	r1, [r7, #8]
 800d2ca:	607a      	str	r2, [r7, #4]
 800d2cc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d2d2:	68bb      	ldr	r3, [r7, #8]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d107      	bne.n	800d2e8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2dc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d2e0:	68fb      	ldr	r3, [r7, #12]
 800d2e2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	e08d      	b.n	800d404 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d2ee:	b2db      	uxtb	r3, r3
 800d2f0:	2b01      	cmp	r3, #1
 800d2f2:	f040 8086 	bne.w	800d402 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	2200      	movs	r2, #0
 800d2fa:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d2fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	441a      	add	r2, r3
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d306:	429a      	cmp	r2, r3
 800d308:	d907      	bls.n	800d31a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d30e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d316:	2301      	movs	r3, #1
 800d318:	e074      	b.n	800d404 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	2203      	movs	r2, #3
 800d31e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2200      	movs	r2, #0
 800d328:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	68ba      	ldr	r2, [r7, #8]
 800d32e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d330:	683b      	ldr	r3, [r7, #0]
 800d332:	025a      	lsls	r2, r3, #9
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d33c:	2b01      	cmp	r3, #1
 800d33e:	d002      	beq.n	800d346 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d342:	025b      	lsls	r3, r3, #9
 800d344:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d346:	f04f 33ff 	mov.w	r3, #4294967295
 800d34a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	025b      	lsls	r3, r3, #9
 800d350:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d352:	2390      	movs	r3, #144	; 0x90
 800d354:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d356:	2300      	movs	r3, #0
 800d358:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d35a:	2300      	movs	r3, #0
 800d35c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d35e:	2300      	movs	r3, #0
 800d360:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	f107 0210 	add.w	r2, r7, #16
 800d36a:	4611      	mov	r1, r2
 800d36c:	4618      	mov	r0, r3
 800d36e:	f004 fdb7 	bl	8011ee0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	68da      	ldr	r2, [r3, #12]
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d380:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	68ba      	ldr	r2, [r7, #8]
 800d388:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	2201      	movs	r2, #1
 800d390:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800d392:	683b      	ldr	r3, [r7, #0]
 800d394:	2b01      	cmp	r3, #1
 800d396:	d90a      	bls.n	800d3ae <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	22a0      	movs	r2, #160	; 0xa0
 800d39c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f004 fe53 	bl	8012050 <SDMMC_CmdWriteMultiBlock>
 800d3aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d3ac:	e009      	b.n	800d3c2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	2290      	movs	r2, #144	; 0x90
 800d3b2:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f004 fe25 	bl	801200a <SDMMC_CmdWriteSingleBlock>
 800d3c0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d012      	beq.n	800d3ee <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	4a0f      	ldr	r2, [pc, #60]	; (800d40c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d3ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3d6:	431a      	orrs	r2, r3
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	2201      	movs	r2, #1
 800d3e0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e00a      	b.n	800d404 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d3fc:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d3fe:	2300      	movs	r3, #0
 800d400:	e000      	b.n	800d404 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d402:	2302      	movs	r3, #2
  }
}
 800d404:	4618      	mov	r0, r3
 800d406:	3730      	adds	r7, #48	; 0x30
 800d408:	46bd      	mov	sp, r7
 800d40a:	bd80      	pop	{r7, pc}
 800d40c:	1fe00fff 	.word	0x1fe00fff

0800d410 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b084      	sub	sp, #16
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d008      	beq.n	800d43e <HAL_SD_IRQHandler+0x2e>
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	f003 0308 	and.w	r3, r3, #8
 800d432:	2b00      	cmp	r3, #0
 800d434:	d003      	beq.n	800d43e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f001 f926 	bl	800e688 <SD_Read_IT>
 800d43c:	e19a      	b.n	800d774 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d448:	2b00      	cmp	r3, #0
 800d44a:	f000 80ac 	beq.w	800d5a6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d456:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	4b59      	ldr	r3, [pc, #356]	; (800d5c8 <HAL_SD_IRQHandler+0x1b8>)
 800d464:	400b      	ands	r3, r1
 800d466:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d476:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	68da      	ldr	r2, [r3, #12]
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d486:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	f003 0308 	and.w	r3, r3, #8
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d038      	beq.n	800d504 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	f003 0302 	and.w	r3, r3, #2
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d104      	bne.n	800d4a6 <HAL_SD_IRQHandler+0x96>
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	f003 0320 	and.w	r3, r3, #32
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d011      	beq.n	800d4ca <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	f004 fdf4 	bl	8012098 <SDMMC_CmdStopTransfer>
 800d4b0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d008      	beq.n	800d4ca <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	431a      	orrs	r2, r3
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f000 f95b 	bl	800d780 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	4a3f      	ldr	r2, [pc, #252]	; (800d5cc <HAL_SD_IRQHandler+0x1bc>)
 800d4d0:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2200      	movs	r2, #0
 800d4de:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	f003 0301 	and.w	r3, r3, #1
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d104      	bne.n	800d4f4 <HAL_SD_IRQHandler+0xe4>
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	f003 0302 	and.w	r3, r3, #2
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	d003      	beq.n	800d4fc <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f006 fdf5 	bl	80140e4 <HAL_SD_RxCpltCallback>
 800d4fa:	e13b      	b.n	800d774 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f006 fde7 	bl	80140d0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d502:	e137      	b.n	800d774 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	f000 8132 	beq.w	800d774 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	2200      	movs	r2, #0
 800d516:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	2200      	movs	r2, #0
 800d51e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	2200      	movs	r2, #0
 800d526:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	f003 0302 	and.w	r3, r3, #2
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d104      	bne.n	800d53c <HAL_SD_IRQHandler+0x12c>
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	f003 0320 	and.w	r3, r3, #32
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d011      	beq.n	800d560 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	4618      	mov	r0, r3
 800d542:	f004 fda9 	bl	8012098 <SDMMC_CmdStopTransfer>
 800d546:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d008      	beq.n	800d560 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	431a      	orrs	r2, r3
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f000 f910 	bl	800d780 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2201      	movs	r2, #1
 800d564:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2200      	movs	r2, #0
 800d56c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	f003 0310 	and.w	r3, r3, #16
 800d574:	2b00      	cmp	r3, #0
 800d576:	d104      	bne.n	800d582 <HAL_SD_IRQHandler+0x172>
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f003 0320 	and.w	r3, r3, #32
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d002      	beq.n	800d588 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f006 fda4 	bl	80140d0 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	f003 0301 	and.w	r3, r3, #1
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d105      	bne.n	800d59e <HAL_SD_IRQHandler+0x18e>
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f003 0302 	and.w	r3, r3, #2
 800d598:	2b00      	cmp	r3, #0
 800d59a:	f000 80eb 	beq.w	800d774 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f006 fda0 	bl	80140e4 <HAL_SD_RxCpltCallback>
}
 800d5a4:	e0e6      	b.n	800d774 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d00d      	beq.n	800d5d0 <HAL_SD_IRQHandler+0x1c0>
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	f003 0308 	and.w	r3, r3, #8
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d008      	beq.n	800d5d0 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f001 f8a8 	bl	800e714 <SD_Write_IT>
 800d5c4:	e0d6      	b.n	800d774 <HAL_SD_IRQHandler+0x364>
 800d5c6:	bf00      	nop
 800d5c8:	ffff3ec5 	.word	0xffff3ec5
 800d5cc:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5d6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	f000 809d 	beq.w	800d71a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5e6:	f003 0302 	and.w	r3, r3, #2
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d005      	beq.n	800d5fa <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d5f2:	f043 0202 	orr.w	r2, r3, #2
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d600:	f003 0308 	and.w	r3, r3, #8
 800d604:	2b00      	cmp	r3, #0
 800d606:	d005      	beq.n	800d614 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d60c:	f043 0208 	orr.w	r2, r3, #8
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d61a:	f003 0320 	and.w	r3, r3, #32
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d005      	beq.n	800d62e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d626:	f043 0220 	orr.w	r2, r3, #32
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d634:	f003 0310 	and.w	r3, r3, #16
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d005      	beq.n	800d648 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d640:	f043 0210 	orr.w	r2, r3, #16
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a4b      	ldr	r2, [pc, #300]	; (800d77c <HAL_SD_IRQHandler+0x36c>)
 800d64e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d65e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	68da      	ldr	r2, [r3, #12]
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d66e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d67e:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	68da      	ldr	r2, [r3, #12]
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d68e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4618      	mov	r0, r3
 800d696:	f004 fcff 	bl	8012098 <SDMMC_CmdStopTransfer>
 800d69a:	4602      	mov	r2, r0
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6a0:	431a      	orrs	r2, r3
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	68da      	ldr	r2, [r3, #12]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d6b4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d6be:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	f003 0308 	and.w	r3, r3, #8
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d00a      	beq.n	800d6e0 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	2200      	movs	r2, #0
 800d6d6:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f000 f851 	bl	800d780 <HAL_SD_ErrorCallback>
}
 800d6de:	e049      	b.n	800d774 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d044      	beq.n	800d774 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d040      	beq.n	800d774 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d700:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	2200      	movs	r2, #0
 800d708:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2201      	movs	r2, #1
 800d70e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f000 f834 	bl	800d780 <HAL_SD_ErrorCallback>
}
 800d718:	e02c      	b.n	800d774 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d724:	2b00      	cmp	r3, #0
 800d726:	d025      	beq.n	800d774 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d730:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d738:	f003 0304 	and.w	r3, r3, #4
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d10c      	bne.n	800d75a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	f003 0320 	and.w	r3, r3, #32
 800d746:	2b00      	cmp	r3, #0
 800d748:	d003      	beq.n	800d752 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f001 f84a 	bl	800e7e4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d750:	e010      	b.n	800d774 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f001 f832 	bl	800e7bc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d758:	e00c      	b.n	800d774 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f003 0320 	and.w	r3, r3, #32
 800d760:	2b00      	cmp	r3, #0
 800d762:	d003      	beq.n	800d76c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f001 f833 	bl	800e7d0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d76a:	e003      	b.n	800d774 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f001 f81b 	bl	800e7a8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d772:	e7ff      	b.n	800d774 <HAL_SD_IRQHandler+0x364>
 800d774:	bf00      	nop
 800d776:	3710      	adds	r7, #16
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	18000f3a 	.word	0x18000f3a

0800d780 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d780:	b480      	push	{r7}
 800d782:	b083      	sub	sp, #12
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d788:	bf00      	nop
 800d78a:	370c      	adds	r7, #12
 800d78c:	46bd      	mov	sp, r7
 800d78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d792:	4770      	bx	lr

0800d794 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d794:	b480      	push	{r7}
 800d796:	b083      	sub	sp, #12
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7a2:	0f9b      	lsrs	r3, r3, #30
 800d7a4:	b2da      	uxtb	r2, r3
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7ae:	0e9b      	lsrs	r3, r3, #26
 800d7b0:	b2db      	uxtb	r3, r3
 800d7b2:	f003 030f 	and.w	r3, r3, #15
 800d7b6:	b2da      	uxtb	r2, r3
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7c0:	0e1b      	lsrs	r3, r3, #24
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	f003 0303 	and.w	r3, r3, #3
 800d7c8:	b2da      	uxtb	r2, r3
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7d2:	0c1b      	lsrs	r3, r3, #16
 800d7d4:	b2da      	uxtb	r2, r3
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7de:	0a1b      	lsrs	r3, r3, #8
 800d7e0:	b2da      	uxtb	r2, r3
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7ea:	b2da      	uxtb	r2, r3
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d7f4:	0d1b      	lsrs	r3, r3, #20
 800d7f6:	b29a      	uxth	r2, r3
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d800:	0c1b      	lsrs	r3, r3, #16
 800d802:	b2db      	uxtb	r3, r3
 800d804:	f003 030f 	and.w	r3, r3, #15
 800d808:	b2da      	uxtb	r2, r3
 800d80a:	683b      	ldr	r3, [r7, #0]
 800d80c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d812:	0bdb      	lsrs	r3, r3, #15
 800d814:	b2db      	uxtb	r3, r3
 800d816:	f003 0301 	and.w	r3, r3, #1
 800d81a:	b2da      	uxtb	r2, r3
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d824:	0b9b      	lsrs	r3, r3, #14
 800d826:	b2db      	uxtb	r3, r3
 800d828:	f003 0301 	and.w	r3, r3, #1
 800d82c:	b2da      	uxtb	r2, r3
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d836:	0b5b      	lsrs	r3, r3, #13
 800d838:	b2db      	uxtb	r3, r3
 800d83a:	f003 0301 	and.w	r3, r3, #1
 800d83e:	b2da      	uxtb	r2, r3
 800d840:	683b      	ldr	r3, [r7, #0]
 800d842:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d848:	0b1b      	lsrs	r3, r3, #12
 800d84a:	b2db      	uxtb	r3, r3
 800d84c:	f003 0301 	and.w	r3, r3, #1
 800d850:	b2da      	uxtb	r2, r3
 800d852:	683b      	ldr	r3, [r7, #0]
 800d854:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d856:	683b      	ldr	r3, [r7, #0]
 800d858:	2200      	movs	r2, #0
 800d85a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d860:	2b00      	cmp	r3, #0
 800d862:	d163      	bne.n	800d92c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d868:	009a      	lsls	r2, r3, #2
 800d86a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d86e:	4013      	ands	r3, r2
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800d874:	0f92      	lsrs	r2, r2, #30
 800d876:	431a      	orrs	r2, r3
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d880:	0edb      	lsrs	r3, r3, #27
 800d882:	b2db      	uxtb	r3, r3
 800d884:	f003 0307 	and.w	r3, r3, #7
 800d888:	b2da      	uxtb	r2, r3
 800d88a:	683b      	ldr	r3, [r7, #0]
 800d88c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d892:	0e1b      	lsrs	r3, r3, #24
 800d894:	b2db      	uxtb	r3, r3
 800d896:	f003 0307 	and.w	r3, r3, #7
 800d89a:	b2da      	uxtb	r2, r3
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8a4:	0d5b      	lsrs	r3, r3, #21
 800d8a6:	b2db      	uxtb	r3, r3
 800d8a8:	f003 0307 	and.w	r3, r3, #7
 800d8ac:	b2da      	uxtb	r2, r3
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8b6:	0c9b      	lsrs	r3, r3, #18
 800d8b8:	b2db      	uxtb	r3, r3
 800d8ba:	f003 0307 	and.w	r3, r3, #7
 800d8be:	b2da      	uxtb	r2, r3
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d8c8:	0bdb      	lsrs	r3, r3, #15
 800d8ca:	b2db      	uxtb	r3, r3
 800d8cc:	f003 0307 	and.w	r3, r3, #7
 800d8d0:	b2da      	uxtb	r2, r3
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	691b      	ldr	r3, [r3, #16]
 800d8da:	1c5a      	adds	r2, r3, #1
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	7e1b      	ldrb	r3, [r3, #24]
 800d8e4:	b2db      	uxtb	r3, r3
 800d8e6:	f003 0307 	and.w	r3, r3, #7
 800d8ea:	3302      	adds	r3, #2
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d8f2:	687a      	ldr	r2, [r7, #4]
 800d8f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800d8f6:	fb03 f202 	mul.w	r2, r3, r2
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	7a1b      	ldrb	r3, [r3, #8]
 800d902:	b2db      	uxtb	r3, r3
 800d904:	f003 030f 	and.w	r3, r3, #15
 800d908:	2201      	movs	r2, #1
 800d90a:	409a      	lsls	r2, r3
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d914:	687a      	ldr	r2, [r7, #4]
 800d916:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d918:	0a52      	lsrs	r2, r2, #9
 800d91a:	fb03 f202 	mul.w	r2, r3, r2
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d928:	655a      	str	r2, [r3, #84]	; 0x54
 800d92a:	e031      	b.n	800d990 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d930:	2b01      	cmp	r3, #1
 800d932:	d11d      	bne.n	800d970 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d938:	041b      	lsls	r3, r3, #16
 800d93a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d942:	0c1b      	lsrs	r3, r3, #16
 800d944:	431a      	orrs	r2, r3
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	691b      	ldr	r3, [r3, #16]
 800d94e:	3301      	adds	r3, #1
 800d950:	029a      	lsls	r2, r3, #10
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d964:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	655a      	str	r2, [r3, #84]	; 0x54
 800d96e:	e00f      	b.n	800d990 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	4a58      	ldr	r2, [pc, #352]	; (800dad8 <HAL_SD_GetCardCSD+0x344>)
 800d976:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d97c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2201      	movs	r2, #1
 800d988:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d98c:	2301      	movs	r3, #1
 800d98e:	e09d      	b.n	800dacc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d994:	0b9b      	lsrs	r3, r3, #14
 800d996:	b2db      	uxtb	r3, r3
 800d998:	f003 0301 	and.w	r3, r3, #1
 800d99c:	b2da      	uxtb	r2, r3
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9a6:	09db      	lsrs	r3, r3, #7
 800d9a8:	b2db      	uxtb	r3, r3
 800d9aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9ae:	b2da      	uxtb	r2, r3
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9be:	b2da      	uxtb	r2, r3
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9c8:	0fdb      	lsrs	r3, r3, #31
 800d9ca:	b2da      	uxtb	r2, r3
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9d4:	0f5b      	lsrs	r3, r3, #29
 800d9d6:	b2db      	uxtb	r3, r3
 800d9d8:	f003 0303 	and.w	r3, r3, #3
 800d9dc:	b2da      	uxtb	r2, r3
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9e6:	0e9b      	lsrs	r3, r3, #26
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	f003 0307 	and.w	r3, r3, #7
 800d9ee:	b2da      	uxtb	r2, r3
 800d9f0:	683b      	ldr	r3, [r7, #0]
 800d9f2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9f8:	0d9b      	lsrs	r3, r3, #22
 800d9fa:	b2db      	uxtb	r3, r3
 800d9fc:	f003 030f 	and.w	r3, r3, #15
 800da00:	b2da      	uxtb	r2, r3
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da0a:	0d5b      	lsrs	r3, r3, #21
 800da0c:	b2db      	uxtb	r3, r3
 800da0e:	f003 0301 	and.w	r3, r3, #1
 800da12:	b2da      	uxtb	r2, r3
 800da14:	683b      	ldr	r3, [r7, #0]
 800da16:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	2200      	movs	r2, #0
 800da1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da26:	0c1b      	lsrs	r3, r3, #16
 800da28:	b2db      	uxtb	r3, r3
 800da2a:	f003 0301 	and.w	r3, r3, #1
 800da2e:	b2da      	uxtb	r2, r3
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da3a:	0bdb      	lsrs	r3, r3, #15
 800da3c:	b2db      	uxtb	r3, r3
 800da3e:	f003 0301 	and.w	r3, r3, #1
 800da42:	b2da      	uxtb	r2, r3
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da4e:	0b9b      	lsrs	r3, r3, #14
 800da50:	b2db      	uxtb	r3, r3
 800da52:	f003 0301 	and.w	r3, r3, #1
 800da56:	b2da      	uxtb	r2, r3
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da62:	0b5b      	lsrs	r3, r3, #13
 800da64:	b2db      	uxtb	r3, r3
 800da66:	f003 0301 	and.w	r3, r3, #1
 800da6a:	b2da      	uxtb	r2, r3
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da76:	0b1b      	lsrs	r3, r3, #12
 800da78:	b2db      	uxtb	r3, r3
 800da7a:	f003 0301 	and.w	r3, r3, #1
 800da7e:	b2da      	uxtb	r2, r3
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da8a:	0a9b      	lsrs	r3, r3, #10
 800da8c:	b2db      	uxtb	r3, r3
 800da8e:	f003 0303 	and.w	r3, r3, #3
 800da92:	b2da      	uxtb	r2, r3
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da9e:	0a1b      	lsrs	r3, r3, #8
 800daa0:	b2db      	uxtb	r3, r3
 800daa2:	f003 0303 	and.w	r3, r3, #3
 800daa6:	b2da      	uxtb	r2, r3
 800daa8:	683b      	ldr	r3, [r7, #0]
 800daaa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dab2:	085b      	lsrs	r3, r3, #1
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daba:	b2da      	uxtb	r2, r3
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	2201      	movs	r2, #1
 800dac6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800daca:	2300      	movs	r3, #0
}
 800dacc:	4618      	mov	r0, r3
 800dace:	370c      	adds	r7, #12
 800dad0:	46bd      	mov	sp, r7
 800dad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad6:	4770      	bx	lr
 800dad8:	1fe00fff 	.word	0x1fe00fff

0800dadc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b094      	sub	sp, #80	; 0x50
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
 800dae4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dae6:	2300      	movs	r3, #0
 800dae8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800daf2:	b2db      	uxtb	r3, r3
 800daf4:	2b03      	cmp	r3, #3
 800daf6:	d101      	bne.n	800dafc <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800daf8:	2301      	movs	r3, #1
 800dafa:	e0a7      	b.n	800dc4c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dafc:	f107 0308 	add.w	r3, r7, #8
 800db00:	4619      	mov	r1, r3
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f000 fb62 	bl	800e1cc <SD_SendSDStatus>
 800db08:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800db0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d011      	beq.n	800db34 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	4a4f      	ldr	r2, [pc, #316]	; (800dc54 <HAL_SD_GetCardStatus+0x178>)
 800db16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800db1e:	431a      	orrs	r2, r3
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2201      	movs	r2, #1
 800db28:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800db2c:	2301      	movs	r3, #1
 800db2e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800db32:	e070      	b.n	800dc16 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	099b      	lsrs	r3, r3, #6
 800db38:	b2db      	uxtb	r3, r3
 800db3a:	f003 0303 	and.w	r3, r3, #3
 800db3e:	b2da      	uxtb	r2, r3
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	095b      	lsrs	r3, r3, #5
 800db48:	b2db      	uxtb	r3, r3
 800db4a:	f003 0301 	and.w	r3, r3, #1
 800db4e:	b2da      	uxtb	r2, r3
 800db50:	683b      	ldr	r3, [r7, #0]
 800db52:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	0a1b      	lsrs	r3, r3, #8
 800db58:	b29b      	uxth	r3, r3
 800db5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800db5e:	b29a      	uxth	r2, r3
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	0e1b      	lsrs	r3, r3, #24
 800db64:	b29b      	uxth	r3, r3
 800db66:	4313      	orrs	r3, r2
 800db68:	b29a      	uxth	r2, r3
 800db6a:	683b      	ldr	r3, [r7, #0]
 800db6c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	061a      	lsls	r2, r3, #24
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	021b      	lsls	r3, r3, #8
 800db76:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800db7a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	0a1b      	lsrs	r3, r3, #8
 800db80:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800db84:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	0e1b      	lsrs	r3, r3, #24
 800db8a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800db90:	693b      	ldr	r3, [r7, #16]
 800db92:	b2da      	uxtb	r2, r3
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800db98:	693b      	ldr	r3, [r7, #16]
 800db9a:	0a1b      	lsrs	r3, r3, #8
 800db9c:	b2da      	uxtb	r2, r3
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	0d1b      	lsrs	r3, r3, #20
 800dba6:	b2db      	uxtb	r3, r3
 800dba8:	f003 030f 	and.w	r3, r3, #15
 800dbac:	b2da      	uxtb	r2, r3
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	0c1b      	lsrs	r3, r3, #16
 800dbb6:	b29b      	uxth	r3, r3
 800dbb8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dbbc:	b29a      	uxth	r2, r3
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	b29b      	uxth	r3, r3
 800dbc2:	b2db      	uxtb	r3, r3
 800dbc4:	b29b      	uxth	r3, r3
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	b29a      	uxth	r2, r3
 800dbca:	683b      	ldr	r3, [r7, #0]
 800dbcc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	0a9b      	lsrs	r3, r3, #10
 800dbd2:	b2db      	uxtb	r3, r3
 800dbd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbd8:	b2da      	uxtb	r2, r3
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	0a1b      	lsrs	r3, r3, #8
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	f003 0303 	and.w	r3, r3, #3
 800dbe8:	b2da      	uxtb	r2, r3
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dbee:	697b      	ldr	r3, [r7, #20]
 800dbf0:	091b      	lsrs	r3, r3, #4
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	f003 030f 	and.w	r3, r3, #15
 800dbf8:	b2da      	uxtb	r2, r3
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	b2db      	uxtb	r3, r3
 800dc02:	f003 030f 	and.w	r3, r3, #15
 800dc06:	b2da      	uxtb	r2, r3
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800dc0c:	69bb      	ldr	r3, [r7, #24]
 800dc0e:	0e1b      	lsrs	r3, r3, #24
 800dc10:	b2da      	uxtb	r2, r3
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f004 f98a 	bl	8011f38 <SDMMC_CmdBlockLength>
 800dc24:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800dc26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d00d      	beq.n	800dc48 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	4a08      	ldr	r2, [pc, #32]	; (800dc54 <HAL_SD_GetCardStatus+0x178>)
 800dc32:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc38:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	2201      	movs	r2, #1
 800dc3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800dc42:	2301      	movs	r3, #1
 800dc44:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800dc48:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3750      	adds	r7, #80	; 0x50
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}
 800dc54:	1fe00fff 	.word	0x1fe00fff

0800dc58 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dc58:	b480      	push	{r7}
 800dc5a:	b083      	sub	sp, #12
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
 800dc60:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc66:	683b      	ldr	r3, [r7, #0]
 800dc68:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc96:	683b      	ldr	r3, [r7, #0]
 800dc98:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800dca2:	2300      	movs	r3, #0
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	370c      	adds	r7, #12
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcae:	4770      	bx	lr

0800dcb0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dcb0:	b590      	push	{r4, r7, lr}
 800dcb2:	b08d      	sub	sp, #52	; 0x34
 800dcb4:	af02      	add	r7, sp, #8
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2203      	movs	r2, #3
 800dcc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dccc:	2b03      	cmp	r3, #3
 800dcce:	d02e      	beq.n	800dd2e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800dcd0:	683b      	ldr	r3, [r7, #0]
 800dcd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dcd6:	d106      	bne.n	800dce6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcdc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	635a      	str	r2, [r3, #52]	; 0x34
 800dce4:	e029      	b.n	800dd3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800dcec:	d10a      	bne.n	800dd04 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800dcee:	6878      	ldr	r0, [r7, #4]
 800dcf0:	f000 fb64 	bl	800e3bc <SD_WideBus_Enable>
 800dcf4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dcfa:	6a3b      	ldr	r3, [r7, #32]
 800dcfc:	431a      	orrs	r2, r3
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	635a      	str	r2, [r3, #52]	; 0x34
 800dd02:	e01a      	b.n	800dd3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d10a      	bne.n	800dd20 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f000 fba1 	bl	800e452 <SD_WideBus_Disable>
 800dd10:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd16:	6a3b      	ldr	r3, [r7, #32]
 800dd18:	431a      	orrs	r2, r3
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	635a      	str	r2, [r3, #52]	; 0x34
 800dd1e:	e00c      	b.n	800dd3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd24:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	635a      	str	r2, [r3, #52]	; 0x34
 800dd2c:	e005      	b.n	800dd3a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd32:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d007      	beq.n	800dd52 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	4a5f      	ldr	r2, [pc, #380]	; (800dec4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800dd48:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dd50:	e096      	b.n	800de80 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800dd52:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800dd56:	f04f 0100 	mov.w	r1, #0
 800dd5a:	f7fd fea3 	bl	800baa4 <HAL_RCCEx_GetPeriphCLKFreq>
 800dd5e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800dd60:	69fb      	ldr	r3, [r7, #28]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f000 8083 	beq.w	800de6e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	685b      	ldr	r3, [r3, #4]
 800dd6c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	691b      	ldr	r3, [r3, #16]
 800dd7c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	695a      	ldr	r2, [r3, #20]
 800dd82:	69fb      	ldr	r3, [r7, #28]
 800dd84:	4950      	ldr	r1, [pc, #320]	; (800dec8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800dd86:	fba1 1303 	umull	r1, r3, r1, r3
 800dd8a:	0e1b      	lsrs	r3, r3, #24
 800dd8c:	429a      	cmp	r2, r3
 800dd8e:	d303      	bcc.n	800dd98 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	695b      	ldr	r3, [r3, #20]
 800dd94:	61bb      	str	r3, [r7, #24]
 800dd96:	e05a      	b.n	800de4e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dda0:	d103      	bne.n	800ddaa <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	695b      	ldr	r3, [r3, #20]
 800dda6:	61bb      	str	r3, [r7, #24]
 800dda8:	e051      	b.n	800de4e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddb2:	d126      	bne.n	800de02 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	695b      	ldr	r3, [r3, #20]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d10e      	bne.n	800ddda <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ddbc:	69fb      	ldr	r3, [r7, #28]
 800ddbe:	4a43      	ldr	r2, [pc, #268]	; (800decc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d906      	bls.n	800ddd2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ddc4:	69fb      	ldr	r3, [r7, #28]
 800ddc6:	4a40      	ldr	r2, [pc, #256]	; (800dec8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ddc8:	fba2 2303 	umull	r2, r3, r2, r3
 800ddcc:	0e5b      	lsrs	r3, r3, #25
 800ddce:	61bb      	str	r3, [r7, #24]
 800ddd0:	e03d      	b.n	800de4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	695b      	ldr	r3, [r3, #20]
 800ddd6:	61bb      	str	r3, [r7, #24]
 800ddd8:	e039      	b.n	800de4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	695b      	ldr	r3, [r3, #20]
 800ddde:	005b      	lsls	r3, r3, #1
 800dde0:	69fa      	ldr	r2, [r7, #28]
 800dde2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dde6:	4a39      	ldr	r2, [pc, #228]	; (800decc <HAL_SD_ConfigWideBusOperation+0x21c>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d906      	bls.n	800ddfa <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ddec:	69fb      	ldr	r3, [r7, #28]
 800ddee:	4a36      	ldr	r2, [pc, #216]	; (800dec8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800ddf0:	fba2 2303 	umull	r2, r3, r2, r3
 800ddf4:	0e5b      	lsrs	r3, r3, #25
 800ddf6:	61bb      	str	r3, [r7, #24]
 800ddf8:	e029      	b.n	800de4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	695b      	ldr	r3, [r3, #20]
 800ddfe:	61bb      	str	r3, [r7, #24]
 800de00:	e025      	b.n	800de4e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	695b      	ldr	r3, [r3, #20]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d10e      	bne.n	800de28 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800de0a:	69fb      	ldr	r3, [r7, #28]
 800de0c:	4a30      	ldr	r2, [pc, #192]	; (800ded0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800de0e:	4293      	cmp	r3, r2
 800de10:	d906      	bls.n	800de20 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800de12:	69fb      	ldr	r3, [r7, #28]
 800de14:	4a2c      	ldr	r2, [pc, #176]	; (800dec8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800de16:	fba2 2303 	umull	r2, r3, r2, r3
 800de1a:	0e1b      	lsrs	r3, r3, #24
 800de1c:	61bb      	str	r3, [r7, #24]
 800de1e:	e016      	b.n	800de4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	695b      	ldr	r3, [r3, #20]
 800de24:	61bb      	str	r3, [r7, #24]
 800de26:	e012      	b.n	800de4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	695b      	ldr	r3, [r3, #20]
 800de2c:	005b      	lsls	r3, r3, #1
 800de2e:	69fa      	ldr	r2, [r7, #28]
 800de30:	fbb2 f3f3 	udiv	r3, r2, r3
 800de34:	4a26      	ldr	r2, [pc, #152]	; (800ded0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800de36:	4293      	cmp	r3, r2
 800de38:	d906      	bls.n	800de48 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800de3a:	69fb      	ldr	r3, [r7, #28]
 800de3c:	4a22      	ldr	r2, [pc, #136]	; (800dec8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800de3e:	fba2 2303 	umull	r2, r3, r2, r3
 800de42:	0e1b      	lsrs	r3, r3, #24
 800de44:	61bb      	str	r3, [r7, #24]
 800de46:	e002      	b.n	800de4e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	695b      	ldr	r3, [r3, #20]
 800de4c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681c      	ldr	r4, [r3, #0]
 800de52:	466a      	mov	r2, sp
 800de54:	f107 0314 	add.w	r3, r7, #20
 800de58:	e893 0003 	ldmia.w	r3, {r0, r1}
 800de5c:	e882 0003 	stmia.w	r2, {r0, r1}
 800de60:	f107 0308 	add.w	r3, r7, #8
 800de64:	cb0e      	ldmia	r3, {r1, r2, r3}
 800de66:	4620      	mov	r0, r4
 800de68:	f003 ff88 	bl	8011d7c <SDMMC_Init>
 800de6c:	e008      	b.n	800de80 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800de7a:	2301      	movs	r3, #1
 800de7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f44f 7100 	mov.w	r1, #512	; 0x200
 800de88:	4618      	mov	r0, r3
 800de8a:	f004 f855 	bl	8011f38 <SDMMC_CmdBlockLength>
 800de8e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800de90:	6a3b      	ldr	r3, [r7, #32]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d00c      	beq.n	800deb0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	4a0a      	ldr	r2, [pc, #40]	; (800dec4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800de9c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dea2:	6a3b      	ldr	r3, [r7, #32]
 800dea4:	431a      	orrs	r2, r3
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800deaa:	2301      	movs	r3, #1
 800deac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2201      	movs	r2, #1
 800deb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800deb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800debc:	4618      	mov	r0, r3
 800debe:	372c      	adds	r7, #44	; 0x2c
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd90      	pop	{r4, r7, pc}
 800dec4:	1fe00fff 	.word	0x1fe00fff
 800dec8:	55e63b89 	.word	0x55e63b89
 800decc:	02faf080 	.word	0x02faf080
 800ded0:	017d7840 	.word	0x017d7840

0800ded4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b086      	sub	sp, #24
 800ded8:	af00      	add	r7, sp, #0
 800deda:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800dedc:	2300      	movs	r3, #0
 800dede:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800dee0:	f107 030c 	add.w	r3, r7, #12
 800dee4:	4619      	mov	r1, r3
 800dee6:	6878      	ldr	r0, [r7, #4]
 800dee8:	f000 fa40 	bl	800e36c <SD_SendStatus>
 800deec:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800deee:	697b      	ldr	r3, [r7, #20]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d005      	beq.n	800df00 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	431a      	orrs	r2, r3
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	0a5b      	lsrs	r3, r3, #9
 800df04:	f003 030f 	and.w	r3, r3, #15
 800df08:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800df0a:	693b      	ldr	r3, [r7, #16]
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3718      	adds	r7, #24
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}

0800df14 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b090      	sub	sp, #64	; 0x40
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800df1c:	2300      	movs	r3, #0
 800df1e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800df20:	f7f5 fd4e 	bl	80039c0 <HAL_GetTick>
 800df24:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	4618      	mov	r0, r3
 800df2c:	f003 ff7f 	bl	8011e2e <SDMMC_GetPowerState>
 800df30:	4603      	mov	r3, r0
 800df32:	2b00      	cmp	r3, #0
 800df34:	d102      	bne.n	800df3c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800df36:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800df3a:	e0b5      	b.n	800e0a8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df40:	2b03      	cmp	r3, #3
 800df42:	d02e      	beq.n	800dfa2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4618      	mov	r0, r3
 800df4a:	f004 f9ca 	bl	80122e2 <SDMMC_CmdSendCID>
 800df4e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800df50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df52:	2b00      	cmp	r3, #0
 800df54:	d001      	beq.n	800df5a <SD_InitCard+0x46>
    {
      return errorstate;
 800df56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df58:	e0a6      	b.n	800e0a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	2100      	movs	r1, #0
 800df60:	4618      	mov	r0, r3
 800df62:	f003 ffaa 	bl	8011eba <SDMMC_GetResponse>
 800df66:	4602      	mov	r2, r0
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	2104      	movs	r1, #4
 800df72:	4618      	mov	r0, r3
 800df74:	f003 ffa1 	bl	8011eba <SDMMC_GetResponse>
 800df78:	4602      	mov	r2, r0
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	2108      	movs	r1, #8
 800df84:	4618      	mov	r0, r3
 800df86:	f003 ff98 	bl	8011eba <SDMMC_GetResponse>
 800df8a:	4602      	mov	r2, r0
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	210c      	movs	r1, #12
 800df96:	4618      	mov	r0, r3
 800df98:	f003 ff8f 	bl	8011eba <SDMMC_GetResponse>
 800df9c:	4602      	mov	r2, r0
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfa6:	2b03      	cmp	r3, #3
 800dfa8:	d01d      	beq.n	800dfe6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800dfaa:	e019      	b.n	800dfe0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f107 020a 	add.w	r2, r7, #10
 800dfb4:	4611      	mov	r1, r2
 800dfb6:	4618      	mov	r0, r3
 800dfb8:	f004 f9d2 	bl	8012360 <SDMMC_CmdSetRelAdd>
 800dfbc:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800dfbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d001      	beq.n	800dfc8 <SD_InitCard+0xb4>
      {
        return errorstate;
 800dfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc6:	e06f      	b.n	800e0a8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800dfc8:	f7f5 fcfa 	bl	80039c0 <HAL_GetTick>
 800dfcc:	4602      	mov	r2, r0
 800dfce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfd0:	1ad3      	subs	r3, r2, r3
 800dfd2:	f241 3287 	movw	r2, #4999	; 0x1387
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d902      	bls.n	800dfe0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800dfda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dfde:	e063      	b.n	800e0a8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800dfe0:	897b      	ldrh	r3, [r7, #10]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d0e2      	beq.n	800dfac <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfea:	2b03      	cmp	r3, #3
 800dfec:	d036      	beq.n	800e05c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800dfee:	897b      	ldrh	r3, [r7, #10]
 800dff0:	461a      	mov	r2, r3
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681a      	ldr	r2, [r3, #0]
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dffe:	041b      	lsls	r3, r3, #16
 800e000:	4619      	mov	r1, r3
 800e002:	4610      	mov	r0, r2
 800e004:	f004 f98c 	bl	8012320 <SDMMC_CmdSendCSD>
 800e008:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d001      	beq.n	800e014 <SD_InitCard+0x100>
    {
      return errorstate;
 800e010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e012:	e049      	b.n	800e0a8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	2100      	movs	r1, #0
 800e01a:	4618      	mov	r0, r3
 800e01c:	f003 ff4d 	bl	8011eba <SDMMC_GetResponse>
 800e020:	4602      	mov	r2, r0
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	2104      	movs	r1, #4
 800e02c:	4618      	mov	r0, r3
 800e02e:	f003 ff44 	bl	8011eba <SDMMC_GetResponse>
 800e032:	4602      	mov	r2, r0
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	2108      	movs	r1, #8
 800e03e:	4618      	mov	r0, r3
 800e040:	f003 ff3b 	bl	8011eba <SDMMC_GetResponse>
 800e044:	4602      	mov	r2, r0
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	210c      	movs	r1, #12
 800e050:	4618      	mov	r0, r3
 800e052:	f003 ff32 	bl	8011eba <SDMMC_GetResponse>
 800e056:	4602      	mov	r2, r0
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	2104      	movs	r1, #4
 800e062:	4618      	mov	r0, r3
 800e064:	f003 ff29 	bl	8011eba <SDMMC_GetResponse>
 800e068:	4603      	mov	r3, r0
 800e06a:	0d1a      	lsrs	r2, r3, #20
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e070:	f107 030c 	add.w	r3, r7, #12
 800e074:	4619      	mov	r1, r3
 800e076:	6878      	ldr	r0, [r7, #4]
 800e078:	f7ff fb8c 	bl	800d794 <HAL_SD_GetCardCSD>
 800e07c:	4603      	mov	r3, r0
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d002      	beq.n	800e088 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e082:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e086:	e00f      	b.n	800e0a8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681a      	ldr	r2, [r3, #0]
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e090:	041b      	lsls	r3, r3, #16
 800e092:	4619      	mov	r1, r3
 800e094:	4610      	mov	r0, r2
 800e096:	f004 f83b 	bl	8012110 <SDMMC_CmdSelDesel>
 800e09a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e09c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	d001      	beq.n	800e0a6 <SD_InitCard+0x192>
  {
    return errorstate;
 800e0a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0a4:	e000      	b.n	800e0a8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e0a6:	2300      	movs	r3, #0
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3740      	adds	r7, #64	; 0x40
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}

0800e0b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e0b0:	b580      	push	{r7, lr}
 800e0b2:	b086      	sub	sp, #24
 800e0b4:	af00      	add	r7, sp, #0
 800e0b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e0b8:	2300      	movs	r3, #0
 800e0ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e0bc:	2300      	movs	r3, #0
 800e0be:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f004 f844 	bl	8012156 <SDMMC_CmdGoIdleState>
 800e0ce:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e0d0:	68fb      	ldr	r3, [r7, #12]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d001      	beq.n	800e0da <SD_PowerON+0x2a>
  {
    return errorstate;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	e072      	b.n	800e1c0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f004 f857 	bl	8012192 <SDMMC_CmdOperCond>
 800e0e4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e0ec:	d10d      	bne.n	800e10a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	f004 f82c 	bl	8012156 <SDMMC_CmdGoIdleState>
 800e0fe:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d004      	beq.n	800e110 <SD_PowerON+0x60>
    {
      return errorstate;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	e05a      	b.n	800e1c0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2201      	movs	r2, #1
 800e10e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e114:	2b01      	cmp	r3, #1
 800e116:	d137      	bne.n	800e188 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2100      	movs	r1, #0
 800e11e:	4618      	mov	r0, r3
 800e120:	f004 f857 	bl	80121d2 <SDMMC_CmdAppCommand>
 800e124:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d02d      	beq.n	800e188 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e12c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e130:	e046      	b.n	800e1c0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	2100      	movs	r1, #0
 800e138:	4618      	mov	r0, r3
 800e13a:	f004 f84a 	bl	80121d2 <SDMMC_CmdAppCommand>
 800e13e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d001      	beq.n	800e14a <SD_PowerON+0x9a>
    {
      return errorstate;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	e03a      	b.n	800e1c0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	491e      	ldr	r1, [pc, #120]	; (800e1c8 <SD_PowerON+0x118>)
 800e150:	4618      	mov	r0, r3
 800e152:	f004 f861 	bl	8012218 <SDMMC_CmdAppOperCommand>
 800e156:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d002      	beq.n	800e164 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e15e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e162:	e02d      	b.n	800e1c0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	2100      	movs	r1, #0
 800e16a:	4618      	mov	r0, r3
 800e16c:	f003 fea5 	bl	8011eba <SDMMC_GetResponse>
 800e170:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	0fdb      	lsrs	r3, r3, #31
 800e176:	2b01      	cmp	r3, #1
 800e178:	d101      	bne.n	800e17e <SD_PowerON+0xce>
 800e17a:	2301      	movs	r3, #1
 800e17c:	e000      	b.n	800e180 <SD_PowerON+0xd0>
 800e17e:	2300      	movs	r3, #0
 800e180:	613b      	str	r3, [r7, #16]

    count++;
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	3301      	adds	r3, #1
 800e186:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e18e:	4293      	cmp	r3, r2
 800e190:	d802      	bhi.n	800e198 <SD_PowerON+0xe8>
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	2b00      	cmp	r3, #0
 800e196:	d0cc      	beq.n	800e132 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e19e:	4293      	cmp	r3, r2
 800e1a0:	d902      	bls.n	800e1a8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e1a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e1a6:	e00b      	b.n	800e1c0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d002      	beq.n	800e1be <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2201      	movs	r2, #1
 800e1bc:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e1be:	2300      	movs	r3, #0
}
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	3718      	adds	r7, #24
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}
 800e1c8:	c1100000 	.word	0xc1100000

0800e1cc <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b08c      	sub	sp, #48	; 0x30
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e1d6:	f7f5 fbf3 	bl	80039c0 <HAL_GetTick>
 800e1da:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	2100      	movs	r1, #0
 800e1e6:	4618      	mov	r0, r3
 800e1e8:	f003 fe67 	bl	8011eba <SDMMC_GetResponse>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e1f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e1f6:	d102      	bne.n	800e1fe <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e1f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e1fc:	e0b0      	b.n	800e360 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2140      	movs	r1, #64	; 0x40
 800e204:	4618      	mov	r0, r3
 800e206:	f003 fe97 	bl	8011f38 <SDMMC_CmdBlockLength>
 800e20a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e20c:	6a3b      	ldr	r3, [r7, #32]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d005      	beq.n	800e21e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e21a:	6a3b      	ldr	r3, [r7, #32]
 800e21c:	e0a0      	b.n	800e360 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681a      	ldr	r2, [r3, #0]
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e226:	041b      	lsls	r3, r3, #16
 800e228:	4619      	mov	r1, r3
 800e22a:	4610      	mov	r0, r2
 800e22c:	f003 ffd1 	bl	80121d2 <SDMMC_CmdAppCommand>
 800e230:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e232:	6a3b      	ldr	r3, [r7, #32]
 800e234:	2b00      	cmp	r3, #0
 800e236:	d005      	beq.n	800e244 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e240:	6a3b      	ldr	r3, [r7, #32]
 800e242:	e08d      	b.n	800e360 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e244:	f04f 33ff 	mov.w	r3, #4294967295
 800e248:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e24a:	2340      	movs	r3, #64	; 0x40
 800e24c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e24e:	2360      	movs	r3, #96	; 0x60
 800e250:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e252:	2302      	movs	r3, #2
 800e254:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e256:	2300      	movs	r3, #0
 800e258:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e25a:	2301      	movs	r3, #1
 800e25c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	f107 0208 	add.w	r2, r7, #8
 800e266:	4611      	mov	r1, r2
 800e268:	4618      	mov	r0, r3
 800e26a:	f003 fe39 	bl	8011ee0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	4618      	mov	r0, r3
 800e274:	f004 f8b9 	bl	80123ea <SDMMC_CmdStatusRegister>
 800e278:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e27a:	6a3b      	ldr	r3, [r7, #32]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d02b      	beq.n	800e2d8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e288:	6a3b      	ldr	r3, [r7, #32]
 800e28a:	e069      	b.n	800e360 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e292:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e296:	2b00      	cmp	r3, #0
 800e298:	d013      	beq.n	800e2c2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e29a:	2300      	movs	r3, #0
 800e29c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e29e:	e00d      	b.n	800e2bc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	f003 fd93 	bl	8011dd0 <SDMMC_ReadFIFO>
 800e2aa:	4602      	mov	r2, r0
 800e2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2ae:	601a      	str	r2, [r3, #0]
        pData++;
 800e2b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2b2:	3304      	adds	r3, #4
 800e2b4:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2be:	2b07      	cmp	r3, #7
 800e2c0:	d9ee      	bls.n	800e2a0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e2c2:	f7f5 fb7d 	bl	80039c0 <HAL_GetTick>
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ca:	1ad3      	subs	r3, r2, r3
 800e2cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2d0:	d102      	bne.n	800e2d8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e2d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2d6:	e043      	b.n	800e360 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2de:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d0d2      	beq.n	800e28c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ec:	f003 0308 	and.w	r3, r3, #8
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d001      	beq.n	800e2f8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e2f4:	2308      	movs	r3, #8
 800e2f6:	e033      	b.n	800e360 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2fe:	f003 0302 	and.w	r3, r3, #2
 800e302:	2b00      	cmp	r3, #0
 800e304:	d001      	beq.n	800e30a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e306:	2302      	movs	r3, #2
 800e308:	e02a      	b.n	800e360 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e310:	f003 0320 	and.w	r3, r3, #32
 800e314:	2b00      	cmp	r3, #0
 800e316:	d017      	beq.n	800e348 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e318:	2320      	movs	r3, #32
 800e31a:	e021      	b.n	800e360 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4618      	mov	r0, r3
 800e322:	f003 fd55 	bl	8011dd0 <SDMMC_ReadFIFO>
 800e326:	4602      	mov	r2, r0
 800e328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32a:	601a      	str	r2, [r3, #0]
    pData++;
 800e32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e32e:	3304      	adds	r3, #4
 800e330:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e332:	f7f5 fb45 	bl	80039c0 <HAL_GetTick>
 800e336:	4602      	mov	r2, r0
 800e338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33a:	1ad3      	subs	r3, r2, r3
 800e33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e340:	d102      	bne.n	800e348 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e342:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e346:	e00b      	b.n	800e360 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e34e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e352:	2b00      	cmp	r3, #0
 800e354:	d1e2      	bne.n	800e31c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	4a03      	ldr	r2, [pc, #12]	; (800e368 <SD_SendSDStatus+0x19c>)
 800e35c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e35e:	2300      	movs	r3, #0
}
 800e360:	4618      	mov	r0, r3
 800e362:	3730      	adds	r7, #48	; 0x30
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	18000f3a 	.word	0x18000f3a

0800e36c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b084      	sub	sp, #16
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d102      	bne.n	800e382 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e37c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e380:	e018      	b.n	800e3b4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681a      	ldr	r2, [r3, #0]
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e38a:	041b      	lsls	r3, r3, #16
 800e38c:	4619      	mov	r1, r3
 800e38e:	4610      	mov	r0, r2
 800e390:	f004 f808 	bl	80123a4 <SDMMC_CmdSendStatus>
 800e394:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d001      	beq.n	800e3a0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	e009      	b.n	800e3b4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	2100      	movs	r1, #0
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	f003 fd87 	bl	8011eba <SDMMC_GetResponse>
 800e3ac:	4602      	mov	r2, r0
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e3b2:	2300      	movs	r3, #0
}
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3710      	adds	r7, #16
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b086      	sub	sp, #24
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	60fb      	str	r3, [r7, #12]
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f003 fd71 	bl	8011eba <SDMMC_GetResponse>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e3de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e3e2:	d102      	bne.n	800e3ea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e3e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e3e8:	e02f      	b.n	800e44a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e3ea:	f107 030c 	add.w	r3, r7, #12
 800e3ee:	4619      	mov	r1, r3
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f000 f879 	bl	800e4e8 <SD_FindSCR>
 800e3f6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d001      	beq.n	800e402 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	e023      	b.n	800e44a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e402:	693b      	ldr	r3, [r7, #16]
 800e404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d01c      	beq.n	800e446 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	681a      	ldr	r2, [r3, #0]
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e414:	041b      	lsls	r3, r3, #16
 800e416:	4619      	mov	r1, r3
 800e418:	4610      	mov	r0, r2
 800e41a:	f003 feda 	bl	80121d2 <SDMMC_CmdAppCommand>
 800e41e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d001      	beq.n	800e42a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	e00f      	b.n	800e44a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	2102      	movs	r1, #2
 800e430:	4618      	mov	r0, r3
 800e432:	f003 ff11 	bl	8012258 <SDMMC_CmdBusWidth>
 800e436:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e438:	697b      	ldr	r3, [r7, #20]
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d001      	beq.n	800e442 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e43e:	697b      	ldr	r3, [r7, #20]
 800e440:	e003      	b.n	800e44a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e442:	2300      	movs	r3, #0
 800e444:	e001      	b.n	800e44a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e446:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e44a:	4618      	mov	r0, r3
 800e44c:	3718      	adds	r7, #24
 800e44e:	46bd      	mov	sp, r7
 800e450:	bd80      	pop	{r7, pc}

0800e452 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e452:	b580      	push	{r7, lr}
 800e454:	b086      	sub	sp, #24
 800e456:	af00      	add	r7, sp, #0
 800e458:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e45a:	2300      	movs	r3, #0
 800e45c:	60fb      	str	r3, [r7, #12]
 800e45e:	2300      	movs	r3, #0
 800e460:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	2100      	movs	r1, #0
 800e468:	4618      	mov	r0, r3
 800e46a:	f003 fd26 	bl	8011eba <SDMMC_GetResponse>
 800e46e:	4603      	mov	r3, r0
 800e470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e474:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e478:	d102      	bne.n	800e480 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e47a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e47e:	e02f      	b.n	800e4e0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e480:	f107 030c 	add.w	r3, r7, #12
 800e484:	4619      	mov	r1, r3
 800e486:	6878      	ldr	r0, [r7, #4]
 800e488:	f000 f82e 	bl	800e4e8 <SD_FindSCR>
 800e48c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e48e:	697b      	ldr	r3, [r7, #20]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d001      	beq.n	800e498 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e494:	697b      	ldr	r3, [r7, #20]
 800e496:	e023      	b.n	800e4e0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e498:	693b      	ldr	r3, [r7, #16]
 800e49a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d01c      	beq.n	800e4dc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681a      	ldr	r2, [r3, #0]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4aa:	041b      	lsls	r3, r3, #16
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	4610      	mov	r0, r2
 800e4b0:	f003 fe8f 	bl	80121d2 <SDMMC_CmdAppCommand>
 800e4b4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d001      	beq.n	800e4c0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e4bc:	697b      	ldr	r3, [r7, #20]
 800e4be:	e00f      	b.n	800e4e0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	2100      	movs	r1, #0
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f003 fec6 	bl	8012258 <SDMMC_CmdBusWidth>
 800e4cc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d001      	beq.n	800e4d8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e4d4:	697b      	ldr	r3, [r7, #20]
 800e4d6:	e003      	b.n	800e4e0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	e001      	b.n	800e4e0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e4dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e4e0:	4618      	mov	r0, r3
 800e4e2:	3718      	adds	r7, #24
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}

0800e4e8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b08e      	sub	sp, #56	; 0x38
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e4f2:	f7f5 fa65 	bl	80039c0 <HAL_GetTick>
 800e4f6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	60bb      	str	r3, [r7, #8]
 800e500:	2300      	movs	r3, #0
 800e502:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	2108      	movs	r1, #8
 800e50e:	4618      	mov	r0, r3
 800e510:	f003 fd12 	bl	8011f38 <SDMMC_CmdBlockLength>
 800e514:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d001      	beq.n	800e520 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e51e:	e0ad      	b.n	800e67c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	681a      	ldr	r2, [r3, #0]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e528:	041b      	lsls	r3, r3, #16
 800e52a:	4619      	mov	r1, r3
 800e52c:	4610      	mov	r0, r2
 800e52e:	f003 fe50 	bl	80121d2 <SDMMC_CmdAppCommand>
 800e532:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e536:	2b00      	cmp	r3, #0
 800e538:	d001      	beq.n	800e53e <SD_FindSCR+0x56>
  {
    return errorstate;
 800e53a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e53c:	e09e      	b.n	800e67c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e53e:	f04f 33ff 	mov.w	r3, #4294967295
 800e542:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e544:	2308      	movs	r3, #8
 800e546:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e548:	2330      	movs	r3, #48	; 0x30
 800e54a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e54c:	2302      	movs	r3, #2
 800e54e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e550:	2300      	movs	r3, #0
 800e552:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e554:	2301      	movs	r3, #1
 800e556:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	f107 0210 	add.w	r2, r7, #16
 800e560:	4611      	mov	r1, r2
 800e562:	4618      	mov	r0, r3
 800e564:	f003 fcbc 	bl	8011ee0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	681b      	ldr	r3, [r3, #0]
 800e56c:	4618      	mov	r0, r3
 800e56e:	f003 fe96 	bl	801229e <SDMMC_CmdSendSCR>
 800e572:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800e574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e576:	2b00      	cmp	r3, #0
 800e578:	d027      	beq.n	800e5ca <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e57c:	e07e      	b.n	800e67c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d113      	bne.n	800e5b4 <SD_FindSCR+0xcc>
 800e58c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d110      	bne.n	800e5b4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	4618      	mov	r0, r3
 800e598:	f003 fc1a 	bl	8011dd0 <SDMMC_ReadFIFO>
 800e59c:	4603      	mov	r3, r0
 800e59e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	4618      	mov	r0, r3
 800e5a6:	f003 fc13 	bl	8011dd0 <SDMMC_ReadFIFO>
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	60fb      	str	r3, [r7, #12]
      index++;
 800e5ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e5b0:	3301      	adds	r3, #1
 800e5b2:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e5b4:	f7f5 fa04 	bl	80039c0 <HAL_GetTick>
 800e5b8:	4602      	mov	r2, r0
 800e5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5bc:	1ad3      	subs	r3, r2, r3
 800e5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5c2:	d102      	bne.n	800e5ca <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e5c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e5c8:	e058      	b.n	800e67c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5d0:	f240 532a 	movw	r3, #1322	; 0x52a
 800e5d4:	4013      	ands	r3, r2
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d0d1      	beq.n	800e57e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5e0:	f003 0308 	and.w	r3, r3, #8
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d005      	beq.n	800e5f4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	2208      	movs	r2, #8
 800e5ee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e5f0:	2308      	movs	r3, #8
 800e5f2:	e043      	b.n	800e67c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5fa:	f003 0302 	and.w	r3, r3, #2
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d005      	beq.n	800e60e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	2202      	movs	r2, #2
 800e608:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e60a:	2302      	movs	r3, #2
 800e60c:	e036      	b.n	800e67c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e614:	f003 0320 	and.w	r3, r3, #32
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d005      	beq.n	800e628 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	2220      	movs	r2, #32
 800e622:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e624:	2320      	movs	r3, #32
 800e626:	e029      	b.n	800e67c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	4a15      	ldr	r2, [pc, #84]	; (800e684 <SD_FindSCR+0x19c>)
 800e62e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	061a      	lsls	r2, r3, #24
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	021b      	lsls	r3, r3, #8
 800e638:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e63c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	0a1b      	lsrs	r3, r3, #8
 800e642:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e646:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	0e1b      	lsrs	r3, r3, #24
 800e64c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800e64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e650:	601a      	str	r2, [r3, #0]
    scr++;
 800e652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e654:	3304      	adds	r3, #4
 800e656:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e658:	68bb      	ldr	r3, [r7, #8]
 800e65a:	061a      	lsls	r2, r3, #24
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	021b      	lsls	r3, r3, #8
 800e660:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e664:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e666:	68bb      	ldr	r3, [r7, #8]
 800e668:	0a1b      	lsrs	r3, r3, #8
 800e66a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e66e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	0e1b      	lsrs	r3, r3, #24
 800e674:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e678:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e67a:	2300      	movs	r3, #0
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3738      	adds	r7, #56	; 0x38
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}
 800e684:	18000f3a 	.word	0x18000f3a

0800e688 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b086      	sub	sp, #24
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e694:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e69a:	2b1f      	cmp	r3, #31
 800e69c:	d936      	bls.n	800e70c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800e69e:	2300      	movs	r3, #0
 800e6a0:	617b      	str	r3, [r7, #20]
 800e6a2:	e027      	b.n	800e6f4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	4618      	mov	r0, r3
 800e6aa:	f003 fb91 	bl	8011dd0 <SDMMC_ReadFIFO>
 800e6ae:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	b2da      	uxtb	r2, r3
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6b8:	693b      	ldr	r3, [r7, #16]
 800e6ba:	3301      	adds	r3, #1
 800e6bc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	0a1b      	lsrs	r3, r3, #8
 800e6c2:	b2da      	uxtb	r2, r3
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6c8:	693b      	ldr	r3, [r7, #16]
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	0c1b      	lsrs	r3, r3, #16
 800e6d2:	b2da      	uxtb	r2, r3
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	3301      	adds	r3, #1
 800e6dc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	0e1b      	lsrs	r3, r3, #24
 800e6e2:	b2da      	uxtb	r2, r3
 800e6e4:	693b      	ldr	r3, [r7, #16]
 800e6e6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e6e8:	693b      	ldr	r3, [r7, #16]
 800e6ea:	3301      	adds	r3, #1
 800e6ec:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800e6ee:	697b      	ldr	r3, [r7, #20]
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	617b      	str	r3, [r7, #20]
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	2b07      	cmp	r3, #7
 800e6f8:	d9d4      	bls.n	800e6a4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	693a      	ldr	r2, [r7, #16]
 800e6fe:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e704:	f1a3 0220 	sub.w	r2, r3, #32
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800e70c:	bf00      	nop
 800e70e:	3718      	adds	r7, #24
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b086      	sub	sp, #24
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	69db      	ldr	r3, [r3, #28]
 800e720:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6a1b      	ldr	r3, [r3, #32]
 800e726:	2b1f      	cmp	r3, #31
 800e728:	d93a      	bls.n	800e7a0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800e72a:	2300      	movs	r3, #0
 800e72c:	617b      	str	r3, [r7, #20]
 800e72e:	e02b      	b.n	800e788 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e736:	693b      	ldr	r3, [r7, #16]
 800e738:	3301      	adds	r3, #1
 800e73a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e73c:	693b      	ldr	r3, [r7, #16]
 800e73e:	781b      	ldrb	r3, [r3, #0]
 800e740:	021a      	lsls	r2, r3, #8
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	4313      	orrs	r3, r2
 800e746:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	3301      	adds	r3, #1
 800e74c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	781b      	ldrb	r3, [r3, #0]
 800e752:	041a      	lsls	r2, r3, #16
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	4313      	orrs	r3, r2
 800e758:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e75a:	693b      	ldr	r3, [r7, #16]
 800e75c:	3301      	adds	r3, #1
 800e75e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	061a      	lsls	r2, r3, #24
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	4313      	orrs	r3, r2
 800e76a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e76c:	693b      	ldr	r3, [r7, #16]
 800e76e:	3301      	adds	r3, #1
 800e770:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	f107 020c 	add.w	r2, r7, #12
 800e77a:	4611      	mov	r1, r2
 800e77c:	4618      	mov	r0, r3
 800e77e:	f003 fb34 	bl	8011dea <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800e782:	697b      	ldr	r3, [r7, #20]
 800e784:	3301      	adds	r3, #1
 800e786:	617b      	str	r3, [r7, #20]
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	2b07      	cmp	r3, #7
 800e78c:	d9d0      	bls.n	800e730 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	693a      	ldr	r2, [r7, #16]
 800e792:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	6a1b      	ldr	r3, [r3, #32]
 800e798:	f1a3 0220 	sub.w	r2, r3, #32
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	621a      	str	r2, [r3, #32]
  }
}
 800e7a0:	bf00      	nop
 800e7a2:	3718      	adds	r7, #24
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	bd80      	pop	{r7, pc}

0800e7a8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e7b0:	bf00      	nop
 800e7b2:	370c      	adds	r7, #12
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr

0800e7bc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b083      	sub	sp, #12
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e7c4:	bf00      	nop
 800e7c6:	370c      	adds	r7, #12
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ce:	4770      	bx	lr

0800e7d0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	b083      	sub	sp, #12
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e7d8:	bf00      	nop
 800e7da:	370c      	adds	r7, #12
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e2:	4770      	bx	lr

0800e7e4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e7e4:	b480      	push	{r7}
 800e7e6:	b083      	sub	sp, #12
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e7ec:	bf00      	nop
 800e7ee:	370c      	adds	r7, #12
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr

0800e7f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b084      	sub	sp, #16
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d101      	bne.n	800e80a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e806:	2301      	movs	r3, #1
 800e808:	e10f      	b.n	800ea2a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2200      	movs	r2, #0
 800e80e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	4a87      	ldr	r2, [pc, #540]	; (800ea34 <HAL_SPI_Init+0x23c>)
 800e816:	4293      	cmp	r3, r2
 800e818:	d00f      	beq.n	800e83a <HAL_SPI_Init+0x42>
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	4a86      	ldr	r2, [pc, #536]	; (800ea38 <HAL_SPI_Init+0x240>)
 800e820:	4293      	cmp	r3, r2
 800e822:	d00a      	beq.n	800e83a <HAL_SPI_Init+0x42>
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	4a84      	ldr	r2, [pc, #528]	; (800ea3c <HAL_SPI_Init+0x244>)
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d005      	beq.n	800e83a <HAL_SPI_Init+0x42>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	68db      	ldr	r3, [r3, #12]
 800e832:	2b0f      	cmp	r3, #15
 800e834:	d901      	bls.n	800e83a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e836:	2301      	movs	r3, #1
 800e838:	e0f7      	b.n	800ea2a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e83a:	6878      	ldr	r0, [r7, #4]
 800e83c:	f000 fd5a 	bl	800f2f4 <SPI_GetPacketSize>
 800e840:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	4a7b      	ldr	r2, [pc, #492]	; (800ea34 <HAL_SPI_Init+0x23c>)
 800e848:	4293      	cmp	r3, r2
 800e84a:	d00c      	beq.n	800e866 <HAL_SPI_Init+0x6e>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	4a79      	ldr	r2, [pc, #484]	; (800ea38 <HAL_SPI_Init+0x240>)
 800e852:	4293      	cmp	r3, r2
 800e854:	d007      	beq.n	800e866 <HAL_SPI_Init+0x6e>
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	681b      	ldr	r3, [r3, #0]
 800e85a:	4a78      	ldr	r2, [pc, #480]	; (800ea3c <HAL_SPI_Init+0x244>)
 800e85c:	4293      	cmp	r3, r2
 800e85e:	d002      	beq.n	800e866 <HAL_SPI_Init+0x6e>
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	2b08      	cmp	r3, #8
 800e864:	d811      	bhi.n	800e88a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e86a:	4a72      	ldr	r2, [pc, #456]	; (800ea34 <HAL_SPI_Init+0x23c>)
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d009      	beq.n	800e884 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	4a70      	ldr	r2, [pc, #448]	; (800ea38 <HAL_SPI_Init+0x240>)
 800e876:	4293      	cmp	r3, r2
 800e878:	d004      	beq.n	800e884 <HAL_SPI_Init+0x8c>
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	4a6f      	ldr	r2, [pc, #444]	; (800ea3c <HAL_SPI_Init+0x244>)
 800e880:	4293      	cmp	r3, r2
 800e882:	d104      	bne.n	800e88e <HAL_SPI_Init+0x96>
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	2b10      	cmp	r3, #16
 800e888:	d901      	bls.n	800e88e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e88a:	2301      	movs	r3, #1
 800e88c:	e0cd      	b.n	800ea2a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e894:	b2db      	uxtb	r3, r3
 800e896:	2b00      	cmp	r3, #0
 800e898:	d106      	bne.n	800e8a8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	2200      	movs	r2, #0
 800e89e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f7f4 fad0 	bl	8002e48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2202      	movs	r2, #2
 800e8ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	f022 0201 	bic.w	r2, r2, #1
 800e8be:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	689b      	ldr	r3, [r3, #8]
 800e8c6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800e8ca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	699b      	ldr	r3, [r3, #24]
 800e8d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e8d4:	d119      	bne.n	800e90a <HAL_SPI_Init+0x112>
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	685b      	ldr	r3, [r3, #4]
 800e8da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e8de:	d103      	bne.n	800e8e8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d008      	beq.n	800e8fa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d10c      	bne.n	800e90a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e8f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800e8f8:	d107      	bne.n	800e90a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	681a      	ldr	r2, [r3, #0]
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e908:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e912:	2b00      	cmp	r3, #0
 800e914:	d00f      	beq.n	800e936 <HAL_SPI_Init+0x13e>
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	68db      	ldr	r3, [r3, #12]
 800e91a:	2b06      	cmp	r3, #6
 800e91c:	d90b      	bls.n	800e936 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	430a      	orrs	r2, r1
 800e932:	601a      	str	r2, [r3, #0]
 800e934:	e007      	b.n	800e946 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	681a      	ldr	r2, [r3, #0]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e944:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	69da      	ldr	r2, [r3, #28]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e94e:	431a      	orrs	r2, r3
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	431a      	orrs	r2, r3
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e958:	ea42 0103 	orr.w	r1, r2, r3
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	68da      	ldr	r2, [r3, #12]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	430a      	orrs	r2, r1
 800e966:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e970:	431a      	orrs	r2, r3
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e976:	431a      	orrs	r2, r3
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	699b      	ldr	r3, [r3, #24]
 800e97c:	431a      	orrs	r2, r3
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	691b      	ldr	r3, [r3, #16]
 800e982:	431a      	orrs	r2, r3
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	695b      	ldr	r3, [r3, #20]
 800e988:	431a      	orrs	r2, r3
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	6a1b      	ldr	r3, [r3, #32]
 800e98e:	431a      	orrs	r2, r3
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	685b      	ldr	r3, [r3, #4]
 800e994:	431a      	orrs	r2, r3
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e99a:	431a      	orrs	r2, r3
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	689b      	ldr	r3, [r3, #8]
 800e9a0:	431a      	orrs	r2, r3
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9a6:	ea42 0103 	orr.w	r1, r2, r3
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	430a      	orrs	r2, r1
 800e9b4:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	685b      	ldr	r3, [r3, #4]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d113      	bne.n	800e9e6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	689b      	ldr	r3, [r3, #8]
 800e9c4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e9d0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	689b      	ldr	r3, [r3, #8]
 800e9d8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e9e4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	f022 0201 	bic.w	r2, r2, #1
 800e9f4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	685b      	ldr	r3, [r3, #4]
 800e9fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d00a      	beq.n	800ea18 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	430a      	orrs	r2, r1
 800ea16:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2201      	movs	r2, #1
 800ea24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800ea28:	2300      	movs	r3, #0
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3710      	adds	r7, #16
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop
 800ea34:	40013000 	.word	0x40013000
 800ea38:	40003800 	.word	0x40003800
 800ea3c:	40003c00 	.word	0x40003c00

0800ea40 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b08a      	sub	sp, #40	; 0x28
 800ea44:	af02      	add	r7, sp, #8
 800ea46:	60f8      	str	r0, [r7, #12]
 800ea48:	60b9      	str	r1, [r7, #8]
 800ea4a:	603b      	str	r3, [r7, #0]
 800ea4c:	4613      	mov	r3, r2
 800ea4e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	3320      	adds	r3, #32
 800ea56:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	d101      	bne.n	800ea6a <HAL_SPI_Transmit+0x2a>
 800ea66:	2302      	movs	r3, #2
 800ea68:	e1e1      	b.n	800ee2e <HAL_SPI_Transmit+0x3ee>
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2201      	movs	r2, #1
 800ea6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ea72:	f7f4 ffa5 	bl	80039c0 <HAL_GetTick>
 800ea76:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ea7e:	b2db      	uxtb	r3, r3
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	d007      	beq.n	800ea94 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800ea84:	2302      	movs	r3, #2
 800ea86:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ea90:	7efb      	ldrb	r3, [r7, #27]
 800ea92:	e1cc      	b.n	800ee2e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d002      	beq.n	800eaa0 <HAL_SPI_Transmit+0x60>
 800ea9a:	88fb      	ldrh	r3, [r7, #6]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d107      	bne.n	800eab0 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eaac:	7efb      	ldrb	r3, [r7, #27]
 800eaae:	e1be      	b.n	800ee2e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eab0:	68fb      	ldr	r3, [r7, #12]
 800eab2:	2203      	movs	r2, #3
 800eab4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	2200      	movs	r2, #0
 800eabc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	68ba      	ldr	r2, [r7, #8]
 800eac4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800eac6:	68fb      	ldr	r3, [r7, #12]
 800eac8:	88fa      	ldrh	r2, [r7, #6]
 800eaca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	88fa      	ldrh	r2, [r7, #6]
 800ead2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	2200      	movs	r2, #0
 800eada:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2200      	movs	r2, #0
 800eae0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	2200      	movs	r2, #0
 800eae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	2200      	movs	r2, #0
 800eaf6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	689b      	ldr	r3, [r3, #8]
 800eafc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800eb00:	d108      	bne.n	800eb14 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	681a      	ldr	r2, [r3, #0]
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eb10:	601a      	str	r2, [r3, #0]
 800eb12:	e009      	b.n	800eb28 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	68db      	ldr	r3, [r3, #12]
 800eb1a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800eb1e:	68fb      	ldr	r3, [r7, #12]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800eb26:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	685a      	ldr	r2, [r3, #4]
 800eb2e:	4b96      	ldr	r3, [pc, #600]	; (800ed88 <HAL_SPI_Transmit+0x348>)
 800eb30:	4013      	ands	r3, r2
 800eb32:	88f9      	ldrh	r1, [r7, #6]
 800eb34:	68fa      	ldr	r2, [r7, #12]
 800eb36:	6812      	ldr	r2, [r2, #0]
 800eb38:	430b      	orrs	r3, r1
 800eb3a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	f042 0201 	orr.w	r2, r2, #1
 800eb4a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	685b      	ldr	r3, [r3, #4]
 800eb50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eb54:	d107      	bne.n	800eb66 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	681a      	ldr	r2, [r3, #0]
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800eb64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	68db      	ldr	r3, [r3, #12]
 800eb6a:	2b0f      	cmp	r3, #15
 800eb6c:	d947      	bls.n	800ebfe <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800eb6e:	e03f      	b.n	800ebf0 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	695b      	ldr	r3, [r3, #20]
 800eb76:	f003 0302 	and.w	r3, r3, #2
 800eb7a:	2b02      	cmp	r3, #2
 800eb7c:	d114      	bne.n	800eba8 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	6812      	ldr	r2, [r2, #0]
 800eb88:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb8e:	1d1a      	adds	r2, r3, #4
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eb9a:	b29b      	uxth	r3, r3
 800eb9c:	3b01      	subs	r3, #1
 800eb9e:	b29a      	uxth	r2, r3
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800eba6:	e023      	b.n	800ebf0 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eba8:	f7f4 ff0a 	bl	80039c0 <HAL_GetTick>
 800ebac:	4602      	mov	r2, r0
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	1ad3      	subs	r3, r2, r3
 800ebb2:	683a      	ldr	r2, [r7, #0]
 800ebb4:	429a      	cmp	r2, r3
 800ebb6:	d803      	bhi.n	800ebc0 <HAL_SPI_Transmit+0x180>
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebbe:	d102      	bne.n	800ebc6 <HAL_SPI_Transmit+0x186>
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d114      	bne.n	800ebf0 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ebc6:	68f8      	ldr	r0, [r7, #12]
 800ebc8:	f000 fac6 	bl	800f158 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ebda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	2201      	movs	r2, #1
 800ebe8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ebec:	2303      	movs	r3, #3
 800ebee:	e11e      	b.n	800ee2e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ebf6:	b29b      	uxth	r3, r3
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d1b9      	bne.n	800eb70 <HAL_SPI_Transmit+0x130>
 800ebfc:	e0f1      	b.n	800ede2 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	68db      	ldr	r3, [r3, #12]
 800ec02:	2b07      	cmp	r3, #7
 800ec04:	f240 80e6 	bls.w	800edd4 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ec08:	e05d      	b.n	800ecc6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	695b      	ldr	r3, [r3, #20]
 800ec10:	f003 0302 	and.w	r3, r3, #2
 800ec14:	2b02      	cmp	r3, #2
 800ec16:	d132      	bne.n	800ec7e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	2b01      	cmp	r3, #1
 800ec22:	d918      	bls.n	800ec56 <HAL_SPI_Transmit+0x216>
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d014      	beq.n	800ec56 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	6812      	ldr	r2, [r2, #0]
 800ec36:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec3c:	1d1a      	adds	r2, r3, #4
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec48:	b29b      	uxth	r3, r3
 800ec4a:	3b02      	subs	r3, #2
 800ec4c:	b29a      	uxth	r2, r3
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec54:	e037      	b.n	800ecc6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec5a:	881a      	ldrh	r2, [r3, #0]
 800ec5c:	69fb      	ldr	r3, [r7, #28]
 800ec5e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec64:	1c9a      	adds	r2, r3, #2
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec70:	b29b      	uxth	r3, r3
 800ec72:	3b01      	subs	r3, #1
 800ec74:	b29a      	uxth	r2, r3
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec7c:	e023      	b.n	800ecc6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec7e:	f7f4 fe9f 	bl	80039c0 <HAL_GetTick>
 800ec82:	4602      	mov	r2, r0
 800ec84:	697b      	ldr	r3, [r7, #20]
 800ec86:	1ad3      	subs	r3, r2, r3
 800ec88:	683a      	ldr	r2, [r7, #0]
 800ec8a:	429a      	cmp	r2, r3
 800ec8c:	d803      	bhi.n	800ec96 <HAL_SPI_Transmit+0x256>
 800ec8e:	683b      	ldr	r3, [r7, #0]
 800ec90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec94:	d102      	bne.n	800ec9c <HAL_SPI_Transmit+0x25c>
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d114      	bne.n	800ecc6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ec9c:	68f8      	ldr	r0, [r7, #12]
 800ec9e:	f000 fa5b 	bl	800f158 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	2200      	movs	r2, #0
 800eca6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ecb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ecb4:	68fb      	ldr	r3, [r7, #12]
 800ecb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	2201      	movs	r2, #1
 800ecbe:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800ecc2:	2303      	movs	r3, #3
 800ecc4:	e0b3      	b.n	800ee2e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eccc:	b29b      	uxth	r3, r3
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d19b      	bne.n	800ec0a <HAL_SPI_Transmit+0x1ca>
 800ecd2:	e086      	b.n	800ede2 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	695b      	ldr	r3, [r3, #20]
 800ecda:	f003 0302 	and.w	r3, r3, #2
 800ecde:	2b02      	cmp	r3, #2
 800ece0:	d154      	bne.n	800ed8c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	2b03      	cmp	r3, #3
 800ecec:	d918      	bls.n	800ed20 <HAL_SPI_Transmit+0x2e0>
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecf2:	2b40      	cmp	r3, #64	; 0x40
 800ecf4:	d914      	bls.n	800ed20 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	6812      	ldr	r2, [r2, #0]
 800ed00:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed06:	1d1a      	adds	r2, r3, #4
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	3b04      	subs	r3, #4
 800ed16:	b29a      	uxth	r2, r3
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed1e:	e059      	b.n	800edd4 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed26:	b29b      	uxth	r3, r3
 800ed28:	2b01      	cmp	r3, #1
 800ed2a:	d917      	bls.n	800ed5c <HAL_SPI_Transmit+0x31c>
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d013      	beq.n	800ed5c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed38:	881a      	ldrh	r2, [r3, #0]
 800ed3a:	69fb      	ldr	r3, [r7, #28]
 800ed3c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed42:	1c9a      	adds	r2, r3, #2
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	3b02      	subs	r3, #2
 800ed52:	b29a      	uxth	r2, r3
 800ed54:	68fb      	ldr	r3, [r7, #12]
 800ed56:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed5a:	e03b      	b.n	800edd4 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ed60:	68fb      	ldr	r3, [r7, #12]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	3320      	adds	r3, #32
 800ed66:	7812      	ldrb	r2, [r2, #0]
 800ed68:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ed6a:	68fb      	ldr	r3, [r7, #12]
 800ed6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed6e:	1c5a      	adds	r2, r3, #1
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed7a:	b29b      	uxth	r3, r3
 800ed7c:	3b01      	subs	r3, #1
 800ed7e:	b29a      	uxth	r2, r3
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed86:	e025      	b.n	800edd4 <HAL_SPI_Transmit+0x394>
 800ed88:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed8c:	f7f4 fe18 	bl	80039c0 <HAL_GetTick>
 800ed90:	4602      	mov	r2, r0
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	1ad3      	subs	r3, r2, r3
 800ed96:	683a      	ldr	r2, [r7, #0]
 800ed98:	429a      	cmp	r2, r3
 800ed9a:	d803      	bhi.n	800eda4 <HAL_SPI_Transmit+0x364>
 800ed9c:	683b      	ldr	r3, [r7, #0]
 800ed9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eda2:	d102      	bne.n	800edaa <HAL_SPI_Transmit+0x36a>
 800eda4:	683b      	ldr	r3, [r7, #0]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d114      	bne.n	800edd4 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800edaa:	68f8      	ldr	r0, [r7, #12]
 800edac:	f000 f9d4 	bl	800f158 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	2200      	movs	r2, #0
 800edb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	2201      	movs	r2, #1
 800edcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800edd0:	2303      	movs	r3, #3
 800edd2:	e02c      	b.n	800ee2e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edda:	b29b      	uxth	r3, r3
 800eddc:	2b00      	cmp	r3, #0
 800edde:	f47f af79 	bne.w	800ecd4 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ede2:	697b      	ldr	r3, [r7, #20]
 800ede4:	9300      	str	r3, [sp, #0]
 800ede6:	683b      	ldr	r3, [r7, #0]
 800ede8:	2200      	movs	r2, #0
 800edea:	2108      	movs	r1, #8
 800edec:	68f8      	ldr	r0, [r7, #12]
 800edee:	f000 fa53 	bl	800f298 <SPI_WaitOnFlagUntilTimeout>
 800edf2:	4603      	mov	r3, r0
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d007      	beq.n	800ee08 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edfe:	f043 0220 	orr.w	r2, r3, #32
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ee08:	68f8      	ldr	r0, [r7, #12]
 800ee0a:	f000 f9a5 	bl	800f158 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	2200      	movs	r2, #0
 800ee12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800ee16:	68fb      	ldr	r3, [r7, #12]
 800ee18:	2201      	movs	r2, #1
 800ee1a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d001      	beq.n	800ee2c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800ee28:	2301      	movs	r3, #1
 800ee2a:	e000      	b.n	800ee2e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800ee2c:	7efb      	ldrb	r3, [r7, #27]
}
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3720      	adds	r7, #32
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop

0800ee38 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b088      	sub	sp, #32
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	60f8      	str	r0, [r7, #12]
 800ee40:	60b9      	str	r1, [r7, #8]
 800ee42:	603b      	str	r3, [r7, #0]
 800ee44:	4613      	mov	r3, r2
 800ee46:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ee48:	2300      	movs	r3, #0
 800ee4a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	3330      	adds	r3, #48	; 0x30
 800ee52:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ee5a:	2b01      	cmp	r3, #1
 800ee5c:	d101      	bne.n	800ee62 <HAL_SPI_Receive+0x2a>
 800ee5e:	2302      	movs	r3, #2
 800ee60:	e173      	b.n	800f14a <HAL_SPI_Receive+0x312>
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	2201      	movs	r2, #1
 800ee66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ee6a:	f7f4 fda9 	bl	80039c0 <HAL_GetTick>
 800ee6e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ee76:	b2db      	uxtb	r3, r3
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d007      	beq.n	800ee8c <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800ee7c:	2302      	movs	r3, #2
 800ee7e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	2200      	movs	r2, #0
 800ee84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ee88:	7ffb      	ldrb	r3, [r7, #31]
 800ee8a:	e15e      	b.n	800f14a <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d002      	beq.n	800ee98 <HAL_SPI_Receive+0x60>
 800ee92:	88fb      	ldrh	r3, [r7, #6]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d107      	bne.n	800eea8 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eea4:	7ffb      	ldrb	r3, [r7, #31]
 800eea6:	e150      	b.n	800f14a <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	2204      	movs	r2, #4
 800eeac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	68ba      	ldr	r2, [r7, #8]
 800eebc:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	88fa      	ldrh	r2, [r7, #6]
 800eec2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	88fa      	ldrh	r2, [r7, #6]
 800eeca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	2200      	movs	r2, #0
 800eed2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2200      	movs	r2, #0
 800eed8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	2200      	movs	r2, #0
 800eee0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	2200      	movs	r2, #0
 800eee8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	2200      	movs	r2, #0
 800eeee:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	689b      	ldr	r3, [r3, #8]
 800eef4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800eef8:	d108      	bne.n	800ef0c <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	681a      	ldr	r2, [r3, #0]
 800ef00:	68fb      	ldr	r3, [r7, #12]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ef08:	601a      	str	r2, [r3, #0]
 800ef0a:	e009      	b.n	800ef20 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	68db      	ldr	r3, [r3, #12]
 800ef12:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ef1e:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	685a      	ldr	r2, [r3, #4]
 800ef26:	4b8b      	ldr	r3, [pc, #556]	; (800f154 <HAL_SPI_Receive+0x31c>)
 800ef28:	4013      	ands	r3, r2
 800ef2a:	88f9      	ldrh	r1, [r7, #6]
 800ef2c:	68fa      	ldr	r2, [r7, #12]
 800ef2e:	6812      	ldr	r2, [r2, #0]
 800ef30:	430b      	orrs	r3, r1
 800ef32:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	681a      	ldr	r2, [r3, #0]
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	681b      	ldr	r3, [r3, #0]
 800ef3e:	f042 0201 	orr.w	r2, r2, #1
 800ef42:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	685b      	ldr	r3, [r3, #4]
 800ef48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef4c:	d107      	bne.n	800ef5e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	681a      	ldr	r2, [r3, #0]
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ef5c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	68db      	ldr	r3, [r3, #12]
 800ef62:	2b0f      	cmp	r3, #15
 800ef64:	d948      	bls.n	800eff8 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800ef66:	e040      	b.n	800efea <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	695a      	ldr	r2, [r3, #20]
 800ef6e:	f248 0308 	movw	r3, #32776	; 0x8008
 800ef72:	4013      	ands	r3, r2
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d014      	beq.n	800efa2 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ef82:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ef88:	1d1a      	adds	r2, r3, #4
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ef94:	b29b      	uxth	r3, r3
 800ef96:	3b01      	subs	r3, #1
 800ef98:	b29a      	uxth	r2, r3
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800efa0:	e023      	b.n	800efea <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800efa2:	f7f4 fd0d 	bl	80039c0 <HAL_GetTick>
 800efa6:	4602      	mov	r2, r0
 800efa8:	697b      	ldr	r3, [r7, #20]
 800efaa:	1ad3      	subs	r3, r2, r3
 800efac:	683a      	ldr	r2, [r7, #0]
 800efae:	429a      	cmp	r2, r3
 800efb0:	d803      	bhi.n	800efba <HAL_SPI_Receive+0x182>
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efb8:	d102      	bne.n	800efc0 <HAL_SPI_Receive+0x188>
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d114      	bne.n	800efea <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800efc0:	68f8      	ldr	r0, [r7, #12]
 800efc2:	f000 f8c9 	bl	800f158 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	2200      	movs	r2, #0
 800efca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800efd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	2201      	movs	r2, #1
 800efe2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800efe6:	2303      	movs	r3, #3
 800efe8:	e0af      	b.n	800f14a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800eff0:	b29b      	uxth	r3, r3
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d1b8      	bne.n	800ef68 <HAL_SPI_Receive+0x130>
 800eff6:	e095      	b.n	800f124 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	2b07      	cmp	r3, #7
 800effe:	f240 808b 	bls.w	800f118 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f002:	e03f      	b.n	800f084 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	695b      	ldr	r3, [r3, #20]
 800f00a:	f003 0301 	and.w	r3, r3, #1
 800f00e:	2b01      	cmp	r3, #1
 800f010:	d114      	bne.n	800f03c <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f016:	69ba      	ldr	r2, [r7, #24]
 800f018:	8812      	ldrh	r2, [r2, #0]
 800f01a:	b292      	uxth	r2, r2
 800f01c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f022:	1c9a      	adds	r2, r3, #2
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f02e:	b29b      	uxth	r3, r3
 800f030:	3b01      	subs	r3, #1
 800f032:	b29a      	uxth	r2, r3
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f03a:	e023      	b.n	800f084 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f03c:	f7f4 fcc0 	bl	80039c0 <HAL_GetTick>
 800f040:	4602      	mov	r2, r0
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	1ad3      	subs	r3, r2, r3
 800f046:	683a      	ldr	r2, [r7, #0]
 800f048:	429a      	cmp	r2, r3
 800f04a:	d803      	bhi.n	800f054 <HAL_SPI_Receive+0x21c>
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f052:	d102      	bne.n	800f05a <HAL_SPI_Receive+0x222>
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	2b00      	cmp	r3, #0
 800f058:	d114      	bne.n	800f084 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f05a:	68f8      	ldr	r0, [r7, #12]
 800f05c:	f000 f87c 	bl	800f158 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	2200      	movs	r2, #0
 800f064:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f06e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	2201      	movs	r2, #1
 800f07c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f080:	2303      	movs	r3, #3
 800f082:	e062      	b.n	800f14a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f08a:	b29b      	uxth	r3, r3
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d1b9      	bne.n	800f004 <HAL_SPI_Receive+0x1cc>
 800f090:	e048      	b.n	800f124 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	695b      	ldr	r3, [r3, #20]
 800f098:	f003 0301 	and.w	r3, r3, #1
 800f09c:	2b01      	cmp	r3, #1
 800f09e:	d117      	bne.n	800f0d0 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0ac:	7812      	ldrb	r2, [r2, #0]
 800f0ae:	b2d2      	uxtb	r2, r2
 800f0b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f0b6:	1c5a      	adds	r2, r3, #1
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0c2:	b29b      	uxth	r3, r3
 800f0c4:	3b01      	subs	r3, #1
 800f0c6:	b29a      	uxth	r2, r3
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f0ce:	e023      	b.n	800f118 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0d0:	f7f4 fc76 	bl	80039c0 <HAL_GetTick>
 800f0d4:	4602      	mov	r2, r0
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	1ad3      	subs	r3, r2, r3
 800f0da:	683a      	ldr	r2, [r7, #0]
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d803      	bhi.n	800f0e8 <HAL_SPI_Receive+0x2b0>
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0e6:	d102      	bne.n	800f0ee <HAL_SPI_Receive+0x2b6>
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d114      	bne.n	800f118 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f0ee:	68f8      	ldr	r0, [r7, #12]
 800f0f0:	f000 f832 	bl	800f158 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f102:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2201      	movs	r2, #1
 800f110:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f114:	2303      	movs	r3, #3
 800f116:	e018      	b.n	800f14a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f11e:	b29b      	uxth	r3, r3
 800f120:	2b00      	cmp	r3, #0
 800f122:	d1b6      	bne.n	800f092 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f124:	68f8      	ldr	r0, [r7, #12]
 800f126:	f000 f817 	bl	800f158 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	2200      	movs	r2, #0
 800f12e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	2201      	movs	r2, #1
 800f136:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f140:	2b00      	cmp	r3, #0
 800f142:	d001      	beq.n	800f148 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f144:	2301      	movs	r3, #1
 800f146:	e000      	b.n	800f14a <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f148:	7ffb      	ldrb	r3, [r7, #31]
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3720      	adds	r7, #32
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}
 800f152:	bf00      	nop
 800f154:	ffff0000 	.word	0xffff0000

0800f158 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f158:	b480      	push	{r7}
 800f15a:	b085      	sub	sp, #20
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	695b      	ldr	r3, [r3, #20]
 800f166:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	681b      	ldr	r3, [r3, #0]
 800f16c:	699a      	ldr	r2, [r3, #24]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	f042 0208 	orr.w	r2, r2, #8
 800f176:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	699a      	ldr	r2, [r3, #24]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	f042 0210 	orr.w	r2, r2, #16
 800f186:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	681a      	ldr	r2, [r3, #0]
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	f022 0201 	bic.w	r2, r2, #1
 800f196:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	6919      	ldr	r1, [r3, #16]
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681a      	ldr	r2, [r3, #0]
 800f1a2:	4b3c      	ldr	r3, [pc, #240]	; (800f294 <SPI_CloseTransfer+0x13c>)
 800f1a4:	400b      	ands	r3, r1
 800f1a6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	681b      	ldr	r3, [r3, #0]
 800f1ac:	689a      	ldr	r2, [r3, #8]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	681b      	ldr	r3, [r3, #0]
 800f1b2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f1b6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f1be:	b2db      	uxtb	r3, r3
 800f1c0:	2b04      	cmp	r3, #4
 800f1c2:	d014      	beq.n	800f1ee <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	f003 0320 	and.w	r3, r3, #32
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d00f      	beq.n	800f1ee <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f1d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	699a      	ldr	r2, [r3, #24]
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	f042 0220 	orr.w	r2, r2, #32
 800f1ec:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f1f4:	b2db      	uxtb	r3, r3
 800f1f6:	2b03      	cmp	r3, #3
 800f1f8:	d014      	beq.n	800f224 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f200:	2b00      	cmp	r3, #0
 800f202:	d00f      	beq.n	800f224 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f20a:	f043 0204 	orr.w	r2, r3, #4
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	699a      	ldr	r2, [r3, #24]
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f222:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d00f      	beq.n	800f24e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f234:	f043 0201 	orr.w	r2, r3, #1
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	699a      	ldr	r2, [r3, #24]
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f24c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f254:	2b00      	cmp	r3, #0
 800f256:	d00f      	beq.n	800f278 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f25e:	f043 0208 	orr.w	r2, r3, #8
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	699a      	ldr	r2, [r3, #24]
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f276:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2200      	movs	r2, #0
 800f27c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2200      	movs	r2, #0
 800f284:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f288:	bf00      	nop
 800f28a:	3714      	adds	r7, #20
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr
 800f294:	fffffc90 	.word	0xfffffc90

0800f298 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b084      	sub	sp, #16
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	60f8      	str	r0, [r7, #12]
 800f2a0:	60b9      	str	r1, [r7, #8]
 800f2a2:	603b      	str	r3, [r7, #0]
 800f2a4:	4613      	mov	r3, r2
 800f2a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f2a8:	e010      	b.n	800f2cc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2aa:	f7f4 fb89 	bl	80039c0 <HAL_GetTick>
 800f2ae:	4602      	mov	r2, r0
 800f2b0:	69bb      	ldr	r3, [r7, #24]
 800f2b2:	1ad3      	subs	r3, r2, r3
 800f2b4:	683a      	ldr	r2, [r7, #0]
 800f2b6:	429a      	cmp	r2, r3
 800f2b8:	d803      	bhi.n	800f2c2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2c0:	d102      	bne.n	800f2c8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	2b00      	cmp	r3, #0
 800f2c6:	d101      	bne.n	800f2cc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f2c8:	2303      	movs	r3, #3
 800f2ca:	e00f      	b.n	800f2ec <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	695a      	ldr	r2, [r3, #20]
 800f2d2:	68bb      	ldr	r3, [r7, #8]
 800f2d4:	4013      	ands	r3, r2
 800f2d6:	68ba      	ldr	r2, [r7, #8]
 800f2d8:	429a      	cmp	r2, r3
 800f2da:	bf0c      	ite	eq
 800f2dc:	2301      	moveq	r3, #1
 800f2de:	2300      	movne	r3, #0
 800f2e0:	b2db      	uxtb	r3, r3
 800f2e2:	461a      	mov	r2, r3
 800f2e4:	79fb      	ldrb	r3, [r7, #7]
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d0df      	beq.n	800f2aa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f2ea:	2300      	movs	r3, #0
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3710      	adds	r7, #16
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b085      	sub	sp, #20
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f300:	095b      	lsrs	r3, r3, #5
 800f302:	3301      	adds	r3, #1
 800f304:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	68db      	ldr	r3, [r3, #12]
 800f30a:	3301      	adds	r3, #1
 800f30c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	3307      	adds	r3, #7
 800f312:	08db      	lsrs	r3, r3, #3
 800f314:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f316:	68bb      	ldr	r3, [r7, #8]
 800f318:	68fa      	ldr	r2, [r7, #12]
 800f31a:	fb02 f303 	mul.w	r3, r2, r3
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3714      	adds	r7, #20
 800f322:	46bd      	mov	sp, r7
 800f324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f328:	4770      	bx	lr

0800f32a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f32a:	b580      	push	{r7, lr}
 800f32c:	b082      	sub	sp, #8
 800f32e:	af00      	add	r7, sp, #0
 800f330:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d101      	bne.n	800f33c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f338:	2301      	movs	r3, #1
 800f33a:	e049      	b.n	800f3d0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800f342:	b2db      	uxtb	r3, r3
 800f344:	2b00      	cmp	r3, #0
 800f346:	d106      	bne.n	800f356 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2200      	movs	r2, #0
 800f34c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	f7f3 fe35 	bl	8002fc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2202      	movs	r2, #2
 800f35a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681a      	ldr	r2, [r3, #0]
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	3304      	adds	r3, #4
 800f366:	4619      	mov	r1, r3
 800f368:	4610      	mov	r0, r2
 800f36a:	f000 fed1 	bl	8010110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2201      	movs	r2, #1
 800f372:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	2201      	movs	r2, #1
 800f37a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2201      	movs	r2, #1
 800f382:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2201      	movs	r2, #1
 800f38a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2201      	movs	r2, #1
 800f392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2201      	movs	r2, #1
 800f39a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	2201      	movs	r2, #1
 800f3a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	2201      	movs	r2, #1
 800f3aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	2201      	movs	r2, #1
 800f3b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2201      	movs	r2, #1
 800f3ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2201      	movs	r2, #1
 800f3c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	2201      	movs	r2, #1
 800f3ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800f3ce:	2300      	movs	r3, #0
}
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	3708      	adds	r7, #8
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}

0800f3d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b084      	sub	sp, #16
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d109      	bne.n	800f3fc <HAL_TIM_PWM_Start+0x24>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f3ee:	b2db      	uxtb	r3, r3
 800f3f0:	2b01      	cmp	r3, #1
 800f3f2:	bf14      	ite	ne
 800f3f4:	2301      	movne	r3, #1
 800f3f6:	2300      	moveq	r3, #0
 800f3f8:	b2db      	uxtb	r3, r3
 800f3fa:	e03c      	b.n	800f476 <HAL_TIM_PWM_Start+0x9e>
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	2b04      	cmp	r3, #4
 800f400:	d109      	bne.n	800f416 <HAL_TIM_PWM_Start+0x3e>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f408:	b2db      	uxtb	r3, r3
 800f40a:	2b01      	cmp	r3, #1
 800f40c:	bf14      	ite	ne
 800f40e:	2301      	movne	r3, #1
 800f410:	2300      	moveq	r3, #0
 800f412:	b2db      	uxtb	r3, r3
 800f414:	e02f      	b.n	800f476 <HAL_TIM_PWM_Start+0x9e>
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	2b08      	cmp	r3, #8
 800f41a:	d109      	bne.n	800f430 <HAL_TIM_PWM_Start+0x58>
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f422:	b2db      	uxtb	r3, r3
 800f424:	2b01      	cmp	r3, #1
 800f426:	bf14      	ite	ne
 800f428:	2301      	movne	r3, #1
 800f42a:	2300      	moveq	r3, #0
 800f42c:	b2db      	uxtb	r3, r3
 800f42e:	e022      	b.n	800f476 <HAL_TIM_PWM_Start+0x9e>
 800f430:	683b      	ldr	r3, [r7, #0]
 800f432:	2b0c      	cmp	r3, #12
 800f434:	d109      	bne.n	800f44a <HAL_TIM_PWM_Start+0x72>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f43c:	b2db      	uxtb	r3, r3
 800f43e:	2b01      	cmp	r3, #1
 800f440:	bf14      	ite	ne
 800f442:	2301      	movne	r3, #1
 800f444:	2300      	moveq	r3, #0
 800f446:	b2db      	uxtb	r3, r3
 800f448:	e015      	b.n	800f476 <HAL_TIM_PWM_Start+0x9e>
 800f44a:	683b      	ldr	r3, [r7, #0]
 800f44c:	2b10      	cmp	r3, #16
 800f44e:	d109      	bne.n	800f464 <HAL_TIM_PWM_Start+0x8c>
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f456:	b2db      	uxtb	r3, r3
 800f458:	2b01      	cmp	r3, #1
 800f45a:	bf14      	ite	ne
 800f45c:	2301      	movne	r3, #1
 800f45e:	2300      	moveq	r3, #0
 800f460:	b2db      	uxtb	r3, r3
 800f462:	e008      	b.n	800f476 <HAL_TIM_PWM_Start+0x9e>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f46a:	b2db      	uxtb	r3, r3
 800f46c:	2b01      	cmp	r3, #1
 800f46e:	bf14      	ite	ne
 800f470:	2301      	movne	r3, #1
 800f472:	2300      	moveq	r3, #0
 800f474:	b2db      	uxtb	r3, r3
 800f476:	2b00      	cmp	r3, #0
 800f478:	d001      	beq.n	800f47e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800f47a:	2301      	movs	r3, #1
 800f47c:	e0ab      	b.n	800f5d6 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d104      	bne.n	800f48e <HAL_TIM_PWM_Start+0xb6>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	2202      	movs	r2, #2
 800f488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f48c:	e023      	b.n	800f4d6 <HAL_TIM_PWM_Start+0xfe>
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	2b04      	cmp	r3, #4
 800f492:	d104      	bne.n	800f49e <HAL_TIM_PWM_Start+0xc6>
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	2202      	movs	r2, #2
 800f498:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f49c:	e01b      	b.n	800f4d6 <HAL_TIM_PWM_Start+0xfe>
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	2b08      	cmp	r3, #8
 800f4a2:	d104      	bne.n	800f4ae <HAL_TIM_PWM_Start+0xd6>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	2202      	movs	r2, #2
 800f4a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f4ac:	e013      	b.n	800f4d6 <HAL_TIM_PWM_Start+0xfe>
 800f4ae:	683b      	ldr	r3, [r7, #0]
 800f4b0:	2b0c      	cmp	r3, #12
 800f4b2:	d104      	bne.n	800f4be <HAL_TIM_PWM_Start+0xe6>
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2202      	movs	r2, #2
 800f4b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f4bc:	e00b      	b.n	800f4d6 <HAL_TIM_PWM_Start+0xfe>
 800f4be:	683b      	ldr	r3, [r7, #0]
 800f4c0:	2b10      	cmp	r3, #16
 800f4c2:	d104      	bne.n	800f4ce <HAL_TIM_PWM_Start+0xf6>
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2202      	movs	r2, #2
 800f4c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f4cc:	e003      	b.n	800f4d6 <HAL_TIM_PWM_Start+0xfe>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	2202      	movs	r2, #2
 800f4d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	2201      	movs	r2, #1
 800f4dc:	6839      	ldr	r1, [r7, #0]
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f001 f992 	bl	8010808 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	4a3d      	ldr	r2, [pc, #244]	; (800f5e0 <HAL_TIM_PWM_Start+0x208>)
 800f4ea:	4293      	cmp	r3, r2
 800f4ec:	d013      	beq.n	800f516 <HAL_TIM_PWM_Start+0x13e>
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	4a3c      	ldr	r2, [pc, #240]	; (800f5e4 <HAL_TIM_PWM_Start+0x20c>)
 800f4f4:	4293      	cmp	r3, r2
 800f4f6:	d00e      	beq.n	800f516 <HAL_TIM_PWM_Start+0x13e>
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	4a3a      	ldr	r2, [pc, #232]	; (800f5e8 <HAL_TIM_PWM_Start+0x210>)
 800f4fe:	4293      	cmp	r3, r2
 800f500:	d009      	beq.n	800f516 <HAL_TIM_PWM_Start+0x13e>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	4a39      	ldr	r2, [pc, #228]	; (800f5ec <HAL_TIM_PWM_Start+0x214>)
 800f508:	4293      	cmp	r3, r2
 800f50a:	d004      	beq.n	800f516 <HAL_TIM_PWM_Start+0x13e>
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	4a37      	ldr	r2, [pc, #220]	; (800f5f0 <HAL_TIM_PWM_Start+0x218>)
 800f512:	4293      	cmp	r3, r2
 800f514:	d101      	bne.n	800f51a <HAL_TIM_PWM_Start+0x142>
 800f516:	2301      	movs	r3, #1
 800f518:	e000      	b.n	800f51c <HAL_TIM_PWM_Start+0x144>
 800f51a:	2300      	movs	r3, #0
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d007      	beq.n	800f530 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f52e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	4a2a      	ldr	r2, [pc, #168]	; (800f5e0 <HAL_TIM_PWM_Start+0x208>)
 800f536:	4293      	cmp	r3, r2
 800f538:	d02c      	beq.n	800f594 <HAL_TIM_PWM_Start+0x1bc>
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f542:	d027      	beq.n	800f594 <HAL_TIM_PWM_Start+0x1bc>
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	4a2a      	ldr	r2, [pc, #168]	; (800f5f4 <HAL_TIM_PWM_Start+0x21c>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d022      	beq.n	800f594 <HAL_TIM_PWM_Start+0x1bc>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	4a29      	ldr	r2, [pc, #164]	; (800f5f8 <HAL_TIM_PWM_Start+0x220>)
 800f554:	4293      	cmp	r3, r2
 800f556:	d01d      	beq.n	800f594 <HAL_TIM_PWM_Start+0x1bc>
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	4a27      	ldr	r2, [pc, #156]	; (800f5fc <HAL_TIM_PWM_Start+0x224>)
 800f55e:	4293      	cmp	r3, r2
 800f560:	d018      	beq.n	800f594 <HAL_TIM_PWM_Start+0x1bc>
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	4a1f      	ldr	r2, [pc, #124]	; (800f5e4 <HAL_TIM_PWM_Start+0x20c>)
 800f568:	4293      	cmp	r3, r2
 800f56a:	d013      	beq.n	800f594 <HAL_TIM_PWM_Start+0x1bc>
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	4a23      	ldr	r2, [pc, #140]	; (800f600 <HAL_TIM_PWM_Start+0x228>)
 800f572:	4293      	cmp	r3, r2
 800f574:	d00e      	beq.n	800f594 <HAL_TIM_PWM_Start+0x1bc>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	4a1b      	ldr	r2, [pc, #108]	; (800f5e8 <HAL_TIM_PWM_Start+0x210>)
 800f57c:	4293      	cmp	r3, r2
 800f57e:	d009      	beq.n	800f594 <HAL_TIM_PWM_Start+0x1bc>
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	4a1f      	ldr	r2, [pc, #124]	; (800f604 <HAL_TIM_PWM_Start+0x22c>)
 800f586:	4293      	cmp	r3, r2
 800f588:	d004      	beq.n	800f594 <HAL_TIM_PWM_Start+0x1bc>
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	4a1e      	ldr	r2, [pc, #120]	; (800f608 <HAL_TIM_PWM_Start+0x230>)
 800f590:	4293      	cmp	r3, r2
 800f592:	d115      	bne.n	800f5c0 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	689a      	ldr	r2, [r3, #8]
 800f59a:	4b1c      	ldr	r3, [pc, #112]	; (800f60c <HAL_TIM_PWM_Start+0x234>)
 800f59c:	4013      	ands	r3, r2
 800f59e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2b06      	cmp	r3, #6
 800f5a4:	d015      	beq.n	800f5d2 <HAL_TIM_PWM_Start+0x1fa>
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f5ac:	d011      	beq.n	800f5d2 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	681b      	ldr	r3, [r3, #0]
 800f5b2:	681a      	ldr	r2, [r3, #0]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	f042 0201 	orr.w	r2, r2, #1
 800f5bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f5be:	e008      	b.n	800f5d2 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	681a      	ldr	r2, [r3, #0]
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	681b      	ldr	r3, [r3, #0]
 800f5ca:	f042 0201 	orr.w	r2, r2, #1
 800f5ce:	601a      	str	r2, [r3, #0]
 800f5d0:	e000      	b.n	800f5d4 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f5d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800f5d4:	2300      	movs	r3, #0
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3710      	adds	r7, #16
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}
 800f5de:	bf00      	nop
 800f5e0:	40010000 	.word	0x40010000
 800f5e4:	40010400 	.word	0x40010400
 800f5e8:	40014000 	.word	0x40014000
 800f5ec:	40014400 	.word	0x40014400
 800f5f0:	40014800 	.word	0x40014800
 800f5f4:	40000400 	.word	0x40000400
 800f5f8:	40000800 	.word	0x40000800
 800f5fc:	40000c00 	.word	0x40000c00
 800f600:	40001800 	.word	0x40001800
 800f604:	4000e000 	.word	0x4000e000
 800f608:	4000e400 	.word	0x4000e400
 800f60c:	00010007 	.word	0x00010007

0800f610 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800f610:	b580      	push	{r7, lr}
 800f612:	b086      	sub	sp, #24
 800f614:	af00      	add	r7, sp, #0
 800f616:	60f8      	str	r0, [r7, #12]
 800f618:	60b9      	str	r1, [r7, #8]
 800f61a:	607a      	str	r2, [r7, #4]
 800f61c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800f61e:	2300      	movs	r3, #0
 800f620:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800f622:	68bb      	ldr	r3, [r7, #8]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d109      	bne.n	800f63c <HAL_TIM_PWM_Start_DMA+0x2c>
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f62e:	b2db      	uxtb	r3, r3
 800f630:	2b02      	cmp	r3, #2
 800f632:	bf0c      	ite	eq
 800f634:	2301      	moveq	r3, #1
 800f636:	2300      	movne	r3, #0
 800f638:	b2db      	uxtb	r3, r3
 800f63a:	e03c      	b.n	800f6b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f63c:	68bb      	ldr	r3, [r7, #8]
 800f63e:	2b04      	cmp	r3, #4
 800f640:	d109      	bne.n	800f656 <HAL_TIM_PWM_Start_DMA+0x46>
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f648:	b2db      	uxtb	r3, r3
 800f64a:	2b02      	cmp	r3, #2
 800f64c:	bf0c      	ite	eq
 800f64e:	2301      	moveq	r3, #1
 800f650:	2300      	movne	r3, #0
 800f652:	b2db      	uxtb	r3, r3
 800f654:	e02f      	b.n	800f6b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f656:	68bb      	ldr	r3, [r7, #8]
 800f658:	2b08      	cmp	r3, #8
 800f65a:	d109      	bne.n	800f670 <HAL_TIM_PWM_Start_DMA+0x60>
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f662:	b2db      	uxtb	r3, r3
 800f664:	2b02      	cmp	r3, #2
 800f666:	bf0c      	ite	eq
 800f668:	2301      	moveq	r3, #1
 800f66a:	2300      	movne	r3, #0
 800f66c:	b2db      	uxtb	r3, r3
 800f66e:	e022      	b.n	800f6b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	2b0c      	cmp	r3, #12
 800f674:	d109      	bne.n	800f68a <HAL_TIM_PWM_Start_DMA+0x7a>
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f67c:	b2db      	uxtb	r3, r3
 800f67e:	2b02      	cmp	r3, #2
 800f680:	bf0c      	ite	eq
 800f682:	2301      	moveq	r3, #1
 800f684:	2300      	movne	r3, #0
 800f686:	b2db      	uxtb	r3, r3
 800f688:	e015      	b.n	800f6b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	2b10      	cmp	r3, #16
 800f68e:	d109      	bne.n	800f6a4 <HAL_TIM_PWM_Start_DMA+0x94>
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f696:	b2db      	uxtb	r3, r3
 800f698:	2b02      	cmp	r3, #2
 800f69a:	bf0c      	ite	eq
 800f69c:	2301      	moveq	r3, #1
 800f69e:	2300      	movne	r3, #0
 800f6a0:	b2db      	uxtb	r3, r3
 800f6a2:	e008      	b.n	800f6b6 <HAL_TIM_PWM_Start_DMA+0xa6>
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f6aa:	b2db      	uxtb	r3, r3
 800f6ac:	2b02      	cmp	r3, #2
 800f6ae:	bf0c      	ite	eq
 800f6b0:	2301      	moveq	r3, #1
 800f6b2:	2300      	movne	r3, #0
 800f6b4:	b2db      	uxtb	r3, r3
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d001      	beq.n	800f6be <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800f6ba:	2302      	movs	r3, #2
 800f6bc:	e1ba      	b.n	800fa34 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d109      	bne.n	800f6d8 <HAL_TIM_PWM_Start_DMA+0xc8>
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f6ca:	b2db      	uxtb	r3, r3
 800f6cc:	2b01      	cmp	r3, #1
 800f6ce:	bf0c      	ite	eq
 800f6d0:	2301      	moveq	r3, #1
 800f6d2:	2300      	movne	r3, #0
 800f6d4:	b2db      	uxtb	r3, r3
 800f6d6:	e03c      	b.n	800f752 <HAL_TIM_PWM_Start_DMA+0x142>
 800f6d8:	68bb      	ldr	r3, [r7, #8]
 800f6da:	2b04      	cmp	r3, #4
 800f6dc:	d109      	bne.n	800f6f2 <HAL_TIM_PWM_Start_DMA+0xe2>
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800f6e4:	b2db      	uxtb	r3, r3
 800f6e6:	2b01      	cmp	r3, #1
 800f6e8:	bf0c      	ite	eq
 800f6ea:	2301      	moveq	r3, #1
 800f6ec:	2300      	movne	r3, #0
 800f6ee:	b2db      	uxtb	r3, r3
 800f6f0:	e02f      	b.n	800f752 <HAL_TIM_PWM_Start_DMA+0x142>
 800f6f2:	68bb      	ldr	r3, [r7, #8]
 800f6f4:	2b08      	cmp	r3, #8
 800f6f6:	d109      	bne.n	800f70c <HAL_TIM_PWM_Start_DMA+0xfc>
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f6fe:	b2db      	uxtb	r3, r3
 800f700:	2b01      	cmp	r3, #1
 800f702:	bf0c      	ite	eq
 800f704:	2301      	moveq	r3, #1
 800f706:	2300      	movne	r3, #0
 800f708:	b2db      	uxtb	r3, r3
 800f70a:	e022      	b.n	800f752 <HAL_TIM_PWM_Start_DMA+0x142>
 800f70c:	68bb      	ldr	r3, [r7, #8]
 800f70e:	2b0c      	cmp	r3, #12
 800f710:	d109      	bne.n	800f726 <HAL_TIM_PWM_Start_DMA+0x116>
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f718:	b2db      	uxtb	r3, r3
 800f71a:	2b01      	cmp	r3, #1
 800f71c:	bf0c      	ite	eq
 800f71e:	2301      	moveq	r3, #1
 800f720:	2300      	movne	r3, #0
 800f722:	b2db      	uxtb	r3, r3
 800f724:	e015      	b.n	800f752 <HAL_TIM_PWM_Start_DMA+0x142>
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	2b10      	cmp	r3, #16
 800f72a:	d109      	bne.n	800f740 <HAL_TIM_PWM_Start_DMA+0x130>
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f732:	b2db      	uxtb	r3, r3
 800f734:	2b01      	cmp	r3, #1
 800f736:	bf0c      	ite	eq
 800f738:	2301      	moveq	r3, #1
 800f73a:	2300      	movne	r3, #0
 800f73c:	b2db      	uxtb	r3, r3
 800f73e:	e008      	b.n	800f752 <HAL_TIM_PWM_Start_DMA+0x142>
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f746:	b2db      	uxtb	r3, r3
 800f748:	2b01      	cmp	r3, #1
 800f74a:	bf0c      	ite	eq
 800f74c:	2301      	moveq	r3, #1
 800f74e:	2300      	movne	r3, #0
 800f750:	b2db      	uxtb	r3, r3
 800f752:	2b00      	cmp	r3, #0
 800f754:	d034      	beq.n	800f7c0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d002      	beq.n	800f762 <HAL_TIM_PWM_Start_DMA+0x152>
 800f75c:	887b      	ldrh	r3, [r7, #2]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d101      	bne.n	800f766 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800f762:	2301      	movs	r3, #1
 800f764:	e166      	b.n	800fa34 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d104      	bne.n	800f776 <HAL_TIM_PWM_Start_DMA+0x166>
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	2202      	movs	r2, #2
 800f770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800f774:	e026      	b.n	800f7c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f776:	68bb      	ldr	r3, [r7, #8]
 800f778:	2b04      	cmp	r3, #4
 800f77a:	d104      	bne.n	800f786 <HAL_TIM_PWM_Start_DMA+0x176>
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	2202      	movs	r2, #2
 800f780:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800f784:	e01e      	b.n	800f7c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f786:	68bb      	ldr	r3, [r7, #8]
 800f788:	2b08      	cmp	r3, #8
 800f78a:	d104      	bne.n	800f796 <HAL_TIM_PWM_Start_DMA+0x186>
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	2202      	movs	r2, #2
 800f790:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800f794:	e016      	b.n	800f7c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f796:	68bb      	ldr	r3, [r7, #8]
 800f798:	2b0c      	cmp	r3, #12
 800f79a:	d104      	bne.n	800f7a6 <HAL_TIM_PWM_Start_DMA+0x196>
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2202      	movs	r2, #2
 800f7a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800f7a4:	e00e      	b.n	800f7c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	2b10      	cmp	r3, #16
 800f7aa:	d104      	bne.n	800f7b6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2202      	movs	r2, #2
 800f7b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800f7b4:	e006      	b.n	800f7c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	2202      	movs	r2, #2
 800f7ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f7be:	e001      	b.n	800f7c4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	e137      	b.n	800fa34 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	2b0c      	cmp	r3, #12
 800f7c8:	f200 80ae 	bhi.w	800f928 <HAL_TIM_PWM_Start_DMA+0x318>
 800f7cc:	a201      	add	r2, pc, #4	; (adr r2, 800f7d4 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800f7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7d2:	bf00      	nop
 800f7d4:	0800f809 	.word	0x0800f809
 800f7d8:	0800f929 	.word	0x0800f929
 800f7dc:	0800f929 	.word	0x0800f929
 800f7e0:	0800f929 	.word	0x0800f929
 800f7e4:	0800f851 	.word	0x0800f851
 800f7e8:	0800f929 	.word	0x0800f929
 800f7ec:	0800f929 	.word	0x0800f929
 800f7f0:	0800f929 	.word	0x0800f929
 800f7f4:	0800f899 	.word	0x0800f899
 800f7f8:	0800f929 	.word	0x0800f929
 800f7fc:	0800f929 	.word	0x0800f929
 800f800:	0800f929 	.word	0x0800f929
 800f804:	0800f8e1 	.word	0x0800f8e1
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f80c:	4a8b      	ldr	r2, [pc, #556]	; (800fa3c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f80e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f814:	4a8a      	ldr	r2, [pc, #552]	; (800fa40 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f816:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f81c:	4a89      	ldr	r2, [pc, #548]	; (800fa44 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f81e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f824:	6879      	ldr	r1, [r7, #4]
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	3334      	adds	r3, #52	; 0x34
 800f82c:	461a      	mov	r2, r3
 800f82e:	887b      	ldrh	r3, [r7, #2]
 800f830:	f7f6 f8e4 	bl	80059fc <HAL_DMA_Start_IT>
 800f834:	4603      	mov	r3, r0
 800f836:	2b00      	cmp	r3, #0
 800f838:	d001      	beq.n	800f83e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f83a:	2301      	movs	r3, #1
 800f83c:	e0fa      	b.n	800fa34 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	68da      	ldr	r2, [r3, #12]
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f84c:	60da      	str	r2, [r3, #12]
      break;
 800f84e:	e06e      	b.n	800f92e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f854:	4a79      	ldr	r2, [pc, #484]	; (800fa3c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f856:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f85c:	4a78      	ldr	r2, [pc, #480]	; (800fa40 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f85e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f864:	4a77      	ldr	r2, [pc, #476]	; (800fa44 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f866:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800f86c:	6879      	ldr	r1, [r7, #4]
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	3338      	adds	r3, #56	; 0x38
 800f874:	461a      	mov	r2, r3
 800f876:	887b      	ldrh	r3, [r7, #2]
 800f878:	f7f6 f8c0 	bl	80059fc <HAL_DMA_Start_IT>
 800f87c:	4603      	mov	r3, r0
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d001      	beq.n	800f886 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f882:	2301      	movs	r3, #1
 800f884:	e0d6      	b.n	800fa34 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	68da      	ldr	r2, [r3, #12]
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f894:	60da      	str	r2, [r3, #12]
      break;
 800f896:	e04a      	b.n	800f92e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f89c:	4a67      	ldr	r2, [pc, #412]	; (800fa3c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f89e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8a4:	4a66      	ldr	r2, [pc, #408]	; (800fa40 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f8a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800f8a8:	68fb      	ldr	r3, [r7, #12]
 800f8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8ac:	4a65      	ldr	r2, [pc, #404]	; (800fa44 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f8ae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800f8b4:	6879      	ldr	r1, [r7, #4]
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	333c      	adds	r3, #60	; 0x3c
 800f8bc:	461a      	mov	r2, r3
 800f8be:	887b      	ldrh	r3, [r7, #2]
 800f8c0:	f7f6 f89c 	bl	80059fc <HAL_DMA_Start_IT>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d001      	beq.n	800f8ce <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	e0b2      	b.n	800fa34 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	68da      	ldr	r2, [r3, #12]
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f8dc:	60da      	str	r2, [r3, #12]
      break;
 800f8de:	e026      	b.n	800f92e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800f8e0:	68fb      	ldr	r3, [r7, #12]
 800f8e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8e4:	4a55      	ldr	r2, [pc, #340]	; (800fa3c <HAL_TIM_PWM_Start_DMA+0x42c>)
 800f8e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8ec:	4a54      	ldr	r2, [pc, #336]	; (800fa40 <HAL_TIM_PWM_Start_DMA+0x430>)
 800f8ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8f4:	4a53      	ldr	r2, [pc, #332]	; (800fa44 <HAL_TIM_PWM_Start_DMA+0x434>)
 800f8f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f8fc:	6879      	ldr	r1, [r7, #4]
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	3340      	adds	r3, #64	; 0x40
 800f904:	461a      	mov	r2, r3
 800f906:	887b      	ldrh	r3, [r7, #2]
 800f908:	f7f6 f878 	bl	80059fc <HAL_DMA_Start_IT>
 800f90c:	4603      	mov	r3, r0
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d001      	beq.n	800f916 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800f912:	2301      	movs	r3, #1
 800f914:	e08e      	b.n	800fa34 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	68da      	ldr	r2, [r3, #12]
 800f91c:	68fb      	ldr	r3, [r7, #12]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f924:	60da      	str	r2, [r3, #12]
      break;
 800f926:	e002      	b.n	800f92e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 800f928:	2301      	movs	r3, #1
 800f92a:	75fb      	strb	r3, [r7, #23]
      break;
 800f92c:	bf00      	nop
  }

  if (status == HAL_OK)
 800f92e:	7dfb      	ldrb	r3, [r7, #23]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d17e      	bne.n	800fa32 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	2201      	movs	r2, #1
 800f93a:	68b9      	ldr	r1, [r7, #8]
 800f93c:	4618      	mov	r0, r3
 800f93e:	f000 ff63 	bl	8010808 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	4a40      	ldr	r2, [pc, #256]	; (800fa48 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f948:	4293      	cmp	r3, r2
 800f94a:	d013      	beq.n	800f974 <HAL_TIM_PWM_Start_DMA+0x364>
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	4a3e      	ldr	r2, [pc, #248]	; (800fa4c <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f952:	4293      	cmp	r3, r2
 800f954:	d00e      	beq.n	800f974 <HAL_TIM_PWM_Start_DMA+0x364>
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	4a3d      	ldr	r2, [pc, #244]	; (800fa50 <HAL_TIM_PWM_Start_DMA+0x440>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d009      	beq.n	800f974 <HAL_TIM_PWM_Start_DMA+0x364>
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	4a3b      	ldr	r2, [pc, #236]	; (800fa54 <HAL_TIM_PWM_Start_DMA+0x444>)
 800f966:	4293      	cmp	r3, r2
 800f968:	d004      	beq.n	800f974 <HAL_TIM_PWM_Start_DMA+0x364>
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	681b      	ldr	r3, [r3, #0]
 800f96e:	4a3a      	ldr	r2, [pc, #232]	; (800fa58 <HAL_TIM_PWM_Start_DMA+0x448>)
 800f970:	4293      	cmp	r3, r2
 800f972:	d101      	bne.n	800f978 <HAL_TIM_PWM_Start_DMA+0x368>
 800f974:	2301      	movs	r3, #1
 800f976:	e000      	b.n	800f97a <HAL_TIM_PWM_Start_DMA+0x36a>
 800f978:	2300      	movs	r3, #0
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d007      	beq.n	800f98e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800f98c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	4a2d      	ldr	r2, [pc, #180]	; (800fa48 <HAL_TIM_PWM_Start_DMA+0x438>)
 800f994:	4293      	cmp	r3, r2
 800f996:	d02c      	beq.n	800f9f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f9a0:	d027      	beq.n	800f9f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	4a2d      	ldr	r2, [pc, #180]	; (800fa5c <HAL_TIM_PWM_Start_DMA+0x44c>)
 800f9a8:	4293      	cmp	r3, r2
 800f9aa:	d022      	beq.n	800f9f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	4a2b      	ldr	r2, [pc, #172]	; (800fa60 <HAL_TIM_PWM_Start_DMA+0x450>)
 800f9b2:	4293      	cmp	r3, r2
 800f9b4:	d01d      	beq.n	800f9f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	681b      	ldr	r3, [r3, #0]
 800f9ba:	4a2a      	ldr	r2, [pc, #168]	; (800fa64 <HAL_TIM_PWM_Start_DMA+0x454>)
 800f9bc:	4293      	cmp	r3, r2
 800f9be:	d018      	beq.n	800f9f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	4a21      	ldr	r2, [pc, #132]	; (800fa4c <HAL_TIM_PWM_Start_DMA+0x43c>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d013      	beq.n	800f9f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	4a26      	ldr	r2, [pc, #152]	; (800fa68 <HAL_TIM_PWM_Start_DMA+0x458>)
 800f9d0:	4293      	cmp	r3, r2
 800f9d2:	d00e      	beq.n	800f9f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	4a1d      	ldr	r2, [pc, #116]	; (800fa50 <HAL_TIM_PWM_Start_DMA+0x440>)
 800f9da:	4293      	cmp	r3, r2
 800f9dc:	d009      	beq.n	800f9f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	4a22      	ldr	r2, [pc, #136]	; (800fa6c <HAL_TIM_PWM_Start_DMA+0x45c>)
 800f9e4:	4293      	cmp	r3, r2
 800f9e6:	d004      	beq.n	800f9f2 <HAL_TIM_PWM_Start_DMA+0x3e2>
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	4a20      	ldr	r2, [pc, #128]	; (800fa70 <HAL_TIM_PWM_Start_DMA+0x460>)
 800f9ee:	4293      	cmp	r3, r2
 800f9f0:	d115      	bne.n	800fa1e <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	689a      	ldr	r2, [r3, #8]
 800f9f8:	4b1e      	ldr	r3, [pc, #120]	; (800fa74 <HAL_TIM_PWM_Start_DMA+0x464>)
 800f9fa:	4013      	ands	r3, r2
 800f9fc:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f9fe:	693b      	ldr	r3, [r7, #16]
 800fa00:	2b06      	cmp	r3, #6
 800fa02:	d015      	beq.n	800fa30 <HAL_TIM_PWM_Start_DMA+0x420>
 800fa04:	693b      	ldr	r3, [r7, #16]
 800fa06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fa0a:	d011      	beq.n	800fa30 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	681b      	ldr	r3, [r3, #0]
 800fa10:	681a      	ldr	r2, [r3, #0]
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	f042 0201 	orr.w	r2, r2, #1
 800fa1a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa1c:	e008      	b.n	800fa30 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	681a      	ldr	r2, [r3, #0]
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	f042 0201 	orr.w	r2, r2, #1
 800fa2c:	601a      	str	r2, [r3, #0]
 800fa2e:	e000      	b.n	800fa32 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fa30:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800fa32:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	3718      	adds	r7, #24
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	bd80      	pop	{r7, pc}
 800fa3c:	0800ffff 	.word	0x0800ffff
 800fa40:	080100a7 	.word	0x080100a7
 800fa44:	0800ff6d 	.word	0x0800ff6d
 800fa48:	40010000 	.word	0x40010000
 800fa4c:	40010400 	.word	0x40010400
 800fa50:	40014000 	.word	0x40014000
 800fa54:	40014400 	.word	0x40014400
 800fa58:	40014800 	.word	0x40014800
 800fa5c:	40000400 	.word	0x40000400
 800fa60:	40000800 	.word	0x40000800
 800fa64:	40000c00 	.word	0x40000c00
 800fa68:	40001800 	.word	0x40001800
 800fa6c:	4000e000 	.word	0x4000e000
 800fa70:	4000e400 	.word	0x4000e400
 800fa74:	00010007 	.word	0x00010007

0800fa78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b082      	sub	sp, #8
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	691b      	ldr	r3, [r3, #16]
 800fa86:	f003 0302 	and.w	r3, r3, #2
 800fa8a:	2b02      	cmp	r3, #2
 800fa8c:	d122      	bne.n	800fad4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	68db      	ldr	r3, [r3, #12]
 800fa94:	f003 0302 	and.w	r3, r3, #2
 800fa98:	2b02      	cmp	r3, #2
 800fa9a:	d11b      	bne.n	800fad4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	f06f 0202 	mvn.w	r2, #2
 800faa4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2201      	movs	r2, #1
 800faaa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	681b      	ldr	r3, [r3, #0]
 800fab0:	699b      	ldr	r3, [r3, #24]
 800fab2:	f003 0303 	and.w	r3, r3, #3
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d003      	beq.n	800fac2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800faba:	6878      	ldr	r0, [r7, #4]
 800fabc:	f000 fa24 	bl	800ff08 <HAL_TIM_IC_CaptureCallback>
 800fac0:	e005      	b.n	800face <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fac2:	6878      	ldr	r0, [r7, #4]
 800fac4:	f000 fa16 	bl	800fef4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fac8:	6878      	ldr	r0, [r7, #4]
 800faca:	f000 fa27 	bl	800ff1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2200      	movs	r2, #0
 800fad2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	691b      	ldr	r3, [r3, #16]
 800fada:	f003 0304 	and.w	r3, r3, #4
 800fade:	2b04      	cmp	r3, #4
 800fae0:	d122      	bne.n	800fb28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	68db      	ldr	r3, [r3, #12]
 800fae8:	f003 0304 	and.w	r3, r3, #4
 800faec:	2b04      	cmp	r3, #4
 800faee:	d11b      	bne.n	800fb28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	f06f 0204 	mvn.w	r2, #4
 800faf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2202      	movs	r2, #2
 800fafe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	699b      	ldr	r3, [r3, #24]
 800fb06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d003      	beq.n	800fb16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f000 f9fa 	bl	800ff08 <HAL_TIM_IC_CaptureCallback>
 800fb14:	e005      	b.n	800fb22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f000 f9ec 	bl	800fef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f000 f9fd 	bl	800ff1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2200      	movs	r2, #0
 800fb26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	691b      	ldr	r3, [r3, #16]
 800fb2e:	f003 0308 	and.w	r3, r3, #8
 800fb32:	2b08      	cmp	r3, #8
 800fb34:	d122      	bne.n	800fb7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	68db      	ldr	r3, [r3, #12]
 800fb3c:	f003 0308 	and.w	r3, r3, #8
 800fb40:	2b08      	cmp	r3, #8
 800fb42:	d11b      	bne.n	800fb7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	f06f 0208 	mvn.w	r2, #8
 800fb4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2204      	movs	r2, #4
 800fb52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	69db      	ldr	r3, [r3, #28]
 800fb5a:	f003 0303 	and.w	r3, r3, #3
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d003      	beq.n	800fb6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fb62:	6878      	ldr	r0, [r7, #4]
 800fb64:	f000 f9d0 	bl	800ff08 <HAL_TIM_IC_CaptureCallback>
 800fb68:	e005      	b.n	800fb76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f000 f9c2 	bl	800fef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f000 f9d3 	bl	800ff1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	691b      	ldr	r3, [r3, #16]
 800fb82:	f003 0310 	and.w	r3, r3, #16
 800fb86:	2b10      	cmp	r3, #16
 800fb88:	d122      	bne.n	800fbd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	68db      	ldr	r3, [r3, #12]
 800fb90:	f003 0310 	and.w	r3, r3, #16
 800fb94:	2b10      	cmp	r3, #16
 800fb96:	d11b      	bne.n	800fbd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	f06f 0210 	mvn.w	r2, #16
 800fba0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2208      	movs	r2, #8
 800fba6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	69db      	ldr	r3, [r3, #28]
 800fbae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800fbb2:	2b00      	cmp	r3, #0
 800fbb4:	d003      	beq.n	800fbbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f000 f9a6 	bl	800ff08 <HAL_TIM_IC_CaptureCallback>
 800fbbc:	e005      	b.n	800fbca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f000 f998 	bl	800fef4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbc4:	6878      	ldr	r0, [r7, #4]
 800fbc6:	f000 f9a9 	bl	800ff1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	2200      	movs	r2, #0
 800fbce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	691b      	ldr	r3, [r3, #16]
 800fbd6:	f003 0301 	and.w	r3, r3, #1
 800fbda:	2b01      	cmp	r3, #1
 800fbdc:	d10e      	bne.n	800fbfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	68db      	ldr	r3, [r3, #12]
 800fbe4:	f003 0301 	and.w	r3, r3, #1
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	d107      	bne.n	800fbfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	f06f 0201 	mvn.w	r2, #1
 800fbf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800fbf6:	6878      	ldr	r0, [r7, #4]
 800fbf8:	f000 f972 	bl	800fee0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	691b      	ldr	r3, [r3, #16]
 800fc02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc06:	2b80      	cmp	r3, #128	; 0x80
 800fc08:	d10e      	bne.n	800fc28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	68db      	ldr	r3, [r3, #12]
 800fc10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc14:	2b80      	cmp	r3, #128	; 0x80
 800fc16:	d107      	bne.n	800fc28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800fc20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800fc22:	6878      	ldr	r0, [r7, #4]
 800fc24:	f000 febc 	bl	80109a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	691b      	ldr	r3, [r3, #16]
 800fc2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fc32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc36:	d10e      	bne.n	800fc56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	68db      	ldr	r3, [r3, #12]
 800fc3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc42:	2b80      	cmp	r3, #128	; 0x80
 800fc44:	d107      	bne.n	800fc56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800fc4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f000 feaf 	bl	80109b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	691b      	ldr	r3, [r3, #16]
 800fc5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc60:	2b40      	cmp	r3, #64	; 0x40
 800fc62:	d10e      	bne.n	800fc82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	68db      	ldr	r3, [r3, #12]
 800fc6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc6e:	2b40      	cmp	r3, #64	; 0x40
 800fc70:	d107      	bne.n	800fc82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800fc7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f000 f961 	bl	800ff44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	691b      	ldr	r3, [r3, #16]
 800fc88:	f003 0320 	and.w	r3, r3, #32
 800fc8c:	2b20      	cmp	r3, #32
 800fc8e:	d10e      	bne.n	800fcae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	f003 0320 	and.w	r3, r3, #32
 800fc9a:	2b20      	cmp	r3, #32
 800fc9c:	d107      	bne.n	800fcae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	681b      	ldr	r3, [r3, #0]
 800fca2:	f06f 0220 	mvn.w	r2, #32
 800fca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	f000 fe6f 	bl	801098c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800fcae:	bf00      	nop
 800fcb0:	3708      	adds	r7, #8
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	bd80      	pop	{r7, pc}
	...

0800fcb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b086      	sub	sp, #24
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	60f8      	str	r0, [r7, #12]
 800fcc0:	60b9      	str	r1, [r7, #8]
 800fcc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fcce:	2b01      	cmp	r3, #1
 800fcd0:	d101      	bne.n	800fcd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800fcd2:	2302      	movs	r3, #2
 800fcd4:	e0ff      	b.n	800fed6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	2201      	movs	r2, #1
 800fcda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2b14      	cmp	r3, #20
 800fce2:	f200 80f0 	bhi.w	800fec6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800fce6:	a201      	add	r2, pc, #4	; (adr r2, 800fcec <HAL_TIM_PWM_ConfigChannel+0x34>)
 800fce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcec:	0800fd41 	.word	0x0800fd41
 800fcf0:	0800fec7 	.word	0x0800fec7
 800fcf4:	0800fec7 	.word	0x0800fec7
 800fcf8:	0800fec7 	.word	0x0800fec7
 800fcfc:	0800fd81 	.word	0x0800fd81
 800fd00:	0800fec7 	.word	0x0800fec7
 800fd04:	0800fec7 	.word	0x0800fec7
 800fd08:	0800fec7 	.word	0x0800fec7
 800fd0c:	0800fdc3 	.word	0x0800fdc3
 800fd10:	0800fec7 	.word	0x0800fec7
 800fd14:	0800fec7 	.word	0x0800fec7
 800fd18:	0800fec7 	.word	0x0800fec7
 800fd1c:	0800fe03 	.word	0x0800fe03
 800fd20:	0800fec7 	.word	0x0800fec7
 800fd24:	0800fec7 	.word	0x0800fec7
 800fd28:	0800fec7 	.word	0x0800fec7
 800fd2c:	0800fe45 	.word	0x0800fe45
 800fd30:	0800fec7 	.word	0x0800fec7
 800fd34:	0800fec7 	.word	0x0800fec7
 800fd38:	0800fec7 	.word	0x0800fec7
 800fd3c:	0800fe85 	.word	0x0800fe85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	681b      	ldr	r3, [r3, #0]
 800fd44:	68b9      	ldr	r1, [r7, #8]
 800fd46:	4618      	mov	r0, r3
 800fd48:	f000 fa88 	bl	801025c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	699a      	ldr	r2, [r3, #24]
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	f042 0208 	orr.w	r2, r2, #8
 800fd5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	699a      	ldr	r2, [r3, #24]
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	f022 0204 	bic.w	r2, r2, #4
 800fd6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	6999      	ldr	r1, [r3, #24]
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	691a      	ldr	r2, [r3, #16]
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	430a      	orrs	r2, r1
 800fd7c:	619a      	str	r2, [r3, #24]
      break;
 800fd7e:	e0a5      	b.n	800fecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	681b      	ldr	r3, [r3, #0]
 800fd84:	68b9      	ldr	r1, [r7, #8]
 800fd86:	4618      	mov	r0, r3
 800fd88:	f000 faf8 	bl	801037c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	699a      	ldr	r2, [r3, #24]
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fd9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	699a      	ldr	r2, [r3, #24]
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fdaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	6999      	ldr	r1, [r3, #24]
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	691b      	ldr	r3, [r3, #16]
 800fdb6:	021a      	lsls	r2, r3, #8
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	430a      	orrs	r2, r1
 800fdbe:	619a      	str	r2, [r3, #24]
      break;
 800fdc0:	e084      	b.n	800fecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800fdc2:	68fb      	ldr	r3, [r7, #12]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	68b9      	ldr	r1, [r7, #8]
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f000 fb61 	bl	8010490 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	69da      	ldr	r2, [r3, #28]
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	681b      	ldr	r3, [r3, #0]
 800fdd8:	f042 0208 	orr.w	r2, r2, #8
 800fddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	69da      	ldr	r2, [r3, #28]
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	f022 0204 	bic.w	r2, r2, #4
 800fdec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	681b      	ldr	r3, [r3, #0]
 800fdf2:	69d9      	ldr	r1, [r3, #28]
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	691a      	ldr	r2, [r3, #16]
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	430a      	orrs	r2, r1
 800fdfe:	61da      	str	r2, [r3, #28]
      break;
 800fe00:	e064      	b.n	800fecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	68b9      	ldr	r1, [r7, #8]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f000 fbc9 	bl	80105a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	69da      	ldr	r2, [r3, #28]
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	69da      	ldr	r2, [r3, #28]
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	681b      	ldr	r3, [r3, #0]
 800fe28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800fe2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	69d9      	ldr	r1, [r3, #28]
 800fe34:	68bb      	ldr	r3, [r7, #8]
 800fe36:	691b      	ldr	r3, [r3, #16]
 800fe38:	021a      	lsls	r2, r3, #8
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	430a      	orrs	r2, r1
 800fe40:	61da      	str	r2, [r3, #28]
      break;
 800fe42:	e043      	b.n	800fecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	68b9      	ldr	r1, [r7, #8]
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f000 fc12 	bl	8010674 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	f042 0208 	orr.w	r2, r2, #8
 800fe5e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	f022 0204 	bic.w	r2, r2, #4
 800fe6e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	691a      	ldr	r2, [r3, #16]
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	430a      	orrs	r2, r1
 800fe80:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fe82:	e023      	b.n	800fecc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	68b9      	ldr	r1, [r7, #8]
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	f000 fc56 	bl	801073c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800fe9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	681b      	ldr	r3, [r3, #0]
 800fea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	681b      	ldr	r3, [r3, #0]
 800feaa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800feae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	691b      	ldr	r3, [r3, #16]
 800feba:	021a      	lsls	r2, r3, #8
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	430a      	orrs	r2, r1
 800fec2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800fec4:	e002      	b.n	800fecc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800fec6:	2301      	movs	r3, #1
 800fec8:	75fb      	strb	r3, [r7, #23]
      break;
 800feca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	2200      	movs	r2, #0
 800fed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800fed4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	3718      	adds	r7, #24
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}
 800fede:	bf00      	nop

0800fee0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fee0:	b480      	push	{r7}
 800fee2:	b083      	sub	sp, #12
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800fee8:	bf00      	nop
 800feea:	370c      	adds	r7, #12
 800feec:	46bd      	mov	sp, r7
 800feee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef2:	4770      	bx	lr

0800fef4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800fef4:	b480      	push	{r7}
 800fef6:	b083      	sub	sp, #12
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800fefc:	bf00      	nop
 800fefe:	370c      	adds	r7, #12
 800ff00:	46bd      	mov	sp, r7
 800ff02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff06:	4770      	bx	lr

0800ff08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b083      	sub	sp, #12
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ff10:	bf00      	nop
 800ff12:	370c      	adds	r7, #12
 800ff14:	46bd      	mov	sp, r7
 800ff16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff1a:	4770      	bx	lr

0800ff1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ff1c:	b480      	push	{r7}
 800ff1e:	b083      	sub	sp, #12
 800ff20:	af00      	add	r7, sp, #0
 800ff22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ff24:	bf00      	nop
 800ff26:	370c      	adds	r7, #12
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2e:	4770      	bx	lr

0800ff30 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800ff30:	b480      	push	{r7}
 800ff32:	b083      	sub	sp, #12
 800ff34:	af00      	add	r7, sp, #0
 800ff36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800ff38:	bf00      	nop
 800ff3a:	370c      	adds	r7, #12
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff42:	4770      	bx	lr

0800ff44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ff44:	b480      	push	{r7}
 800ff46:	b083      	sub	sp, #12
 800ff48:	af00      	add	r7, sp, #0
 800ff4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ff4c:	bf00      	nop
 800ff4e:	370c      	adds	r7, #12
 800ff50:	46bd      	mov	sp, r7
 800ff52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff56:	4770      	bx	lr

0800ff58 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b083      	sub	sp, #12
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800ff60:	bf00      	nop
 800ff62:	370c      	adds	r7, #12
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	4770      	bx	lr

0800ff6c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b084      	sub	sp, #16
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff78:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff7e:	687a      	ldr	r2, [r7, #4]
 800ff80:	429a      	cmp	r2, r3
 800ff82:	d107      	bne.n	800ff94 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2201      	movs	r2, #1
 800ff88:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	2201      	movs	r2, #1
 800ff8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ff92:	e02a      	b.n	800ffea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff98:	687a      	ldr	r2, [r7, #4]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d107      	bne.n	800ffae <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	2202      	movs	r2, #2
 800ffa2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ffac:	e01d      	b.n	800ffea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d107      	bne.n	800ffc8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ffb8:	68fb      	ldr	r3, [r7, #12]
 800ffba:	2204      	movs	r2, #4
 800ffbc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	2201      	movs	r2, #1
 800ffc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ffc6:	e010      	b.n	800ffea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffcc:	687a      	ldr	r2, [r7, #4]
 800ffce:	429a      	cmp	r2, r3
 800ffd0:	d107      	bne.n	800ffe2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	2208      	movs	r2, #8
 800ffd6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	2201      	movs	r2, #1
 800ffdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ffe0:	e003      	b.n	800ffea <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	2201      	movs	r2, #1
 800ffe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800ffea:	68f8      	ldr	r0, [r7, #12]
 800ffec:	f7ff ffb4 	bl	800ff58 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	2200      	movs	r2, #0
 800fff4:	771a      	strb	r2, [r3, #28]
}
 800fff6:	bf00      	nop
 800fff8:	3710      	adds	r7, #16
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}

0800fffe <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800fffe:	b580      	push	{r7, lr}
 8010000:	b084      	sub	sp, #16
 8010002:	af00      	add	r7, sp, #0
 8010004:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801000a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010010:	687a      	ldr	r2, [r7, #4]
 8010012:	429a      	cmp	r2, r3
 8010014:	d10b      	bne.n	801002e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	2201      	movs	r2, #1
 801001a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	69db      	ldr	r3, [r3, #28]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d136      	bne.n	8010092 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	2201      	movs	r2, #1
 8010028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801002c:	e031      	b.n	8010092 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	429a      	cmp	r2, r3
 8010036:	d10b      	bne.n	8010050 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	2202      	movs	r2, #2
 801003c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	69db      	ldr	r3, [r3, #28]
 8010042:	2b00      	cmp	r3, #0
 8010044:	d125      	bne.n	8010092 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2201      	movs	r2, #1
 801004a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801004e:	e020      	b.n	8010092 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010054:	687a      	ldr	r2, [r7, #4]
 8010056:	429a      	cmp	r2, r3
 8010058:	d10b      	bne.n	8010072 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	2204      	movs	r2, #4
 801005e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	69db      	ldr	r3, [r3, #28]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d114      	bne.n	8010092 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	2201      	movs	r2, #1
 801006c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010070:	e00f      	b.n	8010092 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010076:	687a      	ldr	r2, [r7, #4]
 8010078:	429a      	cmp	r2, r3
 801007a:	d10a      	bne.n	8010092 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801007c:	68fb      	ldr	r3, [r7, #12]
 801007e:	2208      	movs	r2, #8
 8010080:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	69db      	ldr	r3, [r3, #28]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d103      	bne.n	8010092 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801008a:	68fb      	ldr	r3, [r7, #12]
 801008c:	2201      	movs	r2, #1
 801008e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010092:	68f8      	ldr	r0, [r7, #12]
 8010094:	f7ff ff42 	bl	800ff1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	2200      	movs	r2, #0
 801009c:	771a      	strb	r2, [r3, #28]
}
 801009e:	bf00      	nop
 80100a0:	3710      	adds	r7, #16
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}

080100a6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80100a6:	b580      	push	{r7, lr}
 80100a8:	b084      	sub	sp, #16
 80100aa:	af00      	add	r7, sp, #0
 80100ac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100b2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100b8:	687a      	ldr	r2, [r7, #4]
 80100ba:	429a      	cmp	r2, r3
 80100bc:	d103      	bne.n	80100c6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	2201      	movs	r2, #1
 80100c2:	771a      	strb	r2, [r3, #28]
 80100c4:	e019      	b.n	80100fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100ca:	687a      	ldr	r2, [r7, #4]
 80100cc:	429a      	cmp	r2, r3
 80100ce:	d103      	bne.n	80100d8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80100d0:	68fb      	ldr	r3, [r7, #12]
 80100d2:	2202      	movs	r2, #2
 80100d4:	771a      	strb	r2, [r3, #28]
 80100d6:	e010      	b.n	80100fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100dc:	687a      	ldr	r2, [r7, #4]
 80100de:	429a      	cmp	r2, r3
 80100e0:	d103      	bne.n	80100ea <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	2204      	movs	r2, #4
 80100e6:	771a      	strb	r2, [r3, #28]
 80100e8:	e007      	b.n	80100fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100ee:	687a      	ldr	r2, [r7, #4]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d102      	bne.n	80100fa <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	2208      	movs	r2, #8
 80100f8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80100fa:	68f8      	ldr	r0, [r7, #12]
 80100fc:	f7ff ff18 	bl	800ff30 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010100:	68fb      	ldr	r3, [r7, #12]
 8010102:	2200      	movs	r2, #0
 8010104:	771a      	strb	r2, [r3, #28]
}
 8010106:	bf00      	nop
 8010108:	3710      	adds	r7, #16
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}
	...

08010110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8010110:	b480      	push	{r7}
 8010112:	b085      	sub	sp, #20
 8010114:	af00      	add	r7, sp, #0
 8010116:	6078      	str	r0, [r7, #4]
 8010118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	4a44      	ldr	r2, [pc, #272]	; (8010234 <TIM_Base_SetConfig+0x124>)
 8010124:	4293      	cmp	r3, r2
 8010126:	d013      	beq.n	8010150 <TIM_Base_SetConfig+0x40>
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801012e:	d00f      	beq.n	8010150 <TIM_Base_SetConfig+0x40>
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	4a41      	ldr	r2, [pc, #260]	; (8010238 <TIM_Base_SetConfig+0x128>)
 8010134:	4293      	cmp	r3, r2
 8010136:	d00b      	beq.n	8010150 <TIM_Base_SetConfig+0x40>
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	4a40      	ldr	r2, [pc, #256]	; (801023c <TIM_Base_SetConfig+0x12c>)
 801013c:	4293      	cmp	r3, r2
 801013e:	d007      	beq.n	8010150 <TIM_Base_SetConfig+0x40>
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	4a3f      	ldr	r2, [pc, #252]	; (8010240 <TIM_Base_SetConfig+0x130>)
 8010144:	4293      	cmp	r3, r2
 8010146:	d003      	beq.n	8010150 <TIM_Base_SetConfig+0x40>
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	4a3e      	ldr	r2, [pc, #248]	; (8010244 <TIM_Base_SetConfig+0x134>)
 801014c:	4293      	cmp	r3, r2
 801014e:	d108      	bne.n	8010162 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8010158:	683b      	ldr	r3, [r7, #0]
 801015a:	685b      	ldr	r3, [r3, #4]
 801015c:	68fa      	ldr	r2, [r7, #12]
 801015e:	4313      	orrs	r3, r2
 8010160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	4a33      	ldr	r2, [pc, #204]	; (8010234 <TIM_Base_SetConfig+0x124>)
 8010166:	4293      	cmp	r3, r2
 8010168:	d027      	beq.n	80101ba <TIM_Base_SetConfig+0xaa>
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010170:	d023      	beq.n	80101ba <TIM_Base_SetConfig+0xaa>
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	4a30      	ldr	r2, [pc, #192]	; (8010238 <TIM_Base_SetConfig+0x128>)
 8010176:	4293      	cmp	r3, r2
 8010178:	d01f      	beq.n	80101ba <TIM_Base_SetConfig+0xaa>
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	4a2f      	ldr	r2, [pc, #188]	; (801023c <TIM_Base_SetConfig+0x12c>)
 801017e:	4293      	cmp	r3, r2
 8010180:	d01b      	beq.n	80101ba <TIM_Base_SetConfig+0xaa>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	4a2e      	ldr	r2, [pc, #184]	; (8010240 <TIM_Base_SetConfig+0x130>)
 8010186:	4293      	cmp	r3, r2
 8010188:	d017      	beq.n	80101ba <TIM_Base_SetConfig+0xaa>
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	4a2d      	ldr	r2, [pc, #180]	; (8010244 <TIM_Base_SetConfig+0x134>)
 801018e:	4293      	cmp	r3, r2
 8010190:	d013      	beq.n	80101ba <TIM_Base_SetConfig+0xaa>
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	4a2c      	ldr	r2, [pc, #176]	; (8010248 <TIM_Base_SetConfig+0x138>)
 8010196:	4293      	cmp	r3, r2
 8010198:	d00f      	beq.n	80101ba <TIM_Base_SetConfig+0xaa>
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	4a2b      	ldr	r2, [pc, #172]	; (801024c <TIM_Base_SetConfig+0x13c>)
 801019e:	4293      	cmp	r3, r2
 80101a0:	d00b      	beq.n	80101ba <TIM_Base_SetConfig+0xaa>
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	4a2a      	ldr	r2, [pc, #168]	; (8010250 <TIM_Base_SetConfig+0x140>)
 80101a6:	4293      	cmp	r3, r2
 80101a8:	d007      	beq.n	80101ba <TIM_Base_SetConfig+0xaa>
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	4a29      	ldr	r2, [pc, #164]	; (8010254 <TIM_Base_SetConfig+0x144>)
 80101ae:	4293      	cmp	r3, r2
 80101b0:	d003      	beq.n	80101ba <TIM_Base_SetConfig+0xaa>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	4a28      	ldr	r2, [pc, #160]	; (8010258 <TIM_Base_SetConfig+0x148>)
 80101b6:	4293      	cmp	r3, r2
 80101b8:	d108      	bne.n	80101cc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80101c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80101c2:	683b      	ldr	r3, [r7, #0]
 80101c4:	68db      	ldr	r3, [r3, #12]
 80101c6:	68fa      	ldr	r2, [r7, #12]
 80101c8:	4313      	orrs	r3, r2
 80101ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80101cc:	68fb      	ldr	r3, [r7, #12]
 80101ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	695b      	ldr	r3, [r3, #20]
 80101d6:	4313      	orrs	r3, r2
 80101d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	68fa      	ldr	r2, [r7, #12]
 80101de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80101e0:	683b      	ldr	r3, [r7, #0]
 80101e2:	689a      	ldr	r2, [r3, #8]
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80101e8:	683b      	ldr	r3, [r7, #0]
 80101ea:	681a      	ldr	r2, [r3, #0]
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	4a10      	ldr	r2, [pc, #64]	; (8010234 <TIM_Base_SetConfig+0x124>)
 80101f4:	4293      	cmp	r3, r2
 80101f6:	d00f      	beq.n	8010218 <TIM_Base_SetConfig+0x108>
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	4a12      	ldr	r2, [pc, #72]	; (8010244 <TIM_Base_SetConfig+0x134>)
 80101fc:	4293      	cmp	r3, r2
 80101fe:	d00b      	beq.n	8010218 <TIM_Base_SetConfig+0x108>
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	4a11      	ldr	r2, [pc, #68]	; (8010248 <TIM_Base_SetConfig+0x138>)
 8010204:	4293      	cmp	r3, r2
 8010206:	d007      	beq.n	8010218 <TIM_Base_SetConfig+0x108>
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	4a10      	ldr	r2, [pc, #64]	; (801024c <TIM_Base_SetConfig+0x13c>)
 801020c:	4293      	cmp	r3, r2
 801020e:	d003      	beq.n	8010218 <TIM_Base_SetConfig+0x108>
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	4a0f      	ldr	r2, [pc, #60]	; (8010250 <TIM_Base_SetConfig+0x140>)
 8010214:	4293      	cmp	r3, r2
 8010216:	d103      	bne.n	8010220 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	691a      	ldr	r2, [r3, #16]
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2201      	movs	r2, #1
 8010224:	615a      	str	r2, [r3, #20]
}
 8010226:	bf00      	nop
 8010228:	3714      	adds	r7, #20
 801022a:	46bd      	mov	sp, r7
 801022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010230:	4770      	bx	lr
 8010232:	bf00      	nop
 8010234:	40010000 	.word	0x40010000
 8010238:	40000400 	.word	0x40000400
 801023c:	40000800 	.word	0x40000800
 8010240:	40000c00 	.word	0x40000c00
 8010244:	40010400 	.word	0x40010400
 8010248:	40014000 	.word	0x40014000
 801024c:	40014400 	.word	0x40014400
 8010250:	40014800 	.word	0x40014800
 8010254:	4000e000 	.word	0x4000e000
 8010258:	4000e400 	.word	0x4000e400

0801025c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801025c:	b480      	push	{r7}
 801025e:	b087      	sub	sp, #28
 8010260:	af00      	add	r7, sp, #0
 8010262:	6078      	str	r0, [r7, #4]
 8010264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	6a1b      	ldr	r3, [r3, #32]
 801026a:	f023 0201 	bic.w	r2, r3, #1
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	6a1b      	ldr	r3, [r3, #32]
 8010276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	685b      	ldr	r3, [r3, #4]
 801027c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	699b      	ldr	r3, [r3, #24]
 8010282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010284:	68fa      	ldr	r2, [r7, #12]
 8010286:	4b37      	ldr	r3, [pc, #220]	; (8010364 <TIM_OC1_SetConfig+0x108>)
 8010288:	4013      	ands	r3, r2
 801028a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	f023 0303 	bic.w	r3, r3, #3
 8010292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010294:	683b      	ldr	r3, [r7, #0]
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	68fa      	ldr	r2, [r7, #12]
 801029a:	4313      	orrs	r3, r2
 801029c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801029e:	697b      	ldr	r3, [r7, #20]
 80102a0:	f023 0302 	bic.w	r3, r3, #2
 80102a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	689b      	ldr	r3, [r3, #8]
 80102aa:	697a      	ldr	r2, [r7, #20]
 80102ac:	4313      	orrs	r3, r2
 80102ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	4a2d      	ldr	r2, [pc, #180]	; (8010368 <TIM_OC1_SetConfig+0x10c>)
 80102b4:	4293      	cmp	r3, r2
 80102b6:	d00f      	beq.n	80102d8 <TIM_OC1_SetConfig+0x7c>
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	4a2c      	ldr	r2, [pc, #176]	; (801036c <TIM_OC1_SetConfig+0x110>)
 80102bc:	4293      	cmp	r3, r2
 80102be:	d00b      	beq.n	80102d8 <TIM_OC1_SetConfig+0x7c>
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	4a2b      	ldr	r2, [pc, #172]	; (8010370 <TIM_OC1_SetConfig+0x114>)
 80102c4:	4293      	cmp	r3, r2
 80102c6:	d007      	beq.n	80102d8 <TIM_OC1_SetConfig+0x7c>
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	4a2a      	ldr	r2, [pc, #168]	; (8010374 <TIM_OC1_SetConfig+0x118>)
 80102cc:	4293      	cmp	r3, r2
 80102ce:	d003      	beq.n	80102d8 <TIM_OC1_SetConfig+0x7c>
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	4a29      	ldr	r2, [pc, #164]	; (8010378 <TIM_OC1_SetConfig+0x11c>)
 80102d4:	4293      	cmp	r3, r2
 80102d6:	d10c      	bne.n	80102f2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	f023 0308 	bic.w	r3, r3, #8
 80102de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80102e0:	683b      	ldr	r3, [r7, #0]
 80102e2:	68db      	ldr	r3, [r3, #12]
 80102e4:	697a      	ldr	r2, [r7, #20]
 80102e6:	4313      	orrs	r3, r2
 80102e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80102ea:	697b      	ldr	r3, [r7, #20]
 80102ec:	f023 0304 	bic.w	r3, r3, #4
 80102f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	4a1c      	ldr	r2, [pc, #112]	; (8010368 <TIM_OC1_SetConfig+0x10c>)
 80102f6:	4293      	cmp	r3, r2
 80102f8:	d00f      	beq.n	801031a <TIM_OC1_SetConfig+0xbe>
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	4a1b      	ldr	r2, [pc, #108]	; (801036c <TIM_OC1_SetConfig+0x110>)
 80102fe:	4293      	cmp	r3, r2
 8010300:	d00b      	beq.n	801031a <TIM_OC1_SetConfig+0xbe>
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	4a1a      	ldr	r2, [pc, #104]	; (8010370 <TIM_OC1_SetConfig+0x114>)
 8010306:	4293      	cmp	r3, r2
 8010308:	d007      	beq.n	801031a <TIM_OC1_SetConfig+0xbe>
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	4a19      	ldr	r2, [pc, #100]	; (8010374 <TIM_OC1_SetConfig+0x118>)
 801030e:	4293      	cmp	r3, r2
 8010310:	d003      	beq.n	801031a <TIM_OC1_SetConfig+0xbe>
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	4a18      	ldr	r2, [pc, #96]	; (8010378 <TIM_OC1_SetConfig+0x11c>)
 8010316:	4293      	cmp	r3, r2
 8010318:	d111      	bne.n	801033e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010320:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010322:	693b      	ldr	r3, [r7, #16]
 8010324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010328:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801032a:	683b      	ldr	r3, [r7, #0]
 801032c:	695b      	ldr	r3, [r3, #20]
 801032e:	693a      	ldr	r2, [r7, #16]
 8010330:	4313      	orrs	r3, r2
 8010332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010334:	683b      	ldr	r3, [r7, #0]
 8010336:	699b      	ldr	r3, [r3, #24]
 8010338:	693a      	ldr	r2, [r7, #16]
 801033a:	4313      	orrs	r3, r2
 801033c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	693a      	ldr	r2, [r7, #16]
 8010342:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	68fa      	ldr	r2, [r7, #12]
 8010348:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	685a      	ldr	r2, [r3, #4]
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	697a      	ldr	r2, [r7, #20]
 8010356:	621a      	str	r2, [r3, #32]
}
 8010358:	bf00      	nop
 801035a:	371c      	adds	r7, #28
 801035c:	46bd      	mov	sp, r7
 801035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010362:	4770      	bx	lr
 8010364:	fffeff8f 	.word	0xfffeff8f
 8010368:	40010000 	.word	0x40010000
 801036c:	40010400 	.word	0x40010400
 8010370:	40014000 	.word	0x40014000
 8010374:	40014400 	.word	0x40014400
 8010378:	40014800 	.word	0x40014800

0801037c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801037c:	b480      	push	{r7}
 801037e:	b087      	sub	sp, #28
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
 8010384:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	6a1b      	ldr	r3, [r3, #32]
 801038a:	f023 0210 	bic.w	r2, r3, #16
 801038e:	687b      	ldr	r3, [r7, #4]
 8010390:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6a1b      	ldr	r3, [r3, #32]
 8010396:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	685b      	ldr	r3, [r3, #4]
 801039c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	699b      	ldr	r3, [r3, #24]
 80103a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80103a4:	68fa      	ldr	r2, [r7, #12]
 80103a6:	4b34      	ldr	r3, [pc, #208]	; (8010478 <TIM_OC2_SetConfig+0xfc>)
 80103a8:	4013      	ands	r3, r2
 80103aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80103ac:	68fb      	ldr	r3, [r7, #12]
 80103ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80103b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	021b      	lsls	r3, r3, #8
 80103ba:	68fa      	ldr	r2, [r7, #12]
 80103bc:	4313      	orrs	r3, r2
 80103be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80103c0:	697b      	ldr	r3, [r7, #20]
 80103c2:	f023 0320 	bic.w	r3, r3, #32
 80103c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	689b      	ldr	r3, [r3, #8]
 80103cc:	011b      	lsls	r3, r3, #4
 80103ce:	697a      	ldr	r2, [r7, #20]
 80103d0:	4313      	orrs	r3, r2
 80103d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	4a29      	ldr	r2, [pc, #164]	; (801047c <TIM_OC2_SetConfig+0x100>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	d003      	beq.n	80103e4 <TIM_OC2_SetConfig+0x68>
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	4a28      	ldr	r2, [pc, #160]	; (8010480 <TIM_OC2_SetConfig+0x104>)
 80103e0:	4293      	cmp	r3, r2
 80103e2:	d10d      	bne.n	8010400 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80103e4:	697b      	ldr	r3, [r7, #20]
 80103e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80103ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80103ec:	683b      	ldr	r3, [r7, #0]
 80103ee:	68db      	ldr	r3, [r3, #12]
 80103f0:	011b      	lsls	r3, r3, #4
 80103f2:	697a      	ldr	r2, [r7, #20]
 80103f4:	4313      	orrs	r3, r2
 80103f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	4a1e      	ldr	r2, [pc, #120]	; (801047c <TIM_OC2_SetConfig+0x100>)
 8010404:	4293      	cmp	r3, r2
 8010406:	d00f      	beq.n	8010428 <TIM_OC2_SetConfig+0xac>
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	4a1d      	ldr	r2, [pc, #116]	; (8010480 <TIM_OC2_SetConfig+0x104>)
 801040c:	4293      	cmp	r3, r2
 801040e:	d00b      	beq.n	8010428 <TIM_OC2_SetConfig+0xac>
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	4a1c      	ldr	r2, [pc, #112]	; (8010484 <TIM_OC2_SetConfig+0x108>)
 8010414:	4293      	cmp	r3, r2
 8010416:	d007      	beq.n	8010428 <TIM_OC2_SetConfig+0xac>
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	4a1b      	ldr	r2, [pc, #108]	; (8010488 <TIM_OC2_SetConfig+0x10c>)
 801041c:	4293      	cmp	r3, r2
 801041e:	d003      	beq.n	8010428 <TIM_OC2_SetConfig+0xac>
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	4a1a      	ldr	r2, [pc, #104]	; (801048c <TIM_OC2_SetConfig+0x110>)
 8010424:	4293      	cmp	r3, r2
 8010426:	d113      	bne.n	8010450 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801042e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010436:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010438:	683b      	ldr	r3, [r7, #0]
 801043a:	695b      	ldr	r3, [r3, #20]
 801043c:	009b      	lsls	r3, r3, #2
 801043e:	693a      	ldr	r2, [r7, #16]
 8010440:	4313      	orrs	r3, r2
 8010442:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010444:	683b      	ldr	r3, [r7, #0]
 8010446:	699b      	ldr	r3, [r3, #24]
 8010448:	009b      	lsls	r3, r3, #2
 801044a:	693a      	ldr	r2, [r7, #16]
 801044c:	4313      	orrs	r3, r2
 801044e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	693a      	ldr	r2, [r7, #16]
 8010454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	68fa      	ldr	r2, [r7, #12]
 801045a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	685a      	ldr	r2, [r3, #4]
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	697a      	ldr	r2, [r7, #20]
 8010468:	621a      	str	r2, [r3, #32]
}
 801046a:	bf00      	nop
 801046c:	371c      	adds	r7, #28
 801046e:	46bd      	mov	sp, r7
 8010470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010474:	4770      	bx	lr
 8010476:	bf00      	nop
 8010478:	feff8fff 	.word	0xfeff8fff
 801047c:	40010000 	.word	0x40010000
 8010480:	40010400 	.word	0x40010400
 8010484:	40014000 	.word	0x40014000
 8010488:	40014400 	.word	0x40014400
 801048c:	40014800 	.word	0x40014800

08010490 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010490:	b480      	push	{r7}
 8010492:	b087      	sub	sp, #28
 8010494:	af00      	add	r7, sp, #0
 8010496:	6078      	str	r0, [r7, #4]
 8010498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	6a1b      	ldr	r3, [r3, #32]
 801049e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6a1b      	ldr	r3, [r3, #32]
 80104aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	69db      	ldr	r3, [r3, #28]
 80104b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80104b8:	68fa      	ldr	r2, [r7, #12]
 80104ba:	4b33      	ldr	r3, [pc, #204]	; (8010588 <TIM_OC3_SetConfig+0xf8>)
 80104bc:	4013      	ands	r3, r2
 80104be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	f023 0303 	bic.w	r3, r3, #3
 80104c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	68fa      	ldr	r2, [r7, #12]
 80104ce:	4313      	orrs	r3, r2
 80104d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80104d2:	697b      	ldr	r3, [r7, #20]
 80104d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80104d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80104da:	683b      	ldr	r3, [r7, #0]
 80104dc:	689b      	ldr	r3, [r3, #8]
 80104de:	021b      	lsls	r3, r3, #8
 80104e0:	697a      	ldr	r2, [r7, #20]
 80104e2:	4313      	orrs	r3, r2
 80104e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	4a28      	ldr	r2, [pc, #160]	; (801058c <TIM_OC3_SetConfig+0xfc>)
 80104ea:	4293      	cmp	r3, r2
 80104ec:	d003      	beq.n	80104f6 <TIM_OC3_SetConfig+0x66>
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	4a27      	ldr	r2, [pc, #156]	; (8010590 <TIM_OC3_SetConfig+0x100>)
 80104f2:	4293      	cmp	r3, r2
 80104f4:	d10d      	bne.n	8010512 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80104f6:	697b      	ldr	r3, [r7, #20]
 80104f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80104fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	68db      	ldr	r3, [r3, #12]
 8010502:	021b      	lsls	r3, r3, #8
 8010504:	697a      	ldr	r2, [r7, #20]
 8010506:	4313      	orrs	r3, r2
 8010508:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010510:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	4a1d      	ldr	r2, [pc, #116]	; (801058c <TIM_OC3_SetConfig+0xfc>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d00f      	beq.n	801053a <TIM_OC3_SetConfig+0xaa>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	4a1c      	ldr	r2, [pc, #112]	; (8010590 <TIM_OC3_SetConfig+0x100>)
 801051e:	4293      	cmp	r3, r2
 8010520:	d00b      	beq.n	801053a <TIM_OC3_SetConfig+0xaa>
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	4a1b      	ldr	r2, [pc, #108]	; (8010594 <TIM_OC3_SetConfig+0x104>)
 8010526:	4293      	cmp	r3, r2
 8010528:	d007      	beq.n	801053a <TIM_OC3_SetConfig+0xaa>
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	4a1a      	ldr	r2, [pc, #104]	; (8010598 <TIM_OC3_SetConfig+0x108>)
 801052e:	4293      	cmp	r3, r2
 8010530:	d003      	beq.n	801053a <TIM_OC3_SetConfig+0xaa>
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	4a19      	ldr	r2, [pc, #100]	; (801059c <TIM_OC3_SetConfig+0x10c>)
 8010536:	4293      	cmp	r3, r2
 8010538:	d113      	bne.n	8010562 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801053a:	693b      	ldr	r3, [r7, #16]
 801053c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010540:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010548:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	695b      	ldr	r3, [r3, #20]
 801054e:	011b      	lsls	r3, r3, #4
 8010550:	693a      	ldr	r2, [r7, #16]
 8010552:	4313      	orrs	r3, r2
 8010554:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	699b      	ldr	r3, [r3, #24]
 801055a:	011b      	lsls	r3, r3, #4
 801055c:	693a      	ldr	r2, [r7, #16]
 801055e:	4313      	orrs	r3, r2
 8010560:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	693a      	ldr	r2, [r7, #16]
 8010566:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	68fa      	ldr	r2, [r7, #12]
 801056c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801056e:	683b      	ldr	r3, [r7, #0]
 8010570:	685a      	ldr	r2, [r3, #4]
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	697a      	ldr	r2, [r7, #20]
 801057a:	621a      	str	r2, [r3, #32]
}
 801057c:	bf00      	nop
 801057e:	371c      	adds	r7, #28
 8010580:	46bd      	mov	sp, r7
 8010582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010586:	4770      	bx	lr
 8010588:	fffeff8f 	.word	0xfffeff8f
 801058c:	40010000 	.word	0x40010000
 8010590:	40010400 	.word	0x40010400
 8010594:	40014000 	.word	0x40014000
 8010598:	40014400 	.word	0x40014400
 801059c:	40014800 	.word	0x40014800

080105a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80105a0:	b480      	push	{r7}
 80105a2:	b087      	sub	sp, #28
 80105a4:	af00      	add	r7, sp, #0
 80105a6:	6078      	str	r0, [r7, #4]
 80105a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	6a1b      	ldr	r3, [r3, #32]
 80105ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	6a1b      	ldr	r3, [r3, #32]
 80105ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	685b      	ldr	r3, [r3, #4]
 80105c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	69db      	ldr	r3, [r3, #28]
 80105c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80105c8:	68fa      	ldr	r2, [r7, #12]
 80105ca:	4b24      	ldr	r3, [pc, #144]	; (801065c <TIM_OC4_SetConfig+0xbc>)
 80105cc:	4013      	ands	r3, r2
 80105ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80105d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	021b      	lsls	r3, r3, #8
 80105de:	68fa      	ldr	r2, [r7, #12]
 80105e0:	4313      	orrs	r3, r2
 80105e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80105ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80105ec:	683b      	ldr	r3, [r7, #0]
 80105ee:	689b      	ldr	r3, [r3, #8]
 80105f0:	031b      	lsls	r3, r3, #12
 80105f2:	693a      	ldr	r2, [r7, #16]
 80105f4:	4313      	orrs	r3, r2
 80105f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	4a19      	ldr	r2, [pc, #100]	; (8010660 <TIM_OC4_SetConfig+0xc0>)
 80105fc:	4293      	cmp	r3, r2
 80105fe:	d00f      	beq.n	8010620 <TIM_OC4_SetConfig+0x80>
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	4a18      	ldr	r2, [pc, #96]	; (8010664 <TIM_OC4_SetConfig+0xc4>)
 8010604:	4293      	cmp	r3, r2
 8010606:	d00b      	beq.n	8010620 <TIM_OC4_SetConfig+0x80>
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	4a17      	ldr	r2, [pc, #92]	; (8010668 <TIM_OC4_SetConfig+0xc8>)
 801060c:	4293      	cmp	r3, r2
 801060e:	d007      	beq.n	8010620 <TIM_OC4_SetConfig+0x80>
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	4a16      	ldr	r2, [pc, #88]	; (801066c <TIM_OC4_SetConfig+0xcc>)
 8010614:	4293      	cmp	r3, r2
 8010616:	d003      	beq.n	8010620 <TIM_OC4_SetConfig+0x80>
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	4a15      	ldr	r2, [pc, #84]	; (8010670 <TIM_OC4_SetConfig+0xd0>)
 801061c:	4293      	cmp	r3, r2
 801061e:	d109      	bne.n	8010634 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010626:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	695b      	ldr	r3, [r3, #20]
 801062c:	019b      	lsls	r3, r3, #6
 801062e:	697a      	ldr	r2, [r7, #20]
 8010630:	4313      	orrs	r3, r2
 8010632:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	697a      	ldr	r2, [r7, #20]
 8010638:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	68fa      	ldr	r2, [r7, #12]
 801063e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010640:	683b      	ldr	r3, [r7, #0]
 8010642:	685a      	ldr	r2, [r3, #4]
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010648:	687b      	ldr	r3, [r7, #4]
 801064a:	693a      	ldr	r2, [r7, #16]
 801064c:	621a      	str	r2, [r3, #32]
}
 801064e:	bf00      	nop
 8010650:	371c      	adds	r7, #28
 8010652:	46bd      	mov	sp, r7
 8010654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010658:	4770      	bx	lr
 801065a:	bf00      	nop
 801065c:	feff8fff 	.word	0xfeff8fff
 8010660:	40010000 	.word	0x40010000
 8010664:	40010400 	.word	0x40010400
 8010668:	40014000 	.word	0x40014000
 801066c:	40014400 	.word	0x40014400
 8010670:	40014800 	.word	0x40014800

08010674 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010674:	b480      	push	{r7}
 8010676:	b087      	sub	sp, #28
 8010678:	af00      	add	r7, sp, #0
 801067a:	6078      	str	r0, [r7, #4]
 801067c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6a1b      	ldr	r3, [r3, #32]
 8010682:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	6a1b      	ldr	r3, [r3, #32]
 801068e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	685b      	ldr	r3, [r3, #4]
 8010694:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801069a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801069c:	68fa      	ldr	r2, [r7, #12]
 801069e:	4b21      	ldr	r3, [pc, #132]	; (8010724 <TIM_OC5_SetConfig+0xb0>)
 80106a0:	4013      	ands	r3, r2
 80106a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	68fa      	ldr	r2, [r7, #12]
 80106aa:	4313      	orrs	r3, r2
 80106ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80106ae:	693b      	ldr	r3, [r7, #16]
 80106b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80106b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	689b      	ldr	r3, [r3, #8]
 80106ba:	041b      	lsls	r3, r3, #16
 80106bc:	693a      	ldr	r2, [r7, #16]
 80106be:	4313      	orrs	r3, r2
 80106c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	4a18      	ldr	r2, [pc, #96]	; (8010728 <TIM_OC5_SetConfig+0xb4>)
 80106c6:	4293      	cmp	r3, r2
 80106c8:	d00f      	beq.n	80106ea <TIM_OC5_SetConfig+0x76>
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	4a17      	ldr	r2, [pc, #92]	; (801072c <TIM_OC5_SetConfig+0xb8>)
 80106ce:	4293      	cmp	r3, r2
 80106d0:	d00b      	beq.n	80106ea <TIM_OC5_SetConfig+0x76>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	4a16      	ldr	r2, [pc, #88]	; (8010730 <TIM_OC5_SetConfig+0xbc>)
 80106d6:	4293      	cmp	r3, r2
 80106d8:	d007      	beq.n	80106ea <TIM_OC5_SetConfig+0x76>
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	4a15      	ldr	r2, [pc, #84]	; (8010734 <TIM_OC5_SetConfig+0xc0>)
 80106de:	4293      	cmp	r3, r2
 80106e0:	d003      	beq.n	80106ea <TIM_OC5_SetConfig+0x76>
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	4a14      	ldr	r2, [pc, #80]	; (8010738 <TIM_OC5_SetConfig+0xc4>)
 80106e6:	4293      	cmp	r3, r2
 80106e8:	d109      	bne.n	80106fe <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80106f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	695b      	ldr	r3, [r3, #20]
 80106f6:	021b      	lsls	r3, r3, #8
 80106f8:	697a      	ldr	r2, [r7, #20]
 80106fa:	4313      	orrs	r3, r2
 80106fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	697a      	ldr	r2, [r7, #20]
 8010702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	68fa      	ldr	r2, [r7, #12]
 8010708:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801070a:	683b      	ldr	r3, [r7, #0]
 801070c:	685a      	ldr	r2, [r3, #4]
 801070e:	687b      	ldr	r3, [r7, #4]
 8010710:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	693a      	ldr	r2, [r7, #16]
 8010716:	621a      	str	r2, [r3, #32]
}
 8010718:	bf00      	nop
 801071a:	371c      	adds	r7, #28
 801071c:	46bd      	mov	sp, r7
 801071e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010722:	4770      	bx	lr
 8010724:	fffeff8f 	.word	0xfffeff8f
 8010728:	40010000 	.word	0x40010000
 801072c:	40010400 	.word	0x40010400
 8010730:	40014000 	.word	0x40014000
 8010734:	40014400 	.word	0x40014400
 8010738:	40014800 	.word	0x40014800

0801073c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801073c:	b480      	push	{r7}
 801073e:	b087      	sub	sp, #28
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
 8010744:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	6a1b      	ldr	r3, [r3, #32]
 801074a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	6a1b      	ldr	r3, [r3, #32]
 8010756:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	685b      	ldr	r3, [r3, #4]
 801075c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010762:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010764:	68fa      	ldr	r2, [r7, #12]
 8010766:	4b22      	ldr	r3, [pc, #136]	; (80107f0 <TIM_OC6_SetConfig+0xb4>)
 8010768:	4013      	ands	r3, r2
 801076a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801076c:	683b      	ldr	r3, [r7, #0]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	021b      	lsls	r3, r3, #8
 8010772:	68fa      	ldr	r2, [r7, #12]
 8010774:	4313      	orrs	r3, r2
 8010776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801077e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	689b      	ldr	r3, [r3, #8]
 8010784:	051b      	lsls	r3, r3, #20
 8010786:	693a      	ldr	r2, [r7, #16]
 8010788:	4313      	orrs	r3, r2
 801078a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	4a19      	ldr	r2, [pc, #100]	; (80107f4 <TIM_OC6_SetConfig+0xb8>)
 8010790:	4293      	cmp	r3, r2
 8010792:	d00f      	beq.n	80107b4 <TIM_OC6_SetConfig+0x78>
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	4a18      	ldr	r2, [pc, #96]	; (80107f8 <TIM_OC6_SetConfig+0xbc>)
 8010798:	4293      	cmp	r3, r2
 801079a:	d00b      	beq.n	80107b4 <TIM_OC6_SetConfig+0x78>
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	4a17      	ldr	r2, [pc, #92]	; (80107fc <TIM_OC6_SetConfig+0xc0>)
 80107a0:	4293      	cmp	r3, r2
 80107a2:	d007      	beq.n	80107b4 <TIM_OC6_SetConfig+0x78>
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	4a16      	ldr	r2, [pc, #88]	; (8010800 <TIM_OC6_SetConfig+0xc4>)
 80107a8:	4293      	cmp	r3, r2
 80107aa:	d003      	beq.n	80107b4 <TIM_OC6_SetConfig+0x78>
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	4a15      	ldr	r2, [pc, #84]	; (8010804 <TIM_OC6_SetConfig+0xc8>)
 80107b0:	4293      	cmp	r3, r2
 80107b2:	d109      	bne.n	80107c8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80107ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	695b      	ldr	r3, [r3, #20]
 80107c0:	029b      	lsls	r3, r3, #10
 80107c2:	697a      	ldr	r2, [r7, #20]
 80107c4:	4313      	orrs	r3, r2
 80107c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	697a      	ldr	r2, [r7, #20]
 80107cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	68fa      	ldr	r2, [r7, #12]
 80107d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	685a      	ldr	r2, [r3, #4]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	693a      	ldr	r2, [r7, #16]
 80107e0:	621a      	str	r2, [r3, #32]
}
 80107e2:	bf00      	nop
 80107e4:	371c      	adds	r7, #28
 80107e6:	46bd      	mov	sp, r7
 80107e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ec:	4770      	bx	lr
 80107ee:	bf00      	nop
 80107f0:	feff8fff 	.word	0xfeff8fff
 80107f4:	40010000 	.word	0x40010000
 80107f8:	40010400 	.word	0x40010400
 80107fc:	40014000 	.word	0x40014000
 8010800:	40014400 	.word	0x40014400
 8010804:	40014800 	.word	0x40014800

08010808 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010808:	b480      	push	{r7}
 801080a:	b087      	sub	sp, #28
 801080c:	af00      	add	r7, sp, #0
 801080e:	60f8      	str	r0, [r7, #12]
 8010810:	60b9      	str	r1, [r7, #8]
 8010812:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010814:	68bb      	ldr	r3, [r7, #8]
 8010816:	f003 031f 	and.w	r3, r3, #31
 801081a:	2201      	movs	r2, #1
 801081c:	fa02 f303 	lsl.w	r3, r2, r3
 8010820:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	6a1a      	ldr	r2, [r3, #32]
 8010826:	697b      	ldr	r3, [r7, #20]
 8010828:	43db      	mvns	r3, r3
 801082a:	401a      	ands	r2, r3
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	6a1a      	ldr	r2, [r3, #32]
 8010834:	68bb      	ldr	r3, [r7, #8]
 8010836:	f003 031f 	and.w	r3, r3, #31
 801083a:	6879      	ldr	r1, [r7, #4]
 801083c:	fa01 f303 	lsl.w	r3, r1, r3
 8010840:	431a      	orrs	r2, r3
 8010842:	68fb      	ldr	r3, [r7, #12]
 8010844:	621a      	str	r2, [r3, #32]
}
 8010846:	bf00      	nop
 8010848:	371c      	adds	r7, #28
 801084a:	46bd      	mov	sp, r7
 801084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010850:	4770      	bx	lr
	...

08010854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010854:	b480      	push	{r7}
 8010856:	b085      	sub	sp, #20
 8010858:	af00      	add	r7, sp, #0
 801085a:	6078      	str	r0, [r7, #4]
 801085c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010864:	2b01      	cmp	r3, #1
 8010866:	d101      	bne.n	801086c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010868:	2302      	movs	r3, #2
 801086a:	e077      	b.n	801095c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	2201      	movs	r2, #1
 8010870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	2202      	movs	r2, #2
 8010878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	685b      	ldr	r3, [r3, #4]
 8010882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8010884:	687b      	ldr	r3, [r7, #4]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	689b      	ldr	r3, [r3, #8]
 801088a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	4a35      	ldr	r2, [pc, #212]	; (8010968 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8010892:	4293      	cmp	r3, r2
 8010894:	d004      	beq.n	80108a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	4a34      	ldr	r2, [pc, #208]	; (801096c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801089c:	4293      	cmp	r3, r2
 801089e:	d108      	bne.n	80108b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80108a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	685b      	ldr	r3, [r3, #4]
 80108ac:	68fa      	ldr	r2, [r7, #12]
 80108ae:	4313      	orrs	r3, r2
 80108b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80108ba:	683b      	ldr	r3, [r7, #0]
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	68fa      	ldr	r2, [r7, #12]
 80108c0:	4313      	orrs	r3, r2
 80108c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	68fa      	ldr	r2, [r7, #12]
 80108ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	4a25      	ldr	r2, [pc, #148]	; (8010968 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80108d2:	4293      	cmp	r3, r2
 80108d4:	d02c      	beq.n	8010930 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108de:	d027      	beq.n	8010930 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108e0:	687b      	ldr	r3, [r7, #4]
 80108e2:	681b      	ldr	r3, [r3, #0]
 80108e4:	4a22      	ldr	r2, [pc, #136]	; (8010970 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80108e6:	4293      	cmp	r3, r2
 80108e8:	d022      	beq.n	8010930 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	4a21      	ldr	r2, [pc, #132]	; (8010974 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80108f0:	4293      	cmp	r3, r2
 80108f2:	d01d      	beq.n	8010930 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	4a1f      	ldr	r2, [pc, #124]	; (8010978 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80108fa:	4293      	cmp	r3, r2
 80108fc:	d018      	beq.n	8010930 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	4a1a      	ldr	r2, [pc, #104]	; (801096c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8010904:	4293      	cmp	r3, r2
 8010906:	d013      	beq.n	8010930 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	681b      	ldr	r3, [r3, #0]
 801090c:	4a1b      	ldr	r2, [pc, #108]	; (801097c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801090e:	4293      	cmp	r3, r2
 8010910:	d00e      	beq.n	8010930 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	681b      	ldr	r3, [r3, #0]
 8010916:	4a1a      	ldr	r2, [pc, #104]	; (8010980 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8010918:	4293      	cmp	r3, r2
 801091a:	d009      	beq.n	8010930 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	4a18      	ldr	r2, [pc, #96]	; (8010984 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8010922:	4293      	cmp	r3, r2
 8010924:	d004      	beq.n	8010930 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	681b      	ldr	r3, [r3, #0]
 801092a:	4a17      	ldr	r2, [pc, #92]	; (8010988 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 801092c:	4293      	cmp	r3, r2
 801092e:	d10c      	bne.n	801094a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010936:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010938:	683b      	ldr	r3, [r7, #0]
 801093a:	689b      	ldr	r3, [r3, #8]
 801093c:	68ba      	ldr	r2, [r7, #8]
 801093e:	4313      	orrs	r3, r2
 8010940:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	68ba      	ldr	r2, [r7, #8]
 8010948:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	2201      	movs	r2, #1
 801094e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	2200      	movs	r2, #0
 8010956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801095a:	2300      	movs	r3, #0
}
 801095c:	4618      	mov	r0, r3
 801095e:	3714      	adds	r7, #20
 8010960:	46bd      	mov	sp, r7
 8010962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010966:	4770      	bx	lr
 8010968:	40010000 	.word	0x40010000
 801096c:	40010400 	.word	0x40010400
 8010970:	40000400 	.word	0x40000400
 8010974:	40000800 	.word	0x40000800
 8010978:	40000c00 	.word	0x40000c00
 801097c:	40001800 	.word	0x40001800
 8010980:	40014000 	.word	0x40014000
 8010984:	4000e000 	.word	0x4000e000
 8010988:	4000e400 	.word	0x4000e400

0801098c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801098c:	b480      	push	{r7}
 801098e:	b083      	sub	sp, #12
 8010990:	af00      	add	r7, sp, #0
 8010992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8010994:	bf00      	nop
 8010996:	370c      	adds	r7, #12
 8010998:	46bd      	mov	sp, r7
 801099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801099e:	4770      	bx	lr

080109a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80109a0:	b480      	push	{r7}
 80109a2:	b083      	sub	sp, #12
 80109a4:	af00      	add	r7, sp, #0
 80109a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80109a8:	bf00      	nop
 80109aa:	370c      	adds	r7, #12
 80109ac:	46bd      	mov	sp, r7
 80109ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b2:	4770      	bx	lr

080109b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80109b4:	b480      	push	{r7}
 80109b6:	b083      	sub	sp, #12
 80109b8:	af00      	add	r7, sp, #0
 80109ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80109bc:	bf00      	nop
 80109be:	370c      	adds	r7, #12
 80109c0:	46bd      	mov	sp, r7
 80109c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c6:	4770      	bx	lr

080109c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b082      	sub	sp, #8
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d101      	bne.n	80109da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80109d6:	2301      	movs	r3, #1
 80109d8:	e042      	b.n	8010a60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d106      	bne.n	80109f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	2200      	movs	r2, #0
 80109e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80109ec:	6878      	ldr	r0, [r7, #4]
 80109ee:	f7f2 fd41 	bl	8003474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	2224      	movs	r2, #36	; 0x24
 80109f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	681a      	ldr	r2, [r3, #0]
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	f022 0201 	bic.w	r2, r2, #1
 8010a08:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	f000 f82c 	bl	8010a68 <UART_SetConfig>
 8010a10:	4603      	mov	r3, r0
 8010a12:	2b01      	cmp	r3, #1
 8010a14:	d101      	bne.n	8010a1a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010a16:	2301      	movs	r3, #1
 8010a18:	e022      	b.n	8010a60 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d002      	beq.n	8010a28 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010a22:	6878      	ldr	r0, [r7, #4]
 8010a24:	f000 fe8c 	bl	8011740 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	685a      	ldr	r2, [r3, #4]
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	681b      	ldr	r3, [r3, #0]
 8010a32:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010a36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	689a      	ldr	r2, [r3, #8]
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	681b      	ldr	r3, [r3, #0]
 8010a42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8010a46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	681a      	ldr	r2, [r3, #0]
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	f042 0201 	orr.w	r2, r2, #1
 8010a56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8010a58:	6878      	ldr	r0, [r7, #4]
 8010a5a:	f000 ff13 	bl	8011884 <UART_CheckIdleState>
 8010a5e:	4603      	mov	r3, r0
}
 8010a60:	4618      	mov	r0, r3
 8010a62:	3708      	adds	r7, #8
 8010a64:	46bd      	mov	sp, r7
 8010a66:	bd80      	pop	{r7, pc}

08010a68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010a6c:	b092      	sub	sp, #72	; 0x48
 8010a6e:	af00      	add	r7, sp, #0
 8010a70:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010a72:	2300      	movs	r3, #0
 8010a74:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	689a      	ldr	r2, [r3, #8]
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	691b      	ldr	r3, [r3, #16]
 8010a80:	431a      	orrs	r2, r3
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	695b      	ldr	r3, [r3, #20]
 8010a86:	431a      	orrs	r2, r3
 8010a88:	697b      	ldr	r3, [r7, #20]
 8010a8a:	69db      	ldr	r3, [r3, #28]
 8010a8c:	4313      	orrs	r3, r2
 8010a8e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	681a      	ldr	r2, [r3, #0]
 8010a96:	4bbe      	ldr	r3, [pc, #760]	; (8010d90 <UART_SetConfig+0x328>)
 8010a98:	4013      	ands	r3, r2
 8010a9a:	697a      	ldr	r2, [r7, #20]
 8010a9c:	6812      	ldr	r2, [r2, #0]
 8010a9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010aa0:	430b      	orrs	r3, r1
 8010aa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010aa4:	697b      	ldr	r3, [r7, #20]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	685b      	ldr	r3, [r3, #4]
 8010aaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010aae:	697b      	ldr	r3, [r7, #20]
 8010ab0:	68da      	ldr	r2, [r3, #12]
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	430a      	orrs	r2, r1
 8010ab8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010aba:	697b      	ldr	r3, [r7, #20]
 8010abc:	699b      	ldr	r3, [r3, #24]
 8010abe:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	4ab3      	ldr	r2, [pc, #716]	; (8010d94 <UART_SetConfig+0x32c>)
 8010ac6:	4293      	cmp	r3, r2
 8010ac8:	d004      	beq.n	8010ad4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010aca:	697b      	ldr	r3, [r7, #20]
 8010acc:	6a1b      	ldr	r3, [r3, #32]
 8010ace:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010ad0:	4313      	orrs	r3, r2
 8010ad2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010ad4:	697b      	ldr	r3, [r7, #20]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	689a      	ldr	r2, [r3, #8]
 8010ada:	4baf      	ldr	r3, [pc, #700]	; (8010d98 <UART_SetConfig+0x330>)
 8010adc:	4013      	ands	r3, r2
 8010ade:	697a      	ldr	r2, [r7, #20]
 8010ae0:	6812      	ldr	r2, [r2, #0]
 8010ae2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010ae4:	430b      	orrs	r3, r1
 8010ae6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010aee:	f023 010f 	bic.w	r1, r3, #15
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010af6:	697b      	ldr	r3, [r7, #20]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	430a      	orrs	r2, r1
 8010afc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010afe:	697b      	ldr	r3, [r7, #20]
 8010b00:	681b      	ldr	r3, [r3, #0]
 8010b02:	4aa6      	ldr	r2, [pc, #664]	; (8010d9c <UART_SetConfig+0x334>)
 8010b04:	4293      	cmp	r3, r2
 8010b06:	d177      	bne.n	8010bf8 <UART_SetConfig+0x190>
 8010b08:	4ba5      	ldr	r3, [pc, #660]	; (8010da0 <UART_SetConfig+0x338>)
 8010b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010b10:	2b28      	cmp	r3, #40	; 0x28
 8010b12:	d86d      	bhi.n	8010bf0 <UART_SetConfig+0x188>
 8010b14:	a201      	add	r2, pc, #4	; (adr r2, 8010b1c <UART_SetConfig+0xb4>)
 8010b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b1a:	bf00      	nop
 8010b1c:	08010bc1 	.word	0x08010bc1
 8010b20:	08010bf1 	.word	0x08010bf1
 8010b24:	08010bf1 	.word	0x08010bf1
 8010b28:	08010bf1 	.word	0x08010bf1
 8010b2c:	08010bf1 	.word	0x08010bf1
 8010b30:	08010bf1 	.word	0x08010bf1
 8010b34:	08010bf1 	.word	0x08010bf1
 8010b38:	08010bf1 	.word	0x08010bf1
 8010b3c:	08010bc9 	.word	0x08010bc9
 8010b40:	08010bf1 	.word	0x08010bf1
 8010b44:	08010bf1 	.word	0x08010bf1
 8010b48:	08010bf1 	.word	0x08010bf1
 8010b4c:	08010bf1 	.word	0x08010bf1
 8010b50:	08010bf1 	.word	0x08010bf1
 8010b54:	08010bf1 	.word	0x08010bf1
 8010b58:	08010bf1 	.word	0x08010bf1
 8010b5c:	08010bd1 	.word	0x08010bd1
 8010b60:	08010bf1 	.word	0x08010bf1
 8010b64:	08010bf1 	.word	0x08010bf1
 8010b68:	08010bf1 	.word	0x08010bf1
 8010b6c:	08010bf1 	.word	0x08010bf1
 8010b70:	08010bf1 	.word	0x08010bf1
 8010b74:	08010bf1 	.word	0x08010bf1
 8010b78:	08010bf1 	.word	0x08010bf1
 8010b7c:	08010bd9 	.word	0x08010bd9
 8010b80:	08010bf1 	.word	0x08010bf1
 8010b84:	08010bf1 	.word	0x08010bf1
 8010b88:	08010bf1 	.word	0x08010bf1
 8010b8c:	08010bf1 	.word	0x08010bf1
 8010b90:	08010bf1 	.word	0x08010bf1
 8010b94:	08010bf1 	.word	0x08010bf1
 8010b98:	08010bf1 	.word	0x08010bf1
 8010b9c:	08010be1 	.word	0x08010be1
 8010ba0:	08010bf1 	.word	0x08010bf1
 8010ba4:	08010bf1 	.word	0x08010bf1
 8010ba8:	08010bf1 	.word	0x08010bf1
 8010bac:	08010bf1 	.word	0x08010bf1
 8010bb0:	08010bf1 	.word	0x08010bf1
 8010bb4:	08010bf1 	.word	0x08010bf1
 8010bb8:	08010bf1 	.word	0x08010bf1
 8010bbc:	08010be9 	.word	0x08010be9
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bc6:	e326      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010bc8:	2304      	movs	r3, #4
 8010bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bce:	e322      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010bd0:	2308      	movs	r3, #8
 8010bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bd6:	e31e      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010bd8:	2310      	movs	r3, #16
 8010bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bde:	e31a      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010be0:	2320      	movs	r3, #32
 8010be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010be6:	e316      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010be8:	2340      	movs	r3, #64	; 0x40
 8010bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bee:	e312      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010bf0:	2380      	movs	r3, #128	; 0x80
 8010bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bf6:	e30e      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	4a69      	ldr	r2, [pc, #420]	; (8010da4 <UART_SetConfig+0x33c>)
 8010bfe:	4293      	cmp	r3, r2
 8010c00:	d130      	bne.n	8010c64 <UART_SetConfig+0x1fc>
 8010c02:	4b67      	ldr	r3, [pc, #412]	; (8010da0 <UART_SetConfig+0x338>)
 8010c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c06:	f003 0307 	and.w	r3, r3, #7
 8010c0a:	2b05      	cmp	r3, #5
 8010c0c:	d826      	bhi.n	8010c5c <UART_SetConfig+0x1f4>
 8010c0e:	a201      	add	r2, pc, #4	; (adr r2, 8010c14 <UART_SetConfig+0x1ac>)
 8010c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c14:	08010c2d 	.word	0x08010c2d
 8010c18:	08010c35 	.word	0x08010c35
 8010c1c:	08010c3d 	.word	0x08010c3d
 8010c20:	08010c45 	.word	0x08010c45
 8010c24:	08010c4d 	.word	0x08010c4d
 8010c28:	08010c55 	.word	0x08010c55
 8010c2c:	2300      	movs	r3, #0
 8010c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c32:	e2f0      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010c34:	2304      	movs	r3, #4
 8010c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c3a:	e2ec      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010c3c:	2308      	movs	r3, #8
 8010c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c42:	e2e8      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010c44:	2310      	movs	r3, #16
 8010c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c4a:	e2e4      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010c4c:	2320      	movs	r3, #32
 8010c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c52:	e2e0      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010c54:	2340      	movs	r3, #64	; 0x40
 8010c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c5a:	e2dc      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010c5c:	2380      	movs	r3, #128	; 0x80
 8010c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c62:	e2d8      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	4a4f      	ldr	r2, [pc, #316]	; (8010da8 <UART_SetConfig+0x340>)
 8010c6a:	4293      	cmp	r3, r2
 8010c6c:	d130      	bne.n	8010cd0 <UART_SetConfig+0x268>
 8010c6e:	4b4c      	ldr	r3, [pc, #304]	; (8010da0 <UART_SetConfig+0x338>)
 8010c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c72:	f003 0307 	and.w	r3, r3, #7
 8010c76:	2b05      	cmp	r3, #5
 8010c78:	d826      	bhi.n	8010cc8 <UART_SetConfig+0x260>
 8010c7a:	a201      	add	r2, pc, #4	; (adr r2, 8010c80 <UART_SetConfig+0x218>)
 8010c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c80:	08010c99 	.word	0x08010c99
 8010c84:	08010ca1 	.word	0x08010ca1
 8010c88:	08010ca9 	.word	0x08010ca9
 8010c8c:	08010cb1 	.word	0x08010cb1
 8010c90:	08010cb9 	.word	0x08010cb9
 8010c94:	08010cc1 	.word	0x08010cc1
 8010c98:	2300      	movs	r3, #0
 8010c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c9e:	e2ba      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010ca0:	2304      	movs	r3, #4
 8010ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ca6:	e2b6      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010ca8:	2308      	movs	r3, #8
 8010caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cae:	e2b2      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010cb0:	2310      	movs	r3, #16
 8010cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cb6:	e2ae      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010cb8:	2320      	movs	r3, #32
 8010cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cbe:	e2aa      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010cc0:	2340      	movs	r3, #64	; 0x40
 8010cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cc6:	e2a6      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010cc8:	2380      	movs	r3, #128	; 0x80
 8010cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cce:	e2a2      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010cd0:	697b      	ldr	r3, [r7, #20]
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	4a35      	ldr	r2, [pc, #212]	; (8010dac <UART_SetConfig+0x344>)
 8010cd6:	4293      	cmp	r3, r2
 8010cd8:	d130      	bne.n	8010d3c <UART_SetConfig+0x2d4>
 8010cda:	4b31      	ldr	r3, [pc, #196]	; (8010da0 <UART_SetConfig+0x338>)
 8010cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cde:	f003 0307 	and.w	r3, r3, #7
 8010ce2:	2b05      	cmp	r3, #5
 8010ce4:	d826      	bhi.n	8010d34 <UART_SetConfig+0x2cc>
 8010ce6:	a201      	add	r2, pc, #4	; (adr r2, 8010cec <UART_SetConfig+0x284>)
 8010ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cec:	08010d05 	.word	0x08010d05
 8010cf0:	08010d0d 	.word	0x08010d0d
 8010cf4:	08010d15 	.word	0x08010d15
 8010cf8:	08010d1d 	.word	0x08010d1d
 8010cfc:	08010d25 	.word	0x08010d25
 8010d00:	08010d2d 	.word	0x08010d2d
 8010d04:	2300      	movs	r3, #0
 8010d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d0a:	e284      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010d0c:	2304      	movs	r3, #4
 8010d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d12:	e280      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010d14:	2308      	movs	r3, #8
 8010d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d1a:	e27c      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010d1c:	2310      	movs	r3, #16
 8010d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d22:	e278      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010d24:	2320      	movs	r3, #32
 8010d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d2a:	e274      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010d2c:	2340      	movs	r3, #64	; 0x40
 8010d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d32:	e270      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010d34:	2380      	movs	r3, #128	; 0x80
 8010d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d3a:	e26c      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	4a1b      	ldr	r2, [pc, #108]	; (8010db0 <UART_SetConfig+0x348>)
 8010d42:	4293      	cmp	r3, r2
 8010d44:	d142      	bne.n	8010dcc <UART_SetConfig+0x364>
 8010d46:	4b16      	ldr	r3, [pc, #88]	; (8010da0 <UART_SetConfig+0x338>)
 8010d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d4a:	f003 0307 	and.w	r3, r3, #7
 8010d4e:	2b05      	cmp	r3, #5
 8010d50:	d838      	bhi.n	8010dc4 <UART_SetConfig+0x35c>
 8010d52:	a201      	add	r2, pc, #4	; (adr r2, 8010d58 <UART_SetConfig+0x2f0>)
 8010d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d58:	08010d71 	.word	0x08010d71
 8010d5c:	08010d79 	.word	0x08010d79
 8010d60:	08010d81 	.word	0x08010d81
 8010d64:	08010d89 	.word	0x08010d89
 8010d68:	08010db5 	.word	0x08010db5
 8010d6c:	08010dbd 	.word	0x08010dbd
 8010d70:	2300      	movs	r3, #0
 8010d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d76:	e24e      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010d78:	2304      	movs	r3, #4
 8010d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d7e:	e24a      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010d80:	2308      	movs	r3, #8
 8010d82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d86:	e246      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010d88:	2310      	movs	r3, #16
 8010d8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d8e:	e242      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010d90:	cfff69f3 	.word	0xcfff69f3
 8010d94:	58000c00 	.word	0x58000c00
 8010d98:	11fff4ff 	.word	0x11fff4ff
 8010d9c:	40011000 	.word	0x40011000
 8010da0:	58024400 	.word	0x58024400
 8010da4:	40004400 	.word	0x40004400
 8010da8:	40004800 	.word	0x40004800
 8010dac:	40004c00 	.word	0x40004c00
 8010db0:	40005000 	.word	0x40005000
 8010db4:	2320      	movs	r3, #32
 8010db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dba:	e22c      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010dbc:	2340      	movs	r3, #64	; 0x40
 8010dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dc2:	e228      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010dc4:	2380      	movs	r3, #128	; 0x80
 8010dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dca:	e224      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010dcc:	697b      	ldr	r3, [r7, #20]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	4ab1      	ldr	r2, [pc, #708]	; (8011098 <UART_SetConfig+0x630>)
 8010dd2:	4293      	cmp	r3, r2
 8010dd4:	d176      	bne.n	8010ec4 <UART_SetConfig+0x45c>
 8010dd6:	4bb1      	ldr	r3, [pc, #708]	; (801109c <UART_SetConfig+0x634>)
 8010dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dda:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010dde:	2b28      	cmp	r3, #40	; 0x28
 8010de0:	d86c      	bhi.n	8010ebc <UART_SetConfig+0x454>
 8010de2:	a201      	add	r2, pc, #4	; (adr r2, 8010de8 <UART_SetConfig+0x380>)
 8010de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010de8:	08010e8d 	.word	0x08010e8d
 8010dec:	08010ebd 	.word	0x08010ebd
 8010df0:	08010ebd 	.word	0x08010ebd
 8010df4:	08010ebd 	.word	0x08010ebd
 8010df8:	08010ebd 	.word	0x08010ebd
 8010dfc:	08010ebd 	.word	0x08010ebd
 8010e00:	08010ebd 	.word	0x08010ebd
 8010e04:	08010ebd 	.word	0x08010ebd
 8010e08:	08010e95 	.word	0x08010e95
 8010e0c:	08010ebd 	.word	0x08010ebd
 8010e10:	08010ebd 	.word	0x08010ebd
 8010e14:	08010ebd 	.word	0x08010ebd
 8010e18:	08010ebd 	.word	0x08010ebd
 8010e1c:	08010ebd 	.word	0x08010ebd
 8010e20:	08010ebd 	.word	0x08010ebd
 8010e24:	08010ebd 	.word	0x08010ebd
 8010e28:	08010e9d 	.word	0x08010e9d
 8010e2c:	08010ebd 	.word	0x08010ebd
 8010e30:	08010ebd 	.word	0x08010ebd
 8010e34:	08010ebd 	.word	0x08010ebd
 8010e38:	08010ebd 	.word	0x08010ebd
 8010e3c:	08010ebd 	.word	0x08010ebd
 8010e40:	08010ebd 	.word	0x08010ebd
 8010e44:	08010ebd 	.word	0x08010ebd
 8010e48:	08010ea5 	.word	0x08010ea5
 8010e4c:	08010ebd 	.word	0x08010ebd
 8010e50:	08010ebd 	.word	0x08010ebd
 8010e54:	08010ebd 	.word	0x08010ebd
 8010e58:	08010ebd 	.word	0x08010ebd
 8010e5c:	08010ebd 	.word	0x08010ebd
 8010e60:	08010ebd 	.word	0x08010ebd
 8010e64:	08010ebd 	.word	0x08010ebd
 8010e68:	08010ead 	.word	0x08010ead
 8010e6c:	08010ebd 	.word	0x08010ebd
 8010e70:	08010ebd 	.word	0x08010ebd
 8010e74:	08010ebd 	.word	0x08010ebd
 8010e78:	08010ebd 	.word	0x08010ebd
 8010e7c:	08010ebd 	.word	0x08010ebd
 8010e80:	08010ebd 	.word	0x08010ebd
 8010e84:	08010ebd 	.word	0x08010ebd
 8010e88:	08010eb5 	.word	0x08010eb5
 8010e8c:	2301      	movs	r3, #1
 8010e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e92:	e1c0      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010e94:	2304      	movs	r3, #4
 8010e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e9a:	e1bc      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010e9c:	2308      	movs	r3, #8
 8010e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ea2:	e1b8      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010ea4:	2310      	movs	r3, #16
 8010ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eaa:	e1b4      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010eac:	2320      	movs	r3, #32
 8010eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eb2:	e1b0      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010eb4:	2340      	movs	r3, #64	; 0x40
 8010eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eba:	e1ac      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010ebc:	2380      	movs	r3, #128	; 0x80
 8010ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ec2:	e1a8      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010ec4:	697b      	ldr	r3, [r7, #20]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	4a75      	ldr	r2, [pc, #468]	; (80110a0 <UART_SetConfig+0x638>)
 8010eca:	4293      	cmp	r3, r2
 8010ecc:	d130      	bne.n	8010f30 <UART_SetConfig+0x4c8>
 8010ece:	4b73      	ldr	r3, [pc, #460]	; (801109c <UART_SetConfig+0x634>)
 8010ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ed2:	f003 0307 	and.w	r3, r3, #7
 8010ed6:	2b05      	cmp	r3, #5
 8010ed8:	d826      	bhi.n	8010f28 <UART_SetConfig+0x4c0>
 8010eda:	a201      	add	r2, pc, #4	; (adr r2, 8010ee0 <UART_SetConfig+0x478>)
 8010edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ee0:	08010ef9 	.word	0x08010ef9
 8010ee4:	08010f01 	.word	0x08010f01
 8010ee8:	08010f09 	.word	0x08010f09
 8010eec:	08010f11 	.word	0x08010f11
 8010ef0:	08010f19 	.word	0x08010f19
 8010ef4:	08010f21 	.word	0x08010f21
 8010ef8:	2300      	movs	r3, #0
 8010efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010efe:	e18a      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010f00:	2304      	movs	r3, #4
 8010f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f06:	e186      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010f08:	2308      	movs	r3, #8
 8010f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f0e:	e182      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010f10:	2310      	movs	r3, #16
 8010f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f16:	e17e      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010f18:	2320      	movs	r3, #32
 8010f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f1e:	e17a      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010f20:	2340      	movs	r3, #64	; 0x40
 8010f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f26:	e176      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010f28:	2380      	movs	r3, #128	; 0x80
 8010f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f2e:	e172      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010f30:	697b      	ldr	r3, [r7, #20]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	4a5b      	ldr	r2, [pc, #364]	; (80110a4 <UART_SetConfig+0x63c>)
 8010f36:	4293      	cmp	r3, r2
 8010f38:	d130      	bne.n	8010f9c <UART_SetConfig+0x534>
 8010f3a:	4b58      	ldr	r3, [pc, #352]	; (801109c <UART_SetConfig+0x634>)
 8010f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010f3e:	f003 0307 	and.w	r3, r3, #7
 8010f42:	2b05      	cmp	r3, #5
 8010f44:	d826      	bhi.n	8010f94 <UART_SetConfig+0x52c>
 8010f46:	a201      	add	r2, pc, #4	; (adr r2, 8010f4c <UART_SetConfig+0x4e4>)
 8010f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f4c:	08010f65 	.word	0x08010f65
 8010f50:	08010f6d 	.word	0x08010f6d
 8010f54:	08010f75 	.word	0x08010f75
 8010f58:	08010f7d 	.word	0x08010f7d
 8010f5c:	08010f85 	.word	0x08010f85
 8010f60:	08010f8d 	.word	0x08010f8d
 8010f64:	2300      	movs	r3, #0
 8010f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f6a:	e154      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010f6c:	2304      	movs	r3, #4
 8010f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f72:	e150      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010f74:	2308      	movs	r3, #8
 8010f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f7a:	e14c      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010f7c:	2310      	movs	r3, #16
 8010f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f82:	e148      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010f84:	2320      	movs	r3, #32
 8010f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f8a:	e144      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010f8c:	2340      	movs	r3, #64	; 0x40
 8010f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f92:	e140      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010f94:	2380      	movs	r3, #128	; 0x80
 8010f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010f9a:	e13c      	b.n	8011216 <UART_SetConfig+0x7ae>
 8010f9c:	697b      	ldr	r3, [r7, #20]
 8010f9e:	681b      	ldr	r3, [r3, #0]
 8010fa0:	4a41      	ldr	r2, [pc, #260]	; (80110a8 <UART_SetConfig+0x640>)
 8010fa2:	4293      	cmp	r3, r2
 8010fa4:	f040 8082 	bne.w	80110ac <UART_SetConfig+0x644>
 8010fa8:	4b3c      	ldr	r3, [pc, #240]	; (801109c <UART_SetConfig+0x634>)
 8010faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010fb0:	2b28      	cmp	r3, #40	; 0x28
 8010fb2:	d86d      	bhi.n	8011090 <UART_SetConfig+0x628>
 8010fb4:	a201      	add	r2, pc, #4	; (adr r2, 8010fbc <UART_SetConfig+0x554>)
 8010fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fba:	bf00      	nop
 8010fbc:	08011061 	.word	0x08011061
 8010fc0:	08011091 	.word	0x08011091
 8010fc4:	08011091 	.word	0x08011091
 8010fc8:	08011091 	.word	0x08011091
 8010fcc:	08011091 	.word	0x08011091
 8010fd0:	08011091 	.word	0x08011091
 8010fd4:	08011091 	.word	0x08011091
 8010fd8:	08011091 	.word	0x08011091
 8010fdc:	08011069 	.word	0x08011069
 8010fe0:	08011091 	.word	0x08011091
 8010fe4:	08011091 	.word	0x08011091
 8010fe8:	08011091 	.word	0x08011091
 8010fec:	08011091 	.word	0x08011091
 8010ff0:	08011091 	.word	0x08011091
 8010ff4:	08011091 	.word	0x08011091
 8010ff8:	08011091 	.word	0x08011091
 8010ffc:	08011071 	.word	0x08011071
 8011000:	08011091 	.word	0x08011091
 8011004:	08011091 	.word	0x08011091
 8011008:	08011091 	.word	0x08011091
 801100c:	08011091 	.word	0x08011091
 8011010:	08011091 	.word	0x08011091
 8011014:	08011091 	.word	0x08011091
 8011018:	08011091 	.word	0x08011091
 801101c:	08011079 	.word	0x08011079
 8011020:	08011091 	.word	0x08011091
 8011024:	08011091 	.word	0x08011091
 8011028:	08011091 	.word	0x08011091
 801102c:	08011091 	.word	0x08011091
 8011030:	08011091 	.word	0x08011091
 8011034:	08011091 	.word	0x08011091
 8011038:	08011091 	.word	0x08011091
 801103c:	08011081 	.word	0x08011081
 8011040:	08011091 	.word	0x08011091
 8011044:	08011091 	.word	0x08011091
 8011048:	08011091 	.word	0x08011091
 801104c:	08011091 	.word	0x08011091
 8011050:	08011091 	.word	0x08011091
 8011054:	08011091 	.word	0x08011091
 8011058:	08011091 	.word	0x08011091
 801105c:	08011089 	.word	0x08011089
 8011060:	2301      	movs	r3, #1
 8011062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011066:	e0d6      	b.n	8011216 <UART_SetConfig+0x7ae>
 8011068:	2304      	movs	r3, #4
 801106a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801106e:	e0d2      	b.n	8011216 <UART_SetConfig+0x7ae>
 8011070:	2308      	movs	r3, #8
 8011072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011076:	e0ce      	b.n	8011216 <UART_SetConfig+0x7ae>
 8011078:	2310      	movs	r3, #16
 801107a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801107e:	e0ca      	b.n	8011216 <UART_SetConfig+0x7ae>
 8011080:	2320      	movs	r3, #32
 8011082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011086:	e0c6      	b.n	8011216 <UART_SetConfig+0x7ae>
 8011088:	2340      	movs	r3, #64	; 0x40
 801108a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801108e:	e0c2      	b.n	8011216 <UART_SetConfig+0x7ae>
 8011090:	2380      	movs	r3, #128	; 0x80
 8011092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011096:	e0be      	b.n	8011216 <UART_SetConfig+0x7ae>
 8011098:	40011400 	.word	0x40011400
 801109c:	58024400 	.word	0x58024400
 80110a0:	40007800 	.word	0x40007800
 80110a4:	40007c00 	.word	0x40007c00
 80110a8:	40011800 	.word	0x40011800
 80110ac:	697b      	ldr	r3, [r7, #20]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	4aad      	ldr	r2, [pc, #692]	; (8011368 <UART_SetConfig+0x900>)
 80110b2:	4293      	cmp	r3, r2
 80110b4:	d176      	bne.n	80111a4 <UART_SetConfig+0x73c>
 80110b6:	4bad      	ldr	r3, [pc, #692]	; (801136c <UART_SetConfig+0x904>)
 80110b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80110ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80110be:	2b28      	cmp	r3, #40	; 0x28
 80110c0:	d86c      	bhi.n	801119c <UART_SetConfig+0x734>
 80110c2:	a201      	add	r2, pc, #4	; (adr r2, 80110c8 <UART_SetConfig+0x660>)
 80110c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110c8:	0801116d 	.word	0x0801116d
 80110cc:	0801119d 	.word	0x0801119d
 80110d0:	0801119d 	.word	0x0801119d
 80110d4:	0801119d 	.word	0x0801119d
 80110d8:	0801119d 	.word	0x0801119d
 80110dc:	0801119d 	.word	0x0801119d
 80110e0:	0801119d 	.word	0x0801119d
 80110e4:	0801119d 	.word	0x0801119d
 80110e8:	08011175 	.word	0x08011175
 80110ec:	0801119d 	.word	0x0801119d
 80110f0:	0801119d 	.word	0x0801119d
 80110f4:	0801119d 	.word	0x0801119d
 80110f8:	0801119d 	.word	0x0801119d
 80110fc:	0801119d 	.word	0x0801119d
 8011100:	0801119d 	.word	0x0801119d
 8011104:	0801119d 	.word	0x0801119d
 8011108:	0801117d 	.word	0x0801117d
 801110c:	0801119d 	.word	0x0801119d
 8011110:	0801119d 	.word	0x0801119d
 8011114:	0801119d 	.word	0x0801119d
 8011118:	0801119d 	.word	0x0801119d
 801111c:	0801119d 	.word	0x0801119d
 8011120:	0801119d 	.word	0x0801119d
 8011124:	0801119d 	.word	0x0801119d
 8011128:	08011185 	.word	0x08011185
 801112c:	0801119d 	.word	0x0801119d
 8011130:	0801119d 	.word	0x0801119d
 8011134:	0801119d 	.word	0x0801119d
 8011138:	0801119d 	.word	0x0801119d
 801113c:	0801119d 	.word	0x0801119d
 8011140:	0801119d 	.word	0x0801119d
 8011144:	0801119d 	.word	0x0801119d
 8011148:	0801118d 	.word	0x0801118d
 801114c:	0801119d 	.word	0x0801119d
 8011150:	0801119d 	.word	0x0801119d
 8011154:	0801119d 	.word	0x0801119d
 8011158:	0801119d 	.word	0x0801119d
 801115c:	0801119d 	.word	0x0801119d
 8011160:	0801119d 	.word	0x0801119d
 8011164:	0801119d 	.word	0x0801119d
 8011168:	08011195 	.word	0x08011195
 801116c:	2301      	movs	r3, #1
 801116e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011172:	e050      	b.n	8011216 <UART_SetConfig+0x7ae>
 8011174:	2304      	movs	r3, #4
 8011176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801117a:	e04c      	b.n	8011216 <UART_SetConfig+0x7ae>
 801117c:	2308      	movs	r3, #8
 801117e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011182:	e048      	b.n	8011216 <UART_SetConfig+0x7ae>
 8011184:	2310      	movs	r3, #16
 8011186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801118a:	e044      	b.n	8011216 <UART_SetConfig+0x7ae>
 801118c:	2320      	movs	r3, #32
 801118e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011192:	e040      	b.n	8011216 <UART_SetConfig+0x7ae>
 8011194:	2340      	movs	r3, #64	; 0x40
 8011196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801119a:	e03c      	b.n	8011216 <UART_SetConfig+0x7ae>
 801119c:	2380      	movs	r3, #128	; 0x80
 801119e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111a2:	e038      	b.n	8011216 <UART_SetConfig+0x7ae>
 80111a4:	697b      	ldr	r3, [r7, #20]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	4a71      	ldr	r2, [pc, #452]	; (8011370 <UART_SetConfig+0x908>)
 80111aa:	4293      	cmp	r3, r2
 80111ac:	d130      	bne.n	8011210 <UART_SetConfig+0x7a8>
 80111ae:	4b6f      	ldr	r3, [pc, #444]	; (801136c <UART_SetConfig+0x904>)
 80111b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80111b2:	f003 0307 	and.w	r3, r3, #7
 80111b6:	2b05      	cmp	r3, #5
 80111b8:	d826      	bhi.n	8011208 <UART_SetConfig+0x7a0>
 80111ba:	a201      	add	r2, pc, #4	; (adr r2, 80111c0 <UART_SetConfig+0x758>)
 80111bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111c0:	080111d9 	.word	0x080111d9
 80111c4:	080111e1 	.word	0x080111e1
 80111c8:	080111e9 	.word	0x080111e9
 80111cc:	080111f1 	.word	0x080111f1
 80111d0:	080111f9 	.word	0x080111f9
 80111d4:	08011201 	.word	0x08011201
 80111d8:	2302      	movs	r3, #2
 80111da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111de:	e01a      	b.n	8011216 <UART_SetConfig+0x7ae>
 80111e0:	2304      	movs	r3, #4
 80111e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111e6:	e016      	b.n	8011216 <UART_SetConfig+0x7ae>
 80111e8:	2308      	movs	r3, #8
 80111ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111ee:	e012      	b.n	8011216 <UART_SetConfig+0x7ae>
 80111f0:	2310      	movs	r3, #16
 80111f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111f6:	e00e      	b.n	8011216 <UART_SetConfig+0x7ae>
 80111f8:	2320      	movs	r3, #32
 80111fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80111fe:	e00a      	b.n	8011216 <UART_SetConfig+0x7ae>
 8011200:	2340      	movs	r3, #64	; 0x40
 8011202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011206:	e006      	b.n	8011216 <UART_SetConfig+0x7ae>
 8011208:	2380      	movs	r3, #128	; 0x80
 801120a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801120e:	e002      	b.n	8011216 <UART_SetConfig+0x7ae>
 8011210:	2380      	movs	r3, #128	; 0x80
 8011212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	681b      	ldr	r3, [r3, #0]
 801121a:	4a55      	ldr	r2, [pc, #340]	; (8011370 <UART_SetConfig+0x908>)
 801121c:	4293      	cmp	r3, r2
 801121e:	f040 80f8 	bne.w	8011412 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011222:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011226:	2b20      	cmp	r3, #32
 8011228:	dc46      	bgt.n	80112b8 <UART_SetConfig+0x850>
 801122a:	2b02      	cmp	r3, #2
 801122c:	db75      	blt.n	801131a <UART_SetConfig+0x8b2>
 801122e:	3b02      	subs	r3, #2
 8011230:	2b1e      	cmp	r3, #30
 8011232:	d872      	bhi.n	801131a <UART_SetConfig+0x8b2>
 8011234:	a201      	add	r2, pc, #4	; (adr r2, 801123c <UART_SetConfig+0x7d4>)
 8011236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801123a:	bf00      	nop
 801123c:	080112bf 	.word	0x080112bf
 8011240:	0801131b 	.word	0x0801131b
 8011244:	080112c7 	.word	0x080112c7
 8011248:	0801131b 	.word	0x0801131b
 801124c:	0801131b 	.word	0x0801131b
 8011250:	0801131b 	.word	0x0801131b
 8011254:	080112d7 	.word	0x080112d7
 8011258:	0801131b 	.word	0x0801131b
 801125c:	0801131b 	.word	0x0801131b
 8011260:	0801131b 	.word	0x0801131b
 8011264:	0801131b 	.word	0x0801131b
 8011268:	0801131b 	.word	0x0801131b
 801126c:	0801131b 	.word	0x0801131b
 8011270:	0801131b 	.word	0x0801131b
 8011274:	080112e7 	.word	0x080112e7
 8011278:	0801131b 	.word	0x0801131b
 801127c:	0801131b 	.word	0x0801131b
 8011280:	0801131b 	.word	0x0801131b
 8011284:	0801131b 	.word	0x0801131b
 8011288:	0801131b 	.word	0x0801131b
 801128c:	0801131b 	.word	0x0801131b
 8011290:	0801131b 	.word	0x0801131b
 8011294:	0801131b 	.word	0x0801131b
 8011298:	0801131b 	.word	0x0801131b
 801129c:	0801131b 	.word	0x0801131b
 80112a0:	0801131b 	.word	0x0801131b
 80112a4:	0801131b 	.word	0x0801131b
 80112a8:	0801131b 	.word	0x0801131b
 80112ac:	0801131b 	.word	0x0801131b
 80112b0:	0801131b 	.word	0x0801131b
 80112b4:	0801130d 	.word	0x0801130d
 80112b8:	2b40      	cmp	r3, #64	; 0x40
 80112ba:	d02a      	beq.n	8011312 <UART_SetConfig+0x8aa>
 80112bc:	e02d      	b.n	801131a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80112be:	f7fb f8c3 	bl	800c448 <HAL_RCCEx_GetD3PCLK1Freq>
 80112c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80112c4:	e02f      	b.n	8011326 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80112c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80112ca:	4618      	mov	r0, r3
 80112cc:	f7fb f8d2 	bl	800c474 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80112d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112d4:	e027      	b.n	8011326 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80112d6:	f107 0318 	add.w	r3, r7, #24
 80112da:	4618      	mov	r0, r3
 80112dc:	f7fb fa1e 	bl	800c71c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80112e0:	69fb      	ldr	r3, [r7, #28]
 80112e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80112e4:	e01f      	b.n	8011326 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80112e6:	4b21      	ldr	r3, [pc, #132]	; (801136c <UART_SetConfig+0x904>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	f003 0320 	and.w	r3, r3, #32
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d009      	beq.n	8011306 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80112f2:	4b1e      	ldr	r3, [pc, #120]	; (801136c <UART_SetConfig+0x904>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	08db      	lsrs	r3, r3, #3
 80112f8:	f003 0303 	and.w	r3, r3, #3
 80112fc:	4a1d      	ldr	r2, [pc, #116]	; (8011374 <UART_SetConfig+0x90c>)
 80112fe:	fa22 f303 	lsr.w	r3, r2, r3
 8011302:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011304:	e00f      	b.n	8011326 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011306:	4b1b      	ldr	r3, [pc, #108]	; (8011374 <UART_SetConfig+0x90c>)
 8011308:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801130a:	e00c      	b.n	8011326 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801130c:	4b1a      	ldr	r3, [pc, #104]	; (8011378 <UART_SetConfig+0x910>)
 801130e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011310:	e009      	b.n	8011326 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011318:	e005      	b.n	8011326 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801131a:	2300      	movs	r3, #0
 801131c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801131e:	2301      	movs	r3, #1
 8011320:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011324:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011328:	2b00      	cmp	r3, #0
 801132a:	f000 81ee 	beq.w	801170a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801132e:	697b      	ldr	r3, [r7, #20]
 8011330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011332:	4a12      	ldr	r2, [pc, #72]	; (801137c <UART_SetConfig+0x914>)
 8011334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011338:	461a      	mov	r2, r3
 801133a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801133c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011340:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011342:	697b      	ldr	r3, [r7, #20]
 8011344:	685a      	ldr	r2, [r3, #4]
 8011346:	4613      	mov	r3, r2
 8011348:	005b      	lsls	r3, r3, #1
 801134a:	4413      	add	r3, r2
 801134c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801134e:	429a      	cmp	r2, r3
 8011350:	d305      	bcc.n	801135e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011352:	697b      	ldr	r3, [r7, #20]
 8011354:	685b      	ldr	r3, [r3, #4]
 8011356:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801135a:	429a      	cmp	r2, r3
 801135c:	d910      	bls.n	8011380 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 801135e:	2301      	movs	r3, #1
 8011360:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011364:	e1d1      	b.n	801170a <UART_SetConfig+0xca2>
 8011366:	bf00      	nop
 8011368:	40011c00 	.word	0x40011c00
 801136c:	58024400 	.word	0x58024400
 8011370:	58000c00 	.word	0x58000c00
 8011374:	03d09000 	.word	0x03d09000
 8011378:	003d0900 	.word	0x003d0900
 801137c:	08017a98 	.word	0x08017a98
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011382:	2200      	movs	r2, #0
 8011384:	60bb      	str	r3, [r7, #8]
 8011386:	60fa      	str	r2, [r7, #12]
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801138c:	4ac0      	ldr	r2, [pc, #768]	; (8011690 <UART_SetConfig+0xc28>)
 801138e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011392:	b29b      	uxth	r3, r3
 8011394:	2200      	movs	r2, #0
 8011396:	603b      	str	r3, [r7, #0]
 8011398:	607a      	str	r2, [r7, #4]
 801139a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801139e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80113a2:	f7ef f81d 	bl	80003e0 <__aeabi_uldivmod>
 80113a6:	4602      	mov	r2, r0
 80113a8:	460b      	mov	r3, r1
 80113aa:	4610      	mov	r0, r2
 80113ac:	4619      	mov	r1, r3
 80113ae:	f04f 0200 	mov.w	r2, #0
 80113b2:	f04f 0300 	mov.w	r3, #0
 80113b6:	020b      	lsls	r3, r1, #8
 80113b8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80113bc:	0202      	lsls	r2, r0, #8
 80113be:	6979      	ldr	r1, [r7, #20]
 80113c0:	6849      	ldr	r1, [r1, #4]
 80113c2:	0849      	lsrs	r1, r1, #1
 80113c4:	2000      	movs	r0, #0
 80113c6:	460c      	mov	r4, r1
 80113c8:	4605      	mov	r5, r0
 80113ca:	eb12 0804 	adds.w	r8, r2, r4
 80113ce:	eb43 0905 	adc.w	r9, r3, r5
 80113d2:	697b      	ldr	r3, [r7, #20]
 80113d4:	685b      	ldr	r3, [r3, #4]
 80113d6:	2200      	movs	r2, #0
 80113d8:	469a      	mov	sl, r3
 80113da:	4693      	mov	fp, r2
 80113dc:	4652      	mov	r2, sl
 80113de:	465b      	mov	r3, fp
 80113e0:	4640      	mov	r0, r8
 80113e2:	4649      	mov	r1, r9
 80113e4:	f7ee fffc 	bl	80003e0 <__aeabi_uldivmod>
 80113e8:	4602      	mov	r2, r0
 80113ea:	460b      	mov	r3, r1
 80113ec:	4613      	mov	r3, r2
 80113ee:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80113f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113f2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80113f6:	d308      	bcc.n	801140a <UART_SetConfig+0x9a2>
 80113f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80113fe:	d204      	bcs.n	801140a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011400:	697b      	ldr	r3, [r7, #20]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011406:	60da      	str	r2, [r3, #12]
 8011408:	e17f      	b.n	801170a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801140a:	2301      	movs	r3, #1
 801140c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011410:	e17b      	b.n	801170a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011412:	697b      	ldr	r3, [r7, #20]
 8011414:	69db      	ldr	r3, [r3, #28]
 8011416:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801141a:	f040 80bd 	bne.w	8011598 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801141e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011422:	2b20      	cmp	r3, #32
 8011424:	dc48      	bgt.n	80114b8 <UART_SetConfig+0xa50>
 8011426:	2b00      	cmp	r3, #0
 8011428:	db7b      	blt.n	8011522 <UART_SetConfig+0xaba>
 801142a:	2b20      	cmp	r3, #32
 801142c:	d879      	bhi.n	8011522 <UART_SetConfig+0xaba>
 801142e:	a201      	add	r2, pc, #4	; (adr r2, 8011434 <UART_SetConfig+0x9cc>)
 8011430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011434:	080114bf 	.word	0x080114bf
 8011438:	080114c7 	.word	0x080114c7
 801143c:	08011523 	.word	0x08011523
 8011440:	08011523 	.word	0x08011523
 8011444:	080114cf 	.word	0x080114cf
 8011448:	08011523 	.word	0x08011523
 801144c:	08011523 	.word	0x08011523
 8011450:	08011523 	.word	0x08011523
 8011454:	080114df 	.word	0x080114df
 8011458:	08011523 	.word	0x08011523
 801145c:	08011523 	.word	0x08011523
 8011460:	08011523 	.word	0x08011523
 8011464:	08011523 	.word	0x08011523
 8011468:	08011523 	.word	0x08011523
 801146c:	08011523 	.word	0x08011523
 8011470:	08011523 	.word	0x08011523
 8011474:	080114ef 	.word	0x080114ef
 8011478:	08011523 	.word	0x08011523
 801147c:	08011523 	.word	0x08011523
 8011480:	08011523 	.word	0x08011523
 8011484:	08011523 	.word	0x08011523
 8011488:	08011523 	.word	0x08011523
 801148c:	08011523 	.word	0x08011523
 8011490:	08011523 	.word	0x08011523
 8011494:	08011523 	.word	0x08011523
 8011498:	08011523 	.word	0x08011523
 801149c:	08011523 	.word	0x08011523
 80114a0:	08011523 	.word	0x08011523
 80114a4:	08011523 	.word	0x08011523
 80114a8:	08011523 	.word	0x08011523
 80114ac:	08011523 	.word	0x08011523
 80114b0:	08011523 	.word	0x08011523
 80114b4:	08011515 	.word	0x08011515
 80114b8:	2b40      	cmp	r3, #64	; 0x40
 80114ba:	d02e      	beq.n	801151a <UART_SetConfig+0xab2>
 80114bc:	e031      	b.n	8011522 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80114be:	f7f9 f925 	bl	800a70c <HAL_RCC_GetPCLK1Freq>
 80114c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80114c4:	e033      	b.n	801152e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80114c6:	f7f9 f937 	bl	800a738 <HAL_RCC_GetPCLK2Freq>
 80114ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80114cc:	e02f      	b.n	801152e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80114ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80114d2:	4618      	mov	r0, r3
 80114d4:	f7fa ffce 	bl	800c474 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80114d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114dc:	e027      	b.n	801152e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80114de:	f107 0318 	add.w	r3, r7, #24
 80114e2:	4618      	mov	r0, r3
 80114e4:	f7fb f91a 	bl	800c71c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80114e8:	69fb      	ldr	r3, [r7, #28]
 80114ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80114ec:	e01f      	b.n	801152e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80114ee:	4b69      	ldr	r3, [pc, #420]	; (8011694 <UART_SetConfig+0xc2c>)
 80114f0:	681b      	ldr	r3, [r3, #0]
 80114f2:	f003 0320 	and.w	r3, r3, #32
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d009      	beq.n	801150e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80114fa:	4b66      	ldr	r3, [pc, #408]	; (8011694 <UART_SetConfig+0xc2c>)
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	08db      	lsrs	r3, r3, #3
 8011500:	f003 0303 	and.w	r3, r3, #3
 8011504:	4a64      	ldr	r2, [pc, #400]	; (8011698 <UART_SetConfig+0xc30>)
 8011506:	fa22 f303 	lsr.w	r3, r2, r3
 801150a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801150c:	e00f      	b.n	801152e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801150e:	4b62      	ldr	r3, [pc, #392]	; (8011698 <UART_SetConfig+0xc30>)
 8011510:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011512:	e00c      	b.n	801152e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011514:	4b61      	ldr	r3, [pc, #388]	; (801169c <UART_SetConfig+0xc34>)
 8011516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011518:	e009      	b.n	801152e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801151a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801151e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011520:	e005      	b.n	801152e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011522:	2300      	movs	r3, #0
 8011524:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011526:	2301      	movs	r3, #1
 8011528:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801152c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801152e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011530:	2b00      	cmp	r3, #0
 8011532:	f000 80ea 	beq.w	801170a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011536:	697b      	ldr	r3, [r7, #20]
 8011538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801153a:	4a55      	ldr	r2, [pc, #340]	; (8011690 <UART_SetConfig+0xc28>)
 801153c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011540:	461a      	mov	r2, r3
 8011542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011544:	fbb3 f3f2 	udiv	r3, r3, r2
 8011548:	005a      	lsls	r2, r3, #1
 801154a:	697b      	ldr	r3, [r7, #20]
 801154c:	685b      	ldr	r3, [r3, #4]
 801154e:	085b      	lsrs	r3, r3, #1
 8011550:	441a      	add	r2, r3
 8011552:	697b      	ldr	r3, [r7, #20]
 8011554:	685b      	ldr	r3, [r3, #4]
 8011556:	fbb2 f3f3 	udiv	r3, r2, r3
 801155a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801155c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801155e:	2b0f      	cmp	r3, #15
 8011560:	d916      	bls.n	8011590 <UART_SetConfig+0xb28>
 8011562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011568:	d212      	bcs.n	8011590 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801156a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801156c:	b29b      	uxth	r3, r3
 801156e:	f023 030f 	bic.w	r3, r3, #15
 8011572:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011576:	085b      	lsrs	r3, r3, #1
 8011578:	b29b      	uxth	r3, r3
 801157a:	f003 0307 	and.w	r3, r3, #7
 801157e:	b29a      	uxth	r2, r3
 8011580:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011582:	4313      	orrs	r3, r2
 8011584:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801158c:	60da      	str	r2, [r3, #12]
 801158e:	e0bc      	b.n	801170a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011590:	2301      	movs	r3, #1
 8011592:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011596:	e0b8      	b.n	801170a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011598:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801159c:	2b20      	cmp	r3, #32
 801159e:	dc4b      	bgt.n	8011638 <UART_SetConfig+0xbd0>
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	f2c0 8087 	blt.w	80116b4 <UART_SetConfig+0xc4c>
 80115a6:	2b20      	cmp	r3, #32
 80115a8:	f200 8084 	bhi.w	80116b4 <UART_SetConfig+0xc4c>
 80115ac:	a201      	add	r2, pc, #4	; (adr r2, 80115b4 <UART_SetConfig+0xb4c>)
 80115ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115b2:	bf00      	nop
 80115b4:	0801163f 	.word	0x0801163f
 80115b8:	08011647 	.word	0x08011647
 80115bc:	080116b5 	.word	0x080116b5
 80115c0:	080116b5 	.word	0x080116b5
 80115c4:	0801164f 	.word	0x0801164f
 80115c8:	080116b5 	.word	0x080116b5
 80115cc:	080116b5 	.word	0x080116b5
 80115d0:	080116b5 	.word	0x080116b5
 80115d4:	0801165f 	.word	0x0801165f
 80115d8:	080116b5 	.word	0x080116b5
 80115dc:	080116b5 	.word	0x080116b5
 80115e0:	080116b5 	.word	0x080116b5
 80115e4:	080116b5 	.word	0x080116b5
 80115e8:	080116b5 	.word	0x080116b5
 80115ec:	080116b5 	.word	0x080116b5
 80115f0:	080116b5 	.word	0x080116b5
 80115f4:	0801166f 	.word	0x0801166f
 80115f8:	080116b5 	.word	0x080116b5
 80115fc:	080116b5 	.word	0x080116b5
 8011600:	080116b5 	.word	0x080116b5
 8011604:	080116b5 	.word	0x080116b5
 8011608:	080116b5 	.word	0x080116b5
 801160c:	080116b5 	.word	0x080116b5
 8011610:	080116b5 	.word	0x080116b5
 8011614:	080116b5 	.word	0x080116b5
 8011618:	080116b5 	.word	0x080116b5
 801161c:	080116b5 	.word	0x080116b5
 8011620:	080116b5 	.word	0x080116b5
 8011624:	080116b5 	.word	0x080116b5
 8011628:	080116b5 	.word	0x080116b5
 801162c:	080116b5 	.word	0x080116b5
 8011630:	080116b5 	.word	0x080116b5
 8011634:	080116a7 	.word	0x080116a7
 8011638:	2b40      	cmp	r3, #64	; 0x40
 801163a:	d037      	beq.n	80116ac <UART_SetConfig+0xc44>
 801163c:	e03a      	b.n	80116b4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801163e:	f7f9 f865 	bl	800a70c <HAL_RCC_GetPCLK1Freq>
 8011642:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011644:	e03c      	b.n	80116c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011646:	f7f9 f877 	bl	800a738 <HAL_RCC_GetPCLK2Freq>
 801164a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801164c:	e038      	b.n	80116c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801164e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011652:	4618      	mov	r0, r3
 8011654:	f7fa ff0e 	bl	800c474 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801165a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801165c:	e030      	b.n	80116c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801165e:	f107 0318 	add.w	r3, r7, #24
 8011662:	4618      	mov	r0, r3
 8011664:	f7fb f85a 	bl	800c71c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011668:	69fb      	ldr	r3, [r7, #28]
 801166a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801166c:	e028      	b.n	80116c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801166e:	4b09      	ldr	r3, [pc, #36]	; (8011694 <UART_SetConfig+0xc2c>)
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	f003 0320 	and.w	r3, r3, #32
 8011676:	2b00      	cmp	r3, #0
 8011678:	d012      	beq.n	80116a0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801167a:	4b06      	ldr	r3, [pc, #24]	; (8011694 <UART_SetConfig+0xc2c>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	08db      	lsrs	r3, r3, #3
 8011680:	f003 0303 	and.w	r3, r3, #3
 8011684:	4a04      	ldr	r2, [pc, #16]	; (8011698 <UART_SetConfig+0xc30>)
 8011686:	fa22 f303 	lsr.w	r3, r2, r3
 801168a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801168c:	e018      	b.n	80116c0 <UART_SetConfig+0xc58>
 801168e:	bf00      	nop
 8011690:	08017a98 	.word	0x08017a98
 8011694:	58024400 	.word	0x58024400
 8011698:	03d09000 	.word	0x03d09000
 801169c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80116a0:	4b24      	ldr	r3, [pc, #144]	; (8011734 <UART_SetConfig+0xccc>)
 80116a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116a4:	e00c      	b.n	80116c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80116a6:	4b24      	ldr	r3, [pc, #144]	; (8011738 <UART_SetConfig+0xcd0>)
 80116a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116aa:	e009      	b.n	80116c0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80116ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80116b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80116b2:	e005      	b.n	80116c0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80116b4:	2300      	movs	r3, #0
 80116b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80116b8:	2301      	movs	r3, #1
 80116ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80116be:	bf00      	nop
    }

    if (pclk != 0U)
 80116c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d021      	beq.n	801170a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80116c6:	697b      	ldr	r3, [r7, #20]
 80116c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116ca:	4a1c      	ldr	r2, [pc, #112]	; (801173c <UART_SetConfig+0xcd4>)
 80116cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80116d0:	461a      	mov	r2, r3
 80116d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80116d8:	697b      	ldr	r3, [r7, #20]
 80116da:	685b      	ldr	r3, [r3, #4]
 80116dc:	085b      	lsrs	r3, r3, #1
 80116de:	441a      	add	r2, r3
 80116e0:	697b      	ldr	r3, [r7, #20]
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80116e8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80116ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ec:	2b0f      	cmp	r3, #15
 80116ee:	d909      	bls.n	8011704 <UART_SetConfig+0xc9c>
 80116f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80116f6:	d205      	bcs.n	8011704 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80116f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116fa:	b29a      	uxth	r2, r3
 80116fc:	697b      	ldr	r3, [r7, #20]
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	60da      	str	r2, [r3, #12]
 8011702:	e002      	b.n	801170a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011704:	2301      	movs	r3, #1
 8011706:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801170a:	697b      	ldr	r3, [r7, #20]
 801170c:	2201      	movs	r2, #1
 801170e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011712:	697b      	ldr	r3, [r7, #20]
 8011714:	2201      	movs	r2, #1
 8011716:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801171a:	697b      	ldr	r3, [r7, #20]
 801171c:	2200      	movs	r2, #0
 801171e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011720:	697b      	ldr	r3, [r7, #20]
 8011722:	2200      	movs	r2, #0
 8011724:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011726:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 801172a:	4618      	mov	r0, r3
 801172c:	3748      	adds	r7, #72	; 0x48
 801172e:	46bd      	mov	sp, r7
 8011730:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011734:	03d09000 	.word	0x03d09000
 8011738:	003d0900 	.word	0x003d0900
 801173c:	08017a98 	.word	0x08017a98

08011740 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011740:	b480      	push	{r7}
 8011742:	b083      	sub	sp, #12
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011748:	687b      	ldr	r3, [r7, #4]
 801174a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801174c:	f003 0301 	and.w	r3, r3, #1
 8011750:	2b00      	cmp	r3, #0
 8011752:	d00a      	beq.n	801176a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	685b      	ldr	r3, [r3, #4]
 801175a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	430a      	orrs	r2, r1
 8011768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801176e:	f003 0302 	and.w	r3, r3, #2
 8011772:	2b00      	cmp	r3, #0
 8011774:	d00a      	beq.n	801178c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011776:	687b      	ldr	r3, [r7, #4]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	685b      	ldr	r3, [r3, #4]
 801177c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	430a      	orrs	r2, r1
 801178a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011790:	f003 0304 	and.w	r3, r3, #4
 8011794:	2b00      	cmp	r3, #0
 8011796:	d00a      	beq.n	80117ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	685b      	ldr	r3, [r3, #4]
 801179e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	430a      	orrs	r2, r1
 80117ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117b2:	f003 0308 	and.w	r3, r3, #8
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d00a      	beq.n	80117d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	685b      	ldr	r3, [r3, #4]
 80117c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	681b      	ldr	r3, [r3, #0]
 80117cc:	430a      	orrs	r2, r1
 80117ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117d4:	f003 0310 	and.w	r3, r3, #16
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d00a      	beq.n	80117f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	689b      	ldr	r3, [r3, #8]
 80117e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	430a      	orrs	r2, r1
 80117f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80117f6:	f003 0320 	and.w	r3, r3, #32
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d00a      	beq.n	8011814 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	689b      	ldr	r3, [r3, #8]
 8011804:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	681b      	ldr	r3, [r3, #0]
 8011810:	430a      	orrs	r2, r1
 8011812:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801181c:	2b00      	cmp	r3, #0
 801181e:	d01a      	beq.n	8011856 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	685b      	ldr	r3, [r3, #4]
 8011826:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	430a      	orrs	r2, r1
 8011834:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801183a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801183e:	d10a      	bne.n	8011856 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	681b      	ldr	r3, [r3, #0]
 8011844:	685b      	ldr	r3, [r3, #4]
 8011846:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	681b      	ldr	r3, [r3, #0]
 8011852:	430a      	orrs	r2, r1
 8011854:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801185a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801185e:	2b00      	cmp	r3, #0
 8011860:	d00a      	beq.n	8011878 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	685b      	ldr	r3, [r3, #4]
 8011868:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	430a      	orrs	r2, r1
 8011876:	605a      	str	r2, [r3, #4]
  }
}
 8011878:	bf00      	nop
 801187a:	370c      	adds	r7, #12
 801187c:	46bd      	mov	sp, r7
 801187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011882:	4770      	bx	lr

08011884 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b098      	sub	sp, #96	; 0x60
 8011888:	af02      	add	r7, sp, #8
 801188a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	2200      	movs	r2, #0
 8011890:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011894:	f7f2 f894 	bl	80039c0 <HAL_GetTick>
 8011898:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	f003 0308 	and.w	r3, r3, #8
 80118a4:	2b08      	cmp	r3, #8
 80118a6:	d12f      	bne.n	8011908 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80118a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80118ac:	9300      	str	r3, [sp, #0]
 80118ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118b0:	2200      	movs	r2, #0
 80118b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80118b6:	6878      	ldr	r0, [r7, #4]
 80118b8:	f000 f88e 	bl	80119d8 <UART_WaitOnFlagUntilTimeout>
 80118bc:	4603      	mov	r3, r0
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d022      	beq.n	8011908 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118ca:	e853 3f00 	ldrex	r3, [r3]
 80118ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80118d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80118d6:	653b      	str	r3, [r7, #80]	; 0x50
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	681b      	ldr	r3, [r3, #0]
 80118dc:	461a      	mov	r2, r3
 80118de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118e0:	647b      	str	r3, [r7, #68]	; 0x44
 80118e2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80118e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80118e8:	e841 2300 	strex	r3, r2, [r1]
 80118ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80118ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d1e6      	bne.n	80118c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	2220      	movs	r2, #32
 80118f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2200      	movs	r2, #0
 8011900:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011904:	2303      	movs	r3, #3
 8011906:	e063      	b.n	80119d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	f003 0304 	and.w	r3, r3, #4
 8011912:	2b04      	cmp	r3, #4
 8011914:	d149      	bne.n	80119aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011916:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801191a:	9300      	str	r3, [sp, #0]
 801191c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801191e:	2200      	movs	r2, #0
 8011920:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011924:	6878      	ldr	r0, [r7, #4]
 8011926:	f000 f857 	bl	80119d8 <UART_WaitOnFlagUntilTimeout>
 801192a:	4603      	mov	r3, r0
 801192c:	2b00      	cmp	r3, #0
 801192e:	d03c      	beq.n	80119aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011938:	e853 3f00 	ldrex	r3, [r3]
 801193c:	623b      	str	r3, [r7, #32]
   return(result);
 801193e:	6a3b      	ldr	r3, [r7, #32]
 8011940:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011944:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	461a      	mov	r2, r3
 801194c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801194e:	633b      	str	r3, [r7, #48]	; 0x30
 8011950:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011954:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011956:	e841 2300 	strex	r3, r2, [r1]
 801195a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801195c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801195e:	2b00      	cmp	r3, #0
 8011960:	d1e6      	bne.n	8011930 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	3308      	adds	r3, #8
 8011968:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	e853 3f00 	ldrex	r3, [r3]
 8011970:	60fb      	str	r3, [r7, #12]
   return(result);
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	f023 0301 	bic.w	r3, r3, #1
 8011978:	64bb      	str	r3, [r7, #72]	; 0x48
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	3308      	adds	r3, #8
 8011980:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011982:	61fa      	str	r2, [r7, #28]
 8011984:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011986:	69b9      	ldr	r1, [r7, #24]
 8011988:	69fa      	ldr	r2, [r7, #28]
 801198a:	e841 2300 	strex	r3, r2, [r1]
 801198e:	617b      	str	r3, [r7, #20]
   return(result);
 8011990:	697b      	ldr	r3, [r7, #20]
 8011992:	2b00      	cmp	r3, #0
 8011994:	d1e5      	bne.n	8011962 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	2220      	movs	r2, #32
 801199a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	2200      	movs	r2, #0
 80119a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80119a6:	2303      	movs	r3, #3
 80119a8:	e012      	b.n	80119d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	2220      	movs	r2, #32
 80119ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2220      	movs	r2, #32
 80119b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	2200      	movs	r2, #0
 80119be:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2200      	movs	r2, #0
 80119c4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	2200      	movs	r2, #0
 80119ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80119ce:	2300      	movs	r3, #0
}
 80119d0:	4618      	mov	r0, r3
 80119d2:	3758      	adds	r7, #88	; 0x58
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd80      	pop	{r7, pc}

080119d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b084      	sub	sp, #16
 80119dc:	af00      	add	r7, sp, #0
 80119de:	60f8      	str	r0, [r7, #12]
 80119e0:	60b9      	str	r1, [r7, #8]
 80119e2:	603b      	str	r3, [r7, #0]
 80119e4:	4613      	mov	r3, r2
 80119e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80119e8:	e049      	b.n	8011a7e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80119ea:	69bb      	ldr	r3, [r7, #24]
 80119ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119f0:	d045      	beq.n	8011a7e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80119f2:	f7f1 ffe5 	bl	80039c0 <HAL_GetTick>
 80119f6:	4602      	mov	r2, r0
 80119f8:	683b      	ldr	r3, [r7, #0]
 80119fa:	1ad3      	subs	r3, r2, r3
 80119fc:	69ba      	ldr	r2, [r7, #24]
 80119fe:	429a      	cmp	r2, r3
 8011a00:	d302      	bcc.n	8011a08 <UART_WaitOnFlagUntilTimeout+0x30>
 8011a02:	69bb      	ldr	r3, [r7, #24]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d101      	bne.n	8011a0c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8011a08:	2303      	movs	r3, #3
 8011a0a:	e048      	b.n	8011a9e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	f003 0304 	and.w	r3, r3, #4
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d031      	beq.n	8011a7e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	69db      	ldr	r3, [r3, #28]
 8011a20:	f003 0308 	and.w	r3, r3, #8
 8011a24:	2b08      	cmp	r3, #8
 8011a26:	d110      	bne.n	8011a4a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	2208      	movs	r2, #8
 8011a2e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011a30:	68f8      	ldr	r0, [r7, #12]
 8011a32:	f000 f839 	bl	8011aa8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	2208      	movs	r2, #8
 8011a3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011a3e:	68fb      	ldr	r3, [r7, #12]
 8011a40:	2200      	movs	r2, #0
 8011a42:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8011a46:	2301      	movs	r3, #1
 8011a48:	e029      	b.n	8011a9e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	69db      	ldr	r3, [r3, #28]
 8011a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011a54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011a58:	d111      	bne.n	8011a7e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011a64:	68f8      	ldr	r0, [r7, #12]
 8011a66:	f000 f81f 	bl	8011aa8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	2220      	movs	r2, #32
 8011a6e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	2200      	movs	r2, #0
 8011a76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011a7a:	2303      	movs	r3, #3
 8011a7c:	e00f      	b.n	8011a9e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	681b      	ldr	r3, [r3, #0]
 8011a82:	69da      	ldr	r2, [r3, #28]
 8011a84:	68bb      	ldr	r3, [r7, #8]
 8011a86:	4013      	ands	r3, r2
 8011a88:	68ba      	ldr	r2, [r7, #8]
 8011a8a:	429a      	cmp	r2, r3
 8011a8c:	bf0c      	ite	eq
 8011a8e:	2301      	moveq	r3, #1
 8011a90:	2300      	movne	r3, #0
 8011a92:	b2db      	uxtb	r3, r3
 8011a94:	461a      	mov	r2, r3
 8011a96:	79fb      	ldrb	r3, [r7, #7]
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	d0a6      	beq.n	80119ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011a9c:	2300      	movs	r3, #0
}
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	3710      	adds	r7, #16
 8011aa2:	46bd      	mov	sp, r7
 8011aa4:	bd80      	pop	{r7, pc}
	...

08011aa8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b095      	sub	sp, #84	; 0x54
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ab8:	e853 3f00 	ldrex	r3, [r3]
 8011abc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ac0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	461a      	mov	r2, r3
 8011acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ace:	643b      	str	r3, [r7, #64]	; 0x40
 8011ad0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ad2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011ad4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011ad6:	e841 2300 	strex	r3, r2, [r1]
 8011ada:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d1e6      	bne.n	8011ab0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	3308      	adds	r3, #8
 8011ae8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aea:	6a3b      	ldr	r3, [r7, #32]
 8011aec:	e853 3f00 	ldrex	r3, [r3]
 8011af0:	61fb      	str	r3, [r7, #28]
   return(result);
 8011af2:	69fa      	ldr	r2, [r7, #28]
 8011af4:	4b1e      	ldr	r3, [pc, #120]	; (8011b70 <UART_EndRxTransfer+0xc8>)
 8011af6:	4013      	ands	r3, r2
 8011af8:	64bb      	str	r3, [r7, #72]	; 0x48
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	3308      	adds	r3, #8
 8011b00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011b02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011b04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b0a:	e841 2300 	strex	r3, r2, [r1]
 8011b0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d1e5      	bne.n	8011ae2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b1a:	2b01      	cmp	r3, #1
 8011b1c:	d118      	bne.n	8011b50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	e853 3f00 	ldrex	r3, [r3]
 8011b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b2c:	68bb      	ldr	r3, [r7, #8]
 8011b2e:	f023 0310 	bic.w	r3, r3, #16
 8011b32:	647b      	str	r3, [r7, #68]	; 0x44
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	461a      	mov	r2, r3
 8011b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b3c:	61bb      	str	r3, [r7, #24]
 8011b3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b40:	6979      	ldr	r1, [r7, #20]
 8011b42:	69ba      	ldr	r2, [r7, #24]
 8011b44:	e841 2300 	strex	r3, r2, [r1]
 8011b48:	613b      	str	r3, [r7, #16]
   return(result);
 8011b4a:	693b      	ldr	r3, [r7, #16]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d1e6      	bne.n	8011b1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	2220      	movs	r2, #32
 8011b54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2200      	movs	r2, #0
 8011b62:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011b64:	bf00      	nop
 8011b66:	3754      	adds	r7, #84	; 0x54
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b6e:	4770      	bx	lr
 8011b70:	effffffe 	.word	0xeffffffe

08011b74 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011b74:	b480      	push	{r7}
 8011b76:	b085      	sub	sp, #20
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011b82:	2b01      	cmp	r3, #1
 8011b84:	d101      	bne.n	8011b8a <HAL_UARTEx_DisableFifoMode+0x16>
 8011b86:	2302      	movs	r3, #2
 8011b88:	e027      	b.n	8011bda <HAL_UARTEx_DisableFifoMode+0x66>
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2201      	movs	r2, #1
 8011b8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2224      	movs	r2, #36	; 0x24
 8011b96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	681a      	ldr	r2, [r3, #0]
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	f022 0201 	bic.w	r2, r2, #1
 8011bb0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011bb2:	68fb      	ldr	r3, [r7, #12]
 8011bb4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011bb8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	2200      	movs	r2, #0
 8011bbe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011bc0:	687b      	ldr	r3, [r7, #4]
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	68fa      	ldr	r2, [r7, #12]
 8011bc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	2220      	movs	r2, #32
 8011bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	2200      	movs	r2, #0
 8011bd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011bd8:	2300      	movs	r3, #0
}
 8011bda:	4618      	mov	r0, r3
 8011bdc:	3714      	adds	r7, #20
 8011bde:	46bd      	mov	sp, r7
 8011be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011be4:	4770      	bx	lr

08011be6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011be6:	b580      	push	{r7, lr}
 8011be8:	b084      	sub	sp, #16
 8011bea:	af00      	add	r7, sp, #0
 8011bec:	6078      	str	r0, [r7, #4]
 8011bee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011bf6:	2b01      	cmp	r3, #1
 8011bf8:	d101      	bne.n	8011bfe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011bfa:	2302      	movs	r3, #2
 8011bfc:	e02d      	b.n	8011c5a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2201      	movs	r2, #1
 8011c02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	2224      	movs	r2, #36	; 0x24
 8011c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	681b      	ldr	r3, [r3, #0]
 8011c14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	681a      	ldr	r2, [r3, #0]
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	f022 0201 	bic.w	r2, r2, #1
 8011c24:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	689b      	ldr	r3, [r3, #8]
 8011c2c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	683a      	ldr	r2, [r7, #0]
 8011c36:	430a      	orrs	r2, r1
 8011c38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011c3a:	6878      	ldr	r0, [r7, #4]
 8011c3c:	f000 f850 	bl	8011ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	68fa      	ldr	r2, [r7, #12]
 8011c46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	2220      	movs	r2, #32
 8011c4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	2200      	movs	r2, #0
 8011c54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011c58:	2300      	movs	r3, #0
}
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	3710      	adds	r7, #16
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}

08011c62 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011c62:	b580      	push	{r7, lr}
 8011c64:	b084      	sub	sp, #16
 8011c66:	af00      	add	r7, sp, #0
 8011c68:	6078      	str	r0, [r7, #4]
 8011c6a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8011c72:	2b01      	cmp	r3, #1
 8011c74:	d101      	bne.n	8011c7a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011c76:	2302      	movs	r3, #2
 8011c78:	e02d      	b.n	8011cd6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	2201      	movs	r2, #1
 8011c7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	2224      	movs	r2, #36	; 0x24
 8011c86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	681a      	ldr	r2, [r3, #0]
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	f022 0201 	bic.w	r2, r2, #1
 8011ca0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	689b      	ldr	r3, [r3, #8]
 8011ca8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	683a      	ldr	r2, [r7, #0]
 8011cb2:	430a      	orrs	r2, r1
 8011cb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011cb6:	6878      	ldr	r0, [r7, #4]
 8011cb8:	f000 f812 	bl	8011ce0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	68fa      	ldr	r2, [r7, #12]
 8011cc2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	2220      	movs	r2, #32
 8011cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	2200      	movs	r2, #0
 8011cd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8011cd4:	2300      	movs	r3, #0
}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	3710      	adds	r7, #16
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd80      	pop	{r7, pc}
	...

08011ce0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011ce0:	b480      	push	{r7}
 8011ce2:	b085      	sub	sp, #20
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011ce8:	687b      	ldr	r3, [r7, #4]
 8011cea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d108      	bne.n	8011d02 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	2201      	movs	r2, #1
 8011cf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	2201      	movs	r2, #1
 8011cfc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011d00:	e031      	b.n	8011d66 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011d02:	2310      	movs	r3, #16
 8011d04:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011d06:	2310      	movs	r3, #16
 8011d08:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	681b      	ldr	r3, [r3, #0]
 8011d0e:	689b      	ldr	r3, [r3, #8]
 8011d10:	0e5b      	lsrs	r3, r3, #25
 8011d12:	b2db      	uxtb	r3, r3
 8011d14:	f003 0307 	and.w	r3, r3, #7
 8011d18:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	689b      	ldr	r3, [r3, #8]
 8011d20:	0f5b      	lsrs	r3, r3, #29
 8011d22:	b2db      	uxtb	r3, r3
 8011d24:	f003 0307 	and.w	r3, r3, #7
 8011d28:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011d2a:	7bbb      	ldrb	r3, [r7, #14]
 8011d2c:	7b3a      	ldrb	r2, [r7, #12]
 8011d2e:	4911      	ldr	r1, [pc, #68]	; (8011d74 <UARTEx_SetNbDataToProcess+0x94>)
 8011d30:	5c8a      	ldrb	r2, [r1, r2]
 8011d32:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011d36:	7b3a      	ldrb	r2, [r7, #12]
 8011d38:	490f      	ldr	r1, [pc, #60]	; (8011d78 <UARTEx_SetNbDataToProcess+0x98>)
 8011d3a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011d3c:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d40:	b29a      	uxth	r2, r3
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011d48:	7bfb      	ldrb	r3, [r7, #15]
 8011d4a:	7b7a      	ldrb	r2, [r7, #13]
 8011d4c:	4909      	ldr	r1, [pc, #36]	; (8011d74 <UARTEx_SetNbDataToProcess+0x94>)
 8011d4e:	5c8a      	ldrb	r2, [r1, r2]
 8011d50:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8011d54:	7b7a      	ldrb	r2, [r7, #13]
 8011d56:	4908      	ldr	r1, [pc, #32]	; (8011d78 <UARTEx_SetNbDataToProcess+0x98>)
 8011d58:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011d5a:	fb93 f3f2 	sdiv	r3, r3, r2
 8011d5e:	b29a      	uxth	r2, r3
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8011d66:	bf00      	nop
 8011d68:	3714      	adds	r7, #20
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d70:	4770      	bx	lr
 8011d72:	bf00      	nop
 8011d74:	08017ab0 	.word	0x08017ab0
 8011d78:	08017ab8 	.word	0x08017ab8

08011d7c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8011d7c:	b084      	sub	sp, #16
 8011d7e:	b480      	push	{r7}
 8011d80:	b085      	sub	sp, #20
 8011d82:	af00      	add	r7, sp, #0
 8011d84:	6078      	str	r0, [r7, #4]
 8011d86:	f107 001c 	add.w	r0, r7, #28
 8011d8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8011d8e:	2300      	movs	r3, #0
 8011d90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8011d92:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8011d94:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8011d96:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8011d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8011d9a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8011d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8011d9e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8011da2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8011da4:	68fa      	ldr	r2, [r7, #12]
 8011da6:	4313      	orrs	r3, r2
 8011da8:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	685a      	ldr	r2, [r3, #4]
 8011dae:	4b07      	ldr	r3, [pc, #28]	; (8011dcc <SDMMC_Init+0x50>)
 8011db0:	4013      	ands	r3, r2
 8011db2:	68fa      	ldr	r2, [r7, #12]
 8011db4:	431a      	orrs	r2, r3
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8011dba:	2300      	movs	r3, #0
}
 8011dbc:	4618      	mov	r0, r3
 8011dbe:	3714      	adds	r7, #20
 8011dc0:	46bd      	mov	sp, r7
 8011dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dc6:	b004      	add	sp, #16
 8011dc8:	4770      	bx	lr
 8011dca:	bf00      	nop
 8011dcc:	ffc02c00 	.word	0xffc02c00

08011dd0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011dd0:	b480      	push	{r7}
 8011dd2:	b083      	sub	sp, #12
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	370c      	adds	r7, #12
 8011de2:	46bd      	mov	sp, r7
 8011de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de8:	4770      	bx	lr

08011dea <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8011dea:	b480      	push	{r7}
 8011dec:	b083      	sub	sp, #12
 8011dee:	af00      	add	r7, sp, #0
 8011df0:	6078      	str	r0, [r7, #4]
 8011df2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	681a      	ldr	r2, [r3, #0]
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8011dfe:	2300      	movs	r3, #0
}
 8011e00:	4618      	mov	r0, r3
 8011e02:	370c      	adds	r7, #12
 8011e04:	46bd      	mov	sp, r7
 8011e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e0a:	4770      	bx	lr

08011e0c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8011e0c:	b480      	push	{r7}
 8011e0e:	b083      	sub	sp, #12
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	f043 0203 	orr.w	r2, r3, #3
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011e20:	2300      	movs	r3, #0
}
 8011e22:	4618      	mov	r0, r3
 8011e24:	370c      	adds	r7, #12
 8011e26:	46bd      	mov	sp, r7
 8011e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e2c:	4770      	bx	lr

08011e2e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8011e2e:	b480      	push	{r7}
 8011e30:	b083      	sub	sp, #12
 8011e32:	af00      	add	r7, sp, #0
 8011e34:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	f003 0303 	and.w	r3, r3, #3
}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	370c      	adds	r7, #12
 8011e42:	46bd      	mov	sp, r7
 8011e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e48:	4770      	bx	lr
	...

08011e4c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8011e4c:	b480      	push	{r7}
 8011e4e:	b085      	sub	sp, #20
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011e56:	2300      	movs	r3, #0
 8011e58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8011e5a:	683b      	ldr	r3, [r7, #0]
 8011e5c:	681a      	ldr	r2, [r3, #0]
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011e62:	683b      	ldr	r3, [r7, #0]
 8011e64:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011e6a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8011e6c:	683b      	ldr	r3, [r7, #0]
 8011e6e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8011e70:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011e72:	683b      	ldr	r3, [r7, #0]
 8011e74:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8011e76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8011e78:	68fa      	ldr	r2, [r7, #12]
 8011e7a:	4313      	orrs	r3, r2
 8011e7c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	68da      	ldr	r2, [r3, #12]
 8011e82:	4b06      	ldr	r3, [pc, #24]	; (8011e9c <SDMMC_SendCommand+0x50>)
 8011e84:	4013      	ands	r3, r2
 8011e86:	68fa      	ldr	r2, [r7, #12]
 8011e88:	431a      	orrs	r2, r3
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011e8e:	2300      	movs	r3, #0
}
 8011e90:	4618      	mov	r0, r3
 8011e92:	3714      	adds	r7, #20
 8011e94:	46bd      	mov	sp, r7
 8011e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9a:	4770      	bx	lr
 8011e9c:	fffee0c0 	.word	0xfffee0c0

08011ea0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011ea0:	b480      	push	{r7}
 8011ea2:	b083      	sub	sp, #12
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	691b      	ldr	r3, [r3, #16]
 8011eac:	b2db      	uxtb	r3, r3
}
 8011eae:	4618      	mov	r0, r3
 8011eb0:	370c      	adds	r7, #12
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb8:	4770      	bx	lr

08011eba <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8011eba:	b480      	push	{r7}
 8011ebc:	b085      	sub	sp, #20
 8011ebe:	af00      	add	r7, sp, #0
 8011ec0:	6078      	str	r0, [r7, #4]
 8011ec2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	3314      	adds	r3, #20
 8011ec8:	461a      	mov	r2, r3
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	4413      	add	r3, r2
 8011ece:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	681b      	ldr	r3, [r3, #0]
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3714      	adds	r7, #20
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ede:	4770      	bx	lr

08011ee0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8011ee0:	b480      	push	{r7}
 8011ee2:	b085      	sub	sp, #20
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
 8011ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011eea:	2300      	movs	r3, #0
 8011eec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	681a      	ldr	r2, [r3, #0]
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011ef6:	683b      	ldr	r3, [r7, #0]
 8011ef8:	685a      	ldr	r2, [r3, #4]
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011efe:	683b      	ldr	r3, [r7, #0]
 8011f00:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011f06:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8011f0c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8011f12:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8011f14:	68fa      	ldr	r2, [r7, #12]
 8011f16:	4313      	orrs	r3, r2
 8011f18:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f1e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	431a      	orrs	r2, r3
 8011f26:	687b      	ldr	r3, [r7, #4]
 8011f28:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8011f2a:	2300      	movs	r3, #0

}
 8011f2c:	4618      	mov	r0, r3
 8011f2e:	3714      	adds	r7, #20
 8011f30:	46bd      	mov	sp, r7
 8011f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f36:	4770      	bx	lr

08011f38 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011f38:	b580      	push	{r7, lr}
 8011f3a:	b088      	sub	sp, #32
 8011f3c:	af00      	add	r7, sp, #0
 8011f3e:	6078      	str	r0, [r7, #4]
 8011f40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011f42:	683b      	ldr	r3, [r7, #0]
 8011f44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011f46:	2310      	movs	r3, #16
 8011f48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f50:	2300      	movs	r3, #0
 8011f52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011f5a:	f107 0308 	add.w	r3, r7, #8
 8011f5e:	4619      	mov	r1, r3
 8011f60:	6878      	ldr	r0, [r7, #4]
 8011f62:	f7ff ff73 	bl	8011e4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f6a:	2110      	movs	r1, #16
 8011f6c:	6878      	ldr	r0, [r7, #4]
 8011f6e:	f000 fa5f 	bl	8012430 <SDMMC_GetCmdResp1>
 8011f72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011f74:	69fb      	ldr	r3, [r7, #28]
}
 8011f76:	4618      	mov	r0, r3
 8011f78:	3720      	adds	r7, #32
 8011f7a:	46bd      	mov	sp, r7
 8011f7c:	bd80      	pop	{r7, pc}

08011f7e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011f7e:	b580      	push	{r7, lr}
 8011f80:	b088      	sub	sp, #32
 8011f82:	af00      	add	r7, sp, #0
 8011f84:	6078      	str	r0, [r7, #4]
 8011f86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011f88:	683b      	ldr	r3, [r7, #0]
 8011f8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011f8c:	2311      	movs	r3, #17
 8011f8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011f90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011f94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011f96:	2300      	movs	r3, #0
 8011f98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011f9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011fa0:	f107 0308 	add.w	r3, r7, #8
 8011fa4:	4619      	mov	r1, r3
 8011fa6:	6878      	ldr	r0, [r7, #4]
 8011fa8:	f7ff ff50 	bl	8011e4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8011fb0:	2111      	movs	r1, #17
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f000 fa3c 	bl	8012430 <SDMMC_GetCmdResp1>
 8011fb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011fba:	69fb      	ldr	r3, [r7, #28]
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3720      	adds	r7, #32
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}

08011fc4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b088      	sub	sp, #32
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
 8011fcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011fce:	683b      	ldr	r3, [r7, #0]
 8011fd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011fd2:	2312      	movs	r3, #18
 8011fd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011fd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011fda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011fdc:	2300      	movs	r3, #0
 8011fde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011fe4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011fe6:	f107 0308 	add.w	r3, r7, #8
 8011fea:	4619      	mov	r1, r3
 8011fec:	6878      	ldr	r0, [r7, #4]
 8011fee:	f7ff ff2d 	bl	8011e4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ff6:	2112      	movs	r1, #18
 8011ff8:	6878      	ldr	r0, [r7, #4]
 8011ffa:	f000 fa19 	bl	8012430 <SDMMC_GetCmdResp1>
 8011ffe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012000:	69fb      	ldr	r3, [r7, #28]
}
 8012002:	4618      	mov	r0, r3
 8012004:	3720      	adds	r7, #32
 8012006:	46bd      	mov	sp, r7
 8012008:	bd80      	pop	{r7, pc}

0801200a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801200a:	b580      	push	{r7, lr}
 801200c:	b088      	sub	sp, #32
 801200e:	af00      	add	r7, sp, #0
 8012010:	6078      	str	r0, [r7, #4]
 8012012:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012014:	683b      	ldr	r3, [r7, #0]
 8012016:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012018:	2318      	movs	r3, #24
 801201a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801201c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012020:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012022:	2300      	movs	r3, #0
 8012024:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012026:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801202a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801202c:	f107 0308 	add.w	r3, r7, #8
 8012030:	4619      	mov	r1, r3
 8012032:	6878      	ldr	r0, [r7, #4]
 8012034:	f7ff ff0a 	bl	8011e4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8012038:	f241 3288 	movw	r2, #5000	; 0x1388
 801203c:	2118      	movs	r1, #24
 801203e:	6878      	ldr	r0, [r7, #4]
 8012040:	f000 f9f6 	bl	8012430 <SDMMC_GetCmdResp1>
 8012044:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012046:	69fb      	ldr	r3, [r7, #28]
}
 8012048:	4618      	mov	r0, r3
 801204a:	3720      	adds	r7, #32
 801204c:	46bd      	mov	sp, r7
 801204e:	bd80      	pop	{r7, pc}

08012050 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b088      	sub	sp, #32
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
 8012058:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801205a:	683b      	ldr	r3, [r7, #0]
 801205c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801205e:	2319      	movs	r3, #25
 8012060:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012066:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012068:	2300      	movs	r3, #0
 801206a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801206c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012070:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012072:	f107 0308 	add.w	r3, r7, #8
 8012076:	4619      	mov	r1, r3
 8012078:	6878      	ldr	r0, [r7, #4]
 801207a:	f7ff fee7 	bl	8011e4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801207e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012082:	2119      	movs	r1, #25
 8012084:	6878      	ldr	r0, [r7, #4]
 8012086:	f000 f9d3 	bl	8012430 <SDMMC_GetCmdResp1>
 801208a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801208c:	69fb      	ldr	r3, [r7, #28]
}
 801208e:	4618      	mov	r0, r3
 8012090:	3720      	adds	r7, #32
 8012092:	46bd      	mov	sp, r7
 8012094:	bd80      	pop	{r7, pc}
	...

08012098 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b088      	sub	sp, #32
 801209c:	af00      	add	r7, sp, #0
 801209e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80120a0:	2300      	movs	r3, #0
 80120a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80120a4:	230c      	movs	r3, #12
 80120a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80120a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80120ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80120ae:	2300      	movs	r3, #0
 80120b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80120b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80120b6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	68db      	ldr	r3, [r3, #12]
 80120bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	68db      	ldr	r3, [r3, #12]
 80120c8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80120d0:	f107 0308 	add.w	r3, r7, #8
 80120d4:	4619      	mov	r1, r3
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f7ff feb8 	bl	8011e4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80120dc:	4a0b      	ldr	r2, [pc, #44]	; (801210c <SDMMC_CmdStopTransfer+0x74>)
 80120de:	210c      	movs	r1, #12
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f000 f9a5 	bl	8012430 <SDMMC_GetCmdResp1>
 80120e6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	68db      	ldr	r3, [r3, #12]
 80120ec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80120f4:	69fb      	ldr	r3, [r7, #28]
 80120f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80120fa:	d101      	bne.n	8012100 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80120fc:	2300      	movs	r3, #0
 80120fe:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8012100:	69fb      	ldr	r3, [r7, #28]
}
 8012102:	4618      	mov	r0, r3
 8012104:	3720      	adds	r7, #32
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}
 801210a:	bf00      	nop
 801210c:	05f5e100 	.word	0x05f5e100

08012110 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b088      	sub	sp, #32
 8012114:	af00      	add	r7, sp, #0
 8012116:	6078      	str	r0, [r7, #4]
 8012118:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801211a:	683b      	ldr	r3, [r7, #0]
 801211c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 801211e:	2307      	movs	r3, #7
 8012120:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012122:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012128:	2300      	movs	r3, #0
 801212a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801212c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012130:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012132:	f107 0308 	add.w	r3, r7, #8
 8012136:	4619      	mov	r1, r3
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f7ff fe87 	bl	8011e4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 801213e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012142:	2107      	movs	r1, #7
 8012144:	6878      	ldr	r0, [r7, #4]
 8012146:	f000 f973 	bl	8012430 <SDMMC_GetCmdResp1>
 801214a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801214c:	69fb      	ldr	r3, [r7, #28]
}
 801214e:	4618      	mov	r0, r3
 8012150:	3720      	adds	r7, #32
 8012152:	46bd      	mov	sp, r7
 8012154:	bd80      	pop	{r7, pc}

08012156 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8012156:	b580      	push	{r7, lr}
 8012158:	b088      	sub	sp, #32
 801215a:	af00      	add	r7, sp, #0
 801215c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 801215e:	2300      	movs	r3, #0
 8012160:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8012162:	2300      	movs	r3, #0
 8012164:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8012166:	2300      	movs	r3, #0
 8012168:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801216a:	2300      	movs	r3, #0
 801216c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801216e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012172:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012174:	f107 0308 	add.w	r3, r7, #8
 8012178:	4619      	mov	r1, r3
 801217a:	6878      	ldr	r0, [r7, #4]
 801217c:	f7ff fe66 	bl	8011e4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012180:	6878      	ldr	r0, [r7, #4]
 8012182:	f000 fb97 	bl	80128b4 <SDMMC_GetCmdError>
 8012186:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012188:	69fb      	ldr	r3, [r7, #28]
}
 801218a:	4618      	mov	r0, r3
 801218c:	3720      	adds	r7, #32
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}

08012192 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012192:	b580      	push	{r7, lr}
 8012194:	b088      	sub	sp, #32
 8012196:	af00      	add	r7, sp, #0
 8012198:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801219a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801219e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80121a0:	2308      	movs	r3, #8
 80121a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121aa:	2300      	movs	r3, #0
 80121ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121b4:	f107 0308 	add.w	r3, r7, #8
 80121b8:	4619      	mov	r1, r3
 80121ba:	6878      	ldr	r0, [r7, #4]
 80121bc:	f7ff fe46 	bl	8011e4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80121c0:	6878      	ldr	r0, [r7, #4]
 80121c2:	f000 fb29 	bl	8012818 <SDMMC_GetCmdResp7>
 80121c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80121c8:	69fb      	ldr	r3, [r7, #28]
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	3720      	adds	r7, #32
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd80      	pop	{r7, pc}

080121d2 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80121d2:	b580      	push	{r7, lr}
 80121d4:	b088      	sub	sp, #32
 80121d6:	af00      	add	r7, sp, #0
 80121d8:	6078      	str	r0, [r7, #4]
 80121da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80121dc:	683b      	ldr	r3, [r7, #0]
 80121de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80121e0:	2337      	movs	r3, #55	; 0x37
 80121e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80121e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80121e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80121ea:	2300      	movs	r3, #0
 80121ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80121ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80121f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80121f4:	f107 0308 	add.w	r3, r7, #8
 80121f8:	4619      	mov	r1, r3
 80121fa:	6878      	ldr	r0, [r7, #4]
 80121fc:	f7ff fe26 	bl	8011e4c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012200:	f241 3288 	movw	r2, #5000	; 0x1388
 8012204:	2137      	movs	r1, #55	; 0x37
 8012206:	6878      	ldr	r0, [r7, #4]
 8012208:	f000 f912 	bl	8012430 <SDMMC_GetCmdResp1>
 801220c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801220e:	69fb      	ldr	r3, [r7, #28]
}
 8012210:	4618      	mov	r0, r3
 8012212:	3720      	adds	r7, #32
 8012214:	46bd      	mov	sp, r7
 8012216:	bd80      	pop	{r7, pc}

08012218 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b088      	sub	sp, #32
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
 8012220:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8012226:	2329      	movs	r3, #41	; 0x29
 8012228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801222a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801222e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012230:	2300      	movs	r3, #0
 8012232:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012238:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801223a:	f107 0308 	add.w	r3, r7, #8
 801223e:	4619      	mov	r1, r3
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f7ff fe03 	bl	8011e4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8012246:	6878      	ldr	r0, [r7, #4]
 8012248:	f000 fa2e 	bl	80126a8 <SDMMC_GetCmdResp3>
 801224c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801224e:	69fb      	ldr	r3, [r7, #28]
}
 8012250:	4618      	mov	r0, r3
 8012252:	3720      	adds	r7, #32
 8012254:	46bd      	mov	sp, r7
 8012256:	bd80      	pop	{r7, pc}

08012258 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b088      	sub	sp, #32
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
 8012260:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8012262:	683b      	ldr	r3, [r7, #0]
 8012264:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8012266:	2306      	movs	r3, #6
 8012268:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801226a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801226e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012270:	2300      	movs	r3, #0
 8012272:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012278:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801227a:	f107 0308 	add.w	r3, r7, #8
 801227e:	4619      	mov	r1, r3
 8012280:	6878      	ldr	r0, [r7, #4]
 8012282:	f7ff fde3 	bl	8011e4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012286:	f241 3288 	movw	r2, #5000	; 0x1388
 801228a:	2106      	movs	r1, #6
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	f000 f8cf 	bl	8012430 <SDMMC_GetCmdResp1>
 8012292:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012294:	69fb      	ldr	r3, [r7, #28]
}
 8012296:	4618      	mov	r0, r3
 8012298:	3720      	adds	r7, #32
 801229a:	46bd      	mov	sp, r7
 801229c:	bd80      	pop	{r7, pc}

0801229e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 801229e:	b580      	push	{r7, lr}
 80122a0:	b088      	sub	sp, #32
 80122a2:	af00      	add	r7, sp, #0
 80122a4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80122a6:	2300      	movs	r3, #0
 80122a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80122aa:	2333      	movs	r3, #51	; 0x33
 80122ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80122ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80122b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122b4:	2300      	movs	r3, #0
 80122b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80122bc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80122be:	f107 0308 	add.w	r3, r7, #8
 80122c2:	4619      	mov	r1, r3
 80122c4:	6878      	ldr	r0, [r7, #4]
 80122c6:	f7ff fdc1 	bl	8011e4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80122ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80122ce:	2133      	movs	r1, #51	; 0x33
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f000 f8ad 	bl	8012430 <SDMMC_GetCmdResp1>
 80122d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80122d8:	69fb      	ldr	r3, [r7, #28]
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3720      	adds	r7, #32
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}

080122e2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80122e2:	b580      	push	{r7, lr}
 80122e4:	b088      	sub	sp, #32
 80122e6:	af00      	add	r7, sp, #0
 80122e8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80122ea:	2300      	movs	r3, #0
 80122ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80122ee:	2302      	movs	r3, #2
 80122f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80122f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80122f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80122f8:	2300      	movs	r3, #0
 80122fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80122fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012300:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012302:	f107 0308 	add.w	r3, r7, #8
 8012306:	4619      	mov	r1, r3
 8012308:	6878      	ldr	r0, [r7, #4]
 801230a:	f7ff fd9f 	bl	8011e4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801230e:	6878      	ldr	r0, [r7, #4]
 8012310:	f000 f980 	bl	8012614 <SDMMC_GetCmdResp2>
 8012314:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012316:	69fb      	ldr	r3, [r7, #28]
}
 8012318:	4618      	mov	r0, r3
 801231a:	3720      	adds	r7, #32
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}

08012320 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b088      	sub	sp, #32
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801232a:	683b      	ldr	r3, [r7, #0]
 801232c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 801232e:	2309      	movs	r3, #9
 8012330:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012332:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012336:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012338:	2300      	movs	r3, #0
 801233a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801233c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012340:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012342:	f107 0308 	add.w	r3, r7, #8
 8012346:	4619      	mov	r1, r3
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f7ff fd7f 	bl	8011e4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 801234e:	6878      	ldr	r0, [r7, #4]
 8012350:	f000 f960 	bl	8012614 <SDMMC_GetCmdResp2>
 8012354:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012356:	69fb      	ldr	r3, [r7, #28]
}
 8012358:	4618      	mov	r0, r3
 801235a:	3720      	adds	r7, #32
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}

08012360 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b088      	sub	sp, #32
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
 8012368:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801236a:	2300      	movs	r3, #0
 801236c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 801236e:	2303      	movs	r3, #3
 8012370:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012376:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012378:	2300      	movs	r3, #0
 801237a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801237c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012380:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012382:	f107 0308 	add.w	r3, r7, #8
 8012386:	4619      	mov	r1, r3
 8012388:	6878      	ldr	r0, [r7, #4]
 801238a:	f7ff fd5f 	bl	8011e4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801238e:	683a      	ldr	r2, [r7, #0]
 8012390:	2103      	movs	r1, #3
 8012392:	6878      	ldr	r0, [r7, #4]
 8012394:	f000 f9c8 	bl	8012728 <SDMMC_GetCmdResp6>
 8012398:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801239a:	69fb      	ldr	r3, [r7, #28]
}
 801239c:	4618      	mov	r0, r3
 801239e:	3720      	adds	r7, #32
 80123a0:	46bd      	mov	sp, r7
 80123a2:	bd80      	pop	{r7, pc}

080123a4 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b088      	sub	sp, #32
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
 80123ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80123b2:	230d      	movs	r3, #13
 80123b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80123bc:	2300      	movs	r3, #0
 80123be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80123c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80123c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80123c6:	f107 0308 	add.w	r3, r7, #8
 80123ca:	4619      	mov	r1, r3
 80123cc:	6878      	ldr	r0, [r7, #4]
 80123ce:	f7ff fd3d 	bl	8011e4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80123d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80123d6:	210d      	movs	r1, #13
 80123d8:	6878      	ldr	r0, [r7, #4]
 80123da:	f000 f829 	bl	8012430 <SDMMC_GetCmdResp1>
 80123de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80123e0:	69fb      	ldr	r3, [r7, #28]
}
 80123e2:	4618      	mov	r0, r3
 80123e4:	3720      	adds	r7, #32
 80123e6:	46bd      	mov	sp, r7
 80123e8:	bd80      	pop	{r7, pc}

080123ea <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80123ea:	b580      	push	{r7, lr}
 80123ec:	b088      	sub	sp, #32
 80123ee:	af00      	add	r7, sp, #0
 80123f0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80123f2:	2300      	movs	r3, #0
 80123f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80123f6:	230d      	movs	r3, #13
 80123f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80123fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80123fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012400:	2300      	movs	r3, #0
 8012402:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012408:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801240a:	f107 0308 	add.w	r3, r7, #8
 801240e:	4619      	mov	r1, r3
 8012410:	6878      	ldr	r0, [r7, #4]
 8012412:	f7ff fd1b 	bl	8011e4c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012416:	f241 3288 	movw	r2, #5000	; 0x1388
 801241a:	210d      	movs	r1, #13
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f000 f807 	bl	8012430 <SDMMC_GetCmdResp1>
 8012422:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012424:	69fb      	ldr	r3, [r7, #28]
}
 8012426:	4618      	mov	r0, r3
 8012428:	3720      	adds	r7, #32
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}
	...

08012430 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012430:	b580      	push	{r7, lr}
 8012432:	b088      	sub	sp, #32
 8012434:	af00      	add	r7, sp, #0
 8012436:	60f8      	str	r0, [r7, #12]
 8012438:	460b      	mov	r3, r1
 801243a:	607a      	str	r2, [r7, #4]
 801243c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801243e:	4b70      	ldr	r3, [pc, #448]	; (8012600 <SDMMC_GetCmdResp1+0x1d0>)
 8012440:	681b      	ldr	r3, [r3, #0]
 8012442:	4a70      	ldr	r2, [pc, #448]	; (8012604 <SDMMC_GetCmdResp1+0x1d4>)
 8012444:	fba2 2303 	umull	r2, r3, r2, r3
 8012448:	0a5a      	lsrs	r2, r3, #9
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	fb02 f303 	mul.w	r3, r2, r3
 8012450:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012452:	69fb      	ldr	r3, [r7, #28]
 8012454:	1e5a      	subs	r2, r3, #1
 8012456:	61fa      	str	r2, [r7, #28]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d102      	bne.n	8012462 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801245c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012460:	e0c9      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012466:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012468:	69ba      	ldr	r2, [r7, #24]
 801246a:	4b67      	ldr	r3, [pc, #412]	; (8012608 <SDMMC_GetCmdResp1+0x1d8>)
 801246c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801246e:	2b00      	cmp	r3, #0
 8012470:	d0ef      	beq.n	8012452 <SDMMC_GetCmdResp1+0x22>
 8012472:	69bb      	ldr	r3, [r7, #24]
 8012474:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012478:	2b00      	cmp	r3, #0
 801247a:	d1ea      	bne.n	8012452 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012480:	f003 0304 	and.w	r3, r3, #4
 8012484:	2b00      	cmp	r3, #0
 8012486:	d004      	beq.n	8012492 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	2204      	movs	r2, #4
 801248c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801248e:	2304      	movs	r3, #4
 8012490:	e0b1      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012496:	f003 0301 	and.w	r3, r3, #1
 801249a:	2b00      	cmp	r3, #0
 801249c:	d004      	beq.n	80124a8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	2201      	movs	r2, #1
 80124a2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80124a4:	2301      	movs	r3, #1
 80124a6:	e0a6      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80124a8:	68fb      	ldr	r3, [r7, #12]
 80124aa:	4a58      	ldr	r2, [pc, #352]	; (801260c <SDMMC_GetCmdResp1+0x1dc>)
 80124ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80124ae:	68f8      	ldr	r0, [r7, #12]
 80124b0:	f7ff fcf6 	bl	8011ea0 <SDMMC_GetCommandResponse>
 80124b4:	4603      	mov	r3, r0
 80124b6:	461a      	mov	r2, r3
 80124b8:	7afb      	ldrb	r3, [r7, #11]
 80124ba:	4293      	cmp	r3, r2
 80124bc:	d001      	beq.n	80124c2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80124be:	2301      	movs	r3, #1
 80124c0:	e099      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80124c2:	2100      	movs	r1, #0
 80124c4:	68f8      	ldr	r0, [r7, #12]
 80124c6:	f7ff fcf8 	bl	8011eba <SDMMC_GetResponse>
 80124ca:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80124cc:	697a      	ldr	r2, [r7, #20]
 80124ce:	4b50      	ldr	r3, [pc, #320]	; (8012610 <SDMMC_GetCmdResp1+0x1e0>)
 80124d0:	4013      	ands	r3, r2
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d101      	bne.n	80124da <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80124d6:	2300      	movs	r3, #0
 80124d8:	e08d      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	da02      	bge.n	80124e6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80124e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80124e4:	e087      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80124e6:	697b      	ldr	r3, [r7, #20]
 80124e8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d001      	beq.n	80124f4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80124f0:	2340      	movs	r3, #64	; 0x40
 80124f2:	e080      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80124f4:	697b      	ldr	r3, [r7, #20]
 80124f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d001      	beq.n	8012502 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80124fe:	2380      	movs	r3, #128	; 0x80
 8012500:	e079      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012508:	2b00      	cmp	r3, #0
 801250a:	d002      	beq.n	8012512 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801250c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012510:	e071      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012512:	697b      	ldr	r3, [r7, #20]
 8012514:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012518:	2b00      	cmp	r3, #0
 801251a:	d002      	beq.n	8012522 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801251c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012520:	e069      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012522:	697b      	ldr	r3, [r7, #20]
 8012524:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012528:	2b00      	cmp	r3, #0
 801252a:	d002      	beq.n	8012532 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801252c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012530:	e061      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012532:	697b      	ldr	r3, [r7, #20]
 8012534:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012538:	2b00      	cmp	r3, #0
 801253a:	d002      	beq.n	8012542 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801253c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012540:	e059      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012542:	697b      	ldr	r3, [r7, #20]
 8012544:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012548:	2b00      	cmp	r3, #0
 801254a:	d002      	beq.n	8012552 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801254c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012550:	e051      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012558:	2b00      	cmp	r3, #0
 801255a:	d002      	beq.n	8012562 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801255c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012560:	e049      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012562:	697b      	ldr	r3, [r7, #20]
 8012564:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012568:	2b00      	cmp	r3, #0
 801256a:	d002      	beq.n	8012572 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801256c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012570:	e041      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012572:	697b      	ldr	r3, [r7, #20]
 8012574:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012578:	2b00      	cmp	r3, #0
 801257a:	d002      	beq.n	8012582 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801257c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012580:	e039      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012582:	697b      	ldr	r3, [r7, #20]
 8012584:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012588:	2b00      	cmp	r3, #0
 801258a:	d002      	beq.n	8012592 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801258c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012590:	e031      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012598:	2b00      	cmp	r3, #0
 801259a:	d002      	beq.n	80125a2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801259c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80125a0:	e029      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d002      	beq.n	80125b2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80125ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80125b0:	e021      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d002      	beq.n	80125c2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80125bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80125c0:	e019      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80125c2:	697b      	ldr	r3, [r7, #20]
 80125c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d002      	beq.n	80125d2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80125cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80125d0:	e011      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80125d2:	697b      	ldr	r3, [r7, #20]
 80125d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d002      	beq.n	80125e2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80125dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80125e0:	e009      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80125e2:	697b      	ldr	r3, [r7, #20]
 80125e4:	f003 0308 	and.w	r3, r3, #8
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d002      	beq.n	80125f2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80125ec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80125f0:	e001      	b.n	80125f6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80125f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80125f6:	4618      	mov	r0, r3
 80125f8:	3720      	adds	r7, #32
 80125fa:	46bd      	mov	sp, r7
 80125fc:	bd80      	pop	{r7, pc}
 80125fe:	bf00      	nop
 8012600:	24000000 	.word	0x24000000
 8012604:	10624dd3 	.word	0x10624dd3
 8012608:	00200045 	.word	0x00200045
 801260c:	002000c5 	.word	0x002000c5
 8012610:	fdffe008 	.word	0xfdffe008

08012614 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012614:	b480      	push	{r7}
 8012616:	b085      	sub	sp, #20
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801261c:	4b1f      	ldr	r3, [pc, #124]	; (801269c <SDMMC_GetCmdResp2+0x88>)
 801261e:	681b      	ldr	r3, [r3, #0]
 8012620:	4a1f      	ldr	r2, [pc, #124]	; (80126a0 <SDMMC_GetCmdResp2+0x8c>)
 8012622:	fba2 2303 	umull	r2, r3, r2, r3
 8012626:	0a5b      	lsrs	r3, r3, #9
 8012628:	f241 3288 	movw	r2, #5000	; 0x1388
 801262c:	fb02 f303 	mul.w	r3, r2, r3
 8012630:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	1e5a      	subs	r2, r3, #1
 8012636:	60fa      	str	r2, [r7, #12]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d102      	bne.n	8012642 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801263c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012640:	e026      	b.n	8012690 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012646:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012648:	68bb      	ldr	r3, [r7, #8]
 801264a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 801264e:	2b00      	cmp	r3, #0
 8012650:	d0ef      	beq.n	8012632 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012652:	68bb      	ldr	r3, [r7, #8]
 8012654:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012658:	2b00      	cmp	r3, #0
 801265a:	d1ea      	bne.n	8012632 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012660:	f003 0304 	and.w	r3, r3, #4
 8012664:	2b00      	cmp	r3, #0
 8012666:	d004      	beq.n	8012672 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	2204      	movs	r2, #4
 801266c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801266e:	2304      	movs	r3, #4
 8012670:	e00e      	b.n	8012690 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012676:	f003 0301 	and.w	r3, r3, #1
 801267a:	2b00      	cmp	r3, #0
 801267c:	d004      	beq.n	8012688 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	2201      	movs	r2, #1
 8012682:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012684:	2301      	movs	r3, #1
 8012686:	e003      	b.n	8012690 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	4a06      	ldr	r2, [pc, #24]	; (80126a4 <SDMMC_GetCmdResp2+0x90>)
 801268c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801268e:	2300      	movs	r3, #0
}
 8012690:	4618      	mov	r0, r3
 8012692:	3714      	adds	r7, #20
 8012694:	46bd      	mov	sp, r7
 8012696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801269a:	4770      	bx	lr
 801269c:	24000000 	.word	0x24000000
 80126a0:	10624dd3 	.word	0x10624dd3
 80126a4:	002000c5 	.word	0x002000c5

080126a8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80126a8:	b480      	push	{r7}
 80126aa:	b085      	sub	sp, #20
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80126b0:	4b1a      	ldr	r3, [pc, #104]	; (801271c <SDMMC_GetCmdResp3+0x74>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	4a1a      	ldr	r2, [pc, #104]	; (8012720 <SDMMC_GetCmdResp3+0x78>)
 80126b6:	fba2 2303 	umull	r2, r3, r2, r3
 80126ba:	0a5b      	lsrs	r3, r3, #9
 80126bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80126c0:	fb02 f303 	mul.w	r3, r2, r3
 80126c4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	1e5a      	subs	r2, r3, #1
 80126ca:	60fa      	str	r2, [r7, #12]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d102      	bne.n	80126d6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80126d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80126d4:	e01b      	b.n	801270e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126da:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80126dc:	68bb      	ldr	r3, [r7, #8]
 80126de:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d0ef      	beq.n	80126c6 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80126e6:	68bb      	ldr	r3, [r7, #8]
 80126e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d1ea      	bne.n	80126c6 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126f4:	f003 0304 	and.w	r3, r3, #4
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d004      	beq.n	8012706 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	2204      	movs	r2, #4
 8012700:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012702:	2304      	movs	r3, #4
 8012704:	e003      	b.n	801270e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	4a06      	ldr	r2, [pc, #24]	; (8012724 <SDMMC_GetCmdResp3+0x7c>)
 801270a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801270c:	2300      	movs	r3, #0
}
 801270e:	4618      	mov	r0, r3
 8012710:	3714      	adds	r7, #20
 8012712:	46bd      	mov	sp, r7
 8012714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012718:	4770      	bx	lr
 801271a:	bf00      	nop
 801271c:	24000000 	.word	0x24000000
 8012720:	10624dd3 	.word	0x10624dd3
 8012724:	002000c5 	.word	0x002000c5

08012728 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b088      	sub	sp, #32
 801272c:	af00      	add	r7, sp, #0
 801272e:	60f8      	str	r0, [r7, #12]
 8012730:	460b      	mov	r3, r1
 8012732:	607a      	str	r2, [r7, #4]
 8012734:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012736:	4b35      	ldr	r3, [pc, #212]	; (801280c <SDMMC_GetCmdResp6+0xe4>)
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	4a35      	ldr	r2, [pc, #212]	; (8012810 <SDMMC_GetCmdResp6+0xe8>)
 801273c:	fba2 2303 	umull	r2, r3, r2, r3
 8012740:	0a5b      	lsrs	r3, r3, #9
 8012742:	f241 3288 	movw	r2, #5000	; 0x1388
 8012746:	fb02 f303 	mul.w	r3, r2, r3
 801274a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801274c:	69fb      	ldr	r3, [r7, #28]
 801274e:	1e5a      	subs	r2, r3, #1
 8012750:	61fa      	str	r2, [r7, #28]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d102      	bne.n	801275c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012756:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801275a:	e052      	b.n	8012802 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012760:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012762:	69bb      	ldr	r3, [r7, #24]
 8012764:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012768:	2b00      	cmp	r3, #0
 801276a:	d0ef      	beq.n	801274c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801276c:	69bb      	ldr	r3, [r7, #24]
 801276e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012772:	2b00      	cmp	r3, #0
 8012774:	d1ea      	bne.n	801274c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801277a:	f003 0304 	and.w	r3, r3, #4
 801277e:	2b00      	cmp	r3, #0
 8012780:	d004      	beq.n	801278c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	2204      	movs	r2, #4
 8012786:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012788:	2304      	movs	r3, #4
 801278a:	e03a      	b.n	8012802 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012790:	f003 0301 	and.w	r3, r3, #1
 8012794:	2b00      	cmp	r3, #0
 8012796:	d004      	beq.n	80127a2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	2201      	movs	r2, #1
 801279c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 801279e:	2301      	movs	r3, #1
 80127a0:	e02f      	b.n	8012802 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80127a2:	68f8      	ldr	r0, [r7, #12]
 80127a4:	f7ff fb7c 	bl	8011ea0 <SDMMC_GetCommandResponse>
 80127a8:	4603      	mov	r3, r0
 80127aa:	461a      	mov	r2, r3
 80127ac:	7afb      	ldrb	r3, [r7, #11]
 80127ae:	4293      	cmp	r3, r2
 80127b0:	d001      	beq.n	80127b6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80127b2:	2301      	movs	r3, #1
 80127b4:	e025      	b.n	8012802 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	4a16      	ldr	r2, [pc, #88]	; (8012814 <SDMMC_GetCmdResp6+0xec>)
 80127ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80127bc:	2100      	movs	r1, #0
 80127be:	68f8      	ldr	r0, [r7, #12]
 80127c0:	f7ff fb7b 	bl	8011eba <SDMMC_GetResponse>
 80127c4:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80127c6:	697b      	ldr	r3, [r7, #20]
 80127c8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d106      	bne.n	80127de <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	0c1b      	lsrs	r3, r3, #16
 80127d4:	b29a      	uxth	r2, r3
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80127da:	2300      	movs	r3, #0
 80127dc:	e011      	b.n	8012802 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d002      	beq.n	80127ee <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80127e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80127ec:	e009      	b.n	8012802 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80127ee:	697b      	ldr	r3, [r7, #20]
 80127f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d002      	beq.n	80127fe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80127f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80127fc:	e001      	b.n	8012802 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80127fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012802:	4618      	mov	r0, r3
 8012804:	3720      	adds	r7, #32
 8012806:	46bd      	mov	sp, r7
 8012808:	bd80      	pop	{r7, pc}
 801280a:	bf00      	nop
 801280c:	24000000 	.word	0x24000000
 8012810:	10624dd3 	.word	0x10624dd3
 8012814:	002000c5 	.word	0x002000c5

08012818 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012818:	b480      	push	{r7}
 801281a:	b085      	sub	sp, #20
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012820:	4b22      	ldr	r3, [pc, #136]	; (80128ac <SDMMC_GetCmdResp7+0x94>)
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	4a22      	ldr	r2, [pc, #136]	; (80128b0 <SDMMC_GetCmdResp7+0x98>)
 8012826:	fba2 2303 	umull	r2, r3, r2, r3
 801282a:	0a5b      	lsrs	r3, r3, #9
 801282c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012830:	fb02 f303 	mul.w	r3, r2, r3
 8012834:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012836:	68fb      	ldr	r3, [r7, #12]
 8012838:	1e5a      	subs	r2, r3, #1
 801283a:	60fa      	str	r2, [r7, #12]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d102      	bne.n	8012846 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012840:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012844:	e02c      	b.n	80128a0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012846:	687b      	ldr	r3, [r7, #4]
 8012848:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801284a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801284c:	68bb      	ldr	r3, [r7, #8]
 801284e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012852:	2b00      	cmp	r3, #0
 8012854:	d0ef      	beq.n	8012836 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012856:	68bb      	ldr	r3, [r7, #8]
 8012858:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801285c:	2b00      	cmp	r3, #0
 801285e:	d1ea      	bne.n	8012836 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012864:	f003 0304 	and.w	r3, r3, #4
 8012868:	2b00      	cmp	r3, #0
 801286a:	d004      	beq.n	8012876 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	2204      	movs	r2, #4
 8012870:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012872:	2304      	movs	r3, #4
 8012874:	e014      	b.n	80128a0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801287a:	f003 0301 	and.w	r3, r3, #1
 801287e:	2b00      	cmp	r3, #0
 8012880:	d004      	beq.n	801288c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2201      	movs	r2, #1
 8012886:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012888:	2301      	movs	r3, #1
 801288a:	e009      	b.n	80128a0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012890:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012894:	2b00      	cmp	r3, #0
 8012896:	d002      	beq.n	801289e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	2240      	movs	r2, #64	; 0x40
 801289c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801289e:	2300      	movs	r3, #0

}
 80128a0:	4618      	mov	r0, r3
 80128a2:	3714      	adds	r7, #20
 80128a4:	46bd      	mov	sp, r7
 80128a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128aa:	4770      	bx	lr
 80128ac:	24000000 	.word	0x24000000
 80128b0:	10624dd3 	.word	0x10624dd3

080128b4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 80128b4:	b480      	push	{r7}
 80128b6:	b085      	sub	sp, #20
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80128bc:	4b11      	ldr	r3, [pc, #68]	; (8012904 <SDMMC_GetCmdError+0x50>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	4a11      	ldr	r2, [pc, #68]	; (8012908 <SDMMC_GetCmdError+0x54>)
 80128c2:	fba2 2303 	umull	r2, r3, r2, r3
 80128c6:	0a5b      	lsrs	r3, r3, #9
 80128c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80128cc:	fb02 f303 	mul.w	r3, r2, r3
 80128d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	1e5a      	subs	r2, r3, #1
 80128d6:	60fa      	str	r2, [r7, #12]
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d102      	bne.n	80128e2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80128dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80128e0:	e009      	b.n	80128f6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80128e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d0f1      	beq.n	80128d2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	4a06      	ldr	r2, [pc, #24]	; (801290c <SDMMC_GetCmdError+0x58>)
 80128f2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80128f4:	2300      	movs	r3, #0
}
 80128f6:	4618      	mov	r0, r3
 80128f8:	3714      	adds	r7, #20
 80128fa:	46bd      	mov	sp, r7
 80128fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012900:	4770      	bx	lr
 8012902:	bf00      	nop
 8012904:	24000000 	.word	0x24000000
 8012908:	10624dd3 	.word	0x10624dd3
 801290c:	002000c5 	.word	0x002000c5

08012910 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012910:	b084      	sub	sp, #16
 8012912:	b580      	push	{r7, lr}
 8012914:	b084      	sub	sp, #16
 8012916:	af00      	add	r7, sp, #0
 8012918:	6078      	str	r0, [r7, #4]
 801291a:	f107 001c 	add.w	r0, r7, #28
 801291e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012924:	2b01      	cmp	r3, #1
 8012926:	d120      	bne.n	801296a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801292c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	68da      	ldr	r2, [r3, #12]
 8012938:	4b2a      	ldr	r3, [pc, #168]	; (80129e4 <USB_CoreInit+0xd4>)
 801293a:	4013      	ands	r3, r2
 801293c:	687a      	ldr	r2, [r7, #4]
 801293e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	68db      	ldr	r3, [r3, #12]
 8012944:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801294c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801294e:	2b01      	cmp	r3, #1
 8012950:	d105      	bne.n	801295e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	68db      	ldr	r3, [r3, #12]
 8012956:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801295e:	6878      	ldr	r0, [r7, #4]
 8012960:	f001 faf8 	bl	8013f54 <USB_CoreReset>
 8012964:	4603      	mov	r3, r0
 8012966:	73fb      	strb	r3, [r7, #15]
 8012968:	e01a      	b.n	80129a0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	68db      	ldr	r3, [r3, #12]
 801296e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8012976:	6878      	ldr	r0, [r7, #4]
 8012978:	f001 faec 	bl	8013f54 <USB_CoreReset>
 801297c:	4603      	mov	r3, r0
 801297e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012982:	2b00      	cmp	r3, #0
 8012984:	d106      	bne.n	8012994 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801298a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	639a      	str	r2, [r3, #56]	; 0x38
 8012992:	e005      	b.n	80129a0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012998:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80129a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a2:	2b01      	cmp	r3, #1
 80129a4:	d116      	bne.n	80129d4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80129aa:	b29a      	uxth	r2, r3
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80129b4:	4b0c      	ldr	r3, [pc, #48]	; (80129e8 <USB_CoreInit+0xd8>)
 80129b6:	4313      	orrs	r3, r2
 80129b8:	687a      	ldr	r2, [r7, #4]
 80129ba:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	689b      	ldr	r3, [r3, #8]
 80129c0:	f043 0206 	orr.w	r2, r3, #6
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	689b      	ldr	r3, [r3, #8]
 80129cc:	f043 0220 	orr.w	r2, r3, #32
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80129d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80129d6:	4618      	mov	r0, r3
 80129d8:	3710      	adds	r7, #16
 80129da:	46bd      	mov	sp, r7
 80129dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80129e0:	b004      	add	sp, #16
 80129e2:	4770      	bx	lr
 80129e4:	ffbdffbf 	.word	0xffbdffbf
 80129e8:	03ee0000 	.word	0x03ee0000

080129ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80129ec:	b480      	push	{r7}
 80129ee:	b087      	sub	sp, #28
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	60f8      	str	r0, [r7, #12]
 80129f4:	60b9      	str	r1, [r7, #8]
 80129f6:	4613      	mov	r3, r2
 80129f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80129fa:	79fb      	ldrb	r3, [r7, #7]
 80129fc:	2b02      	cmp	r3, #2
 80129fe:	d165      	bne.n	8012acc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8012a00:	68bb      	ldr	r3, [r7, #8]
 8012a02:	4a41      	ldr	r2, [pc, #260]	; (8012b08 <USB_SetTurnaroundTime+0x11c>)
 8012a04:	4293      	cmp	r3, r2
 8012a06:	d906      	bls.n	8012a16 <USB_SetTurnaroundTime+0x2a>
 8012a08:	68bb      	ldr	r3, [r7, #8]
 8012a0a:	4a40      	ldr	r2, [pc, #256]	; (8012b0c <USB_SetTurnaroundTime+0x120>)
 8012a0c:	4293      	cmp	r3, r2
 8012a0e:	d202      	bcs.n	8012a16 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8012a10:	230f      	movs	r3, #15
 8012a12:	617b      	str	r3, [r7, #20]
 8012a14:	e062      	b.n	8012adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8012a16:	68bb      	ldr	r3, [r7, #8]
 8012a18:	4a3c      	ldr	r2, [pc, #240]	; (8012b0c <USB_SetTurnaroundTime+0x120>)
 8012a1a:	4293      	cmp	r3, r2
 8012a1c:	d306      	bcc.n	8012a2c <USB_SetTurnaroundTime+0x40>
 8012a1e:	68bb      	ldr	r3, [r7, #8]
 8012a20:	4a3b      	ldr	r2, [pc, #236]	; (8012b10 <USB_SetTurnaroundTime+0x124>)
 8012a22:	4293      	cmp	r3, r2
 8012a24:	d202      	bcs.n	8012a2c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8012a26:	230e      	movs	r3, #14
 8012a28:	617b      	str	r3, [r7, #20]
 8012a2a:	e057      	b.n	8012adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	4a38      	ldr	r2, [pc, #224]	; (8012b10 <USB_SetTurnaroundTime+0x124>)
 8012a30:	4293      	cmp	r3, r2
 8012a32:	d306      	bcc.n	8012a42 <USB_SetTurnaroundTime+0x56>
 8012a34:	68bb      	ldr	r3, [r7, #8]
 8012a36:	4a37      	ldr	r2, [pc, #220]	; (8012b14 <USB_SetTurnaroundTime+0x128>)
 8012a38:	4293      	cmp	r3, r2
 8012a3a:	d202      	bcs.n	8012a42 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8012a3c:	230d      	movs	r3, #13
 8012a3e:	617b      	str	r3, [r7, #20]
 8012a40:	e04c      	b.n	8012adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8012a42:	68bb      	ldr	r3, [r7, #8]
 8012a44:	4a33      	ldr	r2, [pc, #204]	; (8012b14 <USB_SetTurnaroundTime+0x128>)
 8012a46:	4293      	cmp	r3, r2
 8012a48:	d306      	bcc.n	8012a58 <USB_SetTurnaroundTime+0x6c>
 8012a4a:	68bb      	ldr	r3, [r7, #8]
 8012a4c:	4a32      	ldr	r2, [pc, #200]	; (8012b18 <USB_SetTurnaroundTime+0x12c>)
 8012a4e:	4293      	cmp	r3, r2
 8012a50:	d802      	bhi.n	8012a58 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8012a52:	230c      	movs	r3, #12
 8012a54:	617b      	str	r3, [r7, #20]
 8012a56:	e041      	b.n	8012adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012a58:	68bb      	ldr	r3, [r7, #8]
 8012a5a:	4a2f      	ldr	r2, [pc, #188]	; (8012b18 <USB_SetTurnaroundTime+0x12c>)
 8012a5c:	4293      	cmp	r3, r2
 8012a5e:	d906      	bls.n	8012a6e <USB_SetTurnaroundTime+0x82>
 8012a60:	68bb      	ldr	r3, [r7, #8]
 8012a62:	4a2e      	ldr	r2, [pc, #184]	; (8012b1c <USB_SetTurnaroundTime+0x130>)
 8012a64:	4293      	cmp	r3, r2
 8012a66:	d802      	bhi.n	8012a6e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012a68:	230b      	movs	r3, #11
 8012a6a:	617b      	str	r3, [r7, #20]
 8012a6c:	e036      	b.n	8012adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8012a6e:	68bb      	ldr	r3, [r7, #8]
 8012a70:	4a2a      	ldr	r2, [pc, #168]	; (8012b1c <USB_SetTurnaroundTime+0x130>)
 8012a72:	4293      	cmp	r3, r2
 8012a74:	d906      	bls.n	8012a84 <USB_SetTurnaroundTime+0x98>
 8012a76:	68bb      	ldr	r3, [r7, #8]
 8012a78:	4a29      	ldr	r2, [pc, #164]	; (8012b20 <USB_SetTurnaroundTime+0x134>)
 8012a7a:	4293      	cmp	r3, r2
 8012a7c:	d802      	bhi.n	8012a84 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8012a7e:	230a      	movs	r3, #10
 8012a80:	617b      	str	r3, [r7, #20]
 8012a82:	e02b      	b.n	8012adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012a84:	68bb      	ldr	r3, [r7, #8]
 8012a86:	4a26      	ldr	r2, [pc, #152]	; (8012b20 <USB_SetTurnaroundTime+0x134>)
 8012a88:	4293      	cmp	r3, r2
 8012a8a:	d906      	bls.n	8012a9a <USB_SetTurnaroundTime+0xae>
 8012a8c:	68bb      	ldr	r3, [r7, #8]
 8012a8e:	4a25      	ldr	r2, [pc, #148]	; (8012b24 <USB_SetTurnaroundTime+0x138>)
 8012a90:	4293      	cmp	r3, r2
 8012a92:	d202      	bcs.n	8012a9a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012a94:	2309      	movs	r3, #9
 8012a96:	617b      	str	r3, [r7, #20]
 8012a98:	e020      	b.n	8012adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012a9a:	68bb      	ldr	r3, [r7, #8]
 8012a9c:	4a21      	ldr	r2, [pc, #132]	; (8012b24 <USB_SetTurnaroundTime+0x138>)
 8012a9e:	4293      	cmp	r3, r2
 8012aa0:	d306      	bcc.n	8012ab0 <USB_SetTurnaroundTime+0xc4>
 8012aa2:	68bb      	ldr	r3, [r7, #8]
 8012aa4:	4a20      	ldr	r2, [pc, #128]	; (8012b28 <USB_SetTurnaroundTime+0x13c>)
 8012aa6:	4293      	cmp	r3, r2
 8012aa8:	d802      	bhi.n	8012ab0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012aaa:	2308      	movs	r3, #8
 8012aac:	617b      	str	r3, [r7, #20]
 8012aae:	e015      	b.n	8012adc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	4a1d      	ldr	r2, [pc, #116]	; (8012b28 <USB_SetTurnaroundTime+0x13c>)
 8012ab4:	4293      	cmp	r3, r2
 8012ab6:	d906      	bls.n	8012ac6 <USB_SetTurnaroundTime+0xda>
 8012ab8:	68bb      	ldr	r3, [r7, #8]
 8012aba:	4a1c      	ldr	r2, [pc, #112]	; (8012b2c <USB_SetTurnaroundTime+0x140>)
 8012abc:	4293      	cmp	r3, r2
 8012abe:	d202      	bcs.n	8012ac6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8012ac0:	2307      	movs	r3, #7
 8012ac2:	617b      	str	r3, [r7, #20]
 8012ac4:	e00a      	b.n	8012adc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012ac6:	2306      	movs	r3, #6
 8012ac8:	617b      	str	r3, [r7, #20]
 8012aca:	e007      	b.n	8012adc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012acc:	79fb      	ldrb	r3, [r7, #7]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d102      	bne.n	8012ad8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8012ad2:	2309      	movs	r3, #9
 8012ad4:	617b      	str	r3, [r7, #20]
 8012ad6:	e001      	b.n	8012adc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012ad8:	2309      	movs	r3, #9
 8012ada:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	68db      	ldr	r3, [r3, #12]
 8012ae0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8012ae4:	68fb      	ldr	r3, [r7, #12]
 8012ae6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	68da      	ldr	r2, [r3, #12]
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	029b      	lsls	r3, r3, #10
 8012af0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8012af4:	431a      	orrs	r2, r3
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8012afa:	2300      	movs	r3, #0
}
 8012afc:	4618      	mov	r0, r3
 8012afe:	371c      	adds	r7, #28
 8012b00:	46bd      	mov	sp, r7
 8012b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b06:	4770      	bx	lr
 8012b08:	00d8acbf 	.word	0x00d8acbf
 8012b0c:	00e4e1c0 	.word	0x00e4e1c0
 8012b10:	00f42400 	.word	0x00f42400
 8012b14:	01067380 	.word	0x01067380
 8012b18:	011a499f 	.word	0x011a499f
 8012b1c:	01312cff 	.word	0x01312cff
 8012b20:	014ca43f 	.word	0x014ca43f
 8012b24:	016e3600 	.word	0x016e3600
 8012b28:	01a6ab1f 	.word	0x01a6ab1f
 8012b2c:	01e84800 	.word	0x01e84800

08012b30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012b30:	b480      	push	{r7}
 8012b32:	b083      	sub	sp, #12
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	689b      	ldr	r3, [r3, #8]
 8012b3c:	f043 0201 	orr.w	r2, r3, #1
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012b44:	2300      	movs	r3, #0
}
 8012b46:	4618      	mov	r0, r3
 8012b48:	370c      	adds	r7, #12
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b50:	4770      	bx	lr

08012b52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8012b52:	b480      	push	{r7}
 8012b54:	b083      	sub	sp, #12
 8012b56:	af00      	add	r7, sp, #0
 8012b58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	689b      	ldr	r3, [r3, #8]
 8012b5e:	f023 0201 	bic.w	r2, r3, #1
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012b66:	2300      	movs	r3, #0
}
 8012b68:	4618      	mov	r0, r3
 8012b6a:	370c      	adds	r7, #12
 8012b6c:	46bd      	mov	sp, r7
 8012b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b72:	4770      	bx	lr

08012b74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012b74:	b580      	push	{r7, lr}
 8012b76:	b084      	sub	sp, #16
 8012b78:	af00      	add	r7, sp, #0
 8012b7a:	6078      	str	r0, [r7, #4]
 8012b7c:	460b      	mov	r3, r1
 8012b7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8012b80:	2300      	movs	r3, #0
 8012b82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	68db      	ldr	r3, [r3, #12]
 8012b88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012b90:	78fb      	ldrb	r3, [r7, #3]
 8012b92:	2b01      	cmp	r3, #1
 8012b94:	d115      	bne.n	8012bc2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	68db      	ldr	r3, [r3, #12]
 8012b9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012ba2:	2001      	movs	r0, #1
 8012ba4:	f7f0 ff18 	bl	80039d8 <HAL_Delay>
      ms++;
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	3301      	adds	r3, #1
 8012bac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	f001 f93f 	bl	8013e32 <USB_GetMode>
 8012bb4:	4603      	mov	r3, r0
 8012bb6:	2b01      	cmp	r3, #1
 8012bb8:	d01e      	beq.n	8012bf8 <USB_SetCurrentMode+0x84>
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	2b31      	cmp	r3, #49	; 0x31
 8012bbe:	d9f0      	bls.n	8012ba2 <USB_SetCurrentMode+0x2e>
 8012bc0:	e01a      	b.n	8012bf8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8012bc2:	78fb      	ldrb	r3, [r7, #3]
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d115      	bne.n	8012bf4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	68db      	ldr	r3, [r3, #12]
 8012bcc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8012bd4:	2001      	movs	r0, #1
 8012bd6:	f7f0 feff 	bl	80039d8 <HAL_Delay>
      ms++;
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	3301      	adds	r3, #1
 8012bde:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8012be0:	6878      	ldr	r0, [r7, #4]
 8012be2:	f001 f926 	bl	8013e32 <USB_GetMode>
 8012be6:	4603      	mov	r3, r0
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d005      	beq.n	8012bf8 <USB_SetCurrentMode+0x84>
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	2b31      	cmp	r3, #49	; 0x31
 8012bf0:	d9f0      	bls.n	8012bd4 <USB_SetCurrentMode+0x60>
 8012bf2:	e001      	b.n	8012bf8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8012bf4:	2301      	movs	r3, #1
 8012bf6:	e005      	b.n	8012c04 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	2b32      	cmp	r3, #50	; 0x32
 8012bfc:	d101      	bne.n	8012c02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8012bfe:	2301      	movs	r3, #1
 8012c00:	e000      	b.n	8012c04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8012c02:	2300      	movs	r3, #0
}
 8012c04:	4618      	mov	r0, r3
 8012c06:	3710      	adds	r7, #16
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	bd80      	pop	{r7, pc}

08012c0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012c0c:	b084      	sub	sp, #16
 8012c0e:	b580      	push	{r7, lr}
 8012c10:	b086      	sub	sp, #24
 8012c12:	af00      	add	r7, sp, #0
 8012c14:	6078      	str	r0, [r7, #4]
 8012c16:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012c1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012c1e:	2300      	movs	r3, #0
 8012c20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8012c26:	2300      	movs	r3, #0
 8012c28:	613b      	str	r3, [r7, #16]
 8012c2a:	e009      	b.n	8012c40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8012c2c:	687a      	ldr	r2, [r7, #4]
 8012c2e:	693b      	ldr	r3, [r7, #16]
 8012c30:	3340      	adds	r3, #64	; 0x40
 8012c32:	009b      	lsls	r3, r3, #2
 8012c34:	4413      	add	r3, r2
 8012c36:	2200      	movs	r2, #0
 8012c38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8012c3a:	693b      	ldr	r3, [r7, #16]
 8012c3c:	3301      	adds	r3, #1
 8012c3e:	613b      	str	r3, [r7, #16]
 8012c40:	693b      	ldr	r3, [r7, #16]
 8012c42:	2b0e      	cmp	r3, #14
 8012c44:	d9f2      	bls.n	8012c2c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8012c46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	d11c      	bne.n	8012c86 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c52:	685b      	ldr	r3, [r3, #4]
 8012c54:	68fa      	ldr	r2, [r7, #12]
 8012c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012c5a:	f043 0302 	orr.w	r3, r3, #2
 8012c5e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8012c60:	687b      	ldr	r3, [r7, #4]
 8012c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c64:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	601a      	str	r2, [r3, #0]
 8012c84:	e005      	b.n	8012c92 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c8a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8012c92:	68fb      	ldr	r3, [r7, #12]
 8012c94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012c98:	461a      	mov	r2, r3
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012c9e:	68fb      	ldr	r3, [r7, #12]
 8012ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ca4:	4619      	mov	r1, r3
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012cac:	461a      	mov	r2, r3
 8012cae:	680b      	ldr	r3, [r1, #0]
 8012cb0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8012cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012cb4:	2b01      	cmp	r3, #1
 8012cb6:	d10c      	bne.n	8012cd2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d104      	bne.n	8012cc8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012cbe:	2100      	movs	r1, #0
 8012cc0:	6878      	ldr	r0, [r7, #4]
 8012cc2:	f000 f965 	bl	8012f90 <USB_SetDevSpeed>
 8012cc6:	e008      	b.n	8012cda <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012cc8:	2101      	movs	r1, #1
 8012cca:	6878      	ldr	r0, [r7, #4]
 8012ccc:	f000 f960 	bl	8012f90 <USB_SetDevSpeed>
 8012cd0:	e003      	b.n	8012cda <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8012cd2:	2103      	movs	r1, #3
 8012cd4:	6878      	ldr	r0, [r7, #4]
 8012cd6:	f000 f95b 	bl	8012f90 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012cda:	2110      	movs	r1, #16
 8012cdc:	6878      	ldr	r0, [r7, #4]
 8012cde:	f000 f8f3 	bl	8012ec8 <USB_FlushTxFifo>
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d001      	beq.n	8012cec <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012ce8:	2301      	movs	r3, #1
 8012cea:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012cec:	6878      	ldr	r0, [r7, #4]
 8012cee:	f000 f91f 	bl	8012f30 <USB_FlushRxFifo>
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d001      	beq.n	8012cfc <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012cf8:	2301      	movs	r3, #1
 8012cfa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d02:	461a      	mov	r2, r3
 8012d04:	2300      	movs	r3, #0
 8012d06:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d0e:	461a      	mov	r2, r3
 8012d10:	2300      	movs	r3, #0
 8012d12:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012d1a:	461a      	mov	r2, r3
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012d20:	2300      	movs	r3, #0
 8012d22:	613b      	str	r3, [r7, #16]
 8012d24:	e043      	b.n	8012dae <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012d26:	693b      	ldr	r3, [r7, #16]
 8012d28:	015a      	lsls	r2, r3, #5
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	4413      	add	r3, r2
 8012d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012d38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012d3c:	d118      	bne.n	8012d70 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8012d3e:	693b      	ldr	r3, [r7, #16]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d10a      	bne.n	8012d5a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8012d44:	693b      	ldr	r3, [r7, #16]
 8012d46:	015a      	lsls	r2, r3, #5
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	4413      	add	r3, r2
 8012d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d50:	461a      	mov	r2, r3
 8012d52:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012d56:	6013      	str	r3, [r2, #0]
 8012d58:	e013      	b.n	8012d82 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8012d5a:	693b      	ldr	r3, [r7, #16]
 8012d5c:	015a      	lsls	r2, r3, #5
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	4413      	add	r3, r2
 8012d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d66:	461a      	mov	r2, r3
 8012d68:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012d6c:	6013      	str	r3, [r2, #0]
 8012d6e:	e008      	b.n	8012d82 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8012d70:	693b      	ldr	r3, [r7, #16]
 8012d72:	015a      	lsls	r2, r3, #5
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	4413      	add	r3, r2
 8012d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d7c:	461a      	mov	r2, r3
 8012d7e:	2300      	movs	r3, #0
 8012d80:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8012d82:	693b      	ldr	r3, [r7, #16]
 8012d84:	015a      	lsls	r2, r3, #5
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	4413      	add	r3, r2
 8012d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d8e:	461a      	mov	r2, r3
 8012d90:	2300      	movs	r3, #0
 8012d92:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8012d94:	693b      	ldr	r3, [r7, #16]
 8012d96:	015a      	lsls	r2, r3, #5
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	4413      	add	r3, r2
 8012d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012da0:	461a      	mov	r2, r3
 8012da2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012da6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012da8:	693b      	ldr	r3, [r7, #16]
 8012daa:	3301      	adds	r3, #1
 8012dac:	613b      	str	r3, [r7, #16]
 8012dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012db0:	693a      	ldr	r2, [r7, #16]
 8012db2:	429a      	cmp	r2, r3
 8012db4:	d3b7      	bcc.n	8012d26 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012db6:	2300      	movs	r3, #0
 8012db8:	613b      	str	r3, [r7, #16]
 8012dba:	e043      	b.n	8012e44 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012dbc:	693b      	ldr	r3, [r7, #16]
 8012dbe:	015a      	lsls	r2, r3, #5
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	4413      	add	r3, r2
 8012dc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012dd2:	d118      	bne.n	8012e06 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8012dd4:	693b      	ldr	r3, [r7, #16]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d10a      	bne.n	8012df0 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012dda:	693b      	ldr	r3, [r7, #16]
 8012ddc:	015a      	lsls	r2, r3, #5
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	4413      	add	r3, r2
 8012de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012de6:	461a      	mov	r2, r3
 8012de8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012dec:	6013      	str	r3, [r2, #0]
 8012dee:	e013      	b.n	8012e18 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012df0:	693b      	ldr	r3, [r7, #16]
 8012df2:	015a      	lsls	r2, r3, #5
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	4413      	add	r3, r2
 8012df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dfc:	461a      	mov	r2, r3
 8012dfe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8012e02:	6013      	str	r3, [r2, #0]
 8012e04:	e008      	b.n	8012e18 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8012e06:	693b      	ldr	r3, [r7, #16]
 8012e08:	015a      	lsls	r2, r3, #5
 8012e0a:	68fb      	ldr	r3, [r7, #12]
 8012e0c:	4413      	add	r3, r2
 8012e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e12:	461a      	mov	r2, r3
 8012e14:	2300      	movs	r3, #0
 8012e16:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012e18:	693b      	ldr	r3, [r7, #16]
 8012e1a:	015a      	lsls	r2, r3, #5
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	4413      	add	r3, r2
 8012e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e24:	461a      	mov	r2, r3
 8012e26:	2300      	movs	r3, #0
 8012e28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012e2a:	693b      	ldr	r3, [r7, #16]
 8012e2c:	015a      	lsls	r2, r3, #5
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	4413      	add	r3, r2
 8012e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e36:	461a      	mov	r2, r3
 8012e38:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012e3c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012e3e:	693b      	ldr	r3, [r7, #16]
 8012e40:	3301      	adds	r3, #1
 8012e42:	613b      	str	r3, [r7, #16]
 8012e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012e46:	693a      	ldr	r2, [r7, #16]
 8012e48:	429a      	cmp	r2, r3
 8012e4a:	d3b7      	bcc.n	8012dbc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e52:	691b      	ldr	r3, [r3, #16]
 8012e54:	68fa      	ldr	r2, [r7, #12]
 8012e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012e5a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012e5e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	2200      	movs	r2, #0
 8012e64:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012e6c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d105      	bne.n	8012e80 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	699b      	ldr	r3, [r3, #24]
 8012e78:	f043 0210 	orr.w	r2, r3, #16
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	699a      	ldr	r2, [r3, #24]
 8012e84:	4b0e      	ldr	r3, [pc, #56]	; (8012ec0 <USB_DevInit+0x2b4>)
 8012e86:	4313      	orrs	r3, r2
 8012e88:	687a      	ldr	r2, [r7, #4]
 8012e8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012e8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d005      	beq.n	8012e9e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	699b      	ldr	r3, [r3, #24]
 8012e96:	f043 0208 	orr.w	r2, r3, #8
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012ea0:	2b01      	cmp	r3, #1
 8012ea2:	d105      	bne.n	8012eb0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	699a      	ldr	r2, [r3, #24]
 8012ea8:	4b06      	ldr	r3, [pc, #24]	; (8012ec4 <USB_DevInit+0x2b8>)
 8012eaa:	4313      	orrs	r3, r2
 8012eac:	687a      	ldr	r2, [r7, #4]
 8012eae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8012eb2:	4618      	mov	r0, r3
 8012eb4:	3718      	adds	r7, #24
 8012eb6:	46bd      	mov	sp, r7
 8012eb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012ebc:	b004      	add	sp, #16
 8012ebe:	4770      	bx	lr
 8012ec0:	803c3800 	.word	0x803c3800
 8012ec4:	40000004 	.word	0x40000004

08012ec8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012ec8:	b480      	push	{r7}
 8012eca:	b085      	sub	sp, #20
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
 8012ed0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
 8012ed8:	3301      	adds	r3, #1
 8012eda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	4a13      	ldr	r2, [pc, #76]	; (8012f2c <USB_FlushTxFifo+0x64>)
 8012ee0:	4293      	cmp	r3, r2
 8012ee2:	d901      	bls.n	8012ee8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8012ee4:	2303      	movs	r3, #3
 8012ee6:	e01b      	b.n	8012f20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	691b      	ldr	r3, [r3, #16]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	daf2      	bge.n	8012ed6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	019b      	lsls	r3, r3, #6
 8012ef8:	f043 0220 	orr.w	r2, r3, #32
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	3301      	adds	r3, #1
 8012f04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	4a08      	ldr	r2, [pc, #32]	; (8012f2c <USB_FlushTxFifo+0x64>)
 8012f0a:	4293      	cmp	r3, r2
 8012f0c:	d901      	bls.n	8012f12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8012f0e:	2303      	movs	r3, #3
 8012f10:	e006      	b.n	8012f20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	691b      	ldr	r3, [r3, #16]
 8012f16:	f003 0320 	and.w	r3, r3, #32
 8012f1a:	2b20      	cmp	r3, #32
 8012f1c:	d0f0      	beq.n	8012f00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8012f1e:	2300      	movs	r3, #0
}
 8012f20:	4618      	mov	r0, r3
 8012f22:	3714      	adds	r7, #20
 8012f24:	46bd      	mov	sp, r7
 8012f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f2a:	4770      	bx	lr
 8012f2c:	00030d40 	.word	0x00030d40

08012f30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8012f30:	b480      	push	{r7}
 8012f32:	b085      	sub	sp, #20
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	3301      	adds	r3, #1
 8012f40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	4a11      	ldr	r2, [pc, #68]	; (8012f8c <USB_FlushRxFifo+0x5c>)
 8012f46:	4293      	cmp	r3, r2
 8012f48:	d901      	bls.n	8012f4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8012f4a:	2303      	movs	r3, #3
 8012f4c:	e018      	b.n	8012f80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	691b      	ldr	r3, [r3, #16]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	daf2      	bge.n	8012f3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8012f56:	2300      	movs	r3, #0
 8012f58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	2210      	movs	r2, #16
 8012f5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8012f60:	68fb      	ldr	r3, [r7, #12]
 8012f62:	3301      	adds	r3, #1
 8012f64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	4a08      	ldr	r2, [pc, #32]	; (8012f8c <USB_FlushRxFifo+0x5c>)
 8012f6a:	4293      	cmp	r3, r2
 8012f6c:	d901      	bls.n	8012f72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8012f6e:	2303      	movs	r3, #3
 8012f70:	e006      	b.n	8012f80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	691b      	ldr	r3, [r3, #16]
 8012f76:	f003 0310 	and.w	r3, r3, #16
 8012f7a:	2b10      	cmp	r3, #16
 8012f7c:	d0f0      	beq.n	8012f60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8012f7e:	2300      	movs	r3, #0
}
 8012f80:	4618      	mov	r0, r3
 8012f82:	3714      	adds	r7, #20
 8012f84:	46bd      	mov	sp, r7
 8012f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f8a:	4770      	bx	lr
 8012f8c:	00030d40 	.word	0x00030d40

08012f90 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012f90:	b480      	push	{r7}
 8012f92:	b085      	sub	sp, #20
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	460b      	mov	r3, r1
 8012f9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fa6:	681a      	ldr	r2, [r3, #0]
 8012fa8:	78fb      	ldrb	r3, [r7, #3]
 8012faa:	68f9      	ldr	r1, [r7, #12]
 8012fac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012fb0:	4313      	orrs	r3, r2
 8012fb2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012fb4:	2300      	movs	r3, #0
}
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	3714      	adds	r7, #20
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc0:	4770      	bx	lr

08012fc2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012fc2:	b480      	push	{r7}
 8012fc4:	b087      	sub	sp, #28
 8012fc6:	af00      	add	r7, sp, #0
 8012fc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fca:	687b      	ldr	r3, [r7, #4]
 8012fcc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012fce:	693b      	ldr	r3, [r7, #16]
 8012fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fd4:	689b      	ldr	r3, [r3, #8]
 8012fd6:	f003 0306 	and.w	r3, r3, #6
 8012fda:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d102      	bne.n	8012fe8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012fe2:	2300      	movs	r3, #0
 8012fe4:	75fb      	strb	r3, [r7, #23]
 8012fe6:	e00a      	b.n	8012ffe <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	2b02      	cmp	r3, #2
 8012fec:	d002      	beq.n	8012ff4 <USB_GetDevSpeed+0x32>
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	2b06      	cmp	r3, #6
 8012ff2:	d102      	bne.n	8012ffa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012ff4:	2302      	movs	r3, #2
 8012ff6:	75fb      	strb	r3, [r7, #23]
 8012ff8:	e001      	b.n	8012ffe <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012ffa:	230f      	movs	r3, #15
 8012ffc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8013000:	4618      	mov	r0, r3
 8013002:	371c      	adds	r7, #28
 8013004:	46bd      	mov	sp, r7
 8013006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801300a:	4770      	bx	lr

0801300c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801300c:	b480      	push	{r7}
 801300e:	b085      	sub	sp, #20
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
 8013014:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801301a:	683b      	ldr	r3, [r7, #0]
 801301c:	781b      	ldrb	r3, [r3, #0]
 801301e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013020:	683b      	ldr	r3, [r7, #0]
 8013022:	785b      	ldrb	r3, [r3, #1]
 8013024:	2b01      	cmp	r3, #1
 8013026:	d139      	bne.n	801309c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801302e:	69da      	ldr	r2, [r3, #28]
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	781b      	ldrb	r3, [r3, #0]
 8013034:	f003 030f 	and.w	r3, r3, #15
 8013038:	2101      	movs	r1, #1
 801303a:	fa01 f303 	lsl.w	r3, r1, r3
 801303e:	b29b      	uxth	r3, r3
 8013040:	68f9      	ldr	r1, [r7, #12]
 8013042:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013046:	4313      	orrs	r3, r2
 8013048:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801304a:	68bb      	ldr	r3, [r7, #8]
 801304c:	015a      	lsls	r2, r3, #5
 801304e:	68fb      	ldr	r3, [r7, #12]
 8013050:	4413      	add	r3, r2
 8013052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801305c:	2b00      	cmp	r3, #0
 801305e:	d153      	bne.n	8013108 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013060:	68bb      	ldr	r3, [r7, #8]
 8013062:	015a      	lsls	r2, r3, #5
 8013064:	68fb      	ldr	r3, [r7, #12]
 8013066:	4413      	add	r3, r2
 8013068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801306c:	681a      	ldr	r2, [r3, #0]
 801306e:	683b      	ldr	r3, [r7, #0]
 8013070:	689b      	ldr	r3, [r3, #8]
 8013072:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013076:	683b      	ldr	r3, [r7, #0]
 8013078:	791b      	ldrb	r3, [r3, #4]
 801307a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801307c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801307e:	68bb      	ldr	r3, [r7, #8]
 8013080:	059b      	lsls	r3, r3, #22
 8013082:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013084:	431a      	orrs	r2, r3
 8013086:	68bb      	ldr	r3, [r7, #8]
 8013088:	0159      	lsls	r1, r3, #5
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	440b      	add	r3, r1
 801308e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013092:	4619      	mov	r1, r3
 8013094:	4b20      	ldr	r3, [pc, #128]	; (8013118 <USB_ActivateEndpoint+0x10c>)
 8013096:	4313      	orrs	r3, r2
 8013098:	600b      	str	r3, [r1, #0]
 801309a:	e035      	b.n	8013108 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80130a2:	69da      	ldr	r2, [r3, #28]
 80130a4:	683b      	ldr	r3, [r7, #0]
 80130a6:	781b      	ldrb	r3, [r3, #0]
 80130a8:	f003 030f 	and.w	r3, r3, #15
 80130ac:	2101      	movs	r1, #1
 80130ae:	fa01 f303 	lsl.w	r3, r1, r3
 80130b2:	041b      	lsls	r3, r3, #16
 80130b4:	68f9      	ldr	r1, [r7, #12]
 80130b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80130ba:	4313      	orrs	r3, r2
 80130bc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80130be:	68bb      	ldr	r3, [r7, #8]
 80130c0:	015a      	lsls	r2, r3, #5
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	4413      	add	r3, r2
 80130c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130ca:	681b      	ldr	r3, [r3, #0]
 80130cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d119      	bne.n	8013108 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80130d4:	68bb      	ldr	r3, [r7, #8]
 80130d6:	015a      	lsls	r2, r3, #5
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	4413      	add	r3, r2
 80130dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130e0:	681a      	ldr	r2, [r3, #0]
 80130e2:	683b      	ldr	r3, [r7, #0]
 80130e4:	689b      	ldr	r3, [r3, #8]
 80130e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80130ea:	683b      	ldr	r3, [r7, #0]
 80130ec:	791b      	ldrb	r3, [r3, #4]
 80130ee:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80130f0:	430b      	orrs	r3, r1
 80130f2:	431a      	orrs	r2, r3
 80130f4:	68bb      	ldr	r3, [r7, #8]
 80130f6:	0159      	lsls	r1, r3, #5
 80130f8:	68fb      	ldr	r3, [r7, #12]
 80130fa:	440b      	add	r3, r1
 80130fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013100:	4619      	mov	r1, r3
 8013102:	4b05      	ldr	r3, [pc, #20]	; (8013118 <USB_ActivateEndpoint+0x10c>)
 8013104:	4313      	orrs	r3, r2
 8013106:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013108:	2300      	movs	r3, #0
}
 801310a:	4618      	mov	r0, r3
 801310c:	3714      	adds	r7, #20
 801310e:	46bd      	mov	sp, r7
 8013110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013114:	4770      	bx	lr
 8013116:	bf00      	nop
 8013118:	10008000 	.word	0x10008000

0801311c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801311c:	b480      	push	{r7}
 801311e:	b085      	sub	sp, #20
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
 8013124:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801312a:	683b      	ldr	r3, [r7, #0]
 801312c:	781b      	ldrb	r3, [r3, #0]
 801312e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013130:	683b      	ldr	r3, [r7, #0]
 8013132:	785b      	ldrb	r3, [r3, #1]
 8013134:	2b01      	cmp	r3, #1
 8013136:	d161      	bne.n	80131fc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013138:	68bb      	ldr	r3, [r7, #8]
 801313a:	015a      	lsls	r2, r3, #5
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	4413      	add	r3, r2
 8013140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801314a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801314e:	d11f      	bne.n	8013190 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013150:	68bb      	ldr	r3, [r7, #8]
 8013152:	015a      	lsls	r2, r3, #5
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	4413      	add	r3, r2
 8013158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	68ba      	ldr	r2, [r7, #8]
 8013160:	0151      	lsls	r1, r2, #5
 8013162:	68fa      	ldr	r2, [r7, #12]
 8013164:	440a      	add	r2, r1
 8013166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801316a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801316e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013170:	68bb      	ldr	r3, [r7, #8]
 8013172:	015a      	lsls	r2, r3, #5
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	4413      	add	r3, r2
 8013178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	68ba      	ldr	r2, [r7, #8]
 8013180:	0151      	lsls	r1, r2, #5
 8013182:	68fa      	ldr	r2, [r7, #12]
 8013184:	440a      	add	r2, r1
 8013186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801318a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801318e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013196:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013198:	683b      	ldr	r3, [r7, #0]
 801319a:	781b      	ldrb	r3, [r3, #0]
 801319c:	f003 030f 	and.w	r3, r3, #15
 80131a0:	2101      	movs	r1, #1
 80131a2:	fa01 f303 	lsl.w	r3, r1, r3
 80131a6:	b29b      	uxth	r3, r3
 80131a8:	43db      	mvns	r3, r3
 80131aa:	68f9      	ldr	r1, [r7, #12]
 80131ac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80131b0:	4013      	ands	r3, r2
 80131b2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80131ba:	69da      	ldr	r2, [r3, #28]
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	781b      	ldrb	r3, [r3, #0]
 80131c0:	f003 030f 	and.w	r3, r3, #15
 80131c4:	2101      	movs	r1, #1
 80131c6:	fa01 f303 	lsl.w	r3, r1, r3
 80131ca:	b29b      	uxth	r3, r3
 80131cc:	43db      	mvns	r3, r3
 80131ce:	68f9      	ldr	r1, [r7, #12]
 80131d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80131d4:	4013      	ands	r3, r2
 80131d6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80131d8:	68bb      	ldr	r3, [r7, #8]
 80131da:	015a      	lsls	r2, r3, #5
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	4413      	add	r3, r2
 80131e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131e4:	681a      	ldr	r2, [r3, #0]
 80131e6:	68bb      	ldr	r3, [r7, #8]
 80131e8:	0159      	lsls	r1, r3, #5
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	440b      	add	r3, r1
 80131ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131f2:	4619      	mov	r1, r3
 80131f4:	4b35      	ldr	r3, [pc, #212]	; (80132cc <USB_DeactivateEndpoint+0x1b0>)
 80131f6:	4013      	ands	r3, r2
 80131f8:	600b      	str	r3, [r1, #0]
 80131fa:	e060      	b.n	80132be <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80131fc:	68bb      	ldr	r3, [r7, #8]
 80131fe:	015a      	lsls	r2, r3, #5
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	4413      	add	r3, r2
 8013204:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801320e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013212:	d11f      	bne.n	8013254 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	015a      	lsls	r2, r3, #5
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	4413      	add	r3, r2
 801321c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013220:	681b      	ldr	r3, [r3, #0]
 8013222:	68ba      	ldr	r2, [r7, #8]
 8013224:	0151      	lsls	r1, r2, #5
 8013226:	68fa      	ldr	r2, [r7, #12]
 8013228:	440a      	add	r2, r1
 801322a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801322e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013232:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013234:	68bb      	ldr	r3, [r7, #8]
 8013236:	015a      	lsls	r2, r3, #5
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	4413      	add	r3, r2
 801323c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	68ba      	ldr	r2, [r7, #8]
 8013244:	0151      	lsls	r1, r2, #5
 8013246:	68fa      	ldr	r2, [r7, #12]
 8013248:	440a      	add	r2, r1
 801324a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801324e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013252:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801325a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801325c:	683b      	ldr	r3, [r7, #0]
 801325e:	781b      	ldrb	r3, [r3, #0]
 8013260:	f003 030f 	and.w	r3, r3, #15
 8013264:	2101      	movs	r1, #1
 8013266:	fa01 f303 	lsl.w	r3, r1, r3
 801326a:	041b      	lsls	r3, r3, #16
 801326c:	43db      	mvns	r3, r3
 801326e:	68f9      	ldr	r1, [r7, #12]
 8013270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013274:	4013      	ands	r3, r2
 8013276:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801327e:	69da      	ldr	r2, [r3, #28]
 8013280:	683b      	ldr	r3, [r7, #0]
 8013282:	781b      	ldrb	r3, [r3, #0]
 8013284:	f003 030f 	and.w	r3, r3, #15
 8013288:	2101      	movs	r1, #1
 801328a:	fa01 f303 	lsl.w	r3, r1, r3
 801328e:	041b      	lsls	r3, r3, #16
 8013290:	43db      	mvns	r3, r3
 8013292:	68f9      	ldr	r1, [r7, #12]
 8013294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013298:	4013      	ands	r3, r2
 801329a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801329c:	68bb      	ldr	r3, [r7, #8]
 801329e:	015a      	lsls	r2, r3, #5
 80132a0:	68fb      	ldr	r3, [r7, #12]
 80132a2:	4413      	add	r3, r2
 80132a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132a8:	681a      	ldr	r2, [r3, #0]
 80132aa:	68bb      	ldr	r3, [r7, #8]
 80132ac:	0159      	lsls	r1, r3, #5
 80132ae:	68fb      	ldr	r3, [r7, #12]
 80132b0:	440b      	add	r3, r1
 80132b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80132b6:	4619      	mov	r1, r3
 80132b8:	4b05      	ldr	r3, [pc, #20]	; (80132d0 <USB_DeactivateEndpoint+0x1b4>)
 80132ba:	4013      	ands	r3, r2
 80132bc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80132be:	2300      	movs	r3, #0
}
 80132c0:	4618      	mov	r0, r3
 80132c2:	3714      	adds	r7, #20
 80132c4:	46bd      	mov	sp, r7
 80132c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ca:	4770      	bx	lr
 80132cc:	ec337800 	.word	0xec337800
 80132d0:	eff37800 	.word	0xeff37800

080132d4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b08a      	sub	sp, #40	; 0x28
 80132d8:	af02      	add	r7, sp, #8
 80132da:	60f8      	str	r0, [r7, #12]
 80132dc:	60b9      	str	r1, [r7, #8]
 80132de:	4613      	mov	r3, r2
 80132e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80132e6:	68bb      	ldr	r3, [r7, #8]
 80132e8:	781b      	ldrb	r3, [r3, #0]
 80132ea:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	785b      	ldrb	r3, [r3, #1]
 80132f0:	2b01      	cmp	r3, #1
 80132f2:	f040 8181 	bne.w	80135f8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	691b      	ldr	r3, [r3, #16]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d132      	bne.n	8013364 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80132fe:	69bb      	ldr	r3, [r7, #24]
 8013300:	015a      	lsls	r2, r3, #5
 8013302:	69fb      	ldr	r3, [r7, #28]
 8013304:	4413      	add	r3, r2
 8013306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801330a:	691a      	ldr	r2, [r3, #16]
 801330c:	69bb      	ldr	r3, [r7, #24]
 801330e:	0159      	lsls	r1, r3, #5
 8013310:	69fb      	ldr	r3, [r7, #28]
 8013312:	440b      	add	r3, r1
 8013314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013318:	4619      	mov	r1, r3
 801331a:	4ba5      	ldr	r3, [pc, #660]	; (80135b0 <USB_EPStartXfer+0x2dc>)
 801331c:	4013      	ands	r3, r2
 801331e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013320:	69bb      	ldr	r3, [r7, #24]
 8013322:	015a      	lsls	r2, r3, #5
 8013324:	69fb      	ldr	r3, [r7, #28]
 8013326:	4413      	add	r3, r2
 8013328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801332c:	691b      	ldr	r3, [r3, #16]
 801332e:	69ba      	ldr	r2, [r7, #24]
 8013330:	0151      	lsls	r1, r2, #5
 8013332:	69fa      	ldr	r2, [r7, #28]
 8013334:	440a      	add	r2, r1
 8013336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801333a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801333e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013340:	69bb      	ldr	r3, [r7, #24]
 8013342:	015a      	lsls	r2, r3, #5
 8013344:	69fb      	ldr	r3, [r7, #28]
 8013346:	4413      	add	r3, r2
 8013348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801334c:	691a      	ldr	r2, [r3, #16]
 801334e:	69bb      	ldr	r3, [r7, #24]
 8013350:	0159      	lsls	r1, r3, #5
 8013352:	69fb      	ldr	r3, [r7, #28]
 8013354:	440b      	add	r3, r1
 8013356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801335a:	4619      	mov	r1, r3
 801335c:	4b95      	ldr	r3, [pc, #596]	; (80135b4 <USB_EPStartXfer+0x2e0>)
 801335e:	4013      	ands	r3, r2
 8013360:	610b      	str	r3, [r1, #16]
 8013362:	e092      	b.n	801348a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013364:	69bb      	ldr	r3, [r7, #24]
 8013366:	015a      	lsls	r2, r3, #5
 8013368:	69fb      	ldr	r3, [r7, #28]
 801336a:	4413      	add	r3, r2
 801336c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013370:	691a      	ldr	r2, [r3, #16]
 8013372:	69bb      	ldr	r3, [r7, #24]
 8013374:	0159      	lsls	r1, r3, #5
 8013376:	69fb      	ldr	r3, [r7, #28]
 8013378:	440b      	add	r3, r1
 801337a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801337e:	4619      	mov	r1, r3
 8013380:	4b8c      	ldr	r3, [pc, #560]	; (80135b4 <USB_EPStartXfer+0x2e0>)
 8013382:	4013      	ands	r3, r2
 8013384:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013386:	69bb      	ldr	r3, [r7, #24]
 8013388:	015a      	lsls	r2, r3, #5
 801338a:	69fb      	ldr	r3, [r7, #28]
 801338c:	4413      	add	r3, r2
 801338e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013392:	691a      	ldr	r2, [r3, #16]
 8013394:	69bb      	ldr	r3, [r7, #24]
 8013396:	0159      	lsls	r1, r3, #5
 8013398:	69fb      	ldr	r3, [r7, #28]
 801339a:	440b      	add	r3, r1
 801339c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133a0:	4619      	mov	r1, r3
 80133a2:	4b83      	ldr	r3, [pc, #524]	; (80135b0 <USB_EPStartXfer+0x2dc>)
 80133a4:	4013      	ands	r3, r2
 80133a6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 80133a8:	69bb      	ldr	r3, [r7, #24]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d11a      	bne.n	80133e4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80133ae:	68bb      	ldr	r3, [r7, #8]
 80133b0:	691a      	ldr	r2, [r3, #16]
 80133b2:	68bb      	ldr	r3, [r7, #8]
 80133b4:	689b      	ldr	r3, [r3, #8]
 80133b6:	429a      	cmp	r2, r3
 80133b8:	d903      	bls.n	80133c2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80133ba:	68bb      	ldr	r3, [r7, #8]
 80133bc:	689a      	ldr	r2, [r3, #8]
 80133be:	68bb      	ldr	r3, [r7, #8]
 80133c0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80133c2:	69bb      	ldr	r3, [r7, #24]
 80133c4:	015a      	lsls	r2, r3, #5
 80133c6:	69fb      	ldr	r3, [r7, #28]
 80133c8:	4413      	add	r3, r2
 80133ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133ce:	691b      	ldr	r3, [r3, #16]
 80133d0:	69ba      	ldr	r2, [r7, #24]
 80133d2:	0151      	lsls	r1, r2, #5
 80133d4:	69fa      	ldr	r2, [r7, #28]
 80133d6:	440a      	add	r2, r1
 80133d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80133dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80133e0:	6113      	str	r3, [r2, #16]
 80133e2:	e01b      	b.n	801341c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80133e4:	69bb      	ldr	r3, [r7, #24]
 80133e6:	015a      	lsls	r2, r3, #5
 80133e8:	69fb      	ldr	r3, [r7, #28]
 80133ea:	4413      	add	r3, r2
 80133ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80133f0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80133f2:	68bb      	ldr	r3, [r7, #8]
 80133f4:	6919      	ldr	r1, [r3, #16]
 80133f6:	68bb      	ldr	r3, [r7, #8]
 80133f8:	689b      	ldr	r3, [r3, #8]
 80133fa:	440b      	add	r3, r1
 80133fc:	1e59      	subs	r1, r3, #1
 80133fe:	68bb      	ldr	r3, [r7, #8]
 8013400:	689b      	ldr	r3, [r3, #8]
 8013402:	fbb1 f3f3 	udiv	r3, r1, r3
 8013406:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013408:	4b6b      	ldr	r3, [pc, #428]	; (80135b8 <USB_EPStartXfer+0x2e4>)
 801340a:	400b      	ands	r3, r1
 801340c:	69b9      	ldr	r1, [r7, #24]
 801340e:	0148      	lsls	r0, r1, #5
 8013410:	69f9      	ldr	r1, [r7, #28]
 8013412:	4401      	add	r1, r0
 8013414:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013418:	4313      	orrs	r3, r2
 801341a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801341c:	69bb      	ldr	r3, [r7, #24]
 801341e:	015a      	lsls	r2, r3, #5
 8013420:	69fb      	ldr	r3, [r7, #28]
 8013422:	4413      	add	r3, r2
 8013424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013428:	691a      	ldr	r2, [r3, #16]
 801342a:	68bb      	ldr	r3, [r7, #8]
 801342c:	691b      	ldr	r3, [r3, #16]
 801342e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013432:	69b9      	ldr	r1, [r7, #24]
 8013434:	0148      	lsls	r0, r1, #5
 8013436:	69f9      	ldr	r1, [r7, #28]
 8013438:	4401      	add	r1, r0
 801343a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801343e:	4313      	orrs	r3, r2
 8013440:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013442:	68bb      	ldr	r3, [r7, #8]
 8013444:	791b      	ldrb	r3, [r3, #4]
 8013446:	2b01      	cmp	r3, #1
 8013448:	d11f      	bne.n	801348a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801344a:	69bb      	ldr	r3, [r7, #24]
 801344c:	015a      	lsls	r2, r3, #5
 801344e:	69fb      	ldr	r3, [r7, #28]
 8013450:	4413      	add	r3, r2
 8013452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013456:	691b      	ldr	r3, [r3, #16]
 8013458:	69ba      	ldr	r2, [r7, #24]
 801345a:	0151      	lsls	r1, r2, #5
 801345c:	69fa      	ldr	r2, [r7, #28]
 801345e:	440a      	add	r2, r1
 8013460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013464:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013468:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801346a:	69bb      	ldr	r3, [r7, #24]
 801346c:	015a      	lsls	r2, r3, #5
 801346e:	69fb      	ldr	r3, [r7, #28]
 8013470:	4413      	add	r3, r2
 8013472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013476:	691b      	ldr	r3, [r3, #16]
 8013478:	69ba      	ldr	r2, [r7, #24]
 801347a:	0151      	lsls	r1, r2, #5
 801347c:	69fa      	ldr	r2, [r7, #28]
 801347e:	440a      	add	r2, r1
 8013480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013484:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013488:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801348a:	79fb      	ldrb	r3, [r7, #7]
 801348c:	2b01      	cmp	r3, #1
 801348e:	d14b      	bne.n	8013528 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013490:	68bb      	ldr	r3, [r7, #8]
 8013492:	69db      	ldr	r3, [r3, #28]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d009      	beq.n	80134ac <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013498:	69bb      	ldr	r3, [r7, #24]
 801349a:	015a      	lsls	r2, r3, #5
 801349c:	69fb      	ldr	r3, [r7, #28]
 801349e:	4413      	add	r3, r2
 80134a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134a4:	461a      	mov	r2, r3
 80134a6:	68bb      	ldr	r3, [r7, #8]
 80134a8:	69db      	ldr	r3, [r3, #28]
 80134aa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80134ac:	68bb      	ldr	r3, [r7, #8]
 80134ae:	791b      	ldrb	r3, [r3, #4]
 80134b0:	2b01      	cmp	r3, #1
 80134b2:	d128      	bne.n	8013506 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80134b4:	69fb      	ldr	r3, [r7, #28]
 80134b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134ba:	689b      	ldr	r3, [r3, #8]
 80134bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d110      	bne.n	80134e6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80134c4:	69bb      	ldr	r3, [r7, #24]
 80134c6:	015a      	lsls	r2, r3, #5
 80134c8:	69fb      	ldr	r3, [r7, #28]
 80134ca:	4413      	add	r3, r2
 80134cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134d0:	681b      	ldr	r3, [r3, #0]
 80134d2:	69ba      	ldr	r2, [r7, #24]
 80134d4:	0151      	lsls	r1, r2, #5
 80134d6:	69fa      	ldr	r2, [r7, #28]
 80134d8:	440a      	add	r2, r1
 80134da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80134de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80134e2:	6013      	str	r3, [r2, #0]
 80134e4:	e00f      	b.n	8013506 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80134e6:	69bb      	ldr	r3, [r7, #24]
 80134e8:	015a      	lsls	r2, r3, #5
 80134ea:	69fb      	ldr	r3, [r7, #28]
 80134ec:	4413      	add	r3, r2
 80134ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	69ba      	ldr	r2, [r7, #24]
 80134f6:	0151      	lsls	r1, r2, #5
 80134f8:	69fa      	ldr	r2, [r7, #28]
 80134fa:	440a      	add	r2, r1
 80134fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013500:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013504:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013506:	69bb      	ldr	r3, [r7, #24]
 8013508:	015a      	lsls	r2, r3, #5
 801350a:	69fb      	ldr	r3, [r7, #28]
 801350c:	4413      	add	r3, r2
 801350e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	69ba      	ldr	r2, [r7, #24]
 8013516:	0151      	lsls	r1, r2, #5
 8013518:	69fa      	ldr	r2, [r7, #28]
 801351a:	440a      	add	r2, r1
 801351c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013520:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013524:	6013      	str	r3, [r2, #0]
 8013526:	e16a      	b.n	80137fe <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013528:	69bb      	ldr	r3, [r7, #24]
 801352a:	015a      	lsls	r2, r3, #5
 801352c:	69fb      	ldr	r3, [r7, #28]
 801352e:	4413      	add	r3, r2
 8013530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	69ba      	ldr	r2, [r7, #24]
 8013538:	0151      	lsls	r1, r2, #5
 801353a:	69fa      	ldr	r2, [r7, #28]
 801353c:	440a      	add	r2, r1
 801353e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013542:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013546:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013548:	68bb      	ldr	r3, [r7, #8]
 801354a:	791b      	ldrb	r3, [r3, #4]
 801354c:	2b01      	cmp	r3, #1
 801354e:	d015      	beq.n	801357c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013550:	68bb      	ldr	r3, [r7, #8]
 8013552:	691b      	ldr	r3, [r3, #16]
 8013554:	2b00      	cmp	r3, #0
 8013556:	f000 8152 	beq.w	80137fe <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801355a:	69fb      	ldr	r3, [r7, #28]
 801355c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013562:	68bb      	ldr	r3, [r7, #8]
 8013564:	781b      	ldrb	r3, [r3, #0]
 8013566:	f003 030f 	and.w	r3, r3, #15
 801356a:	2101      	movs	r1, #1
 801356c:	fa01 f303 	lsl.w	r3, r1, r3
 8013570:	69f9      	ldr	r1, [r7, #28]
 8013572:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013576:	4313      	orrs	r3, r2
 8013578:	634b      	str	r3, [r1, #52]	; 0x34
 801357a:	e140      	b.n	80137fe <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801357c:	69fb      	ldr	r3, [r7, #28]
 801357e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013582:	689b      	ldr	r3, [r3, #8]
 8013584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013588:	2b00      	cmp	r3, #0
 801358a:	d117      	bne.n	80135bc <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801358c:	69bb      	ldr	r3, [r7, #24]
 801358e:	015a      	lsls	r2, r3, #5
 8013590:	69fb      	ldr	r3, [r7, #28]
 8013592:	4413      	add	r3, r2
 8013594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013598:	681b      	ldr	r3, [r3, #0]
 801359a:	69ba      	ldr	r2, [r7, #24]
 801359c:	0151      	lsls	r1, r2, #5
 801359e:	69fa      	ldr	r2, [r7, #28]
 80135a0:	440a      	add	r2, r1
 80135a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80135aa:	6013      	str	r3, [r2, #0]
 80135ac:	e016      	b.n	80135dc <USB_EPStartXfer+0x308>
 80135ae:	bf00      	nop
 80135b0:	e007ffff 	.word	0xe007ffff
 80135b4:	fff80000 	.word	0xfff80000
 80135b8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80135bc:	69bb      	ldr	r3, [r7, #24]
 80135be:	015a      	lsls	r2, r3, #5
 80135c0:	69fb      	ldr	r3, [r7, #28]
 80135c2:	4413      	add	r3, r2
 80135c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	69ba      	ldr	r2, [r7, #24]
 80135cc:	0151      	lsls	r1, r2, #5
 80135ce:	69fa      	ldr	r2, [r7, #28]
 80135d0:	440a      	add	r2, r1
 80135d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80135d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80135da:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80135dc:	68bb      	ldr	r3, [r7, #8]
 80135de:	68d9      	ldr	r1, [r3, #12]
 80135e0:	68bb      	ldr	r3, [r7, #8]
 80135e2:	781a      	ldrb	r2, [r3, #0]
 80135e4:	68bb      	ldr	r3, [r7, #8]
 80135e6:	691b      	ldr	r3, [r3, #16]
 80135e8:	b298      	uxth	r0, r3
 80135ea:	79fb      	ldrb	r3, [r7, #7]
 80135ec:	9300      	str	r3, [sp, #0]
 80135ee:	4603      	mov	r3, r0
 80135f0:	68f8      	ldr	r0, [r7, #12]
 80135f2:	f000 f9b9 	bl	8013968 <USB_WritePacket>
 80135f6:	e102      	b.n	80137fe <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80135f8:	69bb      	ldr	r3, [r7, #24]
 80135fa:	015a      	lsls	r2, r3, #5
 80135fc:	69fb      	ldr	r3, [r7, #28]
 80135fe:	4413      	add	r3, r2
 8013600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013604:	691a      	ldr	r2, [r3, #16]
 8013606:	69bb      	ldr	r3, [r7, #24]
 8013608:	0159      	lsls	r1, r3, #5
 801360a:	69fb      	ldr	r3, [r7, #28]
 801360c:	440b      	add	r3, r1
 801360e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013612:	4619      	mov	r1, r3
 8013614:	4b7c      	ldr	r3, [pc, #496]	; (8013808 <USB_EPStartXfer+0x534>)
 8013616:	4013      	ands	r3, r2
 8013618:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801361a:	69bb      	ldr	r3, [r7, #24]
 801361c:	015a      	lsls	r2, r3, #5
 801361e:	69fb      	ldr	r3, [r7, #28]
 8013620:	4413      	add	r3, r2
 8013622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013626:	691a      	ldr	r2, [r3, #16]
 8013628:	69bb      	ldr	r3, [r7, #24]
 801362a:	0159      	lsls	r1, r3, #5
 801362c:	69fb      	ldr	r3, [r7, #28]
 801362e:	440b      	add	r3, r1
 8013630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013634:	4619      	mov	r1, r3
 8013636:	4b75      	ldr	r3, [pc, #468]	; (801380c <USB_EPStartXfer+0x538>)
 8013638:	4013      	ands	r3, r2
 801363a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 801363c:	69bb      	ldr	r3, [r7, #24]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d12f      	bne.n	80136a2 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8013642:	68bb      	ldr	r3, [r7, #8]
 8013644:	691b      	ldr	r3, [r3, #16]
 8013646:	2b00      	cmp	r3, #0
 8013648:	d003      	beq.n	8013652 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 801364a:	68bb      	ldr	r3, [r7, #8]
 801364c:	689a      	ldr	r2, [r3, #8]
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	689a      	ldr	r2, [r3, #8]
 8013656:	68bb      	ldr	r3, [r7, #8]
 8013658:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801365a:	69bb      	ldr	r3, [r7, #24]
 801365c:	015a      	lsls	r2, r3, #5
 801365e:	69fb      	ldr	r3, [r7, #28]
 8013660:	4413      	add	r3, r2
 8013662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013666:	691a      	ldr	r2, [r3, #16]
 8013668:	68bb      	ldr	r3, [r7, #8]
 801366a:	6a1b      	ldr	r3, [r3, #32]
 801366c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013670:	69b9      	ldr	r1, [r7, #24]
 8013672:	0148      	lsls	r0, r1, #5
 8013674:	69f9      	ldr	r1, [r7, #28]
 8013676:	4401      	add	r1, r0
 8013678:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801367c:	4313      	orrs	r3, r2
 801367e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013680:	69bb      	ldr	r3, [r7, #24]
 8013682:	015a      	lsls	r2, r3, #5
 8013684:	69fb      	ldr	r3, [r7, #28]
 8013686:	4413      	add	r3, r2
 8013688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801368c:	691b      	ldr	r3, [r3, #16]
 801368e:	69ba      	ldr	r2, [r7, #24]
 8013690:	0151      	lsls	r1, r2, #5
 8013692:	69fa      	ldr	r2, [r7, #28]
 8013694:	440a      	add	r2, r1
 8013696:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801369a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801369e:	6113      	str	r3, [r2, #16]
 80136a0:	e05f      	b.n	8013762 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 80136a2:	68bb      	ldr	r3, [r7, #8]
 80136a4:	691b      	ldr	r3, [r3, #16]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d123      	bne.n	80136f2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80136aa:	69bb      	ldr	r3, [r7, #24]
 80136ac:	015a      	lsls	r2, r3, #5
 80136ae:	69fb      	ldr	r3, [r7, #28]
 80136b0:	4413      	add	r3, r2
 80136b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136b6:	691a      	ldr	r2, [r3, #16]
 80136b8:	68bb      	ldr	r3, [r7, #8]
 80136ba:	689b      	ldr	r3, [r3, #8]
 80136bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80136c0:	69b9      	ldr	r1, [r7, #24]
 80136c2:	0148      	lsls	r0, r1, #5
 80136c4:	69f9      	ldr	r1, [r7, #28]
 80136c6:	4401      	add	r1, r0
 80136c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80136cc:	4313      	orrs	r3, r2
 80136ce:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80136d0:	69bb      	ldr	r3, [r7, #24]
 80136d2:	015a      	lsls	r2, r3, #5
 80136d4:	69fb      	ldr	r3, [r7, #28]
 80136d6:	4413      	add	r3, r2
 80136d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80136dc:	691b      	ldr	r3, [r3, #16]
 80136de:	69ba      	ldr	r2, [r7, #24]
 80136e0:	0151      	lsls	r1, r2, #5
 80136e2:	69fa      	ldr	r2, [r7, #28]
 80136e4:	440a      	add	r2, r1
 80136e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80136ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80136ee:	6113      	str	r3, [r2, #16]
 80136f0:	e037      	b.n	8013762 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80136f2:	68bb      	ldr	r3, [r7, #8]
 80136f4:	691a      	ldr	r2, [r3, #16]
 80136f6:	68bb      	ldr	r3, [r7, #8]
 80136f8:	689b      	ldr	r3, [r3, #8]
 80136fa:	4413      	add	r3, r2
 80136fc:	1e5a      	subs	r2, r3, #1
 80136fe:	68bb      	ldr	r3, [r7, #8]
 8013700:	689b      	ldr	r3, [r3, #8]
 8013702:	fbb2 f3f3 	udiv	r3, r2, r3
 8013706:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	689b      	ldr	r3, [r3, #8]
 801370c:	8afa      	ldrh	r2, [r7, #22]
 801370e:	fb03 f202 	mul.w	r2, r3, r2
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013716:	69bb      	ldr	r3, [r7, #24]
 8013718:	015a      	lsls	r2, r3, #5
 801371a:	69fb      	ldr	r3, [r7, #28]
 801371c:	4413      	add	r3, r2
 801371e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013722:	691a      	ldr	r2, [r3, #16]
 8013724:	8afb      	ldrh	r3, [r7, #22]
 8013726:	04d9      	lsls	r1, r3, #19
 8013728:	4b39      	ldr	r3, [pc, #228]	; (8013810 <USB_EPStartXfer+0x53c>)
 801372a:	400b      	ands	r3, r1
 801372c:	69b9      	ldr	r1, [r7, #24]
 801372e:	0148      	lsls	r0, r1, #5
 8013730:	69f9      	ldr	r1, [r7, #28]
 8013732:	4401      	add	r1, r0
 8013734:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013738:	4313      	orrs	r3, r2
 801373a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 801373c:	69bb      	ldr	r3, [r7, #24]
 801373e:	015a      	lsls	r2, r3, #5
 8013740:	69fb      	ldr	r3, [r7, #28]
 8013742:	4413      	add	r3, r2
 8013744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013748:	691a      	ldr	r2, [r3, #16]
 801374a:	68bb      	ldr	r3, [r7, #8]
 801374c:	6a1b      	ldr	r3, [r3, #32]
 801374e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013752:	69b9      	ldr	r1, [r7, #24]
 8013754:	0148      	lsls	r0, r1, #5
 8013756:	69f9      	ldr	r1, [r7, #28]
 8013758:	4401      	add	r1, r0
 801375a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801375e:	4313      	orrs	r3, r2
 8013760:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013762:	79fb      	ldrb	r3, [r7, #7]
 8013764:	2b01      	cmp	r3, #1
 8013766:	d10d      	bne.n	8013784 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013768:	68bb      	ldr	r3, [r7, #8]
 801376a:	68db      	ldr	r3, [r3, #12]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d009      	beq.n	8013784 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013770:	68bb      	ldr	r3, [r7, #8]
 8013772:	68d9      	ldr	r1, [r3, #12]
 8013774:	69bb      	ldr	r3, [r7, #24]
 8013776:	015a      	lsls	r2, r3, #5
 8013778:	69fb      	ldr	r3, [r7, #28]
 801377a:	4413      	add	r3, r2
 801377c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013780:	460a      	mov	r2, r1
 8013782:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013784:	68bb      	ldr	r3, [r7, #8]
 8013786:	791b      	ldrb	r3, [r3, #4]
 8013788:	2b01      	cmp	r3, #1
 801378a:	d128      	bne.n	80137de <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801378c:	69fb      	ldr	r3, [r7, #28]
 801378e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013792:	689b      	ldr	r3, [r3, #8]
 8013794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013798:	2b00      	cmp	r3, #0
 801379a:	d110      	bne.n	80137be <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801379c:	69bb      	ldr	r3, [r7, #24]
 801379e:	015a      	lsls	r2, r3, #5
 80137a0:	69fb      	ldr	r3, [r7, #28]
 80137a2:	4413      	add	r3, r2
 80137a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137a8:	681b      	ldr	r3, [r3, #0]
 80137aa:	69ba      	ldr	r2, [r7, #24]
 80137ac:	0151      	lsls	r1, r2, #5
 80137ae:	69fa      	ldr	r2, [r7, #28]
 80137b0:	440a      	add	r2, r1
 80137b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80137b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80137ba:	6013      	str	r3, [r2, #0]
 80137bc:	e00f      	b.n	80137de <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80137be:	69bb      	ldr	r3, [r7, #24]
 80137c0:	015a      	lsls	r2, r3, #5
 80137c2:	69fb      	ldr	r3, [r7, #28]
 80137c4:	4413      	add	r3, r2
 80137c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137ca:	681b      	ldr	r3, [r3, #0]
 80137cc:	69ba      	ldr	r2, [r7, #24]
 80137ce:	0151      	lsls	r1, r2, #5
 80137d0:	69fa      	ldr	r2, [r7, #28]
 80137d2:	440a      	add	r2, r1
 80137d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80137d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80137dc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80137de:	69bb      	ldr	r3, [r7, #24]
 80137e0:	015a      	lsls	r2, r3, #5
 80137e2:	69fb      	ldr	r3, [r7, #28]
 80137e4:	4413      	add	r3, r2
 80137e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	69ba      	ldr	r2, [r7, #24]
 80137ee:	0151      	lsls	r1, r2, #5
 80137f0:	69fa      	ldr	r2, [r7, #28]
 80137f2:	440a      	add	r2, r1
 80137f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80137f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80137fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80137fe:	2300      	movs	r3, #0
}
 8013800:	4618      	mov	r0, r3
 8013802:	3720      	adds	r7, #32
 8013804:	46bd      	mov	sp, r7
 8013806:	bd80      	pop	{r7, pc}
 8013808:	fff80000 	.word	0xfff80000
 801380c:	e007ffff 	.word	0xe007ffff
 8013810:	1ff80000 	.word	0x1ff80000

08013814 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013814:	b480      	push	{r7}
 8013816:	b087      	sub	sp, #28
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
 801381c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801381e:	2300      	movs	r3, #0
 8013820:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013822:	2300      	movs	r3, #0
 8013824:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801382a:	683b      	ldr	r3, [r7, #0]
 801382c:	785b      	ldrb	r3, [r3, #1]
 801382e:	2b01      	cmp	r3, #1
 8013830:	d14a      	bne.n	80138c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	781b      	ldrb	r3, [r3, #0]
 8013836:	015a      	lsls	r2, r3, #5
 8013838:	693b      	ldr	r3, [r7, #16]
 801383a:	4413      	add	r3, r2
 801383c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801384a:	f040 8086 	bne.w	801395a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801384e:	683b      	ldr	r3, [r7, #0]
 8013850:	781b      	ldrb	r3, [r3, #0]
 8013852:	015a      	lsls	r2, r3, #5
 8013854:	693b      	ldr	r3, [r7, #16]
 8013856:	4413      	add	r3, r2
 8013858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	683a      	ldr	r2, [r7, #0]
 8013860:	7812      	ldrb	r2, [r2, #0]
 8013862:	0151      	lsls	r1, r2, #5
 8013864:	693a      	ldr	r2, [r7, #16]
 8013866:	440a      	add	r2, r1
 8013868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801386c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013870:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8013872:	683b      	ldr	r3, [r7, #0]
 8013874:	781b      	ldrb	r3, [r3, #0]
 8013876:	015a      	lsls	r2, r3, #5
 8013878:	693b      	ldr	r3, [r7, #16]
 801387a:	4413      	add	r3, r2
 801387c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	683a      	ldr	r2, [r7, #0]
 8013884:	7812      	ldrb	r2, [r2, #0]
 8013886:	0151      	lsls	r1, r2, #5
 8013888:	693a      	ldr	r2, [r7, #16]
 801388a:	440a      	add	r2, r1
 801388c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013890:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013894:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	3301      	adds	r3, #1
 801389a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801389c:	68fb      	ldr	r3, [r7, #12]
 801389e:	f242 7210 	movw	r2, #10000	; 0x2710
 80138a2:	4293      	cmp	r3, r2
 80138a4:	d902      	bls.n	80138ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80138a6:	2301      	movs	r3, #1
 80138a8:	75fb      	strb	r3, [r7, #23]
          break;
 80138aa:	e056      	b.n	801395a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80138ac:	683b      	ldr	r3, [r7, #0]
 80138ae:	781b      	ldrb	r3, [r3, #0]
 80138b0:	015a      	lsls	r2, r3, #5
 80138b2:	693b      	ldr	r3, [r7, #16]
 80138b4:	4413      	add	r3, r2
 80138b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80138c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80138c4:	d0e7      	beq.n	8013896 <USB_EPStopXfer+0x82>
 80138c6:	e048      	b.n	801395a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80138c8:	683b      	ldr	r3, [r7, #0]
 80138ca:	781b      	ldrb	r3, [r3, #0]
 80138cc:	015a      	lsls	r2, r3, #5
 80138ce:	693b      	ldr	r3, [r7, #16]
 80138d0:	4413      	add	r3, r2
 80138d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80138dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80138e0:	d13b      	bne.n	801395a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80138e2:	683b      	ldr	r3, [r7, #0]
 80138e4:	781b      	ldrb	r3, [r3, #0]
 80138e6:	015a      	lsls	r2, r3, #5
 80138e8:	693b      	ldr	r3, [r7, #16]
 80138ea:	4413      	add	r3, r2
 80138ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	683a      	ldr	r2, [r7, #0]
 80138f4:	7812      	ldrb	r2, [r2, #0]
 80138f6:	0151      	lsls	r1, r2, #5
 80138f8:	693a      	ldr	r2, [r7, #16]
 80138fa:	440a      	add	r2, r1
 80138fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013900:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013904:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8013906:	683b      	ldr	r3, [r7, #0]
 8013908:	781b      	ldrb	r3, [r3, #0]
 801390a:	015a      	lsls	r2, r3, #5
 801390c:	693b      	ldr	r3, [r7, #16]
 801390e:	4413      	add	r3, r2
 8013910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	683a      	ldr	r2, [r7, #0]
 8013918:	7812      	ldrb	r2, [r2, #0]
 801391a:	0151      	lsls	r1, r2, #5
 801391c:	693a      	ldr	r2, [r7, #16]
 801391e:	440a      	add	r2, r1
 8013920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013924:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013928:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	3301      	adds	r3, #1
 801392e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	f242 7210 	movw	r2, #10000	; 0x2710
 8013936:	4293      	cmp	r3, r2
 8013938:	d902      	bls.n	8013940 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801393a:	2301      	movs	r3, #1
 801393c:	75fb      	strb	r3, [r7, #23]
          break;
 801393e:	e00c      	b.n	801395a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8013940:	683b      	ldr	r3, [r7, #0]
 8013942:	781b      	ldrb	r3, [r3, #0]
 8013944:	015a      	lsls	r2, r3, #5
 8013946:	693b      	ldr	r3, [r7, #16]
 8013948:	4413      	add	r3, r2
 801394a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013954:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013958:	d0e7      	beq.n	801392a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801395a:	7dfb      	ldrb	r3, [r7, #23]
}
 801395c:	4618      	mov	r0, r3
 801395e:	371c      	adds	r7, #28
 8013960:	46bd      	mov	sp, r7
 8013962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013966:	4770      	bx	lr

08013968 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8013968:	b480      	push	{r7}
 801396a:	b089      	sub	sp, #36	; 0x24
 801396c:	af00      	add	r7, sp, #0
 801396e:	60f8      	str	r0, [r7, #12]
 8013970:	60b9      	str	r1, [r7, #8]
 8013972:	4611      	mov	r1, r2
 8013974:	461a      	mov	r2, r3
 8013976:	460b      	mov	r3, r1
 8013978:	71fb      	strb	r3, [r7, #7]
 801397a:	4613      	mov	r3, r2
 801397c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8013982:	68bb      	ldr	r3, [r7, #8]
 8013984:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8013986:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801398a:	2b00      	cmp	r3, #0
 801398c:	d123      	bne.n	80139d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801398e:	88bb      	ldrh	r3, [r7, #4]
 8013990:	3303      	adds	r3, #3
 8013992:	089b      	lsrs	r3, r3, #2
 8013994:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8013996:	2300      	movs	r3, #0
 8013998:	61bb      	str	r3, [r7, #24]
 801399a:	e018      	b.n	80139ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801399c:	79fb      	ldrb	r3, [r7, #7]
 801399e:	031a      	lsls	r2, r3, #12
 80139a0:	697b      	ldr	r3, [r7, #20]
 80139a2:	4413      	add	r3, r2
 80139a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80139a8:	461a      	mov	r2, r3
 80139aa:	69fb      	ldr	r3, [r7, #28]
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80139b0:	69fb      	ldr	r3, [r7, #28]
 80139b2:	3301      	adds	r3, #1
 80139b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80139b6:	69fb      	ldr	r3, [r7, #28]
 80139b8:	3301      	adds	r3, #1
 80139ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80139bc:	69fb      	ldr	r3, [r7, #28]
 80139be:	3301      	adds	r3, #1
 80139c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80139c2:	69fb      	ldr	r3, [r7, #28]
 80139c4:	3301      	adds	r3, #1
 80139c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80139c8:	69bb      	ldr	r3, [r7, #24]
 80139ca:	3301      	adds	r3, #1
 80139cc:	61bb      	str	r3, [r7, #24]
 80139ce:	69ba      	ldr	r2, [r7, #24]
 80139d0:	693b      	ldr	r3, [r7, #16]
 80139d2:	429a      	cmp	r2, r3
 80139d4:	d3e2      	bcc.n	801399c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80139d6:	2300      	movs	r3, #0
}
 80139d8:	4618      	mov	r0, r3
 80139da:	3724      	adds	r7, #36	; 0x24
 80139dc:	46bd      	mov	sp, r7
 80139de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e2:	4770      	bx	lr

080139e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80139e4:	b480      	push	{r7}
 80139e6:	b08b      	sub	sp, #44	; 0x2c
 80139e8:	af00      	add	r7, sp, #0
 80139ea:	60f8      	str	r0, [r7, #12]
 80139ec:	60b9      	str	r1, [r7, #8]
 80139ee:	4613      	mov	r3, r2
 80139f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80139f6:	68bb      	ldr	r3, [r7, #8]
 80139f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80139fa:	88fb      	ldrh	r3, [r7, #6]
 80139fc:	089b      	lsrs	r3, r3, #2
 80139fe:	b29b      	uxth	r3, r3
 8013a00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8013a02:	88fb      	ldrh	r3, [r7, #6]
 8013a04:	f003 0303 	and.w	r3, r3, #3
 8013a08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8013a0a:	2300      	movs	r3, #0
 8013a0c:	623b      	str	r3, [r7, #32]
 8013a0e:	e014      	b.n	8013a3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013a10:	69bb      	ldr	r3, [r7, #24]
 8013a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013a16:	681a      	ldr	r2, [r3, #0]
 8013a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8013a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a1e:	3301      	adds	r3, #1
 8013a20:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a24:	3301      	adds	r3, #1
 8013a26:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a2a:	3301      	adds	r3, #1
 8013a2c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8013a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a30:	3301      	adds	r3, #1
 8013a32:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8013a34:	6a3b      	ldr	r3, [r7, #32]
 8013a36:	3301      	adds	r3, #1
 8013a38:	623b      	str	r3, [r7, #32]
 8013a3a:	6a3a      	ldr	r2, [r7, #32]
 8013a3c:	697b      	ldr	r3, [r7, #20]
 8013a3e:	429a      	cmp	r2, r3
 8013a40:	d3e6      	bcc.n	8013a10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8013a42:	8bfb      	ldrh	r3, [r7, #30]
 8013a44:	2b00      	cmp	r3, #0
 8013a46:	d01e      	beq.n	8013a86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8013a48:	2300      	movs	r3, #0
 8013a4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013a4c:	69bb      	ldr	r3, [r7, #24]
 8013a4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013a52:	461a      	mov	r2, r3
 8013a54:	f107 0310 	add.w	r3, r7, #16
 8013a58:	6812      	ldr	r2, [r2, #0]
 8013a5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013a5c:	693a      	ldr	r2, [r7, #16]
 8013a5e:	6a3b      	ldr	r3, [r7, #32]
 8013a60:	b2db      	uxtb	r3, r3
 8013a62:	00db      	lsls	r3, r3, #3
 8013a64:	fa22 f303 	lsr.w	r3, r2, r3
 8013a68:	b2da      	uxtb	r2, r3
 8013a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a6c:	701a      	strb	r2, [r3, #0]
      i++;
 8013a6e:	6a3b      	ldr	r3, [r7, #32]
 8013a70:	3301      	adds	r3, #1
 8013a72:	623b      	str	r3, [r7, #32]
      pDest++;
 8013a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a76:	3301      	adds	r3, #1
 8013a78:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8013a7a:	8bfb      	ldrh	r3, [r7, #30]
 8013a7c:	3b01      	subs	r3, #1
 8013a7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8013a80:	8bfb      	ldrh	r3, [r7, #30]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d1ea      	bne.n	8013a5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8013a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	372c      	adds	r7, #44	; 0x2c
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a92:	4770      	bx	lr

08013a94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013a94:	b480      	push	{r7}
 8013a96:	b085      	sub	sp, #20
 8013a98:	af00      	add	r7, sp, #0
 8013a9a:	6078      	str	r0, [r7, #4]
 8013a9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013aa2:	683b      	ldr	r3, [r7, #0]
 8013aa4:	781b      	ldrb	r3, [r3, #0]
 8013aa6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013aa8:	683b      	ldr	r3, [r7, #0]
 8013aaa:	785b      	ldrb	r3, [r3, #1]
 8013aac:	2b01      	cmp	r3, #1
 8013aae:	d12c      	bne.n	8013b0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	015a      	lsls	r2, r3, #5
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	4413      	add	r3, r2
 8013ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	db12      	blt.n	8013ae8 <USB_EPSetStall+0x54>
 8013ac2:	68bb      	ldr	r3, [r7, #8]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d00f      	beq.n	8013ae8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8013ac8:	68bb      	ldr	r3, [r7, #8]
 8013aca:	015a      	lsls	r2, r3, #5
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	4413      	add	r3, r2
 8013ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	68ba      	ldr	r2, [r7, #8]
 8013ad8:	0151      	lsls	r1, r2, #5
 8013ada:	68fa      	ldr	r2, [r7, #12]
 8013adc:	440a      	add	r2, r1
 8013ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ae2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013ae6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8013ae8:	68bb      	ldr	r3, [r7, #8]
 8013aea:	015a      	lsls	r2, r3, #5
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	4413      	add	r3, r2
 8013af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	68ba      	ldr	r2, [r7, #8]
 8013af8:	0151      	lsls	r1, r2, #5
 8013afa:	68fa      	ldr	r2, [r7, #12]
 8013afc:	440a      	add	r2, r1
 8013afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013b06:	6013      	str	r3, [r2, #0]
 8013b08:	e02b      	b.n	8013b62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013b0a:	68bb      	ldr	r3, [r7, #8]
 8013b0c:	015a      	lsls	r2, r3, #5
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	4413      	add	r3, r2
 8013b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b16:	681b      	ldr	r3, [r3, #0]
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	db12      	blt.n	8013b42 <USB_EPSetStall+0xae>
 8013b1c:	68bb      	ldr	r3, [r7, #8]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d00f      	beq.n	8013b42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8013b22:	68bb      	ldr	r3, [r7, #8]
 8013b24:	015a      	lsls	r2, r3, #5
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	4413      	add	r3, r2
 8013b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b2e:	681b      	ldr	r3, [r3, #0]
 8013b30:	68ba      	ldr	r2, [r7, #8]
 8013b32:	0151      	lsls	r1, r2, #5
 8013b34:	68fa      	ldr	r2, [r7, #12]
 8013b36:	440a      	add	r2, r1
 8013b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8013b40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013b42:	68bb      	ldr	r3, [r7, #8]
 8013b44:	015a      	lsls	r2, r3, #5
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	4413      	add	r3, r2
 8013b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	68ba      	ldr	r2, [r7, #8]
 8013b52:	0151      	lsls	r1, r2, #5
 8013b54:	68fa      	ldr	r2, [r7, #12]
 8013b56:	440a      	add	r2, r1
 8013b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013b60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013b62:	2300      	movs	r3, #0
}
 8013b64:	4618      	mov	r0, r3
 8013b66:	3714      	adds	r7, #20
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b6e:	4770      	bx	lr

08013b70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013b70:	b480      	push	{r7}
 8013b72:	b085      	sub	sp, #20
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
 8013b78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013b7e:	683b      	ldr	r3, [r7, #0]
 8013b80:	781b      	ldrb	r3, [r3, #0]
 8013b82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013b84:	683b      	ldr	r3, [r7, #0]
 8013b86:	785b      	ldrb	r3, [r3, #1]
 8013b88:	2b01      	cmp	r3, #1
 8013b8a:	d128      	bne.n	8013bde <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013b8c:	68bb      	ldr	r3, [r7, #8]
 8013b8e:	015a      	lsls	r2, r3, #5
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	4413      	add	r3, r2
 8013b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b98:	681b      	ldr	r3, [r3, #0]
 8013b9a:	68ba      	ldr	r2, [r7, #8]
 8013b9c:	0151      	lsls	r1, r2, #5
 8013b9e:	68fa      	ldr	r2, [r7, #12]
 8013ba0:	440a      	add	r2, r1
 8013ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ba6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013baa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013bac:	683b      	ldr	r3, [r7, #0]
 8013bae:	791b      	ldrb	r3, [r3, #4]
 8013bb0:	2b03      	cmp	r3, #3
 8013bb2:	d003      	beq.n	8013bbc <USB_EPClearStall+0x4c>
 8013bb4:	683b      	ldr	r3, [r7, #0]
 8013bb6:	791b      	ldrb	r3, [r3, #4]
 8013bb8:	2b02      	cmp	r3, #2
 8013bba:	d138      	bne.n	8013c2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013bbc:	68bb      	ldr	r3, [r7, #8]
 8013bbe:	015a      	lsls	r2, r3, #5
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	4413      	add	r3, r2
 8013bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	68ba      	ldr	r2, [r7, #8]
 8013bcc:	0151      	lsls	r1, r2, #5
 8013bce:	68fa      	ldr	r2, [r7, #12]
 8013bd0:	440a      	add	r2, r1
 8013bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013bda:	6013      	str	r3, [r2, #0]
 8013bdc:	e027      	b.n	8013c2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013bde:	68bb      	ldr	r3, [r7, #8]
 8013be0:	015a      	lsls	r2, r3, #5
 8013be2:	68fb      	ldr	r3, [r7, #12]
 8013be4:	4413      	add	r3, r2
 8013be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	68ba      	ldr	r2, [r7, #8]
 8013bee:	0151      	lsls	r1, r2, #5
 8013bf0:	68fa      	ldr	r2, [r7, #12]
 8013bf2:	440a      	add	r2, r1
 8013bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013bf8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013bfc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013bfe:	683b      	ldr	r3, [r7, #0]
 8013c00:	791b      	ldrb	r3, [r3, #4]
 8013c02:	2b03      	cmp	r3, #3
 8013c04:	d003      	beq.n	8013c0e <USB_EPClearStall+0x9e>
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	791b      	ldrb	r3, [r3, #4]
 8013c0a:	2b02      	cmp	r3, #2
 8013c0c:	d10f      	bne.n	8013c2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013c0e:	68bb      	ldr	r3, [r7, #8]
 8013c10:	015a      	lsls	r2, r3, #5
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	4413      	add	r3, r2
 8013c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	68ba      	ldr	r2, [r7, #8]
 8013c1e:	0151      	lsls	r1, r2, #5
 8013c20:	68fa      	ldr	r2, [r7, #12]
 8013c22:	440a      	add	r2, r1
 8013c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013c2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8013c2e:	2300      	movs	r3, #0
}
 8013c30:	4618      	mov	r0, r3
 8013c32:	3714      	adds	r7, #20
 8013c34:	46bd      	mov	sp, r7
 8013c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c3a:	4770      	bx	lr

08013c3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8013c3c:	b480      	push	{r7}
 8013c3e:	b085      	sub	sp, #20
 8013c40:	af00      	add	r7, sp, #0
 8013c42:	6078      	str	r0, [r7, #4]
 8013c44:	460b      	mov	r3, r1
 8013c46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	68fa      	ldr	r2, [r7, #12]
 8013c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013c5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013c5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c66:	681a      	ldr	r2, [r3, #0]
 8013c68:	78fb      	ldrb	r3, [r7, #3]
 8013c6a:	011b      	lsls	r3, r3, #4
 8013c6c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8013c70:	68f9      	ldr	r1, [r7, #12]
 8013c72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013c76:	4313      	orrs	r3, r2
 8013c78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8013c7a:	2300      	movs	r3, #0
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	3714      	adds	r7, #20
 8013c80:	46bd      	mov	sp, r7
 8013c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c86:	4770      	bx	lr

08013c88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013c88:	b480      	push	{r7}
 8013c8a:	b085      	sub	sp, #20
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	68fa      	ldr	r2, [r7, #12]
 8013c9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013ca2:	f023 0303 	bic.w	r3, r3, #3
 8013ca6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cae:	685b      	ldr	r3, [r3, #4]
 8013cb0:	68fa      	ldr	r2, [r7, #12]
 8013cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013cb6:	f023 0302 	bic.w	r3, r3, #2
 8013cba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013cbc:	2300      	movs	r3, #0
}
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	3714      	adds	r7, #20
 8013cc2:	46bd      	mov	sp, r7
 8013cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc8:	4770      	bx	lr

08013cca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8013cca:	b480      	push	{r7}
 8013ccc:	b085      	sub	sp, #20
 8013cce:	af00      	add	r7, sp, #0
 8013cd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	68fa      	ldr	r2, [r7, #12]
 8013ce0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8013ce4:	f023 0303 	bic.w	r3, r3, #3
 8013ce8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cf0:	685b      	ldr	r3, [r3, #4]
 8013cf2:	68fa      	ldr	r2, [r7, #12]
 8013cf4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013cf8:	f043 0302 	orr.w	r3, r3, #2
 8013cfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013cfe:	2300      	movs	r3, #0
}
 8013d00:	4618      	mov	r0, r3
 8013d02:	3714      	adds	r7, #20
 8013d04:	46bd      	mov	sp, r7
 8013d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0a:	4770      	bx	lr

08013d0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8013d0c:	b480      	push	{r7}
 8013d0e:	b085      	sub	sp, #20
 8013d10:	af00      	add	r7, sp, #0
 8013d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	695b      	ldr	r3, [r3, #20]
 8013d18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	699b      	ldr	r3, [r3, #24]
 8013d1e:	68fa      	ldr	r2, [r7, #12]
 8013d20:	4013      	ands	r3, r2
 8013d22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013d24:	68fb      	ldr	r3, [r7, #12]
}
 8013d26:	4618      	mov	r0, r3
 8013d28:	3714      	adds	r7, #20
 8013d2a:	46bd      	mov	sp, r7
 8013d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d30:	4770      	bx	lr

08013d32 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013d32:	b480      	push	{r7}
 8013d34:	b085      	sub	sp, #20
 8013d36:	af00      	add	r7, sp, #0
 8013d38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d44:	699b      	ldr	r3, [r3, #24]
 8013d46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d4e:	69db      	ldr	r3, [r3, #28]
 8013d50:	68ba      	ldr	r2, [r7, #8]
 8013d52:	4013      	ands	r3, r2
 8013d54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8013d56:	68bb      	ldr	r3, [r7, #8]
 8013d58:	0c1b      	lsrs	r3, r3, #16
}
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	3714      	adds	r7, #20
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d64:	4770      	bx	lr

08013d66 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013d66:	b480      	push	{r7}
 8013d68:	b085      	sub	sp, #20
 8013d6a:	af00      	add	r7, sp, #0
 8013d6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d78:	699b      	ldr	r3, [r3, #24]
 8013d7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d82:	69db      	ldr	r3, [r3, #28]
 8013d84:	68ba      	ldr	r2, [r7, #8]
 8013d86:	4013      	ands	r3, r2
 8013d88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8013d8a:	68bb      	ldr	r3, [r7, #8]
 8013d8c:	b29b      	uxth	r3, r3
}
 8013d8e:	4618      	mov	r0, r3
 8013d90:	3714      	adds	r7, #20
 8013d92:	46bd      	mov	sp, r7
 8013d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d98:	4770      	bx	lr

08013d9a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013d9a:	b480      	push	{r7}
 8013d9c:	b085      	sub	sp, #20
 8013d9e:	af00      	add	r7, sp, #0
 8013da0:	6078      	str	r0, [r7, #4]
 8013da2:	460b      	mov	r3, r1
 8013da4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013daa:	78fb      	ldrb	r3, [r7, #3]
 8013dac:	015a      	lsls	r2, r3, #5
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	4413      	add	r3, r2
 8013db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013db6:	689b      	ldr	r3, [r3, #8]
 8013db8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dc0:	695b      	ldr	r3, [r3, #20]
 8013dc2:	68ba      	ldr	r2, [r7, #8]
 8013dc4:	4013      	ands	r3, r2
 8013dc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013dc8:	68bb      	ldr	r3, [r7, #8]
}
 8013dca:	4618      	mov	r0, r3
 8013dcc:	3714      	adds	r7, #20
 8013dce:	46bd      	mov	sp, r7
 8013dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd4:	4770      	bx	lr

08013dd6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013dd6:	b480      	push	{r7}
 8013dd8:	b087      	sub	sp, #28
 8013dda:	af00      	add	r7, sp, #0
 8013ddc:	6078      	str	r0, [r7, #4]
 8013dde:	460b      	mov	r3, r1
 8013de0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013de6:	697b      	ldr	r3, [r7, #20]
 8013de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dec:	691b      	ldr	r3, [r3, #16]
 8013dee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013df0:	697b      	ldr	r3, [r7, #20]
 8013df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013df8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013dfa:	78fb      	ldrb	r3, [r7, #3]
 8013dfc:	f003 030f 	and.w	r3, r3, #15
 8013e00:	68fa      	ldr	r2, [r7, #12]
 8013e02:	fa22 f303 	lsr.w	r3, r2, r3
 8013e06:	01db      	lsls	r3, r3, #7
 8013e08:	b2db      	uxtb	r3, r3
 8013e0a:	693a      	ldr	r2, [r7, #16]
 8013e0c:	4313      	orrs	r3, r2
 8013e0e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013e10:	78fb      	ldrb	r3, [r7, #3]
 8013e12:	015a      	lsls	r2, r3, #5
 8013e14:	697b      	ldr	r3, [r7, #20]
 8013e16:	4413      	add	r3, r2
 8013e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e1c:	689b      	ldr	r3, [r3, #8]
 8013e1e:	693a      	ldr	r2, [r7, #16]
 8013e20:	4013      	ands	r3, r2
 8013e22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013e24:	68bb      	ldr	r3, [r7, #8]
}
 8013e26:	4618      	mov	r0, r3
 8013e28:	371c      	adds	r7, #28
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e30:	4770      	bx	lr

08013e32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013e32:	b480      	push	{r7}
 8013e34:	b083      	sub	sp, #12
 8013e36:	af00      	add	r7, sp, #0
 8013e38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	695b      	ldr	r3, [r3, #20]
 8013e3e:	f003 0301 	and.w	r3, r3, #1
}
 8013e42:	4618      	mov	r0, r3
 8013e44:	370c      	adds	r7, #12
 8013e46:	46bd      	mov	sp, r7
 8013e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e4c:	4770      	bx	lr
	...

08013e50 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013e50:	b480      	push	{r7}
 8013e52:	b085      	sub	sp, #20
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e62:	681a      	ldr	r2, [r3, #0]
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e6a:	4619      	mov	r1, r3
 8013e6c:	4b09      	ldr	r3, [pc, #36]	; (8013e94 <USB_ActivateSetup+0x44>)
 8013e6e:	4013      	ands	r3, r2
 8013e70:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e78:	685b      	ldr	r3, [r3, #4]
 8013e7a:	68fa      	ldr	r2, [r7, #12]
 8013e7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013e84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013e86:	2300      	movs	r3, #0
}
 8013e88:	4618      	mov	r0, r3
 8013e8a:	3714      	adds	r7, #20
 8013e8c:	46bd      	mov	sp, r7
 8013e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e92:	4770      	bx	lr
 8013e94:	fffff800 	.word	0xfffff800

08013e98 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013e98:	b480      	push	{r7}
 8013e9a:	b087      	sub	sp, #28
 8013e9c:	af00      	add	r7, sp, #0
 8013e9e:	60f8      	str	r0, [r7, #12]
 8013ea0:	460b      	mov	r3, r1
 8013ea2:	607a      	str	r2, [r7, #4]
 8013ea4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013eaa:	68fb      	ldr	r3, [r7, #12]
 8013eac:	333c      	adds	r3, #60	; 0x3c
 8013eae:	3304      	adds	r3, #4
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013eb4:	693b      	ldr	r3, [r7, #16]
 8013eb6:	4a26      	ldr	r2, [pc, #152]	; (8013f50 <USB_EP0_OutStart+0xb8>)
 8013eb8:	4293      	cmp	r3, r2
 8013eba:	d90a      	bls.n	8013ed2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013ebc:	697b      	ldr	r3, [r7, #20]
 8013ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013ecc:	d101      	bne.n	8013ed2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8013ece:	2300      	movs	r3, #0
 8013ed0:	e037      	b.n	8013f42 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013ed2:	697b      	ldr	r3, [r7, #20]
 8013ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ed8:	461a      	mov	r2, r3
 8013eda:	2300      	movs	r3, #0
 8013edc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013ede:	697b      	ldr	r3, [r7, #20]
 8013ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ee4:	691b      	ldr	r3, [r3, #16]
 8013ee6:	697a      	ldr	r2, [r7, #20]
 8013ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013eec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013ef0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013ef2:	697b      	ldr	r3, [r7, #20]
 8013ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ef8:	691b      	ldr	r3, [r3, #16]
 8013efa:	697a      	ldr	r2, [r7, #20]
 8013efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f00:	f043 0318 	orr.w	r3, r3, #24
 8013f04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013f06:	697b      	ldr	r3, [r7, #20]
 8013f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f0c:	691b      	ldr	r3, [r3, #16]
 8013f0e:	697a      	ldr	r2, [r7, #20]
 8013f10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f14:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013f18:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8013f1a:	7afb      	ldrb	r3, [r7, #11]
 8013f1c:	2b01      	cmp	r3, #1
 8013f1e:	d10f      	bne.n	8013f40 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013f20:	697b      	ldr	r3, [r7, #20]
 8013f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f26:	461a      	mov	r2, r3
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013f2c:	697b      	ldr	r3, [r7, #20]
 8013f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	697a      	ldr	r2, [r7, #20]
 8013f36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f3a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013f3e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013f40:	2300      	movs	r3, #0
}
 8013f42:	4618      	mov	r0, r3
 8013f44:	371c      	adds	r7, #28
 8013f46:	46bd      	mov	sp, r7
 8013f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f4c:	4770      	bx	lr
 8013f4e:	bf00      	nop
 8013f50:	4f54300a 	.word	0x4f54300a

08013f54 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013f54:	b480      	push	{r7}
 8013f56:	b085      	sub	sp, #20
 8013f58:	af00      	add	r7, sp, #0
 8013f5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013f5c:	2300      	movs	r3, #0
 8013f5e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013f60:	68fb      	ldr	r3, [r7, #12]
 8013f62:	3301      	adds	r3, #1
 8013f64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013f66:	68fb      	ldr	r3, [r7, #12]
 8013f68:	4a13      	ldr	r2, [pc, #76]	; (8013fb8 <USB_CoreReset+0x64>)
 8013f6a:	4293      	cmp	r3, r2
 8013f6c:	d901      	bls.n	8013f72 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8013f6e:	2303      	movs	r3, #3
 8013f70:	e01b      	b.n	8013faa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	691b      	ldr	r3, [r3, #16]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	daf2      	bge.n	8013f60 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8013f7a:	2300      	movs	r3, #0
 8013f7c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	691b      	ldr	r3, [r3, #16]
 8013f82:	f043 0201 	orr.w	r2, r3, #1
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	3301      	adds	r3, #1
 8013f8e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	4a09      	ldr	r2, [pc, #36]	; (8013fb8 <USB_CoreReset+0x64>)
 8013f94:	4293      	cmp	r3, r2
 8013f96:	d901      	bls.n	8013f9c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013f98:	2303      	movs	r3, #3
 8013f9a:	e006      	b.n	8013faa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	691b      	ldr	r3, [r3, #16]
 8013fa0:	f003 0301 	and.w	r3, r3, #1
 8013fa4:	2b01      	cmp	r3, #1
 8013fa6:	d0f0      	beq.n	8013f8a <USB_CoreReset+0x36>

  return HAL_OK;
 8013fa8:	2300      	movs	r3, #0
}
 8013faa:	4618      	mov	r0, r3
 8013fac:	3714      	adds	r7, #20
 8013fae:	46bd      	mov	sp, r7
 8013fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fb4:	4770      	bx	lr
 8013fb6:	bf00      	nop
 8013fb8:	00030d40 	.word	0x00030d40

08013fbc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013fc0:	4904      	ldr	r1, [pc, #16]	; (8013fd4 <MX_FATFS_Init+0x18>)
 8013fc2:	4805      	ldr	r0, [pc, #20]	; (8013fd8 <MX_FATFS_Init+0x1c>)
 8013fc4:	f002 fa56 	bl	8016474 <FATFS_LinkDriver>
 8013fc8:	4603      	mov	r3, r0
 8013fca:	461a      	mov	r2, r3
 8013fcc:	4b03      	ldr	r3, [pc, #12]	; (8013fdc <MX_FATFS_Init+0x20>)
 8013fce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013fd0:	bf00      	nop
 8013fd2:	bd80      	pop	{r7, pc}
 8013fd4:	24001488 	.word	0x24001488
 8013fd8:	08017ac0 	.word	0x08017ac0
 8013fdc:	24001484 	.word	0x24001484

08013fe0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b082      	sub	sp, #8
 8013fe4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013fea:	f000 f885 	bl	80140f8 <BSP_SD_IsDetected>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	2b01      	cmp	r3, #1
 8013ff2:	d001      	beq.n	8013ff8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013ff4:	2302      	movs	r3, #2
 8013ff6:	e012      	b.n	801401e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8013ff8:	480b      	ldr	r0, [pc, #44]	; (8014028 <BSP_SD_Init+0x48>)
 8013ffa:	f7f8 ff99 	bl	800cf30 <HAL_SD_Init>
 8013ffe:	4603      	mov	r3, r0
 8014000:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8014002:	79fb      	ldrb	r3, [r7, #7]
 8014004:	2b00      	cmp	r3, #0
 8014006:	d109      	bne.n	801401c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014008:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801400c:	4806      	ldr	r0, [pc, #24]	; (8014028 <BSP_SD_Init+0x48>)
 801400e:	f7f9 fe4f 	bl	800dcb0 <HAL_SD_ConfigWideBusOperation>
 8014012:	4603      	mov	r3, r0
 8014014:	2b00      	cmp	r3, #0
 8014016:	d001      	beq.n	801401c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8014018:	2301      	movs	r3, #1
 801401a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801401c:	79fb      	ldrb	r3, [r7, #7]
}
 801401e:	4618      	mov	r0, r3
 8014020:	3708      	adds	r7, #8
 8014022:	46bd      	mov	sp, r7
 8014024:	bd80      	pop	{r7, pc}
 8014026:	bf00      	nop
 8014028:	24000db8 	.word	0x24000db8

0801402c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b086      	sub	sp, #24
 8014030:	af00      	add	r7, sp, #0
 8014032:	60f8      	str	r0, [r7, #12]
 8014034:	60b9      	str	r1, [r7, #8]
 8014036:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8014038:	2300      	movs	r3, #0
 801403a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	68ba      	ldr	r2, [r7, #8]
 8014040:	68f9      	ldr	r1, [r7, #12]
 8014042:	4806      	ldr	r0, [pc, #24]	; (801405c <BSP_SD_ReadBlocks_DMA+0x30>)
 8014044:	f7f9 f894 	bl	800d170 <HAL_SD_ReadBlocks_DMA>
 8014048:	4603      	mov	r3, r0
 801404a:	2b00      	cmp	r3, #0
 801404c:	d001      	beq.n	8014052 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801404e:	2301      	movs	r3, #1
 8014050:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014052:	7dfb      	ldrb	r3, [r7, #23]
}
 8014054:	4618      	mov	r0, r3
 8014056:	3718      	adds	r7, #24
 8014058:	46bd      	mov	sp, r7
 801405a:	bd80      	pop	{r7, pc}
 801405c:	24000db8 	.word	0x24000db8

08014060 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b086      	sub	sp, #24
 8014064:	af00      	add	r7, sp, #0
 8014066:	60f8      	str	r0, [r7, #12]
 8014068:	60b9      	str	r1, [r7, #8]
 801406a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801406c:	2300      	movs	r3, #0
 801406e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	68ba      	ldr	r2, [r7, #8]
 8014074:	68f9      	ldr	r1, [r7, #12]
 8014076:	4806      	ldr	r0, [pc, #24]	; (8014090 <BSP_SD_WriteBlocks_DMA+0x30>)
 8014078:	f7f9 f922 	bl	800d2c0 <HAL_SD_WriteBlocks_DMA>
 801407c:	4603      	mov	r3, r0
 801407e:	2b00      	cmp	r3, #0
 8014080:	d001      	beq.n	8014086 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014082:	2301      	movs	r3, #1
 8014084:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014086:	7dfb      	ldrb	r3, [r7, #23]
}
 8014088:	4618      	mov	r0, r3
 801408a:	3718      	adds	r7, #24
 801408c:	46bd      	mov	sp, r7
 801408e:	bd80      	pop	{r7, pc}
 8014090:	24000db8 	.word	0x24000db8

08014094 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014094:	b580      	push	{r7, lr}
 8014096:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014098:	4805      	ldr	r0, [pc, #20]	; (80140b0 <BSP_SD_GetCardState+0x1c>)
 801409a:	f7f9 ff1b 	bl	800ded4 <HAL_SD_GetCardState>
 801409e:	4603      	mov	r3, r0
 80140a0:	2b04      	cmp	r3, #4
 80140a2:	bf14      	ite	ne
 80140a4:	2301      	movne	r3, #1
 80140a6:	2300      	moveq	r3, #0
 80140a8:	b2db      	uxtb	r3, r3
}
 80140aa:	4618      	mov	r0, r3
 80140ac:	bd80      	pop	{r7, pc}
 80140ae:	bf00      	nop
 80140b0:	24000db8 	.word	0x24000db8

080140b4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80140b4:	b580      	push	{r7, lr}
 80140b6:	b082      	sub	sp, #8
 80140b8:	af00      	add	r7, sp, #0
 80140ba:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80140bc:	6879      	ldr	r1, [r7, #4]
 80140be:	4803      	ldr	r0, [pc, #12]	; (80140cc <BSP_SD_GetCardInfo+0x18>)
 80140c0:	f7f9 fdca 	bl	800dc58 <HAL_SD_GetCardInfo>
}
 80140c4:	bf00      	nop
 80140c6:	3708      	adds	r7, #8
 80140c8:	46bd      	mov	sp, r7
 80140ca:	bd80      	pop	{r7, pc}
 80140cc:	24000db8 	.word	0x24000db8

080140d0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b082      	sub	sp, #8
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80140d8:	f000 f9a0 	bl	801441c <BSP_SD_WriteCpltCallback>
}
 80140dc:	bf00      	nop
 80140de:	3708      	adds	r7, #8
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd80      	pop	{r7, pc}

080140e4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b082      	sub	sp, #8
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80140ec:	f000 f9a2 	bl	8014434 <BSP_SD_ReadCpltCallback>
}
 80140f0:	bf00      	nop
 80140f2:	3708      	adds	r7, #8
 80140f4:	46bd      	mov	sp, r7
 80140f6:	bd80      	pop	{r7, pc}

080140f8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80140f8:	b580      	push	{r7, lr}
 80140fa:	b082      	sub	sp, #8
 80140fc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80140fe:	2301      	movs	r3, #1
 8014100:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8014102:	f000 f80b 	bl	801411c <BSP_PlatformIsDetected>
 8014106:	4603      	mov	r3, r0
 8014108:	2b00      	cmp	r3, #0
 801410a:	d101      	bne.n	8014110 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801410c:	2300      	movs	r3, #0
 801410e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8014110:	79fb      	ldrb	r3, [r7, #7]
 8014112:	b2db      	uxtb	r3, r3
}
 8014114:	4618      	mov	r0, r3
 8014116:	3708      	adds	r7, #8
 8014118:	46bd      	mov	sp, r7
 801411a:	bd80      	pop	{r7, pc}

0801411c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801411c:	b580      	push	{r7, lr}
 801411e:	b082      	sub	sp, #8
 8014120:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8014122:	2301      	movs	r3, #1
 8014124:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8014126:	2104      	movs	r1, #4
 8014128:	4806      	ldr	r0, [pc, #24]	; (8014144 <BSP_PlatformIsDetected+0x28>)
 801412a:	f7f3 feef 	bl	8007f0c <HAL_GPIO_ReadPin>
 801412e:	4603      	mov	r3, r0
 8014130:	2b00      	cmp	r3, #0
 8014132:	d001      	beq.n	8014138 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8014134:	2300      	movs	r3, #0
 8014136:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8014138:	79fb      	ldrb	r3, [r7, #7]
}
 801413a:	4618      	mov	r0, r3
 801413c:	3708      	adds	r7, #8
 801413e:	46bd      	mov	sp, r7
 8014140:	bd80      	pop	{r7, pc}
 8014142:	bf00      	nop
 8014144:	58020400 	.word	0x58020400

08014148 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b084      	sub	sp, #16
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8014150:	f7ef fc36 	bl	80039c0 <HAL_GetTick>
 8014154:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8014156:	e006      	b.n	8014166 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014158:	f7ff ff9c 	bl	8014094 <BSP_SD_GetCardState>
 801415c:	4603      	mov	r3, r0
 801415e:	2b00      	cmp	r3, #0
 8014160:	d101      	bne.n	8014166 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8014162:	2300      	movs	r3, #0
 8014164:	e009      	b.n	801417a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8014166:	f7ef fc2b 	bl	80039c0 <HAL_GetTick>
 801416a:	4602      	mov	r2, r0
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	1ad3      	subs	r3, r2, r3
 8014170:	687a      	ldr	r2, [r7, #4]
 8014172:	429a      	cmp	r2, r3
 8014174:	d8f0      	bhi.n	8014158 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014176:	f04f 33ff 	mov.w	r3, #4294967295
}
 801417a:	4618      	mov	r0, r3
 801417c:	3710      	adds	r7, #16
 801417e:	46bd      	mov	sp, r7
 8014180:	bd80      	pop	{r7, pc}
	...

08014184 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014184:	b580      	push	{r7, lr}
 8014186:	b082      	sub	sp, #8
 8014188:	af00      	add	r7, sp, #0
 801418a:	4603      	mov	r3, r0
 801418c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801418e:	4b0b      	ldr	r3, [pc, #44]	; (80141bc <SD_CheckStatus+0x38>)
 8014190:	2201      	movs	r2, #1
 8014192:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014194:	f7ff ff7e 	bl	8014094 <BSP_SD_GetCardState>
 8014198:	4603      	mov	r3, r0
 801419a:	2b00      	cmp	r3, #0
 801419c:	d107      	bne.n	80141ae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801419e:	4b07      	ldr	r3, [pc, #28]	; (80141bc <SD_CheckStatus+0x38>)
 80141a0:	781b      	ldrb	r3, [r3, #0]
 80141a2:	b2db      	uxtb	r3, r3
 80141a4:	f023 0301 	bic.w	r3, r3, #1
 80141a8:	b2da      	uxtb	r2, r3
 80141aa:	4b04      	ldr	r3, [pc, #16]	; (80141bc <SD_CheckStatus+0x38>)
 80141ac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80141ae:	4b03      	ldr	r3, [pc, #12]	; (80141bc <SD_CheckStatus+0x38>)
 80141b0:	781b      	ldrb	r3, [r3, #0]
 80141b2:	b2db      	uxtb	r3, r3
}
 80141b4:	4618      	mov	r0, r3
 80141b6:	3708      	adds	r7, #8
 80141b8:	46bd      	mov	sp, r7
 80141ba:	bd80      	pop	{r7, pc}
 80141bc:	2400000d 	.word	0x2400000d

080141c0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80141c0:	b580      	push	{r7, lr}
 80141c2:	b082      	sub	sp, #8
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	4603      	mov	r3, r0
 80141c8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80141ca:	f7ff ff09 	bl	8013fe0 <BSP_SD_Init>
 80141ce:	4603      	mov	r3, r0
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d107      	bne.n	80141e4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80141d4:	79fb      	ldrb	r3, [r7, #7]
 80141d6:	4618      	mov	r0, r3
 80141d8:	f7ff ffd4 	bl	8014184 <SD_CheckStatus>
 80141dc:	4603      	mov	r3, r0
 80141de:	461a      	mov	r2, r3
 80141e0:	4b04      	ldr	r3, [pc, #16]	; (80141f4 <SD_initialize+0x34>)
 80141e2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80141e4:	4b03      	ldr	r3, [pc, #12]	; (80141f4 <SD_initialize+0x34>)
 80141e6:	781b      	ldrb	r3, [r3, #0]
 80141e8:	b2db      	uxtb	r3, r3
}
 80141ea:	4618      	mov	r0, r3
 80141ec:	3708      	adds	r7, #8
 80141ee:	46bd      	mov	sp, r7
 80141f0:	bd80      	pop	{r7, pc}
 80141f2:	bf00      	nop
 80141f4:	2400000d 	.word	0x2400000d

080141f8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b082      	sub	sp, #8
 80141fc:	af00      	add	r7, sp, #0
 80141fe:	4603      	mov	r3, r0
 8014200:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014202:	79fb      	ldrb	r3, [r7, #7]
 8014204:	4618      	mov	r0, r3
 8014206:	f7ff ffbd 	bl	8014184 <SD_CheckStatus>
 801420a:	4603      	mov	r3, r0
}
 801420c:	4618      	mov	r0, r3
 801420e:	3708      	adds	r7, #8
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}

08014214 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b086      	sub	sp, #24
 8014218:	af00      	add	r7, sp, #0
 801421a:	60b9      	str	r1, [r7, #8]
 801421c:	607a      	str	r2, [r7, #4]
 801421e:	603b      	str	r3, [r7, #0]
 8014220:	4603      	mov	r3, r0
 8014222:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014224:	2301      	movs	r3, #1
 8014226:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014228:	f247 5030 	movw	r0, #30000	; 0x7530
 801422c:	f7ff ff8c 	bl	8014148 <SD_CheckStatusWithTimeout>
 8014230:	4603      	mov	r3, r0
 8014232:	2b00      	cmp	r3, #0
 8014234:	da01      	bge.n	801423a <SD_read+0x26>
  {
    return res;
 8014236:	7dfb      	ldrb	r3, [r7, #23]
 8014238:	e03b      	b.n	80142b2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801423a:	683a      	ldr	r2, [r7, #0]
 801423c:	6879      	ldr	r1, [r7, #4]
 801423e:	68b8      	ldr	r0, [r7, #8]
 8014240:	f7ff fef4 	bl	801402c <BSP_SD_ReadBlocks_DMA>
 8014244:	4603      	mov	r3, r0
 8014246:	2b00      	cmp	r3, #0
 8014248:	d132      	bne.n	80142b0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801424a:	4b1c      	ldr	r3, [pc, #112]	; (80142bc <SD_read+0xa8>)
 801424c:	2200      	movs	r2, #0
 801424e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8014250:	f7ef fbb6 	bl	80039c0 <HAL_GetTick>
 8014254:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014256:	bf00      	nop
 8014258:	4b18      	ldr	r3, [pc, #96]	; (80142bc <SD_read+0xa8>)
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d108      	bne.n	8014272 <SD_read+0x5e>
 8014260:	f7ef fbae 	bl	80039c0 <HAL_GetTick>
 8014264:	4602      	mov	r2, r0
 8014266:	693b      	ldr	r3, [r7, #16]
 8014268:	1ad3      	subs	r3, r2, r3
 801426a:	f247 522f 	movw	r2, #29999	; 0x752f
 801426e:	4293      	cmp	r3, r2
 8014270:	d9f2      	bls.n	8014258 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8014272:	4b12      	ldr	r3, [pc, #72]	; (80142bc <SD_read+0xa8>)
 8014274:	681b      	ldr	r3, [r3, #0]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d102      	bne.n	8014280 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801427a:	2301      	movs	r3, #1
 801427c:	75fb      	strb	r3, [r7, #23]
 801427e:	e017      	b.n	80142b0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014280:	4b0e      	ldr	r3, [pc, #56]	; (80142bc <SD_read+0xa8>)
 8014282:	2200      	movs	r2, #0
 8014284:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014286:	f7ef fb9b 	bl	80039c0 <HAL_GetTick>
 801428a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801428c:	e007      	b.n	801429e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801428e:	f7ff ff01 	bl	8014094 <BSP_SD_GetCardState>
 8014292:	4603      	mov	r3, r0
 8014294:	2b00      	cmp	r3, #0
 8014296:	d102      	bne.n	801429e <SD_read+0x8a>
          {
            res = RES_OK;
 8014298:	2300      	movs	r3, #0
 801429a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801429c:	e008      	b.n	80142b0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801429e:	f7ef fb8f 	bl	80039c0 <HAL_GetTick>
 80142a2:	4602      	mov	r2, r0
 80142a4:	693b      	ldr	r3, [r7, #16]
 80142a6:	1ad3      	subs	r3, r2, r3
 80142a8:	f247 522f 	movw	r2, #29999	; 0x752f
 80142ac:	4293      	cmp	r3, r2
 80142ae:	d9ee      	bls.n	801428e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80142b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80142b2:	4618      	mov	r0, r3
 80142b4:	3718      	adds	r7, #24
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}
 80142ba:	bf00      	nop
 80142bc:	24001490 	.word	0x24001490

080142c0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	b086      	sub	sp, #24
 80142c4:	af00      	add	r7, sp, #0
 80142c6:	60b9      	str	r1, [r7, #8]
 80142c8:	607a      	str	r2, [r7, #4]
 80142ca:	603b      	str	r3, [r7, #0]
 80142cc:	4603      	mov	r3, r0
 80142ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80142d0:	2301      	movs	r3, #1
 80142d2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80142d4:	4b24      	ldr	r3, [pc, #144]	; (8014368 <SD_write+0xa8>)
 80142d6:	2200      	movs	r2, #0
 80142d8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80142da:	f247 5030 	movw	r0, #30000	; 0x7530
 80142de:	f7ff ff33 	bl	8014148 <SD_CheckStatusWithTimeout>
 80142e2:	4603      	mov	r3, r0
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	da01      	bge.n	80142ec <SD_write+0x2c>
  {
    return res;
 80142e8:	7dfb      	ldrb	r3, [r7, #23]
 80142ea:	e038      	b.n	801435e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80142ec:	683a      	ldr	r2, [r7, #0]
 80142ee:	6879      	ldr	r1, [r7, #4]
 80142f0:	68b8      	ldr	r0, [r7, #8]
 80142f2:	f7ff feb5 	bl	8014060 <BSP_SD_WriteBlocks_DMA>
 80142f6:	4603      	mov	r3, r0
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d12f      	bne.n	801435c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80142fc:	f7ef fb60 	bl	80039c0 <HAL_GetTick>
 8014300:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014302:	bf00      	nop
 8014304:	4b18      	ldr	r3, [pc, #96]	; (8014368 <SD_write+0xa8>)
 8014306:	681b      	ldr	r3, [r3, #0]
 8014308:	2b00      	cmp	r3, #0
 801430a:	d108      	bne.n	801431e <SD_write+0x5e>
 801430c:	f7ef fb58 	bl	80039c0 <HAL_GetTick>
 8014310:	4602      	mov	r2, r0
 8014312:	693b      	ldr	r3, [r7, #16]
 8014314:	1ad3      	subs	r3, r2, r3
 8014316:	f247 522f 	movw	r2, #29999	; 0x752f
 801431a:	4293      	cmp	r3, r2
 801431c:	d9f2      	bls.n	8014304 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 801431e:	4b12      	ldr	r3, [pc, #72]	; (8014368 <SD_write+0xa8>)
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d102      	bne.n	801432c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8014326:	2301      	movs	r3, #1
 8014328:	75fb      	strb	r3, [r7, #23]
 801432a:	e017      	b.n	801435c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801432c:	4b0e      	ldr	r3, [pc, #56]	; (8014368 <SD_write+0xa8>)
 801432e:	2200      	movs	r2, #0
 8014330:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014332:	f7ef fb45 	bl	80039c0 <HAL_GetTick>
 8014336:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014338:	e007      	b.n	801434a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801433a:	f7ff feab 	bl	8014094 <BSP_SD_GetCardState>
 801433e:	4603      	mov	r3, r0
 8014340:	2b00      	cmp	r3, #0
 8014342:	d102      	bne.n	801434a <SD_write+0x8a>
          {
            res = RES_OK;
 8014344:	2300      	movs	r3, #0
 8014346:	75fb      	strb	r3, [r7, #23]
            break;
 8014348:	e008      	b.n	801435c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801434a:	f7ef fb39 	bl	80039c0 <HAL_GetTick>
 801434e:	4602      	mov	r2, r0
 8014350:	693b      	ldr	r3, [r7, #16]
 8014352:	1ad3      	subs	r3, r2, r3
 8014354:	f247 522f 	movw	r2, #29999	; 0x752f
 8014358:	4293      	cmp	r3, r2
 801435a:	d9ee      	bls.n	801433a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801435c:	7dfb      	ldrb	r3, [r7, #23]
}
 801435e:	4618      	mov	r0, r3
 8014360:	3718      	adds	r7, #24
 8014362:	46bd      	mov	sp, r7
 8014364:	bd80      	pop	{r7, pc}
 8014366:	bf00      	nop
 8014368:	2400148c 	.word	0x2400148c

0801436c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b08c      	sub	sp, #48	; 0x30
 8014370:	af00      	add	r7, sp, #0
 8014372:	4603      	mov	r3, r0
 8014374:	603a      	str	r2, [r7, #0]
 8014376:	71fb      	strb	r3, [r7, #7]
 8014378:	460b      	mov	r3, r1
 801437a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801437c:	2301      	movs	r3, #1
 801437e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014382:	4b25      	ldr	r3, [pc, #148]	; (8014418 <SD_ioctl+0xac>)
 8014384:	781b      	ldrb	r3, [r3, #0]
 8014386:	b2db      	uxtb	r3, r3
 8014388:	f003 0301 	and.w	r3, r3, #1
 801438c:	2b00      	cmp	r3, #0
 801438e:	d001      	beq.n	8014394 <SD_ioctl+0x28>
 8014390:	2303      	movs	r3, #3
 8014392:	e03c      	b.n	801440e <SD_ioctl+0xa2>

  switch (cmd)
 8014394:	79bb      	ldrb	r3, [r7, #6]
 8014396:	2b03      	cmp	r3, #3
 8014398:	d834      	bhi.n	8014404 <SD_ioctl+0x98>
 801439a:	a201      	add	r2, pc, #4	; (adr r2, 80143a0 <SD_ioctl+0x34>)
 801439c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143a0:	080143b1 	.word	0x080143b1
 80143a4:	080143b9 	.word	0x080143b9
 80143a8:	080143d1 	.word	0x080143d1
 80143ac:	080143eb 	.word	0x080143eb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80143b0:	2300      	movs	r3, #0
 80143b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80143b6:	e028      	b.n	801440a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80143b8:	f107 0308 	add.w	r3, r7, #8
 80143bc:	4618      	mov	r0, r3
 80143be:	f7ff fe79 	bl	80140b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80143c2:	6a3a      	ldr	r2, [r7, #32]
 80143c4:	683b      	ldr	r3, [r7, #0]
 80143c6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80143c8:	2300      	movs	r3, #0
 80143ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80143ce:	e01c      	b.n	801440a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80143d0:	f107 0308 	add.w	r3, r7, #8
 80143d4:	4618      	mov	r0, r3
 80143d6:	f7ff fe6d 	bl	80140b4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80143da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143dc:	b29a      	uxth	r2, r3
 80143de:	683b      	ldr	r3, [r7, #0]
 80143e0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80143e2:	2300      	movs	r3, #0
 80143e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80143e8:	e00f      	b.n	801440a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80143ea:	f107 0308 	add.w	r3, r7, #8
 80143ee:	4618      	mov	r0, r3
 80143f0:	f7ff fe60 	bl	80140b4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80143f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80143f6:	0a5a      	lsrs	r2, r3, #9
 80143f8:	683b      	ldr	r3, [r7, #0]
 80143fa:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80143fc:	2300      	movs	r3, #0
 80143fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014402:	e002      	b.n	801440a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014404:	2304      	movs	r3, #4
 8014406:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801440a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801440e:	4618      	mov	r0, r3
 8014410:	3730      	adds	r7, #48	; 0x30
 8014412:	46bd      	mov	sp, r7
 8014414:	bd80      	pop	{r7, pc}
 8014416:	bf00      	nop
 8014418:	2400000d 	.word	0x2400000d

0801441c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801441c:	b480      	push	{r7}
 801441e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8014420:	4b03      	ldr	r3, [pc, #12]	; (8014430 <BSP_SD_WriteCpltCallback+0x14>)
 8014422:	2201      	movs	r2, #1
 8014424:	601a      	str	r2, [r3, #0]
}
 8014426:	bf00      	nop
 8014428:	46bd      	mov	sp, r7
 801442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442e:	4770      	bx	lr
 8014430:	2400148c 	.word	0x2400148c

08014434 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014434:	b480      	push	{r7}
 8014436:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014438:	4b03      	ldr	r3, [pc, #12]	; (8014448 <BSP_SD_ReadCpltCallback+0x14>)
 801443a:	2201      	movs	r2, #1
 801443c:	601a      	str	r2, [r3, #0]
}
 801443e:	bf00      	nop
 8014440:	46bd      	mov	sp, r7
 8014442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014446:	4770      	bx	lr
 8014448:	24001490 	.word	0x24001490

0801444c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801444c:	b580      	push	{r7, lr}
 801444e:	b084      	sub	sp, #16
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
 8014454:	460b      	mov	r3, r1
 8014456:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014458:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801445c:	f002 fcea 	bl	8016e34 <USBD_static_malloc>
 8014460:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d109      	bne.n	801447c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	32b0      	adds	r2, #176	; 0xb0
 8014472:	2100      	movs	r1, #0
 8014474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014478:	2302      	movs	r3, #2
 801447a:	e0d4      	b.n	8014626 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801447c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014480:	2100      	movs	r1, #0
 8014482:	68f8      	ldr	r0, [r7, #12]
 8014484:	f002 fd3a 	bl	8016efc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801448e:	687b      	ldr	r3, [r7, #4]
 8014490:	32b0      	adds	r2, #176	; 0xb0
 8014492:	68f9      	ldr	r1, [r7, #12]
 8014494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014498:	687b      	ldr	r3, [r7, #4]
 801449a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	32b0      	adds	r2, #176	; 0xb0
 80144a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	7c1b      	ldrb	r3, [r3, #16]
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d138      	bne.n	8014526 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80144b4:	4b5e      	ldr	r3, [pc, #376]	; (8014630 <USBD_CDC_Init+0x1e4>)
 80144b6:	7819      	ldrb	r1, [r3, #0]
 80144b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80144bc:	2202      	movs	r2, #2
 80144be:	6878      	ldr	r0, [r7, #4]
 80144c0:	f002 fb95 	bl	8016bee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80144c4:	4b5a      	ldr	r3, [pc, #360]	; (8014630 <USBD_CDC_Init+0x1e4>)
 80144c6:	781b      	ldrb	r3, [r3, #0]
 80144c8:	f003 020f 	and.w	r2, r3, #15
 80144cc:	6879      	ldr	r1, [r7, #4]
 80144ce:	4613      	mov	r3, r2
 80144d0:	009b      	lsls	r3, r3, #2
 80144d2:	4413      	add	r3, r2
 80144d4:	009b      	lsls	r3, r3, #2
 80144d6:	440b      	add	r3, r1
 80144d8:	3324      	adds	r3, #36	; 0x24
 80144da:	2201      	movs	r2, #1
 80144dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80144de:	4b55      	ldr	r3, [pc, #340]	; (8014634 <USBD_CDC_Init+0x1e8>)
 80144e0:	7819      	ldrb	r1, [r3, #0]
 80144e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80144e6:	2202      	movs	r2, #2
 80144e8:	6878      	ldr	r0, [r7, #4]
 80144ea:	f002 fb80 	bl	8016bee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80144ee:	4b51      	ldr	r3, [pc, #324]	; (8014634 <USBD_CDC_Init+0x1e8>)
 80144f0:	781b      	ldrb	r3, [r3, #0]
 80144f2:	f003 020f 	and.w	r2, r3, #15
 80144f6:	6879      	ldr	r1, [r7, #4]
 80144f8:	4613      	mov	r3, r2
 80144fa:	009b      	lsls	r3, r3, #2
 80144fc:	4413      	add	r3, r2
 80144fe:	009b      	lsls	r3, r3, #2
 8014500:	440b      	add	r3, r1
 8014502:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014506:	2201      	movs	r2, #1
 8014508:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801450a:	4b4b      	ldr	r3, [pc, #300]	; (8014638 <USBD_CDC_Init+0x1ec>)
 801450c:	781b      	ldrb	r3, [r3, #0]
 801450e:	f003 020f 	and.w	r2, r3, #15
 8014512:	6879      	ldr	r1, [r7, #4]
 8014514:	4613      	mov	r3, r2
 8014516:	009b      	lsls	r3, r3, #2
 8014518:	4413      	add	r3, r2
 801451a:	009b      	lsls	r3, r3, #2
 801451c:	440b      	add	r3, r1
 801451e:	3326      	adds	r3, #38	; 0x26
 8014520:	2210      	movs	r2, #16
 8014522:	801a      	strh	r2, [r3, #0]
 8014524:	e035      	b.n	8014592 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014526:	4b42      	ldr	r3, [pc, #264]	; (8014630 <USBD_CDC_Init+0x1e4>)
 8014528:	7819      	ldrb	r1, [r3, #0]
 801452a:	2340      	movs	r3, #64	; 0x40
 801452c:	2202      	movs	r2, #2
 801452e:	6878      	ldr	r0, [r7, #4]
 8014530:	f002 fb5d 	bl	8016bee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014534:	4b3e      	ldr	r3, [pc, #248]	; (8014630 <USBD_CDC_Init+0x1e4>)
 8014536:	781b      	ldrb	r3, [r3, #0]
 8014538:	f003 020f 	and.w	r2, r3, #15
 801453c:	6879      	ldr	r1, [r7, #4]
 801453e:	4613      	mov	r3, r2
 8014540:	009b      	lsls	r3, r3, #2
 8014542:	4413      	add	r3, r2
 8014544:	009b      	lsls	r3, r3, #2
 8014546:	440b      	add	r3, r1
 8014548:	3324      	adds	r3, #36	; 0x24
 801454a:	2201      	movs	r2, #1
 801454c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801454e:	4b39      	ldr	r3, [pc, #228]	; (8014634 <USBD_CDC_Init+0x1e8>)
 8014550:	7819      	ldrb	r1, [r3, #0]
 8014552:	2340      	movs	r3, #64	; 0x40
 8014554:	2202      	movs	r2, #2
 8014556:	6878      	ldr	r0, [r7, #4]
 8014558:	f002 fb49 	bl	8016bee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801455c:	4b35      	ldr	r3, [pc, #212]	; (8014634 <USBD_CDC_Init+0x1e8>)
 801455e:	781b      	ldrb	r3, [r3, #0]
 8014560:	f003 020f 	and.w	r2, r3, #15
 8014564:	6879      	ldr	r1, [r7, #4]
 8014566:	4613      	mov	r3, r2
 8014568:	009b      	lsls	r3, r3, #2
 801456a:	4413      	add	r3, r2
 801456c:	009b      	lsls	r3, r3, #2
 801456e:	440b      	add	r3, r1
 8014570:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014574:	2201      	movs	r2, #1
 8014576:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014578:	4b2f      	ldr	r3, [pc, #188]	; (8014638 <USBD_CDC_Init+0x1ec>)
 801457a:	781b      	ldrb	r3, [r3, #0]
 801457c:	f003 020f 	and.w	r2, r3, #15
 8014580:	6879      	ldr	r1, [r7, #4]
 8014582:	4613      	mov	r3, r2
 8014584:	009b      	lsls	r3, r3, #2
 8014586:	4413      	add	r3, r2
 8014588:	009b      	lsls	r3, r3, #2
 801458a:	440b      	add	r3, r1
 801458c:	3326      	adds	r3, #38	; 0x26
 801458e:	2210      	movs	r2, #16
 8014590:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014592:	4b29      	ldr	r3, [pc, #164]	; (8014638 <USBD_CDC_Init+0x1ec>)
 8014594:	7819      	ldrb	r1, [r3, #0]
 8014596:	2308      	movs	r3, #8
 8014598:	2203      	movs	r2, #3
 801459a:	6878      	ldr	r0, [r7, #4]
 801459c:	f002 fb27 	bl	8016bee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80145a0:	4b25      	ldr	r3, [pc, #148]	; (8014638 <USBD_CDC_Init+0x1ec>)
 80145a2:	781b      	ldrb	r3, [r3, #0]
 80145a4:	f003 020f 	and.w	r2, r3, #15
 80145a8:	6879      	ldr	r1, [r7, #4]
 80145aa:	4613      	mov	r3, r2
 80145ac:	009b      	lsls	r3, r3, #2
 80145ae:	4413      	add	r3, r2
 80145b0:	009b      	lsls	r3, r3, #2
 80145b2:	440b      	add	r3, r1
 80145b4:	3324      	adds	r3, #36	; 0x24
 80145b6:	2201      	movs	r2, #1
 80145b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	2200      	movs	r2, #0
 80145be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80145c8:	687a      	ldr	r2, [r7, #4]
 80145ca:	33b0      	adds	r3, #176	; 0xb0
 80145cc:	009b      	lsls	r3, r3, #2
 80145ce:	4413      	add	r3, r2
 80145d0:	685b      	ldr	r3, [r3, #4]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	2200      	movs	r2, #0
 80145da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	2200      	movs	r2, #0
 80145e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d101      	bne.n	80145f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80145f0:	2302      	movs	r3, #2
 80145f2:	e018      	b.n	8014626 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	7c1b      	ldrb	r3, [r3, #16]
 80145f8:	2b00      	cmp	r3, #0
 80145fa:	d10a      	bne.n	8014612 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80145fc:	4b0d      	ldr	r3, [pc, #52]	; (8014634 <USBD_CDC_Init+0x1e8>)
 80145fe:	7819      	ldrb	r1, [r3, #0]
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014606:	f44f 7300 	mov.w	r3, #512	; 0x200
 801460a:	6878      	ldr	r0, [r7, #4]
 801460c:	f002 fbde 	bl	8016dcc <USBD_LL_PrepareReceive>
 8014610:	e008      	b.n	8014624 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014612:	4b08      	ldr	r3, [pc, #32]	; (8014634 <USBD_CDC_Init+0x1e8>)
 8014614:	7819      	ldrb	r1, [r3, #0]
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801461c:	2340      	movs	r3, #64	; 0x40
 801461e:	6878      	ldr	r0, [r7, #4]
 8014620:	f002 fbd4 	bl	8016dcc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014624:	2300      	movs	r3, #0
}
 8014626:	4618      	mov	r0, r3
 8014628:	3710      	adds	r7, #16
 801462a:	46bd      	mov	sp, r7
 801462c:	bd80      	pop	{r7, pc}
 801462e:	bf00      	nop
 8014630:	24000097 	.word	0x24000097
 8014634:	24000098 	.word	0x24000098
 8014638:	24000099 	.word	0x24000099

0801463c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801463c:	b580      	push	{r7, lr}
 801463e:	b082      	sub	sp, #8
 8014640:	af00      	add	r7, sp, #0
 8014642:	6078      	str	r0, [r7, #4]
 8014644:	460b      	mov	r3, r1
 8014646:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014648:	4b3a      	ldr	r3, [pc, #232]	; (8014734 <USBD_CDC_DeInit+0xf8>)
 801464a:	781b      	ldrb	r3, [r3, #0]
 801464c:	4619      	mov	r1, r3
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f002 faf3 	bl	8016c3a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014654:	4b37      	ldr	r3, [pc, #220]	; (8014734 <USBD_CDC_DeInit+0xf8>)
 8014656:	781b      	ldrb	r3, [r3, #0]
 8014658:	f003 020f 	and.w	r2, r3, #15
 801465c:	6879      	ldr	r1, [r7, #4]
 801465e:	4613      	mov	r3, r2
 8014660:	009b      	lsls	r3, r3, #2
 8014662:	4413      	add	r3, r2
 8014664:	009b      	lsls	r3, r3, #2
 8014666:	440b      	add	r3, r1
 8014668:	3324      	adds	r3, #36	; 0x24
 801466a:	2200      	movs	r2, #0
 801466c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801466e:	4b32      	ldr	r3, [pc, #200]	; (8014738 <USBD_CDC_DeInit+0xfc>)
 8014670:	781b      	ldrb	r3, [r3, #0]
 8014672:	4619      	mov	r1, r3
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	f002 fae0 	bl	8016c3a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801467a:	4b2f      	ldr	r3, [pc, #188]	; (8014738 <USBD_CDC_DeInit+0xfc>)
 801467c:	781b      	ldrb	r3, [r3, #0]
 801467e:	f003 020f 	and.w	r2, r3, #15
 8014682:	6879      	ldr	r1, [r7, #4]
 8014684:	4613      	mov	r3, r2
 8014686:	009b      	lsls	r3, r3, #2
 8014688:	4413      	add	r3, r2
 801468a:	009b      	lsls	r3, r3, #2
 801468c:	440b      	add	r3, r1
 801468e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014692:	2200      	movs	r2, #0
 8014694:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014696:	4b29      	ldr	r3, [pc, #164]	; (801473c <USBD_CDC_DeInit+0x100>)
 8014698:	781b      	ldrb	r3, [r3, #0]
 801469a:	4619      	mov	r1, r3
 801469c:	6878      	ldr	r0, [r7, #4]
 801469e:	f002 facc 	bl	8016c3a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80146a2:	4b26      	ldr	r3, [pc, #152]	; (801473c <USBD_CDC_DeInit+0x100>)
 80146a4:	781b      	ldrb	r3, [r3, #0]
 80146a6:	f003 020f 	and.w	r2, r3, #15
 80146aa:	6879      	ldr	r1, [r7, #4]
 80146ac:	4613      	mov	r3, r2
 80146ae:	009b      	lsls	r3, r3, #2
 80146b0:	4413      	add	r3, r2
 80146b2:	009b      	lsls	r3, r3, #2
 80146b4:	440b      	add	r3, r1
 80146b6:	3324      	adds	r3, #36	; 0x24
 80146b8:	2200      	movs	r2, #0
 80146ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80146bc:	4b1f      	ldr	r3, [pc, #124]	; (801473c <USBD_CDC_DeInit+0x100>)
 80146be:	781b      	ldrb	r3, [r3, #0]
 80146c0:	f003 020f 	and.w	r2, r3, #15
 80146c4:	6879      	ldr	r1, [r7, #4]
 80146c6:	4613      	mov	r3, r2
 80146c8:	009b      	lsls	r3, r3, #2
 80146ca:	4413      	add	r3, r2
 80146cc:	009b      	lsls	r3, r3, #2
 80146ce:	440b      	add	r3, r1
 80146d0:	3326      	adds	r3, #38	; 0x26
 80146d2:	2200      	movs	r2, #0
 80146d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	32b0      	adds	r2, #176	; 0xb0
 80146e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80146e4:	2b00      	cmp	r3, #0
 80146e6:	d01f      	beq.n	8014728 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80146e8:	687b      	ldr	r3, [r7, #4]
 80146ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80146ee:	687a      	ldr	r2, [r7, #4]
 80146f0:	33b0      	adds	r3, #176	; 0xb0
 80146f2:	009b      	lsls	r3, r3, #2
 80146f4:	4413      	add	r3, r2
 80146f6:	685b      	ldr	r3, [r3, #4]
 80146f8:	685b      	ldr	r3, [r3, #4]
 80146fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	32b0      	adds	r2, #176	; 0xb0
 8014706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801470a:	4618      	mov	r0, r3
 801470c:	f002 fba0 	bl	8016e50 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	32b0      	adds	r2, #176	; 0xb0
 801471a:	2100      	movs	r1, #0
 801471c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	2200      	movs	r2, #0
 8014724:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014728:	2300      	movs	r3, #0
}
 801472a:	4618      	mov	r0, r3
 801472c:	3708      	adds	r7, #8
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}
 8014732:	bf00      	nop
 8014734:	24000097 	.word	0x24000097
 8014738:	24000098 	.word	0x24000098
 801473c:	24000099 	.word	0x24000099

08014740 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b086      	sub	sp, #24
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
 8014748:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	32b0      	adds	r2, #176	; 0xb0
 8014754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014758:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801475a:	2300      	movs	r3, #0
 801475c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 801475e:	2300      	movs	r3, #0
 8014760:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014762:	2300      	movs	r3, #0
 8014764:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014766:	693b      	ldr	r3, [r7, #16]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d101      	bne.n	8014770 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801476c:	2303      	movs	r3, #3
 801476e:	e0bf      	b.n	80148f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014770:	683b      	ldr	r3, [r7, #0]
 8014772:	781b      	ldrb	r3, [r3, #0]
 8014774:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014778:	2b00      	cmp	r3, #0
 801477a:	d050      	beq.n	801481e <USBD_CDC_Setup+0xde>
 801477c:	2b20      	cmp	r3, #32
 801477e:	f040 80af 	bne.w	80148e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014782:	683b      	ldr	r3, [r7, #0]
 8014784:	88db      	ldrh	r3, [r3, #6]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d03a      	beq.n	8014800 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801478a:	683b      	ldr	r3, [r7, #0]
 801478c:	781b      	ldrb	r3, [r3, #0]
 801478e:	b25b      	sxtb	r3, r3
 8014790:	2b00      	cmp	r3, #0
 8014792:	da1b      	bge.n	80147cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801479a:	687a      	ldr	r2, [r7, #4]
 801479c:	33b0      	adds	r3, #176	; 0xb0
 801479e:	009b      	lsls	r3, r3, #2
 80147a0:	4413      	add	r3, r2
 80147a2:	685b      	ldr	r3, [r3, #4]
 80147a4:	689b      	ldr	r3, [r3, #8]
 80147a6:	683a      	ldr	r2, [r7, #0]
 80147a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80147aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80147ac:	683a      	ldr	r2, [r7, #0]
 80147ae:	88d2      	ldrh	r2, [r2, #6]
 80147b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80147b2:	683b      	ldr	r3, [r7, #0]
 80147b4:	88db      	ldrh	r3, [r3, #6]
 80147b6:	2b07      	cmp	r3, #7
 80147b8:	bf28      	it	cs
 80147ba:	2307      	movcs	r3, #7
 80147bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80147be:	693b      	ldr	r3, [r7, #16]
 80147c0:	89fa      	ldrh	r2, [r7, #14]
 80147c2:	4619      	mov	r1, r3
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f001 fd89 	bl	80162dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80147ca:	e090      	b.n	80148ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80147cc:	683b      	ldr	r3, [r7, #0]
 80147ce:	785a      	ldrb	r2, [r3, #1]
 80147d0:	693b      	ldr	r3, [r7, #16]
 80147d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80147d6:	683b      	ldr	r3, [r7, #0]
 80147d8:	88db      	ldrh	r3, [r3, #6]
 80147da:	2b3f      	cmp	r3, #63	; 0x3f
 80147dc:	d803      	bhi.n	80147e6 <USBD_CDC_Setup+0xa6>
 80147de:	683b      	ldr	r3, [r7, #0]
 80147e0:	88db      	ldrh	r3, [r3, #6]
 80147e2:	b2da      	uxtb	r2, r3
 80147e4:	e000      	b.n	80147e8 <USBD_CDC_Setup+0xa8>
 80147e6:	2240      	movs	r2, #64	; 0x40
 80147e8:	693b      	ldr	r3, [r7, #16]
 80147ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80147ee:	6939      	ldr	r1, [r7, #16]
 80147f0:	693b      	ldr	r3, [r7, #16]
 80147f2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80147f6:	461a      	mov	r2, r3
 80147f8:	6878      	ldr	r0, [r7, #4]
 80147fa:	f001 fd9b 	bl	8016334 <USBD_CtlPrepareRx>
      break;
 80147fe:	e076      	b.n	80148ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014806:	687a      	ldr	r2, [r7, #4]
 8014808:	33b0      	adds	r3, #176	; 0xb0
 801480a:	009b      	lsls	r3, r3, #2
 801480c:	4413      	add	r3, r2
 801480e:	685b      	ldr	r3, [r3, #4]
 8014810:	689b      	ldr	r3, [r3, #8]
 8014812:	683a      	ldr	r2, [r7, #0]
 8014814:	7850      	ldrb	r0, [r2, #1]
 8014816:	2200      	movs	r2, #0
 8014818:	6839      	ldr	r1, [r7, #0]
 801481a:	4798      	blx	r3
      break;
 801481c:	e067      	b.n	80148ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801481e:	683b      	ldr	r3, [r7, #0]
 8014820:	785b      	ldrb	r3, [r3, #1]
 8014822:	2b0b      	cmp	r3, #11
 8014824:	d851      	bhi.n	80148ca <USBD_CDC_Setup+0x18a>
 8014826:	a201      	add	r2, pc, #4	; (adr r2, 801482c <USBD_CDC_Setup+0xec>)
 8014828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801482c:	0801485d 	.word	0x0801485d
 8014830:	080148d9 	.word	0x080148d9
 8014834:	080148cb 	.word	0x080148cb
 8014838:	080148cb 	.word	0x080148cb
 801483c:	080148cb 	.word	0x080148cb
 8014840:	080148cb 	.word	0x080148cb
 8014844:	080148cb 	.word	0x080148cb
 8014848:	080148cb 	.word	0x080148cb
 801484c:	080148cb 	.word	0x080148cb
 8014850:	080148cb 	.word	0x080148cb
 8014854:	08014887 	.word	0x08014887
 8014858:	080148b1 	.word	0x080148b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014862:	b2db      	uxtb	r3, r3
 8014864:	2b03      	cmp	r3, #3
 8014866:	d107      	bne.n	8014878 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014868:	f107 030a 	add.w	r3, r7, #10
 801486c:	2202      	movs	r2, #2
 801486e:	4619      	mov	r1, r3
 8014870:	6878      	ldr	r0, [r7, #4]
 8014872:	f001 fd33 	bl	80162dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014876:	e032      	b.n	80148de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8014878:	6839      	ldr	r1, [r7, #0]
 801487a:	6878      	ldr	r0, [r7, #4]
 801487c:	f001 fcbd 	bl	80161fa <USBD_CtlError>
            ret = USBD_FAIL;
 8014880:	2303      	movs	r3, #3
 8014882:	75fb      	strb	r3, [r7, #23]
          break;
 8014884:	e02b      	b.n	80148de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801488c:	b2db      	uxtb	r3, r3
 801488e:	2b03      	cmp	r3, #3
 8014890:	d107      	bne.n	80148a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014892:	f107 030d 	add.w	r3, r7, #13
 8014896:	2201      	movs	r2, #1
 8014898:	4619      	mov	r1, r3
 801489a:	6878      	ldr	r0, [r7, #4]
 801489c:	f001 fd1e 	bl	80162dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80148a0:	e01d      	b.n	80148de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80148a2:	6839      	ldr	r1, [r7, #0]
 80148a4:	6878      	ldr	r0, [r7, #4]
 80148a6:	f001 fca8 	bl	80161fa <USBD_CtlError>
            ret = USBD_FAIL;
 80148aa:	2303      	movs	r3, #3
 80148ac:	75fb      	strb	r3, [r7, #23]
          break;
 80148ae:	e016      	b.n	80148de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148b6:	b2db      	uxtb	r3, r3
 80148b8:	2b03      	cmp	r3, #3
 80148ba:	d00f      	beq.n	80148dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80148bc:	6839      	ldr	r1, [r7, #0]
 80148be:	6878      	ldr	r0, [r7, #4]
 80148c0:	f001 fc9b 	bl	80161fa <USBD_CtlError>
            ret = USBD_FAIL;
 80148c4:	2303      	movs	r3, #3
 80148c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80148c8:	e008      	b.n	80148dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80148ca:	6839      	ldr	r1, [r7, #0]
 80148cc:	6878      	ldr	r0, [r7, #4]
 80148ce:	f001 fc94 	bl	80161fa <USBD_CtlError>
          ret = USBD_FAIL;
 80148d2:	2303      	movs	r3, #3
 80148d4:	75fb      	strb	r3, [r7, #23]
          break;
 80148d6:	e002      	b.n	80148de <USBD_CDC_Setup+0x19e>
          break;
 80148d8:	bf00      	nop
 80148da:	e008      	b.n	80148ee <USBD_CDC_Setup+0x1ae>
          break;
 80148dc:	bf00      	nop
      }
      break;
 80148de:	e006      	b.n	80148ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80148e0:	6839      	ldr	r1, [r7, #0]
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f001 fc89 	bl	80161fa <USBD_CtlError>
      ret = USBD_FAIL;
 80148e8:	2303      	movs	r3, #3
 80148ea:	75fb      	strb	r3, [r7, #23]
      break;
 80148ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80148ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80148f0:	4618      	mov	r0, r3
 80148f2:	3718      	adds	r7, #24
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}

080148f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b084      	sub	sp, #16
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
 8014900:	460b      	mov	r3, r1
 8014902:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801490a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	32b0      	adds	r2, #176	; 0xb0
 8014916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d101      	bne.n	8014922 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 801491e:	2303      	movs	r3, #3
 8014920:	e065      	b.n	80149ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	32b0      	adds	r2, #176	; 0xb0
 801492c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014930:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014932:	78fb      	ldrb	r3, [r7, #3]
 8014934:	f003 020f 	and.w	r2, r3, #15
 8014938:	6879      	ldr	r1, [r7, #4]
 801493a:	4613      	mov	r3, r2
 801493c:	009b      	lsls	r3, r3, #2
 801493e:	4413      	add	r3, r2
 8014940:	009b      	lsls	r3, r3, #2
 8014942:	440b      	add	r3, r1
 8014944:	3318      	adds	r3, #24
 8014946:	681b      	ldr	r3, [r3, #0]
 8014948:	2b00      	cmp	r3, #0
 801494a:	d02f      	beq.n	80149ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 801494c:	78fb      	ldrb	r3, [r7, #3]
 801494e:	f003 020f 	and.w	r2, r3, #15
 8014952:	6879      	ldr	r1, [r7, #4]
 8014954:	4613      	mov	r3, r2
 8014956:	009b      	lsls	r3, r3, #2
 8014958:	4413      	add	r3, r2
 801495a:	009b      	lsls	r3, r3, #2
 801495c:	440b      	add	r3, r1
 801495e:	3318      	adds	r3, #24
 8014960:	681a      	ldr	r2, [r3, #0]
 8014962:	78fb      	ldrb	r3, [r7, #3]
 8014964:	f003 010f 	and.w	r1, r3, #15
 8014968:	68f8      	ldr	r0, [r7, #12]
 801496a:	460b      	mov	r3, r1
 801496c:	00db      	lsls	r3, r3, #3
 801496e:	440b      	add	r3, r1
 8014970:	009b      	lsls	r3, r3, #2
 8014972:	4403      	add	r3, r0
 8014974:	3344      	adds	r3, #68	; 0x44
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	fbb2 f1f3 	udiv	r1, r2, r3
 801497c:	fb01 f303 	mul.w	r3, r1, r3
 8014980:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8014982:	2b00      	cmp	r3, #0
 8014984:	d112      	bne.n	80149ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8014986:	78fb      	ldrb	r3, [r7, #3]
 8014988:	f003 020f 	and.w	r2, r3, #15
 801498c:	6879      	ldr	r1, [r7, #4]
 801498e:	4613      	mov	r3, r2
 8014990:	009b      	lsls	r3, r3, #2
 8014992:	4413      	add	r3, r2
 8014994:	009b      	lsls	r3, r3, #2
 8014996:	440b      	add	r3, r1
 8014998:	3318      	adds	r3, #24
 801499a:	2200      	movs	r2, #0
 801499c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801499e:	78f9      	ldrb	r1, [r7, #3]
 80149a0:	2300      	movs	r3, #0
 80149a2:	2200      	movs	r2, #0
 80149a4:	6878      	ldr	r0, [r7, #4]
 80149a6:	f002 f9f0 	bl	8016d8a <USBD_LL_Transmit>
 80149aa:	e01f      	b.n	80149ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80149ac:	68bb      	ldr	r3, [r7, #8]
 80149ae:	2200      	movs	r2, #0
 80149b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149ba:	687a      	ldr	r2, [r7, #4]
 80149bc:	33b0      	adds	r3, #176	; 0xb0
 80149be:	009b      	lsls	r3, r3, #2
 80149c0:	4413      	add	r3, r2
 80149c2:	685b      	ldr	r3, [r3, #4]
 80149c4:	691b      	ldr	r3, [r3, #16]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d010      	beq.n	80149ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80149d0:	687a      	ldr	r2, [r7, #4]
 80149d2:	33b0      	adds	r3, #176	; 0xb0
 80149d4:	009b      	lsls	r3, r3, #2
 80149d6:	4413      	add	r3, r2
 80149d8:	685b      	ldr	r3, [r3, #4]
 80149da:	691b      	ldr	r3, [r3, #16]
 80149dc:	68ba      	ldr	r2, [r7, #8]
 80149de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80149e2:	68ba      	ldr	r2, [r7, #8]
 80149e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80149e8:	78fa      	ldrb	r2, [r7, #3]
 80149ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80149ec:	2300      	movs	r3, #0
}
 80149ee:	4618      	mov	r0, r3
 80149f0:	3710      	adds	r7, #16
 80149f2:	46bd      	mov	sp, r7
 80149f4:	bd80      	pop	{r7, pc}

080149f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80149f6:	b580      	push	{r7, lr}
 80149f8:	b084      	sub	sp, #16
 80149fa:	af00      	add	r7, sp, #0
 80149fc:	6078      	str	r0, [r7, #4]
 80149fe:	460b      	mov	r3, r1
 8014a00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	32b0      	adds	r2, #176	; 0xb0
 8014a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	32b0      	adds	r2, #176	; 0xb0
 8014a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d101      	bne.n	8014a28 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8014a24:	2303      	movs	r3, #3
 8014a26:	e01a      	b.n	8014a5e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8014a28:	78fb      	ldrb	r3, [r7, #3]
 8014a2a:	4619      	mov	r1, r3
 8014a2c:	6878      	ldr	r0, [r7, #4]
 8014a2e:	f002 f9ee 	bl	8016e0e <USBD_LL_GetRxDataSize>
 8014a32:	4602      	mov	r2, r0
 8014a34:	68fb      	ldr	r3, [r7, #12]
 8014a36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a40:	687a      	ldr	r2, [r7, #4]
 8014a42:	33b0      	adds	r3, #176	; 0xb0
 8014a44:	009b      	lsls	r3, r3, #2
 8014a46:	4413      	add	r3, r2
 8014a48:	685b      	ldr	r3, [r3, #4]
 8014a4a:	68db      	ldr	r3, [r3, #12]
 8014a4c:	68fa      	ldr	r2, [r7, #12]
 8014a4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8014a52:	68fa      	ldr	r2, [r7, #12]
 8014a54:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014a58:	4611      	mov	r1, r2
 8014a5a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014a5c:	2300      	movs	r3, #0
}
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3710      	adds	r7, #16
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}

08014a66 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014a66:	b580      	push	{r7, lr}
 8014a68:	b084      	sub	sp, #16
 8014a6a:	af00      	add	r7, sp, #0
 8014a6c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	32b0      	adds	r2, #176	; 0xb0
 8014a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014a7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d101      	bne.n	8014a88 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014a84:	2303      	movs	r3, #3
 8014a86:	e025      	b.n	8014ad4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014a8e:	687a      	ldr	r2, [r7, #4]
 8014a90:	33b0      	adds	r3, #176	; 0xb0
 8014a92:	009b      	lsls	r3, r3, #2
 8014a94:	4413      	add	r3, r2
 8014a96:	685b      	ldr	r3, [r3, #4]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d01a      	beq.n	8014ad2 <USBD_CDC_EP0_RxReady+0x6c>
 8014a9c:	68fb      	ldr	r3, [r7, #12]
 8014a9e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8014aa2:	2bff      	cmp	r3, #255	; 0xff
 8014aa4:	d015      	beq.n	8014ad2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014aac:	687a      	ldr	r2, [r7, #4]
 8014aae:	33b0      	adds	r3, #176	; 0xb0
 8014ab0:	009b      	lsls	r3, r3, #2
 8014ab2:	4413      	add	r3, r2
 8014ab4:	685b      	ldr	r3, [r3, #4]
 8014ab6:	689b      	ldr	r3, [r3, #8]
 8014ab8:	68fa      	ldr	r2, [r7, #12]
 8014aba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8014abe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8014ac0:	68fa      	ldr	r2, [r7, #12]
 8014ac2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8014ac6:	b292      	uxth	r2, r2
 8014ac8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8014aca:	68fb      	ldr	r3, [r7, #12]
 8014acc:	22ff      	movs	r2, #255	; 0xff
 8014ace:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8014ad2:	2300      	movs	r3, #0
}
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	3710      	adds	r7, #16
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	bd80      	pop	{r7, pc}

08014adc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b086      	sub	sp, #24
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014ae4:	2182      	movs	r1, #130	; 0x82
 8014ae6:	4818      	ldr	r0, [pc, #96]	; (8014b48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014ae8:	f000 fd4f 	bl	801558a <USBD_GetEpDesc>
 8014aec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014aee:	2101      	movs	r1, #1
 8014af0:	4815      	ldr	r0, [pc, #84]	; (8014b48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014af2:	f000 fd4a 	bl	801558a <USBD_GetEpDesc>
 8014af6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014af8:	2181      	movs	r1, #129	; 0x81
 8014afa:	4813      	ldr	r0, [pc, #76]	; (8014b48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8014afc:	f000 fd45 	bl	801558a <USBD_GetEpDesc>
 8014b00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014b02:	697b      	ldr	r3, [r7, #20]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d002      	beq.n	8014b0e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014b08:	697b      	ldr	r3, [r7, #20]
 8014b0a:	2210      	movs	r2, #16
 8014b0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014b0e:	693b      	ldr	r3, [r7, #16]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d006      	beq.n	8014b22 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014b14:	693b      	ldr	r3, [r7, #16]
 8014b16:	2200      	movs	r2, #0
 8014b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014b1c:	711a      	strb	r2, [r3, #4]
 8014b1e:	2200      	movs	r2, #0
 8014b20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014b22:	68fb      	ldr	r3, [r7, #12]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d006      	beq.n	8014b36 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014b28:	68fb      	ldr	r3, [r7, #12]
 8014b2a:	2200      	movs	r2, #0
 8014b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014b30:	711a      	strb	r2, [r3, #4]
 8014b32:	2200      	movs	r2, #0
 8014b34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	2243      	movs	r2, #67	; 0x43
 8014b3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014b3c:	4b02      	ldr	r3, [pc, #8]	; (8014b48 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8014b3e:	4618      	mov	r0, r3
 8014b40:	3718      	adds	r7, #24
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bd80      	pop	{r7, pc}
 8014b46:	bf00      	nop
 8014b48:	24000054 	.word	0x24000054

08014b4c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014b4c:	b580      	push	{r7, lr}
 8014b4e:	b086      	sub	sp, #24
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014b54:	2182      	movs	r1, #130	; 0x82
 8014b56:	4818      	ldr	r0, [pc, #96]	; (8014bb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014b58:	f000 fd17 	bl	801558a <USBD_GetEpDesc>
 8014b5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014b5e:	2101      	movs	r1, #1
 8014b60:	4815      	ldr	r0, [pc, #84]	; (8014bb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014b62:	f000 fd12 	bl	801558a <USBD_GetEpDesc>
 8014b66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014b68:	2181      	movs	r1, #129	; 0x81
 8014b6a:	4813      	ldr	r0, [pc, #76]	; (8014bb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8014b6c:	f000 fd0d 	bl	801558a <USBD_GetEpDesc>
 8014b70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014b72:	697b      	ldr	r3, [r7, #20]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d002      	beq.n	8014b7e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8014b78:	697b      	ldr	r3, [r7, #20]
 8014b7a:	2210      	movs	r2, #16
 8014b7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014b7e:	693b      	ldr	r3, [r7, #16]
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d006      	beq.n	8014b92 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014b84:	693b      	ldr	r3, [r7, #16]
 8014b86:	2200      	movs	r2, #0
 8014b88:	711a      	strb	r2, [r3, #4]
 8014b8a:	2200      	movs	r2, #0
 8014b8c:	f042 0202 	orr.w	r2, r2, #2
 8014b90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d006      	beq.n	8014ba6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	2200      	movs	r2, #0
 8014b9c:	711a      	strb	r2, [r3, #4]
 8014b9e:	2200      	movs	r2, #0
 8014ba0:	f042 0202 	orr.w	r2, r2, #2
 8014ba4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	2243      	movs	r2, #67	; 0x43
 8014baa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014bac:	4b02      	ldr	r3, [pc, #8]	; (8014bb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8014bae:	4618      	mov	r0, r3
 8014bb0:	3718      	adds	r7, #24
 8014bb2:	46bd      	mov	sp, r7
 8014bb4:	bd80      	pop	{r7, pc}
 8014bb6:	bf00      	nop
 8014bb8:	24000054 	.word	0x24000054

08014bbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	b086      	sub	sp, #24
 8014bc0:	af00      	add	r7, sp, #0
 8014bc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8014bc4:	2182      	movs	r1, #130	; 0x82
 8014bc6:	4818      	ldr	r0, [pc, #96]	; (8014c28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014bc8:	f000 fcdf 	bl	801558a <USBD_GetEpDesc>
 8014bcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8014bce:	2101      	movs	r1, #1
 8014bd0:	4815      	ldr	r0, [pc, #84]	; (8014c28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014bd2:	f000 fcda 	bl	801558a <USBD_GetEpDesc>
 8014bd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8014bd8:	2181      	movs	r1, #129	; 0x81
 8014bda:	4813      	ldr	r0, [pc, #76]	; (8014c28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8014bdc:	f000 fcd5 	bl	801558a <USBD_GetEpDesc>
 8014be0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8014be2:	697b      	ldr	r3, [r7, #20]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d002      	beq.n	8014bee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8014be8:	697b      	ldr	r3, [r7, #20]
 8014bea:	2210      	movs	r2, #16
 8014bec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8014bee:	693b      	ldr	r3, [r7, #16]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d006      	beq.n	8014c02 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014bf4:	693b      	ldr	r3, [r7, #16]
 8014bf6:	2200      	movs	r2, #0
 8014bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014bfc:	711a      	strb	r2, [r3, #4]
 8014bfe:	2200      	movs	r2, #0
 8014c00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8014c02:	68fb      	ldr	r3, [r7, #12]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d006      	beq.n	8014c16 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	2200      	movs	r2, #0
 8014c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8014c10:	711a      	strb	r2, [r3, #4]
 8014c12:	2200      	movs	r2, #0
 8014c14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	2243      	movs	r2, #67	; 0x43
 8014c1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8014c1c:	4b02      	ldr	r3, [pc, #8]	; (8014c28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8014c1e:	4618      	mov	r0, r3
 8014c20:	3718      	adds	r7, #24
 8014c22:	46bd      	mov	sp, r7
 8014c24:	bd80      	pop	{r7, pc}
 8014c26:	bf00      	nop
 8014c28:	24000054 	.word	0x24000054

08014c2c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014c2c:	b480      	push	{r7}
 8014c2e:	b083      	sub	sp, #12
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	220a      	movs	r2, #10
 8014c38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8014c3a:	4b03      	ldr	r3, [pc, #12]	; (8014c48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	370c      	adds	r7, #12
 8014c40:	46bd      	mov	sp, r7
 8014c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c46:	4770      	bx	lr
 8014c48:	24000010 	.word	0x24000010

08014c4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8014c4c:	b480      	push	{r7}
 8014c4e:	b083      	sub	sp, #12
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	6078      	str	r0, [r7, #4]
 8014c54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d101      	bne.n	8014c60 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014c5c:	2303      	movs	r3, #3
 8014c5e:	e009      	b.n	8014c74 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014c66:	687a      	ldr	r2, [r7, #4]
 8014c68:	33b0      	adds	r3, #176	; 0xb0
 8014c6a:	009b      	lsls	r3, r3, #2
 8014c6c:	4413      	add	r3, r2
 8014c6e:	683a      	ldr	r2, [r7, #0]
 8014c70:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8014c72:	2300      	movs	r3, #0
}
 8014c74:	4618      	mov	r0, r3
 8014c76:	370c      	adds	r7, #12
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c7e:	4770      	bx	lr

08014c80 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014c80:	b480      	push	{r7}
 8014c82:	b087      	sub	sp, #28
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	60f8      	str	r0, [r7, #12]
 8014c88:	60b9      	str	r1, [r7, #8]
 8014c8a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c92:	68fb      	ldr	r3, [r7, #12]
 8014c94:	32b0      	adds	r2, #176	; 0xb0
 8014c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014c9a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014c9c:	697b      	ldr	r3, [r7, #20]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d101      	bne.n	8014ca6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014ca2:	2303      	movs	r3, #3
 8014ca4:	e008      	b.n	8014cb8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8014ca6:	697b      	ldr	r3, [r7, #20]
 8014ca8:	68ba      	ldr	r2, [r7, #8]
 8014caa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014cae:	697b      	ldr	r3, [r7, #20]
 8014cb0:	687a      	ldr	r2, [r7, #4]
 8014cb2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8014cb6:	2300      	movs	r3, #0
}
 8014cb8:	4618      	mov	r0, r3
 8014cba:	371c      	adds	r7, #28
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc2:	4770      	bx	lr

08014cc4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014cc4:	b480      	push	{r7}
 8014cc6:	b085      	sub	sp, #20
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
 8014ccc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	32b0      	adds	r2, #176	; 0xb0
 8014cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014cdc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8014cde:	68fb      	ldr	r3, [r7, #12]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d101      	bne.n	8014ce8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8014ce4:	2303      	movs	r3, #3
 8014ce6:	e004      	b.n	8014cf2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	683a      	ldr	r2, [r7, #0]
 8014cec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8014cf0:	2300      	movs	r3, #0
}
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	3714      	adds	r7, #20
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfc:	4770      	bx	lr
	...

08014d00 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b084      	sub	sp, #16
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	32b0      	adds	r2, #176	; 0xb0
 8014d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d16:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8014d18:	2301      	movs	r3, #1
 8014d1a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8014d1c:	68bb      	ldr	r3, [r7, #8]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d101      	bne.n	8014d26 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8014d22:	2303      	movs	r3, #3
 8014d24:	e025      	b.n	8014d72 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8014d26:	68bb      	ldr	r3, [r7, #8]
 8014d28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d11f      	bne.n	8014d70 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014d30:	68bb      	ldr	r3, [r7, #8]
 8014d32:	2201      	movs	r2, #1
 8014d34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8014d38:	4b10      	ldr	r3, [pc, #64]	; (8014d7c <USBD_CDC_TransmitPacket+0x7c>)
 8014d3a:	781b      	ldrb	r3, [r3, #0]
 8014d3c:	f003 020f 	and.w	r2, r3, #15
 8014d40:	68bb      	ldr	r3, [r7, #8]
 8014d42:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8014d46:	6878      	ldr	r0, [r7, #4]
 8014d48:	4613      	mov	r3, r2
 8014d4a:	009b      	lsls	r3, r3, #2
 8014d4c:	4413      	add	r3, r2
 8014d4e:	009b      	lsls	r3, r3, #2
 8014d50:	4403      	add	r3, r0
 8014d52:	3318      	adds	r3, #24
 8014d54:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8014d56:	4b09      	ldr	r3, [pc, #36]	; (8014d7c <USBD_CDC_TransmitPacket+0x7c>)
 8014d58:	7819      	ldrb	r1, [r3, #0]
 8014d5a:	68bb      	ldr	r3, [r7, #8]
 8014d5c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014d60:	68bb      	ldr	r3, [r7, #8]
 8014d62:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8014d66:	6878      	ldr	r0, [r7, #4]
 8014d68:	f002 f80f 	bl	8016d8a <USBD_LL_Transmit>

    ret = USBD_OK;
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8014d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d72:	4618      	mov	r0, r3
 8014d74:	3710      	adds	r7, #16
 8014d76:	46bd      	mov	sp, r7
 8014d78:	bd80      	pop	{r7, pc}
 8014d7a:	bf00      	nop
 8014d7c:	24000097 	.word	0x24000097

08014d80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b084      	sub	sp, #16
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	32b0      	adds	r2, #176	; 0xb0
 8014d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014d96:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	32b0      	adds	r2, #176	; 0xb0
 8014da2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d101      	bne.n	8014dae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8014daa:	2303      	movs	r3, #3
 8014dac:	e018      	b.n	8014de0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014dae:	687b      	ldr	r3, [r7, #4]
 8014db0:	7c1b      	ldrb	r3, [r3, #16]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d10a      	bne.n	8014dcc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014db6:	4b0c      	ldr	r3, [pc, #48]	; (8014de8 <USBD_CDC_ReceivePacket+0x68>)
 8014db8:	7819      	ldrb	r1, [r3, #0]
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014dc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014dc4:	6878      	ldr	r0, [r7, #4]
 8014dc6:	f002 f801 	bl	8016dcc <USBD_LL_PrepareReceive>
 8014dca:	e008      	b.n	8014dde <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014dcc:	4b06      	ldr	r3, [pc, #24]	; (8014de8 <USBD_CDC_ReceivePacket+0x68>)
 8014dce:	7819      	ldrb	r1, [r3, #0]
 8014dd0:	68fb      	ldr	r3, [r7, #12]
 8014dd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014dd6:	2340      	movs	r3, #64	; 0x40
 8014dd8:	6878      	ldr	r0, [r7, #4]
 8014dda:	f001 fff7 	bl	8016dcc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014dde:	2300      	movs	r3, #0
}
 8014de0:	4618      	mov	r0, r3
 8014de2:	3710      	adds	r7, #16
 8014de4:	46bd      	mov	sp, r7
 8014de6:	bd80      	pop	{r7, pc}
 8014de8:	24000098 	.word	0x24000098

08014dec <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b086      	sub	sp, #24
 8014df0:	af00      	add	r7, sp, #0
 8014df2:	60f8      	str	r0, [r7, #12]
 8014df4:	60b9      	str	r1, [r7, #8]
 8014df6:	4613      	mov	r3, r2
 8014df8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d101      	bne.n	8014e04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014e00:	2303      	movs	r3, #3
 8014e02:	e01f      	b.n	8014e44 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	2200      	movs	r2, #0
 8014e08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	2200      	movs	r2, #0
 8014e10:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8014e14:	68fb      	ldr	r3, [r7, #12]
 8014e16:	2200      	movs	r2, #0
 8014e18:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8014e1c:	68bb      	ldr	r3, [r7, #8]
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d003      	beq.n	8014e2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	68ba      	ldr	r2, [r7, #8]
 8014e26:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	2201      	movs	r2, #1
 8014e2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	79fa      	ldrb	r2, [r7, #7]
 8014e36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014e38:	68f8      	ldr	r0, [r7, #12]
 8014e3a:	f001 fe6b 	bl	8016b14 <USBD_LL_Init>
 8014e3e:	4603      	mov	r3, r0
 8014e40:	75fb      	strb	r3, [r7, #23]

  return ret;
 8014e42:	7dfb      	ldrb	r3, [r7, #23]
}
 8014e44:	4618      	mov	r0, r3
 8014e46:	3718      	adds	r7, #24
 8014e48:	46bd      	mov	sp, r7
 8014e4a:	bd80      	pop	{r7, pc}

08014e4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	b084      	sub	sp, #16
 8014e50:	af00      	add	r7, sp, #0
 8014e52:	6078      	str	r0, [r7, #4]
 8014e54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014e56:	2300      	movs	r3, #0
 8014e58:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014e5a:	683b      	ldr	r3, [r7, #0]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d101      	bne.n	8014e64 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8014e60:	2303      	movs	r3, #3
 8014e62:	e025      	b.n	8014eb0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	683a      	ldr	r2, [r7, #0]
 8014e68:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	32ae      	adds	r2, #174	; 0xae
 8014e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e7c:	2b00      	cmp	r3, #0
 8014e7e:	d00f      	beq.n	8014ea0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	32ae      	adds	r2, #174	; 0xae
 8014e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e90:	f107 020e 	add.w	r2, r7, #14
 8014e94:	4610      	mov	r0, r2
 8014e96:	4798      	blx	r3
 8014e98:	4602      	mov	r2, r0
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8014ea6:	1c5a      	adds	r2, r3, #1
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8014eae:	2300      	movs	r3, #0
}
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	3710      	adds	r7, #16
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	bd80      	pop	{r7, pc}

08014eb8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014eb8:	b580      	push	{r7, lr}
 8014eba:	b082      	sub	sp, #8
 8014ebc:	af00      	add	r7, sp, #0
 8014ebe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8014ec0:	6878      	ldr	r0, [r7, #4]
 8014ec2:	f001 fe79 	bl	8016bb8 <USBD_LL_Start>
 8014ec6:	4603      	mov	r3, r0
}
 8014ec8:	4618      	mov	r0, r3
 8014eca:	3708      	adds	r7, #8
 8014ecc:	46bd      	mov	sp, r7
 8014ece:	bd80      	pop	{r7, pc}

08014ed0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8014ed0:	b480      	push	{r7}
 8014ed2:	b083      	sub	sp, #12
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014ed8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	370c      	adds	r7, #12
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ee4:	4770      	bx	lr

08014ee6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014ee6:	b580      	push	{r7, lr}
 8014ee8:	b084      	sub	sp, #16
 8014eea:	af00      	add	r7, sp, #0
 8014eec:	6078      	str	r0, [r7, #4]
 8014eee:	460b      	mov	r3, r1
 8014ef0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d009      	beq.n	8014f14 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	78fa      	ldrb	r2, [r7, #3]
 8014f0a:	4611      	mov	r1, r2
 8014f0c:	6878      	ldr	r0, [r7, #4]
 8014f0e:	4798      	blx	r3
 8014f10:	4603      	mov	r3, r0
 8014f12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f16:	4618      	mov	r0, r3
 8014f18:	3710      	adds	r7, #16
 8014f1a:	46bd      	mov	sp, r7
 8014f1c:	bd80      	pop	{r7, pc}

08014f1e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014f1e:	b580      	push	{r7, lr}
 8014f20:	b084      	sub	sp, #16
 8014f22:	af00      	add	r7, sp, #0
 8014f24:	6078      	str	r0, [r7, #4]
 8014f26:	460b      	mov	r3, r1
 8014f28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014f34:	685b      	ldr	r3, [r3, #4]
 8014f36:	78fa      	ldrb	r2, [r7, #3]
 8014f38:	4611      	mov	r1, r2
 8014f3a:	6878      	ldr	r0, [r7, #4]
 8014f3c:	4798      	blx	r3
 8014f3e:	4603      	mov	r3, r0
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d001      	beq.n	8014f48 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8014f44:	2303      	movs	r3, #3
 8014f46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8014f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8014f4a:	4618      	mov	r0, r3
 8014f4c:	3710      	adds	r7, #16
 8014f4e:	46bd      	mov	sp, r7
 8014f50:	bd80      	pop	{r7, pc}

08014f52 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014f52:	b580      	push	{r7, lr}
 8014f54:	b084      	sub	sp, #16
 8014f56:	af00      	add	r7, sp, #0
 8014f58:	6078      	str	r0, [r7, #4]
 8014f5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014f62:	6839      	ldr	r1, [r7, #0]
 8014f64:	4618      	mov	r0, r3
 8014f66:	f001 f90e 	bl	8016186 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	2201      	movs	r2, #1
 8014f6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014f78:	461a      	mov	r2, r3
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014f86:	f003 031f 	and.w	r3, r3, #31
 8014f8a:	2b02      	cmp	r3, #2
 8014f8c:	d01a      	beq.n	8014fc4 <USBD_LL_SetupStage+0x72>
 8014f8e:	2b02      	cmp	r3, #2
 8014f90:	d822      	bhi.n	8014fd8 <USBD_LL_SetupStage+0x86>
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d002      	beq.n	8014f9c <USBD_LL_SetupStage+0x4a>
 8014f96:	2b01      	cmp	r3, #1
 8014f98:	d00a      	beq.n	8014fb0 <USBD_LL_SetupStage+0x5e>
 8014f9a:	e01d      	b.n	8014fd8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014fa2:	4619      	mov	r1, r3
 8014fa4:	6878      	ldr	r0, [r7, #4]
 8014fa6:	f000 fb65 	bl	8015674 <USBD_StdDevReq>
 8014faa:	4603      	mov	r3, r0
 8014fac:	73fb      	strb	r3, [r7, #15]
      break;
 8014fae:	e020      	b.n	8014ff2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014fb6:	4619      	mov	r1, r3
 8014fb8:	6878      	ldr	r0, [r7, #4]
 8014fba:	f000 fbcd 	bl	8015758 <USBD_StdItfReq>
 8014fbe:	4603      	mov	r3, r0
 8014fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8014fc2:	e016      	b.n	8014ff2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014fca:	4619      	mov	r1, r3
 8014fcc:	6878      	ldr	r0, [r7, #4]
 8014fce:	f000 fc2f 	bl	8015830 <USBD_StdEPReq>
 8014fd2:	4603      	mov	r3, r0
 8014fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8014fd6:	e00c      	b.n	8014ff2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014fde:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8014fe2:	b2db      	uxtb	r3, r3
 8014fe4:	4619      	mov	r1, r3
 8014fe6:	6878      	ldr	r0, [r7, #4]
 8014fe8:	f001 fe46 	bl	8016c78 <USBD_LL_StallEP>
 8014fec:	4603      	mov	r3, r0
 8014fee:	73fb      	strb	r3, [r7, #15]
      break;
 8014ff0:	bf00      	nop
  }

  return ret;
 8014ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	3710      	adds	r7, #16
 8014ff8:	46bd      	mov	sp, r7
 8014ffa:	bd80      	pop	{r7, pc}

08014ffc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014ffc:	b580      	push	{r7, lr}
 8014ffe:	b086      	sub	sp, #24
 8015000:	af00      	add	r7, sp, #0
 8015002:	60f8      	str	r0, [r7, #12]
 8015004:	460b      	mov	r3, r1
 8015006:	607a      	str	r2, [r7, #4]
 8015008:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801500a:	2300      	movs	r3, #0
 801500c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801500e:	7afb      	ldrb	r3, [r7, #11]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d16e      	bne.n	80150f2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801501a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015022:	2b03      	cmp	r3, #3
 8015024:	f040 8098 	bne.w	8015158 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8015028:	693b      	ldr	r3, [r7, #16]
 801502a:	689a      	ldr	r2, [r3, #8]
 801502c:	693b      	ldr	r3, [r7, #16]
 801502e:	68db      	ldr	r3, [r3, #12]
 8015030:	429a      	cmp	r2, r3
 8015032:	d913      	bls.n	801505c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015034:	693b      	ldr	r3, [r7, #16]
 8015036:	689a      	ldr	r2, [r3, #8]
 8015038:	693b      	ldr	r3, [r7, #16]
 801503a:	68db      	ldr	r3, [r3, #12]
 801503c:	1ad2      	subs	r2, r2, r3
 801503e:	693b      	ldr	r3, [r7, #16]
 8015040:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015042:	693b      	ldr	r3, [r7, #16]
 8015044:	68da      	ldr	r2, [r3, #12]
 8015046:	693b      	ldr	r3, [r7, #16]
 8015048:	689b      	ldr	r3, [r3, #8]
 801504a:	4293      	cmp	r3, r2
 801504c:	bf28      	it	cs
 801504e:	4613      	movcs	r3, r2
 8015050:	461a      	mov	r2, r3
 8015052:	6879      	ldr	r1, [r7, #4]
 8015054:	68f8      	ldr	r0, [r7, #12]
 8015056:	f001 f98a 	bl	801636e <USBD_CtlContinueRx>
 801505a:	e07d      	b.n	8015158 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801505c:	68fb      	ldr	r3, [r7, #12]
 801505e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015062:	f003 031f 	and.w	r3, r3, #31
 8015066:	2b02      	cmp	r3, #2
 8015068:	d014      	beq.n	8015094 <USBD_LL_DataOutStage+0x98>
 801506a:	2b02      	cmp	r3, #2
 801506c:	d81d      	bhi.n	80150aa <USBD_LL_DataOutStage+0xae>
 801506e:	2b00      	cmp	r3, #0
 8015070:	d002      	beq.n	8015078 <USBD_LL_DataOutStage+0x7c>
 8015072:	2b01      	cmp	r3, #1
 8015074:	d003      	beq.n	801507e <USBD_LL_DataOutStage+0x82>
 8015076:	e018      	b.n	80150aa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015078:	2300      	movs	r3, #0
 801507a:	75bb      	strb	r3, [r7, #22]
            break;
 801507c:	e018      	b.n	80150b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801507e:	68fb      	ldr	r3, [r7, #12]
 8015080:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015084:	b2db      	uxtb	r3, r3
 8015086:	4619      	mov	r1, r3
 8015088:	68f8      	ldr	r0, [r7, #12]
 801508a:	f000 fa64 	bl	8015556 <USBD_CoreFindIF>
 801508e:	4603      	mov	r3, r0
 8015090:	75bb      	strb	r3, [r7, #22]
            break;
 8015092:	e00d      	b.n	80150b0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801509a:	b2db      	uxtb	r3, r3
 801509c:	4619      	mov	r1, r3
 801509e:	68f8      	ldr	r0, [r7, #12]
 80150a0:	f000 fa66 	bl	8015570 <USBD_CoreFindEP>
 80150a4:	4603      	mov	r3, r0
 80150a6:	75bb      	strb	r3, [r7, #22]
            break;
 80150a8:	e002      	b.n	80150b0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80150aa:	2300      	movs	r3, #0
 80150ac:	75bb      	strb	r3, [r7, #22]
            break;
 80150ae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80150b0:	7dbb      	ldrb	r3, [r7, #22]
 80150b2:	2b00      	cmp	r3, #0
 80150b4:	d119      	bne.n	80150ea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150bc:	b2db      	uxtb	r3, r3
 80150be:	2b03      	cmp	r3, #3
 80150c0:	d113      	bne.n	80150ea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80150c2:	7dba      	ldrb	r2, [r7, #22]
 80150c4:	68fb      	ldr	r3, [r7, #12]
 80150c6:	32ae      	adds	r2, #174	; 0xae
 80150c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150cc:	691b      	ldr	r3, [r3, #16]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d00b      	beq.n	80150ea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80150d2:	7dba      	ldrb	r2, [r7, #22]
 80150d4:	68fb      	ldr	r3, [r7, #12]
 80150d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80150da:	7dba      	ldrb	r2, [r7, #22]
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	32ae      	adds	r2, #174	; 0xae
 80150e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150e4:	691b      	ldr	r3, [r3, #16]
 80150e6:	68f8      	ldr	r0, [r7, #12]
 80150e8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80150ea:	68f8      	ldr	r0, [r7, #12]
 80150ec:	f001 f950 	bl	8016390 <USBD_CtlSendStatus>
 80150f0:	e032      	b.n	8015158 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80150f2:	7afb      	ldrb	r3, [r7, #11]
 80150f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80150f8:	b2db      	uxtb	r3, r3
 80150fa:	4619      	mov	r1, r3
 80150fc:	68f8      	ldr	r0, [r7, #12]
 80150fe:	f000 fa37 	bl	8015570 <USBD_CoreFindEP>
 8015102:	4603      	mov	r3, r0
 8015104:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015106:	7dbb      	ldrb	r3, [r7, #22]
 8015108:	2bff      	cmp	r3, #255	; 0xff
 801510a:	d025      	beq.n	8015158 <USBD_LL_DataOutStage+0x15c>
 801510c:	7dbb      	ldrb	r3, [r7, #22]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d122      	bne.n	8015158 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015118:	b2db      	uxtb	r3, r3
 801511a:	2b03      	cmp	r3, #3
 801511c:	d117      	bne.n	801514e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801511e:	7dba      	ldrb	r2, [r7, #22]
 8015120:	68fb      	ldr	r3, [r7, #12]
 8015122:	32ae      	adds	r2, #174	; 0xae
 8015124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015128:	699b      	ldr	r3, [r3, #24]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d00f      	beq.n	801514e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801512e:	7dba      	ldrb	r2, [r7, #22]
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8015136:	7dba      	ldrb	r2, [r7, #22]
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	32ae      	adds	r2, #174	; 0xae
 801513c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015140:	699b      	ldr	r3, [r3, #24]
 8015142:	7afa      	ldrb	r2, [r7, #11]
 8015144:	4611      	mov	r1, r2
 8015146:	68f8      	ldr	r0, [r7, #12]
 8015148:	4798      	blx	r3
 801514a:	4603      	mov	r3, r0
 801514c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801514e:	7dfb      	ldrb	r3, [r7, #23]
 8015150:	2b00      	cmp	r3, #0
 8015152:	d001      	beq.n	8015158 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015154:	7dfb      	ldrb	r3, [r7, #23]
 8015156:	e000      	b.n	801515a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8015158:	2300      	movs	r3, #0
}
 801515a:	4618      	mov	r0, r3
 801515c:	3718      	adds	r7, #24
 801515e:	46bd      	mov	sp, r7
 8015160:	bd80      	pop	{r7, pc}

08015162 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015162:	b580      	push	{r7, lr}
 8015164:	b086      	sub	sp, #24
 8015166:	af00      	add	r7, sp, #0
 8015168:	60f8      	str	r0, [r7, #12]
 801516a:	460b      	mov	r3, r1
 801516c:	607a      	str	r2, [r7, #4]
 801516e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015170:	7afb      	ldrb	r3, [r7, #11]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d16f      	bne.n	8015256 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	3314      	adds	r3, #20
 801517a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801517c:	68fb      	ldr	r3, [r7, #12]
 801517e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015182:	2b02      	cmp	r3, #2
 8015184:	d15a      	bne.n	801523c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015186:	693b      	ldr	r3, [r7, #16]
 8015188:	689a      	ldr	r2, [r3, #8]
 801518a:	693b      	ldr	r3, [r7, #16]
 801518c:	68db      	ldr	r3, [r3, #12]
 801518e:	429a      	cmp	r2, r3
 8015190:	d914      	bls.n	80151bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015192:	693b      	ldr	r3, [r7, #16]
 8015194:	689a      	ldr	r2, [r3, #8]
 8015196:	693b      	ldr	r3, [r7, #16]
 8015198:	68db      	ldr	r3, [r3, #12]
 801519a:	1ad2      	subs	r2, r2, r3
 801519c:	693b      	ldr	r3, [r7, #16]
 801519e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80151a0:	693b      	ldr	r3, [r7, #16]
 80151a2:	689b      	ldr	r3, [r3, #8]
 80151a4:	461a      	mov	r2, r3
 80151a6:	6879      	ldr	r1, [r7, #4]
 80151a8:	68f8      	ldr	r0, [r7, #12]
 80151aa:	f001 f8b2 	bl	8016312 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80151ae:	2300      	movs	r3, #0
 80151b0:	2200      	movs	r2, #0
 80151b2:	2100      	movs	r1, #0
 80151b4:	68f8      	ldr	r0, [r7, #12]
 80151b6:	f001 fe09 	bl	8016dcc <USBD_LL_PrepareReceive>
 80151ba:	e03f      	b.n	801523c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80151bc:	693b      	ldr	r3, [r7, #16]
 80151be:	68da      	ldr	r2, [r3, #12]
 80151c0:	693b      	ldr	r3, [r7, #16]
 80151c2:	689b      	ldr	r3, [r3, #8]
 80151c4:	429a      	cmp	r2, r3
 80151c6:	d11c      	bne.n	8015202 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80151c8:	693b      	ldr	r3, [r7, #16]
 80151ca:	685a      	ldr	r2, [r3, #4]
 80151cc:	693b      	ldr	r3, [r7, #16]
 80151ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80151d0:	429a      	cmp	r2, r3
 80151d2:	d316      	bcc.n	8015202 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80151d4:	693b      	ldr	r3, [r7, #16]
 80151d6:	685a      	ldr	r2, [r3, #4]
 80151d8:	68fb      	ldr	r3, [r7, #12]
 80151da:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80151de:	429a      	cmp	r2, r3
 80151e0:	d20f      	bcs.n	8015202 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80151e2:	2200      	movs	r2, #0
 80151e4:	2100      	movs	r1, #0
 80151e6:	68f8      	ldr	r0, [r7, #12]
 80151e8:	f001 f893 	bl	8016312 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80151ec:	68fb      	ldr	r3, [r7, #12]
 80151ee:	2200      	movs	r2, #0
 80151f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80151f4:	2300      	movs	r3, #0
 80151f6:	2200      	movs	r2, #0
 80151f8:	2100      	movs	r1, #0
 80151fa:	68f8      	ldr	r0, [r7, #12]
 80151fc:	f001 fde6 	bl	8016dcc <USBD_LL_PrepareReceive>
 8015200:	e01c      	b.n	801523c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015208:	b2db      	uxtb	r3, r3
 801520a:	2b03      	cmp	r3, #3
 801520c:	d10f      	bne.n	801522e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015214:	68db      	ldr	r3, [r3, #12]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d009      	beq.n	801522e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801521a:	68fb      	ldr	r3, [r7, #12]
 801521c:	2200      	movs	r2, #0
 801521e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015228:	68db      	ldr	r3, [r3, #12]
 801522a:	68f8      	ldr	r0, [r7, #12]
 801522c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801522e:	2180      	movs	r1, #128	; 0x80
 8015230:	68f8      	ldr	r0, [r7, #12]
 8015232:	f001 fd21 	bl	8016c78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015236:	68f8      	ldr	r0, [r7, #12]
 8015238:	f001 f8bd 	bl	80163b6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801523c:	68fb      	ldr	r3, [r7, #12]
 801523e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015242:	2b00      	cmp	r3, #0
 8015244:	d03a      	beq.n	80152bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015246:	68f8      	ldr	r0, [r7, #12]
 8015248:	f7ff fe42 	bl	8014ed0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	2200      	movs	r2, #0
 8015250:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015254:	e032      	b.n	80152bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015256:	7afb      	ldrb	r3, [r7, #11]
 8015258:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801525c:	b2db      	uxtb	r3, r3
 801525e:	4619      	mov	r1, r3
 8015260:	68f8      	ldr	r0, [r7, #12]
 8015262:	f000 f985 	bl	8015570 <USBD_CoreFindEP>
 8015266:	4603      	mov	r3, r0
 8015268:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801526a:	7dfb      	ldrb	r3, [r7, #23]
 801526c:	2bff      	cmp	r3, #255	; 0xff
 801526e:	d025      	beq.n	80152bc <USBD_LL_DataInStage+0x15a>
 8015270:	7dfb      	ldrb	r3, [r7, #23]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d122      	bne.n	80152bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801527c:	b2db      	uxtb	r3, r3
 801527e:	2b03      	cmp	r3, #3
 8015280:	d11c      	bne.n	80152bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015282:	7dfa      	ldrb	r2, [r7, #23]
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	32ae      	adds	r2, #174	; 0xae
 8015288:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801528c:	695b      	ldr	r3, [r3, #20]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d014      	beq.n	80152bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015292:	7dfa      	ldrb	r2, [r7, #23]
 8015294:	68fb      	ldr	r3, [r7, #12]
 8015296:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801529a:	7dfa      	ldrb	r2, [r7, #23]
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	32ae      	adds	r2, #174	; 0xae
 80152a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152a4:	695b      	ldr	r3, [r3, #20]
 80152a6:	7afa      	ldrb	r2, [r7, #11]
 80152a8:	4611      	mov	r1, r2
 80152aa:	68f8      	ldr	r0, [r7, #12]
 80152ac:	4798      	blx	r3
 80152ae:	4603      	mov	r3, r0
 80152b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80152b2:	7dbb      	ldrb	r3, [r7, #22]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d001      	beq.n	80152bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80152b8:	7dbb      	ldrb	r3, [r7, #22]
 80152ba:	e000      	b.n	80152be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80152bc:	2300      	movs	r3, #0
}
 80152be:	4618      	mov	r0, r3
 80152c0:	3718      	adds	r7, #24
 80152c2:	46bd      	mov	sp, r7
 80152c4:	bd80      	pop	{r7, pc}

080152c6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80152c6:	b580      	push	{r7, lr}
 80152c8:	b084      	sub	sp, #16
 80152ca:	af00      	add	r7, sp, #0
 80152cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80152ce:	2300      	movs	r3, #0
 80152d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	2201      	movs	r2, #1
 80152d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	2200      	movs	r2, #0
 80152de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	2200      	movs	r2, #0
 80152e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	2200      	movs	r2, #0
 80152ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	2200      	movs	r2, #0
 80152f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d014      	beq.n	801532c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015308:	685b      	ldr	r3, [r3, #4]
 801530a:	2b00      	cmp	r3, #0
 801530c:	d00e      	beq.n	801532c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015314:	685b      	ldr	r3, [r3, #4]
 8015316:	687a      	ldr	r2, [r7, #4]
 8015318:	6852      	ldr	r2, [r2, #4]
 801531a:	b2d2      	uxtb	r2, r2
 801531c:	4611      	mov	r1, r2
 801531e:	6878      	ldr	r0, [r7, #4]
 8015320:	4798      	blx	r3
 8015322:	4603      	mov	r3, r0
 8015324:	2b00      	cmp	r3, #0
 8015326:	d001      	beq.n	801532c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015328:	2303      	movs	r3, #3
 801532a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801532c:	2340      	movs	r3, #64	; 0x40
 801532e:	2200      	movs	r2, #0
 8015330:	2100      	movs	r1, #0
 8015332:	6878      	ldr	r0, [r7, #4]
 8015334:	f001 fc5b 	bl	8016bee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	2201      	movs	r2, #1
 801533c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	2240      	movs	r2, #64	; 0x40
 8015344:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015348:	2340      	movs	r3, #64	; 0x40
 801534a:	2200      	movs	r2, #0
 801534c:	2180      	movs	r1, #128	; 0x80
 801534e:	6878      	ldr	r0, [r7, #4]
 8015350:	f001 fc4d 	bl	8016bee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	2201      	movs	r2, #1
 8015358:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	2240      	movs	r2, #64	; 0x40
 801535e:	621a      	str	r2, [r3, #32]

  return ret;
 8015360:	7bfb      	ldrb	r3, [r7, #15]
}
 8015362:	4618      	mov	r0, r3
 8015364:	3710      	adds	r7, #16
 8015366:	46bd      	mov	sp, r7
 8015368:	bd80      	pop	{r7, pc}

0801536a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801536a:	b480      	push	{r7}
 801536c:	b083      	sub	sp, #12
 801536e:	af00      	add	r7, sp, #0
 8015370:	6078      	str	r0, [r7, #4]
 8015372:	460b      	mov	r3, r1
 8015374:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	78fa      	ldrb	r2, [r7, #3]
 801537a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801537c:	2300      	movs	r3, #0
}
 801537e:	4618      	mov	r0, r3
 8015380:	370c      	adds	r7, #12
 8015382:	46bd      	mov	sp, r7
 8015384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015388:	4770      	bx	lr

0801538a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801538a:	b480      	push	{r7}
 801538c:	b083      	sub	sp, #12
 801538e:	af00      	add	r7, sp, #0
 8015390:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015398:	b2db      	uxtb	r3, r3
 801539a:	2b04      	cmp	r3, #4
 801539c:	d006      	beq.n	80153ac <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153a4:	b2da      	uxtb	r2, r3
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	2204      	movs	r2, #4
 80153b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80153b4:	2300      	movs	r3, #0
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	370c      	adds	r7, #12
 80153ba:	46bd      	mov	sp, r7
 80153bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c0:	4770      	bx	lr

080153c2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80153c2:	b480      	push	{r7}
 80153c4:	b083      	sub	sp, #12
 80153c6:	af00      	add	r7, sp, #0
 80153c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80153d0:	b2db      	uxtb	r3, r3
 80153d2:	2b04      	cmp	r3, #4
 80153d4:	d106      	bne.n	80153e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80153dc:	b2da      	uxtb	r2, r3
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80153e4:	2300      	movs	r3, #0
}
 80153e6:	4618      	mov	r0, r3
 80153e8:	370c      	adds	r7, #12
 80153ea:	46bd      	mov	sp, r7
 80153ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f0:	4770      	bx	lr

080153f2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80153f2:	b580      	push	{r7, lr}
 80153f4:	b082      	sub	sp, #8
 80153f6:	af00      	add	r7, sp, #0
 80153f8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80153fa:	687b      	ldr	r3, [r7, #4]
 80153fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015400:	b2db      	uxtb	r3, r3
 8015402:	2b03      	cmp	r3, #3
 8015404:	d110      	bne.n	8015428 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801540c:	2b00      	cmp	r3, #0
 801540e:	d00b      	beq.n	8015428 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015416:	69db      	ldr	r3, [r3, #28]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d005      	beq.n	8015428 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015422:	69db      	ldr	r3, [r3, #28]
 8015424:	6878      	ldr	r0, [r7, #4]
 8015426:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015428:	2300      	movs	r3, #0
}
 801542a:	4618      	mov	r0, r3
 801542c:	3708      	adds	r7, #8
 801542e:	46bd      	mov	sp, r7
 8015430:	bd80      	pop	{r7, pc}

08015432 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015432:	b580      	push	{r7, lr}
 8015434:	b082      	sub	sp, #8
 8015436:	af00      	add	r7, sp, #0
 8015438:	6078      	str	r0, [r7, #4]
 801543a:	460b      	mov	r3, r1
 801543c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	32ae      	adds	r2, #174	; 0xae
 8015448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d101      	bne.n	8015454 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015450:	2303      	movs	r3, #3
 8015452:	e01c      	b.n	801548e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801545a:	b2db      	uxtb	r3, r3
 801545c:	2b03      	cmp	r3, #3
 801545e:	d115      	bne.n	801548c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	32ae      	adds	r2, #174	; 0xae
 801546a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801546e:	6a1b      	ldr	r3, [r3, #32]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d00b      	beq.n	801548c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	32ae      	adds	r2, #174	; 0xae
 801547e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015482:	6a1b      	ldr	r3, [r3, #32]
 8015484:	78fa      	ldrb	r2, [r7, #3]
 8015486:	4611      	mov	r1, r2
 8015488:	6878      	ldr	r0, [r7, #4]
 801548a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801548c:	2300      	movs	r3, #0
}
 801548e:	4618      	mov	r0, r3
 8015490:	3708      	adds	r7, #8
 8015492:	46bd      	mov	sp, r7
 8015494:	bd80      	pop	{r7, pc}

08015496 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015496:	b580      	push	{r7, lr}
 8015498:	b082      	sub	sp, #8
 801549a:	af00      	add	r7, sp, #0
 801549c:	6078      	str	r0, [r7, #4]
 801549e:	460b      	mov	r3, r1
 80154a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	32ae      	adds	r2, #174	; 0xae
 80154ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d101      	bne.n	80154b8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80154b4:	2303      	movs	r3, #3
 80154b6:	e01c      	b.n	80154f2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80154b8:	687b      	ldr	r3, [r7, #4]
 80154ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80154be:	b2db      	uxtb	r3, r3
 80154c0:	2b03      	cmp	r3, #3
 80154c2:	d115      	bne.n	80154f0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80154c4:	687b      	ldr	r3, [r7, #4]
 80154c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	32ae      	adds	r2, #174	; 0xae
 80154ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d00b      	beq.n	80154f0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	32ae      	adds	r2, #174	; 0xae
 80154e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154e8:	78fa      	ldrb	r2, [r7, #3]
 80154ea:	4611      	mov	r1, r2
 80154ec:	6878      	ldr	r0, [r7, #4]
 80154ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80154f0:	2300      	movs	r3, #0
}
 80154f2:	4618      	mov	r0, r3
 80154f4:	3708      	adds	r7, #8
 80154f6:	46bd      	mov	sp, r7
 80154f8:	bd80      	pop	{r7, pc}

080154fa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80154fa:	b480      	push	{r7}
 80154fc:	b083      	sub	sp, #12
 80154fe:	af00      	add	r7, sp, #0
 8015500:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015502:	2300      	movs	r3, #0
}
 8015504:	4618      	mov	r0, r3
 8015506:	370c      	adds	r7, #12
 8015508:	46bd      	mov	sp, r7
 801550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550e:	4770      	bx	lr

08015510 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b084      	sub	sp, #16
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015518:	2300      	movs	r3, #0
 801551a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	2201      	movs	r2, #1
 8015520:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015524:	687b      	ldr	r3, [r7, #4]
 8015526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801552a:	2b00      	cmp	r3, #0
 801552c:	d00e      	beq.n	801554c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015534:	685b      	ldr	r3, [r3, #4]
 8015536:	687a      	ldr	r2, [r7, #4]
 8015538:	6852      	ldr	r2, [r2, #4]
 801553a:	b2d2      	uxtb	r2, r2
 801553c:	4611      	mov	r1, r2
 801553e:	6878      	ldr	r0, [r7, #4]
 8015540:	4798      	blx	r3
 8015542:	4603      	mov	r3, r0
 8015544:	2b00      	cmp	r3, #0
 8015546:	d001      	beq.n	801554c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015548:	2303      	movs	r3, #3
 801554a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801554c:	7bfb      	ldrb	r3, [r7, #15]
}
 801554e:	4618      	mov	r0, r3
 8015550:	3710      	adds	r7, #16
 8015552:	46bd      	mov	sp, r7
 8015554:	bd80      	pop	{r7, pc}

08015556 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015556:	b480      	push	{r7}
 8015558:	b083      	sub	sp, #12
 801555a:	af00      	add	r7, sp, #0
 801555c:	6078      	str	r0, [r7, #4]
 801555e:	460b      	mov	r3, r1
 8015560:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015562:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015564:	4618      	mov	r0, r3
 8015566:	370c      	adds	r7, #12
 8015568:	46bd      	mov	sp, r7
 801556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801556e:	4770      	bx	lr

08015570 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015570:	b480      	push	{r7}
 8015572:	b083      	sub	sp, #12
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
 8015578:	460b      	mov	r3, r1
 801557a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801557c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801557e:	4618      	mov	r0, r3
 8015580:	370c      	adds	r7, #12
 8015582:	46bd      	mov	sp, r7
 8015584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015588:	4770      	bx	lr

0801558a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801558a:	b580      	push	{r7, lr}
 801558c:	b086      	sub	sp, #24
 801558e:	af00      	add	r7, sp, #0
 8015590:	6078      	str	r0, [r7, #4]
 8015592:	460b      	mov	r3, r1
 8015594:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801559e:	2300      	movs	r3, #0
 80155a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80155a2:	68fb      	ldr	r3, [r7, #12]
 80155a4:	885b      	ldrh	r3, [r3, #2]
 80155a6:	b29a      	uxth	r2, r3
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	781b      	ldrb	r3, [r3, #0]
 80155ac:	b29b      	uxth	r3, r3
 80155ae:	429a      	cmp	r2, r3
 80155b0:	d920      	bls.n	80155f4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	781b      	ldrb	r3, [r3, #0]
 80155b6:	b29b      	uxth	r3, r3
 80155b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80155ba:	e013      	b.n	80155e4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80155bc:	f107 030a 	add.w	r3, r7, #10
 80155c0:	4619      	mov	r1, r3
 80155c2:	6978      	ldr	r0, [r7, #20]
 80155c4:	f000 f81b 	bl	80155fe <USBD_GetNextDesc>
 80155c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	785b      	ldrb	r3, [r3, #1]
 80155ce:	2b05      	cmp	r3, #5
 80155d0:	d108      	bne.n	80155e4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80155d2:	697b      	ldr	r3, [r7, #20]
 80155d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80155d6:	693b      	ldr	r3, [r7, #16]
 80155d8:	789b      	ldrb	r3, [r3, #2]
 80155da:	78fa      	ldrb	r2, [r7, #3]
 80155dc:	429a      	cmp	r2, r3
 80155de:	d008      	beq.n	80155f2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80155e0:	2300      	movs	r3, #0
 80155e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80155e4:	68fb      	ldr	r3, [r7, #12]
 80155e6:	885b      	ldrh	r3, [r3, #2]
 80155e8:	b29a      	uxth	r2, r3
 80155ea:	897b      	ldrh	r3, [r7, #10]
 80155ec:	429a      	cmp	r2, r3
 80155ee:	d8e5      	bhi.n	80155bc <USBD_GetEpDesc+0x32>
 80155f0:	e000      	b.n	80155f4 <USBD_GetEpDesc+0x6a>
          break;
 80155f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80155f4:	693b      	ldr	r3, [r7, #16]
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	3718      	adds	r7, #24
 80155fa:	46bd      	mov	sp, r7
 80155fc:	bd80      	pop	{r7, pc}

080155fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80155fe:	b480      	push	{r7}
 8015600:	b085      	sub	sp, #20
 8015602:	af00      	add	r7, sp, #0
 8015604:	6078      	str	r0, [r7, #4]
 8015606:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 801560c:	683b      	ldr	r3, [r7, #0]
 801560e:	881a      	ldrh	r2, [r3, #0]
 8015610:	68fb      	ldr	r3, [r7, #12]
 8015612:	781b      	ldrb	r3, [r3, #0]
 8015614:	b29b      	uxth	r3, r3
 8015616:	4413      	add	r3, r2
 8015618:	b29a      	uxth	r2, r3
 801561a:	683b      	ldr	r3, [r7, #0]
 801561c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	781b      	ldrb	r3, [r3, #0]
 8015622:	461a      	mov	r2, r3
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	4413      	add	r3, r2
 8015628:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801562a:	68fb      	ldr	r3, [r7, #12]
}
 801562c:	4618      	mov	r0, r3
 801562e:	3714      	adds	r7, #20
 8015630:	46bd      	mov	sp, r7
 8015632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015636:	4770      	bx	lr

08015638 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015638:	b480      	push	{r7}
 801563a:	b087      	sub	sp, #28
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015644:	697b      	ldr	r3, [r7, #20]
 8015646:	781b      	ldrb	r3, [r3, #0]
 8015648:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801564a:	697b      	ldr	r3, [r7, #20]
 801564c:	3301      	adds	r3, #1
 801564e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015650:	697b      	ldr	r3, [r7, #20]
 8015652:	781b      	ldrb	r3, [r3, #0]
 8015654:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015656:	8a3b      	ldrh	r3, [r7, #16]
 8015658:	021b      	lsls	r3, r3, #8
 801565a:	b21a      	sxth	r2, r3
 801565c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015660:	4313      	orrs	r3, r2
 8015662:	b21b      	sxth	r3, r3
 8015664:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015666:	89fb      	ldrh	r3, [r7, #14]
}
 8015668:	4618      	mov	r0, r3
 801566a:	371c      	adds	r7, #28
 801566c:	46bd      	mov	sp, r7
 801566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015672:	4770      	bx	lr

08015674 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015674:	b580      	push	{r7, lr}
 8015676:	b084      	sub	sp, #16
 8015678:	af00      	add	r7, sp, #0
 801567a:	6078      	str	r0, [r7, #4]
 801567c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801567e:	2300      	movs	r3, #0
 8015680:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015682:	683b      	ldr	r3, [r7, #0]
 8015684:	781b      	ldrb	r3, [r3, #0]
 8015686:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801568a:	2b40      	cmp	r3, #64	; 0x40
 801568c:	d005      	beq.n	801569a <USBD_StdDevReq+0x26>
 801568e:	2b40      	cmp	r3, #64	; 0x40
 8015690:	d857      	bhi.n	8015742 <USBD_StdDevReq+0xce>
 8015692:	2b00      	cmp	r3, #0
 8015694:	d00f      	beq.n	80156b6 <USBD_StdDevReq+0x42>
 8015696:	2b20      	cmp	r3, #32
 8015698:	d153      	bne.n	8015742 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801569a:	687b      	ldr	r3, [r7, #4]
 801569c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	32ae      	adds	r2, #174	; 0xae
 80156a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156a8:	689b      	ldr	r3, [r3, #8]
 80156aa:	6839      	ldr	r1, [r7, #0]
 80156ac:	6878      	ldr	r0, [r7, #4]
 80156ae:	4798      	blx	r3
 80156b0:	4603      	mov	r3, r0
 80156b2:	73fb      	strb	r3, [r7, #15]
      break;
 80156b4:	e04a      	b.n	801574c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80156b6:	683b      	ldr	r3, [r7, #0]
 80156b8:	785b      	ldrb	r3, [r3, #1]
 80156ba:	2b09      	cmp	r3, #9
 80156bc:	d83b      	bhi.n	8015736 <USBD_StdDevReq+0xc2>
 80156be:	a201      	add	r2, pc, #4	; (adr r2, 80156c4 <USBD_StdDevReq+0x50>)
 80156c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156c4:	08015719 	.word	0x08015719
 80156c8:	0801572d 	.word	0x0801572d
 80156cc:	08015737 	.word	0x08015737
 80156d0:	08015723 	.word	0x08015723
 80156d4:	08015737 	.word	0x08015737
 80156d8:	080156f7 	.word	0x080156f7
 80156dc:	080156ed 	.word	0x080156ed
 80156e0:	08015737 	.word	0x08015737
 80156e4:	0801570f 	.word	0x0801570f
 80156e8:	08015701 	.word	0x08015701
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80156ec:	6839      	ldr	r1, [r7, #0]
 80156ee:	6878      	ldr	r0, [r7, #4]
 80156f0:	f000 fa3c 	bl	8015b6c <USBD_GetDescriptor>
          break;
 80156f4:	e024      	b.n	8015740 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80156f6:	6839      	ldr	r1, [r7, #0]
 80156f8:	6878      	ldr	r0, [r7, #4]
 80156fa:	f000 fba1 	bl	8015e40 <USBD_SetAddress>
          break;
 80156fe:	e01f      	b.n	8015740 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015700:	6839      	ldr	r1, [r7, #0]
 8015702:	6878      	ldr	r0, [r7, #4]
 8015704:	f000 fbe0 	bl	8015ec8 <USBD_SetConfig>
 8015708:	4603      	mov	r3, r0
 801570a:	73fb      	strb	r3, [r7, #15]
          break;
 801570c:	e018      	b.n	8015740 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801570e:	6839      	ldr	r1, [r7, #0]
 8015710:	6878      	ldr	r0, [r7, #4]
 8015712:	f000 fc83 	bl	801601c <USBD_GetConfig>
          break;
 8015716:	e013      	b.n	8015740 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015718:	6839      	ldr	r1, [r7, #0]
 801571a:	6878      	ldr	r0, [r7, #4]
 801571c:	f000 fcb4 	bl	8016088 <USBD_GetStatus>
          break;
 8015720:	e00e      	b.n	8015740 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015722:	6839      	ldr	r1, [r7, #0]
 8015724:	6878      	ldr	r0, [r7, #4]
 8015726:	f000 fce3 	bl	80160f0 <USBD_SetFeature>
          break;
 801572a:	e009      	b.n	8015740 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801572c:	6839      	ldr	r1, [r7, #0]
 801572e:	6878      	ldr	r0, [r7, #4]
 8015730:	f000 fd07 	bl	8016142 <USBD_ClrFeature>
          break;
 8015734:	e004      	b.n	8015740 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015736:	6839      	ldr	r1, [r7, #0]
 8015738:	6878      	ldr	r0, [r7, #4]
 801573a:	f000 fd5e 	bl	80161fa <USBD_CtlError>
          break;
 801573e:	bf00      	nop
      }
      break;
 8015740:	e004      	b.n	801574c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015742:	6839      	ldr	r1, [r7, #0]
 8015744:	6878      	ldr	r0, [r7, #4]
 8015746:	f000 fd58 	bl	80161fa <USBD_CtlError>
      break;
 801574a:	bf00      	nop
  }

  return ret;
 801574c:	7bfb      	ldrb	r3, [r7, #15]
}
 801574e:	4618      	mov	r0, r3
 8015750:	3710      	adds	r7, #16
 8015752:	46bd      	mov	sp, r7
 8015754:	bd80      	pop	{r7, pc}
 8015756:	bf00      	nop

08015758 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015758:	b580      	push	{r7, lr}
 801575a:	b084      	sub	sp, #16
 801575c:	af00      	add	r7, sp, #0
 801575e:	6078      	str	r0, [r7, #4]
 8015760:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015762:	2300      	movs	r3, #0
 8015764:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015766:	683b      	ldr	r3, [r7, #0]
 8015768:	781b      	ldrb	r3, [r3, #0]
 801576a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801576e:	2b40      	cmp	r3, #64	; 0x40
 8015770:	d005      	beq.n	801577e <USBD_StdItfReq+0x26>
 8015772:	2b40      	cmp	r3, #64	; 0x40
 8015774:	d852      	bhi.n	801581c <USBD_StdItfReq+0xc4>
 8015776:	2b00      	cmp	r3, #0
 8015778:	d001      	beq.n	801577e <USBD_StdItfReq+0x26>
 801577a:	2b20      	cmp	r3, #32
 801577c:	d14e      	bne.n	801581c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015784:	b2db      	uxtb	r3, r3
 8015786:	3b01      	subs	r3, #1
 8015788:	2b02      	cmp	r3, #2
 801578a:	d840      	bhi.n	801580e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801578c:	683b      	ldr	r3, [r7, #0]
 801578e:	889b      	ldrh	r3, [r3, #4]
 8015790:	b2db      	uxtb	r3, r3
 8015792:	2b01      	cmp	r3, #1
 8015794:	d836      	bhi.n	8015804 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015796:	683b      	ldr	r3, [r7, #0]
 8015798:	889b      	ldrh	r3, [r3, #4]
 801579a:	b2db      	uxtb	r3, r3
 801579c:	4619      	mov	r1, r3
 801579e:	6878      	ldr	r0, [r7, #4]
 80157a0:	f7ff fed9 	bl	8015556 <USBD_CoreFindIF>
 80157a4:	4603      	mov	r3, r0
 80157a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80157a8:	7bbb      	ldrb	r3, [r7, #14]
 80157aa:	2bff      	cmp	r3, #255	; 0xff
 80157ac:	d01d      	beq.n	80157ea <USBD_StdItfReq+0x92>
 80157ae:	7bbb      	ldrb	r3, [r7, #14]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d11a      	bne.n	80157ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80157b4:	7bba      	ldrb	r2, [r7, #14]
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	32ae      	adds	r2, #174	; 0xae
 80157ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157be:	689b      	ldr	r3, [r3, #8]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d00f      	beq.n	80157e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80157c4:	7bba      	ldrb	r2, [r7, #14]
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80157cc:	7bba      	ldrb	r2, [r7, #14]
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	32ae      	adds	r2, #174	; 0xae
 80157d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80157d6:	689b      	ldr	r3, [r3, #8]
 80157d8:	6839      	ldr	r1, [r7, #0]
 80157da:	6878      	ldr	r0, [r7, #4]
 80157dc:	4798      	blx	r3
 80157de:	4603      	mov	r3, r0
 80157e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80157e2:	e004      	b.n	80157ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80157e4:	2303      	movs	r3, #3
 80157e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80157e8:	e001      	b.n	80157ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80157ea:	2303      	movs	r3, #3
 80157ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80157ee:	683b      	ldr	r3, [r7, #0]
 80157f0:	88db      	ldrh	r3, [r3, #6]
 80157f2:	2b00      	cmp	r3, #0
 80157f4:	d110      	bne.n	8015818 <USBD_StdItfReq+0xc0>
 80157f6:	7bfb      	ldrb	r3, [r7, #15]
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	d10d      	bne.n	8015818 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80157fc:	6878      	ldr	r0, [r7, #4]
 80157fe:	f000 fdc7 	bl	8016390 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015802:	e009      	b.n	8015818 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015804:	6839      	ldr	r1, [r7, #0]
 8015806:	6878      	ldr	r0, [r7, #4]
 8015808:	f000 fcf7 	bl	80161fa <USBD_CtlError>
          break;
 801580c:	e004      	b.n	8015818 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801580e:	6839      	ldr	r1, [r7, #0]
 8015810:	6878      	ldr	r0, [r7, #4]
 8015812:	f000 fcf2 	bl	80161fa <USBD_CtlError>
          break;
 8015816:	e000      	b.n	801581a <USBD_StdItfReq+0xc2>
          break;
 8015818:	bf00      	nop
      }
      break;
 801581a:	e004      	b.n	8015826 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 801581c:	6839      	ldr	r1, [r7, #0]
 801581e:	6878      	ldr	r0, [r7, #4]
 8015820:	f000 fceb 	bl	80161fa <USBD_CtlError>
      break;
 8015824:	bf00      	nop
  }

  return ret;
 8015826:	7bfb      	ldrb	r3, [r7, #15]
}
 8015828:	4618      	mov	r0, r3
 801582a:	3710      	adds	r7, #16
 801582c:	46bd      	mov	sp, r7
 801582e:	bd80      	pop	{r7, pc}

08015830 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b084      	sub	sp, #16
 8015834:	af00      	add	r7, sp, #0
 8015836:	6078      	str	r0, [r7, #4]
 8015838:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801583a:	2300      	movs	r3, #0
 801583c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801583e:	683b      	ldr	r3, [r7, #0]
 8015840:	889b      	ldrh	r3, [r3, #4]
 8015842:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015844:	683b      	ldr	r3, [r7, #0]
 8015846:	781b      	ldrb	r3, [r3, #0]
 8015848:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801584c:	2b40      	cmp	r3, #64	; 0x40
 801584e:	d007      	beq.n	8015860 <USBD_StdEPReq+0x30>
 8015850:	2b40      	cmp	r3, #64	; 0x40
 8015852:	f200 817f 	bhi.w	8015b54 <USBD_StdEPReq+0x324>
 8015856:	2b00      	cmp	r3, #0
 8015858:	d02a      	beq.n	80158b0 <USBD_StdEPReq+0x80>
 801585a:	2b20      	cmp	r3, #32
 801585c:	f040 817a 	bne.w	8015b54 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015860:	7bbb      	ldrb	r3, [r7, #14]
 8015862:	4619      	mov	r1, r3
 8015864:	6878      	ldr	r0, [r7, #4]
 8015866:	f7ff fe83 	bl	8015570 <USBD_CoreFindEP>
 801586a:	4603      	mov	r3, r0
 801586c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801586e:	7b7b      	ldrb	r3, [r7, #13]
 8015870:	2bff      	cmp	r3, #255	; 0xff
 8015872:	f000 8174 	beq.w	8015b5e <USBD_StdEPReq+0x32e>
 8015876:	7b7b      	ldrb	r3, [r7, #13]
 8015878:	2b00      	cmp	r3, #0
 801587a:	f040 8170 	bne.w	8015b5e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801587e:	7b7a      	ldrb	r2, [r7, #13]
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8015886:	7b7a      	ldrb	r2, [r7, #13]
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	32ae      	adds	r2, #174	; 0xae
 801588c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015890:	689b      	ldr	r3, [r3, #8]
 8015892:	2b00      	cmp	r3, #0
 8015894:	f000 8163 	beq.w	8015b5e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8015898:	7b7a      	ldrb	r2, [r7, #13]
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	32ae      	adds	r2, #174	; 0xae
 801589e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158a2:	689b      	ldr	r3, [r3, #8]
 80158a4:	6839      	ldr	r1, [r7, #0]
 80158a6:	6878      	ldr	r0, [r7, #4]
 80158a8:	4798      	blx	r3
 80158aa:	4603      	mov	r3, r0
 80158ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80158ae:	e156      	b.n	8015b5e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80158b0:	683b      	ldr	r3, [r7, #0]
 80158b2:	785b      	ldrb	r3, [r3, #1]
 80158b4:	2b03      	cmp	r3, #3
 80158b6:	d008      	beq.n	80158ca <USBD_StdEPReq+0x9a>
 80158b8:	2b03      	cmp	r3, #3
 80158ba:	f300 8145 	bgt.w	8015b48 <USBD_StdEPReq+0x318>
 80158be:	2b00      	cmp	r3, #0
 80158c0:	f000 809b 	beq.w	80159fa <USBD_StdEPReq+0x1ca>
 80158c4:	2b01      	cmp	r3, #1
 80158c6:	d03c      	beq.n	8015942 <USBD_StdEPReq+0x112>
 80158c8:	e13e      	b.n	8015b48 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158d0:	b2db      	uxtb	r3, r3
 80158d2:	2b02      	cmp	r3, #2
 80158d4:	d002      	beq.n	80158dc <USBD_StdEPReq+0xac>
 80158d6:	2b03      	cmp	r3, #3
 80158d8:	d016      	beq.n	8015908 <USBD_StdEPReq+0xd8>
 80158da:	e02c      	b.n	8015936 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80158dc:	7bbb      	ldrb	r3, [r7, #14]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d00d      	beq.n	80158fe <USBD_StdEPReq+0xce>
 80158e2:	7bbb      	ldrb	r3, [r7, #14]
 80158e4:	2b80      	cmp	r3, #128	; 0x80
 80158e6:	d00a      	beq.n	80158fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80158e8:	7bbb      	ldrb	r3, [r7, #14]
 80158ea:	4619      	mov	r1, r3
 80158ec:	6878      	ldr	r0, [r7, #4]
 80158ee:	f001 f9c3 	bl	8016c78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80158f2:	2180      	movs	r1, #128	; 0x80
 80158f4:	6878      	ldr	r0, [r7, #4]
 80158f6:	f001 f9bf 	bl	8016c78 <USBD_LL_StallEP>
 80158fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80158fc:	e020      	b.n	8015940 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80158fe:	6839      	ldr	r1, [r7, #0]
 8015900:	6878      	ldr	r0, [r7, #4]
 8015902:	f000 fc7a 	bl	80161fa <USBD_CtlError>
              break;
 8015906:	e01b      	b.n	8015940 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015908:	683b      	ldr	r3, [r7, #0]
 801590a:	885b      	ldrh	r3, [r3, #2]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d10e      	bne.n	801592e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8015910:	7bbb      	ldrb	r3, [r7, #14]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d00b      	beq.n	801592e <USBD_StdEPReq+0xfe>
 8015916:	7bbb      	ldrb	r3, [r7, #14]
 8015918:	2b80      	cmp	r3, #128	; 0x80
 801591a:	d008      	beq.n	801592e <USBD_StdEPReq+0xfe>
 801591c:	683b      	ldr	r3, [r7, #0]
 801591e:	88db      	ldrh	r3, [r3, #6]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d104      	bne.n	801592e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8015924:	7bbb      	ldrb	r3, [r7, #14]
 8015926:	4619      	mov	r1, r3
 8015928:	6878      	ldr	r0, [r7, #4]
 801592a:	f001 f9a5 	bl	8016c78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801592e:	6878      	ldr	r0, [r7, #4]
 8015930:	f000 fd2e 	bl	8016390 <USBD_CtlSendStatus>

              break;
 8015934:	e004      	b.n	8015940 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8015936:	6839      	ldr	r1, [r7, #0]
 8015938:	6878      	ldr	r0, [r7, #4]
 801593a:	f000 fc5e 	bl	80161fa <USBD_CtlError>
              break;
 801593e:	bf00      	nop
          }
          break;
 8015940:	e107      	b.n	8015b52 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8015942:	687b      	ldr	r3, [r7, #4]
 8015944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015948:	b2db      	uxtb	r3, r3
 801594a:	2b02      	cmp	r3, #2
 801594c:	d002      	beq.n	8015954 <USBD_StdEPReq+0x124>
 801594e:	2b03      	cmp	r3, #3
 8015950:	d016      	beq.n	8015980 <USBD_StdEPReq+0x150>
 8015952:	e04b      	b.n	80159ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015954:	7bbb      	ldrb	r3, [r7, #14]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d00d      	beq.n	8015976 <USBD_StdEPReq+0x146>
 801595a:	7bbb      	ldrb	r3, [r7, #14]
 801595c:	2b80      	cmp	r3, #128	; 0x80
 801595e:	d00a      	beq.n	8015976 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8015960:	7bbb      	ldrb	r3, [r7, #14]
 8015962:	4619      	mov	r1, r3
 8015964:	6878      	ldr	r0, [r7, #4]
 8015966:	f001 f987 	bl	8016c78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801596a:	2180      	movs	r1, #128	; 0x80
 801596c:	6878      	ldr	r0, [r7, #4]
 801596e:	f001 f983 	bl	8016c78 <USBD_LL_StallEP>
 8015972:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8015974:	e040      	b.n	80159f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8015976:	6839      	ldr	r1, [r7, #0]
 8015978:	6878      	ldr	r0, [r7, #4]
 801597a:	f000 fc3e 	bl	80161fa <USBD_CtlError>
              break;
 801597e:	e03b      	b.n	80159f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8015980:	683b      	ldr	r3, [r7, #0]
 8015982:	885b      	ldrh	r3, [r3, #2]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d136      	bne.n	80159f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8015988:	7bbb      	ldrb	r3, [r7, #14]
 801598a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801598e:	2b00      	cmp	r3, #0
 8015990:	d004      	beq.n	801599c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015992:	7bbb      	ldrb	r3, [r7, #14]
 8015994:	4619      	mov	r1, r3
 8015996:	6878      	ldr	r0, [r7, #4]
 8015998:	f001 f98d 	bl	8016cb6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801599c:	6878      	ldr	r0, [r7, #4]
 801599e:	f000 fcf7 	bl	8016390 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80159a2:	7bbb      	ldrb	r3, [r7, #14]
 80159a4:	4619      	mov	r1, r3
 80159a6:	6878      	ldr	r0, [r7, #4]
 80159a8:	f7ff fde2 	bl	8015570 <USBD_CoreFindEP>
 80159ac:	4603      	mov	r3, r0
 80159ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80159b0:	7b7b      	ldrb	r3, [r7, #13]
 80159b2:	2bff      	cmp	r3, #255	; 0xff
 80159b4:	d01f      	beq.n	80159f6 <USBD_StdEPReq+0x1c6>
 80159b6:	7b7b      	ldrb	r3, [r7, #13]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d11c      	bne.n	80159f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80159bc:	7b7a      	ldrb	r2, [r7, #13]
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80159c4:	7b7a      	ldrb	r2, [r7, #13]
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	32ae      	adds	r2, #174	; 0xae
 80159ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159ce:	689b      	ldr	r3, [r3, #8]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d010      	beq.n	80159f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80159d4:	7b7a      	ldrb	r2, [r7, #13]
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	32ae      	adds	r2, #174	; 0xae
 80159da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80159de:	689b      	ldr	r3, [r3, #8]
 80159e0:	6839      	ldr	r1, [r7, #0]
 80159e2:	6878      	ldr	r0, [r7, #4]
 80159e4:	4798      	blx	r3
 80159e6:	4603      	mov	r3, r0
 80159e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80159ea:	e004      	b.n	80159f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80159ec:	6839      	ldr	r1, [r7, #0]
 80159ee:	6878      	ldr	r0, [r7, #4]
 80159f0:	f000 fc03 	bl	80161fa <USBD_CtlError>
              break;
 80159f4:	e000      	b.n	80159f8 <USBD_StdEPReq+0x1c8>
              break;
 80159f6:	bf00      	nop
          }
          break;
 80159f8:	e0ab      	b.n	8015b52 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a00:	b2db      	uxtb	r3, r3
 8015a02:	2b02      	cmp	r3, #2
 8015a04:	d002      	beq.n	8015a0c <USBD_StdEPReq+0x1dc>
 8015a06:	2b03      	cmp	r3, #3
 8015a08:	d032      	beq.n	8015a70 <USBD_StdEPReq+0x240>
 8015a0a:	e097      	b.n	8015b3c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a0c:	7bbb      	ldrb	r3, [r7, #14]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d007      	beq.n	8015a22 <USBD_StdEPReq+0x1f2>
 8015a12:	7bbb      	ldrb	r3, [r7, #14]
 8015a14:	2b80      	cmp	r3, #128	; 0x80
 8015a16:	d004      	beq.n	8015a22 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8015a18:	6839      	ldr	r1, [r7, #0]
 8015a1a:	6878      	ldr	r0, [r7, #4]
 8015a1c:	f000 fbed 	bl	80161fa <USBD_CtlError>
                break;
 8015a20:	e091      	b.n	8015b46 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	da0b      	bge.n	8015a42 <USBD_StdEPReq+0x212>
 8015a2a:	7bbb      	ldrb	r3, [r7, #14]
 8015a2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015a30:	4613      	mov	r3, r2
 8015a32:	009b      	lsls	r3, r3, #2
 8015a34:	4413      	add	r3, r2
 8015a36:	009b      	lsls	r3, r3, #2
 8015a38:	3310      	adds	r3, #16
 8015a3a:	687a      	ldr	r2, [r7, #4]
 8015a3c:	4413      	add	r3, r2
 8015a3e:	3304      	adds	r3, #4
 8015a40:	e00b      	b.n	8015a5a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015a42:	7bbb      	ldrb	r3, [r7, #14]
 8015a44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a48:	4613      	mov	r3, r2
 8015a4a:	009b      	lsls	r3, r3, #2
 8015a4c:	4413      	add	r3, r2
 8015a4e:	009b      	lsls	r3, r3, #2
 8015a50:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015a54:	687a      	ldr	r2, [r7, #4]
 8015a56:	4413      	add	r3, r2
 8015a58:	3304      	adds	r3, #4
 8015a5a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8015a5c:	68bb      	ldr	r3, [r7, #8]
 8015a5e:	2200      	movs	r2, #0
 8015a60:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015a62:	68bb      	ldr	r3, [r7, #8]
 8015a64:	2202      	movs	r2, #2
 8015a66:	4619      	mov	r1, r3
 8015a68:	6878      	ldr	r0, [r7, #4]
 8015a6a:	f000 fc37 	bl	80162dc <USBD_CtlSendData>
              break;
 8015a6e:	e06a      	b.n	8015b46 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8015a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	da11      	bge.n	8015a9c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015a78:	7bbb      	ldrb	r3, [r7, #14]
 8015a7a:	f003 020f 	and.w	r2, r3, #15
 8015a7e:	6879      	ldr	r1, [r7, #4]
 8015a80:	4613      	mov	r3, r2
 8015a82:	009b      	lsls	r3, r3, #2
 8015a84:	4413      	add	r3, r2
 8015a86:	009b      	lsls	r3, r3, #2
 8015a88:	440b      	add	r3, r1
 8015a8a:	3324      	adds	r3, #36	; 0x24
 8015a8c:	881b      	ldrh	r3, [r3, #0]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d117      	bne.n	8015ac2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015a92:	6839      	ldr	r1, [r7, #0]
 8015a94:	6878      	ldr	r0, [r7, #4]
 8015a96:	f000 fbb0 	bl	80161fa <USBD_CtlError>
                  break;
 8015a9a:	e054      	b.n	8015b46 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015a9c:	7bbb      	ldrb	r3, [r7, #14]
 8015a9e:	f003 020f 	and.w	r2, r3, #15
 8015aa2:	6879      	ldr	r1, [r7, #4]
 8015aa4:	4613      	mov	r3, r2
 8015aa6:	009b      	lsls	r3, r3, #2
 8015aa8:	4413      	add	r3, r2
 8015aaa:	009b      	lsls	r3, r3, #2
 8015aac:	440b      	add	r3, r1
 8015aae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015ab2:	881b      	ldrh	r3, [r3, #0]
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d104      	bne.n	8015ac2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8015ab8:	6839      	ldr	r1, [r7, #0]
 8015aba:	6878      	ldr	r0, [r7, #4]
 8015abc:	f000 fb9d 	bl	80161fa <USBD_CtlError>
                  break;
 8015ac0:	e041      	b.n	8015b46 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ac2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	da0b      	bge.n	8015ae2 <USBD_StdEPReq+0x2b2>
 8015aca:	7bbb      	ldrb	r3, [r7, #14]
 8015acc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015ad0:	4613      	mov	r3, r2
 8015ad2:	009b      	lsls	r3, r3, #2
 8015ad4:	4413      	add	r3, r2
 8015ad6:	009b      	lsls	r3, r3, #2
 8015ad8:	3310      	adds	r3, #16
 8015ada:	687a      	ldr	r2, [r7, #4]
 8015adc:	4413      	add	r3, r2
 8015ade:	3304      	adds	r3, #4
 8015ae0:	e00b      	b.n	8015afa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8015ae2:	7bbb      	ldrb	r3, [r7, #14]
 8015ae4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015ae8:	4613      	mov	r3, r2
 8015aea:	009b      	lsls	r3, r3, #2
 8015aec:	4413      	add	r3, r2
 8015aee:	009b      	lsls	r3, r3, #2
 8015af0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015af4:	687a      	ldr	r2, [r7, #4]
 8015af6:	4413      	add	r3, r2
 8015af8:	3304      	adds	r3, #4
 8015afa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015afc:	7bbb      	ldrb	r3, [r7, #14]
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d002      	beq.n	8015b08 <USBD_StdEPReq+0x2d8>
 8015b02:	7bbb      	ldrb	r3, [r7, #14]
 8015b04:	2b80      	cmp	r3, #128	; 0x80
 8015b06:	d103      	bne.n	8015b10 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8015b08:	68bb      	ldr	r3, [r7, #8]
 8015b0a:	2200      	movs	r2, #0
 8015b0c:	601a      	str	r2, [r3, #0]
 8015b0e:	e00e      	b.n	8015b2e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015b10:	7bbb      	ldrb	r3, [r7, #14]
 8015b12:	4619      	mov	r1, r3
 8015b14:	6878      	ldr	r0, [r7, #4]
 8015b16:	f001 f8ed 	bl	8016cf4 <USBD_LL_IsStallEP>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d003      	beq.n	8015b28 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8015b20:	68bb      	ldr	r3, [r7, #8]
 8015b22:	2201      	movs	r2, #1
 8015b24:	601a      	str	r2, [r3, #0]
 8015b26:	e002      	b.n	8015b2e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8015b28:	68bb      	ldr	r3, [r7, #8]
 8015b2a:	2200      	movs	r2, #0
 8015b2c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015b2e:	68bb      	ldr	r3, [r7, #8]
 8015b30:	2202      	movs	r2, #2
 8015b32:	4619      	mov	r1, r3
 8015b34:	6878      	ldr	r0, [r7, #4]
 8015b36:	f000 fbd1 	bl	80162dc <USBD_CtlSendData>
              break;
 8015b3a:	e004      	b.n	8015b46 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8015b3c:	6839      	ldr	r1, [r7, #0]
 8015b3e:	6878      	ldr	r0, [r7, #4]
 8015b40:	f000 fb5b 	bl	80161fa <USBD_CtlError>
              break;
 8015b44:	bf00      	nop
          }
          break;
 8015b46:	e004      	b.n	8015b52 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8015b48:	6839      	ldr	r1, [r7, #0]
 8015b4a:	6878      	ldr	r0, [r7, #4]
 8015b4c:	f000 fb55 	bl	80161fa <USBD_CtlError>
          break;
 8015b50:	bf00      	nop
      }
      break;
 8015b52:	e005      	b.n	8015b60 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8015b54:	6839      	ldr	r1, [r7, #0]
 8015b56:	6878      	ldr	r0, [r7, #4]
 8015b58:	f000 fb4f 	bl	80161fa <USBD_CtlError>
      break;
 8015b5c:	e000      	b.n	8015b60 <USBD_StdEPReq+0x330>
      break;
 8015b5e:	bf00      	nop
  }

  return ret;
 8015b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b62:	4618      	mov	r0, r3
 8015b64:	3710      	adds	r7, #16
 8015b66:	46bd      	mov	sp, r7
 8015b68:	bd80      	pop	{r7, pc}
	...

08015b6c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b084      	sub	sp, #16
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
 8015b74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015b76:	2300      	movs	r3, #0
 8015b78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015b7e:	2300      	movs	r3, #0
 8015b80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015b82:	683b      	ldr	r3, [r7, #0]
 8015b84:	885b      	ldrh	r3, [r3, #2]
 8015b86:	0a1b      	lsrs	r3, r3, #8
 8015b88:	b29b      	uxth	r3, r3
 8015b8a:	3b01      	subs	r3, #1
 8015b8c:	2b06      	cmp	r3, #6
 8015b8e:	f200 8128 	bhi.w	8015de2 <USBD_GetDescriptor+0x276>
 8015b92:	a201      	add	r2, pc, #4	; (adr r2, 8015b98 <USBD_GetDescriptor+0x2c>)
 8015b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b98:	08015bb5 	.word	0x08015bb5
 8015b9c:	08015bcd 	.word	0x08015bcd
 8015ba0:	08015c0d 	.word	0x08015c0d
 8015ba4:	08015de3 	.word	0x08015de3
 8015ba8:	08015de3 	.word	0x08015de3
 8015bac:	08015d83 	.word	0x08015d83
 8015bb0:	08015daf 	.word	0x08015daf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	687a      	ldr	r2, [r7, #4]
 8015bbe:	7c12      	ldrb	r2, [r2, #16]
 8015bc0:	f107 0108 	add.w	r1, r7, #8
 8015bc4:	4610      	mov	r0, r2
 8015bc6:	4798      	blx	r3
 8015bc8:	60f8      	str	r0, [r7, #12]
      break;
 8015bca:	e112      	b.n	8015df2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	7c1b      	ldrb	r3, [r3, #16]
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	d10d      	bne.n	8015bf0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015bdc:	f107 0208 	add.w	r2, r7, #8
 8015be0:	4610      	mov	r0, r2
 8015be2:	4798      	blx	r3
 8015be4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	3301      	adds	r3, #1
 8015bea:	2202      	movs	r2, #2
 8015bec:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8015bee:	e100      	b.n	8015df2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bf8:	f107 0208 	add.w	r2, r7, #8
 8015bfc:	4610      	mov	r0, r2
 8015bfe:	4798      	blx	r3
 8015c00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	3301      	adds	r3, #1
 8015c06:	2202      	movs	r2, #2
 8015c08:	701a      	strb	r2, [r3, #0]
      break;
 8015c0a:	e0f2      	b.n	8015df2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8015c0c:	683b      	ldr	r3, [r7, #0]
 8015c0e:	885b      	ldrh	r3, [r3, #2]
 8015c10:	b2db      	uxtb	r3, r3
 8015c12:	2b05      	cmp	r3, #5
 8015c14:	f200 80ac 	bhi.w	8015d70 <USBD_GetDescriptor+0x204>
 8015c18:	a201      	add	r2, pc, #4	; (adr r2, 8015c20 <USBD_GetDescriptor+0xb4>)
 8015c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c1e:	bf00      	nop
 8015c20:	08015c39 	.word	0x08015c39
 8015c24:	08015c6d 	.word	0x08015c6d
 8015c28:	08015ca1 	.word	0x08015ca1
 8015c2c:	08015cd5 	.word	0x08015cd5
 8015c30:	08015d09 	.word	0x08015d09
 8015c34:	08015d3d 	.word	0x08015d3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c3e:	685b      	ldr	r3, [r3, #4]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d00b      	beq.n	8015c5c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c4a:	685b      	ldr	r3, [r3, #4]
 8015c4c:	687a      	ldr	r2, [r7, #4]
 8015c4e:	7c12      	ldrb	r2, [r2, #16]
 8015c50:	f107 0108 	add.w	r1, r7, #8
 8015c54:	4610      	mov	r0, r2
 8015c56:	4798      	blx	r3
 8015c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c5a:	e091      	b.n	8015d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015c5c:	6839      	ldr	r1, [r7, #0]
 8015c5e:	6878      	ldr	r0, [r7, #4]
 8015c60:	f000 facb 	bl	80161fa <USBD_CtlError>
            err++;
 8015c64:	7afb      	ldrb	r3, [r7, #11]
 8015c66:	3301      	adds	r3, #1
 8015c68:	72fb      	strb	r3, [r7, #11]
          break;
 8015c6a:	e089      	b.n	8015d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c72:	689b      	ldr	r3, [r3, #8]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d00b      	beq.n	8015c90 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c7e:	689b      	ldr	r3, [r3, #8]
 8015c80:	687a      	ldr	r2, [r7, #4]
 8015c82:	7c12      	ldrb	r2, [r2, #16]
 8015c84:	f107 0108 	add.w	r1, r7, #8
 8015c88:	4610      	mov	r0, r2
 8015c8a:	4798      	blx	r3
 8015c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015c8e:	e077      	b.n	8015d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015c90:	6839      	ldr	r1, [r7, #0]
 8015c92:	6878      	ldr	r0, [r7, #4]
 8015c94:	f000 fab1 	bl	80161fa <USBD_CtlError>
            err++;
 8015c98:	7afb      	ldrb	r3, [r7, #11]
 8015c9a:	3301      	adds	r3, #1
 8015c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8015c9e:	e06f      	b.n	8015d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ca6:	68db      	ldr	r3, [r3, #12]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d00b      	beq.n	8015cc4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cb2:	68db      	ldr	r3, [r3, #12]
 8015cb4:	687a      	ldr	r2, [r7, #4]
 8015cb6:	7c12      	ldrb	r2, [r2, #16]
 8015cb8:	f107 0108 	add.w	r1, r7, #8
 8015cbc:	4610      	mov	r0, r2
 8015cbe:	4798      	blx	r3
 8015cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015cc2:	e05d      	b.n	8015d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015cc4:	6839      	ldr	r1, [r7, #0]
 8015cc6:	6878      	ldr	r0, [r7, #4]
 8015cc8:	f000 fa97 	bl	80161fa <USBD_CtlError>
            err++;
 8015ccc:	7afb      	ldrb	r3, [r7, #11]
 8015cce:	3301      	adds	r3, #1
 8015cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8015cd2:	e055      	b.n	8015d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cda:	691b      	ldr	r3, [r3, #16]
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	d00b      	beq.n	8015cf8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ce6:	691b      	ldr	r3, [r3, #16]
 8015ce8:	687a      	ldr	r2, [r7, #4]
 8015cea:	7c12      	ldrb	r2, [r2, #16]
 8015cec:	f107 0108 	add.w	r1, r7, #8
 8015cf0:	4610      	mov	r0, r2
 8015cf2:	4798      	blx	r3
 8015cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015cf6:	e043      	b.n	8015d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015cf8:	6839      	ldr	r1, [r7, #0]
 8015cfa:	6878      	ldr	r0, [r7, #4]
 8015cfc:	f000 fa7d 	bl	80161fa <USBD_CtlError>
            err++;
 8015d00:	7afb      	ldrb	r3, [r7, #11]
 8015d02:	3301      	adds	r3, #1
 8015d04:	72fb      	strb	r3, [r7, #11]
          break;
 8015d06:	e03b      	b.n	8015d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d0e:	695b      	ldr	r3, [r3, #20]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d00b      	beq.n	8015d2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015d14:	687b      	ldr	r3, [r7, #4]
 8015d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d1a:	695b      	ldr	r3, [r3, #20]
 8015d1c:	687a      	ldr	r2, [r7, #4]
 8015d1e:	7c12      	ldrb	r2, [r2, #16]
 8015d20:	f107 0108 	add.w	r1, r7, #8
 8015d24:	4610      	mov	r0, r2
 8015d26:	4798      	blx	r3
 8015d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d2a:	e029      	b.n	8015d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015d2c:	6839      	ldr	r1, [r7, #0]
 8015d2e:	6878      	ldr	r0, [r7, #4]
 8015d30:	f000 fa63 	bl	80161fa <USBD_CtlError>
            err++;
 8015d34:	7afb      	ldrb	r3, [r7, #11]
 8015d36:	3301      	adds	r3, #1
 8015d38:	72fb      	strb	r3, [r7, #11]
          break;
 8015d3a:	e021      	b.n	8015d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d42:	699b      	ldr	r3, [r3, #24]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d00b      	beq.n	8015d60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015d48:	687b      	ldr	r3, [r7, #4]
 8015d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d4e:	699b      	ldr	r3, [r3, #24]
 8015d50:	687a      	ldr	r2, [r7, #4]
 8015d52:	7c12      	ldrb	r2, [r2, #16]
 8015d54:	f107 0108 	add.w	r1, r7, #8
 8015d58:	4610      	mov	r0, r2
 8015d5a:	4798      	blx	r3
 8015d5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8015d5e:	e00f      	b.n	8015d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8015d60:	6839      	ldr	r1, [r7, #0]
 8015d62:	6878      	ldr	r0, [r7, #4]
 8015d64:	f000 fa49 	bl	80161fa <USBD_CtlError>
            err++;
 8015d68:	7afb      	ldrb	r3, [r7, #11]
 8015d6a:	3301      	adds	r3, #1
 8015d6c:	72fb      	strb	r3, [r7, #11]
          break;
 8015d6e:	e007      	b.n	8015d80 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8015d70:	6839      	ldr	r1, [r7, #0]
 8015d72:	6878      	ldr	r0, [r7, #4]
 8015d74:	f000 fa41 	bl	80161fa <USBD_CtlError>
          err++;
 8015d78:	7afb      	ldrb	r3, [r7, #11]
 8015d7a:	3301      	adds	r3, #1
 8015d7c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8015d7e:	bf00      	nop
      }
      break;
 8015d80:	e037      	b.n	8015df2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	7c1b      	ldrb	r3, [r3, #16]
 8015d86:	2b00      	cmp	r3, #0
 8015d88:	d109      	bne.n	8015d9e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015d92:	f107 0208 	add.w	r2, r7, #8
 8015d96:	4610      	mov	r0, r2
 8015d98:	4798      	blx	r3
 8015d9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d9c:	e029      	b.n	8015df2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015d9e:	6839      	ldr	r1, [r7, #0]
 8015da0:	6878      	ldr	r0, [r7, #4]
 8015da2:	f000 fa2a 	bl	80161fa <USBD_CtlError>
        err++;
 8015da6:	7afb      	ldrb	r3, [r7, #11]
 8015da8:	3301      	adds	r3, #1
 8015daa:	72fb      	strb	r3, [r7, #11]
      break;
 8015dac:	e021      	b.n	8015df2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	7c1b      	ldrb	r3, [r3, #16]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d10d      	bne.n	8015dd2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015dbe:	f107 0208 	add.w	r2, r7, #8
 8015dc2:	4610      	mov	r0, r2
 8015dc4:	4798      	blx	r3
 8015dc6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	3301      	adds	r3, #1
 8015dcc:	2207      	movs	r2, #7
 8015dce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015dd0:	e00f      	b.n	8015df2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8015dd2:	6839      	ldr	r1, [r7, #0]
 8015dd4:	6878      	ldr	r0, [r7, #4]
 8015dd6:	f000 fa10 	bl	80161fa <USBD_CtlError>
        err++;
 8015dda:	7afb      	ldrb	r3, [r7, #11]
 8015ddc:	3301      	adds	r3, #1
 8015dde:	72fb      	strb	r3, [r7, #11]
      break;
 8015de0:	e007      	b.n	8015df2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8015de2:	6839      	ldr	r1, [r7, #0]
 8015de4:	6878      	ldr	r0, [r7, #4]
 8015de6:	f000 fa08 	bl	80161fa <USBD_CtlError>
      err++;
 8015dea:	7afb      	ldrb	r3, [r7, #11]
 8015dec:	3301      	adds	r3, #1
 8015dee:	72fb      	strb	r3, [r7, #11]
      break;
 8015df0:	bf00      	nop
  }

  if (err != 0U)
 8015df2:	7afb      	ldrb	r3, [r7, #11]
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d11e      	bne.n	8015e36 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8015df8:	683b      	ldr	r3, [r7, #0]
 8015dfa:	88db      	ldrh	r3, [r3, #6]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d016      	beq.n	8015e2e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8015e00:	893b      	ldrh	r3, [r7, #8]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d00e      	beq.n	8015e24 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8015e06:	683b      	ldr	r3, [r7, #0]
 8015e08:	88da      	ldrh	r2, [r3, #6]
 8015e0a:	893b      	ldrh	r3, [r7, #8]
 8015e0c:	4293      	cmp	r3, r2
 8015e0e:	bf28      	it	cs
 8015e10:	4613      	movcs	r3, r2
 8015e12:	b29b      	uxth	r3, r3
 8015e14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015e16:	893b      	ldrh	r3, [r7, #8]
 8015e18:	461a      	mov	r2, r3
 8015e1a:	68f9      	ldr	r1, [r7, #12]
 8015e1c:	6878      	ldr	r0, [r7, #4]
 8015e1e:	f000 fa5d 	bl	80162dc <USBD_CtlSendData>
 8015e22:	e009      	b.n	8015e38 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015e24:	6839      	ldr	r1, [r7, #0]
 8015e26:	6878      	ldr	r0, [r7, #4]
 8015e28:	f000 f9e7 	bl	80161fa <USBD_CtlError>
 8015e2c:	e004      	b.n	8015e38 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8015e2e:	6878      	ldr	r0, [r7, #4]
 8015e30:	f000 faae 	bl	8016390 <USBD_CtlSendStatus>
 8015e34:	e000      	b.n	8015e38 <USBD_GetDescriptor+0x2cc>
    return;
 8015e36:	bf00      	nop
  }
}
 8015e38:	3710      	adds	r7, #16
 8015e3a:	46bd      	mov	sp, r7
 8015e3c:	bd80      	pop	{r7, pc}
 8015e3e:	bf00      	nop

08015e40 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e40:	b580      	push	{r7, lr}
 8015e42:	b084      	sub	sp, #16
 8015e44:	af00      	add	r7, sp, #0
 8015e46:	6078      	str	r0, [r7, #4]
 8015e48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015e4a:	683b      	ldr	r3, [r7, #0]
 8015e4c:	889b      	ldrh	r3, [r3, #4]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d131      	bne.n	8015eb6 <USBD_SetAddress+0x76>
 8015e52:	683b      	ldr	r3, [r7, #0]
 8015e54:	88db      	ldrh	r3, [r3, #6]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d12d      	bne.n	8015eb6 <USBD_SetAddress+0x76>
 8015e5a:	683b      	ldr	r3, [r7, #0]
 8015e5c:	885b      	ldrh	r3, [r3, #2]
 8015e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8015e60:	d829      	bhi.n	8015eb6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015e62:	683b      	ldr	r3, [r7, #0]
 8015e64:	885b      	ldrh	r3, [r3, #2]
 8015e66:	b2db      	uxtb	r3, r3
 8015e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015e6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015e74:	b2db      	uxtb	r3, r3
 8015e76:	2b03      	cmp	r3, #3
 8015e78:	d104      	bne.n	8015e84 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8015e7a:	6839      	ldr	r1, [r7, #0]
 8015e7c:	6878      	ldr	r0, [r7, #4]
 8015e7e:	f000 f9bc 	bl	80161fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015e82:	e01d      	b.n	8015ec0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	7bfa      	ldrb	r2, [r7, #15]
 8015e88:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015e8c:	7bfb      	ldrb	r3, [r7, #15]
 8015e8e:	4619      	mov	r1, r3
 8015e90:	6878      	ldr	r0, [r7, #4]
 8015e92:	f000 ff5b 	bl	8016d4c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015e96:	6878      	ldr	r0, [r7, #4]
 8015e98:	f000 fa7a 	bl	8016390 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015e9c:	7bfb      	ldrb	r3, [r7, #15]
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d004      	beq.n	8015eac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	2202      	movs	r2, #2
 8015ea6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015eaa:	e009      	b.n	8015ec0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	2201      	movs	r2, #1
 8015eb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015eb4:	e004      	b.n	8015ec0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015eb6:	6839      	ldr	r1, [r7, #0]
 8015eb8:	6878      	ldr	r0, [r7, #4]
 8015eba:	f000 f99e 	bl	80161fa <USBD_CtlError>
  }
}
 8015ebe:	bf00      	nop
 8015ec0:	bf00      	nop
 8015ec2:	3710      	adds	r7, #16
 8015ec4:	46bd      	mov	sp, r7
 8015ec6:	bd80      	pop	{r7, pc}

08015ec8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ec8:	b580      	push	{r7, lr}
 8015eca:	b084      	sub	sp, #16
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	6078      	str	r0, [r7, #4]
 8015ed0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015ed6:	683b      	ldr	r3, [r7, #0]
 8015ed8:	885b      	ldrh	r3, [r3, #2]
 8015eda:	b2da      	uxtb	r2, r3
 8015edc:	4b4e      	ldr	r3, [pc, #312]	; (8016018 <USBD_SetConfig+0x150>)
 8015ede:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015ee0:	4b4d      	ldr	r3, [pc, #308]	; (8016018 <USBD_SetConfig+0x150>)
 8015ee2:	781b      	ldrb	r3, [r3, #0]
 8015ee4:	2b01      	cmp	r3, #1
 8015ee6:	d905      	bls.n	8015ef4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015ee8:	6839      	ldr	r1, [r7, #0]
 8015eea:	6878      	ldr	r0, [r7, #4]
 8015eec:	f000 f985 	bl	80161fa <USBD_CtlError>
    return USBD_FAIL;
 8015ef0:	2303      	movs	r3, #3
 8015ef2:	e08c      	b.n	801600e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015efa:	b2db      	uxtb	r3, r3
 8015efc:	2b02      	cmp	r3, #2
 8015efe:	d002      	beq.n	8015f06 <USBD_SetConfig+0x3e>
 8015f00:	2b03      	cmp	r3, #3
 8015f02:	d029      	beq.n	8015f58 <USBD_SetConfig+0x90>
 8015f04:	e075      	b.n	8015ff2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015f06:	4b44      	ldr	r3, [pc, #272]	; (8016018 <USBD_SetConfig+0x150>)
 8015f08:	781b      	ldrb	r3, [r3, #0]
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d020      	beq.n	8015f50 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8015f0e:	4b42      	ldr	r3, [pc, #264]	; (8016018 <USBD_SetConfig+0x150>)
 8015f10:	781b      	ldrb	r3, [r3, #0]
 8015f12:	461a      	mov	r2, r3
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015f18:	4b3f      	ldr	r3, [pc, #252]	; (8016018 <USBD_SetConfig+0x150>)
 8015f1a:	781b      	ldrb	r3, [r3, #0]
 8015f1c:	4619      	mov	r1, r3
 8015f1e:	6878      	ldr	r0, [r7, #4]
 8015f20:	f7fe ffe1 	bl	8014ee6 <USBD_SetClassConfig>
 8015f24:	4603      	mov	r3, r0
 8015f26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015f28:	7bfb      	ldrb	r3, [r7, #15]
 8015f2a:	2b00      	cmp	r3, #0
 8015f2c:	d008      	beq.n	8015f40 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8015f2e:	6839      	ldr	r1, [r7, #0]
 8015f30:	6878      	ldr	r0, [r7, #4]
 8015f32:	f000 f962 	bl	80161fa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	2202      	movs	r2, #2
 8015f3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015f3e:	e065      	b.n	801600c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015f40:	6878      	ldr	r0, [r7, #4]
 8015f42:	f000 fa25 	bl	8016390 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	2203      	movs	r2, #3
 8015f4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015f4e:	e05d      	b.n	801600c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015f50:	6878      	ldr	r0, [r7, #4]
 8015f52:	f000 fa1d 	bl	8016390 <USBD_CtlSendStatus>
      break;
 8015f56:	e059      	b.n	801600c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8015f58:	4b2f      	ldr	r3, [pc, #188]	; (8016018 <USBD_SetConfig+0x150>)
 8015f5a:	781b      	ldrb	r3, [r3, #0]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d112      	bne.n	8015f86 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	2202      	movs	r2, #2
 8015f64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8015f68:	4b2b      	ldr	r3, [pc, #172]	; (8016018 <USBD_SetConfig+0x150>)
 8015f6a:	781b      	ldrb	r3, [r3, #0]
 8015f6c:	461a      	mov	r2, r3
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015f72:	4b29      	ldr	r3, [pc, #164]	; (8016018 <USBD_SetConfig+0x150>)
 8015f74:	781b      	ldrb	r3, [r3, #0]
 8015f76:	4619      	mov	r1, r3
 8015f78:	6878      	ldr	r0, [r7, #4]
 8015f7a:	f7fe ffd0 	bl	8014f1e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8015f7e:	6878      	ldr	r0, [r7, #4]
 8015f80:	f000 fa06 	bl	8016390 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015f84:	e042      	b.n	801600c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8015f86:	4b24      	ldr	r3, [pc, #144]	; (8016018 <USBD_SetConfig+0x150>)
 8015f88:	781b      	ldrb	r3, [r3, #0]
 8015f8a:	461a      	mov	r2, r3
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	685b      	ldr	r3, [r3, #4]
 8015f90:	429a      	cmp	r2, r3
 8015f92:	d02a      	beq.n	8015fea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	685b      	ldr	r3, [r3, #4]
 8015f98:	b2db      	uxtb	r3, r3
 8015f9a:	4619      	mov	r1, r3
 8015f9c:	6878      	ldr	r0, [r7, #4]
 8015f9e:	f7fe ffbe 	bl	8014f1e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8015fa2:	4b1d      	ldr	r3, [pc, #116]	; (8016018 <USBD_SetConfig+0x150>)
 8015fa4:	781b      	ldrb	r3, [r3, #0]
 8015fa6:	461a      	mov	r2, r3
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015fac:	4b1a      	ldr	r3, [pc, #104]	; (8016018 <USBD_SetConfig+0x150>)
 8015fae:	781b      	ldrb	r3, [r3, #0]
 8015fb0:	4619      	mov	r1, r3
 8015fb2:	6878      	ldr	r0, [r7, #4]
 8015fb4:	f7fe ff97 	bl	8014ee6 <USBD_SetClassConfig>
 8015fb8:	4603      	mov	r3, r0
 8015fba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015fbc:	7bfb      	ldrb	r3, [r7, #15]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d00f      	beq.n	8015fe2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8015fc2:	6839      	ldr	r1, [r7, #0]
 8015fc4:	6878      	ldr	r0, [r7, #4]
 8015fc6:	f000 f918 	bl	80161fa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	685b      	ldr	r3, [r3, #4]
 8015fce:	b2db      	uxtb	r3, r3
 8015fd0:	4619      	mov	r1, r3
 8015fd2:	6878      	ldr	r0, [r7, #4]
 8015fd4:	f7fe ffa3 	bl	8014f1e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	2202      	movs	r2, #2
 8015fdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015fe0:	e014      	b.n	801600c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8015fe2:	6878      	ldr	r0, [r7, #4]
 8015fe4:	f000 f9d4 	bl	8016390 <USBD_CtlSendStatus>
      break;
 8015fe8:	e010      	b.n	801600c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8015fea:	6878      	ldr	r0, [r7, #4]
 8015fec:	f000 f9d0 	bl	8016390 <USBD_CtlSendStatus>
      break;
 8015ff0:	e00c      	b.n	801600c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8015ff2:	6839      	ldr	r1, [r7, #0]
 8015ff4:	6878      	ldr	r0, [r7, #4]
 8015ff6:	f000 f900 	bl	80161fa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015ffa:	4b07      	ldr	r3, [pc, #28]	; (8016018 <USBD_SetConfig+0x150>)
 8015ffc:	781b      	ldrb	r3, [r3, #0]
 8015ffe:	4619      	mov	r1, r3
 8016000:	6878      	ldr	r0, [r7, #4]
 8016002:	f7fe ff8c 	bl	8014f1e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8016006:	2303      	movs	r3, #3
 8016008:	73fb      	strb	r3, [r7, #15]
      break;
 801600a:	bf00      	nop
  }

  return ret;
 801600c:	7bfb      	ldrb	r3, [r7, #15]
}
 801600e:	4618      	mov	r0, r3
 8016010:	3710      	adds	r7, #16
 8016012:	46bd      	mov	sp, r7
 8016014:	bd80      	pop	{r7, pc}
 8016016:	bf00      	nop
 8016018:	24001494 	.word	0x24001494

0801601c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801601c:	b580      	push	{r7, lr}
 801601e:	b082      	sub	sp, #8
 8016020:	af00      	add	r7, sp, #0
 8016022:	6078      	str	r0, [r7, #4]
 8016024:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016026:	683b      	ldr	r3, [r7, #0]
 8016028:	88db      	ldrh	r3, [r3, #6]
 801602a:	2b01      	cmp	r3, #1
 801602c:	d004      	beq.n	8016038 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801602e:	6839      	ldr	r1, [r7, #0]
 8016030:	6878      	ldr	r0, [r7, #4]
 8016032:	f000 f8e2 	bl	80161fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8016036:	e023      	b.n	8016080 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801603e:	b2db      	uxtb	r3, r3
 8016040:	2b02      	cmp	r3, #2
 8016042:	dc02      	bgt.n	801604a <USBD_GetConfig+0x2e>
 8016044:	2b00      	cmp	r3, #0
 8016046:	dc03      	bgt.n	8016050 <USBD_GetConfig+0x34>
 8016048:	e015      	b.n	8016076 <USBD_GetConfig+0x5a>
 801604a:	2b03      	cmp	r3, #3
 801604c:	d00b      	beq.n	8016066 <USBD_GetConfig+0x4a>
 801604e:	e012      	b.n	8016076 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	2200      	movs	r2, #0
 8016054:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	3308      	adds	r3, #8
 801605a:	2201      	movs	r2, #1
 801605c:	4619      	mov	r1, r3
 801605e:	6878      	ldr	r0, [r7, #4]
 8016060:	f000 f93c 	bl	80162dc <USBD_CtlSendData>
        break;
 8016064:	e00c      	b.n	8016080 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	3304      	adds	r3, #4
 801606a:	2201      	movs	r2, #1
 801606c:	4619      	mov	r1, r3
 801606e:	6878      	ldr	r0, [r7, #4]
 8016070:	f000 f934 	bl	80162dc <USBD_CtlSendData>
        break;
 8016074:	e004      	b.n	8016080 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8016076:	6839      	ldr	r1, [r7, #0]
 8016078:	6878      	ldr	r0, [r7, #4]
 801607a:	f000 f8be 	bl	80161fa <USBD_CtlError>
        break;
 801607e:	bf00      	nop
}
 8016080:	bf00      	nop
 8016082:	3708      	adds	r7, #8
 8016084:	46bd      	mov	sp, r7
 8016086:	bd80      	pop	{r7, pc}

08016088 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b082      	sub	sp, #8
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
 8016090:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016098:	b2db      	uxtb	r3, r3
 801609a:	3b01      	subs	r3, #1
 801609c:	2b02      	cmp	r3, #2
 801609e:	d81e      	bhi.n	80160de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80160a0:	683b      	ldr	r3, [r7, #0]
 80160a2:	88db      	ldrh	r3, [r3, #6]
 80160a4:	2b02      	cmp	r3, #2
 80160a6:	d004      	beq.n	80160b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80160a8:	6839      	ldr	r1, [r7, #0]
 80160aa:	6878      	ldr	r0, [r7, #4]
 80160ac:	f000 f8a5 	bl	80161fa <USBD_CtlError>
        break;
 80160b0:	e01a      	b.n	80160e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	2201      	movs	r2, #1
 80160b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d005      	beq.n	80160ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	68db      	ldr	r3, [r3, #12]
 80160c6:	f043 0202 	orr.w	r2, r3, #2
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	330c      	adds	r3, #12
 80160d2:	2202      	movs	r2, #2
 80160d4:	4619      	mov	r1, r3
 80160d6:	6878      	ldr	r0, [r7, #4]
 80160d8:	f000 f900 	bl	80162dc <USBD_CtlSendData>
      break;
 80160dc:	e004      	b.n	80160e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80160de:	6839      	ldr	r1, [r7, #0]
 80160e0:	6878      	ldr	r0, [r7, #4]
 80160e2:	f000 f88a 	bl	80161fa <USBD_CtlError>
      break;
 80160e6:	bf00      	nop
  }
}
 80160e8:	bf00      	nop
 80160ea:	3708      	adds	r7, #8
 80160ec:	46bd      	mov	sp, r7
 80160ee:	bd80      	pop	{r7, pc}

080160f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b082      	sub	sp, #8
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
 80160f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	885b      	ldrh	r3, [r3, #2]
 80160fe:	2b01      	cmp	r3, #1
 8016100:	d107      	bne.n	8016112 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	2201      	movs	r2, #1
 8016106:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801610a:	6878      	ldr	r0, [r7, #4]
 801610c:	f000 f940 	bl	8016390 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016110:	e013      	b.n	801613a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8016112:	683b      	ldr	r3, [r7, #0]
 8016114:	885b      	ldrh	r3, [r3, #2]
 8016116:	2b02      	cmp	r3, #2
 8016118:	d10b      	bne.n	8016132 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801611a:	683b      	ldr	r3, [r7, #0]
 801611c:	889b      	ldrh	r3, [r3, #4]
 801611e:	0a1b      	lsrs	r3, r3, #8
 8016120:	b29b      	uxth	r3, r3
 8016122:	b2da      	uxtb	r2, r3
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801612a:	6878      	ldr	r0, [r7, #4]
 801612c:	f000 f930 	bl	8016390 <USBD_CtlSendStatus>
}
 8016130:	e003      	b.n	801613a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8016132:	6839      	ldr	r1, [r7, #0]
 8016134:	6878      	ldr	r0, [r7, #4]
 8016136:	f000 f860 	bl	80161fa <USBD_CtlError>
}
 801613a:	bf00      	nop
 801613c:	3708      	adds	r7, #8
 801613e:	46bd      	mov	sp, r7
 8016140:	bd80      	pop	{r7, pc}

08016142 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016142:	b580      	push	{r7, lr}
 8016144:	b082      	sub	sp, #8
 8016146:	af00      	add	r7, sp, #0
 8016148:	6078      	str	r0, [r7, #4]
 801614a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016152:	b2db      	uxtb	r3, r3
 8016154:	3b01      	subs	r3, #1
 8016156:	2b02      	cmp	r3, #2
 8016158:	d80b      	bhi.n	8016172 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801615a:	683b      	ldr	r3, [r7, #0]
 801615c:	885b      	ldrh	r3, [r3, #2]
 801615e:	2b01      	cmp	r3, #1
 8016160:	d10c      	bne.n	801617c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	2200      	movs	r2, #0
 8016166:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801616a:	6878      	ldr	r0, [r7, #4]
 801616c:	f000 f910 	bl	8016390 <USBD_CtlSendStatus>
      }
      break;
 8016170:	e004      	b.n	801617c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016172:	6839      	ldr	r1, [r7, #0]
 8016174:	6878      	ldr	r0, [r7, #4]
 8016176:	f000 f840 	bl	80161fa <USBD_CtlError>
      break;
 801617a:	e000      	b.n	801617e <USBD_ClrFeature+0x3c>
      break;
 801617c:	bf00      	nop
  }
}
 801617e:	bf00      	nop
 8016180:	3708      	adds	r7, #8
 8016182:	46bd      	mov	sp, r7
 8016184:	bd80      	pop	{r7, pc}

08016186 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016186:	b580      	push	{r7, lr}
 8016188:	b084      	sub	sp, #16
 801618a:	af00      	add	r7, sp, #0
 801618c:	6078      	str	r0, [r7, #4]
 801618e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016190:	683b      	ldr	r3, [r7, #0]
 8016192:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	781a      	ldrb	r2, [r3, #0]
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	3301      	adds	r3, #1
 80161a0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80161a2:	68fb      	ldr	r3, [r7, #12]
 80161a4:	781a      	ldrb	r2, [r3, #0]
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80161aa:	68fb      	ldr	r3, [r7, #12]
 80161ac:	3301      	adds	r3, #1
 80161ae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80161b0:	68f8      	ldr	r0, [r7, #12]
 80161b2:	f7ff fa41 	bl	8015638 <SWAPBYTE>
 80161b6:	4603      	mov	r3, r0
 80161b8:	461a      	mov	r2, r3
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	3301      	adds	r3, #1
 80161c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	3301      	adds	r3, #1
 80161c8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80161ca:	68f8      	ldr	r0, [r7, #12]
 80161cc:	f7ff fa34 	bl	8015638 <SWAPBYTE>
 80161d0:	4603      	mov	r3, r0
 80161d2:	461a      	mov	r2, r3
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	3301      	adds	r3, #1
 80161dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	3301      	adds	r3, #1
 80161e2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80161e4:	68f8      	ldr	r0, [r7, #12]
 80161e6:	f7ff fa27 	bl	8015638 <SWAPBYTE>
 80161ea:	4603      	mov	r3, r0
 80161ec:	461a      	mov	r2, r3
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	80da      	strh	r2, [r3, #6]
}
 80161f2:	bf00      	nop
 80161f4:	3710      	adds	r7, #16
 80161f6:	46bd      	mov	sp, r7
 80161f8:	bd80      	pop	{r7, pc}

080161fa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80161fa:	b580      	push	{r7, lr}
 80161fc:	b082      	sub	sp, #8
 80161fe:	af00      	add	r7, sp, #0
 8016200:	6078      	str	r0, [r7, #4]
 8016202:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016204:	2180      	movs	r1, #128	; 0x80
 8016206:	6878      	ldr	r0, [r7, #4]
 8016208:	f000 fd36 	bl	8016c78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801620c:	2100      	movs	r1, #0
 801620e:	6878      	ldr	r0, [r7, #4]
 8016210:	f000 fd32 	bl	8016c78 <USBD_LL_StallEP>
}
 8016214:	bf00      	nop
 8016216:	3708      	adds	r7, #8
 8016218:	46bd      	mov	sp, r7
 801621a:	bd80      	pop	{r7, pc}

0801621c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801621c:	b580      	push	{r7, lr}
 801621e:	b086      	sub	sp, #24
 8016220:	af00      	add	r7, sp, #0
 8016222:	60f8      	str	r0, [r7, #12]
 8016224:	60b9      	str	r1, [r7, #8]
 8016226:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016228:	2300      	movs	r3, #0
 801622a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d036      	beq.n	80162a0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016236:	6938      	ldr	r0, [r7, #16]
 8016238:	f000 f836 	bl	80162a8 <USBD_GetLen>
 801623c:	4603      	mov	r3, r0
 801623e:	3301      	adds	r3, #1
 8016240:	b29b      	uxth	r3, r3
 8016242:	005b      	lsls	r3, r3, #1
 8016244:	b29a      	uxth	r2, r3
 8016246:	687b      	ldr	r3, [r7, #4]
 8016248:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801624a:	7dfb      	ldrb	r3, [r7, #23]
 801624c:	68ba      	ldr	r2, [r7, #8]
 801624e:	4413      	add	r3, r2
 8016250:	687a      	ldr	r2, [r7, #4]
 8016252:	7812      	ldrb	r2, [r2, #0]
 8016254:	701a      	strb	r2, [r3, #0]
  idx++;
 8016256:	7dfb      	ldrb	r3, [r7, #23]
 8016258:	3301      	adds	r3, #1
 801625a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801625c:	7dfb      	ldrb	r3, [r7, #23]
 801625e:	68ba      	ldr	r2, [r7, #8]
 8016260:	4413      	add	r3, r2
 8016262:	2203      	movs	r2, #3
 8016264:	701a      	strb	r2, [r3, #0]
  idx++;
 8016266:	7dfb      	ldrb	r3, [r7, #23]
 8016268:	3301      	adds	r3, #1
 801626a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801626c:	e013      	b.n	8016296 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801626e:	7dfb      	ldrb	r3, [r7, #23]
 8016270:	68ba      	ldr	r2, [r7, #8]
 8016272:	4413      	add	r3, r2
 8016274:	693a      	ldr	r2, [r7, #16]
 8016276:	7812      	ldrb	r2, [r2, #0]
 8016278:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801627a:	693b      	ldr	r3, [r7, #16]
 801627c:	3301      	adds	r3, #1
 801627e:	613b      	str	r3, [r7, #16]
    idx++;
 8016280:	7dfb      	ldrb	r3, [r7, #23]
 8016282:	3301      	adds	r3, #1
 8016284:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016286:	7dfb      	ldrb	r3, [r7, #23]
 8016288:	68ba      	ldr	r2, [r7, #8]
 801628a:	4413      	add	r3, r2
 801628c:	2200      	movs	r2, #0
 801628e:	701a      	strb	r2, [r3, #0]
    idx++;
 8016290:	7dfb      	ldrb	r3, [r7, #23]
 8016292:	3301      	adds	r3, #1
 8016294:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016296:	693b      	ldr	r3, [r7, #16]
 8016298:	781b      	ldrb	r3, [r3, #0]
 801629a:	2b00      	cmp	r3, #0
 801629c:	d1e7      	bne.n	801626e <USBD_GetString+0x52>
 801629e:	e000      	b.n	80162a2 <USBD_GetString+0x86>
    return;
 80162a0:	bf00      	nop
  }
}
 80162a2:	3718      	adds	r7, #24
 80162a4:	46bd      	mov	sp, r7
 80162a6:	bd80      	pop	{r7, pc}

080162a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80162a8:	b480      	push	{r7}
 80162aa:	b085      	sub	sp, #20
 80162ac:	af00      	add	r7, sp, #0
 80162ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80162b0:	2300      	movs	r3, #0
 80162b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80162b8:	e005      	b.n	80162c6 <USBD_GetLen+0x1e>
  {
    len++;
 80162ba:	7bfb      	ldrb	r3, [r7, #15]
 80162bc:	3301      	adds	r3, #1
 80162be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80162c0:	68bb      	ldr	r3, [r7, #8]
 80162c2:	3301      	adds	r3, #1
 80162c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80162c6:	68bb      	ldr	r3, [r7, #8]
 80162c8:	781b      	ldrb	r3, [r3, #0]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d1f5      	bne.n	80162ba <USBD_GetLen+0x12>
  }

  return len;
 80162ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80162d0:	4618      	mov	r0, r3
 80162d2:	3714      	adds	r7, #20
 80162d4:	46bd      	mov	sp, r7
 80162d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162da:	4770      	bx	lr

080162dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	b084      	sub	sp, #16
 80162e0:	af00      	add	r7, sp, #0
 80162e2:	60f8      	str	r0, [r7, #12]
 80162e4:	60b9      	str	r1, [r7, #8]
 80162e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80162e8:	68fb      	ldr	r3, [r7, #12]
 80162ea:	2202      	movs	r2, #2
 80162ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80162f0:	68fb      	ldr	r3, [r7, #12]
 80162f2:	687a      	ldr	r2, [r7, #4]
 80162f4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	687a      	ldr	r2, [r7, #4]
 80162fa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	68ba      	ldr	r2, [r7, #8]
 8016300:	2100      	movs	r1, #0
 8016302:	68f8      	ldr	r0, [r7, #12]
 8016304:	f000 fd41 	bl	8016d8a <USBD_LL_Transmit>

  return USBD_OK;
 8016308:	2300      	movs	r3, #0
}
 801630a:	4618      	mov	r0, r3
 801630c:	3710      	adds	r7, #16
 801630e:	46bd      	mov	sp, r7
 8016310:	bd80      	pop	{r7, pc}

08016312 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016312:	b580      	push	{r7, lr}
 8016314:	b084      	sub	sp, #16
 8016316:	af00      	add	r7, sp, #0
 8016318:	60f8      	str	r0, [r7, #12]
 801631a:	60b9      	str	r1, [r7, #8]
 801631c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	68ba      	ldr	r2, [r7, #8]
 8016322:	2100      	movs	r1, #0
 8016324:	68f8      	ldr	r0, [r7, #12]
 8016326:	f000 fd30 	bl	8016d8a <USBD_LL_Transmit>

  return USBD_OK;
 801632a:	2300      	movs	r3, #0
}
 801632c:	4618      	mov	r0, r3
 801632e:	3710      	adds	r7, #16
 8016330:	46bd      	mov	sp, r7
 8016332:	bd80      	pop	{r7, pc}

08016334 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016334:	b580      	push	{r7, lr}
 8016336:	b084      	sub	sp, #16
 8016338:	af00      	add	r7, sp, #0
 801633a:	60f8      	str	r0, [r7, #12]
 801633c:	60b9      	str	r1, [r7, #8]
 801633e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	2203      	movs	r2, #3
 8016344:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016348:	68fb      	ldr	r3, [r7, #12]
 801634a:	687a      	ldr	r2, [r7, #4]
 801634c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	687a      	ldr	r2, [r7, #4]
 8016354:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	68ba      	ldr	r2, [r7, #8]
 801635c:	2100      	movs	r1, #0
 801635e:	68f8      	ldr	r0, [r7, #12]
 8016360:	f000 fd34 	bl	8016dcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016364:	2300      	movs	r3, #0
}
 8016366:	4618      	mov	r0, r3
 8016368:	3710      	adds	r7, #16
 801636a:	46bd      	mov	sp, r7
 801636c:	bd80      	pop	{r7, pc}

0801636e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801636e:	b580      	push	{r7, lr}
 8016370:	b084      	sub	sp, #16
 8016372:	af00      	add	r7, sp, #0
 8016374:	60f8      	str	r0, [r7, #12]
 8016376:	60b9      	str	r1, [r7, #8]
 8016378:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	68ba      	ldr	r2, [r7, #8]
 801637e:	2100      	movs	r1, #0
 8016380:	68f8      	ldr	r0, [r7, #12]
 8016382:	f000 fd23 	bl	8016dcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016386:	2300      	movs	r3, #0
}
 8016388:	4618      	mov	r0, r3
 801638a:	3710      	adds	r7, #16
 801638c:	46bd      	mov	sp, r7
 801638e:	bd80      	pop	{r7, pc}

08016390 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016390:	b580      	push	{r7, lr}
 8016392:	b082      	sub	sp, #8
 8016394:	af00      	add	r7, sp, #0
 8016396:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	2204      	movs	r2, #4
 801639c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80163a0:	2300      	movs	r3, #0
 80163a2:	2200      	movs	r2, #0
 80163a4:	2100      	movs	r1, #0
 80163a6:	6878      	ldr	r0, [r7, #4]
 80163a8:	f000 fcef 	bl	8016d8a <USBD_LL_Transmit>

  return USBD_OK;
 80163ac:	2300      	movs	r3, #0
}
 80163ae:	4618      	mov	r0, r3
 80163b0:	3708      	adds	r7, #8
 80163b2:	46bd      	mov	sp, r7
 80163b4:	bd80      	pop	{r7, pc}

080163b6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80163b6:	b580      	push	{r7, lr}
 80163b8:	b082      	sub	sp, #8
 80163ba:	af00      	add	r7, sp, #0
 80163bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	2205      	movs	r2, #5
 80163c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80163c6:	2300      	movs	r3, #0
 80163c8:	2200      	movs	r2, #0
 80163ca:	2100      	movs	r1, #0
 80163cc:	6878      	ldr	r0, [r7, #4]
 80163ce:	f000 fcfd 	bl	8016dcc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80163d2:	2300      	movs	r3, #0
}
 80163d4:	4618      	mov	r0, r3
 80163d6:	3708      	adds	r7, #8
 80163d8:	46bd      	mov	sp, r7
 80163da:	bd80      	pop	{r7, pc}

080163dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80163dc:	b480      	push	{r7}
 80163de:	b087      	sub	sp, #28
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	60f8      	str	r0, [r7, #12]
 80163e4:	60b9      	str	r1, [r7, #8]
 80163e6:	4613      	mov	r3, r2
 80163e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80163ea:	2301      	movs	r3, #1
 80163ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80163ee:	2300      	movs	r3, #0
 80163f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80163f2:	4b1f      	ldr	r3, [pc, #124]	; (8016470 <FATFS_LinkDriverEx+0x94>)
 80163f4:	7a5b      	ldrb	r3, [r3, #9]
 80163f6:	b2db      	uxtb	r3, r3
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d131      	bne.n	8016460 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80163fc:	4b1c      	ldr	r3, [pc, #112]	; (8016470 <FATFS_LinkDriverEx+0x94>)
 80163fe:	7a5b      	ldrb	r3, [r3, #9]
 8016400:	b2db      	uxtb	r3, r3
 8016402:	461a      	mov	r2, r3
 8016404:	4b1a      	ldr	r3, [pc, #104]	; (8016470 <FATFS_LinkDriverEx+0x94>)
 8016406:	2100      	movs	r1, #0
 8016408:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801640a:	4b19      	ldr	r3, [pc, #100]	; (8016470 <FATFS_LinkDriverEx+0x94>)
 801640c:	7a5b      	ldrb	r3, [r3, #9]
 801640e:	b2db      	uxtb	r3, r3
 8016410:	4a17      	ldr	r2, [pc, #92]	; (8016470 <FATFS_LinkDriverEx+0x94>)
 8016412:	009b      	lsls	r3, r3, #2
 8016414:	4413      	add	r3, r2
 8016416:	68fa      	ldr	r2, [r7, #12]
 8016418:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801641a:	4b15      	ldr	r3, [pc, #84]	; (8016470 <FATFS_LinkDriverEx+0x94>)
 801641c:	7a5b      	ldrb	r3, [r3, #9]
 801641e:	b2db      	uxtb	r3, r3
 8016420:	461a      	mov	r2, r3
 8016422:	4b13      	ldr	r3, [pc, #76]	; (8016470 <FATFS_LinkDriverEx+0x94>)
 8016424:	4413      	add	r3, r2
 8016426:	79fa      	ldrb	r2, [r7, #7]
 8016428:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801642a:	4b11      	ldr	r3, [pc, #68]	; (8016470 <FATFS_LinkDriverEx+0x94>)
 801642c:	7a5b      	ldrb	r3, [r3, #9]
 801642e:	b2db      	uxtb	r3, r3
 8016430:	1c5a      	adds	r2, r3, #1
 8016432:	b2d1      	uxtb	r1, r2
 8016434:	4a0e      	ldr	r2, [pc, #56]	; (8016470 <FATFS_LinkDriverEx+0x94>)
 8016436:	7251      	strb	r1, [r2, #9]
 8016438:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801643a:	7dbb      	ldrb	r3, [r7, #22]
 801643c:	3330      	adds	r3, #48	; 0x30
 801643e:	b2da      	uxtb	r2, r3
 8016440:	68bb      	ldr	r3, [r7, #8]
 8016442:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016444:	68bb      	ldr	r3, [r7, #8]
 8016446:	3301      	adds	r3, #1
 8016448:	223a      	movs	r2, #58	; 0x3a
 801644a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801644c:	68bb      	ldr	r3, [r7, #8]
 801644e:	3302      	adds	r3, #2
 8016450:	222f      	movs	r2, #47	; 0x2f
 8016452:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016454:	68bb      	ldr	r3, [r7, #8]
 8016456:	3303      	adds	r3, #3
 8016458:	2200      	movs	r2, #0
 801645a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801645c:	2300      	movs	r3, #0
 801645e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016460:	7dfb      	ldrb	r3, [r7, #23]
}
 8016462:	4618      	mov	r0, r3
 8016464:	371c      	adds	r7, #28
 8016466:	46bd      	mov	sp, r7
 8016468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801646c:	4770      	bx	lr
 801646e:	bf00      	nop
 8016470:	24001498 	.word	0x24001498

08016474 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b082      	sub	sp, #8
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
 801647c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801647e:	2200      	movs	r2, #0
 8016480:	6839      	ldr	r1, [r7, #0]
 8016482:	6878      	ldr	r0, [r7, #4]
 8016484:	f7ff ffaa 	bl	80163dc <FATFS_LinkDriverEx>
 8016488:	4603      	mov	r3, r0
}
 801648a:	4618      	mov	r0, r3
 801648c:	3708      	adds	r7, #8
 801648e:	46bd      	mov	sp, r7
 8016490:	bd80      	pop	{r7, pc}
	...

08016494 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016498:	2201      	movs	r2, #1
 801649a:	4913      	ldr	r1, [pc, #76]	; (80164e8 <MX_USB_DEVICE_Init+0x54>)
 801649c:	4813      	ldr	r0, [pc, #76]	; (80164ec <MX_USB_DEVICE_Init+0x58>)
 801649e:	f7fe fca5 	bl	8014dec <USBD_Init>
 80164a2:	4603      	mov	r3, r0
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	d001      	beq.n	80164ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80164a8:	f7ec fa2c 	bl	8002904 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80164ac:	4910      	ldr	r1, [pc, #64]	; (80164f0 <MX_USB_DEVICE_Init+0x5c>)
 80164ae:	480f      	ldr	r0, [pc, #60]	; (80164ec <MX_USB_DEVICE_Init+0x58>)
 80164b0:	f7fe fccc 	bl	8014e4c <USBD_RegisterClass>
 80164b4:	4603      	mov	r3, r0
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d001      	beq.n	80164be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80164ba:	f7ec fa23 	bl	8002904 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80164be:	490d      	ldr	r1, [pc, #52]	; (80164f4 <MX_USB_DEVICE_Init+0x60>)
 80164c0:	480a      	ldr	r0, [pc, #40]	; (80164ec <MX_USB_DEVICE_Init+0x58>)
 80164c2:	f7fe fbc3 	bl	8014c4c <USBD_CDC_RegisterInterface>
 80164c6:	4603      	mov	r3, r0
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d001      	beq.n	80164d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80164cc:	f7ec fa1a 	bl	8002904 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80164d0:	4806      	ldr	r0, [pc, #24]	; (80164ec <MX_USB_DEVICE_Init+0x58>)
 80164d2:	f7fe fcf1 	bl	8014eb8 <USBD_Start>
 80164d6:	4603      	mov	r3, r0
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d001      	beq.n	80164e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80164dc:	f7ec fa12 	bl	8002904 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80164e0:	f7f3 f960 	bl	80097a4 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80164e4:	bf00      	nop
 80164e6:	bd80      	pop	{r7, pc}
 80164e8:	240000b0 	.word	0x240000b0
 80164ec:	240014a4 	.word	0x240014a4
 80164f0:	2400001c 	.word	0x2400001c
 80164f4:	2400009c 	.word	0x2400009c

080164f8 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80164f8:	b580      	push	{r7, lr}
 80164fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80164fc:	2200      	movs	r2, #0
 80164fe:	4905      	ldr	r1, [pc, #20]	; (8016514 <CDC_Init_HS+0x1c>)
 8016500:	4805      	ldr	r0, [pc, #20]	; (8016518 <CDC_Init_HS+0x20>)
 8016502:	f7fe fbbd 	bl	8014c80 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8016506:	4905      	ldr	r1, [pc, #20]	; (801651c <CDC_Init_HS+0x24>)
 8016508:	4803      	ldr	r0, [pc, #12]	; (8016518 <CDC_Init_HS+0x20>)
 801650a:	f7fe fbdb 	bl	8014cc4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801650e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8016510:	4618      	mov	r0, r3
 8016512:	bd80      	pop	{r7, pc}
 8016514:	24001f80 	.word	0x24001f80
 8016518:	240014a4 	.word	0x240014a4
 801651c:	24001780 	.word	0x24001780

08016520 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8016520:	b480      	push	{r7}
 8016522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016524:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8016526:	4618      	mov	r0, r3
 8016528:	46bd      	mov	sp, r7
 801652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801652e:	4770      	bx	lr

08016530 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016530:	b480      	push	{r7}
 8016532:	b083      	sub	sp, #12
 8016534:	af00      	add	r7, sp, #0
 8016536:	4603      	mov	r3, r0
 8016538:	6039      	str	r1, [r7, #0]
 801653a:	71fb      	strb	r3, [r7, #7]
 801653c:	4613      	mov	r3, r2
 801653e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8016540:	79fb      	ldrb	r3, [r7, #7]
 8016542:	2b23      	cmp	r3, #35	; 0x23
 8016544:	d84a      	bhi.n	80165dc <CDC_Control_HS+0xac>
 8016546:	a201      	add	r2, pc, #4	; (adr r2, 801654c <CDC_Control_HS+0x1c>)
 8016548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801654c:	080165dd 	.word	0x080165dd
 8016550:	080165dd 	.word	0x080165dd
 8016554:	080165dd 	.word	0x080165dd
 8016558:	080165dd 	.word	0x080165dd
 801655c:	080165dd 	.word	0x080165dd
 8016560:	080165dd 	.word	0x080165dd
 8016564:	080165dd 	.word	0x080165dd
 8016568:	080165dd 	.word	0x080165dd
 801656c:	080165dd 	.word	0x080165dd
 8016570:	080165dd 	.word	0x080165dd
 8016574:	080165dd 	.word	0x080165dd
 8016578:	080165dd 	.word	0x080165dd
 801657c:	080165dd 	.word	0x080165dd
 8016580:	080165dd 	.word	0x080165dd
 8016584:	080165dd 	.word	0x080165dd
 8016588:	080165dd 	.word	0x080165dd
 801658c:	080165dd 	.word	0x080165dd
 8016590:	080165dd 	.word	0x080165dd
 8016594:	080165dd 	.word	0x080165dd
 8016598:	080165dd 	.word	0x080165dd
 801659c:	080165dd 	.word	0x080165dd
 80165a0:	080165dd 	.word	0x080165dd
 80165a4:	080165dd 	.word	0x080165dd
 80165a8:	080165dd 	.word	0x080165dd
 80165ac:	080165dd 	.word	0x080165dd
 80165b0:	080165dd 	.word	0x080165dd
 80165b4:	080165dd 	.word	0x080165dd
 80165b8:	080165dd 	.word	0x080165dd
 80165bc:	080165dd 	.word	0x080165dd
 80165c0:	080165dd 	.word	0x080165dd
 80165c4:	080165dd 	.word	0x080165dd
 80165c8:	080165dd 	.word	0x080165dd
 80165cc:	080165dd 	.word	0x080165dd
 80165d0:	080165dd 	.word	0x080165dd
 80165d4:	080165dd 	.word	0x080165dd
 80165d8:	080165dd 	.word	0x080165dd
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80165dc:	bf00      	nop
  }

  return (USBD_OK);
 80165de:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80165e0:	4618      	mov	r0, r3
 80165e2:	370c      	adds	r7, #12
 80165e4:	46bd      	mov	sp, r7
 80165e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165ea:	4770      	bx	lr

080165ec <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b082      	sub	sp, #8
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	6078      	str	r0, [r7, #4]
 80165f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80165f6:	6879      	ldr	r1, [r7, #4]
 80165f8:	4805      	ldr	r0, [pc, #20]	; (8016610 <CDC_Receive_HS+0x24>)
 80165fa:	f7fe fb63 	bl	8014cc4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80165fe:	4804      	ldr	r0, [pc, #16]	; (8016610 <CDC_Receive_HS+0x24>)
 8016600:	f7fe fbbe 	bl	8014d80 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016604:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8016606:	4618      	mov	r0, r3
 8016608:	3708      	adds	r7, #8
 801660a:	46bd      	mov	sp, r7
 801660c:	bd80      	pop	{r7, pc}
 801660e:	bf00      	nop
 8016610:	240014a4 	.word	0x240014a4

08016614 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016614:	b580      	push	{r7, lr}
 8016616:	b084      	sub	sp, #16
 8016618:	af00      	add	r7, sp, #0
 801661a:	6078      	str	r0, [r7, #4]
 801661c:	460b      	mov	r3, r1
 801661e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016620:	2300      	movs	r3, #0
 8016622:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016624:	4b0d      	ldr	r3, [pc, #52]	; (801665c <CDC_Transmit_HS+0x48>)
 8016626:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801662a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801662c:	68bb      	ldr	r3, [r7, #8]
 801662e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016632:	2b00      	cmp	r3, #0
 8016634:	d001      	beq.n	801663a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016636:	2301      	movs	r3, #1
 8016638:	e00b      	b.n	8016652 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801663a:	887b      	ldrh	r3, [r7, #2]
 801663c:	461a      	mov	r2, r3
 801663e:	6879      	ldr	r1, [r7, #4]
 8016640:	4806      	ldr	r0, [pc, #24]	; (801665c <CDC_Transmit_HS+0x48>)
 8016642:	f7fe fb1d 	bl	8014c80 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016646:	4805      	ldr	r0, [pc, #20]	; (801665c <CDC_Transmit_HS+0x48>)
 8016648:	f7fe fb5a 	bl	8014d00 <USBD_CDC_TransmitPacket>
 801664c:	4603      	mov	r3, r0
 801664e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016650:	7bfb      	ldrb	r3, [r7, #15]
}
 8016652:	4618      	mov	r0, r3
 8016654:	3710      	adds	r7, #16
 8016656:	46bd      	mov	sp, r7
 8016658:	bd80      	pop	{r7, pc}
 801665a:	bf00      	nop
 801665c:	240014a4 	.word	0x240014a4

08016660 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016660:	b480      	push	{r7}
 8016662:	b087      	sub	sp, #28
 8016664:	af00      	add	r7, sp, #0
 8016666:	60f8      	str	r0, [r7, #12]
 8016668:	60b9      	str	r1, [r7, #8]
 801666a:	4613      	mov	r3, r2
 801666c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801666e:	2300      	movs	r3, #0
 8016670:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8016672:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016676:	4618      	mov	r0, r3
 8016678:	371c      	adds	r7, #28
 801667a:	46bd      	mov	sp, r7
 801667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016680:	4770      	bx	lr
	...

08016684 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016684:	b480      	push	{r7}
 8016686:	b083      	sub	sp, #12
 8016688:	af00      	add	r7, sp, #0
 801668a:	4603      	mov	r3, r0
 801668c:	6039      	str	r1, [r7, #0]
 801668e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016690:	683b      	ldr	r3, [r7, #0]
 8016692:	2212      	movs	r2, #18
 8016694:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016696:	4b03      	ldr	r3, [pc, #12]	; (80166a4 <USBD_HS_DeviceDescriptor+0x20>)
}
 8016698:	4618      	mov	r0, r3
 801669a:	370c      	adds	r7, #12
 801669c:	46bd      	mov	sp, r7
 801669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a2:	4770      	bx	lr
 80166a4:	240000cc 	.word	0x240000cc

080166a8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80166a8:	b480      	push	{r7}
 80166aa:	b083      	sub	sp, #12
 80166ac:	af00      	add	r7, sp, #0
 80166ae:	4603      	mov	r3, r0
 80166b0:	6039      	str	r1, [r7, #0]
 80166b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80166b4:	683b      	ldr	r3, [r7, #0]
 80166b6:	2204      	movs	r2, #4
 80166b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80166ba:	4b03      	ldr	r3, [pc, #12]	; (80166c8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80166bc:	4618      	mov	r0, r3
 80166be:	370c      	adds	r7, #12
 80166c0:	46bd      	mov	sp, r7
 80166c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c6:	4770      	bx	lr
 80166c8:	240000e0 	.word	0x240000e0

080166cc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80166cc:	b580      	push	{r7, lr}
 80166ce:	b082      	sub	sp, #8
 80166d0:	af00      	add	r7, sp, #0
 80166d2:	4603      	mov	r3, r0
 80166d4:	6039      	str	r1, [r7, #0]
 80166d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80166d8:	79fb      	ldrb	r3, [r7, #7]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d105      	bne.n	80166ea <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80166de:	683a      	ldr	r2, [r7, #0]
 80166e0:	4907      	ldr	r1, [pc, #28]	; (8016700 <USBD_HS_ProductStrDescriptor+0x34>)
 80166e2:	4808      	ldr	r0, [pc, #32]	; (8016704 <USBD_HS_ProductStrDescriptor+0x38>)
 80166e4:	f7ff fd9a 	bl	801621c <USBD_GetString>
 80166e8:	e004      	b.n	80166f4 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80166ea:	683a      	ldr	r2, [r7, #0]
 80166ec:	4904      	ldr	r1, [pc, #16]	; (8016700 <USBD_HS_ProductStrDescriptor+0x34>)
 80166ee:	4805      	ldr	r0, [pc, #20]	; (8016704 <USBD_HS_ProductStrDescriptor+0x38>)
 80166f0:	f7ff fd94 	bl	801621c <USBD_GetString>
  }
  return USBD_StrDesc;
 80166f4:	4b02      	ldr	r3, [pc, #8]	; (8016700 <USBD_HS_ProductStrDescriptor+0x34>)
}
 80166f6:	4618      	mov	r0, r3
 80166f8:	3708      	adds	r7, #8
 80166fa:	46bd      	mov	sp, r7
 80166fc:	bd80      	pop	{r7, pc}
 80166fe:	bf00      	nop
 8016700:	24002780 	.word	0x24002780
 8016704:	080179d4 	.word	0x080179d4

08016708 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016708:	b580      	push	{r7, lr}
 801670a:	b082      	sub	sp, #8
 801670c:	af00      	add	r7, sp, #0
 801670e:	4603      	mov	r3, r0
 8016710:	6039      	str	r1, [r7, #0]
 8016712:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016714:	683a      	ldr	r2, [r7, #0]
 8016716:	4904      	ldr	r1, [pc, #16]	; (8016728 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016718:	4804      	ldr	r0, [pc, #16]	; (801672c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801671a:	f7ff fd7f 	bl	801621c <USBD_GetString>
  return USBD_StrDesc;
 801671e:	4b02      	ldr	r3, [pc, #8]	; (8016728 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8016720:	4618      	mov	r0, r3
 8016722:	3708      	adds	r7, #8
 8016724:	46bd      	mov	sp, r7
 8016726:	bd80      	pop	{r7, pc}
 8016728:	24002780 	.word	0x24002780
 801672c:	080179f0 	.word	0x080179f0

08016730 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016730:	b580      	push	{r7, lr}
 8016732:	b082      	sub	sp, #8
 8016734:	af00      	add	r7, sp, #0
 8016736:	4603      	mov	r3, r0
 8016738:	6039      	str	r1, [r7, #0]
 801673a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801673c:	683b      	ldr	r3, [r7, #0]
 801673e:	221a      	movs	r2, #26
 8016740:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016742:	f000 f843 	bl	80167cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016746:	4b02      	ldr	r3, [pc, #8]	; (8016750 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016748:	4618      	mov	r0, r3
 801674a:	3708      	adds	r7, #8
 801674c:	46bd      	mov	sp, r7
 801674e:	bd80      	pop	{r7, pc}
 8016750:	240000e4 	.word	0x240000e4

08016754 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016754:	b580      	push	{r7, lr}
 8016756:	b082      	sub	sp, #8
 8016758:	af00      	add	r7, sp, #0
 801675a:	4603      	mov	r3, r0
 801675c:	6039      	str	r1, [r7, #0]
 801675e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016760:	79fb      	ldrb	r3, [r7, #7]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d105      	bne.n	8016772 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016766:	683a      	ldr	r2, [r7, #0]
 8016768:	4907      	ldr	r1, [pc, #28]	; (8016788 <USBD_HS_ConfigStrDescriptor+0x34>)
 801676a:	4808      	ldr	r0, [pc, #32]	; (801678c <USBD_HS_ConfigStrDescriptor+0x38>)
 801676c:	f7ff fd56 	bl	801621c <USBD_GetString>
 8016770:	e004      	b.n	801677c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016772:	683a      	ldr	r2, [r7, #0]
 8016774:	4904      	ldr	r1, [pc, #16]	; (8016788 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016776:	4805      	ldr	r0, [pc, #20]	; (801678c <USBD_HS_ConfigStrDescriptor+0x38>)
 8016778:	f7ff fd50 	bl	801621c <USBD_GetString>
  }
  return USBD_StrDesc;
 801677c:	4b02      	ldr	r3, [pc, #8]	; (8016788 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801677e:	4618      	mov	r0, r3
 8016780:	3708      	adds	r7, #8
 8016782:	46bd      	mov	sp, r7
 8016784:	bd80      	pop	{r7, pc}
 8016786:	bf00      	nop
 8016788:	24002780 	.word	0x24002780
 801678c:	080179f4 	.word	0x080179f4

08016790 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016790:	b580      	push	{r7, lr}
 8016792:	b082      	sub	sp, #8
 8016794:	af00      	add	r7, sp, #0
 8016796:	4603      	mov	r3, r0
 8016798:	6039      	str	r1, [r7, #0]
 801679a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801679c:	79fb      	ldrb	r3, [r7, #7]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d105      	bne.n	80167ae <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80167a2:	683a      	ldr	r2, [r7, #0]
 80167a4:	4907      	ldr	r1, [pc, #28]	; (80167c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80167a6:	4808      	ldr	r0, [pc, #32]	; (80167c8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80167a8:	f7ff fd38 	bl	801621c <USBD_GetString>
 80167ac:	e004      	b.n	80167b8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80167ae:	683a      	ldr	r2, [r7, #0]
 80167b0:	4904      	ldr	r1, [pc, #16]	; (80167c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80167b2:	4805      	ldr	r0, [pc, #20]	; (80167c8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80167b4:	f7ff fd32 	bl	801621c <USBD_GetString>
  }
  return USBD_StrDesc;
 80167b8:	4b02      	ldr	r3, [pc, #8]	; (80167c4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80167ba:	4618      	mov	r0, r3
 80167bc:	3708      	adds	r7, #8
 80167be:	46bd      	mov	sp, r7
 80167c0:	bd80      	pop	{r7, pc}
 80167c2:	bf00      	nop
 80167c4:	24002780 	.word	0x24002780
 80167c8:	08017a00 	.word	0x08017a00

080167cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80167cc:	b580      	push	{r7, lr}
 80167ce:	b084      	sub	sp, #16
 80167d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80167d2:	4b0f      	ldr	r3, [pc, #60]	; (8016810 <Get_SerialNum+0x44>)
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80167d8:	4b0e      	ldr	r3, [pc, #56]	; (8016814 <Get_SerialNum+0x48>)
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80167de:	4b0e      	ldr	r3, [pc, #56]	; (8016818 <Get_SerialNum+0x4c>)
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80167e4:	68fa      	ldr	r2, [r7, #12]
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	4413      	add	r3, r2
 80167ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d009      	beq.n	8016806 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80167f2:	2208      	movs	r2, #8
 80167f4:	4909      	ldr	r1, [pc, #36]	; (801681c <Get_SerialNum+0x50>)
 80167f6:	68f8      	ldr	r0, [r7, #12]
 80167f8:	f000 f814 	bl	8016824 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80167fc:	2204      	movs	r2, #4
 80167fe:	4908      	ldr	r1, [pc, #32]	; (8016820 <Get_SerialNum+0x54>)
 8016800:	68b8      	ldr	r0, [r7, #8]
 8016802:	f000 f80f 	bl	8016824 <IntToUnicode>
  }
}
 8016806:	bf00      	nop
 8016808:	3710      	adds	r7, #16
 801680a:	46bd      	mov	sp, r7
 801680c:	bd80      	pop	{r7, pc}
 801680e:	bf00      	nop
 8016810:	1ff1e800 	.word	0x1ff1e800
 8016814:	1ff1e804 	.word	0x1ff1e804
 8016818:	1ff1e808 	.word	0x1ff1e808
 801681c:	240000e6 	.word	0x240000e6
 8016820:	240000f6 	.word	0x240000f6

08016824 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016824:	b480      	push	{r7}
 8016826:	b087      	sub	sp, #28
 8016828:	af00      	add	r7, sp, #0
 801682a:	60f8      	str	r0, [r7, #12]
 801682c:	60b9      	str	r1, [r7, #8]
 801682e:	4613      	mov	r3, r2
 8016830:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016832:	2300      	movs	r3, #0
 8016834:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016836:	2300      	movs	r3, #0
 8016838:	75fb      	strb	r3, [r7, #23]
 801683a:	e027      	b.n	801688c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	0f1b      	lsrs	r3, r3, #28
 8016840:	2b09      	cmp	r3, #9
 8016842:	d80b      	bhi.n	801685c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	0f1b      	lsrs	r3, r3, #28
 8016848:	b2da      	uxtb	r2, r3
 801684a:	7dfb      	ldrb	r3, [r7, #23]
 801684c:	005b      	lsls	r3, r3, #1
 801684e:	4619      	mov	r1, r3
 8016850:	68bb      	ldr	r3, [r7, #8]
 8016852:	440b      	add	r3, r1
 8016854:	3230      	adds	r2, #48	; 0x30
 8016856:	b2d2      	uxtb	r2, r2
 8016858:	701a      	strb	r2, [r3, #0]
 801685a:	e00a      	b.n	8016872 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	0f1b      	lsrs	r3, r3, #28
 8016860:	b2da      	uxtb	r2, r3
 8016862:	7dfb      	ldrb	r3, [r7, #23]
 8016864:	005b      	lsls	r3, r3, #1
 8016866:	4619      	mov	r1, r3
 8016868:	68bb      	ldr	r3, [r7, #8]
 801686a:	440b      	add	r3, r1
 801686c:	3237      	adds	r2, #55	; 0x37
 801686e:	b2d2      	uxtb	r2, r2
 8016870:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	011b      	lsls	r3, r3, #4
 8016876:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016878:	7dfb      	ldrb	r3, [r7, #23]
 801687a:	005b      	lsls	r3, r3, #1
 801687c:	3301      	adds	r3, #1
 801687e:	68ba      	ldr	r2, [r7, #8]
 8016880:	4413      	add	r3, r2
 8016882:	2200      	movs	r2, #0
 8016884:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016886:	7dfb      	ldrb	r3, [r7, #23]
 8016888:	3301      	adds	r3, #1
 801688a:	75fb      	strb	r3, [r7, #23]
 801688c:	7dfa      	ldrb	r2, [r7, #23]
 801688e:	79fb      	ldrb	r3, [r7, #7]
 8016890:	429a      	cmp	r2, r3
 8016892:	d3d3      	bcc.n	801683c <IntToUnicode+0x18>
  }
}
 8016894:	bf00      	nop
 8016896:	bf00      	nop
 8016898:	371c      	adds	r7, #28
 801689a:	46bd      	mov	sp, r7
 801689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a0:	4770      	bx	lr
	...

080168a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80168a4:	b580      	push	{r7, lr}
 80168a6:	b0b2      	sub	sp, #200	; 0xc8
 80168a8:	af00      	add	r7, sp, #0
 80168aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80168ac:	f107 0310 	add.w	r3, r7, #16
 80168b0:	22b8      	movs	r2, #184	; 0xb8
 80168b2:	2100      	movs	r1, #0
 80168b4:	4618      	mov	r0, r3
 80168b6:	f000 fb21 	bl	8016efc <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	681b      	ldr	r3, [r3, #0]
 80168be:	4a1a      	ldr	r2, [pc, #104]	; (8016928 <HAL_PCD_MspInit+0x84>)
 80168c0:	4293      	cmp	r3, r2
 80168c2:	d12c      	bne.n	801691e <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80168c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80168c8:	f04f 0300 	mov.w	r3, #0
 80168cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80168d0:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80168d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80168d8:	f107 0310 	add.w	r3, r7, #16
 80168dc:	4618      	mov	r0, r3
 80168de:	f7f3 ff41 	bl	800a764 <HAL_RCCEx_PeriphCLKConfig>
 80168e2:	4603      	mov	r3, r0
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	d001      	beq.n	80168ec <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 80168e8:	f7ec f80c 	bl	8002904 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80168ec:	f7f2 ff5a 	bl	80097a4 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80168f0:	4b0e      	ldr	r3, [pc, #56]	; (801692c <HAL_PCD_MspInit+0x88>)
 80168f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80168f6:	4a0d      	ldr	r2, [pc, #52]	; (801692c <HAL_PCD_MspInit+0x88>)
 80168f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80168fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8016900:	4b0a      	ldr	r3, [pc, #40]	; (801692c <HAL_PCD_MspInit+0x88>)
 8016902:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8016906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801690a:	60fb      	str	r3, [r7, #12]
 801690c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801690e:	2200      	movs	r2, #0
 8016910:	2100      	movs	r1, #0
 8016912:	204d      	movs	r0, #77	; 0x4d
 8016914:	f7ee fce5 	bl	80052e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8016918:	204d      	movs	r0, #77	; 0x4d
 801691a:	f7ee fcfc 	bl	8005316 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801691e:	bf00      	nop
 8016920:	37c8      	adds	r7, #200	; 0xc8
 8016922:	46bd      	mov	sp, r7
 8016924:	bd80      	pop	{r7, pc}
 8016926:	bf00      	nop
 8016928:	40040000 	.word	0x40040000
 801692c:	58024400 	.word	0x58024400

08016930 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016930:	b580      	push	{r7, lr}
 8016932:	b082      	sub	sp, #8
 8016934:	af00      	add	r7, sp, #0
 8016936:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8016944:	4619      	mov	r1, r3
 8016946:	4610      	mov	r0, r2
 8016948:	f7fe fb03 	bl	8014f52 <USBD_LL_SetupStage>
}
 801694c:	bf00      	nop
 801694e:	3708      	adds	r7, #8
 8016950:	46bd      	mov	sp, r7
 8016952:	bd80      	pop	{r7, pc}

08016954 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016954:	b580      	push	{r7, lr}
 8016956:	b082      	sub	sp, #8
 8016958:	af00      	add	r7, sp, #0
 801695a:	6078      	str	r0, [r7, #4]
 801695c:	460b      	mov	r3, r1
 801695e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8016966:	78fa      	ldrb	r2, [r7, #3]
 8016968:	6879      	ldr	r1, [r7, #4]
 801696a:	4613      	mov	r3, r2
 801696c:	00db      	lsls	r3, r3, #3
 801696e:	4413      	add	r3, r2
 8016970:	009b      	lsls	r3, r3, #2
 8016972:	440b      	add	r3, r1
 8016974:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8016978:	681a      	ldr	r2, [r3, #0]
 801697a:	78fb      	ldrb	r3, [r7, #3]
 801697c:	4619      	mov	r1, r3
 801697e:	f7fe fb3d 	bl	8014ffc <USBD_LL_DataOutStage>
}
 8016982:	bf00      	nop
 8016984:	3708      	adds	r7, #8
 8016986:	46bd      	mov	sp, r7
 8016988:	bd80      	pop	{r7, pc}

0801698a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801698a:	b580      	push	{r7, lr}
 801698c:	b082      	sub	sp, #8
 801698e:	af00      	add	r7, sp, #0
 8016990:	6078      	str	r0, [r7, #4]
 8016992:	460b      	mov	r3, r1
 8016994:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801699c:	78fa      	ldrb	r2, [r7, #3]
 801699e:	6879      	ldr	r1, [r7, #4]
 80169a0:	4613      	mov	r3, r2
 80169a2:	00db      	lsls	r3, r3, #3
 80169a4:	4413      	add	r3, r2
 80169a6:	009b      	lsls	r3, r3, #2
 80169a8:	440b      	add	r3, r1
 80169aa:	3348      	adds	r3, #72	; 0x48
 80169ac:	681a      	ldr	r2, [r3, #0]
 80169ae:	78fb      	ldrb	r3, [r7, #3]
 80169b0:	4619      	mov	r1, r3
 80169b2:	f7fe fbd6 	bl	8015162 <USBD_LL_DataInStage>
}
 80169b6:	bf00      	nop
 80169b8:	3708      	adds	r7, #8
 80169ba:	46bd      	mov	sp, r7
 80169bc:	bd80      	pop	{r7, pc}

080169be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169be:	b580      	push	{r7, lr}
 80169c0:	b082      	sub	sp, #8
 80169c2:	af00      	add	r7, sp, #0
 80169c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80169cc:	4618      	mov	r0, r3
 80169ce:	f7fe fd10 	bl	80153f2 <USBD_LL_SOF>
}
 80169d2:	bf00      	nop
 80169d4:	3708      	adds	r7, #8
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd80      	pop	{r7, pc}

080169da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169da:	b580      	push	{r7, lr}
 80169dc:	b084      	sub	sp, #16
 80169de:	af00      	add	r7, sp, #0
 80169e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80169e2:	2301      	movs	r3, #1
 80169e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	691b      	ldr	r3, [r3, #16]
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d102      	bne.n	80169f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80169ee:	2300      	movs	r3, #0
 80169f0:	73fb      	strb	r3, [r7, #15]
 80169f2:	e008      	b.n	8016a06 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	691b      	ldr	r3, [r3, #16]
 80169f8:	2b02      	cmp	r3, #2
 80169fa:	d102      	bne.n	8016a02 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80169fc:	2301      	movs	r3, #1
 80169fe:	73fb      	strb	r3, [r7, #15]
 8016a00:	e001      	b.n	8016a06 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016a02:	f7eb ff7f 	bl	8002904 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a0c:	7bfa      	ldrb	r2, [r7, #15]
 8016a0e:	4611      	mov	r1, r2
 8016a10:	4618      	mov	r0, r3
 8016a12:	f7fe fcaa 	bl	801536a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a1c:	4618      	mov	r0, r3
 8016a1e:	f7fe fc52 	bl	80152c6 <USBD_LL_Reset>
}
 8016a22:	bf00      	nop
 8016a24:	3710      	adds	r7, #16
 8016a26:	46bd      	mov	sp, r7
 8016a28:	bd80      	pop	{r7, pc}
	...

08016a2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b082      	sub	sp, #8
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	f7fe fca5 	bl	801538a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	687a      	ldr	r2, [r7, #4]
 8016a4c:	6812      	ldr	r2, [r2, #0]
 8016a4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8016a52:	f043 0301 	orr.w	r3, r3, #1
 8016a56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	6a1b      	ldr	r3, [r3, #32]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d005      	beq.n	8016a6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8016a60:	4b04      	ldr	r3, [pc, #16]	; (8016a74 <HAL_PCD_SuspendCallback+0x48>)
 8016a62:	691b      	ldr	r3, [r3, #16]
 8016a64:	4a03      	ldr	r2, [pc, #12]	; (8016a74 <HAL_PCD_SuspendCallback+0x48>)
 8016a66:	f043 0306 	orr.w	r3, r3, #6
 8016a6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016a6c:	bf00      	nop
 8016a6e:	3708      	adds	r7, #8
 8016a70:	46bd      	mov	sp, r7
 8016a72:	bd80      	pop	{r7, pc}
 8016a74:	e000ed00 	.word	0xe000ed00

08016a78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b082      	sub	sp, #8
 8016a7c:	af00      	add	r7, sp, #0
 8016a7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016a86:	4618      	mov	r0, r3
 8016a88:	f7fe fc9b 	bl	80153c2 <USBD_LL_Resume>
}
 8016a8c:	bf00      	nop
 8016a8e:	3708      	adds	r7, #8
 8016a90:	46bd      	mov	sp, r7
 8016a92:	bd80      	pop	{r7, pc}

08016a94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b082      	sub	sp, #8
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
 8016a9c:	460b      	mov	r3, r1
 8016a9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016aa6:	78fa      	ldrb	r2, [r7, #3]
 8016aa8:	4611      	mov	r1, r2
 8016aaa:	4618      	mov	r0, r3
 8016aac:	f7fe fcf3 	bl	8015496 <USBD_LL_IsoOUTIncomplete>
}
 8016ab0:	bf00      	nop
 8016ab2:	3708      	adds	r7, #8
 8016ab4:	46bd      	mov	sp, r7
 8016ab6:	bd80      	pop	{r7, pc}

08016ab8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b082      	sub	sp, #8
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
 8016ac0:	460b      	mov	r3, r1
 8016ac2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016aca:	78fa      	ldrb	r2, [r7, #3]
 8016acc:	4611      	mov	r1, r2
 8016ace:	4618      	mov	r0, r3
 8016ad0:	f7fe fcaf 	bl	8015432 <USBD_LL_IsoINIncomplete>
}
 8016ad4:	bf00      	nop
 8016ad6:	3708      	adds	r7, #8
 8016ad8:	46bd      	mov	sp, r7
 8016ada:	bd80      	pop	{r7, pc}

08016adc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016adc:	b580      	push	{r7, lr}
 8016ade:	b082      	sub	sp, #8
 8016ae0:	af00      	add	r7, sp, #0
 8016ae2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016aea:	4618      	mov	r0, r3
 8016aec:	f7fe fd05 	bl	80154fa <USBD_LL_DevConnected>
}
 8016af0:	bf00      	nop
 8016af2:	3708      	adds	r7, #8
 8016af4:	46bd      	mov	sp, r7
 8016af6:	bd80      	pop	{r7, pc}

08016af8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016af8:	b580      	push	{r7, lr}
 8016afa:	b082      	sub	sp, #8
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8016b06:	4618      	mov	r0, r3
 8016b08:	f7fe fd02 	bl	8015510 <USBD_LL_DevDisconnected>
}
 8016b0c:	bf00      	nop
 8016b0e:	3708      	adds	r7, #8
 8016b10:	46bd      	mov	sp, r7
 8016b12:	bd80      	pop	{r7, pc}

08016b14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b082      	sub	sp, #8
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	781b      	ldrb	r3, [r3, #0]
 8016b20:	2b01      	cmp	r3, #1
 8016b22:	d140      	bne.n	8016ba6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8016b24:	4a22      	ldr	r2, [pc, #136]	; (8016bb0 <USBD_LL_Init+0x9c>)
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8016b2c:	687b      	ldr	r3, [r7, #4]
 8016b2e:	4a20      	ldr	r2, [pc, #128]	; (8016bb0 <USBD_LL_Init+0x9c>)
 8016b30:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8016b34:	4b1e      	ldr	r3, [pc, #120]	; (8016bb0 <USBD_LL_Init+0x9c>)
 8016b36:	4a1f      	ldr	r2, [pc, #124]	; (8016bb4 <USBD_LL_Init+0xa0>)
 8016b38:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8016b3a:	4b1d      	ldr	r3, [pc, #116]	; (8016bb0 <USBD_LL_Init+0x9c>)
 8016b3c:	2209      	movs	r2, #9
 8016b3e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8016b40:	4b1b      	ldr	r3, [pc, #108]	; (8016bb0 <USBD_LL_Init+0x9c>)
 8016b42:	2202      	movs	r2, #2
 8016b44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8016b46:	4b1a      	ldr	r3, [pc, #104]	; (8016bb0 <USBD_LL_Init+0x9c>)
 8016b48:	2200      	movs	r2, #0
 8016b4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8016b4c:	4b18      	ldr	r3, [pc, #96]	; (8016bb0 <USBD_LL_Init+0x9c>)
 8016b4e:	2202      	movs	r2, #2
 8016b50:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8016b52:	4b17      	ldr	r3, [pc, #92]	; (8016bb0 <USBD_LL_Init+0x9c>)
 8016b54:	2200      	movs	r2, #0
 8016b56:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8016b58:	4b15      	ldr	r3, [pc, #84]	; (8016bb0 <USBD_LL_Init+0x9c>)
 8016b5a:	2200      	movs	r2, #0
 8016b5c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8016b5e:	4b14      	ldr	r3, [pc, #80]	; (8016bb0 <USBD_LL_Init+0x9c>)
 8016b60:	2200      	movs	r2, #0
 8016b62:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8016b64:	4b12      	ldr	r3, [pc, #72]	; (8016bb0 <USBD_LL_Init+0x9c>)
 8016b66:	2200      	movs	r2, #0
 8016b68:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8016b6a:	4b11      	ldr	r3, [pc, #68]	; (8016bb0 <USBD_LL_Init+0x9c>)
 8016b6c:	2200      	movs	r2, #0
 8016b6e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8016b70:	4b0f      	ldr	r3, [pc, #60]	; (8016bb0 <USBD_LL_Init+0x9c>)
 8016b72:	2200      	movs	r2, #0
 8016b74:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8016b76:	480e      	ldr	r0, [pc, #56]	; (8016bb0 <USBD_LL_Init+0x9c>)
 8016b78:	f7f1 fb21 	bl	80081be <HAL_PCD_Init>
 8016b7c:	4603      	mov	r3, r0
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d001      	beq.n	8016b86 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8016b82:	f7eb febf 	bl	8002904 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8016b86:	f44f 7100 	mov.w	r1, #512	; 0x200
 8016b8a:	4809      	ldr	r0, [pc, #36]	; (8016bb0 <USBD_LL_Init+0x9c>)
 8016b8c:	f7f2 fd8f 	bl	80096ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8016b90:	2280      	movs	r2, #128	; 0x80
 8016b92:	2100      	movs	r1, #0
 8016b94:	4806      	ldr	r0, [pc, #24]	; (8016bb0 <USBD_LL_Init+0x9c>)
 8016b96:	f7f2 fd43 	bl	8009620 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8016b9a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8016b9e:	2101      	movs	r1, #1
 8016ba0:	4803      	ldr	r0, [pc, #12]	; (8016bb0 <USBD_LL_Init+0x9c>)
 8016ba2:	f7f2 fd3d 	bl	8009620 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8016ba6:	2300      	movs	r3, #0
}
 8016ba8:	4618      	mov	r0, r3
 8016baa:	3708      	adds	r7, #8
 8016bac:	46bd      	mov	sp, r7
 8016bae:	bd80      	pop	{r7, pc}
 8016bb0:	24002980 	.word	0x24002980
 8016bb4:	40040000 	.word	0x40040000

08016bb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b084      	sub	sp, #16
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bc0:	2300      	movs	r3, #0
 8016bc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016bce:	4618      	mov	r0, r3
 8016bd0:	f7f1 fc19 	bl	8008406 <HAL_PCD_Start>
 8016bd4:	4603      	mov	r3, r0
 8016bd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016bd8:	7bfb      	ldrb	r3, [r7, #15]
 8016bda:	4618      	mov	r0, r3
 8016bdc:	f000 f942 	bl	8016e64 <USBD_Get_USB_Status>
 8016be0:	4603      	mov	r3, r0
 8016be2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016be4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016be6:	4618      	mov	r0, r3
 8016be8:	3710      	adds	r7, #16
 8016bea:	46bd      	mov	sp, r7
 8016bec:	bd80      	pop	{r7, pc}

08016bee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016bee:	b580      	push	{r7, lr}
 8016bf0:	b084      	sub	sp, #16
 8016bf2:	af00      	add	r7, sp, #0
 8016bf4:	6078      	str	r0, [r7, #4]
 8016bf6:	4608      	mov	r0, r1
 8016bf8:	4611      	mov	r1, r2
 8016bfa:	461a      	mov	r2, r3
 8016bfc:	4603      	mov	r3, r0
 8016bfe:	70fb      	strb	r3, [r7, #3]
 8016c00:	460b      	mov	r3, r1
 8016c02:	70bb      	strb	r3, [r7, #2]
 8016c04:	4613      	mov	r3, r2
 8016c06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c08:	2300      	movs	r3, #0
 8016c0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c0c:	2300      	movs	r3, #0
 8016c0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016c16:	78bb      	ldrb	r3, [r7, #2]
 8016c18:	883a      	ldrh	r2, [r7, #0]
 8016c1a:	78f9      	ldrb	r1, [r7, #3]
 8016c1c:	f7f2 f919 	bl	8008e52 <HAL_PCD_EP_Open>
 8016c20:	4603      	mov	r3, r0
 8016c22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c24:	7bfb      	ldrb	r3, [r7, #15]
 8016c26:	4618      	mov	r0, r3
 8016c28:	f000 f91c 	bl	8016e64 <USBD_Get_USB_Status>
 8016c2c:	4603      	mov	r3, r0
 8016c2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c30:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c32:	4618      	mov	r0, r3
 8016c34:	3710      	adds	r7, #16
 8016c36:	46bd      	mov	sp, r7
 8016c38:	bd80      	pop	{r7, pc}

08016c3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c3a:	b580      	push	{r7, lr}
 8016c3c:	b084      	sub	sp, #16
 8016c3e:	af00      	add	r7, sp, #0
 8016c40:	6078      	str	r0, [r7, #4]
 8016c42:	460b      	mov	r3, r1
 8016c44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c46:	2300      	movs	r3, #0
 8016c48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016c54:	78fa      	ldrb	r2, [r7, #3]
 8016c56:	4611      	mov	r1, r2
 8016c58:	4618      	mov	r0, r3
 8016c5a:	f7f2 f962 	bl	8008f22 <HAL_PCD_EP_Close>
 8016c5e:	4603      	mov	r3, r0
 8016c60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c62:	7bfb      	ldrb	r3, [r7, #15]
 8016c64:	4618      	mov	r0, r3
 8016c66:	f000 f8fd 	bl	8016e64 <USBD_Get_USB_Status>
 8016c6a:	4603      	mov	r3, r0
 8016c6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c70:	4618      	mov	r0, r3
 8016c72:	3710      	adds	r7, #16
 8016c74:	46bd      	mov	sp, r7
 8016c76:	bd80      	pop	{r7, pc}

08016c78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	b084      	sub	sp, #16
 8016c7c:	af00      	add	r7, sp, #0
 8016c7e:	6078      	str	r0, [r7, #4]
 8016c80:	460b      	mov	r3, r1
 8016c82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c84:	2300      	movs	r3, #0
 8016c86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c88:	2300      	movs	r3, #0
 8016c8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016c92:	78fa      	ldrb	r2, [r7, #3]
 8016c94:	4611      	mov	r1, r2
 8016c96:	4618      	mov	r0, r3
 8016c98:	f7f2 fa1c 	bl	80090d4 <HAL_PCD_EP_SetStall>
 8016c9c:	4603      	mov	r3, r0
 8016c9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016ca0:	7bfb      	ldrb	r3, [r7, #15]
 8016ca2:	4618      	mov	r0, r3
 8016ca4:	f000 f8de 	bl	8016e64 <USBD_Get_USB_Status>
 8016ca8:	4603      	mov	r3, r0
 8016caa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016cac:	7bbb      	ldrb	r3, [r7, #14]
}
 8016cae:	4618      	mov	r0, r3
 8016cb0:	3710      	adds	r7, #16
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	bd80      	pop	{r7, pc}

08016cb6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016cb6:	b580      	push	{r7, lr}
 8016cb8:	b084      	sub	sp, #16
 8016cba:	af00      	add	r7, sp, #0
 8016cbc:	6078      	str	r0, [r7, #4]
 8016cbe:	460b      	mov	r3, r1
 8016cc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016cc6:	2300      	movs	r3, #0
 8016cc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016cd0:	78fa      	ldrb	r2, [r7, #3]
 8016cd2:	4611      	mov	r1, r2
 8016cd4:	4618      	mov	r0, r3
 8016cd6:	f7f2 fa61 	bl	800919c <HAL_PCD_EP_ClrStall>
 8016cda:	4603      	mov	r3, r0
 8016cdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016cde:	7bfb      	ldrb	r3, [r7, #15]
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	f000 f8bf 	bl	8016e64 <USBD_Get_USB_Status>
 8016ce6:	4603      	mov	r3, r0
 8016ce8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016cea:	7bbb      	ldrb	r3, [r7, #14]
}
 8016cec:	4618      	mov	r0, r3
 8016cee:	3710      	adds	r7, #16
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	bd80      	pop	{r7, pc}

08016cf4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016cf4:	b480      	push	{r7}
 8016cf6:	b085      	sub	sp, #20
 8016cf8:	af00      	add	r7, sp, #0
 8016cfa:	6078      	str	r0, [r7, #4]
 8016cfc:	460b      	mov	r3, r1
 8016cfe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	da0b      	bge.n	8016d28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016d10:	78fb      	ldrb	r3, [r7, #3]
 8016d12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016d16:	68f9      	ldr	r1, [r7, #12]
 8016d18:	4613      	mov	r3, r2
 8016d1a:	00db      	lsls	r3, r3, #3
 8016d1c:	4413      	add	r3, r2
 8016d1e:	009b      	lsls	r3, r3, #2
 8016d20:	440b      	add	r3, r1
 8016d22:	333e      	adds	r3, #62	; 0x3e
 8016d24:	781b      	ldrb	r3, [r3, #0]
 8016d26:	e00b      	b.n	8016d40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016d28:	78fb      	ldrb	r3, [r7, #3]
 8016d2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016d2e:	68f9      	ldr	r1, [r7, #12]
 8016d30:	4613      	mov	r3, r2
 8016d32:	00db      	lsls	r3, r3, #3
 8016d34:	4413      	add	r3, r2
 8016d36:	009b      	lsls	r3, r3, #2
 8016d38:	440b      	add	r3, r1
 8016d3a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8016d3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016d40:	4618      	mov	r0, r3
 8016d42:	3714      	adds	r7, #20
 8016d44:	46bd      	mov	sp, r7
 8016d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d4a:	4770      	bx	lr

08016d4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016d4c:	b580      	push	{r7, lr}
 8016d4e:	b084      	sub	sp, #16
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	6078      	str	r0, [r7, #4]
 8016d54:	460b      	mov	r3, r1
 8016d56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d58:	2300      	movs	r3, #0
 8016d5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016d66:	78fa      	ldrb	r2, [r7, #3]
 8016d68:	4611      	mov	r1, r2
 8016d6a:	4618      	mov	r0, r3
 8016d6c:	f7f2 f84c 	bl	8008e08 <HAL_PCD_SetAddress>
 8016d70:	4603      	mov	r3, r0
 8016d72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d74:	7bfb      	ldrb	r3, [r7, #15]
 8016d76:	4618      	mov	r0, r3
 8016d78:	f000 f874 	bl	8016e64 <USBD_Get_USB_Status>
 8016d7c:	4603      	mov	r3, r0
 8016d7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016d80:	7bbb      	ldrb	r3, [r7, #14]
}
 8016d82:	4618      	mov	r0, r3
 8016d84:	3710      	adds	r7, #16
 8016d86:	46bd      	mov	sp, r7
 8016d88:	bd80      	pop	{r7, pc}

08016d8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016d8a:	b580      	push	{r7, lr}
 8016d8c:	b086      	sub	sp, #24
 8016d8e:	af00      	add	r7, sp, #0
 8016d90:	60f8      	str	r0, [r7, #12]
 8016d92:	607a      	str	r2, [r7, #4]
 8016d94:	603b      	str	r3, [r7, #0]
 8016d96:	460b      	mov	r3, r1
 8016d98:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d9e:	2300      	movs	r3, #0
 8016da0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016da8:	7af9      	ldrb	r1, [r7, #11]
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	687a      	ldr	r2, [r7, #4]
 8016dae:	f7f2 f956 	bl	800905e <HAL_PCD_EP_Transmit>
 8016db2:	4603      	mov	r3, r0
 8016db4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016db6:	7dfb      	ldrb	r3, [r7, #23]
 8016db8:	4618      	mov	r0, r3
 8016dba:	f000 f853 	bl	8016e64 <USBD_Get_USB_Status>
 8016dbe:	4603      	mov	r3, r0
 8016dc0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016dc2:	7dbb      	ldrb	r3, [r7, #22]
}
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	3718      	adds	r7, #24
 8016dc8:	46bd      	mov	sp, r7
 8016dca:	bd80      	pop	{r7, pc}

08016dcc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016dcc:	b580      	push	{r7, lr}
 8016dce:	b086      	sub	sp, #24
 8016dd0:	af00      	add	r7, sp, #0
 8016dd2:	60f8      	str	r0, [r7, #12]
 8016dd4:	607a      	str	r2, [r7, #4]
 8016dd6:	603b      	str	r3, [r7, #0]
 8016dd8:	460b      	mov	r3, r1
 8016dda:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ddc:	2300      	movs	r3, #0
 8016dde:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016de0:	2300      	movs	r3, #0
 8016de2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8016dea:	7af9      	ldrb	r1, [r7, #11]
 8016dec:	683b      	ldr	r3, [r7, #0]
 8016dee:	687a      	ldr	r2, [r7, #4]
 8016df0:	f7f2 f8e1 	bl	8008fb6 <HAL_PCD_EP_Receive>
 8016df4:	4603      	mov	r3, r0
 8016df6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016df8:	7dfb      	ldrb	r3, [r7, #23]
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	f000 f832 	bl	8016e64 <USBD_Get_USB_Status>
 8016e00:	4603      	mov	r3, r0
 8016e02:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016e04:	7dbb      	ldrb	r3, [r7, #22]
}
 8016e06:	4618      	mov	r0, r3
 8016e08:	3718      	adds	r7, #24
 8016e0a:	46bd      	mov	sp, r7
 8016e0c:	bd80      	pop	{r7, pc}

08016e0e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016e0e:	b580      	push	{r7, lr}
 8016e10:	b082      	sub	sp, #8
 8016e12:	af00      	add	r7, sp, #0
 8016e14:	6078      	str	r0, [r7, #4]
 8016e16:	460b      	mov	r3, r1
 8016e18:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8016e20:	78fa      	ldrb	r2, [r7, #3]
 8016e22:	4611      	mov	r1, r2
 8016e24:	4618      	mov	r0, r3
 8016e26:	f7f2 f902 	bl	800902e <HAL_PCD_EP_GetRxCount>
 8016e2a:	4603      	mov	r3, r0
}
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	3708      	adds	r7, #8
 8016e30:	46bd      	mov	sp, r7
 8016e32:	bd80      	pop	{r7, pc}

08016e34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016e34:	b480      	push	{r7}
 8016e36:	b083      	sub	sp, #12
 8016e38:	af00      	add	r7, sp, #0
 8016e3a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016e3c:	4b03      	ldr	r3, [pc, #12]	; (8016e4c <USBD_static_malloc+0x18>)
}
 8016e3e:	4618      	mov	r0, r3
 8016e40:	370c      	adds	r7, #12
 8016e42:	46bd      	mov	sp, r7
 8016e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e48:	4770      	bx	lr
 8016e4a:	bf00      	nop
 8016e4c:	24002e8c 	.word	0x24002e8c

08016e50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016e50:	b480      	push	{r7}
 8016e52:	b083      	sub	sp, #12
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8016e58:	bf00      	nop
 8016e5a:	370c      	adds	r7, #12
 8016e5c:	46bd      	mov	sp, r7
 8016e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e62:	4770      	bx	lr

08016e64 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016e64:	b480      	push	{r7}
 8016e66:	b085      	sub	sp, #20
 8016e68:	af00      	add	r7, sp, #0
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016e6e:	2300      	movs	r3, #0
 8016e70:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016e72:	79fb      	ldrb	r3, [r7, #7]
 8016e74:	2b03      	cmp	r3, #3
 8016e76:	d817      	bhi.n	8016ea8 <USBD_Get_USB_Status+0x44>
 8016e78:	a201      	add	r2, pc, #4	; (adr r2, 8016e80 <USBD_Get_USB_Status+0x1c>)
 8016e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e7e:	bf00      	nop
 8016e80:	08016e91 	.word	0x08016e91
 8016e84:	08016e97 	.word	0x08016e97
 8016e88:	08016e9d 	.word	0x08016e9d
 8016e8c:	08016ea3 	.word	0x08016ea3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016e90:	2300      	movs	r3, #0
 8016e92:	73fb      	strb	r3, [r7, #15]
    break;
 8016e94:	e00b      	b.n	8016eae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016e96:	2303      	movs	r3, #3
 8016e98:	73fb      	strb	r3, [r7, #15]
    break;
 8016e9a:	e008      	b.n	8016eae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016e9c:	2301      	movs	r3, #1
 8016e9e:	73fb      	strb	r3, [r7, #15]
    break;
 8016ea0:	e005      	b.n	8016eae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016ea2:	2303      	movs	r3, #3
 8016ea4:	73fb      	strb	r3, [r7, #15]
    break;
 8016ea6:	e002      	b.n	8016eae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016ea8:	2303      	movs	r3, #3
 8016eaa:	73fb      	strb	r3, [r7, #15]
    break;
 8016eac:	bf00      	nop
  }
  return usb_status;
 8016eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	3714      	adds	r7, #20
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eba:	4770      	bx	lr

08016ebc <siprintf>:
 8016ebc:	b40e      	push	{r1, r2, r3}
 8016ebe:	b500      	push	{lr}
 8016ec0:	b09c      	sub	sp, #112	; 0x70
 8016ec2:	ab1d      	add	r3, sp, #116	; 0x74
 8016ec4:	9002      	str	r0, [sp, #8]
 8016ec6:	9006      	str	r0, [sp, #24]
 8016ec8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016ecc:	4809      	ldr	r0, [pc, #36]	; (8016ef4 <siprintf+0x38>)
 8016ece:	9107      	str	r1, [sp, #28]
 8016ed0:	9104      	str	r1, [sp, #16]
 8016ed2:	4909      	ldr	r1, [pc, #36]	; (8016ef8 <siprintf+0x3c>)
 8016ed4:	f853 2b04 	ldr.w	r2, [r3], #4
 8016ed8:	9105      	str	r1, [sp, #20]
 8016eda:	6800      	ldr	r0, [r0, #0]
 8016edc:	9301      	str	r3, [sp, #4]
 8016ede:	a902      	add	r1, sp, #8
 8016ee0:	f000 f9a8 	bl	8017234 <_svfiprintf_r>
 8016ee4:	9b02      	ldr	r3, [sp, #8]
 8016ee6:	2200      	movs	r2, #0
 8016ee8:	701a      	strb	r2, [r3, #0]
 8016eea:	b01c      	add	sp, #112	; 0x70
 8016eec:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ef0:	b003      	add	sp, #12
 8016ef2:	4770      	bx	lr
 8016ef4:	2400014c 	.word	0x2400014c
 8016ef8:	ffff0208 	.word	0xffff0208

08016efc <memset>:
 8016efc:	4402      	add	r2, r0
 8016efe:	4603      	mov	r3, r0
 8016f00:	4293      	cmp	r3, r2
 8016f02:	d100      	bne.n	8016f06 <memset+0xa>
 8016f04:	4770      	bx	lr
 8016f06:	f803 1b01 	strb.w	r1, [r3], #1
 8016f0a:	e7f9      	b.n	8016f00 <memset+0x4>

08016f0c <__errno>:
 8016f0c:	4b01      	ldr	r3, [pc, #4]	; (8016f14 <__errno+0x8>)
 8016f0e:	6818      	ldr	r0, [r3, #0]
 8016f10:	4770      	bx	lr
 8016f12:	bf00      	nop
 8016f14:	2400014c 	.word	0x2400014c

08016f18 <__libc_init_array>:
 8016f18:	b570      	push	{r4, r5, r6, lr}
 8016f1a:	4d0d      	ldr	r5, [pc, #52]	; (8016f50 <__libc_init_array+0x38>)
 8016f1c:	4c0d      	ldr	r4, [pc, #52]	; (8016f54 <__libc_init_array+0x3c>)
 8016f1e:	1b64      	subs	r4, r4, r5
 8016f20:	10a4      	asrs	r4, r4, #2
 8016f22:	2600      	movs	r6, #0
 8016f24:	42a6      	cmp	r6, r4
 8016f26:	d109      	bne.n	8016f3c <__libc_init_array+0x24>
 8016f28:	4d0b      	ldr	r5, [pc, #44]	; (8016f58 <__libc_init_array+0x40>)
 8016f2a:	4c0c      	ldr	r4, [pc, #48]	; (8016f5c <__libc_init_array+0x44>)
 8016f2c:	f000 fc72 	bl	8017814 <_init>
 8016f30:	1b64      	subs	r4, r4, r5
 8016f32:	10a4      	asrs	r4, r4, #2
 8016f34:	2600      	movs	r6, #0
 8016f36:	42a6      	cmp	r6, r4
 8016f38:	d105      	bne.n	8016f46 <__libc_init_array+0x2e>
 8016f3a:	bd70      	pop	{r4, r5, r6, pc}
 8016f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f40:	4798      	blx	r3
 8016f42:	3601      	adds	r6, #1
 8016f44:	e7ee      	b.n	8016f24 <__libc_init_array+0xc>
 8016f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f4a:	4798      	blx	r3
 8016f4c:	3601      	adds	r6, #1
 8016f4e:	e7f2      	b.n	8016f36 <__libc_init_array+0x1e>
 8016f50:	08017b10 	.word	0x08017b10
 8016f54:	08017b10 	.word	0x08017b10
 8016f58:	08017b10 	.word	0x08017b10
 8016f5c:	08017b14 	.word	0x08017b14

08016f60 <__retarget_lock_acquire_recursive>:
 8016f60:	4770      	bx	lr

08016f62 <__retarget_lock_release_recursive>:
 8016f62:	4770      	bx	lr

08016f64 <strcpy>:
 8016f64:	4603      	mov	r3, r0
 8016f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016f6a:	f803 2b01 	strb.w	r2, [r3], #1
 8016f6e:	2a00      	cmp	r2, #0
 8016f70:	d1f9      	bne.n	8016f66 <strcpy+0x2>
 8016f72:	4770      	bx	lr

08016f74 <memcpy>:
 8016f74:	440a      	add	r2, r1
 8016f76:	4291      	cmp	r1, r2
 8016f78:	f100 33ff 	add.w	r3, r0, #4294967295
 8016f7c:	d100      	bne.n	8016f80 <memcpy+0xc>
 8016f7e:	4770      	bx	lr
 8016f80:	b510      	push	{r4, lr}
 8016f82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016f86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016f8a:	4291      	cmp	r1, r2
 8016f8c:	d1f9      	bne.n	8016f82 <memcpy+0xe>
 8016f8e:	bd10      	pop	{r4, pc}

08016f90 <_free_r>:
 8016f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016f92:	2900      	cmp	r1, #0
 8016f94:	d044      	beq.n	8017020 <_free_r+0x90>
 8016f96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016f9a:	9001      	str	r0, [sp, #4]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	f1a1 0404 	sub.w	r4, r1, #4
 8016fa2:	bfb8      	it	lt
 8016fa4:	18e4      	addlt	r4, r4, r3
 8016fa6:	f000 f8df 	bl	8017168 <__malloc_lock>
 8016faa:	4a1e      	ldr	r2, [pc, #120]	; (8017024 <_free_r+0x94>)
 8016fac:	9801      	ldr	r0, [sp, #4]
 8016fae:	6813      	ldr	r3, [r2, #0]
 8016fb0:	b933      	cbnz	r3, 8016fc0 <_free_r+0x30>
 8016fb2:	6063      	str	r3, [r4, #4]
 8016fb4:	6014      	str	r4, [r2, #0]
 8016fb6:	b003      	add	sp, #12
 8016fb8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016fbc:	f000 b8da 	b.w	8017174 <__malloc_unlock>
 8016fc0:	42a3      	cmp	r3, r4
 8016fc2:	d908      	bls.n	8016fd6 <_free_r+0x46>
 8016fc4:	6825      	ldr	r5, [r4, #0]
 8016fc6:	1961      	adds	r1, r4, r5
 8016fc8:	428b      	cmp	r3, r1
 8016fca:	bf01      	itttt	eq
 8016fcc:	6819      	ldreq	r1, [r3, #0]
 8016fce:	685b      	ldreq	r3, [r3, #4]
 8016fd0:	1949      	addeq	r1, r1, r5
 8016fd2:	6021      	streq	r1, [r4, #0]
 8016fd4:	e7ed      	b.n	8016fb2 <_free_r+0x22>
 8016fd6:	461a      	mov	r2, r3
 8016fd8:	685b      	ldr	r3, [r3, #4]
 8016fda:	b10b      	cbz	r3, 8016fe0 <_free_r+0x50>
 8016fdc:	42a3      	cmp	r3, r4
 8016fde:	d9fa      	bls.n	8016fd6 <_free_r+0x46>
 8016fe0:	6811      	ldr	r1, [r2, #0]
 8016fe2:	1855      	adds	r5, r2, r1
 8016fe4:	42a5      	cmp	r5, r4
 8016fe6:	d10b      	bne.n	8017000 <_free_r+0x70>
 8016fe8:	6824      	ldr	r4, [r4, #0]
 8016fea:	4421      	add	r1, r4
 8016fec:	1854      	adds	r4, r2, r1
 8016fee:	42a3      	cmp	r3, r4
 8016ff0:	6011      	str	r1, [r2, #0]
 8016ff2:	d1e0      	bne.n	8016fb6 <_free_r+0x26>
 8016ff4:	681c      	ldr	r4, [r3, #0]
 8016ff6:	685b      	ldr	r3, [r3, #4]
 8016ff8:	6053      	str	r3, [r2, #4]
 8016ffa:	440c      	add	r4, r1
 8016ffc:	6014      	str	r4, [r2, #0]
 8016ffe:	e7da      	b.n	8016fb6 <_free_r+0x26>
 8017000:	d902      	bls.n	8017008 <_free_r+0x78>
 8017002:	230c      	movs	r3, #12
 8017004:	6003      	str	r3, [r0, #0]
 8017006:	e7d6      	b.n	8016fb6 <_free_r+0x26>
 8017008:	6825      	ldr	r5, [r4, #0]
 801700a:	1961      	adds	r1, r4, r5
 801700c:	428b      	cmp	r3, r1
 801700e:	bf04      	itt	eq
 8017010:	6819      	ldreq	r1, [r3, #0]
 8017012:	685b      	ldreq	r3, [r3, #4]
 8017014:	6063      	str	r3, [r4, #4]
 8017016:	bf04      	itt	eq
 8017018:	1949      	addeq	r1, r1, r5
 801701a:	6021      	streq	r1, [r4, #0]
 801701c:	6054      	str	r4, [r2, #4]
 801701e:	e7ca      	b.n	8016fb6 <_free_r+0x26>
 8017020:	b003      	add	sp, #12
 8017022:	bd30      	pop	{r4, r5, pc}
 8017024:	240031ec 	.word	0x240031ec

08017028 <sbrk_aligned>:
 8017028:	b570      	push	{r4, r5, r6, lr}
 801702a:	4e0e      	ldr	r6, [pc, #56]	; (8017064 <sbrk_aligned+0x3c>)
 801702c:	460c      	mov	r4, r1
 801702e:	6831      	ldr	r1, [r6, #0]
 8017030:	4605      	mov	r5, r0
 8017032:	b911      	cbnz	r1, 801703a <sbrk_aligned+0x12>
 8017034:	f000 fba6 	bl	8017784 <_sbrk_r>
 8017038:	6030      	str	r0, [r6, #0]
 801703a:	4621      	mov	r1, r4
 801703c:	4628      	mov	r0, r5
 801703e:	f000 fba1 	bl	8017784 <_sbrk_r>
 8017042:	1c43      	adds	r3, r0, #1
 8017044:	d00a      	beq.n	801705c <sbrk_aligned+0x34>
 8017046:	1cc4      	adds	r4, r0, #3
 8017048:	f024 0403 	bic.w	r4, r4, #3
 801704c:	42a0      	cmp	r0, r4
 801704e:	d007      	beq.n	8017060 <sbrk_aligned+0x38>
 8017050:	1a21      	subs	r1, r4, r0
 8017052:	4628      	mov	r0, r5
 8017054:	f000 fb96 	bl	8017784 <_sbrk_r>
 8017058:	3001      	adds	r0, #1
 801705a:	d101      	bne.n	8017060 <sbrk_aligned+0x38>
 801705c:	f04f 34ff 	mov.w	r4, #4294967295
 8017060:	4620      	mov	r0, r4
 8017062:	bd70      	pop	{r4, r5, r6, pc}
 8017064:	240031f0 	.word	0x240031f0

08017068 <_malloc_r>:
 8017068:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801706c:	1ccd      	adds	r5, r1, #3
 801706e:	f025 0503 	bic.w	r5, r5, #3
 8017072:	3508      	adds	r5, #8
 8017074:	2d0c      	cmp	r5, #12
 8017076:	bf38      	it	cc
 8017078:	250c      	movcc	r5, #12
 801707a:	2d00      	cmp	r5, #0
 801707c:	4607      	mov	r7, r0
 801707e:	db01      	blt.n	8017084 <_malloc_r+0x1c>
 8017080:	42a9      	cmp	r1, r5
 8017082:	d905      	bls.n	8017090 <_malloc_r+0x28>
 8017084:	230c      	movs	r3, #12
 8017086:	603b      	str	r3, [r7, #0]
 8017088:	2600      	movs	r6, #0
 801708a:	4630      	mov	r0, r6
 801708c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017090:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017164 <_malloc_r+0xfc>
 8017094:	f000 f868 	bl	8017168 <__malloc_lock>
 8017098:	f8d8 3000 	ldr.w	r3, [r8]
 801709c:	461c      	mov	r4, r3
 801709e:	bb5c      	cbnz	r4, 80170f8 <_malloc_r+0x90>
 80170a0:	4629      	mov	r1, r5
 80170a2:	4638      	mov	r0, r7
 80170a4:	f7ff ffc0 	bl	8017028 <sbrk_aligned>
 80170a8:	1c43      	adds	r3, r0, #1
 80170aa:	4604      	mov	r4, r0
 80170ac:	d155      	bne.n	801715a <_malloc_r+0xf2>
 80170ae:	f8d8 4000 	ldr.w	r4, [r8]
 80170b2:	4626      	mov	r6, r4
 80170b4:	2e00      	cmp	r6, #0
 80170b6:	d145      	bne.n	8017144 <_malloc_r+0xdc>
 80170b8:	2c00      	cmp	r4, #0
 80170ba:	d048      	beq.n	801714e <_malloc_r+0xe6>
 80170bc:	6823      	ldr	r3, [r4, #0]
 80170be:	4631      	mov	r1, r6
 80170c0:	4638      	mov	r0, r7
 80170c2:	eb04 0903 	add.w	r9, r4, r3
 80170c6:	f000 fb5d 	bl	8017784 <_sbrk_r>
 80170ca:	4581      	cmp	r9, r0
 80170cc:	d13f      	bne.n	801714e <_malloc_r+0xe6>
 80170ce:	6821      	ldr	r1, [r4, #0]
 80170d0:	1a6d      	subs	r5, r5, r1
 80170d2:	4629      	mov	r1, r5
 80170d4:	4638      	mov	r0, r7
 80170d6:	f7ff ffa7 	bl	8017028 <sbrk_aligned>
 80170da:	3001      	adds	r0, #1
 80170dc:	d037      	beq.n	801714e <_malloc_r+0xe6>
 80170de:	6823      	ldr	r3, [r4, #0]
 80170e0:	442b      	add	r3, r5
 80170e2:	6023      	str	r3, [r4, #0]
 80170e4:	f8d8 3000 	ldr.w	r3, [r8]
 80170e8:	2b00      	cmp	r3, #0
 80170ea:	d038      	beq.n	801715e <_malloc_r+0xf6>
 80170ec:	685a      	ldr	r2, [r3, #4]
 80170ee:	42a2      	cmp	r2, r4
 80170f0:	d12b      	bne.n	801714a <_malloc_r+0xe2>
 80170f2:	2200      	movs	r2, #0
 80170f4:	605a      	str	r2, [r3, #4]
 80170f6:	e00f      	b.n	8017118 <_malloc_r+0xb0>
 80170f8:	6822      	ldr	r2, [r4, #0]
 80170fa:	1b52      	subs	r2, r2, r5
 80170fc:	d41f      	bmi.n	801713e <_malloc_r+0xd6>
 80170fe:	2a0b      	cmp	r2, #11
 8017100:	d917      	bls.n	8017132 <_malloc_r+0xca>
 8017102:	1961      	adds	r1, r4, r5
 8017104:	42a3      	cmp	r3, r4
 8017106:	6025      	str	r5, [r4, #0]
 8017108:	bf18      	it	ne
 801710a:	6059      	strne	r1, [r3, #4]
 801710c:	6863      	ldr	r3, [r4, #4]
 801710e:	bf08      	it	eq
 8017110:	f8c8 1000 	streq.w	r1, [r8]
 8017114:	5162      	str	r2, [r4, r5]
 8017116:	604b      	str	r3, [r1, #4]
 8017118:	4638      	mov	r0, r7
 801711a:	f104 060b 	add.w	r6, r4, #11
 801711e:	f000 f829 	bl	8017174 <__malloc_unlock>
 8017122:	f026 0607 	bic.w	r6, r6, #7
 8017126:	1d23      	adds	r3, r4, #4
 8017128:	1af2      	subs	r2, r6, r3
 801712a:	d0ae      	beq.n	801708a <_malloc_r+0x22>
 801712c:	1b9b      	subs	r3, r3, r6
 801712e:	50a3      	str	r3, [r4, r2]
 8017130:	e7ab      	b.n	801708a <_malloc_r+0x22>
 8017132:	42a3      	cmp	r3, r4
 8017134:	6862      	ldr	r2, [r4, #4]
 8017136:	d1dd      	bne.n	80170f4 <_malloc_r+0x8c>
 8017138:	f8c8 2000 	str.w	r2, [r8]
 801713c:	e7ec      	b.n	8017118 <_malloc_r+0xb0>
 801713e:	4623      	mov	r3, r4
 8017140:	6864      	ldr	r4, [r4, #4]
 8017142:	e7ac      	b.n	801709e <_malloc_r+0x36>
 8017144:	4634      	mov	r4, r6
 8017146:	6876      	ldr	r6, [r6, #4]
 8017148:	e7b4      	b.n	80170b4 <_malloc_r+0x4c>
 801714a:	4613      	mov	r3, r2
 801714c:	e7cc      	b.n	80170e8 <_malloc_r+0x80>
 801714e:	230c      	movs	r3, #12
 8017150:	603b      	str	r3, [r7, #0]
 8017152:	4638      	mov	r0, r7
 8017154:	f000 f80e 	bl	8017174 <__malloc_unlock>
 8017158:	e797      	b.n	801708a <_malloc_r+0x22>
 801715a:	6025      	str	r5, [r4, #0]
 801715c:	e7dc      	b.n	8017118 <_malloc_r+0xb0>
 801715e:	605b      	str	r3, [r3, #4]
 8017160:	deff      	udf	#255	; 0xff
 8017162:	bf00      	nop
 8017164:	240031ec 	.word	0x240031ec

08017168 <__malloc_lock>:
 8017168:	4801      	ldr	r0, [pc, #4]	; (8017170 <__malloc_lock+0x8>)
 801716a:	f7ff bef9 	b.w	8016f60 <__retarget_lock_acquire_recursive>
 801716e:	bf00      	nop
 8017170:	240031e8 	.word	0x240031e8

08017174 <__malloc_unlock>:
 8017174:	4801      	ldr	r0, [pc, #4]	; (801717c <__malloc_unlock+0x8>)
 8017176:	f7ff bef4 	b.w	8016f62 <__retarget_lock_release_recursive>
 801717a:	bf00      	nop
 801717c:	240031e8 	.word	0x240031e8

08017180 <__ssputs_r>:
 8017180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017184:	688e      	ldr	r6, [r1, #8]
 8017186:	461f      	mov	r7, r3
 8017188:	42be      	cmp	r6, r7
 801718a:	680b      	ldr	r3, [r1, #0]
 801718c:	4682      	mov	sl, r0
 801718e:	460c      	mov	r4, r1
 8017190:	4690      	mov	r8, r2
 8017192:	d82c      	bhi.n	80171ee <__ssputs_r+0x6e>
 8017194:	898a      	ldrh	r2, [r1, #12]
 8017196:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801719a:	d026      	beq.n	80171ea <__ssputs_r+0x6a>
 801719c:	6965      	ldr	r5, [r4, #20]
 801719e:	6909      	ldr	r1, [r1, #16]
 80171a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80171a4:	eba3 0901 	sub.w	r9, r3, r1
 80171a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80171ac:	1c7b      	adds	r3, r7, #1
 80171ae:	444b      	add	r3, r9
 80171b0:	106d      	asrs	r5, r5, #1
 80171b2:	429d      	cmp	r5, r3
 80171b4:	bf38      	it	cc
 80171b6:	461d      	movcc	r5, r3
 80171b8:	0553      	lsls	r3, r2, #21
 80171ba:	d527      	bpl.n	801720c <__ssputs_r+0x8c>
 80171bc:	4629      	mov	r1, r5
 80171be:	f7ff ff53 	bl	8017068 <_malloc_r>
 80171c2:	4606      	mov	r6, r0
 80171c4:	b360      	cbz	r0, 8017220 <__ssputs_r+0xa0>
 80171c6:	6921      	ldr	r1, [r4, #16]
 80171c8:	464a      	mov	r2, r9
 80171ca:	f7ff fed3 	bl	8016f74 <memcpy>
 80171ce:	89a3      	ldrh	r3, [r4, #12]
 80171d0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80171d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80171d8:	81a3      	strh	r3, [r4, #12]
 80171da:	6126      	str	r6, [r4, #16]
 80171dc:	6165      	str	r5, [r4, #20]
 80171de:	444e      	add	r6, r9
 80171e0:	eba5 0509 	sub.w	r5, r5, r9
 80171e4:	6026      	str	r6, [r4, #0]
 80171e6:	60a5      	str	r5, [r4, #8]
 80171e8:	463e      	mov	r6, r7
 80171ea:	42be      	cmp	r6, r7
 80171ec:	d900      	bls.n	80171f0 <__ssputs_r+0x70>
 80171ee:	463e      	mov	r6, r7
 80171f0:	6820      	ldr	r0, [r4, #0]
 80171f2:	4632      	mov	r2, r6
 80171f4:	4641      	mov	r1, r8
 80171f6:	f000 faab 	bl	8017750 <memmove>
 80171fa:	68a3      	ldr	r3, [r4, #8]
 80171fc:	1b9b      	subs	r3, r3, r6
 80171fe:	60a3      	str	r3, [r4, #8]
 8017200:	6823      	ldr	r3, [r4, #0]
 8017202:	4433      	add	r3, r6
 8017204:	6023      	str	r3, [r4, #0]
 8017206:	2000      	movs	r0, #0
 8017208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801720c:	462a      	mov	r2, r5
 801720e:	f000 fac9 	bl	80177a4 <_realloc_r>
 8017212:	4606      	mov	r6, r0
 8017214:	2800      	cmp	r0, #0
 8017216:	d1e0      	bne.n	80171da <__ssputs_r+0x5a>
 8017218:	6921      	ldr	r1, [r4, #16]
 801721a:	4650      	mov	r0, sl
 801721c:	f7ff feb8 	bl	8016f90 <_free_r>
 8017220:	230c      	movs	r3, #12
 8017222:	f8ca 3000 	str.w	r3, [sl]
 8017226:	89a3      	ldrh	r3, [r4, #12]
 8017228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801722c:	81a3      	strh	r3, [r4, #12]
 801722e:	f04f 30ff 	mov.w	r0, #4294967295
 8017232:	e7e9      	b.n	8017208 <__ssputs_r+0x88>

08017234 <_svfiprintf_r>:
 8017234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017238:	4698      	mov	r8, r3
 801723a:	898b      	ldrh	r3, [r1, #12]
 801723c:	061b      	lsls	r3, r3, #24
 801723e:	b09d      	sub	sp, #116	; 0x74
 8017240:	4607      	mov	r7, r0
 8017242:	460d      	mov	r5, r1
 8017244:	4614      	mov	r4, r2
 8017246:	d50e      	bpl.n	8017266 <_svfiprintf_r+0x32>
 8017248:	690b      	ldr	r3, [r1, #16]
 801724a:	b963      	cbnz	r3, 8017266 <_svfiprintf_r+0x32>
 801724c:	2140      	movs	r1, #64	; 0x40
 801724e:	f7ff ff0b 	bl	8017068 <_malloc_r>
 8017252:	6028      	str	r0, [r5, #0]
 8017254:	6128      	str	r0, [r5, #16]
 8017256:	b920      	cbnz	r0, 8017262 <_svfiprintf_r+0x2e>
 8017258:	230c      	movs	r3, #12
 801725a:	603b      	str	r3, [r7, #0]
 801725c:	f04f 30ff 	mov.w	r0, #4294967295
 8017260:	e0d0      	b.n	8017404 <_svfiprintf_r+0x1d0>
 8017262:	2340      	movs	r3, #64	; 0x40
 8017264:	616b      	str	r3, [r5, #20]
 8017266:	2300      	movs	r3, #0
 8017268:	9309      	str	r3, [sp, #36]	; 0x24
 801726a:	2320      	movs	r3, #32
 801726c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017270:	f8cd 800c 	str.w	r8, [sp, #12]
 8017274:	2330      	movs	r3, #48	; 0x30
 8017276:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801741c <_svfiprintf_r+0x1e8>
 801727a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801727e:	f04f 0901 	mov.w	r9, #1
 8017282:	4623      	mov	r3, r4
 8017284:	469a      	mov	sl, r3
 8017286:	f813 2b01 	ldrb.w	r2, [r3], #1
 801728a:	b10a      	cbz	r2, 8017290 <_svfiprintf_r+0x5c>
 801728c:	2a25      	cmp	r2, #37	; 0x25
 801728e:	d1f9      	bne.n	8017284 <_svfiprintf_r+0x50>
 8017290:	ebba 0b04 	subs.w	fp, sl, r4
 8017294:	d00b      	beq.n	80172ae <_svfiprintf_r+0x7a>
 8017296:	465b      	mov	r3, fp
 8017298:	4622      	mov	r2, r4
 801729a:	4629      	mov	r1, r5
 801729c:	4638      	mov	r0, r7
 801729e:	f7ff ff6f 	bl	8017180 <__ssputs_r>
 80172a2:	3001      	adds	r0, #1
 80172a4:	f000 80a9 	beq.w	80173fa <_svfiprintf_r+0x1c6>
 80172a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80172aa:	445a      	add	r2, fp
 80172ac:	9209      	str	r2, [sp, #36]	; 0x24
 80172ae:	f89a 3000 	ldrb.w	r3, [sl]
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	f000 80a1 	beq.w	80173fa <_svfiprintf_r+0x1c6>
 80172b8:	2300      	movs	r3, #0
 80172ba:	f04f 32ff 	mov.w	r2, #4294967295
 80172be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80172c2:	f10a 0a01 	add.w	sl, sl, #1
 80172c6:	9304      	str	r3, [sp, #16]
 80172c8:	9307      	str	r3, [sp, #28]
 80172ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80172ce:	931a      	str	r3, [sp, #104]	; 0x68
 80172d0:	4654      	mov	r4, sl
 80172d2:	2205      	movs	r2, #5
 80172d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172d8:	4850      	ldr	r0, [pc, #320]	; (801741c <_svfiprintf_r+0x1e8>)
 80172da:	f7e9 f831 	bl	8000340 <memchr>
 80172de:	9a04      	ldr	r2, [sp, #16]
 80172e0:	b9d8      	cbnz	r0, 801731a <_svfiprintf_r+0xe6>
 80172e2:	06d0      	lsls	r0, r2, #27
 80172e4:	bf44      	itt	mi
 80172e6:	2320      	movmi	r3, #32
 80172e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80172ec:	0711      	lsls	r1, r2, #28
 80172ee:	bf44      	itt	mi
 80172f0:	232b      	movmi	r3, #43	; 0x2b
 80172f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80172f6:	f89a 3000 	ldrb.w	r3, [sl]
 80172fa:	2b2a      	cmp	r3, #42	; 0x2a
 80172fc:	d015      	beq.n	801732a <_svfiprintf_r+0xf6>
 80172fe:	9a07      	ldr	r2, [sp, #28]
 8017300:	4654      	mov	r4, sl
 8017302:	2000      	movs	r0, #0
 8017304:	f04f 0c0a 	mov.w	ip, #10
 8017308:	4621      	mov	r1, r4
 801730a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801730e:	3b30      	subs	r3, #48	; 0x30
 8017310:	2b09      	cmp	r3, #9
 8017312:	d94d      	bls.n	80173b0 <_svfiprintf_r+0x17c>
 8017314:	b1b0      	cbz	r0, 8017344 <_svfiprintf_r+0x110>
 8017316:	9207      	str	r2, [sp, #28]
 8017318:	e014      	b.n	8017344 <_svfiprintf_r+0x110>
 801731a:	eba0 0308 	sub.w	r3, r0, r8
 801731e:	fa09 f303 	lsl.w	r3, r9, r3
 8017322:	4313      	orrs	r3, r2
 8017324:	9304      	str	r3, [sp, #16]
 8017326:	46a2      	mov	sl, r4
 8017328:	e7d2      	b.n	80172d0 <_svfiprintf_r+0x9c>
 801732a:	9b03      	ldr	r3, [sp, #12]
 801732c:	1d19      	adds	r1, r3, #4
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	9103      	str	r1, [sp, #12]
 8017332:	2b00      	cmp	r3, #0
 8017334:	bfbb      	ittet	lt
 8017336:	425b      	neglt	r3, r3
 8017338:	f042 0202 	orrlt.w	r2, r2, #2
 801733c:	9307      	strge	r3, [sp, #28]
 801733e:	9307      	strlt	r3, [sp, #28]
 8017340:	bfb8      	it	lt
 8017342:	9204      	strlt	r2, [sp, #16]
 8017344:	7823      	ldrb	r3, [r4, #0]
 8017346:	2b2e      	cmp	r3, #46	; 0x2e
 8017348:	d10c      	bne.n	8017364 <_svfiprintf_r+0x130>
 801734a:	7863      	ldrb	r3, [r4, #1]
 801734c:	2b2a      	cmp	r3, #42	; 0x2a
 801734e:	d134      	bne.n	80173ba <_svfiprintf_r+0x186>
 8017350:	9b03      	ldr	r3, [sp, #12]
 8017352:	1d1a      	adds	r2, r3, #4
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	9203      	str	r2, [sp, #12]
 8017358:	2b00      	cmp	r3, #0
 801735a:	bfb8      	it	lt
 801735c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017360:	3402      	adds	r4, #2
 8017362:	9305      	str	r3, [sp, #20]
 8017364:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801742c <_svfiprintf_r+0x1f8>
 8017368:	7821      	ldrb	r1, [r4, #0]
 801736a:	2203      	movs	r2, #3
 801736c:	4650      	mov	r0, sl
 801736e:	f7e8 ffe7 	bl	8000340 <memchr>
 8017372:	b138      	cbz	r0, 8017384 <_svfiprintf_r+0x150>
 8017374:	9b04      	ldr	r3, [sp, #16]
 8017376:	eba0 000a 	sub.w	r0, r0, sl
 801737a:	2240      	movs	r2, #64	; 0x40
 801737c:	4082      	lsls	r2, r0
 801737e:	4313      	orrs	r3, r2
 8017380:	3401      	adds	r4, #1
 8017382:	9304      	str	r3, [sp, #16]
 8017384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017388:	4825      	ldr	r0, [pc, #148]	; (8017420 <_svfiprintf_r+0x1ec>)
 801738a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801738e:	2206      	movs	r2, #6
 8017390:	f7e8 ffd6 	bl	8000340 <memchr>
 8017394:	2800      	cmp	r0, #0
 8017396:	d038      	beq.n	801740a <_svfiprintf_r+0x1d6>
 8017398:	4b22      	ldr	r3, [pc, #136]	; (8017424 <_svfiprintf_r+0x1f0>)
 801739a:	bb1b      	cbnz	r3, 80173e4 <_svfiprintf_r+0x1b0>
 801739c:	9b03      	ldr	r3, [sp, #12]
 801739e:	3307      	adds	r3, #7
 80173a0:	f023 0307 	bic.w	r3, r3, #7
 80173a4:	3308      	adds	r3, #8
 80173a6:	9303      	str	r3, [sp, #12]
 80173a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80173aa:	4433      	add	r3, r6
 80173ac:	9309      	str	r3, [sp, #36]	; 0x24
 80173ae:	e768      	b.n	8017282 <_svfiprintf_r+0x4e>
 80173b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80173b4:	460c      	mov	r4, r1
 80173b6:	2001      	movs	r0, #1
 80173b8:	e7a6      	b.n	8017308 <_svfiprintf_r+0xd4>
 80173ba:	2300      	movs	r3, #0
 80173bc:	3401      	adds	r4, #1
 80173be:	9305      	str	r3, [sp, #20]
 80173c0:	4619      	mov	r1, r3
 80173c2:	f04f 0c0a 	mov.w	ip, #10
 80173c6:	4620      	mov	r0, r4
 80173c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80173cc:	3a30      	subs	r2, #48	; 0x30
 80173ce:	2a09      	cmp	r2, #9
 80173d0:	d903      	bls.n	80173da <_svfiprintf_r+0x1a6>
 80173d2:	2b00      	cmp	r3, #0
 80173d4:	d0c6      	beq.n	8017364 <_svfiprintf_r+0x130>
 80173d6:	9105      	str	r1, [sp, #20]
 80173d8:	e7c4      	b.n	8017364 <_svfiprintf_r+0x130>
 80173da:	fb0c 2101 	mla	r1, ip, r1, r2
 80173de:	4604      	mov	r4, r0
 80173e0:	2301      	movs	r3, #1
 80173e2:	e7f0      	b.n	80173c6 <_svfiprintf_r+0x192>
 80173e4:	ab03      	add	r3, sp, #12
 80173e6:	9300      	str	r3, [sp, #0]
 80173e8:	462a      	mov	r2, r5
 80173ea:	4b0f      	ldr	r3, [pc, #60]	; (8017428 <_svfiprintf_r+0x1f4>)
 80173ec:	a904      	add	r1, sp, #16
 80173ee:	4638      	mov	r0, r7
 80173f0:	f3af 8000 	nop.w
 80173f4:	1c42      	adds	r2, r0, #1
 80173f6:	4606      	mov	r6, r0
 80173f8:	d1d6      	bne.n	80173a8 <_svfiprintf_r+0x174>
 80173fa:	89ab      	ldrh	r3, [r5, #12]
 80173fc:	065b      	lsls	r3, r3, #25
 80173fe:	f53f af2d 	bmi.w	801725c <_svfiprintf_r+0x28>
 8017402:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017404:	b01d      	add	sp, #116	; 0x74
 8017406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801740a:	ab03      	add	r3, sp, #12
 801740c:	9300      	str	r3, [sp, #0]
 801740e:	462a      	mov	r2, r5
 8017410:	4b05      	ldr	r3, [pc, #20]	; (8017428 <_svfiprintf_r+0x1f4>)
 8017412:	a904      	add	r1, sp, #16
 8017414:	4638      	mov	r0, r7
 8017416:	f000 f879 	bl	801750c <_printf_i>
 801741a:	e7eb      	b.n	80173f4 <_svfiprintf_r+0x1c0>
 801741c:	08017ad4 	.word	0x08017ad4
 8017420:	08017ade 	.word	0x08017ade
 8017424:	00000000 	.word	0x00000000
 8017428:	08017181 	.word	0x08017181
 801742c:	08017ada 	.word	0x08017ada

08017430 <_printf_common>:
 8017430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017434:	4616      	mov	r6, r2
 8017436:	4699      	mov	r9, r3
 8017438:	688a      	ldr	r2, [r1, #8]
 801743a:	690b      	ldr	r3, [r1, #16]
 801743c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017440:	4293      	cmp	r3, r2
 8017442:	bfb8      	it	lt
 8017444:	4613      	movlt	r3, r2
 8017446:	6033      	str	r3, [r6, #0]
 8017448:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801744c:	4607      	mov	r7, r0
 801744e:	460c      	mov	r4, r1
 8017450:	b10a      	cbz	r2, 8017456 <_printf_common+0x26>
 8017452:	3301      	adds	r3, #1
 8017454:	6033      	str	r3, [r6, #0]
 8017456:	6823      	ldr	r3, [r4, #0]
 8017458:	0699      	lsls	r1, r3, #26
 801745a:	bf42      	ittt	mi
 801745c:	6833      	ldrmi	r3, [r6, #0]
 801745e:	3302      	addmi	r3, #2
 8017460:	6033      	strmi	r3, [r6, #0]
 8017462:	6825      	ldr	r5, [r4, #0]
 8017464:	f015 0506 	ands.w	r5, r5, #6
 8017468:	d106      	bne.n	8017478 <_printf_common+0x48>
 801746a:	f104 0a19 	add.w	sl, r4, #25
 801746e:	68e3      	ldr	r3, [r4, #12]
 8017470:	6832      	ldr	r2, [r6, #0]
 8017472:	1a9b      	subs	r3, r3, r2
 8017474:	42ab      	cmp	r3, r5
 8017476:	dc26      	bgt.n	80174c6 <_printf_common+0x96>
 8017478:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801747c:	1e13      	subs	r3, r2, #0
 801747e:	6822      	ldr	r2, [r4, #0]
 8017480:	bf18      	it	ne
 8017482:	2301      	movne	r3, #1
 8017484:	0692      	lsls	r2, r2, #26
 8017486:	d42b      	bmi.n	80174e0 <_printf_common+0xb0>
 8017488:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801748c:	4649      	mov	r1, r9
 801748e:	4638      	mov	r0, r7
 8017490:	47c0      	blx	r8
 8017492:	3001      	adds	r0, #1
 8017494:	d01e      	beq.n	80174d4 <_printf_common+0xa4>
 8017496:	6823      	ldr	r3, [r4, #0]
 8017498:	6922      	ldr	r2, [r4, #16]
 801749a:	f003 0306 	and.w	r3, r3, #6
 801749e:	2b04      	cmp	r3, #4
 80174a0:	bf02      	ittt	eq
 80174a2:	68e5      	ldreq	r5, [r4, #12]
 80174a4:	6833      	ldreq	r3, [r6, #0]
 80174a6:	1aed      	subeq	r5, r5, r3
 80174a8:	68a3      	ldr	r3, [r4, #8]
 80174aa:	bf0c      	ite	eq
 80174ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80174b0:	2500      	movne	r5, #0
 80174b2:	4293      	cmp	r3, r2
 80174b4:	bfc4      	itt	gt
 80174b6:	1a9b      	subgt	r3, r3, r2
 80174b8:	18ed      	addgt	r5, r5, r3
 80174ba:	2600      	movs	r6, #0
 80174bc:	341a      	adds	r4, #26
 80174be:	42b5      	cmp	r5, r6
 80174c0:	d11a      	bne.n	80174f8 <_printf_common+0xc8>
 80174c2:	2000      	movs	r0, #0
 80174c4:	e008      	b.n	80174d8 <_printf_common+0xa8>
 80174c6:	2301      	movs	r3, #1
 80174c8:	4652      	mov	r2, sl
 80174ca:	4649      	mov	r1, r9
 80174cc:	4638      	mov	r0, r7
 80174ce:	47c0      	blx	r8
 80174d0:	3001      	adds	r0, #1
 80174d2:	d103      	bne.n	80174dc <_printf_common+0xac>
 80174d4:	f04f 30ff 	mov.w	r0, #4294967295
 80174d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80174dc:	3501      	adds	r5, #1
 80174de:	e7c6      	b.n	801746e <_printf_common+0x3e>
 80174e0:	18e1      	adds	r1, r4, r3
 80174e2:	1c5a      	adds	r2, r3, #1
 80174e4:	2030      	movs	r0, #48	; 0x30
 80174e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80174ea:	4422      	add	r2, r4
 80174ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80174f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80174f4:	3302      	adds	r3, #2
 80174f6:	e7c7      	b.n	8017488 <_printf_common+0x58>
 80174f8:	2301      	movs	r3, #1
 80174fa:	4622      	mov	r2, r4
 80174fc:	4649      	mov	r1, r9
 80174fe:	4638      	mov	r0, r7
 8017500:	47c0      	blx	r8
 8017502:	3001      	adds	r0, #1
 8017504:	d0e6      	beq.n	80174d4 <_printf_common+0xa4>
 8017506:	3601      	adds	r6, #1
 8017508:	e7d9      	b.n	80174be <_printf_common+0x8e>
	...

0801750c <_printf_i>:
 801750c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017510:	7e0f      	ldrb	r7, [r1, #24]
 8017512:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017514:	2f78      	cmp	r7, #120	; 0x78
 8017516:	4691      	mov	r9, r2
 8017518:	4680      	mov	r8, r0
 801751a:	460c      	mov	r4, r1
 801751c:	469a      	mov	sl, r3
 801751e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017522:	d807      	bhi.n	8017534 <_printf_i+0x28>
 8017524:	2f62      	cmp	r7, #98	; 0x62
 8017526:	d80a      	bhi.n	801753e <_printf_i+0x32>
 8017528:	2f00      	cmp	r7, #0
 801752a:	f000 80d4 	beq.w	80176d6 <_printf_i+0x1ca>
 801752e:	2f58      	cmp	r7, #88	; 0x58
 8017530:	f000 80c0 	beq.w	80176b4 <_printf_i+0x1a8>
 8017534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017538:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801753c:	e03a      	b.n	80175b4 <_printf_i+0xa8>
 801753e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017542:	2b15      	cmp	r3, #21
 8017544:	d8f6      	bhi.n	8017534 <_printf_i+0x28>
 8017546:	a101      	add	r1, pc, #4	; (adr r1, 801754c <_printf_i+0x40>)
 8017548:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801754c:	080175a5 	.word	0x080175a5
 8017550:	080175b9 	.word	0x080175b9
 8017554:	08017535 	.word	0x08017535
 8017558:	08017535 	.word	0x08017535
 801755c:	08017535 	.word	0x08017535
 8017560:	08017535 	.word	0x08017535
 8017564:	080175b9 	.word	0x080175b9
 8017568:	08017535 	.word	0x08017535
 801756c:	08017535 	.word	0x08017535
 8017570:	08017535 	.word	0x08017535
 8017574:	08017535 	.word	0x08017535
 8017578:	080176bd 	.word	0x080176bd
 801757c:	080175e5 	.word	0x080175e5
 8017580:	08017677 	.word	0x08017677
 8017584:	08017535 	.word	0x08017535
 8017588:	08017535 	.word	0x08017535
 801758c:	080176df 	.word	0x080176df
 8017590:	08017535 	.word	0x08017535
 8017594:	080175e5 	.word	0x080175e5
 8017598:	08017535 	.word	0x08017535
 801759c:	08017535 	.word	0x08017535
 80175a0:	0801767f 	.word	0x0801767f
 80175a4:	682b      	ldr	r3, [r5, #0]
 80175a6:	1d1a      	adds	r2, r3, #4
 80175a8:	681b      	ldr	r3, [r3, #0]
 80175aa:	602a      	str	r2, [r5, #0]
 80175ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80175b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80175b4:	2301      	movs	r3, #1
 80175b6:	e09f      	b.n	80176f8 <_printf_i+0x1ec>
 80175b8:	6820      	ldr	r0, [r4, #0]
 80175ba:	682b      	ldr	r3, [r5, #0]
 80175bc:	0607      	lsls	r7, r0, #24
 80175be:	f103 0104 	add.w	r1, r3, #4
 80175c2:	6029      	str	r1, [r5, #0]
 80175c4:	d501      	bpl.n	80175ca <_printf_i+0xbe>
 80175c6:	681e      	ldr	r6, [r3, #0]
 80175c8:	e003      	b.n	80175d2 <_printf_i+0xc6>
 80175ca:	0646      	lsls	r6, r0, #25
 80175cc:	d5fb      	bpl.n	80175c6 <_printf_i+0xba>
 80175ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80175d2:	2e00      	cmp	r6, #0
 80175d4:	da03      	bge.n	80175de <_printf_i+0xd2>
 80175d6:	232d      	movs	r3, #45	; 0x2d
 80175d8:	4276      	negs	r6, r6
 80175da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80175de:	485a      	ldr	r0, [pc, #360]	; (8017748 <_printf_i+0x23c>)
 80175e0:	230a      	movs	r3, #10
 80175e2:	e012      	b.n	801760a <_printf_i+0xfe>
 80175e4:	682b      	ldr	r3, [r5, #0]
 80175e6:	6820      	ldr	r0, [r4, #0]
 80175e8:	1d19      	adds	r1, r3, #4
 80175ea:	6029      	str	r1, [r5, #0]
 80175ec:	0605      	lsls	r5, r0, #24
 80175ee:	d501      	bpl.n	80175f4 <_printf_i+0xe8>
 80175f0:	681e      	ldr	r6, [r3, #0]
 80175f2:	e002      	b.n	80175fa <_printf_i+0xee>
 80175f4:	0641      	lsls	r1, r0, #25
 80175f6:	d5fb      	bpl.n	80175f0 <_printf_i+0xe4>
 80175f8:	881e      	ldrh	r6, [r3, #0]
 80175fa:	4853      	ldr	r0, [pc, #332]	; (8017748 <_printf_i+0x23c>)
 80175fc:	2f6f      	cmp	r7, #111	; 0x6f
 80175fe:	bf0c      	ite	eq
 8017600:	2308      	moveq	r3, #8
 8017602:	230a      	movne	r3, #10
 8017604:	2100      	movs	r1, #0
 8017606:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801760a:	6865      	ldr	r5, [r4, #4]
 801760c:	60a5      	str	r5, [r4, #8]
 801760e:	2d00      	cmp	r5, #0
 8017610:	bfa2      	ittt	ge
 8017612:	6821      	ldrge	r1, [r4, #0]
 8017614:	f021 0104 	bicge.w	r1, r1, #4
 8017618:	6021      	strge	r1, [r4, #0]
 801761a:	b90e      	cbnz	r6, 8017620 <_printf_i+0x114>
 801761c:	2d00      	cmp	r5, #0
 801761e:	d04b      	beq.n	80176b8 <_printf_i+0x1ac>
 8017620:	4615      	mov	r5, r2
 8017622:	fbb6 f1f3 	udiv	r1, r6, r3
 8017626:	fb03 6711 	mls	r7, r3, r1, r6
 801762a:	5dc7      	ldrb	r7, [r0, r7]
 801762c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017630:	4637      	mov	r7, r6
 8017632:	42bb      	cmp	r3, r7
 8017634:	460e      	mov	r6, r1
 8017636:	d9f4      	bls.n	8017622 <_printf_i+0x116>
 8017638:	2b08      	cmp	r3, #8
 801763a:	d10b      	bne.n	8017654 <_printf_i+0x148>
 801763c:	6823      	ldr	r3, [r4, #0]
 801763e:	07de      	lsls	r6, r3, #31
 8017640:	d508      	bpl.n	8017654 <_printf_i+0x148>
 8017642:	6923      	ldr	r3, [r4, #16]
 8017644:	6861      	ldr	r1, [r4, #4]
 8017646:	4299      	cmp	r1, r3
 8017648:	bfde      	ittt	le
 801764a:	2330      	movle	r3, #48	; 0x30
 801764c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017650:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017654:	1b52      	subs	r2, r2, r5
 8017656:	6122      	str	r2, [r4, #16]
 8017658:	f8cd a000 	str.w	sl, [sp]
 801765c:	464b      	mov	r3, r9
 801765e:	aa03      	add	r2, sp, #12
 8017660:	4621      	mov	r1, r4
 8017662:	4640      	mov	r0, r8
 8017664:	f7ff fee4 	bl	8017430 <_printf_common>
 8017668:	3001      	adds	r0, #1
 801766a:	d14a      	bne.n	8017702 <_printf_i+0x1f6>
 801766c:	f04f 30ff 	mov.w	r0, #4294967295
 8017670:	b004      	add	sp, #16
 8017672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017676:	6823      	ldr	r3, [r4, #0]
 8017678:	f043 0320 	orr.w	r3, r3, #32
 801767c:	6023      	str	r3, [r4, #0]
 801767e:	4833      	ldr	r0, [pc, #204]	; (801774c <_printf_i+0x240>)
 8017680:	2778      	movs	r7, #120	; 0x78
 8017682:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017686:	6823      	ldr	r3, [r4, #0]
 8017688:	6829      	ldr	r1, [r5, #0]
 801768a:	061f      	lsls	r7, r3, #24
 801768c:	f851 6b04 	ldr.w	r6, [r1], #4
 8017690:	d402      	bmi.n	8017698 <_printf_i+0x18c>
 8017692:	065f      	lsls	r7, r3, #25
 8017694:	bf48      	it	mi
 8017696:	b2b6      	uxthmi	r6, r6
 8017698:	07df      	lsls	r7, r3, #31
 801769a:	bf48      	it	mi
 801769c:	f043 0320 	orrmi.w	r3, r3, #32
 80176a0:	6029      	str	r1, [r5, #0]
 80176a2:	bf48      	it	mi
 80176a4:	6023      	strmi	r3, [r4, #0]
 80176a6:	b91e      	cbnz	r6, 80176b0 <_printf_i+0x1a4>
 80176a8:	6823      	ldr	r3, [r4, #0]
 80176aa:	f023 0320 	bic.w	r3, r3, #32
 80176ae:	6023      	str	r3, [r4, #0]
 80176b0:	2310      	movs	r3, #16
 80176b2:	e7a7      	b.n	8017604 <_printf_i+0xf8>
 80176b4:	4824      	ldr	r0, [pc, #144]	; (8017748 <_printf_i+0x23c>)
 80176b6:	e7e4      	b.n	8017682 <_printf_i+0x176>
 80176b8:	4615      	mov	r5, r2
 80176ba:	e7bd      	b.n	8017638 <_printf_i+0x12c>
 80176bc:	682b      	ldr	r3, [r5, #0]
 80176be:	6826      	ldr	r6, [r4, #0]
 80176c0:	6961      	ldr	r1, [r4, #20]
 80176c2:	1d18      	adds	r0, r3, #4
 80176c4:	6028      	str	r0, [r5, #0]
 80176c6:	0635      	lsls	r5, r6, #24
 80176c8:	681b      	ldr	r3, [r3, #0]
 80176ca:	d501      	bpl.n	80176d0 <_printf_i+0x1c4>
 80176cc:	6019      	str	r1, [r3, #0]
 80176ce:	e002      	b.n	80176d6 <_printf_i+0x1ca>
 80176d0:	0670      	lsls	r0, r6, #25
 80176d2:	d5fb      	bpl.n	80176cc <_printf_i+0x1c0>
 80176d4:	8019      	strh	r1, [r3, #0]
 80176d6:	2300      	movs	r3, #0
 80176d8:	6123      	str	r3, [r4, #16]
 80176da:	4615      	mov	r5, r2
 80176dc:	e7bc      	b.n	8017658 <_printf_i+0x14c>
 80176de:	682b      	ldr	r3, [r5, #0]
 80176e0:	1d1a      	adds	r2, r3, #4
 80176e2:	602a      	str	r2, [r5, #0]
 80176e4:	681d      	ldr	r5, [r3, #0]
 80176e6:	6862      	ldr	r2, [r4, #4]
 80176e8:	2100      	movs	r1, #0
 80176ea:	4628      	mov	r0, r5
 80176ec:	f7e8 fe28 	bl	8000340 <memchr>
 80176f0:	b108      	cbz	r0, 80176f6 <_printf_i+0x1ea>
 80176f2:	1b40      	subs	r0, r0, r5
 80176f4:	6060      	str	r0, [r4, #4]
 80176f6:	6863      	ldr	r3, [r4, #4]
 80176f8:	6123      	str	r3, [r4, #16]
 80176fa:	2300      	movs	r3, #0
 80176fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017700:	e7aa      	b.n	8017658 <_printf_i+0x14c>
 8017702:	6923      	ldr	r3, [r4, #16]
 8017704:	462a      	mov	r2, r5
 8017706:	4649      	mov	r1, r9
 8017708:	4640      	mov	r0, r8
 801770a:	47d0      	blx	sl
 801770c:	3001      	adds	r0, #1
 801770e:	d0ad      	beq.n	801766c <_printf_i+0x160>
 8017710:	6823      	ldr	r3, [r4, #0]
 8017712:	079b      	lsls	r3, r3, #30
 8017714:	d413      	bmi.n	801773e <_printf_i+0x232>
 8017716:	68e0      	ldr	r0, [r4, #12]
 8017718:	9b03      	ldr	r3, [sp, #12]
 801771a:	4298      	cmp	r0, r3
 801771c:	bfb8      	it	lt
 801771e:	4618      	movlt	r0, r3
 8017720:	e7a6      	b.n	8017670 <_printf_i+0x164>
 8017722:	2301      	movs	r3, #1
 8017724:	4632      	mov	r2, r6
 8017726:	4649      	mov	r1, r9
 8017728:	4640      	mov	r0, r8
 801772a:	47d0      	blx	sl
 801772c:	3001      	adds	r0, #1
 801772e:	d09d      	beq.n	801766c <_printf_i+0x160>
 8017730:	3501      	adds	r5, #1
 8017732:	68e3      	ldr	r3, [r4, #12]
 8017734:	9903      	ldr	r1, [sp, #12]
 8017736:	1a5b      	subs	r3, r3, r1
 8017738:	42ab      	cmp	r3, r5
 801773a:	dcf2      	bgt.n	8017722 <_printf_i+0x216>
 801773c:	e7eb      	b.n	8017716 <_printf_i+0x20a>
 801773e:	2500      	movs	r5, #0
 8017740:	f104 0619 	add.w	r6, r4, #25
 8017744:	e7f5      	b.n	8017732 <_printf_i+0x226>
 8017746:	bf00      	nop
 8017748:	08017ae5 	.word	0x08017ae5
 801774c:	08017af6 	.word	0x08017af6

08017750 <memmove>:
 8017750:	4288      	cmp	r0, r1
 8017752:	b510      	push	{r4, lr}
 8017754:	eb01 0402 	add.w	r4, r1, r2
 8017758:	d902      	bls.n	8017760 <memmove+0x10>
 801775a:	4284      	cmp	r4, r0
 801775c:	4623      	mov	r3, r4
 801775e:	d807      	bhi.n	8017770 <memmove+0x20>
 8017760:	1e43      	subs	r3, r0, #1
 8017762:	42a1      	cmp	r1, r4
 8017764:	d008      	beq.n	8017778 <memmove+0x28>
 8017766:	f811 2b01 	ldrb.w	r2, [r1], #1
 801776a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801776e:	e7f8      	b.n	8017762 <memmove+0x12>
 8017770:	4402      	add	r2, r0
 8017772:	4601      	mov	r1, r0
 8017774:	428a      	cmp	r2, r1
 8017776:	d100      	bne.n	801777a <memmove+0x2a>
 8017778:	bd10      	pop	{r4, pc}
 801777a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801777e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017782:	e7f7      	b.n	8017774 <memmove+0x24>

08017784 <_sbrk_r>:
 8017784:	b538      	push	{r3, r4, r5, lr}
 8017786:	4d06      	ldr	r5, [pc, #24]	; (80177a0 <_sbrk_r+0x1c>)
 8017788:	2300      	movs	r3, #0
 801778a:	4604      	mov	r4, r0
 801778c:	4608      	mov	r0, r1
 801778e:	602b      	str	r3, [r5, #0]
 8017790:	f7eb ffb8 	bl	8003704 <_sbrk>
 8017794:	1c43      	adds	r3, r0, #1
 8017796:	d102      	bne.n	801779e <_sbrk_r+0x1a>
 8017798:	682b      	ldr	r3, [r5, #0]
 801779a:	b103      	cbz	r3, 801779e <_sbrk_r+0x1a>
 801779c:	6023      	str	r3, [r4, #0]
 801779e:	bd38      	pop	{r3, r4, r5, pc}
 80177a0:	240031e4 	.word	0x240031e4

080177a4 <_realloc_r>:
 80177a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177a8:	4680      	mov	r8, r0
 80177aa:	4614      	mov	r4, r2
 80177ac:	460e      	mov	r6, r1
 80177ae:	b921      	cbnz	r1, 80177ba <_realloc_r+0x16>
 80177b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80177b4:	4611      	mov	r1, r2
 80177b6:	f7ff bc57 	b.w	8017068 <_malloc_r>
 80177ba:	b92a      	cbnz	r2, 80177c8 <_realloc_r+0x24>
 80177bc:	f7ff fbe8 	bl	8016f90 <_free_r>
 80177c0:	4625      	mov	r5, r4
 80177c2:	4628      	mov	r0, r5
 80177c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177c8:	f000 f81b 	bl	8017802 <_malloc_usable_size_r>
 80177cc:	4284      	cmp	r4, r0
 80177ce:	4607      	mov	r7, r0
 80177d0:	d802      	bhi.n	80177d8 <_realloc_r+0x34>
 80177d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80177d6:	d812      	bhi.n	80177fe <_realloc_r+0x5a>
 80177d8:	4621      	mov	r1, r4
 80177da:	4640      	mov	r0, r8
 80177dc:	f7ff fc44 	bl	8017068 <_malloc_r>
 80177e0:	4605      	mov	r5, r0
 80177e2:	2800      	cmp	r0, #0
 80177e4:	d0ed      	beq.n	80177c2 <_realloc_r+0x1e>
 80177e6:	42bc      	cmp	r4, r7
 80177e8:	4622      	mov	r2, r4
 80177ea:	4631      	mov	r1, r6
 80177ec:	bf28      	it	cs
 80177ee:	463a      	movcs	r2, r7
 80177f0:	f7ff fbc0 	bl	8016f74 <memcpy>
 80177f4:	4631      	mov	r1, r6
 80177f6:	4640      	mov	r0, r8
 80177f8:	f7ff fbca 	bl	8016f90 <_free_r>
 80177fc:	e7e1      	b.n	80177c2 <_realloc_r+0x1e>
 80177fe:	4635      	mov	r5, r6
 8017800:	e7df      	b.n	80177c2 <_realloc_r+0x1e>

08017802 <_malloc_usable_size_r>:
 8017802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017806:	1f18      	subs	r0, r3, #4
 8017808:	2b00      	cmp	r3, #0
 801780a:	bfbc      	itt	lt
 801780c:	580b      	ldrlt	r3, [r1, r0]
 801780e:	18c0      	addlt	r0, r0, r3
 8017810:	4770      	bx	lr
	...

08017814 <_init>:
 8017814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017816:	bf00      	nop
 8017818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801781a:	bc08      	pop	{r3}
 801781c:	469e      	mov	lr, r3
 801781e:	4770      	bx	lr

08017820 <_fini>:
 8017820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017822:	bf00      	nop
 8017824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017826:	bc08      	pop	{r3}
 8017828:	469e      	mov	lr, r3
 801782a:	4770      	bx	lr
