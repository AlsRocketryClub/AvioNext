
AvioNEXT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000186e0  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  080189b0  080189b0  000289b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018da4  08018da4  00028da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018dac  08018dac  00028dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018db0  08018db0  00028db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000154  24000000  08018db4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00003310  24000154  08018f08  00030154  2**2
                  ALLOC
  8 ._user_heap_stack 00000c04  24003464  08018f08  00033464  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030154  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00030182  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003706d  00000000  00000000  000301c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00006bc7  00000000  00000000  00067232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002c18  00000000  00000000  0006de00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000221e  00000000  00000000  00070a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003f72a  00000000  00000000  00072c36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003ec34  00000000  00000000  000b2360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017e5b9  00000000  00000000  000f0f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000c680  00000000  00000000  0026f550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  0027bbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000154 	.word	0x24000154
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08018998 	.word	0x08018998

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000158 	.word	0x24000158
 800030c:	08018998 	.word	0x08018998

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b970 	b.w	80006d8 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9e08      	ldr	r6, [sp, #32]
 8000416:	460d      	mov	r5, r1
 8000418:	4604      	mov	r4, r0
 800041a:	460f      	mov	r7, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4694      	mov	ip, r2
 8000424:	d965      	bls.n	80004f2 <__udivmoddi4+0xe2>
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	b143      	cbz	r3, 800043e <__udivmoddi4+0x2e>
 800042c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000430:	f1c3 0220 	rsb	r2, r3, #32
 8000434:	409f      	lsls	r7, r3
 8000436:	fa20 f202 	lsr.w	r2, r0, r2
 800043a:	4317      	orrs	r7, r2
 800043c:	409c      	lsls	r4, r3
 800043e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000442:	fa1f f58c 	uxth.w	r5, ip
 8000446:	fbb7 f1fe 	udiv	r1, r7, lr
 800044a:	0c22      	lsrs	r2, r4, #16
 800044c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000450:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000454:	fb01 f005 	mul.w	r0, r1, r5
 8000458:	4290      	cmp	r0, r2
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x62>
 800045c:	eb1c 0202 	adds.w	r2, ip, r2
 8000460:	f101 37ff 	add.w	r7, r1, #4294967295
 8000464:	f080 811c 	bcs.w	80006a0 <__udivmoddi4+0x290>
 8000468:	4290      	cmp	r0, r2
 800046a:	f240 8119 	bls.w	80006a0 <__udivmoddi4+0x290>
 800046e:	3902      	subs	r1, #2
 8000470:	4462      	add	r2, ip
 8000472:	1a12      	subs	r2, r2, r0
 8000474:	b2a4      	uxth	r4, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000482:	fb00 f505 	mul.w	r5, r0, r5
 8000486:	42a5      	cmp	r5, r4
 8000488:	d90a      	bls.n	80004a0 <__udivmoddi4+0x90>
 800048a:	eb1c 0404 	adds.w	r4, ip, r4
 800048e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000492:	f080 8107 	bcs.w	80006a4 <__udivmoddi4+0x294>
 8000496:	42a5      	cmp	r5, r4
 8000498:	f240 8104 	bls.w	80006a4 <__udivmoddi4+0x294>
 800049c:	4464      	add	r4, ip
 800049e:	3802      	subs	r0, #2
 80004a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a4:	1b64      	subs	r4, r4, r5
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11e      	cbz	r6, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40dc      	lsrs	r4, r3
 80004ac:	2300      	movs	r3, #0
 80004ae:	e9c6 4300 	strd	r4, r3, [r6]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0xbc>
 80004ba:	2e00      	cmp	r6, #0
 80004bc:	f000 80ed 	beq.w	800069a <__udivmoddi4+0x28a>
 80004c0:	2100      	movs	r1, #0
 80004c2:	e9c6 0500 	strd	r0, r5, [r6]
 80004c6:	4608      	mov	r0, r1
 80004c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004cc:	fab3 f183 	clz	r1, r3
 80004d0:	2900      	cmp	r1, #0
 80004d2:	d149      	bne.n	8000568 <__udivmoddi4+0x158>
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d302      	bcc.n	80004de <__udivmoddi4+0xce>
 80004d8:	4282      	cmp	r2, r0
 80004da:	f200 80f8 	bhi.w	80006ce <__udivmoddi4+0x2be>
 80004de:	1a84      	subs	r4, r0, r2
 80004e0:	eb65 0203 	sbc.w	r2, r5, r3
 80004e4:	2001      	movs	r0, #1
 80004e6:	4617      	mov	r7, r2
 80004e8:	2e00      	cmp	r6, #0
 80004ea:	d0e2      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	e9c6 4700 	strd	r4, r7, [r6]
 80004f0:	e7df      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004f2:	b902      	cbnz	r2, 80004f6 <__udivmoddi4+0xe6>
 80004f4:	deff      	udf	#255	; 0xff
 80004f6:	fab2 f382 	clz	r3, r2
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	f040 8090 	bne.w	8000620 <__udivmoddi4+0x210>
 8000500:	1a8a      	subs	r2, r1, r2
 8000502:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000506:	fa1f fe8c 	uxth.w	lr, ip
 800050a:	2101      	movs	r1, #1
 800050c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000510:	fb07 2015 	mls	r0, r7, r5, r2
 8000514:	0c22      	lsrs	r2, r4, #16
 8000516:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800051a:	fb0e f005 	mul.w	r0, lr, r5
 800051e:	4290      	cmp	r0, r2
 8000520:	d908      	bls.n	8000534 <__udivmoddi4+0x124>
 8000522:	eb1c 0202 	adds.w	r2, ip, r2
 8000526:	f105 38ff 	add.w	r8, r5, #4294967295
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x122>
 800052c:	4290      	cmp	r0, r2
 800052e:	f200 80cb 	bhi.w	80006c8 <__udivmoddi4+0x2b8>
 8000532:	4645      	mov	r5, r8
 8000534:	1a12      	subs	r2, r2, r0
 8000536:	b2a4      	uxth	r4, r4
 8000538:	fbb2 f0f7 	udiv	r0, r2, r7
 800053c:	fb07 2210 	mls	r2, r7, r0, r2
 8000540:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000544:	fb0e fe00 	mul.w	lr, lr, r0
 8000548:	45a6      	cmp	lr, r4
 800054a:	d908      	bls.n	800055e <__udivmoddi4+0x14e>
 800054c:	eb1c 0404 	adds.w	r4, ip, r4
 8000550:	f100 32ff 	add.w	r2, r0, #4294967295
 8000554:	d202      	bcs.n	800055c <__udivmoddi4+0x14c>
 8000556:	45a6      	cmp	lr, r4
 8000558:	f200 80bb 	bhi.w	80006d2 <__udivmoddi4+0x2c2>
 800055c:	4610      	mov	r0, r2
 800055e:	eba4 040e 	sub.w	r4, r4, lr
 8000562:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000566:	e79f      	b.n	80004a8 <__udivmoddi4+0x98>
 8000568:	f1c1 0720 	rsb	r7, r1, #32
 800056c:	408b      	lsls	r3, r1
 800056e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000572:	ea4c 0c03 	orr.w	ip, ip, r3
 8000576:	fa05 f401 	lsl.w	r4, r5, r1
 800057a:	fa20 f307 	lsr.w	r3, r0, r7
 800057e:	40fd      	lsrs	r5, r7
 8000580:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000584:	4323      	orrs	r3, r4
 8000586:	fbb5 f8f9 	udiv	r8, r5, r9
 800058a:	fa1f fe8c 	uxth.w	lr, ip
 800058e:	fb09 5518 	mls	r5, r9, r8, r5
 8000592:	0c1c      	lsrs	r4, r3, #16
 8000594:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000598:	fb08 f50e 	mul.w	r5, r8, lr
 800059c:	42a5      	cmp	r5, r4
 800059e:	fa02 f201 	lsl.w	r2, r2, r1
 80005a2:	fa00 f001 	lsl.w	r0, r0, r1
 80005a6:	d90b      	bls.n	80005c0 <__udivmoddi4+0x1b0>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80005b0:	f080 8088 	bcs.w	80006c4 <__udivmoddi4+0x2b4>
 80005b4:	42a5      	cmp	r5, r4
 80005b6:	f240 8085 	bls.w	80006c4 <__udivmoddi4+0x2b4>
 80005ba:	f1a8 0802 	sub.w	r8, r8, #2
 80005be:	4464      	add	r4, ip
 80005c0:	1b64      	subs	r4, r4, r5
 80005c2:	b29d      	uxth	r5, r3
 80005c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80005c8:	fb09 4413 	mls	r4, r9, r3, r4
 80005cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005d4:	45a6      	cmp	lr, r4
 80005d6:	d908      	bls.n	80005ea <__udivmoddi4+0x1da>
 80005d8:	eb1c 0404 	adds.w	r4, ip, r4
 80005dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80005e0:	d26c      	bcs.n	80006bc <__udivmoddi4+0x2ac>
 80005e2:	45a6      	cmp	lr, r4
 80005e4:	d96a      	bls.n	80006bc <__udivmoddi4+0x2ac>
 80005e6:	3b02      	subs	r3, #2
 80005e8:	4464      	add	r4, ip
 80005ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ee:	fba3 9502 	umull	r9, r5, r3, r2
 80005f2:	eba4 040e 	sub.w	r4, r4, lr
 80005f6:	42ac      	cmp	r4, r5
 80005f8:	46c8      	mov	r8, r9
 80005fa:	46ae      	mov	lr, r5
 80005fc:	d356      	bcc.n	80006ac <__udivmoddi4+0x29c>
 80005fe:	d053      	beq.n	80006a8 <__udivmoddi4+0x298>
 8000600:	b156      	cbz	r6, 8000618 <__udivmoddi4+0x208>
 8000602:	ebb0 0208 	subs.w	r2, r0, r8
 8000606:	eb64 040e 	sbc.w	r4, r4, lr
 800060a:	fa04 f707 	lsl.w	r7, r4, r7
 800060e:	40ca      	lsrs	r2, r1
 8000610:	40cc      	lsrs	r4, r1
 8000612:	4317      	orrs	r7, r2
 8000614:	e9c6 7400 	strd	r7, r4, [r6]
 8000618:	4618      	mov	r0, r3
 800061a:	2100      	movs	r1, #0
 800061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000620:	f1c3 0120 	rsb	r1, r3, #32
 8000624:	fa02 fc03 	lsl.w	ip, r2, r3
 8000628:	fa20 f201 	lsr.w	r2, r0, r1
 800062c:	fa25 f101 	lsr.w	r1, r5, r1
 8000630:	409d      	lsls	r5, r3
 8000632:	432a      	orrs	r2, r5
 8000634:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000638:	fa1f fe8c 	uxth.w	lr, ip
 800063c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000640:	fb07 1510 	mls	r5, r7, r0, r1
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800064a:	fb00 f50e 	mul.w	r5, r0, lr
 800064e:	428d      	cmp	r5, r1
 8000650:	fa04 f403 	lsl.w	r4, r4, r3
 8000654:	d908      	bls.n	8000668 <__udivmoddi4+0x258>
 8000656:	eb1c 0101 	adds.w	r1, ip, r1
 800065a:	f100 38ff 	add.w	r8, r0, #4294967295
 800065e:	d22f      	bcs.n	80006c0 <__udivmoddi4+0x2b0>
 8000660:	428d      	cmp	r5, r1
 8000662:	d92d      	bls.n	80006c0 <__udivmoddi4+0x2b0>
 8000664:	3802      	subs	r0, #2
 8000666:	4461      	add	r1, ip
 8000668:	1b49      	subs	r1, r1, r5
 800066a:	b292      	uxth	r2, r2
 800066c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000670:	fb07 1115 	mls	r1, r7, r5, r1
 8000674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000678:	fb05 f10e 	mul.w	r1, r5, lr
 800067c:	4291      	cmp	r1, r2
 800067e:	d908      	bls.n	8000692 <__udivmoddi4+0x282>
 8000680:	eb1c 0202 	adds.w	r2, ip, r2
 8000684:	f105 38ff 	add.w	r8, r5, #4294967295
 8000688:	d216      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 800068a:	4291      	cmp	r1, r2
 800068c:	d914      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800068e:	3d02      	subs	r5, #2
 8000690:	4462      	add	r2, ip
 8000692:	1a52      	subs	r2, r2, r1
 8000694:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000698:	e738      	b.n	800050c <__udivmoddi4+0xfc>
 800069a:	4631      	mov	r1, r6
 800069c:	4630      	mov	r0, r6
 800069e:	e708      	b.n	80004b2 <__udivmoddi4+0xa2>
 80006a0:	4639      	mov	r1, r7
 80006a2:	e6e6      	b.n	8000472 <__udivmoddi4+0x62>
 80006a4:	4610      	mov	r0, r2
 80006a6:	e6fb      	b.n	80004a0 <__udivmoddi4+0x90>
 80006a8:	4548      	cmp	r0, r9
 80006aa:	d2a9      	bcs.n	8000600 <__udivmoddi4+0x1f0>
 80006ac:	ebb9 0802 	subs.w	r8, r9, r2
 80006b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80006b4:	3b01      	subs	r3, #1
 80006b6:	e7a3      	b.n	8000600 <__udivmoddi4+0x1f0>
 80006b8:	4645      	mov	r5, r8
 80006ba:	e7ea      	b.n	8000692 <__udivmoddi4+0x282>
 80006bc:	462b      	mov	r3, r5
 80006be:	e794      	b.n	80005ea <__udivmoddi4+0x1da>
 80006c0:	4640      	mov	r0, r8
 80006c2:	e7d1      	b.n	8000668 <__udivmoddi4+0x258>
 80006c4:	46d0      	mov	r8, sl
 80006c6:	e77b      	b.n	80005c0 <__udivmoddi4+0x1b0>
 80006c8:	3d02      	subs	r5, #2
 80006ca:	4462      	add	r2, ip
 80006cc:	e732      	b.n	8000534 <__udivmoddi4+0x124>
 80006ce:	4608      	mov	r0, r1
 80006d0:	e70a      	b.n	80004e8 <__udivmoddi4+0xd8>
 80006d2:	4464      	add	r4, ip
 80006d4:	3802      	subs	r0, #2
 80006d6:	e742      	b.n	800055e <__udivmoddi4+0x14e>

080006d8 <__aeabi_idiv0>:
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop

080006dc <HG2_Write_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);

	return reg_value;
}

void HG2_Write_Register(uint8_t addr, uint8_t data){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	460a      	mov	r2, r1
 80006e6:	71fb      	strb	r3, [r7, #7]
 80006e8:	4613      	mov	r3, r2
 80006ea:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 0);
 80006ec:	2200      	movs	r2, #0
 80006ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006f2:	480c      	ldr	r0, [pc, #48]	; (8000724 <HG2_Write_Register+0x48>)
 80006f4:	f007 fdca 	bl	800828c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80006f8:	1df9      	adds	r1, r7, #7
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	2201      	movs	r2, #1
 80006fe:	480a      	ldr	r0, [pc, #40]	; (8000728 <HG2_Write_Register+0x4c>)
 8000700:	f00e fd0e 	bl	800f120 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 8000704:	1db9      	adds	r1, r7, #6
 8000706:	2364      	movs	r3, #100	; 0x64
 8000708:	2201      	movs	r2, #1
 800070a:	4807      	ldr	r0, [pc, #28]	; (8000728 <HG2_Write_Register+0x4c>)
 800070c:	f00e fd08 	bl	800f120 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <HG2_Write_Register+0x48>)
 8000718:	f007 fdb8 	bl	800828c <HAL_GPIO_WritePin>

}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	58020c00 	.word	0x58020c00
 8000728:	240010c8 	.word	0x240010c8

0800072c <LG2_Read_Register>:
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, 1);
}



uint8_t LG2_Read_Register(uint8_t addr){
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	addr |= (1<<7);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800073c:	b2db      	uxtb	r3, r3
 800073e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <LG2_Read_Register+0x50>)
 8000748:	f007 fda0 	bl	800828c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 800074c:	1df9      	adds	r1, r7, #7
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <LG2_Read_Register+0x54>)
 8000754:	f00e fce4 	bl	800f120 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2, &reg_value, 1, 100);
 8000758:	f107 010f 	add.w	r1, r7, #15
 800075c:	2364      	movs	r3, #100	; 0x64
 800075e:	2201      	movs	r2, #1
 8000760:	4807      	ldr	r0, [pc, #28]	; (8000780 <LG2_Read_Register+0x54>)
 8000762:	f00e fed9 	bl	800f518 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800076c:	4803      	ldr	r0, [pc, #12]	; (800077c <LG2_Read_Register+0x50>)
 800076e:	f007 fd8d 	bl	800828c <HAL_GPIO_WritePin>

	return reg_value;
 8000772:	7bfb      	ldrb	r3, [r7, #15]
}
 8000774:	4618      	mov	r0, r3
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58020c00 	.word	0x58020c00
 8000780:	240010c8 	.word	0x240010c8

08000784 <LG2_Write_Register>:

void LG2_Write_Register(uint8_t addr, uint8_t data){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	460a      	mov	r2, r1
 800078e:	71fb      	strb	r3, [r7, #7]
 8000790:	4613      	mov	r3, r2
 8000792:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 0);
 8000794:	2200      	movs	r2, #0
 8000796:	f44f 7180 	mov.w	r1, #256	; 0x100
 800079a:	480c      	ldr	r0, [pc, #48]	; (80007cc <LG2_Write_Register+0x48>)
 800079c:	f007 fd76 	bl	800828c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, &addr, 1, 100);
 80007a0:	1df9      	adds	r1, r7, #7
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	2201      	movs	r2, #1
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007a8:	f00e fcba 	bl	800f120 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 80007ac:	1db9      	adds	r1, r7, #6
 80007ae:	2364      	movs	r3, #100	; 0x64
 80007b0:	2201      	movs	r2, #1
 80007b2:	4807      	ldr	r0, [pc, #28]	; (80007d0 <LG2_Write_Register+0x4c>)
 80007b4:	f00e fcb4 	bl	800f120 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, 1);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007be:	4803      	ldr	r0, [pc, #12]	; (80007cc <LG2_Write_Register+0x48>)
 80007c0:	f007 fd64 	bl	800828c <HAL_GPIO_WritePin>

}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	58020c00 	.word	0x58020c00
 80007d0:	240010c8 	.word	0x240010c8

080007d4 <LG2_Get_Gyro_X>:

float LG2_Get_Gyro_X(){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x22);
 80007da:	2022      	movs	r0, #34	; 0x22
 80007dc:	f7ff ffa6 	bl	800072c <LG2_Read_Register>
 80007e0:	4603      	mov	r3, r0
 80007e2:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x23);
 80007e4:	2023      	movs	r0, #35	; 0x23
 80007e6:	f7ff ffa1 	bl	800072c <LG2_Read_Register>
 80007ea:	4603      	mov	r3, r0
 80007ec:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80007ee:	79bb      	ldrb	r3, [r7, #6]
 80007f0:	021b      	lsls	r3, r3, #8
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	b21b      	sxth	r3, r3
 80007f8:	4313      	orrs	r3, r2
 80007fa:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 80007fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000800:	ee07 3a90 	vmov	s15, r3
 8000804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000808:	eddf 6a08 	vldr	s13, [pc, #32]	; 800082c <LG2_Get_Gyro_X+0x58>
 800080c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000810:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000830 <LG2_Get_Gyro_X+0x5c>
 8000814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000818:	edc7 7a00 	vstr	s15, [r7]
	return omega;
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	ee07 3a90 	vmov	s15, r3
}
 8000822:	eeb0 0a67 	vmov.f32	s0, s15
 8000826:	3708      	adds	r7, #8
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	46fffe00 	.word	0x46fffe00
 8000830:	437a0000 	.word	0x437a0000

08000834 <LG2_Get_Gyro_Y>:

float LG2_Get_Gyro_Y(){
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x24);
 800083a:	2024      	movs	r0, #36	; 0x24
 800083c:	f7ff ff76 	bl	800072c <LG2_Read_Register>
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x25);
 8000844:	2025      	movs	r0, #37	; 0x25
 8000846:	f7ff ff71 	bl	800072c <LG2_Read_Register>
 800084a:	4603      	mov	r3, r0
 800084c:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	b21a      	sxth	r2, r3
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	b21b      	sxth	r3, r3
 8000858:	4313      	orrs	r3, r2
 800085a:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767) * 250;
 800085c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000860:	ee07 3a90 	vmov	s15, r3
 8000864:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000868:	eddf 6a08 	vldr	s13, [pc, #32]	; 800088c <LG2_Get_Gyro_Y+0x58>
 800086c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000870:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8000890 <LG2_Get_Gyro_Y+0x5c>
 8000874:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000878:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	ee07 3a90 	vmov	s15, r3
}
 8000882:	eeb0 0a67 	vmov.f32	s0, s15
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	46fffe00 	.word	0x46fffe00
 8000890:	437a0000 	.word	0x437a0000
 8000894:	00000000 	.word	0x00000000

08000898 <LG2_Get_Gyro_Z>:

float LG2_Get_Gyro_Z(){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	uint8_t Gyro_L = LG2_Read_Register(0x26);
 800089e:	2026      	movs	r0, #38	; 0x26
 80008a0:	f7ff ff44 	bl	800072c <LG2_Read_Register>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
	uint8_t Gyro_H = LG2_Read_Register(0x27);
 80008a8:	2027      	movs	r0, #39	; 0x27
 80008aa:	f7ff ff3f 	bl	800072c <LG2_Read_Register>
 80008ae:	4603      	mov	r3, r0
 80008b0:	71bb      	strb	r3, [r7, #6]
	int16_t Gyro = ((int16_t) Gyro_H << 8) | Gyro_L;
 80008b2:	79bb      	ldrb	r3, [r7, #6]
 80008b4:	021b      	lsls	r3, r3, #8
 80008b6:	b21a      	sxth	r2, r3
 80008b8:	79fb      	ldrb	r3, [r7, #7]
 80008ba:	b21b      	sxth	r3, r3
 80008bc:	4313      	orrs	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	float omega = (((float)Gyro) / 32767.0) * 250.0;
 80008c0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80008d0:	ed9f 5b09 	vldr	d5, [pc, #36]	; 80008f8 <LG2_Get_Gyro_Z+0x60>
 80008d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80008d8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 8000900 <LG2_Get_Gyro_Z+0x68>
 80008dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008e0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008e4:	edc7 7a00 	vstr	s15, [r7]

	return omega;
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	ee07 3a90 	vmov	s15, r3
}
 80008ee:	eeb0 0a67 	vmov.f32	s0, s15
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	00000000 	.word	0x00000000
 80008fc:	40dfffc0 	.word	0x40dfffc0
 8000900:	00000000 	.word	0x00000000
 8000904:	406f4000 	.word	0x406f4000

08000908 <LoRA_Read_Register>:
#define RSSI_OFFSET_HF_PORT      157
#define RSSI_OFFSET_LF_PORT      164

#define MAX_PKT_LENGTH           255

uint8_t LoRA_Read_Register(uint8_t addr){
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_value;
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <LoRA_Read_Register+0x48>)
 800091a:	f007 fcb7 	bl	800828c <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 800091e:	1df9      	adds	r1, r7, #7
 8000920:	2364      	movs	r3, #100	; 0x64
 8000922:	2201      	movs	r2, #1
 8000924:	480b      	ldr	r0, [pc, #44]	; (8000954 <LoRA_Read_Register+0x4c>)
 8000926:	f00e fbfb 	bl	800f120 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi3, &reg_value, 1, 100);
 800092a:	f107 010f 	add.w	r1, r7, #15
 800092e:	2364      	movs	r3, #100	; 0x64
 8000930:	2201      	movs	r2, #1
 8000932:	4808      	ldr	r0, [pc, #32]	; (8000954 <LoRA_Read_Register+0x4c>)
 8000934:	f00e fdf0 	bl	800f518 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000938:	2201      	movs	r2, #1
 800093a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <LoRA_Read_Register+0x48>)
 8000940:	f007 fca4 	bl	800828c <HAL_GPIO_WritePin>

	return reg_value;
 8000944:	7bfb      	ldrb	r3, [r7, #15]
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	58020000 	.word	0x58020000
 8000954:	24001150 	.word	0x24001150

08000958 <LoRA_Write_Register>:

void LoRA_Write_Register(uint8_t addr, uint8_t data){
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	460a      	mov	r2, r1
 8000962:	71fb      	strb	r3, [r7, #7]
 8000964:	4613      	mov	r3, r2
 8000966:	71bb      	strb	r3, [r7, #6]
	addr |= (1<<7);
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800096e:	b2db      	uxtb	r3, r3
 8000970:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 8000972:	2200      	movs	r2, #0
 8000974:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000978:	480c      	ldr	r0, [pc, #48]	; (80009ac <LoRA_Write_Register+0x54>)
 800097a:	f007 fc87 	bl	800828c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, &addr, 1, 100);
 800097e:	1df9      	adds	r1, r7, #7
 8000980:	2364      	movs	r3, #100	; 0x64
 8000982:	2201      	movs	r2, #1
 8000984:	480a      	ldr	r0, [pc, #40]	; (80009b0 <LoRA_Write_Register+0x58>)
 8000986:	f00e fbcb 	bl	800f120 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi3, &data, 1, 100);
 800098a:	1db9      	adds	r1, r7, #6
 800098c:	2364      	movs	r3, #100	; 0x64
 800098e:	2201      	movs	r2, #1
 8000990:	4807      	ldr	r0, [pc, #28]	; (80009b0 <LoRA_Write_Register+0x58>)
 8000992:	f00e fbc5 	bl	800f120 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000996:	2201      	movs	r2, #1
 8000998:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800099c:	4803      	ldr	r0, [pc, #12]	; (80009ac <LoRA_Write_Register+0x54>)
 800099e:	f007 fc75 	bl	800828c <HAL_GPIO_WritePin>

}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	58020000 	.word	0x58020000
 80009b0:	24001150 	.word	0x24001150

080009b4 <LoRA_sleep>:


void LoRA_sleep(void){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_SLEEP);
 80009b8:	2180      	movs	r1, #128	; 0x80
 80009ba:	2001      	movs	r0, #1
 80009bc:	f7ff ffcc 	bl	8000958 <LoRA_Write_Register>
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <LoRA_set_frequency>:

void LoRA_set_frequency(long frequency){
 80009c4:	b5b0      	push	{r4, r5, r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	17c8      	asrs	r0, r1, #31
 80009d0:	460a      	mov	r2, r1
 80009d2:	4603      	mov	r3, r0
 80009d4:	1355      	asrs	r5, r2, #13
 80009d6:	04d4      	lsls	r4, r2, #19
 80009d8:	4a18      	ldr	r2, [pc, #96]	; (8000a3c <LoRA_set_frequency+0x78>)
 80009da:	f04f 0300 	mov.w	r3, #0
 80009de:	4620      	mov	r0, r4
 80009e0:	4629      	mov	r1, r5
 80009e2:	f7ff fcfd 	bl	80003e0 <__aeabi_uldivmod>
 80009e6:	4602      	mov	r2, r0
 80009e8:	460b      	mov	r3, r1
 80009ea:	e9c7 2302 	strd	r2, r3, [r7, #8]

	LoRA_Write_Register(REG_FRF_MSB, (uint8_t)(frf >> 16));
 80009ee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80009f2:	f04f 0200 	mov.w	r2, #0
 80009f6:	f04f 0300 	mov.w	r3, #0
 80009fa:	0c02      	lsrs	r2, r0, #16
 80009fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a00:	0c0b      	lsrs	r3, r1, #16
 8000a02:	b2d3      	uxtb	r3, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	2006      	movs	r0, #6
 8000a08:	f7ff ffa6 	bl	8000958 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_MID, (uint8_t)(frf >> 8));
 8000a0c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000a10:	f04f 0200 	mov.w	r2, #0
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	0a02      	lsrs	r2, r0, #8
 8000a1a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000a1e:	0a0b      	lsrs	r3, r1, #8
 8000a20:	b2d3      	uxtb	r3, r2
 8000a22:	4619      	mov	r1, r3
 8000a24:	2007      	movs	r0, #7
 8000a26:	f7ff ff97 	bl	8000958 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FRF_LSB, (uint8_t)(frf >> 0));
 8000a2a:	7a3b      	ldrb	r3, [r7, #8]
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	2008      	movs	r0, #8
 8000a30:	f7ff ff92 	bl	8000958 <LoRA_Write_Register>
}
 8000a34:	bf00      	nop
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a3c:	01e84800 	.word	0x01e84800

08000a40 <LoRA_idle>:

void LoRA_idle(){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_STDBY);
 8000a44:	2181      	movs	r1, #129	; 0x81
 8000a46:	2001      	movs	r0, #1
 8000a48:	f7ff ff86 	bl	8000958 <LoRA_Write_Register>
}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <LoRA_setOCP>:

void LoRA_setOCP(uint8_t mA){
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
	  uint8_t ocpTrim = 27;
 8000a5a:	231b      	movs	r3, #27
 8000a5c:	73fb      	strb	r3, [r7, #15]

	  if (mA <= 120) {
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	2b78      	cmp	r3, #120	; 0x78
 8000a62:	d809      	bhi.n	8000a78 <LoRA_setOCP+0x28>
	    ocpTrim = (mA - 45) / 5;
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	3b2d      	subs	r3, #45	; 0x2d
 8000a68:	4a11      	ldr	r2, [pc, #68]	; (8000ab0 <LoRA_setOCP+0x60>)
 8000a6a:	fb82 1203 	smull	r1, r2, r2, r3
 8000a6e:	1052      	asrs	r2, r2, #1
 8000a70:	17db      	asrs	r3, r3, #31
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	73fb      	strb	r3, [r7, #15]
 8000a76:	e00b      	b.n	8000a90 <LoRA_setOCP+0x40>
	  } else if (mA <=240) {
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2bf0      	cmp	r3, #240	; 0xf0
 8000a7c:	d808      	bhi.n	8000a90 <LoRA_setOCP+0x40>
	    ocpTrim = (mA + 30) / 10;
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	331e      	adds	r3, #30
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <LoRA_setOCP+0x60>)
 8000a84:	fb82 1203 	smull	r1, r2, r2, r3
 8000a88:	1092      	asrs	r2, r2, #2
 8000a8a:	17db      	asrs	r3, r3, #31
 8000a8c:	1ad3      	subs	r3, r2, r3
 8000a8e:	73fb      	strb	r3, [r7, #15]
	  }

	  LoRA_Write_Register(REG_OCP, 0x20 | (0x1F & ocpTrim));
 8000a90:	7bfb      	ldrb	r3, [r7, #15]
 8000a92:	f003 031f 	and.w	r3, r3, #31
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	f043 0320 	orr.w	r3, r3, #32
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	200b      	movs	r0, #11
 8000aa2:	f7ff ff59 	bl	8000958 <LoRA_Write_Register>
}
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	66666667 	.word	0x66666667

08000ab4 <LoRA_setTxPower>:

void LoRA_setTxPower(int level){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
    // PA BOOST
    if (level > 17) {
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b11      	cmp	r3, #17
 8000ac0:	dd0f      	ble.n	8000ae2 <LoRA_setTxPower+0x2e>
      if (level > 20) {
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b14      	cmp	r3, #20
 8000ac6:	dd01      	ble.n	8000acc <LoRA_setTxPower+0x18>
        level = 20;
 8000ac8:	2314      	movs	r3, #20
 8000aca:	607b      	str	r3, [r7, #4]
      }

      // subtract 3 from level, so 18 - 20 maps to 15 - 17
      level -= 3;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	3b03      	subs	r3, #3
 8000ad0:	607b      	str	r3, [r7, #4]

      // High Power +20 dBm Operation (Semtech SX1276/77/78/79 5.4.3.)
      LoRA_Write_Register(REG_PA_DAC, 0x87);
 8000ad2:	2187      	movs	r1, #135	; 0x87
 8000ad4:	204d      	movs	r0, #77	; 0x4d
 8000ad6:	f7ff ff3f 	bl	8000958 <LoRA_Write_Register>
      LoRA_setOCP(140);
 8000ada:	208c      	movs	r0, #140	; 0x8c
 8000adc:	f7ff ffb8 	bl	8000a50 <LoRA_setOCP>
 8000ae0:	e00b      	b.n	8000afa <LoRA_setTxPower+0x46>
    } else {
      if (level < 2) {
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	dc01      	bgt.n	8000aec <LoRA_setTxPower+0x38>
        level = 2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	607b      	str	r3, [r7, #4]
      }
      //Default value PA_HF/LF or +17dBm
      LoRA_Write_Register(REG_PA_DAC, 0x84);
 8000aec:	2184      	movs	r1, #132	; 0x84
 8000aee:	204d      	movs	r0, #77	; 0x4d
 8000af0:	f7ff ff32 	bl	8000958 <LoRA_Write_Register>
      LoRA_setOCP(100);
 8000af4:	2064      	movs	r0, #100	; 0x64
 8000af6:	f7ff ffab 	bl	8000a50 <LoRA_setOCP>
    }

    LoRA_Write_Register(REG_PA_CONFIG, PA_BOOST | (level - 2));
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	3b02      	subs	r3, #2
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	b25b      	sxtb	r3, r3
 8000b04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000b08:	b25b      	sxtb	r3, r3
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	2009      	movs	r0, #9
 8000b10:	f7ff ff22 	bl	8000958 <LoRA_Write_Register>
}
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <LoRA_explicit_header_mode>:

void LoRA_explicit_header_mode(){
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_MODEM_CONFIG_1, LoRA_Read_Register(REG_MODEM_CONFIG_1) & 0xFE);
 8000b20:	201d      	movs	r0, #29
 8000b22:	f7ff fef1 	bl	8000908 <LoRA_Read_Register>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f023 0301 	bic.w	r3, r3, #1
 8000b2c:	b2db      	uxtb	r3, r3
 8000b2e:	4619      	mov	r1, r3
 8000b30:	201d      	movs	r0, #29
 8000b32:	f7ff ff11 	bl	8000958 <LoRA_Write_Register>
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
	...

08000b3c <LoRA_begin>:

void LoRA_begin(long frequency){
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b09c      	sub	sp, #112	; 0x70
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8000b44:	2201      	movs	r2, #1
 8000b46:	2101      	movs	r1, #1
 8000b48:	4822      	ldr	r0, [pc, #136]	; (8000bd4 <LoRA_begin+0x98>)
 8000b4a:	f007 fb9f 	bl	800828c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b54:	4820      	ldr	r0, [pc, #128]	; (8000bd8 <LoRA_begin+0x9c>)
 8000b56:	f007 fb99 	bl	800828c <HAL_GPIO_WritePin>

	uint8_t version = LoRA_Read_Register(REG_VERSION);
 8000b5a:	2042      	movs	r0, #66	; 0x42
 8000b5c:	f7ff fed4 	bl	8000908 <LoRA_Read_Register>
 8000b60:	4603      	mov	r3, r0
 8000b62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
    char data_debug[100];
	sprintf( data_debug,  "%x\n", version);
 8000b66:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	491b      	ldr	r1, [pc, #108]	; (8000bdc <LoRA_begin+0xa0>)
 8000b70:	4618      	mov	r0, r3
 8000b72:	f016 fdab 	bl	80176cc <siprintf>
	CDC_Transmit_HS(data_debug, strlen(data_debug));
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fbd2 	bl	8000324 <strlen>
 8000b80:	4602      	mov	r2, r0
 8000b82:	f107 0308 	add.w	r3, r7, #8
 8000b86:	4611      	mov	r1, r2
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f016 f94b 	bl	8016e24 <CDC_Transmit_HS>

	LoRA_sleep();
 8000b8e:	f7ff ff11 	bl	80009b4 <LoRA_sleep>
	LoRA_set_frequency(868000000);
 8000b92:	4813      	ldr	r0, [pc, #76]	; (8000be0 <LoRA_begin+0xa4>)
 8000b94:	f7ff ff16 	bl	80009c4 <LoRA_set_frequency>

	LoRA_Write_Register(REG_FIFO_RX_BASE_ADDR, 0);
 8000b98:	2100      	movs	r1, #0
 8000b9a:	200f      	movs	r0, #15
 8000b9c:	f7ff fedc 	bl	8000958 <LoRA_Write_Register>
	LoRA_Write_Register(REG_FIFO_TX_BASE_ADDR, 0);
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	200e      	movs	r0, #14
 8000ba4:	f7ff fed8 	bl	8000958 <LoRA_Write_Register>

	LoRA_Write_Register(REG_LNA, LoRA_Read_Register(REG_LNA) | 0x03); //LNA settings
 8000ba8:	200c      	movs	r0, #12
 8000baa:	f7ff fead 	bl	8000908 <LoRA_Read_Register>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	f043 0303 	orr.w	r3, r3, #3
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	200c      	movs	r0, #12
 8000bba:	f7ff fecd 	bl	8000958 <LoRA_Write_Register>

	LoRA_Write_Register(REG_MODEM_CONFIG_3, 0x04);
 8000bbe:	2104      	movs	r1, #4
 8000bc0:	2026      	movs	r0, #38	; 0x26
 8000bc2:	f7ff fec9 	bl	8000958 <LoRA_Write_Register>

	LoRA_setTxPower(17);
 8000bc6:	2011      	movs	r0, #17
 8000bc8:	f7ff ff74 	bl	8000ab4 <LoRA_setTxPower>

}
 8000bcc:	bf00      	nop
 8000bce:	3770      	adds	r7, #112	; 0x70
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	58020c00 	.word	0x58020c00
 8000bd8:	58020000 	.word	0x58020000
 8000bdc:	080189b0 	.word	0x080189b0
 8000be0:	33bca100 	.word	0x33bca100

08000be4 <LoRA_beginPacket>:


void LoRA_beginPacket(){
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
	LoRA_explicit_header_mode();
 8000be8:	f7ff ff98 	bl	8000b1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000bec:	2100      	movs	r1, #0
 8000bee:	200d      	movs	r0, #13
 8000bf0:	f7ff feb2 	bl	8000958 <LoRA_Write_Register>
	LoRA_Write_Register(REG_PAYLOAD_LENGTH, 0);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2022      	movs	r0, #34	; 0x22
 8000bf8:	f7ff feae 	bl	8000958 <LoRA_Write_Register>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <LoRA_endPacket>:

void LoRA_endPacket(){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_TX);
 8000c04:	2183      	movs	r1, #131	; 0x83
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff fea6 	bl	8000958 <LoRA_Write_Register>

	while((LoRA_Read_Register(REG_IRQ_FLAGS) & IRQ_TX_DONE_MASK) == 0){
 8000c0c:	bf00      	nop
 8000c0e:	2012      	movs	r0, #18
 8000c10:	f7ff fe7a 	bl	8000908 <LoRA_Read_Register>
 8000c14:	4603      	mov	r3, r0
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0f7      	beq.n	8000c0e <LoRA_endPacket+0xe>

	}
	LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000c1e:	2185      	movs	r1, #133	; 0x85
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff fe99 	bl	8000958 <LoRA_Write_Register>

	LoRA_Write_Register(REG_IRQ_FLAGS, IRQ_TX_DONE_MASK);
 8000c26:	2108      	movs	r1, #8
 8000c28:	2012      	movs	r0, #18
 8000c2a:	f7ff fe95 	bl	8000958 <LoRA_Write_Register>

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}

08000c32 <LoRA_parsePacket>:


int LoRA_parsePacket(){
 8000c32:	b580      	push	{r7, lr}
 8000c34:	b082      	sub	sp, #8
 8000c36:	af00      	add	r7, sp, #0
	int packetLenght = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	607b      	str	r3, [r7, #4]
	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8000c3c:	2012      	movs	r0, #18
 8000c3e:	f7ff fe63 	bl	8000908 <LoRA_Read_Register>
 8000c42:	4603      	mov	r3, r0
 8000c44:	603b      	str	r3, [r7, #0]

	LoRA_explicit_header_mode();
 8000c46:	f7ff ff69 	bl	8000b1c <LoRA_explicit_header_mode>

	LoRA_Write_Register(REG_IRQ_FLAGS, irqFlags);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	4619      	mov	r1, r3
 8000c50:	2012      	movs	r0, #18
 8000c52:	f7ff fe81 	bl	8000958 <LoRA_Write_Register>

	if ((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0) {
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d016      	beq.n	8000c8e <LoRA_parsePacket+0x5c>
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	f003 0320 	and.w	r3, r3, #32
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d111      	bne.n	8000c8e <LoRA_parsePacket+0x5c>
		packetLenght = LoRA_Read_Register(REG_RX_NB_BYTES);
 8000c6a:	2013      	movs	r0, #19
 8000c6c:	f7ff fe4c 	bl	8000908 <LoRA_Read_Register>
 8000c70:	4603      	mov	r3, r0
 8000c72:	607b      	str	r3, [r7, #4]
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, LoRA_Read_Register(REG_FIFO_RX_CURRENT_ADDR));
 8000c74:	2010      	movs	r0, #16
 8000c76:	f7ff fe47 	bl	8000908 <LoRA_Read_Register>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	200d      	movs	r0, #13
 8000c80:	f7ff fe6a 	bl	8000958 <LoRA_Write_Register>
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000c84:	2185      	movs	r1, #133	; 0x85
 8000c86:	2001      	movs	r0, #1
 8000c88:	f7ff fe66 	bl	8000958 <LoRA_Write_Register>
 8000c8c:	e00d      	b.n	8000caa <LoRA_parsePacket+0x78>

		//LoRA_idle();
	} else if (LoRA_Read_Register(REG_OP_MODE) != (MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS)){
 8000c8e:	2001      	movs	r0, #1
 8000c90:	f7ff fe3a 	bl	8000908 <LoRA_Read_Register>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b85      	cmp	r3, #133	; 0x85
 8000c98:	d007      	beq.n	8000caa <LoRA_parsePacket+0x78>
		LoRA_Write_Register(REG_FIFO_ADDR_PTR, 0);
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	200d      	movs	r0, #13
 8000c9e:	f7ff fe5b 	bl	8000958 <LoRA_Write_Register>

		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000ca2:	2185      	movs	r1, #133	; 0x85
 8000ca4:	2001      	movs	r0, #1
 8000ca6:	f7ff fe57 	bl	8000958 <LoRA_Write_Register>
	}
	return packetLenght;
 8000caa:	687b      	ldr	r3, [r7, #4]

}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <LoRA_sendPacket>:

void LoRA_sendPacket(char * data){
 8000cb4:	b5b0      	push	{r4, r5, r7, lr}
 8000cb6:	b0c4      	sub	sp, #272	; 0x110
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000cbe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000cc2:	6018      	str	r0, [r3, #0]
	LoRA_idle();
 8000cc4:	f7ff febc 	bl	8000a40 <LoRA_idle>

	char debug[MAX_PKT_LENGTH];
	if(recv_packet(debug, MAX_PKT_LENGTH)) {
 8000cc8:	f107 0308 	add.w	r3, r7, #8
 8000ccc:	21ff      	movs	r1, #255	; 0xff
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f878 	bl	8000dc4 <recv_packet>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d022      	beq.n	8000d20 <LoRA_sendPacket+0x6c>
		HAL_Delay(100);
 8000cda:	2064      	movs	r0, #100	; 0x64
 8000cdc:	f003 f824 	bl	8003d28 <HAL_Delay>
		strcat(debug, " was thrown away");
 8000ce0:	f107 0308 	add.w	r3, r7, #8
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fb1d 	bl	8000324 <strlen>
 8000cea:	4603      	mov	r3, r0
 8000cec:	461a      	mov	r2, r3
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a32      	ldr	r2, [pc, #200]	; (8000dc0 <LoRA_sendPacket+0x10c>)
 8000cf6:	461d      	mov	r5, r3
 8000cf8:	4614      	mov	r4, r2
 8000cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cfc:	6028      	str	r0, [r5, #0]
 8000cfe:	6069      	str	r1, [r5, #4]
 8000d00:	60aa      	str	r2, [r5, #8]
 8000d02:	60eb      	str	r3, [r5, #12]
 8000d04:	7823      	ldrb	r3, [r4, #0]
 8000d06:	742b      	strb	r3, [r5, #16]
		CDC_Transmit_HS(debug, strlen(debug));
 8000d08:	f107 0308 	add.w	r3, r7, #8
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff fb09 	bl	8000324 <strlen>
 8000d12:	4602      	mov	r2, r0
 8000d14:	f107 0308 	add.w	r3, r7, #8
 8000d18:	4611      	mov	r1, r2
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f016 f882 	bl	8016e24 <CDC_Transmit_HS>
	}



	int irqFlags = LoRA_Read_Register(REG_IRQ_FLAGS);
 8000d20:	2012      	movs	r0, #18
 8000d22:	f7ff fdf1 	bl	8000908 <LoRA_Read_Register>
 8000d26:	4603      	mov	r3, r0
 8000d28:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	/*char debug[250];
	sprintf(debug, "here: %d\n", (irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK));
	CDC_Transmit_HS(debug, strlen(debug));
	HAL_Delay(100);*/
	if(!((irqFlags & IRQ_RX_DONE_MASK) && (irqFlags & IRQ_PAYLOAD_CRC_ERROR_MASK) == 0))
 8000d2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d005      	beq.n	8000d44 <LoRA_sendPacket+0x90>
 8000d38:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8000d3c:	f003 0320 	and.w	r3, r3, #32
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d033      	beq.n	8000dac <LoRA_sendPacket+0xf8>
	{
		//CDC_Transmit_HS("here1\n", strlen("here1\n"));
		LoRA_beginPacket();
 8000d44:	f7ff ff4e 	bl	8000be4 <LoRA_beginPacket>
    	for(int i = 0; i < strlen(data); i++){
 8000d48:	2300      	movs	r3, #0
 8000d4a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000d4e:	e011      	b.n	8000d74 <LoRA_sendPacket+0xc0>
    		LoRA_Write_Register(REG_FIFO, data[i]);
 8000d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000d54:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000d58:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8000d5c:	6812      	ldr	r2, [r2, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	4619      	mov	r1, r3
 8000d64:	2000      	movs	r0, #0
 8000d66:	f7ff fdf7 	bl	8000958 <LoRA_Write_Register>
    	for(int i = 0; i < strlen(data); i++){
 8000d6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000d6e:	3301      	adds	r3, #1
 8000d70:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8000d74:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d78:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d7c:	6818      	ldr	r0, [r3, #0]
 8000d7e:	f7ff fad1 	bl	8000324 <strlen>
 8000d82:	4602      	mov	r2, r0
 8000d84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d8e1      	bhi.n	8000d50 <LoRA_sendPacket+0x9c>
    	}
    	LoRA_Write_Register(REG_PAYLOAD_LENGTH, strlen(data));
 8000d8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000d94:	6818      	ldr	r0, [r3, #0]
 8000d96:	f7ff fac5 	bl	8000324 <strlen>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	4619      	mov	r1, r3
 8000da0:	2022      	movs	r0, #34	; 0x22
 8000da2:	f7ff fdd9 	bl	8000958 <LoRA_Write_Register>
    	LoRA_endPacket();
 8000da6:	f7ff ff2b 	bl	8000c00 <LoRA_endPacket>
 8000daa:	e004      	b.n	8000db6 <LoRA_sendPacket+0x102>
    	HAL_Delay(100);
    	CDC_Transmit_HS(sent, strlen(sent));*/
	}
	else {
		//CDC_Transmit_HS("here2\n", strlen("here2\n"));
		LoRA_Write_Register(REG_OP_MODE, MODE_LONG_RANGE_MODE | MODE_RX_CONTINUOUS);
 8000dac:	2185      	movs	r1, #133	; 0x85
 8000dae:	2001      	movs	r0, #1
 8000db0:	f7ff fdd2 	bl	8000958 <LoRA_Write_Register>
	}
	/*char sent[300];
	sprintf(sent, "\nsent: %s\n", data);
	HAL_Delay(100);
	CDC_Transmit_HS(sent, strlen(sent));*/
}
 8000db4:	bf00      	nop
 8000db6:	bf00      	nop
 8000db8:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8000dc0:	080189b4 	.word	0x080189b4

08000dc4 <recv_packet>:

int recv_packet(char* LoRA_data, int max_length)
{
 8000dc4:	b590      	push	{r4, r7, lr}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	6039      	str	r1, [r7, #0]
  int packet_length = LoRA_parsePacket();
 8000dce:	f7ff ff30 	bl	8000c32 <LoRA_parsePacket>
 8000dd2:	60b8      	str	r0, [r7, #8]
  if(max_length-1 < packet_length) //-1 for the null terminator
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dc01      	bgt.n	8000de0 <recv_packet+0x1c>
  {
    return 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	e01c      	b.n	8000e1a <recv_packet+0x56>
  }
  if(packet_length){
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d018      	beq.n	8000e18 <recv_packet+0x54>
    for(int i = 0; i < packet_length; i++){
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	e00a      	b.n	8000e02 <recv_packet+0x3e>
      LoRA_data[i] = LoRA_Read_Register(0x00);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	18d4      	adds	r4, r2, r3
 8000df2:	2000      	movs	r0, #0
 8000df4:	f7ff fd88 	bl	8000908 <LoRA_Read_Register>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	7023      	strb	r3, [r4, #0]
    for(int i = 0; i < packet_length; i++){
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fa      	ldr	r2, [r7, #12]
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	429a      	cmp	r2, r3
 8000e08:	dbf0      	blt.n	8000dec <recv_packet+0x28>
    }
    LoRA_data[packet_length] = '\0';
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]

    /*char rec[300];
    sprintf(rec, "received: %s\n", LoRA_data);
    CDC_Transmit_HS(rec, strlen(rec));*/
    return packet_length;
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	e000      	b.n	8000e1a <recv_packet+0x56>
  }
  else{
    return 0;
 8000e18:	2300      	movs	r3, #0
  }
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd90      	pop	{r4, r7, pc}

08000e22 <reliable_send_packet>:

void reliable_send_packet(char *LoRA_data) {
 8000e22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e26:	b089      	sub	sp, #36	; 0x24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	466b      	mov	r3, sp
 8000e2e:	461e      	mov	r6, r3
	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
	uint16_t length = strlen(LoRA_data) + 1; //+1 for the \0
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff fa77 	bl	8000324 <strlen>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	82fb      	strh	r3, [r7, #22]
	char acknowledge[length];
 8000e3e:	8af9      	ldrh	r1, [r7, #22]
 8000e40:	460b      	mov	r3, r1
 8000e42:	3b01      	subs	r3, #1
 8000e44:	613b      	str	r3, [r7, #16]
 8000e46:	b28b      	uxth	r3, r1
 8000e48:	2200      	movs	r2, #0
 8000e4a:	4698      	mov	r8, r3
 8000e4c:	4691      	mov	r9, r2
 8000e4e:	f04f 0200 	mov.w	r2, #0
 8000e52:	f04f 0300 	mov.w	r3, #0
 8000e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e62:	b28b      	uxth	r3, r1
 8000e64:	2200      	movs	r2, #0
 8000e66:	461c      	mov	r4, r3
 8000e68:	4615      	mov	r5, r2
 8000e6a:	f04f 0200 	mov.w	r2, #0
 8000e6e:	f04f 0300 	mov.w	r3, #0
 8000e72:	00eb      	lsls	r3, r5, #3
 8000e74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e78:	00e2      	lsls	r2, r4, #3
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	3307      	adds	r3, #7
 8000e7e:	08db      	lsrs	r3, r3, #3
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	ebad 0d03 	sub.w	sp, sp, r3
 8000e86:	466b      	mov	r3, sp
 8000e88:	3300      	adds	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
	uint32_t lastTime = HAL_GetTick();
 8000e8c:	f002 ff40 	bl	8003d10 <HAL_GetTick>
 8000e90:	61f8      	str	r0, [r7, #28]
	uint32_t wait_time = rand_range(3, 13)*100;
 8000e92:	210d      	movs	r1, #13
 8000e94:	2003      	movs	r0, #3
 8000e96:	f001 fe2f 	bl	8002af8 <rand_range>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2264      	movs	r2, #100	; 0x64
 8000e9e:	fb02 f303 	mul.w	r3, r2, r3
 8000ea2:	61bb      	str	r3, [r7, #24]
	LoRA_sendPacket(LoRA_data);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff ff05 	bl	8000cb4 <LoRA_sendPacket>
	while (1) {

		if (recv_packet(acknowledge, length)) {
 8000eaa:	8afb      	ldrh	r3, [r7, #22]
 8000eac:	4619      	mov	r1, r3
 8000eae:	68f8      	ldr	r0, [r7, #12]
 8000eb0:	f7ff ff88 	bl	8000dc4 <recv_packet>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d009      	beq.n	8000ece <reliable_send_packet+0xac>

			//cehck crc
			if (strcmp(acknowledge, LoRA_data) != 0) {
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	68f8      	ldr	r0, [r7, #12]
 8000ebe:	f7ff fa27 	bl	8000310 <strcmp>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d01a      	beq.n	8000efe <reliable_send_packet+0xdc>
				LoRA_sendPacket(LoRA_data);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff fef3 	bl	8000cb4 <LoRA_sendPacket>
			} else {
				break;
			}
		}

		if (HAL_GetTick() - lastTime > wait_time) {
 8000ece:	f002 ff1f 	bl	8003d10 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d2e5      	bcs.n	8000eaa <reliable_send_packet+0x88>
	    	//CDC_Transmit_HS("debug\n", strlen("debug\n"));
			wait_time = rand_range(3, 13)*100;
 8000ede:	210d      	movs	r1, #13
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f001 fe09 	bl	8002af8 <rand_range>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2264      	movs	r2, #100	; 0x64
 8000eea:	fb02 f303 	mul.w	r3, r2, r3
 8000eee:	61bb      	str	r3, [r7, #24]
			LoRA_sendPacket(LoRA_data);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff fedf 	bl	8000cb4 <LoRA_sendPacket>
			lastTime = HAL_GetTick();
 8000ef6:	f002 ff0b 	bl	8003d10 <HAL_GetTick>
 8000efa:	61f8      	str	r0, [r7, #28]
		if (recv_packet(acknowledge, length)) {
 8000efc:	e7d5      	b.n	8000eaa <reliable_send_packet+0x88>
				break;
 8000efe:	bf00      	nop
 8000f00:	46b5      	mov	sp, r6
		}
	}
}
 8000f02:	bf00      	nop
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000f0c <communicationHandler>:
#include "communication_protocol.h"
#include "LoRA.h"
#include "usb_device.h"

//should move variables to global, remove the loop and call the function in main loop (communicationHandle)
void communicationHandler(void reliableReceiveHandle(char*), void streamReceiveHandle(char*), char* streamSendHandle(int), struct ReliableSendConfig reliableSendHandle(), int initial_communication_state) {
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	f5ad 7d4f 	sub.w	sp, sp, #828	; 0x33c
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	f507 744e 	add.w	r4, r7, #824	; 0x338
 8000f18:	f5a4 744b 	sub.w	r4, r4, #812	; 0x32c
 8000f1c:	6020      	str	r0, [r4, #0]
 8000f1e:	f507 704e 	add.w	r0, r7, #824	; 0x338
 8000f22:	f5a0 704c 	sub.w	r0, r0, #816	; 0x330
 8000f26:	6001      	str	r1, [r0, #0]
 8000f28:	f507 714e 	add.w	r1, r7, #824	; 0x338
 8000f2c:	f5a1 714d 	sub.w	r1, r1, #820	; 0x334
 8000f30:	600a      	str	r2, [r1, #0]
 8000f32:	f507 724e 	add.w	r2, r7, #824	; 0x338
 8000f36:	f5a2 724e 	sub.w	r2, r2, #824	; 0x338
 8000f3a:	6013      	str	r3, [r2, #0]
  int communication_state = initial_communication_state;
 8000f3c:	f8d7 3348 	ldr.w	r3, [r7, #840]	; 0x348
 8000f40:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
  int max_packet_count = 0;
 8000f44:	2300      	movs	r3, #0
 8000f46:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
  char previous_packet[MAX_PKT_LENGTH] = "";
 8000f4a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000f4e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	3304      	adds	r3, #4
 8000f58:	22fb      	movs	r2, #251	; 0xfb
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f016 fc03 	bl	8017768 <memset>
  char received_packet[MAX_PKT_LENGTH] = "";
 8000f62:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000f66:	f5a3 7306 	sub.w	r3, r3, #536	; 0x218
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	3304      	adds	r3, #4
 8000f70:	22fb      	movs	r2, #251	; 0xfb
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f016 fbf7 	bl	8017768 <memset>
  char general_buffer[MAX_PKT_LENGTH] = "";
 8000f7a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8000f7e:	f5a3 7346 	sub.w	r3, r3, #792	; 0x318
 8000f82:	2200      	movs	r2, #0
 8000f84:	601a      	str	r2, [r3, #0]
 8000f86:	3304      	adds	r3, #4
 8000f88:	22fb      	movs	r2, #251	; 0xfb
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f016 fbeb 	bl	8017768 <memset>
  uint32_t previousTime = HAL_GetTick();
 8000f92:	f002 febd 	bl	8003d10 <HAL_GetTick>
 8000f96:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
  uint32_t wait_time = rand_range(3, 13)*100;
 8000f9a:	210d      	movs	r1, #13
 8000f9c:	2003      	movs	r0, #3
 8000f9e:	f001 fdab 	bl	8002af8 <rand_range>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2264      	movs	r2, #100	; 0x64
 8000fa6:	fb02 f303 	mul.w	r3, r2, r3
 8000faa:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c

  while (1) {
      if(communication_state == RECEIVING_RELIABLE)
 8000fae:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d150      	bne.n	8001058 <communicationHandler+0x14c>
      {
        if(recv_packet(received_packet, MAX_PKT_LENGTH))
 8000fb6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000fba:	21ff      	movs	r1, #255	; 0xff
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ff01 	bl	8000dc4 <recv_packet>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f2      	beq.n	8000fae <communicationHandler+0xa2>
        {
          previousTime = HAL_GetTick();
 8000fc8:	f002 fea2 	bl	8003d10 <HAL_GetTick>
 8000fcc:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330

          if(strcmp(received_packet, "$") == 0)
 8000fd0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000fd4:	49ca      	ldr	r1, [pc, #808]	; (8001300 <communicationHandler+0x3f4>)
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff f99a 	bl	8000310 <strcmp>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d103      	bne.n	8000fea <communicationHandler+0xde>
          {
            communication_state = SENDING_RELIABLE;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8000fe8:	e7e1      	b.n	8000fae <communicationHandler+0xa2>
          }
          else if(sscanf(received_packet, "! %d", &max_packet_count) == 1)
 8000fea:	f507 7248 	add.w	r2, r7, #800	; 0x320
 8000fee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000ff2:	49c4      	ldr	r1, [pc, #784]	; (8001304 <communicationHandler+0x3f8>)
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f016 fb89 	bl	801770c <siscanf>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d103      	bne.n	8001008 <communicationHandler+0xfc>
          {
            communication_state = SENDING_STREAM;
 8001000:	2303      	movs	r3, #3
 8001002:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8001006:	e7d2      	b.n	8000fae <communicationHandler+0xa2>
          }
          else if(strcmp(received_packet, previous_packet)==0)
 8001008:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800100c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001010:	4611      	mov	r1, r2
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff f97c 	bl	8000310 <strcmp>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d105      	bne.n	800102a <communicationHandler+0x11e>
          {
            //send acknowledge again
            LoRA_sendPacket(received_packet);
 800101e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fe46 	bl	8000cb4 <LoRA_sendPacket>
 8001028:	e7c1      	b.n	8000fae <communicationHandler+0xa2>
          }
          else
          {
        	//send acknowledge
            strcpy(previous_packet, received_packet);
 800102a:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800102e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001032:	4611      	mov	r1, r2
 8001034:	4618      	mov	r0, r3
 8001036:	f016 fbcb 	bl	80177d0 <strcpy>
            LoRA_sendPacket(received_packet);
 800103a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fe38 	bl	8000cb4 <LoRA_sendPacket>

            reliableReceiveHandle(received_packet);
 8001044:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001048:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800104c:	f5a3 734b 	sub.w	r3, r3, #812	; 0x32c
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4610      	mov	r0, r2
 8001054:	4798      	blx	r3
 8001056:	e7aa      	b.n	8000fae <communicationHandler+0xa2>

          }
        }
      }
      else if(communication_state == RECEIVING_STREAM)
 8001058:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800105c:	2b01      	cmp	r3, #1
 800105e:	d14a      	bne.n	80010f6 <communicationHandler+0x1ea>
      {
        if(recv_packet(received_packet, MAX_PKT_LENGTH))
 8001060:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001064:	21ff      	movs	r1, #255	; 0xff
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff feac 	bl	8000dc4 <recv_packet>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d01a      	beq.n	80010a8 <communicationHandler+0x19c>
        {
          previousTime = HAL_GetTick();
 8001072:	f002 fe4d 	bl	8003d10 <HAL_GetTick>
 8001076:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
          if(strcmp(received_packet, "$") == 0)
 800107a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800107e:	49a0      	ldr	r1, [pc, #640]	; (8001300 <communicationHandler+0x3f4>)
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff f945 	bl	8000310 <strcmp>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d103      	bne.n	8001094 <communicationHandler+0x188>
          {
            communication_state = SENDING_RELIABLE;
 800108c:	2302      	movs	r3, #2
 800108e:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8001092:	e78c      	b.n	8000fae <communicationHandler+0xa2>
          }
          else
          {
        	streamReceiveHandle(received_packet);
 8001094:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001098:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800109c:	f5a3 734c 	sub.w	r3, r3, #816	; 0x330
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4610      	mov	r0, r2
 80010a4:	4798      	blx	r3
 80010a6:	e782      	b.n	8000fae <communicationHandler+0xa2>
          }
        }
        else if(HAL_GetTick()-previousTime > wait_time)
 80010a8:	f002 fe32 	bl	8003d10 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80010b2:	1ad3      	subs	r3, r2, r3
 80010b4:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 80010b8:	429a      	cmp	r2, r3
 80010ba:	f4bf af78 	bcs.w	8000fae <communicationHandler+0xa2>
        {
          wait_time = rand_range(3, 13)*100;
 80010be:	210d      	movs	r1, #13
 80010c0:	2003      	movs	r0, #3
 80010c2:	f001 fd19 	bl	8002af8 <rand_range>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2264      	movs	r2, #100	; 0x64
 80010ca:	fb02 f303 	mul.w	r3, r2, r3
 80010ce:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
          previousTime = HAL_GetTick();
 80010d2:	f002 fe1d 	bl	8003d10 <HAL_GetTick>
 80010d6:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
          //give up SENDING
          sprintf(general_buffer, "! %d", max_packet_count);
 80010da:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 80010de:	f107 0320 	add.w	r3, r7, #32
 80010e2:	4988      	ldr	r1, [pc, #544]	; (8001304 <communicationHandler+0x3f8>)
 80010e4:	4618      	mov	r0, r3
 80010e6:	f016 faf1 	bl	80176cc <siprintf>
          LoRA_sendPacket(general_buffer);
 80010ea:	f107 0320 	add.w	r3, r7, #32
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fde0 	bl	8000cb4 <LoRA_sendPacket>
 80010f4:	e75b      	b.n	8000fae <communicationHandler+0xa2>
        }
      }
      else if(communication_state == SENDING_STREAM)
 80010f6:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	d11f      	bne.n	800113e <communicationHandler+0x232>
      {
        if(max_packet_count == 0)
 80010fe:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8001102:	2b00      	cmp	r3, #0
 8001104:	d106      	bne.n	8001114 <communicationHandler+0x208>
        {
          communication_state = TRANSITIONING;
 8001106:	2304      	movs	r3, #4
 8001108:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
          LoRA_sendPacket("$");
 800110c:	487c      	ldr	r0, [pc, #496]	; (8001300 <communicationHandler+0x3f4>)
 800110e:	f7ff fdd1 	bl	8000cb4 <LoRA_sendPacket>
 8001112:	e74c      	b.n	8000fae <communicationHandler+0xa2>
        }
        else
        {
          //send whatever
          char* msg = streamSendHandle(max_packet_count);
 8001114:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 8001118:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800111c:	f5a3 734d 	sub.w	r3, r3, #820	; 0x334
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4610      	mov	r0, r2
 8001124:	4798      	blx	r3
 8001126:	f8c7 0324 	str.w	r0, [r7, #804]	; 0x324
          LoRA_sendPacket(msg);
 800112a:	f8d7 0324 	ldr.w	r0, [r7, #804]	; 0x324
 800112e:	f7ff fdc1 	bl	8000cb4 <LoRA_sendPacket>
          max_packet_count--;
 8001132:	f8d7 3320 	ldr.w	r3, [r7, #800]	; 0x320
 8001136:	3b01      	subs	r3, #1
 8001138:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
 800113c:	e737      	b.n	8000fae <communicationHandler+0xa2>
        }

      }
      else if(communication_state == SENDING_RELIABLE)
 800113e:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8001142:	2b02      	cmp	r3, #2
 8001144:	f040 8091 	bne.w	800126a <communicationHandler+0x35e>
      {
        reliable_send_packet("*");
 8001148:	486f      	ldr	r0, [pc, #444]	; (8001308 <communicationHandler+0x3fc>)
 800114a:	f7ff fe6a 	bl	8000e22 <reliable_send_packet>
        struct ReliableSendConfig config = reliableSendHandle();
 800114e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001152:	f5a3 724a 	sub.w	r2, r3, #808	; 0x328
 8001156:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800115a:	f5a3 734e 	sub.w	r3, r3, #824	; 0x338
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4610      	mov	r0, r2
 8001162:	4798      	blx	r3
        for(int i = 0; i < config.messages_count; i++)
 8001164:	2300      	movs	r3, #0
 8001166:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 800116a:	e040      	b.n	80011ee <communicationHandler+0x2e2>
        {
        	if(config.messages[i][0] == '$' || config.messages[i][0] == '*' || config.messages[i][0] == '!')
 800116c:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001170:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b24      	cmp	r3, #36	; 0x24
 8001184:	d019      	beq.n	80011ba <communicationHandler+0x2ae>
 8001186:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800118a:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	4413      	add	r3, r2
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b2a      	cmp	r3, #42	; 0x2a
 800119e:	d00c      	beq.n	80011ba <communicationHandler+0x2ae>
 80011a0:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80011a4:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	4413      	add	r3, r2
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b21      	cmp	r3, #33	; 0x21
 80011b8:	d107      	bne.n	80011ca <communicationHandler+0x2be>
        	{
        		HAL_Delay(100);
 80011ba:	2064      	movs	r0, #100	; 0x64
 80011bc:	f002 fdb4 	bl	8003d28 <HAL_Delay>
        		CDC_Transmit_HS("Can't send control commands! ('$', '*', '!')\n", strlen("Can't send control commands! ('$', '*', '!')\n"));
 80011c0:	212d      	movs	r1, #45	; 0x2d
 80011c2:	4852      	ldr	r0, [pc, #328]	; (800130c <communicationHandler+0x400>)
 80011c4:	f015 fe2e 	bl	8016e24 <CDC_Transmit_HS>
        	{
 80011c8:	e00c      	b.n	80011e4 <communicationHandler+0x2d8>
        	}
        	else
        	{
        		reliable_send_packet(config.messages[i]);
 80011ca:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80011ce:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fe1f 	bl	8000e22 <reliable_send_packet>
        for(int i = 0; i < config.messages_count; i++)
 80011e4:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 80011e8:	3301      	adds	r3, #1
 80011ea:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 80011ee:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80011f2:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f8d7 2328 	ldr.w	r2, [r7, #808]	; 0x328
 80011fc:	429a      	cmp	r2, r3
 80011fe:	dbb5      	blt.n	800116c <communicationHandler+0x260>
        	}
        }
        if(config.mode==RECEIVING_STREAM)
 8001200:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001204:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d117      	bne.n	800123e <communicationHandler+0x332>
        {
          communication_state = RECEIVING_STREAM;
 800120e:	2301      	movs	r3, #1
 8001210:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
          max_packet_count = config.streamable_packets;
 8001214:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001218:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f8c7 3320 	str.w	r3, [r7, #800]	; 0x320
          sprintf(general_buffer, "! %d", max_packet_count);
 8001222:	f8d7 2320 	ldr.w	r2, [r7, #800]	; 0x320
 8001226:	f107 0320 	add.w	r3, r7, #32
 800122a:	4936      	ldr	r1, [pc, #216]	; (8001304 <communicationHandler+0x3f8>)
 800122c:	4618      	mov	r0, r3
 800122e:	f016 fa4d 	bl	80176cc <siprintf>
          LoRA_sendPacket(general_buffer);
 8001232:	f107 0320 	add.w	r3, r7, #32
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fd3c 	bl	8000cb4 <LoRA_sendPacket>
 800123c:	e6b7      	b.n	8000fae <communicationHandler+0xa2>
        }
        else if(config.mode==RECEIVING_RELIABLE)
 800123e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8001242:	f5a3 734a 	sub.w	r3, r3, #808	; 0x328
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d106      	bne.n	800125a <communicationHandler+0x34e>
        {
          communication_state = TRANSITIONING;
 800124c:	2304      	movs	r3, #4
 800124e:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
          LoRA_sendPacket("$");
 8001252:	482b      	ldr	r0, [pc, #172]	; (8001300 <communicationHandler+0x3f4>)
 8001254:	f7ff fd2e 	bl	8000cb4 <LoRA_sendPacket>
 8001258:	e6a9      	b.n	8000fae <communicationHandler+0xa2>
        }
        else
        {
            HAL_Delay(100);
 800125a:	2064      	movs	r0, #100	; 0x64
 800125c:	f002 fd64 	bl	8003d28 <HAL_Delay>
        	CDC_Transmit_HS("Shouldn't try to transition to this mode.\n", strlen("Shouldn't try to transition to this mode.\n"));
 8001260:	212a      	movs	r1, #42	; 0x2a
 8001262:	482b      	ldr	r0, [pc, #172]	; (8001310 <communicationHandler+0x404>)
 8001264:	f015 fdde 	bl	8016e24 <CDC_Transmit_HS>
 8001268:	e6a1      	b.n	8000fae <communicationHandler+0xa2>
        }
      }
      else if(communication_state == TRANSITIONING)
 800126a:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800126e:	2b04      	cmp	r3, #4
 8001270:	f47f ae9d 	bne.w	8000fae <communicationHandler+0xa2>
      {

          if(recv_packet(received_packet, MAX_PKT_LENGTH))
 8001274:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001278:	21ff      	movs	r1, #255	; 0xff
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fda2 	bl	8000dc4 <recv_packet>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d01e      	beq.n	80012c4 <communicationHandler+0x3b8>
          {
            previousTime = HAL_GetTick();
 8001286:	f002 fd43 	bl	8003d10 <HAL_GetTick>
 800128a:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
            if(strcmp(received_packet, "*")==0)
 800128e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001292:	491d      	ldr	r1, [pc, #116]	; (8001308 <communicationHandler+0x3fc>)
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f83b 	bl	8000310 <strcmp>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	f47f ae86 	bne.w	8000fae <communicationHandler+0xa2>
            {
              strcpy(previous_packet, received_packet);
 80012a2:	f507 7290 	add.w	r2, r7, #288	; 0x120
 80012a6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f016 fa8f 	bl	80177d0 <strcpy>
              communication_state = RECEIVING_RELIABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
              LoRA_sendPacket(received_packet);
 80012b8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fcf9 	bl	8000cb4 <LoRA_sendPacket>
 80012c2:	e674      	b.n	8000fae <communicationHandler+0xa2>
            }
          }
          else if (HAL_GetTick()-previousTime > wait_time)
 80012c4:	f002 fd24 	bl	8003d10 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 80012d4:	429a      	cmp	r2, r3
 80012d6:	f4bf ae6a 	bcs.w	8000fae <communicationHandler+0xa2>
          {
            wait_time = rand_range(3, 13)*100;
 80012da:	210d      	movs	r1, #13
 80012dc:	2003      	movs	r0, #3
 80012de:	f001 fc0b 	bl	8002af8 <rand_range>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2264      	movs	r2, #100	; 0x64
 80012e6:	fb02 f303 	mul.w	r3, r2, r3
 80012ea:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
            previousTime = HAL_GetTick();
 80012ee:	f002 fd0f 	bl	8003d10 <HAL_GetTick>
 80012f2:	f8c7 0330 	str.w	r0, [r7, #816]	; 0x330
            LoRA_sendPacket("$");
 80012f6:	4802      	ldr	r0, [pc, #8]	; (8001300 <communicationHandler+0x3f4>)
 80012f8:	f7ff fcdc 	bl	8000cb4 <LoRA_sendPacket>
      if(communication_state == RECEIVING_RELIABLE)
 80012fc:	e657      	b.n	8000fae <communicationHandler+0xa2>
 80012fe:	bf00      	nop
 8001300:	080189c8 	.word	0x080189c8
 8001304:	080189cc 	.word	0x080189cc
 8001308:	080189d4 	.word	0x080189d4
 800130c:	080189d8 	.word	0x080189d8
 8001310:	08018a08 	.word	0x08018a08

08001314 <usbReceiveHandle>:

//to do: move usb
#define usbBufferLen 256
uint8_t usbDataBuffer[usbBufferLen];
uint32_t usbBytesReady = 0;
int usbReceiveHandle(char* output){
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
	uint32_t temp = usbBytesReady;
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <usbReceiveHandle+0x38>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]

	if(temp > 0){
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00c      	beq.n	8001342 <usbReceiveHandle+0x2e>
		if(temp > 256){
			//crash(2);
		}
		memcpy(output, usbDataBuffer, temp);
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	4909      	ldr	r1, [pc, #36]	; (8001350 <usbReceiveHandle+0x3c>)
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f016 fa57 	bl	80177e0 <memcpy>
		output[temp] = '\0';
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	4413      	add	r3, r2
 8001338:	2200      	movs	r2, #0
 800133a:	701a      	strb	r2, [r3, #0]
		usbBytesReady = 0;
 800133c:	4b03      	ldr	r3, [pc, #12]	; (800134c <usbReceiveHandle+0x38>)
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
	}
	return temp;
 8001342:	68fb      	ldr	r3, [r7, #12]
}
 8001344:	4618      	mov	r0, r3
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	24000270 	.word	0x24000270
 8001350:	24000170 	.word	0x24000170

08001354 <groundstationReliableReceiveHandle>:


void groundstationReliableReceiveHandle(char* received_packet) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	CDC_Transmit_HS(received_packet, strlen(received_packet));
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	f7fe ffe1 	bl	8000324 <strlen>
 8001362:	4603      	mov	r3, r0
 8001364:	4619      	mov	r1, r3
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f015 fd5c 	bl	8016e24 <CDC_Transmit_HS>
}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <groundstationStreamReceiveHandle>:

void groundstationStreamReceiveHandle(char* received_packet) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	CDC_Transmit_HS(received_packet, strlen(received_packet));
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7fe ffd1 	bl	8000324 <strlen>
 8001382:	4603      	mov	r3, r0
 8001384:	4619      	mov	r1, r3
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f015 fd4c 	bl	8016e24 <CDC_Transmit_HS>
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <groundstationStreamSendHandle>:

char* groundstationStreamSendHandle(int remainingPacketCount) {
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	return "Ground station shouldn't be streaming!\n";
 800139c:	4b03      	ldr	r3, [pc, #12]	; (80013ac <groundstationStreamSendHandle+0x18>)
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	08018a34 	.word	0x08018a34

080013b0 <groundstationReliableSendHandle>:

char input[usbBufferLen];
char* groundstation_messages[1];

struct ReliableSendConfig groundstationReliableSendHandle() {
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b0cb      	sub	sp, #300	; 0x12c
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	f507 7394 	add.w	r3, r7, #296	; 0x128
 80013ba:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80013be:	6018      	str	r0, [r3, #0]
	struct ReliableSendConfig config;

    //get input
    while(!usbReceiveHandle(input))
 80013c0:	bf00      	nop
 80013c2:	4825      	ldr	r0, [pc, #148]	; (8001458 <groundstationReliableSendHandle+0xa8>)
 80013c4:	f7ff ffa6 	bl	8001314 <usbReceiveHandle>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f9      	beq.n	80013c2 <groundstationReliableSendHandle+0x12>
    {}

    groundstation_messages[0]=input;
 80013ce:	4b23      	ldr	r3, [pc, #140]	; (800145c <groundstationReliableSendHandle+0xac>)
 80013d0:	4a21      	ldr	r2, [pc, #132]	; (8001458 <groundstationReliableSendHandle+0xa8>)
 80013d2:	601a      	str	r2, [r3, #0]
    config.messages = groundstation_messages;
 80013d4:	4b21      	ldr	r3, [pc, #132]	; (800145c <groundstationReliableSendHandle+0xac>)
 80013d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    config.messages_count = 1;
 80013da:	2301      	movs	r3, #1
 80013dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    config.streamable_packets = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    //reliable_send_packet(input);

    char debug[usbBufferLen+10];
    sprintf(debug, "%s\n", input);
 80013e6:	f107 030c 	add.w	r3, r7, #12
 80013ea:	4a1b      	ldr	r2, [pc, #108]	; (8001458 <groundstationReliableSendHandle+0xa8>)
 80013ec:	491c      	ldr	r1, [pc, #112]	; (8001460 <groundstationReliableSendHandle+0xb0>)
 80013ee:	4618      	mov	r0, r3
 80013f0:	f016 f96c 	bl	80176cc <siprintf>
    CDC_Transmit_HS(debug, strlen(debug));
 80013f4:	f107 030c 	add.w	r3, r7, #12
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7fe ff93 	bl	8000324 <strlen>
 80013fe:	4602      	mov	r2, r0
 8001400:	f107 030c 	add.w	r3, r7, #12
 8001404:	4611      	mov	r1, r2
 8001406:	4618      	mov	r0, r3
 8001408:	f015 fd0c 	bl	8016e24 <CDC_Transmit_HS>

    if(strcmp(input,"FIRE")==0)
 800140c:	4915      	ldr	r1, [pc, #84]	; (8001464 <groundstationReliableSendHandle+0xb4>)
 800140e:	4812      	ldr	r0, [pc, #72]	; (8001458 <groundstationReliableSendHandle+0xa8>)
 8001410:	f7fe ff7e 	bl	8000310 <strcmp>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d106      	bne.n	8001428 <groundstationReliableSendHandle+0x78>
    {
      config.mode = RECEIVING_STREAM;
 800141a:	2301      	movs	r3, #1
 800141c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      config.streamable_packets = 50;
 8001420:	2332      	movs	r3, #50	; 0x32
 8001422:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8001426:	e002      	b.n	800142e <groundstationReliableSendHandle+0x7e>
    }
    else
    {
      config.mode = RECEIVING_RELIABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    }
    return config;
 800142e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001432:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	461c      	mov	r4, r3
 800143a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800143e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001440:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001444:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001448:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8001452:	46bd      	mov	sp, r7
 8001454:	bd90      	pop	{r4, r7, pc}
 8001456:	bf00      	nop
 8001458:	24000274 	.word	0x24000274
 800145c:	24000374 	.word	0x24000374
 8001460:	08018a5c 	.word	0x08018a5c
 8001464:	08018a60 	.word	0x08018a60

08001468 <setServo>:
/* USER CODE BEGIN 0 */

volatile int datasentflag = 0;


void setServo(int servoNum, float angle){
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	ed87 0a00 	vstr	s0, [r7]

	uint16_t timerVal =(int)( 3000 + (4000 * (angle/180)));
 8001474:	ed97 7a00 	vldr	s14, [r7]
 8001478:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80014e8 <setServo+0x80>
 800147c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001480:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80014ec <setServo+0x84>
 8001484:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001488:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80014f0 <setServo+0x88>
 800148c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001490:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001494:	ee17 3a90 	vmov	r3, s15
 8001498:	81fb      	strh	r3, [r7, #14]
	switch (servoNum) {
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3b01      	subs	r3, #1
 800149e:	2b03      	cmp	r3, #3
 80014a0:	d81a      	bhi.n	80014d8 <setServo+0x70>
 80014a2:	a201      	add	r2, pc, #4	; (adr r2, 80014a8 <setServo+0x40>)
 80014a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a8:	080014b9 	.word	0x080014b9
 80014ac:	080014c1 	.word	0x080014c1
 80014b0:	080014c9 	.word	0x080014c9
 80014b4:	080014d1 	.word	0x080014d1
		case 1:
			TIM4->CCR4 = timerVal;
 80014b8:	4a0e      	ldr	r2, [pc, #56]	; (80014f4 <setServo+0x8c>)
 80014ba:	89fb      	ldrh	r3, [r7, #14]
 80014bc:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 80014be:	e00c      	b.n	80014da <setServo+0x72>
		case 2:
			TIM4->CCR3 = timerVal;
 80014c0:	4a0c      	ldr	r2, [pc, #48]	; (80014f4 <setServo+0x8c>)
 80014c2:	89fb      	ldrh	r3, [r7, #14]
 80014c4:	63d3      	str	r3, [r2, #60]	; 0x3c
			break;
 80014c6:	e008      	b.n	80014da <setServo+0x72>
		case 3:
			TIM4->CCR2 = timerVal;
 80014c8:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <setServo+0x8c>)
 80014ca:	89fb      	ldrh	r3, [r7, #14]
 80014cc:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 80014ce:	e004      	b.n	80014da <setServo+0x72>
		case 4:
			TIM4->CCR1 = timerVal;
 80014d0:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <setServo+0x8c>)
 80014d2:	89fb      	ldrh	r3, [r7, #14]
 80014d4:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 80014d6:	e000      	b.n	80014da <setServo+0x72>

		default:
			break;
 80014d8:	bf00      	nop
	}
}
 80014da:	bf00      	nop
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	43340000 	.word	0x43340000
 80014ec:	457a0000 	.word	0x457a0000
 80014f0:	453b8000 	.word	0x453b8000
 80014f4:	40000800 	.word	0x40000800

080014f8 <setLEDs>:

void setLEDs(void) {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b08e      	sub	sp, #56	; 0x38
 80014fc:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 80014fe:	2300      	movs	r3, #0
 8001500:	637b      	str	r3, [r7, #52]	; 0x34
 8001502:	e181      	b.n	8001808 <setLEDs+0x310>
		switch (LEDS_lookup[i][0]) { //checks in which string the LED is
 8001504:	4aa1      	ldr	r2, [pc, #644]	; (800178c <setLEDs+0x294>)
 8001506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001508:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800150c:	2b03      	cmp	r3, #3
 800150e:	f200 8177 	bhi.w	8001800 <setLEDs+0x308>
 8001512:	a201      	add	r2, pc, #4	; (adr r2, 8001518 <setLEDs+0x20>)
 8001514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001518:	08001529 	.word	0x08001529
 800151c:	080015d9 	.word	0x080015d9
 8001520:	08001689 	.word	0x08001689
 8001524:	08001739 	.word	0x08001739
		case 0:
			for (int j = 0; j < 3; j++) {
 8001528:	2300      	movs	r3, #0
 800152a:	633b      	str	r3, [r7, #48]	; 0x30
 800152c:	e042      	b.n	80015b4 <setLEDs+0xbc>
				for (int n = 0; n < 8; n++) {
 800152e:	2300      	movs	r3, #0
 8001530:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001532:	e039      	b.n	80015a8 <setLEDs+0xb0>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8001534:	4996      	ldr	r1, [pc, #600]	; (8001790 <setLEDs+0x298>)
 8001536:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001540:	4413      	add	r3, r2
 8001542:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001546:	2180      	movs	r1, #128	; 0x80
 8001548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800154a:	fa41 f202 	asr.w	r2, r1, r2
 800154e:	4013      	ands	r3, r2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d013      	beq.n	800157c <setLEDs+0x84>
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8001554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001556:	00da      	lsls	r2, r3, #3
 8001558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155a:	18d1      	adds	r1, r2, r3
 800155c:	4a8b      	ldr	r2, [pc, #556]	; (800178c <setLEDs+0x294>)
 800155e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	4413      	add	r3, r2
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	00db      	lsls	r3, r3, #3
 800156e:	440b      	add	r3, r1
 8001570:	3308      	adds	r3, #8
 8001572:	4a88      	ldr	r2, [pc, #544]	; (8001794 <setLEDs+0x29c>)
 8001574:	213c      	movs	r1, #60	; 0x3c
 8001576:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800157a:	e012      	b.n	80015a2 <setLEDs+0xaa>
					} else {
						LED_PWM_Data_0[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 800157c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800157e:	00da      	lsls	r2, r3, #3
 8001580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001582:	18d1      	adds	r1, r2, r3
 8001584:	4a81      	ldr	r2, [pc, #516]	; (800178c <setLEDs+0x294>)
 8001586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	4413      	add	r3, r2
 800158c:	685a      	ldr	r2, [r3, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	440b      	add	r3, r1
 8001598:	3308      	adds	r3, #8
 800159a:	4a7e      	ldr	r2, [pc, #504]	; (8001794 <setLEDs+0x29c>)
 800159c:	211e      	movs	r1, #30
 800159e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 80015a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a4:	3301      	adds	r3, #1
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015aa:	2b07      	cmp	r3, #7
 80015ac:	ddc2      	ble.n	8001534 <setLEDs+0x3c>
			for (int j = 0; j < 3; j++) {
 80015ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b0:	3301      	adds	r3, #1
 80015b2:	633b      	str	r3, [r7, #48]	; 0x30
 80015b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	ddb9      	ble.n	800152e <setLEDs+0x36>
					}
				}
			}
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80015be:	e007      	b.n	80015d0 <setLEDs+0xd8>
				LED_PWM_Data_0[i] = 0;
 80015c0:	4a74      	ldr	r2, [pc, #464]	; (8001794 <setLEDs+0x29c>)
 80015c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015c4:	2100      	movs	r1, #0
 80015c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_0 * 24) + 8; i < (NUM_LEDS_0 * 24) + 58; i++) {
 80015ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015cc:	3301      	adds	r3, #1
 80015ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d2:	2bb1      	cmp	r3, #177	; 0xb1
 80015d4:	ddf4      	ble.n	80015c0 <setLEDs+0xc8>
			}
			break;
 80015d6:	e114      	b.n	8001802 <setLEDs+0x30a>
		case 1:
			for (int j = 0; j < 3; j++) {
 80015d8:	2300      	movs	r3, #0
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
 80015dc:	e042      	b.n	8001664 <setLEDs+0x16c>
				for (int n = 0; n < 8; n++) {
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
 80015e2:	e039      	b.n	8001658 <setLEDs+0x160>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 80015e4:	496a      	ldr	r1, [pc, #424]	; (8001790 <setLEDs+0x298>)
 80015e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f0:	4413      	add	r3, r2
 80015f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80015f6:	2180      	movs	r1, #128	; 0x80
 80015f8:	6a3a      	ldr	r2, [r7, #32]
 80015fa:	fa41 f202 	asr.w	r2, r1, r2
 80015fe:	4013      	ands	r3, r2
 8001600:	2b00      	cmp	r3, #0
 8001602:	d013      	beq.n	800162c <setLEDs+0x134>
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	00da      	lsls	r2, r3, #3
 8001608:	6a3b      	ldr	r3, [r7, #32]
 800160a:	18d1      	adds	r1, r2, r3
 800160c:	4a5f      	ldr	r2, [pc, #380]	; (800178c <setLEDs+0x294>)
 800160e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	4413      	add	r3, r2
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	4613      	mov	r3, r2
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	4413      	add	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	440b      	add	r3, r1
 8001620:	3308      	adds	r3, #8
 8001622:	4a5d      	ldr	r2, [pc, #372]	; (8001798 <setLEDs+0x2a0>)
 8001624:	213c      	movs	r1, #60	; 0x3c
 8001626:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800162a:	e012      	b.n	8001652 <setLEDs+0x15a>
					} else {
						LED_PWM_Data_1[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 800162c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162e:	00da      	lsls	r2, r3, #3
 8001630:	6a3b      	ldr	r3, [r7, #32]
 8001632:	18d1      	adds	r1, r2, r3
 8001634:	4a55      	ldr	r2, [pc, #340]	; (800178c <setLEDs+0x294>)
 8001636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4413      	add	r3, r2
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	440b      	add	r3, r1
 8001648:	3308      	adds	r3, #8
 800164a:	4a53      	ldr	r2, [pc, #332]	; (8001798 <setLEDs+0x2a0>)
 800164c:	211e      	movs	r1, #30
 800164e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8001652:	6a3b      	ldr	r3, [r7, #32]
 8001654:	3301      	adds	r3, #1
 8001656:	623b      	str	r3, [r7, #32]
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	2b07      	cmp	r3, #7
 800165c:	ddc2      	ble.n	80015e4 <setLEDs+0xec>
			for (int j = 0; j < 3; j++) {
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	3301      	adds	r3, #1
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	2b02      	cmp	r3, #2
 8001668:	ddb9      	ble.n	80015de <setLEDs+0xe6>
					}
				}
			}
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 800166a:	2380      	movs	r3, #128	; 0x80
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	e007      	b.n	8001680 <setLEDs+0x188>
				LED_PWM_Data_1[i] = 0;
 8001670:	4a49      	ldr	r2, [pc, #292]	; (8001798 <setLEDs+0x2a0>)
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	2100      	movs	r1, #0
 8001676:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_1 * 24) + 8; i < (NUM_LEDS_1 * 24) + 58; i++) {
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3301      	adds	r3, #1
 800167e:	61fb      	str	r3, [r7, #28]
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	2bb1      	cmp	r3, #177	; 0xb1
 8001684:	ddf4      	ble.n	8001670 <setLEDs+0x178>
			}
			break;
 8001686:	e0bc      	b.n	8001802 <setLEDs+0x30a>
		case 2:
			for (int j = 0; j < 3; j++) {
 8001688:	2300      	movs	r3, #0
 800168a:	61bb      	str	r3, [r7, #24]
 800168c:	e042      	b.n	8001714 <setLEDs+0x21c>
				for (int n = 0; n < 8; n++) {
 800168e:	2300      	movs	r3, #0
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	e039      	b.n	8001708 <setLEDs+0x210>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8001694:	493e      	ldr	r1, [pc, #248]	; (8001790 <setLEDs+0x298>)
 8001696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	69ba      	ldr	r2, [r7, #24]
 80016a0:	4413      	add	r3, r2
 80016a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80016a6:	2180      	movs	r1, #128	; 0x80
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	fa41 f202 	asr.w	r2, r1, r2
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d013      	beq.n	80016dc <setLEDs+0x1e4>
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	00da      	lsls	r2, r3, #3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	18d1      	adds	r1, r2, r3
 80016bc:	4a33      	ldr	r2, [pc, #204]	; (800178c <setLEDs+0x294>)
 80016be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4413      	add	r3, r2
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	440b      	add	r3, r1
 80016d0:	3308      	adds	r3, #8
 80016d2:	4a32      	ldr	r2, [pc, #200]	; (800179c <setLEDs+0x2a4>)
 80016d4:	213c      	movs	r1, #60	; 0x3c
 80016d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80016da:	e012      	b.n	8001702 <setLEDs+0x20a>
					} else {
						LED_PWM_Data_2[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	00da      	lsls	r2, r3, #3
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	18d1      	adds	r1, r2, r3
 80016e4:	4a29      	ldr	r2, [pc, #164]	; (800178c <setLEDs+0x294>)
 80016e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4413      	add	r3, r2
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	4413      	add	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	440b      	add	r3, r1
 80016f8:	3308      	adds	r3, #8
 80016fa:	4a28      	ldr	r2, [pc, #160]	; (800179c <setLEDs+0x2a4>)
 80016fc:	211e      	movs	r1, #30
 80016fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	3301      	adds	r3, #1
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	2b07      	cmp	r3, #7
 800170c:	ddc2      	ble.n	8001694 <setLEDs+0x19c>
			for (int j = 0; j < 3; j++) {
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	3301      	adds	r3, #1
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	2b02      	cmp	r3, #2
 8001718:	ddb9      	ble.n	800168e <setLEDs+0x196>
					}
				}
			}
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 800171a:	2338      	movs	r3, #56	; 0x38
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	e007      	b.n	8001730 <setLEDs+0x238>
				LED_PWM_Data_2[i] = 0;
 8001720:	4a1e      	ldr	r2, [pc, #120]	; (800179c <setLEDs+0x2a4>)
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	2100      	movs	r1, #0
 8001726:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_2 * 24) + 8; i < (NUM_LEDS_2 * 24) + 58; i++) {
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	3301      	adds	r3, #1
 800172e:	613b      	str	r3, [r7, #16]
 8001730:	693b      	ldr	r3, [r7, #16]
 8001732:	2b69      	cmp	r3, #105	; 0x69
 8001734:	ddf4      	ble.n	8001720 <setLEDs+0x228>
			}
			break;
 8001736:	e064      	b.n	8001802 <setLEDs+0x30a>
		case 3:
			for (int j = 0; j < 3; j++) {
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	e04e      	b.n	80017dc <setLEDs+0x2e4>
				for (int n = 0; n < 8; n++) {
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	e045      	b.n	80017d0 <setLEDs+0x2d8>
					if (LED_Color_Data[i][j] & (128 >> n)) {
 8001744:	4912      	ldr	r1, [pc, #72]	; (8001790 <setLEDs+0x298>)
 8001746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001748:	4613      	mov	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	4413      	add	r3, r2
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	4413      	add	r3, r2
 8001752:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001756:	2180      	movs	r1, #128	; 0x80
 8001758:	68ba      	ldr	r2, [r7, #8]
 800175a:	fa41 f202 	asr.w	r2, r1, r2
 800175e:	4013      	ands	r3, r2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d01f      	beq.n	80017a4 <setLEDs+0x2ac>
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 60;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	00da      	lsls	r2, r3, #3
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	18d1      	adds	r1, r2, r3
 800176c:	4a07      	ldr	r2, [pc, #28]	; (800178c <setLEDs+0x294>)
 800176e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	4413      	add	r3, r2
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	4413      	add	r3, r2
 800177c:	00db      	lsls	r3, r3, #3
 800177e:	440b      	add	r3, r1
 8001780:	3308      	adds	r3, #8
 8001782:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <setLEDs+0x2a8>)
 8001784:	213c      	movs	r1, #60	; 0x3c
 8001786:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800178a:	e01e      	b.n	80017ca <setLEDs+0x2d2>
 800178c:	08018b90 	.word	0x08018b90
 8001790:	24000c58 	.word	0x24000c58
 8001794:	24000378 	.word	0x24000378
 8001798:	24000640 	.word	0x24000640
 800179c:	24000908 	.word	0x24000908
 80017a0:	24000ab0 	.word	0x24000ab0
					} else {
						LED_PWM_Data_3[n + (8 * j) + (24 * LEDS_lookup[i][1]) + 8] = 30;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	00da      	lsls	r2, r3, #3
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	18d1      	adds	r1, r2, r3
 80017ac:	4a26      	ldr	r2, [pc, #152]	; (8001848 <setLEDs+0x350>)
 80017ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b0:	00db      	lsls	r3, r3, #3
 80017b2:	4413      	add	r3, r2
 80017b4:	685a      	ldr	r2, [r3, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	00db      	lsls	r3, r3, #3
 80017be:	440b      	add	r3, r1
 80017c0:	3308      	adds	r3, #8
 80017c2:	4a22      	ldr	r2, [pc, #136]	; (800184c <setLEDs+0x354>)
 80017c4:	211e      	movs	r1, #30
 80017c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				for (int n = 0; n < 8; n++) {
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	3301      	adds	r3, #1
 80017ce:	60bb      	str	r3, [r7, #8]
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2b07      	cmp	r3, #7
 80017d4:	ddb6      	ble.n	8001744 <setLEDs+0x24c>
			for (int j = 0; j < 3; j++) {
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3301      	adds	r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b02      	cmp	r3, #2
 80017e0:	ddad      	ble.n	800173e <setLEDs+0x246>
					}
				}
			}
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 80017e2:	2338      	movs	r3, #56	; 0x38
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	e007      	b.n	80017f8 <setLEDs+0x300>
				LED_PWM_Data_3[i] = 0;
 80017e8:	4a18      	ldr	r2, [pc, #96]	; (800184c <setLEDs+0x354>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2100      	movs	r1, #0
 80017ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for (int i = (NUM_LEDS_3 * 24) + 8; i < (NUM_LEDS_3 * 24) + 58; i++) {
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	3301      	adds	r3, #1
 80017f6:	607b      	str	r3, [r7, #4]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2b69      	cmp	r3, #105	; 0x69
 80017fc:	ddf4      	ble.n	80017e8 <setLEDs+0x2f0>
			}
			break;
 80017fe:	e000      	b.n	8001802 <setLEDs+0x30a>
		default:
			break;
 8001800:	bf00      	nop
	for (int i = 0; i < NUM_LEDS_0 + NUM_LEDS_1 + NUM_LEDS_2 + NUM_LEDS_3; i++) {
 8001802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001804:	3301      	adds	r3, #1
 8001806:	637b      	str	r3, [r7, #52]	; 0x34
 8001808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800180a:	2b0d      	cmp	r3, #13
 800180c:	f77f ae7a 	ble.w	8001504 <setLEDs+0xc>
		}
	}

	HAL_TIM_PWM_Start_DMA(&htim5, TIM_CHANNEL_4, LED_PWM_Data_0, (NUM_LEDS_0 * 24) + 58); //DMA for LEDS 0
 8001810:	23b2      	movs	r3, #178	; 0xb2
 8001812:	4a0f      	ldr	r2, [pc, #60]	; (8001850 <setLEDs+0x358>)
 8001814:	210c      	movs	r1, #12
 8001816:	480f      	ldr	r0, [pc, #60]	; (8001854 <setLEDs+0x35c>)
 8001818:	f00e fac2 	bl	800fda0 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_3, LED_PWM_Data_1, (NUM_LEDS_1 * 24) + 58); //DMA for LEDS 1
 800181c:	23b2      	movs	r3, #178	; 0xb2
 800181e:	4a0e      	ldr	r2, [pc, #56]	; (8001858 <setLEDs+0x360>)
 8001820:	2108      	movs	r1, #8
 8001822:	480e      	ldr	r0, [pc, #56]	; (800185c <setLEDs+0x364>)
 8001824:	f00e fabc 	bl	800fda0 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_2, LED_PWM_Data_2, (NUM_LEDS_2 * 24) + 58); //DMA for LEDS 2
 8001828:	236a      	movs	r3, #106	; 0x6a
 800182a:	4a0d      	ldr	r2, [pc, #52]	; (8001860 <setLEDs+0x368>)
 800182c:	2104      	movs	r1, #4
 800182e:	480d      	ldr	r0, [pc, #52]	; (8001864 <setLEDs+0x36c>)
 8001830:	f00e fab6 	bl	800fda0 <HAL_TIM_PWM_Start_DMA>
	HAL_TIM_PWM_Start_DMA(&htim3, TIM_CHANNEL_1, LED_PWM_Data_3, (NUM_LEDS_3 * 24) + 58); //DMA for LEDS 3
 8001834:	236a      	movs	r3, #106	; 0x6a
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <setLEDs+0x354>)
 8001838:	2100      	movs	r1, #0
 800183a:	480a      	ldr	r0, [pc, #40]	; (8001864 <setLEDs+0x36c>)
 800183c:	f00e fab0 	bl	800fda0 <HAL_TIM_PWM_Start_DMA>

}
 8001840:	bf00      	nop
 8001842:	3738      	adds	r7, #56	; 0x38
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	08018b90 	.word	0x08018b90
 800184c:	24000ab0 	.word	0x24000ab0
 8001850:	24000378 	.word	0x24000378
 8001854:	240012bc 	.word	0x240012bc
 8001858:	24000640 	.word	0x24000640
 800185c:	240011d8 	.word	0x240011d8
 8001860:	24000908 	.word	0x24000908
 8001864:	24001224 	.word	0x24001224

08001868 <disarm>:
	int status = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
	return status;
}

int disarm(char* state)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(ARM1_GPIO_Port, ARM1_Pin, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	2102      	movs	r1, #2
 8001874:	4827      	ldr	r0, [pc, #156]	; (8001914 <disarm+0xac>)
 8001876:	f006 fd09 	bl	800828c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ARM2_GPIO_Port, ARM2_Pin, 0);
 800187a:	2200      	movs	r2, #0
 800187c:	2104      	movs	r1, #4
 800187e:	4825      	ldr	r0, [pc, #148]	; (8001914 <disarm+0xac>)
 8001880:	f006 fd04 	bl	800828c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO1_GPIO_Port, PYRO1_Pin, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	2102      	movs	r1, #2
 8001888:	4823      	ldr	r0, [pc, #140]	; (8001918 <disarm+0xb0>)
 800188a:	f006 fcff 	bl	800828c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO2_GPIO_Port, PYRO2_Pin, 0);
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001894:	4821      	ldr	r0, [pc, #132]	; (800191c <disarm+0xb4>)
 8001896:	f006 fcf9 	bl	800828c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO3_GPIO_Port, PYRO3_Pin, 0);
 800189a:	2200      	movs	r2, #0
 800189c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018a0:	481e      	ldr	r0, [pc, #120]	; (800191c <disarm+0xb4>)
 80018a2:	f006 fcf3 	bl	800828c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO4_GPIO_Port, PYRO4_Pin, 0);
 80018a6:	2200      	movs	r2, #0
 80018a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018ac:	481b      	ldr	r0, [pc, #108]	; (800191c <disarm+0xb4>)
 80018ae:	f006 fced 	bl	800828c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(PYRO5_GPIO_Port, PYRO5_Pin, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2102      	movs	r1, #2
 80018b6:	481a      	ldr	r0, [pc, #104]	; (8001920 <disarm+0xb8>)
 80018b8:	f006 fce8 	bl	800828c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO6_GPIO_Port, PYRO6_Pin, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018c2:	4818      	ldr	r0, [pc, #96]	; (8001924 <disarm+0xbc>)
 80018c4:	f006 fce2 	bl	800828c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO7_GPIO_Port, PYRO7_Pin, 0);
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ce:	4815      	ldr	r0, [pc, #84]	; (8001924 <disarm+0xbc>)
 80018d0:	f006 fcdc 	bl	800828c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PYRO8_GPIO_Port, PYRO8_Pin, 0);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018da:	4812      	ldr	r0, [pc, #72]	; (8001924 <disarm+0xbc>)
 80018dc:	f006 fcd6 	bl	800828c <HAL_GPIO_WritePin>

  LED_Color_Data[7][0] = 255;
 80018e0:	4b11      	ldr	r3, [pc, #68]	; (8001928 <disarm+0xc0>)
 80018e2:	22ff      	movs	r2, #255	; 0xff
 80018e4:	655a      	str	r2, [r3, #84]	; 0x54
  LED_Color_Data[7][1] = 0;
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <disarm+0xc0>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	659a      	str	r2, [r3, #88]	; 0x58
  LED_Color_Data[7][2] = 0;
 80018ec:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <disarm+0xc0>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	65da      	str	r2, [r3, #92]	; 0x5c
  setLEDs();
 80018f2:	f7ff fe01 	bl	80014f8 <setLEDs>

  strcpy(state,"DISARMED");
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	490c      	ldr	r1, [pc, #48]	; (800192c <disarm+0xc4>)
 80018fa:	461a      	mov	r2, r3
 80018fc:	460b      	mov	r3, r1
 80018fe:	cb03      	ldmia	r3!, {r0, r1}
 8001900:	6010      	str	r0, [r2, #0]
 8001902:	6051      	str	r1, [r2, #4]
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	7213      	strb	r3, [r2, #8]
  return 0;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	58020000 	.word	0x58020000
 8001918:	58020400 	.word	0x58020400
 800191c:	58021400 	.word	0x58021400
 8001920:	58021800 	.word	0x58021800
 8001924:	58021000 	.word	0x58021000
 8001928:	24000c58 	.word	0x24000c58
 800192c:	08018a68 	.word	0x08018a68

08001930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8001936:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8001938:	4b99      	ldr	r3, [pc, #612]	; (8001ba0 <main+0x270>)
 800193a:	f507 7459 	add.w	r4, r7, #868	; 0x364
 800193e:	461d      	mov	r5, r3
 8001940:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001942:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001944:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001948:	c403      	stmia	r4!, {r0, r1}
 800194a:	7022      	strb	r2, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800194c:	f002 f95a 	bl	8003c04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001950:	f000 f944 	bl	8001bdc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001954:	f000 f9ba 	bl	8001ccc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001958:	f000 ff42 	bl	80027e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800195c:	f000 fee0 	bl	8002720 <MX_DMA_Init>
  MX_SPI3_Init();
 8001960:	f000 fc3a 	bl	80021d8 <MX_SPI3_Init>
  MX_FDCAN3_Init();
 8001964:	f000 faca 	bl	8001efc <MX_FDCAN3_Init>
  MX_USART6_UART_Init();
 8001968:	f000 fe8e 	bl	8002688 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800196c:	f000 f9e0 	bl	8001d30 <MX_ADC1_Init>
  MX_TIM4_Init();
 8001970:	f000 fd44 	bl	80023fc <MX_TIM4_Init>
  MX_ADC3_Init();
 8001974:	f000 fa54 	bl	8001e20 <MX_ADC3_Init>
  MX_SPI2_Init();
 8001978:	f000 fbd8 	bl	800212c <MX_SPI2_Init>
  MX_I2C2_Init();
 800197c:	f000 fb22 	bl	8001fc4 <MX_I2C2_Init>
  MX_TIM2_Init();
 8001980:	f000 fc80 	bl	8002284 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001984:	f000 fdb6 	bl	80024f4 <MX_TIM5_Init>
  MX_TIM3_Init();
 8001988:	f000 fcd4 	bl	8002334 <MX_TIM3_Init>
  MX_USB_DEVICE_Init();
 800198c:	f015 f974 	bl	8016c78 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8001990:	f000 fb76 	bl	8002080 <MX_SPI1_Init>
  MX_UART4_Init();
 8001994:	f000 fe2c 	bl	80025f0 <MX_UART4_Init>
  MX_FATFS_Init();
 8001998:	f012 fed8 	bl	801474c <MX_FATFS_Init>
  MX_SDMMC2_SD_Init();
 800199c:	f000 fb52 	bl	8002044 <MX_SDMMC2_SD_Init>
  MX_TIM13_Init();
 80019a0:	f000 fe02 	bl	80025a8 <MX_TIM13_Init>
  MX_RNG_Init();
 80019a4:	f001 f88c 	bl	8002ac0 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */

	const int MAX = 50;
 80019a8:	2332      	movs	r3, #50	; 0x32
 80019aa:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
	const double SPEED = 2.0/2000;
 80019ae:	a37a      	add	r3, pc, #488	; (adr r3, 8001b98 <main+0x268>)
 80019b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b4:	e9c7 23e8 	strd	r2, r3, [r7, #928]	; 0x3a0
	const double r_offset = 0;
 80019b8:	f04f 0200 	mov.w	r2, #0
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	e9c7 23e6 	strd	r2, r3, [r7, #920]	; 0x398
	const double g_offset = 1;
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	4b76      	ldr	r3, [pc, #472]	; (8001ba4 <main+0x274>)
 80019ca:	e9c7 23e4 	strd	r2, r3, [r7, #912]	; 0x390
	const double b_offset = 2;
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019d6:	e9c7 23e2 	strd	r2, r3, [r7, #904]	; 0x388

	LG2_Write_Register(0x10, 0b00111100); //Accelerometer setup - CTRL1_XL
 80019da:	213c      	movs	r1, #60	; 0x3c
 80019dc:	2010      	movs	r0, #16
 80019de:	f7fe fed1 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x11, 0b00110000); //Gyroscope setup - CTRL2_G
 80019e2:	2130      	movs	r1, #48	; 0x30
 80019e4:	2011      	movs	r0, #17
 80019e6:	f7fe fecd 	bl	8000784 <LG2_Write_Register>
	LG2_Write_Register(0x13, 0b00000100); //disables I2C - CTRL4_C
 80019ea:	2104      	movs	r1, #4
 80019ec:	2013      	movs	r0, #19
 80019ee:	f7fe fec9 	bl	8000784 <LG2_Write_Register>

	HAL_Delay(3000);
 80019f2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80019f6:	f002 f997 	bl	8003d28 <HAL_Delay>
	HG2_Write_Register(0x1C, 0b10111111);
 80019fa:	21bf      	movs	r1, #191	; 0xbf
 80019fc:	201c      	movs	r0, #28
 80019fe:	f7fe fe6d 	bl	80006dc <HG2_Write_Register>
	HAL_Delay(2);
 8001a02:	2002      	movs	r0, #2
 8001a04:	f002 f990 	bl	8003d28 <HAL_Delay>

	HG2_Write_Register(0x1B, 0b01011000);
 8001a08:	2158      	movs	r1, #88	; 0x58
 8001a0a:	201b      	movs	r0, #27
 8001a0c:	f7fe fe66 	bl	80006dc <HG2_Write_Register>
	HG2_Write_Register(0x1B, 0b11011000);
 8001a10:	21d8      	movs	r1, #216	; 0xd8
 8001a12:	201b      	movs	r0, #27
 8001a14:	f7fe fe62 	bl	80006dc <HG2_Write_Register>

	float rotZ = 0;
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
	uint32_t lastTime = 0;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f8c7 3380 	str.w	r3, [r7, #896]	; 0x380

	float calOmegaX = 0;
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
	float calOmegaY = 0;
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
	float calOmegaZ = 0;
 8001a36:	f04f 0300 	mov.w	r3, #0
 8001a3a:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
	//HAL_Delay(2000);
	for(int i = 0; i < 500; i++){
 8001a3e:	2300      	movs	r3, #0
 8001a40:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8001a44:	e022      	b.n	8001a8c <main+0x15c>
		calOmegaX += LG2_Get_Gyro_X();
 8001a46:	f7fe fec5 	bl	80007d4 <LG2_Get_Gyro_X>
 8001a4a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a4e:	edd7 7aef 	vldr	s15, [r7, #956]	; 0x3bc
 8001a52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a56:	edc7 7aef 	vstr	s15, [r7, #956]	; 0x3bc
		calOmegaY += LG2_Get_Gyro_Y();
 8001a5a:	f7fe feeb 	bl	8000834 <LG2_Get_Gyro_Y>
 8001a5e:	eeb0 7a40 	vmov.f32	s14, s0
 8001a62:	edd7 7aee 	vldr	s15, [r7, #952]	; 0x3b8
 8001a66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a6a:	edc7 7aee 	vstr	s15, [r7, #952]	; 0x3b8
		calOmegaZ += LG2_Get_Gyro_Z();
 8001a6e:	f7fe ff13 	bl	8000898 <LG2_Get_Gyro_Z>
 8001a72:	eeb0 7a40 	vmov.f32	s14, s0
 8001a76:	edd7 7aed 	vldr	s15, [r7, #948]	; 0x3b4
 8001a7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001a7e:	edc7 7aed 	vstr	s15, [r7, #948]	; 0x3b4
	for(int i = 0; i < 500; i++){
 8001a82:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8001a86:	3301      	adds	r3, #1
 8001a88:	f8c7 33b0 	str.w	r3, [r7, #944]	; 0x3b0
 8001a8c:	f8d7 33b0 	ldr.w	r3, [r7, #944]	; 0x3b0
 8001a90:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a94:	dbd7      	blt.n	8001a46 <main+0x116>

		//HAL_Delay(20);
	}
	calOmegaX /= 500;
 8001a96:	ed97 7aef 	vldr	s14, [r7, #956]	; 0x3bc
 8001a9a:	eddf 6a43 	vldr	s13, [pc, #268]	; 8001ba8 <main+0x278>
 8001a9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001aa2:	edc7 7aef 	vstr	s15, [r7, #956]	; 0x3bc
	calOmegaY /= 500;
 8001aa6:	ed97 7aee 	vldr	s14, [r7, #952]	; 0x3b8
 8001aaa:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8001ba8 <main+0x278>
 8001aae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab2:	edc7 7aee 	vstr	s15, [r7, #952]	; 0x3b8
	calOmegaZ /= 500;
 8001ab6:	ed97 7aed 	vldr	s14, [r7, #948]	; 0x3b4
 8001aba:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8001ba8 <main+0x278>
 8001abe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ac2:	edc7 7aed 	vstr	s15, [r7, #948]	; 0x3b4

	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2101      	movs	r1, #1
 8001aca:	4838      	ldr	r0, [pc, #224]	; (8001bac <main+0x27c>)
 8001acc:	f006 fbde 	bl	800828c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001ad0:	20c8      	movs	r0, #200	; 0xc8
 8001ad2:	f002 f929 	bl	8003d28 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 0);
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2101      	movs	r1, #1
 8001ada:	4834      	ldr	r0, [pc, #208]	; (8001bac <main+0x27c>)
 8001adc:	f006 fbd6 	bl	800828c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001ae0:	20c8      	movs	r0, #200	; 0xc8
 8001ae2:	f002 f921 	bl	8003d28 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, 1);
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	2101      	movs	r1, #1
 8001aea:	4830      	ldr	r0, [pc, #192]	; (8001bac <main+0x27c>)
 8001aec:	f006 fbce 	bl	800828c <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8001af0:	20c8      	movs	r0, #200	; 0xc8
 8001af2:	f002 f919 	bl	8003d28 <HAL_Delay>


	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_2, 1);
 8001af6:	2201      	movs	r2, #1
 8001af8:	2104      	movs	r1, #4
 8001afa:	482d      	ldr	r0, [pc, #180]	; (8001bb0 <main+0x280>)
 8001afc:	f006 fbc6 	bl	800828c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_3, 1);
 8001b00:	2201      	movs	r2, #1
 8001b02:	2108      	movs	r1, #8
 8001b04:	482a      	ldr	r0, [pc, #168]	; (8001bb0 <main+0x280>)
 8001b06:	f006 fbc1 	bl	800828c <HAL_GPIO_WritePin>


    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	4829      	ldr	r0, [pc, #164]	; (8001bb4 <main+0x284>)
 8001b0e:	f00e f82b 	bl	800fb68 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001b12:	2104      	movs	r1, #4
 8001b14:	4827      	ldr	r0, [pc, #156]	; (8001bb4 <main+0x284>)
 8001b16:	f00e f827 	bl	800fb68 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001b1a:	2108      	movs	r1, #8
 8001b1c:	4825      	ldr	r0, [pc, #148]	; (8001bb4 <main+0x284>)
 8001b1e:	f00e f823 	bl	800fb68 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001b22:	210c      	movs	r1, #12
 8001b24:	4823      	ldr	r0, [pc, #140]	; (8001bb4 <main+0x284>)
 8001b26:	f00e f81f 	bl	800fb68 <HAL_TIM_PWM_Start>

    setServo(1, 90);
 8001b2a:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001bb8 <main+0x288>
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f7ff fc9a 	bl	8001468 <setServo>
    setServo(2, 180);
 8001b34:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8001bbc <main+0x28c>
 8001b38:	2002      	movs	r0, #2
 8001b3a:	f7ff fc95 	bl	8001468 <setServo>
    setServo(3, 0);
 8001b3e:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8001bc0 <main+0x290>
 8001b42:	2003      	movs	r0, #3
 8001b44:	f7ff fc90 	bl	8001468 <setServo>
    setServo(4, 45);
 8001b48:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8001bc4 <main+0x294>
 8001b4c:	2004      	movs	r0, #4
 8001b4e:	f7ff fc8b 	bl	8001468 <setServo>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	//HAL_ADC_Start_DMA(&hadc3, &read_Data, 1);

  char state[256] = "";
 8001b52:	f507 7370 	add.w	r3, r7, #960	; 0x3c0
 8001b56:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	3304      	adds	r3, #4
 8001b60:	22fc      	movs	r2, #252	; 0xfc
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f015 fdff 	bl	8017768 <memset>
  disarm(state);
 8001b6a:	463b      	mov	r3, r7
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fe7b 	bl	8001868 <disarm>
  LoRA_begin(868000000);
 8001b72:	4815      	ldr	r0, [pc, #84]	; (8001bc8 <main+0x298>)
 8001b74:	f7fe ffe2 	bl	8000b3c <LoRA_begin>
  communicationHandler(
 8001b78:	2302      	movs	r3, #2
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <main+0x29c>)
 8001b7e:	4a14      	ldr	r2, [pc, #80]	; (8001bd0 <main+0x2a0>)
 8001b80:	4914      	ldr	r1, [pc, #80]	; (8001bd4 <main+0x2a4>)
 8001b82:	4815      	ldr	r0, [pc, #84]	; (8001bd8 <main+0x2a8>)
 8001b84:	f7ff f9c2 	bl	8000f0c <communicationHandler>
 8001b88:	2300      	movs	r3, #0
  );
  /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f507 7770 	add.w	r7, r7, #960	; 0x3c0
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bdb0      	pop	{r4, r5, r7, pc}
 8001b94:	f3af 8000 	nop.w
 8001b98:	d2f1a9fc 	.word	0xd2f1a9fc
 8001b9c:	3f50624d 	.word	0x3f50624d
 8001ba0:	08018ab4 	.word	0x08018ab4
 8001ba4:	3ff00000 	.word	0x3ff00000
 8001ba8:	43fa0000 	.word	0x43fa0000
 8001bac:	58020c00 	.word	0x58020c00
 8001bb0:	58021800 	.word	0x58021800
 8001bb4:	24001270 	.word	0x24001270
 8001bb8:	42b40000 	.word	0x42b40000
 8001bbc:	43340000 	.word	0x43340000
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	42340000 	.word	0x42340000
 8001bc8:	33bca100 	.word	0x33bca100
 8001bcc:	080013b1 	.word	0x080013b1
 8001bd0:	08001395 	.word	0x08001395
 8001bd4:	08001375 	.word	0x08001375
 8001bd8:	08001355 	.word	0x08001355

08001bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b09c      	sub	sp, #112	; 0x70
 8001be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be6:	224c      	movs	r2, #76	; 0x4c
 8001be8:	2100      	movs	r1, #0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f015 fdbc 	bl	8017768 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f015 fdb6 	bl	8017768 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001bfc:	2002      	movs	r0, #2
 8001bfe:	f007 ff59 	bl	8009ab4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c02:	2300      	movs	r3, #0
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	4b30      	ldr	r3, [pc, #192]	; (8001cc8 <SystemClock_Config+0xec>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c0e:	4a2e      	ldr	r2, [pc, #184]	; (8001cc8 <SystemClock_Config+0xec>)
 8001c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c14:	6193      	str	r3, [r2, #24]
 8001c16:	4b2c      	ldr	r3, [pc, #176]	; (8001cc8 <SystemClock_Config+0xec>)
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001c22:	bf00      	nop
 8001c24:	4b28      	ldr	r3, [pc, #160]	; (8001cc8 <SystemClock_Config+0xec>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c30:	d1f8      	bne.n	8001c24 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001c32:	2322      	movs	r3, #34	; 0x22
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001c36:	2301      	movs	r3, #1
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8001c3a:	2340      	movs	r3, #64	; 0x40
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c42:	2302      	movs	r3, #2
 8001c44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c46:	2300      	movs	r3, #0
 8001c48:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001c4e:	230c      	movs	r3, #12
 8001c50:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8001c52:	2301      	movs	r3, #1
 8001c54:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 12;
 8001c56:	230c      	movs	r3, #12
 8001c58:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c5a:	2302      	movs	r3, #2
 8001c5c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001c5e:	230c      	movs	r3, #12
 8001c60:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f007 ff6a 	bl	8009b48 <HAL_RCC_OscConfig>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001c7a:	f000 ff1b 	bl	8002ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c7e:	233f      	movs	r3, #63	; 0x3f
 8001c80:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c82:	2303      	movs	r3, #3
 8001c84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001c8a:	2308      	movs	r3, #8
 8001c8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001c8e:	2340      	movs	r3, #64	; 0x40
 8001c90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001c92:	2340      	movs	r3, #64	; 0x40
 8001c94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001c96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c9a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001c9c:	2340      	movs	r3, #64	; 0x40
 8001c9e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f008 fb29 	bl	800a2fc <HAL_RCC_ClockConfig>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8001cb0:	f000 ff00 	bl	8002ab4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8001cb4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001cb8:	2100      	movs	r1, #0
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f008 fcd4 	bl	800a668 <HAL_RCC_MCOConfig>
}
 8001cc0:	bf00      	nop
 8001cc2:	3770      	adds	r7, #112	; 0x70
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	58024800 	.word	0x58024800

08001ccc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b0ae      	sub	sp, #184	; 0xb8
 8001cd0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cd2:	463b      	mov	r3, r7
 8001cd4:	22b8      	movs	r2, #184	; 0xb8
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f015 fd45 	bl	8017768 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI3
 8001cde:	f44f 2201 	mov.w	r2, #528384	; 0x81000
 8001ce2:	f04f 0300 	mov.w	r3, #0
 8001ce6:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI2|RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001cea:	2304      	movs	r3, #4
 8001cec:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8001cee:	230c      	movs	r3, #12
 8001cf0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001cfe:	23c0      	movs	r3, #192	; 0xc0
 8001d00:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001d10:	2300      	movs	r3, #0
 8001d12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d16:	463b      	mov	r3, r7
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f008 fee5 	bl	800aae8 <HAL_RCCEx_PeriphCLKConfig>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <PeriphCommonClock_Config+0x5c>
  {
    Error_Handler();
 8001d24:	f000 fec6 	bl	8002ab4 <Error_Handler>
  }
}
 8001d28:	bf00      	nop
 8001d2a:	37b8      	adds	r7, #184	; 0xb8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08c      	sub	sp, #48	; 0x30
 8001d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001d36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
 8001d3e:	605a      	str	r2, [r3, #4]
 8001d40:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001d42:	463b      	mov	r3, r7
 8001d44:	2224      	movs	r2, #36	; 0x24
 8001d46:	2100      	movs	r1, #0
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f015 fd0d 	bl	8017768 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d4e:	4b31      	ldr	r3, [pc, #196]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d50:	4a31      	ldr	r2, [pc, #196]	; (8001e18 <MX_ADC1_Init+0xe8>)
 8001d52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001d54:	4b2f      	ldr	r3, [pc, #188]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d56:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001d5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8001d5c:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d62:	4b2c      	ldr	r3, [pc, #176]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001d68:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001d6e:	4b29      	ldr	r3, [pc, #164]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d74:	4b27      	ldr	r3, [pc, #156]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d80:	4b24      	ldr	r3, [pc, #144]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d88:	4b22      	ldr	r3, [pc, #136]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001d8e:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001d94:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001da0:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 8001da6:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001dae:	4819      	ldr	r0, [pc, #100]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001db0:	f002 fa3a 	bl	8004228 <HAL_ADC_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001dba:	f000 fe7b 	bl	8002ab4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001dc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	4812      	ldr	r0, [pc, #72]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001dca:	f003 fa75 	bl	80052b8 <HAL_ADCEx_MultiModeConfigChannel>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001dd4:	f000 fe6e 	bl	8002ab4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001dd8:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <MX_ADC1_Init+0xec>)
 8001dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ddc:	2306      	movs	r3, #6
 8001dde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_16CYCLES_5;
 8001de0:	2303      	movs	r3, #3
 8001de2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001de4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001de8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001dea:	2304      	movs	r3, #4
 8001dec:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001df8:	463b      	mov	r3, r7
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	; (8001e14 <MX_ADC1_Init+0xe4>)
 8001dfe:	f002 fc1b 	bl	8004638 <HAL_ADC_ConfigChannel>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8001e08:	f000 fe54 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001e0c:	bf00      	nop
 8001e0e:	3730      	adds	r7, #48	; 0x30
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	24000d00 	.word	0x24000d00
 8001e18:	40022000 	.word	0x40022000
 8001e1c:	2a000400 	.word	0x2a000400

08001e20 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	2224      	movs	r2, #36	; 0x24
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f015 fc9b 	bl	8017768 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001e32:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e34:	4a2f      	ldr	r2, [pc, #188]	; (8001ef4 <MX_ADC3_Init+0xd4>)
 8001e36:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001e38:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e3a:	f44f 1230 	mov.w	r2, #2883584	; 0x2c0000
 8001e3e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001e40:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e42:	2208      	movs	r2, #8
 8001e44:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC3_DATAALIGN_RIGHT;
 8001e46:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001e4c:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e52:	4b27      	ldr	r3, [pc, #156]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e54:	2204      	movs	r2, #4
 8001e56:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001e5e:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 8001e64:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e66:	2201      	movs	r2, #1
 8001e68:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001e6a:	4b21      	ldr	r3, [pc, #132]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e72:	4b1f      	ldr	r3, [pc, #124]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e78:	4b1d      	ldr	r3, [pc, #116]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001e7e:	4b1c      	ldr	r3, [pc, #112]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.SamplingMode = ADC_SAMPLING_MODE_NORMAL;
 8001e86:	4b1a      	ldr	r3, [pc, #104]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8001e8c:	4b18      	ldr	r3, [pc, #96]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001e92:	4b17      	ldr	r3, [pc, #92]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001e98:	4b15      	ldr	r3, [pc, #84]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40
  hadc3.Init.OversamplingMode = DISABLE;
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001ea6:	4812      	ldr	r0, [pc, #72]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001ea8:	f002 f9be 	bl	8004228 <HAL_ADC_Init>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8001eb2:	f000 fdff 	bl	8002ab4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <MX_ADC3_Init+0xd8>)
 8001eb8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001eba:	2306      	movs	r3, #6
 8001ebc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC3_SAMPLETIME_2CYCLES_5;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001ec2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001ec6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ec8:	2304      	movs	r3, #4
 8001eca:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSign = ADC3_OFFSET_SIGN_NEGATIVE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	623b      	str	r3, [r7, #32]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ed4:	1d3b      	adds	r3, r7, #4
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4805      	ldr	r0, [pc, #20]	; (8001ef0 <MX_ADC3_Init+0xd0>)
 8001eda:	f002 fbad 	bl	8004638 <HAL_ADC_ConfigChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8001ee4:	f000 fde6 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001ee8:	bf00      	nop
 8001eea:	3728      	adds	r7, #40	; 0x28
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	24000d70 	.word	0x24000d70
 8001ef4:	58026000 	.word	0x58026000
 8001ef8:	04300002 	.word	0x04300002

08001efc <MX_FDCAN3_Init>:
  * @brief FDCAN3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN3_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN3_Init 0 */

  /* USER CODE BEGIN FDCAN3_Init 1 */

  /* USER CODE END FDCAN3_Init 1 */
  hfdcan3.Instance = FDCAN3;
 8001f00:	4b2e      	ldr	r3, [pc, #184]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f02:	4a2f      	ldr	r2, [pc, #188]	; (8001fc0 <MX_FDCAN3_Init+0xc4>)
 8001f04:	601a      	str	r2, [r3, #0]
  hfdcan3.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001f06:	4b2d      	ldr	r3, [pc, #180]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  hfdcan3.Init.Mode = FDCAN_MODE_NORMAL;
 8001f0c:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  hfdcan3.Init.AutoRetransmission = DISABLE;
 8001f12:	4b2a      	ldr	r3, [pc, #168]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	741a      	strb	r2, [r3, #16]
  hfdcan3.Init.TransmitPause = DISABLE;
 8001f18:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	745a      	strb	r2, [r3, #17]
  hfdcan3.Init.ProtocolException = DISABLE;
 8001f1e:	4b27      	ldr	r3, [pc, #156]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	749a      	strb	r2, [r3, #18]
  hfdcan3.Init.NominalPrescaler = 16;
 8001f24:	4b25      	ldr	r3, [pc, #148]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f26:	2210      	movs	r2, #16
 8001f28:	615a      	str	r2, [r3, #20]
  hfdcan3.Init.NominalSyncJumpWidth = 1;
 8001f2a:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	619a      	str	r2, [r3, #24]
  hfdcan3.Init.NominalTimeSeg1 = 2;
 8001f30:	4b22      	ldr	r3, [pc, #136]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f32:	2202      	movs	r2, #2
 8001f34:	61da      	str	r2, [r3, #28]
  hfdcan3.Init.NominalTimeSeg2 = 2;
 8001f36:	4b21      	ldr	r3, [pc, #132]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f38:	2202      	movs	r2, #2
 8001f3a:	621a      	str	r2, [r3, #32]
  hfdcan3.Init.DataPrescaler = 1;
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f3e:	2201      	movs	r2, #1
 8001f40:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan3.Init.DataSyncJumpWidth = 1;
 8001f42:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f44:	2201      	movs	r2, #1
 8001f46:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan3.Init.DataTimeSeg1 = 1;
 8001f48:	4b1c      	ldr	r3, [pc, #112]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan3.Init.DataTimeSeg2 = 1;
 8001f4e:	4b1b      	ldr	r3, [pc, #108]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan3.Init.MessageRAMOffset = 0;
 8001f54:	4b19      	ldr	r3, [pc, #100]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan3.Init.StdFiltersNbr = 0;
 8001f5a:	4b18      	ldr	r3, [pc, #96]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan3.Init.ExtFiltersNbr = 0;
 8001f60:	4b16      	ldr	r3, [pc, #88]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan3.Init.RxFifo0ElmtsNbr = 0;
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan3.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f6e:	2204      	movs	r2, #4
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan3.Init.RxFifo1ElmtsNbr = 0;
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan3.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8001f78:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f7a:	2204      	movs	r2, #4
 8001f7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan3.Init.RxBuffersNbr = 0;
 8001f7e:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan3.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8001f84:	4b0d      	ldr	r3, [pc, #52]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f86:	2204      	movs	r2, #4
 8001f88:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan3.Init.TxEventsNbr = 0;
 8001f8a:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan3.Init.TxBuffersNbr = 0;
 8001f90:	4b0a      	ldr	r3, [pc, #40]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan3.Init.TxFifoQueueElmtsNbr = 0;
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan3.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001f9c:	4b07      	ldr	r3, [pc, #28]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan3.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8001fa2:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001fa4:	2204      	movs	r2, #4
 8001fa6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan3) != HAL_OK)
 8001fa8:	4804      	ldr	r0, [pc, #16]	; (8001fbc <MX_FDCAN3_Init+0xc0>)
 8001faa:	f005 fc4b 	bl	8007844 <HAL_FDCAN_Init>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d001      	beq.n	8001fb8 <MX_FDCAN3_Init+0xbc>
  {
    Error_Handler();
 8001fb4:	f000 fd7e 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN3_Init 2 */

  /* USER CODE END FDCAN3_Init 2 */

}
 8001fb8:	bf00      	nop
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	24000ed0 	.word	0x24000ed0
 8001fc0:	4000d400 	.word	0x4000d400

08001fc4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <MX_I2C2_Init+0x74>)
 8001fca:	4a1c      	ldr	r2, [pc, #112]	; (800203c <MX_I2C2_Init+0x78>)
 8001fcc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 8001fce:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <MX_I2C2_Init+0x74>)
 8001fd0:	4a1b      	ldr	r2, [pc, #108]	; (8002040 <MX_I2C2_Init+0x7c>)
 8001fd2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001fd4:	4b18      	ldr	r3, [pc, #96]	; (8002038 <MX_I2C2_Init+0x74>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fda:	4b17      	ldr	r3, [pc, #92]	; (8002038 <MX_I2C2_Init+0x74>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001fe0:	4b15      	ldr	r3, [pc, #84]	; (8002038 <MX_I2C2_Init+0x74>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001fe6:	4b14      	ldr	r3, [pc, #80]	; (8002038 <MX_I2C2_Init+0x74>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <MX_I2C2_Init+0x74>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ff2:	4b11      	ldr	r3, [pc, #68]	; (8002038 <MX_I2C2_Init+0x74>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <MX_I2C2_Init+0x74>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ffe:	480e      	ldr	r0, [pc, #56]	; (8002038 <MX_I2C2_Init+0x74>)
 8002000:	f006 f95e 	bl	80082c0 <HAL_I2C_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800200a:	f000 fd53 	bl	8002ab4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800200e:	2100      	movs	r1, #0
 8002010:	4809      	ldr	r0, [pc, #36]	; (8002038 <MX_I2C2_Init+0x74>)
 8002012:	f006 f9ff 	bl	8008414 <HAL_I2CEx_ConfigAnalogFilter>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800201c:	f000 fd4a 	bl	8002ab4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002020:	2100      	movs	r1, #0
 8002022:	4805      	ldr	r0, [pc, #20]	; (8002038 <MX_I2C2_Init+0x74>)
 8002024:	f006 fa41 	bl	80084aa <HAL_I2CEx_ConfigDigitalFilter>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800202e:	f000 fd41 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	24000f70 	.word	0x24000f70
 800203c:	40005800 	.word	0x40005800
 8002040:	20303e5d 	.word	0x20303e5d

08002044 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 8002048:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <MX_SDMMC2_SD_Init+0x34>)
 800204a:	4a0c      	ldr	r2, [pc, #48]	; (800207c <MX_SDMMC2_SD_Init+0x38>)
 800204c:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800204e:	4b0a      	ldr	r3, [pc, #40]	; (8002078 <MX_SDMMC2_SD_Init+0x34>)
 8002050:	2200      	movs	r2, #0
 8002052:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <MX_SDMMC2_SD_Init+0x34>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800205a:	4b07      	ldr	r3, [pc, #28]	; (8002078 <MX_SDMMC2_SD_Init+0x34>)
 800205c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002060:	60da      	str	r2, [r3, #12]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <MX_SDMMC2_SD_Init+0x34>)
 8002064:	2200      	movs	r2, #0
 8002066:	611a      	str	r2, [r3, #16]
  hsd2.Init.ClockDiv = 0;
 8002068:	4b03      	ldr	r3, [pc, #12]	; (8002078 <MX_SDMMC2_SD_Init+0x34>)
 800206a:	2200      	movs	r2, #0
 800206c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	24000fc4 	.word	0x24000fc4
 800207c:	48022400 	.word	0x48022400

08002080 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002084:	4b27      	ldr	r3, [pc, #156]	; (8002124 <MX_SPI1_Init+0xa4>)
 8002086:	4a28      	ldr	r2, [pc, #160]	; (8002128 <MX_SPI1_Init+0xa8>)
 8002088:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800208a:	4b26      	ldr	r3, [pc, #152]	; (8002124 <MX_SPI1_Init+0xa4>)
 800208c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002090:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002092:	4b24      	ldr	r3, [pc, #144]	; (8002124 <MX_SPI1_Init+0xa4>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002098:	4b22      	ldr	r3, [pc, #136]	; (8002124 <MX_SPI1_Init+0xa4>)
 800209a:	2207      	movs	r2, #7
 800209c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800209e:	4b21      	ldr	r3, [pc, #132]	; (8002124 <MX_SPI1_Init+0xa4>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020a4:	4b1f      	ldr	r3, [pc, #124]	; (8002124 <MX_SPI1_Init+0xa4>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020aa:	4b1e      	ldr	r3, [pc, #120]	; (8002124 <MX_SPI1_Init+0xa4>)
 80020ac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80020b0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80020b2:	4b1c      	ldr	r3, [pc, #112]	; (8002124 <MX_SPI1_Init+0xa4>)
 80020b4:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80020b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020ba:	4b1a      	ldr	r3, [pc, #104]	; (8002124 <MX_SPI1_Init+0xa4>)
 80020bc:	2200      	movs	r2, #0
 80020be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020c0:	4b18      	ldr	r3, [pc, #96]	; (8002124 <MX_SPI1_Init+0xa4>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020c6:	4b17      	ldr	r3, [pc, #92]	; (8002124 <MX_SPI1_Init+0xa4>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80020cc:	4b15      	ldr	r3, [pc, #84]	; (8002124 <MX_SPI1_Init+0xa4>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <MX_SPI1_Init+0xa4>)
 80020d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80020da:	4b12      	ldr	r3, [pc, #72]	; (8002124 <MX_SPI1_Init+0xa4>)
 80020dc:	2200      	movs	r2, #0
 80020de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80020e0:	4b10      	ldr	r3, [pc, #64]	; (8002124 <MX_SPI1_Init+0xa4>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020e6:	4b0f      	ldr	r3, [pc, #60]	; (8002124 <MX_SPI1_Init+0xa4>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80020ec:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <MX_SPI1_Init+0xa4>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <MX_SPI1_Init+0xa4>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <MX_SPI1_Init+0xa4>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80020fe:	4b09      	ldr	r3, [pc, #36]	; (8002124 <MX_SPI1_Init+0xa4>)
 8002100:	2200      	movs	r2, #0
 8002102:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002104:	4b07      	ldr	r3, [pc, #28]	; (8002124 <MX_SPI1_Init+0xa4>)
 8002106:	2200      	movs	r2, #0
 8002108:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800210a:	4b06      	ldr	r3, [pc, #24]	; (8002124 <MX_SPI1_Init+0xa4>)
 800210c:	2200      	movs	r2, #0
 800210e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002110:	4804      	ldr	r0, [pc, #16]	; (8002124 <MX_SPI1_Init+0xa4>)
 8002112:	f00c fee1 	bl	800eed8 <HAL_SPI_Init>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800211c:	f000 fcca 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}
 8002124:	24001040 	.word	0x24001040
 8002128:	40013000 	.word	0x40013000

0800212c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002130:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <MX_SPI2_Init+0xa4>)
 8002132:	4a28      	ldr	r2, [pc, #160]	; (80021d4 <MX_SPI2_Init+0xa8>)
 8002134:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002136:	4b26      	ldr	r3, [pc, #152]	; (80021d0 <MX_SPI2_Init+0xa4>)
 8002138:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800213c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800213e:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <MX_SPI2_Init+0xa4>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002144:	4b22      	ldr	r3, [pc, #136]	; (80021d0 <MX_SPI2_Init+0xa4>)
 8002146:	2207      	movs	r2, #7
 8002148:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800214a:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <MX_SPI2_Init+0xa4>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002150:	4b1f      	ldr	r3, [pc, #124]	; (80021d0 <MX_SPI2_Init+0xa4>)
 8002152:	2200      	movs	r2, #0
 8002154:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002156:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <MX_SPI2_Init+0xa4>)
 8002158:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800215c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800215e:	4b1c      	ldr	r3, [pc, #112]	; (80021d0 <MX_SPI2_Init+0xa4>)
 8002160:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002164:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002166:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <MX_SPI2_Init+0xa4>)
 8002168:	2200      	movs	r2, #0
 800216a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800216c:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <MX_SPI2_Init+0xa4>)
 800216e:	2200      	movs	r2, #0
 8002170:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002172:	4b17      	ldr	r3, [pc, #92]	; (80021d0 <MX_SPI2_Init+0xa4>)
 8002174:	2200      	movs	r2, #0
 8002176:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8002178:	4b15      	ldr	r3, [pc, #84]	; (80021d0 <MX_SPI2_Init+0xa4>)
 800217a:	2200      	movs	r2, #0
 800217c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800217e:	4b14      	ldr	r3, [pc, #80]	; (80021d0 <MX_SPI2_Init+0xa4>)
 8002180:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002184:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002186:	4b12      	ldr	r3, [pc, #72]	; (80021d0 <MX_SPI2_Init+0xa4>)
 8002188:	2200      	movs	r2, #0
 800218a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800218c:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <MX_SPI2_Init+0xa4>)
 800218e:	2200      	movs	r2, #0
 8002190:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <MX_SPI2_Init+0xa4>)
 8002194:	2200      	movs	r2, #0
 8002196:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <MX_SPI2_Init+0xa4>)
 800219a:	2200      	movs	r2, #0
 800219c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800219e:	4b0c      	ldr	r3, [pc, #48]	; (80021d0 <MX_SPI2_Init+0xa4>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80021a4:	4b0a      	ldr	r3, [pc, #40]	; (80021d0 <MX_SPI2_Init+0xa4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80021aa:	4b09      	ldr	r3, [pc, #36]	; (80021d0 <MX_SPI2_Init+0xa4>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <MX_SPI2_Init+0xa4>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80021b6:	4b06      	ldr	r3, [pc, #24]	; (80021d0 <MX_SPI2_Init+0xa4>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80021bc:	4804      	ldr	r0, [pc, #16]	; (80021d0 <MX_SPI2_Init+0xa4>)
 80021be:	f00c fe8b 	bl	800eed8 <HAL_SPI_Init>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 80021c8:	f000 fc74 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80021cc:	bf00      	nop
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	240010c8 	.word	0x240010c8
 80021d4:	40003800 	.word	0x40003800

080021d8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80021dc:	4b27      	ldr	r3, [pc, #156]	; (800227c <MX_SPI3_Init+0xa4>)
 80021de:	4a28      	ldr	r2, [pc, #160]	; (8002280 <MX_SPI3_Init+0xa8>)
 80021e0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80021e2:	4b26      	ldr	r3, [pc, #152]	; (800227c <MX_SPI3_Init+0xa4>)
 80021e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80021e8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80021ea:	4b24      	ldr	r3, [pc, #144]	; (800227c <MX_SPI3_Init+0xa4>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80021f0:	4b22      	ldr	r3, [pc, #136]	; (800227c <MX_SPI3_Init+0xa4>)
 80021f2:	2207      	movs	r2, #7
 80021f4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80021f6:	4b21      	ldr	r3, [pc, #132]	; (800227c <MX_SPI3_Init+0xa4>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021fc:	4b1f      	ldr	r3, [pc, #124]	; (800227c <MX_SPI3_Init+0xa4>)
 80021fe:	2200      	movs	r2, #0
 8002200:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002202:	4b1e      	ldr	r3, [pc, #120]	; (800227c <MX_SPI3_Init+0xa4>)
 8002204:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002208:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800220a:	4b1c      	ldr	r3, [pc, #112]	; (800227c <MX_SPI3_Init+0xa4>)
 800220c:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002210:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002212:	4b1a      	ldr	r3, [pc, #104]	; (800227c <MX_SPI3_Init+0xa4>)
 8002214:	2200      	movs	r2, #0
 8002216:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002218:	4b18      	ldr	r3, [pc, #96]	; (800227c <MX_SPI3_Init+0xa4>)
 800221a:	2200      	movs	r2, #0
 800221c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <MX_SPI3_Init+0xa4>)
 8002220:	2200      	movs	r2, #0
 8002222:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002224:	4b15      	ldr	r3, [pc, #84]	; (800227c <MX_SPI3_Init+0xa4>)
 8002226:	2200      	movs	r2, #0
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800222a:	4b14      	ldr	r3, [pc, #80]	; (800227c <MX_SPI3_Init+0xa4>)
 800222c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002230:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002232:	4b12      	ldr	r3, [pc, #72]	; (800227c <MX_SPI3_Init+0xa4>)
 8002234:	2200      	movs	r2, #0
 8002236:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002238:	4b10      	ldr	r3, [pc, #64]	; (800227c <MX_SPI3_Init+0xa4>)
 800223a:	2200      	movs	r2, #0
 800223c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800223e:	4b0f      	ldr	r3, [pc, #60]	; (800227c <MX_SPI3_Init+0xa4>)
 8002240:	2200      	movs	r2, #0
 8002242:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002244:	4b0d      	ldr	r3, [pc, #52]	; (800227c <MX_SPI3_Init+0xa4>)
 8002246:	2200      	movs	r2, #0
 8002248:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800224a:	4b0c      	ldr	r3, [pc, #48]	; (800227c <MX_SPI3_Init+0xa4>)
 800224c:	2200      	movs	r2, #0
 800224e:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <MX_SPI3_Init+0xa4>)
 8002252:	2200      	movs	r2, #0
 8002254:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <MX_SPI3_Init+0xa4>)
 8002258:	2200      	movs	r2, #0
 800225a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800225c:	4b07      	ldr	r3, [pc, #28]	; (800227c <MX_SPI3_Init+0xa4>)
 800225e:	2200      	movs	r2, #0
 8002260:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <MX_SPI3_Init+0xa4>)
 8002264:	2200      	movs	r2, #0
 8002266:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002268:	4804      	ldr	r0, [pc, #16]	; (800227c <MX_SPI3_Init+0xa4>)
 800226a:	f00c fe35 	bl	800eed8 <HAL_SPI_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_SPI3_Init+0xa0>
  {
    Error_Handler();
 8002274:	f000 fc1e 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}
 800227c:	24001150 	.word	0x24001150
 8002280:	40003c00 	.word	0x40003c00

08002284 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	; 0x28
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800228a:	f107 031c 	add.w	r3, r7, #28
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002296:	463b      	mov	r3, r7
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
 80022a4:	615a      	str	r2, [r3, #20]
 80022a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022a8:	4b21      	ldr	r3, [pc, #132]	; (8002330 <MX_TIM2_Init+0xac>)
 80022aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022b0:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <MX_TIM2_Init+0xac>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b6:	4b1e      	ldr	r3, [pc, #120]	; (8002330 <MX_TIM2_Init+0xac>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 90;
 80022bc:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <MX_TIM2_Init+0xac>)
 80022be:	225a      	movs	r2, #90	; 0x5a
 80022c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022c2:	4b1b      	ldr	r3, [pc, #108]	; (8002330 <MX_TIM2_Init+0xac>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <MX_TIM2_Init+0xac>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80022ce:	4818      	ldr	r0, [pc, #96]	; (8002330 <MX_TIM2_Init+0xac>)
 80022d0:	f00d fbf2 	bl	800fab8 <HAL_TIM_PWM_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80022da:	f000 fbeb 	bl	8002ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022e2:	2300      	movs	r3, #0
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022e6:	f107 031c 	add.w	r3, r7, #28
 80022ea:	4619      	mov	r1, r3
 80022ec:	4810      	ldr	r0, [pc, #64]	; (8002330 <MX_TIM2_Init+0xac>)
 80022ee:	f00e fe79 	bl	8010fe4 <HAL_TIMEx_MasterConfigSynchronization>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80022f8:	f000 fbdc 	bl	8002ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022fc:	2360      	movs	r3, #96	; 0x60
 80022fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002304:	2300      	movs	r3, #0
 8002306:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002308:	2300      	movs	r3, #0
 800230a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800230c:	463b      	mov	r3, r7
 800230e:	2208      	movs	r2, #8
 8002310:	4619      	mov	r1, r3
 8002312:	4807      	ldr	r0, [pc, #28]	; (8002330 <MX_TIM2_Init+0xac>)
 8002314:	f00e f898 	bl	8010448 <HAL_TIM_PWM_ConfigChannel>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800231e:	f000 fbc9 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002322:	4803      	ldr	r0, [pc, #12]	; (8002330 <MX_TIM2_Init+0xac>)
 8002324:	f001 f980 	bl	8003628 <HAL_TIM_MspPostInit>

}
 8002328:	bf00      	nop
 800232a:	3728      	adds	r7, #40	; 0x28
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	240011d8 	.word	0x240011d8

08002334 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800233a:	f107 031c 	add.w	r3, r7, #28
 800233e:	2200      	movs	r2, #0
 8002340:	601a      	str	r2, [r3, #0]
 8002342:	605a      	str	r2, [r3, #4]
 8002344:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002346:	463b      	mov	r3, r7
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	605a      	str	r2, [r3, #4]
 800234e:	609a      	str	r2, [r3, #8]
 8002350:	60da      	str	r2, [r3, #12]
 8002352:	611a      	str	r2, [r3, #16]
 8002354:	615a      	str	r2, [r3, #20]
 8002356:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002358:	4b26      	ldr	r3, [pc, #152]	; (80023f4 <MX_TIM3_Init+0xc0>)
 800235a:	4a27      	ldr	r2, [pc, #156]	; (80023f8 <MX_TIM3_Init+0xc4>)
 800235c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800235e:	4b25      	ldr	r3, [pc, #148]	; (80023f4 <MX_TIM3_Init+0xc0>)
 8002360:	2200      	movs	r2, #0
 8002362:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002364:	4b23      	ldr	r3, [pc, #140]	; (80023f4 <MX_TIM3_Init+0xc0>)
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 90;
 800236a:	4b22      	ldr	r3, [pc, #136]	; (80023f4 <MX_TIM3_Init+0xc0>)
 800236c:	225a      	movs	r2, #90	; 0x5a
 800236e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002370:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <MX_TIM3_Init+0xc0>)
 8002372:	2200      	movs	r2, #0
 8002374:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002376:	4b1f      	ldr	r3, [pc, #124]	; (80023f4 <MX_TIM3_Init+0xc0>)
 8002378:	2200      	movs	r2, #0
 800237a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800237c:	481d      	ldr	r0, [pc, #116]	; (80023f4 <MX_TIM3_Init+0xc0>)
 800237e:	f00d fb9b 	bl	800fab8 <HAL_TIM_PWM_Init>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8002388:	f000 fb94 	bl	8002ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800238c:	2300      	movs	r3, #0
 800238e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002390:	2300      	movs	r3, #0
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002394:	f107 031c 	add.w	r3, r7, #28
 8002398:	4619      	mov	r1, r3
 800239a:	4816      	ldr	r0, [pc, #88]	; (80023f4 <MX_TIM3_Init+0xc0>)
 800239c:	f00e fe22 	bl	8010fe4 <HAL_TIMEx_MasterConfigSynchronization>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80023a6:	f000 fb85 	bl	8002ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023aa:	2360      	movs	r3, #96	; 0x60
 80023ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023ba:	463b      	mov	r3, r7
 80023bc:	2200      	movs	r2, #0
 80023be:	4619      	mov	r1, r3
 80023c0:	480c      	ldr	r0, [pc, #48]	; (80023f4 <MX_TIM3_Init+0xc0>)
 80023c2:	f00e f841 	bl	8010448 <HAL_TIM_PWM_ConfigChannel>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80023cc:	f000 fb72 	bl	8002ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80023d0:	463b      	mov	r3, r7
 80023d2:	2204      	movs	r2, #4
 80023d4:	4619      	mov	r1, r3
 80023d6:	4807      	ldr	r0, [pc, #28]	; (80023f4 <MX_TIM3_Init+0xc0>)
 80023d8:	f00e f836 	bl	8010448 <HAL_TIM_PWM_ConfigChannel>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80023e2:	f000 fb67 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80023e6:	4803      	ldr	r0, [pc, #12]	; (80023f4 <MX_TIM3_Init+0xc0>)
 80023e8:	f001 f91e 	bl	8003628 <HAL_TIM_MspPostInit>

}
 80023ec:	bf00      	nop
 80023ee:	3728      	adds	r7, #40	; 0x28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	24001224 	.word	0x24001224
 80023f8:	40000400 	.word	0x40000400

080023fc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08a      	sub	sp, #40	; 0x28
 8002400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002402:	f107 031c 	add.w	r3, r7, #28
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800240e:	463b      	mov	r3, r7
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
 800241c:	615a      	str	r2, [r3, #20]
 800241e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002420:	4b32      	ldr	r3, [pc, #200]	; (80024ec <MX_TIM4_Init+0xf0>)
 8002422:	4a33      	ldr	r2, [pc, #204]	; (80024f0 <MX_TIM4_Init+0xf4>)
 8002424:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 28;
 8002426:	4b31      	ldr	r3, [pc, #196]	; (80024ec <MX_TIM4_Init+0xf0>)
 8002428:	221c      	movs	r2, #28
 800242a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242c:	4b2f      	ldr	r3, [pc, #188]	; (80024ec <MX_TIM4_Init+0xf0>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8002432:	4b2e      	ldr	r3, [pc, #184]	; (80024ec <MX_TIM4_Init+0xf0>)
 8002434:	f242 720f 	movw	r2, #9999	; 0x270f
 8002438:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243a:	4b2c      	ldr	r3, [pc, #176]	; (80024ec <MX_TIM4_Init+0xf0>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002440:	4b2a      	ldr	r3, [pc, #168]	; (80024ec <MX_TIM4_Init+0xf0>)
 8002442:	2200      	movs	r2, #0
 8002444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002446:	4829      	ldr	r0, [pc, #164]	; (80024ec <MX_TIM4_Init+0xf0>)
 8002448:	f00d fb36 	bl	800fab8 <HAL_TIM_PWM_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002452:	f000 fb2f 	bl	8002ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800245e:	f107 031c 	add.w	r3, r7, #28
 8002462:	4619      	mov	r1, r3
 8002464:	4821      	ldr	r0, [pc, #132]	; (80024ec <MX_TIM4_Init+0xf0>)
 8002466:	f00e fdbd 	bl	8010fe4 <HAL_TIMEx_MasterConfigSynchronization>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002470:	f000 fb20 	bl	8002ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002474:	2360      	movs	r3, #96	; 0x60
 8002476:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002484:	463b      	mov	r3, r7
 8002486:	2200      	movs	r2, #0
 8002488:	4619      	mov	r1, r3
 800248a:	4818      	ldr	r0, [pc, #96]	; (80024ec <MX_TIM4_Init+0xf0>)
 800248c:	f00d ffdc 	bl	8010448 <HAL_TIM_PWM_ConfigChannel>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002496:	f000 fb0d 	bl	8002ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800249a:	463b      	mov	r3, r7
 800249c:	2204      	movs	r2, #4
 800249e:	4619      	mov	r1, r3
 80024a0:	4812      	ldr	r0, [pc, #72]	; (80024ec <MX_TIM4_Init+0xf0>)
 80024a2:	f00d ffd1 	bl	8010448 <HAL_TIM_PWM_ConfigChannel>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80024ac:	f000 fb02 	bl	8002ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80024b0:	463b      	mov	r3, r7
 80024b2:	2208      	movs	r2, #8
 80024b4:	4619      	mov	r1, r3
 80024b6:	480d      	ldr	r0, [pc, #52]	; (80024ec <MX_TIM4_Init+0xf0>)
 80024b8:	f00d ffc6 	bl	8010448 <HAL_TIM_PWM_ConfigChannel>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM4_Init+0xca>
  {
    Error_Handler();
 80024c2:	f000 faf7 	bl	8002ab4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024c6:	463b      	mov	r3, r7
 80024c8:	220c      	movs	r2, #12
 80024ca:	4619      	mov	r1, r3
 80024cc:	4807      	ldr	r0, [pc, #28]	; (80024ec <MX_TIM4_Init+0xf0>)
 80024ce:	f00d ffbb 	bl	8010448 <HAL_TIM_PWM_ConfigChannel>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM4_Init+0xe0>
  {
    Error_Handler();
 80024d8:	f000 faec 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80024dc:	4803      	ldr	r0, [pc, #12]	; (80024ec <MX_TIM4_Init+0xf0>)
 80024de:	f001 f8a3 	bl	8003628 <HAL_TIM_MspPostInit>

}
 80024e2:	bf00      	nop
 80024e4:	3728      	adds	r7, #40	; 0x28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	24001270 	.word	0x24001270
 80024f0:	40000800 	.word	0x40000800

080024f4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024fa:	f107 031c 	add.w	r3, r7, #28
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	605a      	str	r2, [r3, #4]
 8002504:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002506:	463b      	mov	r3, r7
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
 8002514:	615a      	str	r2, [r3, #20]
 8002516:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002518:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <MX_TIM5_Init+0xac>)
 800251a:	4a22      	ldr	r2, [pc, #136]	; (80025a4 <MX_TIM5_Init+0xb0>)
 800251c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800251e:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <MX_TIM5_Init+0xac>)
 8002520:	2200      	movs	r2, #0
 8002522:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002524:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <MX_TIM5_Init+0xac>)
 8002526:	2200      	movs	r2, #0
 8002528:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 90;
 800252a:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <MX_TIM5_Init+0xac>)
 800252c:	225a      	movs	r2, #90	; 0x5a
 800252e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002530:	4b1b      	ldr	r3, [pc, #108]	; (80025a0 <MX_TIM5_Init+0xac>)
 8002532:	2200      	movs	r2, #0
 8002534:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002536:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <MX_TIM5_Init+0xac>)
 8002538:	2200      	movs	r2, #0
 800253a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800253c:	4818      	ldr	r0, [pc, #96]	; (80025a0 <MX_TIM5_Init+0xac>)
 800253e:	f00d fabb 	bl	800fab8 <HAL_TIM_PWM_Init>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002548:	f000 fab4 	bl	8002ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254c:	2300      	movs	r3, #0
 800254e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002550:	2300      	movs	r3, #0
 8002552:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002554:	f107 031c 	add.w	r3, r7, #28
 8002558:	4619      	mov	r1, r3
 800255a:	4811      	ldr	r0, [pc, #68]	; (80025a0 <MX_TIM5_Init+0xac>)
 800255c:	f00e fd42 	bl	8010fe4 <HAL_TIMEx_MasterConfigSynchronization>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002566:	f000 faa5 	bl	8002ab4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800256a:	2360      	movs	r3, #96	; 0x60
 800256c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002572:	2300      	movs	r3, #0
 8002574:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800257a:	463b      	mov	r3, r7
 800257c:	220c      	movs	r2, #12
 800257e:	4619      	mov	r1, r3
 8002580:	4807      	ldr	r0, [pc, #28]	; (80025a0 <MX_TIM5_Init+0xac>)
 8002582:	f00d ff61 	bl	8010448 <HAL_TIM_PWM_ConfigChannel>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800258c:	f000 fa92 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002590:	4803      	ldr	r0, [pc, #12]	; (80025a0 <MX_TIM5_Init+0xac>)
 8002592:	f001 f849 	bl	8003628 <HAL_TIM_MspPostInit>

}
 8002596:	bf00      	nop
 8002598:	3728      	adds	r7, #40	; 0x28
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	240012bc 	.word	0x240012bc
 80025a4:	40000c00 	.word	0x40000c00

080025a8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <MX_TIM13_Init+0x40>)
 80025ae:	4a0f      	ldr	r2, [pc, #60]	; (80025ec <MX_TIM13_Init+0x44>)
 80025b0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 95;
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <MX_TIM13_Init+0x40>)
 80025b4:	225f      	movs	r2, #95	; 0x5f
 80025b6:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <MX_TIM13_Init+0x40>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 80025be:	4b0a      	ldr	r3, [pc, #40]	; (80025e8 <MX_TIM13_Init+0x40>)
 80025c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025c4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025c6:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <MX_TIM13_Init+0x40>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <MX_TIM13_Init+0x40>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80025d2:	4805      	ldr	r0, [pc, #20]	; (80025e8 <MX_TIM13_Init+0x40>)
 80025d4:	f00d fa19 	bl	800fa0a <HAL_TIM_Base_Init>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80025de:	f000 fa69 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	24001308 	.word	0x24001308
 80025ec:	40001c00 	.word	0x40001c00

080025f0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80025f4:	4b22      	ldr	r3, [pc, #136]	; (8002680 <MX_UART4_Init+0x90>)
 80025f6:	4a23      	ldr	r2, [pc, #140]	; (8002684 <MX_UART4_Init+0x94>)
 80025f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80025fa:	4b21      	ldr	r3, [pc, #132]	; (8002680 <MX_UART4_Init+0x90>)
 80025fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002600:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002602:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <MX_UART4_Init+0x90>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002608:	4b1d      	ldr	r3, [pc, #116]	; (8002680 <MX_UART4_Init+0x90>)
 800260a:	2200      	movs	r2, #0
 800260c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800260e:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <MX_UART4_Init+0x90>)
 8002610:	2200      	movs	r2, #0
 8002612:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002614:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <MX_UART4_Init+0x90>)
 8002616:	220c      	movs	r2, #12
 8002618:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800261a:	4b19      	ldr	r3, [pc, #100]	; (8002680 <MX_UART4_Init+0x90>)
 800261c:	2200      	movs	r2, #0
 800261e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002620:	4b17      	ldr	r3, [pc, #92]	; (8002680 <MX_UART4_Init+0x90>)
 8002622:	2200      	movs	r2, #0
 8002624:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002626:	4b16      	ldr	r3, [pc, #88]	; (8002680 <MX_UART4_Init+0x90>)
 8002628:	2200      	movs	r2, #0
 800262a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800262c:	4b14      	ldr	r3, [pc, #80]	; (8002680 <MX_UART4_Init+0x90>)
 800262e:	2200      	movs	r2, #0
 8002630:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002632:	4b13      	ldr	r3, [pc, #76]	; (8002680 <MX_UART4_Init+0x90>)
 8002634:	2200      	movs	r2, #0
 8002636:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002638:	4811      	ldr	r0, [pc, #68]	; (8002680 <MX_UART4_Init+0x90>)
 800263a:	f00e fd8d 	bl	8011158 <HAL_UART_Init>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8002644:	f000 fa36 	bl	8002ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002648:	2100      	movs	r1, #0
 800264a:	480d      	ldr	r0, [pc, #52]	; (8002680 <MX_UART4_Init+0x90>)
 800264c:	f00f fe93 	bl	8012376 <HAL_UARTEx_SetTxFifoThreshold>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8002656:	f000 fa2d 	bl	8002ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800265a:	2100      	movs	r1, #0
 800265c:	4808      	ldr	r0, [pc, #32]	; (8002680 <MX_UART4_Init+0x90>)
 800265e:	f00f fec8 	bl	80123f2 <HAL_UARTEx_SetRxFifoThreshold>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8002668:	f000 fa24 	bl	8002ab4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 800266c:	4804      	ldr	r0, [pc, #16]	; (8002680 <MX_UART4_Init+0x90>)
 800266e:	f00f fe49 	bl	8012304 <HAL_UARTEx_DisableFifoMode>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8002678:	f000 fa1c 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800267c:	bf00      	nop
 800267e:	bd80      	pop	{r7, pc}
 8002680:	240015ac 	.word	0x240015ac
 8002684:	40004c00 	.word	0x40004c00

08002688 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800268c:	4b22      	ldr	r3, [pc, #136]	; (8002718 <MX_USART6_UART_Init+0x90>)
 800268e:	4a23      	ldr	r2, [pc, #140]	; (800271c <MX_USART6_UART_Init+0x94>)
 8002690:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002692:	4b21      	ldr	r3, [pc, #132]	; (8002718 <MX_USART6_UART_Init+0x90>)
 8002694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002698:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800269a:	4b1f      	ldr	r3, [pc, #124]	; (8002718 <MX_USART6_UART_Init+0x90>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80026a0:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <MX_USART6_UART_Init+0x90>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80026a6:	4b1c      	ldr	r3, [pc, #112]	; (8002718 <MX_USART6_UART_Init+0x90>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80026ac:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <MX_USART6_UART_Init+0x90>)
 80026ae:	220c      	movs	r2, #12
 80026b0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026b2:	4b19      	ldr	r3, [pc, #100]	; (8002718 <MX_USART6_UART_Init+0x90>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b8:	4b17      	ldr	r3, [pc, #92]	; (8002718 <MX_USART6_UART_Init+0x90>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026be:	4b16      	ldr	r3, [pc, #88]	; (8002718 <MX_USART6_UART_Init+0x90>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	621a      	str	r2, [r3, #32]
  huart6.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026c4:	4b14      	ldr	r3, [pc, #80]	; (8002718 <MX_USART6_UART_Init+0x90>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026ca:	4b13      	ldr	r3, [pc, #76]	; (8002718 <MX_USART6_UART_Init+0x90>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80026d0:	4811      	ldr	r0, [pc, #68]	; (8002718 <MX_USART6_UART_Init+0x90>)
 80026d2:	f00e fd41 	bl	8011158 <HAL_UART_Init>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_USART6_UART_Init+0x58>
  {
    Error_Handler();
 80026dc:	f000 f9ea 	bl	8002ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart6, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026e0:	2100      	movs	r1, #0
 80026e2:	480d      	ldr	r0, [pc, #52]	; (8002718 <MX_USART6_UART_Init+0x90>)
 80026e4:	f00f fe47 	bl	8012376 <HAL_UARTEx_SetTxFifoThreshold>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_USART6_UART_Init+0x6a>
  {
    Error_Handler();
 80026ee:	f000 f9e1 	bl	8002ab4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart6, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80026f2:	2100      	movs	r1, #0
 80026f4:	4808      	ldr	r0, [pc, #32]	; (8002718 <MX_USART6_UART_Init+0x90>)
 80026f6:	f00f fe7c 	bl	80123f2 <HAL_UARTEx_SetRxFifoThreshold>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_USART6_UART_Init+0x7c>
  {
    Error_Handler();
 8002700:	f000 f9d8 	bl	8002ab4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart6) != HAL_OK)
 8002704:	4804      	ldr	r0, [pc, #16]	; (8002718 <MX_USART6_UART_Init+0x90>)
 8002706:	f00f fdfd 	bl	8012304 <HAL_UARTEx_DisableFifoMode>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <MX_USART6_UART_Init+0x8c>
  {
    Error_Handler();
 8002710:	f000 f9d0 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002714:	bf00      	nop
 8002716:	bd80      	pop	{r7, pc}
 8002718:	24001640 	.word	0x24001640
 800271c:	40011400 	.word	0x40011400

08002720 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002726:	4b2d      	ldr	r3, [pc, #180]	; (80027dc <MX_DMA_Init+0xbc>)
 8002728:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800272c:	4a2b      	ldr	r2, [pc, #172]	; (80027dc <MX_DMA_Init+0xbc>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002736:	4b29      	ldr	r3, [pc, #164]	; (80027dc <MX_DMA_Init+0xbc>)
 8002738:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800273c:	f003 0301 	and.w	r3, r3, #1
 8002740:	607b      	str	r3, [r7, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002744:	4b25      	ldr	r3, [pc, #148]	; (80027dc <MX_DMA_Init+0xbc>)
 8002746:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800274a:	4a24      	ldr	r2, [pc, #144]	; (80027dc <MX_DMA_Init+0xbc>)
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <MX_DMA_Init+0xbc>)
 8002756:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	603b      	str	r3, [r7, #0]
 8002760:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	2100      	movs	r1, #0
 8002766:	200b      	movs	r0, #11
 8002768:	f002 ff63 	bl	8005632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800276c:	200b      	movs	r0, #11
 800276e:	f002 ff7a 	bl	8005666 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	200c      	movs	r0, #12
 8002778:	f002 ff5b 	bl	8005632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800277c:	200c      	movs	r0, #12
 800277e:	f002 ff72 	bl	8005666 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002782:	2200      	movs	r2, #0
 8002784:	2100      	movs	r1, #0
 8002786:	200d      	movs	r0, #13
 8002788:	f002 ff53 	bl	8005632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800278c:	200d      	movs	r0, #13
 800278e:	f002 ff6a 	bl	8005666 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8002792:	2200      	movs	r2, #0
 8002794:	2100      	movs	r1, #0
 8002796:	200e      	movs	r0, #14
 8002798:	f002 ff4b 	bl	8005632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800279c:	200e      	movs	r0, #14
 800279e:	f002 ff62 	bl	8005666 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80027a2:	2200      	movs	r2, #0
 80027a4:	2100      	movs	r1, #0
 80027a6:	200f      	movs	r0, #15
 80027a8:	f002 ff43 	bl	8005632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80027ac:	200f      	movs	r0, #15
 80027ae:	f002 ff5a 	bl	8005666 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80027b2:	2200      	movs	r2, #0
 80027b4:	2100      	movs	r1, #0
 80027b6:	2010      	movs	r0, #16
 80027b8:	f002 ff3b 	bl	8005632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80027bc:	2010      	movs	r0, #16
 80027be:	f002 ff52 	bl	8005666 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80027c2:	2200      	movs	r2, #0
 80027c4:	2100      	movs	r1, #0
 80027c6:	2046      	movs	r0, #70	; 0x46
 80027c8:	f002 ff33 	bl	8005632 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80027cc:	2046      	movs	r0, #70	; 0x46
 80027ce:	f002 ff4a 	bl	8005666 <HAL_NVIC_EnableIRQ>

}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	58024400 	.word	0x58024400

080027e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08c      	sub	sp, #48	; 0x30
 80027e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e6:	f107 031c 	add.w	r3, r7, #28
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	605a      	str	r2, [r3, #4]
 80027f0:	609a      	str	r2, [r3, #8]
 80027f2:	60da      	str	r2, [r3, #12]
 80027f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027f6:	4ba7      	ldr	r3, [pc, #668]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 80027f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80027fc:	4aa5      	ldr	r2, [pc, #660]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 80027fe:	f043 0310 	orr.w	r3, r3, #16
 8002802:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002806:	4ba3      	ldr	r3, [pc, #652]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 8002808:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800280c:	f003 0310 	and.w	r3, r3, #16
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002814:	4b9f      	ldr	r3, [pc, #636]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 8002816:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800281a:	4a9e      	ldr	r2, [pc, #632]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 800281c:	f043 0320 	orr.w	r3, r3, #32
 8002820:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002824:	4b9b      	ldr	r3, [pc, #620]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 8002826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800282a:	f003 0320 	and.w	r3, r3, #32
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002832:	4b98      	ldr	r3, [pc, #608]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 8002834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002838:	4a96      	ldr	r2, [pc, #600]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 800283a:	f043 0304 	orr.w	r3, r3, #4
 800283e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002842:	4b94      	ldr	r3, [pc, #592]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 8002844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002850:	4b90      	ldr	r3, [pc, #576]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 8002852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002856:	4a8f      	ldr	r2, [pc, #572]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002860:	4b8c      	ldr	r3, [pc, #560]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 8002862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800286e:	4b89      	ldr	r3, [pc, #548]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 8002870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002874:	4a87      	ldr	r2, [pc, #540]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 8002876:	f043 0302 	orr.w	r3, r3, #2
 800287a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800287e:	4b85      	ldr	r3, [pc, #532]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 8002880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800288c:	4b81      	ldr	r3, [pc, #516]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 800288e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002892:	4a80      	ldr	r2, [pc, #512]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 8002894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800289c:	4b7d      	ldr	r3, [pc, #500]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 800289e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80028aa:	4b7a      	ldr	r3, [pc, #488]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 80028ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028b0:	4a78      	ldr	r2, [pc, #480]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 80028b2:	f043 0308 	orr.w	r3, r3, #8
 80028b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028ba:	4b76      	ldr	r3, [pc, #472]	; (8002a94 <MX_GPIO_Init+0x2b4>)
 80028bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	603b      	str	r3, [r7, #0]
 80028c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin, GPIO_PIN_RESET);
 80028c8:	2200      	movs	r2, #0
 80028ca:	f241 5104 	movw	r1, #5380	; 0x1504
 80028ce:	4872      	ldr	r0, [pc, #456]	; (8002a98 <MX_GPIO_Init+0x2b8>)
 80028d0:	f005 fcdc 	bl	800828c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARM1_Pin|ARM2_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 80028d4:	2200      	movs	r2, #0
 80028d6:	f248 0106 	movw	r1, #32774	; 0x8006
 80028da:	4870      	ldr	r0, [pc, #448]	; (8002a9c <MX_GPIO_Init+0x2bc>)
 80028dc:	f005 fcd6 	bl	800828c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80028e0:	2200      	movs	r2, #0
 80028e2:	2130      	movs	r1, #48	; 0x30
 80028e4:	486e      	ldr	r0, [pc, #440]	; (8002aa0 <MX_GPIO_Init+0x2c0>)
 80028e6:	f005 fcd1 	bl	800828c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|PYRO1_Pin, GPIO_PIN_RESET);
 80028ea:	2200      	movs	r2, #0
 80028ec:	2103      	movs	r1, #3
 80028ee:	486d      	ldr	r0, [pc, #436]	; (8002aa4 <MX_GPIO_Init+0x2c4>)
 80028f0:	f005 fccc 	bl	800828c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, PYRO2_Pin|PYRO3_Pin|PYRO4_Pin, GPIO_PIN_RESET);
 80028f4:	2200      	movs	r2, #0
 80028f6:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 80028fa:	486b      	ldr	r0, [pc, #428]	; (8002aa8 <MX_GPIO_Init+0x2c8>)
 80028fc:	f005 fcc6 	bl	800828c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8002900:	2200      	movs	r2, #0
 8002902:	210e      	movs	r1, #14
 8002904:	4869      	ldr	r0, [pc, #420]	; (8002aac <MX_GPIO_Init+0x2cc>)
 8002906:	f005 fcc1 	bl	800828c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 800290a:	2201      	movs	r2, #1
 800290c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8002910:	4867      	ldr	r0, [pc, #412]	; (8002ab0 <MX_GPIO_Init+0x2d0>)
 8002912:	f005 fcbb 	bl	800828c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0, GPIO_PIN_RESET);
 8002916:	2200      	movs	r2, #0
 8002918:	2101      	movs	r1, #1
 800291a:	4865      	ldr	r0, [pc, #404]	; (8002ab0 <MX_GPIO_Init+0x2d0>)
 800291c:	f005 fcb6 	bl	800828c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PYRO6_Pin PYRO7_Pin PYRO8_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|PYRO6_Pin|PYRO7_Pin|PYRO8_Pin;
 8002920:	f241 5304 	movw	r3, #5380	; 0x1504
 8002924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002926:	2301      	movs	r3, #1
 8002928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292a:	2300      	movs	r3, #0
 800292c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800292e:	2300      	movs	r3, #0
 8002930:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002932:	f107 031c 	add.w	r3, r7, #28
 8002936:	4619      	mov	r1, r3
 8002938:	4857      	ldr	r0, [pc, #348]	; (8002a98 <MX_GPIO_Init+0x2b8>)
 800293a:	f005 fae7 	bl	8007f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARM1_Pin ARM2_Pin PA15 */
  GPIO_InitStruct.Pin = ARM1_Pin|ARM2_Pin|GPIO_PIN_15;
 800293e:	f248 0306 	movw	r3, #32774	; 0x8006
 8002942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002944:	2301      	movs	r3, #1
 8002946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002948:	2300      	movs	r3, #0
 800294a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800294c:	2300      	movs	r3, #0
 800294e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002950:	f107 031c 	add.w	r3, r7, #28
 8002954:	4619      	mov	r1, r3
 8002956:	4851      	ldr	r0, [pc, #324]	; (8002a9c <MX_GPIO_Init+0x2bc>)
 8002958:	f005 fad8 	bl	8007f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800295c:	2330      	movs	r3, #48	; 0x30
 800295e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002960:	2301      	movs	r3, #1
 8002962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002964:	2300      	movs	r3, #0
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002968:	2300      	movs	r3, #0
 800296a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800296c:	f107 031c 	add.w	r3, r7, #28
 8002970:	4619      	mov	r1, r3
 8002972:	484b      	ldr	r0, [pc, #300]	; (8002aa0 <MX_GPIO_Init+0x2c0>)
 8002974:	f005 faca 	bl	8007f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PYRO1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|PYRO1_Pin;
 8002978:	2303      	movs	r3, #3
 800297a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800297c:	2301      	movs	r3, #1
 800297e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002980:	2300      	movs	r3, #0
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002984:	2300      	movs	r3, #0
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002988:	f107 031c 	add.w	r3, r7, #28
 800298c:	4619      	mov	r1, r3
 800298e:	4845      	ldr	r0, [pc, #276]	; (8002aa4 <MX_GPIO_Init+0x2c4>)
 8002990:	f005 fabc 	bl	8007f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT1_Pin */
  GPIO_InitStruct.Pin = CONT1_Pin;
 8002994:	2304      	movs	r3, #4
 8002996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002998:	2300      	movs	r3, #0
 800299a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800299c:	2301      	movs	r3, #1
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT1_GPIO_Port, &GPIO_InitStruct);
 80029a0:	f107 031c 	add.w	r3, r7, #28
 80029a4:	4619      	mov	r1, r3
 80029a6:	483f      	ldr	r0, [pc, #252]	; (8002aa4 <MX_GPIO_Init+0x2c4>)
 80029a8:	f005 fab0 	bl	8007f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO2_Pin PYRO3_Pin PYRO4_Pin */
  GPIO_InitStruct.Pin = PYRO2_Pin|PYRO3_Pin|PYRO4_Pin;
 80029ac:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 80029b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029b2:	2301      	movs	r3, #1
 80029b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b6:	2300      	movs	r3, #0
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ba:	2300      	movs	r3, #0
 80029bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029be:	f107 031c 	add.w	r3, r7, #28
 80029c2:	4619      	mov	r1, r3
 80029c4:	4838      	ldr	r0, [pc, #224]	; (8002aa8 <MX_GPIO_Init+0x2c8>)
 80029c6:	f005 faa1 	bl	8007f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT2_Pin CONT3_Pin */
  GPIO_InitStruct.Pin = CONT2_Pin|CONT3_Pin;
 80029ca:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 80029ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029d0:	2300      	movs	r3, #0
 80029d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029d4:	2301      	movs	r3, #1
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029d8:	f107 031c 	add.w	r3, r7, #28
 80029dc:	4619      	mov	r1, r3
 80029de:	4832      	ldr	r0, [pc, #200]	; (8002aa8 <MX_GPIO_Init+0x2c8>)
 80029e0:	f005 fa94 	bl	8007f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : CONT4_Pin */
  GPIO_InitStruct.Pin = CONT4_Pin;
 80029e4:	2301      	movs	r3, #1
 80029e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029e8:	2300      	movs	r3, #0
 80029ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029ec:	2301      	movs	r3, #1
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CONT4_GPIO_Port, &GPIO_InitStruct);
 80029f0:	f107 031c 	add.w	r3, r7, #28
 80029f4:	4619      	mov	r1, r3
 80029f6:	482d      	ldr	r0, [pc, #180]	; (8002aac <MX_GPIO_Init+0x2cc>)
 80029f8:	f005 fa88 	bl	8007f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PYRO5_Pin PG2 PG3 */
  GPIO_InitStruct.Pin = PYRO5_Pin|GPIO_PIN_2|GPIO_PIN_3;
 80029fc:	230e      	movs	r3, #14
 80029fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a00:	2301      	movs	r3, #1
 8002a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a04:	2300      	movs	r3, #0
 8002a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a0c:	f107 031c 	add.w	r3, r7, #28
 8002a10:	4619      	mov	r1, r3
 8002a12:	4826      	ldr	r0, [pc, #152]	; (8002aac <MX_GPIO_Init+0x2cc>)
 8002a14:	f005 fa7a 	bl	8007f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : CONT5_Pin CONT6_Pin CONT7_Pin CONT8_Pin */
  GPIO_InitStruct.Pin = CONT5_Pin|CONT6_Pin|CONT7_Pin|CONT8_Pin;
 8002a18:	f44f 532a 	mov.w	r3, #10880	; 0x2a80
 8002a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a22:	2301      	movs	r3, #1
 8002a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a26:	f107 031c 	add.w	r3, r7, #28
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	481a      	ldr	r0, [pc, #104]	; (8002a98 <MX_GPIO_Init+0x2b8>)
 8002a2e:	f005 fa6d 	bl	8007f0c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_0;
 8002a32:	f240 7301 	movw	r3, #1793	; 0x701
 8002a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a44:	f107 031c 	add.w	r3, r7, #28
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4819      	ldr	r0, [pc, #100]	; (8002ab0 <MX_GPIO_Init+0x2d0>)
 8002a4c:	f005 fa5e 	bl	8007f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : Servo_ARM_CHECK_Pin */
  GPIO_InitStruct.Pin = Servo_ARM_CHECK_Pin;
 8002a50:	2310      	movs	r3, #16
 8002a52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a54:	2300      	movs	r3, #0
 8002a56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Servo_ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002a5c:	f107 031c 	add.w	r3, r7, #28
 8002a60:	4619      	mov	r1, r3
 8002a62:	4812      	ldr	r0, [pc, #72]	; (8002aac <MX_GPIO_Init+0x2cc>)
 8002a64:	f005 fa52 	bl	8007f0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a76:	2300      	movs	r3, #0
 8002a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a7e:	f107 031c 	add.w	r3, r7, #28
 8002a82:	4619      	mov	r1, r3
 8002a84:	4805      	ldr	r0, [pc, #20]	; (8002a9c <MX_GPIO_Init+0x2bc>)
 8002a86:	f005 fa41 	bl	8007f0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002a8a:	bf00      	nop
 8002a8c:	3730      	adds	r7, #48	; 0x30
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	58024400 	.word	0x58024400
 8002a98:	58021000 	.word	0x58021000
 8002a9c:	58020000 	.word	0x58020000
 8002aa0:	58020800 	.word	0x58020800
 8002aa4:	58020400 	.word	0x58020400
 8002aa8:	58021400 	.word	0x58021400
 8002aac:	58021800 	.word	0x58021800
 8002ab0:	58020c00 	.word	0x58020c00

08002ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ab8:	b672      	cpsid	i
}
 8002aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002abc:	e7fe      	b.n	8002abc <Error_Handler+0x8>
	...

08002ac0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
void MX_RNG_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002ac4:	4b09      	ldr	r3, [pc, #36]	; (8002aec <MX_RNG_Init+0x2c>)
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	; (8002af0 <MX_RNG_Init+0x30>)
 8002ac8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <MX_RNG_Init+0x2c>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002ad0:	4806      	ldr	r0, [pc, #24]	; (8002aec <MX_RNG_Init+0x2c>)
 8002ad2:	f00a fbef 	bl	800d2b4 <HAL_RNG_Init>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d001      	beq.n	8002ae0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002adc:	f7ff ffea 	bl	8002ab4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */
  initialized = 1;
 8002ae0:	4b04      	ldr	r3, [pc, #16]	; (8002af4 <MX_RNG_Init+0x34>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
  /* USER CODE END RNG_Init 2 */

}
 8002ae6:	bf00      	nop
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	240016d8 	.word	0x240016d8
 8002af0:	48021800 	.word	0x48021800
 8002af4:	240016d4 	.word	0x240016d4

08002af8 <rand_range>:


uint32_t rand_range(uint32_t a, uint32_t b) {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
	if(!initialized)
 8002b02:	4b1c      	ldr	r3, [pc, #112]	; (8002b74 <rand_range+0x7c>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d109      	bne.n	8002b1e <rand_range+0x26>
	{
		HAL_Delay(100);
 8002b0a:	2064      	movs	r0, #100	; 0x64
 8002b0c:	f001 f90c 	bl	8003d28 <HAL_Delay>
		CDC_Transmit_HS("Random not initialized!\n", strlen("Random not initialized!\n"));
 8002b10:	2118      	movs	r1, #24
 8002b12:	4819      	ldr	r0, [pc, #100]	; (8002b78 <rand_range+0x80>)
 8002b14:	f014 f986 	bl	8016e24 <CDC_Transmit_HS>
		return -1;
 8002b18:	f04f 33ff 	mov.w	r3, #4294967295
 8002b1c:	e026      	b.n	8002b6c <rand_range+0x74>
	}

	uint32_t rand = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60bb      	str	r3, [r7, #8]
	uint32_t MAX = 4294967295;
 8002b22:	f04f 33ff 	mov.w	r3, #4294967295
 8002b26:	60fb      	str	r3, [r7, #12]
	if(b>a && HAL_RNG_GenerateRandomNumber(&hrng, &rand) == HAL_OK)
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d914      	bls.n	8002b5a <rand_range+0x62>
 8002b30:	f107 0308 	add.w	r3, r7, #8
 8002b34:	4619      	mov	r1, r3
 8002b36:	4811      	ldr	r0, [pc, #68]	; (8002b7c <rand_range+0x84>)
 8002b38:	f00a fc60 	bl	800d3fc <HAL_RNG_GenerateRandomNumber>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10b      	bne.n	8002b5a <rand_range+0x62>
	{
		return a+rand/(MAX/(b-a));
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	6839      	ldr	r1, [r7, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	1acb      	subs	r3, r1, r3
 8002b4a:	68f9      	ldr	r1, [r7, #12]
 8002b4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b50:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4413      	add	r3, r2
 8002b58:	e008      	b.n	8002b6c <rand_range+0x74>
	}
	else
	{
		HAL_Delay(100);
 8002b5a:	2064      	movs	r0, #100	; 0x64
 8002b5c:	f001 f8e4 	bl	8003d28 <HAL_Delay>
		CDC_Transmit_HS("rng error\n", strlen("rng error\n"));
 8002b60:	210a      	movs	r1, #10
 8002b62:	4807      	ldr	r0, [pc, #28]	; (8002b80 <rand_range+0x88>)
 8002b64:	f014 f95e 	bl	8016e24 <CDC_Transmit_HS>
	}
	return -1;
 8002b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3710      	adds	r7, #16
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	240016d4 	.word	0x240016d4
 8002b78:	08018ad4 	.word	0x08018ad4
 8002b7c:	240016d8 	.word	0x240016d8
 8002b80:	08018af0 	.word	0x08018af0

08002b84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	; (8002bb4 <HAL_MspInit+0x30>)
 8002b8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b90:	4a08      	ldr	r2, [pc, #32]	; (8002bb4 <HAL_MspInit+0x30>)
 8002b92:	f043 0302 	orr.w	r3, r3, #2
 8002b96:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <HAL_MspInit+0x30>)
 8002b9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ba8:	bf00      	nop
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	58024400 	.word	0x58024400

08002bb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08c      	sub	sp, #48	; 0x30
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bc0:	f107 031c 	add.w	r3, r7, #28
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	60da      	str	r2, [r3, #12]
 8002bce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a5d      	ldr	r2, [pc, #372]	; (8002d4c <HAL_ADC_MspInit+0x194>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d159      	bne.n	8002c8e <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002bda:	4b5d      	ldr	r3, [pc, #372]	; (8002d50 <HAL_ADC_MspInit+0x198>)
 8002bdc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002be0:	4a5b      	ldr	r2, [pc, #364]	; (8002d50 <HAL_ADC_MspInit+0x198>)
 8002be2:	f043 0320 	orr.w	r3, r3, #32
 8002be6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002bea:	4b59      	ldr	r3, [pc, #356]	; (8002d50 <HAL_ADC_MspInit+0x198>)
 8002bec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bf0:	f003 0320 	and.w	r3, r3, #32
 8002bf4:	61bb      	str	r3, [r7, #24]
 8002bf6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bf8:	4b55      	ldr	r3, [pc, #340]	; (8002d50 <HAL_ADC_MspInit+0x198>)
 8002bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bfe:	4a54      	ldr	r2, [pc, #336]	; (8002d50 <HAL_ADC_MspInit+0x198>)
 8002c00:	f043 0304 	orr.w	r3, r3, #4
 8002c04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c08:	4b51      	ldr	r3, [pc, #324]	; (8002d50 <HAL_ADC_MspInit+0x198>)
 8002c0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = ARM_CHECK_Pin;
 8002c16:	2301      	movs	r3, #1
 8002c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARM_CHECK_GPIO_Port, &GPIO_InitStruct);
 8002c22:	f107 031c 	add.w	r3, r7, #28
 8002c26:	4619      	mov	r1, r3
 8002c28:	484a      	ldr	r0, [pc, #296]	; (8002d54 <HAL_ADC_MspInit+0x19c>)
 8002c2a:	f005 f96f 	bl	8007f0c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream5;
 8002c2e:	4b4a      	ldr	r3, [pc, #296]	; (8002d58 <HAL_ADC_MspInit+0x1a0>)
 8002c30:	4a4a      	ldr	r2, [pc, #296]	; (8002d5c <HAL_ADC_MspInit+0x1a4>)
 8002c32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002c34:	4b48      	ldr	r3, [pc, #288]	; (8002d58 <HAL_ADC_MspInit+0x1a0>)
 8002c36:	2209      	movs	r2, #9
 8002c38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c3a:	4b47      	ldr	r3, [pc, #284]	; (8002d58 <HAL_ADC_MspInit+0x1a0>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c40:	4b45      	ldr	r3, [pc, #276]	; (8002d58 <HAL_ADC_MspInit+0x1a0>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c46:	4b44      	ldr	r3, [pc, #272]	; (8002d58 <HAL_ADC_MspInit+0x1a0>)
 8002c48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c4c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c4e:	4b42      	ldr	r3, [pc, #264]	; (8002d58 <HAL_ADC_MspInit+0x1a0>)
 8002c50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c54:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c56:	4b40      	ldr	r3, [pc, #256]	; (8002d58 <HAL_ADC_MspInit+0x1a0>)
 8002c58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002c5e:	4b3e      	ldr	r3, [pc, #248]	; (8002d58 <HAL_ADC_MspInit+0x1a0>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c64:	4b3c      	ldr	r3, [pc, #240]	; (8002d58 <HAL_ADC_MspInit+0x1a0>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c6a:	4b3b      	ldr	r3, [pc, #236]	; (8002d58 <HAL_ADC_MspInit+0x1a0>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c70:	4839      	ldr	r0, [pc, #228]	; (8002d58 <HAL_ADC_MspInit+0x1a0>)
 8002c72:	f002 fd13 	bl	800569c <HAL_DMA_Init>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8002c7c:	f7ff ff1a 	bl	8002ab4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a35      	ldr	r2, [pc, #212]	; (8002d58 <HAL_ADC_MspInit+0x1a0>)
 8002c84:	659a      	str	r2, [r3, #88]	; 0x58
 8002c86:	4a34      	ldr	r2, [pc, #208]	; (8002d58 <HAL_ADC_MspInit+0x1a0>)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002c8c:	e059      	b.n	8002d42 <HAL_ADC_MspInit+0x18a>
  else if(hadc->Instance==ADC3)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a33      	ldr	r2, [pc, #204]	; (8002d60 <HAL_ADC_MspInit+0x1a8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d154      	bne.n	8002d42 <HAL_ADC_MspInit+0x18a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002c98:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <HAL_ADC_MspInit+0x198>)
 8002c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9e:	4a2c      	ldr	r2, [pc, #176]	; (8002d50 <HAL_ADC_MspInit+0x198>)
 8002ca0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca8:	4b29      	ldr	r3, [pc, #164]	; (8002d50 <HAL_ADC_MspInit+0x198>)
 8002caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb6:	4b26      	ldr	r3, [pc, #152]	; (8002d50 <HAL_ADC_MspInit+0x198>)
 8002cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cbc:	4a24      	ldr	r2, [pc, #144]	; (8002d50 <HAL_ADC_MspInit+0x198>)
 8002cbe:	f043 0304 	orr.w	r3, r3, #4
 8002cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cc6:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <HAL_ADC_MspInit+0x198>)
 8002cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002cd4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002cd8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002cdc:	f001 f848 	bl	8003d70 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA2_Stream7;
 8002ce0:	4b20      	ldr	r3, [pc, #128]	; (8002d64 <HAL_ADC_MspInit+0x1ac>)
 8002ce2:	4a21      	ldr	r2, [pc, #132]	; (8002d68 <HAL_ADC_MspInit+0x1b0>)
 8002ce4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002ce6:	4b1f      	ldr	r3, [pc, #124]	; (8002d64 <HAL_ADC_MspInit+0x1ac>)
 8002ce8:	2273      	movs	r2, #115	; 0x73
 8002cea:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cec:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <HAL_ADC_MspInit+0x1ac>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cf2:	4b1c      	ldr	r3, [pc, #112]	; (8002d64 <HAL_ADC_MspInit+0x1ac>)
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002cf8:	4b1a      	ldr	r3, [pc, #104]	; (8002d64 <HAL_ADC_MspInit+0x1ac>)
 8002cfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002cfe:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d00:	4b18      	ldr	r3, [pc, #96]	; (8002d64 <HAL_ADC_MspInit+0x1ac>)
 8002d02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d06:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d08:	4b16      	ldr	r3, [pc, #88]	; (8002d64 <HAL_ADC_MspInit+0x1ac>)
 8002d0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d0e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002d10:	4b14      	ldr	r3, [pc, #80]	; (8002d64 <HAL_ADC_MspInit+0x1ac>)
 8002d12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d16:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002d18:	4b12      	ldr	r3, [pc, #72]	; (8002d64 <HAL_ADC_MspInit+0x1ac>)
 8002d1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d1e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d20:	4b10      	ldr	r3, [pc, #64]	; (8002d64 <HAL_ADC_MspInit+0x1ac>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002d26:	480f      	ldr	r0, [pc, #60]	; (8002d64 <HAL_ADC_MspInit+0x1ac>)
 8002d28:	f002 fcb8 	bl	800569c <HAL_DMA_Init>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_ADC_MspInit+0x17e>
      Error_Handler();
 8002d32:	f7ff febf 	bl	8002ab4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <HAL_ADC_MspInit+0x1ac>)
 8002d3a:	659a      	str	r2, [r3, #88]	; 0x58
 8002d3c:	4a09      	ldr	r2, [pc, #36]	; (8002d64 <HAL_ADC_MspInit+0x1ac>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002d42:	bf00      	nop
 8002d44:	3730      	adds	r7, #48	; 0x30
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40022000 	.word	0x40022000
 8002d50:	58024400 	.word	0x58024400
 8002d54:	58020800 	.word	0x58020800
 8002d58:	24000de0 	.word	0x24000de0
 8002d5c:	40020088 	.word	0x40020088
 8002d60:	58026000 	.word	0x58026000
 8002d64:	24000e58 	.word	0x24000e58
 8002d68:	400204b8 	.word	0x400204b8

08002d6c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b0b8      	sub	sp, #224	; 0xe0
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d74:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	609a      	str	r2, [r3, #8]
 8002d80:	60da      	str	r2, [r3, #12]
 8002d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d84:	f107 0310 	add.w	r3, r7, #16
 8002d88:	22b8      	movs	r2, #184	; 0xb8
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f014 fceb 	bl	8017768 <memset>
  if(hfdcan->Instance==FDCAN3)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a26      	ldr	r2, [pc, #152]	; (8002e30 <HAL_FDCAN_MspInit+0xc4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d145      	bne.n	8002e28 <HAL_FDCAN_MspInit+0xbc>

  /* USER CODE END FDCAN3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002d9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8002da8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002dac:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dae:	f107 0310 	add.w	r3, r7, #16
 8002db2:	4618      	mov	r0, r3
 8002db4:	f007 fe98 	bl	800aae8 <HAL_RCCEx_PeriphCLKConfig>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_FDCAN_MspInit+0x56>
    {
      Error_Handler();
 8002dbe:	f7ff fe79 	bl	8002ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <HAL_FDCAN_MspInit+0xc8>)
 8002dc4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002dc8:	4a1a      	ldr	r2, [pc, #104]	; (8002e34 <HAL_FDCAN_MspInit+0xc8>)
 8002dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dce:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8002dd2:	4b18      	ldr	r3, [pc, #96]	; (8002e34 <HAL_FDCAN_MspInit+0xc8>)
 8002dd4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002dd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002de0:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <HAL_FDCAN_MspInit+0xc8>)
 8002de2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002de6:	4a13      	ldr	r2, [pc, #76]	; (8002e34 <HAL_FDCAN_MspInit+0xc8>)
 8002de8:	f043 0320 	orr.w	r3, r3, #32
 8002dec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002df0:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <HAL_FDCAN_MspInit+0xc8>)
 8002df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	60bb      	str	r3, [r7, #8]
 8002dfc:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN3 GPIO Configuration
    PF6     ------> FDCAN3_RX
    PF7     ------> FDCAN3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dfe:	23c0      	movs	r3, #192	; 0xc0
 8002e00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e04:	2302      	movs	r3, #2
 8002e06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e10:	2300      	movs	r3, #0
 8002e12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF2_FDCAN3;
 8002e16:	2302      	movs	r3, #2
 8002e18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e20:	4619      	mov	r1, r3
 8002e22:	4805      	ldr	r0, [pc, #20]	; (8002e38 <HAL_FDCAN_MspInit+0xcc>)
 8002e24:	f005 f872 	bl	8007f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN3_MspInit 1 */

  /* USER CODE END FDCAN3_MspInit 1 */
  }

}
 8002e28:	bf00      	nop
 8002e2a:	37e0      	adds	r7, #224	; 0xe0
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	4000d400 	.word	0x4000d400
 8002e34:	58024400 	.word	0x58024400
 8002e38:	58021400 	.word	0x58021400

08002e3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b0b8      	sub	sp, #224	; 0xe0
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e44:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e54:	f107 0310 	add.w	r3, r7, #16
 8002e58:	22b8      	movs	r2, #184	; 0xb8
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f014 fc83 	bl	8017768 <memset>
  if(hi2c->Instance==I2C2)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a2a      	ldr	r2, [pc, #168]	; (8002f10 <HAL_I2C_MspInit+0xd4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d14d      	bne.n	8002f08 <HAL_I2C_MspInit+0xcc>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002e6c:	f04f 0208 	mov.w	r2, #8
 8002e70:	f04f 0300 	mov.w	r3, #0
 8002e74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e7e:	f107 0310 	add.w	r3, r7, #16
 8002e82:	4618      	mov	r0, r3
 8002e84:	f007 fe30 	bl	800aae8 <HAL_RCCEx_PeriphCLKConfig>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002e8e:	f7ff fe11 	bl	8002ab4 <Error_Handler>
    }

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e92:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <HAL_I2C_MspInit+0xd8>)
 8002e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e98:	4a1e      	ldr	r2, [pc, #120]	; (8002f14 <HAL_I2C_MspInit+0xd8>)
 8002e9a:	f043 0320 	orr.w	r3, r3, #32
 8002e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ea2:	4b1c      	ldr	r3, [pc, #112]	; (8002f14 <HAL_I2C_MspInit+0xd8>)
 8002ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eb6:	2312      	movs	r3, #18
 8002eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002ec8:	2304      	movs	r3, #4
 8002eca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ece:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	4810      	ldr	r0, [pc, #64]	; (8002f18 <HAL_I2C_MspInit+0xdc>)
 8002ed6:	f005 f819 	bl	8007f0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002eda:	4b0e      	ldr	r3, [pc, #56]	; (8002f14 <HAL_I2C_MspInit+0xd8>)
 8002edc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ee0:	4a0c      	ldr	r2, [pc, #48]	; (8002f14 <HAL_I2C_MspInit+0xd8>)
 8002ee2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ee6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002eea:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <HAL_I2C_MspInit+0xd8>)
 8002eec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002ef0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2101      	movs	r1, #1
 8002efc:	2021      	movs	r0, #33	; 0x21
 8002efe:	f002 fb98 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8002f02:	2021      	movs	r0, #33	; 0x21
 8002f04:	f002 fbaf 	bl	8005666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002f08:	bf00      	nop
 8002f0a:	37e0      	adds	r7, #224	; 0xe0
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40005800 	.word	0x40005800
 8002f14:	58024400 	.word	0x58024400
 8002f18:	58021400 	.word	0x58021400

08002f1c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b0b2      	sub	sp, #200	; 0xc8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f24:	f107 0310 	add.w	r3, r7, #16
 8002f28:	22b8      	movs	r2, #184	; 0xb8
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f014 fc1b 	bl	8017768 <memset>
  if(hrng->Instance==RNG)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a14      	ldr	r2, [pc, #80]	; (8002f88 <HAL_RNG_MspInit+0x6c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d121      	bne.n	8002f80 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8002f3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f4e:	f107 0310 	add.w	r3, r7, #16
 8002f52:	4618      	mov	r0, r3
 8002f54:	f007 fdc8 	bl	800aae8 <HAL_RCCEx_PeriphCLKConfig>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8002f5e:	f7ff fda9 	bl	8002ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <HAL_RNG_MspInit+0x70>)
 8002f64:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002f68:	4a08      	ldr	r2, [pc, #32]	; (8002f8c <HAL_RNG_MspInit+0x70>)
 8002f6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f6e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_RNG_MspInit+0x70>)
 8002f74:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7c:	60fb      	str	r3, [r7, #12]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8002f80:	bf00      	nop
 8002f82:	37c8      	adds	r7, #200	; 0xc8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	48021800 	.word	0x48021800
 8002f8c:	58024400 	.word	0x58024400

08002f90 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b0ba      	sub	sp, #232	; 0xe8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	605a      	str	r2, [r3, #4]
 8002fa2:	609a      	str	r2, [r3, #8]
 8002fa4:	60da      	str	r2, [r3, #12]
 8002fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fa8:	f107 0318 	add.w	r3, r7, #24
 8002fac:	22b8      	movs	r2, #184	; 0xb8
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f014 fbd9 	bl	8017768 <memset>
  if(hsd->Instance==SDMMC2)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a5d      	ldr	r2, [pc, #372]	; (8003130 <HAL_SD_MspInit+0x1a0>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	f040 80b3 	bne.w	8003128 <HAL_SD_MspInit+0x198>

  /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8002fc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fc6:	f04f 0300 	mov.w	r3, #0
 8002fca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fd2:	f107 0318 	add.w	r3, r7, #24
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f007 fd86 	bl	800aae8 <HAL_RCCEx_PeriphCLKConfig>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8002fe2:	f7ff fd67 	bl	8002ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8002fe6:	4b53      	ldr	r3, [pc, #332]	; (8003134 <HAL_SD_MspInit+0x1a4>)
 8002fe8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002fec:	4a51      	ldr	r2, [pc, #324]	; (8003134 <HAL_SD_MspInit+0x1a4>)
 8002fee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ff2:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8002ff6:	4b4f      	ldr	r3, [pc, #316]	; (8003134 <HAL_SD_MspInit+0x1a4>)
 8002ff8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002ffc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003004:	4b4b      	ldr	r3, [pc, #300]	; (8003134 <HAL_SD_MspInit+0x1a4>)
 8003006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800300a:	4a4a      	ldr	r2, [pc, #296]	; (8003134 <HAL_SD_MspInit+0x1a4>)
 800300c:	f043 0308 	orr.w	r3, r3, #8
 8003010:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003014:	4b47      	ldr	r3, [pc, #284]	; (8003134 <HAL_SD_MspInit+0x1a4>)
 8003016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	613b      	str	r3, [r7, #16]
 8003020:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003022:	4b44      	ldr	r3, [pc, #272]	; (8003134 <HAL_SD_MspInit+0x1a4>)
 8003024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003028:	4a42      	ldr	r2, [pc, #264]	; (8003134 <HAL_SD_MspInit+0x1a4>)
 800302a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800302e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003032:	4b40      	ldr	r3, [pc, #256]	; (8003134 <HAL_SD_MspInit+0x1a4>)
 8003034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303c:	60fb      	str	r3, [r7, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PG12     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003040:	2340      	movs	r3, #64	; 0x40
 8003042:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003046:	2302      	movs	r3, #2
 8003048:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304c:	2300      	movs	r3, #0
 800304e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003052:	2303      	movs	r3, #3
 8003054:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003058:	230b      	movs	r3, #11
 800305a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800305e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003062:	4619      	mov	r1, r3
 8003064:	4834      	ldr	r0, [pc, #208]	; (8003138 <HAL_SD_MspInit+0x1a8>)
 8003066:	f004 ff51 	bl	8007f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800306a:	2380      	movs	r3, #128	; 0x80
 800306c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003070:	2302      	movs	r3, #2
 8003072:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003076:	2301      	movs	r3, #1
 8003078:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307c:	2303      	movs	r3, #3
 800307e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8003082:	230b      	movs	r3, #11
 8003084:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003088:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800308c:	4619      	mov	r1, r3
 800308e:	482a      	ldr	r0, [pc, #168]	; (8003138 <HAL_SD_MspInit+0x1a8>)
 8003090:	f004 ff3c 	bl	8007f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003098:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309c:	2302      	movs	r3, #2
 800309e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030a2:	2301      	movs	r3, #1
 80030a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030a8:	2303      	movs	r3, #3
 80030aa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80030ae:	230b      	movs	r3, #11
 80030b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030b4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030b8:	4619      	mov	r1, r3
 80030ba:	4820      	ldr	r0, [pc, #128]	; (800313c <HAL_SD_MspInit+0x1ac>)
 80030bc:	f004 ff26 	bl	8007f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80030c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c8:	2302      	movs	r3, #2
 80030ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d4:	2303      	movs	r3, #3
 80030d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80030da:	230b      	movs	r3, #11
 80030dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80030e4:	4619      	mov	r1, r3
 80030e6:	4815      	ldr	r0, [pc, #84]	; (800313c <HAL_SD_MspInit+0x1ac>)
 80030e8:	f004 ff10 	bl	8007f0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80030ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80030f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f4:	2302      	movs	r3, #2
 80030f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030fa:	2300      	movs	r3, #0
 80030fc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003100:	2303      	movs	r3, #3
 8003102:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8003106:	230a      	movs	r3, #10
 8003108:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800310c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003110:	4619      	mov	r1, r3
 8003112:	480a      	ldr	r0, [pc, #40]	; (800313c <HAL_SD_MspInit+0x1ac>)
 8003114:	f004 fefa 	bl	8007f0c <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8003118:	2200      	movs	r2, #0
 800311a:	2100      	movs	r1, #0
 800311c:	207c      	movs	r0, #124	; 0x7c
 800311e:	f002 fa88 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8003122:	207c      	movs	r0, #124	; 0x7c
 8003124:	f002 fa9f 	bl	8005666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8003128:	bf00      	nop
 800312a:	37e8      	adds	r7, #232	; 0xe8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	48022400 	.word	0x48022400
 8003134:	58024400 	.word	0x58024400
 8003138:	58020c00 	.word	0x58020c00
 800313c:	58021800 	.word	0x58021800

08003140 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08e      	sub	sp, #56	; 0x38
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003148:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a4f      	ldr	r2, [pc, #316]	; (800329c <HAL_SPI_MspInit+0x15c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d12e      	bne.n	80031c0 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003162:	4b4f      	ldr	r3, [pc, #316]	; (80032a0 <HAL_SPI_MspInit+0x160>)
 8003164:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003168:	4a4d      	ldr	r2, [pc, #308]	; (80032a0 <HAL_SPI_MspInit+0x160>)
 800316a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800316e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003172:	4b4b      	ldr	r3, [pc, #300]	; (80032a0 <HAL_SPI_MspInit+0x160>)
 8003174:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800317c:	623b      	str	r3, [r7, #32]
 800317e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003180:	4b47      	ldr	r3, [pc, #284]	; (80032a0 <HAL_SPI_MspInit+0x160>)
 8003182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003186:	4a46      	ldr	r2, [pc, #280]	; (80032a0 <HAL_SPI_MspInit+0x160>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003190:	4b43      	ldr	r3, [pc, #268]	; (80032a0 <HAL_SPI_MspInit+0x160>)
 8003192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	61fb      	str	r3, [r7, #28]
 800319c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800319e:	23e0      	movs	r3, #224	; 0xe0
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a2:	2302      	movs	r3, #2
 80031a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a6:	2300      	movs	r3, #0
 80031a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031aa:	2300      	movs	r3, #0
 80031ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031ae:	2305      	movs	r3, #5
 80031b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031b6:	4619      	mov	r1, r3
 80031b8:	483a      	ldr	r0, [pc, #232]	; (80032a4 <HAL_SPI_MspInit+0x164>)
 80031ba:	f004 fea7 	bl	8007f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80031be:	e068      	b.n	8003292 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a38      	ldr	r2, [pc, #224]	; (80032a8 <HAL_SPI_MspInit+0x168>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d12f      	bne.n	800322a <HAL_SPI_MspInit+0xea>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80031ca:	4b35      	ldr	r3, [pc, #212]	; (80032a0 <HAL_SPI_MspInit+0x160>)
 80031cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031d0:	4a33      	ldr	r2, [pc, #204]	; (80032a0 <HAL_SPI_MspInit+0x160>)
 80031d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80031da:	4b31      	ldr	r3, [pc, #196]	; (80032a0 <HAL_SPI_MspInit+0x160>)
 80031dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031e4:	61bb      	str	r3, [r7, #24]
 80031e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031e8:	4b2d      	ldr	r3, [pc, #180]	; (80032a0 <HAL_SPI_MspInit+0x160>)
 80031ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031ee:	4a2c      	ldr	r2, [pc, #176]	; (80032a0 <HAL_SPI_MspInit+0x160>)
 80031f0:	f043 0302 	orr.w	r3, r3, #2
 80031f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80031f8:	4b29      	ldr	r3, [pc, #164]	; (80032a0 <HAL_SPI_MspInit+0x160>)
 80031fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003206:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320c:	2302      	movs	r3, #2
 800320e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003210:	2300      	movs	r3, #0
 8003212:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003214:	2300      	movs	r3, #0
 8003216:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003218:	2305      	movs	r3, #5
 800321a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800321c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003220:	4619      	mov	r1, r3
 8003222:	4822      	ldr	r0, [pc, #136]	; (80032ac <HAL_SPI_MspInit+0x16c>)
 8003224:	f004 fe72 	bl	8007f0c <HAL_GPIO_Init>
}
 8003228:	e033      	b.n	8003292 <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI3)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a20      	ldr	r2, [pc, #128]	; (80032b0 <HAL_SPI_MspInit+0x170>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d12e      	bne.n	8003292 <HAL_SPI_MspInit+0x152>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003234:	4b1a      	ldr	r3, [pc, #104]	; (80032a0 <HAL_SPI_MspInit+0x160>)
 8003236:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800323a:	4a19      	ldr	r2, [pc, #100]	; (80032a0 <HAL_SPI_MspInit+0x160>)
 800323c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003240:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003244:	4b16      	ldr	r3, [pc, #88]	; (80032a0 <HAL_SPI_MspInit+0x160>)
 8003246:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800324a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800324e:	613b      	str	r3, [r7, #16]
 8003250:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003252:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <HAL_SPI_MspInit+0x160>)
 8003254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003258:	4a11      	ldr	r2, [pc, #68]	; (80032a0 <HAL_SPI_MspInit+0x160>)
 800325a:	f043 0304 	orr.w	r3, r3, #4
 800325e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003262:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <HAL_SPI_MspInit+0x160>)
 8003264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	60fb      	str	r3, [r7, #12]
 800326e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8003270:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003276:	2302      	movs	r3, #2
 8003278:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327a:	2300      	movs	r3, #0
 800327c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800327e:	2300      	movs	r3, #0
 8003280:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003282:	2306      	movs	r3, #6
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800328a:	4619      	mov	r1, r3
 800328c:	4809      	ldr	r0, [pc, #36]	; (80032b4 <HAL_SPI_MspInit+0x174>)
 800328e:	f004 fe3d 	bl	8007f0c <HAL_GPIO_Init>
}
 8003292:	bf00      	nop
 8003294:	3738      	adds	r7, #56	; 0x38
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40013000 	.word	0x40013000
 80032a0:	58024400 	.word	0x58024400
 80032a4:	58020000 	.word	0x58020000
 80032a8:	40003800 	.word	0x40003800
 80032ac:	58020400 	.word	0x58020400
 80032b0:	40003c00 	.word	0x40003c00
 80032b4:	58020800 	.word	0x58020800

080032b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b08c      	sub	sp, #48	; 0x30
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	f107 031c 	add.w	r3, r7, #28
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d8:	d15d      	bne.n	8003396 <HAL_TIM_PWM_MspInit+0xde>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032da:	4b8e      	ldr	r3, [pc, #568]	; (8003514 <HAL_TIM_PWM_MspInit+0x25c>)
 80032dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032e0:	4a8c      	ldr	r2, [pc, #560]	; (8003514 <HAL_TIM_PWM_MspInit+0x25c>)
 80032e2:	f043 0301 	orr.w	r3, r3, #1
 80032e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80032ea:	4b8a      	ldr	r3, [pc, #552]	; (8003514 <HAL_TIM_PWM_MspInit+0x25c>)
 80032ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80032f0:	f003 0301 	and.w	r3, r3, #1
 80032f4:	61bb      	str	r3, [r7, #24]
 80032f6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f8:	4b86      	ldr	r3, [pc, #536]	; (8003514 <HAL_TIM_PWM_MspInit+0x25c>)
 80032fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032fe:	4a85      	ldr	r2, [pc, #532]	; (8003514 <HAL_TIM_PWM_MspInit+0x25c>)
 8003300:	f043 0301 	orr.w	r3, r3, #1
 8003304:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003308:	4b82      	ldr	r3, [pc, #520]	; (8003514 <HAL_TIM_PWM_MspInit+0x25c>)
 800330a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003316:	2301      	movs	r3, #1
 8003318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331a:	2302      	movs	r3, #2
 800331c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331e:	2300      	movs	r3, #0
 8003320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003322:	2300      	movs	r3, #0
 8003324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003326:	2301      	movs	r3, #1
 8003328:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332a:	f107 031c 	add.w	r3, r7, #28
 800332e:	4619      	mov	r1, r3
 8003330:	4879      	ldr	r0, [pc, #484]	; (8003518 <HAL_TIM_PWM_MspInit+0x260>)
 8003332:	f004 fdeb 	bl	8007f0c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8003336:	4b79      	ldr	r3, [pc, #484]	; (800351c <HAL_TIM_PWM_MspInit+0x264>)
 8003338:	4a79      	ldr	r2, [pc, #484]	; (8003520 <HAL_TIM_PWM_MspInit+0x268>)
 800333a:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 800333c:	4b77      	ldr	r3, [pc, #476]	; (800351c <HAL_TIM_PWM_MspInit+0x264>)
 800333e:	2214      	movs	r2, #20
 8003340:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003342:	4b76      	ldr	r3, [pc, #472]	; (800351c <HAL_TIM_PWM_MspInit+0x264>)
 8003344:	2240      	movs	r2, #64	; 0x40
 8003346:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003348:	4b74      	ldr	r3, [pc, #464]	; (800351c <HAL_TIM_PWM_MspInit+0x264>)
 800334a:	2200      	movs	r2, #0
 800334c:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800334e:	4b73      	ldr	r3, [pc, #460]	; (800351c <HAL_TIM_PWM_MspInit+0x264>)
 8003350:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003354:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003356:	4b71      	ldr	r3, [pc, #452]	; (800351c <HAL_TIM_PWM_MspInit+0x264>)
 8003358:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800335c:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800335e:	4b6f      	ldr	r3, [pc, #444]	; (800351c <HAL_TIM_PWM_MspInit+0x264>)
 8003360:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003364:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8003366:	4b6d      	ldr	r3, [pc, #436]	; (800351c <HAL_TIM_PWM_MspInit+0x264>)
 8003368:	2200      	movs	r2, #0
 800336a:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800336c:	4b6b      	ldr	r3, [pc, #428]	; (800351c <HAL_TIM_PWM_MspInit+0x264>)
 800336e:	2200      	movs	r2, #0
 8003370:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003372:	4b6a      	ldr	r3, [pc, #424]	; (800351c <HAL_TIM_PWM_MspInit+0x264>)
 8003374:	2200      	movs	r2, #0
 8003376:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8003378:	4868      	ldr	r0, [pc, #416]	; (800351c <HAL_TIM_PWM_MspInit+0x264>)
 800337a:	f002 f98f 	bl	800569c <HAL_DMA_Init>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_TIM_PWM_MspInit+0xd0>
    {
      Error_Handler();
 8003384:	f7ff fb96 	bl	8002ab4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a64      	ldr	r2, [pc, #400]	; (800351c <HAL_TIM_PWM_MspInit+0x264>)
 800338c:	62da      	str	r2, [r3, #44]	; 0x2c
 800338e:	4a63      	ldr	r2, [pc, #396]	; (800351c <HAL_TIM_PWM_MspInit+0x264>)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003394:	e119      	b.n	80035ca <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM3)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a62      	ldr	r2, [pc, #392]	; (8003524 <HAL_TIM_PWM_MspInit+0x26c>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d16d      	bne.n	800347c <HAL_TIM_PWM_MspInit+0x1c4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033a0:	4b5c      	ldr	r3, [pc, #368]	; (8003514 <HAL_TIM_PWM_MspInit+0x25c>)
 80033a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033a6:	4a5b      	ldr	r2, [pc, #364]	; (8003514 <HAL_TIM_PWM_MspInit+0x25c>)
 80033a8:	f043 0302 	orr.w	r3, r3, #2
 80033ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80033b0:	4b58      	ldr	r3, [pc, #352]	; (8003514 <HAL_TIM_PWM_MspInit+0x25c>)
 80033b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	613b      	str	r3, [r7, #16]
 80033bc:	693b      	ldr	r3, [r7, #16]
    hdma_tim3_ch2.Instance = DMA1_Stream3;
 80033be:	4b5a      	ldr	r3, [pc, #360]	; (8003528 <HAL_TIM_PWM_MspInit+0x270>)
 80033c0:	4a5a      	ldr	r2, [pc, #360]	; (800352c <HAL_TIM_PWM_MspInit+0x274>)
 80033c2:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Request = DMA_REQUEST_TIM3_CH2;
 80033c4:	4b58      	ldr	r3, [pc, #352]	; (8003528 <HAL_TIM_PWM_MspInit+0x270>)
 80033c6:	2218      	movs	r2, #24
 80033c8:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033ca:	4b57      	ldr	r3, [pc, #348]	; (8003528 <HAL_TIM_PWM_MspInit+0x270>)
 80033cc:	2240      	movs	r2, #64	; 0x40
 80033ce:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80033d0:	4b55      	ldr	r3, [pc, #340]	; (8003528 <HAL_TIM_PWM_MspInit+0x270>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80033d6:	4b54      	ldr	r3, [pc, #336]	; (8003528 <HAL_TIM_PWM_MspInit+0x270>)
 80033d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80033dc:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80033de:	4b52      	ldr	r3, [pc, #328]	; (8003528 <HAL_TIM_PWM_MspInit+0x270>)
 80033e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80033e4:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80033e6:	4b50      	ldr	r3, [pc, #320]	; (8003528 <HAL_TIM_PWM_MspInit+0x270>)
 80033e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80033ec:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 80033ee:	4b4e      	ldr	r3, [pc, #312]	; (8003528 <HAL_TIM_PWM_MspInit+0x270>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 80033f4:	4b4c      	ldr	r3, [pc, #304]	; (8003528 <HAL_TIM_PWM_MspInit+0x270>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033fa:	4b4b      	ldr	r3, [pc, #300]	; (8003528 <HAL_TIM_PWM_MspInit+0x270>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003400:	4849      	ldr	r0, [pc, #292]	; (8003528 <HAL_TIM_PWM_MspInit+0x270>)
 8003402:	f002 f94b 	bl	800569c <HAL_DMA_Init>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_TIM_PWM_MspInit+0x158>
      Error_Handler();
 800340c:	f7ff fb52 	bl	8002ab4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	4a45      	ldr	r2, [pc, #276]	; (8003528 <HAL_TIM_PWM_MspInit+0x270>)
 8003414:	629a      	str	r2, [r3, #40]	; 0x28
 8003416:	4a44      	ldr	r2, [pc, #272]	; (8003528 <HAL_TIM_PWM_MspInit+0x270>)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_tim3_ch1.Instance = DMA1_Stream4;
 800341c:	4b44      	ldr	r3, [pc, #272]	; (8003530 <HAL_TIM_PWM_MspInit+0x278>)
 800341e:	4a45      	ldr	r2, [pc, #276]	; (8003534 <HAL_TIM_PWM_MspInit+0x27c>)
 8003420:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch1.Init.Request = DMA_REQUEST_TIM3_CH1;
 8003422:	4b43      	ldr	r3, [pc, #268]	; (8003530 <HAL_TIM_PWM_MspInit+0x278>)
 8003424:	2217      	movs	r2, #23
 8003426:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003428:	4b41      	ldr	r3, [pc, #260]	; (8003530 <HAL_TIM_PWM_MspInit+0x278>)
 800342a:	2240      	movs	r2, #64	; 0x40
 800342c:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800342e:	4b40      	ldr	r3, [pc, #256]	; (8003530 <HAL_TIM_PWM_MspInit+0x278>)
 8003430:	2200      	movs	r2, #0
 8003432:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003434:	4b3e      	ldr	r3, [pc, #248]	; (8003530 <HAL_TIM_PWM_MspInit+0x278>)
 8003436:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800343a:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800343c:	4b3c      	ldr	r3, [pc, #240]	; (8003530 <HAL_TIM_PWM_MspInit+0x278>)
 800343e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003442:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003444:	4b3a      	ldr	r3, [pc, #232]	; (8003530 <HAL_TIM_PWM_MspInit+0x278>)
 8003446:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800344a:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch1.Init.Mode = DMA_NORMAL;
 800344c:	4b38      	ldr	r3, [pc, #224]	; (8003530 <HAL_TIM_PWM_MspInit+0x278>)
 800344e:	2200      	movs	r2, #0
 8003450:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003452:	4b37      	ldr	r3, [pc, #220]	; (8003530 <HAL_TIM_PWM_MspInit+0x278>)
 8003454:	2200      	movs	r2, #0
 8003456:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003458:	4b35      	ldr	r3, [pc, #212]	; (8003530 <HAL_TIM_PWM_MspInit+0x278>)
 800345a:	2200      	movs	r2, #0
 800345c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch1) != HAL_OK)
 800345e:	4834      	ldr	r0, [pc, #208]	; (8003530 <HAL_TIM_PWM_MspInit+0x278>)
 8003460:	f002 f91c 	bl	800569c <HAL_DMA_Init>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_TIM_PWM_MspInit+0x1b6>
      Error_Handler();
 800346a:	f7ff fb23 	bl	8002ab4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim3_ch1);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a2f      	ldr	r2, [pc, #188]	; (8003530 <HAL_TIM_PWM_MspInit+0x278>)
 8003472:	625a      	str	r2, [r3, #36]	; 0x24
 8003474:	4a2e      	ldr	r2, [pc, #184]	; (8003530 <HAL_TIM_PWM_MspInit+0x278>)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6393      	str	r3, [r2, #56]	; 0x38
}
 800347a:	e0a6      	b.n	80035ca <HAL_TIM_PWM_MspInit+0x312>
  else if(htim_pwm->Instance==TIM4)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a2d      	ldr	r2, [pc, #180]	; (8003538 <HAL_TIM_PWM_MspInit+0x280>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d15e      	bne.n	8003544 <HAL_TIM_PWM_MspInit+0x28c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003486:	4b23      	ldr	r3, [pc, #140]	; (8003514 <HAL_TIM_PWM_MspInit+0x25c>)
 8003488:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800348c:	4a21      	ldr	r2, [pc, #132]	; (8003514 <HAL_TIM_PWM_MspInit+0x25c>)
 800348e:	f043 0304 	orr.w	r3, r3, #4
 8003492:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003496:	4b1f      	ldr	r3, [pc, #124]	; (8003514 <HAL_TIM_PWM_MspInit+0x25c>)
 8003498:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	60fb      	str	r3, [r7, #12]
 80034a2:	68fb      	ldr	r3, [r7, #12]
    hdma_tim4_ch3.Instance = DMA1_Stream0;
 80034a4:	4b25      	ldr	r3, [pc, #148]	; (800353c <HAL_TIM_PWM_MspInit+0x284>)
 80034a6:	4a26      	ldr	r2, [pc, #152]	; (8003540 <HAL_TIM_PWM_MspInit+0x288>)
 80034a8:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Request = DMA_REQUEST_TIM4_CH3;
 80034aa:	4b24      	ldr	r3, [pc, #144]	; (800353c <HAL_TIM_PWM_MspInit+0x284>)
 80034ac:	221f      	movs	r2, #31
 80034ae:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034b0:	4b22      	ldr	r3, [pc, #136]	; (800353c <HAL_TIM_PWM_MspInit+0x284>)
 80034b2:	2240      	movs	r2, #64	; 0x40
 80034b4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80034b6:	4b21      	ldr	r3, [pc, #132]	; (800353c <HAL_TIM_PWM_MspInit+0x284>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80034bc:	4b1f      	ldr	r3, [pc, #124]	; (800353c <HAL_TIM_PWM_MspInit+0x284>)
 80034be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034c2:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034c4:	4b1d      	ldr	r3, [pc, #116]	; (800353c <HAL_TIM_PWM_MspInit+0x284>)
 80034c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034ca:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034cc:	4b1b      	ldr	r3, [pc, #108]	; (800353c <HAL_TIM_PWM_MspInit+0x284>)
 80034ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034d2:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80034d4:	4b19      	ldr	r3, [pc, #100]	; (800353c <HAL_TIM_PWM_MspInit+0x284>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80034da:	4b18      	ldr	r3, [pc, #96]	; (800353c <HAL_TIM_PWM_MspInit+0x284>)
 80034dc:	2200      	movs	r2, #0
 80034de:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034e0:	4b16      	ldr	r3, [pc, #88]	; (800353c <HAL_TIM_PWM_MspInit+0x284>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 80034e6:	4815      	ldr	r0, [pc, #84]	; (800353c <HAL_TIM_PWM_MspInit+0x284>)
 80034e8:	f002 f8d8 	bl	800569c <HAL_DMA_Init>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_TIM_PWM_MspInit+0x23e>
      Error_Handler();
 80034f2:	f7ff fadf 	bl	8002ab4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a10      	ldr	r2, [pc, #64]	; (800353c <HAL_TIM_PWM_MspInit+0x284>)
 80034fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80034fc:	4a0f      	ldr	r2, [pc, #60]	; (800353c <HAL_TIM_PWM_MspInit+0x284>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003502:	2200      	movs	r2, #0
 8003504:	2100      	movs	r1, #0
 8003506:	201e      	movs	r0, #30
 8003508:	f002 f893 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800350c:	201e      	movs	r0, #30
 800350e:	f002 f8aa 	bl	8005666 <HAL_NVIC_EnableIRQ>
}
 8003512:	e05a      	b.n	80035ca <HAL_TIM_PWM_MspInit+0x312>
 8003514:	58024400 	.word	0x58024400
 8003518:	58020000 	.word	0x58020000
 800351c:	24001354 	.word	0x24001354
 8003520:	40020028 	.word	0x40020028
 8003524:	40000400 	.word	0x40000400
 8003528:	240013cc 	.word	0x240013cc
 800352c:	40020058 	.word	0x40020058
 8003530:	24001444 	.word	0x24001444
 8003534:	40020070 	.word	0x40020070
 8003538:	40000800 	.word	0x40000800
 800353c:	240014bc 	.word	0x240014bc
 8003540:	40020010 	.word	0x40020010
  else if(htim_pwm->Instance==TIM5)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a22      	ldr	r2, [pc, #136]	; (80035d4 <HAL_TIM_PWM_MspInit+0x31c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d13d      	bne.n	80035ca <HAL_TIM_PWM_MspInit+0x312>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800354e:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <HAL_TIM_PWM_MspInit+0x320>)
 8003550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003554:	4a20      	ldr	r2, [pc, #128]	; (80035d8 <HAL_TIM_PWM_MspInit+0x320>)
 8003556:	f043 0308 	orr.w	r3, r3, #8
 800355a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800355e:	4b1e      	ldr	r3, [pc, #120]	; (80035d8 <HAL_TIM_PWM_MspInit+0x320>)
 8003560:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	60bb      	str	r3, [r7, #8]
 800356a:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream2;
 800356c:	4b1b      	ldr	r3, [pc, #108]	; (80035dc <HAL_TIM_PWM_MspInit+0x324>)
 800356e:	4a1c      	ldr	r2, [pc, #112]	; (80035e0 <HAL_TIM_PWM_MspInit+0x328>)
 8003570:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8003572:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <HAL_TIM_PWM_MspInit+0x324>)
 8003574:	223a      	movs	r2, #58	; 0x3a
 8003576:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003578:	4b18      	ldr	r3, [pc, #96]	; (80035dc <HAL_TIM_PWM_MspInit+0x324>)
 800357a:	2240      	movs	r2, #64	; 0x40
 800357c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800357e:	4b17      	ldr	r3, [pc, #92]	; (80035dc <HAL_TIM_PWM_MspInit+0x324>)
 8003580:	2200      	movs	r2, #0
 8003582:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8003584:	4b15      	ldr	r3, [pc, #84]	; (80035dc <HAL_TIM_PWM_MspInit+0x324>)
 8003586:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800358a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800358c:	4b13      	ldr	r3, [pc, #76]	; (80035dc <HAL_TIM_PWM_MspInit+0x324>)
 800358e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003592:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003594:	4b11      	ldr	r3, [pc, #68]	; (80035dc <HAL_TIM_PWM_MspInit+0x324>)
 8003596:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800359a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 800359c:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <HAL_TIM_PWM_MspInit+0x324>)
 800359e:	2200      	movs	r2, #0
 80035a0:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_LOW;
 80035a2:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <HAL_TIM_PWM_MspInit+0x324>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <HAL_TIM_PWM_MspInit+0x324>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80035ae:	480b      	ldr	r0, [pc, #44]	; (80035dc <HAL_TIM_PWM_MspInit+0x324>)
 80035b0:	f002 f874 	bl	800569c <HAL_DMA_Init>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <HAL_TIM_PWM_MspInit+0x306>
      Error_Handler();
 80035ba:	f7ff fa7b 	bl	8002ab4 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a06      	ldr	r2, [pc, #24]	; (80035dc <HAL_TIM_PWM_MspInit+0x324>)
 80035c2:	631a      	str	r2, [r3, #48]	; 0x30
 80035c4:	4a05      	ldr	r2, [pc, #20]	; (80035dc <HAL_TIM_PWM_MspInit+0x324>)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6393      	str	r3, [r2, #56]	; 0x38
}
 80035ca:	bf00      	nop
 80035cc:	3730      	adds	r7, #48	; 0x30
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	40000c00 	.word	0x40000c00
 80035d8:	58024400 	.word	0x58024400
 80035dc:	24001534 	.word	0x24001534
 80035e0:	40020040 	.word	0x40020040

080035e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a0b      	ldr	r2, [pc, #44]	; (8003620 <HAL_TIM_Base_MspInit+0x3c>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d10e      	bne.n	8003614 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <HAL_TIM_Base_MspInit+0x40>)
 80035f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035fc:	4a09      	ldr	r2, [pc, #36]	; (8003624 <HAL_TIM_Base_MspInit+0x40>)
 80035fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003602:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003606:	4b07      	ldr	r3, [pc, #28]	; (8003624 <HAL_TIM_Base_MspInit+0x40>)
 8003608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800360c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8003614:	bf00      	nop
 8003616:	3714      	adds	r7, #20
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	40001c00 	.word	0x40001c00
 8003624:	58024400 	.word	0x58024400

08003628 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08c      	sub	sp, #48	; 0x30
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003630:	f107 031c 	add.w	r3, r7, #28
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	609a      	str	r2, [r3, #8]
 800363c:	60da      	str	r2, [r3, #12]
 800363e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003648:	d120      	bne.n	800368c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800364a:	4b52      	ldr	r3, [pc, #328]	; (8003794 <HAL_TIM_MspPostInit+0x16c>)
 800364c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003650:	4a50      	ldr	r2, [pc, #320]	; (8003794 <HAL_TIM_MspPostInit+0x16c>)
 8003652:	f043 0302 	orr.w	r3, r3, #2
 8003656:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800365a:	4b4e      	ldr	r3, [pc, #312]	; (8003794 <HAL_TIM_MspPostInit+0x16c>)
 800365c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003660:	f003 0302 	and.w	r3, r3, #2
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800366c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800366e:	2302      	movs	r3, #2
 8003670:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003672:	2302      	movs	r3, #2
 8003674:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003676:	2300      	movs	r3, #0
 8003678:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800367a:	2301      	movs	r3, #1
 800367c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800367e:	f107 031c 	add.w	r3, r7, #28
 8003682:	4619      	mov	r1, r3
 8003684:	4844      	ldr	r0, [pc, #272]	; (8003798 <HAL_TIM_MspPostInit+0x170>)
 8003686:	f004 fc41 	bl	8007f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800368a:	e07f      	b.n	800378c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM3)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a42      	ldr	r2, [pc, #264]	; (800379c <HAL_TIM_MspPostInit+0x174>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d11f      	bne.n	80036d6 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003696:	4b3f      	ldr	r3, [pc, #252]	; (8003794 <HAL_TIM_MspPostInit+0x16c>)
 8003698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800369c:	4a3d      	ldr	r2, [pc, #244]	; (8003794 <HAL_TIM_MspPostInit+0x16c>)
 800369e:	f043 0302 	orr.w	r3, r3, #2
 80036a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036a6:	4b3b      	ldr	r3, [pc, #236]	; (8003794 <HAL_TIM_MspPostInit+0x16c>)
 80036a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80036b4:	2330      	movs	r3, #48	; 0x30
 80036b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b8:	2302      	movs	r3, #2
 80036ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80036bc:	2302      	movs	r3, #2
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036c0:	2300      	movs	r3, #0
 80036c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80036c4:	2302      	movs	r3, #2
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036c8:	f107 031c 	add.w	r3, r7, #28
 80036cc:	4619      	mov	r1, r3
 80036ce:	4832      	ldr	r0, [pc, #200]	; (8003798 <HAL_TIM_MspPostInit+0x170>)
 80036d0:	f004 fc1c 	bl	8007f0c <HAL_GPIO_Init>
}
 80036d4:	e05a      	b.n	800378c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM4)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a31      	ldr	r2, [pc, #196]	; (80037a0 <HAL_TIM_MspPostInit+0x178>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d131      	bne.n	8003744 <HAL_TIM_MspPostInit+0x11c>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036e0:	4b2c      	ldr	r3, [pc, #176]	; (8003794 <HAL_TIM_MspPostInit+0x16c>)
 80036e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036e6:	4a2b      	ldr	r2, [pc, #172]	; (8003794 <HAL_TIM_MspPostInit+0x16c>)
 80036e8:	f043 0308 	orr.w	r3, r3, #8
 80036ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036f0:	4b28      	ldr	r3, [pc, #160]	; (8003794 <HAL_TIM_MspPostInit+0x16c>)
 80036f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036f6:	f003 0308 	and.w	r3, r3, #8
 80036fa:	613b      	str	r3, [r7, #16]
 80036fc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80036fe:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8003702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003704:	2302      	movs	r3, #2
 8003706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003708:	2300      	movs	r3, #0
 800370a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800370c:	2300      	movs	r3, #0
 800370e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003710:	2302      	movs	r3, #2
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003714:	f107 031c 	add.w	r3, r7, #28
 8003718:	4619      	mov	r1, r3
 800371a:	4822      	ldr	r0, [pc, #136]	; (80037a4 <HAL_TIM_MspPostInit+0x17c>)
 800371c:	f004 fbf6 	bl	8007f0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003720:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003724:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003726:	2302      	movs	r3, #2
 8003728:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800372a:	2302      	movs	r3, #2
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372e:	2300      	movs	r3, #0
 8003730:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003732:	2302      	movs	r3, #2
 8003734:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003736:	f107 031c 	add.w	r3, r7, #28
 800373a:	4619      	mov	r1, r3
 800373c:	4819      	ldr	r0, [pc, #100]	; (80037a4 <HAL_TIM_MspPostInit+0x17c>)
 800373e:	f004 fbe5 	bl	8007f0c <HAL_GPIO_Init>
}
 8003742:	e023      	b.n	800378c <HAL_TIM_MspPostInit+0x164>
  else if(htim->Instance==TIM5)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a17      	ldr	r2, [pc, #92]	; (80037a8 <HAL_TIM_MspPostInit+0x180>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d11e      	bne.n	800378c <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374e:	4b11      	ldr	r3, [pc, #68]	; (8003794 <HAL_TIM_MspPostInit+0x16c>)
 8003750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003754:	4a0f      	ldr	r2, [pc, #60]	; (8003794 <HAL_TIM_MspPostInit+0x16c>)
 8003756:	f043 0301 	orr.w	r3, r3, #1
 800375a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_TIM_MspPostInit+0x16c>)
 8003760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800376c:	2308      	movs	r3, #8
 800376e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003770:	2302      	movs	r3, #2
 8003772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003774:	2302      	movs	r3, #2
 8003776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003778:	2300      	movs	r3, #0
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800377c:	2302      	movs	r3, #2
 800377e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003780:	f107 031c 	add.w	r3, r7, #28
 8003784:	4619      	mov	r1, r3
 8003786:	4809      	ldr	r0, [pc, #36]	; (80037ac <HAL_TIM_MspPostInit+0x184>)
 8003788:	f004 fbc0 	bl	8007f0c <HAL_GPIO_Init>
}
 800378c:	bf00      	nop
 800378e:	3730      	adds	r7, #48	; 0x30
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	58024400 	.word	0x58024400
 8003798:	58020400 	.word	0x58020400
 800379c:	40000400 	.word	0x40000400
 80037a0:	40000800 	.word	0x40000800
 80037a4:	58020c00 	.word	0x58020c00
 80037a8:	40000c00 	.word	0x40000c00
 80037ac:	58020000 	.word	0x58020000

080037b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b0ba      	sub	sp, #232	; 0xe8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037b8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	609a      	str	r2, [r3, #8]
 80037c4:	60da      	str	r2, [r3, #12]
 80037c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80037c8:	f107 0318 	add.w	r3, r7, #24
 80037cc:	22b8      	movs	r2, #184	; 0xb8
 80037ce:	2100      	movs	r1, #0
 80037d0:	4618      	mov	r0, r3
 80037d2:	f013 ffc9 	bl	8017768 <memset>
  if(huart->Instance==UART4)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a4d      	ldr	r2, [pc, #308]	; (8003910 <HAL_UART_MspInit+0x160>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d147      	bne.n	8003870 <HAL_UART_MspInit+0xc0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80037e0:	f04f 0202 	mov.w	r2, #2
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80037ec:	2300      	movs	r3, #0
 80037ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037f2:	f107 0318 	add.w	r3, r7, #24
 80037f6:	4618      	mov	r0, r3
 80037f8:	f007 f976 	bl	800aae8 <HAL_RCCEx_PeriphCLKConfig>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8003802:	f7ff f957 	bl	8002ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003806:	4b43      	ldr	r3, [pc, #268]	; (8003914 <HAL_UART_MspInit+0x164>)
 8003808:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800380c:	4a41      	ldr	r2, [pc, #260]	; (8003914 <HAL_UART_MspInit+0x164>)
 800380e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003812:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003816:	4b3f      	ldr	r3, [pc, #252]	; (8003914 <HAL_UART_MspInit+0x164>)
 8003818:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800381c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003824:	4b3b      	ldr	r3, [pc, #236]	; (8003914 <HAL_UART_MspInit+0x164>)
 8003826:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800382a:	4a3a      	ldr	r2, [pc, #232]	; (8003914 <HAL_UART_MspInit+0x164>)
 800382c:	f043 0302 	orr.w	r3, r3, #2
 8003830:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003834:	4b37      	ldr	r3, [pc, #220]	; (8003914 <HAL_UART_MspInit+0x164>)
 8003836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003842:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003846:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384a:	2302      	movs	r3, #2
 800384c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003850:	2300      	movs	r3, #0
 8003852:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003856:	2300      	movs	r3, #0
 8003858:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800385c:	2308      	movs	r3, #8
 800385e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003862:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003866:	4619      	mov	r1, r3
 8003868:	482b      	ldr	r0, [pc, #172]	; (8003918 <HAL_UART_MspInit+0x168>)
 800386a:	f004 fb4f 	bl	8007f0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800386e:	e04a      	b.n	8003906 <HAL_UART_MspInit+0x156>
  else if(huart->Instance==USART6)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a29      	ldr	r2, [pc, #164]	; (800391c <HAL_UART_MspInit+0x16c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d145      	bne.n	8003906 <HAL_UART_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800387a:	f04f 0201 	mov.w	r2, #1
 800387e:	f04f 0300 	mov.w	r3, #0
 8003882:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 8003886:	2300      	movs	r3, #0
 8003888:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800388c:	f107 0318 	add.w	r3, r7, #24
 8003890:	4618      	mov	r0, r3
 8003892:	f007 f929 	bl	800aae8 <HAL_RCCEx_PeriphCLKConfig>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 800389c:	f7ff f90a 	bl	8002ab4 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 80038a0:	4b1c      	ldr	r3, [pc, #112]	; (8003914 <HAL_UART_MspInit+0x164>)
 80038a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038a6:	4a1b      	ldr	r2, [pc, #108]	; (8003914 <HAL_UART_MspInit+0x164>)
 80038a8:	f043 0320 	orr.w	r3, r3, #32
 80038ac:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80038b0:	4b18      	ldr	r3, [pc, #96]	; (8003914 <HAL_UART_MspInit+0x164>)
 80038b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038be:	4b15      	ldr	r3, [pc, #84]	; (8003914 <HAL_UART_MspInit+0x164>)
 80038c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038c4:	4a13      	ldr	r2, [pc, #76]	; (8003914 <HAL_UART_MspInit+0x164>)
 80038c6:	f043 0304 	orr.w	r3, r3, #4
 80038ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80038ce:	4b11      	ldr	r3, [pc, #68]	; (8003914 <HAL_UART_MspInit+0x164>)
 80038d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80038dc:	23c0      	movs	r3, #192	; 0xc0
 80038de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e2:	2302      	movs	r3, #2
 80038e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ee:	2300      	movs	r3, #0
 80038f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART6;
 80038f4:	2307      	movs	r3, #7
 80038f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038fe:	4619      	mov	r1, r3
 8003900:	4807      	ldr	r0, [pc, #28]	; (8003920 <HAL_UART_MspInit+0x170>)
 8003902:	f004 fb03 	bl	8007f0c <HAL_GPIO_Init>
}
 8003906:	bf00      	nop
 8003908:	37e8      	adds	r7, #232	; 0xe8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40004c00 	.word	0x40004c00
 8003914:	58024400 	.word	0x58024400
 8003918:	58020400 	.word	0x58020400
 800391c:	40011400 	.word	0x40011400
 8003920:	58020800 	.word	0x58020800

08003924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003928:	e7fe      	b.n	8003928 <NMI_Handler+0x4>

0800392a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800392a:	b480      	push	{r7}
 800392c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800392e:	e7fe      	b.n	800392e <HardFault_Handler+0x4>

08003930 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003930:	b480      	push	{r7}
 8003932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003934:	e7fe      	b.n	8003934 <MemManage_Handler+0x4>

08003936 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003936:	b480      	push	{r7}
 8003938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800393a:	e7fe      	b.n	800393a <BusFault_Handler+0x4>

0800393c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800393c:	b480      	push	{r7}
 800393e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003940:	e7fe      	b.n	8003940 <UsageFault_Handler+0x4>

08003942 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003942:	b480      	push	{r7}
 8003944:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003946:	bf00      	nop
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003954:	bf00      	nop
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr

0800395e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003962:	bf00      	nop
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003970:	f000 f9ba 	bl	8003ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003974:	bf00      	nop
 8003976:	bd80      	pop	{r7, pc}

08003978 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 800397c:	4802      	ldr	r0, [pc, #8]	; (8003988 <DMA1_Stream0_IRQHandler+0x10>)
 800397e:	f002 fc4f 	bl	8006220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003982:	bf00      	nop
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	240014bc 	.word	0x240014bc

0800398c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8003990:	4802      	ldr	r0, [pc, #8]	; (800399c <DMA1_Stream1_IRQHandler+0x10>)
 8003992:	f002 fc45 	bl	8006220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003996:	bf00      	nop
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	24001354 	.word	0x24001354

080039a0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 80039a4:	4802      	ldr	r0, [pc, #8]	; (80039b0 <DMA1_Stream2_IRQHandler+0x10>)
 80039a6:	f002 fc3b 	bl	8006220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	24001534 	.word	0x24001534

080039b4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 80039b8:	4802      	ldr	r0, [pc, #8]	; (80039c4 <DMA1_Stream3_IRQHandler+0x10>)
 80039ba:	f002 fc31 	bl	8006220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	240013cc 	.word	0x240013cc

080039c8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch1);
 80039cc:	4802      	ldr	r0, [pc, #8]	; (80039d8 <DMA1_Stream4_IRQHandler+0x10>)
 80039ce:	f002 fc27 	bl	8006220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	24001444 	.word	0x24001444

080039dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039e0:	4802      	ldr	r0, [pc, #8]	; (80039ec <DMA1_Stream5_IRQHandler+0x10>)
 80039e2:	f002 fc1d 	bl	8006220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	24000de0 	.word	0x24000de0

080039f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80039f4:	4802      	ldr	r0, [pc, #8]	; (8003a00 <TIM4_IRQHandler+0x10>)
 80039f6:	f00c fc07 	bl	8010208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	24001270 	.word	0x24001270

08003a04 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8003a08:	4802      	ldr	r0, [pc, #8]	; (8003a14 <I2C2_EV_IRQHandler+0x10>)
 8003a0a:	f004 fce9 	bl	80083e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	24000f70 	.word	0x24000f70

08003a18 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003a1c:	4802      	ldr	r0, [pc, #8]	; (8003a28 <DMA2_Stream7_IRQHandler+0x10>)
 8003a1e:	f002 fbff 	bl	8006220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	24000e58 	.word	0x24000e58

08003a2c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003a30:	4802      	ldr	r0, [pc, #8]	; (8003a3c <OTG_HS_IRQHandler+0x10>)
 8003a32:	f004 fedf 	bl	80087f4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003a36:	bf00      	nop
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	24002bf0 	.word	0x24002bf0

08003a40 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8003a44:	4802      	ldr	r0, [pc, #8]	; (8003a50 <SDMMC2_IRQHandler+0x10>)
 8003a46:	f00a f853 	bl	800daf0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	24000fc4 	.word	0x24000fc4

08003a54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b086      	sub	sp, #24
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a5c:	4a14      	ldr	r2, [pc, #80]	; (8003ab0 <_sbrk+0x5c>)
 8003a5e:	4b15      	ldr	r3, [pc, #84]	; (8003ab4 <_sbrk+0x60>)
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a68:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <_sbrk+0x64>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d102      	bne.n	8003a76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a70:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <_sbrk+0x64>)
 8003a72:	4a12      	ldr	r2, [pc, #72]	; (8003abc <_sbrk+0x68>)
 8003a74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a76:	4b10      	ldr	r3, [pc, #64]	; (8003ab8 <_sbrk+0x64>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d207      	bcs.n	8003a94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a84:	f013 fe78 	bl	8017778 <__errno>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	220c      	movs	r2, #12
 8003a8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8003a92:	e009      	b.n	8003aa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a94:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <_sbrk+0x64>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a9a:	4b07      	ldr	r3, [pc, #28]	; (8003ab8 <_sbrk+0x64>)
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	4a05      	ldr	r2, [pc, #20]	; (8003ab8 <_sbrk+0x64>)
 8003aa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	24050000 	.word	0x24050000
 8003ab4:	00000800 	.word	0x00000800
 8003ab8:	240016ec 	.word	0x240016ec
 8003abc:	24003468 	.word	0x24003468

08003ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003ac4:	4b32      	ldr	r3, [pc, #200]	; (8003b90 <SystemInit+0xd0>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	4a31      	ldr	r2, [pc, #196]	; (8003b90 <SystemInit+0xd0>)
 8003acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003ad4:	4b2f      	ldr	r3, [pc, #188]	; (8003b94 <SystemInit+0xd4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	2b06      	cmp	r3, #6
 8003ade:	d807      	bhi.n	8003af0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003ae0:	4b2c      	ldr	r3, [pc, #176]	; (8003b94 <SystemInit+0xd4>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f023 030f 	bic.w	r3, r3, #15
 8003ae8:	4a2a      	ldr	r2, [pc, #168]	; (8003b94 <SystemInit+0xd4>)
 8003aea:	f043 0307 	orr.w	r3, r3, #7
 8003aee:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003af0:	4b29      	ldr	r3, [pc, #164]	; (8003b98 <SystemInit+0xd8>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a28      	ldr	r2, [pc, #160]	; (8003b98 <SystemInit+0xd8>)
 8003af6:	f043 0301 	orr.w	r3, r3, #1
 8003afa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003afc:	4b26      	ldr	r3, [pc, #152]	; (8003b98 <SystemInit+0xd8>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003b02:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <SystemInit+0xd8>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	4924      	ldr	r1, [pc, #144]	; (8003b98 <SystemInit+0xd8>)
 8003b08:	4b24      	ldr	r3, [pc, #144]	; (8003b9c <SystemInit+0xdc>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003b0e:	4b21      	ldr	r3, [pc, #132]	; (8003b94 <SystemInit+0xd4>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0308 	and.w	r3, r3, #8
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d007      	beq.n	8003b2a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003b1a:	4b1e      	ldr	r3, [pc, #120]	; (8003b94 <SystemInit+0xd4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 030f 	bic.w	r3, r3, #15
 8003b22:	4a1c      	ldr	r2, [pc, #112]	; (8003b94 <SystemInit+0xd4>)
 8003b24:	f043 0307 	orr.w	r3, r3, #7
 8003b28:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003b2a:	4b1b      	ldr	r3, [pc, #108]	; (8003b98 <SystemInit+0xd8>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003b30:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <SystemInit+0xd8>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003b36:	4b18      	ldr	r3, [pc, #96]	; (8003b98 <SystemInit+0xd8>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003b3c:	4b16      	ldr	r3, [pc, #88]	; (8003b98 <SystemInit+0xd8>)
 8003b3e:	4a18      	ldr	r2, [pc, #96]	; (8003ba0 <SystemInit+0xe0>)
 8003b40:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003b42:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <SystemInit+0xd8>)
 8003b44:	4a17      	ldr	r2, [pc, #92]	; (8003ba4 <SystemInit+0xe4>)
 8003b46:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003b48:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <SystemInit+0xd8>)
 8003b4a:	4a17      	ldr	r2, [pc, #92]	; (8003ba8 <SystemInit+0xe8>)
 8003b4c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003b4e:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <SystemInit+0xd8>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003b54:	4b10      	ldr	r3, [pc, #64]	; (8003b98 <SystemInit+0xd8>)
 8003b56:	4a14      	ldr	r2, [pc, #80]	; (8003ba8 <SystemInit+0xe8>)
 8003b58:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003b5a:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <SystemInit+0xd8>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003b60:	4b0d      	ldr	r3, [pc, #52]	; (8003b98 <SystemInit+0xd8>)
 8003b62:	4a11      	ldr	r2, [pc, #68]	; (8003ba8 <SystemInit+0xe8>)
 8003b64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003b66:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <SystemInit+0xd8>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b6c:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <SystemInit+0xd8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a09      	ldr	r2, [pc, #36]	; (8003b98 <SystemInit+0xd8>)
 8003b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003b78:	4b07      	ldr	r3, [pc, #28]	; (8003b98 <SystemInit+0xd8>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	; (8003bac <SystemInit+0xec>)
 8003b80:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003b84:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003b86:	bf00      	nop
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	e000ed00 	.word	0xe000ed00
 8003b94:	52002000 	.word	0x52002000
 8003b98:	58024400 	.word	0x58024400
 8003b9c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003ba0:	02020200 	.word	0x02020200
 8003ba4:	01ff0000 	.word	0x01ff0000
 8003ba8:	01010280 	.word	0x01010280
 8003bac:	52004000 	.word	0x52004000

08003bb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003be8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003bb4:	f7ff ff84 	bl	8003ac0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003bb8:	480c      	ldr	r0, [pc, #48]	; (8003bec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bba:	490d      	ldr	r1, [pc, #52]	; (8003bf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bbc:	4a0d      	ldr	r2, [pc, #52]	; (8003bf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bc0:	e002      	b.n	8003bc8 <LoopCopyDataInit>

08003bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bc6:	3304      	adds	r3, #4

08003bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003bcc:	d3f9      	bcc.n	8003bc2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003bce:	4a0a      	ldr	r2, [pc, #40]	; (8003bf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003bd0:	4c0a      	ldr	r4, [pc, #40]	; (8003bfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003bd4:	e001      	b.n	8003bda <LoopFillZerobss>

08003bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003bd8:	3204      	adds	r2, #4

08003bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003bdc:	d3fb      	bcc.n	8003bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003bde:	f013 fdd1 	bl	8017784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003be2:	f7fd fea5 	bl	8001930 <main>
  bx  lr
 8003be6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003be8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003bec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003bf0:	24000154 	.word	0x24000154
  ldr r2, =_sidata
 8003bf4:	08018db4 	.word	0x08018db4
  ldr r2, =_sbss
 8003bf8:	24000154 	.word	0x24000154
  ldr r4, =_ebss
 8003bfc:	24003464 	.word	0x24003464

08003c00 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c00:	e7fe      	b.n	8003c00 <ADC3_IRQHandler>
	...

08003c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c0a:	2003      	movs	r0, #3
 8003c0c:	f001 fd06 	bl	800561c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003c10:	f006 fd94 	bl	800a73c <HAL_RCC_GetSysClockFreq>
 8003c14:	4602      	mov	r2, r0
 8003c16:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <HAL_Init+0x68>)
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	4913      	ldr	r1, [pc, #76]	; (8003c70 <HAL_Init+0x6c>)
 8003c22:	5ccb      	ldrb	r3, [r1, r3]
 8003c24:	f003 031f 	and.w	r3, r3, #31
 8003c28:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003c2e:	4b0f      	ldr	r3, [pc, #60]	; (8003c6c <HAL_Init+0x68>)
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	4a0e      	ldr	r2, [pc, #56]	; (8003c70 <HAL_Init+0x6c>)
 8003c38:	5cd3      	ldrb	r3, [r2, r3]
 8003c3a:	f003 031f 	and.w	r3, r3, #31
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	fa22 f303 	lsr.w	r3, r2, r3
 8003c44:	4a0b      	ldr	r2, [pc, #44]	; (8003c74 <HAL_Init+0x70>)
 8003c46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003c48:	4a0b      	ldr	r2, [pc, #44]	; (8003c78 <HAL_Init+0x74>)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003c4e:	200f      	movs	r0, #15
 8003c50:	f000 f814 	bl	8003c7c <HAL_InitTick>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e002      	b.n	8003c64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003c5e:	f7fe ff91 	bl	8002b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c62:	2300      	movs	r3, #0
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3708      	adds	r7, #8
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	58024400 	.word	0x58024400
 8003c70:	08018c00 	.word	0x08018c00
 8003c74:	24000004 	.word	0x24000004
 8003c78:	24000000 	.word	0x24000000

08003c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003c84:	4b15      	ldr	r3, [pc, #84]	; (8003cdc <HAL_InitTick+0x60>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d101      	bne.n	8003c90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e021      	b.n	8003cd4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003c90:	4b13      	ldr	r3, [pc, #76]	; (8003ce0 <HAL_InitTick+0x64>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <HAL_InitTick+0x60>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f001 fceb 	bl	8005682 <HAL_SYSTICK_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e00e      	b.n	8003cd4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2b0f      	cmp	r3, #15
 8003cba:	d80a      	bhi.n	8003cd2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc4:	f001 fcb5 	bl	8005632 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cc8:	4a06      	ldr	r2, [pc, #24]	; (8003ce4 <HAL_InitTick+0x68>)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	e000      	b.n	8003cd4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	2400000c 	.word	0x2400000c
 8003ce0:	24000000 	.word	0x24000000
 8003ce4:	24000008 	.word	0x24000008

08003ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003cec:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_IncTick+0x20>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <HAL_IncTick+0x24>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	4a04      	ldr	r2, [pc, #16]	; (8003d0c <HAL_IncTick+0x24>)
 8003cfa:	6013      	str	r3, [r2, #0]
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	2400000c 	.word	0x2400000c
 8003d0c:	240016f0 	.word	0x240016f0

08003d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d10:	b480      	push	{r7}
 8003d12:	af00      	add	r7, sp, #0
  return uwTick;
 8003d14:	4b03      	ldr	r3, [pc, #12]	; (8003d24 <HAL_GetTick+0x14>)
 8003d16:	681b      	ldr	r3, [r3, #0]
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	240016f0 	.word	0x240016f0

08003d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d30:	f7ff ffee 	bl	8003d10 <HAL_GetTick>
 8003d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d40:	d005      	beq.n	8003d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d42:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <HAL_Delay+0x44>)
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d4e:	bf00      	nop
 8003d50:	f7ff ffde 	bl	8003d10 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d8f7      	bhi.n	8003d50 <HAL_Delay+0x28>
  {
  }
}
 8003d60:	bf00      	nop
 8003d62:	bf00      	nop
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	2400000c 	.word	0x2400000c

08003d70 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003d7a:	4b07      	ldr	r3, [pc, #28]	; (8003d98 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	401a      	ands	r2, r3
 8003d84:	4904      	ldr	r1, [pc, #16]	; (8003d98 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	604b      	str	r3, [r1, #4]
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	58000400 	.word	0x58000400

08003d9c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	431a      	orrs	r2, r3
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	609a      	str	r2, [r3, #8]
}
 8003db6:	bf00      	nop
 8003db8:	370c      	adds	r7, #12
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr

08003dc2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003dc2:	b480      	push	{r7}
 8003dc4:	b083      	sub	sp, #12
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	609a      	str	r2, [r3, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b083      	sub	sp, #12
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	370c      	adds	r7, #12
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr

08003e04 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b087      	sub	sp, #28
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
 8003e10:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3360      	adds	r3, #96	; 0x60
 8003e16:	461a      	mov	r2, r3
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	4a10      	ldr	r2, [pc, #64]	; (8003e64 <LL_ADC_SetOffset+0x60>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d10b      	bne.n	8003e40 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003e3e:	e00b      	b.n	8003e58 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	430b      	orrs	r3, r1
 8003e52:	431a      	orrs	r2, r3
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	601a      	str	r2, [r3, #0]
}
 8003e58:	bf00      	nop
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	58026000 	.word	0x58026000

08003e68 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b085      	sub	sp, #20
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3360      	adds	r3, #96	; 0x60
 8003e76:	461a      	mov	r2, r3
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	4413      	add	r3, r2
 8003e7e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	691b      	ldr	r3, [r3, #16]
 8003ea4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f003 031f 	and.w	r3, r3, #31
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	611a      	str	r2, [r3, #16]
}
 8003eba:	bf00      	nop
 8003ebc:	3714      	adds	r7, #20
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr
	...

08003ec8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	60f8      	str	r0, [r7, #12]
 8003ed0:	60b9      	str	r1, [r7, #8]
 8003ed2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4a0c      	ldr	r2, [pc, #48]	; (8003f08 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00e      	beq.n	8003efa <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	3360      	adds	r3, #96	; 0x60
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	601a      	str	r2, [r3, #0]
  }
}
 8003efa:	bf00      	nop
 8003efc:	371c      	adds	r7, #28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	58026000 	.word	0x58026000

08003f0c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4a0c      	ldr	r2, [pc, #48]	; (8003f4c <LL_ADC_SetOffsetSaturation+0x40>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d10e      	bne.n	8003f3e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3360      	adds	r3, #96	; 0x60
 8003f24:	461a      	mov	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	4413      	add	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	431a      	orrs	r2, r3
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	58026000 	.word	0x58026000

08003f50 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4a0c      	ldr	r2, [pc, #48]	; (8003f90 <LL_ADC_SetOffsetSign+0x40>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d10e      	bne.n	8003f82 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	3360      	adds	r3, #96	; 0x60
 8003f68:	461a      	mov	r2, r3
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	58026000 	.word	0x58026000

08003f94 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	3360      	adds	r3, #96	; 0x60
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	4a0c      	ldr	r2, [pc, #48]	; (8003fe4 <LL_ADC_SetOffsetState+0x50>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d108      	bne.n	8003fc8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 8003fc6:	e007      	b.n	8003fd8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	601a      	str	r2, [r3, #0]
}
 8003fd8:	bf00      	nop
 8003fda:	371c      	adds	r7, #28
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr
 8003fe4:	58026000 	.word	0x58026000

08003fe8 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3330      	adds	r3, #48	; 0x30
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	0a1b      	lsrs	r3, r3, #8
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	f003 030c 	and.w	r3, r3, #12
 8004004:	4413      	add	r3, r2
 8004006:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	f003 031f 	and.w	r3, r3, #31
 8004012:	211f      	movs	r1, #31
 8004014:	fa01 f303 	lsl.w	r3, r1, r3
 8004018:	43db      	mvns	r3, r3
 800401a:	401a      	ands	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	0e9b      	lsrs	r3, r3, #26
 8004020:	f003 011f 	and.w	r1, r3, #31
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	f003 031f 	and.w	r3, r3, #31
 800402a:	fa01 f303 	lsl.w	r3, r1, r3
 800402e:	431a      	orrs	r2, r3
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004034:	bf00      	nop
 8004036:	371c      	adds	r7, #28
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004040:	b480      	push	{r7}
 8004042:	b087      	sub	sp, #28
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3314      	adds	r3, #20
 8004050:	461a      	mov	r2, r3
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	0e5b      	lsrs	r3, r3, #25
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	f003 0304 	and.w	r3, r3, #4
 800405c:	4413      	add	r3, r2
 800405e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	681a      	ldr	r2, [r3, #0]
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	0d1b      	lsrs	r3, r3, #20
 8004068:	f003 031f 	and.w	r3, r3, #31
 800406c:	2107      	movs	r1, #7
 800406e:	fa01 f303 	lsl.w	r3, r1, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	401a      	ands	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	0d1b      	lsrs	r3, r3, #20
 800407a:	f003 031f 	and.w	r3, r3, #31
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	fa01 f303 	lsl.w	r3, r1, r3
 8004084:	431a      	orrs	r2, r3
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800408a:	bf00      	nop
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
	...

08004098 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4a1a      	ldr	r2, [pc, #104]	; (8004110 <LL_ADC_SetChannelSingleDiff+0x78>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d115      	bne.n	80040d8 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040b8:	43db      	mvns	r3, r3
 80040ba:	401a      	ands	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f003 0318 	and.w	r3, r3, #24
 80040c2:	4914      	ldr	r1, [pc, #80]	; (8004114 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80040c4:	40d9      	lsrs	r1, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	400b      	ands	r3, r1
 80040ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040ce:	431a      	orrs	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80040d6:	e014      	b.n	8004102 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040e4:	43db      	mvns	r3, r3
 80040e6:	401a      	ands	r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f003 0318 	and.w	r3, r3, #24
 80040ee:	4909      	ldr	r1, [pc, #36]	; (8004114 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80040f0:	40d9      	lsrs	r1, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	400b      	ands	r3, r1
 80040f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040fa:	431a      	orrs	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	58026000 	.word	0x58026000
 8004114:	000fffff 	.word	0x000fffff

08004118 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689a      	ldr	r2, [r3, #8]
 8004124:	4b04      	ldr	r3, [pc, #16]	; (8004138 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004126:	4013      	ands	r3, r2
 8004128:	687a      	ldr	r2, [r7, #4]
 800412a:	6093      	str	r3, [r2, #8]
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	5fffffc0 	.word	0x5fffffc0

0800413c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800414c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004150:	d101      	bne.n	8004156 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8004152:	2301      	movs	r3, #1
 8004154:	e000      	b.n	8004158 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004156:	2300      	movs	r3, #0
}
 8004158:	4618      	mov	r0, r3
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689a      	ldr	r2, [r3, #8]
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <LL_ADC_EnableInternalRegulator+0x24>)
 8004172:	4013      	ands	r3, r2
 8004174:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr
 8004188:	6fffffc0 	.word	0x6fffffc0

0800418c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041a0:	d101      	bne.n	80041a6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80041a2:	2301      	movs	r3, #1
 80041a4:	e000      	b.n	80041a8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <LL_ADC_IsEnabled+0x18>
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <LL_ADC_IsEnabled+0x1a>
 80041cc:	2300      	movs	r3, #0
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr

080041da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80041da:	b480      	push	{r7}
 80041dc:	b083      	sub	sp, #12
 80041de:	af00      	add	r7, sp, #0
 80041e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d101      	bne.n	80041f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b08      	cmp	r3, #8
 8004212:	d101      	bne.n	8004218 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004214:	2301      	movs	r3, #1
 8004216:	e000      	b.n	800421a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004228:	b590      	push	{r4, r7, lr}
 800422a:	b089      	sub	sp, #36	; 0x24
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004234:	2300      	movs	r3, #0
 8004236:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e1ee      	b.n	8004620 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800424c:	2b00      	cmp	r3, #0
 800424e:	d109      	bne.n	8004264 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7fe fcb1 	bl	8002bb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f7ff ff67 	bl	800413c <LL_ADC_IsDeepPowerDownEnabled>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d004      	beq.n	800427e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff ff4d 	bl	8004118 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff ff82 	bl	800418c <LL_ADC_IsInternalRegulatorEnabled>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d114      	bne.n	80042b8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f7ff ff66 	bl	8004164 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004298:	4b8e      	ldr	r3, [pc, #568]	; (80044d4 <HAL_ADC_Init+0x2ac>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	099b      	lsrs	r3, r3, #6
 800429e:	4a8e      	ldr	r2, [pc, #568]	; (80044d8 <HAL_ADC_Init+0x2b0>)
 80042a0:	fba2 2303 	umull	r2, r3, r2, r3
 80042a4:	099b      	lsrs	r3, r3, #6
 80042a6:	3301      	adds	r3, #1
 80042a8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80042aa:	e002      	b.n	80042b2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1f9      	bne.n	80042ac <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7ff ff65 	bl	800418c <LL_ADC_IsInternalRegulatorEnabled>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10d      	bne.n	80042e4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042cc:	f043 0210 	orr.w	r2, r3, #16
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042d8:	f043 0201 	orr.w	r2, r3, #1
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff ff76 	bl	80041da <LL_ADC_REG_IsConversionOngoing>
 80042ee:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f4:	f003 0310 	and.w	r3, r3, #16
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	f040 8188 	bne.w	800460e <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	2b00      	cmp	r3, #0
 8004302:	f040 8184 	bne.w	800460e <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800430e:	f043 0202 	orr.w	r2, r3, #2
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7ff ff4a 	bl	80041b4 <LL_ADC_IsEnabled>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d136      	bne.n	8004394 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a6c      	ldr	r2, [pc, #432]	; (80044dc <HAL_ADC_Init+0x2b4>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d004      	beq.n	800433a <HAL_ADC_Init+0x112>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a6a      	ldr	r2, [pc, #424]	; (80044e0 <HAL_ADC_Init+0x2b8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d10e      	bne.n	8004358 <HAL_ADC_Init+0x130>
 800433a:	4868      	ldr	r0, [pc, #416]	; (80044dc <HAL_ADC_Init+0x2b4>)
 800433c:	f7ff ff3a 	bl	80041b4 <LL_ADC_IsEnabled>
 8004340:	4604      	mov	r4, r0
 8004342:	4867      	ldr	r0, [pc, #412]	; (80044e0 <HAL_ADC_Init+0x2b8>)
 8004344:	f7ff ff36 	bl	80041b4 <LL_ADC_IsEnabled>
 8004348:	4603      	mov	r3, r0
 800434a:	4323      	orrs	r3, r4
 800434c:	2b00      	cmp	r3, #0
 800434e:	bf0c      	ite	eq
 8004350:	2301      	moveq	r3, #1
 8004352:	2300      	movne	r3, #0
 8004354:	b2db      	uxtb	r3, r3
 8004356:	e008      	b.n	800436a <HAL_ADC_Init+0x142>
 8004358:	4862      	ldr	r0, [pc, #392]	; (80044e4 <HAL_ADC_Init+0x2bc>)
 800435a:	f7ff ff2b 	bl	80041b4 <LL_ADC_IsEnabled>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	bf0c      	ite	eq
 8004364:	2301      	moveq	r3, #1
 8004366:	2300      	movne	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d012      	beq.n	8004394 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a5a      	ldr	r2, [pc, #360]	; (80044dc <HAL_ADC_Init+0x2b4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d004      	beq.n	8004382 <HAL_ADC_Init+0x15a>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a58      	ldr	r2, [pc, #352]	; (80044e0 <HAL_ADC_Init+0x2b8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d101      	bne.n	8004386 <HAL_ADC_Init+0x15e>
 8004382:	4a59      	ldr	r2, [pc, #356]	; (80044e8 <HAL_ADC_Init+0x2c0>)
 8004384:	e000      	b.n	8004388 <HAL_ADC_Init+0x160>
 8004386:	4a59      	ldr	r2, [pc, #356]	; (80044ec <HAL_ADC_Init+0x2c4>)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	4619      	mov	r1, r3
 800438e:	4610      	mov	r0, r2
 8004390:	f7ff fd04 	bl	8003d9c <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a52      	ldr	r2, [pc, #328]	; (80044e4 <HAL_ADC_Init+0x2bc>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d129      	bne.n	80043f2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	7e5b      	ldrb	r3, [r3, #25]
 80043a2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80043a8:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80043ae:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	d013      	beq.n	80043e0 <HAL_ADC_Init+0x1b8>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2b0c      	cmp	r3, #12
 80043be:	d00d      	beq.n	80043dc <HAL_ADC_Init+0x1b4>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	2b1c      	cmp	r3, #28
 80043c6:	d007      	beq.n	80043d8 <HAL_ADC_Init+0x1b0>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b18      	cmp	r3, #24
 80043ce:	d101      	bne.n	80043d4 <HAL_ADC_Init+0x1ac>
 80043d0:	2318      	movs	r3, #24
 80043d2:	e006      	b.n	80043e2 <HAL_ADC_Init+0x1ba>
 80043d4:	2300      	movs	r3, #0
 80043d6:	e004      	b.n	80043e2 <HAL_ADC_Init+0x1ba>
 80043d8:	2310      	movs	r3, #16
 80043da:	e002      	b.n	80043e2 <HAL_ADC_Init+0x1ba>
 80043dc:	2308      	movs	r3, #8
 80043de:	e000      	b.n	80043e2 <HAL_ADC_Init+0x1ba>
 80043e0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 80043e2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043ea:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80043ec:	4313      	orrs	r3, r2
 80043ee:	61bb      	str	r3, [r7, #24]
 80043f0:	e00e      	b.n	8004410 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	7e5b      	ldrb	r3, [r3, #25]
 80043f6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80043fc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004402:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 3020 	ldrb.w	r3, [r3, #32]
 800440a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800440c:	4313      	orrs	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d106      	bne.n	8004428 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441e:	3b01      	subs	r3, #1
 8004420:	045b      	lsls	r3, r3, #17
 8004422:	69ba      	ldr	r2, [r7, #24]
 8004424:	4313      	orrs	r3, r2
 8004426:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442c:	2b00      	cmp	r3, #0
 800442e:	d009      	beq.n	8004444 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004434:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	4313      	orrs	r3, r2
 8004442:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a26      	ldr	r2, [pc, #152]	; (80044e4 <HAL_ADC_Init+0x2bc>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d115      	bne.n	800447a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	68da      	ldr	r2, [r3, #12]
 8004454:	4b26      	ldr	r3, [pc, #152]	; (80044f0 <HAL_ADC_Init+0x2c8>)
 8004456:	4013      	ands	r3, r2
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6812      	ldr	r2, [r2, #0]
 800445c:	69b9      	ldr	r1, [r7, #24]
 800445e:	430b      	orrs	r3, r1
 8004460:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	611a      	str	r2, [r3, #16]
 8004478:	e009      	b.n	800448e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	4b1c      	ldr	r3, [pc, #112]	; (80044f4 <HAL_ADC_Init+0x2cc>)
 8004482:	4013      	ands	r3, r2
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	6812      	ldr	r2, [r2, #0]
 8004488:	69b9      	ldr	r1, [r7, #24]
 800448a:	430b      	orrs	r3, r1
 800448c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff fea1 	bl	80041da <LL_ADC_REG_IsConversionOngoing>
 8004498:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff feae 	bl	8004200 <LL_ADC_INJ_IsConversionOngoing>
 80044a4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f040 808e 	bne.w	80045ca <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f040 808a 	bne.w	80045ca <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a0a      	ldr	r2, [pc, #40]	; (80044e4 <HAL_ADC_Init+0x2bc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d11b      	bne.n	80044f8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	7e1b      	ldrb	r3, [r3, #24]
 80044c4:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044cc:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
 80044d2:	e018      	b.n	8004506 <HAL_ADC_Init+0x2de>
 80044d4:	24000000 	.word	0x24000000
 80044d8:	053e2d63 	.word	0x053e2d63
 80044dc:	40022000 	.word	0x40022000
 80044e0:	40022100 	.word	0x40022100
 80044e4:	58026000 	.word	0x58026000
 80044e8:	40022300 	.word	0x40022300
 80044ec:	58026300 	.word	0x58026300
 80044f0:	fff04007 	.word	0xfff04007
 80044f4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	7e1b      	ldrb	r3, [r3, #24]
 80044fc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8004502:	4313      	orrs	r3, r2
 8004504:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	68da      	ldr	r2, [r3, #12]
 800450c:	4b46      	ldr	r3, [pc, #280]	; (8004628 <HAL_ADC_Init+0x400>)
 800450e:	4013      	ands	r3, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6812      	ldr	r2, [r2, #0]
 8004514:	69b9      	ldr	r1, [r7, #24]
 8004516:	430b      	orrs	r3, r1
 8004518:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004520:	2b01      	cmp	r3, #1
 8004522:	d137      	bne.n	8004594 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a3f      	ldr	r2, [pc, #252]	; (800462c <HAL_ADC_Init+0x404>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d116      	bne.n	8004562 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	4b3d      	ldr	r3, [pc, #244]	; (8004630 <HAL_ADC_Init+0x408>)
 800453c:	4013      	ands	r3, r2
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004546:	4311      	orrs	r1, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800454c:	4311      	orrs	r1, r2
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004552:	430a      	orrs	r2, r1
 8004554:	431a      	orrs	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f042 0201 	orr.w	r2, r2, #1
 800455e:	611a      	str	r2, [r3, #16]
 8004560:	e020      	b.n	80045a4 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	691a      	ldr	r2, [r3, #16]
 8004568:	4b32      	ldr	r3, [pc, #200]	; (8004634 <HAL_ADC_Init+0x40c>)
 800456a:	4013      	ands	r3, r2
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004570:	3a01      	subs	r2, #1
 8004572:	0411      	lsls	r1, r2, #16
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004578:	4311      	orrs	r1, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800457e:	4311      	orrs	r1, r2
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004584:	430a      	orrs	r2, r1
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0201 	orr.w	r2, r2, #1
 8004590:	611a      	str	r2, [r3, #16]
 8004592:	e007      	b.n	80045a4 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691a      	ldr	r2, [r3, #16]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 0201 	bic.w	r2, r2, #1
 80045a2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a1b      	ldr	r2, [pc, #108]	; (800462c <HAL_ADC_Init+0x404>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d002      	beq.n	80045ca <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fd63 	bl	8005090 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d10c      	bne.n	80045ec <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d8:	f023 010f 	bic.w	r1, r3, #15
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	1e5a      	subs	r2, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	631a      	str	r2, [r3, #48]	; 0x30
 80045ea:	e007      	b.n	80045fc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 020f 	bic.w	r2, r2, #15
 80045fa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004600:	f023 0303 	bic.w	r3, r3, #3
 8004604:	f043 0201 	orr.w	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	661a      	str	r2, [r3, #96]	; 0x60
 800460c:	e007      	b.n	800461e <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004612:	f043 0210 	orr.w	r2, r3, #16
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800461e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3724      	adds	r7, #36	; 0x24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd90      	pop	{r4, r7, pc}
 8004628:	ffffbffc 	.word	0xffffbffc
 800462c:	58026000 	.word	0x58026000
 8004630:	fc00f81f 	.word	0xfc00f81f
 8004634:	fc00f81e 	.word	0xfc00f81e

08004638 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004638:	b590      	push	{r4, r7, lr}
 800463a:	b0b9      	sub	sp, #228	; 0xe4
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004642:	2300      	movs	r3, #0
 8004644:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004648:	2300      	movs	r3, #0
 800464a:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004652:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4aa9      	ldr	r2, [pc, #676]	; (8004900 <HAL_ADC_ConfigChannel+0x2c8>)
 800465a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004662:	2b01      	cmp	r3, #1
 8004664:	d102      	bne.n	800466c <HAL_ADC_ConfigChannel+0x34>
 8004666:	2302      	movs	r3, #2
 8004668:	f000 bcfa 	b.w	8005060 <HAL_ADC_ConfigChannel+0xa28>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f7ff fdae 	bl	80041da <LL_ADC_REG_IsConversionOngoing>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	f040 84de 	bne.w	8005042 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a9e      	ldr	r2, [pc, #632]	; (8004904 <HAL_ADC_ConfigChannel+0x2cc>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d033      	beq.n	80046f8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004698:	2b00      	cmp	r3, #0
 800469a:	d108      	bne.n	80046ae <HAL_ADC_ConfigChannel+0x76>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	0e9b      	lsrs	r3, r3, #26
 80046a2:	f003 031f 	and.w	r3, r3, #31
 80046a6:	2201      	movs	r2, #1
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	e01d      	b.n	80046ea <HAL_ADC_ConfigChannel+0xb2>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80046ba:	fa93 f3a3 	rbit	r3, r3
 80046be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80046ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80046d2:	2320      	movs	r3, #32
 80046d4:	e004      	b.n	80046e0 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80046d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80046da:	fab3 f383 	clz	r3, r3
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	2201      	movs	r2, #1
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6812      	ldr	r2, [r2, #0]
 80046ee:	69d1      	ldr	r1, [r2, #28]
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	430b      	orrs	r3, r1
 80046f6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6818      	ldr	r0, [r3, #0]
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	6859      	ldr	r1, [r3, #4]
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	f7ff fc6f 	bl	8003fe8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7ff fd63 	bl	80041da <LL_ADC_REG_IsConversionOngoing>
 8004714:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff fd6f 	bl	8004200 <LL_ADC_INJ_IsConversionOngoing>
 8004722:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800472a:	2b00      	cmp	r3, #0
 800472c:	f040 8270 	bne.w	8004c10 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004730:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004734:	2b00      	cmp	r3, #0
 8004736:	f040 826b 	bne.w	8004c10 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6818      	ldr	r0, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	461a      	mov	r2, r3
 8004748:	f7ff fc7a 	bl	8004040 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a6c      	ldr	r2, [pc, #432]	; (8004904 <HAL_ADC_ConfigChannel+0x2cc>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d10d      	bne.n	8004772 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	695a      	ldr	r2, [r3, #20]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	08db      	lsrs	r3, r3, #3
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	005b      	lsls	r3, r3, #1
 8004768:	fa02 f303 	lsl.w	r3, r2, r3
 800476c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004770:	e032      	b.n	80047d8 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004772:	4b65      	ldr	r3, [pc, #404]	; (8004908 <HAL_ADC_ConfigChannel+0x2d0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800477a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800477e:	d10b      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x160>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	695a      	ldr	r2, [r3, #20]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	089b      	lsrs	r3, r3, #2
 800478c:	f003 0307 	and.w	r3, r3, #7
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	fa02 f303 	lsl.w	r3, r2, r3
 8004796:	e01d      	b.n	80047d4 <HAL_ADC_ConfigChannel+0x19c>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	f003 0310 	and.w	r3, r3, #16
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10b      	bne.n	80047be <HAL_ADC_ConfigChannel+0x186>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	089b      	lsrs	r3, r3, #2
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	fa02 f303 	lsl.w	r3, r2, r3
 80047bc:	e00a      	b.n	80047d4 <HAL_ADC_ConfigChannel+0x19c>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695a      	ldr	r2, [r3, #20]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	089b      	lsrs	r3, r3, #2
 80047ca:	f003 0304 	and.w	r3, r3, #4
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d048      	beq.n	8004872 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	6919      	ldr	r1, [r3, #16]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047f0:	f7ff fb08 	bl	8003e04 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a42      	ldr	r2, [pc, #264]	; (8004904 <HAL_ADC_ConfigChannel+0x2cc>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d119      	bne.n	8004832 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6818      	ldr	r0, [r3, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	6919      	ldr	r1, [r3, #16]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	461a      	mov	r2, r3
 800480c:	f7ff fba0 	bl	8003f50 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6818      	ldr	r0, [r3, #0]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	6919      	ldr	r1, [r3, #16]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d102      	bne.n	8004828 <HAL_ADC_ConfigChannel+0x1f0>
 8004822:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004826:	e000      	b.n	800482a <HAL_ADC_ConfigChannel+0x1f2>
 8004828:	2300      	movs	r3, #0
 800482a:	461a      	mov	r2, r3
 800482c:	f7ff fb6e 	bl	8003f0c <LL_ADC_SetOffsetSaturation>
 8004830:	e1ee      	b.n	8004c10 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6919      	ldr	r1, [r3, #16]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004840:	2b01      	cmp	r3, #1
 8004842:	d102      	bne.n	800484a <HAL_ADC_ConfigChannel+0x212>
 8004844:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004848:	e000      	b.n	800484c <HAL_ADC_ConfigChannel+0x214>
 800484a:	2300      	movs	r3, #0
 800484c:	461a      	mov	r2, r3
 800484e:	f7ff fb3b 	bl	8003ec8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6818      	ldr	r0, [r3, #0]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6919      	ldr	r1, [r3, #16]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	7e1b      	ldrb	r3, [r3, #24]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d102      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x230>
 8004862:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004866:	e000      	b.n	800486a <HAL_ADC_ConfigChannel+0x232>
 8004868:	2300      	movs	r3, #0
 800486a:	461a      	mov	r2, r3
 800486c:	f7ff fb12 	bl	8003e94 <LL_ADC_SetDataRightShift>
 8004870:	e1ce      	b.n	8004c10 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a23      	ldr	r2, [pc, #140]	; (8004904 <HAL_ADC_ConfigChannel+0x2cc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	f040 8181 	bne.w	8004b80 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2100      	movs	r1, #0
 8004884:	4618      	mov	r0, r3
 8004886:	f7ff faef 	bl	8003e68 <LL_ADC_GetOffsetChannel>
 800488a:	4603      	mov	r3, r0
 800488c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10a      	bne.n	80048aa <HAL_ADC_ConfigChannel+0x272>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2100      	movs	r1, #0
 800489a:	4618      	mov	r0, r3
 800489c:	f7ff fae4 	bl	8003e68 <LL_ADC_GetOffsetChannel>
 80048a0:	4603      	mov	r3, r0
 80048a2:	0e9b      	lsrs	r3, r3, #26
 80048a4:	f003 021f 	and.w	r2, r3, #31
 80048a8:	e01e      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x2b0>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2100      	movs	r1, #0
 80048b0:	4618      	mov	r0, r3
 80048b2:	f7ff fad9 	bl	8003e68 <LL_ADC_GetOffsetChannel>
 80048b6:	4603      	mov	r3, r0
 80048b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048c0:	fa93 f3a3 	rbit	r3, r3
 80048c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80048c8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80048cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80048d0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80048d8:	2320      	movs	r3, #32
 80048da:	e004      	b.n	80048e6 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80048dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048e0:	fab3 f383 	clz	r3, r3
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10b      	bne.n	800490c <HAL_ADC_ConfigChannel+0x2d4>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	0e9b      	lsrs	r3, r3, #26
 80048fa:	f003 031f 	and.w	r3, r3, #31
 80048fe:	e01e      	b.n	800493e <HAL_ADC_ConfigChannel+0x306>
 8004900:	47ff0000 	.word	0x47ff0000
 8004904:	58026000 	.word	0x58026000
 8004908:	5c001000 	.word	0x5c001000
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004914:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004918:	fa93 f3a3 	rbit	r3, r3
 800491c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8004920:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004924:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8004928:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8004930:	2320      	movs	r3, #32
 8004932:	e004      	b.n	800493e <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8004934:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004938:	fab3 f383 	clz	r3, r3
 800493c:	b2db      	uxtb	r3, r3
 800493e:	429a      	cmp	r2, r3
 8004940:	d106      	bne.n	8004950 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2200      	movs	r2, #0
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f7ff fb22 	bl	8003f94 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2101      	movs	r1, #1
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff fa86 	bl	8003e68 <LL_ADC_GetOffsetChannel>
 800495c:	4603      	mov	r3, r0
 800495e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004962:	2b00      	cmp	r3, #0
 8004964:	d10a      	bne.n	800497c <HAL_ADC_ConfigChannel+0x344>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2101      	movs	r1, #1
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff fa7b 	bl	8003e68 <LL_ADC_GetOffsetChannel>
 8004972:	4603      	mov	r3, r0
 8004974:	0e9b      	lsrs	r3, r3, #26
 8004976:	f003 021f 	and.w	r2, r3, #31
 800497a:	e01e      	b.n	80049ba <HAL_ADC_ConfigChannel+0x382>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2101      	movs	r1, #1
 8004982:	4618      	mov	r0, r3
 8004984:	f7ff fa70 	bl	8003e68 <LL_ADC_GetOffsetChannel>
 8004988:	4603      	mov	r3, r0
 800498a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004992:	fa93 f3a3 	rbit	r3, r3
 8004996:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 800499a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800499e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80049a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d101      	bne.n	80049ae <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80049aa:	2320      	movs	r3, #32
 80049ac:	e004      	b.n	80049b8 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80049ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80049b2:	fab3 f383 	clz	r3, r3
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	461a      	mov	r2, r3
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d105      	bne.n	80049d2 <HAL_ADC_ConfigChannel+0x39a>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	0e9b      	lsrs	r3, r3, #26
 80049cc:	f003 031f 	and.w	r3, r3, #31
 80049d0:	e018      	b.n	8004a04 <HAL_ADC_ConfigChannel+0x3cc>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049da:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80049de:	fa93 f3a3 	rbit	r3, r3
 80049e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80049e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80049ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80049ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80049f6:	2320      	movs	r3, #32
 80049f8:	e004      	b.n	8004a04 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80049fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049fe:	fab3 f383 	clz	r3, r3
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d106      	bne.n	8004a16 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2101      	movs	r1, #1
 8004a10:	4618      	mov	r0, r3
 8004a12:	f7ff fabf 	bl	8003f94 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2102      	movs	r1, #2
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7ff fa23 	bl	8003e68 <LL_ADC_GetOffsetChannel>
 8004a22:	4603      	mov	r3, r0
 8004a24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10a      	bne.n	8004a42 <HAL_ADC_ConfigChannel+0x40a>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2102      	movs	r1, #2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7ff fa18 	bl	8003e68 <LL_ADC_GetOffsetChannel>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	0e9b      	lsrs	r3, r3, #26
 8004a3c:	f003 021f 	and.w	r2, r3, #31
 8004a40:	e01e      	b.n	8004a80 <HAL_ADC_ConfigChannel+0x448>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2102      	movs	r1, #2
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7ff fa0d 	bl	8003e68 <LL_ADC_GetOffsetChannel>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a54:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a58:	fa93 f3a3 	rbit	r3, r3
 8004a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8004a60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8004a68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d101      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8004a70:	2320      	movs	r3, #32
 8004a72:	e004      	b.n	8004a7e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8004a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a78:	fab3 f383 	clz	r3, r3
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	461a      	mov	r2, r3
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d105      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0x460>
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	0e9b      	lsrs	r3, r3, #26
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	e014      	b.n	8004ac2 <HAL_ADC_ConfigChannel+0x48a>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004aa0:	fa93 f3a3 	rbit	r3, r3
 8004aa4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8004aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aa8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8004aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d101      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8004ab4:	2320      	movs	r3, #32
 8004ab6:	e004      	b.n	8004ac2 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8004ab8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004abc:	fab3 f383 	clz	r3, r3
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d106      	bne.n	8004ad4 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2200      	movs	r2, #0
 8004acc:	2102      	movs	r1, #2
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff fa60 	bl	8003f94 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2103      	movs	r1, #3
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7ff f9c4 	bl	8003e68 <LL_ADC_GetOffsetChannel>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <HAL_ADC_ConfigChannel+0x4c8>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2103      	movs	r1, #3
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7ff f9b9 	bl	8003e68 <LL_ADC_GetOffsetChannel>
 8004af6:	4603      	mov	r3, r0
 8004af8:	0e9b      	lsrs	r3, r3, #26
 8004afa:	f003 021f 	and.w	r2, r3, #31
 8004afe:	e017      	b.n	8004b30 <HAL_ADC_ConfigChannel+0x4f8>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2103      	movs	r1, #3
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7ff f9ae 	bl	8003e68 <LL_ADC_GetOffsetChannel>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b12:	fa93 f3a3 	rbit	r3, r3
 8004b16:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b1a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8004b1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004b22:	2320      	movs	r3, #32
 8004b24:	e003      	b.n	8004b2e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b28:	fab3 f383 	clz	r3, r3
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d105      	bne.n	8004b48 <HAL_ADC_ConfigChannel+0x510>
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	0e9b      	lsrs	r3, r3, #26
 8004b42:	f003 031f 	and.w	r3, r3, #31
 8004b46:	e011      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x534>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b50:	fa93 f3a3 	rbit	r3, r3
 8004b54:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8004b56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b58:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8004b5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8004b60:	2320      	movs	r3, #32
 8004b62:	e003      	b.n	8004b6c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8004b64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b66:	fab3 f383 	clz	r3, r3
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d14f      	bne.n	8004c10 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2200      	movs	r2, #0
 8004b76:	2103      	movs	r1, #3
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f7ff fa0b 	bl	8003f94 <LL_ADC_SetOffsetState>
 8004b7e:	e047      	b.n	8004c10 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	069b      	lsls	r3, r3, #26
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d107      	bne.n	8004ba4 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004ba2:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004baa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	069b      	lsls	r3, r3, #26
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d107      	bne.n	8004bc8 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bc6:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	069b      	lsls	r3, r3, #26
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d107      	bne.n	8004bec <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004bea:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	069b      	lsls	r3, r3, #26
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d107      	bne.n	8004c10 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004c0e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7ff facd 	bl	80041b4 <LL_ADC_IsEnabled>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f040 8219 	bne.w	8005054 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	6819      	ldr	r1, [r3, #0]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f7ff fa32 	bl	8004098 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	4aa1      	ldr	r2, [pc, #644]	; (8004ec0 <HAL_ADC_ConfigChannel+0x888>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	f040 812e 	bne.w	8004e9c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10b      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x630>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	0e9b      	lsrs	r3, r3, #26
 8004c56:	3301      	adds	r3, #1
 8004c58:	f003 031f 	and.w	r3, r3, #31
 8004c5c:	2b09      	cmp	r3, #9
 8004c5e:	bf94      	ite	ls
 8004c60:	2301      	movls	r3, #1
 8004c62:	2300      	movhi	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	e019      	b.n	8004c9c <HAL_ADC_ConfigChannel+0x664>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c70:	fa93 f3a3 	rbit	r3, r3
 8004c74:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8004c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c78:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8004c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8004c80:	2320      	movs	r3, #32
 8004c82:	e003      	b.n	8004c8c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8004c84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c86:	fab3 f383 	clz	r3, r3
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	2b09      	cmp	r3, #9
 8004c94:	bf94      	ite	ls
 8004c96:	2301      	movls	r3, #1
 8004c98:	2300      	movhi	r3, #0
 8004c9a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d079      	beq.n	8004d94 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d107      	bne.n	8004cbc <HAL_ADC_ConfigChannel+0x684>
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	0e9b      	lsrs	r3, r3, #26
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	069b      	lsls	r3, r3, #26
 8004cb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cba:	e015      	b.n	8004ce8 <HAL_ADC_ConfigChannel+0x6b0>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cc4:	fa93 f3a3 	rbit	r3, r3
 8004cc8:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8004cca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ccc:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8004cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8004cd4:	2320      	movs	r3, #32
 8004cd6:	e003      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8004cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cda:	fab3 f383 	clz	r3, r3
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	069b      	lsls	r3, r3, #26
 8004ce4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d109      	bne.n	8004d08 <HAL_ADC_ConfigChannel+0x6d0>
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	0e9b      	lsrs	r3, r3, #26
 8004cfa:	3301      	adds	r3, #1
 8004cfc:	f003 031f 	and.w	r3, r3, #31
 8004d00:	2101      	movs	r1, #1
 8004d02:	fa01 f303 	lsl.w	r3, r1, r3
 8004d06:	e017      	b.n	8004d38 <HAL_ADC_ConfigChannel+0x700>
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d10:	fa93 f3a3 	rbit	r3, r3
 8004d14:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d18:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d101      	bne.n	8004d24 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8004d20:	2320      	movs	r3, #32
 8004d22:	e003      	b.n	8004d2c <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8004d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d26:	fab3 f383 	clz	r3, r3
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	2101      	movs	r1, #1
 8004d34:	fa01 f303 	lsl.w	r3, r1, r3
 8004d38:	ea42 0103 	orr.w	r1, r2, r3
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10a      	bne.n	8004d5e <HAL_ADC_ConfigChannel+0x726>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	0e9b      	lsrs	r3, r3, #26
 8004d4e:	3301      	adds	r3, #1
 8004d50:	f003 021f 	and.w	r2, r3, #31
 8004d54:	4613      	mov	r3, r2
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	4413      	add	r3, r2
 8004d5a:	051b      	lsls	r3, r3, #20
 8004d5c:	e018      	b.n	8004d90 <HAL_ADC_ConfigChannel+0x758>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d66:	fa93 f3a3 	rbit	r3, r3
 8004d6a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8004d76:	2320      	movs	r3, #32
 8004d78:	e003      	b.n	8004d82 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d7c:	fab3 f383 	clz	r3, r3
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	3301      	adds	r3, #1
 8004d84:	f003 021f 	and.w	r2, r3, #31
 8004d88:	4613      	mov	r3, r2
 8004d8a:	005b      	lsls	r3, r3, #1
 8004d8c:	4413      	add	r3, r2
 8004d8e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d90:	430b      	orrs	r3, r1
 8004d92:	e07e      	b.n	8004e92 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d107      	bne.n	8004db0 <HAL_ADC_ConfigChannel+0x778>
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	0e9b      	lsrs	r3, r3, #26
 8004da6:	3301      	adds	r3, #1
 8004da8:	069b      	lsls	r3, r3, #26
 8004daa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dae:	e015      	b.n	8004ddc <HAL_ADC_ConfigChannel+0x7a4>
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db8:	fa93 f3a3 	rbit	r3, r3
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8004dc8:	2320      	movs	r3, #32
 8004dca:	e003      	b.n	8004dd4 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8004dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dce:	fab3 f383 	clz	r3, r3
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	069b      	lsls	r3, r3, #26
 8004dd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d109      	bne.n	8004dfc <HAL_ADC_ConfigChannel+0x7c4>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	0e9b      	lsrs	r3, r3, #26
 8004dee:	3301      	adds	r3, #1
 8004df0:	f003 031f 	and.w	r3, r3, #31
 8004df4:	2101      	movs	r1, #1
 8004df6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfa:	e017      	b.n	8004e2c <HAL_ADC_ConfigChannel+0x7f4>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	fa93 f3a3 	rbit	r3, r3
 8004e08:	61bb      	str	r3, [r7, #24]
  return result;
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8004e14:	2320      	movs	r3, #32
 8004e16:	e003      	b.n	8004e20 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8004e18:	6a3b      	ldr	r3, [r7, #32]
 8004e1a:	fab3 f383 	clz	r3, r3
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	3301      	adds	r3, #1
 8004e22:	f003 031f 	and.w	r3, r3, #31
 8004e26:	2101      	movs	r1, #1
 8004e28:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2c:	ea42 0103 	orr.w	r1, r2, r3
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10d      	bne.n	8004e58 <HAL_ADC_ConfigChannel+0x820>
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	0e9b      	lsrs	r3, r3, #26
 8004e42:	3301      	adds	r3, #1
 8004e44:	f003 021f 	and.w	r2, r3, #31
 8004e48:	4613      	mov	r3, r2
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	4413      	add	r3, r2
 8004e4e:	3b1e      	subs	r3, #30
 8004e50:	051b      	lsls	r3, r3, #20
 8004e52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e56:	e01b      	b.n	8004e90 <HAL_ADC_ConfigChannel+0x858>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	fa93 f3a3 	rbit	r3, r3
 8004e64:	60fb      	str	r3, [r7, #12]
  return result;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d101      	bne.n	8004e74 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8004e70:	2320      	movs	r3, #32
 8004e72:	e003      	b.n	8004e7c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	fab3 f383 	clz	r3, r3
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	f003 021f 	and.w	r2, r3, #31
 8004e82:	4613      	mov	r3, r2
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	4413      	add	r3, r2
 8004e88:	3b1e      	subs	r3, #30
 8004e8a:	051b      	lsls	r3, r3, #20
 8004e8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e90:	430b      	orrs	r3, r1
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	6892      	ldr	r2, [r2, #8]
 8004e96:	4619      	mov	r1, r3
 8004e98:	f7ff f8d2 	bl	8004040 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f280 80d7 	bge.w	8005054 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a06      	ldr	r2, [pc, #24]	; (8004ec4 <HAL_ADC_ConfigChannel+0x88c>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d004      	beq.n	8004eba <HAL_ADC_ConfigChannel+0x882>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a04      	ldr	r2, [pc, #16]	; (8004ec8 <HAL_ADC_ConfigChannel+0x890>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d10a      	bne.n	8004ed0 <HAL_ADC_ConfigChannel+0x898>
 8004eba:	4b04      	ldr	r3, [pc, #16]	; (8004ecc <HAL_ADC_ConfigChannel+0x894>)
 8004ebc:	e009      	b.n	8004ed2 <HAL_ADC_ConfigChannel+0x89a>
 8004ebe:	bf00      	nop
 8004ec0:	47ff0000 	.word	0x47ff0000
 8004ec4:	40022000 	.word	0x40022000
 8004ec8:	40022100 	.word	0x40022100
 8004ecc:	40022300 	.word	0x40022300
 8004ed0:	4b65      	ldr	r3, [pc, #404]	; (8005068 <HAL_ADC_ConfigChannel+0xa30>)
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fe ff88 	bl	8003de8 <LL_ADC_GetCommonPathInternalCh>
 8004ed8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a62      	ldr	r2, [pc, #392]	; (800506c <HAL_ADC_ConfigChannel+0xa34>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d004      	beq.n	8004ef0 <HAL_ADC_ConfigChannel+0x8b8>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a61      	ldr	r2, [pc, #388]	; (8005070 <HAL_ADC_ConfigChannel+0xa38>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d10e      	bne.n	8004f0e <HAL_ADC_ConfigChannel+0x8d6>
 8004ef0:	485e      	ldr	r0, [pc, #376]	; (800506c <HAL_ADC_ConfigChannel+0xa34>)
 8004ef2:	f7ff f95f 	bl	80041b4 <LL_ADC_IsEnabled>
 8004ef6:	4604      	mov	r4, r0
 8004ef8:	485d      	ldr	r0, [pc, #372]	; (8005070 <HAL_ADC_ConfigChannel+0xa38>)
 8004efa:	f7ff f95b 	bl	80041b4 <LL_ADC_IsEnabled>
 8004efe:	4603      	mov	r3, r0
 8004f00:	4323      	orrs	r3, r4
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bf0c      	ite	eq
 8004f06:	2301      	moveq	r3, #1
 8004f08:	2300      	movne	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	e008      	b.n	8004f20 <HAL_ADC_ConfigChannel+0x8e8>
 8004f0e:	4859      	ldr	r0, [pc, #356]	; (8005074 <HAL_ADC_ConfigChannel+0xa3c>)
 8004f10:	f7ff f950 	bl	80041b4 <LL_ADC_IsEnabled>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	bf0c      	ite	eq
 8004f1a:	2301      	moveq	r3, #1
 8004f1c:	2300      	movne	r3, #0
 8004f1e:	b2db      	uxtb	r3, r3
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 8084 	beq.w	800502e <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a53      	ldr	r2, [pc, #332]	; (8005078 <HAL_ADC_ConfigChannel+0xa40>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d132      	bne.n	8004f96 <HAL_ADC_ConfigChannel+0x95e>
 8004f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d12c      	bne.n	8004f96 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a4c      	ldr	r2, [pc, #304]	; (8005074 <HAL_ADC_ConfigChannel+0xa3c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	f040 8086 	bne.w	8005054 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a47      	ldr	r2, [pc, #284]	; (800506c <HAL_ADC_ConfigChannel+0xa34>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d004      	beq.n	8004f5c <HAL_ADC_ConfigChannel+0x924>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a46      	ldr	r2, [pc, #280]	; (8005070 <HAL_ADC_ConfigChannel+0xa38>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d101      	bne.n	8004f60 <HAL_ADC_ConfigChannel+0x928>
 8004f5c:	4a47      	ldr	r2, [pc, #284]	; (800507c <HAL_ADC_ConfigChannel+0xa44>)
 8004f5e:	e000      	b.n	8004f62 <HAL_ADC_ConfigChannel+0x92a>
 8004f60:	4a41      	ldr	r2, [pc, #260]	; (8005068 <HAL_ADC_ConfigChannel+0xa30>)
 8004f62:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004f66:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	4610      	mov	r0, r2
 8004f6e:	f7fe ff28 	bl	8003dc2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004f72:	4b43      	ldr	r3, [pc, #268]	; (8005080 <HAL_ADC_ConfigChannel+0xa48>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	099b      	lsrs	r3, r3, #6
 8004f78:	4a42      	ldr	r2, [pc, #264]	; (8005084 <HAL_ADC_ConfigChannel+0xa4c>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	099b      	lsrs	r3, r3, #6
 8004f80:	3301      	adds	r3, #1
 8004f82:	005b      	lsls	r3, r3, #1
 8004f84:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004f86:	e002      	b.n	8004f8e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1f9      	bne.n	8004f88 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004f94:	e05e      	b.n	8005054 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a3b      	ldr	r2, [pc, #236]	; (8005088 <HAL_ADC_ConfigChannel+0xa50>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d120      	bne.n	8004fe2 <HAL_ADC_ConfigChannel+0x9aa>
 8004fa0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d11a      	bne.n	8004fe2 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a30      	ldr	r2, [pc, #192]	; (8005074 <HAL_ADC_ConfigChannel+0xa3c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d14e      	bne.n	8005054 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a2c      	ldr	r2, [pc, #176]	; (800506c <HAL_ADC_ConfigChannel+0xa34>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d004      	beq.n	8004fca <HAL_ADC_ConfigChannel+0x992>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a2a      	ldr	r2, [pc, #168]	; (8005070 <HAL_ADC_ConfigChannel+0xa38>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d101      	bne.n	8004fce <HAL_ADC_ConfigChannel+0x996>
 8004fca:	4a2c      	ldr	r2, [pc, #176]	; (800507c <HAL_ADC_ConfigChannel+0xa44>)
 8004fcc:	e000      	b.n	8004fd0 <HAL_ADC_ConfigChannel+0x998>
 8004fce:	4a26      	ldr	r2, [pc, #152]	; (8005068 <HAL_ADC_ConfigChannel+0xa30>)
 8004fd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004fd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	f7fe fef1 	bl	8003dc2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004fe0:	e038      	b.n	8005054 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a29      	ldr	r2, [pc, #164]	; (800508c <HAL_ADC_ConfigChannel+0xa54>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d133      	bne.n	8005054 <HAL_ADC_ConfigChannel+0xa1c>
 8004fec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004ff0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d12d      	bne.n	8005054 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a1d      	ldr	r2, [pc, #116]	; (8005074 <HAL_ADC_ConfigChannel+0xa3c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d128      	bne.n	8005054 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a19      	ldr	r2, [pc, #100]	; (800506c <HAL_ADC_ConfigChannel+0xa34>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d004      	beq.n	8005016 <HAL_ADC_ConfigChannel+0x9de>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a17      	ldr	r2, [pc, #92]	; (8005070 <HAL_ADC_ConfigChannel+0xa38>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d101      	bne.n	800501a <HAL_ADC_ConfigChannel+0x9e2>
 8005016:	4a19      	ldr	r2, [pc, #100]	; (800507c <HAL_ADC_ConfigChannel+0xa44>)
 8005018:	e000      	b.n	800501c <HAL_ADC_ConfigChannel+0x9e4>
 800501a:	4a13      	ldr	r2, [pc, #76]	; (8005068 <HAL_ADC_ConfigChannel+0xa30>)
 800501c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005020:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005024:	4619      	mov	r1, r3
 8005026:	4610      	mov	r0, r2
 8005028:	f7fe fecb 	bl	8003dc2 <LL_ADC_SetCommonPathInternalCh>
 800502c:	e012      	b.n	8005054 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005032:	f043 0220 	orr.w	r2, r3, #32
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8005040:	e008      	b.n	8005054 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005046:	f043 0220 	orr.w	r2, r3, #32
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 800505c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8005060:	4618      	mov	r0, r3
 8005062:	37e4      	adds	r7, #228	; 0xe4
 8005064:	46bd      	mov	sp, r7
 8005066:	bd90      	pop	{r4, r7, pc}
 8005068:	58026300 	.word	0x58026300
 800506c:	40022000 	.word	0x40022000
 8005070:	40022100 	.word	0x40022100
 8005074:	58026000 	.word	0x58026000
 8005078:	c7520000 	.word	0xc7520000
 800507c:	40022300 	.word	0x40022300
 8005080:	24000000 	.word	0x24000000
 8005084:	053e2d63 	.word	0x053e2d63
 8005088:	c3210000 	.word	0xc3210000
 800508c:	cb840000 	.word	0xcb840000

08005090 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a6c      	ldr	r2, [pc, #432]	; (8005250 <ADC_ConfigureBoostMode+0x1c0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d004      	beq.n	80050ac <ADC_ConfigureBoostMode+0x1c>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a6b      	ldr	r2, [pc, #428]	; (8005254 <ADC_ConfigureBoostMode+0x1c4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d109      	bne.n	80050c0 <ADC_ConfigureBoostMode+0x30>
 80050ac:	4b6a      	ldr	r3, [pc, #424]	; (8005258 <ADC_ConfigureBoostMode+0x1c8>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	bf14      	ite	ne
 80050b8:	2301      	movne	r3, #1
 80050ba:	2300      	moveq	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	e008      	b.n	80050d2 <ADC_ConfigureBoostMode+0x42>
 80050c0:	4b66      	ldr	r3, [pc, #408]	; (800525c <ADC_ConfigureBoostMode+0x1cc>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	bf14      	ite	ne
 80050cc:	2301      	movne	r3, #1
 80050ce:	2300      	moveq	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d01c      	beq.n	8005110 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80050d6:	f005 fcab 	bl	800aa30 <HAL_RCC_GetHCLKFreq>
 80050da:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050e4:	d010      	beq.n	8005108 <ADC_ConfigureBoostMode+0x78>
 80050e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050ea:	d873      	bhi.n	80051d4 <ADC_ConfigureBoostMode+0x144>
 80050ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050f0:	d002      	beq.n	80050f8 <ADC_ConfigureBoostMode+0x68>
 80050f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050f6:	d16d      	bne.n	80051d4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	0c1b      	lsrs	r3, r3, #16
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	fbb2 f3f3 	udiv	r3, r2, r3
 8005104:	60fb      	str	r3, [r7, #12]
        break;
 8005106:	e068      	b.n	80051da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	089b      	lsrs	r3, r3, #2
 800510c:	60fb      	str	r3, [r7, #12]
        break;
 800510e:	e064      	b.n	80051da <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005110:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005114:	f04f 0100 	mov.w	r1, #0
 8005118:	f006 fe86 	bl	800be28 <HAL_RCCEx_GetPeriphCLKFreq>
 800511c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005126:	d051      	beq.n	80051cc <ADC_ConfigureBoostMode+0x13c>
 8005128:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800512c:	d854      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x148>
 800512e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005132:	d047      	beq.n	80051c4 <ADC_ConfigureBoostMode+0x134>
 8005134:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005138:	d84e      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x148>
 800513a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800513e:	d03d      	beq.n	80051bc <ADC_ConfigureBoostMode+0x12c>
 8005140:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005144:	d848      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x148>
 8005146:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800514a:	d033      	beq.n	80051b4 <ADC_ConfigureBoostMode+0x124>
 800514c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005150:	d842      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x148>
 8005152:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005156:	d029      	beq.n	80051ac <ADC_ConfigureBoostMode+0x11c>
 8005158:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800515c:	d83c      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x148>
 800515e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005162:	d01a      	beq.n	800519a <ADC_ConfigureBoostMode+0x10a>
 8005164:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005168:	d836      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x148>
 800516a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800516e:	d014      	beq.n	800519a <ADC_ConfigureBoostMode+0x10a>
 8005170:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005174:	d830      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x148>
 8005176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800517a:	d00e      	beq.n	800519a <ADC_ConfigureBoostMode+0x10a>
 800517c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005180:	d82a      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x148>
 8005182:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005186:	d008      	beq.n	800519a <ADC_ConfigureBoostMode+0x10a>
 8005188:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800518c:	d824      	bhi.n	80051d8 <ADC_ConfigureBoostMode+0x148>
 800518e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005192:	d002      	beq.n	800519a <ADC_ConfigureBoostMode+0x10a>
 8005194:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005198:	d11e      	bne.n	80051d8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	0c9b      	lsrs	r3, r3, #18
 80051a0:	005b      	lsls	r3, r3, #1
 80051a2:	68fa      	ldr	r2, [r7, #12]
 80051a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a8:	60fb      	str	r3, [r7, #12]
        break;
 80051aa:	e016      	b.n	80051da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	091b      	lsrs	r3, r3, #4
 80051b0:	60fb      	str	r3, [r7, #12]
        break;
 80051b2:	e012      	b.n	80051da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	095b      	lsrs	r3, r3, #5
 80051b8:	60fb      	str	r3, [r7, #12]
        break;
 80051ba:	e00e      	b.n	80051da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	099b      	lsrs	r3, r3, #6
 80051c0:	60fb      	str	r3, [r7, #12]
        break;
 80051c2:	e00a      	b.n	80051da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	09db      	lsrs	r3, r3, #7
 80051c8:	60fb      	str	r3, [r7, #12]
        break;
 80051ca:	e006      	b.n	80051da <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	0a1b      	lsrs	r3, r3, #8
 80051d0:	60fb      	str	r3, [r7, #12]
        break;
 80051d2:	e002      	b.n	80051da <ADC_ConfigureBoostMode+0x14a>
        break;
 80051d4:	bf00      	nop
 80051d6:	e000      	b.n	80051da <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80051d8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	085b      	lsrs	r3, r3, #1
 80051de:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4a1f      	ldr	r2, [pc, #124]	; (8005260 <ADC_ConfigureBoostMode+0x1d0>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d808      	bhi.n	80051fa <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80051f6:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80051f8:	e025      	b.n	8005246 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	4a19      	ldr	r2, [pc, #100]	; (8005264 <ADC_ConfigureBoostMode+0x1d4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d80a      	bhi.n	8005218 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005214:	609a      	str	r2, [r3, #8]
}
 8005216:	e016      	b.n	8005246 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4a13      	ldr	r2, [pc, #76]	; (8005268 <ADC_ConfigureBoostMode+0x1d8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d80a      	bhi.n	8005236 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005232:	609a      	str	r2, [r3, #8]
}
 8005234:	e007      	b.n	8005246 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005244:	609a      	str	r2, [r3, #8]
}
 8005246:	bf00      	nop
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	40022000 	.word	0x40022000
 8005254:	40022100 	.word	0x40022100
 8005258:	40022300 	.word	0x40022300
 800525c:	58026300 	.word	0x58026300
 8005260:	005f5e10 	.word	0x005f5e10
 8005264:	00bebc20 	.word	0x00bebc20
 8005268:	017d7840 	.word	0x017d7840

0800526c <LL_ADC_IsEnabled>:
{
 800526c:	b480      	push	{r7}
 800526e:	b083      	sub	sp, #12
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b01      	cmp	r3, #1
 800527e:	d101      	bne.n	8005284 <LL_ADC_IsEnabled+0x18>
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <LL_ADC_IsEnabled+0x1a>
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	370c      	adds	r7, #12
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr

08005292 <LL_ADC_REG_IsConversionOngoing>:
{
 8005292:	b480      	push	{r7}
 8005294:	b083      	sub	sp, #12
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 0304 	and.w	r3, r3, #4
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d101      	bne.n	80052aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80052a6:	2301      	movs	r3, #1
 80052a8:	e000      	b.n	80052ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80052b8:	b590      	push	{r4, r7, lr}
 80052ba:	b0a3      	sub	sp, #140	; 0x8c
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d101      	bne.n	80052d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80052d2:	2302      	movs	r3, #2
 80052d4:	e0c1      	b.n	800545a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2201      	movs	r2, #1
 80052da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80052de:	2300      	movs	r3, #0
 80052e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80052e2:	2300      	movs	r3, #0
 80052e4:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a5e      	ldr	r2, [pc, #376]	; (8005464 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d102      	bne.n	80052f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80052f0:	4b5d      	ldr	r3, [pc, #372]	; (8005468 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	e001      	b.n	80052fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10b      	bne.n	8005318 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005304:	f043 0220 	orr.w	r2, r3, #32
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e0a0      	b.n	800545a <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4618      	mov	r0, r3
 800531c:	f7ff ffb9 	bl	8005292 <LL_ADC_REG_IsConversionOngoing>
 8005320:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4618      	mov	r0, r3
 800532a:	f7ff ffb2 	bl	8005292 <LL_ADC_REG_IsConversionOngoing>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	f040 8081 	bne.w	8005438 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005336:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800533a:	2b00      	cmp	r3, #0
 800533c:	d17c      	bne.n	8005438 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a48      	ldr	r2, [pc, #288]	; (8005464 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d004      	beq.n	8005352 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a46      	ldr	r2, [pc, #280]	; (8005468 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d101      	bne.n	8005356 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8005352:	4b46      	ldr	r3, [pc, #280]	; (800546c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005354:	e000      	b.n	8005358 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8005356:	4b46      	ldr	r3, [pc, #280]	; (8005470 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005358:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d039      	beq.n	80053d6 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005362:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	431a      	orrs	r2, r3
 8005370:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005372:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a3a      	ldr	r2, [pc, #232]	; (8005464 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d004      	beq.n	8005388 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a39      	ldr	r2, [pc, #228]	; (8005468 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d10e      	bne.n	80053a6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8005388:	4836      	ldr	r0, [pc, #216]	; (8005464 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800538a:	f7ff ff6f 	bl	800526c <LL_ADC_IsEnabled>
 800538e:	4604      	mov	r4, r0
 8005390:	4835      	ldr	r0, [pc, #212]	; (8005468 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005392:	f7ff ff6b 	bl	800526c <LL_ADC_IsEnabled>
 8005396:	4603      	mov	r3, r0
 8005398:	4323      	orrs	r3, r4
 800539a:	2b00      	cmp	r3, #0
 800539c:	bf0c      	ite	eq
 800539e:	2301      	moveq	r3, #1
 80053a0:	2300      	movne	r3, #0
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	e008      	b.n	80053b8 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80053a6:	4833      	ldr	r0, [pc, #204]	; (8005474 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80053a8:	f7ff ff60 	bl	800526c <LL_ADC_IsEnabled>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	bf0c      	ite	eq
 80053b2:	2301      	moveq	r3, #1
 80053b4:	2300      	movne	r3, #0
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d047      	beq.n	800544c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80053bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053be:	689a      	ldr	r2, [r3, #8]
 80053c0:	4b2d      	ldr	r3, [pc, #180]	; (8005478 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	6811      	ldr	r1, [r2, #0]
 80053c8:	683a      	ldr	r2, [r7, #0]
 80053ca:	6892      	ldr	r2, [r2, #8]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	431a      	orrs	r2, r3
 80053d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053d2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80053d4:	e03a      	b.n	800544c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80053d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80053de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80053e0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a1f      	ldr	r2, [pc, #124]	; (8005464 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d004      	beq.n	80053f6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a1d      	ldr	r2, [pc, #116]	; (8005468 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d10e      	bne.n	8005414 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80053f6:	481b      	ldr	r0, [pc, #108]	; (8005464 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80053f8:	f7ff ff38 	bl	800526c <LL_ADC_IsEnabled>
 80053fc:	4604      	mov	r4, r0
 80053fe:	481a      	ldr	r0, [pc, #104]	; (8005468 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8005400:	f7ff ff34 	bl	800526c <LL_ADC_IsEnabled>
 8005404:	4603      	mov	r3, r0
 8005406:	4323      	orrs	r3, r4
 8005408:	2b00      	cmp	r3, #0
 800540a:	bf0c      	ite	eq
 800540c:	2301      	moveq	r3, #1
 800540e:	2300      	movne	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	e008      	b.n	8005426 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8005414:	4817      	ldr	r0, [pc, #92]	; (8005474 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8005416:	f7ff ff29 	bl	800526c <LL_ADC_IsEnabled>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	bf0c      	ite	eq
 8005420:	2301      	moveq	r3, #1
 8005422:	2300      	movne	r3, #0
 8005424:	b2db      	uxtb	r3, r3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d010      	beq.n	800544c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800542a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	4b12      	ldr	r3, [pc, #72]	; (8005478 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8005430:	4013      	ands	r3, r2
 8005432:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005434:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005436:	e009      	b.n	800544c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800543c:	f043 0220 	orr.w	r2, r3, #32
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800544a:	e000      	b.n	800544e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800544c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8005456:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 800545a:	4618      	mov	r0, r3
 800545c:	378c      	adds	r7, #140	; 0x8c
 800545e:	46bd      	mov	sp, r7
 8005460:	bd90      	pop	{r4, r7, pc}
 8005462:	bf00      	nop
 8005464:	40022000 	.word	0x40022000
 8005468:	40022100 	.word	0x40022100
 800546c:	40022300 	.word	0x40022300
 8005470:	58026300 	.word	0x58026300
 8005474:	58026000 	.word	0x58026000
 8005478:	fffff0e0 	.word	0xfffff0e0

0800547c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800547c:	b480      	push	{r7}
 800547e:	b085      	sub	sp, #20
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f003 0307 	and.w	r3, r3, #7
 800548a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800548c:	4b0b      	ldr	r3, [pc, #44]	; (80054bc <__NVIC_SetPriorityGrouping+0x40>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005498:	4013      	ands	r3, r2
 800549a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80054a4:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <__NVIC_SetPriorityGrouping+0x44>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054aa:	4a04      	ldr	r2, [pc, #16]	; (80054bc <__NVIC_SetPriorityGrouping+0x40>)
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	60d3      	str	r3, [r2, #12]
}
 80054b0:	bf00      	nop
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	e000ed00 	.word	0xe000ed00
 80054c0:	05fa0000 	.word	0x05fa0000

080054c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054c8:	4b04      	ldr	r3, [pc, #16]	; (80054dc <__NVIC_GetPriorityGrouping+0x18>)
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	0a1b      	lsrs	r3, r3, #8
 80054ce:	f003 0307 	and.w	r3, r3, #7
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	e000ed00 	.word	0xe000ed00

080054e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b083      	sub	sp, #12
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	4603      	mov	r3, r0
 80054e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80054ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	db0b      	blt.n	800550a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054f2:	88fb      	ldrh	r3, [r7, #6]
 80054f4:	f003 021f 	and.w	r2, r3, #31
 80054f8:	4907      	ldr	r1, [pc, #28]	; (8005518 <__NVIC_EnableIRQ+0x38>)
 80054fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054fe:	095b      	lsrs	r3, r3, #5
 8005500:	2001      	movs	r0, #1
 8005502:	fa00 f202 	lsl.w	r2, r0, r2
 8005506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	e000e100 	.word	0xe000e100

0800551c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	4603      	mov	r3, r0
 8005524:	6039      	str	r1, [r7, #0]
 8005526:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005528:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800552c:	2b00      	cmp	r3, #0
 800552e:	db0a      	blt.n	8005546 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	b2da      	uxtb	r2, r3
 8005534:	490c      	ldr	r1, [pc, #48]	; (8005568 <__NVIC_SetPriority+0x4c>)
 8005536:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800553a:	0112      	lsls	r2, r2, #4
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	440b      	add	r3, r1
 8005540:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005544:	e00a      	b.n	800555c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	b2da      	uxtb	r2, r3
 800554a:	4908      	ldr	r1, [pc, #32]	; (800556c <__NVIC_SetPriority+0x50>)
 800554c:	88fb      	ldrh	r3, [r7, #6]
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	3b04      	subs	r3, #4
 8005554:	0112      	lsls	r2, r2, #4
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	440b      	add	r3, r1
 800555a:	761a      	strb	r2, [r3, #24]
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr
 8005568:	e000e100 	.word	0xe000e100
 800556c:	e000ed00 	.word	0xe000ed00

08005570 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005570:	b480      	push	{r7}
 8005572:	b089      	sub	sp, #36	; 0x24
 8005574:	af00      	add	r7, sp, #0
 8005576:	60f8      	str	r0, [r7, #12]
 8005578:	60b9      	str	r1, [r7, #8]
 800557a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f003 0307 	and.w	r3, r3, #7
 8005582:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f1c3 0307 	rsb	r3, r3, #7
 800558a:	2b04      	cmp	r3, #4
 800558c:	bf28      	it	cs
 800558e:	2304      	movcs	r3, #4
 8005590:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005592:	69fb      	ldr	r3, [r7, #28]
 8005594:	3304      	adds	r3, #4
 8005596:	2b06      	cmp	r3, #6
 8005598:	d902      	bls.n	80055a0 <NVIC_EncodePriority+0x30>
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	3b03      	subs	r3, #3
 800559e:	e000      	b.n	80055a2 <NVIC_EncodePriority+0x32>
 80055a0:	2300      	movs	r3, #0
 80055a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055a4:	f04f 32ff 	mov.w	r2, #4294967295
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	fa02 f303 	lsl.w	r3, r2, r3
 80055ae:	43da      	mvns	r2, r3
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	401a      	ands	r2, r3
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055b8:	f04f 31ff 	mov.w	r1, #4294967295
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	fa01 f303 	lsl.w	r3, r1, r3
 80055c2:	43d9      	mvns	r1, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055c8:	4313      	orrs	r3, r2
         );
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3724      	adds	r7, #36	; 0x24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
	...

080055d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	3b01      	subs	r3, #1
 80055e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055e8:	d301      	bcc.n	80055ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055ea:	2301      	movs	r3, #1
 80055ec:	e00f      	b.n	800560e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055ee:	4a0a      	ldr	r2, [pc, #40]	; (8005618 <SysTick_Config+0x40>)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055f6:	210f      	movs	r1, #15
 80055f8:	f04f 30ff 	mov.w	r0, #4294967295
 80055fc:	f7ff ff8e 	bl	800551c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005600:	4b05      	ldr	r3, [pc, #20]	; (8005618 <SysTick_Config+0x40>)
 8005602:	2200      	movs	r2, #0
 8005604:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005606:	4b04      	ldr	r3, [pc, #16]	; (8005618 <SysTick_Config+0x40>)
 8005608:	2207      	movs	r2, #7
 800560a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3708      	adds	r7, #8
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	e000e010 	.word	0xe000e010

0800561c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f7ff ff29 	bl	800547c <__NVIC_SetPriorityGrouping>
}
 800562a:	bf00      	nop
 800562c:	3708      	adds	r7, #8
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005632:	b580      	push	{r7, lr}
 8005634:	b086      	sub	sp, #24
 8005636:	af00      	add	r7, sp, #0
 8005638:	4603      	mov	r3, r0
 800563a:	60b9      	str	r1, [r7, #8]
 800563c:	607a      	str	r2, [r7, #4]
 800563e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005640:	f7ff ff40 	bl	80054c4 <__NVIC_GetPriorityGrouping>
 8005644:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	68b9      	ldr	r1, [r7, #8]
 800564a:	6978      	ldr	r0, [r7, #20]
 800564c:	f7ff ff90 	bl	8005570 <NVIC_EncodePriority>
 8005650:	4602      	mov	r2, r0
 8005652:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005656:	4611      	mov	r1, r2
 8005658:	4618      	mov	r0, r3
 800565a:	f7ff ff5f 	bl	800551c <__NVIC_SetPriority>
}
 800565e:	bf00      	nop
 8005660:	3718      	adds	r7, #24
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b082      	sub	sp, #8
 800566a:	af00      	add	r7, sp, #0
 800566c:	4603      	mov	r3, r0
 800566e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005670:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005674:	4618      	mov	r0, r3
 8005676:	f7ff ff33 	bl	80054e0 <__NVIC_EnableIRQ>
}
 800567a:	bf00      	nop
 800567c:	3708      	adds	r7, #8
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b082      	sub	sp, #8
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff ffa4 	bl	80055d8 <SysTick_Config>
 8005690:	4603      	mov	r3, r0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3708      	adds	r7, #8
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
	...

0800569c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80056a4:	f7fe fb34 	bl	8003d10 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d101      	bne.n	80056b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e312      	b.n	8005cda <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a66      	ldr	r2, [pc, #408]	; (8005854 <HAL_DMA_Init+0x1b8>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d04a      	beq.n	8005754 <HAL_DMA_Init+0xb8>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a65      	ldr	r2, [pc, #404]	; (8005858 <HAL_DMA_Init+0x1bc>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d045      	beq.n	8005754 <HAL_DMA_Init+0xb8>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a63      	ldr	r2, [pc, #396]	; (800585c <HAL_DMA_Init+0x1c0>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d040      	beq.n	8005754 <HAL_DMA_Init+0xb8>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a62      	ldr	r2, [pc, #392]	; (8005860 <HAL_DMA_Init+0x1c4>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d03b      	beq.n	8005754 <HAL_DMA_Init+0xb8>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a60      	ldr	r2, [pc, #384]	; (8005864 <HAL_DMA_Init+0x1c8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d036      	beq.n	8005754 <HAL_DMA_Init+0xb8>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a5f      	ldr	r2, [pc, #380]	; (8005868 <HAL_DMA_Init+0x1cc>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d031      	beq.n	8005754 <HAL_DMA_Init+0xb8>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a5d      	ldr	r2, [pc, #372]	; (800586c <HAL_DMA_Init+0x1d0>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d02c      	beq.n	8005754 <HAL_DMA_Init+0xb8>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a5c      	ldr	r2, [pc, #368]	; (8005870 <HAL_DMA_Init+0x1d4>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d027      	beq.n	8005754 <HAL_DMA_Init+0xb8>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a5a      	ldr	r2, [pc, #360]	; (8005874 <HAL_DMA_Init+0x1d8>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d022      	beq.n	8005754 <HAL_DMA_Init+0xb8>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a59      	ldr	r2, [pc, #356]	; (8005878 <HAL_DMA_Init+0x1dc>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d01d      	beq.n	8005754 <HAL_DMA_Init+0xb8>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a57      	ldr	r2, [pc, #348]	; (800587c <HAL_DMA_Init+0x1e0>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d018      	beq.n	8005754 <HAL_DMA_Init+0xb8>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a56      	ldr	r2, [pc, #344]	; (8005880 <HAL_DMA_Init+0x1e4>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d013      	beq.n	8005754 <HAL_DMA_Init+0xb8>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a54      	ldr	r2, [pc, #336]	; (8005884 <HAL_DMA_Init+0x1e8>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00e      	beq.n	8005754 <HAL_DMA_Init+0xb8>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a53      	ldr	r2, [pc, #332]	; (8005888 <HAL_DMA_Init+0x1ec>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d009      	beq.n	8005754 <HAL_DMA_Init+0xb8>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a51      	ldr	r2, [pc, #324]	; (800588c <HAL_DMA_Init+0x1f0>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d004      	beq.n	8005754 <HAL_DMA_Init+0xb8>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a50      	ldr	r2, [pc, #320]	; (8005890 <HAL_DMA_Init+0x1f4>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d101      	bne.n	8005758 <HAL_DMA_Init+0xbc>
 8005754:	2301      	movs	r3, #1
 8005756:	e000      	b.n	800575a <HAL_DMA_Init+0xbe>
 8005758:	2300      	movs	r3, #0
 800575a:	2b00      	cmp	r3, #0
 800575c:	f000 813c 	beq.w	80059d8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a37      	ldr	r2, [pc, #220]	; (8005854 <HAL_DMA_Init+0x1b8>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d04a      	beq.n	8005810 <HAL_DMA_Init+0x174>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a36      	ldr	r2, [pc, #216]	; (8005858 <HAL_DMA_Init+0x1bc>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d045      	beq.n	8005810 <HAL_DMA_Init+0x174>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a34      	ldr	r2, [pc, #208]	; (800585c <HAL_DMA_Init+0x1c0>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d040      	beq.n	8005810 <HAL_DMA_Init+0x174>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a33      	ldr	r2, [pc, #204]	; (8005860 <HAL_DMA_Init+0x1c4>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d03b      	beq.n	8005810 <HAL_DMA_Init+0x174>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a31      	ldr	r2, [pc, #196]	; (8005864 <HAL_DMA_Init+0x1c8>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d036      	beq.n	8005810 <HAL_DMA_Init+0x174>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a30      	ldr	r2, [pc, #192]	; (8005868 <HAL_DMA_Init+0x1cc>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d031      	beq.n	8005810 <HAL_DMA_Init+0x174>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a2e      	ldr	r2, [pc, #184]	; (800586c <HAL_DMA_Init+0x1d0>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d02c      	beq.n	8005810 <HAL_DMA_Init+0x174>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a2d      	ldr	r2, [pc, #180]	; (8005870 <HAL_DMA_Init+0x1d4>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d027      	beq.n	8005810 <HAL_DMA_Init+0x174>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a2b      	ldr	r2, [pc, #172]	; (8005874 <HAL_DMA_Init+0x1d8>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d022      	beq.n	8005810 <HAL_DMA_Init+0x174>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a2a      	ldr	r2, [pc, #168]	; (8005878 <HAL_DMA_Init+0x1dc>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d01d      	beq.n	8005810 <HAL_DMA_Init+0x174>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a28      	ldr	r2, [pc, #160]	; (800587c <HAL_DMA_Init+0x1e0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d018      	beq.n	8005810 <HAL_DMA_Init+0x174>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a27      	ldr	r2, [pc, #156]	; (8005880 <HAL_DMA_Init+0x1e4>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d013      	beq.n	8005810 <HAL_DMA_Init+0x174>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a25      	ldr	r2, [pc, #148]	; (8005884 <HAL_DMA_Init+0x1e8>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00e      	beq.n	8005810 <HAL_DMA_Init+0x174>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a24      	ldr	r2, [pc, #144]	; (8005888 <HAL_DMA_Init+0x1ec>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d009      	beq.n	8005810 <HAL_DMA_Init+0x174>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a22      	ldr	r2, [pc, #136]	; (800588c <HAL_DMA_Init+0x1f0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d004      	beq.n	8005810 <HAL_DMA_Init+0x174>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a21      	ldr	r2, [pc, #132]	; (8005890 <HAL_DMA_Init+0x1f4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d108      	bne.n	8005822 <HAL_DMA_Init+0x186>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f022 0201 	bic.w	r2, r2, #1
 800581e:	601a      	str	r2, [r3, #0]
 8005820:	e007      	b.n	8005832 <HAL_DMA_Init+0x196>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0201 	bic.w	r2, r2, #1
 8005830:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005832:	e02f      	b.n	8005894 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005834:	f7fe fa6c 	bl	8003d10 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b05      	cmp	r3, #5
 8005840:	d928      	bls.n	8005894 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2220      	movs	r2, #32
 8005846:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2203      	movs	r2, #3
 800584c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e242      	b.n	8005cda <HAL_DMA_Init+0x63e>
 8005854:	40020010 	.word	0x40020010
 8005858:	40020028 	.word	0x40020028
 800585c:	40020040 	.word	0x40020040
 8005860:	40020058 	.word	0x40020058
 8005864:	40020070 	.word	0x40020070
 8005868:	40020088 	.word	0x40020088
 800586c:	400200a0 	.word	0x400200a0
 8005870:	400200b8 	.word	0x400200b8
 8005874:	40020410 	.word	0x40020410
 8005878:	40020428 	.word	0x40020428
 800587c:	40020440 	.word	0x40020440
 8005880:	40020458 	.word	0x40020458
 8005884:	40020470 	.word	0x40020470
 8005888:	40020488 	.word	0x40020488
 800588c:	400204a0 	.word	0x400204a0
 8005890:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f003 0301 	and.w	r3, r3, #1
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1c8      	bne.n	8005834 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4b83      	ldr	r3, [pc, #524]	; (8005abc <HAL_DMA_Init+0x420>)
 80058ae:	4013      	ands	r3, r2
 80058b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80058ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80058c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80058d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	4313      	orrs	r3, r2
 80058de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	2b04      	cmp	r3, #4
 80058e6:	d107      	bne.n	80058f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f0:	4313      	orrs	r3, r2
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	2b28      	cmp	r3, #40	; 0x28
 80058fe:	d903      	bls.n	8005908 <HAL_DMA_Init+0x26c>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	2b2e      	cmp	r3, #46	; 0x2e
 8005906:	d91f      	bls.n	8005948 <HAL_DMA_Init+0x2ac>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	2b3e      	cmp	r3, #62	; 0x3e
 800590e:	d903      	bls.n	8005918 <HAL_DMA_Init+0x27c>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	2b42      	cmp	r3, #66	; 0x42
 8005916:	d917      	bls.n	8005948 <HAL_DMA_Init+0x2ac>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b46      	cmp	r3, #70	; 0x46
 800591e:	d903      	bls.n	8005928 <HAL_DMA_Init+0x28c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	2b48      	cmp	r3, #72	; 0x48
 8005926:	d90f      	bls.n	8005948 <HAL_DMA_Init+0x2ac>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	2b4e      	cmp	r3, #78	; 0x4e
 800592e:	d903      	bls.n	8005938 <HAL_DMA_Init+0x29c>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b52      	cmp	r3, #82	; 0x52
 8005936:	d907      	bls.n	8005948 <HAL_DMA_Init+0x2ac>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b73      	cmp	r3, #115	; 0x73
 800593e:	d905      	bls.n	800594c <HAL_DMA_Init+0x2b0>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	2b77      	cmp	r3, #119	; 0x77
 8005946:	d801      	bhi.n	800594c <HAL_DMA_Init+0x2b0>
 8005948:	2301      	movs	r3, #1
 800594a:	e000      	b.n	800594e <HAL_DMA_Init+0x2b2>
 800594c:	2300      	movs	r3, #0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d003      	beq.n	800595a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005958:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	697a      	ldr	r2, [r7, #20]
 8005960:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	695b      	ldr	r3, [r3, #20]
 8005968:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f023 0307 	bic.w	r3, r3, #7
 8005970:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	2b04      	cmp	r3, #4
 8005982:	d117      	bne.n	80059b4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	4313      	orrs	r3, r2
 800598c:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00e      	beq.n	80059b4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f001 fdca 	bl	8007530 <DMA_CheckFifoParam>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d008      	beq.n	80059b4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2240      	movs	r2, #64	; 0x40
 80059a6:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e192      	b.n	8005cda <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f001 fd05 	bl	80073cc <DMA_CalcBaseAndBitshift>
 80059c2:	4603      	mov	r3, r0
 80059c4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ca:	f003 031f 	and.w	r3, r3, #31
 80059ce:	223f      	movs	r2, #63	; 0x3f
 80059d0:	409a      	lsls	r2, r3
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	609a      	str	r2, [r3, #8]
 80059d6:	e0c8      	b.n	8005b6a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a38      	ldr	r2, [pc, #224]	; (8005ac0 <HAL_DMA_Init+0x424>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d022      	beq.n	8005a28 <HAL_DMA_Init+0x38c>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a37      	ldr	r2, [pc, #220]	; (8005ac4 <HAL_DMA_Init+0x428>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d01d      	beq.n	8005a28 <HAL_DMA_Init+0x38c>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a35      	ldr	r2, [pc, #212]	; (8005ac8 <HAL_DMA_Init+0x42c>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d018      	beq.n	8005a28 <HAL_DMA_Init+0x38c>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a34      	ldr	r2, [pc, #208]	; (8005acc <HAL_DMA_Init+0x430>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d013      	beq.n	8005a28 <HAL_DMA_Init+0x38c>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a32      	ldr	r2, [pc, #200]	; (8005ad0 <HAL_DMA_Init+0x434>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00e      	beq.n	8005a28 <HAL_DMA_Init+0x38c>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a31      	ldr	r2, [pc, #196]	; (8005ad4 <HAL_DMA_Init+0x438>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d009      	beq.n	8005a28 <HAL_DMA_Init+0x38c>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a2f      	ldr	r2, [pc, #188]	; (8005ad8 <HAL_DMA_Init+0x43c>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d004      	beq.n	8005a28 <HAL_DMA_Init+0x38c>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a2e      	ldr	r2, [pc, #184]	; (8005adc <HAL_DMA_Init+0x440>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d101      	bne.n	8005a2c <HAL_DMA_Init+0x390>
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e000      	b.n	8005a2e <HAL_DMA_Init+0x392>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f000 8092 	beq.w	8005b58 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a21      	ldr	r2, [pc, #132]	; (8005ac0 <HAL_DMA_Init+0x424>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d021      	beq.n	8005a82 <HAL_DMA_Init+0x3e6>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a20      	ldr	r2, [pc, #128]	; (8005ac4 <HAL_DMA_Init+0x428>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d01c      	beq.n	8005a82 <HAL_DMA_Init+0x3e6>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a1e      	ldr	r2, [pc, #120]	; (8005ac8 <HAL_DMA_Init+0x42c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d017      	beq.n	8005a82 <HAL_DMA_Init+0x3e6>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a1d      	ldr	r2, [pc, #116]	; (8005acc <HAL_DMA_Init+0x430>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d012      	beq.n	8005a82 <HAL_DMA_Init+0x3e6>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a1b      	ldr	r2, [pc, #108]	; (8005ad0 <HAL_DMA_Init+0x434>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00d      	beq.n	8005a82 <HAL_DMA_Init+0x3e6>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a1a      	ldr	r2, [pc, #104]	; (8005ad4 <HAL_DMA_Init+0x438>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d008      	beq.n	8005a82 <HAL_DMA_Init+0x3e6>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a18      	ldr	r2, [pc, #96]	; (8005ad8 <HAL_DMA_Init+0x43c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d003      	beq.n	8005a82 <HAL_DMA_Init+0x3e6>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a17      	ldr	r2, [pc, #92]	; (8005adc <HAL_DMA_Init+0x440>)
 8005a80:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2202      	movs	r2, #2
 8005a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	4b10      	ldr	r3, [pc, #64]	; (8005ae0 <HAL_DMA_Init+0x444>)
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	2b40      	cmp	r3, #64	; 0x40
 8005aa8:	d01c      	beq.n	8005ae4 <HAL_DMA_Init+0x448>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	2b80      	cmp	r3, #128	; 0x80
 8005ab0:	d102      	bne.n	8005ab8 <HAL_DMA_Init+0x41c>
 8005ab2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005ab6:	e016      	b.n	8005ae6 <HAL_DMA_Init+0x44a>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	e014      	b.n	8005ae6 <HAL_DMA_Init+0x44a>
 8005abc:	fe10803f 	.word	0xfe10803f
 8005ac0:	58025408 	.word	0x58025408
 8005ac4:	5802541c 	.word	0x5802541c
 8005ac8:	58025430 	.word	0x58025430
 8005acc:	58025444 	.word	0x58025444
 8005ad0:	58025458 	.word	0x58025458
 8005ad4:	5802546c 	.word	0x5802546c
 8005ad8:	58025480 	.word	0x58025480
 8005adc:	58025494 	.word	0x58025494
 8005ae0:	fffe000f 	.word	0xfffe000f
 8005ae4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	68d2      	ldr	r2, [r2, #12]
 8005aea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005aec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005af4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8005afc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005b04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	69db      	ldr	r3, [r3, #28]
 8005b0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005b0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005b14:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4b6e      	ldr	r3, [pc, #440]	; (8005ce4 <HAL_DMA_Init+0x648>)
 8005b2c:	4413      	add	r3, r2
 8005b2e:	4a6e      	ldr	r2, [pc, #440]	; (8005ce8 <HAL_DMA_Init+0x64c>)
 8005b30:	fba2 2303 	umull	r2, r3, r2, r3
 8005b34:	091b      	lsrs	r3, r3, #4
 8005b36:	009a      	lsls	r2, r3, #2
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f001 fc45 	bl	80073cc <DMA_CalcBaseAndBitshift>
 8005b42:	4603      	mov	r3, r0
 8005b44:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b4a:	f003 031f 	and.w	r3, r3, #31
 8005b4e:	2201      	movs	r2, #1
 8005b50:	409a      	lsls	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	605a      	str	r2, [r3, #4]
 8005b56:	e008      	b.n	8005b6a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2240      	movs	r2, #64	; 0x40
 8005b5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2203      	movs	r2, #3
 8005b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	e0b7      	b.n	8005cda <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a5f      	ldr	r2, [pc, #380]	; (8005cec <HAL_DMA_Init+0x650>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d072      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a5d      	ldr	r2, [pc, #372]	; (8005cf0 <HAL_DMA_Init+0x654>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d06d      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a5c      	ldr	r2, [pc, #368]	; (8005cf4 <HAL_DMA_Init+0x658>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d068      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a5a      	ldr	r2, [pc, #360]	; (8005cf8 <HAL_DMA_Init+0x65c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d063      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a59      	ldr	r2, [pc, #356]	; (8005cfc <HAL_DMA_Init+0x660>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d05e      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a57      	ldr	r2, [pc, #348]	; (8005d00 <HAL_DMA_Init+0x664>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d059      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a56      	ldr	r2, [pc, #344]	; (8005d04 <HAL_DMA_Init+0x668>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d054      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a54      	ldr	r2, [pc, #336]	; (8005d08 <HAL_DMA_Init+0x66c>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d04f      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a53      	ldr	r2, [pc, #332]	; (8005d0c <HAL_DMA_Init+0x670>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d04a      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a51      	ldr	r2, [pc, #324]	; (8005d10 <HAL_DMA_Init+0x674>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d045      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a50      	ldr	r2, [pc, #320]	; (8005d14 <HAL_DMA_Init+0x678>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d040      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a4e      	ldr	r2, [pc, #312]	; (8005d18 <HAL_DMA_Init+0x67c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d03b      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a4d      	ldr	r2, [pc, #308]	; (8005d1c <HAL_DMA_Init+0x680>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d036      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a4b      	ldr	r2, [pc, #300]	; (8005d20 <HAL_DMA_Init+0x684>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d031      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a4a      	ldr	r2, [pc, #296]	; (8005d24 <HAL_DMA_Init+0x688>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d02c      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a48      	ldr	r2, [pc, #288]	; (8005d28 <HAL_DMA_Init+0x68c>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d027      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a47      	ldr	r2, [pc, #284]	; (8005d2c <HAL_DMA_Init+0x690>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d022      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a45      	ldr	r2, [pc, #276]	; (8005d30 <HAL_DMA_Init+0x694>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d01d      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a44      	ldr	r2, [pc, #272]	; (8005d34 <HAL_DMA_Init+0x698>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d018      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a42      	ldr	r2, [pc, #264]	; (8005d38 <HAL_DMA_Init+0x69c>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d013      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a41      	ldr	r2, [pc, #260]	; (8005d3c <HAL_DMA_Init+0x6a0>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d00e      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a3f      	ldr	r2, [pc, #252]	; (8005d40 <HAL_DMA_Init+0x6a4>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d009      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a3e      	ldr	r2, [pc, #248]	; (8005d44 <HAL_DMA_Init+0x6a8>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d004      	beq.n	8005c5a <HAL_DMA_Init+0x5be>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a3c      	ldr	r2, [pc, #240]	; (8005d48 <HAL_DMA_Init+0x6ac>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d101      	bne.n	8005c5e <HAL_DMA_Init+0x5c2>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <HAL_DMA_Init+0x5c4>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d032      	beq.n	8005cca <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f001 fcdf 	bl	8007628 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	2b80      	cmp	r3, #128	; 0x80
 8005c70:	d102      	bne.n	8005c78 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c80:	b2d2      	uxtb	r2, r2
 8005c82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c8c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d010      	beq.n	8005cb8 <HAL_DMA_Init+0x61c>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	d80c      	bhi.n	8005cb8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f001 fd5c 	bl	800775c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ca8:	2200      	movs	r2, #0
 8005caa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005cb4:	605a      	str	r2, [r3, #4]
 8005cb6:	e008      	b.n	8005cca <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3718      	adds	r7, #24
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	a7fdabf8 	.word	0xa7fdabf8
 8005ce8:	cccccccd 	.word	0xcccccccd
 8005cec:	40020010 	.word	0x40020010
 8005cf0:	40020028 	.word	0x40020028
 8005cf4:	40020040 	.word	0x40020040
 8005cf8:	40020058 	.word	0x40020058
 8005cfc:	40020070 	.word	0x40020070
 8005d00:	40020088 	.word	0x40020088
 8005d04:	400200a0 	.word	0x400200a0
 8005d08:	400200b8 	.word	0x400200b8
 8005d0c:	40020410 	.word	0x40020410
 8005d10:	40020428 	.word	0x40020428
 8005d14:	40020440 	.word	0x40020440
 8005d18:	40020458 	.word	0x40020458
 8005d1c:	40020470 	.word	0x40020470
 8005d20:	40020488 	.word	0x40020488
 8005d24:	400204a0 	.word	0x400204a0
 8005d28:	400204b8 	.word	0x400204b8
 8005d2c:	58025408 	.word	0x58025408
 8005d30:	5802541c 	.word	0x5802541c
 8005d34:	58025430 	.word	0x58025430
 8005d38:	58025444 	.word	0x58025444
 8005d3c:	58025458 	.word	0x58025458
 8005d40:	5802546c 	.word	0x5802546c
 8005d44:	58025480 	.word	0x58025480
 8005d48:	58025494 	.word	0x58025494

08005d4c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d101      	bne.n	8005d68 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005d64:	2301      	movs	r3, #1
 8005d66:	e226      	b.n	80061b6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d101      	bne.n	8005d76 <HAL_DMA_Start_IT+0x2a>
 8005d72:	2302      	movs	r3, #2
 8005d74:	e21f      	b.n	80061b6 <HAL_DMA_Start_IT+0x46a>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2201      	movs	r2, #1
 8005d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	f040 820a 	bne.w	80061a0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a68      	ldr	r2, [pc, #416]	; (8005f40 <HAL_DMA_Start_IT+0x1f4>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d04a      	beq.n	8005e3a <HAL_DMA_Start_IT+0xee>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a66      	ldr	r2, [pc, #408]	; (8005f44 <HAL_DMA_Start_IT+0x1f8>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d045      	beq.n	8005e3a <HAL_DMA_Start_IT+0xee>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a65      	ldr	r2, [pc, #404]	; (8005f48 <HAL_DMA_Start_IT+0x1fc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d040      	beq.n	8005e3a <HAL_DMA_Start_IT+0xee>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a63      	ldr	r2, [pc, #396]	; (8005f4c <HAL_DMA_Start_IT+0x200>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d03b      	beq.n	8005e3a <HAL_DMA_Start_IT+0xee>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a62      	ldr	r2, [pc, #392]	; (8005f50 <HAL_DMA_Start_IT+0x204>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d036      	beq.n	8005e3a <HAL_DMA_Start_IT+0xee>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a60      	ldr	r2, [pc, #384]	; (8005f54 <HAL_DMA_Start_IT+0x208>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d031      	beq.n	8005e3a <HAL_DMA_Start_IT+0xee>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a5f      	ldr	r2, [pc, #380]	; (8005f58 <HAL_DMA_Start_IT+0x20c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d02c      	beq.n	8005e3a <HAL_DMA_Start_IT+0xee>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a5d      	ldr	r2, [pc, #372]	; (8005f5c <HAL_DMA_Start_IT+0x210>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d027      	beq.n	8005e3a <HAL_DMA_Start_IT+0xee>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a5c      	ldr	r2, [pc, #368]	; (8005f60 <HAL_DMA_Start_IT+0x214>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d022      	beq.n	8005e3a <HAL_DMA_Start_IT+0xee>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a5a      	ldr	r2, [pc, #360]	; (8005f64 <HAL_DMA_Start_IT+0x218>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d01d      	beq.n	8005e3a <HAL_DMA_Start_IT+0xee>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a59      	ldr	r2, [pc, #356]	; (8005f68 <HAL_DMA_Start_IT+0x21c>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d018      	beq.n	8005e3a <HAL_DMA_Start_IT+0xee>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a57      	ldr	r2, [pc, #348]	; (8005f6c <HAL_DMA_Start_IT+0x220>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d013      	beq.n	8005e3a <HAL_DMA_Start_IT+0xee>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a56      	ldr	r2, [pc, #344]	; (8005f70 <HAL_DMA_Start_IT+0x224>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d00e      	beq.n	8005e3a <HAL_DMA_Start_IT+0xee>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a54      	ldr	r2, [pc, #336]	; (8005f74 <HAL_DMA_Start_IT+0x228>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d009      	beq.n	8005e3a <HAL_DMA_Start_IT+0xee>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a53      	ldr	r2, [pc, #332]	; (8005f78 <HAL_DMA_Start_IT+0x22c>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d004      	beq.n	8005e3a <HAL_DMA_Start_IT+0xee>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a51      	ldr	r2, [pc, #324]	; (8005f7c <HAL_DMA_Start_IT+0x230>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d108      	bne.n	8005e4c <HAL_DMA_Start_IT+0x100>
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0201 	bic.w	r2, r2, #1
 8005e48:	601a      	str	r2, [r3, #0]
 8005e4a:	e007      	b.n	8005e5c <HAL_DMA_Start_IT+0x110>
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0201 	bic.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	68b9      	ldr	r1, [r7, #8]
 8005e62:	68f8      	ldr	r0, [r7, #12]
 8005e64:	f001 f906 	bl	8007074 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a34      	ldr	r2, [pc, #208]	; (8005f40 <HAL_DMA_Start_IT+0x1f4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d04a      	beq.n	8005f08 <HAL_DMA_Start_IT+0x1bc>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a33      	ldr	r2, [pc, #204]	; (8005f44 <HAL_DMA_Start_IT+0x1f8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d045      	beq.n	8005f08 <HAL_DMA_Start_IT+0x1bc>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a31      	ldr	r2, [pc, #196]	; (8005f48 <HAL_DMA_Start_IT+0x1fc>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d040      	beq.n	8005f08 <HAL_DMA_Start_IT+0x1bc>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a30      	ldr	r2, [pc, #192]	; (8005f4c <HAL_DMA_Start_IT+0x200>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d03b      	beq.n	8005f08 <HAL_DMA_Start_IT+0x1bc>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a2e      	ldr	r2, [pc, #184]	; (8005f50 <HAL_DMA_Start_IT+0x204>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d036      	beq.n	8005f08 <HAL_DMA_Start_IT+0x1bc>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a2d      	ldr	r2, [pc, #180]	; (8005f54 <HAL_DMA_Start_IT+0x208>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d031      	beq.n	8005f08 <HAL_DMA_Start_IT+0x1bc>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a2b      	ldr	r2, [pc, #172]	; (8005f58 <HAL_DMA_Start_IT+0x20c>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d02c      	beq.n	8005f08 <HAL_DMA_Start_IT+0x1bc>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a2a      	ldr	r2, [pc, #168]	; (8005f5c <HAL_DMA_Start_IT+0x210>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d027      	beq.n	8005f08 <HAL_DMA_Start_IT+0x1bc>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a28      	ldr	r2, [pc, #160]	; (8005f60 <HAL_DMA_Start_IT+0x214>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d022      	beq.n	8005f08 <HAL_DMA_Start_IT+0x1bc>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a27      	ldr	r2, [pc, #156]	; (8005f64 <HAL_DMA_Start_IT+0x218>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d01d      	beq.n	8005f08 <HAL_DMA_Start_IT+0x1bc>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a25      	ldr	r2, [pc, #148]	; (8005f68 <HAL_DMA_Start_IT+0x21c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d018      	beq.n	8005f08 <HAL_DMA_Start_IT+0x1bc>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a24      	ldr	r2, [pc, #144]	; (8005f6c <HAL_DMA_Start_IT+0x220>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d013      	beq.n	8005f08 <HAL_DMA_Start_IT+0x1bc>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a22      	ldr	r2, [pc, #136]	; (8005f70 <HAL_DMA_Start_IT+0x224>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d00e      	beq.n	8005f08 <HAL_DMA_Start_IT+0x1bc>
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a21      	ldr	r2, [pc, #132]	; (8005f74 <HAL_DMA_Start_IT+0x228>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d009      	beq.n	8005f08 <HAL_DMA_Start_IT+0x1bc>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a1f      	ldr	r2, [pc, #124]	; (8005f78 <HAL_DMA_Start_IT+0x22c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d004      	beq.n	8005f08 <HAL_DMA_Start_IT+0x1bc>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a1e      	ldr	r2, [pc, #120]	; (8005f7c <HAL_DMA_Start_IT+0x230>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d101      	bne.n	8005f0c <HAL_DMA_Start_IT+0x1c0>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e000      	b.n	8005f0e <HAL_DMA_Start_IT+0x1c2>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d036      	beq.n	8005f80 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f023 021e 	bic.w	r2, r3, #30
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f042 0216 	orr.w	r2, r2, #22
 8005f24:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d03e      	beq.n	8005fac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f042 0208 	orr.w	r2, r2, #8
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	e035      	b.n	8005fac <HAL_DMA_Start_IT+0x260>
 8005f40:	40020010 	.word	0x40020010
 8005f44:	40020028 	.word	0x40020028
 8005f48:	40020040 	.word	0x40020040
 8005f4c:	40020058 	.word	0x40020058
 8005f50:	40020070 	.word	0x40020070
 8005f54:	40020088 	.word	0x40020088
 8005f58:	400200a0 	.word	0x400200a0
 8005f5c:	400200b8 	.word	0x400200b8
 8005f60:	40020410 	.word	0x40020410
 8005f64:	40020428 	.word	0x40020428
 8005f68:	40020440 	.word	0x40020440
 8005f6c:	40020458 	.word	0x40020458
 8005f70:	40020470 	.word	0x40020470
 8005f74:	40020488 	.word	0x40020488
 8005f78:	400204a0 	.word	0x400204a0
 8005f7c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f023 020e 	bic.w	r2, r3, #14
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 020a 	orr.w	r2, r2, #10
 8005f92:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d007      	beq.n	8005fac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f042 0204 	orr.w	r2, r2, #4
 8005faa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a83      	ldr	r2, [pc, #524]	; (80061c0 <HAL_DMA_Start_IT+0x474>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d072      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a82      	ldr	r2, [pc, #520]	; (80061c4 <HAL_DMA_Start_IT+0x478>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d06d      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a80      	ldr	r2, [pc, #512]	; (80061c8 <HAL_DMA_Start_IT+0x47c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d068      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a7f      	ldr	r2, [pc, #508]	; (80061cc <HAL_DMA_Start_IT+0x480>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d063      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a7d      	ldr	r2, [pc, #500]	; (80061d0 <HAL_DMA_Start_IT+0x484>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d05e      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a7c      	ldr	r2, [pc, #496]	; (80061d4 <HAL_DMA_Start_IT+0x488>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d059      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a7a      	ldr	r2, [pc, #488]	; (80061d8 <HAL_DMA_Start_IT+0x48c>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d054      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a79      	ldr	r2, [pc, #484]	; (80061dc <HAL_DMA_Start_IT+0x490>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d04f      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a77      	ldr	r2, [pc, #476]	; (80061e0 <HAL_DMA_Start_IT+0x494>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d04a      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a76      	ldr	r2, [pc, #472]	; (80061e4 <HAL_DMA_Start_IT+0x498>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d045      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a74      	ldr	r2, [pc, #464]	; (80061e8 <HAL_DMA_Start_IT+0x49c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d040      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a73      	ldr	r2, [pc, #460]	; (80061ec <HAL_DMA_Start_IT+0x4a0>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d03b      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a71      	ldr	r2, [pc, #452]	; (80061f0 <HAL_DMA_Start_IT+0x4a4>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d036      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a70      	ldr	r2, [pc, #448]	; (80061f4 <HAL_DMA_Start_IT+0x4a8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d031      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a6e      	ldr	r2, [pc, #440]	; (80061f8 <HAL_DMA_Start_IT+0x4ac>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d02c      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a6d      	ldr	r2, [pc, #436]	; (80061fc <HAL_DMA_Start_IT+0x4b0>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d027      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a6b      	ldr	r2, [pc, #428]	; (8006200 <HAL_DMA_Start_IT+0x4b4>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d022      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a6a      	ldr	r2, [pc, #424]	; (8006204 <HAL_DMA_Start_IT+0x4b8>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d01d      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a68      	ldr	r2, [pc, #416]	; (8006208 <HAL_DMA_Start_IT+0x4bc>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d018      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a67      	ldr	r2, [pc, #412]	; (800620c <HAL_DMA_Start_IT+0x4c0>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d013      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a65      	ldr	r2, [pc, #404]	; (8006210 <HAL_DMA_Start_IT+0x4c4>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d00e      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a64      	ldr	r2, [pc, #400]	; (8006214 <HAL_DMA_Start_IT+0x4c8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d009      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a62      	ldr	r2, [pc, #392]	; (8006218 <HAL_DMA_Start_IT+0x4cc>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d004      	beq.n	800609c <HAL_DMA_Start_IT+0x350>
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a61      	ldr	r2, [pc, #388]	; (800621c <HAL_DMA_Start_IT+0x4d0>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d101      	bne.n	80060a0 <HAL_DMA_Start_IT+0x354>
 800609c:	2301      	movs	r3, #1
 800609e:	e000      	b.n	80060a2 <HAL_DMA_Start_IT+0x356>
 80060a0:	2300      	movs	r3, #0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d01a      	beq.n	80060dc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d007      	beq.n	80060c4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b8:	681a      	ldr	r2, [r3, #0]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060c2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d007      	beq.n	80060dc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060da:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a37      	ldr	r2, [pc, #220]	; (80061c0 <HAL_DMA_Start_IT+0x474>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d04a      	beq.n	800617c <HAL_DMA_Start_IT+0x430>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a36      	ldr	r2, [pc, #216]	; (80061c4 <HAL_DMA_Start_IT+0x478>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d045      	beq.n	800617c <HAL_DMA_Start_IT+0x430>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a34      	ldr	r2, [pc, #208]	; (80061c8 <HAL_DMA_Start_IT+0x47c>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d040      	beq.n	800617c <HAL_DMA_Start_IT+0x430>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a33      	ldr	r2, [pc, #204]	; (80061cc <HAL_DMA_Start_IT+0x480>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d03b      	beq.n	800617c <HAL_DMA_Start_IT+0x430>
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a31      	ldr	r2, [pc, #196]	; (80061d0 <HAL_DMA_Start_IT+0x484>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d036      	beq.n	800617c <HAL_DMA_Start_IT+0x430>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a30      	ldr	r2, [pc, #192]	; (80061d4 <HAL_DMA_Start_IT+0x488>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d031      	beq.n	800617c <HAL_DMA_Start_IT+0x430>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a2e      	ldr	r2, [pc, #184]	; (80061d8 <HAL_DMA_Start_IT+0x48c>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d02c      	beq.n	800617c <HAL_DMA_Start_IT+0x430>
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a2d      	ldr	r2, [pc, #180]	; (80061dc <HAL_DMA_Start_IT+0x490>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d027      	beq.n	800617c <HAL_DMA_Start_IT+0x430>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a2b      	ldr	r2, [pc, #172]	; (80061e0 <HAL_DMA_Start_IT+0x494>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d022      	beq.n	800617c <HAL_DMA_Start_IT+0x430>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a2a      	ldr	r2, [pc, #168]	; (80061e4 <HAL_DMA_Start_IT+0x498>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d01d      	beq.n	800617c <HAL_DMA_Start_IT+0x430>
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a28      	ldr	r2, [pc, #160]	; (80061e8 <HAL_DMA_Start_IT+0x49c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d018      	beq.n	800617c <HAL_DMA_Start_IT+0x430>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a27      	ldr	r2, [pc, #156]	; (80061ec <HAL_DMA_Start_IT+0x4a0>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d013      	beq.n	800617c <HAL_DMA_Start_IT+0x430>
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a25      	ldr	r2, [pc, #148]	; (80061f0 <HAL_DMA_Start_IT+0x4a4>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d00e      	beq.n	800617c <HAL_DMA_Start_IT+0x430>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a24      	ldr	r2, [pc, #144]	; (80061f4 <HAL_DMA_Start_IT+0x4a8>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d009      	beq.n	800617c <HAL_DMA_Start_IT+0x430>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a22      	ldr	r2, [pc, #136]	; (80061f8 <HAL_DMA_Start_IT+0x4ac>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d004      	beq.n	800617c <HAL_DMA_Start_IT+0x430>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a21      	ldr	r2, [pc, #132]	; (80061fc <HAL_DMA_Start_IT+0x4b0>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d108      	bne.n	800618e <HAL_DMA_Start_IT+0x442>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f042 0201 	orr.w	r2, r2, #1
 800618a:	601a      	str	r2, [r3, #0]
 800618c:	e012      	b.n	80061b4 <HAL_DMA_Start_IT+0x468>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f042 0201 	orr.w	r2, r2, #1
 800619c:	601a      	str	r2, [r3, #0]
 800619e:	e009      	b.n	80061b4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80061b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	40020010 	.word	0x40020010
 80061c4:	40020028 	.word	0x40020028
 80061c8:	40020040 	.word	0x40020040
 80061cc:	40020058 	.word	0x40020058
 80061d0:	40020070 	.word	0x40020070
 80061d4:	40020088 	.word	0x40020088
 80061d8:	400200a0 	.word	0x400200a0
 80061dc:	400200b8 	.word	0x400200b8
 80061e0:	40020410 	.word	0x40020410
 80061e4:	40020428 	.word	0x40020428
 80061e8:	40020440 	.word	0x40020440
 80061ec:	40020458 	.word	0x40020458
 80061f0:	40020470 	.word	0x40020470
 80061f4:	40020488 	.word	0x40020488
 80061f8:	400204a0 	.word	0x400204a0
 80061fc:	400204b8 	.word	0x400204b8
 8006200:	58025408 	.word	0x58025408
 8006204:	5802541c 	.word	0x5802541c
 8006208:	58025430 	.word	0x58025430
 800620c:	58025444 	.word	0x58025444
 8006210:	58025458 	.word	0x58025458
 8006214:	5802546c 	.word	0x5802546c
 8006218:	58025480 	.word	0x58025480
 800621c:	58025494 	.word	0x58025494

08006220 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b08a      	sub	sp, #40	; 0x28
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800622c:	4b67      	ldr	r3, [pc, #412]	; (80063cc <HAL_DMA_IRQHandler+0x1ac>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a67      	ldr	r2, [pc, #412]	; (80063d0 <HAL_DMA_IRQHandler+0x1b0>)
 8006232:	fba2 2303 	umull	r2, r3, r2, r3
 8006236:	0a9b      	lsrs	r3, r3, #10
 8006238:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800623e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006244:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a5f      	ldr	r2, [pc, #380]	; (80063d4 <HAL_DMA_IRQHandler+0x1b4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d04a      	beq.n	80062f2 <HAL_DMA_IRQHandler+0xd2>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a5d      	ldr	r2, [pc, #372]	; (80063d8 <HAL_DMA_IRQHandler+0x1b8>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d045      	beq.n	80062f2 <HAL_DMA_IRQHandler+0xd2>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a5c      	ldr	r2, [pc, #368]	; (80063dc <HAL_DMA_IRQHandler+0x1bc>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d040      	beq.n	80062f2 <HAL_DMA_IRQHandler+0xd2>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a5a      	ldr	r2, [pc, #360]	; (80063e0 <HAL_DMA_IRQHandler+0x1c0>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d03b      	beq.n	80062f2 <HAL_DMA_IRQHandler+0xd2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a59      	ldr	r2, [pc, #356]	; (80063e4 <HAL_DMA_IRQHandler+0x1c4>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d036      	beq.n	80062f2 <HAL_DMA_IRQHandler+0xd2>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a57      	ldr	r2, [pc, #348]	; (80063e8 <HAL_DMA_IRQHandler+0x1c8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d031      	beq.n	80062f2 <HAL_DMA_IRQHandler+0xd2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4a56      	ldr	r2, [pc, #344]	; (80063ec <HAL_DMA_IRQHandler+0x1cc>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d02c      	beq.n	80062f2 <HAL_DMA_IRQHandler+0xd2>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a54      	ldr	r2, [pc, #336]	; (80063f0 <HAL_DMA_IRQHandler+0x1d0>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d027      	beq.n	80062f2 <HAL_DMA_IRQHandler+0xd2>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a53      	ldr	r2, [pc, #332]	; (80063f4 <HAL_DMA_IRQHandler+0x1d4>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d022      	beq.n	80062f2 <HAL_DMA_IRQHandler+0xd2>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a51      	ldr	r2, [pc, #324]	; (80063f8 <HAL_DMA_IRQHandler+0x1d8>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d01d      	beq.n	80062f2 <HAL_DMA_IRQHandler+0xd2>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a50      	ldr	r2, [pc, #320]	; (80063fc <HAL_DMA_IRQHandler+0x1dc>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d018      	beq.n	80062f2 <HAL_DMA_IRQHandler+0xd2>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a4e      	ldr	r2, [pc, #312]	; (8006400 <HAL_DMA_IRQHandler+0x1e0>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d013      	beq.n	80062f2 <HAL_DMA_IRQHandler+0xd2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a4d      	ldr	r2, [pc, #308]	; (8006404 <HAL_DMA_IRQHandler+0x1e4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d00e      	beq.n	80062f2 <HAL_DMA_IRQHandler+0xd2>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a4b      	ldr	r2, [pc, #300]	; (8006408 <HAL_DMA_IRQHandler+0x1e8>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d009      	beq.n	80062f2 <HAL_DMA_IRQHandler+0xd2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	4a4a      	ldr	r2, [pc, #296]	; (800640c <HAL_DMA_IRQHandler+0x1ec>)
 80062e4:	4293      	cmp	r3, r2
 80062e6:	d004      	beq.n	80062f2 <HAL_DMA_IRQHandler+0xd2>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a48      	ldr	r2, [pc, #288]	; (8006410 <HAL_DMA_IRQHandler+0x1f0>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d101      	bne.n	80062f6 <HAL_DMA_IRQHandler+0xd6>
 80062f2:	2301      	movs	r3, #1
 80062f4:	e000      	b.n	80062f8 <HAL_DMA_IRQHandler+0xd8>
 80062f6:	2300      	movs	r3, #0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 842b 	beq.w	8006b54 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006302:	f003 031f 	and.w	r3, r3, #31
 8006306:	2208      	movs	r2, #8
 8006308:	409a      	lsls	r2, r3
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	4013      	ands	r3, r2
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 80a2 	beq.w	8006458 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a2e      	ldr	r2, [pc, #184]	; (80063d4 <HAL_DMA_IRQHandler+0x1b4>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d04a      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x194>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a2d      	ldr	r2, [pc, #180]	; (80063d8 <HAL_DMA_IRQHandler+0x1b8>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d045      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x194>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a2b      	ldr	r2, [pc, #172]	; (80063dc <HAL_DMA_IRQHandler+0x1bc>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d040      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x194>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a2a      	ldr	r2, [pc, #168]	; (80063e0 <HAL_DMA_IRQHandler+0x1c0>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d03b      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x194>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a28      	ldr	r2, [pc, #160]	; (80063e4 <HAL_DMA_IRQHandler+0x1c4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d036      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x194>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a27      	ldr	r2, [pc, #156]	; (80063e8 <HAL_DMA_IRQHandler+0x1c8>)
 800634c:	4293      	cmp	r3, r2
 800634e:	d031      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x194>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	4a25      	ldr	r2, [pc, #148]	; (80063ec <HAL_DMA_IRQHandler+0x1cc>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d02c      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x194>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a24      	ldr	r2, [pc, #144]	; (80063f0 <HAL_DMA_IRQHandler+0x1d0>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d027      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x194>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a22      	ldr	r2, [pc, #136]	; (80063f4 <HAL_DMA_IRQHandler+0x1d4>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d022      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x194>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a21      	ldr	r2, [pc, #132]	; (80063f8 <HAL_DMA_IRQHandler+0x1d8>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d01d      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x194>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a1f      	ldr	r2, [pc, #124]	; (80063fc <HAL_DMA_IRQHandler+0x1dc>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d018      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x194>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a1e      	ldr	r2, [pc, #120]	; (8006400 <HAL_DMA_IRQHandler+0x1e0>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d013      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x194>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a1c      	ldr	r2, [pc, #112]	; (8006404 <HAL_DMA_IRQHandler+0x1e4>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d00e      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x194>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a1b      	ldr	r2, [pc, #108]	; (8006408 <HAL_DMA_IRQHandler+0x1e8>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d009      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x194>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a19      	ldr	r2, [pc, #100]	; (800640c <HAL_DMA_IRQHandler+0x1ec>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d004      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x194>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a18      	ldr	r2, [pc, #96]	; (8006410 <HAL_DMA_IRQHandler+0x1f0>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d12f      	bne.n	8006414 <HAL_DMA_IRQHandler+0x1f4>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0304 	and.w	r3, r3, #4
 80063be:	2b00      	cmp	r3, #0
 80063c0:	bf14      	ite	ne
 80063c2:	2301      	movne	r3, #1
 80063c4:	2300      	moveq	r3, #0
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	e02e      	b.n	8006428 <HAL_DMA_IRQHandler+0x208>
 80063ca:	bf00      	nop
 80063cc:	24000000 	.word	0x24000000
 80063d0:	1b4e81b5 	.word	0x1b4e81b5
 80063d4:	40020010 	.word	0x40020010
 80063d8:	40020028 	.word	0x40020028
 80063dc:	40020040 	.word	0x40020040
 80063e0:	40020058 	.word	0x40020058
 80063e4:	40020070 	.word	0x40020070
 80063e8:	40020088 	.word	0x40020088
 80063ec:	400200a0 	.word	0x400200a0
 80063f0:	400200b8 	.word	0x400200b8
 80063f4:	40020410 	.word	0x40020410
 80063f8:	40020428 	.word	0x40020428
 80063fc:	40020440 	.word	0x40020440
 8006400:	40020458 	.word	0x40020458
 8006404:	40020470 	.word	0x40020470
 8006408:	40020488 	.word	0x40020488
 800640c:	400204a0 	.word	0x400204a0
 8006410:	400204b8 	.word	0x400204b8
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b00      	cmp	r3, #0
 8006420:	bf14      	ite	ne
 8006422:	2301      	movne	r3, #1
 8006424:	2300      	moveq	r3, #0
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d015      	beq.n	8006458 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f022 0204 	bic.w	r2, r2, #4
 800643a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006440:	f003 031f 	and.w	r3, r3, #31
 8006444:	2208      	movs	r2, #8
 8006446:	409a      	lsls	r2, r3
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006450:	f043 0201 	orr.w	r2, r3, #1
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800645c:	f003 031f 	and.w	r3, r3, #31
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	fa22 f303 	lsr.w	r3, r2, r3
 8006466:	f003 0301 	and.w	r3, r3, #1
 800646a:	2b00      	cmp	r3, #0
 800646c:	d06e      	beq.n	800654c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a69      	ldr	r2, [pc, #420]	; (8006618 <HAL_DMA_IRQHandler+0x3f8>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d04a      	beq.n	800650e <HAL_DMA_IRQHandler+0x2ee>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a67      	ldr	r2, [pc, #412]	; (800661c <HAL_DMA_IRQHandler+0x3fc>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d045      	beq.n	800650e <HAL_DMA_IRQHandler+0x2ee>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a66      	ldr	r2, [pc, #408]	; (8006620 <HAL_DMA_IRQHandler+0x400>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d040      	beq.n	800650e <HAL_DMA_IRQHandler+0x2ee>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a64      	ldr	r2, [pc, #400]	; (8006624 <HAL_DMA_IRQHandler+0x404>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d03b      	beq.n	800650e <HAL_DMA_IRQHandler+0x2ee>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a63      	ldr	r2, [pc, #396]	; (8006628 <HAL_DMA_IRQHandler+0x408>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d036      	beq.n	800650e <HAL_DMA_IRQHandler+0x2ee>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a61      	ldr	r2, [pc, #388]	; (800662c <HAL_DMA_IRQHandler+0x40c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d031      	beq.n	800650e <HAL_DMA_IRQHandler+0x2ee>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a60      	ldr	r2, [pc, #384]	; (8006630 <HAL_DMA_IRQHandler+0x410>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d02c      	beq.n	800650e <HAL_DMA_IRQHandler+0x2ee>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a5e      	ldr	r2, [pc, #376]	; (8006634 <HAL_DMA_IRQHandler+0x414>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d027      	beq.n	800650e <HAL_DMA_IRQHandler+0x2ee>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a5d      	ldr	r2, [pc, #372]	; (8006638 <HAL_DMA_IRQHandler+0x418>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d022      	beq.n	800650e <HAL_DMA_IRQHandler+0x2ee>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a5b      	ldr	r2, [pc, #364]	; (800663c <HAL_DMA_IRQHandler+0x41c>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d01d      	beq.n	800650e <HAL_DMA_IRQHandler+0x2ee>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a5a      	ldr	r2, [pc, #360]	; (8006640 <HAL_DMA_IRQHandler+0x420>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d018      	beq.n	800650e <HAL_DMA_IRQHandler+0x2ee>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a58      	ldr	r2, [pc, #352]	; (8006644 <HAL_DMA_IRQHandler+0x424>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d013      	beq.n	800650e <HAL_DMA_IRQHandler+0x2ee>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a57      	ldr	r2, [pc, #348]	; (8006648 <HAL_DMA_IRQHandler+0x428>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00e      	beq.n	800650e <HAL_DMA_IRQHandler+0x2ee>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a55      	ldr	r2, [pc, #340]	; (800664c <HAL_DMA_IRQHandler+0x42c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d009      	beq.n	800650e <HAL_DMA_IRQHandler+0x2ee>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a54      	ldr	r2, [pc, #336]	; (8006650 <HAL_DMA_IRQHandler+0x430>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d004      	beq.n	800650e <HAL_DMA_IRQHandler+0x2ee>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a52      	ldr	r2, [pc, #328]	; (8006654 <HAL_DMA_IRQHandler+0x434>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d10a      	bne.n	8006524 <HAL_DMA_IRQHandler+0x304>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006518:	2b00      	cmp	r3, #0
 800651a:	bf14      	ite	ne
 800651c:	2301      	movne	r3, #1
 800651e:	2300      	moveq	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	e003      	b.n	800652c <HAL_DMA_IRQHandler+0x30c>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2300      	movs	r3, #0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00d      	beq.n	800654c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006534:	f003 031f 	and.w	r3, r3, #31
 8006538:	2201      	movs	r2, #1
 800653a:	409a      	lsls	r2, r3
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006544:	f043 0202 	orr.w	r2, r3, #2
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006550:	f003 031f 	and.w	r3, r3, #31
 8006554:	2204      	movs	r2, #4
 8006556:	409a      	lsls	r2, r3
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	4013      	ands	r3, r2
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 808f 	beq.w	8006680 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a2c      	ldr	r2, [pc, #176]	; (8006618 <HAL_DMA_IRQHandler+0x3f8>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d04a      	beq.n	8006602 <HAL_DMA_IRQHandler+0x3e2>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a2a      	ldr	r2, [pc, #168]	; (800661c <HAL_DMA_IRQHandler+0x3fc>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d045      	beq.n	8006602 <HAL_DMA_IRQHandler+0x3e2>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a29      	ldr	r2, [pc, #164]	; (8006620 <HAL_DMA_IRQHandler+0x400>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d040      	beq.n	8006602 <HAL_DMA_IRQHandler+0x3e2>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a27      	ldr	r2, [pc, #156]	; (8006624 <HAL_DMA_IRQHandler+0x404>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d03b      	beq.n	8006602 <HAL_DMA_IRQHandler+0x3e2>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a26      	ldr	r2, [pc, #152]	; (8006628 <HAL_DMA_IRQHandler+0x408>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d036      	beq.n	8006602 <HAL_DMA_IRQHandler+0x3e2>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a24      	ldr	r2, [pc, #144]	; (800662c <HAL_DMA_IRQHandler+0x40c>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d031      	beq.n	8006602 <HAL_DMA_IRQHandler+0x3e2>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a23      	ldr	r2, [pc, #140]	; (8006630 <HAL_DMA_IRQHandler+0x410>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d02c      	beq.n	8006602 <HAL_DMA_IRQHandler+0x3e2>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a21      	ldr	r2, [pc, #132]	; (8006634 <HAL_DMA_IRQHandler+0x414>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d027      	beq.n	8006602 <HAL_DMA_IRQHandler+0x3e2>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a20      	ldr	r2, [pc, #128]	; (8006638 <HAL_DMA_IRQHandler+0x418>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d022      	beq.n	8006602 <HAL_DMA_IRQHandler+0x3e2>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a1e      	ldr	r2, [pc, #120]	; (800663c <HAL_DMA_IRQHandler+0x41c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d01d      	beq.n	8006602 <HAL_DMA_IRQHandler+0x3e2>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a1d      	ldr	r2, [pc, #116]	; (8006640 <HAL_DMA_IRQHandler+0x420>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d018      	beq.n	8006602 <HAL_DMA_IRQHandler+0x3e2>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a1b      	ldr	r2, [pc, #108]	; (8006644 <HAL_DMA_IRQHandler+0x424>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d013      	beq.n	8006602 <HAL_DMA_IRQHandler+0x3e2>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a1a      	ldr	r2, [pc, #104]	; (8006648 <HAL_DMA_IRQHandler+0x428>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d00e      	beq.n	8006602 <HAL_DMA_IRQHandler+0x3e2>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a18      	ldr	r2, [pc, #96]	; (800664c <HAL_DMA_IRQHandler+0x42c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d009      	beq.n	8006602 <HAL_DMA_IRQHandler+0x3e2>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a17      	ldr	r2, [pc, #92]	; (8006650 <HAL_DMA_IRQHandler+0x430>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d004      	beq.n	8006602 <HAL_DMA_IRQHandler+0x3e2>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a15      	ldr	r2, [pc, #84]	; (8006654 <HAL_DMA_IRQHandler+0x434>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d12a      	bne.n	8006658 <HAL_DMA_IRQHandler+0x438>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0302 	and.w	r3, r3, #2
 800660c:	2b00      	cmp	r3, #0
 800660e:	bf14      	ite	ne
 8006610:	2301      	movne	r3, #1
 8006612:	2300      	moveq	r3, #0
 8006614:	b2db      	uxtb	r3, r3
 8006616:	e023      	b.n	8006660 <HAL_DMA_IRQHandler+0x440>
 8006618:	40020010 	.word	0x40020010
 800661c:	40020028 	.word	0x40020028
 8006620:	40020040 	.word	0x40020040
 8006624:	40020058 	.word	0x40020058
 8006628:	40020070 	.word	0x40020070
 800662c:	40020088 	.word	0x40020088
 8006630:	400200a0 	.word	0x400200a0
 8006634:	400200b8 	.word	0x400200b8
 8006638:	40020410 	.word	0x40020410
 800663c:	40020428 	.word	0x40020428
 8006640:	40020440 	.word	0x40020440
 8006644:	40020458 	.word	0x40020458
 8006648:	40020470 	.word	0x40020470
 800664c:	40020488 	.word	0x40020488
 8006650:	400204a0 	.word	0x400204a0
 8006654:	400204b8 	.word	0x400204b8
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2300      	movs	r3, #0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00d      	beq.n	8006680 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006668:	f003 031f 	and.w	r3, r3, #31
 800666c:	2204      	movs	r2, #4
 800666e:	409a      	lsls	r2, r3
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006678:	f043 0204 	orr.w	r2, r3, #4
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006684:	f003 031f 	and.w	r3, r3, #31
 8006688:	2210      	movs	r2, #16
 800668a:	409a      	lsls	r2, r3
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	4013      	ands	r3, r2
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 80a6 	beq.w	80067e2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a85      	ldr	r2, [pc, #532]	; (80068b0 <HAL_DMA_IRQHandler+0x690>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d04a      	beq.n	8006736 <HAL_DMA_IRQHandler+0x516>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a83      	ldr	r2, [pc, #524]	; (80068b4 <HAL_DMA_IRQHandler+0x694>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d045      	beq.n	8006736 <HAL_DMA_IRQHandler+0x516>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a82      	ldr	r2, [pc, #520]	; (80068b8 <HAL_DMA_IRQHandler+0x698>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d040      	beq.n	8006736 <HAL_DMA_IRQHandler+0x516>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a80      	ldr	r2, [pc, #512]	; (80068bc <HAL_DMA_IRQHandler+0x69c>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d03b      	beq.n	8006736 <HAL_DMA_IRQHandler+0x516>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a7f      	ldr	r2, [pc, #508]	; (80068c0 <HAL_DMA_IRQHandler+0x6a0>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d036      	beq.n	8006736 <HAL_DMA_IRQHandler+0x516>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4a7d      	ldr	r2, [pc, #500]	; (80068c4 <HAL_DMA_IRQHandler+0x6a4>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d031      	beq.n	8006736 <HAL_DMA_IRQHandler+0x516>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a7c      	ldr	r2, [pc, #496]	; (80068c8 <HAL_DMA_IRQHandler+0x6a8>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d02c      	beq.n	8006736 <HAL_DMA_IRQHandler+0x516>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a7a      	ldr	r2, [pc, #488]	; (80068cc <HAL_DMA_IRQHandler+0x6ac>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d027      	beq.n	8006736 <HAL_DMA_IRQHandler+0x516>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a79      	ldr	r2, [pc, #484]	; (80068d0 <HAL_DMA_IRQHandler+0x6b0>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d022      	beq.n	8006736 <HAL_DMA_IRQHandler+0x516>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a77      	ldr	r2, [pc, #476]	; (80068d4 <HAL_DMA_IRQHandler+0x6b4>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d01d      	beq.n	8006736 <HAL_DMA_IRQHandler+0x516>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a76      	ldr	r2, [pc, #472]	; (80068d8 <HAL_DMA_IRQHandler+0x6b8>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d018      	beq.n	8006736 <HAL_DMA_IRQHandler+0x516>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a74      	ldr	r2, [pc, #464]	; (80068dc <HAL_DMA_IRQHandler+0x6bc>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d013      	beq.n	8006736 <HAL_DMA_IRQHandler+0x516>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a73      	ldr	r2, [pc, #460]	; (80068e0 <HAL_DMA_IRQHandler+0x6c0>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d00e      	beq.n	8006736 <HAL_DMA_IRQHandler+0x516>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a71      	ldr	r2, [pc, #452]	; (80068e4 <HAL_DMA_IRQHandler+0x6c4>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d009      	beq.n	8006736 <HAL_DMA_IRQHandler+0x516>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a70      	ldr	r2, [pc, #448]	; (80068e8 <HAL_DMA_IRQHandler+0x6c8>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d004      	beq.n	8006736 <HAL_DMA_IRQHandler+0x516>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a6e      	ldr	r2, [pc, #440]	; (80068ec <HAL_DMA_IRQHandler+0x6cc>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d10a      	bne.n	800674c <HAL_DMA_IRQHandler+0x52c>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0308 	and.w	r3, r3, #8
 8006740:	2b00      	cmp	r3, #0
 8006742:	bf14      	ite	ne
 8006744:	2301      	movne	r3, #1
 8006746:	2300      	moveq	r3, #0
 8006748:	b2db      	uxtb	r3, r3
 800674a:	e009      	b.n	8006760 <HAL_DMA_IRQHandler+0x540>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0304 	and.w	r3, r3, #4
 8006756:	2b00      	cmp	r3, #0
 8006758:	bf14      	ite	ne
 800675a:	2301      	movne	r3, #1
 800675c:	2300      	moveq	r3, #0
 800675e:	b2db      	uxtb	r3, r3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d03e      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006768:	f003 031f 	and.w	r3, r3, #31
 800676c:	2210      	movs	r2, #16
 800676e:	409a      	lsls	r2, r3
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800677e:	2b00      	cmp	r3, #0
 8006780:	d018      	beq.n	80067b4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800678c:	2b00      	cmp	r3, #0
 800678e:	d108      	bne.n	80067a2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006794:	2b00      	cmp	r3, #0
 8006796:	d024      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	4798      	blx	r3
 80067a0:	e01f      	b.n	80067e2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d01b      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	4798      	blx	r3
 80067b2:	e016      	b.n	80067e2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d107      	bne.n	80067d2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0208 	bic.w	r2, r2, #8
 80067d0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e6:	f003 031f 	and.w	r3, r3, #31
 80067ea:	2220      	movs	r2, #32
 80067ec:	409a      	lsls	r2, r3
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	4013      	ands	r3, r2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 8110 	beq.w	8006a18 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a2c      	ldr	r2, [pc, #176]	; (80068b0 <HAL_DMA_IRQHandler+0x690>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d04a      	beq.n	8006898 <HAL_DMA_IRQHandler+0x678>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a2b      	ldr	r2, [pc, #172]	; (80068b4 <HAL_DMA_IRQHandler+0x694>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d045      	beq.n	8006898 <HAL_DMA_IRQHandler+0x678>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a29      	ldr	r2, [pc, #164]	; (80068b8 <HAL_DMA_IRQHandler+0x698>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d040      	beq.n	8006898 <HAL_DMA_IRQHandler+0x678>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a28      	ldr	r2, [pc, #160]	; (80068bc <HAL_DMA_IRQHandler+0x69c>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d03b      	beq.n	8006898 <HAL_DMA_IRQHandler+0x678>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a26      	ldr	r2, [pc, #152]	; (80068c0 <HAL_DMA_IRQHandler+0x6a0>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d036      	beq.n	8006898 <HAL_DMA_IRQHandler+0x678>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a25      	ldr	r2, [pc, #148]	; (80068c4 <HAL_DMA_IRQHandler+0x6a4>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d031      	beq.n	8006898 <HAL_DMA_IRQHandler+0x678>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a23      	ldr	r2, [pc, #140]	; (80068c8 <HAL_DMA_IRQHandler+0x6a8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d02c      	beq.n	8006898 <HAL_DMA_IRQHandler+0x678>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a22      	ldr	r2, [pc, #136]	; (80068cc <HAL_DMA_IRQHandler+0x6ac>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d027      	beq.n	8006898 <HAL_DMA_IRQHandler+0x678>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a20      	ldr	r2, [pc, #128]	; (80068d0 <HAL_DMA_IRQHandler+0x6b0>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d022      	beq.n	8006898 <HAL_DMA_IRQHandler+0x678>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a1f      	ldr	r2, [pc, #124]	; (80068d4 <HAL_DMA_IRQHandler+0x6b4>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d01d      	beq.n	8006898 <HAL_DMA_IRQHandler+0x678>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a1d      	ldr	r2, [pc, #116]	; (80068d8 <HAL_DMA_IRQHandler+0x6b8>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d018      	beq.n	8006898 <HAL_DMA_IRQHandler+0x678>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a1c      	ldr	r2, [pc, #112]	; (80068dc <HAL_DMA_IRQHandler+0x6bc>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d013      	beq.n	8006898 <HAL_DMA_IRQHandler+0x678>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a1a      	ldr	r2, [pc, #104]	; (80068e0 <HAL_DMA_IRQHandler+0x6c0>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d00e      	beq.n	8006898 <HAL_DMA_IRQHandler+0x678>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a19      	ldr	r2, [pc, #100]	; (80068e4 <HAL_DMA_IRQHandler+0x6c4>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d009      	beq.n	8006898 <HAL_DMA_IRQHandler+0x678>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a17      	ldr	r2, [pc, #92]	; (80068e8 <HAL_DMA_IRQHandler+0x6c8>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d004      	beq.n	8006898 <HAL_DMA_IRQHandler+0x678>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a16      	ldr	r2, [pc, #88]	; (80068ec <HAL_DMA_IRQHandler+0x6cc>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d12b      	bne.n	80068f0 <HAL_DMA_IRQHandler+0x6d0>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0310 	and.w	r3, r3, #16
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	bf14      	ite	ne
 80068a6:	2301      	movne	r3, #1
 80068a8:	2300      	moveq	r3, #0
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	e02a      	b.n	8006904 <HAL_DMA_IRQHandler+0x6e4>
 80068ae:	bf00      	nop
 80068b0:	40020010 	.word	0x40020010
 80068b4:	40020028 	.word	0x40020028
 80068b8:	40020040 	.word	0x40020040
 80068bc:	40020058 	.word	0x40020058
 80068c0:	40020070 	.word	0x40020070
 80068c4:	40020088 	.word	0x40020088
 80068c8:	400200a0 	.word	0x400200a0
 80068cc:	400200b8 	.word	0x400200b8
 80068d0:	40020410 	.word	0x40020410
 80068d4:	40020428 	.word	0x40020428
 80068d8:	40020440 	.word	0x40020440
 80068dc:	40020458 	.word	0x40020458
 80068e0:	40020470 	.word	0x40020470
 80068e4:	40020488 	.word	0x40020488
 80068e8:	400204a0 	.word	0x400204a0
 80068ec:	400204b8 	.word	0x400204b8
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	bf14      	ite	ne
 80068fe:	2301      	movne	r3, #1
 8006900:	2300      	moveq	r3, #0
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 8087 	beq.w	8006a18 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800690e:	f003 031f 	and.w	r3, r3, #31
 8006912:	2220      	movs	r2, #32
 8006914:	409a      	lsls	r2, r3
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b04      	cmp	r3, #4
 8006924:	d139      	bne.n	800699a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f022 0216 	bic.w	r2, r2, #22
 8006934:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	695a      	ldr	r2, [r3, #20]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006944:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694a:	2b00      	cmp	r3, #0
 800694c:	d103      	bne.n	8006956 <HAL_DMA_IRQHandler+0x736>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006952:	2b00      	cmp	r3, #0
 8006954:	d007      	beq.n	8006966 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 0208 	bic.w	r2, r2, #8
 8006964:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800696a:	f003 031f 	and.w	r3, r3, #31
 800696e:	223f      	movs	r2, #63	; 0x3f
 8006970:	409a      	lsls	r2, r3
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2201      	movs	r2, #1
 800697a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800698a:	2b00      	cmp	r3, #0
 800698c:	f000 834a 	beq.w	8007024 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	4798      	blx	r3
          }
          return;
 8006998:	e344      	b.n	8007024 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d018      	beq.n	80069da <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d108      	bne.n	80069c8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d02c      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	4798      	blx	r3
 80069c6:	e027      	b.n	8006a18 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d023      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	4798      	blx	r3
 80069d8:	e01e      	b.n	8006a18 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d10f      	bne.n	8006a08 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0210 	bic.w	r2, r2, #16
 80069f6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d003      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f000 8306 	beq.w	800702e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 8088 	beq.w	8006b40 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2204      	movs	r2, #4
 8006a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a7a      	ldr	r2, [pc, #488]	; (8006c28 <HAL_DMA_IRQHandler+0xa08>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d04a      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x8b8>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a79      	ldr	r2, [pc, #484]	; (8006c2c <HAL_DMA_IRQHandler+0xa0c>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d045      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x8b8>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a77      	ldr	r2, [pc, #476]	; (8006c30 <HAL_DMA_IRQHandler+0xa10>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d040      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x8b8>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a76      	ldr	r2, [pc, #472]	; (8006c34 <HAL_DMA_IRQHandler+0xa14>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d03b      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x8b8>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a74      	ldr	r2, [pc, #464]	; (8006c38 <HAL_DMA_IRQHandler+0xa18>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d036      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x8b8>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a73      	ldr	r2, [pc, #460]	; (8006c3c <HAL_DMA_IRQHandler+0xa1c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d031      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x8b8>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a71      	ldr	r2, [pc, #452]	; (8006c40 <HAL_DMA_IRQHandler+0xa20>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d02c      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x8b8>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a70      	ldr	r2, [pc, #448]	; (8006c44 <HAL_DMA_IRQHandler+0xa24>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d027      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x8b8>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a6e      	ldr	r2, [pc, #440]	; (8006c48 <HAL_DMA_IRQHandler+0xa28>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d022      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x8b8>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a6d      	ldr	r2, [pc, #436]	; (8006c4c <HAL_DMA_IRQHandler+0xa2c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d01d      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x8b8>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a6b      	ldr	r2, [pc, #428]	; (8006c50 <HAL_DMA_IRQHandler+0xa30>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d018      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x8b8>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a6a      	ldr	r2, [pc, #424]	; (8006c54 <HAL_DMA_IRQHandler+0xa34>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d013      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x8b8>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a68      	ldr	r2, [pc, #416]	; (8006c58 <HAL_DMA_IRQHandler+0xa38>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d00e      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x8b8>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a67      	ldr	r2, [pc, #412]	; (8006c5c <HAL_DMA_IRQHandler+0xa3c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d009      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x8b8>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a65      	ldr	r2, [pc, #404]	; (8006c60 <HAL_DMA_IRQHandler+0xa40>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d004      	beq.n	8006ad8 <HAL_DMA_IRQHandler+0x8b8>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a64      	ldr	r2, [pc, #400]	; (8006c64 <HAL_DMA_IRQHandler+0xa44>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d108      	bne.n	8006aea <HAL_DMA_IRQHandler+0x8ca>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f022 0201 	bic.w	r2, r2, #1
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	e007      	b.n	8006afa <HAL_DMA_IRQHandler+0x8da>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f022 0201 	bic.w	r2, r2, #1
 8006af8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	3301      	adds	r3, #1
 8006afe:	60fb      	str	r3, [r7, #12]
 8006b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d307      	bcc.n	8006b16 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0301 	and.w	r3, r3, #1
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1f2      	bne.n	8006afa <HAL_DMA_IRQHandler+0x8da>
 8006b14:	e000      	b.n	8006b18 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006b16:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d004      	beq.n	8006b30 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2203      	movs	r2, #3
 8006b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006b2e:	e003      	b.n	8006b38 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	f000 8272 	beq.w	800702e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	4798      	blx	r3
 8006b52:	e26c      	b.n	800702e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	4a43      	ldr	r2, [pc, #268]	; (8006c68 <HAL_DMA_IRQHandler+0xa48>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d022      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x984>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a42      	ldr	r2, [pc, #264]	; (8006c6c <HAL_DMA_IRQHandler+0xa4c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d01d      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x984>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a40      	ldr	r2, [pc, #256]	; (8006c70 <HAL_DMA_IRQHandler+0xa50>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d018      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x984>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a3f      	ldr	r2, [pc, #252]	; (8006c74 <HAL_DMA_IRQHandler+0xa54>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d013      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x984>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a3d      	ldr	r2, [pc, #244]	; (8006c78 <HAL_DMA_IRQHandler+0xa58>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00e      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x984>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a3c      	ldr	r2, [pc, #240]	; (8006c7c <HAL_DMA_IRQHandler+0xa5c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d009      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x984>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a3a      	ldr	r2, [pc, #232]	; (8006c80 <HAL_DMA_IRQHandler+0xa60>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d004      	beq.n	8006ba4 <HAL_DMA_IRQHandler+0x984>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a39      	ldr	r2, [pc, #228]	; (8006c84 <HAL_DMA_IRQHandler+0xa64>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d101      	bne.n	8006ba8 <HAL_DMA_IRQHandler+0x988>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e000      	b.n	8006baa <HAL_DMA_IRQHandler+0x98a>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f000 823f 	beq.w	800702e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bbc:	f003 031f 	and.w	r3, r3, #31
 8006bc0:	2204      	movs	r2, #4
 8006bc2:	409a      	lsls	r2, r3
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f000 80cd 	beq.w	8006d68 <HAL_DMA_IRQHandler+0xb48>
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	f003 0304 	and.w	r3, r3, #4
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 80c7 	beq.w	8006d68 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bde:	f003 031f 	and.w	r3, r3, #31
 8006be2:	2204      	movs	r2, #4
 8006be4:	409a      	lsls	r2, r3
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d049      	beq.n	8006c88 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d109      	bne.n	8006c12 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 8210 	beq.w	8007028 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c10:	e20a      	b.n	8007028 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 8206 	beq.w	8007028 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c24:	e200      	b.n	8007028 <HAL_DMA_IRQHandler+0xe08>
 8006c26:	bf00      	nop
 8006c28:	40020010 	.word	0x40020010
 8006c2c:	40020028 	.word	0x40020028
 8006c30:	40020040 	.word	0x40020040
 8006c34:	40020058 	.word	0x40020058
 8006c38:	40020070 	.word	0x40020070
 8006c3c:	40020088 	.word	0x40020088
 8006c40:	400200a0 	.word	0x400200a0
 8006c44:	400200b8 	.word	0x400200b8
 8006c48:	40020410 	.word	0x40020410
 8006c4c:	40020428 	.word	0x40020428
 8006c50:	40020440 	.word	0x40020440
 8006c54:	40020458 	.word	0x40020458
 8006c58:	40020470 	.word	0x40020470
 8006c5c:	40020488 	.word	0x40020488
 8006c60:	400204a0 	.word	0x400204a0
 8006c64:	400204b8 	.word	0x400204b8
 8006c68:	58025408 	.word	0x58025408
 8006c6c:	5802541c 	.word	0x5802541c
 8006c70:	58025430 	.word	0x58025430
 8006c74:	58025444 	.word	0x58025444
 8006c78:	58025458 	.word	0x58025458
 8006c7c:	5802546c 	.word	0x5802546c
 8006c80:	58025480 	.word	0x58025480
 8006c84:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f003 0320 	and.w	r3, r3, #32
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d160      	bne.n	8006d54 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a7f      	ldr	r2, [pc, #508]	; (8006e94 <HAL_DMA_IRQHandler+0xc74>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d04a      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xb12>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a7d      	ldr	r2, [pc, #500]	; (8006e98 <HAL_DMA_IRQHandler+0xc78>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d045      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xb12>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a7c      	ldr	r2, [pc, #496]	; (8006e9c <HAL_DMA_IRQHandler+0xc7c>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d040      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xb12>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a7a      	ldr	r2, [pc, #488]	; (8006ea0 <HAL_DMA_IRQHandler+0xc80>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d03b      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xb12>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a79      	ldr	r2, [pc, #484]	; (8006ea4 <HAL_DMA_IRQHandler+0xc84>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d036      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xb12>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a77      	ldr	r2, [pc, #476]	; (8006ea8 <HAL_DMA_IRQHandler+0xc88>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d031      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xb12>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a76      	ldr	r2, [pc, #472]	; (8006eac <HAL_DMA_IRQHandler+0xc8c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d02c      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xb12>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a74      	ldr	r2, [pc, #464]	; (8006eb0 <HAL_DMA_IRQHandler+0xc90>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d027      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xb12>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a73      	ldr	r2, [pc, #460]	; (8006eb4 <HAL_DMA_IRQHandler+0xc94>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d022      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xb12>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a71      	ldr	r2, [pc, #452]	; (8006eb8 <HAL_DMA_IRQHandler+0xc98>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d01d      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xb12>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a70      	ldr	r2, [pc, #448]	; (8006ebc <HAL_DMA_IRQHandler+0xc9c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d018      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xb12>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a6e      	ldr	r2, [pc, #440]	; (8006ec0 <HAL_DMA_IRQHandler+0xca0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d013      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xb12>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a6d      	ldr	r2, [pc, #436]	; (8006ec4 <HAL_DMA_IRQHandler+0xca4>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d00e      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xb12>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a6b      	ldr	r2, [pc, #428]	; (8006ec8 <HAL_DMA_IRQHandler+0xca8>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d009      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xb12>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a6a      	ldr	r2, [pc, #424]	; (8006ecc <HAL_DMA_IRQHandler+0xcac>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d004      	beq.n	8006d32 <HAL_DMA_IRQHandler+0xb12>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a68      	ldr	r2, [pc, #416]	; (8006ed0 <HAL_DMA_IRQHandler+0xcb0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d108      	bne.n	8006d44 <HAL_DMA_IRQHandler+0xb24>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f022 0208 	bic.w	r2, r2, #8
 8006d40:	601a      	str	r2, [r3, #0]
 8006d42:	e007      	b.n	8006d54 <HAL_DMA_IRQHandler+0xb34>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 0204 	bic.w	r2, r2, #4
 8006d52:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f000 8165 	beq.w	8007028 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d66:	e15f      	b.n	8007028 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d6c:	f003 031f 	and.w	r3, r3, #31
 8006d70:	2202      	movs	r2, #2
 8006d72:	409a      	lsls	r2, r3
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	4013      	ands	r3, r2
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	f000 80c5 	beq.w	8006f08 <HAL_DMA_IRQHandler+0xce8>
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f003 0302 	and.w	r3, r3, #2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f000 80bf 	beq.w	8006f08 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d8e:	f003 031f 	and.w	r3, r3, #31
 8006d92:	2202      	movs	r2, #2
 8006d94:	409a      	lsls	r2, r3
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d018      	beq.n	8006dd6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d109      	bne.n	8006dc2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f000 813a 	beq.w	800702c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dbc:	6878      	ldr	r0, [r7, #4]
 8006dbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dc0:	e134      	b.n	800702c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	f000 8130 	beq.w	800702c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006dd4:	e12a      	b.n	800702c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f040 8089 	bne.w	8006ef4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a2b      	ldr	r2, [pc, #172]	; (8006e94 <HAL_DMA_IRQHandler+0xc74>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d04a      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xc62>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a29      	ldr	r2, [pc, #164]	; (8006e98 <HAL_DMA_IRQHandler+0xc78>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d045      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xc62>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a28      	ldr	r2, [pc, #160]	; (8006e9c <HAL_DMA_IRQHandler+0xc7c>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d040      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xc62>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a26      	ldr	r2, [pc, #152]	; (8006ea0 <HAL_DMA_IRQHandler+0xc80>)
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d03b      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xc62>
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a25      	ldr	r2, [pc, #148]	; (8006ea4 <HAL_DMA_IRQHandler+0xc84>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d036      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xc62>
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a23      	ldr	r2, [pc, #140]	; (8006ea8 <HAL_DMA_IRQHandler+0xc88>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d031      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xc62>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a22      	ldr	r2, [pc, #136]	; (8006eac <HAL_DMA_IRQHandler+0xc8c>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d02c      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xc62>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a20      	ldr	r2, [pc, #128]	; (8006eb0 <HAL_DMA_IRQHandler+0xc90>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d027      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xc62>
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4a1f      	ldr	r2, [pc, #124]	; (8006eb4 <HAL_DMA_IRQHandler+0xc94>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d022      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xc62>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a1d      	ldr	r2, [pc, #116]	; (8006eb8 <HAL_DMA_IRQHandler+0xc98>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d01d      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xc62>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	4a1c      	ldr	r2, [pc, #112]	; (8006ebc <HAL_DMA_IRQHandler+0xc9c>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d018      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xc62>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a1a      	ldr	r2, [pc, #104]	; (8006ec0 <HAL_DMA_IRQHandler+0xca0>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d013      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xc62>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	4a19      	ldr	r2, [pc, #100]	; (8006ec4 <HAL_DMA_IRQHandler+0xca4>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d00e      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xc62>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a17      	ldr	r2, [pc, #92]	; (8006ec8 <HAL_DMA_IRQHandler+0xca8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d009      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xc62>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a16      	ldr	r2, [pc, #88]	; (8006ecc <HAL_DMA_IRQHandler+0xcac>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d004      	beq.n	8006e82 <HAL_DMA_IRQHandler+0xc62>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a14      	ldr	r2, [pc, #80]	; (8006ed0 <HAL_DMA_IRQHandler+0xcb0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d128      	bne.n	8006ed4 <HAL_DMA_IRQHandler+0xcb4>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 0214 	bic.w	r2, r2, #20
 8006e90:	601a      	str	r2, [r3, #0]
 8006e92:	e027      	b.n	8006ee4 <HAL_DMA_IRQHandler+0xcc4>
 8006e94:	40020010 	.word	0x40020010
 8006e98:	40020028 	.word	0x40020028
 8006e9c:	40020040 	.word	0x40020040
 8006ea0:	40020058 	.word	0x40020058
 8006ea4:	40020070 	.word	0x40020070
 8006ea8:	40020088 	.word	0x40020088
 8006eac:	400200a0 	.word	0x400200a0
 8006eb0:	400200b8 	.word	0x400200b8
 8006eb4:	40020410 	.word	0x40020410
 8006eb8:	40020428 	.word	0x40020428
 8006ebc:	40020440 	.word	0x40020440
 8006ec0:	40020458 	.word	0x40020458
 8006ec4:	40020470 	.word	0x40020470
 8006ec8:	40020488 	.word	0x40020488
 8006ecc:	400204a0 	.word	0x400204a0
 8006ed0:	400204b8 	.word	0x400204b8
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 020a 	bic.w	r2, r2, #10
 8006ee2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 8097 	beq.w	800702c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f06:	e091      	b.n	800702c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f0c:	f003 031f 	and.w	r3, r3, #31
 8006f10:	2208      	movs	r2, #8
 8006f12:	409a      	lsls	r2, r3
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	4013      	ands	r3, r2
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 8088 	beq.w	800702e <HAL_DMA_IRQHandler+0xe0e>
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f003 0308 	and.w	r3, r3, #8
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	f000 8082 	beq.w	800702e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a41      	ldr	r2, [pc, #260]	; (8007034 <HAL_DMA_IRQHandler+0xe14>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d04a      	beq.n	8006fca <HAL_DMA_IRQHandler+0xdaa>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a3f      	ldr	r2, [pc, #252]	; (8007038 <HAL_DMA_IRQHandler+0xe18>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d045      	beq.n	8006fca <HAL_DMA_IRQHandler+0xdaa>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a3e      	ldr	r2, [pc, #248]	; (800703c <HAL_DMA_IRQHandler+0xe1c>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d040      	beq.n	8006fca <HAL_DMA_IRQHandler+0xdaa>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a3c      	ldr	r2, [pc, #240]	; (8007040 <HAL_DMA_IRQHandler+0xe20>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d03b      	beq.n	8006fca <HAL_DMA_IRQHandler+0xdaa>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a3b      	ldr	r2, [pc, #236]	; (8007044 <HAL_DMA_IRQHandler+0xe24>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d036      	beq.n	8006fca <HAL_DMA_IRQHandler+0xdaa>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a39      	ldr	r2, [pc, #228]	; (8007048 <HAL_DMA_IRQHandler+0xe28>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d031      	beq.n	8006fca <HAL_DMA_IRQHandler+0xdaa>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a38      	ldr	r2, [pc, #224]	; (800704c <HAL_DMA_IRQHandler+0xe2c>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d02c      	beq.n	8006fca <HAL_DMA_IRQHandler+0xdaa>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a36      	ldr	r2, [pc, #216]	; (8007050 <HAL_DMA_IRQHandler+0xe30>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d027      	beq.n	8006fca <HAL_DMA_IRQHandler+0xdaa>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a35      	ldr	r2, [pc, #212]	; (8007054 <HAL_DMA_IRQHandler+0xe34>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d022      	beq.n	8006fca <HAL_DMA_IRQHandler+0xdaa>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a33      	ldr	r2, [pc, #204]	; (8007058 <HAL_DMA_IRQHandler+0xe38>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d01d      	beq.n	8006fca <HAL_DMA_IRQHandler+0xdaa>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a32      	ldr	r2, [pc, #200]	; (800705c <HAL_DMA_IRQHandler+0xe3c>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d018      	beq.n	8006fca <HAL_DMA_IRQHandler+0xdaa>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a30      	ldr	r2, [pc, #192]	; (8007060 <HAL_DMA_IRQHandler+0xe40>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d013      	beq.n	8006fca <HAL_DMA_IRQHandler+0xdaa>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a2f      	ldr	r2, [pc, #188]	; (8007064 <HAL_DMA_IRQHandler+0xe44>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d00e      	beq.n	8006fca <HAL_DMA_IRQHandler+0xdaa>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a2d      	ldr	r2, [pc, #180]	; (8007068 <HAL_DMA_IRQHandler+0xe48>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d009      	beq.n	8006fca <HAL_DMA_IRQHandler+0xdaa>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a2c      	ldr	r2, [pc, #176]	; (800706c <HAL_DMA_IRQHandler+0xe4c>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d004      	beq.n	8006fca <HAL_DMA_IRQHandler+0xdaa>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a2a      	ldr	r2, [pc, #168]	; (8007070 <HAL_DMA_IRQHandler+0xe50>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d108      	bne.n	8006fdc <HAL_DMA_IRQHandler+0xdbc>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 021c 	bic.w	r2, r2, #28
 8006fd8:	601a      	str	r2, [r3, #0]
 8006fda:	e007      	b.n	8006fec <HAL_DMA_IRQHandler+0xdcc>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 020e 	bic.w	r2, r2, #14
 8006fea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff0:	f003 031f 	and.w	r3, r3, #31
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	409a      	lsls	r2, r3
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007016:	2b00      	cmp	r3, #0
 8007018:	d009      	beq.n	800702e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	4798      	blx	r3
 8007022:	e004      	b.n	800702e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007024:	bf00      	nop
 8007026:	e002      	b.n	800702e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007028:	bf00      	nop
 800702a:	e000      	b.n	800702e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800702c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800702e:	3728      	adds	r7, #40	; 0x28
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	40020010 	.word	0x40020010
 8007038:	40020028 	.word	0x40020028
 800703c:	40020040 	.word	0x40020040
 8007040:	40020058 	.word	0x40020058
 8007044:	40020070 	.word	0x40020070
 8007048:	40020088 	.word	0x40020088
 800704c:	400200a0 	.word	0x400200a0
 8007050:	400200b8 	.word	0x400200b8
 8007054:	40020410 	.word	0x40020410
 8007058:	40020428 	.word	0x40020428
 800705c:	40020440 	.word	0x40020440
 8007060:	40020458 	.word	0x40020458
 8007064:	40020470 	.word	0x40020470
 8007068:	40020488 	.word	0x40020488
 800706c:	400204a0 	.word	0x400204a0
 8007070:	400204b8 	.word	0x400204b8

08007074 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007074:	b480      	push	{r7}
 8007076:	b087      	sub	sp, #28
 8007078:	af00      	add	r7, sp, #0
 800707a:	60f8      	str	r0, [r7, #12]
 800707c:	60b9      	str	r1, [r7, #8]
 800707e:	607a      	str	r2, [r7, #4]
 8007080:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007086:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a7f      	ldr	r2, [pc, #508]	; (8007290 <DMA_SetConfig+0x21c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d072      	beq.n	800717e <DMA_SetConfig+0x10a>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a7d      	ldr	r2, [pc, #500]	; (8007294 <DMA_SetConfig+0x220>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d06d      	beq.n	800717e <DMA_SetConfig+0x10a>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a7c      	ldr	r2, [pc, #496]	; (8007298 <DMA_SetConfig+0x224>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d068      	beq.n	800717e <DMA_SetConfig+0x10a>
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a7a      	ldr	r2, [pc, #488]	; (800729c <DMA_SetConfig+0x228>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d063      	beq.n	800717e <DMA_SetConfig+0x10a>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a79      	ldr	r2, [pc, #484]	; (80072a0 <DMA_SetConfig+0x22c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d05e      	beq.n	800717e <DMA_SetConfig+0x10a>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a77      	ldr	r2, [pc, #476]	; (80072a4 <DMA_SetConfig+0x230>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d059      	beq.n	800717e <DMA_SetConfig+0x10a>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a76      	ldr	r2, [pc, #472]	; (80072a8 <DMA_SetConfig+0x234>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d054      	beq.n	800717e <DMA_SetConfig+0x10a>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a74      	ldr	r2, [pc, #464]	; (80072ac <DMA_SetConfig+0x238>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d04f      	beq.n	800717e <DMA_SetConfig+0x10a>
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a73      	ldr	r2, [pc, #460]	; (80072b0 <DMA_SetConfig+0x23c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d04a      	beq.n	800717e <DMA_SetConfig+0x10a>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a71      	ldr	r2, [pc, #452]	; (80072b4 <DMA_SetConfig+0x240>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d045      	beq.n	800717e <DMA_SetConfig+0x10a>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a70      	ldr	r2, [pc, #448]	; (80072b8 <DMA_SetConfig+0x244>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d040      	beq.n	800717e <DMA_SetConfig+0x10a>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a6e      	ldr	r2, [pc, #440]	; (80072bc <DMA_SetConfig+0x248>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d03b      	beq.n	800717e <DMA_SetConfig+0x10a>
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a6d      	ldr	r2, [pc, #436]	; (80072c0 <DMA_SetConfig+0x24c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d036      	beq.n	800717e <DMA_SetConfig+0x10a>
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a6b      	ldr	r2, [pc, #428]	; (80072c4 <DMA_SetConfig+0x250>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d031      	beq.n	800717e <DMA_SetConfig+0x10a>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a6a      	ldr	r2, [pc, #424]	; (80072c8 <DMA_SetConfig+0x254>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d02c      	beq.n	800717e <DMA_SetConfig+0x10a>
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a68      	ldr	r2, [pc, #416]	; (80072cc <DMA_SetConfig+0x258>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d027      	beq.n	800717e <DMA_SetConfig+0x10a>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a67      	ldr	r2, [pc, #412]	; (80072d0 <DMA_SetConfig+0x25c>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d022      	beq.n	800717e <DMA_SetConfig+0x10a>
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a65      	ldr	r2, [pc, #404]	; (80072d4 <DMA_SetConfig+0x260>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d01d      	beq.n	800717e <DMA_SetConfig+0x10a>
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a64      	ldr	r2, [pc, #400]	; (80072d8 <DMA_SetConfig+0x264>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d018      	beq.n	800717e <DMA_SetConfig+0x10a>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a62      	ldr	r2, [pc, #392]	; (80072dc <DMA_SetConfig+0x268>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d013      	beq.n	800717e <DMA_SetConfig+0x10a>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a61      	ldr	r2, [pc, #388]	; (80072e0 <DMA_SetConfig+0x26c>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d00e      	beq.n	800717e <DMA_SetConfig+0x10a>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a5f      	ldr	r2, [pc, #380]	; (80072e4 <DMA_SetConfig+0x270>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d009      	beq.n	800717e <DMA_SetConfig+0x10a>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a5e      	ldr	r2, [pc, #376]	; (80072e8 <DMA_SetConfig+0x274>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d004      	beq.n	800717e <DMA_SetConfig+0x10a>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a5c      	ldr	r2, [pc, #368]	; (80072ec <DMA_SetConfig+0x278>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d101      	bne.n	8007182 <DMA_SetConfig+0x10e>
 800717e:	2301      	movs	r3, #1
 8007180:	e000      	b.n	8007184 <DMA_SetConfig+0x110>
 8007182:	2300      	movs	r3, #0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00d      	beq.n	80071a4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007190:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007196:	2b00      	cmp	r3, #0
 8007198:	d004      	beq.n	80071a4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80071a2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4a39      	ldr	r2, [pc, #228]	; (8007290 <DMA_SetConfig+0x21c>)
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d04a      	beq.n	8007244 <DMA_SetConfig+0x1d0>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4a38      	ldr	r2, [pc, #224]	; (8007294 <DMA_SetConfig+0x220>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d045      	beq.n	8007244 <DMA_SetConfig+0x1d0>
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4a36      	ldr	r2, [pc, #216]	; (8007298 <DMA_SetConfig+0x224>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d040      	beq.n	8007244 <DMA_SetConfig+0x1d0>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	4a35      	ldr	r2, [pc, #212]	; (800729c <DMA_SetConfig+0x228>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d03b      	beq.n	8007244 <DMA_SetConfig+0x1d0>
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a33      	ldr	r2, [pc, #204]	; (80072a0 <DMA_SetConfig+0x22c>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d036      	beq.n	8007244 <DMA_SetConfig+0x1d0>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4a32      	ldr	r2, [pc, #200]	; (80072a4 <DMA_SetConfig+0x230>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d031      	beq.n	8007244 <DMA_SetConfig+0x1d0>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a30      	ldr	r2, [pc, #192]	; (80072a8 <DMA_SetConfig+0x234>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d02c      	beq.n	8007244 <DMA_SetConfig+0x1d0>
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a2f      	ldr	r2, [pc, #188]	; (80072ac <DMA_SetConfig+0x238>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d027      	beq.n	8007244 <DMA_SetConfig+0x1d0>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a2d      	ldr	r2, [pc, #180]	; (80072b0 <DMA_SetConfig+0x23c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d022      	beq.n	8007244 <DMA_SetConfig+0x1d0>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a2c      	ldr	r2, [pc, #176]	; (80072b4 <DMA_SetConfig+0x240>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d01d      	beq.n	8007244 <DMA_SetConfig+0x1d0>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	4a2a      	ldr	r2, [pc, #168]	; (80072b8 <DMA_SetConfig+0x244>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d018      	beq.n	8007244 <DMA_SetConfig+0x1d0>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a29      	ldr	r2, [pc, #164]	; (80072bc <DMA_SetConfig+0x248>)
 8007218:	4293      	cmp	r3, r2
 800721a:	d013      	beq.n	8007244 <DMA_SetConfig+0x1d0>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a27      	ldr	r2, [pc, #156]	; (80072c0 <DMA_SetConfig+0x24c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d00e      	beq.n	8007244 <DMA_SetConfig+0x1d0>
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a26      	ldr	r2, [pc, #152]	; (80072c4 <DMA_SetConfig+0x250>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d009      	beq.n	8007244 <DMA_SetConfig+0x1d0>
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a24      	ldr	r2, [pc, #144]	; (80072c8 <DMA_SetConfig+0x254>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d004      	beq.n	8007244 <DMA_SetConfig+0x1d0>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a23      	ldr	r2, [pc, #140]	; (80072cc <DMA_SetConfig+0x258>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d101      	bne.n	8007248 <DMA_SetConfig+0x1d4>
 8007244:	2301      	movs	r3, #1
 8007246:	e000      	b.n	800724a <DMA_SetConfig+0x1d6>
 8007248:	2300      	movs	r3, #0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d059      	beq.n	8007302 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007252:	f003 031f 	and.w	r3, r3, #31
 8007256:	223f      	movs	r2, #63	; 0x3f
 8007258:	409a      	lsls	r2, r3
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800726c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	2b40      	cmp	r3, #64	; 0x40
 800727c:	d138      	bne.n	80072f0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800728e:	e086      	b.n	800739e <DMA_SetConfig+0x32a>
 8007290:	40020010 	.word	0x40020010
 8007294:	40020028 	.word	0x40020028
 8007298:	40020040 	.word	0x40020040
 800729c:	40020058 	.word	0x40020058
 80072a0:	40020070 	.word	0x40020070
 80072a4:	40020088 	.word	0x40020088
 80072a8:	400200a0 	.word	0x400200a0
 80072ac:	400200b8 	.word	0x400200b8
 80072b0:	40020410 	.word	0x40020410
 80072b4:	40020428 	.word	0x40020428
 80072b8:	40020440 	.word	0x40020440
 80072bc:	40020458 	.word	0x40020458
 80072c0:	40020470 	.word	0x40020470
 80072c4:	40020488 	.word	0x40020488
 80072c8:	400204a0 	.word	0x400204a0
 80072cc:	400204b8 	.word	0x400204b8
 80072d0:	58025408 	.word	0x58025408
 80072d4:	5802541c 	.word	0x5802541c
 80072d8:	58025430 	.word	0x58025430
 80072dc:	58025444 	.word	0x58025444
 80072e0:	58025458 	.word	0x58025458
 80072e4:	5802546c 	.word	0x5802546c
 80072e8:	58025480 	.word	0x58025480
 80072ec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	60da      	str	r2, [r3, #12]
}
 8007300:	e04d      	b.n	800739e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a29      	ldr	r2, [pc, #164]	; (80073ac <DMA_SetConfig+0x338>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d022      	beq.n	8007352 <DMA_SetConfig+0x2de>
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a27      	ldr	r2, [pc, #156]	; (80073b0 <DMA_SetConfig+0x33c>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d01d      	beq.n	8007352 <DMA_SetConfig+0x2de>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a26      	ldr	r2, [pc, #152]	; (80073b4 <DMA_SetConfig+0x340>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d018      	beq.n	8007352 <DMA_SetConfig+0x2de>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a24      	ldr	r2, [pc, #144]	; (80073b8 <DMA_SetConfig+0x344>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d013      	beq.n	8007352 <DMA_SetConfig+0x2de>
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a23      	ldr	r2, [pc, #140]	; (80073bc <DMA_SetConfig+0x348>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d00e      	beq.n	8007352 <DMA_SetConfig+0x2de>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a21      	ldr	r2, [pc, #132]	; (80073c0 <DMA_SetConfig+0x34c>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d009      	beq.n	8007352 <DMA_SetConfig+0x2de>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a20      	ldr	r2, [pc, #128]	; (80073c4 <DMA_SetConfig+0x350>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d004      	beq.n	8007352 <DMA_SetConfig+0x2de>
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a1e      	ldr	r2, [pc, #120]	; (80073c8 <DMA_SetConfig+0x354>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d101      	bne.n	8007356 <DMA_SetConfig+0x2e2>
 8007352:	2301      	movs	r3, #1
 8007354:	e000      	b.n	8007358 <DMA_SetConfig+0x2e4>
 8007356:	2300      	movs	r3, #0
 8007358:	2b00      	cmp	r3, #0
 800735a:	d020      	beq.n	800739e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007360:	f003 031f 	and.w	r3, r3, #31
 8007364:	2201      	movs	r2, #1
 8007366:	409a      	lsls	r2, r3
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	683a      	ldr	r2, [r7, #0]
 8007372:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	2b40      	cmp	r3, #64	; 0x40
 800737a:	d108      	bne.n	800738e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	60da      	str	r2, [r3, #12]
}
 800738c:	e007      	b.n	800739e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68ba      	ldr	r2, [r7, #8]
 8007394:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	60da      	str	r2, [r3, #12]
}
 800739e:	bf00      	nop
 80073a0:	371c      	adds	r7, #28
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	58025408 	.word	0x58025408
 80073b0:	5802541c 	.word	0x5802541c
 80073b4:	58025430 	.word	0x58025430
 80073b8:	58025444 	.word	0x58025444
 80073bc:	58025458 	.word	0x58025458
 80073c0:	5802546c 	.word	0x5802546c
 80073c4:	58025480 	.word	0x58025480
 80073c8:	58025494 	.word	0x58025494

080073cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a42      	ldr	r2, [pc, #264]	; (80074e4 <DMA_CalcBaseAndBitshift+0x118>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d04a      	beq.n	8007474 <DMA_CalcBaseAndBitshift+0xa8>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a41      	ldr	r2, [pc, #260]	; (80074e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d045      	beq.n	8007474 <DMA_CalcBaseAndBitshift+0xa8>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a3f      	ldr	r2, [pc, #252]	; (80074ec <DMA_CalcBaseAndBitshift+0x120>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d040      	beq.n	8007474 <DMA_CalcBaseAndBitshift+0xa8>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a3e      	ldr	r2, [pc, #248]	; (80074f0 <DMA_CalcBaseAndBitshift+0x124>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d03b      	beq.n	8007474 <DMA_CalcBaseAndBitshift+0xa8>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a3c      	ldr	r2, [pc, #240]	; (80074f4 <DMA_CalcBaseAndBitshift+0x128>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d036      	beq.n	8007474 <DMA_CalcBaseAndBitshift+0xa8>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a3b      	ldr	r2, [pc, #236]	; (80074f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800740c:	4293      	cmp	r3, r2
 800740e:	d031      	beq.n	8007474 <DMA_CalcBaseAndBitshift+0xa8>
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4a39      	ldr	r2, [pc, #228]	; (80074fc <DMA_CalcBaseAndBitshift+0x130>)
 8007416:	4293      	cmp	r3, r2
 8007418:	d02c      	beq.n	8007474 <DMA_CalcBaseAndBitshift+0xa8>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	4a38      	ldr	r2, [pc, #224]	; (8007500 <DMA_CalcBaseAndBitshift+0x134>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d027      	beq.n	8007474 <DMA_CalcBaseAndBitshift+0xa8>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a36      	ldr	r2, [pc, #216]	; (8007504 <DMA_CalcBaseAndBitshift+0x138>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d022      	beq.n	8007474 <DMA_CalcBaseAndBitshift+0xa8>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a35      	ldr	r2, [pc, #212]	; (8007508 <DMA_CalcBaseAndBitshift+0x13c>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d01d      	beq.n	8007474 <DMA_CalcBaseAndBitshift+0xa8>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a33      	ldr	r2, [pc, #204]	; (800750c <DMA_CalcBaseAndBitshift+0x140>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d018      	beq.n	8007474 <DMA_CalcBaseAndBitshift+0xa8>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a32      	ldr	r2, [pc, #200]	; (8007510 <DMA_CalcBaseAndBitshift+0x144>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d013      	beq.n	8007474 <DMA_CalcBaseAndBitshift+0xa8>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a30      	ldr	r2, [pc, #192]	; (8007514 <DMA_CalcBaseAndBitshift+0x148>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d00e      	beq.n	8007474 <DMA_CalcBaseAndBitshift+0xa8>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	4a2f      	ldr	r2, [pc, #188]	; (8007518 <DMA_CalcBaseAndBitshift+0x14c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d009      	beq.n	8007474 <DMA_CalcBaseAndBitshift+0xa8>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4a2d      	ldr	r2, [pc, #180]	; (800751c <DMA_CalcBaseAndBitshift+0x150>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d004      	beq.n	8007474 <DMA_CalcBaseAndBitshift+0xa8>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a2c      	ldr	r2, [pc, #176]	; (8007520 <DMA_CalcBaseAndBitshift+0x154>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d101      	bne.n	8007478 <DMA_CalcBaseAndBitshift+0xac>
 8007474:	2301      	movs	r3, #1
 8007476:	e000      	b.n	800747a <DMA_CalcBaseAndBitshift+0xae>
 8007478:	2300      	movs	r3, #0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d024      	beq.n	80074c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	3b10      	subs	r3, #16
 8007486:	4a27      	ldr	r2, [pc, #156]	; (8007524 <DMA_CalcBaseAndBitshift+0x158>)
 8007488:	fba2 2303 	umull	r2, r3, r2, r3
 800748c:	091b      	lsrs	r3, r3, #4
 800748e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f003 0307 	and.w	r3, r3, #7
 8007496:	4a24      	ldr	r2, [pc, #144]	; (8007528 <DMA_CalcBaseAndBitshift+0x15c>)
 8007498:	5cd3      	ldrb	r3, [r2, r3]
 800749a:	461a      	mov	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2b03      	cmp	r3, #3
 80074a4:	d908      	bls.n	80074b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	461a      	mov	r2, r3
 80074ac:	4b1f      	ldr	r3, [pc, #124]	; (800752c <DMA_CalcBaseAndBitshift+0x160>)
 80074ae:	4013      	ands	r3, r2
 80074b0:	1d1a      	adds	r2, r3, #4
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	659a      	str	r2, [r3, #88]	; 0x58
 80074b6:	e00d      	b.n	80074d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	461a      	mov	r2, r3
 80074be:	4b1b      	ldr	r3, [pc, #108]	; (800752c <DMA_CalcBaseAndBitshift+0x160>)
 80074c0:	4013      	ands	r3, r2
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	6593      	str	r3, [r2, #88]	; 0x58
 80074c6:	e005      	b.n	80074d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	40020010 	.word	0x40020010
 80074e8:	40020028 	.word	0x40020028
 80074ec:	40020040 	.word	0x40020040
 80074f0:	40020058 	.word	0x40020058
 80074f4:	40020070 	.word	0x40020070
 80074f8:	40020088 	.word	0x40020088
 80074fc:	400200a0 	.word	0x400200a0
 8007500:	400200b8 	.word	0x400200b8
 8007504:	40020410 	.word	0x40020410
 8007508:	40020428 	.word	0x40020428
 800750c:	40020440 	.word	0x40020440
 8007510:	40020458 	.word	0x40020458
 8007514:	40020470 	.word	0x40020470
 8007518:	40020488 	.word	0x40020488
 800751c:	400204a0 	.word	0x400204a0
 8007520:	400204b8 	.word	0x400204b8
 8007524:	aaaaaaab 	.word	0xaaaaaaab
 8007528:	08018c10 	.word	0x08018c10
 800752c:	fffffc00 	.word	0xfffffc00

08007530 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007530:	b480      	push	{r7}
 8007532:	b085      	sub	sp, #20
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007538:	2300      	movs	r3, #0
 800753a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	699b      	ldr	r3, [r3, #24]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d120      	bne.n	8007586 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007548:	2b03      	cmp	r3, #3
 800754a:	d858      	bhi.n	80075fe <DMA_CheckFifoParam+0xce>
 800754c:	a201      	add	r2, pc, #4	; (adr r2, 8007554 <DMA_CheckFifoParam+0x24>)
 800754e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007552:	bf00      	nop
 8007554:	08007565 	.word	0x08007565
 8007558:	08007577 	.word	0x08007577
 800755c:	08007565 	.word	0x08007565
 8007560:	080075ff 	.word	0x080075ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d048      	beq.n	8007602 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007574:	e045      	b.n	8007602 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800757e:	d142      	bne.n	8007606 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007584:	e03f      	b.n	8007606 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800758e:	d123      	bne.n	80075d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007594:	2b03      	cmp	r3, #3
 8007596:	d838      	bhi.n	800760a <DMA_CheckFifoParam+0xda>
 8007598:	a201      	add	r2, pc, #4	; (adr r2, 80075a0 <DMA_CheckFifoParam+0x70>)
 800759a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759e:	bf00      	nop
 80075a0:	080075b1 	.word	0x080075b1
 80075a4:	080075b7 	.word	0x080075b7
 80075a8:	080075b1 	.word	0x080075b1
 80075ac:	080075c9 	.word	0x080075c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80075b0:	2301      	movs	r3, #1
 80075b2:	73fb      	strb	r3, [r7, #15]
        break;
 80075b4:	e030      	b.n	8007618 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d025      	beq.n	800760e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075c6:	e022      	b.n	800760e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80075d0:	d11f      	bne.n	8007612 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80075d2:	2301      	movs	r3, #1
 80075d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80075d6:	e01c      	b.n	8007612 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075dc:	2b02      	cmp	r3, #2
 80075de:	d902      	bls.n	80075e6 <DMA_CheckFifoParam+0xb6>
 80075e0:	2b03      	cmp	r3, #3
 80075e2:	d003      	beq.n	80075ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80075e4:	e018      	b.n	8007618 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80075e6:	2301      	movs	r3, #1
 80075e8:	73fb      	strb	r3, [r7, #15]
        break;
 80075ea:	e015      	b.n	8007618 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00e      	beq.n	8007616 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	73fb      	strb	r3, [r7, #15]
    break;
 80075fc:	e00b      	b.n	8007616 <DMA_CheckFifoParam+0xe6>
        break;
 80075fe:	bf00      	nop
 8007600:	e00a      	b.n	8007618 <DMA_CheckFifoParam+0xe8>
        break;
 8007602:	bf00      	nop
 8007604:	e008      	b.n	8007618 <DMA_CheckFifoParam+0xe8>
        break;
 8007606:	bf00      	nop
 8007608:	e006      	b.n	8007618 <DMA_CheckFifoParam+0xe8>
        break;
 800760a:	bf00      	nop
 800760c:	e004      	b.n	8007618 <DMA_CheckFifoParam+0xe8>
        break;
 800760e:	bf00      	nop
 8007610:	e002      	b.n	8007618 <DMA_CheckFifoParam+0xe8>
        break;
 8007612:	bf00      	nop
 8007614:	e000      	b.n	8007618 <DMA_CheckFifoParam+0xe8>
    break;
 8007616:	bf00      	nop
    }
  }

  return status;
 8007618:	7bfb      	ldrb	r3, [r7, #15]
}
 800761a:	4618      	mov	r0, r3
 800761c:	3714      	adds	r7, #20
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop

08007628 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a38      	ldr	r2, [pc, #224]	; (800771c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d022      	beq.n	8007686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a36      	ldr	r2, [pc, #216]	; (8007720 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d01d      	beq.n	8007686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a35      	ldr	r2, [pc, #212]	; (8007724 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d018      	beq.n	8007686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a33      	ldr	r2, [pc, #204]	; (8007728 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d013      	beq.n	8007686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a32      	ldr	r2, [pc, #200]	; (800772c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d00e      	beq.n	8007686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a30      	ldr	r2, [pc, #192]	; (8007730 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d009      	beq.n	8007686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a2f      	ldr	r2, [pc, #188]	; (8007734 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d004      	beq.n	8007686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a2d      	ldr	r2, [pc, #180]	; (8007738 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d101      	bne.n	800768a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007686:	2301      	movs	r3, #1
 8007688:	e000      	b.n	800768c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800768a:	2300      	movs	r3, #0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d01a      	beq.n	80076c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	3b08      	subs	r3, #8
 8007698:	4a28      	ldr	r2, [pc, #160]	; (800773c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800769a:	fba2 2303 	umull	r2, r3, r2, r3
 800769e:	091b      	lsrs	r3, r3, #4
 80076a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	4b26      	ldr	r3, [pc, #152]	; (8007740 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80076a6:	4413      	add	r3, r2
 80076a8:	009b      	lsls	r3, r3, #2
 80076aa:	461a      	mov	r2, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a24      	ldr	r2, [pc, #144]	; (8007744 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80076b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f003 031f 	and.w	r3, r3, #31
 80076bc:	2201      	movs	r2, #1
 80076be:	409a      	lsls	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80076c4:	e024      	b.n	8007710 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	3b10      	subs	r3, #16
 80076ce:	4a1e      	ldr	r2, [pc, #120]	; (8007748 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80076d0:	fba2 2303 	umull	r2, r3, r2, r3
 80076d4:	091b      	lsrs	r3, r3, #4
 80076d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	4a1c      	ldr	r2, [pc, #112]	; (800774c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d806      	bhi.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	4a1b      	ldr	r2, [pc, #108]	; (8007750 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d902      	bls.n	80076ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3308      	adds	r3, #8
 80076ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80076ee:	68fa      	ldr	r2, [r7, #12]
 80076f0:	4b18      	ldr	r3, [pc, #96]	; (8007754 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80076f2:	4413      	add	r3, r2
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	461a      	mov	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a16      	ldr	r2, [pc, #88]	; (8007758 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007700:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	f003 031f 	and.w	r3, r3, #31
 8007708:	2201      	movs	r2, #1
 800770a:	409a      	lsls	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007710:	bf00      	nop
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr
 800771c:	58025408 	.word	0x58025408
 8007720:	5802541c 	.word	0x5802541c
 8007724:	58025430 	.word	0x58025430
 8007728:	58025444 	.word	0x58025444
 800772c:	58025458 	.word	0x58025458
 8007730:	5802546c 	.word	0x5802546c
 8007734:	58025480 	.word	0x58025480
 8007738:	58025494 	.word	0x58025494
 800773c:	cccccccd 	.word	0xcccccccd
 8007740:	16009600 	.word	0x16009600
 8007744:	58025880 	.word	0x58025880
 8007748:	aaaaaaab 	.word	0xaaaaaaab
 800774c:	400204b8 	.word	0x400204b8
 8007750:	4002040f 	.word	0x4002040f
 8007754:	10008200 	.word	0x10008200
 8007758:	40020880 	.word	0x40020880

0800775c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	b2db      	uxtb	r3, r3
 800776a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d04a      	beq.n	8007808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	2b08      	cmp	r3, #8
 8007776:	d847      	bhi.n	8007808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a25      	ldr	r2, [pc, #148]	; (8007814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d022      	beq.n	80077c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a24      	ldr	r2, [pc, #144]	; (8007818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d01d      	beq.n	80077c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a22      	ldr	r2, [pc, #136]	; (800781c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d018      	beq.n	80077c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a21      	ldr	r2, [pc, #132]	; (8007820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d013      	beq.n	80077c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a1f      	ldr	r2, [pc, #124]	; (8007824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d00e      	beq.n	80077c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a1e      	ldr	r2, [pc, #120]	; (8007828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d009      	beq.n	80077c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a1c      	ldr	r2, [pc, #112]	; (800782c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d004      	beq.n	80077c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a1b      	ldr	r2, [pc, #108]	; (8007830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d101      	bne.n	80077cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80077c8:	2301      	movs	r3, #1
 80077ca:	e000      	b.n	80077ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80077cc:	2300      	movs	r3, #0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00a      	beq.n	80077e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80077d2:	68fa      	ldr	r2, [r7, #12]
 80077d4:	4b17      	ldr	r3, [pc, #92]	; (8007834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	461a      	mov	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a15      	ldr	r2, [pc, #84]	; (8007838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80077e4:	671a      	str	r2, [r3, #112]	; 0x70
 80077e6:	e009      	b.n	80077fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	4b14      	ldr	r3, [pc, #80]	; (800783c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80077ec:	4413      	add	r3, r2
 80077ee:	009b      	lsls	r3, r3, #2
 80077f0:	461a      	mov	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a11      	ldr	r2, [pc, #68]	; (8007840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80077fa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	3b01      	subs	r3, #1
 8007800:	2201      	movs	r2, #1
 8007802:	409a      	lsls	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007808:	bf00      	nop
 800780a:	3714      	adds	r7, #20
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr
 8007814:	58025408 	.word	0x58025408
 8007818:	5802541c 	.word	0x5802541c
 800781c:	58025430 	.word	0x58025430
 8007820:	58025444 	.word	0x58025444
 8007824:	58025458 	.word	0x58025458
 8007828:	5802546c 	.word	0x5802546c
 800782c:	58025480 	.word	0x58025480
 8007830:	58025494 	.word	0x58025494
 8007834:	1600963f 	.word	0x1600963f
 8007838:	58025940 	.word	0x58025940
 800783c:	1000823f 	.word	0x1000823f
 8007840:	40020940 	.word	0x40020940

08007844 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b098      	sub	sp, #96	; 0x60
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 800784c:	4a84      	ldr	r2, [pc, #528]	; (8007a60 <HAL_FDCAN_Init+0x21c>)
 800784e:	f107 030c 	add.w	r3, r7, #12
 8007852:	4611      	mov	r1, r2
 8007854:	224c      	movs	r2, #76	; 0x4c
 8007856:	4618      	mov	r0, r3
 8007858:	f00f ffc2 	bl	80177e0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d101      	bne.n	8007866 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e1c6      	b.n	8007bf4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a7e      	ldr	r2, [pc, #504]	; (8007a64 <HAL_FDCAN_Init+0x220>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d106      	bne.n	800787e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007878:	461a      	mov	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d106      	bne.n	8007898 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f7fb fa6a 	bl	8002d6c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	699a      	ldr	r2, [r3, #24]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f022 0210 	bic.w	r2, r2, #16
 80078a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078a8:	f7fc fa32 	bl	8003d10 <HAL_GetTick>
 80078ac:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80078ae:	e014      	b.n	80078da <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80078b0:	f7fc fa2e 	bl	8003d10 <HAL_GetTick>
 80078b4:	4602      	mov	r2, r0
 80078b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	2b0a      	cmp	r3, #10
 80078bc:	d90d      	bls.n	80078da <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078c4:	f043 0201 	orr.w	r2, r3, #1
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2203      	movs	r2, #3
 80078d2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e18c      	b.n	8007bf4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	f003 0308 	and.w	r3, r3, #8
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d0e3      	beq.n	80078b0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	699a      	ldr	r2, [r3, #24]
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f042 0201 	orr.w	r2, r2, #1
 80078f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078f8:	f7fc fa0a 	bl	8003d10 <HAL_GetTick>
 80078fc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80078fe:	e014      	b.n	800792a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007900:	f7fc fa06 	bl	8003d10 <HAL_GetTick>
 8007904:	4602      	mov	r2, r0
 8007906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007908:	1ad3      	subs	r3, r2, r3
 800790a:	2b0a      	cmp	r3, #10
 800790c:	d90d      	bls.n	800792a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007914:	f043 0201 	orr.w	r2, r3, #1
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2203      	movs	r2, #3
 8007922:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e164      	b.n	8007bf4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	699b      	ldr	r3, [r3, #24]
 8007930:	f003 0301 	and.w	r3, r3, #1
 8007934:	2b00      	cmp	r3, #0
 8007936:	d0e3      	beq.n	8007900 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	699a      	ldr	r2, [r3, #24]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f042 0202 	orr.w	r2, r2, #2
 8007946:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	7c1b      	ldrb	r3, [r3, #16]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d108      	bne.n	8007962 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	699a      	ldr	r2, [r3, #24]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800795e:	619a      	str	r2, [r3, #24]
 8007960:	e007      	b.n	8007972 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	699a      	ldr	r2, [r3, #24]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007970:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	7c5b      	ldrb	r3, [r3, #17]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d108      	bne.n	800798c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	699a      	ldr	r2, [r3, #24]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007988:	619a      	str	r2, [r3, #24]
 800798a:	e007      	b.n	800799c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	699a      	ldr	r2, [r3, #24]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800799a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	7c9b      	ldrb	r3, [r3, #18]
 80079a0:	2b01      	cmp	r3, #1
 80079a2:	d108      	bne.n	80079b6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	699a      	ldr	r2, [r3, #24]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079b2:	619a      	str	r2, [r3, #24]
 80079b4:	e007      	b.n	80079c6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	699a      	ldr	r2, [r3, #24]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80079c4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	699b      	ldr	r3, [r3, #24]
 80079cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689a      	ldr	r2, [r3, #8]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	430a      	orrs	r2, r1
 80079da:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	699a      	ldr	r2, [r3, #24]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80079ea:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	691a      	ldr	r2, [r3, #16]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f022 0210 	bic.w	r2, r2, #16
 80079fa:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	2b01      	cmp	r3, #1
 8007a02:	d108      	bne.n	8007a16 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	699a      	ldr	r2, [r3, #24]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f042 0204 	orr.w	r2, r2, #4
 8007a12:	619a      	str	r2, [r3, #24]
 8007a14:	e030      	b.n	8007a78 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d02c      	beq.n	8007a78 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68db      	ldr	r3, [r3, #12]
 8007a22:	2b02      	cmp	r3, #2
 8007a24:	d020      	beq.n	8007a68 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	699a      	ldr	r2, [r3, #24]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a34:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	691a      	ldr	r2, [r3, #16]
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f042 0210 	orr.w	r2, r2, #16
 8007a44:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	d114      	bne.n	8007a78 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	699a      	ldr	r2, [r3, #24]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f042 0220 	orr.w	r2, r2, #32
 8007a5c:	619a      	str	r2, [r3, #24]
 8007a5e:	e00b      	b.n	8007a78 <HAL_FDCAN_Init+0x234>
 8007a60:	08018afc 	.word	0x08018afc
 8007a64:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	699a      	ldr	r2, [r3, #24]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f042 0220 	orr.w	r2, r2, #32
 8007a76:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	69db      	ldr	r3, [r3, #28]
 8007a84:	3b01      	subs	r3, #1
 8007a86:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a88:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007a90:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	3b01      	subs	r3, #1
 8007a9a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007aa0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007aa2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007aac:	d115      	bne.n	8007ada <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007abc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8007ac6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8007ad6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8007ad8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00a      	beq.n	8007af8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	430a      	orrs	r2, r1
 8007af4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b00:	4413      	add	r3, r2
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d011      	beq.n	8007b2a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007b0e:	f023 0107 	bic.w	r1, r3, #7
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	3360      	adds	r3, #96	; 0x60
 8007b1a:	443b      	add	r3, r7
 8007b1c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d011      	beq.n	8007b56 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007b3a:	f023 0107 	bic.w	r1, r3, #7
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	3360      	adds	r3, #96	; 0x60
 8007b46:	443b      	add	r3, r7
 8007b48:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d012      	beq.n	8007b84 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007b66:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	3360      	adds	r3, #96	; 0x60
 8007b72:	443b      	add	r3, r7
 8007b74:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007b78:	011a      	lsls	r2, r3, #4
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d012      	beq.n	8007bb2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007b94:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	3360      	adds	r3, #96	; 0x60
 8007ba0:	443b      	add	r3, r7
 8007ba2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007ba6:	021a      	lsls	r2, r3, #8
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	430a      	orrs	r2, r1
 8007bae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	4a11      	ldr	r2, [pc, #68]	; (8007bfc <HAL_FDCAN_Init+0x3b8>)
 8007bb8:	4293      	cmp	r3, r2
 8007bba:	d107      	bne.n	8007bcc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	689a      	ldr	r2, [r3, #8]
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	f022 0203 	bic.w	r2, r2, #3
 8007bca:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f80b 	bl	8007c00 <FDCAN_CalcultateRamBlockAddresses>
 8007bea:	4603      	mov	r3, r0
 8007bec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8007bf0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	3760      	adds	r7, #96	; 0x60
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	4000a000 	.word	0x4000a000

08007c00 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b085      	sub	sp, #20
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c0c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007c16:	4ba7      	ldr	r3, [pc, #668]	; (8007eb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007c18:	4013      	ands	r3, r2
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	0091      	lsls	r1, r2, #2
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	6812      	ldr	r2, [r2, #0]
 8007c22:	430b      	orrs	r3, r1
 8007c24:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007c30:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c38:	041a      	lsls	r2, r3, #16
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007c56:	4b97      	ldr	r3, [pc, #604]	; (8007eb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007c58:	4013      	ands	r3, r2
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	0091      	lsls	r1, r2, #2
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	6812      	ldr	r2, [r2, #0]
 8007c62:	430b      	orrs	r3, r1
 8007c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c70:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c78:	041a      	lsls	r2, r3, #16
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	68ba      	ldr	r2, [r7, #8]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8007c98:	4b86      	ldr	r3, [pc, #536]	; (8007eb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	68ba      	ldr	r2, [r7, #8]
 8007c9e:	0091      	lsls	r1, r2, #2
 8007ca0:	687a      	ldr	r2, [r7, #4]
 8007ca2:	6812      	ldr	r2, [r2, #0]
 8007ca4:	430b      	orrs	r3, r1
 8007ca6:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007cb2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cba:	041a      	lsls	r2, r3, #16
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	430a      	orrs	r2, r1
 8007cc2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cca:	687a      	ldr	r2, [r7, #4]
 8007ccc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8007cce:	fb02 f303 	mul.w	r3, r2, r3
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007ce0:	4b74      	ldr	r3, [pc, #464]	; (8007eb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	0091      	lsls	r1, r2, #2
 8007ce8:	687a      	ldr	r2, [r7, #4]
 8007cea:	6812      	ldr	r2, [r2, #0]
 8007cec:	430b      	orrs	r3, r1
 8007cee:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007cfa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d02:	041a      	lsls	r2, r3, #16
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	430a      	orrs	r2, r1
 8007d0a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007d16:	fb02 f303 	mul.w	r3, r2, r3
 8007d1a:	68ba      	ldr	r2, [r7, #8]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007d28:	4b62      	ldr	r3, [pc, #392]	; (8007eb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007d2a:	4013      	ands	r3, r2
 8007d2c:	68ba      	ldr	r2, [r7, #8]
 8007d2e:	0091      	lsls	r1, r2, #2
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	6812      	ldr	r2, [r2, #0]
 8007d34:	430b      	orrs	r3, r1
 8007d36:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007d42:	fb02 f303 	mul.w	r3, r2, r3
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	4413      	add	r3, r2
 8007d4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007d54:	4b57      	ldr	r3, [pc, #348]	; (8007eb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007d56:	4013      	ands	r3, r2
 8007d58:	68ba      	ldr	r2, [r7, #8]
 8007d5a:	0091      	lsls	r1, r2, #2
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	6812      	ldr	r2, [r2, #0]
 8007d60:	430b      	orrs	r3, r1
 8007d62:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d6e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d76:	041a      	lsls	r2, r3, #16
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d86:	005b      	lsls	r3, r3, #1
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007d96:	4b47      	ldr	r3, [pc, #284]	; (8007eb4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007d98:	4013      	ands	r3, r2
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	0091      	lsls	r1, r2, #2
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	6812      	ldr	r2, [r2, #0]
 8007da2:	430b      	orrs	r3, r1
 8007da4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007db0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007db8:	041a      	lsls	r2, r3, #16
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	430a      	orrs	r2, r1
 8007dc0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007dcc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dd4:	061a      	lsls	r2, r3, #24
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007de4:	4b34      	ldr	r3, [pc, #208]	; (8007eb8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007de6:	4413      	add	r3, r2
 8007de8:	009a      	lsls	r2, r3, #2
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	441a      	add	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	441a      	add	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e16:	6879      	ldr	r1, [r7, #4]
 8007e18:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007e1a:	fb01 f303 	mul.w	r3, r1, r3
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	441a      	add	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007e32:	fb01 f303 	mul.w	r3, r1, r3
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	441a      	add	r2, r3
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e46:	6879      	ldr	r1, [r7, #4]
 8007e48:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007e4a:	fb01 f303 	mul.w	r3, r1, r3
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	441a      	add	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e62:	00db      	lsls	r3, r3, #3
 8007e64:	441a      	add	r2, r3
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007e7a:	fb01 f303 	mul.w	r3, r1, r3
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	441a      	add	r2, r3
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e92:	6879      	ldr	r1, [r7, #4]
 8007e94:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007e96:	fb01 f303 	mul.w	r3, r1, r3
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	441a      	add	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eaa:	4a04      	ldr	r2, [pc, #16]	; (8007ebc <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d915      	bls.n	8007edc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007eb0:	e006      	b.n	8007ec0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007eb2:	bf00      	nop
 8007eb4:	ffff0003 	.word	0xffff0003
 8007eb8:	10002b00 	.word	0x10002b00
 8007ebc:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007ec6:	f043 0220 	orr.w	r2, r3, #32
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2203      	movs	r2, #3
 8007ed4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e010      	b.n	8007efe <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ee0:	60fb      	str	r3, [r7, #12]
 8007ee2:	e005      	b.n	8007ef0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	3304      	adds	r3, #4
 8007eee:	60fb      	str	r3, [r7, #12]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d3f3      	bcc.n	8007ee4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop

08007f0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b089      	sub	sp, #36	; 0x24
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007f16:	2300      	movs	r3, #0
 8007f18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007f1a:	4b86      	ldr	r3, [pc, #536]	; (8008134 <HAL_GPIO_Init+0x228>)
 8007f1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007f1e:	e18c      	b.n	800823a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	2101      	movs	r1, #1
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	fa01 f303 	lsl.w	r3, r1, r3
 8007f2c:	4013      	ands	r3, r2
 8007f2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f000 817e 	beq.w	8008234 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f003 0303 	and.w	r3, r3, #3
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d005      	beq.n	8007f50 <HAL_GPIO_Init+0x44>
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	f003 0303 	and.w	r3, r3, #3
 8007f4c:	2b02      	cmp	r3, #2
 8007f4e:	d130      	bne.n	8007fb2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	005b      	lsls	r3, r3, #1
 8007f5a:	2203      	movs	r2, #3
 8007f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f60:	43db      	mvns	r3, r3
 8007f62:	69ba      	ldr	r2, [r7, #24]
 8007f64:	4013      	ands	r3, r2
 8007f66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	68da      	ldr	r2, [r3, #12]
 8007f6c:	69fb      	ldr	r3, [r7, #28]
 8007f6e:	005b      	lsls	r3, r3, #1
 8007f70:	fa02 f303 	lsl.w	r3, r2, r3
 8007f74:	69ba      	ldr	r2, [r7, #24]
 8007f76:	4313      	orrs	r3, r2
 8007f78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	69ba      	ldr	r2, [r7, #24]
 8007f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f86:	2201      	movs	r2, #1
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f8e:	43db      	mvns	r3, r3
 8007f90:	69ba      	ldr	r2, [r7, #24]
 8007f92:	4013      	ands	r3, r2
 8007f94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	091b      	lsrs	r3, r3, #4
 8007f9c:	f003 0201 	and.w	r2, r3, #1
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	4313      	orrs	r3, r2
 8007faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	69ba      	ldr	r2, [r7, #24]
 8007fb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f003 0303 	and.w	r3, r3, #3
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d017      	beq.n	8007fee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	005b      	lsls	r3, r3, #1
 8007fc8:	2203      	movs	r2, #3
 8007fca:	fa02 f303 	lsl.w	r3, r2, r3
 8007fce:	43db      	mvns	r3, r3
 8007fd0:	69ba      	ldr	r2, [r7, #24]
 8007fd2:	4013      	ands	r3, r2
 8007fd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	689a      	ldr	r2, [r3, #8]
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	005b      	lsls	r3, r3, #1
 8007fde:	fa02 f303 	lsl.w	r3, r2, r3
 8007fe2:	69ba      	ldr	r2, [r7, #24]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	69ba      	ldr	r2, [r7, #24]
 8007fec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f003 0303 	and.w	r3, r3, #3
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d123      	bne.n	8008042 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	08da      	lsrs	r2, r3, #3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	3208      	adds	r2, #8
 8008002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	f003 0307 	and.w	r3, r3, #7
 800800e:	009b      	lsls	r3, r3, #2
 8008010:	220f      	movs	r2, #15
 8008012:	fa02 f303 	lsl.w	r3, r2, r3
 8008016:	43db      	mvns	r3, r3
 8008018:	69ba      	ldr	r2, [r7, #24]
 800801a:	4013      	ands	r3, r2
 800801c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	691a      	ldr	r2, [r3, #16]
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	f003 0307 	and.w	r3, r3, #7
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	fa02 f303 	lsl.w	r3, r2, r3
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	4313      	orrs	r3, r2
 8008032:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008034:	69fb      	ldr	r3, [r7, #28]
 8008036:	08da      	lsrs	r2, r3, #3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	3208      	adds	r2, #8
 800803c:	69b9      	ldr	r1, [r7, #24]
 800803e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	005b      	lsls	r3, r3, #1
 800804c:	2203      	movs	r2, #3
 800804e:	fa02 f303 	lsl.w	r3, r2, r3
 8008052:	43db      	mvns	r3, r3
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	4013      	ands	r3, r2
 8008058:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	f003 0203 	and.w	r2, r3, #3
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	005b      	lsls	r3, r3, #1
 8008066:	fa02 f303 	lsl.w	r3, r2, r3
 800806a:	69ba      	ldr	r2, [r7, #24]
 800806c:	4313      	orrs	r3, r2
 800806e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800807e:	2b00      	cmp	r3, #0
 8008080:	f000 80d8 	beq.w	8008234 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008084:	4b2c      	ldr	r3, [pc, #176]	; (8008138 <HAL_GPIO_Init+0x22c>)
 8008086:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800808a:	4a2b      	ldr	r2, [pc, #172]	; (8008138 <HAL_GPIO_Init+0x22c>)
 800808c:	f043 0302 	orr.w	r3, r3, #2
 8008090:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008094:	4b28      	ldr	r3, [pc, #160]	; (8008138 <HAL_GPIO_Init+0x22c>)
 8008096:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800809a:	f003 0302 	and.w	r3, r3, #2
 800809e:	60fb      	str	r3, [r7, #12]
 80080a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80080a2:	4a26      	ldr	r2, [pc, #152]	; (800813c <HAL_GPIO_Init+0x230>)
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	089b      	lsrs	r3, r3, #2
 80080a8:	3302      	adds	r3, #2
 80080aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	f003 0303 	and.w	r3, r3, #3
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	220f      	movs	r2, #15
 80080ba:	fa02 f303 	lsl.w	r3, r2, r3
 80080be:	43db      	mvns	r3, r3
 80080c0:	69ba      	ldr	r2, [r7, #24]
 80080c2:	4013      	ands	r3, r2
 80080c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a1d      	ldr	r2, [pc, #116]	; (8008140 <HAL_GPIO_Init+0x234>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d04a      	beq.n	8008164 <HAL_GPIO_Init+0x258>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a1c      	ldr	r2, [pc, #112]	; (8008144 <HAL_GPIO_Init+0x238>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d02b      	beq.n	800812e <HAL_GPIO_Init+0x222>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a1b      	ldr	r2, [pc, #108]	; (8008148 <HAL_GPIO_Init+0x23c>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d025      	beq.n	800812a <HAL_GPIO_Init+0x21e>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a1a      	ldr	r2, [pc, #104]	; (800814c <HAL_GPIO_Init+0x240>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d01f      	beq.n	8008126 <HAL_GPIO_Init+0x21a>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a19      	ldr	r2, [pc, #100]	; (8008150 <HAL_GPIO_Init+0x244>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d019      	beq.n	8008122 <HAL_GPIO_Init+0x216>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a18      	ldr	r2, [pc, #96]	; (8008154 <HAL_GPIO_Init+0x248>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d013      	beq.n	800811e <HAL_GPIO_Init+0x212>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a17      	ldr	r2, [pc, #92]	; (8008158 <HAL_GPIO_Init+0x24c>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d00d      	beq.n	800811a <HAL_GPIO_Init+0x20e>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a16      	ldr	r2, [pc, #88]	; (800815c <HAL_GPIO_Init+0x250>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d007      	beq.n	8008116 <HAL_GPIO_Init+0x20a>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a15      	ldr	r2, [pc, #84]	; (8008160 <HAL_GPIO_Init+0x254>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d101      	bne.n	8008112 <HAL_GPIO_Init+0x206>
 800810e:	2309      	movs	r3, #9
 8008110:	e029      	b.n	8008166 <HAL_GPIO_Init+0x25a>
 8008112:	230a      	movs	r3, #10
 8008114:	e027      	b.n	8008166 <HAL_GPIO_Init+0x25a>
 8008116:	2307      	movs	r3, #7
 8008118:	e025      	b.n	8008166 <HAL_GPIO_Init+0x25a>
 800811a:	2306      	movs	r3, #6
 800811c:	e023      	b.n	8008166 <HAL_GPIO_Init+0x25a>
 800811e:	2305      	movs	r3, #5
 8008120:	e021      	b.n	8008166 <HAL_GPIO_Init+0x25a>
 8008122:	2304      	movs	r3, #4
 8008124:	e01f      	b.n	8008166 <HAL_GPIO_Init+0x25a>
 8008126:	2303      	movs	r3, #3
 8008128:	e01d      	b.n	8008166 <HAL_GPIO_Init+0x25a>
 800812a:	2302      	movs	r3, #2
 800812c:	e01b      	b.n	8008166 <HAL_GPIO_Init+0x25a>
 800812e:	2301      	movs	r3, #1
 8008130:	e019      	b.n	8008166 <HAL_GPIO_Init+0x25a>
 8008132:	bf00      	nop
 8008134:	58000080 	.word	0x58000080
 8008138:	58024400 	.word	0x58024400
 800813c:	58000400 	.word	0x58000400
 8008140:	58020000 	.word	0x58020000
 8008144:	58020400 	.word	0x58020400
 8008148:	58020800 	.word	0x58020800
 800814c:	58020c00 	.word	0x58020c00
 8008150:	58021000 	.word	0x58021000
 8008154:	58021400 	.word	0x58021400
 8008158:	58021800 	.word	0x58021800
 800815c:	58021c00 	.word	0x58021c00
 8008160:	58022400 	.word	0x58022400
 8008164:	2300      	movs	r3, #0
 8008166:	69fa      	ldr	r2, [r7, #28]
 8008168:	f002 0203 	and.w	r2, r2, #3
 800816c:	0092      	lsls	r2, r2, #2
 800816e:	4093      	lsls	r3, r2
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	4313      	orrs	r3, r2
 8008174:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008176:	4938      	ldr	r1, [pc, #224]	; (8008258 <HAL_GPIO_Init+0x34c>)
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	089b      	lsrs	r3, r3, #2
 800817c:	3302      	adds	r3, #2
 800817e:	69ba      	ldr	r2, [r7, #24]
 8008180:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	43db      	mvns	r3, r3
 8008190:	69ba      	ldr	r2, [r7, #24]
 8008192:	4013      	ands	r3, r2
 8008194:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80081a2:	69ba      	ldr	r2, [r7, #24]
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80081aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081ae:	69bb      	ldr	r3, [r7, #24]
 80081b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80081b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80081ba:	693b      	ldr	r3, [r7, #16]
 80081bc:	43db      	mvns	r3, r3
 80081be:	69ba      	ldr	r2, [r7, #24]
 80081c0:	4013      	ands	r3, r2
 80081c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d003      	beq.n	80081d8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80081d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	43db      	mvns	r3, r3
 80081ea:	69ba      	ldr	r2, [r7, #24]
 80081ec:	4013      	ands	r3, r2
 80081ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d003      	beq.n	8008204 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80081fc:	69ba      	ldr	r2, [r7, #24]
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	4313      	orrs	r3, r2
 8008202:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	69ba      	ldr	r2, [r7, #24]
 8008208:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	43db      	mvns	r3, r3
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	4013      	ands	r3, r2
 8008218:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008222:	2b00      	cmp	r3, #0
 8008224:	d003      	beq.n	800822e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8008226:	69ba      	ldr	r2, [r7, #24]
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	4313      	orrs	r3, r2
 800822c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	69ba      	ldr	r2, [r7, #24]
 8008232:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	3301      	adds	r3, #1
 8008238:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	69fb      	ldr	r3, [r7, #28]
 8008240:	fa22 f303 	lsr.w	r3, r2, r3
 8008244:	2b00      	cmp	r3, #0
 8008246:	f47f ae6b 	bne.w	8007f20 <HAL_GPIO_Init+0x14>
  }
}
 800824a:	bf00      	nop
 800824c:	bf00      	nop
 800824e:	3724      	adds	r7, #36	; 0x24
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	58000400 	.word	0x58000400

0800825c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800825c:	b480      	push	{r7}
 800825e:	b085      	sub	sp, #20
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	460b      	mov	r3, r1
 8008266:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	691a      	ldr	r2, [r3, #16]
 800826c:	887b      	ldrh	r3, [r7, #2]
 800826e:	4013      	ands	r3, r2
 8008270:	2b00      	cmp	r3, #0
 8008272:	d002      	beq.n	800827a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008274:	2301      	movs	r3, #1
 8008276:	73fb      	strb	r3, [r7, #15]
 8008278:	e001      	b.n	800827e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800827a:	2300      	movs	r3, #0
 800827c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800827e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008280:	4618      	mov	r0, r3
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	460b      	mov	r3, r1
 8008296:	807b      	strh	r3, [r7, #2]
 8008298:	4613      	mov	r3, r2
 800829a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800829c:	787b      	ldrb	r3, [r7, #1]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d003      	beq.n	80082aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80082a2:	887a      	ldrh	r2, [r7, #2]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80082a8:	e003      	b.n	80082b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80082aa:	887b      	ldrh	r3, [r7, #2]
 80082ac:	041a      	lsls	r2, r3, #16
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	619a      	str	r2, [r3, #24]
}
 80082b2:	bf00      	nop
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
	...

080082c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b082      	sub	sp, #8
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d101      	bne.n	80082d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80082ce:	2301      	movs	r3, #1
 80082d0:	e07f      	b.n	80083d2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d106      	bne.n	80082ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7fa fda8 	bl	8002e3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2224      	movs	r2, #36	; 0x24
 80082f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f022 0201 	bic.w	r2, r2, #1
 8008302:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	685a      	ldr	r2, [r3, #4]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008310:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689a      	ldr	r2, [r3, #8]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008320:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	2b01      	cmp	r3, #1
 8008328:	d107      	bne.n	800833a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	689a      	ldr	r2, [r3, #8]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008336:	609a      	str	r2, [r3, #8]
 8008338:	e006      	b.n	8008348 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	689a      	ldr	r2, [r3, #8]
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008346:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	2b02      	cmp	r3, #2
 800834e:	d104      	bne.n	800835a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008358:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6859      	ldr	r1, [r3, #4]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	4b1d      	ldr	r3, [pc, #116]	; (80083dc <HAL_I2C_Init+0x11c>)
 8008366:	430b      	orrs	r3, r1
 8008368:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68da      	ldr	r2, [r3, #12]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008378:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	691a      	ldr	r2, [r3, #16]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	695b      	ldr	r3, [r3, #20]
 8008382:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	699b      	ldr	r3, [r3, #24]
 800838a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	430a      	orrs	r2, r1
 8008392:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	69d9      	ldr	r1, [r3, #28]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a1a      	ldr	r2, [r3, #32]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f042 0201 	orr.w	r2, r2, #1
 80083b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2200      	movs	r2, #0
 80083b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2220      	movs	r2, #32
 80083be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}
 80083da:	bf00      	nop
 80083dc:	02008000 	.word	0x02008000

080083e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d005      	beq.n	800840c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008404:	68ba      	ldr	r2, [r7, #8]
 8008406:	68f9      	ldr	r1, [r7, #12]
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	4798      	blx	r3
  }
}
 800840c:	bf00      	nop
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b20      	cmp	r3, #32
 8008428:	d138      	bne.n	800849c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008430:	2b01      	cmp	r3, #1
 8008432:	d101      	bne.n	8008438 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008434:	2302      	movs	r3, #2
 8008436:	e032      	b.n	800849e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2224      	movs	r2, #36	; 0x24
 8008444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f022 0201 	bic.w	r2, r2, #1
 8008456:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	681a      	ldr	r2, [r3, #0]
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008466:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6819      	ldr	r1, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	683a      	ldr	r2, [r7, #0]
 8008474:	430a      	orrs	r2, r1
 8008476:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681a      	ldr	r2, [r3, #0]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f042 0201 	orr.w	r2, r2, #1
 8008486:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2220      	movs	r2, #32
 800848c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2200      	movs	r2, #0
 8008494:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008498:	2300      	movs	r3, #0
 800849a:	e000      	b.n	800849e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800849c:	2302      	movs	r3, #2
  }
}
 800849e:	4618      	mov	r0, r3
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr

080084aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b085      	sub	sp, #20
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b20      	cmp	r3, #32
 80084be:	d139      	bne.n	8008534 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d101      	bne.n	80084ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80084ca:	2302      	movs	r3, #2
 80084cc:	e033      	b.n	8008536 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2201      	movs	r2, #1
 80084d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2224      	movs	r2, #36	; 0x24
 80084da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f022 0201 	bic.w	r2, r2, #1
 80084ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80084fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	021b      	lsls	r3, r3, #8
 8008502:	68fa      	ldr	r2, [r7, #12]
 8008504:	4313      	orrs	r3, r2
 8008506:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f042 0201 	orr.w	r2, r2, #1
 800851e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2220      	movs	r2, #32
 8008524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008530:	2300      	movs	r3, #0
 8008532:	e000      	b.n	8008536 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008534:	2302      	movs	r3, #2
  }
}
 8008536:	4618      	mov	r0, r3
 8008538:	3714      	adds	r7, #20
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008542:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008544:	b08f      	sub	sp, #60	; 0x3c
 8008546:	af0a      	add	r7, sp, #40	; 0x28
 8008548:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	d101      	bne.n	8008554 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008550:	2301      	movs	r3, #1
 8008552:	e116      	b.n	8008782 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8008560:	b2db      	uxtb	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	d106      	bne.n	8008574 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f00e fda0 	bl	80170b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2203      	movs	r2, #3
 8008578:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008584:	2b00      	cmp	r3, #0
 8008586:	d102      	bne.n	800858e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4618      	mov	r0, r3
 8008594:	f00a fea5 	bl	80132e2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	603b      	str	r3, [r7, #0]
 800859e:	687e      	ldr	r6, [r7, #4]
 80085a0:	466d      	mov	r5, sp
 80085a2:	f106 0410 	add.w	r4, r6, #16
 80085a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80085a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80085aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80085ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80085ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80085b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80085b6:	1d33      	adds	r3, r6, #4
 80085b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80085ba:	6838      	ldr	r0, [r7, #0]
 80085bc:	f00a fd70 	bl	80130a0 <USB_CoreInit>
 80085c0:	4603      	mov	r3, r0
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d005      	beq.n	80085d2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2202      	movs	r2, #2
 80085ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e0d7      	b.n	8008782 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2100      	movs	r1, #0
 80085d8:	4618      	mov	r0, r3
 80085da:	f00a fe93 	bl	8013304 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80085de:	2300      	movs	r3, #0
 80085e0:	73fb      	strb	r3, [r7, #15]
 80085e2:	e04a      	b.n	800867a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80085e4:	7bfa      	ldrb	r2, [r7, #15]
 80085e6:	6879      	ldr	r1, [r7, #4]
 80085e8:	4613      	mov	r3, r2
 80085ea:	00db      	lsls	r3, r3, #3
 80085ec:	4413      	add	r3, r2
 80085ee:	009b      	lsls	r3, r3, #2
 80085f0:	440b      	add	r3, r1
 80085f2:	333d      	adds	r3, #61	; 0x3d
 80085f4:	2201      	movs	r2, #1
 80085f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80085f8:	7bfa      	ldrb	r2, [r7, #15]
 80085fa:	6879      	ldr	r1, [r7, #4]
 80085fc:	4613      	mov	r3, r2
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	4413      	add	r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	440b      	add	r3, r1
 8008606:	333c      	adds	r3, #60	; 0x3c
 8008608:	7bfa      	ldrb	r2, [r7, #15]
 800860a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800860c:	7bfa      	ldrb	r2, [r7, #15]
 800860e:	7bfb      	ldrb	r3, [r7, #15]
 8008610:	b298      	uxth	r0, r3
 8008612:	6879      	ldr	r1, [r7, #4]
 8008614:	4613      	mov	r3, r2
 8008616:	00db      	lsls	r3, r3, #3
 8008618:	4413      	add	r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	440b      	add	r3, r1
 800861e:	3356      	adds	r3, #86	; 0x56
 8008620:	4602      	mov	r2, r0
 8008622:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008624:	7bfa      	ldrb	r2, [r7, #15]
 8008626:	6879      	ldr	r1, [r7, #4]
 8008628:	4613      	mov	r3, r2
 800862a:	00db      	lsls	r3, r3, #3
 800862c:	4413      	add	r3, r2
 800862e:	009b      	lsls	r3, r3, #2
 8008630:	440b      	add	r3, r1
 8008632:	3340      	adds	r3, #64	; 0x40
 8008634:	2200      	movs	r2, #0
 8008636:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008638:	7bfa      	ldrb	r2, [r7, #15]
 800863a:	6879      	ldr	r1, [r7, #4]
 800863c:	4613      	mov	r3, r2
 800863e:	00db      	lsls	r3, r3, #3
 8008640:	4413      	add	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	440b      	add	r3, r1
 8008646:	3344      	adds	r3, #68	; 0x44
 8008648:	2200      	movs	r2, #0
 800864a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800864c:	7bfa      	ldrb	r2, [r7, #15]
 800864e:	6879      	ldr	r1, [r7, #4]
 8008650:	4613      	mov	r3, r2
 8008652:	00db      	lsls	r3, r3, #3
 8008654:	4413      	add	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	440b      	add	r3, r1
 800865a:	3348      	adds	r3, #72	; 0x48
 800865c:	2200      	movs	r2, #0
 800865e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008660:	7bfa      	ldrb	r2, [r7, #15]
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	4613      	mov	r3, r2
 8008666:	00db      	lsls	r3, r3, #3
 8008668:	4413      	add	r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	440b      	add	r3, r1
 800866e:	334c      	adds	r3, #76	; 0x4c
 8008670:	2200      	movs	r2, #0
 8008672:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008674:	7bfb      	ldrb	r3, [r7, #15]
 8008676:	3301      	adds	r3, #1
 8008678:	73fb      	strb	r3, [r7, #15]
 800867a:	7bfa      	ldrb	r2, [r7, #15]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	429a      	cmp	r2, r3
 8008682:	d3af      	bcc.n	80085e4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008684:	2300      	movs	r3, #0
 8008686:	73fb      	strb	r3, [r7, #15]
 8008688:	e044      	b.n	8008714 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800868a:	7bfa      	ldrb	r2, [r7, #15]
 800868c:	6879      	ldr	r1, [r7, #4]
 800868e:	4613      	mov	r3, r2
 8008690:	00db      	lsls	r3, r3, #3
 8008692:	4413      	add	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	440b      	add	r3, r1
 8008698:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800869c:	2200      	movs	r2, #0
 800869e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80086a0:	7bfa      	ldrb	r2, [r7, #15]
 80086a2:	6879      	ldr	r1, [r7, #4]
 80086a4:	4613      	mov	r3, r2
 80086a6:	00db      	lsls	r3, r3, #3
 80086a8:	4413      	add	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	440b      	add	r3, r1
 80086ae:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80086b2:	7bfa      	ldrb	r2, [r7, #15]
 80086b4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80086b6:	7bfa      	ldrb	r2, [r7, #15]
 80086b8:	6879      	ldr	r1, [r7, #4]
 80086ba:	4613      	mov	r3, r2
 80086bc:	00db      	lsls	r3, r3, #3
 80086be:	4413      	add	r3, r2
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	440b      	add	r3, r1
 80086c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80086c8:	2200      	movs	r2, #0
 80086ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80086cc:	7bfa      	ldrb	r2, [r7, #15]
 80086ce:	6879      	ldr	r1, [r7, #4]
 80086d0:	4613      	mov	r3, r2
 80086d2:	00db      	lsls	r3, r3, #3
 80086d4:	4413      	add	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	440b      	add	r3, r1
 80086da:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80086de:	2200      	movs	r2, #0
 80086e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80086e2:	7bfa      	ldrb	r2, [r7, #15]
 80086e4:	6879      	ldr	r1, [r7, #4]
 80086e6:	4613      	mov	r3, r2
 80086e8:	00db      	lsls	r3, r3, #3
 80086ea:	4413      	add	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	440b      	add	r3, r1
 80086f0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80086f4:	2200      	movs	r2, #0
 80086f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80086f8:	7bfa      	ldrb	r2, [r7, #15]
 80086fa:	6879      	ldr	r1, [r7, #4]
 80086fc:	4613      	mov	r3, r2
 80086fe:	00db      	lsls	r3, r3, #3
 8008700:	4413      	add	r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	440b      	add	r3, r1
 8008706:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800870a:	2200      	movs	r2, #0
 800870c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	3301      	adds	r3, #1
 8008712:	73fb      	strb	r3, [r7, #15]
 8008714:	7bfa      	ldrb	r2, [r7, #15]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	685b      	ldr	r3, [r3, #4]
 800871a:	429a      	cmp	r2, r3
 800871c:	d3b5      	bcc.n	800868a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	603b      	str	r3, [r7, #0]
 8008724:	687e      	ldr	r6, [r7, #4]
 8008726:	466d      	mov	r5, sp
 8008728:	f106 0410 	add.w	r4, r6, #16
 800872c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800872e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008730:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008732:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008734:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008738:	e885 0003 	stmia.w	r5, {r0, r1}
 800873c:	1d33      	adds	r3, r6, #4
 800873e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008740:	6838      	ldr	r0, [r7, #0]
 8008742:	f00a fe2b 	bl	801339c <USB_DevInit>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d005      	beq.n	8008758 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2202      	movs	r2, #2
 8008750:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	e014      	b.n	8008782 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2200      	movs	r2, #0
 800875c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800876c:	2b01      	cmp	r3, #1
 800876e:	d102      	bne.n	8008776 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f001 f96f 	bl	8009a54 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4618      	mov	r0, r3
 800877c:	f00b fe6d 	bl	801445a <USB_DevDisconnect>

  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800878a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800878a:	b580      	push	{r7, lr}
 800878c:	b084      	sub	sp, #16
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800879e:	2b01      	cmp	r3, #1
 80087a0:	d101      	bne.n	80087a6 <HAL_PCD_Start+0x1c>
 80087a2:	2302      	movs	r3, #2
 80087a4:	e022      	b.n	80087ec <HAL_PCD_Start+0x62>
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2201      	movs	r2, #1
 80087aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d109      	bne.n	80087ce <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80087be:	2b01      	cmp	r3, #1
 80087c0:	d105      	bne.n	80087ce <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f00a fd74 	bl	80132c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4618      	mov	r0, r3
 80087de:	f00b fe1b 	bl	8014418 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3710      	adds	r7, #16
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}

080087f4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80087f4:	b590      	push	{r4, r7, lr}
 80087f6:	b08d      	sub	sp, #52	; 0x34
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008802:	6a3b      	ldr	r3, [r7, #32]
 8008804:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4618      	mov	r0, r3
 800880c:	f00b fed9 	bl	80145c2 <USB_GetMode>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	f040 84b7 	bne.w	8009186 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4618      	mov	r0, r3
 800881e:	f00b fe3d 	bl	801449c <USB_ReadInterrupts>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 84ad 	beq.w	8009184 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	0a1b      	lsrs	r3, r3, #8
 8008834:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4618      	mov	r0, r3
 8008844:	f00b fe2a 	bl	801449c <USB_ReadInterrupts>
 8008848:	4603      	mov	r3, r0
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	2b02      	cmp	r3, #2
 8008850:	d107      	bne.n	8008862 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	695a      	ldr	r2, [r3, #20]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f002 0202 	and.w	r2, r2, #2
 8008860:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	4618      	mov	r0, r3
 8008868:	f00b fe18 	bl	801449c <USB_ReadInterrupts>
 800886c:	4603      	mov	r3, r0
 800886e:	f003 0310 	and.w	r3, r3, #16
 8008872:	2b10      	cmp	r3, #16
 8008874:	d161      	bne.n	800893a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	699a      	ldr	r2, [r3, #24]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f022 0210 	bic.w	r2, r2, #16
 8008884:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8008886:	6a3b      	ldr	r3, [r7, #32]
 8008888:	6a1b      	ldr	r3, [r3, #32]
 800888a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	f003 020f 	and.w	r2, r3, #15
 8008892:	4613      	mov	r3, r2
 8008894:	00db      	lsls	r3, r3, #3
 8008896:	4413      	add	r3, r2
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	4413      	add	r3, r2
 80088a2:	3304      	adds	r3, #4
 80088a4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	0c5b      	lsrs	r3, r3, #17
 80088aa:	f003 030f 	and.w	r3, r3, #15
 80088ae:	2b02      	cmp	r3, #2
 80088b0:	d124      	bne.n	80088fc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80088b2:	69ba      	ldr	r2, [r7, #24]
 80088b4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80088b8:	4013      	ands	r3, r2
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d035      	beq.n	800892a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80088c2:	69bb      	ldr	r3, [r7, #24]
 80088c4:	091b      	lsrs	r3, r3, #4
 80088c6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80088c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	461a      	mov	r2, r3
 80088d0:	6a38      	ldr	r0, [r7, #32]
 80088d2:	f00b fc4f 	bl	8014174 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	68da      	ldr	r2, [r3, #12]
 80088da:	69bb      	ldr	r3, [r7, #24]
 80088dc:	091b      	lsrs	r3, r3, #4
 80088de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80088e2:	441a      	add	r2, r3
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	695a      	ldr	r2, [r3, #20]
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	091b      	lsrs	r3, r3, #4
 80088f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80088f4:	441a      	add	r2, r3
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	615a      	str	r2, [r3, #20]
 80088fa:	e016      	b.n	800892a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80088fc:	69bb      	ldr	r3, [r7, #24]
 80088fe:	0c5b      	lsrs	r3, r3, #17
 8008900:	f003 030f 	and.w	r3, r3, #15
 8008904:	2b06      	cmp	r3, #6
 8008906:	d110      	bne.n	800892a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800890e:	2208      	movs	r2, #8
 8008910:	4619      	mov	r1, r3
 8008912:	6a38      	ldr	r0, [r7, #32]
 8008914:	f00b fc2e 	bl	8014174 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	695a      	ldr	r2, [r3, #20]
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	091b      	lsrs	r3, r3, #4
 8008920:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008924:	441a      	add	r2, r3
 8008926:	697b      	ldr	r3, [r7, #20]
 8008928:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	699a      	ldr	r2, [r3, #24]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f042 0210 	orr.w	r2, r2, #16
 8008938:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	4618      	mov	r0, r3
 8008940:	f00b fdac 	bl	801449c <USB_ReadInterrupts>
 8008944:	4603      	mov	r3, r0
 8008946:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800894a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800894e:	f040 80a7 	bne.w	8008aa0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008952:	2300      	movs	r3, #0
 8008954:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4618      	mov	r0, r3
 800895c:	f00b fdb1 	bl	80144c2 <USB_ReadDevAllOutEpInterrupt>
 8008960:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008962:	e099      	b.n	8008a98 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008966:	f003 0301 	and.w	r3, r3, #1
 800896a:	2b00      	cmp	r3, #0
 800896c:	f000 808e 	beq.w	8008a8c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008976:	b2d2      	uxtb	r2, r2
 8008978:	4611      	mov	r1, r2
 800897a:	4618      	mov	r0, r3
 800897c:	f00b fdd5 	bl	801452a <USB_ReadDevOutEPInterrupt>
 8008980:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	f003 0301 	and.w	r3, r3, #1
 8008988:	2b00      	cmp	r3, #0
 800898a:	d00c      	beq.n	80089a6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898e:	015a      	lsls	r2, r3, #5
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	4413      	add	r3, r2
 8008994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008998:	461a      	mov	r2, r3
 800899a:	2301      	movs	r3, #1
 800899c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800899e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fed1 	bl	8009748 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	f003 0308 	and.w	r3, r3, #8
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00c      	beq.n	80089ca <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	015a      	lsls	r2, r3, #5
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	4413      	add	r3, r2
 80089b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089bc:	461a      	mov	r2, r3
 80089be:	2308      	movs	r3, #8
 80089c0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80089c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 ffa7 	bl	8009918 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f003 0310 	and.w	r3, r3, #16
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d008      	beq.n	80089e6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80089d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e0:	461a      	mov	r2, r3
 80089e2:	2310      	movs	r3, #16
 80089e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	f003 0302 	and.w	r3, r3, #2
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d030      	beq.n	8008a52 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	695b      	ldr	r3, [r3, #20]
 80089f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089f8:	2b80      	cmp	r3, #128	; 0x80
 80089fa:	d109      	bne.n	8008a10 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80089fc:	69fb      	ldr	r3, [r7, #28]
 80089fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	69fa      	ldr	r2, [r7, #28]
 8008a06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a0e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008a10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a12:	4613      	mov	r3, r2
 8008a14:	00db      	lsls	r3, r3, #3
 8008a16:	4413      	add	r3, r2
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	4413      	add	r3, r2
 8008a22:	3304      	adds	r3, #4
 8008a24:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	78db      	ldrb	r3, [r3, #3]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d108      	bne.n	8008a40 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	2200      	movs	r2, #0
 8008a32:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f00e fc32 	bl	80172a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	69fb      	ldr	r3, [r7, #28]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	2302      	movs	r3, #2
 8008a50:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	f003 0320 	and.w	r3, r3, #32
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d008      	beq.n	8008a6e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5e:	015a      	lsls	r2, r3, #5
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	4413      	add	r3, r2
 8008a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a68:	461a      	mov	r2, r3
 8008a6a:	2320      	movs	r3, #32
 8008a6c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d009      	beq.n	8008a8c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a7a:	015a      	lsls	r2, r3, #5
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a84:	461a      	mov	r2, r3
 8008a86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008a8a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a8e:	3301      	adds	r3, #1
 8008a90:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a94:	085b      	lsrs	r3, r3, #1
 8008a96:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	f47f af62 	bne.w	8008964 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f00b fcf9 	bl	801449c <USB_ReadInterrupts>
 8008aaa:	4603      	mov	r3, r0
 8008aac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ab0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ab4:	f040 80db 	bne.w	8008c6e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4618      	mov	r0, r3
 8008abe:	f00b fd1a 	bl	80144f6 <USB_ReadDevAllInEpInterrupt>
 8008ac2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008ac8:	e0cd      	b.n	8008c66 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008acc:	f003 0301 	and.w	r3, r3, #1
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f000 80c2 	beq.w	8008c5a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008adc:	b2d2      	uxtb	r2, r2
 8008ade:	4611      	mov	r1, r2
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f00b fd40 	bl	8014566 <USB_ReadDevInEPInterrupt>
 8008ae6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	f003 0301 	and.w	r3, r3, #1
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d057      	beq.n	8008ba2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	f003 030f 	and.w	r3, r3, #15
 8008af8:	2201      	movs	r2, #1
 8008afa:	fa02 f303 	lsl.w	r3, r2, r3
 8008afe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	43db      	mvns	r3, r3
 8008b0c:	69f9      	ldr	r1, [r7, #28]
 8008b0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b12:	4013      	ands	r3, r2
 8008b14:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b18:	015a      	lsls	r2, r3, #5
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	4413      	add	r3, r2
 8008b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b22:	461a      	mov	r2, r3
 8008b24:	2301      	movs	r3, #1
 8008b26:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d132      	bne.n	8008b96 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008b30:	6879      	ldr	r1, [r7, #4]
 8008b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b34:	4613      	mov	r3, r2
 8008b36:	00db      	lsls	r3, r3, #3
 8008b38:	4413      	add	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	440b      	add	r3, r1
 8008b3e:	3348      	adds	r3, #72	; 0x48
 8008b40:	6819      	ldr	r1, [r3, #0]
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b46:	4613      	mov	r3, r2
 8008b48:	00db      	lsls	r3, r3, #3
 8008b4a:	4413      	add	r3, r2
 8008b4c:	009b      	lsls	r3, r3, #2
 8008b4e:	4403      	add	r3, r0
 8008b50:	3344      	adds	r3, #68	; 0x44
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4419      	add	r1, r3
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	00db      	lsls	r3, r3, #3
 8008b5e:	4413      	add	r3, r2
 8008b60:	009b      	lsls	r3, r3, #2
 8008b62:	4403      	add	r3, r0
 8008b64:	3348      	adds	r3, #72	; 0x48
 8008b66:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d113      	bne.n	8008b96 <HAL_PCD_IRQHandler+0x3a2>
 8008b6e:	6879      	ldr	r1, [r7, #4]
 8008b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b72:	4613      	mov	r3, r2
 8008b74:	00db      	lsls	r3, r3, #3
 8008b76:	4413      	add	r3, r2
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	440b      	add	r3, r1
 8008b7c:	334c      	adds	r3, #76	; 0x4c
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d108      	bne.n	8008b96 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6818      	ldr	r0, [r3, #0]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008b8e:	461a      	mov	r2, r3
 8008b90:	2101      	movs	r1, #1
 8008b92:	f00b fd49 	bl	8014628 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f00e fafc 	bl	801719a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	f003 0308 	and.w	r3, r3, #8
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d008      	beq.n	8008bbe <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bae:	015a      	lsls	r2, r3, #5
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb8:	461a      	mov	r2, r3
 8008bba:	2308      	movs	r3, #8
 8008bbc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	f003 0310 	and.w	r3, r3, #16
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d008      	beq.n	8008bda <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	015a      	lsls	r2, r3, #5
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	4413      	add	r3, r2
 8008bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	2310      	movs	r3, #16
 8008bd8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d008      	beq.n	8008bf6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	015a      	lsls	r2, r3, #5
 8008be8:	69fb      	ldr	r3, [r7, #28]
 8008bea:	4413      	add	r3, r2
 8008bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	2340      	movs	r3, #64	; 0x40
 8008bf4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	f003 0302 	and.w	r3, r3, #2
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d023      	beq.n	8008c48 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8008c00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c02:	6a38      	ldr	r0, [r7, #32]
 8008c04:	f00a fd28 	bl	8013658 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8008c08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	00db      	lsls	r3, r3, #3
 8008c0e:	4413      	add	r3, r2
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	3338      	adds	r3, #56	; 0x38
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	4413      	add	r3, r2
 8008c18:	3304      	adds	r3, #4
 8008c1a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	78db      	ldrb	r3, [r3, #3]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d108      	bne.n	8008c36 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	2200      	movs	r2, #0
 8008c28:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	4619      	mov	r1, r3
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f00e fb49 	bl	80172c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c38:	015a      	lsls	r2, r3, #5
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c42:	461a      	mov	r2, r3
 8008c44:	2302      	movs	r3, #2
 8008c46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008c52:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 fcea 	bl	800962e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c62:	085b      	lsrs	r3, r3, #1
 8008c64:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	f47f af2e 	bne.w	8008aca <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f00b fc12 	bl	801449c <USB_ReadInterrupts>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c82:	d122      	bne.n	8008cca <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	69fa      	ldr	r2, [r7, #28]
 8008c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c92:	f023 0301 	bic.w	r3, r3, #1
 8008c96:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008c9e:	2b01      	cmp	r3, #1
 8008ca0:	d108      	bne.n	8008cb4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008caa:	2100      	movs	r1, #0
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fef5 	bl	8009a9c <HAL_PCDEx_LPM_Callback>
 8008cb2:	e002      	b.n	8008cba <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008cb4:	6878      	ldr	r0, [r7, #4]
 8008cb6:	f00e fae7 	bl	8017288 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	695a      	ldr	r2, [r3, #20]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008cc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f00b fbe4 	bl	801449c <USB_ReadInterrupts>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cde:	d112      	bne.n	8008d06 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	f003 0301 	and.w	r3, r3, #1
 8008cec:	2b01      	cmp	r3, #1
 8008cee:	d102      	bne.n	8008cf6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f00e faa3 	bl	801723c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	695a      	ldr	r2, [r3, #20]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f00b fbc6 	bl	801449c <USB_ReadInterrupts>
 8008d10:	4603      	mov	r3, r0
 8008d12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d1a:	d121      	bne.n	8008d60 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	695a      	ldr	r2, [r3, #20]
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8008d2a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d111      	bne.n	8008d5a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d44:	089b      	lsrs	r3, r3, #2
 8008d46:	f003 020f 	and.w	r2, r3, #15
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008d50:	2101      	movs	r1, #1
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 fea2 	bl	8009a9c <HAL_PCDEx_LPM_Callback>
 8008d58:	e002      	b.n	8008d60 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f00e fa6e 	bl	801723c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4618      	mov	r0, r3
 8008d66:	f00b fb99 	bl	801449c <USB_ReadInterrupts>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d74:	f040 80b7 	bne.w	8008ee6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	69fa      	ldr	r2, [r7, #28]
 8008d82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d86:	f023 0301 	bic.w	r3, r3, #1
 8008d8a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2110      	movs	r1, #16
 8008d92:	4618      	mov	r0, r3
 8008d94:	f00a fc60 	bl	8013658 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d98:	2300      	movs	r3, #0
 8008d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d9c:	e046      	b.n	8008e2c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008da0:	015a      	lsls	r2, r3, #5
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	4413      	add	r3, r2
 8008da6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008daa:	461a      	mov	r2, r3
 8008dac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008db0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db4:	015a      	lsls	r2, r3, #5
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	4413      	add	r3, r2
 8008dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008dc2:	0151      	lsls	r1, r2, #5
 8008dc4:	69fa      	ldr	r2, [r7, #28]
 8008dc6:	440a      	add	r2, r1
 8008dc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dcc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008dd0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dd4:	015a      	lsls	r2, r3, #5
 8008dd6:	69fb      	ldr	r3, [r7, #28]
 8008dd8:	4413      	add	r3, r2
 8008dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dde:	461a      	mov	r2, r3
 8008de0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008de4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008de8:	015a      	lsls	r2, r3, #5
 8008dea:	69fb      	ldr	r3, [r7, #28]
 8008dec:	4413      	add	r3, r2
 8008dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008df6:	0151      	lsls	r1, r2, #5
 8008df8:	69fa      	ldr	r2, [r7, #28]
 8008dfa:	440a      	add	r2, r1
 8008dfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e08:	015a      	lsls	r2, r3, #5
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e16:	0151      	lsls	r1, r2, #5
 8008e18:	69fa      	ldr	r2, [r7, #28]
 8008e1a:	440a      	add	r2, r1
 8008e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008e24:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e28:	3301      	adds	r3, #1
 8008e2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d3b3      	bcc.n	8008d9e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e3c:	69db      	ldr	r3, [r3, #28]
 8008e3e:	69fa      	ldr	r2, [r7, #28]
 8008e40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e44:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008e48:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d016      	beq.n	8008e80 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008e52:	69fb      	ldr	r3, [r7, #28]
 8008e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e5c:	69fa      	ldr	r2, [r7, #28]
 8008e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e62:	f043 030b 	orr.w	r3, r3, #11
 8008e66:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008e6a:	69fb      	ldr	r3, [r7, #28]
 8008e6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e72:	69fa      	ldr	r2, [r7, #28]
 8008e74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e78:	f043 030b 	orr.w	r3, r3, #11
 8008e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8008e7e:	e015      	b.n	8008eac <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e86:	695a      	ldr	r2, [r3, #20]
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e8e:	4619      	mov	r1, r3
 8008e90:	f242 032b 	movw	r3, #8235	; 0x202b
 8008e94:	4313      	orrs	r3, r2
 8008e96:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	69fa      	ldr	r2, [r7, #28]
 8008ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ea6:	f043 030b 	orr.w	r3, r3, #11
 8008eaa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	69fa      	ldr	r2, [r7, #28]
 8008eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008eba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008ebe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6818      	ldr	r0, [r3, #0]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	f00b fba9 	bl	8014628 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	695a      	ldr	r2, [r3, #20]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008ee4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4618      	mov	r0, r3
 8008eec:	f00b fad6 	bl	801449c <USB_ReadInterrupts>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ef6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008efa:	d124      	bne.n	8008f46 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f00b fb6d 	bl	80145e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f00a fc21 	bl	8013752 <USB_GetDevSpeed>
 8008f10:	4603      	mov	r3, r0
 8008f12:	461a      	mov	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681c      	ldr	r4, [r3, #0]
 8008f1c:	f001 fd88 	bl	800aa30 <HAL_RCC_GetHCLKFreq>
 8008f20:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	461a      	mov	r2, r3
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f00a f926 	bl	801317c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f00e f95a 	bl	80171ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	695a      	ldr	r2, [r3, #20]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008f44:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f00b faa6 	bl	801449c <USB_ReadInterrupts>
 8008f50:	4603      	mov	r3, r0
 8008f52:	f003 0308 	and.w	r3, r3, #8
 8008f56:	2b08      	cmp	r3, #8
 8008f58:	d10a      	bne.n	8008f70 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f00e f937 	bl	80171ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	695a      	ldr	r2, [r3, #20]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f002 0208 	and.w	r2, r2, #8
 8008f6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f00b fa91 	bl	801449c <USB_ReadInterrupts>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f80:	2b80      	cmp	r3, #128	; 0x80
 8008f82:	d122      	bne.n	8008fca <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008f84:	6a3b      	ldr	r3, [r7, #32]
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008f90:	2301      	movs	r3, #1
 8008f92:	627b      	str	r3, [r7, #36]	; 0x24
 8008f94:	e014      	b.n	8008fc0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008f96:	6879      	ldr	r1, [r7, #4]
 8008f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	00db      	lsls	r3, r3, #3
 8008f9e:	4413      	add	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	440b      	add	r3, r1
 8008fa4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8008fa8:	781b      	ldrb	r3, [r3, #0]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d105      	bne.n	8008fba <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f000 fb09 	bl	80095cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fbc:	3301      	adds	r3, #1
 8008fbe:	627b      	str	r3, [r7, #36]	; 0x24
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d3e5      	bcc.n	8008f96 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f00b fa64 	bl	801449c <USB_ReadInterrupts>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fde:	d13b      	bne.n	8009058 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	627b      	str	r3, [r7, #36]	; 0x24
 8008fe4:	e02b      	b.n	800903e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8008fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe8:	015a      	lsls	r2, r3, #5
 8008fea:	69fb      	ldr	r3, [r7, #28]
 8008fec:	4413      	add	r3, r2
 8008fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008ff6:	6879      	ldr	r1, [r7, #4]
 8008ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	00db      	lsls	r3, r3, #3
 8008ffe:	4413      	add	r3, r2
 8009000:	009b      	lsls	r3, r3, #2
 8009002:	440b      	add	r3, r1
 8009004:	3340      	adds	r3, #64	; 0x40
 8009006:	781b      	ldrb	r3, [r3, #0]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d115      	bne.n	8009038 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800900c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800900e:	2b00      	cmp	r3, #0
 8009010:	da12      	bge.n	8009038 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009012:	6879      	ldr	r1, [r7, #4]
 8009014:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009016:	4613      	mov	r3, r2
 8009018:	00db      	lsls	r3, r3, #3
 800901a:	4413      	add	r3, r2
 800901c:	009b      	lsls	r3, r3, #2
 800901e:	440b      	add	r3, r1
 8009020:	333f      	adds	r3, #63	; 0x3f
 8009022:	2201      	movs	r2, #1
 8009024:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009028:	b2db      	uxtb	r3, r3
 800902a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800902e:	b2db      	uxtb	r3, r3
 8009030:	4619      	mov	r1, r3
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f000 faca 	bl	80095cc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800903a:	3301      	adds	r3, #1
 800903c:	627b      	str	r3, [r7, #36]	; 0x24
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009044:	429a      	cmp	r2, r3
 8009046:	d3ce      	bcc.n	8008fe6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	695a      	ldr	r2, [r3, #20]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8009056:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4618      	mov	r0, r3
 800905e:	f00b fa1d 	bl	801449c <USB_ReadInterrupts>
 8009062:	4603      	mov	r3, r0
 8009064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009068:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800906c:	d155      	bne.n	800911a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800906e:	2301      	movs	r3, #1
 8009070:	627b      	str	r3, [r7, #36]	; 0x24
 8009072:	e045      	b.n	8009100 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009076:	015a      	lsls	r2, r3, #5
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	4413      	add	r3, r2
 800907c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009084:	6879      	ldr	r1, [r7, #4]
 8009086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009088:	4613      	mov	r3, r2
 800908a:	00db      	lsls	r3, r3, #3
 800908c:	4413      	add	r3, r2
 800908e:	009b      	lsls	r3, r3, #2
 8009090:	440b      	add	r3, r1
 8009092:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d12e      	bne.n	80090fa <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800909c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800909e:	2b00      	cmp	r3, #0
 80090a0:	da2b      	bge.n	80090fa <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80090a2:	69bb      	ldr	r3, [r7, #24]
 80090a4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80090ae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d121      	bne.n	80090fa <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80090b6:	6879      	ldr	r1, [r7, #4]
 80090b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090ba:	4613      	mov	r3, r2
 80090bc:	00db      	lsls	r3, r3, #3
 80090be:	4413      	add	r3, r2
 80090c0:	009b      	lsls	r3, r3, #2
 80090c2:	440b      	add	r3, r1
 80090c4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80090c8:	2201      	movs	r2, #1
 80090ca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80090cc:	6a3b      	ldr	r3, [r7, #32]
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80090d4:	6a3b      	ldr	r3, [r7, #32]
 80090d6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80090d8:	6a3b      	ldr	r3, [r7, #32]
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d10a      	bne.n	80090fa <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	69fa      	ldr	r2, [r7, #28]
 80090ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80090f6:	6053      	str	r3, [r2, #4]
            break;
 80090f8:	e007      	b.n	800910a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	3301      	adds	r3, #1
 80090fe:	627b      	str	r3, [r7, #36]	; 0x24
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	685b      	ldr	r3, [r3, #4]
 8009104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009106:	429a      	cmp	r2, r3
 8009108:	d3b4      	bcc.n	8009074 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	695a      	ldr	r2, [r3, #20]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009118:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	4618      	mov	r0, r3
 8009120:	f00b f9bc 	bl	801449c <USB_ReadInterrupts>
 8009124:	4603      	mov	r3, r0
 8009126:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800912a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800912e:	d10a      	bne.n	8009146 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f00e f8db 	bl	80172ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	695a      	ldr	r2, [r3, #20]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009144:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4618      	mov	r0, r3
 800914c:	f00b f9a6 	bl	801449c <USB_ReadInterrupts>
 8009150:	4603      	mov	r3, r0
 8009152:	f003 0304 	and.w	r3, r3, #4
 8009156:	2b04      	cmp	r3, #4
 8009158:	d115      	bne.n	8009186 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	f003 0304 	and.w	r3, r3, #4
 8009168:	2b00      	cmp	r3, #0
 800916a:	d002      	beq.n	8009172 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f00e f8cb 	bl	8017308 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	6859      	ldr	r1, [r3, #4]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	69ba      	ldr	r2, [r7, #24]
 800917e:	430a      	orrs	r2, r1
 8009180:	605a      	str	r2, [r3, #4]
 8009182:	e000      	b.n	8009186 <HAL_PCD_IRQHandler+0x992>
      return;
 8009184:	bf00      	nop
    }
  }
}
 8009186:	3734      	adds	r7, #52	; 0x34
 8009188:	46bd      	mov	sp, r7
 800918a:	bd90      	pop	{r4, r7, pc}

0800918c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b082      	sub	sp, #8
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	460b      	mov	r3, r1
 8009196:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d101      	bne.n	80091a6 <HAL_PCD_SetAddress+0x1a>
 80091a2:	2302      	movs	r3, #2
 80091a4:	e013      	b.n	80091ce <HAL_PCD_SetAddress+0x42>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2201      	movs	r2, #1
 80091aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	78fa      	ldrb	r2, [r7, #3]
 80091b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	78fa      	ldrb	r2, [r7, #3]
 80091bc:	4611      	mov	r1, r2
 80091be:	4618      	mov	r0, r3
 80091c0:	f00b f904 	bl	80143cc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3708      	adds	r7, #8
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}

080091d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80091d6:	b580      	push	{r7, lr}
 80091d8:	b084      	sub	sp, #16
 80091da:	af00      	add	r7, sp, #0
 80091dc:	6078      	str	r0, [r7, #4]
 80091de:	4608      	mov	r0, r1
 80091e0:	4611      	mov	r1, r2
 80091e2:	461a      	mov	r2, r3
 80091e4:	4603      	mov	r3, r0
 80091e6:	70fb      	strb	r3, [r7, #3]
 80091e8:	460b      	mov	r3, r1
 80091ea:	803b      	strh	r3, [r7, #0]
 80091ec:	4613      	mov	r3, r2
 80091ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80091f0:	2300      	movs	r3, #0
 80091f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80091f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	da0f      	bge.n	800921c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091fc:	78fb      	ldrb	r3, [r7, #3]
 80091fe:	f003 020f 	and.w	r2, r3, #15
 8009202:	4613      	mov	r3, r2
 8009204:	00db      	lsls	r3, r3, #3
 8009206:	4413      	add	r3, r2
 8009208:	009b      	lsls	r3, r3, #2
 800920a:	3338      	adds	r3, #56	; 0x38
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	4413      	add	r3, r2
 8009210:	3304      	adds	r3, #4
 8009212:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2201      	movs	r2, #1
 8009218:	705a      	strb	r2, [r3, #1]
 800921a:	e00f      	b.n	800923c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800921c:	78fb      	ldrb	r3, [r7, #3]
 800921e:	f003 020f 	and.w	r2, r3, #15
 8009222:	4613      	mov	r3, r2
 8009224:	00db      	lsls	r3, r3, #3
 8009226:	4413      	add	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	4413      	add	r3, r2
 8009232:	3304      	adds	r3, #4
 8009234:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2200      	movs	r2, #0
 800923a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800923c:	78fb      	ldrb	r3, [r7, #3]
 800923e:	f003 030f 	and.w	r3, r3, #15
 8009242:	b2da      	uxtb	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009248:	883a      	ldrh	r2, [r7, #0]
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	78ba      	ldrb	r2, [r7, #2]
 8009252:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	785b      	ldrb	r3, [r3, #1]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d004      	beq.n	8009266 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	b29a      	uxth	r2, r3
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009266:	78bb      	ldrb	r3, [r7, #2]
 8009268:	2b02      	cmp	r3, #2
 800926a:	d102      	bne.n	8009272 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2200      	movs	r2, #0
 8009270:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8009278:	2b01      	cmp	r3, #1
 800927a:	d101      	bne.n	8009280 <HAL_PCD_EP_Open+0xaa>
 800927c:	2302      	movs	r3, #2
 800927e:	e00e      	b.n	800929e <HAL_PCD_EP_Open+0xc8>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68f9      	ldr	r1, [r7, #12]
 800928e:	4618      	mov	r0, r3
 8009290:	f00a fa84 	bl	801379c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800929c:	7afb      	ldrb	r3, [r7, #11]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}

080092a6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80092a6:	b580      	push	{r7, lr}
 80092a8:	b084      	sub	sp, #16
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	6078      	str	r0, [r7, #4]
 80092ae:	460b      	mov	r3, r1
 80092b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80092b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	da0f      	bge.n	80092da <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80092ba:	78fb      	ldrb	r3, [r7, #3]
 80092bc:	f003 020f 	and.w	r2, r3, #15
 80092c0:	4613      	mov	r3, r2
 80092c2:	00db      	lsls	r3, r3, #3
 80092c4:	4413      	add	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	3338      	adds	r3, #56	; 0x38
 80092ca:	687a      	ldr	r2, [r7, #4]
 80092cc:	4413      	add	r3, r2
 80092ce:	3304      	adds	r3, #4
 80092d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	705a      	strb	r2, [r3, #1]
 80092d8:	e00f      	b.n	80092fa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092da:	78fb      	ldrb	r3, [r7, #3]
 80092dc:	f003 020f 	and.w	r2, r3, #15
 80092e0:	4613      	mov	r3, r2
 80092e2:	00db      	lsls	r3, r3, #3
 80092e4:	4413      	add	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80092ec:	687a      	ldr	r2, [r7, #4]
 80092ee:	4413      	add	r3, r2
 80092f0:	3304      	adds	r3, #4
 80092f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	2200      	movs	r2, #0
 80092f8:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80092fa:	78fb      	ldrb	r3, [r7, #3]
 80092fc:	f003 030f 	and.w	r3, r3, #15
 8009300:	b2da      	uxtb	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800930c:	2b01      	cmp	r3, #1
 800930e:	d101      	bne.n	8009314 <HAL_PCD_EP_Close+0x6e>
 8009310:	2302      	movs	r3, #2
 8009312:	e00e      	b.n	8009332 <HAL_PCD_EP_Close+0x8c>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	68f9      	ldr	r1, [r7, #12]
 8009322:	4618      	mov	r0, r3
 8009324:	f00a fac2 	bl	80138ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8009330:	2300      	movs	r3, #0
}
 8009332:	4618      	mov	r0, r3
 8009334:	3710      	adds	r7, #16
 8009336:	46bd      	mov	sp, r7
 8009338:	bd80      	pop	{r7, pc}

0800933a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800933a:	b580      	push	{r7, lr}
 800933c:	b086      	sub	sp, #24
 800933e:	af00      	add	r7, sp, #0
 8009340:	60f8      	str	r0, [r7, #12]
 8009342:	607a      	str	r2, [r7, #4]
 8009344:	603b      	str	r3, [r7, #0]
 8009346:	460b      	mov	r3, r1
 8009348:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800934a:	7afb      	ldrb	r3, [r7, #11]
 800934c:	f003 020f 	and.w	r2, r3, #15
 8009350:	4613      	mov	r3, r2
 8009352:	00db      	lsls	r3, r3, #3
 8009354:	4413      	add	r3, r2
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800935c:	68fa      	ldr	r2, [r7, #12]
 800935e:	4413      	add	r3, r2
 8009360:	3304      	adds	r3, #4
 8009362:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	687a      	ldr	r2, [r7, #4]
 8009368:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	683a      	ldr	r2, [r7, #0]
 800936e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009370:	697b      	ldr	r3, [r7, #20]
 8009372:	2200      	movs	r2, #0
 8009374:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	2200      	movs	r2, #0
 800937a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800937c:	7afb      	ldrb	r3, [r7, #11]
 800937e:	f003 030f 	and.w	r3, r3, #15
 8009382:	b2da      	uxtb	r2, r3
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	2b01      	cmp	r3, #1
 800938e:	d102      	bne.n	8009396 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009390:	687a      	ldr	r2, [r7, #4]
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6818      	ldr	r0, [r3, #0]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	461a      	mov	r2, r3
 80093a2:	6979      	ldr	r1, [r7, #20]
 80093a4:	f00a fb5e 	bl	8013a64 <USB_EPStartXfer>

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b083      	sub	sp, #12
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	460b      	mov	r3, r1
 80093bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80093be:	78fb      	ldrb	r3, [r7, #3]
 80093c0:	f003 020f 	and.w	r2, r3, #15
 80093c4:	6879      	ldr	r1, [r7, #4]
 80093c6:	4613      	mov	r3, r2
 80093c8:	00db      	lsls	r3, r3, #3
 80093ca:	4413      	add	r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	440b      	add	r3, r1
 80093d0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80093d4:	681b      	ldr	r3, [r3, #0]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b086      	sub	sp, #24
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	60f8      	str	r0, [r7, #12]
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	603b      	str	r3, [r7, #0]
 80093ee:	460b      	mov	r3, r1
 80093f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093f2:	7afb      	ldrb	r3, [r7, #11]
 80093f4:	f003 020f 	and.w	r2, r3, #15
 80093f8:	4613      	mov	r3, r2
 80093fa:	00db      	lsls	r3, r3, #3
 80093fc:	4413      	add	r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	3338      	adds	r3, #56	; 0x38
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	4413      	add	r3, r2
 8009406:	3304      	adds	r3, #4
 8009408:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	2200      	movs	r2, #0
 800941a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	2201      	movs	r2, #1
 8009420:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009422:	7afb      	ldrb	r3, [r7, #11]
 8009424:	f003 030f 	and.w	r3, r3, #15
 8009428:	b2da      	uxtb	r2, r3
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	68db      	ldr	r3, [r3, #12]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d102      	bne.n	800943c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	6818      	ldr	r0, [r3, #0]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	68db      	ldr	r3, [r3, #12]
 8009444:	b2db      	uxtb	r3, r3
 8009446:	461a      	mov	r2, r3
 8009448:	6979      	ldr	r1, [r7, #20]
 800944a:	f00a fb0b 	bl	8013a64 <USB_EPStartXfer>

  return HAL_OK;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3718      	adds	r7, #24
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	460b      	mov	r3, r1
 8009462:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009464:	78fb      	ldrb	r3, [r7, #3]
 8009466:	f003 020f 	and.w	r2, r3, #15
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	429a      	cmp	r2, r3
 8009470:	d901      	bls.n	8009476 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e050      	b.n	8009518 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009476:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800947a:	2b00      	cmp	r3, #0
 800947c:	da0f      	bge.n	800949e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800947e:	78fb      	ldrb	r3, [r7, #3]
 8009480:	f003 020f 	and.w	r2, r3, #15
 8009484:	4613      	mov	r3, r2
 8009486:	00db      	lsls	r3, r3, #3
 8009488:	4413      	add	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	3338      	adds	r3, #56	; 0x38
 800948e:	687a      	ldr	r2, [r7, #4]
 8009490:	4413      	add	r3, r2
 8009492:	3304      	adds	r3, #4
 8009494:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	2201      	movs	r2, #1
 800949a:	705a      	strb	r2, [r3, #1]
 800949c:	e00d      	b.n	80094ba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800949e:	78fa      	ldrb	r2, [r7, #3]
 80094a0:	4613      	mov	r3, r2
 80094a2:	00db      	lsls	r3, r3, #3
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	4413      	add	r3, r2
 80094b0:	3304      	adds	r3, #4
 80094b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2201      	movs	r2, #1
 80094be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80094c0:	78fb      	ldrb	r3, [r7, #3]
 80094c2:	f003 030f 	and.w	r3, r3, #15
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80094d2:	2b01      	cmp	r3, #1
 80094d4:	d101      	bne.n	80094da <HAL_PCD_EP_SetStall+0x82>
 80094d6:	2302      	movs	r3, #2
 80094d8:	e01e      	b.n	8009518 <HAL_PCD_EP_SetStall+0xc0>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2201      	movs	r2, #1
 80094de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68f9      	ldr	r1, [r7, #12]
 80094e8:	4618      	mov	r0, r3
 80094ea:	f00a fe9b 	bl	8014224 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80094ee:	78fb      	ldrb	r3, [r7, #3]
 80094f0:	f003 030f 	and.w	r3, r3, #15
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10a      	bne.n	800950e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6818      	ldr	r0, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	b2d9      	uxtb	r1, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009508:	461a      	mov	r2, r3
 800950a:	f00b f88d 	bl	8014628 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8009516:	2300      	movs	r3, #0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
 8009528:	460b      	mov	r3, r1
 800952a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800952c:	78fb      	ldrb	r3, [r7, #3]
 800952e:	f003 020f 	and.w	r2, r3, #15
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	685b      	ldr	r3, [r3, #4]
 8009536:	429a      	cmp	r2, r3
 8009538:	d901      	bls.n	800953e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e042      	b.n	80095c4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800953e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009542:	2b00      	cmp	r3, #0
 8009544:	da0f      	bge.n	8009566 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009546:	78fb      	ldrb	r3, [r7, #3]
 8009548:	f003 020f 	and.w	r2, r3, #15
 800954c:	4613      	mov	r3, r2
 800954e:	00db      	lsls	r3, r3, #3
 8009550:	4413      	add	r3, r2
 8009552:	009b      	lsls	r3, r3, #2
 8009554:	3338      	adds	r3, #56	; 0x38
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	4413      	add	r3, r2
 800955a:	3304      	adds	r3, #4
 800955c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2201      	movs	r2, #1
 8009562:	705a      	strb	r2, [r3, #1]
 8009564:	e00f      	b.n	8009586 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009566:	78fb      	ldrb	r3, [r7, #3]
 8009568:	f003 020f 	and.w	r2, r3, #15
 800956c:	4613      	mov	r3, r2
 800956e:	00db      	lsls	r3, r3, #3
 8009570:	4413      	add	r3, r2
 8009572:	009b      	lsls	r3, r3, #2
 8009574:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009578:	687a      	ldr	r2, [r7, #4]
 800957a:	4413      	add	r3, r2
 800957c:	3304      	adds	r3, #4
 800957e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2200      	movs	r2, #0
 8009584:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2200      	movs	r2, #0
 800958a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800958c:	78fb      	ldrb	r3, [r7, #3]
 800958e:	f003 030f 	and.w	r3, r3, #15
 8009592:	b2da      	uxtb	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d101      	bne.n	80095a6 <HAL_PCD_EP_ClrStall+0x86>
 80095a2:	2302      	movs	r3, #2
 80095a4:	e00e      	b.n	80095c4 <HAL_PCD_EP_ClrStall+0xa4>
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2201      	movs	r2, #1
 80095aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	68f9      	ldr	r1, [r7, #12]
 80095b4:	4618      	mov	r0, r3
 80095b6:	f00a fea3 	bl	8014300 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	460b      	mov	r3, r1
 80095d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80095d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	da0c      	bge.n	80095fa <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80095e0:	78fb      	ldrb	r3, [r7, #3]
 80095e2:	f003 020f 	and.w	r2, r3, #15
 80095e6:	4613      	mov	r3, r2
 80095e8:	00db      	lsls	r3, r3, #3
 80095ea:	4413      	add	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	3338      	adds	r3, #56	; 0x38
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	4413      	add	r3, r2
 80095f4:	3304      	adds	r3, #4
 80095f6:	60fb      	str	r3, [r7, #12]
 80095f8:	e00c      	b.n	8009614 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80095fa:	78fb      	ldrb	r3, [r7, #3]
 80095fc:	f003 020f 	and.w	r2, r3, #15
 8009600:	4613      	mov	r3, r2
 8009602:	00db      	lsls	r3, r3, #3
 8009604:	4413      	add	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	4413      	add	r3, r2
 8009610:	3304      	adds	r3, #4
 8009612:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68f9      	ldr	r1, [r7, #12]
 800961a:	4618      	mov	r0, r3
 800961c:	f00a fcc2 	bl	8013fa4 <USB_EPStopXfer>
 8009620:	4603      	mov	r3, r0
 8009622:	72fb      	strb	r3, [r7, #11]

  return ret;
 8009624:	7afb      	ldrb	r3, [r7, #11]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b08a      	sub	sp, #40	; 0x28
 8009632:	af02      	add	r7, sp, #8
 8009634:	6078      	str	r0, [r7, #4]
 8009636:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009642:	683a      	ldr	r2, [r7, #0]
 8009644:	4613      	mov	r3, r2
 8009646:	00db      	lsls	r3, r3, #3
 8009648:	4413      	add	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	3338      	adds	r3, #56	; 0x38
 800964e:	687a      	ldr	r2, [r7, #4]
 8009650:	4413      	add	r3, r2
 8009652:	3304      	adds	r3, #4
 8009654:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	695a      	ldr	r2, [r3, #20]
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	429a      	cmp	r2, r3
 8009660:	d901      	bls.n	8009666 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e06c      	b.n	8009740 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	691a      	ldr	r2, [r3, #16]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	69fa      	ldr	r2, [r7, #28]
 8009678:	429a      	cmp	r2, r3
 800967a:	d902      	bls.n	8009682 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	3303      	adds	r3, #3
 8009686:	089b      	lsrs	r3, r3, #2
 8009688:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800968a:	e02b      	b.n	80096e4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	691a      	ldr	r2, [r3, #16]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	695b      	ldr	r3, [r3, #20]
 8009694:	1ad3      	subs	r3, r2, r3
 8009696:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	69fa      	ldr	r2, [r7, #28]
 800969e:	429a      	cmp	r2, r3
 80096a0:	d902      	bls.n	80096a8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	3303      	adds	r3, #3
 80096ac:	089b      	lsrs	r3, r3, #2
 80096ae:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	68d9      	ldr	r1, [r3, #12]
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	b2da      	uxtb	r2, r3
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80096c0:	b2db      	uxtb	r3, r3
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	4603      	mov	r3, r0
 80096c6:	6978      	ldr	r0, [r7, #20]
 80096c8:	f00a fd16 	bl	80140f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	68da      	ldr	r2, [r3, #12]
 80096d0:	69fb      	ldr	r3, [r7, #28]
 80096d2:	441a      	add	r2, r3
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	695a      	ldr	r2, [r3, #20]
 80096dc:	69fb      	ldr	r3, [r7, #28]
 80096de:	441a      	add	r2, r3
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	015a      	lsls	r2, r3, #5
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	4413      	add	r3, r2
 80096ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f0:	699b      	ldr	r3, [r3, #24]
 80096f2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80096f4:	69ba      	ldr	r2, [r7, #24]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d809      	bhi.n	800970e <PCD_WriteEmptyTxFifo+0xe0>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	695a      	ldr	r2, [r3, #20]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009702:	429a      	cmp	r2, r3
 8009704:	d203      	bcs.n	800970e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d1be      	bne.n	800968c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	691a      	ldr	r2, [r3, #16]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	695b      	ldr	r3, [r3, #20]
 8009716:	429a      	cmp	r2, r3
 8009718:	d811      	bhi.n	800973e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800971a:	683b      	ldr	r3, [r7, #0]
 800971c:	f003 030f 	and.w	r3, r3, #15
 8009720:	2201      	movs	r2, #1
 8009722:	fa02 f303 	lsl.w	r3, r2, r3
 8009726:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800972e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	43db      	mvns	r3, r3
 8009734:	6939      	ldr	r1, [r7, #16]
 8009736:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800973a:	4013      	ands	r3, r2
 800973c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800973e:	2300      	movs	r3, #0
}
 8009740:	4618      	mov	r0, r3
 8009742:	3720      	adds	r7, #32
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b088      	sub	sp, #32
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
 8009750:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	333c      	adds	r3, #60	; 0x3c
 8009760:	3304      	adds	r3, #4
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	015a      	lsls	r2, r3, #5
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	4413      	add	r3, r2
 800976e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	68db      	ldr	r3, [r3, #12]
 800977a:	2b01      	cmp	r3, #1
 800977c:	d17b      	bne.n	8009876 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	f003 0308 	and.w	r3, r3, #8
 8009784:	2b00      	cmp	r3, #0
 8009786:	d015      	beq.n	80097b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	4a61      	ldr	r2, [pc, #388]	; (8009910 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800978c:	4293      	cmp	r3, r2
 800978e:	f240 80b9 	bls.w	8009904 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009798:	2b00      	cmp	r3, #0
 800979a:	f000 80b3 	beq.w	8009904 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	015a      	lsls	r2, r3, #5
 80097a2:	69bb      	ldr	r3, [r7, #24]
 80097a4:	4413      	add	r3, r2
 80097a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097aa:	461a      	mov	r2, r3
 80097ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097b0:	6093      	str	r3, [r2, #8]
 80097b2:	e0a7      	b.n	8009904 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	f003 0320 	and.w	r3, r3, #32
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d009      	beq.n	80097d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	015a      	lsls	r2, r3, #5
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	4413      	add	r3, r2
 80097c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ca:	461a      	mov	r2, r3
 80097cc:	2320      	movs	r3, #32
 80097ce:	6093      	str	r3, [r2, #8]
 80097d0:	e098      	b.n	8009904 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f040 8093 	bne.w	8009904 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	4a4b      	ldr	r2, [pc, #300]	; (8009910 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d90f      	bls.n	8009806 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00a      	beq.n	8009806 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	015a      	lsls	r2, r3, #5
 80097f4:	69bb      	ldr	r3, [r7, #24]
 80097f6:	4413      	add	r3, r2
 80097f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fc:	461a      	mov	r2, r3
 80097fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009802:	6093      	str	r3, [r2, #8]
 8009804:	e07e      	b.n	8009904 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8009806:	683a      	ldr	r2, [r7, #0]
 8009808:	4613      	mov	r3, r2
 800980a:	00db      	lsls	r3, r3, #3
 800980c:	4413      	add	r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8009814:	687a      	ldr	r2, [r7, #4]
 8009816:	4413      	add	r3, r2
 8009818:	3304      	adds	r3, #4
 800981a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	6a1a      	ldr	r2, [r3, #32]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	0159      	lsls	r1, r3, #5
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	440b      	add	r3, r1
 8009828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800982c:	691b      	ldr	r3, [r3, #16]
 800982e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009832:	1ad2      	subs	r2, r2, r3
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d114      	bne.n	8009868 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	691b      	ldr	r3, [r3, #16]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d109      	bne.n	800985a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6818      	ldr	r0, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009850:	461a      	mov	r2, r3
 8009852:	2101      	movs	r1, #1
 8009854:	f00a fee8 	bl	8014628 <USB_EP0_OutStart>
 8009858:	e006      	b.n	8009868 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	68da      	ldr	r2, [r3, #12]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	695b      	ldr	r3, [r3, #20]
 8009862:	441a      	add	r2, r3
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	b2db      	uxtb	r3, r3
 800986c:	4619      	mov	r1, r3
 800986e:	6878      	ldr	r0, [r7, #4]
 8009870:	f00d fc78 	bl	8017164 <HAL_PCD_DataOutStageCallback>
 8009874:	e046      	b.n	8009904 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	4a26      	ldr	r2, [pc, #152]	; (8009914 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d124      	bne.n	80098c8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00a      	beq.n	800989e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	015a      	lsls	r2, r3, #5
 800988c:	69bb      	ldr	r3, [r7, #24]
 800988e:	4413      	add	r3, r2
 8009890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009894:	461a      	mov	r2, r3
 8009896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800989a:	6093      	str	r3, [r2, #8]
 800989c:	e032      	b.n	8009904 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	f003 0320 	and.w	r3, r3, #32
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d008      	beq.n	80098ba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	015a      	lsls	r2, r3, #5
 80098ac:	69bb      	ldr	r3, [r7, #24]
 80098ae:	4413      	add	r3, r2
 80098b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098b4:	461a      	mov	r2, r3
 80098b6:	2320      	movs	r3, #32
 80098b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	b2db      	uxtb	r3, r3
 80098be:	4619      	mov	r1, r3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f00d fc4f 	bl	8017164 <HAL_PCD_DataOutStageCallback>
 80098c6:	e01d      	b.n	8009904 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d114      	bne.n	80098f8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80098ce:	6879      	ldr	r1, [r7, #4]
 80098d0:	683a      	ldr	r2, [r7, #0]
 80098d2:	4613      	mov	r3, r2
 80098d4:	00db      	lsls	r3, r3, #3
 80098d6:	4413      	add	r3, r2
 80098d8:	009b      	lsls	r3, r3, #2
 80098da:	440b      	add	r3, r1
 80098dc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d108      	bne.n	80098f8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6818      	ldr	r0, [r3, #0]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80098f0:	461a      	mov	r2, r3
 80098f2:	2100      	movs	r1, #0
 80098f4:	f00a fe98 	bl	8014628 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	b2db      	uxtb	r3, r3
 80098fc:	4619      	mov	r1, r3
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f00d fc30 	bl	8017164 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3720      	adds	r7, #32
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}
 800990e:	bf00      	nop
 8009910:	4f54300a 	.word	0x4f54300a
 8009914:	4f54310a 	.word	0x4f54310a

08009918 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	333c      	adds	r3, #60	; 0x3c
 8009930:	3304      	adds	r3, #4
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	015a      	lsls	r2, r3, #5
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	4413      	add	r3, r2
 800993e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	4a15      	ldr	r2, [pc, #84]	; (80099a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d90e      	bls.n	800996c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009954:	2b00      	cmp	r3, #0
 8009956:	d009      	beq.n	800996c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	015a      	lsls	r2, r3, #5
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	4413      	add	r3, r2
 8009960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009964:	461a      	mov	r2, r3
 8009966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800996a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f00d fbe7 	bl	8017140 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	4a0a      	ldr	r2, [pc, #40]	; (80099a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d90c      	bls.n	8009994 <PCD_EP_OutSetupPacket_int+0x7c>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	2b01      	cmp	r3, #1
 8009980:	d108      	bne.n	8009994 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	6818      	ldr	r0, [r3, #0]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800998c:	461a      	mov	r2, r3
 800998e:	2101      	movs	r1, #1
 8009990:	f00a fe4a 	bl	8014628 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3718      	adds	r7, #24
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	4f54300a 	.word	0x4f54300a

080099a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	460b      	mov	r3, r1
 80099ae:	70fb      	strb	r3, [r7, #3]
 80099b0:	4613      	mov	r3, r2
 80099b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80099bc:	78fb      	ldrb	r3, [r7, #3]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d107      	bne.n	80099d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80099c2:	883b      	ldrh	r3, [r7, #0]
 80099c4:	0419      	lsls	r1, r3, #16
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68ba      	ldr	r2, [r7, #8]
 80099cc:	430a      	orrs	r2, r1
 80099ce:	629a      	str	r2, [r3, #40]	; 0x28
 80099d0:	e028      	b.n	8009a24 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d8:	0c1b      	lsrs	r3, r3, #16
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	4413      	add	r3, r2
 80099de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80099e0:	2300      	movs	r3, #0
 80099e2:	73fb      	strb	r3, [r7, #15]
 80099e4:	e00d      	b.n	8009a02 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	7bfb      	ldrb	r3, [r7, #15]
 80099ec:	3340      	adds	r3, #64	; 0x40
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	4413      	add	r3, r2
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	0c1b      	lsrs	r3, r3, #16
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	4413      	add	r3, r2
 80099fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80099fc:	7bfb      	ldrb	r3, [r7, #15]
 80099fe:	3301      	adds	r3, #1
 8009a00:	73fb      	strb	r3, [r7, #15]
 8009a02:	7bfa      	ldrb	r2, [r7, #15]
 8009a04:	78fb      	ldrb	r3, [r7, #3]
 8009a06:	3b01      	subs	r3, #1
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d3ec      	bcc.n	80099e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009a0c:	883b      	ldrh	r3, [r7, #0]
 8009a0e:	0418      	lsls	r0, r3, #16
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6819      	ldr	r1, [r3, #0]
 8009a14:	78fb      	ldrb	r3, [r7, #3]
 8009a16:	3b01      	subs	r3, #1
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	4302      	orrs	r2, r0
 8009a1c:	3340      	adds	r3, #64	; 0x40
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	440b      	add	r3, r1
 8009a22:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009a24:	2300      	movs	r3, #0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	3714      	adds	r7, #20
 8009a2a:	46bd      	mov	sp, r7
 8009a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a30:	4770      	bx	lr

08009a32 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b083      	sub	sp, #12
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	887a      	ldrh	r2, [r7, #2]
 8009a44:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b085      	sub	sp, #20
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2201      	movs	r2, #1
 8009a66:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	699b      	ldr	r3, [r3, #24]
 8009a76:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009a82:	4b05      	ldr	r3, [pc, #20]	; (8009a98 <HAL_PCDEx_ActivateLPM+0x44>)
 8009a84:	4313      	orrs	r3, r2
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009a8a:	2300      	movs	r3, #0
}
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	3714      	adds	r7, #20
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr
 8009a98:	10000003 	.word	0x10000003

08009a9c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b084      	sub	sp, #16
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009abc:	4b19      	ldr	r3, [pc, #100]	; (8009b24 <HAL_PWREx_ConfigSupply+0x70>)
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	f003 0304 	and.w	r3, r3, #4
 8009ac4:	2b04      	cmp	r3, #4
 8009ac6:	d00a      	beq.n	8009ade <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009ac8:	4b16      	ldr	r3, [pc, #88]	; (8009b24 <HAL_PWREx_ConfigSupply+0x70>)
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	f003 0307 	and.w	r3, r3, #7
 8009ad0:	687a      	ldr	r2, [r7, #4]
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d001      	beq.n	8009ada <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e01f      	b.n	8009b1a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009ada:	2300      	movs	r3, #0
 8009adc:	e01d      	b.n	8009b1a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009ade:	4b11      	ldr	r3, [pc, #68]	; (8009b24 <HAL_PWREx_ConfigSupply+0x70>)
 8009ae0:	68db      	ldr	r3, [r3, #12]
 8009ae2:	f023 0207 	bic.w	r2, r3, #7
 8009ae6:	490f      	ldr	r1, [pc, #60]	; (8009b24 <HAL_PWREx_ConfigSupply+0x70>)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009aee:	f7fa f90f 	bl	8003d10 <HAL_GetTick>
 8009af2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009af4:	e009      	b.n	8009b0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009af6:	f7fa f90b 	bl	8003d10 <HAL_GetTick>
 8009afa:	4602      	mov	r2, r0
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	1ad3      	subs	r3, r2, r3
 8009b00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b04:	d901      	bls.n	8009b0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009b06:	2301      	movs	r3, #1
 8009b08:	e007      	b.n	8009b1a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009b0a:	4b06      	ldr	r3, [pc, #24]	; (8009b24 <HAL_PWREx_ConfigSupply+0x70>)
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b16:	d1ee      	bne.n	8009af6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009b18:	2300      	movs	r3, #0
}
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	58024800 	.word	0x58024800

08009b28 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009b2c:	4b05      	ldr	r3, [pc, #20]	; (8009b44 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	4a04      	ldr	r2, [pc, #16]	; (8009b44 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009b36:	60d3      	str	r3, [r2, #12]
}
 8009b38:	bf00      	nop
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr
 8009b42:	bf00      	nop
 8009b44:	58024800 	.word	0x58024800

08009b48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b08c      	sub	sp, #48	; 0x30
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d101      	bne.n	8009b5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e3c8      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f000 8087 	beq.w	8009c76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b68:	4b88      	ldr	r3, [pc, #544]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009b6a:	691b      	ldr	r3, [r3, #16]
 8009b6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b72:	4b86      	ldr	r3, [pc, #536]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b76:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b7a:	2b10      	cmp	r3, #16
 8009b7c:	d007      	beq.n	8009b8e <HAL_RCC_OscConfig+0x46>
 8009b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b80:	2b18      	cmp	r3, #24
 8009b82:	d110      	bne.n	8009ba6 <HAL_RCC_OscConfig+0x5e>
 8009b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b86:	f003 0303 	and.w	r3, r3, #3
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d10b      	bne.n	8009ba6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b8e:	4b7f      	ldr	r3, [pc, #508]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d06c      	beq.n	8009c74 <HAL_RCC_OscConfig+0x12c>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d168      	bne.n	8009c74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009ba2:	2301      	movs	r3, #1
 8009ba4:	e3a2      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bae:	d106      	bne.n	8009bbe <HAL_RCC_OscConfig+0x76>
 8009bb0:	4b76      	ldr	r3, [pc, #472]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a75      	ldr	r2, [pc, #468]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009bb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bba:	6013      	str	r3, [r2, #0]
 8009bbc:	e02e      	b.n	8009c1c <HAL_RCC_OscConfig+0xd4>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d10c      	bne.n	8009be0 <HAL_RCC_OscConfig+0x98>
 8009bc6:	4b71      	ldr	r3, [pc, #452]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4a70      	ldr	r2, [pc, #448]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009bcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bd0:	6013      	str	r3, [r2, #0]
 8009bd2:	4b6e      	ldr	r3, [pc, #440]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a6d      	ldr	r2, [pc, #436]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009bd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bdc:	6013      	str	r3, [r2, #0]
 8009bde:	e01d      	b.n	8009c1c <HAL_RCC_OscConfig+0xd4>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009be8:	d10c      	bne.n	8009c04 <HAL_RCC_OscConfig+0xbc>
 8009bea:	4b68      	ldr	r3, [pc, #416]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a67      	ldr	r2, [pc, #412]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009bf4:	6013      	str	r3, [r2, #0]
 8009bf6:	4b65      	ldr	r3, [pc, #404]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a64      	ldr	r2, [pc, #400]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c00:	6013      	str	r3, [r2, #0]
 8009c02:	e00b      	b.n	8009c1c <HAL_RCC_OscConfig+0xd4>
 8009c04:	4b61      	ldr	r3, [pc, #388]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a60      	ldr	r2, [pc, #384]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c0e:	6013      	str	r3, [r2, #0]
 8009c10:	4b5e      	ldr	r3, [pc, #376]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4a5d      	ldr	r2, [pc, #372]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	685b      	ldr	r3, [r3, #4]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d013      	beq.n	8009c4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c24:	f7fa f874 	bl	8003d10 <HAL_GetTick>
 8009c28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009c2a:	e008      	b.n	8009c3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c2c:	f7fa f870 	bl	8003d10 <HAL_GetTick>
 8009c30:	4602      	mov	r2, r0
 8009c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c34:	1ad3      	subs	r3, r2, r3
 8009c36:	2b64      	cmp	r3, #100	; 0x64
 8009c38:	d901      	bls.n	8009c3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009c3a:	2303      	movs	r3, #3
 8009c3c:	e356      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009c3e:	4b53      	ldr	r3, [pc, #332]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d0f0      	beq.n	8009c2c <HAL_RCC_OscConfig+0xe4>
 8009c4a:	e014      	b.n	8009c76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c4c:	f7fa f860 	bl	8003d10 <HAL_GetTick>
 8009c50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009c52:	e008      	b.n	8009c66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009c54:	f7fa f85c 	bl	8003d10 <HAL_GetTick>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5c:	1ad3      	subs	r3, r2, r3
 8009c5e:	2b64      	cmp	r3, #100	; 0x64
 8009c60:	d901      	bls.n	8009c66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009c62:	2303      	movs	r3, #3
 8009c64:	e342      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009c66:	4b49      	ldr	r3, [pc, #292]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d1f0      	bne.n	8009c54 <HAL_RCC_OscConfig+0x10c>
 8009c72:	e000      	b.n	8009c76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f003 0302 	and.w	r3, r3, #2
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f000 808c 	beq.w	8009d9c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c84:	4b41      	ldr	r3, [pc, #260]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009c86:	691b      	ldr	r3, [r3, #16]
 8009c88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009c8e:	4b3f      	ldr	r3, [pc, #252]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c92:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009c94:	6a3b      	ldr	r3, [r7, #32]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d007      	beq.n	8009caa <HAL_RCC_OscConfig+0x162>
 8009c9a:	6a3b      	ldr	r3, [r7, #32]
 8009c9c:	2b18      	cmp	r3, #24
 8009c9e:	d137      	bne.n	8009d10 <HAL_RCC_OscConfig+0x1c8>
 8009ca0:	69fb      	ldr	r3, [r7, #28]
 8009ca2:	f003 0303 	and.w	r3, r3, #3
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d132      	bne.n	8009d10 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009caa:	4b38      	ldr	r3, [pc, #224]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f003 0304 	and.w	r3, r3, #4
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d005      	beq.n	8009cc2 <HAL_RCC_OscConfig+0x17a>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68db      	ldr	r3, [r3, #12]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d101      	bne.n	8009cc2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e314      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009cc2:	4b32      	ldr	r3, [pc, #200]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f023 0219 	bic.w	r2, r3, #25
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	68db      	ldr	r3, [r3, #12]
 8009cce:	492f      	ldr	r1, [pc, #188]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cd4:	f7fa f81c 	bl	8003d10 <HAL_GetTick>
 8009cd8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009cda:	e008      	b.n	8009cee <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009cdc:	f7fa f818 	bl	8003d10 <HAL_GetTick>
 8009ce0:	4602      	mov	r2, r0
 8009ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ce4:	1ad3      	subs	r3, r2, r3
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d901      	bls.n	8009cee <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009cea:	2303      	movs	r3, #3
 8009cec:	e2fe      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009cee:	4b27      	ldr	r3, [pc, #156]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f003 0304 	and.w	r3, r3, #4
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d0f0      	beq.n	8009cdc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cfa:	4b24      	ldr	r3, [pc, #144]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	061b      	lsls	r3, r3, #24
 8009d08:	4920      	ldr	r1, [pc, #128]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009d0a:	4313      	orrs	r3, r2
 8009d0c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009d0e:	e045      	b.n	8009d9c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	68db      	ldr	r3, [r3, #12]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d026      	beq.n	8009d66 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009d18:	4b1c      	ldr	r3, [pc, #112]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f023 0219 	bic.w	r2, r3, #25
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	4919      	ldr	r1, [pc, #100]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009d26:	4313      	orrs	r3, r2
 8009d28:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d2a:	f7f9 fff1 	bl	8003d10 <HAL_GetTick>
 8009d2e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d30:	e008      	b.n	8009d44 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d32:	f7f9 ffed 	bl	8003d10 <HAL_GetTick>
 8009d36:	4602      	mov	r2, r0
 8009d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3a:	1ad3      	subs	r3, r2, r3
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	d901      	bls.n	8009d44 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8009d40:	2303      	movs	r3, #3
 8009d42:	e2d3      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009d44:	4b11      	ldr	r3, [pc, #68]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f003 0304 	and.w	r3, r3, #4
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d0f0      	beq.n	8009d32 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d50:	4b0e      	ldr	r3, [pc, #56]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	691b      	ldr	r3, [r3, #16]
 8009d5c:	061b      	lsls	r3, r3, #24
 8009d5e:	490b      	ldr	r1, [pc, #44]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009d60:	4313      	orrs	r3, r2
 8009d62:	604b      	str	r3, [r1, #4]
 8009d64:	e01a      	b.n	8009d9c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d66:	4b09      	ldr	r3, [pc, #36]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a08      	ldr	r2, [pc, #32]	; (8009d8c <HAL_RCC_OscConfig+0x244>)
 8009d6c:	f023 0301 	bic.w	r3, r3, #1
 8009d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d72:	f7f9 ffcd 	bl	8003d10 <HAL_GetTick>
 8009d76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009d78:	e00a      	b.n	8009d90 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d7a:	f7f9 ffc9 	bl	8003d10 <HAL_GetTick>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d903      	bls.n	8009d90 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	e2af      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
 8009d8c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009d90:	4b96      	ldr	r3, [pc, #600]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 0304 	and.w	r3, r3, #4
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d1ee      	bne.n	8009d7a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f003 0310 	and.w	r3, r3, #16
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d06a      	beq.n	8009e7e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009da8:	4b90      	ldr	r3, [pc, #576]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009daa:	691b      	ldr	r3, [r3, #16]
 8009dac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009db0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009db2:	4b8e      	ldr	r3, [pc, #568]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	2b08      	cmp	r3, #8
 8009dbc:	d007      	beq.n	8009dce <HAL_RCC_OscConfig+0x286>
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	2b18      	cmp	r3, #24
 8009dc2:	d11b      	bne.n	8009dfc <HAL_RCC_OscConfig+0x2b4>
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	f003 0303 	and.w	r3, r3, #3
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d116      	bne.n	8009dfc <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009dce:	4b87      	ldr	r3, [pc, #540]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d005      	beq.n	8009de6 <HAL_RCC_OscConfig+0x29e>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	69db      	ldr	r3, [r3, #28]
 8009dde:	2b80      	cmp	r3, #128	; 0x80
 8009de0:	d001      	beq.n	8009de6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009de2:	2301      	movs	r3, #1
 8009de4:	e282      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009de6:	4b81      	ldr	r3, [pc, #516]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6a1b      	ldr	r3, [r3, #32]
 8009df2:	061b      	lsls	r3, r3, #24
 8009df4:	497d      	ldr	r1, [pc, #500]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009df6:	4313      	orrs	r3, r2
 8009df8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009dfa:	e040      	b.n	8009e7e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	69db      	ldr	r3, [r3, #28]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d023      	beq.n	8009e4c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009e04:	4b79      	ldr	r3, [pc, #484]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a78      	ldr	r2, [pc, #480]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e10:	f7f9 ff7e 	bl	8003d10 <HAL_GetTick>
 8009e14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009e16:	e008      	b.n	8009e2a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009e18:	f7f9 ff7a 	bl	8003d10 <HAL_GetTick>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d901      	bls.n	8009e2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009e26:	2303      	movs	r3, #3
 8009e28:	e260      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009e2a:	4b70      	ldr	r3, [pc, #448]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d0f0      	beq.n	8009e18 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009e36:	4b6d      	ldr	r3, [pc, #436]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a1b      	ldr	r3, [r3, #32]
 8009e42:	061b      	lsls	r3, r3, #24
 8009e44:	4969      	ldr	r1, [pc, #420]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009e46:	4313      	orrs	r3, r2
 8009e48:	60cb      	str	r3, [r1, #12]
 8009e4a:	e018      	b.n	8009e7e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009e4c:	4b67      	ldr	r3, [pc, #412]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a66      	ldr	r2, [pc, #408]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009e52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e58:	f7f9 ff5a 	bl	8003d10 <HAL_GetTick>
 8009e5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e5e:	e008      	b.n	8009e72 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009e60:	f7f9 ff56 	bl	8003d10 <HAL_GetTick>
 8009e64:	4602      	mov	r2, r0
 8009e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e68:	1ad3      	subs	r3, r2, r3
 8009e6a:	2b02      	cmp	r3, #2
 8009e6c:	d901      	bls.n	8009e72 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8009e6e:	2303      	movs	r3, #3
 8009e70:	e23c      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009e72:	4b5e      	ldr	r3, [pc, #376]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d1f0      	bne.n	8009e60 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f003 0308 	and.w	r3, r3, #8
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d036      	beq.n	8009ef8 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	695b      	ldr	r3, [r3, #20]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d019      	beq.n	8009ec6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009e92:	4b56      	ldr	r3, [pc, #344]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e96:	4a55      	ldr	r2, [pc, #340]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009e98:	f043 0301 	orr.w	r3, r3, #1
 8009e9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e9e:	f7f9 ff37 	bl	8003d10 <HAL_GetTick>
 8009ea2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ea4:	e008      	b.n	8009eb8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ea6:	f7f9 ff33 	bl	8003d10 <HAL_GetTick>
 8009eaa:	4602      	mov	r2, r0
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	1ad3      	subs	r3, r2, r3
 8009eb0:	2b02      	cmp	r3, #2
 8009eb2:	d901      	bls.n	8009eb8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	e219      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009eb8:	4b4c      	ldr	r3, [pc, #304]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009eba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ebc:	f003 0302 	and.w	r3, r3, #2
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d0f0      	beq.n	8009ea6 <HAL_RCC_OscConfig+0x35e>
 8009ec4:	e018      	b.n	8009ef8 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ec6:	4b49      	ldr	r3, [pc, #292]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009ec8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009eca:	4a48      	ldr	r2, [pc, #288]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009ecc:	f023 0301 	bic.w	r3, r3, #1
 8009ed0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ed2:	f7f9 ff1d 	bl	8003d10 <HAL_GetTick>
 8009ed6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009ed8:	e008      	b.n	8009eec <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009eda:	f7f9 ff19 	bl	8003d10 <HAL_GetTick>
 8009ede:	4602      	mov	r2, r0
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee2:	1ad3      	subs	r3, r2, r3
 8009ee4:	2b02      	cmp	r3, #2
 8009ee6:	d901      	bls.n	8009eec <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8009ee8:	2303      	movs	r3, #3
 8009eea:	e1ff      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009eec:	4b3f      	ldr	r3, [pc, #252]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009eee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ef0:	f003 0302 	and.w	r3, r3, #2
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1f0      	bne.n	8009eda <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f003 0320 	and.w	r3, r3, #32
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d036      	beq.n	8009f72 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d019      	beq.n	8009f40 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009f0c:	4b37      	ldr	r3, [pc, #220]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a36      	ldr	r2, [pc, #216]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009f12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009f16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f18:	f7f9 fefa 	bl	8003d10 <HAL_GetTick>
 8009f1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f1e:	e008      	b.n	8009f32 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f20:	f7f9 fef6 	bl	8003d10 <HAL_GetTick>
 8009f24:	4602      	mov	r2, r0
 8009f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f28:	1ad3      	subs	r3, r2, r3
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d901      	bls.n	8009f32 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	e1dc      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f32:	4b2e      	ldr	r3, [pc, #184]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d0f0      	beq.n	8009f20 <HAL_RCC_OscConfig+0x3d8>
 8009f3e:	e018      	b.n	8009f72 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009f40:	4b2a      	ldr	r3, [pc, #168]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	4a29      	ldr	r2, [pc, #164]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f4c:	f7f9 fee0 	bl	8003d10 <HAL_GetTick>
 8009f50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f52:	e008      	b.n	8009f66 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f54:	f7f9 fedc 	bl	8003d10 <HAL_GetTick>
 8009f58:	4602      	mov	r2, r0
 8009f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5c:	1ad3      	subs	r3, r2, r3
 8009f5e:	2b02      	cmp	r3, #2
 8009f60:	d901      	bls.n	8009f66 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8009f62:	2303      	movs	r3, #3
 8009f64:	e1c2      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009f66:	4b21      	ldr	r3, [pc, #132]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d1f0      	bne.n	8009f54 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f003 0304 	and.w	r3, r3, #4
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f000 8086 	beq.w	800a08c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009f80:	4b1b      	ldr	r3, [pc, #108]	; (8009ff0 <HAL_RCC_OscConfig+0x4a8>)
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	4a1a      	ldr	r2, [pc, #104]	; (8009ff0 <HAL_RCC_OscConfig+0x4a8>)
 8009f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009f8c:	f7f9 fec0 	bl	8003d10 <HAL_GetTick>
 8009f90:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009f92:	e008      	b.n	8009fa6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009f94:	f7f9 febc 	bl	8003d10 <HAL_GetTick>
 8009f98:	4602      	mov	r2, r0
 8009f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f9c:	1ad3      	subs	r3, r2, r3
 8009f9e:	2b64      	cmp	r3, #100	; 0x64
 8009fa0:	d901      	bls.n	8009fa6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	e1a2      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009fa6:	4b12      	ldr	r3, [pc, #72]	; (8009ff0 <HAL_RCC_OscConfig+0x4a8>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d0f0      	beq.n	8009f94 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	689b      	ldr	r3, [r3, #8]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d106      	bne.n	8009fc8 <HAL_RCC_OscConfig+0x480>
 8009fba:	4b0c      	ldr	r3, [pc, #48]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fbe:	4a0b      	ldr	r2, [pc, #44]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009fc0:	f043 0301 	orr.w	r3, r3, #1
 8009fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8009fc6:	e032      	b.n	800a02e <HAL_RCC_OscConfig+0x4e6>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d111      	bne.n	8009ff4 <HAL_RCC_OscConfig+0x4ac>
 8009fd0:	4b06      	ldr	r3, [pc, #24]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fd4:	4a05      	ldr	r2, [pc, #20]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009fd6:	f023 0301 	bic.w	r3, r3, #1
 8009fda:	6713      	str	r3, [r2, #112]	; 0x70
 8009fdc:	4b03      	ldr	r3, [pc, #12]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fe0:	4a02      	ldr	r2, [pc, #8]	; (8009fec <HAL_RCC_OscConfig+0x4a4>)
 8009fe2:	f023 0304 	bic.w	r3, r3, #4
 8009fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8009fe8:	e021      	b.n	800a02e <HAL_RCC_OscConfig+0x4e6>
 8009fea:	bf00      	nop
 8009fec:	58024400 	.word	0x58024400
 8009ff0:	58024800 	.word	0x58024800
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	2b05      	cmp	r3, #5
 8009ffa:	d10c      	bne.n	800a016 <HAL_RCC_OscConfig+0x4ce>
 8009ffc:	4b83      	ldr	r3, [pc, #524]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 8009ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a000:	4a82      	ldr	r2, [pc, #520]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a002:	f043 0304 	orr.w	r3, r3, #4
 800a006:	6713      	str	r3, [r2, #112]	; 0x70
 800a008:	4b80      	ldr	r3, [pc, #512]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a00a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a00c:	4a7f      	ldr	r2, [pc, #508]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a00e:	f043 0301 	orr.w	r3, r3, #1
 800a012:	6713      	str	r3, [r2, #112]	; 0x70
 800a014:	e00b      	b.n	800a02e <HAL_RCC_OscConfig+0x4e6>
 800a016:	4b7d      	ldr	r3, [pc, #500]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a01a:	4a7c      	ldr	r2, [pc, #496]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a01c:	f023 0301 	bic.w	r3, r3, #1
 800a020:	6713      	str	r3, [r2, #112]	; 0x70
 800a022:	4b7a      	ldr	r3, [pc, #488]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a026:	4a79      	ldr	r2, [pc, #484]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a028:	f023 0304 	bic.w	r3, r3, #4
 800a02c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d015      	beq.n	800a062 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a036:	f7f9 fe6b 	bl	8003d10 <HAL_GetTick>
 800a03a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a03c:	e00a      	b.n	800a054 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a03e:	f7f9 fe67 	bl	8003d10 <HAL_GetTick>
 800a042:	4602      	mov	r2, r0
 800a044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a046:	1ad3      	subs	r3, r2, r3
 800a048:	f241 3288 	movw	r2, #5000	; 0x1388
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d901      	bls.n	800a054 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800a050:	2303      	movs	r3, #3
 800a052:	e14b      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a054:	4b6d      	ldr	r3, [pc, #436]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a058:	f003 0302 	and.w	r3, r3, #2
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d0ee      	beq.n	800a03e <HAL_RCC_OscConfig+0x4f6>
 800a060:	e014      	b.n	800a08c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a062:	f7f9 fe55 	bl	8003d10 <HAL_GetTick>
 800a066:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a068:	e00a      	b.n	800a080 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a06a:	f7f9 fe51 	bl	8003d10 <HAL_GetTick>
 800a06e:	4602      	mov	r2, r0
 800a070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a072:	1ad3      	subs	r3, r2, r3
 800a074:	f241 3288 	movw	r2, #5000	; 0x1388
 800a078:	4293      	cmp	r3, r2
 800a07a:	d901      	bls.n	800a080 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 800a07c:	2303      	movs	r3, #3
 800a07e:	e135      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a080:	4b62      	ldr	r3, [pc, #392]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a082:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a084:	f003 0302 	and.w	r3, r3, #2
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d1ee      	bne.n	800a06a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a090:	2b00      	cmp	r3, #0
 800a092:	f000 812a 	beq.w	800a2ea <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a096:	4b5d      	ldr	r3, [pc, #372]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a098:	691b      	ldr	r3, [r3, #16]
 800a09a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a09e:	2b18      	cmp	r3, #24
 800a0a0:	f000 80ba 	beq.w	800a218 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a8:	2b02      	cmp	r3, #2
 800a0aa:	f040 8095 	bne.w	800a1d8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0ae:	4b57      	ldr	r3, [pc, #348]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a56      	ldr	r2, [pc, #344]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a0b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0ba:	f7f9 fe29 	bl	8003d10 <HAL_GetTick>
 800a0be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0c0:	e008      	b.n	800a0d4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0c2:	f7f9 fe25 	bl	8003d10 <HAL_GetTick>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ca:	1ad3      	subs	r3, r2, r3
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d901      	bls.n	800a0d4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	e10b      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0d4:	4b4d      	ldr	r3, [pc, #308]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d1f0      	bne.n	800a0c2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a0e0:	4b4a      	ldr	r3, [pc, #296]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a0e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0e4:	4b4a      	ldr	r3, [pc, #296]	; (800a210 <HAL_RCC_OscConfig+0x6c8>)
 800a0e6:	4013      	ands	r3, r2
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a0f0:	0112      	lsls	r2, r2, #4
 800a0f2:	430a      	orrs	r2, r1
 800a0f4:	4945      	ldr	r1, [pc, #276]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	628b      	str	r3, [r1, #40]	; 0x28
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0fe:	3b01      	subs	r3, #1
 800a100:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a108:	3b01      	subs	r3, #1
 800a10a:	025b      	lsls	r3, r3, #9
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	431a      	orrs	r2, r3
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a114:	3b01      	subs	r3, #1
 800a116:	041b      	lsls	r3, r3, #16
 800a118:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a11c:	431a      	orrs	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a122:	3b01      	subs	r3, #1
 800a124:	061b      	lsls	r3, r3, #24
 800a126:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a12a:	4938      	ldr	r1, [pc, #224]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a12c:	4313      	orrs	r3, r2
 800a12e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a130:	4b36      	ldr	r3, [pc, #216]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a134:	4a35      	ldr	r2, [pc, #212]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a136:	f023 0301 	bic.w	r3, r3, #1
 800a13a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a13c:	4b33      	ldr	r3, [pc, #204]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a13e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a140:	4b34      	ldr	r3, [pc, #208]	; (800a214 <HAL_RCC_OscConfig+0x6cc>)
 800a142:	4013      	ands	r3, r2
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a148:	00d2      	lsls	r2, r2, #3
 800a14a:	4930      	ldr	r1, [pc, #192]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a14c:	4313      	orrs	r3, r2
 800a14e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a150:	4b2e      	ldr	r3, [pc, #184]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a154:	f023 020c 	bic.w	r2, r3, #12
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a15c:	492b      	ldr	r1, [pc, #172]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a15e:	4313      	orrs	r3, r2
 800a160:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a162:	4b2a      	ldr	r3, [pc, #168]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a166:	f023 0202 	bic.w	r2, r3, #2
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a16e:	4927      	ldr	r1, [pc, #156]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a170:	4313      	orrs	r3, r2
 800a172:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a174:	4b25      	ldr	r3, [pc, #148]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a178:	4a24      	ldr	r2, [pc, #144]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a17a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a17e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a180:	4b22      	ldr	r3, [pc, #136]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a184:	4a21      	ldr	r2, [pc, #132]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a18a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a18c:	4b1f      	ldr	r3, [pc, #124]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a190:	4a1e      	ldr	r2, [pc, #120]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a192:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a196:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a198:	4b1c      	ldr	r3, [pc, #112]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a19a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19c:	4a1b      	ldr	r2, [pc, #108]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a19e:	f043 0301 	orr.w	r3, r3, #1
 800a1a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1a4:	4b19      	ldr	r3, [pc, #100]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a18      	ldr	r2, [pc, #96]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a1aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1b0:	f7f9 fdae 	bl	8003d10 <HAL_GetTick>
 800a1b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1b6:	e008      	b.n	800a1ca <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1b8:	f7f9 fdaa 	bl	8003d10 <HAL_GetTick>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c0:	1ad3      	subs	r3, r2, r3
 800a1c2:	2b02      	cmp	r3, #2
 800a1c4:	d901      	bls.n	800a1ca <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800a1c6:	2303      	movs	r3, #3
 800a1c8:	e090      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1ca:	4b10      	ldr	r3, [pc, #64]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d0f0      	beq.n	800a1b8 <HAL_RCC_OscConfig+0x670>
 800a1d6:	e088      	b.n	800a2ea <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a1d8:	4b0c      	ldr	r3, [pc, #48]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a0b      	ldr	r2, [pc, #44]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a1de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a1e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1e4:	f7f9 fd94 	bl	8003d10 <HAL_GetTick>
 800a1e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a1ea:	e008      	b.n	800a1fe <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a1ec:	f7f9 fd90 	bl	8003d10 <HAL_GetTick>
 800a1f0:	4602      	mov	r2, r0
 800a1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f4:	1ad3      	subs	r3, r2, r3
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d901      	bls.n	800a1fe <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	e076      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a1fe:	4b03      	ldr	r3, [pc, #12]	; (800a20c <HAL_RCC_OscConfig+0x6c4>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a206:	2b00      	cmp	r3, #0
 800a208:	d1f0      	bne.n	800a1ec <HAL_RCC_OscConfig+0x6a4>
 800a20a:	e06e      	b.n	800a2ea <HAL_RCC_OscConfig+0x7a2>
 800a20c:	58024400 	.word	0x58024400
 800a210:	fffffc0c 	.word	0xfffffc0c
 800a214:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a218:	4b36      	ldr	r3, [pc, #216]	; (800a2f4 <HAL_RCC_OscConfig+0x7ac>)
 800a21a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a21c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a21e:	4b35      	ldr	r3, [pc, #212]	; (800a2f4 <HAL_RCC_OscConfig+0x7ac>)
 800a220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a222:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a228:	2b01      	cmp	r3, #1
 800a22a:	d031      	beq.n	800a290 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	f003 0203 	and.w	r2, r3, #3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a236:	429a      	cmp	r2, r3
 800a238:	d12a      	bne.n	800a290 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a23a:	693b      	ldr	r3, [r7, #16]
 800a23c:	091b      	lsrs	r3, r3, #4
 800a23e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a246:	429a      	cmp	r2, r3
 800a248:	d122      	bne.n	800a290 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a254:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a256:	429a      	cmp	r2, r3
 800a258:	d11a      	bne.n	800a290 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	0a5b      	lsrs	r3, r3, #9
 800a25e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a266:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a268:	429a      	cmp	r2, r3
 800a26a:	d111      	bne.n	800a290 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	0c1b      	lsrs	r3, r3, #16
 800a270:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a278:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d108      	bne.n	800a290 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	0e1b      	lsrs	r3, r3, #24
 800a282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a28a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a28c:	429a      	cmp	r2, r3
 800a28e:	d001      	beq.n	800a294 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 800a290:	2301      	movs	r3, #1
 800a292:	e02b      	b.n	800a2ec <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a294:	4b17      	ldr	r3, [pc, #92]	; (800a2f4 <HAL_RCC_OscConfig+0x7ac>)
 800a296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a298:	08db      	lsrs	r3, r3, #3
 800a29a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a29e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2a4:	693a      	ldr	r2, [r7, #16]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d01f      	beq.n	800a2ea <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a2aa:	4b12      	ldr	r3, [pc, #72]	; (800a2f4 <HAL_RCC_OscConfig+0x7ac>)
 800a2ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ae:	4a11      	ldr	r2, [pc, #68]	; (800a2f4 <HAL_RCC_OscConfig+0x7ac>)
 800a2b0:	f023 0301 	bic.w	r3, r3, #1
 800a2b4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a2b6:	f7f9 fd2b 	bl	8003d10 <HAL_GetTick>
 800a2ba:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a2bc:	bf00      	nop
 800a2be:	f7f9 fd27 	bl	8003d10 <HAL_GetTick>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d0f9      	beq.n	800a2be <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a2ca:	4b0a      	ldr	r3, [pc, #40]	; (800a2f4 <HAL_RCC_OscConfig+0x7ac>)
 800a2cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2ce:	4b0a      	ldr	r3, [pc, #40]	; (800a2f8 <HAL_RCC_OscConfig+0x7b0>)
 800a2d0:	4013      	ands	r3, r2
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a2d6:	00d2      	lsls	r2, r2, #3
 800a2d8:	4906      	ldr	r1, [pc, #24]	; (800a2f4 <HAL_RCC_OscConfig+0x7ac>)
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a2de:	4b05      	ldr	r3, [pc, #20]	; (800a2f4 <HAL_RCC_OscConfig+0x7ac>)
 800a2e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e2:	4a04      	ldr	r2, [pc, #16]	; (800a2f4 <HAL_RCC_OscConfig+0x7ac>)
 800a2e4:	f043 0301 	orr.w	r3, r3, #1
 800a2e8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a2ea:	2300      	movs	r3, #0
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3730      	adds	r7, #48	; 0x30
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}
 800a2f4:	58024400 	.word	0x58024400
 800a2f8:	ffff0007 	.word	0xffff0007

0800a2fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b086      	sub	sp, #24
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d101      	bne.n	800a310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	e19c      	b.n	800a64a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a310:	4b8a      	ldr	r3, [pc, #552]	; (800a53c <HAL_RCC_ClockConfig+0x240>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 030f 	and.w	r3, r3, #15
 800a318:	683a      	ldr	r2, [r7, #0]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d910      	bls.n	800a340 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a31e:	4b87      	ldr	r3, [pc, #540]	; (800a53c <HAL_RCC_ClockConfig+0x240>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f023 020f 	bic.w	r2, r3, #15
 800a326:	4985      	ldr	r1, [pc, #532]	; (800a53c <HAL_RCC_ClockConfig+0x240>)
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a32e:	4b83      	ldr	r3, [pc, #524]	; (800a53c <HAL_RCC_ClockConfig+0x240>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f003 030f 	and.w	r3, r3, #15
 800a336:	683a      	ldr	r2, [r7, #0]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d001      	beq.n	800a340 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e184      	b.n	800a64a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 0304 	and.w	r3, r3, #4
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d010      	beq.n	800a36e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	691a      	ldr	r2, [r3, #16]
 800a350:	4b7b      	ldr	r3, [pc, #492]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a352:	699b      	ldr	r3, [r3, #24]
 800a354:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a358:	429a      	cmp	r2, r3
 800a35a:	d908      	bls.n	800a36e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a35c:	4b78      	ldr	r3, [pc, #480]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a35e:	699b      	ldr	r3, [r3, #24]
 800a360:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	691b      	ldr	r3, [r3, #16]
 800a368:	4975      	ldr	r1, [pc, #468]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a36a:	4313      	orrs	r3, r2
 800a36c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 0308 	and.w	r3, r3, #8
 800a376:	2b00      	cmp	r3, #0
 800a378:	d010      	beq.n	800a39c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	695a      	ldr	r2, [r3, #20]
 800a37e:	4b70      	ldr	r3, [pc, #448]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a380:	69db      	ldr	r3, [r3, #28]
 800a382:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a386:	429a      	cmp	r2, r3
 800a388:	d908      	bls.n	800a39c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a38a:	4b6d      	ldr	r3, [pc, #436]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a38c:	69db      	ldr	r3, [r3, #28]
 800a38e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	695b      	ldr	r3, [r3, #20]
 800a396:	496a      	ldr	r1, [pc, #424]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a398:	4313      	orrs	r3, r2
 800a39a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f003 0310 	and.w	r3, r3, #16
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d010      	beq.n	800a3ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	699a      	ldr	r2, [r3, #24]
 800a3ac:	4b64      	ldr	r3, [pc, #400]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a3ae:	69db      	ldr	r3, [r3, #28]
 800a3b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	d908      	bls.n	800a3ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a3b8:	4b61      	ldr	r3, [pc, #388]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a3ba:	69db      	ldr	r3, [r3, #28]
 800a3bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	699b      	ldr	r3, [r3, #24]
 800a3c4:	495e      	ldr	r1, [pc, #376]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f003 0320 	and.w	r3, r3, #32
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d010      	beq.n	800a3f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	69da      	ldr	r2, [r3, #28]
 800a3da:	4b59      	ldr	r3, [pc, #356]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a3dc:	6a1b      	ldr	r3, [r3, #32]
 800a3de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d908      	bls.n	800a3f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a3e6:	4b56      	ldr	r3, [pc, #344]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a3e8:	6a1b      	ldr	r3, [r3, #32]
 800a3ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	69db      	ldr	r3, [r3, #28]
 800a3f2:	4953      	ldr	r1, [pc, #332]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 0302 	and.w	r3, r3, #2
 800a400:	2b00      	cmp	r3, #0
 800a402:	d010      	beq.n	800a426 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	68da      	ldr	r2, [r3, #12]
 800a408:	4b4d      	ldr	r3, [pc, #308]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a40a:	699b      	ldr	r3, [r3, #24]
 800a40c:	f003 030f 	and.w	r3, r3, #15
 800a410:	429a      	cmp	r2, r3
 800a412:	d908      	bls.n	800a426 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a414:	4b4a      	ldr	r3, [pc, #296]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a416:	699b      	ldr	r3, [r3, #24]
 800a418:	f023 020f 	bic.w	r2, r3, #15
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	68db      	ldr	r3, [r3, #12]
 800a420:	4947      	ldr	r1, [pc, #284]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a422:	4313      	orrs	r3, r2
 800a424:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 0301 	and.w	r3, r3, #1
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d055      	beq.n	800a4de <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a432:	4b43      	ldr	r3, [pc, #268]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a434:	699b      	ldr	r3, [r3, #24]
 800a436:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	4940      	ldr	r1, [pc, #256]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a440:	4313      	orrs	r3, r2
 800a442:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	685b      	ldr	r3, [r3, #4]
 800a448:	2b02      	cmp	r3, #2
 800a44a:	d107      	bne.n	800a45c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a44c:	4b3c      	ldr	r3, [pc, #240]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a454:	2b00      	cmp	r3, #0
 800a456:	d121      	bne.n	800a49c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	e0f6      	b.n	800a64a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	685b      	ldr	r3, [r3, #4]
 800a460:	2b03      	cmp	r3, #3
 800a462:	d107      	bne.n	800a474 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a464:	4b36      	ldr	r3, [pc, #216]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d115      	bne.n	800a49c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a470:	2301      	movs	r3, #1
 800a472:	e0ea      	b.n	800a64a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d107      	bne.n	800a48c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a47c:	4b30      	ldr	r3, [pc, #192]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a484:	2b00      	cmp	r3, #0
 800a486:	d109      	bne.n	800a49c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a488:	2301      	movs	r3, #1
 800a48a:	e0de      	b.n	800a64a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a48c:	4b2c      	ldr	r3, [pc, #176]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	f003 0304 	and.w	r3, r3, #4
 800a494:	2b00      	cmp	r3, #0
 800a496:	d101      	bne.n	800a49c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a498:	2301      	movs	r3, #1
 800a49a:	e0d6      	b.n	800a64a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a49c:	4b28      	ldr	r3, [pc, #160]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	f023 0207 	bic.w	r2, r3, #7
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	4925      	ldr	r1, [pc, #148]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4ae:	f7f9 fc2f 	bl	8003d10 <HAL_GetTick>
 800a4b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4b4:	e00a      	b.n	800a4cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4b6:	f7f9 fc2b 	bl	8003d10 <HAL_GetTick>
 800a4ba:	4602      	mov	r2, r0
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	1ad3      	subs	r3, r2, r3
 800a4c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d901      	bls.n	800a4cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	e0be      	b.n	800a64a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4cc:	4b1c      	ldr	r3, [pc, #112]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a4ce:	691b      	ldr	r3, [r3, #16]
 800a4d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	00db      	lsls	r3, r3, #3
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d1eb      	bne.n	800a4b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	f003 0302 	and.w	r3, r3, #2
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d010      	beq.n	800a50c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	68da      	ldr	r2, [r3, #12]
 800a4ee:	4b14      	ldr	r3, [pc, #80]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a4f0:	699b      	ldr	r3, [r3, #24]
 800a4f2:	f003 030f 	and.w	r3, r3, #15
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d208      	bcs.n	800a50c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a4fa:	4b11      	ldr	r3, [pc, #68]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a4fc:	699b      	ldr	r3, [r3, #24]
 800a4fe:	f023 020f 	bic.w	r2, r3, #15
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	68db      	ldr	r3, [r3, #12]
 800a506:	490e      	ldr	r1, [pc, #56]	; (800a540 <HAL_RCC_ClockConfig+0x244>)
 800a508:	4313      	orrs	r3, r2
 800a50a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a50c:	4b0b      	ldr	r3, [pc, #44]	; (800a53c <HAL_RCC_ClockConfig+0x240>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	f003 030f 	and.w	r3, r3, #15
 800a514:	683a      	ldr	r2, [r7, #0]
 800a516:	429a      	cmp	r2, r3
 800a518:	d214      	bcs.n	800a544 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a51a:	4b08      	ldr	r3, [pc, #32]	; (800a53c <HAL_RCC_ClockConfig+0x240>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f023 020f 	bic.w	r2, r3, #15
 800a522:	4906      	ldr	r1, [pc, #24]	; (800a53c <HAL_RCC_ClockConfig+0x240>)
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	4313      	orrs	r3, r2
 800a528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a52a:	4b04      	ldr	r3, [pc, #16]	; (800a53c <HAL_RCC_ClockConfig+0x240>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 030f 	and.w	r3, r3, #15
 800a532:	683a      	ldr	r2, [r7, #0]
 800a534:	429a      	cmp	r2, r3
 800a536:	d005      	beq.n	800a544 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e086      	b.n	800a64a <HAL_RCC_ClockConfig+0x34e>
 800a53c:	52002000 	.word	0x52002000
 800a540:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 0304 	and.w	r3, r3, #4
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d010      	beq.n	800a572 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	691a      	ldr	r2, [r3, #16]
 800a554:	4b3f      	ldr	r3, [pc, #252]	; (800a654 <HAL_RCC_ClockConfig+0x358>)
 800a556:	699b      	ldr	r3, [r3, #24]
 800a558:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d208      	bcs.n	800a572 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a560:	4b3c      	ldr	r3, [pc, #240]	; (800a654 <HAL_RCC_ClockConfig+0x358>)
 800a562:	699b      	ldr	r3, [r3, #24]
 800a564:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	691b      	ldr	r3, [r3, #16]
 800a56c:	4939      	ldr	r1, [pc, #228]	; (800a654 <HAL_RCC_ClockConfig+0x358>)
 800a56e:	4313      	orrs	r3, r2
 800a570:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f003 0308 	and.w	r3, r3, #8
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d010      	beq.n	800a5a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	695a      	ldr	r2, [r3, #20]
 800a582:	4b34      	ldr	r3, [pc, #208]	; (800a654 <HAL_RCC_ClockConfig+0x358>)
 800a584:	69db      	ldr	r3, [r3, #28]
 800a586:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a58a:	429a      	cmp	r2, r3
 800a58c:	d208      	bcs.n	800a5a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a58e:	4b31      	ldr	r3, [pc, #196]	; (800a654 <HAL_RCC_ClockConfig+0x358>)
 800a590:	69db      	ldr	r3, [r3, #28]
 800a592:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	695b      	ldr	r3, [r3, #20]
 800a59a:	492e      	ldr	r1, [pc, #184]	; (800a654 <HAL_RCC_ClockConfig+0x358>)
 800a59c:	4313      	orrs	r3, r2
 800a59e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f003 0310 	and.w	r3, r3, #16
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d010      	beq.n	800a5ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	699a      	ldr	r2, [r3, #24]
 800a5b0:	4b28      	ldr	r3, [pc, #160]	; (800a654 <HAL_RCC_ClockConfig+0x358>)
 800a5b2:	69db      	ldr	r3, [r3, #28]
 800a5b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d208      	bcs.n	800a5ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a5bc:	4b25      	ldr	r3, [pc, #148]	; (800a654 <HAL_RCC_ClockConfig+0x358>)
 800a5be:	69db      	ldr	r3, [r3, #28]
 800a5c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	699b      	ldr	r3, [r3, #24]
 800a5c8:	4922      	ldr	r1, [pc, #136]	; (800a654 <HAL_RCC_ClockConfig+0x358>)
 800a5ca:	4313      	orrs	r3, r2
 800a5cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f003 0320 	and.w	r3, r3, #32
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d010      	beq.n	800a5fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	69da      	ldr	r2, [r3, #28]
 800a5de:	4b1d      	ldr	r3, [pc, #116]	; (800a654 <HAL_RCC_ClockConfig+0x358>)
 800a5e0:	6a1b      	ldr	r3, [r3, #32]
 800a5e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d208      	bcs.n	800a5fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a5ea:	4b1a      	ldr	r3, [pc, #104]	; (800a654 <HAL_RCC_ClockConfig+0x358>)
 800a5ec:	6a1b      	ldr	r3, [r3, #32]
 800a5ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	69db      	ldr	r3, [r3, #28]
 800a5f6:	4917      	ldr	r1, [pc, #92]	; (800a654 <HAL_RCC_ClockConfig+0x358>)
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a5fc:	f000 f89e 	bl	800a73c <HAL_RCC_GetSysClockFreq>
 800a600:	4602      	mov	r2, r0
 800a602:	4b14      	ldr	r3, [pc, #80]	; (800a654 <HAL_RCC_ClockConfig+0x358>)
 800a604:	699b      	ldr	r3, [r3, #24]
 800a606:	0a1b      	lsrs	r3, r3, #8
 800a608:	f003 030f 	and.w	r3, r3, #15
 800a60c:	4912      	ldr	r1, [pc, #72]	; (800a658 <HAL_RCC_ClockConfig+0x35c>)
 800a60e:	5ccb      	ldrb	r3, [r1, r3]
 800a610:	f003 031f 	and.w	r3, r3, #31
 800a614:	fa22 f303 	lsr.w	r3, r2, r3
 800a618:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a61a:	4b0e      	ldr	r3, [pc, #56]	; (800a654 <HAL_RCC_ClockConfig+0x358>)
 800a61c:	699b      	ldr	r3, [r3, #24]
 800a61e:	f003 030f 	and.w	r3, r3, #15
 800a622:	4a0d      	ldr	r2, [pc, #52]	; (800a658 <HAL_RCC_ClockConfig+0x35c>)
 800a624:	5cd3      	ldrb	r3, [r2, r3]
 800a626:	f003 031f 	and.w	r3, r3, #31
 800a62a:	693a      	ldr	r2, [r7, #16]
 800a62c:	fa22 f303 	lsr.w	r3, r2, r3
 800a630:	4a0a      	ldr	r2, [pc, #40]	; (800a65c <HAL_RCC_ClockConfig+0x360>)
 800a632:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a634:	4a0a      	ldr	r2, [pc, #40]	; (800a660 <HAL_RCC_ClockConfig+0x364>)
 800a636:	693b      	ldr	r3, [r7, #16]
 800a638:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a63a:	4b0a      	ldr	r3, [pc, #40]	; (800a664 <HAL_RCC_ClockConfig+0x368>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	4618      	mov	r0, r3
 800a640:	f7f9 fb1c 	bl	8003c7c <HAL_InitTick>
 800a644:	4603      	mov	r3, r0
 800a646:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a648:	7bfb      	ldrb	r3, [r7, #15]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3718      	adds	r7, #24
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	58024400 	.word	0x58024400
 800a658:	08018c00 	.word	0x08018c00
 800a65c:	24000004 	.word	0x24000004
 800a660:	24000000 	.word	0x24000000
 800a664:	24000008 	.word	0x24000008

0800a668 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b08c      	sub	sp, #48	; 0x30
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d12a      	bne.n	800a6d0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a67a:	4b2d      	ldr	r3, [pc, #180]	; (800a730 <HAL_RCC_MCOConfig+0xc8>)
 800a67c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a680:	4a2b      	ldr	r2, [pc, #172]	; (800a730 <HAL_RCC_MCOConfig+0xc8>)
 800a682:	f043 0301 	orr.w	r3, r3, #1
 800a686:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a68a:	4b29      	ldr	r3, [pc, #164]	; (800a730 <HAL_RCC_MCOConfig+0xc8>)
 800a68c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a690:	f003 0301 	and.w	r3, r3, #1
 800a694:	61bb      	str	r3, [r7, #24]
 800a696:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a69c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a69e:	2302      	movs	r3, #2
 800a6a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6a2:	2303      	movs	r3, #3
 800a6a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a6ae:	f107 031c 	add.w	r3, r7, #28
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	481f      	ldr	r0, [pc, #124]	; (800a734 <HAL_RCC_MCOConfig+0xcc>)
 800a6b6:	f7fd fc29 	bl	8007f0c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a6ba:	4b1d      	ldr	r3, [pc, #116]	; (800a730 <HAL_RCC_MCOConfig+0xc8>)
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 800a6c2:	68b9      	ldr	r1, [r7, #8]
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	430b      	orrs	r3, r1
 800a6c8:	4919      	ldr	r1, [pc, #100]	; (800a730 <HAL_RCC_MCOConfig+0xc8>)
 800a6ca:	4313      	orrs	r3, r2
 800a6cc:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800a6ce:	e02a      	b.n	800a726 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800a6d0:	4b17      	ldr	r3, [pc, #92]	; (800a730 <HAL_RCC_MCOConfig+0xc8>)
 800a6d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6d6:	4a16      	ldr	r2, [pc, #88]	; (800a730 <HAL_RCC_MCOConfig+0xc8>)
 800a6d8:	f043 0304 	orr.w	r3, r3, #4
 800a6dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800a6e0:	4b13      	ldr	r3, [pc, #76]	; (800a730 <HAL_RCC_MCOConfig+0xc8>)
 800a6e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a6e6:	f003 0304 	and.w	r3, r3, #4
 800a6ea:	617b      	str	r3, [r7, #20]
 800a6ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a6ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6f4:	2302      	movs	r3, #2
 800a6f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6f8:	2303      	movs	r3, #3
 800a6fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a700:	2300      	movs	r3, #0
 800a702:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a704:	f107 031c 	add.w	r3, r7, #28
 800a708:	4619      	mov	r1, r3
 800a70a:	480b      	ldr	r0, [pc, #44]	; (800a738 <HAL_RCC_MCOConfig+0xd0>)
 800a70c:	f7fd fbfe 	bl	8007f0c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a710:	4b07      	ldr	r3, [pc, #28]	; (800a730 <HAL_RCC_MCOConfig+0xc8>)
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	01d9      	lsls	r1, r3, #7
 800a71c:	68bb      	ldr	r3, [r7, #8]
 800a71e:	430b      	orrs	r3, r1
 800a720:	4903      	ldr	r1, [pc, #12]	; (800a730 <HAL_RCC_MCOConfig+0xc8>)
 800a722:	4313      	orrs	r3, r2
 800a724:	610b      	str	r3, [r1, #16]
}
 800a726:	bf00      	nop
 800a728:	3730      	adds	r7, #48	; 0x30
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	58024400 	.word	0x58024400
 800a734:	58020000 	.word	0x58020000
 800a738:	58020800 	.word	0x58020800

0800a73c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b089      	sub	sp, #36	; 0x24
 800a740:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a742:	4bb3      	ldr	r3, [pc, #716]	; (800aa10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a74a:	2b18      	cmp	r3, #24
 800a74c:	f200 8155 	bhi.w	800a9fa <HAL_RCC_GetSysClockFreq+0x2be>
 800a750:	a201      	add	r2, pc, #4	; (adr r2, 800a758 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a756:	bf00      	nop
 800a758:	0800a7bd 	.word	0x0800a7bd
 800a75c:	0800a9fb 	.word	0x0800a9fb
 800a760:	0800a9fb 	.word	0x0800a9fb
 800a764:	0800a9fb 	.word	0x0800a9fb
 800a768:	0800a9fb 	.word	0x0800a9fb
 800a76c:	0800a9fb 	.word	0x0800a9fb
 800a770:	0800a9fb 	.word	0x0800a9fb
 800a774:	0800a9fb 	.word	0x0800a9fb
 800a778:	0800a7e3 	.word	0x0800a7e3
 800a77c:	0800a9fb 	.word	0x0800a9fb
 800a780:	0800a9fb 	.word	0x0800a9fb
 800a784:	0800a9fb 	.word	0x0800a9fb
 800a788:	0800a9fb 	.word	0x0800a9fb
 800a78c:	0800a9fb 	.word	0x0800a9fb
 800a790:	0800a9fb 	.word	0x0800a9fb
 800a794:	0800a9fb 	.word	0x0800a9fb
 800a798:	0800a7e9 	.word	0x0800a7e9
 800a79c:	0800a9fb 	.word	0x0800a9fb
 800a7a0:	0800a9fb 	.word	0x0800a9fb
 800a7a4:	0800a9fb 	.word	0x0800a9fb
 800a7a8:	0800a9fb 	.word	0x0800a9fb
 800a7ac:	0800a9fb 	.word	0x0800a9fb
 800a7b0:	0800a9fb 	.word	0x0800a9fb
 800a7b4:	0800a9fb 	.word	0x0800a9fb
 800a7b8:	0800a7ef 	.word	0x0800a7ef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7bc:	4b94      	ldr	r3, [pc, #592]	; (800aa10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f003 0320 	and.w	r3, r3, #32
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d009      	beq.n	800a7dc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7c8:	4b91      	ldr	r3, [pc, #580]	; (800aa10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	08db      	lsrs	r3, r3, #3
 800a7ce:	f003 0303 	and.w	r3, r3, #3
 800a7d2:	4a90      	ldr	r2, [pc, #576]	; (800aa14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a7d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a7d8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a7da:	e111      	b.n	800aa00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a7dc:	4b8d      	ldr	r3, [pc, #564]	; (800aa14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a7de:	61bb      	str	r3, [r7, #24]
      break;
 800a7e0:	e10e      	b.n	800aa00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a7e2:	4b8d      	ldr	r3, [pc, #564]	; (800aa18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a7e4:	61bb      	str	r3, [r7, #24]
      break;
 800a7e6:	e10b      	b.n	800aa00 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a7e8:	4b8c      	ldr	r3, [pc, #560]	; (800aa1c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a7ea:	61bb      	str	r3, [r7, #24]
      break;
 800a7ec:	e108      	b.n	800aa00 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a7ee:	4b88      	ldr	r3, [pc, #544]	; (800aa10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7f2:	f003 0303 	and.w	r3, r3, #3
 800a7f6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a7f8:	4b85      	ldr	r3, [pc, #532]	; (800aa10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7fc:	091b      	lsrs	r3, r3, #4
 800a7fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a802:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a804:	4b82      	ldr	r3, [pc, #520]	; (800aa10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a808:	f003 0301 	and.w	r3, r3, #1
 800a80c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a80e:	4b80      	ldr	r3, [pc, #512]	; (800aa10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a812:	08db      	lsrs	r3, r3, #3
 800a814:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	fb02 f303 	mul.w	r3, r2, r3
 800a81e:	ee07 3a90 	vmov	s15, r3
 800a822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a826:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	f000 80e1 	beq.w	800a9f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	2b02      	cmp	r3, #2
 800a836:	f000 8083 	beq.w	800a940 <HAL_RCC_GetSysClockFreq+0x204>
 800a83a:	697b      	ldr	r3, [r7, #20]
 800a83c:	2b02      	cmp	r3, #2
 800a83e:	f200 80a1 	bhi.w	800a984 <HAL_RCC_GetSysClockFreq+0x248>
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d003      	beq.n	800a850 <HAL_RCC_GetSysClockFreq+0x114>
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d056      	beq.n	800a8fc <HAL_RCC_GetSysClockFreq+0x1c0>
 800a84e:	e099      	b.n	800a984 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a850:	4b6f      	ldr	r3, [pc, #444]	; (800aa10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 0320 	and.w	r3, r3, #32
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d02d      	beq.n	800a8b8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a85c:	4b6c      	ldr	r3, [pc, #432]	; (800aa10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	08db      	lsrs	r3, r3, #3
 800a862:	f003 0303 	and.w	r3, r3, #3
 800a866:	4a6b      	ldr	r2, [pc, #428]	; (800aa14 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a868:	fa22 f303 	lsr.w	r3, r2, r3
 800a86c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	ee07 3a90 	vmov	s15, r3
 800a874:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	ee07 3a90 	vmov	s15, r3
 800a87e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a886:	4b62      	ldr	r3, [pc, #392]	; (800aa10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a88e:	ee07 3a90 	vmov	s15, r3
 800a892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a896:	ed97 6a02 	vldr	s12, [r7, #8]
 800a89a:	eddf 5a61 	vldr	s11, [pc, #388]	; 800aa20 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a89e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8b2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a8b6:	e087      	b.n	800a9c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	ee07 3a90 	vmov	s15, r3
 800a8be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8c2:	eddf 6a58 	vldr	s13, [pc, #352]	; 800aa24 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a8c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ca:	4b51      	ldr	r3, [pc, #324]	; (800aa10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8d2:	ee07 3a90 	vmov	s15, r3
 800a8d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8da:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8de:	eddf 5a50 	vldr	s11, [pc, #320]	; 800aa20 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a8e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a8fa:	e065      	b.n	800a9c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	ee07 3a90 	vmov	s15, r3
 800a902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a906:	eddf 6a48 	vldr	s13, [pc, #288]	; 800aa28 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a90a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a90e:	4b40      	ldr	r3, [pc, #256]	; (800aa10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a916:	ee07 3a90 	vmov	s15, r3
 800a91a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a91e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a922:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800aa20 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a92a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a92e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a93a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a93e:	e043      	b.n	800a9c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	ee07 3a90 	vmov	s15, r3
 800a946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a94a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800aa2c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a94e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a952:	4b2f      	ldr	r3, [pc, #188]	; (800aa10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a95a:	ee07 3a90 	vmov	s15, r3
 800a95e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a962:	ed97 6a02 	vldr	s12, [r7, #8]
 800a966:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800aa20 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a96a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a96e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a972:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a97a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a97e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a982:	e021      	b.n	800a9c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	ee07 3a90 	vmov	s15, r3
 800a98a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a98e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800aa28 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a996:	4b1e      	ldr	r3, [pc, #120]	; (800aa10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a99a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a99e:	ee07 3a90 	vmov	s15, r3
 800a9a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a9a6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a9aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800aa20 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a9ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a9b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a9b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a9ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a9be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a9c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a9c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a9c8:	4b11      	ldr	r3, [pc, #68]	; (800aa10 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9cc:	0a5b      	lsrs	r3, r3, #9
 800a9ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	ee07 3a90 	vmov	s15, r3
 800a9dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a9e0:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9ec:	ee17 3a90 	vmov	r3, s15
 800a9f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a9f2:	e005      	b.n	800aa00 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	61bb      	str	r3, [r7, #24]
      break;
 800a9f8:	e002      	b.n	800aa00 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a9fa:	4b07      	ldr	r3, [pc, #28]	; (800aa18 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a9fc:	61bb      	str	r3, [r7, #24]
      break;
 800a9fe:	bf00      	nop
  }

  return sysclockfreq;
 800aa00:	69bb      	ldr	r3, [r7, #24]
}
 800aa02:	4618      	mov	r0, r3
 800aa04:	3724      	adds	r7, #36	; 0x24
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	58024400 	.word	0x58024400
 800aa14:	03d09000 	.word	0x03d09000
 800aa18:	003d0900 	.word	0x003d0900
 800aa1c:	02faf080 	.word	0x02faf080
 800aa20:	46000000 	.word	0x46000000
 800aa24:	4c742400 	.word	0x4c742400
 800aa28:	4a742400 	.word	0x4a742400
 800aa2c:	4c3ebc20 	.word	0x4c3ebc20

0800aa30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b082      	sub	sp, #8
 800aa34:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aa36:	f7ff fe81 	bl	800a73c <HAL_RCC_GetSysClockFreq>
 800aa3a:	4602      	mov	r2, r0
 800aa3c:	4b10      	ldr	r3, [pc, #64]	; (800aa80 <HAL_RCC_GetHCLKFreq+0x50>)
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	0a1b      	lsrs	r3, r3, #8
 800aa42:	f003 030f 	and.w	r3, r3, #15
 800aa46:	490f      	ldr	r1, [pc, #60]	; (800aa84 <HAL_RCC_GetHCLKFreq+0x54>)
 800aa48:	5ccb      	ldrb	r3, [r1, r3]
 800aa4a:	f003 031f 	and.w	r3, r3, #31
 800aa4e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa52:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aa54:	4b0a      	ldr	r3, [pc, #40]	; (800aa80 <HAL_RCC_GetHCLKFreq+0x50>)
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	f003 030f 	and.w	r3, r3, #15
 800aa5c:	4a09      	ldr	r2, [pc, #36]	; (800aa84 <HAL_RCC_GetHCLKFreq+0x54>)
 800aa5e:	5cd3      	ldrb	r3, [r2, r3]
 800aa60:	f003 031f 	and.w	r3, r3, #31
 800aa64:	687a      	ldr	r2, [r7, #4]
 800aa66:	fa22 f303 	lsr.w	r3, r2, r3
 800aa6a:	4a07      	ldr	r2, [pc, #28]	; (800aa88 <HAL_RCC_GetHCLKFreq+0x58>)
 800aa6c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aa6e:	4a07      	ldr	r2, [pc, #28]	; (800aa8c <HAL_RCC_GetHCLKFreq+0x5c>)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800aa74:	4b04      	ldr	r3, [pc, #16]	; (800aa88 <HAL_RCC_GetHCLKFreq+0x58>)
 800aa76:	681b      	ldr	r3, [r3, #0]
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3708      	adds	r7, #8
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	58024400 	.word	0x58024400
 800aa84:	08018c00 	.word	0x08018c00
 800aa88:	24000004 	.word	0x24000004
 800aa8c:	24000000 	.word	0x24000000

0800aa90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800aa94:	f7ff ffcc 	bl	800aa30 <HAL_RCC_GetHCLKFreq>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	4b06      	ldr	r3, [pc, #24]	; (800aab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa9c:	69db      	ldr	r3, [r3, #28]
 800aa9e:	091b      	lsrs	r3, r3, #4
 800aaa0:	f003 0307 	and.w	r3, r3, #7
 800aaa4:	4904      	ldr	r1, [pc, #16]	; (800aab8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800aaa6:	5ccb      	ldrb	r3, [r1, r3]
 800aaa8:	f003 031f 	and.w	r3, r3, #31
 800aaac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	bd80      	pop	{r7, pc}
 800aab4:	58024400 	.word	0x58024400
 800aab8:	08018c00 	.word	0x08018c00

0800aabc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800aac0:	f7ff ffb6 	bl	800aa30 <HAL_RCC_GetHCLKFreq>
 800aac4:	4602      	mov	r2, r0
 800aac6:	4b06      	ldr	r3, [pc, #24]	; (800aae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aac8:	69db      	ldr	r3, [r3, #28]
 800aaca:	0a1b      	lsrs	r3, r3, #8
 800aacc:	f003 0307 	and.w	r3, r3, #7
 800aad0:	4904      	ldr	r1, [pc, #16]	; (800aae4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800aad2:	5ccb      	ldrb	r3, [r1, r3]
 800aad4:	f003 031f 	and.w	r3, r3, #31
 800aad8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800aadc:	4618      	mov	r0, r3
 800aade:	bd80      	pop	{r7, pc}
 800aae0:	58024400 	.word	0x58024400
 800aae4:	08018c00 	.word	0x08018c00

0800aae8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aaec:	b0c6      	sub	sp, #280	; 0x118
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aafa:	2300      	movs	r3, #0
 800aafc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ab00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab08:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ab0c:	2500      	movs	r5, #0
 800ab0e:	ea54 0305 	orrs.w	r3, r4, r5
 800ab12:	d049      	beq.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ab14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab1a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab1e:	d02f      	beq.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ab20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab24:	d828      	bhi.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ab26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab2a:	d01a      	beq.n	800ab62 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ab2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab30:	d822      	bhi.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d003      	beq.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ab36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab3a:	d007      	beq.n	800ab4c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ab3c:	e01c      	b.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab3e:	4bab      	ldr	r3, [pc, #684]	; (800adec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab42:	4aaa      	ldr	r2, [pc, #680]	; (800adec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ab4a:	e01a      	b.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab50:	3308      	adds	r3, #8
 800ab52:	2102      	movs	r1, #2
 800ab54:	4618      	mov	r0, r3
 800ab56:	f002 fa49 	bl	800cfec <RCCEx_PLL2_Config>
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ab60:	e00f      	b.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab66:	3328      	adds	r3, #40	; 0x28
 800ab68:	2102      	movs	r1, #2
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f002 faf0 	bl	800d150 <RCCEx_PLL3_Config>
 800ab70:	4603      	mov	r3, r0
 800ab72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ab76:	e004      	b.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab78:	2301      	movs	r3, #1
 800ab7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ab7e:	e000      	b.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ab80:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d10a      	bne.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ab8a:	4b98      	ldr	r3, [pc, #608]	; (800adec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab8e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ab92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab98:	4a94      	ldr	r2, [pc, #592]	; (800adec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ab9a:	430b      	orrs	r3, r1
 800ab9c:	6513      	str	r3, [r2, #80]	; 0x50
 800ab9e:	e003      	b.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aba0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aba4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800abb4:	f04f 0900 	mov.w	r9, #0
 800abb8:	ea58 0309 	orrs.w	r3, r8, r9
 800abbc:	d047      	beq.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800abbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abc4:	2b04      	cmp	r3, #4
 800abc6:	d82a      	bhi.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800abc8:	a201      	add	r2, pc, #4	; (adr r2, 800abd0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800abca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abce:	bf00      	nop
 800abd0:	0800abe5 	.word	0x0800abe5
 800abd4:	0800abf3 	.word	0x0800abf3
 800abd8:	0800ac09 	.word	0x0800ac09
 800abdc:	0800ac27 	.word	0x0800ac27
 800abe0:	0800ac27 	.word	0x0800ac27
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abe4:	4b81      	ldr	r3, [pc, #516]	; (800adec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800abe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe8:	4a80      	ldr	r2, [pc, #512]	; (800adec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800abea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800abf0:	e01a      	b.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abf6:	3308      	adds	r3, #8
 800abf8:	2100      	movs	r1, #0
 800abfa:	4618      	mov	r0, r3
 800abfc:	f002 f9f6 	bl	800cfec <RCCEx_PLL2_Config>
 800ac00:	4603      	mov	r3, r0
 800ac02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac06:	e00f      	b.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac0c:	3328      	adds	r3, #40	; 0x28
 800ac0e:	2100      	movs	r1, #0
 800ac10:	4618      	mov	r0, r3
 800ac12:	f002 fa9d 	bl	800d150 <RCCEx_PLL3_Config>
 800ac16:	4603      	mov	r3, r0
 800ac18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac1c:	e004      	b.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ac24:	e000      	b.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ac26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d10a      	bne.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ac30:	4b6e      	ldr	r3, [pc, #440]	; (800adec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac34:	f023 0107 	bic.w	r1, r3, #7
 800ac38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac3e:	4a6b      	ldr	r2, [pc, #428]	; (800adec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ac40:	430b      	orrs	r3, r1
 800ac42:	6513      	str	r3, [r2, #80]	; 0x50
 800ac44:	e003      	b.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac46:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ac4a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ac4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac56:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 800ac5a:	f04f 0b00 	mov.w	fp, #0
 800ac5e:	ea5a 030b 	orrs.w	r3, sl, fp
 800ac62:	d05b      	beq.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ac64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac68:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ac6c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ac70:	d03b      	beq.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x202>
 800ac72:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800ac76:	d834      	bhi.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ac78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac7c:	d037      	beq.n	800acee <HAL_RCCEx_PeriphCLKConfig+0x206>
 800ac7e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac82:	d82e      	bhi.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ac84:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac88:	d033      	beq.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800ac8a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac8e:	d828      	bhi.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ac90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac94:	d01a      	beq.n	800accc <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800ac96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac9a:	d822      	bhi.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d003      	beq.n	800aca8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800aca0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aca4:	d007      	beq.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800aca6:	e01c      	b.n	800ace2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aca8:	4b50      	ldr	r3, [pc, #320]	; (800adec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800acaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acac:	4a4f      	ldr	r2, [pc, #316]	; (800adec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800acae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800acb4:	e01e      	b.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acba:	3308      	adds	r3, #8
 800acbc:	2100      	movs	r1, #0
 800acbe:	4618      	mov	r0, r3
 800acc0:	f002 f994 	bl	800cfec <RCCEx_PLL2_Config>
 800acc4:	4603      	mov	r3, r0
 800acc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800acca:	e013      	b.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800accc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acd0:	3328      	adds	r3, #40	; 0x28
 800acd2:	2100      	movs	r1, #0
 800acd4:	4618      	mov	r0, r3
 800acd6:	f002 fa3b 	bl	800d150 <RCCEx_PLL3_Config>
 800acda:	4603      	mov	r3, r0
 800acdc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ace0:	e008      	b.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ace2:	2301      	movs	r3, #1
 800ace4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ace8:	e004      	b.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800acea:	bf00      	nop
 800acec:	e002      	b.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800acee:	bf00      	nop
 800acf0:	e000      	b.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800acf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acf4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10b      	bne.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800acfc:	4b3b      	ldr	r3, [pc, #236]	; (800adec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800acfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad00:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ad04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ad0c:	4a37      	ldr	r2, [pc, #220]	; (800adec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad0e:	430b      	orrs	r3, r1
 800ad10:	6593      	str	r3, [r2, #88]	; 0x58
 800ad12:	e003      	b.n	800ad1c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad14:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ad18:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ad1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad24:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ad28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ad32:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ad36:	460b      	mov	r3, r1
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	d05d      	beq.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ad3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad40:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ad44:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800ad48:	d03b      	beq.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800ad4a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800ad4e:	d834      	bhi.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ad50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad54:	d037      	beq.n	800adc6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800ad56:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ad5a:	d82e      	bhi.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ad5c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad60:	d033      	beq.n	800adca <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800ad62:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ad66:	d828      	bhi.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ad68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad6c:	d01a      	beq.n	800ada4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800ad6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad72:	d822      	bhi.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d003      	beq.n	800ad80 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ad78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad7c:	d007      	beq.n	800ad8e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ad7e:	e01c      	b.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad80:	4b1a      	ldr	r3, [pc, #104]	; (800adec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad84:	4a19      	ldr	r2, [pc, #100]	; (800adec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ad86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad8c:	e01e      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad92:	3308      	adds	r3, #8
 800ad94:	2100      	movs	r1, #0
 800ad96:	4618      	mov	r0, r3
 800ad98:	f002 f928 	bl	800cfec <RCCEx_PLL2_Config>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ada2:	e013      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ada4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ada8:	3328      	adds	r3, #40	; 0x28
 800adaa:	2100      	movs	r1, #0
 800adac:	4618      	mov	r0, r3
 800adae:	f002 f9cf 	bl	800d150 <RCCEx_PLL3_Config>
 800adb2:	4603      	mov	r3, r0
 800adb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800adb8:	e008      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800adba:	2301      	movs	r3, #1
 800adbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800adc0:	e004      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800adc2:	bf00      	nop
 800adc4:	e002      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800adc6:	bf00      	nop
 800adc8:	e000      	b.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800adca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800add0:	2b00      	cmp	r3, #0
 800add2:	d10d      	bne.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800add4:	4b05      	ldr	r3, [pc, #20]	; (800adec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800add6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800add8:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800addc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ade0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ade4:	4a01      	ldr	r2, [pc, #4]	; (800adec <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800ade6:	430b      	orrs	r3, r1
 800ade8:	6593      	str	r3, [r2, #88]	; 0x58
 800adea:	e005      	b.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 800adec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adf0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800adf4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800adf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae00:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ae04:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ae08:	2300      	movs	r3, #0
 800ae0a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ae0e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ae12:	460b      	mov	r3, r1
 800ae14:	4313      	orrs	r3, r2
 800ae16:	d03a      	beq.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800ae18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae1e:	2b30      	cmp	r3, #48	; 0x30
 800ae20:	d01f      	beq.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800ae22:	2b30      	cmp	r3, #48	; 0x30
 800ae24:	d819      	bhi.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ae26:	2b20      	cmp	r3, #32
 800ae28:	d00c      	beq.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800ae2a:	2b20      	cmp	r3, #32
 800ae2c:	d815      	bhi.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x372>
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d019      	beq.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ae32:	2b10      	cmp	r3, #16
 800ae34:	d111      	bne.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae36:	4baa      	ldr	r3, [pc, #680]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae3a:	4aa9      	ldr	r2, [pc, #676]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae40:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ae42:	e011      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ae44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae48:	3308      	adds	r3, #8
 800ae4a:	2102      	movs	r1, #2
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f002 f8cd 	bl	800cfec <RCCEx_PLL2_Config>
 800ae52:	4603      	mov	r3, r0
 800ae54:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ae58:	e006      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ae60:	e002      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ae62:	bf00      	nop
 800ae64:	e000      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800ae66:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10a      	bne.n	800ae86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ae70:	4b9b      	ldr	r3, [pc, #620]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae74:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ae78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae7e:	4a98      	ldr	r2, [pc, #608]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ae80:	430b      	orrs	r3, r1
 800ae82:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae84:	e003      	b.n	800ae8e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae86:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ae8a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ae8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae96:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ae9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ae9e:	2300      	movs	r3, #0
 800aea0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aea4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800aea8:	460b      	mov	r3, r1
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	d051      	beq.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800aeae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aeb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aeb8:	d035      	beq.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800aeba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aebe:	d82e      	bhi.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800aec0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aec4:	d031      	beq.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x442>
 800aec6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aeca:	d828      	bhi.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800aecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aed0:	d01a      	beq.n	800af08 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800aed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aed6:	d822      	bhi.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x436>
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d003      	beq.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800aedc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aee0:	d007      	beq.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800aee2:	e01c      	b.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aee4:	4b7e      	ldr	r3, [pc, #504]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee8:	4a7d      	ldr	r2, [pc, #500]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800aeea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aeee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aef0:	e01c      	b.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef6:	3308      	adds	r3, #8
 800aef8:	2100      	movs	r1, #0
 800aefa:	4618      	mov	r0, r3
 800aefc:	f002 f876 	bl	800cfec <RCCEx_PLL2_Config>
 800af00:	4603      	mov	r3, r0
 800af02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800af06:	e011      	b.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af0c:	3328      	adds	r3, #40	; 0x28
 800af0e:	2100      	movs	r1, #0
 800af10:	4618      	mov	r0, r3
 800af12:	f002 f91d 	bl	800d150 <RCCEx_PLL3_Config>
 800af16:	4603      	mov	r3, r0
 800af18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800af1c:	e006      	b.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af1e:	2301      	movs	r3, #1
 800af20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800af24:	e002      	b.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800af26:	bf00      	nop
 800af28:	e000      	b.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800af2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af2c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af30:	2b00      	cmp	r3, #0
 800af32:	d10a      	bne.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800af34:	4b6a      	ldr	r3, [pc, #424]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af38:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800af3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af42:	4a67      	ldr	r2, [pc, #412]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800af44:	430b      	orrs	r3, r1
 800af46:	6513      	str	r3, [r2, #80]	; 0x50
 800af48:	e003      	b.n	800af52 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800af4e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800af52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800af5e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800af62:	2300      	movs	r3, #0
 800af64:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af68:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800af6c:	460b      	mov	r3, r1
 800af6e:	4313      	orrs	r3, r2
 800af70:	d053      	beq.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800af72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af7c:	d033      	beq.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800af7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af82:	d82c      	bhi.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800af84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af88:	d02f      	beq.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x502>
 800af8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af8e:	d826      	bhi.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800af90:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800af94:	d02b      	beq.n	800afee <HAL_RCCEx_PeriphCLKConfig+0x506>
 800af96:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800af9a:	d820      	bhi.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800af9c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afa0:	d012      	beq.n	800afc8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800afa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800afa6:	d81a      	bhi.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d022      	beq.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800afac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afb0:	d115      	bne.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afb6:	3308      	adds	r3, #8
 800afb8:	2101      	movs	r1, #1
 800afba:	4618      	mov	r0, r3
 800afbc:	f002 f816 	bl	800cfec <RCCEx_PLL2_Config>
 800afc0:	4603      	mov	r3, r0
 800afc2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800afc6:	e015      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afcc:	3328      	adds	r3, #40	; 0x28
 800afce:	2101      	movs	r1, #1
 800afd0:	4618      	mov	r0, r3
 800afd2:	f002 f8bd 	bl	800d150 <RCCEx_PLL3_Config>
 800afd6:	4603      	mov	r3, r0
 800afd8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800afdc:	e00a      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800afe4:	e006      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800afe6:	bf00      	nop
 800afe8:	e004      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800afea:	bf00      	nop
 800afec:	e002      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800afee:	bf00      	nop
 800aff0:	e000      	b.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800aff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aff4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d10a      	bne.n	800b012 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800affc:	4b38      	ldr	r3, [pc, #224]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800affe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b000:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b004:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b00a:	4a35      	ldr	r2, [pc, #212]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b00c:	430b      	orrs	r3, r1
 800b00e:	6513      	str	r3, [r2, #80]	; 0x50
 800b010:	e003      	b.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b012:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b016:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b01e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b022:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b026:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b02a:	2300      	movs	r3, #0
 800b02c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b030:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b034:	460b      	mov	r3, r1
 800b036:	4313      	orrs	r3, r2
 800b038:	d058      	beq.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b03a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b03e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b042:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b046:	d033      	beq.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800b048:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b04c:	d82c      	bhi.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b04e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b052:	d02f      	beq.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800b054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b058:	d826      	bhi.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b05a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b05e:	d02b      	beq.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800b060:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b064:	d820      	bhi.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b066:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b06a:	d012      	beq.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800b06c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b070:	d81a      	bhi.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800b072:	2b00      	cmp	r3, #0
 800b074:	d022      	beq.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b07a:	d115      	bne.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b07c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b080:	3308      	adds	r3, #8
 800b082:	2101      	movs	r1, #1
 800b084:	4618      	mov	r0, r3
 800b086:	f001 ffb1 	bl	800cfec <RCCEx_PLL2_Config>
 800b08a:	4603      	mov	r3, r0
 800b08c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b090:	e015      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b096:	3328      	adds	r3, #40	; 0x28
 800b098:	2101      	movs	r1, #1
 800b09a:	4618      	mov	r0, r3
 800b09c:	f002 f858 	bl	800d150 <RCCEx_PLL3_Config>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b0a6:	e00a      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b0ae:	e006      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b0b0:	bf00      	nop
 800b0b2:	e004      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b0b4:	bf00      	nop
 800b0b6:	e002      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b0b8:	bf00      	nop
 800b0ba:	e000      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800b0bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0be:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d10e      	bne.n	800b0e4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b0c6:	4b06      	ldr	r3, [pc, #24]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0ca:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b0ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b0d6:	4a02      	ldr	r2, [pc, #8]	; (800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800b0d8:	430b      	orrs	r3, r1
 800b0da:	6593      	str	r3, [r2, #88]	; 0x58
 800b0dc:	e006      	b.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x604>
 800b0de:	bf00      	nop
 800b0e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b0e8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b0ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b0f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b102:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b106:	460b      	mov	r3, r1
 800b108:	4313      	orrs	r3, r2
 800b10a:	d037      	beq.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b110:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b112:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b116:	d00e      	beq.n	800b136 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800b118:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b11c:	d816      	bhi.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x664>
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d018      	beq.n	800b154 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800b122:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b126:	d111      	bne.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b128:	4bc4      	ldr	r3, [pc, #784]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b12a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b12c:	4ac3      	ldr	r2, [pc, #780]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b12e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b132:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b134:	e00f      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b13a:	3308      	adds	r3, #8
 800b13c:	2101      	movs	r1, #1
 800b13e:	4618      	mov	r0, r3
 800b140:	f001 ff54 	bl	800cfec <RCCEx_PLL2_Config>
 800b144:	4603      	mov	r3, r0
 800b146:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b14a:	e004      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b14c:	2301      	movs	r3, #1
 800b14e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b152:	e000      	b.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800b154:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b156:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d10a      	bne.n	800b174 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b15e:	4bb7      	ldr	r3, [pc, #732]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b160:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b162:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b16a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b16c:	4ab3      	ldr	r2, [pc, #716]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b16e:	430b      	orrs	r3, r1
 800b170:	6513      	str	r3, [r2, #80]	; 0x50
 800b172:	e003      	b.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b174:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b178:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b17c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b184:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b188:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b18c:	2300      	movs	r3, #0
 800b18e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b192:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b196:	460b      	mov	r3, r1
 800b198:	4313      	orrs	r3, r2
 800b19a:	d039      	beq.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b19c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1a2:	2b03      	cmp	r3, #3
 800b1a4:	d81c      	bhi.n	800b1e0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800b1a6:	a201      	add	r2, pc, #4	; (adr r2, 800b1ac <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800b1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1ac:	0800b1e9 	.word	0x0800b1e9
 800b1b0:	0800b1bd 	.word	0x0800b1bd
 800b1b4:	0800b1cb 	.word	0x0800b1cb
 800b1b8:	0800b1e9 	.word	0x0800b1e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1bc:	4b9f      	ldr	r3, [pc, #636]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b1be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c0:	4a9e      	ldr	r2, [pc, #632]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b1c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b1c8:	e00f      	b.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b1ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1ce:	3308      	adds	r3, #8
 800b1d0:	2102      	movs	r1, #2
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f001 ff0a 	bl	800cfec <RCCEx_PLL2_Config>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b1de:	e004      	b.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b1e6:	e000      	b.n	800b1ea <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800b1e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d10a      	bne.n	800b208 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b1f2:	4b92      	ldr	r3, [pc, #584]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b1f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1f6:	f023 0103 	bic.w	r1, r3, #3
 800b1fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b200:	4a8e      	ldr	r2, [pc, #568]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b202:	430b      	orrs	r3, r1
 800b204:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b206:	e003      	b.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b208:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b20c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b210:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b218:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b21c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b220:	2300      	movs	r3, #0
 800b222:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b226:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b22a:	460b      	mov	r3, r1
 800b22c:	4313      	orrs	r3, r2
 800b22e:	f000 8099 	beq.w	800b364 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b232:	4b83      	ldr	r3, [pc, #524]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	4a82      	ldr	r2, [pc, #520]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b23c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b23e:	f7f8 fd67 	bl	8003d10 <HAL_GetTick>
 800b242:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b246:	e00b      	b.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b248:	f7f8 fd62 	bl	8003d10 <HAL_GetTick>
 800b24c:	4602      	mov	r2, r0
 800b24e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b252:	1ad3      	subs	r3, r2, r3
 800b254:	2b64      	cmp	r3, #100	; 0x64
 800b256:	d903      	bls.n	800b260 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800b258:	2303      	movs	r3, #3
 800b25a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b25e:	e005      	b.n	800b26c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b260:	4b77      	ldr	r3, [pc, #476]	; (800b440 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d0ed      	beq.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800b26c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b270:	2b00      	cmp	r3, #0
 800b272:	d173      	bne.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b274:	4b71      	ldr	r3, [pc, #452]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b276:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b278:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b27c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b280:	4053      	eors	r3, r2
 800b282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b286:	2b00      	cmp	r3, #0
 800b288:	d015      	beq.n	800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b28a:	4b6c      	ldr	r3, [pc, #432]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b28c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b28e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b292:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b296:	4b69      	ldr	r3, [pc, #420]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b29a:	4a68      	ldr	r2, [pc, #416]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b29c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2a0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b2a2:	4b66      	ldr	r3, [pc, #408]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2a6:	4a65      	ldr	r2, [pc, #404]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b2ac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b2ae:	4a63      	ldr	r2, [pc, #396]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b2b4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b2b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b2be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2c2:	d118      	bne.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2c4:	f7f8 fd24 	bl	8003d10 <HAL_GetTick>
 800b2c8:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b2cc:	e00d      	b.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b2ce:	f7f8 fd1f 	bl	8003d10 <HAL_GetTick>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b2d8:	1ad2      	subs	r2, r2, r3
 800b2da:	f241 3388 	movw	r3, #5000	; 0x1388
 800b2de:	429a      	cmp	r2, r3
 800b2e0:	d903      	bls.n	800b2ea <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 800b2e8:	e005      	b.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b2ea:	4b54      	ldr	r3, [pc, #336]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b2ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b2ee:	f003 0302 	and.w	r3, r3, #2
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d0eb      	beq.n	800b2ce <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800b2f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d129      	bne.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b2fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b302:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b30a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b30e:	d10e      	bne.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0x846>
 800b310:	4b4a      	ldr	r3, [pc, #296]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b312:	691b      	ldr	r3, [r3, #16]
 800b314:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b31c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b320:	091a      	lsrs	r2, r3, #4
 800b322:	4b48      	ldr	r3, [pc, #288]	; (800b444 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800b324:	4013      	ands	r3, r2
 800b326:	4a45      	ldr	r2, [pc, #276]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b328:	430b      	orrs	r3, r1
 800b32a:	6113      	str	r3, [r2, #16]
 800b32c:	e005      	b.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x852>
 800b32e:	4b43      	ldr	r3, [pc, #268]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b330:	691b      	ldr	r3, [r3, #16]
 800b332:	4a42      	ldr	r2, [pc, #264]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b334:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b338:	6113      	str	r3, [r2, #16]
 800b33a:	4b40      	ldr	r3, [pc, #256]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b33c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b33e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b342:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b346:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b34a:	4a3c      	ldr	r2, [pc, #240]	; (800b43c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800b34c:	430b      	orrs	r3, r1
 800b34e:	6713      	str	r3, [r2, #112]	; 0x70
 800b350:	e008      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b352:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b356:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 800b35a:	e003      	b.n	800b364 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b35c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b360:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b364:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36c:	f002 0301 	and.w	r3, r2, #1
 800b370:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b374:	2300      	movs	r3, #0
 800b376:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b37a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b37e:	460b      	mov	r3, r1
 800b380:	4313      	orrs	r3, r2
 800b382:	f000 808f 	beq.w	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b386:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b38a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b38c:	2b28      	cmp	r3, #40	; 0x28
 800b38e:	d871      	bhi.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800b390:	a201      	add	r2, pc, #4	; (adr r2, 800b398 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800b392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b396:	bf00      	nop
 800b398:	0800b47d 	.word	0x0800b47d
 800b39c:	0800b475 	.word	0x0800b475
 800b3a0:	0800b475 	.word	0x0800b475
 800b3a4:	0800b475 	.word	0x0800b475
 800b3a8:	0800b475 	.word	0x0800b475
 800b3ac:	0800b475 	.word	0x0800b475
 800b3b0:	0800b475 	.word	0x0800b475
 800b3b4:	0800b475 	.word	0x0800b475
 800b3b8:	0800b449 	.word	0x0800b449
 800b3bc:	0800b475 	.word	0x0800b475
 800b3c0:	0800b475 	.word	0x0800b475
 800b3c4:	0800b475 	.word	0x0800b475
 800b3c8:	0800b475 	.word	0x0800b475
 800b3cc:	0800b475 	.word	0x0800b475
 800b3d0:	0800b475 	.word	0x0800b475
 800b3d4:	0800b475 	.word	0x0800b475
 800b3d8:	0800b45f 	.word	0x0800b45f
 800b3dc:	0800b475 	.word	0x0800b475
 800b3e0:	0800b475 	.word	0x0800b475
 800b3e4:	0800b475 	.word	0x0800b475
 800b3e8:	0800b475 	.word	0x0800b475
 800b3ec:	0800b475 	.word	0x0800b475
 800b3f0:	0800b475 	.word	0x0800b475
 800b3f4:	0800b475 	.word	0x0800b475
 800b3f8:	0800b47d 	.word	0x0800b47d
 800b3fc:	0800b475 	.word	0x0800b475
 800b400:	0800b475 	.word	0x0800b475
 800b404:	0800b475 	.word	0x0800b475
 800b408:	0800b475 	.word	0x0800b475
 800b40c:	0800b475 	.word	0x0800b475
 800b410:	0800b475 	.word	0x0800b475
 800b414:	0800b475 	.word	0x0800b475
 800b418:	0800b47d 	.word	0x0800b47d
 800b41c:	0800b475 	.word	0x0800b475
 800b420:	0800b475 	.word	0x0800b475
 800b424:	0800b475 	.word	0x0800b475
 800b428:	0800b475 	.word	0x0800b475
 800b42c:	0800b475 	.word	0x0800b475
 800b430:	0800b475 	.word	0x0800b475
 800b434:	0800b475 	.word	0x0800b475
 800b438:	0800b47d 	.word	0x0800b47d
 800b43c:	58024400 	.word	0x58024400
 800b440:	58024800 	.word	0x58024800
 800b444:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b448:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b44c:	3308      	adds	r3, #8
 800b44e:	2101      	movs	r1, #1
 800b450:	4618      	mov	r0, r3
 800b452:	f001 fdcb 	bl	800cfec <RCCEx_PLL2_Config>
 800b456:	4603      	mov	r3, r0
 800b458:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b45c:	e00f      	b.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b462:	3328      	adds	r3, #40	; 0x28
 800b464:	2101      	movs	r1, #1
 800b466:	4618      	mov	r0, r3
 800b468:	f001 fe72 	bl	800d150 <RCCEx_PLL3_Config>
 800b46c:	4603      	mov	r3, r0
 800b46e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b472:	e004      	b.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b474:	2301      	movs	r3, #1
 800b476:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b47a:	e000      	b.n	800b47e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800b47c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b47e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b482:	2b00      	cmp	r3, #0
 800b484:	d10a      	bne.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b486:	4bbf      	ldr	r3, [pc, #764]	; (800b784 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b488:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b48a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b48e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b492:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b494:	4abb      	ldr	r2, [pc, #748]	; (800b784 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b496:	430b      	orrs	r3, r1
 800b498:	6553      	str	r3, [r2, #84]	; 0x54
 800b49a:	e003      	b.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b49c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b4a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ac:	f002 0302 	and.w	r3, r2, #2
 800b4b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b4ba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b4be:	460b      	mov	r3, r1
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	d041      	beq.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b4c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b4ca:	2b05      	cmp	r3, #5
 800b4cc:	d824      	bhi.n	800b518 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 800b4ce:	a201      	add	r2, pc, #4	; (adr r2, 800b4d4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 800b4d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4d4:	0800b521 	.word	0x0800b521
 800b4d8:	0800b4ed 	.word	0x0800b4ed
 800b4dc:	0800b503 	.word	0x0800b503
 800b4e0:	0800b521 	.word	0x0800b521
 800b4e4:	0800b521 	.word	0x0800b521
 800b4e8:	0800b521 	.word	0x0800b521
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b4f0:	3308      	adds	r3, #8
 800b4f2:	2101      	movs	r1, #1
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	f001 fd79 	bl	800cfec <RCCEx_PLL2_Config>
 800b4fa:	4603      	mov	r3, r0
 800b4fc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b500:	e00f      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b502:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b506:	3328      	adds	r3, #40	; 0x28
 800b508:	2101      	movs	r1, #1
 800b50a:	4618      	mov	r0, r3
 800b50c:	f001 fe20 	bl	800d150 <RCCEx_PLL3_Config>
 800b510:	4603      	mov	r3, r0
 800b512:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b516:	e004      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b518:	2301      	movs	r3, #1
 800b51a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b51e:	e000      	b.n	800b522 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 800b520:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b522:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b526:	2b00      	cmp	r3, #0
 800b528:	d10a      	bne.n	800b540 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b52a:	4b96      	ldr	r3, [pc, #600]	; (800b784 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b52c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b52e:	f023 0107 	bic.w	r1, r3, #7
 800b532:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b538:	4a92      	ldr	r2, [pc, #584]	; (800b784 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b53a:	430b      	orrs	r3, r1
 800b53c:	6553      	str	r3, [r2, #84]	; 0x54
 800b53e:	e003      	b.n	800b548 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b540:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b544:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b550:	f002 0304 	and.w	r3, r2, #4
 800b554:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b558:	2300      	movs	r3, #0
 800b55a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b55e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b562:	460b      	mov	r3, r1
 800b564:	4313      	orrs	r3, r2
 800b566:	d044      	beq.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b568:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b56c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b570:	2b05      	cmp	r3, #5
 800b572:	d825      	bhi.n	800b5c0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800b574:	a201      	add	r2, pc, #4	; (adr r2, 800b57c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800b576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b57a:	bf00      	nop
 800b57c:	0800b5c9 	.word	0x0800b5c9
 800b580:	0800b595 	.word	0x0800b595
 800b584:	0800b5ab 	.word	0x0800b5ab
 800b588:	0800b5c9 	.word	0x0800b5c9
 800b58c:	0800b5c9 	.word	0x0800b5c9
 800b590:	0800b5c9 	.word	0x0800b5c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b594:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b598:	3308      	adds	r3, #8
 800b59a:	2101      	movs	r1, #1
 800b59c:	4618      	mov	r0, r3
 800b59e:	f001 fd25 	bl	800cfec <RCCEx_PLL2_Config>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b5a8:	e00f      	b.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5ae:	3328      	adds	r3, #40	; 0x28
 800b5b0:	2101      	movs	r1, #1
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f001 fdcc 	bl	800d150 <RCCEx_PLL3_Config>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b5be:	e004      	b.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5c0:	2301      	movs	r3, #1
 800b5c2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b5c6:	e000      	b.n	800b5ca <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800b5c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d10b      	bne.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b5d2:	4b6c      	ldr	r3, [pc, #432]	; (800b784 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b5d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5d6:	f023 0107 	bic.w	r1, r3, #7
 800b5da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5e2:	4a68      	ldr	r2, [pc, #416]	; (800b784 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b5e4:	430b      	orrs	r3, r1
 800b5e6:	6593      	str	r3, [r2, #88]	; 0x58
 800b5e8:	e003      	b.n	800b5f2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b5ee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b5f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b5f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5fa:	f002 0320 	and.w	r3, r2, #32
 800b5fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b602:	2300      	movs	r3, #0
 800b604:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b608:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b60c:	460b      	mov	r3, r1
 800b60e:	4313      	orrs	r3, r2
 800b610:	d055      	beq.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b612:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b61a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b61e:	d033      	beq.n	800b688 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 800b620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b624:	d82c      	bhi.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b62a:	d02f      	beq.n	800b68c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800b62c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b630:	d826      	bhi.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b632:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b636:	d02b      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800b638:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b63c:	d820      	bhi.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b63e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b642:	d012      	beq.n	800b66a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800b644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b648:	d81a      	bhi.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d022      	beq.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800b64e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b652:	d115      	bne.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b654:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b658:	3308      	adds	r3, #8
 800b65a:	2100      	movs	r1, #0
 800b65c:	4618      	mov	r0, r3
 800b65e:	f001 fcc5 	bl	800cfec <RCCEx_PLL2_Config>
 800b662:	4603      	mov	r3, r0
 800b664:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b668:	e015      	b.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b66a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b66e:	3328      	adds	r3, #40	; 0x28
 800b670:	2102      	movs	r1, #2
 800b672:	4618      	mov	r0, r3
 800b674:	f001 fd6c 	bl	800d150 <RCCEx_PLL3_Config>
 800b678:	4603      	mov	r3, r0
 800b67a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b67e:	e00a      	b.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b680:	2301      	movs	r3, #1
 800b682:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b686:	e006      	b.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b688:	bf00      	nop
 800b68a:	e004      	b.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b68c:	bf00      	nop
 800b68e:	e002      	b.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b690:	bf00      	nop
 800b692:	e000      	b.n	800b696 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800b694:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b696:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10b      	bne.n	800b6b6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b69e:	4b39      	ldr	r3, [pc, #228]	; (800b784 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b6a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6a2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b6a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6ae:	4a35      	ldr	r2, [pc, #212]	; (800b784 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b6b0:	430b      	orrs	r3, r1
 800b6b2:	6553      	str	r3, [r2, #84]	; 0x54
 800b6b4:	e003      	b.n	800b6be <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b6ba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b6be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b6ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b6d4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b6d8:	460b      	mov	r3, r1
 800b6da:	4313      	orrs	r3, r2
 800b6dc:	d058      	beq.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b6e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b6ea:	d033      	beq.n	800b754 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800b6ec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b6f0:	d82c      	bhi.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b6f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6f6:	d02f      	beq.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800b6f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b6fc:	d826      	bhi.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b6fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b702:	d02b      	beq.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800b704:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b708:	d820      	bhi.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b70a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b70e:	d012      	beq.n	800b736 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800b710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b714:	d81a      	bhi.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800b716:	2b00      	cmp	r3, #0
 800b718:	d022      	beq.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800b71a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b71e:	d115      	bne.n	800b74c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b724:	3308      	adds	r3, #8
 800b726:	2100      	movs	r1, #0
 800b728:	4618      	mov	r0, r3
 800b72a:	f001 fc5f 	bl	800cfec <RCCEx_PLL2_Config>
 800b72e:	4603      	mov	r3, r0
 800b730:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b734:	e015      	b.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b736:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b73a:	3328      	adds	r3, #40	; 0x28
 800b73c:	2102      	movs	r1, #2
 800b73e:	4618      	mov	r0, r3
 800b740:	f001 fd06 	bl	800d150 <RCCEx_PLL3_Config>
 800b744:	4603      	mov	r3, r0
 800b746:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b74a:	e00a      	b.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b74c:	2301      	movs	r3, #1
 800b74e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b752:	e006      	b.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b754:	bf00      	nop
 800b756:	e004      	b.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b758:	bf00      	nop
 800b75a:	e002      	b.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b75c:	bf00      	nop
 800b75e:	e000      	b.n	800b762 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800b760:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b762:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b766:	2b00      	cmp	r3, #0
 800b768:	d10e      	bne.n	800b788 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b76a:	4b06      	ldr	r3, [pc, #24]	; (800b784 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b76c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b76e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b776:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b77a:	4a02      	ldr	r2, [pc, #8]	; (800b784 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800b77c:	430b      	orrs	r3, r1
 800b77e:	6593      	str	r3, [r2, #88]	; 0x58
 800b780:	e006      	b.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800b782:	bf00      	nop
 800b784:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b788:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b78c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b790:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b798:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b79c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b7a6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	d055      	beq.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b7b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b7b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b7bc:	d033      	beq.n	800b826 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800b7be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b7c2:	d82c      	bhi.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b7c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7c8:	d02f      	beq.n	800b82a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800b7ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b7ce:	d826      	bhi.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b7d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b7d4:	d02b      	beq.n	800b82e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800b7d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b7da:	d820      	bhi.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b7dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7e0:	d012      	beq.n	800b808 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800b7e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b7e6:	d81a      	bhi.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d022      	beq.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800b7ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7f0:	d115      	bne.n	800b81e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7f6:	3308      	adds	r3, #8
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f001 fbf6 	bl	800cfec <RCCEx_PLL2_Config>
 800b800:	4603      	mov	r3, r0
 800b802:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b806:	e015      	b.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b808:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b80c:	3328      	adds	r3, #40	; 0x28
 800b80e:	2102      	movs	r1, #2
 800b810:	4618      	mov	r0, r3
 800b812:	f001 fc9d 	bl	800d150 <RCCEx_PLL3_Config>
 800b816:	4603      	mov	r3, r0
 800b818:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b81c:	e00a      	b.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b81e:	2301      	movs	r3, #1
 800b820:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b824:	e006      	b.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b826:	bf00      	nop
 800b828:	e004      	b.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b82a:	bf00      	nop
 800b82c:	e002      	b.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b82e:	bf00      	nop
 800b830:	e000      	b.n	800b834 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800b832:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b834:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d10b      	bne.n	800b854 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b83c:	4ba0      	ldr	r3, [pc, #640]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b83e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b840:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b848:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b84c:	4a9c      	ldr	r2, [pc, #624]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b84e:	430b      	orrs	r3, r1
 800b850:	6593      	str	r3, [r2, #88]	; 0x58
 800b852:	e003      	b.n	800b85c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b854:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b858:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800b85c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b864:	f002 0308 	and.w	r3, r2, #8
 800b868:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b86c:	2300      	movs	r3, #0
 800b86e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b872:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b876:	460b      	mov	r3, r1
 800b878:	4313      	orrs	r3, r2
 800b87a:	d01e      	beq.n	800b8ba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800b87c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b880:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b884:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b888:	d10c      	bne.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b88a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b88e:	3328      	adds	r3, #40	; 0x28
 800b890:	2102      	movs	r1, #2
 800b892:	4618      	mov	r0, r3
 800b894:	f001 fc5c 	bl	800d150 <RCCEx_PLL3_Config>
 800b898:	4603      	mov	r3, r0
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d002      	beq.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800b8a4:	4b86      	ldr	r3, [pc, #536]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b8a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b8ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b8b4:	4a82      	ldr	r2, [pc, #520]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b8b6:	430b      	orrs	r3, r1
 800b8b8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b8ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c2:	f002 0310 	and.w	r3, r2, #16
 800b8c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b8d0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	4313      	orrs	r3, r2
 800b8d8:	d01e      	beq.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b8da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b8e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8e6:	d10c      	bne.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ec:	3328      	adds	r3, #40	; 0x28
 800b8ee:	2102      	movs	r1, #2
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f001 fc2d 	bl	800d150 <RCCEx_PLL3_Config>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d002      	beq.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b902:	4b6f      	ldr	r3, [pc, #444]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b906:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b90a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b90e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b912:	4a6b      	ldr	r2, [pc, #428]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b914:	430b      	orrs	r3, r1
 800b916:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b920:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b924:	67bb      	str	r3, [r7, #120]	; 0x78
 800b926:	2300      	movs	r3, #0
 800b928:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b92a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b92e:	460b      	mov	r3, r1
 800b930:	4313      	orrs	r3, r2
 800b932:	d03e      	beq.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b934:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b938:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b93c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b940:	d022      	beq.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800b942:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b946:	d81b      	bhi.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d003      	beq.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800b94c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b950:	d00b      	beq.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800b952:	e015      	b.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b958:	3308      	adds	r3, #8
 800b95a:	2100      	movs	r1, #0
 800b95c:	4618      	mov	r0, r3
 800b95e:	f001 fb45 	bl	800cfec <RCCEx_PLL2_Config>
 800b962:	4603      	mov	r3, r0
 800b964:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b968:	e00f      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b96a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b96e:	3328      	adds	r3, #40	; 0x28
 800b970:	2102      	movs	r1, #2
 800b972:	4618      	mov	r0, r3
 800b974:	f001 fbec 	bl	800d150 <RCCEx_PLL3_Config>
 800b978:	4603      	mov	r3, r0
 800b97a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b97e:	e004      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b980:	2301      	movs	r3, #1
 800b982:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800b986:	e000      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800b988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b98a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d10b      	bne.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b992:	4b4b      	ldr	r3, [pc, #300]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b996:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b99a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b99e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b9a2:	4a47      	ldr	r2, [pc, #284]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b9a4:	430b      	orrs	r3, r1
 800b9a6:	6593      	str	r3, [r2, #88]	; 0x58
 800b9a8:	e003      	b.n	800b9b2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9aa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800b9ae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b9b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ba:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b9be:	673b      	str	r3, [r7, #112]	; 0x70
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	677b      	str	r3, [r7, #116]	; 0x74
 800b9c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	d03b      	beq.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b9ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b9d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b9da:	d01f      	beq.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800b9dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b9e0:	d818      	bhi.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800b9e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9e6:	d003      	beq.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800b9e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b9ec:	d007      	beq.n	800b9fe <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800b9ee:	e011      	b.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9f0:	4b33      	ldr	r3, [pc, #204]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b9f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9f4:	4a32      	ldr	r2, [pc, #200]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800b9f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b9fc:	e00f      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba02:	3328      	adds	r3, #40	; 0x28
 800ba04:	2101      	movs	r1, #1
 800ba06:	4618      	mov	r0, r3
 800ba08:	f001 fba2 	bl	800d150 <RCCEx_PLL3_Config>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800ba12:	e004      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba14:	2301      	movs	r3, #1
 800ba16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba1a:	e000      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800ba1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10b      	bne.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ba26:	4b26      	ldr	r3, [pc, #152]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba2a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ba2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ba36:	4a22      	ldr	r2, [pc, #136]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba38:	430b      	orrs	r3, r1
 800ba3a:	6553      	str	r3, [r2, #84]	; 0x54
 800ba3c:	e003      	b.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800ba42:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ba46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800ba52:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba54:	2300      	movs	r3, #0
 800ba56:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba58:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ba5c:	460b      	mov	r3, r1
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	d034      	beq.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ba62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d003      	beq.n	800ba74 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800ba6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba70:	d007      	beq.n	800ba82 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800ba72:	e011      	b.n	800ba98 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba74:	4b12      	ldr	r3, [pc, #72]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba78:	4a11      	ldr	r2, [pc, #68]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800ba7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ba80:	e00e      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba86:	3308      	adds	r3, #8
 800ba88:	2102      	movs	r1, #2
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f001 faae 	bl	800cfec <RCCEx_PLL2_Config>
 800ba90:	4603      	mov	r3, r0
 800ba92:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ba96:	e003      	b.n	800baa0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800ba9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baa0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d10d      	bne.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800baa8:	4b05      	ldr	r3, [pc, #20]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800baaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800baac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bab6:	4a02      	ldr	r2, [pc, #8]	; (800bac0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800bab8:	430b      	orrs	r3, r1
 800baba:	64d3      	str	r3, [r2, #76]	; 0x4c
 800babc:	e006      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800babe:	bf00      	nop
 800bac0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bac4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bac8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bacc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad4:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bad8:	663b      	str	r3, [r7, #96]	; 0x60
 800bada:	2300      	movs	r3, #0
 800badc:	667b      	str	r3, [r7, #100]	; 0x64
 800bade:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bae2:	460b      	mov	r3, r1
 800bae4:	4313      	orrs	r3, r2
 800bae6:	d00c      	beq.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baec:	3328      	adds	r3, #40	; 0x28
 800baee:	2102      	movs	r1, #2
 800baf0:	4618      	mov	r0, r3
 800baf2:	f001 fb2d 	bl	800d150 <RCCEx_PLL3_Config>
 800baf6:	4603      	mov	r3, r0
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d002      	beq.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800bafc:	2301      	movs	r3, #1
 800bafe:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bb02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bb0e:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb10:	2300      	movs	r3, #0
 800bb12:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb14:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bb18:	460b      	mov	r3, r1
 800bb1a:	4313      	orrs	r3, r2
 800bb1c:	d036      	beq.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bb1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb28:	d018      	beq.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800bb2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bb2e:	d811      	bhi.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bb30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb34:	d014      	beq.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800bb36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bb3a:	d80b      	bhi.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d011      	beq.n	800bb64 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800bb40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb44:	d106      	bne.n	800bb54 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb46:	4bb7      	ldr	r3, [pc, #732]	; (800be24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bb48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb4a:	4ab6      	ldr	r2, [pc, #728]	; (800be24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bb4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bb52:	e008      	b.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb54:	2301      	movs	r3, #1
 800bb56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 800bb5a:	e004      	b.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bb5c:	bf00      	nop
 800bb5e:	e002      	b.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bb60:	bf00      	nop
 800bb62:	e000      	b.n	800bb66 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800bb64:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb66:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d10a      	bne.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bb6e:	4bad      	ldr	r3, [pc, #692]	; (800be24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bb70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bb76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb7c:	4aa9      	ldr	r2, [pc, #676]	; (800be24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bb7e:	430b      	orrs	r3, r1
 800bb80:	6553      	str	r3, [r2, #84]	; 0x54
 800bb82:	e003      	b.n	800bb8c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bb88:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bb8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb94:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bb98:	653b      	str	r3, [r7, #80]	; 0x50
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	657b      	str	r3, [r7, #84]	; 0x54
 800bb9e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bba2:	460b      	mov	r3, r1
 800bba4:	4313      	orrs	r3, r2
 800bba6:	d009      	beq.n	800bbbc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bba8:	4b9e      	ldr	r3, [pc, #632]	; (800be24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bbaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bbb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbb6:	4a9b      	ldr	r2, [pc, #620]	; (800be24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bbb8:	430b      	orrs	r3, r1
 800bbba:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bbbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bbc8:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbca:	2300      	movs	r3, #0
 800bbcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bbce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bbd2:	460b      	mov	r3, r1
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	d009      	beq.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bbd8:	4b92      	ldr	r3, [pc, #584]	; (800be24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bbda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbdc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bbe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbe4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbe6:	4a8f      	ldr	r2, [pc, #572]	; (800be24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bbe8:	430b      	orrs	r3, r1
 800bbea:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bbec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bbf8:	643b      	str	r3, [r7, #64]	; 0x40
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	647b      	str	r3, [r7, #68]	; 0x44
 800bbfe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bc02:	460b      	mov	r3, r1
 800bc04:	4313      	orrs	r3, r2
 800bc06:	d00e      	beq.n	800bc26 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bc08:	4b86      	ldr	r3, [pc, #536]	; (800be24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc0a:	691b      	ldr	r3, [r3, #16]
 800bc0c:	4a85      	ldr	r2, [pc, #532]	; (800be24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc0e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bc12:	6113      	str	r3, [r2, #16]
 800bc14:	4b83      	ldr	r3, [pc, #524]	; (800be24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc16:	6919      	ldr	r1, [r3, #16]
 800bc18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc20:	4a80      	ldr	r2, [pc, #512]	; (800be24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc22:	430b      	orrs	r3, r1
 800bc24:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bc26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bc32:	63bb      	str	r3, [r7, #56]	; 0x38
 800bc34:	2300      	movs	r3, #0
 800bc36:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bc38:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bc3c:	460b      	mov	r3, r1
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	d009      	beq.n	800bc56 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bc42:	4b78      	ldr	r3, [pc, #480]	; (800be24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc46:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bc4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc50:	4a74      	ldr	r2, [pc, #464]	; (800be24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc52:	430b      	orrs	r3, r1
 800bc54:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bc56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc5e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bc62:	633b      	str	r3, [r7, #48]	; 0x30
 800bc64:	2300      	movs	r3, #0
 800bc66:	637b      	str	r3, [r7, #52]	; 0x34
 800bc68:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bc6c:	460b      	mov	r3, r1
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	d00a      	beq.n	800bc88 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bc72:	4b6c      	ldr	r3, [pc, #432]	; (800be24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc76:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bc7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc82:	4a68      	ldr	r2, [pc, #416]	; (800be24 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800bc84:	430b      	orrs	r3, r1
 800bc86:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bc88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc90:	2100      	movs	r1, #0
 800bc92:	62b9      	str	r1, [r7, #40]	; 0x28
 800bc94:	f003 0301 	and.w	r3, r3, #1
 800bc98:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc9a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bc9e:	460b      	mov	r3, r1
 800bca0:	4313      	orrs	r3, r2
 800bca2:	d011      	beq.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bca8:	3308      	adds	r3, #8
 800bcaa:	2100      	movs	r1, #0
 800bcac:	4618      	mov	r0, r3
 800bcae:	f001 f99d 	bl	800cfec <RCCEx_PLL2_Config>
 800bcb2:	4603      	mov	r3, r0
 800bcb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bcb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d003      	beq.n	800bcc8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcc4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bcc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd0:	2100      	movs	r1, #0
 800bcd2:	6239      	str	r1, [r7, #32]
 800bcd4:	f003 0302 	and.w	r3, r3, #2
 800bcd8:	627b      	str	r3, [r7, #36]	; 0x24
 800bcda:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bcde:	460b      	mov	r3, r1
 800bce0:	4313      	orrs	r3, r2
 800bce2:	d011      	beq.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bce8:	3308      	adds	r3, #8
 800bcea:	2101      	movs	r1, #1
 800bcec:	4618      	mov	r0, r3
 800bcee:	f001 f97d 	bl	800cfec <RCCEx_PLL2_Config>
 800bcf2:	4603      	mov	r3, r0
 800bcf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bcf8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d003      	beq.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bd08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd10:	2100      	movs	r1, #0
 800bd12:	61b9      	str	r1, [r7, #24]
 800bd14:	f003 0304 	and.w	r3, r3, #4
 800bd18:	61fb      	str	r3, [r7, #28]
 800bd1a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bd1e:	460b      	mov	r3, r1
 800bd20:	4313      	orrs	r3, r2
 800bd22:	d011      	beq.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd28:	3308      	adds	r3, #8
 800bd2a:	2102      	movs	r1, #2
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	f001 f95d 	bl	800cfec <RCCEx_PLL2_Config>
 800bd32:	4603      	mov	r3, r0
 800bd34:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bd38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d003      	beq.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd44:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bd48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd50:	2100      	movs	r1, #0
 800bd52:	6139      	str	r1, [r7, #16]
 800bd54:	f003 0308 	and.w	r3, r3, #8
 800bd58:	617b      	str	r3, [r7, #20]
 800bd5a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bd5e:	460b      	mov	r3, r1
 800bd60:	4313      	orrs	r3, r2
 800bd62:	d011      	beq.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd68:	3328      	adds	r3, #40	; 0x28
 800bd6a:	2100      	movs	r1, #0
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f001 f9ef 	bl	800d150 <RCCEx_PLL3_Config>
 800bd72:	4603      	mov	r3, r0
 800bd74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 800bd78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d003      	beq.n	800bd88 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd80:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bd84:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bd88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd90:	2100      	movs	r1, #0
 800bd92:	60b9      	str	r1, [r7, #8]
 800bd94:	f003 0310 	and.w	r3, r3, #16
 800bd98:	60fb      	str	r3, [r7, #12]
 800bd9a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bd9e:	460b      	mov	r3, r1
 800bda0:	4313      	orrs	r3, r2
 800bda2:	d011      	beq.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bda4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bda8:	3328      	adds	r3, #40	; 0x28
 800bdaa:	2101      	movs	r1, #1
 800bdac:	4618      	mov	r0, r3
 800bdae:	f001 f9cf 	bl	800d150 <RCCEx_PLL3_Config>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bdb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d003      	beq.n	800bdc8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdc4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bdc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd0:	2100      	movs	r1, #0
 800bdd2:	6039      	str	r1, [r7, #0]
 800bdd4:	f003 0320 	and.w	r3, r3, #32
 800bdd8:	607b      	str	r3, [r7, #4]
 800bdda:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bdde:	460b      	mov	r3, r1
 800bde0:	4313      	orrs	r3, r2
 800bde2:	d011      	beq.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bde4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bde8:	3328      	adds	r3, #40	; 0x28
 800bdea:	2102      	movs	r1, #2
 800bdec:	4618      	mov	r0, r3
 800bdee:	f001 f9af 	bl	800d150 <RCCEx_PLL3_Config>
 800bdf2:	4603      	mov	r3, r0
 800bdf4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 800bdf8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d003      	beq.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be00:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800be04:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 800be08:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d101      	bne.n	800be14 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800be10:	2300      	movs	r3, #0
 800be12:	e000      	b.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800be14:	2301      	movs	r3, #1
}
 800be16:	4618      	mov	r0, r3
 800be18:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800be1c:	46bd      	mov	sp, r7
 800be1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be22:	bf00      	nop
 800be24:	58024400 	.word	0x58024400

0800be28 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b090      	sub	sp, #64	; 0x40
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800be32:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be36:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800be3a:	430b      	orrs	r3, r1
 800be3c:	f040 8094 	bne.w	800bf68 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800be40:	4b9b      	ldr	r3, [pc, #620]	; (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be44:	f003 0307 	and.w	r3, r3, #7
 800be48:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800be4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be4c:	2b04      	cmp	r3, #4
 800be4e:	f200 8087 	bhi.w	800bf60 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800be52:	a201      	add	r2, pc, #4	; (adr r2, 800be58 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800be54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be58:	0800be6d 	.word	0x0800be6d
 800be5c:	0800be95 	.word	0x0800be95
 800be60:	0800bebd 	.word	0x0800bebd
 800be64:	0800bf59 	.word	0x0800bf59
 800be68:	0800bee5 	.word	0x0800bee5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be6c:	4b90      	ldr	r3, [pc, #576]	; (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be78:	d108      	bne.n	800be8c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be7e:	4618      	mov	r0, r3
 800be80:	f000 ff62 	bl	800cd48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be88:	f000 bc93 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800be8c:	2300      	movs	r3, #0
 800be8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be90:	f000 bc8f 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be94:	4b86      	ldr	r3, [pc, #536]	; (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bea0:	d108      	bne.n	800beb4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bea2:	f107 0318 	add.w	r3, r7, #24
 800bea6:	4618      	mov	r0, r3
 800bea8:	f000 fca6 	bl	800c7f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800beb0:	f000 bc7f 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800beb4:	2300      	movs	r3, #0
 800beb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800beb8:	f000 bc7b 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bebc:	4b7c      	ldr	r3, [pc, #496]	; (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bec8:	d108      	bne.n	800bedc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800beca:	f107 030c 	add.w	r3, r7, #12
 800bece:	4618      	mov	r0, r3
 800bed0:	f000 fde6 	bl	800caa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bed8:	f000 bc6b 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bedc:	2300      	movs	r3, #0
 800bede:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bee0:	f000 bc67 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bee4:	4b72      	ldr	r3, [pc, #456]	; (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bee8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800beec:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800beee:	4b70      	ldr	r3, [pc, #448]	; (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f003 0304 	and.w	r3, r3, #4
 800bef6:	2b04      	cmp	r3, #4
 800bef8:	d10c      	bne.n	800bf14 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800befa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800befc:	2b00      	cmp	r3, #0
 800befe:	d109      	bne.n	800bf14 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bf00:	4b6b      	ldr	r3, [pc, #428]	; (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	08db      	lsrs	r3, r3, #3
 800bf06:	f003 0303 	and.w	r3, r3, #3
 800bf0a:	4a6a      	ldr	r2, [pc, #424]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800bf0c:	fa22 f303 	lsr.w	r3, r2, r3
 800bf10:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf12:	e01f      	b.n	800bf54 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bf14:	4b66      	ldr	r3, [pc, #408]	; (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf20:	d106      	bne.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bf22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf28:	d102      	bne.n	800bf30 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bf2a:	4b63      	ldr	r3, [pc, #396]	; (800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800bf2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf2e:	e011      	b.n	800bf54 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bf30:	4b5f      	ldr	r3, [pc, #380]	; (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf3c:	d106      	bne.n	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bf3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf44:	d102      	bne.n	800bf4c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf46:	4b5d      	ldr	r3, [pc, #372]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf4a:	e003      	b.n	800bf54 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf50:	f000 bc2f 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800bf54:	f000 bc2d 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf58:	4b59      	ldr	r3, [pc, #356]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bf5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf5c:	f000 bc29 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800bf60:	2300      	movs	r3, #0
 800bf62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf64:	f000 bc25 	b.w	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800bf68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf6c:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800bf70:	430b      	orrs	r3, r1
 800bf72:	f040 80a7 	bne.w	800c0c4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800bf76:	4b4e      	ldr	r3, [pc, #312]	; (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bf78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf7a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800bf7e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bf80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf86:	d054      	beq.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800bf88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bf8e:	f200 808b 	bhi.w	800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bf92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf94:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bf98:	f000 8083 	beq.w	800c0a2 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 800bf9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bfa2:	f200 8081 	bhi.w	800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bfa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bfac:	d02f      	beq.n	800c00e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bfb4:	d878      	bhi.n	800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 800bfb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d004      	beq.n	800bfc6 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 800bfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfbe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bfc2:	d012      	beq.n	800bfea <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 800bfc4:	e070      	b.n	800c0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bfc6:	4b3a      	ldr	r3, [pc, #232]	; (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bfce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bfd2:	d107      	bne.n	800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f000 feb5 	bl	800cd48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfe2:	e3e6      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfe8:	e3e3      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bfea:	4b31      	ldr	r3, [pc, #196]	; (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bff2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bff6:	d107      	bne.n	800c008 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bff8:	f107 0318 	add.w	r3, r7, #24
 800bffc:	4618      	mov	r0, r3
 800bffe:	f000 fbfb 	bl	800c7f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c002:	69bb      	ldr	r3, [r7, #24]
 800c004:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c006:	e3d4      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c008:	2300      	movs	r3, #0
 800c00a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c00c:	e3d1      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c00e:	4b28      	ldr	r3, [pc, #160]	; (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c016:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c01a:	d107      	bne.n	800c02c <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c01c:	f107 030c 	add.w	r3, r7, #12
 800c020:	4618      	mov	r0, r3
 800c022:	f000 fd3d 	bl	800caa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c02a:	e3c2      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c02c:	2300      	movs	r3, #0
 800c02e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c030:	e3bf      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c032:	4b1f      	ldr	r3, [pc, #124]	; (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c036:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c03a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c03c:	4b1c      	ldr	r3, [pc, #112]	; (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f003 0304 	and.w	r3, r3, #4
 800c044:	2b04      	cmp	r3, #4
 800c046:	d10c      	bne.n	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 800c048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d109      	bne.n	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c04e:	4b18      	ldr	r3, [pc, #96]	; (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	08db      	lsrs	r3, r3, #3
 800c054:	f003 0303 	and.w	r3, r3, #3
 800c058:	4a16      	ldr	r2, [pc, #88]	; (800c0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800c05a:	fa22 f303 	lsr.w	r3, r2, r3
 800c05e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c060:	e01e      	b.n	800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c062:	4b13      	ldr	r3, [pc, #76]	; (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c06a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c06e:	d106      	bne.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 800c070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c076:	d102      	bne.n	800c07e <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c078:	4b0f      	ldr	r3, [pc, #60]	; (800c0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 800c07a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c07c:	e010      	b.n	800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c07e:	4b0c      	ldr	r3, [pc, #48]	; (800c0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c086:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c08a:	d106      	bne.n	800c09a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800c08c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c08e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c092:	d102      	bne.n	800c09a <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c094:	4b09      	ldr	r3, [pc, #36]	; (800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c096:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c098:	e002      	b.n	800c0a0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c09a:	2300      	movs	r3, #0
 800c09c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c09e:	e388      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c0a0:	e387      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c0a2:	4b07      	ldr	r3, [pc, #28]	; (800c0c0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c0a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0a6:	e384      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0ac:	e381      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c0ae:	bf00      	nop
 800c0b0:	58024400 	.word	0x58024400
 800c0b4:	03d09000 	.word	0x03d09000
 800c0b8:	003d0900 	.word	0x003d0900
 800c0bc:	02faf080 	.word	0x02faf080
 800c0c0:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c0c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0c8:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c0cc:	430b      	orrs	r3, r1
 800c0ce:	f040 809c 	bne.w	800c20a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c0d2:	4b9e      	ldr	r3, [pc, #632]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c0d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0d6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c0da:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c0e2:	d054      	beq.n	800c18e <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 800c0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c0ea:	f200 808b 	bhi.w	800c204 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c0f4:	f000 8083 	beq.w	800c1fe <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 800c0f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c0fe:	f200 8081 	bhi.w	800c204 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c104:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c108:	d02f      	beq.n	800c16a <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 800c10a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c110:	d878      	bhi.n	800c204 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800c112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c114:	2b00      	cmp	r3, #0
 800c116:	d004      	beq.n	800c122 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800c118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c11a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c11e:	d012      	beq.n	800c146 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800c120:	e070      	b.n	800c204 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c122:	4b8a      	ldr	r3, [pc, #552]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c12a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c12e:	d107      	bne.n	800c140 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c134:	4618      	mov	r0, r3
 800c136:	f000 fe07 	bl	800cd48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c13c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c13e:	e338      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c140:	2300      	movs	r3, #0
 800c142:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c144:	e335      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c146:	4b81      	ldr	r3, [pc, #516]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c14e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c152:	d107      	bne.n	800c164 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c154:	f107 0318 	add.w	r3, r7, #24
 800c158:	4618      	mov	r0, r3
 800c15a:	f000 fb4d 	bl	800c7f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c162:	e326      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c164:	2300      	movs	r3, #0
 800c166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c168:	e323      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c16a:	4b78      	ldr	r3, [pc, #480]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c172:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c176:	d107      	bne.n	800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c178:	f107 030c 	add.w	r3, r7, #12
 800c17c:	4618      	mov	r0, r3
 800c17e:	f000 fc8f 	bl	800caa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c186:	e314      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c188:	2300      	movs	r3, #0
 800c18a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c18c:	e311      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c18e:	4b6f      	ldr	r3, [pc, #444]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c192:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c196:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c198:	4b6c      	ldr	r3, [pc, #432]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	f003 0304 	and.w	r3, r3, #4
 800c1a0:	2b04      	cmp	r3, #4
 800c1a2:	d10c      	bne.n	800c1be <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 800c1a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d109      	bne.n	800c1be <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1aa:	4b68      	ldr	r3, [pc, #416]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	08db      	lsrs	r3, r3, #3
 800c1b0:	f003 0303 	and.w	r3, r3, #3
 800c1b4:	4a66      	ldr	r2, [pc, #408]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c1b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1bc:	e01e      	b.n	800c1fc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c1be:	4b63      	ldr	r3, [pc, #396]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c1ca:	d106      	bne.n	800c1da <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c1cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1d2:	d102      	bne.n	800c1da <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c1d4:	4b5f      	ldr	r3, [pc, #380]	; (800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1d8:	e010      	b.n	800c1fc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c1da:	4b5c      	ldr	r3, [pc, #368]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1e6:	d106      	bne.n	800c1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 800c1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1ee:	d102      	bne.n	800c1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c1f0:	4b59      	ldr	r3, [pc, #356]	; (800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1f4:	e002      	b.n	800c1fc <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c1fa:	e2da      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c1fc:	e2d9      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c1fe:	4b57      	ldr	r3, [pc, #348]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c200:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c202:	e2d6      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c204:	2300      	movs	r3, #0
 800c206:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c208:	e2d3      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c20a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c20e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c212:	430b      	orrs	r3, r1
 800c214:	f040 80a7 	bne.w	800c366 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c218:	4b4c      	ldr	r3, [pc, #304]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c21a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c21c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c220:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c224:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c228:	d055      	beq.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 800c22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c230:	f200 8096 	bhi.w	800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c236:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c23a:	f000 8084 	beq.w	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 800c23e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c240:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c244:	f200 808c 	bhi.w	800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c24e:	d030      	beq.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c256:	f200 8083 	bhi.w	800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 800c25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d004      	beq.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 800c260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c266:	d012      	beq.n	800c28e <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 800c268:	e07a      	b.n	800c360 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c26a:	4b38      	ldr	r3, [pc, #224]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c272:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c276:	d107      	bne.n	800c288 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c27c:	4618      	mov	r0, r3
 800c27e:	f000 fd63 	bl	800cd48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c284:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c286:	e294      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c288:	2300      	movs	r3, #0
 800c28a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c28c:	e291      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c28e:	4b2f      	ldr	r3, [pc, #188]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c296:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c29a:	d107      	bne.n	800c2ac <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c29c:	f107 0318 	add.w	r3, r7, #24
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f000 faa9 	bl	800c7f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2a6:	69bb      	ldr	r3, [r7, #24]
 800c2a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2aa:	e282      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2b0:	e27f      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c2b2:	4b26      	ldr	r3, [pc, #152]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2be:	d107      	bne.n	800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c2c0:	f107 030c 	add.w	r3, r7, #12
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f000 fbeb 	bl	800caa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2ce:	e270      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2d4:	e26d      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c2d6:	4b1d      	ldr	r3, [pc, #116]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c2de:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c2e0:	4b1a      	ldr	r3, [pc, #104]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2e2:	681b      	ldr	r3, [r3, #0]
 800c2e4:	f003 0304 	and.w	r3, r3, #4
 800c2e8:	2b04      	cmp	r3, #4
 800c2ea:	d10c      	bne.n	800c306 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 800c2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d109      	bne.n	800c306 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2f2:	4b16      	ldr	r3, [pc, #88]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	08db      	lsrs	r3, r3, #3
 800c2f8:	f003 0303 	and.w	r3, r3, #3
 800c2fc:	4a14      	ldr	r2, [pc, #80]	; (800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 800c2fe:	fa22 f303 	lsr.w	r3, r2, r3
 800c302:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c304:	e01e      	b.n	800c344 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c306:	4b11      	ldr	r3, [pc, #68]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c30e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c312:	d106      	bne.n	800c322 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 800c314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c316:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c31a:	d102      	bne.n	800c322 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c31c:	4b0d      	ldr	r3, [pc, #52]	; (800c354 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 800c31e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c320:	e010      	b.n	800c344 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c322:	4b0a      	ldr	r3, [pc, #40]	; (800c34c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c32a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c32e:	d106      	bne.n	800c33e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800c330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c332:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c336:	d102      	bne.n	800c33e <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c338:	4b07      	ldr	r3, [pc, #28]	; (800c358 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c33a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c33c:	e002      	b.n	800c344 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c33e:	2300      	movs	r3, #0
 800c340:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c342:	e236      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c344:	e235      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c346:	4b05      	ldr	r3, [pc, #20]	; (800c35c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c348:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c34a:	e232      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c34c:	58024400 	.word	0x58024400
 800c350:	03d09000 	.word	0x03d09000
 800c354:	003d0900 	.word	0x003d0900
 800c358:	02faf080 	.word	0x02faf080
 800c35c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800c360:	2300      	movs	r3, #0
 800c362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c364:	e225      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c366:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c36a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c36e:	430b      	orrs	r3, r1
 800c370:	f040 8085 	bne.w	800c47e <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c374:	4b9c      	ldr	r3, [pc, #624]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c378:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c37c:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c37e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c384:	d06b      	beq.n	800c45e <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 800c386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c388:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c38c:	d874      	bhi.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c38e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c390:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c394:	d056      	beq.n	800c444 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 800c396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c398:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c39c:	d86c      	bhi.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c3a4:	d03b      	beq.n	800c41e <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 800c3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c3ac:	d864      	bhi.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3b4:	d021      	beq.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 800c3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c3bc:	d85c      	bhi.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 800c3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d004      	beq.n	800c3ce <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 800c3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3ca:	d004      	beq.n	800c3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 800c3cc:	e054      	b.n	800c478 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c3ce:	f7fe fb5f 	bl	800aa90 <HAL_RCC_GetPCLK1Freq>
 800c3d2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c3d4:	e1ed      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3d6:	4b84      	ldr	r3, [pc, #528]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3e2:	d107      	bne.n	800c3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3e4:	f107 0318 	add.w	r3, r7, #24
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f000 fa05 	bl	800c7f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3f2:	e1de      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c3f4:	2300      	movs	r3, #0
 800c3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3f8:	e1db      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3fa:	4b7b      	ldr	r3, [pc, #492]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c402:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c406:	d107      	bne.n	800c418 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c408:	f107 030c 	add.w	r3, r7, #12
 800c40c:	4618      	mov	r0, r3
 800c40e:	f000 fb47 	bl	800caa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c412:	693b      	ldr	r3, [r7, #16]
 800c414:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c416:	e1cc      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c418:	2300      	movs	r3, #0
 800c41a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c41c:	e1c9      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c41e:	4b72      	ldr	r3, [pc, #456]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f003 0304 	and.w	r3, r3, #4
 800c426:	2b04      	cmp	r3, #4
 800c428:	d109      	bne.n	800c43e <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c42a:	4b6f      	ldr	r3, [pc, #444]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	08db      	lsrs	r3, r3, #3
 800c430:	f003 0303 	and.w	r3, r3, #3
 800c434:	4a6d      	ldr	r2, [pc, #436]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c436:	fa22 f303 	lsr.w	r3, r2, r3
 800c43a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c43c:	e1b9      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c43e:	2300      	movs	r3, #0
 800c440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c442:	e1b6      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c444:	4b68      	ldr	r3, [pc, #416]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c44c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c450:	d102      	bne.n	800c458 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 800c452:	4b67      	ldr	r3, [pc, #412]	; (800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c454:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c456:	e1ac      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c458:	2300      	movs	r3, #0
 800c45a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c45c:	e1a9      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c45e:	4b62      	ldr	r3, [pc, #392]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c466:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c46a:	d102      	bne.n	800c472 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 800c46c:	4b61      	ldr	r3, [pc, #388]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c46e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c470:	e19f      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c472:	2300      	movs	r3, #0
 800c474:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c476:	e19c      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c478:	2300      	movs	r3, #0
 800c47a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c47c:	e199      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c47e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c482:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c486:	430b      	orrs	r3, r1
 800c488:	d173      	bne.n	800c572 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c48a:	4b57      	ldr	r3, [pc, #348]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c48c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c48e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c492:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c496:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c49a:	d02f      	beq.n	800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 800c49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4a2:	d863      	bhi.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 800c4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d004      	beq.n	800c4b4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800c4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4b0:	d012      	beq.n	800c4d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 800c4b2:	e05b      	b.n	800c56c <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4b4:	4b4c      	ldr	r3, [pc, #304]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4c0:	d107      	bne.n	800c4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4c2:	f107 0318 	add.w	r3, r7, #24
 800c4c6:	4618      	mov	r0, r3
 800c4c8:	f000 f996 	bl	800c7f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c4cc:	69bb      	ldr	r3, [r7, #24]
 800c4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4d0:	e16f      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4d6:	e16c      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4d8:	4b43      	ldr	r3, [pc, #268]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4e4:	d107      	bne.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4e6:	f107 030c 	add.w	r3, r7, #12
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 fad8 	bl	800caa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4f4:	e15d      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4fa:	e15a      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c4fc:	4b3a      	ldr	r3, [pc, #232]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c4fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c500:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c504:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c506:	4b38      	ldr	r3, [pc, #224]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	f003 0304 	and.w	r3, r3, #4
 800c50e:	2b04      	cmp	r3, #4
 800c510:	d10c      	bne.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 800c512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c514:	2b00      	cmp	r3, #0
 800c516:	d109      	bne.n	800c52c <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c518:	4b33      	ldr	r3, [pc, #204]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	08db      	lsrs	r3, r3, #3
 800c51e:	f003 0303 	and.w	r3, r3, #3
 800c522:	4a32      	ldr	r2, [pc, #200]	; (800c5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 800c524:	fa22 f303 	lsr.w	r3, r2, r3
 800c528:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c52a:	e01e      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c52c:	4b2e      	ldr	r3, [pc, #184]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c534:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c538:	d106      	bne.n	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 800c53a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c53c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c540:	d102      	bne.n	800c548 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c542:	4b2b      	ldr	r3, [pc, #172]	; (800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 800c544:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c546:	e010      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c548:	4b27      	ldr	r3, [pc, #156]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c554:	d106      	bne.n	800c564 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 800c556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c558:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c55c:	d102      	bne.n	800c564 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c55e:	4b25      	ldr	r3, [pc, #148]	; (800c5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 800c560:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c562:	e002      	b.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c564:	2300      	movs	r3, #0
 800c566:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c568:	e123      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c56a:	e122      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c56c:	2300      	movs	r3, #0
 800c56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c570:	e11f      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c572:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c576:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c57a:	430b      	orrs	r3, r1
 800c57c:	d13c      	bne.n	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c57e:	4b1a      	ldr	r3, [pc, #104]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c586:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d004      	beq.n	800c598 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800c58e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c594:	d012      	beq.n	800c5bc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 800c596:	e023      	b.n	800c5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c598:	4b13      	ldr	r3, [pc, #76]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5a4:	d107      	bne.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c5a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f000 fbcc 	bl	800cd48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5b4:	e0fd      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5ba:	e0fa      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5bc:	4b0a      	ldr	r3, [pc, #40]	; (800c5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5c8:	d107      	bne.n	800c5da <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5ca:	f107 0318 	add.w	r3, r7, #24
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f000 f912 	bl	800c7f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c5d4:	6a3b      	ldr	r3, [r7, #32]
 800c5d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5d8:	e0eb      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5de:	e0e8      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e4:	e0e5      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 800c5e6:	bf00      	nop
 800c5e8:	58024400 	.word	0x58024400
 800c5ec:	03d09000 	.word	0x03d09000
 800c5f0:	003d0900 	.word	0x003d0900
 800c5f4:	02faf080 	.word	0x02faf080
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c5f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5fc:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c600:	430b      	orrs	r3, r1
 800c602:	f040 8085 	bne.w	800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c606:	4b6d      	ldr	r3, [pc, #436]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c60a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c60e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c616:	d06b      	beq.n	800c6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800c618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c61e:	d874      	bhi.n	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c626:	d056      	beq.n	800c6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 800c628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c62a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c62e:	d86c      	bhi.n	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c632:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c636:	d03b      	beq.n	800c6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 800c638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c63e:	d864      	bhi.n	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c646:	d021      	beq.n	800c68c <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 800c648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c64a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c64e:	d85c      	bhi.n	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 800c650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c652:	2b00      	cmp	r3, #0
 800c654:	d004      	beq.n	800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 800c656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c658:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c65c:	d004      	beq.n	800c668 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 800c65e:	e054      	b.n	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c660:	f000 f8b4 	bl	800c7cc <HAL_RCCEx_GetD3PCLK1Freq>
 800c664:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c666:	e0a4      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c668:	4b54      	ldr	r3, [pc, #336]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c670:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c674:	d107      	bne.n	800c686 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c676:	f107 0318 	add.w	r3, r7, #24
 800c67a:	4618      	mov	r0, r3
 800c67c:	f000 f8bc 	bl	800c7f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c680:	69fb      	ldr	r3, [r7, #28]
 800c682:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c684:	e095      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c686:	2300      	movs	r3, #0
 800c688:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c68a:	e092      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c68c:	4b4b      	ldr	r3, [pc, #300]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c694:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c698:	d107      	bne.n	800c6aa <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c69a:	f107 030c 	add.w	r3, r7, #12
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f000 f9fe 	bl	800caa0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6a8:	e083      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ae:	e080      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c6b0:	4b42      	ldr	r3, [pc, #264]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f003 0304 	and.w	r3, r3, #4
 800c6b8:	2b04      	cmp	r3, #4
 800c6ba:	d109      	bne.n	800c6d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c6bc:	4b3f      	ldr	r3, [pc, #252]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	08db      	lsrs	r3, r3, #3
 800c6c2:	f003 0303 	and.w	r3, r3, #3
 800c6c6:	4a3e      	ldr	r2, [pc, #248]	; (800c7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 800c6c8:	fa22 f303 	lsr.w	r3, r2, r3
 800c6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6ce:	e070      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6d4:	e06d      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c6d6:	4b39      	ldr	r3, [pc, #228]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c6e2:	d102      	bne.n	800c6ea <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 800c6e4:	4b37      	ldr	r3, [pc, #220]	; (800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800c6e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6e8:	e063      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ee:	e060      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c6f0:	4b32      	ldr	r3, [pc, #200]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6fc:	d102      	bne.n	800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 800c6fe:	4b32      	ldr	r3, [pc, #200]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c700:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c702:	e056      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c704:	2300      	movs	r3, #0
 800c706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c708:	e053      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c70a:	2300      	movs	r3, #0
 800c70c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c70e:	e050      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c710:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c714:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c718:	430b      	orrs	r3, r1
 800c71a:	d148      	bne.n	800c7ae <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c71c:	4b27      	ldr	r3, [pc, #156]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c71e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c720:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c724:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c728:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c72c:	d02a      	beq.n	800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 800c72e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c730:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c734:	d838      	bhi.n	800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800c736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d004      	beq.n	800c746 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 800c73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c742:	d00d      	beq.n	800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 800c744:	e030      	b.n	800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c746:	4b1d      	ldr	r3, [pc, #116]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c74e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c752:	d102      	bne.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 800c754:	4b1c      	ldr	r3, [pc, #112]	; (800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800c756:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c758:	e02b      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c75a:	2300      	movs	r3, #0
 800c75c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c75e:	e028      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c760:	4b16      	ldr	r3, [pc, #88]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c768:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c76c:	d107      	bne.n	800c77e <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c76e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c772:	4618      	mov	r0, r3
 800c774:	f000 fae8 	bl	800cd48 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c77c:	e019      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c782:	e016      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c784:	4b0d      	ldr	r3, [pc, #52]	; (800c7bc <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c78c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c790:	d107      	bne.n	800c7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c792:	f107 0318 	add.w	r3, r7, #24
 800c796:	4618      	mov	r0, r3
 800c798:	f000 f82e 	bl	800c7f8 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7a0:	e007      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7a6:	e004      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ac:	e001      	b.n	800c7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c7b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3740      	adds	r7, #64	; 0x40
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	58024400 	.word	0x58024400
 800c7c0:	03d09000 	.word	0x03d09000
 800c7c4:	003d0900 	.word	0x003d0900
 800c7c8:	02faf080 	.word	0x02faf080

0800c7cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c7d0:	f7fe f92e 	bl	800aa30 <HAL_RCC_GetHCLKFreq>
 800c7d4:	4602      	mov	r2, r0
 800c7d6:	4b06      	ldr	r3, [pc, #24]	; (800c7f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c7d8:	6a1b      	ldr	r3, [r3, #32]
 800c7da:	091b      	lsrs	r3, r3, #4
 800c7dc:	f003 0307 	and.w	r3, r3, #7
 800c7e0:	4904      	ldr	r1, [pc, #16]	; (800c7f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c7e2:	5ccb      	ldrb	r3, [r1, r3]
 800c7e4:	f003 031f 	and.w	r3, r3, #31
 800c7e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	bd80      	pop	{r7, pc}
 800c7f0:	58024400 	.word	0x58024400
 800c7f4:	08018c00 	.word	0x08018c00

0800c7f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b089      	sub	sp, #36	; 0x24
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c800:	4ba1      	ldr	r3, [pc, #644]	; (800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c804:	f003 0303 	and.w	r3, r3, #3
 800c808:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c80a:	4b9f      	ldr	r3, [pc, #636]	; (800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c80c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c80e:	0b1b      	lsrs	r3, r3, #12
 800c810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c814:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c816:	4b9c      	ldr	r3, [pc, #624]	; (800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c81a:	091b      	lsrs	r3, r3, #4
 800c81c:	f003 0301 	and.w	r3, r3, #1
 800c820:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c822:	4b99      	ldr	r3, [pc, #612]	; (800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c826:	08db      	lsrs	r3, r3, #3
 800c828:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c82c:	693a      	ldr	r2, [r7, #16]
 800c82e:	fb02 f303 	mul.w	r3, r2, r3
 800c832:	ee07 3a90 	vmov	s15, r3
 800c836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c83a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	2b00      	cmp	r3, #0
 800c842:	f000 8111 	beq.w	800ca68 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c846:	69bb      	ldr	r3, [r7, #24]
 800c848:	2b02      	cmp	r3, #2
 800c84a:	f000 8083 	beq.w	800c954 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c84e:	69bb      	ldr	r3, [r7, #24]
 800c850:	2b02      	cmp	r3, #2
 800c852:	f200 80a1 	bhi.w	800c998 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c856:	69bb      	ldr	r3, [r7, #24]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d003      	beq.n	800c864 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d056      	beq.n	800c910 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c862:	e099      	b.n	800c998 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c864:	4b88      	ldr	r3, [pc, #544]	; (800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f003 0320 	and.w	r3, r3, #32
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d02d      	beq.n	800c8cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c870:	4b85      	ldr	r3, [pc, #532]	; (800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	08db      	lsrs	r3, r3, #3
 800c876:	f003 0303 	and.w	r3, r3, #3
 800c87a:	4a84      	ldr	r2, [pc, #528]	; (800ca8c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c87c:	fa22 f303 	lsr.w	r3, r2, r3
 800c880:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	ee07 3a90 	vmov	s15, r3
 800c888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c88c:	697b      	ldr	r3, [r7, #20]
 800c88e:	ee07 3a90 	vmov	s15, r3
 800c892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c89a:	4b7b      	ldr	r3, [pc, #492]	; (800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c89c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c89e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8a2:	ee07 3a90 	vmov	s15, r3
 800c8a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ca90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c8b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c8ca:	e087      	b.n	800c9dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	ee07 3a90 	vmov	s15, r3
 800c8d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ca94 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c8da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8de:	4b6a      	ldr	r3, [pc, #424]	; (800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8e6:	ee07 3a90 	vmov	s15, r3
 800c8ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ca90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c8f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c90a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c90e:	e065      	b.n	800c9dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	ee07 3a90 	vmov	s15, r3
 800c916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c91a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ca98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c91e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c922:	4b59      	ldr	r3, [pc, #356]	; (800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c92a:	ee07 3a90 	vmov	s15, r3
 800c92e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c932:	ed97 6a03 	vldr	s12, [r7, #12]
 800c936:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ca90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c93a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c93e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c94a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c94e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c952:	e043      	b.n	800c9dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c954:	697b      	ldr	r3, [r7, #20]
 800c956:	ee07 3a90 	vmov	s15, r3
 800c95a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c95e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ca9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800c962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c966:	4b48      	ldr	r3, [pc, #288]	; (800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c96a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c96e:	ee07 3a90 	vmov	s15, r3
 800c972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c976:	ed97 6a03 	vldr	s12, [r7, #12]
 800c97a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ca90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c97e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c98a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c98e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c996:	e021      	b.n	800c9dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	ee07 3a90 	vmov	s15, r3
 800c99e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ca98 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c9a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9aa:	4b37      	ldr	r3, [pc, #220]	; (800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9b2:	ee07 3a90 	vmov	s15, r3
 800c9b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ba:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9be:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ca90 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c9dc:	4b2a      	ldr	r3, [pc, #168]	; (800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9e0:	0a5b      	lsrs	r3, r3, #9
 800c9e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9e6:	ee07 3a90 	vmov	s15, r3
 800c9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c9f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c9f6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c9fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c9fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca02:	ee17 2a90 	vmov	r2, s15
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ca0a:	4b1f      	ldr	r3, [pc, #124]	; (800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca0e:	0c1b      	lsrs	r3, r3, #16
 800ca10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca14:	ee07 3a90 	vmov	s15, r3
 800ca18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca20:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca24:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca30:	ee17 2a90 	vmov	r2, s15
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ca38:	4b13      	ldr	r3, [pc, #76]	; (800ca88 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca3c:	0e1b      	lsrs	r3, r3, #24
 800ca3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca42:	ee07 3a90 	vmov	s15, r3
 800ca46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca4a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ca4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ca52:	edd7 6a07 	vldr	s13, [r7, #28]
 800ca56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ca5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ca5e:	ee17 2a90 	vmov	r2, s15
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ca66:	e008      	b.n	800ca7a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2200      	movs	r2, #0
 800ca72:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2200      	movs	r2, #0
 800ca78:	609a      	str	r2, [r3, #8]
}
 800ca7a:	bf00      	nop
 800ca7c:	3724      	adds	r7, #36	; 0x24
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca84:	4770      	bx	lr
 800ca86:	bf00      	nop
 800ca88:	58024400 	.word	0x58024400
 800ca8c:	03d09000 	.word	0x03d09000
 800ca90:	46000000 	.word	0x46000000
 800ca94:	4c742400 	.word	0x4c742400
 800ca98:	4a742400 	.word	0x4a742400
 800ca9c:	4c3ebc20 	.word	0x4c3ebc20

0800caa0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b089      	sub	sp, #36	; 0x24
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800caa8:	4ba1      	ldr	r3, [pc, #644]	; (800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800caaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caac:	f003 0303 	and.w	r3, r3, #3
 800cab0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cab2:	4b9f      	ldr	r3, [pc, #636]	; (800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cab6:	0d1b      	lsrs	r3, r3, #20
 800cab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cabc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cabe:	4b9c      	ldr	r3, [pc, #624]	; (800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cac2:	0a1b      	lsrs	r3, r3, #8
 800cac4:	f003 0301 	and.w	r3, r3, #1
 800cac8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800caca:	4b99      	ldr	r3, [pc, #612]	; (800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cacc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cace:	08db      	lsrs	r3, r3, #3
 800cad0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cad4:	693a      	ldr	r2, [r7, #16]
 800cad6:	fb02 f303 	mul.w	r3, r2, r3
 800cada:	ee07 3a90 	vmov	s15, r3
 800cade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cae2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	f000 8111 	beq.w	800cd10 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800caee:	69bb      	ldr	r3, [r7, #24]
 800caf0:	2b02      	cmp	r3, #2
 800caf2:	f000 8083 	beq.w	800cbfc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800caf6:	69bb      	ldr	r3, [r7, #24]
 800caf8:	2b02      	cmp	r3, #2
 800cafa:	f200 80a1 	bhi.w	800cc40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cafe:	69bb      	ldr	r3, [r7, #24]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d003      	beq.n	800cb0c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	2b01      	cmp	r3, #1
 800cb08:	d056      	beq.n	800cbb8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cb0a:	e099      	b.n	800cc40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cb0c:	4b88      	ldr	r3, [pc, #544]	; (800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f003 0320 	and.w	r3, r3, #32
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d02d      	beq.n	800cb74 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb18:	4b85      	ldr	r3, [pc, #532]	; (800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	08db      	lsrs	r3, r3, #3
 800cb1e:	f003 0303 	and.w	r3, r3, #3
 800cb22:	4a84      	ldr	r2, [pc, #528]	; (800cd34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cb24:	fa22 f303 	lsr.w	r3, r2, r3
 800cb28:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb2a:	68bb      	ldr	r3, [r7, #8]
 800cb2c:	ee07 3a90 	vmov	s15, r3
 800cb30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	ee07 3a90 	vmov	s15, r3
 800cb3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb42:	4b7b      	ldr	r3, [pc, #492]	; (800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb4a:	ee07 3a90 	vmov	s15, r3
 800cb4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb52:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb56:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cd38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb6e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cb72:	e087      	b.n	800cc84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cb74:	697b      	ldr	r3, [r7, #20]
 800cb76:	ee07 3a90 	vmov	s15, r3
 800cb7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cd3c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cb82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb86:	4b6a      	ldr	r3, [pc, #424]	; (800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb8e:	ee07 3a90 	vmov	s15, r3
 800cb92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb96:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cd38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cb9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cba6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbb6:	e065      	b.n	800cc84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	ee07 3a90 	vmov	s15, r3
 800cbbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbc2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cd40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cbc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbca:	4b59      	ldr	r3, [pc, #356]	; (800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbd2:	ee07 3a90 	vmov	s15, r3
 800cbd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbda:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbde:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cd38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cbe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbfa:	e043      	b.n	800cc84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	ee07 3a90 	vmov	s15, r3
 800cc02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cd44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cc0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc0e:	4b48      	ldr	r3, [pc, #288]	; (800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc16:	ee07 3a90 	vmov	s15, r3
 800cc1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc22:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cd38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc3e:	e021      	b.n	800cc84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	ee07 3a90 	vmov	s15, r3
 800cc46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cd40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cc4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc52:	4b37      	ldr	r3, [pc, #220]	; (800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc5a:	ee07 3a90 	vmov	s15, r3
 800cc5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc62:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc66:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cd38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cc84:	4b2a      	ldr	r3, [pc, #168]	; (800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc88:	0a5b      	lsrs	r3, r3, #9
 800cc8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc8e:	ee07 3a90 	vmov	s15, r3
 800cc92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc9e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cca2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccaa:	ee17 2a90 	vmov	r2, s15
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ccb2:	4b1f      	ldr	r3, [pc, #124]	; (800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccb6:	0c1b      	lsrs	r3, r3, #16
 800ccb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccbc:	ee07 3a90 	vmov	s15, r3
 800ccc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cccc:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ccd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ccd8:	ee17 2a90 	vmov	r2, s15
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cce0:	4b13      	ldr	r3, [pc, #76]	; (800cd30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cce4:	0e1b      	lsrs	r3, r3, #24
 800cce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ccea:	ee07 3a90 	vmov	s15, r3
 800ccee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ccf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ccfa:	edd7 6a07 	vldr	s13, [r7, #28]
 800ccfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd06:	ee17 2a90 	vmov	r2, s15
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cd0e:	e008      	b.n	800cd22 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2200      	movs	r2, #0
 800cd14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	609a      	str	r2, [r3, #8]
}
 800cd22:	bf00      	nop
 800cd24:	3724      	adds	r7, #36	; 0x24
 800cd26:	46bd      	mov	sp, r7
 800cd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2c:	4770      	bx	lr
 800cd2e:	bf00      	nop
 800cd30:	58024400 	.word	0x58024400
 800cd34:	03d09000 	.word	0x03d09000
 800cd38:	46000000 	.word	0x46000000
 800cd3c:	4c742400 	.word	0x4c742400
 800cd40:	4a742400 	.word	0x4a742400
 800cd44:	4c3ebc20 	.word	0x4c3ebc20

0800cd48 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b089      	sub	sp, #36	; 0x24
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cd50:	4ba0      	ldr	r3, [pc, #640]	; (800cfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd54:	f003 0303 	and.w	r3, r3, #3
 800cd58:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cd5a:	4b9e      	ldr	r3, [pc, #632]	; (800cfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd5e:	091b      	lsrs	r3, r3, #4
 800cd60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd64:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cd66:	4b9b      	ldr	r3, [pc, #620]	; (800cfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd6a:	f003 0301 	and.w	r3, r3, #1
 800cd6e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cd70:	4b98      	ldr	r3, [pc, #608]	; (800cfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cd72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd74:	08db      	lsrs	r3, r3, #3
 800cd76:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd7a:	693a      	ldr	r2, [r7, #16]
 800cd7c:	fb02 f303 	mul.w	r3, r2, r3
 800cd80:	ee07 3a90 	vmov	s15, r3
 800cd84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd88:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	f000 8111 	beq.w	800cfb6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cd94:	69bb      	ldr	r3, [r7, #24]
 800cd96:	2b02      	cmp	r3, #2
 800cd98:	f000 8083 	beq.w	800cea2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cd9c:	69bb      	ldr	r3, [r7, #24]
 800cd9e:	2b02      	cmp	r3, #2
 800cda0:	f200 80a1 	bhi.w	800cee6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cda4:	69bb      	ldr	r3, [r7, #24]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d003      	beq.n	800cdb2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cdaa:	69bb      	ldr	r3, [r7, #24]
 800cdac:	2b01      	cmp	r3, #1
 800cdae:	d056      	beq.n	800ce5e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cdb0:	e099      	b.n	800cee6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdb2:	4b88      	ldr	r3, [pc, #544]	; (800cfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	f003 0320 	and.w	r3, r3, #32
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d02d      	beq.n	800ce1a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdbe:	4b85      	ldr	r3, [pc, #532]	; (800cfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	08db      	lsrs	r3, r3, #3
 800cdc4:	f003 0303 	and.w	r3, r3, #3
 800cdc8:	4a83      	ldr	r2, [pc, #524]	; (800cfd8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cdca:	fa22 f303 	lsr.w	r3, r2, r3
 800cdce:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	ee07 3a90 	vmov	s15, r3
 800cdd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdda:	697b      	ldr	r3, [r7, #20]
 800cddc:	ee07 3a90 	vmov	s15, r3
 800cde0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cde4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cde8:	4b7a      	ldr	r3, [pc, #488]	; (800cfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cdea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdf0:	ee07 3a90 	vmov	s15, r3
 800cdf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdf8:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdfc:	eddf 5a77 	vldr	s11, [pc, #476]	; 800cfdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce14:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ce18:	e087      	b.n	800cf2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	ee07 3a90 	vmov	s15, r3
 800ce20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce24:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800cfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ce28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce2c:	4b69      	ldr	r3, [pc, #420]	; (800cfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce34:	ee07 3a90 	vmov	s15, r3
 800ce38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce3c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce40:	eddf 5a66 	vldr	s11, [pc, #408]	; 800cfdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce5c:	e065      	b.n	800cf2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	ee07 3a90 	vmov	s15, r3
 800ce64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce68:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800cfe4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800ce6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce70:	4b58      	ldr	r3, [pc, #352]	; (800cfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce78:	ee07 3a90 	vmov	s15, r3
 800ce7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce80:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce84:	eddf 5a55 	vldr	s11, [pc, #340]	; 800cfdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ce88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cea0:	e043      	b.n	800cf2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	ee07 3a90 	vmov	s15, r3
 800cea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800cfe8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ceb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ceb4:	4b47      	ldr	r3, [pc, #284]	; (800cfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ceb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cebc:	ee07 3a90 	vmov	s15, r3
 800cec0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cec4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cec8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800cfdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cecc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ced0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ced4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ced8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cedc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cee0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cee4:	e021      	b.n	800cf2a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	ee07 3a90 	vmov	s15, r3
 800ceec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cef0:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800cfe0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cef4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cef8:	4b36      	ldr	r3, [pc, #216]	; (800cfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cefa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cefc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf00:	ee07 3a90 	vmov	s15, r3
 800cf04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf08:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf0c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800cfdc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf28:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800cf2a:	4b2a      	ldr	r3, [pc, #168]	; (800cfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf2e:	0a5b      	lsrs	r3, r3, #9
 800cf30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf34:	ee07 3a90 	vmov	s15, r3
 800cf38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf44:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf50:	ee17 2a90 	vmov	r2, s15
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800cf58:	4b1e      	ldr	r3, [pc, #120]	; (800cfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf5c:	0c1b      	lsrs	r3, r3, #16
 800cf5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf62:	ee07 3a90 	vmov	s15, r3
 800cf66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf72:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf7e:	ee17 2a90 	vmov	r2, s15
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800cf86:	4b13      	ldr	r3, [pc, #76]	; (800cfd4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf8a:	0e1b      	lsrs	r3, r3, #24
 800cf8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf90:	ee07 3a90 	vmov	s15, r3
 800cf94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cfa0:	edd7 6a07 	vldr	s13, [r7, #28]
 800cfa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cfa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cfac:	ee17 2a90 	vmov	r2, s15
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800cfb4:	e008      	b.n	800cfc8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	609a      	str	r2, [r3, #8]
}
 800cfc8:	bf00      	nop
 800cfca:	3724      	adds	r7, #36	; 0x24
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd2:	4770      	bx	lr
 800cfd4:	58024400 	.word	0x58024400
 800cfd8:	03d09000 	.word	0x03d09000
 800cfdc:	46000000 	.word	0x46000000
 800cfe0:	4c742400 	.word	0x4c742400
 800cfe4:	4a742400 	.word	0x4a742400
 800cfe8:	4c3ebc20 	.word	0x4c3ebc20

0800cfec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b084      	sub	sp, #16
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
 800cff4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cff6:	2300      	movs	r3, #0
 800cff8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cffa:	4b53      	ldr	r3, [pc, #332]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800cffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cffe:	f003 0303 	and.w	r3, r3, #3
 800d002:	2b03      	cmp	r3, #3
 800d004:	d101      	bne.n	800d00a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d006:	2301      	movs	r3, #1
 800d008:	e099      	b.n	800d13e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d00a:	4b4f      	ldr	r3, [pc, #316]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	4a4e      	ldr	r2, [pc, #312]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d010:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d014:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d016:	f7f6 fe7b 	bl	8003d10 <HAL_GetTick>
 800d01a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d01c:	e008      	b.n	800d030 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d01e:	f7f6 fe77 	bl	8003d10 <HAL_GetTick>
 800d022:	4602      	mov	r2, r0
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	1ad3      	subs	r3, r2, r3
 800d028:	2b02      	cmp	r3, #2
 800d02a:	d901      	bls.n	800d030 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d02c:	2303      	movs	r3, #3
 800d02e:	e086      	b.n	800d13e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d030:	4b45      	ldr	r3, [pc, #276]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d1f0      	bne.n	800d01e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d03c:	4b42      	ldr	r3, [pc, #264]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d03e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d040:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	031b      	lsls	r3, r3, #12
 800d04a:	493f      	ldr	r1, [pc, #252]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d04c:	4313      	orrs	r3, r2
 800d04e:	628b      	str	r3, [r1, #40]	; 0x28
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	685b      	ldr	r3, [r3, #4]
 800d054:	3b01      	subs	r3, #1
 800d056:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	689b      	ldr	r3, [r3, #8]
 800d05e:	3b01      	subs	r3, #1
 800d060:	025b      	lsls	r3, r3, #9
 800d062:	b29b      	uxth	r3, r3
 800d064:	431a      	orrs	r2, r3
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	68db      	ldr	r3, [r3, #12]
 800d06a:	3b01      	subs	r3, #1
 800d06c:	041b      	lsls	r3, r3, #16
 800d06e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d072:	431a      	orrs	r2, r3
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	691b      	ldr	r3, [r3, #16]
 800d078:	3b01      	subs	r3, #1
 800d07a:	061b      	lsls	r3, r3, #24
 800d07c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d080:	4931      	ldr	r1, [pc, #196]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d082:	4313      	orrs	r3, r2
 800d084:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d086:	4b30      	ldr	r3, [pc, #192]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d08a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	695b      	ldr	r3, [r3, #20]
 800d092:	492d      	ldr	r1, [pc, #180]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d094:	4313      	orrs	r3, r2
 800d096:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d098:	4b2b      	ldr	r3, [pc, #172]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d09c:	f023 0220 	bic.w	r2, r3, #32
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	699b      	ldr	r3, [r3, #24]
 800d0a4:	4928      	ldr	r1, [pc, #160]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d0a6:	4313      	orrs	r3, r2
 800d0a8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d0aa:	4b27      	ldr	r3, [pc, #156]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d0ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ae:	4a26      	ldr	r2, [pc, #152]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d0b0:	f023 0310 	bic.w	r3, r3, #16
 800d0b4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d0b6:	4b24      	ldr	r3, [pc, #144]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d0b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0ba:	4b24      	ldr	r3, [pc, #144]	; (800d14c <RCCEx_PLL2_Config+0x160>)
 800d0bc:	4013      	ands	r3, r2
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	69d2      	ldr	r2, [r2, #28]
 800d0c2:	00d2      	lsls	r2, r2, #3
 800d0c4:	4920      	ldr	r1, [pc, #128]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d0ca:	4b1f      	ldr	r3, [pc, #124]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0ce:	4a1e      	ldr	r2, [pc, #120]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d0d0:	f043 0310 	orr.w	r3, r3, #16
 800d0d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d106      	bne.n	800d0ea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d0dc:	4b1a      	ldr	r3, [pc, #104]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d0de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0e0:	4a19      	ldr	r2, [pc, #100]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d0e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d0e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0e8:	e00f      	b.n	800d10a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d106      	bne.n	800d0fe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d0f0:	4b15      	ldr	r3, [pc, #84]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0f4:	4a14      	ldr	r2, [pc, #80]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d0f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d0fa:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d0fc:	e005      	b.n	800d10a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d0fe:	4b12      	ldr	r3, [pc, #72]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d102:	4a11      	ldr	r2, [pc, #68]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d104:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d108:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d10a:	4b0f      	ldr	r3, [pc, #60]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	4a0e      	ldr	r2, [pc, #56]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d110:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d114:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d116:	f7f6 fdfb 	bl	8003d10 <HAL_GetTick>
 800d11a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d11c:	e008      	b.n	800d130 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d11e:	f7f6 fdf7 	bl	8003d10 <HAL_GetTick>
 800d122:	4602      	mov	r2, r0
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	1ad3      	subs	r3, r2, r3
 800d128:	2b02      	cmp	r3, #2
 800d12a:	d901      	bls.n	800d130 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d12c:	2303      	movs	r3, #3
 800d12e:	e006      	b.n	800d13e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d130:	4b05      	ldr	r3, [pc, #20]	; (800d148 <RCCEx_PLL2_Config+0x15c>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d0f0      	beq.n	800d11e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d13c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d13e:	4618      	mov	r0, r3
 800d140:	3710      	adds	r7, #16
 800d142:	46bd      	mov	sp, r7
 800d144:	bd80      	pop	{r7, pc}
 800d146:	bf00      	nop
 800d148:	58024400 	.word	0x58024400
 800d14c:	ffff0007 	.word	0xffff0007

0800d150 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b084      	sub	sp, #16
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d15a:	2300      	movs	r3, #0
 800d15c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d15e:	4b53      	ldr	r3, [pc, #332]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d162:	f003 0303 	and.w	r3, r3, #3
 800d166:	2b03      	cmp	r3, #3
 800d168:	d101      	bne.n	800d16e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d16a:	2301      	movs	r3, #1
 800d16c:	e099      	b.n	800d2a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d16e:	4b4f      	ldr	r3, [pc, #316]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	4a4e      	ldr	r2, [pc, #312]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d17a:	f7f6 fdc9 	bl	8003d10 <HAL_GetTick>
 800d17e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d180:	e008      	b.n	800d194 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d182:	f7f6 fdc5 	bl	8003d10 <HAL_GetTick>
 800d186:	4602      	mov	r2, r0
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	1ad3      	subs	r3, r2, r3
 800d18c:	2b02      	cmp	r3, #2
 800d18e:	d901      	bls.n	800d194 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d190:	2303      	movs	r3, #3
 800d192:	e086      	b.n	800d2a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d194:	4b45      	ldr	r3, [pc, #276]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d1f0      	bne.n	800d182 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d1a0:	4b42      	ldr	r3, [pc, #264]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	051b      	lsls	r3, r3, #20
 800d1ae:	493f      	ldr	r1, [pc, #252]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d1b0:	4313      	orrs	r3, r2
 800d1b2:	628b      	str	r3, [r1, #40]	; 0x28
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	685b      	ldr	r3, [r3, #4]
 800d1b8:	3b01      	subs	r3, #1
 800d1ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	689b      	ldr	r3, [r3, #8]
 800d1c2:	3b01      	subs	r3, #1
 800d1c4:	025b      	lsls	r3, r3, #9
 800d1c6:	b29b      	uxth	r3, r3
 800d1c8:	431a      	orrs	r2, r3
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	3b01      	subs	r3, #1
 800d1d0:	041b      	lsls	r3, r3, #16
 800d1d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d1d6:	431a      	orrs	r2, r3
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	691b      	ldr	r3, [r3, #16]
 800d1dc:	3b01      	subs	r3, #1
 800d1de:	061b      	lsls	r3, r3, #24
 800d1e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d1e4:	4931      	ldr	r1, [pc, #196]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d1ea:	4b30      	ldr	r3, [pc, #192]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	695b      	ldr	r3, [r3, #20]
 800d1f6:	492d      	ldr	r1, [pc, #180]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d1f8:	4313      	orrs	r3, r2
 800d1fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d1fc:	4b2b      	ldr	r3, [pc, #172]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d200:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	699b      	ldr	r3, [r3, #24]
 800d208:	4928      	ldr	r1, [pc, #160]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d20a:	4313      	orrs	r3, r2
 800d20c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d20e:	4b27      	ldr	r3, [pc, #156]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d212:	4a26      	ldr	r2, [pc, #152]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d218:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d21a:	4b24      	ldr	r3, [pc, #144]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d21c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d21e:	4b24      	ldr	r3, [pc, #144]	; (800d2b0 <RCCEx_PLL3_Config+0x160>)
 800d220:	4013      	ands	r3, r2
 800d222:	687a      	ldr	r2, [r7, #4]
 800d224:	69d2      	ldr	r2, [r2, #28]
 800d226:	00d2      	lsls	r2, r2, #3
 800d228:	4920      	ldr	r1, [pc, #128]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d22a:	4313      	orrs	r3, r2
 800d22c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d22e:	4b1f      	ldr	r3, [pc, #124]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d232:	4a1e      	ldr	r2, [pc, #120]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d238:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d106      	bne.n	800d24e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d240:	4b1a      	ldr	r3, [pc, #104]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d244:	4a19      	ldr	r2, [pc, #100]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d246:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d24a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d24c:	e00f      	b.n	800d26e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	2b01      	cmp	r3, #1
 800d252:	d106      	bne.n	800d262 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d254:	4b15      	ldr	r3, [pc, #84]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d258:	4a14      	ldr	r2, [pc, #80]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d25a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d25e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d260:	e005      	b.n	800d26e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d262:	4b12      	ldr	r3, [pc, #72]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d266:	4a11      	ldr	r2, [pc, #68]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d268:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d26c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d26e:	4b0f      	ldr	r3, [pc, #60]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	4a0e      	ldr	r2, [pc, #56]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d27a:	f7f6 fd49 	bl	8003d10 <HAL_GetTick>
 800d27e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d280:	e008      	b.n	800d294 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d282:	f7f6 fd45 	bl	8003d10 <HAL_GetTick>
 800d286:	4602      	mov	r2, r0
 800d288:	68bb      	ldr	r3, [r7, #8]
 800d28a:	1ad3      	subs	r3, r2, r3
 800d28c:	2b02      	cmp	r3, #2
 800d28e:	d901      	bls.n	800d294 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d290:	2303      	movs	r3, #3
 800d292:	e006      	b.n	800d2a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d294:	4b05      	ldr	r3, [pc, #20]	; (800d2ac <RCCEx_PLL3_Config+0x15c>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d0f0      	beq.n	800d282 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2a2:	4618      	mov	r0, r3
 800d2a4:	3710      	adds	r7, #16
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	58024400 	.word	0x58024400
 800d2b0:	ffff0007 	.word	0xffff0007

0800d2b4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b084      	sub	sp, #16
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d101      	bne.n	800d2c6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	e092      	b.n	800d3ec <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	7a5b      	ldrb	r3, [r3, #9]
 800d2ca:	b2db      	uxtb	r3, r3
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d105      	bne.n	800d2dc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800d2d6:	6878      	ldr	r0, [r7, #4]
 800d2d8:	f7f5 fe20 	bl	8002f1c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2202      	movs	r2, #2
 800d2e0:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	681a      	ldr	r2, [r3, #0]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f022 0204 	bic.w	r2, r2, #4
 800d2f0:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	681a      	ldr	r2, [r3, #0]
 800d2f8:	4b3e      	ldr	r3, [pc, #248]	; (800d3f4 <HAL_RNG_Init+0x140>)
 800d2fa:	4013      	ands	r3, r2
 800d2fc:	687a      	ldr	r2, [r7, #4]
 800d2fe:	6852      	ldr	r2, [r2, #4]
 800d300:	431a      	orrs	r2, r3
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d30a:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	4a39      	ldr	r2, [pc, #228]	; (800d3f8 <HAL_RNG_Init+0x144>)
 800d312:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f247 2274 	movw	r2, #29300	; 0x7274
 800d31c:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	681a      	ldr	r2, [r3, #0]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800d32c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800d32e:	f7f6 fcef 	bl	8003d10 <HAL_GetTick>
 800d332:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d334:	e016      	b.n	800d364 <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d336:	f7f6 fceb 	bl	8003d10 <HAL_GetTick>
 800d33a:	4602      	mov	r2, r0
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	1ad3      	subs	r3, r2, r3
 800d340:	2b02      	cmp	r3, #2
 800d342:	d90f      	bls.n	800d364 <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d34e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d352:	d107      	bne.n	800d364 <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2201      	movs	r2, #1
 800d358:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2202      	movs	r2, #2
 800d35e:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800d360:	2301      	movs	r3, #1
 800d362:	e043      	b.n	800d3ec <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d36e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d372:	d0e0      	beq.n	800d336 <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f042 0204 	orr.w	r2, r2, #4
 800d382:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	685b      	ldr	r3, [r3, #4]
 800d38a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d38e:	2b40      	cmp	r3, #64	; 0x40
 800d390:	d104      	bne.n	800d39c <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2204      	movs	r2, #4
 800d396:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800d398:	2301      	movs	r3, #1
 800d39a:	e027      	b.n	800d3ec <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800d39c:	f7f6 fcb8 	bl	8003d10 <HAL_GetTick>
 800d3a0:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d3a2:	e015      	b.n	800d3d0 <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d3a4:	f7f6 fcb4 	bl	8003d10 <HAL_GetTick>
 800d3a8:	4602      	mov	r2, r0
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	1ad3      	subs	r3, r2, r3
 800d3ae:	2b02      	cmp	r3, #2
 800d3b0:	d90e      	bls.n	800d3d0 <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	685b      	ldr	r3, [r3, #4]
 800d3b8:	f003 0304 	and.w	r3, r3, #4
 800d3bc:	2b04      	cmp	r3, #4
 800d3be:	d107      	bne.n	800d3d0 <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	2204      	movs	r2, #4
 800d3c4:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2202      	movs	r2, #2
 800d3ca:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	e00d      	b.n	800d3ec <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	685b      	ldr	r3, [r3, #4]
 800d3d6:	f003 0304 	and.w	r3, r3, #4
 800d3da:	2b04      	cmp	r3, #4
 800d3dc:	d0e2      	beq.n	800d3a4 <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800d3ea:	2300      	movs	r3, #0
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3710      	adds	r7, #16
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}
 800d3f4:	bfffffdf 	.word	0xbfffffdf
 800d3f8:	17590abc 	.word	0x17590abc

0800d3fc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d406:	2300      	movs	r3, #0
 800d408:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	7a1b      	ldrb	r3, [r3, #8]
 800d40e:	2b01      	cmp	r3, #1
 800d410:	d101      	bne.n	800d416 <HAL_RNG_GenerateRandomNumber+0x1a>
 800d412:	2302      	movs	r3, #2
 800d414:	e06d      	b.n	800d4f2 <HAL_RNG_GenerateRandomNumber+0xf6>
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2201      	movs	r2, #1
 800d41a:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	7a5b      	ldrb	r3, [r3, #9]
 800d420:	b2db      	uxtb	r3, r3
 800d422:	2b01      	cmp	r3, #1
 800d424:	d15c      	bne.n	800d4e0 <HAL_RNG_GenerateRandomNumber+0xe4>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	2202      	movs	r2, #2
 800d42a:	725a      	strb	r2, [r3, #9]
#if defined(RNG_CR_CONDRST)
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	685b      	ldr	r3, [r3, #4]
 800d432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d436:	2b40      	cmp	r3, #64	; 0x40
 800d438:	d10c      	bne.n	800d454 <HAL_RNG_GenerateRandomNumber+0x58>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2208      	movs	r2, #8
 800d43e:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f000 f864 	bl	800d50e <RNG_RecoverSeedError>
 800d446:	4603      	mov	r3, r0
 800d448:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 800d44a:	7bfb      	ldrb	r3, [r7, #15]
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d101      	bne.n	800d454 <HAL_RNG_GenerateRandomNumber+0x58>
      {
        return status;
 800d450:	7bfb      	ldrb	r3, [r7, #15]
 800d452:	e04e      	b.n	800d4f2 <HAL_RNG_GenerateRandomNumber+0xf6>
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 800d454:	f7f6 fc5c 	bl	8003d10 <HAL_GetTick>
 800d458:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d45a:	e018      	b.n	800d48e <HAL_RNG_GenerateRandomNumber+0x92>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800d45c:	f7f6 fc58 	bl	8003d10 <HAL_GetTick>
 800d460:	4602      	mov	r2, r0
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	1ad3      	subs	r3, r2, r3
 800d466:	2b02      	cmp	r3, #2
 800d468:	d911      	bls.n	800d48e <HAL_RNG_GenerateRandomNumber+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	685b      	ldr	r3, [r3, #4]
 800d470:	f003 0301 	and.w	r3, r3, #1
 800d474:	2b01      	cmp	r3, #1
 800d476:	d00a      	beq.n	800d48e <HAL_RNG_GenerateRandomNumber+0x92>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2201      	movs	r2, #1
 800d47c:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2202      	movs	r2, #2
 800d482:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	2200      	movs	r2, #0
 800d488:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 800d48a:	2301      	movs	r3, #1
 800d48c:	e031      	b.n	800d4f2 <HAL_RNG_GenerateRandomNumber+0xf6>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	685b      	ldr	r3, [r3, #4]
 800d494:	f003 0301 	and.w	r3, r3, #1
 800d498:	2b01      	cmp	r3, #1
 800d49a:	d1df      	bne.n	800d45c <HAL_RNG_GenerateRandomNumber+0x60>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	689a      	ldr	r2, [r3, #8]
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	611a      	str	r2, [r3, #16]
#if defined(RNG_CR_CONDRST)
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	685b      	ldr	r3, [r3, #4]
 800d4ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4b0:	2b40      	cmp	r3, #64	; 0x40
 800d4b2:	d10d      	bne.n	800d4d0 <HAL_RNG_GenerateRandomNumber+0xd4>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	2208      	movs	r2, #8
 800d4b8:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 800d4ba:	2301      	movs	r3, #1
 800d4bc:	73fb      	strb	r3, [r7, #15]
      /* Clear bit DRDY */
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	685a      	ldr	r2, [r3, #4]
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f022 0201 	bic.w	r2, r2, #1
 800d4cc:	605a      	str	r2, [r3, #4]
 800d4ce:	e003      	b.n	800d4d8 <HAL_RNG_GenerateRandomNumber+0xdc>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	691a      	ldr	r2, [r3, #16]
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	601a      	str	r2, [r3, #0]
    }
#else
    *random32bit = hrng->RandomNumber;

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2201      	movs	r2, #1
 800d4dc:	725a      	strb	r2, [r3, #9]
 800d4de:	e004      	b.n	800d4ea <HAL_RNG_GenerateRandomNumber+0xee>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2204      	movs	r2, #4
 800d4e4:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	721a      	strb	r2, [r3, #8]

  return status;
 800d4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}

0800d4fa <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800d4fa:	b480      	push	{r7}
 800d4fc:	b083      	sub	sp, #12
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 800d502:	bf00      	nop
 800d504:	370c      	adds	r7, #12
 800d506:	46bd      	mov	sp, r7
 800d508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50c:	4770      	bx	lr

0800d50e <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 800d50e:	b580      	push	{r7, lr}
 800d510:	b084      	sub	sp, #16
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d516:	2300      	movs	r3, #0
 800d518:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	f003 0304 	and.w	r3, r3, #4
 800d524:	2b04      	cmp	r3, #4
 800d526:	d008      	beq.n	800d53a <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	685a      	ldr	r2, [r3, #4]
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d536:	605a      	str	r2, [r3, #4]
 800d538:	e05f      	b.n	800d5fa <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d548:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	681a      	ldr	r2, [r3, #0]
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 800d558:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 800d55a:	2302      	movs	r3, #2
 800d55c:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	3b01      	subs	r3, #1
 800d562:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d110      	bne.n	800d58c <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2201      	movs	r2, #1
 800d56e:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	68db      	ldr	r3, [r3, #12]
 800d574:	f043 0202 	orr.w	r2, r3, #2
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	2200      	movs	r2, #0
 800d580:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f7ff ffb9 	bl	800d4fa <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800d588:	2301      	movs	r3, #1
 800d58a:	e03d      	b.n	800d608 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d596:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d59a:	d0e0      	beq.n	800d55e <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5a6:	2b40      	cmp	r3, #64	; 0x40
 800d5a8:	d107      	bne.n	800d5ba <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	685a      	ldr	r2, [r3, #4]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d5b8:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 800d5ba:	2302      	movs	r3, #2
 800d5bc:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d110      	bne.n	800d5ec <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	2201      	movs	r2, #1
 800d5ce:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	f043 0202 	orr.w	r2, r3, #2
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f7ff ff89 	bl	800d4fa <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	e00d      	b.n	800d608 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	f003 0304 	and.w	r3, r3, #4
 800d5f6:	2b04      	cmp	r3, #4
 800d5f8:	d0e1      	beq.n	800d5be <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	68db      	ldr	r3, [r3, #12]
 800d5fe:	f023 0208 	bic.w	r2, r3, #8
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 800d606:	2300      	movs	r3, #0
}
 800d608:	4618      	mov	r0, r3
 800d60a:	3710      	adds	r7, #16
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b08a      	sub	sp, #40	; 0x28
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d101      	bne.n	800d622 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d61e:	2301      	movs	r3, #1
 800d620:	e075      	b.n	800d70e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d105      	bne.n	800d63a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2200      	movs	r2, #0
 800d632:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f7f5 fcab 	bl	8002f90 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	2204      	movs	r2, #4
 800d63e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	f000 f868 	bl	800d718 <HAL_SD_InitCard>
 800d648:	4603      	mov	r3, r0
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d001      	beq.n	800d652 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800d64e:	2301      	movs	r3, #1
 800d650:	e05d      	b.n	800d70e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d652:	f107 0308 	add.w	r3, r7, #8
 800d656:	4619      	mov	r1, r3
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f000 fdaf 	bl	800e1bc <HAL_SD_GetCardStatus>
 800d65e:	4603      	mov	r3, r0
 800d660:	2b00      	cmp	r3, #0
 800d662:	d001      	beq.n	800d668 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 800d664:	2301      	movs	r3, #1
 800d666:	e052      	b.n	800d70e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d668:	7e3b      	ldrb	r3, [r7, #24]
 800d66a:	b2db      	uxtb	r3, r3
 800d66c:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d66e:	7e7b      	ldrb	r3, [r7, #25]
 800d670:	b2db      	uxtb	r3, r3
 800d672:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d678:	2b01      	cmp	r3, #1
 800d67a:	d10a      	bne.n	800d692 <HAL_SD_Init+0x82>
 800d67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d102      	bne.n	800d688 <HAL_SD_Init+0x78>
 800d682:	6a3b      	ldr	r3, [r7, #32]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d004      	beq.n	800d692 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d68e:	659a      	str	r2, [r3, #88]	; 0x58
 800d690:	e00b      	b.n	800d6aa <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d696:	2b01      	cmp	r3, #1
 800d698:	d104      	bne.n	800d6a4 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d6a0:	659a      	str	r2, [r3, #88]	; 0x58
 800d6a2:	e002      	b.n	800d6aa <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	68db      	ldr	r3, [r3, #12]
 800d6ae:	4619      	mov	r1, r3
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	f000 fe6d 	bl	800e390 <HAL_SD_ConfigWideBusOperation>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d001      	beq.n	800d6c0 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 800d6bc:	2301      	movs	r3, #1
 800d6be:	e026      	b.n	800d70e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d6c0:	f7f6 fb26 	bl	8003d10 <HAL_GetTick>
 800d6c4:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d6c6:	e011      	b.n	800d6ec <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800d6c8:	f7f6 fb22 	bl	8003d10 <HAL_GetTick>
 800d6cc:	4602      	mov	r2, r0
 800d6ce:	69fb      	ldr	r3, [r7, #28]
 800d6d0:	1ad3      	subs	r3, r2, r3
 800d6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6d6:	d109      	bne.n	800d6ec <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d6de:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2201      	movs	r2, #1
 800d6e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 800d6e8:	2303      	movs	r3, #3
 800d6ea:	e010      	b.n	800d70e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f000 ff61 	bl	800e5b4 <HAL_SD_GetCardState>
 800d6f2:	4603      	mov	r3, r0
 800d6f4:	2b04      	cmp	r3, #4
 800d6f6:	d1e7      	bne.n	800d6c8 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2200      	movs	r2, #0
 800d702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2201      	movs	r2, #1
 800d708:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800d70c:	2300      	movs	r3, #0
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3728      	adds	r7, #40	; 0x28
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
	...

0800d718 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d718:	b590      	push	{r4, r7, lr}
 800d71a:	b08d      	sub	sp, #52	; 0x34
 800d71c:	af02      	add	r7, sp, #8
 800d71e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d720:	2300      	movs	r3, #0
 800d722:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d724:	2300      	movs	r3, #0
 800d726:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d728:	2300      	movs	r3, #0
 800d72a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d72c:	2300      	movs	r3, #0
 800d72e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d730:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d734:	f04f 0100 	mov.w	r1, #0
 800d738:	f7fe fb76 	bl	800be28 <HAL_RCCEx_GetPeriphCLKFreq>
 800d73c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 800d73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d740:	2b00      	cmp	r3, #0
 800d742:	d109      	bne.n	800d758 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2201      	movs	r2, #1
 800d748:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d752:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d754:	2301      	movs	r3, #1
 800d756:	e070      	b.n	800d83a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800d758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75a:	0a1b      	lsrs	r3, r3, #8
 800d75c:	4a39      	ldr	r2, [pc, #228]	; (800d844 <HAL_SD_InitCard+0x12c>)
 800d75e:	fba2 2303 	umull	r2, r3, r2, r3
 800d762:	091b      	lsrs	r3, r3, #4
 800d764:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	681c      	ldr	r4, [r3, #0]
 800d76a:	466a      	mov	r2, sp
 800d76c:	f107 0318 	add.w	r3, r7, #24
 800d770:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d774:	e882 0003 	stmia.w	r2, {r0, r1}
 800d778:	f107 030c 	add.w	r3, r7, #12
 800d77c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d77e:	4620      	mov	r0, r4
 800d780:	f004 fec4 	bl	801250c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	4618      	mov	r0, r3
 800d78a:	f004 ff07 	bl	801259c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 800d78e:	69fb      	ldr	r3, [r7, #28]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d005      	beq.n	800d7a0 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	005b      	lsls	r3, r3, #1
 800d798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d79a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d79e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if (sdmmc_clk != 0U)
 800d7a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d007      	beq.n	800d7b6 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800d7a6:	4a28      	ldr	r2, [pc, #160]	; (800d848 <HAL_SD_InitCard+0x130>)
 800d7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7ae:	3301      	adds	r3, #1
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7f6 fab9 	bl	8003d28 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 ffea 	bl	800e790 <SD_PowerON>
 800d7bc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7be:	6a3b      	ldr	r3, [r7, #32]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d00b      	beq.n	800d7dc <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2201      	movs	r2, #1
 800d7c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d7d0:	6a3b      	ldr	r3, [r7, #32]
 800d7d2:	431a      	orrs	r2, r3
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d7d8:	2301      	movs	r3, #1
 800d7da:	e02e      	b.n	800d83a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	f000 ff09 	bl	800e5f4 <SD_InitCard>
 800d7e2:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d7e4:	6a3b      	ldr	r3, [r7, #32]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00b      	beq.n	800d802 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d7f6:	6a3b      	ldr	r3, [r7, #32]
 800d7f8:	431a      	orrs	r2, r3
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d7fe:	2301      	movs	r3, #1
 800d800:	e01b      	b.n	800d83a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d80a:	4618      	mov	r0, r3
 800d80c:	f004 ff5c 	bl	80126c8 <SDMMC_CmdBlockLength>
 800d810:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800d812:	6a3b      	ldr	r3, [r7, #32]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d00f      	beq.n	800d838 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	4a0b      	ldr	r2, [pc, #44]	; (800d84c <HAL_SD_InitCard+0x134>)
 800d81e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d824:	6a3b      	ldr	r3, [r7, #32]
 800d826:	431a      	orrs	r2, r3
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2201      	movs	r2, #1
 800d830:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800d834:	2301      	movs	r3, #1
 800d836:	e000      	b.n	800d83a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 800d838:	2300      	movs	r3, #0
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	372c      	adds	r7, #44	; 0x2c
 800d83e:	46bd      	mov	sp, r7
 800d840:	bd90      	pop	{r4, r7, pc}
 800d842:	bf00      	nop
 800d844:	014f8b59 	.word	0x014f8b59
 800d848:	00012110 	.word	0x00012110
 800d84c:	1fe00fff 	.word	0x1fe00fff

0800d850 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b08c      	sub	sp, #48	; 0x30
 800d854:	af00      	add	r7, sp, #0
 800d856:	60f8      	str	r0, [r7, #12]
 800d858:	60b9      	str	r1, [r7, #8]
 800d85a:	607a      	str	r2, [r7, #4]
 800d85c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	2b00      	cmp	r3, #0
 800d866:	d107      	bne.n	800d878 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d86c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d874:	2301      	movs	r3, #1
 800d876:	e08d      	b.n	800d994 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d87e:	b2db      	uxtb	r3, r3
 800d880:	2b01      	cmp	r3, #1
 800d882:	f040 8086 	bne.w	800d992 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	2200      	movs	r2, #0
 800d88a:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d88c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	441a      	add	r2, r3
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d896:	429a      	cmp	r2, r3
 800d898:	d907      	bls.n	800d8aa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d89e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	e074      	b.n	800d994 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	2203      	movs	r2, #3
 800d8ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	2200      	movs	r2, #0
 800d8b8:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	68ba      	ldr	r2, [r7, #8]
 800d8be:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	025a      	lsls	r2, r3, #9
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d002      	beq.n	800d8d6 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d2:	025b      	lsls	r3, r3, #9
 800d8d4:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d8d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d8da:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	025b      	lsls	r3, r3, #9
 800d8e0:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d8e2:	2390      	movs	r3, #144	; 0x90
 800d8e4:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d8e6:	2302      	movs	r3, #2
 800d8e8:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	f107 0210 	add.w	r2, r7, #16
 800d8fa:	4611      	mov	r1, r2
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f004 feb7 	bl	8012670 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	68da      	ldr	r2, [r3, #12]
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d910:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	68ba      	ldr	r2, [r7, #8]
 800d918:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2201      	movs	r2, #1
 800d920:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	2b01      	cmp	r3, #1
 800d926:	d90a      	bls.n	800d93e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2282      	movs	r2, #130	; 0x82
 800d92c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d934:	4618      	mov	r0, r3
 800d936:	f004 ff0d 	bl	8012754 <SDMMC_CmdReadMultiBlock>
 800d93a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d93c:	e009      	b.n	800d952 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	2281      	movs	r2, #129	; 0x81
 800d942:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d94a:	4618      	mov	r0, r3
 800d94c:	f004 fedf 	bl	801270e <SDMMC_CmdReadSingleBlock>
 800d950:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800d952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d954:	2b00      	cmp	r3, #0
 800d956:	d012      	beq.n	800d97e <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	4a0f      	ldr	r2, [pc, #60]	; (800d99c <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d95e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d966:	431a      	orrs	r2, r3
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	2201      	movs	r2, #1
 800d970:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	2200      	movs	r2, #0
 800d978:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800d97a:	2301      	movs	r3, #1
 800d97c:	e00a      	b.n	800d994 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d98c:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d98e:	2300      	movs	r3, #0
 800d990:	e000      	b.n	800d994 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d992:	2302      	movs	r3, #2
  }
}
 800d994:	4618      	mov	r0, r3
 800d996:	3730      	adds	r7, #48	; 0x30
 800d998:	46bd      	mov	sp, r7
 800d99a:	bd80      	pop	{r7, pc}
 800d99c:	1fe00fff 	.word	0x1fe00fff

0800d9a0 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b08c      	sub	sp, #48	; 0x30
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	60f8      	str	r0, [r7, #12]
 800d9a8:	60b9      	str	r1, [r7, #8]
 800d9aa:	607a      	str	r2, [r7, #4]
 800d9ac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800d9b2:	68bb      	ldr	r3, [r7, #8]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d107      	bne.n	800d9c8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d9c4:	2301      	movs	r3, #1
 800d9c6:	e08d      	b.n	800dae4 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	f040 8086 	bne.w	800dae2 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d9dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d9de:	683b      	ldr	r3, [r7, #0]
 800d9e0:	441a      	add	r2, r3
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d907      	bls.n	800d9fa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800d9f6:	2301      	movs	r3, #1
 800d9f8:	e074      	b.n	800dae4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2203      	movs	r2, #3
 800d9fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	2200      	movs	r2, #0
 800da08:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	68ba      	ldr	r2, [r7, #8]
 800da0e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800da10:	683b      	ldr	r3, [r7, #0]
 800da12:	025a      	lsls	r2, r3, #9
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d002      	beq.n	800da26 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800da20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da22:	025b      	lsls	r3, r3, #9
 800da24:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800da26:	f04f 33ff 	mov.w	r3, #4294967295
 800da2a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	025b      	lsls	r3, r3, #9
 800da30:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800da32:	2390      	movs	r3, #144	; 0x90
 800da34:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800da36:	2300      	movs	r3, #0
 800da38:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800da3a:	2300      	movs	r3, #0
 800da3c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800da3e:	2300      	movs	r3, #0
 800da40:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f107 0210 	add.w	r2, r7, #16
 800da4a:	4611      	mov	r1, r2
 800da4c:	4618      	mov	r0, r3
 800da4e:	f004 fe0f 	bl	8012670 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	68da      	ldr	r2, [r3, #12]
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800da60:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	68ba      	ldr	r2, [r7, #8]
 800da68:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	2201      	movs	r2, #1
 800da70:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	2b01      	cmp	r3, #1
 800da76:	d90a      	bls.n	800da8e <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	22a0      	movs	r2, #160	; 0xa0
 800da7c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da84:	4618      	mov	r0, r3
 800da86:	f004 feab 	bl	80127e0 <SDMMC_CmdWriteMultiBlock>
 800da8a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800da8c:	e009      	b.n	800daa2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	2290      	movs	r2, #144	; 0x90
 800da92:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800da9a:	4618      	mov	r0, r3
 800da9c:	f004 fe7d 	bl	801279a <SDMMC_CmdWriteSingleBlock>
 800daa0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800daa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d012      	beq.n	800dace <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	4a0f      	ldr	r2, [pc, #60]	; (800daec <HAL_SD_WriteBlocks_DMA+0x14c>)
 800daae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dab6:	431a      	orrs	r2, r3
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2201      	movs	r2, #1
 800dac0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	2200      	movs	r2, #0
 800dac8:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800daca:	2301      	movs	r3, #1
 800dacc:	e00a      	b.n	800dae4 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	681b      	ldr	r3, [r3, #0]
 800dad8:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800dadc:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800dade:	2300      	movs	r3, #0
 800dae0:	e000      	b.n	800dae4 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800dae2:	2302      	movs	r3, #2
  }
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3730      	adds	r7, #48	; 0x30
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}
 800daec:	1fe00fff 	.word	0x1fe00fff

0800daf0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dafc:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d008      	beq.n	800db1e <HAL_SD_IRQHandler+0x2e>
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f003 0308 	and.w	r3, r3, #8
 800db12:	2b00      	cmp	r3, #0
 800db14:	d003      	beq.n	800db1e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800db16:	6878      	ldr	r0, [r7, #4]
 800db18:	f001 f926 	bl	800ed68 <SD_Read_IT>
 800db1c:	e19a      	b.n	800de54 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800db28:	2b00      	cmp	r3, #0
 800db2a:	f000 80ac 	beq.w	800dc86 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	f44f 7280 	mov.w	r2, #256	; 0x100
 800db36:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681a      	ldr	r2, [r3, #0]
 800db42:	4b59      	ldr	r3, [pc, #356]	; (800dca8 <HAL_SD_IRQHandler+0x1b8>)
 800db44:	400b      	ands	r3, r1
 800db46:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800db56:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	68da      	ldr	r2, [r3, #12]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800db66:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	f003 0308 	and.w	r3, r3, #8
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d038      	beq.n	800dbe4 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	f003 0302 	and.w	r3, r3, #2
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d104      	bne.n	800db86 <HAL_SD_IRQHandler+0x96>
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	f003 0320 	and.w	r3, r3, #32
 800db82:	2b00      	cmp	r3, #0
 800db84:	d011      	beq.n	800dbaa <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4618      	mov	r0, r3
 800db8c:	f004 fe4c 	bl	8012828 <SDMMC_CmdStopTransfer>
 800db90:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d008      	beq.n	800dbaa <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db9c:	68bb      	ldr	r3, [r7, #8]
 800db9e:	431a      	orrs	r2, r3
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800dba4:	6878      	ldr	r0, [r7, #4]
 800dba6:	f000 f95b 	bl	800de60 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	4a3f      	ldr	r2, [pc, #252]	; (800dcac <HAL_SD_IRQHandler+0x1bc>)
 800dbb0:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	f003 0301 	and.w	r3, r3, #1
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d104      	bne.n	800dbd4 <HAL_SD_IRQHandler+0xe4>
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	f003 0302 	and.w	r3, r3, #2
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d003      	beq.n	800dbdc <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f006 fe4d 	bl	8014874 <HAL_SD_RxCpltCallback>
 800dbda:	e13b      	b.n	800de54 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800dbdc:	6878      	ldr	r0, [r7, #4]
 800dbde:	f006 fe3f 	bl	8014860 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800dbe2:	e137      	b.n	800de54 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	f000 8132 	beq.w	800de54 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2200      	movs	r2, #0
 800dc06:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	f003 0302 	and.w	r3, r3, #2
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d104      	bne.n	800dc1c <HAL_SD_IRQHandler+0x12c>
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	f003 0320 	and.w	r3, r3, #32
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d011      	beq.n	800dc40 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	4618      	mov	r0, r3
 800dc22:	f004 fe01 	bl	8012828 <SDMMC_CmdStopTransfer>
 800dc26:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d008      	beq.n	800dc40 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	431a      	orrs	r2, r3
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 f910 	bl	800de60 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2201      	movs	r2, #1
 800dc44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f003 0310 	and.w	r3, r3, #16
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d104      	bne.n	800dc62 <HAL_SD_IRQHandler+0x172>
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f003 0320 	and.w	r3, r3, #32
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d002      	beq.n	800dc68 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f006 fdfc 	bl	8014860 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f003 0301 	and.w	r3, r3, #1
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	d105      	bne.n	800dc7e <HAL_SD_IRQHandler+0x18e>
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	f003 0302 	and.w	r3, r3, #2
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	f000 80eb 	beq.w	800de54 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f006 fdf8 	bl	8014874 <HAL_SD_RxCpltCallback>
}
 800dc84:	e0e6      	b.n	800de54 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d00d      	beq.n	800dcb0 <HAL_SD_IRQHandler+0x1c0>
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f003 0308 	and.w	r3, r3, #8
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d008      	beq.n	800dcb0 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f001 f8a8 	bl	800edf4 <SD_Write_IT>
 800dca4:	e0d6      	b.n	800de54 <HAL_SD_IRQHandler+0x364>
 800dca6:	bf00      	nop
 800dca8:	ffff3ec5 	.word	0xffff3ec5
 800dcac:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcb6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	f000 809d 	beq.w	800ddfa <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcc6:	f003 0302 	and.w	r3, r3, #2
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d005      	beq.n	800dcda <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcd2:	f043 0202 	orr.w	r2, r3, #2
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dce0:	f003 0308 	and.w	r3, r3, #8
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d005      	beq.n	800dcf4 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcec:	f043 0208 	orr.w	r2, r3, #8
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcfa:	f003 0320 	and.w	r3, r3, #32
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d005      	beq.n	800dd0e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd06:	f043 0220 	orr.w	r2, r3, #32
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd14:	f003 0310 	and.w	r3, r3, #16
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d005      	beq.n	800dd28 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd20:	f043 0210 	orr.w	r2, r3, #16
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	4a4b      	ldr	r2, [pc, #300]	; (800de5c <HAL_SD_IRQHandler+0x36c>)
 800dd2e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800dd3e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	68da      	ldr	r2, [r3, #12]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd4e:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dd5e:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	68da      	ldr	r2, [r3, #12]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dd6e:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4618      	mov	r0, r3
 800dd76:	f004 fd57 	bl	8012828 <SDMMC_CmdStopTransfer>
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd80:	431a      	orrs	r2, r3
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	68da      	ldr	r2, [r3, #12]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dd94:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd9e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	f003 0308 	and.w	r3, r3, #8
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d00a      	beq.n	800ddc0 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2201      	movs	r2, #1
 800ddae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800ddb8:	6878      	ldr	r0, [r7, #4]
 800ddba:	f000 f851 	bl	800de60 <HAL_SD_ErrorCallback>
}
 800ddbe:	e049      	b.n	800de54 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d044      	beq.n	800de54 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d040      	beq.n	800de54 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800dde0:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	2200      	movs	r2, #0
 800dde8:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	2201      	movs	r2, #1
 800ddee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 f834 	bl	800de60 <HAL_SD_ErrorCallback>
}
 800ddf8:	e02c      	b.n	800de54 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800de04:	2b00      	cmp	r3, #0
 800de06:	d025      	beq.n	800de54 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de10:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de18:	f003 0304 	and.w	r3, r3, #4
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d10c      	bne.n	800de3a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f003 0320 	and.w	r3, r3, #32
 800de26:	2b00      	cmp	r3, #0
 800de28:	d003      	beq.n	800de32 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800de2a:	6878      	ldr	r0, [r7, #4]
 800de2c:	f001 f84a 	bl	800eec4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800de30:	e010      	b.n	800de54 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f001 f832 	bl	800ee9c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800de38:	e00c      	b.n	800de54 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	f003 0320 	and.w	r3, r3, #32
 800de40:	2b00      	cmp	r3, #0
 800de42:	d003      	beq.n	800de4c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f001 f833 	bl	800eeb0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800de4a:	e003      	b.n	800de54 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f001 f81b 	bl	800ee88 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800de52:	e7ff      	b.n	800de54 <HAL_SD_IRQHandler+0x364>
 800de54:	bf00      	nop
 800de56:	3710      	adds	r7, #16
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	18000f3a 	.word	0x18000f3a

0800de60 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800de60:	b480      	push	{r7}
 800de62:	b083      	sub	sp, #12
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800de68:	bf00      	nop
 800de6a:	370c      	adds	r7, #12
 800de6c:	46bd      	mov	sp, r7
 800de6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de72:	4770      	bx	lr

0800de74 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800de74:	b480      	push	{r7}
 800de76:	b083      	sub	sp, #12
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
 800de7c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de82:	0f9b      	lsrs	r3, r3, #30
 800de84:	b2da      	uxtb	r2, r3
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de8e:	0e9b      	lsrs	r3, r3, #26
 800de90:	b2db      	uxtb	r3, r3
 800de92:	f003 030f 	and.w	r3, r3, #15
 800de96:	b2da      	uxtb	r2, r3
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dea0:	0e1b      	lsrs	r3, r3, #24
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	f003 0303 	and.w	r3, r3, #3
 800dea8:	b2da      	uxtb	r2, r3
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800deb2:	0c1b      	lsrs	r3, r3, #16
 800deb4:	b2da      	uxtb	r2, r3
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800debe:	0a1b      	lsrs	r3, r3, #8
 800dec0:	b2da      	uxtb	r2, r3
 800dec2:	683b      	ldr	r3, [r7, #0]
 800dec4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800deca:	b2da      	uxtb	r2, r3
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ded4:	0d1b      	lsrs	r3, r3, #20
 800ded6:	b29a      	uxth	r2, r3
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dee0:	0c1b      	lsrs	r3, r3, #16
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	f003 030f 	and.w	r3, r3, #15
 800dee8:	b2da      	uxtb	r2, r3
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800def2:	0bdb      	lsrs	r3, r3, #15
 800def4:	b2db      	uxtb	r3, r3
 800def6:	f003 0301 	and.w	r3, r3, #1
 800defa:	b2da      	uxtb	r2, r3
 800defc:	683b      	ldr	r3, [r7, #0]
 800defe:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df04:	0b9b      	lsrs	r3, r3, #14
 800df06:	b2db      	uxtb	r3, r3
 800df08:	f003 0301 	and.w	r3, r3, #1
 800df0c:	b2da      	uxtb	r2, r3
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df16:	0b5b      	lsrs	r3, r3, #13
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	f003 0301 	and.w	r3, r3, #1
 800df1e:	b2da      	uxtb	r2, r3
 800df20:	683b      	ldr	r3, [r7, #0]
 800df22:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df28:	0b1b      	lsrs	r3, r3, #12
 800df2a:	b2db      	uxtb	r3, r3
 800df2c:	f003 0301 	and.w	r3, r3, #1
 800df30:	b2da      	uxtb	r2, r3
 800df32:	683b      	ldr	r3, [r7, #0]
 800df34:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	2200      	movs	r2, #0
 800df3a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df40:	2b00      	cmp	r3, #0
 800df42:	d163      	bne.n	800e00c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800df48:	009a      	lsls	r2, r3, #2
 800df4a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800df4e:	4013      	ands	r3, r2
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800df54:	0f92      	lsrs	r2, r2, #30
 800df56:	431a      	orrs	r2, r3
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df60:	0edb      	lsrs	r3, r3, #27
 800df62:	b2db      	uxtb	r3, r3
 800df64:	f003 0307 	and.w	r3, r3, #7
 800df68:	b2da      	uxtb	r2, r3
 800df6a:	683b      	ldr	r3, [r7, #0]
 800df6c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df72:	0e1b      	lsrs	r3, r3, #24
 800df74:	b2db      	uxtb	r3, r3
 800df76:	f003 0307 	and.w	r3, r3, #7
 800df7a:	b2da      	uxtb	r2, r3
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df84:	0d5b      	lsrs	r3, r3, #21
 800df86:	b2db      	uxtb	r3, r3
 800df88:	f003 0307 	and.w	r3, r3, #7
 800df8c:	b2da      	uxtb	r2, r3
 800df8e:	683b      	ldr	r3, [r7, #0]
 800df90:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df96:	0c9b      	lsrs	r3, r3, #18
 800df98:	b2db      	uxtb	r3, r3
 800df9a:	f003 0307 	and.w	r3, r3, #7
 800df9e:	b2da      	uxtb	r2, r3
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfa8:	0bdb      	lsrs	r3, r3, #15
 800dfaa:	b2db      	uxtb	r3, r3
 800dfac:	f003 0307 	and.w	r3, r3, #7
 800dfb0:	b2da      	uxtb	r2, r3
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	691b      	ldr	r3, [r3, #16]
 800dfba:	1c5a      	adds	r2, r3, #1
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800dfc0:	683b      	ldr	r3, [r7, #0]
 800dfc2:	7e1b      	ldrb	r3, [r3, #24]
 800dfc4:	b2db      	uxtb	r3, r3
 800dfc6:	f003 0307 	and.w	r3, r3, #7
 800dfca:	3302      	adds	r3, #2
 800dfcc:	2201      	movs	r2, #1
 800dfce:	fa02 f303 	lsl.w	r3, r2, r3
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800dfd6:	fb03 f202 	mul.w	r2, r3, r2
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	7a1b      	ldrb	r3, [r3, #8]
 800dfe2:	b2db      	uxtb	r3, r3
 800dfe4:	f003 030f 	and.w	r3, r3, #15
 800dfe8:	2201      	movs	r2, #1
 800dfea:	409a      	lsls	r2, r3
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dff4:	687a      	ldr	r2, [r7, #4]
 800dff6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800dff8:	0a52      	lsrs	r2, r2, #9
 800dffa:	fb03 f202 	mul.w	r2, r3, r2
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e008:	655a      	str	r2, [r3, #84]	; 0x54
 800e00a:	e031      	b.n	800e070 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e010:	2b01      	cmp	r3, #1
 800e012:	d11d      	bne.n	800e050 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e018:	041b      	lsls	r3, r3, #16
 800e01a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e022:	0c1b      	lsrs	r3, r3, #16
 800e024:	431a      	orrs	r2, r3
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	691b      	ldr	r3, [r3, #16]
 800e02e:	3301      	adds	r3, #1
 800e030:	029a      	lsls	r2, r3, #10
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e044:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	655a      	str	r2, [r3, #84]	; 0x54
 800e04e:	e00f      	b.n	800e070 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	4a58      	ldr	r2, [pc, #352]	; (800e1b8 <HAL_SD_GetCardCSD+0x344>)
 800e056:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e05c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2201      	movs	r2, #1
 800e068:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 800e06c:	2301      	movs	r3, #1
 800e06e:	e09d      	b.n	800e1ac <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e074:	0b9b      	lsrs	r3, r3, #14
 800e076:	b2db      	uxtb	r3, r3
 800e078:	f003 0301 	and.w	r3, r3, #1
 800e07c:	b2da      	uxtb	r2, r3
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e086:	09db      	lsrs	r3, r3, #7
 800e088:	b2db      	uxtb	r3, r3
 800e08a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e08e:	b2da      	uxtb	r2, r3
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e098:	b2db      	uxtb	r3, r3
 800e09a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e09e:	b2da      	uxtb	r2, r3
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0a8:	0fdb      	lsrs	r3, r3, #31
 800e0aa:	b2da      	uxtb	r2, r3
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0b4:	0f5b      	lsrs	r3, r3, #29
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	f003 0303 	and.w	r3, r3, #3
 800e0bc:	b2da      	uxtb	r2, r3
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0c6:	0e9b      	lsrs	r3, r3, #26
 800e0c8:	b2db      	uxtb	r3, r3
 800e0ca:	f003 0307 	and.w	r3, r3, #7
 800e0ce:	b2da      	uxtb	r2, r3
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0d8:	0d9b      	lsrs	r3, r3, #22
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	f003 030f 	and.w	r3, r3, #15
 800e0e0:	b2da      	uxtb	r2, r3
 800e0e2:	683b      	ldr	r3, [r7, #0]
 800e0e4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e0ea:	0d5b      	lsrs	r3, r3, #21
 800e0ec:	b2db      	uxtb	r3, r3
 800e0ee:	f003 0301 	and.w	r3, r3, #1
 800e0f2:	b2da      	uxtb	r2, r3
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e106:	0c1b      	lsrs	r3, r3, #16
 800e108:	b2db      	uxtb	r3, r3
 800e10a:	f003 0301 	and.w	r3, r3, #1
 800e10e:	b2da      	uxtb	r2, r3
 800e110:	683b      	ldr	r3, [r7, #0]
 800e112:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e11a:	0bdb      	lsrs	r3, r3, #15
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	f003 0301 	and.w	r3, r3, #1
 800e122:	b2da      	uxtb	r2, r3
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e12e:	0b9b      	lsrs	r3, r3, #14
 800e130:	b2db      	uxtb	r3, r3
 800e132:	f003 0301 	and.w	r3, r3, #1
 800e136:	b2da      	uxtb	r2, r3
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e142:	0b5b      	lsrs	r3, r3, #13
 800e144:	b2db      	uxtb	r3, r3
 800e146:	f003 0301 	and.w	r3, r3, #1
 800e14a:	b2da      	uxtb	r2, r3
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e156:	0b1b      	lsrs	r3, r3, #12
 800e158:	b2db      	uxtb	r3, r3
 800e15a:	f003 0301 	and.w	r3, r3, #1
 800e15e:	b2da      	uxtb	r2, r3
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e16a:	0a9b      	lsrs	r3, r3, #10
 800e16c:	b2db      	uxtb	r3, r3
 800e16e:	f003 0303 	and.w	r3, r3, #3
 800e172:	b2da      	uxtb	r2, r3
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e17e:	0a1b      	lsrs	r3, r3, #8
 800e180:	b2db      	uxtb	r3, r3
 800e182:	f003 0303 	and.w	r3, r3, #3
 800e186:	b2da      	uxtb	r2, r3
 800e188:	683b      	ldr	r3, [r7, #0]
 800e18a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e192:	085b      	lsrs	r3, r3, #1
 800e194:	b2db      	uxtb	r3, r3
 800e196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e19a:	b2da      	uxtb	r2, r3
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	2201      	movs	r2, #1
 800e1a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e1aa:	2300      	movs	r3, #0
}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	370c      	adds	r7, #12
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b6:	4770      	bx	lr
 800e1b8:	1fe00fff 	.word	0x1fe00fff

0800e1bc <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b094      	sub	sp, #80	; 0x50
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e1d2:	b2db      	uxtb	r3, r3
 800e1d4:	2b03      	cmp	r3, #3
 800e1d6:	d101      	bne.n	800e1dc <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800e1d8:	2301      	movs	r3, #1
 800e1da:	e0a7      	b.n	800e32c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e1dc:	f107 0308 	add.w	r3, r7, #8
 800e1e0:	4619      	mov	r1, r3
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f000 fb62 	bl	800e8ac <SD_SendSDStatus>
 800e1e8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e1ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d011      	beq.n	800e214 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	4a4f      	ldr	r2, [pc, #316]	; (800e334 <HAL_SD_GetCardStatus+0x178>)
 800e1f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e1fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e1fe:	431a      	orrs	r2, r3
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2201      	movs	r2, #1
 800e208:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e20c:	2301      	movs	r3, #1
 800e20e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e212:	e070      	b.n	800e2f6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	099b      	lsrs	r3, r3, #6
 800e218:	b2db      	uxtb	r3, r3
 800e21a:	f003 0303 	and.w	r3, r3, #3
 800e21e:	b2da      	uxtb	r2, r3
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	095b      	lsrs	r3, r3, #5
 800e228:	b2db      	uxtb	r3, r3
 800e22a:	f003 0301 	and.w	r3, r3, #1
 800e22e:	b2da      	uxtb	r2, r3
 800e230:	683b      	ldr	r3, [r7, #0]
 800e232:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	0a1b      	lsrs	r3, r3, #8
 800e238:	b29b      	uxth	r3, r3
 800e23a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e23e:	b29a      	uxth	r2, r3
 800e240:	68bb      	ldr	r3, [r7, #8]
 800e242:	0e1b      	lsrs	r3, r3, #24
 800e244:	b29b      	uxth	r3, r3
 800e246:	4313      	orrs	r3, r2
 800e248:	b29a      	uxth	r2, r3
 800e24a:	683b      	ldr	r3, [r7, #0]
 800e24c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	061a      	lsls	r2, r3, #24
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	021b      	lsls	r3, r3, #8
 800e256:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e25a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	0a1b      	lsrs	r3, r3, #8
 800e260:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e264:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	0e1b      	lsrs	r3, r3, #24
 800e26a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e270:	693b      	ldr	r3, [r7, #16]
 800e272:	b2da      	uxtb	r2, r3
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	0a1b      	lsrs	r3, r3, #8
 800e27c:	b2da      	uxtb	r2, r3
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e282:	693b      	ldr	r3, [r7, #16]
 800e284:	0d1b      	lsrs	r3, r3, #20
 800e286:	b2db      	uxtb	r3, r3
 800e288:	f003 030f 	and.w	r3, r3, #15
 800e28c:	b2da      	uxtb	r2, r3
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	0c1b      	lsrs	r3, r3, #16
 800e296:	b29b      	uxth	r3, r3
 800e298:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e29c:	b29a      	uxth	r2, r3
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	b29b      	uxth	r3, r3
 800e2a2:	b2db      	uxtb	r3, r3
 800e2a4:	b29b      	uxth	r3, r3
 800e2a6:	4313      	orrs	r3, r2
 800e2a8:	b29a      	uxth	r2, r3
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	0a9b      	lsrs	r3, r3, #10
 800e2b2:	b2db      	uxtb	r3, r3
 800e2b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e2b8:	b2da      	uxtb	r2, r3
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	0a1b      	lsrs	r3, r3, #8
 800e2c2:	b2db      	uxtb	r3, r3
 800e2c4:	f003 0303 	and.w	r3, r3, #3
 800e2c8:	b2da      	uxtb	r2, r3
 800e2ca:	683b      	ldr	r3, [r7, #0]
 800e2cc:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e2ce:	697b      	ldr	r3, [r7, #20]
 800e2d0:	091b      	lsrs	r3, r3, #4
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	f003 030f 	and.w	r3, r3, #15
 800e2d8:	b2da      	uxtb	r2, r3
 800e2da:	683b      	ldr	r3, [r7, #0]
 800e2dc:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	b2db      	uxtb	r3, r3
 800e2e2:	f003 030f 	and.w	r3, r3, #15
 800e2e6:	b2da      	uxtb	r2, r3
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e2ec:	69bb      	ldr	r3, [r7, #24]
 800e2ee:	0e1b      	lsrs	r3, r3, #24
 800e2f0:	b2da      	uxtb	r2, r3
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e2fe:	4618      	mov	r0, r3
 800e300:	f004 f9e2 	bl	80126c8 <SDMMC_CmdBlockLength>
 800e304:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800e306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d00d      	beq.n	800e328 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	4a08      	ldr	r2, [pc, #32]	; (800e334 <HAL_SD_GetCardStatus+0x178>)
 800e312:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e318:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2201      	movs	r2, #1
 800e31e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800e322:	2301      	movs	r3, #1
 800e324:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800e328:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e32c:	4618      	mov	r0, r3
 800e32e:	3750      	adds	r7, #80	; 0x50
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}
 800e334:	1fe00fff 	.word	0x1fe00fff

0800e338 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e338:	b480      	push	{r7}
 800e33a:	b083      	sub	sp, #12
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e346:	683b      	ldr	r3, [r7, #0]
 800e348:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e356:	683b      	ldr	r3, [r7, #0]
 800e358:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e37e:	683b      	ldr	r3, [r7, #0]
 800e380:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e382:	2300      	movs	r3, #0
}
 800e384:	4618      	mov	r0, r3
 800e386:	370c      	adds	r7, #12
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr

0800e390 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e390:	b590      	push	{r4, r7, lr}
 800e392:	b08d      	sub	sp, #52	; 0x34
 800e394:	af02      	add	r7, sp, #8
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800e39a:	2300      	movs	r3, #0
 800e39c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2203      	movs	r2, #3
 800e3a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3ac:	2b03      	cmp	r3, #3
 800e3ae:	d02e      	beq.n	800e40e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e3b6:	d106      	bne.n	800e3c6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3bc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	635a      	str	r2, [r3, #52]	; 0x34
 800e3c4:	e029      	b.n	800e41a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800e3c6:	683b      	ldr	r3, [r7, #0]
 800e3c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e3cc:	d10a      	bne.n	800e3e4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f000 fb64 	bl	800ea9c <SD_WideBus_Enable>
 800e3d4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3da:	6a3b      	ldr	r3, [r7, #32]
 800e3dc:	431a      	orrs	r2, r3
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	635a      	str	r2, [r3, #52]	; 0x34
 800e3e2:	e01a      	b.n	800e41a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800e3e4:	683b      	ldr	r3, [r7, #0]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d10a      	bne.n	800e400 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 fba1 	bl	800eb32 <SD_WideBus_Disable>
 800e3f0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e3f6:	6a3b      	ldr	r3, [r7, #32]
 800e3f8:	431a      	orrs	r2, r3
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	635a      	str	r2, [r3, #52]	; 0x34
 800e3fe:	e00c      	b.n	800e41a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e404:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	635a      	str	r2, [r3, #52]	; 0x34
 800e40c:	e005      	b.n	800e41a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e412:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d007      	beq.n	800e432 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	4a5f      	ldr	r2, [pc, #380]	; (800e5a4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e428:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e42a:	2301      	movs	r3, #1
 800e42c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e430:	e096      	b.n	800e560 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800e432:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800e436:	f04f 0100 	mov.w	r1, #0
 800e43a:	f7fd fcf5 	bl	800be28 <HAL_RCCEx_GetPeriphCLKFreq>
 800e43e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 800e440:	69fb      	ldr	r3, [r7, #28]
 800e442:	2b00      	cmp	r3, #0
 800e444:	f000 8083 	beq.w	800e54e <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	685b      	ldr	r3, [r3, #4]
 800e44c:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	689b      	ldr	r3, [r3, #8]
 800e452:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	691b      	ldr	r3, [r3, #16]
 800e45c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	695a      	ldr	r2, [r3, #20]
 800e462:	69fb      	ldr	r3, [r7, #28]
 800e464:	4950      	ldr	r1, [pc, #320]	; (800e5a8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e466:	fba1 1303 	umull	r1, r3, r1, r3
 800e46a:	0e1b      	lsrs	r3, r3, #24
 800e46c:	429a      	cmp	r2, r3
 800e46e:	d303      	bcc.n	800e478 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	695b      	ldr	r3, [r3, #20]
 800e474:	61bb      	str	r3, [r7, #24]
 800e476:	e05a      	b.n	800e52e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e47c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e480:	d103      	bne.n	800e48a <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	695b      	ldr	r3, [r3, #20]
 800e486:	61bb      	str	r3, [r7, #24]
 800e488:	e051      	b.n	800e52e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e48e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e492:	d126      	bne.n	800e4e2 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	695b      	ldr	r3, [r3, #20]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d10e      	bne.n	800e4ba <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	4a43      	ldr	r2, [pc, #268]	; (800e5ac <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e4a0:	4293      	cmp	r3, r2
 800e4a2:	d906      	bls.n	800e4b2 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e4a4:	69fb      	ldr	r3, [r7, #28]
 800e4a6:	4a40      	ldr	r2, [pc, #256]	; (800e5a8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e4a8:	fba2 2303 	umull	r2, r3, r2, r3
 800e4ac:	0e5b      	lsrs	r3, r3, #25
 800e4ae:	61bb      	str	r3, [r7, #24]
 800e4b0:	e03d      	b.n	800e52e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	695b      	ldr	r3, [r3, #20]
 800e4b6:	61bb      	str	r3, [r7, #24]
 800e4b8:	e039      	b.n	800e52e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	695b      	ldr	r3, [r3, #20]
 800e4be:	005b      	lsls	r3, r3, #1
 800e4c0:	69fa      	ldr	r2, [r7, #28]
 800e4c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4c6:	4a39      	ldr	r2, [pc, #228]	; (800e5ac <HAL_SD_ConfigWideBusOperation+0x21c>)
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	d906      	bls.n	800e4da <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	4a36      	ldr	r2, [pc, #216]	; (800e5a8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e4d0:	fba2 2303 	umull	r2, r3, r2, r3
 800e4d4:	0e5b      	lsrs	r3, r3, #25
 800e4d6:	61bb      	str	r3, [r7, #24]
 800e4d8:	e029      	b.n	800e52e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	695b      	ldr	r3, [r3, #20]
 800e4de:	61bb      	str	r3, [r7, #24]
 800e4e0:	e025      	b.n	800e52e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	695b      	ldr	r3, [r3, #20]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d10e      	bne.n	800e508 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800e4ea:	69fb      	ldr	r3, [r7, #28]
 800e4ec:	4a30      	ldr	r2, [pc, #192]	; (800e5b0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d906      	bls.n	800e500 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e4f2:	69fb      	ldr	r3, [r7, #28]
 800e4f4:	4a2c      	ldr	r2, [pc, #176]	; (800e5a8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e4f6:	fba2 2303 	umull	r2, r3, r2, r3
 800e4fa:	0e1b      	lsrs	r3, r3, #24
 800e4fc:	61bb      	str	r3, [r7, #24]
 800e4fe:	e016      	b.n	800e52e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	695b      	ldr	r3, [r3, #20]
 800e504:	61bb      	str	r3, [r7, #24]
 800e506:	e012      	b.n	800e52e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	695b      	ldr	r3, [r3, #20]
 800e50c:	005b      	lsls	r3, r3, #1
 800e50e:	69fa      	ldr	r2, [r7, #28]
 800e510:	fbb2 f3f3 	udiv	r3, r2, r3
 800e514:	4a26      	ldr	r2, [pc, #152]	; (800e5b0 <HAL_SD_ConfigWideBusOperation+0x220>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d906      	bls.n	800e528 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800e51a:	69fb      	ldr	r3, [r7, #28]
 800e51c:	4a22      	ldr	r2, [pc, #136]	; (800e5a8 <HAL_SD_ConfigWideBusOperation+0x218>)
 800e51e:	fba2 2303 	umull	r2, r3, r2, r3
 800e522:	0e1b      	lsrs	r3, r3, #24
 800e524:	61bb      	str	r3, [r7, #24]
 800e526:	e002      	b.n	800e52e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	695b      	ldr	r3, [r3, #20]
 800e52c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	681c      	ldr	r4, [r3, #0]
 800e532:	466a      	mov	r2, sp
 800e534:	f107 0314 	add.w	r3, r7, #20
 800e538:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e53c:	e882 0003 	stmia.w	r2, {r0, r1}
 800e540:	f107 0308 	add.w	r3, r7, #8
 800e544:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e546:	4620      	mov	r0, r4
 800e548:	f003 ffe0 	bl	801250c <SDMMC_Init>
 800e54c:	e008      	b.n	800e560 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e552:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800e55a:	2301      	movs	r3, #1
 800e55c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e568:	4618      	mov	r0, r3
 800e56a:	f004 f8ad 	bl	80126c8 <SDMMC_CmdBlockLength>
 800e56e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e570:	6a3b      	ldr	r3, [r7, #32]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d00c      	beq.n	800e590 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	4a0a      	ldr	r2, [pc, #40]	; (800e5a4 <HAL_SD_ConfigWideBusOperation+0x214>)
 800e57c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e582:	6a3b      	ldr	r3, [r7, #32]
 800e584:	431a      	orrs	r2, r3
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e58a:	2301      	movs	r3, #1
 800e58c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	2201      	movs	r2, #1
 800e594:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 800e598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e59c:	4618      	mov	r0, r3
 800e59e:	372c      	adds	r7, #44	; 0x2c
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd90      	pop	{r4, r7, pc}
 800e5a4:	1fe00fff 	.word	0x1fe00fff
 800e5a8:	55e63b89 	.word	0x55e63b89
 800e5ac:	02faf080 	.word	0x02faf080
 800e5b0:	017d7840 	.word	0x017d7840

0800e5b4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b086      	sub	sp, #24
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e5c0:	f107 030c 	add.w	r3, r7, #12
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	6878      	ldr	r0, [r7, #4]
 800e5c8:	f000 fa40 	bl	800ea4c <SD_SendStatus>
 800e5cc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d005      	beq.n	800e5e0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e5d8:	697b      	ldr	r3, [r7, #20]
 800e5da:	431a      	orrs	r2, r3
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	0a5b      	lsrs	r3, r3, #9
 800e5e4:	f003 030f 	and.w	r3, r3, #15
 800e5e8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e5ea:	693b      	ldr	r3, [r7, #16]
}
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	3718      	adds	r7, #24
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b090      	sub	sp, #64	; 0x40
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 800e600:	f7f5 fb86 	bl	8003d10 <HAL_GetTick>
 800e604:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	4618      	mov	r0, r3
 800e60c:	f003 ffd7 	bl	80125be <SDMMC_GetPowerState>
 800e610:	4603      	mov	r3, r0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d102      	bne.n	800e61c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e616:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e61a:	e0b5      	b.n	800e788 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e620:	2b03      	cmp	r3, #3
 800e622:	d02e      	beq.n	800e682 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	4618      	mov	r0, r3
 800e62a:	f004 fa22 	bl	8012a72 <SDMMC_CmdSendCID>
 800e62e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e632:	2b00      	cmp	r3, #0
 800e634:	d001      	beq.n	800e63a <SD_InitCard+0x46>
    {
      return errorstate;
 800e636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e638:	e0a6      	b.n	800e788 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	2100      	movs	r1, #0
 800e640:	4618      	mov	r0, r3
 800e642:	f004 f802 	bl	801264a <SDMMC_GetResponse>
 800e646:	4602      	mov	r2, r0
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2104      	movs	r1, #4
 800e652:	4618      	mov	r0, r3
 800e654:	f003 fff9 	bl	801264a <SDMMC_GetResponse>
 800e658:	4602      	mov	r2, r0
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2108      	movs	r1, #8
 800e664:	4618      	mov	r0, r3
 800e666:	f003 fff0 	bl	801264a <SDMMC_GetResponse>
 800e66a:	4602      	mov	r2, r0
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	210c      	movs	r1, #12
 800e676:	4618      	mov	r0, r3
 800e678:	f003 ffe7 	bl	801264a <SDMMC_GetResponse>
 800e67c:	4602      	mov	r2, r0
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e686:	2b03      	cmp	r3, #3
 800e688:	d01d      	beq.n	800e6c6 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800e68a:	e019      	b.n	800e6c0 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	f107 020a 	add.w	r2, r7, #10
 800e694:	4611      	mov	r1, r2
 800e696:	4618      	mov	r0, r3
 800e698:	f004 fa2a 	bl	8012af0 <SDMMC_CmdSetRelAdd>
 800e69c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800e69e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	d001      	beq.n	800e6a8 <SD_InitCard+0xb4>
      {
        return errorstate;
 800e6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6a6:	e06f      	b.n	800e788 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800e6a8:	f7f5 fb32 	bl	8003d10 <HAL_GetTick>
 800e6ac:	4602      	mov	r2, r0
 800e6ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6b0:	1ad3      	subs	r3, r2, r3
 800e6b2:	f241 3287 	movw	r2, #4999	; 0x1387
 800e6b6:	4293      	cmp	r3, r2
 800e6b8:	d902      	bls.n	800e6c0 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800e6ba:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e6be:	e063      	b.n	800e788 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 800e6c0:	897b      	ldrh	r3, [r7, #10]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d0e2      	beq.n	800e68c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ca:	2b03      	cmp	r3, #3
 800e6cc:	d036      	beq.n	800e73c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e6ce:	897b      	ldrh	r3, [r7, #10]
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	681a      	ldr	r2, [r3, #0]
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6de:	041b      	lsls	r3, r3, #16
 800e6e0:	4619      	mov	r1, r3
 800e6e2:	4610      	mov	r0, r2
 800e6e4:	f004 f9e4 	bl	8012ab0 <SDMMC_CmdSendCSD>
 800e6e8:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800e6ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d001      	beq.n	800e6f4 <SD_InitCard+0x100>
    {
      return errorstate;
 800e6f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6f2:	e049      	b.n	800e788 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	2100      	movs	r1, #0
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	f003 ffa5 	bl	801264a <SDMMC_GetResponse>
 800e700:	4602      	mov	r2, r0
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	2104      	movs	r1, #4
 800e70c:	4618      	mov	r0, r3
 800e70e:	f003 ff9c 	bl	801264a <SDMMC_GetResponse>
 800e712:	4602      	mov	r2, r0
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	2108      	movs	r1, #8
 800e71e:	4618      	mov	r0, r3
 800e720:	f003 ff93 	bl	801264a <SDMMC_GetResponse>
 800e724:	4602      	mov	r2, r0
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	210c      	movs	r1, #12
 800e730:	4618      	mov	r0, r3
 800e732:	f003 ff8a 	bl	801264a <SDMMC_GetResponse>
 800e736:	4602      	mov	r2, r0
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	2104      	movs	r1, #4
 800e742:	4618      	mov	r0, r3
 800e744:	f003 ff81 	bl	801264a <SDMMC_GetResponse>
 800e748:	4603      	mov	r3, r0
 800e74a:	0d1a      	lsrs	r2, r3, #20
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e750:	f107 030c 	add.w	r3, r7, #12
 800e754:	4619      	mov	r1, r3
 800e756:	6878      	ldr	r0, [r7, #4]
 800e758:	f7ff fb8c 	bl	800de74 <HAL_SD_GetCardCSD>
 800e75c:	4603      	mov	r3, r0
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d002      	beq.n	800e768 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e762:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e766:	e00f      	b.n	800e788 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681a      	ldr	r2, [r3, #0]
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e770:	041b      	lsls	r3, r3, #16
 800e772:	4619      	mov	r1, r3
 800e774:	4610      	mov	r0, r2
 800e776:	f004 f893 	bl	80128a0 <SDMMC_CmdSelDesel>
 800e77a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800e77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d001      	beq.n	800e786 <SD_InitCard+0x192>
  {
    return errorstate;
 800e782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e784:	e000      	b.n	800e788 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3740      	adds	r7, #64	; 0x40
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b086      	sub	sp, #24
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e798:	2300      	movs	r3, #0
 800e79a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800e79c:	2300      	movs	r3, #0
 800e79e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f004 f89c 	bl	80128e6 <SDMMC_CmdGoIdleState>
 800e7ae:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d001      	beq.n	800e7ba <SD_PowerON+0x2a>
  {
    return errorstate;
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	e072      	b.n	800e8a0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	4618      	mov	r0, r3
 800e7c0:	f004 f8af 	bl	8012922 <SDMMC_CmdOperCond>
 800e7c4:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e7cc:	d10d      	bne.n	800e7ea <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2200      	movs	r2, #0
 800e7d2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	4618      	mov	r0, r3
 800e7da:	f004 f884 	bl	80128e6 <SDMMC_CmdGoIdleState>
 800e7de:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d004      	beq.n	800e7f0 <SD_PowerON+0x60>
    {
      return errorstate;
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	e05a      	b.n	800e8a0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	2201      	movs	r2, #1
 800e7ee:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7f4:	2b01      	cmp	r3, #1
 800e7f6:	d137      	bne.n	800e868 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	2100      	movs	r1, #0
 800e7fe:	4618      	mov	r0, r3
 800e800:	f004 f8af 	bl	8012962 <SDMMC_CmdAppCommand>
 800e804:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d02d      	beq.n	800e868 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e80c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e810:	e046      	b.n	800e8a0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	2100      	movs	r1, #0
 800e818:	4618      	mov	r0, r3
 800e81a:	f004 f8a2 	bl	8012962 <SDMMC_CmdAppCommand>
 800e81e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d001      	beq.n	800e82a <SD_PowerON+0x9a>
    {
      return errorstate;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	e03a      	b.n	800e8a0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	491e      	ldr	r1, [pc, #120]	; (800e8a8 <SD_PowerON+0x118>)
 800e830:	4618      	mov	r0, r3
 800e832:	f004 f8b9 	bl	80129a8 <SDMMC_CmdAppOperCommand>
 800e836:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d002      	beq.n	800e844 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e83e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e842:	e02d      	b.n	800e8a0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	2100      	movs	r1, #0
 800e84a:	4618      	mov	r0, r3
 800e84c:	f003 fefd 	bl	801264a <SDMMC_GetResponse>
 800e850:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e852:	697b      	ldr	r3, [r7, #20]
 800e854:	0fdb      	lsrs	r3, r3, #31
 800e856:	2b01      	cmp	r3, #1
 800e858:	d101      	bne.n	800e85e <SD_PowerON+0xce>
 800e85a:	2301      	movs	r3, #1
 800e85c:	e000      	b.n	800e860 <SD_PowerON+0xd0>
 800e85e:	2300      	movs	r3, #0
 800e860:	613b      	str	r3, [r7, #16]

    count++;
 800e862:	68bb      	ldr	r3, [r7, #8]
 800e864:	3301      	adds	r3, #1
 800e866:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e86e:	4293      	cmp	r3, r2
 800e870:	d802      	bhi.n	800e878 <SD_PowerON+0xe8>
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d0cc      	beq.n	800e812 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e87e:	4293      	cmp	r3, r2
 800e880:	d902      	bls.n	800e888 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e882:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e886:	e00b      	b.n	800e8a0 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2200      	movs	r2, #0
 800e88c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800e88e:	697b      	ldr	r3, [r7, #20]
 800e890:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e894:	2b00      	cmp	r3, #0
 800e896:	d002      	beq.n	800e89e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2201      	movs	r2, #1
 800e89c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e89e:	2300      	movs	r3, #0
}
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	3718      	adds	r7, #24
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	c1100000 	.word	0xc1100000

0800e8ac <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e8ac:	b580      	push	{r7, lr}
 800e8ae:	b08c      	sub	sp, #48	; 0x30
 800e8b0:	af00      	add	r7, sp, #0
 800e8b2:	6078      	str	r0, [r7, #4]
 800e8b4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e8b6:	f7f5 fa2b 	bl	8003d10 <HAL_GetTick>
 800e8ba:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	2100      	movs	r1, #0
 800e8c6:	4618      	mov	r0, r3
 800e8c8:	f003 febf 	bl	801264a <SDMMC_GetResponse>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e8d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e8d6:	d102      	bne.n	800e8de <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e8d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e8dc:	e0b0      	b.n	800ea40 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	2140      	movs	r1, #64	; 0x40
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f003 feef 	bl	80126c8 <SDMMC_CmdBlockLength>
 800e8ea:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e8ec:	6a3b      	ldr	r3, [r7, #32]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d005      	beq.n	800e8fe <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e8fa:	6a3b      	ldr	r3, [r7, #32]
 800e8fc:	e0a0      	b.n	800ea40 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681a      	ldr	r2, [r3, #0]
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e906:	041b      	lsls	r3, r3, #16
 800e908:	4619      	mov	r1, r3
 800e90a:	4610      	mov	r0, r2
 800e90c:	f004 f829 	bl	8012962 <SDMMC_CmdAppCommand>
 800e910:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e912:	6a3b      	ldr	r3, [r7, #32]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d005      	beq.n	800e924 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e920:	6a3b      	ldr	r3, [r7, #32]
 800e922:	e08d      	b.n	800ea40 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e924:	f04f 33ff 	mov.w	r3, #4294967295
 800e928:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e92a:	2340      	movs	r3, #64	; 0x40
 800e92c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e92e:	2360      	movs	r3, #96	; 0x60
 800e930:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e932:	2302      	movs	r3, #2
 800e934:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e936:	2300      	movs	r3, #0
 800e938:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e93a:	2301      	movs	r3, #1
 800e93c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	f107 0208 	add.w	r2, r7, #8
 800e946:	4611      	mov	r1, r2
 800e948:	4618      	mov	r0, r3
 800e94a:	f003 fe91 	bl	8012670 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	4618      	mov	r0, r3
 800e954:	f004 f911 	bl	8012b7a <SDMMC_CmdStatusRegister>
 800e958:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800e95a:	6a3b      	ldr	r3, [r7, #32]
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d02b      	beq.n	800e9b8 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 800e968:	6a3b      	ldr	r3, [r7, #32]
 800e96a:	e069      	b.n	800ea40 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e976:	2b00      	cmp	r3, #0
 800e978:	d013      	beq.n	800e9a2 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800e97a:	2300      	movs	r3, #0
 800e97c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e97e:	e00d      	b.n	800e99c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	4618      	mov	r0, r3
 800e986:	f003 fdeb 	bl	8012560 <SDMMC_ReadFIFO>
 800e98a:	4602      	mov	r2, r0
 800e98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98e:	601a      	str	r2, [r3, #0]
        pData++;
 800e990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e992:	3304      	adds	r3, #4
 800e994:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 800e996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e998:	3301      	adds	r3, #1
 800e99a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99e:	2b07      	cmp	r3, #7
 800e9a0:	d9ee      	bls.n	800e980 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e9a2:	f7f5 f9b5 	bl	8003d10 <HAL_GetTick>
 800e9a6:	4602      	mov	r2, r0
 800e9a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9aa:	1ad3      	subs	r3, r2, r3
 800e9ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9b0:	d102      	bne.n	800e9b8 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e9b2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e9b6:	e043      	b.n	800ea40 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9be:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d0d2      	beq.n	800e96c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9cc:	f003 0308 	and.w	r3, r3, #8
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d001      	beq.n	800e9d8 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e9d4:	2308      	movs	r3, #8
 800e9d6:	e033      	b.n	800ea40 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9de:	f003 0302 	and.w	r3, r3, #2
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	d001      	beq.n	800e9ea <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e9e6:	2302      	movs	r3, #2
 800e9e8:	e02a      	b.n	800ea40 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e9f0:	f003 0320 	and.w	r3, r3, #32
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d017      	beq.n	800ea28 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e9f8:	2320      	movs	r3, #32
 800e9fa:	e021      	b.n	800ea40 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4618      	mov	r0, r3
 800ea02:	f003 fdad 	bl	8012560 <SDMMC_ReadFIFO>
 800ea06:	4602      	mov	r2, r0
 800ea08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0a:	601a      	str	r2, [r3, #0]
    pData++;
 800ea0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea0e:	3304      	adds	r3, #4
 800ea10:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ea12:	f7f5 f97d 	bl	8003d10 <HAL_GetTick>
 800ea16:	4602      	mov	r2, r0
 800ea18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea1a:	1ad3      	subs	r3, r2, r3
 800ea1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea20:	d102      	bne.n	800ea28 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ea22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ea26:	e00b      	b.n	800ea40 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d1e2      	bne.n	800e9fc <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	4a03      	ldr	r2, [pc, #12]	; (800ea48 <SD_SendSDStatus+0x19c>)
 800ea3c:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800ea3e:	2300      	movs	r3, #0
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3730      	adds	r7, #48	; 0x30
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}
 800ea48:	18000f3a 	.word	0x18000f3a

0800ea4c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 800ea56:	683b      	ldr	r3, [r7, #0]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d102      	bne.n	800ea62 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ea5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ea60:	e018      	b.n	800ea94 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681a      	ldr	r2, [r3, #0]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea6a:	041b      	lsls	r3, r3, #16
 800ea6c:	4619      	mov	r1, r3
 800ea6e:	4610      	mov	r0, r2
 800ea70:	f004 f860 	bl	8012b34 <SDMMC_CmdSendStatus>
 800ea74:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d001      	beq.n	800ea80 <SD_SendStatus+0x34>
  {
    return errorstate;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	e009      	b.n	800ea94 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	2100      	movs	r1, #0
 800ea86:	4618      	mov	r0, r3
 800ea88:	f003 fddf 	bl	801264a <SDMMC_GetResponse>
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	683b      	ldr	r3, [r7, #0]
 800ea90:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ea92:	2300      	movs	r3, #0
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	3710      	adds	r7, #16
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	bd80      	pop	{r7, pc}

0800ea9c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b086      	sub	sp, #24
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	60fb      	str	r3, [r7, #12]
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	2100      	movs	r1, #0
 800eab2:	4618      	mov	r0, r3
 800eab4:	f003 fdc9 	bl	801264a <SDMMC_GetResponse>
 800eab8:	4603      	mov	r3, r0
 800eaba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eabe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eac2:	d102      	bne.n	800eaca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eac4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eac8:	e02f      	b.n	800eb2a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eaca:	f107 030c 	add.w	r3, r7, #12
 800eace:	4619      	mov	r1, r3
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f000 f879 	bl	800ebc8 <SD_FindSCR>
 800ead6:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800ead8:	697b      	ldr	r3, [r7, #20]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d001      	beq.n	800eae2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	e023      	b.n	800eb2a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eae2:	693b      	ldr	r3, [r7, #16]
 800eae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d01c      	beq.n	800eb26 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681a      	ldr	r2, [r3, #0]
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eaf4:	041b      	lsls	r3, r3, #16
 800eaf6:	4619      	mov	r1, r3
 800eaf8:	4610      	mov	r0, r2
 800eafa:	f003 ff32 	bl	8012962 <SDMMC_CmdAppCommand>
 800eafe:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d001      	beq.n	800eb0a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	e00f      	b.n	800eb2a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	2102      	movs	r1, #2
 800eb10:	4618      	mov	r0, r3
 800eb12:	f003 ff69 	bl	80129e8 <SDMMC_CmdBusWidth>
 800eb16:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d001      	beq.n	800eb22 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	e003      	b.n	800eb2a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eb22:	2300      	movs	r3, #0
 800eb24:	e001      	b.n	800eb2a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eb26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eb2a:	4618      	mov	r0, r3
 800eb2c:	3718      	adds	r7, #24
 800eb2e:	46bd      	mov	sp, r7
 800eb30:	bd80      	pop	{r7, pc}

0800eb32 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800eb32:	b580      	push	{r7, lr}
 800eb34:	b086      	sub	sp, #24
 800eb36:	af00      	add	r7, sp, #0
 800eb38:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	60fb      	str	r3, [r7, #12]
 800eb3e:	2300      	movs	r3, #0
 800eb40:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	2100      	movs	r1, #0
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f003 fd7e 	bl	801264a <SDMMC_GetResponse>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eb58:	d102      	bne.n	800eb60 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800eb5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800eb5e:	e02f      	b.n	800ebc0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800eb60:	f107 030c 	add.w	r3, r7, #12
 800eb64:	4619      	mov	r1, r3
 800eb66:	6878      	ldr	r0, [r7, #4]
 800eb68:	f000 f82e 	bl	800ebc8 <SD_FindSCR>
 800eb6c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d001      	beq.n	800eb78 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	e023      	b.n	800ebc0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d01c      	beq.n	800ebbc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681a      	ldr	r2, [r3, #0]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb8a:	041b      	lsls	r3, r3, #16
 800eb8c:	4619      	mov	r1, r3
 800eb8e:	4610      	mov	r0, r2
 800eb90:	f003 fee7 	bl	8012962 <SDMMC_CmdAppCommand>
 800eb94:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d001      	beq.n	800eba0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	e00f      	b.n	800ebc0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	2100      	movs	r1, #0
 800eba6:	4618      	mov	r0, r3
 800eba8:	f003 ff1e 	bl	80129e8 <SDMMC_CmdBusWidth>
 800ebac:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800ebae:	697b      	ldr	r3, [r7, #20]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d001      	beq.n	800ebb8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	e003      	b.n	800ebc0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ebb8:	2300      	movs	r3, #0
 800ebba:	e001      	b.n	800ebc0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ebbc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3718      	adds	r7, #24
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}

0800ebc8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800ebc8:	b580      	push	{r7, lr}
 800ebca:	b08e      	sub	sp, #56	; 0x38
 800ebcc:	af00      	add	r7, sp, #0
 800ebce:	6078      	str	r0, [r7, #4]
 800ebd0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800ebd2:	f7f5 f89d 	bl	8003d10 <HAL_GetTick>
 800ebd6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800ebdc:	2300      	movs	r3, #0
 800ebde:	60bb      	str	r3, [r7, #8]
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	2108      	movs	r1, #8
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f003 fd6a 	bl	80126c8 <SDMMC_CmdBlockLength>
 800ebf4:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ebf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d001      	beq.n	800ec00 <SD_FindSCR+0x38>
  {
    return errorstate;
 800ebfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebfe:	e0ad      	b.n	800ed5c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681a      	ldr	r2, [r3, #0]
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec08:	041b      	lsls	r3, r3, #16
 800ec0a:	4619      	mov	r1, r3
 800ec0c:	4610      	mov	r0, r2
 800ec0e:	f003 fea8 	bl	8012962 <SDMMC_CmdAppCommand>
 800ec12:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d001      	beq.n	800ec1e <SD_FindSCR+0x56>
  {
    return errorstate;
 800ec1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1c:	e09e      	b.n	800ed5c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ec1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ec22:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ec24:	2308      	movs	r3, #8
 800ec26:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ec28:	2330      	movs	r3, #48	; 0x30
 800ec2a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ec2c:	2302      	movs	r3, #2
 800ec2e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ec30:	2300      	movs	r3, #0
 800ec32:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ec34:	2301      	movs	r3, #1
 800ec36:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	f107 0210 	add.w	r2, r7, #16
 800ec40:	4611      	mov	r1, r2
 800ec42:	4618      	mov	r0, r3
 800ec44:	f003 fd14 	bl	8012670 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	4618      	mov	r0, r3
 800ec4e:	f003 feee 	bl	8012a2e <SDMMC_CmdSendSCR>
 800ec52:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d027      	beq.n	800ecaa <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ec5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec5c:	e07e      	b.n	800ed5c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d113      	bne.n	800ec94 <SD_FindSCR+0xcc>
 800ec6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d110      	bne.n	800ec94 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	4618      	mov	r0, r3
 800ec78:	f003 fc72 	bl	8012560 <SDMMC_ReadFIFO>
 800ec7c:	4603      	mov	r3, r0
 800ec7e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	4618      	mov	r0, r3
 800ec86:	f003 fc6b 	bl	8012560 <SDMMC_ReadFIFO>
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	60fb      	str	r3, [r7, #12]
      index++;
 800ec8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec90:	3301      	adds	r3, #1
 800ec92:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ec94:	f7f5 f83c 	bl	8003d10 <HAL_GetTick>
 800ec98:	4602      	mov	r2, r0
 800ec9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec9c:	1ad3      	subs	r3, r2, r3
 800ec9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eca2:	d102      	bne.n	800ecaa <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800eca4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eca8:	e058      	b.n	800ed5c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ecb0:	f240 532a 	movw	r3, #1322	; 0x52a
 800ecb4:	4013      	ands	r3, r2
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	d0d1      	beq.n	800ec5e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecc0:	f003 0308 	and.w	r3, r3, #8
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d005      	beq.n	800ecd4 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	2208      	movs	r2, #8
 800ecce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ecd0:	2308      	movs	r3, #8
 800ecd2:	e043      	b.n	800ed5c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecda:	f003 0302 	and.w	r3, r3, #2
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d005      	beq.n	800ecee <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2202      	movs	r2, #2
 800ece8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ecea:	2302      	movs	r3, #2
 800ecec:	e036      	b.n	800ed5c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecf4:	f003 0320 	and.w	r3, r3, #32
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d005      	beq.n	800ed08 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	2220      	movs	r2, #32
 800ed02:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800ed04:	2320      	movs	r3, #32
 800ed06:	e029      	b.n	800ed5c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	4a15      	ldr	r2, [pc, #84]	; (800ed64 <SD_FindSCR+0x19c>)
 800ed0e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	061a      	lsls	r2, r3, #24
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	021b      	lsls	r3, r3, #8
 800ed18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ed1c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	0a1b      	lsrs	r3, r3, #8
 800ed22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ed26:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ed28:	68fb      	ldr	r3, [r7, #12]
 800ed2a:	0e1b      	lsrs	r3, r3, #24
 800ed2c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800ed2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed30:	601a      	str	r2, [r3, #0]
    scr++;
 800ed32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed34:	3304      	adds	r3, #4
 800ed36:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ed38:	68bb      	ldr	r3, [r7, #8]
 800ed3a:	061a      	lsls	r2, r3, #24
 800ed3c:	68bb      	ldr	r3, [r7, #8]
 800ed3e:	021b      	lsls	r3, r3, #8
 800ed40:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ed44:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	0a1b      	lsrs	r3, r3, #8
 800ed4a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ed4e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ed50:	68bb      	ldr	r3, [r7, #8]
 800ed52:	0e1b      	lsrs	r3, r3, #24
 800ed54:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800ed56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed58:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800ed5a:	2300      	movs	r3, #0
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	3738      	adds	r7, #56	; 0x38
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}
 800ed64:	18000f3a 	.word	0x18000f3a

0800ed68 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b086      	sub	sp, #24
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed74:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed7a:	2b1f      	cmp	r3, #31
 800ed7c:	d936      	bls.n	800edec <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800ed7e:	2300      	movs	r3, #0
 800ed80:	617b      	str	r3, [r7, #20]
 800ed82:	e027      	b.n	800edd4 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	4618      	mov	r0, r3
 800ed8a:	f003 fbe9 	bl	8012560 <SDMMC_ReadFIFO>
 800ed8e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	b2da      	uxtb	r2, r3
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	3301      	adds	r3, #1
 800ed9c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	0a1b      	lsrs	r3, r3, #8
 800eda2:	b2da      	uxtb	r2, r3
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800eda8:	693b      	ldr	r3, [r7, #16]
 800edaa:	3301      	adds	r3, #1
 800edac:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	0c1b      	lsrs	r3, r3, #16
 800edb2:	b2da      	uxtb	r2, r3
 800edb4:	693b      	ldr	r3, [r7, #16]
 800edb6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	3301      	adds	r3, #1
 800edbc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	0e1b      	lsrs	r3, r3, #24
 800edc2:	b2da      	uxtb	r2, r3
 800edc4:	693b      	ldr	r3, [r7, #16]
 800edc6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800edc8:	693b      	ldr	r3, [r7, #16]
 800edca:	3301      	adds	r3, #1
 800edcc:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800edce:	697b      	ldr	r3, [r7, #20]
 800edd0:	3301      	adds	r3, #1
 800edd2:	617b      	str	r3, [r7, #20]
 800edd4:	697b      	ldr	r3, [r7, #20]
 800edd6:	2b07      	cmp	r3, #7
 800edd8:	d9d4      	bls.n	800ed84 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	693a      	ldr	r2, [r7, #16]
 800edde:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ede4:	f1a3 0220 	sub.w	r2, r3, #32
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800edec:	bf00      	nop
 800edee:	3718      	adds	r7, #24
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}

0800edf4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b086      	sub	sp, #24
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	69db      	ldr	r3, [r3, #28]
 800ee00:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	6a1b      	ldr	r3, [r3, #32]
 800ee06:	2b1f      	cmp	r3, #31
 800ee08:	d93a      	bls.n	800ee80 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	617b      	str	r3, [r7, #20]
 800ee0e:	e02b      	b.n	800ee68 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800ee10:	693b      	ldr	r3, [r7, #16]
 800ee12:	781b      	ldrb	r3, [r3, #0]
 800ee14:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ee16:	693b      	ldr	r3, [r7, #16]
 800ee18:	3301      	adds	r3, #1
 800ee1a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800ee1c:	693b      	ldr	r3, [r7, #16]
 800ee1e:	781b      	ldrb	r3, [r3, #0]
 800ee20:	021a      	lsls	r2, r3, #8
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	4313      	orrs	r3, r2
 800ee26:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ee28:	693b      	ldr	r3, [r7, #16]
 800ee2a:	3301      	adds	r3, #1
 800ee2c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800ee2e:	693b      	ldr	r3, [r7, #16]
 800ee30:	781b      	ldrb	r3, [r3, #0]
 800ee32:	041a      	lsls	r2, r3, #16
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	4313      	orrs	r3, r2
 800ee38:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	3301      	adds	r3, #1
 800ee3e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800ee40:	693b      	ldr	r3, [r7, #16]
 800ee42:	781b      	ldrb	r3, [r3, #0]
 800ee44:	061a      	lsls	r2, r3, #24
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	4313      	orrs	r3, r2
 800ee4a:	60fb      	str	r3, [r7, #12]
      tmp++;
 800ee4c:	693b      	ldr	r3, [r7, #16]
 800ee4e:	3301      	adds	r3, #1
 800ee50:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	f107 020c 	add.w	r2, r7, #12
 800ee5a:	4611      	mov	r1, r2
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f003 fb8c 	bl	801257a <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800ee62:	697b      	ldr	r3, [r7, #20]
 800ee64:	3301      	adds	r3, #1
 800ee66:	617b      	str	r3, [r7, #20]
 800ee68:	697b      	ldr	r3, [r7, #20]
 800ee6a:	2b07      	cmp	r3, #7
 800ee6c:	d9d0      	bls.n	800ee10 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	693a      	ldr	r2, [r7, #16]
 800ee72:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6a1b      	ldr	r3, [r3, #32]
 800ee78:	f1a3 0220 	sub.w	r2, r3, #32
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	621a      	str	r2, [r3, #32]
  }
}
 800ee80:	bf00      	nop
 800ee82:	3718      	adds	r7, #24
 800ee84:	46bd      	mov	sp, r7
 800ee86:	bd80      	pop	{r7, pc}

0800ee88 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b083      	sub	sp, #12
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800ee90:	bf00      	nop
 800ee92:	370c      	adds	r7, #12
 800ee94:	46bd      	mov	sp, r7
 800ee96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9a:	4770      	bx	lr

0800ee9c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800ee9c:	b480      	push	{r7}
 800ee9e:	b083      	sub	sp, #12
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800eea4:	bf00      	nop
 800eea6:	370c      	adds	r7, #12
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeae:	4770      	bx	lr

0800eeb0 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800eeb0:	b480      	push	{r7}
 800eeb2:	b083      	sub	sp, #12
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800eeb8:	bf00      	nop
 800eeba:	370c      	adds	r7, #12
 800eebc:	46bd      	mov	sp, r7
 800eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec2:	4770      	bx	lr

0800eec4 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800eec4:	b480      	push	{r7}
 800eec6:	b083      	sub	sp, #12
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800eecc:	bf00      	nop
 800eece:	370c      	adds	r7, #12
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr

0800eed8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800eed8:	b580      	push	{r7, lr}
 800eeda:	b084      	sub	sp, #16
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d101      	bne.n	800eeea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800eee6:	2301      	movs	r3, #1
 800eee8:	e10f      	b.n	800f10a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	2200      	movs	r2, #0
 800eeee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	4a87      	ldr	r2, [pc, #540]	; (800f114 <HAL_SPI_Init+0x23c>)
 800eef6:	4293      	cmp	r3, r2
 800eef8:	d00f      	beq.n	800ef1a <HAL_SPI_Init+0x42>
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	4a86      	ldr	r2, [pc, #536]	; (800f118 <HAL_SPI_Init+0x240>)
 800ef00:	4293      	cmp	r3, r2
 800ef02:	d00a      	beq.n	800ef1a <HAL_SPI_Init+0x42>
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	4a84      	ldr	r2, [pc, #528]	; (800f11c <HAL_SPI_Init+0x244>)
 800ef0a:	4293      	cmp	r3, r2
 800ef0c:	d005      	beq.n	800ef1a <HAL_SPI_Init+0x42>
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	68db      	ldr	r3, [r3, #12]
 800ef12:	2b0f      	cmp	r3, #15
 800ef14:	d901      	bls.n	800ef1a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800ef16:	2301      	movs	r3, #1
 800ef18:	e0f7      	b.n	800f10a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f000 fd5a 	bl	800f9d4 <SPI_GetPacketSize>
 800ef20:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	4a7b      	ldr	r2, [pc, #492]	; (800f114 <HAL_SPI_Init+0x23c>)
 800ef28:	4293      	cmp	r3, r2
 800ef2a:	d00c      	beq.n	800ef46 <HAL_SPI_Init+0x6e>
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	4a79      	ldr	r2, [pc, #484]	; (800f118 <HAL_SPI_Init+0x240>)
 800ef32:	4293      	cmp	r3, r2
 800ef34:	d007      	beq.n	800ef46 <HAL_SPI_Init+0x6e>
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	4a78      	ldr	r2, [pc, #480]	; (800f11c <HAL_SPI_Init+0x244>)
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	d002      	beq.n	800ef46 <HAL_SPI_Init+0x6e>
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2b08      	cmp	r3, #8
 800ef44:	d811      	bhi.n	800ef6a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ef4a:	4a72      	ldr	r2, [pc, #456]	; (800f114 <HAL_SPI_Init+0x23c>)
 800ef4c:	4293      	cmp	r3, r2
 800ef4e:	d009      	beq.n	800ef64 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	4a70      	ldr	r2, [pc, #448]	; (800f118 <HAL_SPI_Init+0x240>)
 800ef56:	4293      	cmp	r3, r2
 800ef58:	d004      	beq.n	800ef64 <HAL_SPI_Init+0x8c>
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4a6f      	ldr	r2, [pc, #444]	; (800f11c <HAL_SPI_Init+0x244>)
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d104      	bne.n	800ef6e <HAL_SPI_Init+0x96>
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	2b10      	cmp	r3, #16
 800ef68:	d901      	bls.n	800ef6e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	e0cd      	b.n	800f10a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ef74:	b2db      	uxtb	r3, r3
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d106      	bne.n	800ef88 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f7f4 f8dc 	bl	8003140 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	2202      	movs	r2, #2
 800ef8c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	681a      	ldr	r2, [r3, #0]
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	f022 0201 	bic.w	r2, r2, #1
 800ef9e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	689b      	ldr	r3, [r3, #8]
 800efa6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800efaa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	699b      	ldr	r3, [r3, #24]
 800efb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800efb4:	d119      	bne.n	800efea <HAL_SPI_Init+0x112>
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	685b      	ldr	r3, [r3, #4]
 800efba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800efbe:	d103      	bne.n	800efc8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d008      	beq.n	800efda <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d10c      	bne.n	800efea <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800efd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800efd8:	d107      	bne.n	800efea <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	681a      	ldr	r2, [r3, #0]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800efe8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	685b      	ldr	r3, [r3, #4]
 800efee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d00f      	beq.n	800f016 <HAL_SPI_Init+0x13e>
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	68db      	ldr	r3, [r3, #12]
 800effa:	2b06      	cmp	r3, #6
 800effc:	d90b      	bls.n	800f016 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	430a      	orrs	r2, r1
 800f012:	601a      	str	r2, [r3, #0]
 800f014:	e007      	b.n	800f026 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	681a      	ldr	r2, [r3, #0]
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800f024:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	69da      	ldr	r2, [r3, #28]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f02e:	431a      	orrs	r2, r3
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	431a      	orrs	r2, r3
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f038:	ea42 0103 	orr.w	r1, r2, r3
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	68da      	ldr	r2, [r3, #12]
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	430a      	orrs	r2, r1
 800f046:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f050:	431a      	orrs	r2, r3
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f056:	431a      	orrs	r2, r3
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	699b      	ldr	r3, [r3, #24]
 800f05c:	431a      	orrs	r2, r3
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	691b      	ldr	r3, [r3, #16]
 800f062:	431a      	orrs	r2, r3
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	695b      	ldr	r3, [r3, #20]
 800f068:	431a      	orrs	r2, r3
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6a1b      	ldr	r3, [r3, #32]
 800f06e:	431a      	orrs	r2, r3
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	685b      	ldr	r3, [r3, #4]
 800f074:	431a      	orrs	r2, r3
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f07a:	431a      	orrs	r2, r3
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	689b      	ldr	r3, [r3, #8]
 800f080:	431a      	orrs	r2, r3
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f086:	ea42 0103 	orr.w	r1, r2, r3
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	430a      	orrs	r2, r1
 800f094:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	685b      	ldr	r3, [r3, #4]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d113      	bne.n	800f0c6 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	689b      	ldr	r3, [r3, #8]
 800f0a4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f0b0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	689b      	ldr	r3, [r3, #8]
 800f0b8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f0c4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	f022 0201 	bic.w	r2, r2, #1
 800f0d4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	685b      	ldr	r3, [r3, #4]
 800f0da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d00a      	beq.n	800f0f8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	68db      	ldr	r3, [r3, #12]
 800f0e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	430a      	orrs	r2, r1
 800f0f6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2201      	movs	r2, #1
 800f104:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f108:	2300      	movs	r3, #0
}
 800f10a:	4618      	mov	r0, r3
 800f10c:	3710      	adds	r7, #16
 800f10e:	46bd      	mov	sp, r7
 800f110:	bd80      	pop	{r7, pc}
 800f112:	bf00      	nop
 800f114:	40013000 	.word	0x40013000
 800f118:	40003800 	.word	0x40003800
 800f11c:	40003c00 	.word	0x40003c00

0800f120 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b08a      	sub	sp, #40	; 0x28
 800f124:	af02      	add	r7, sp, #8
 800f126:	60f8      	str	r0, [r7, #12]
 800f128:	60b9      	str	r1, [r7, #8]
 800f12a:	603b      	str	r3, [r7, #0]
 800f12c:	4613      	mov	r3, r2
 800f12e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	3320      	adds	r3, #32
 800f136:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f138:	2300      	movs	r3, #0
 800f13a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f142:	2b01      	cmp	r3, #1
 800f144:	d101      	bne.n	800f14a <HAL_SPI_Transmit+0x2a>
 800f146:	2302      	movs	r3, #2
 800f148:	e1e1      	b.n	800f50e <HAL_SPI_Transmit+0x3ee>
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	2201      	movs	r2, #1
 800f14e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f152:	f7f4 fddd 	bl	8003d10 <HAL_GetTick>
 800f156:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f15e:	b2db      	uxtb	r3, r3
 800f160:	2b01      	cmp	r3, #1
 800f162:	d007      	beq.n	800f174 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800f164:	2302      	movs	r3, #2
 800f166:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2200      	movs	r2, #0
 800f16c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f170:	7efb      	ldrb	r3, [r7, #27]
 800f172:	e1cc      	b.n	800f50e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f174:	68bb      	ldr	r3, [r7, #8]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d002      	beq.n	800f180 <HAL_SPI_Transmit+0x60>
 800f17a:	88fb      	ldrh	r3, [r7, #6]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d107      	bne.n	800f190 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800f180:	2301      	movs	r3, #1
 800f182:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	2200      	movs	r2, #0
 800f188:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f18c:	7efb      	ldrb	r3, [r7, #27]
 800f18e:	e1be      	b.n	800f50e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2203      	movs	r2, #3
 800f194:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2200      	movs	r2, #0
 800f19c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	68ba      	ldr	r2, [r7, #8]
 800f1a4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	88fa      	ldrh	r2, [r7, #6]
 800f1aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	88fa      	ldrh	r2, [r7, #6]
 800f1b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	2200      	movs	r2, #0
 800f1c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	689b      	ldr	r3, [r3, #8]
 800f1dc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f1e0:	d108      	bne.n	800f1f4 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	681a      	ldr	r2, [r3, #0]
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f1f0:	601a      	str	r2, [r3, #0]
 800f1f2:	e009      	b.n	800f208 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	68db      	ldr	r3, [r3, #12]
 800f1fa:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800f206:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	685a      	ldr	r2, [r3, #4]
 800f20e:	4b96      	ldr	r3, [pc, #600]	; (800f468 <HAL_SPI_Transmit+0x348>)
 800f210:	4013      	ands	r3, r2
 800f212:	88f9      	ldrh	r1, [r7, #6]
 800f214:	68fa      	ldr	r2, [r7, #12]
 800f216:	6812      	ldr	r2, [r2, #0]
 800f218:	430b      	orrs	r3, r1
 800f21a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	681a      	ldr	r2, [r3, #0]
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	681b      	ldr	r3, [r3, #0]
 800f226:	f042 0201 	orr.w	r2, r2, #1
 800f22a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	685b      	ldr	r3, [r3, #4]
 800f230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f234:	d107      	bne.n	800f246 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	681b      	ldr	r3, [r3, #0]
 800f23a:	681a      	ldr	r2, [r3, #0]
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f244:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	2b0f      	cmp	r3, #15
 800f24c:	d947      	bls.n	800f2de <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f24e:	e03f      	b.n	800f2d0 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	695b      	ldr	r3, [r3, #20]
 800f256:	f003 0302 	and.w	r3, r3, #2
 800f25a:	2b02      	cmp	r3, #2
 800f25c:	d114      	bne.n	800f288 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	6812      	ldr	r2, [r2, #0]
 800f268:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f26a:	68fb      	ldr	r3, [r7, #12]
 800f26c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f26e:	1d1a      	adds	r2, r3, #4
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f27a:	b29b      	uxth	r3, r3
 800f27c:	3b01      	subs	r3, #1
 800f27e:	b29a      	uxth	r2, r3
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f286:	e023      	b.n	800f2d0 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f288:	f7f4 fd42 	bl	8003d10 <HAL_GetTick>
 800f28c:	4602      	mov	r2, r0
 800f28e:	697b      	ldr	r3, [r7, #20]
 800f290:	1ad3      	subs	r3, r2, r3
 800f292:	683a      	ldr	r2, [r7, #0]
 800f294:	429a      	cmp	r2, r3
 800f296:	d803      	bhi.n	800f2a0 <HAL_SPI_Transmit+0x180>
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f29e:	d102      	bne.n	800f2a6 <HAL_SPI_Transmit+0x186>
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d114      	bne.n	800f2d0 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f2a6:	68f8      	ldr	r0, [r7, #12]
 800f2a8:	f000 fac6 	bl	800f838 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f2cc:	2303      	movs	r3, #3
 800f2ce:	e11e      	b.n	800f50e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	d1b9      	bne.n	800f250 <HAL_SPI_Transmit+0x130>
 800f2dc:	e0f1      	b.n	800f4c2 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	68db      	ldr	r3, [r3, #12]
 800f2e2:	2b07      	cmp	r3, #7
 800f2e4:	f240 80e6 	bls.w	800f4b4 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f2e8:	e05d      	b.n	800f3a6 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	695b      	ldr	r3, [r3, #20]
 800f2f0:	f003 0302 	and.w	r3, r3, #2
 800f2f4:	2b02      	cmp	r3, #2
 800f2f6:	d132      	bne.n	800f35e <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f2fe:	b29b      	uxth	r3, r3
 800f300:	2b01      	cmp	r3, #1
 800f302:	d918      	bls.n	800f336 <HAL_SPI_Transmit+0x216>
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d014      	beq.n	800f336 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f310:	68fb      	ldr	r3, [r7, #12]
 800f312:	681b      	ldr	r3, [r3, #0]
 800f314:	6812      	ldr	r2, [r2, #0]
 800f316:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f31c:	1d1a      	adds	r2, r3, #4
 800f31e:	68fb      	ldr	r3, [r7, #12]
 800f320:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f328:	b29b      	uxth	r3, r3
 800f32a:	3b02      	subs	r3, #2
 800f32c:	b29a      	uxth	r2, r3
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f334:	e037      	b.n	800f3a6 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f33a:	881a      	ldrh	r2, [r3, #0]
 800f33c:	69fb      	ldr	r3, [r7, #28]
 800f33e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f344:	1c9a      	adds	r2, r3, #2
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f34a:	68fb      	ldr	r3, [r7, #12]
 800f34c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f350:	b29b      	uxth	r3, r3
 800f352:	3b01      	subs	r3, #1
 800f354:	b29a      	uxth	r2, r3
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f35c:	e023      	b.n	800f3a6 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f35e:	f7f4 fcd7 	bl	8003d10 <HAL_GetTick>
 800f362:	4602      	mov	r2, r0
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	1ad3      	subs	r3, r2, r3
 800f368:	683a      	ldr	r2, [r7, #0]
 800f36a:	429a      	cmp	r2, r3
 800f36c:	d803      	bhi.n	800f376 <HAL_SPI_Transmit+0x256>
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f374:	d102      	bne.n	800f37c <HAL_SPI_Transmit+0x25c>
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d114      	bne.n	800f3a6 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f37c:	68f8      	ldr	r0, [r7, #12]
 800f37e:	f000 fa5b 	bl	800f838 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	2200      	movs	r2, #0
 800f386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f390:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	2201      	movs	r2, #1
 800f39e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f3a2:	2303      	movs	r3, #3
 800f3a4:	e0b3      	b.n	800f50e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f3ac:	b29b      	uxth	r3, r3
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d19b      	bne.n	800f2ea <HAL_SPI_Transmit+0x1ca>
 800f3b2:	e086      	b.n	800f4c2 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	695b      	ldr	r3, [r3, #20]
 800f3ba:	f003 0302 	and.w	r3, r3, #2
 800f3be:	2b02      	cmp	r3, #2
 800f3c0:	d154      	bne.n	800f46c <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f3c8:	b29b      	uxth	r3, r3
 800f3ca:	2b03      	cmp	r3, #3
 800f3cc:	d918      	bls.n	800f400 <HAL_SPI_Transmit+0x2e0>
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3d2:	2b40      	cmp	r3, #64	; 0x40
 800f3d4:	d914      	bls.n	800f400 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	6812      	ldr	r2, [r2, #0]
 800f3e0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f3e6:	1d1a      	adds	r2, r3, #4
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f3f2:	b29b      	uxth	r3, r3
 800f3f4:	3b04      	subs	r3, #4
 800f3f6:	b29a      	uxth	r2, r3
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f3fe:	e059      	b.n	800f4b4 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f406:	b29b      	uxth	r3, r3
 800f408:	2b01      	cmp	r3, #1
 800f40a:	d917      	bls.n	800f43c <HAL_SPI_Transmit+0x31c>
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f410:	2b00      	cmp	r3, #0
 800f412:	d013      	beq.n	800f43c <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800f414:	68fb      	ldr	r3, [r7, #12]
 800f416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f418:	881a      	ldrh	r2, [r3, #0]
 800f41a:	69fb      	ldr	r3, [r7, #28]
 800f41c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f422:	1c9a      	adds	r2, r3, #2
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f42e:	b29b      	uxth	r3, r3
 800f430:	3b02      	subs	r3, #2
 800f432:	b29a      	uxth	r2, r3
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f43a:	e03b      	b.n	800f4b4 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	3320      	adds	r3, #32
 800f446:	7812      	ldrb	r2, [r2, #0]
 800f448:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f44e:	1c5a      	adds	r2, r3, #1
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f45a:	b29b      	uxth	r3, r3
 800f45c:	3b01      	subs	r3, #1
 800f45e:	b29a      	uxth	r2, r3
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f466:	e025      	b.n	800f4b4 <HAL_SPI_Transmit+0x394>
 800f468:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f46c:	f7f4 fc50 	bl	8003d10 <HAL_GetTick>
 800f470:	4602      	mov	r2, r0
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	1ad3      	subs	r3, r2, r3
 800f476:	683a      	ldr	r2, [r7, #0]
 800f478:	429a      	cmp	r2, r3
 800f47a:	d803      	bhi.n	800f484 <HAL_SPI_Transmit+0x364>
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f482:	d102      	bne.n	800f48a <HAL_SPI_Transmit+0x36a>
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	2b00      	cmp	r3, #0
 800f488:	d114      	bne.n	800f4b4 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f48a:	68f8      	ldr	r0, [r7, #12]
 800f48c:	f000 f9d4 	bl	800f838 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	2200      	movs	r2, #0
 800f494:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f49e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	2201      	movs	r2, #1
 800f4ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f4b0:	2303      	movs	r3, #3
 800f4b2:	e02c      	b.n	800f50e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f4ba:	b29b      	uxth	r3, r3
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	f47f af79 	bne.w	800f3b4 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800f4c2:	697b      	ldr	r3, [r7, #20]
 800f4c4:	9300      	str	r3, [sp, #0]
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	2108      	movs	r1, #8
 800f4cc:	68f8      	ldr	r0, [r7, #12]
 800f4ce:	f000 fa53 	bl	800f978 <SPI_WaitOnFlagUntilTimeout>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d007      	beq.n	800f4e8 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4de:	f043 0220 	orr.w	r2, r3, #32
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f4e8:	68f8      	ldr	r0, [r7, #12]
 800f4ea:	f000 f9a5 	bl	800f838 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f504:	2b00      	cmp	r3, #0
 800f506:	d001      	beq.n	800f50c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800f508:	2301      	movs	r3, #1
 800f50a:	e000      	b.n	800f50e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800f50c:	7efb      	ldrb	r3, [r7, #27]
}
 800f50e:	4618      	mov	r0, r3
 800f510:	3720      	adds	r7, #32
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop

0800f518 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b088      	sub	sp, #32
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	60f8      	str	r0, [r7, #12]
 800f520:	60b9      	str	r1, [r7, #8]
 800f522:	603b      	str	r3, [r7, #0]
 800f524:	4613      	mov	r3, r2
 800f526:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f528:	2300      	movs	r3, #0
 800f52a:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f52c:	68fb      	ldr	r3, [r7, #12]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	3330      	adds	r3, #48	; 0x30
 800f532:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d101      	bne.n	800f542 <HAL_SPI_Receive+0x2a>
 800f53e:	2302      	movs	r3, #2
 800f540:	e173      	b.n	800f82a <HAL_SPI_Receive+0x312>
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	2201      	movs	r2, #1
 800f546:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f54a:	f7f4 fbe1 	bl	8003d10 <HAL_GetTick>
 800f54e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f556:	b2db      	uxtb	r3, r3
 800f558:	2b01      	cmp	r3, #1
 800f55a:	d007      	beq.n	800f56c <HAL_SPI_Receive+0x54>
  {
    errorcode = HAL_BUSY;
 800f55c:	2302      	movs	r3, #2
 800f55e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	2200      	movs	r2, #0
 800f564:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f568:	7ffb      	ldrb	r3, [r7, #31]
 800f56a:	e15e      	b.n	800f82a <HAL_SPI_Receive+0x312>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d002      	beq.n	800f578 <HAL_SPI_Receive+0x60>
 800f572:	88fb      	ldrh	r3, [r7, #6]
 800f574:	2b00      	cmp	r3, #0
 800f576:	d107      	bne.n	800f588 <HAL_SPI_Receive+0x70>
  {
    errorcode = HAL_ERROR;
 800f578:	2301      	movs	r3, #1
 800f57a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	2200      	movs	r2, #0
 800f580:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f584:	7ffb      	ldrb	r3, [r7, #31]
 800f586:	e150      	b.n	800f82a <HAL_SPI_Receive+0x312>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	2204      	movs	r2, #4
 800f58c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	2200      	movs	r2, #0
 800f594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	68ba      	ldr	r2, [r7, #8]
 800f59c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	88fa      	ldrh	r2, [r7, #6]
 800f5a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	88fa      	ldrh	r2, [r7, #6]
 800f5aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	2200      	movs	r2, #0
 800f5b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f5d0:	68fb      	ldr	r3, [r7, #12]
 800f5d2:	689b      	ldr	r3, [r3, #8]
 800f5d4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f5d8:	d108      	bne.n	800f5ec <HAL_SPI_Receive+0xd4>
  {
    SPI_1LINE_RX(hspi);
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	681a      	ldr	r2, [r3, #0]
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f5e8:	601a      	str	r2, [r3, #0]
 800f5ea:	e009      	b.n	800f600 <HAL_SPI_Receive+0xe8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800f5ec:	68fb      	ldr	r3, [r7, #12]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	68db      	ldr	r3, [r3, #12]
 800f5f2:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800f5fe:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	685a      	ldr	r2, [r3, #4]
 800f606:	4b8b      	ldr	r3, [pc, #556]	; (800f834 <HAL_SPI_Receive+0x31c>)
 800f608:	4013      	ands	r3, r2
 800f60a:	88f9      	ldrh	r1, [r7, #6]
 800f60c:	68fa      	ldr	r2, [r7, #12]
 800f60e:	6812      	ldr	r2, [r2, #0]
 800f610:	430b      	orrs	r3, r1
 800f612:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	681a      	ldr	r2, [r3, #0]
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	681b      	ldr	r3, [r3, #0]
 800f61e:	f042 0201 	orr.w	r2, r2, #1
 800f622:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f62c:	d107      	bne.n	800f63e <HAL_SPI_Receive+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	681a      	ldr	r2, [r3, #0]
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f63c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	68db      	ldr	r3, [r3, #12]
 800f642:	2b0f      	cmp	r3, #15
 800f644:	d948      	bls.n	800f6d8 <HAL_SPI_Receive+0x1c0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f646:	e040      	b.n	800f6ca <HAL_SPI_Receive+0x1b2>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	695a      	ldr	r2, [r3, #20]
 800f64e:	f248 0308 	movw	r3, #32776	; 0x8008
 800f652:	4013      	ands	r3, r2
 800f654:	2b00      	cmp	r3, #0
 800f656:	d014      	beq.n	800f682 <HAL_SPI_Receive+0x16a>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681a      	ldr	r2, [r3, #0]
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f660:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f662:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f668:	1d1a      	adds	r2, r3, #4
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f66e:	68fb      	ldr	r3, [r7, #12]
 800f670:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f674:	b29b      	uxth	r3, r3
 800f676:	3b01      	subs	r3, #1
 800f678:	b29a      	uxth	r2, r3
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f680:	e023      	b.n	800f6ca <HAL_SPI_Receive+0x1b2>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f682:	f7f4 fb45 	bl	8003d10 <HAL_GetTick>
 800f686:	4602      	mov	r2, r0
 800f688:	697b      	ldr	r3, [r7, #20]
 800f68a:	1ad3      	subs	r3, r2, r3
 800f68c:	683a      	ldr	r2, [r7, #0]
 800f68e:	429a      	cmp	r2, r3
 800f690:	d803      	bhi.n	800f69a <HAL_SPI_Receive+0x182>
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f698:	d102      	bne.n	800f6a0 <HAL_SPI_Receive+0x188>
 800f69a:	683b      	ldr	r3, [r7, #0]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d114      	bne.n	800f6ca <HAL_SPI_Receive+0x1b2>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f6a0:	68f8      	ldr	r0, [r7, #12]
 800f6a2:	f000 f8c9 	bl	800f838 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f6b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	2201      	movs	r2, #1
 800f6c2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f6c6:	2303      	movs	r3, #3
 800f6c8:	e0af      	b.n	800f82a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f6d0:	b29b      	uxth	r3, r3
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d1b8      	bne.n	800f648 <HAL_SPI_Receive+0x130>
 800f6d6:	e095      	b.n	800f804 <HAL_SPI_Receive+0x2ec>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	68db      	ldr	r3, [r3, #12]
 800f6dc:	2b07      	cmp	r3, #7
 800f6de:	f240 808b 	bls.w	800f7f8 <HAL_SPI_Receive+0x2e0>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f6e2:	e03f      	b.n	800f764 <HAL_SPI_Receive+0x24c>
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	695b      	ldr	r3, [r3, #20]
 800f6ea:	f003 0301 	and.w	r3, r3, #1
 800f6ee:	2b01      	cmp	r3, #1
 800f6f0:	d114      	bne.n	800f71c <HAL_SPI_Receive+0x204>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f6f6:	69ba      	ldr	r2, [r7, #24]
 800f6f8:	8812      	ldrh	r2, [r2, #0]
 800f6fa:	b292      	uxth	r2, r2
 800f6fc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f702:	1c9a      	adds	r2, r3, #2
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f70e:	b29b      	uxth	r3, r3
 800f710:	3b01      	subs	r3, #1
 800f712:	b29a      	uxth	r2, r3
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f71a:	e023      	b.n	800f764 <HAL_SPI_Receive+0x24c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f71c:	f7f4 faf8 	bl	8003d10 <HAL_GetTick>
 800f720:	4602      	mov	r2, r0
 800f722:	697b      	ldr	r3, [r7, #20]
 800f724:	1ad3      	subs	r3, r2, r3
 800f726:	683a      	ldr	r2, [r7, #0]
 800f728:	429a      	cmp	r2, r3
 800f72a:	d803      	bhi.n	800f734 <HAL_SPI_Receive+0x21c>
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f732:	d102      	bne.n	800f73a <HAL_SPI_Receive+0x222>
 800f734:	683b      	ldr	r3, [r7, #0]
 800f736:	2b00      	cmp	r3, #0
 800f738:	d114      	bne.n	800f764 <HAL_SPI_Receive+0x24c>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f73a:	68f8      	ldr	r0, [r7, #12]
 800f73c:	f000 f87c 	bl	800f838 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	2200      	movs	r2, #0
 800f744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f74e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	2201      	movs	r2, #1
 800f75c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f760:	2303      	movs	r3, #3
 800f762:	e062      	b.n	800f82a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d1b9      	bne.n	800f6e4 <HAL_SPI_Receive+0x1cc>
 800f770:	e048      	b.n	800f804 <HAL_SPI_Receive+0x2ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	695b      	ldr	r3, [r3, #20]
 800f778:	f003 0301 	and.w	r3, r3, #1
 800f77c:	2b01      	cmp	r3, #1
 800f77e:	d117      	bne.n	800f7b0 <HAL_SPI_Receive+0x298>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f78c:	7812      	ldrb	r2, [r2, #0]
 800f78e:	b2d2      	uxtb	r2, r2
 800f790:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800f792:	68fb      	ldr	r3, [r7, #12]
 800f794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f796:	1c5a      	adds	r2, r3, #1
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f7a2:	b29b      	uxth	r3, r3
 800f7a4:	3b01      	subs	r3, #1
 800f7a6:	b29a      	uxth	r2, r3
 800f7a8:	68fb      	ldr	r3, [r7, #12]
 800f7aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f7ae:	e023      	b.n	800f7f8 <HAL_SPI_Receive+0x2e0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f7b0:	f7f4 faae 	bl	8003d10 <HAL_GetTick>
 800f7b4:	4602      	mov	r2, r0
 800f7b6:	697b      	ldr	r3, [r7, #20]
 800f7b8:	1ad3      	subs	r3, r2, r3
 800f7ba:	683a      	ldr	r2, [r7, #0]
 800f7bc:	429a      	cmp	r2, r3
 800f7be:	d803      	bhi.n	800f7c8 <HAL_SPI_Receive+0x2b0>
 800f7c0:	683b      	ldr	r3, [r7, #0]
 800f7c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7c6:	d102      	bne.n	800f7ce <HAL_SPI_Receive+0x2b6>
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d114      	bne.n	800f7f8 <HAL_SPI_Receive+0x2e0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f7ce:	68f8      	ldr	r0, [r7, #12]
 800f7d0:	f000 f832 	bl	800f838 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	2201      	movs	r2, #1
 800f7f0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800f7f4:	2303      	movs	r3, #3
 800f7f6:	e018      	b.n	800f82a <HAL_SPI_Receive+0x312>
    while (hspi->RxXferCount > 0UL)
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	2b00      	cmp	r3, #0
 800f802:	d1b6      	bne.n	800f772 <HAL_SPI_Receive+0x25a>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f804:	68f8      	ldr	r0, [r7, #12]
 800f806:	f000 f817 	bl	800f838 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	2200      	movs	r2, #0
 800f80e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	2201      	movs	r2, #1
 800f816:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f820:	2b00      	cmp	r3, #0
 800f822:	d001      	beq.n	800f828 <HAL_SPI_Receive+0x310>
  {
    return HAL_ERROR;
 800f824:	2301      	movs	r3, #1
 800f826:	e000      	b.n	800f82a <HAL_SPI_Receive+0x312>
  }
  return errorcode;
 800f828:	7ffb      	ldrb	r3, [r7, #31]
}
 800f82a:	4618      	mov	r0, r3
 800f82c:	3720      	adds	r7, #32
 800f82e:	46bd      	mov	sp, r7
 800f830:	bd80      	pop	{r7, pc}
 800f832:	bf00      	nop
 800f834:	ffff0000 	.word	0xffff0000

0800f838 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f838:	b480      	push	{r7}
 800f83a:	b085      	sub	sp, #20
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	695b      	ldr	r3, [r3, #20]
 800f846:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	681b      	ldr	r3, [r3, #0]
 800f84c:	699a      	ldr	r2, [r3, #24]
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	f042 0208 	orr.w	r2, r2, #8
 800f856:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	699a      	ldr	r2, [r3, #24]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	f042 0210 	orr.w	r2, r2, #16
 800f866:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	681a      	ldr	r2, [r3, #0]
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	f022 0201 	bic.w	r2, r2, #1
 800f876:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	6919      	ldr	r1, [r3, #16]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681a      	ldr	r2, [r3, #0]
 800f882:	4b3c      	ldr	r3, [pc, #240]	; (800f974 <SPI_CloseTransfer+0x13c>)
 800f884:	400b      	ands	r3, r1
 800f886:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	689a      	ldr	r2, [r3, #8]
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f896:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f89e:	b2db      	uxtb	r3, r3
 800f8a0:	2b04      	cmp	r3, #4
 800f8a2:	d014      	beq.n	800f8ce <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	f003 0320 	and.w	r3, r3, #32
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d00f      	beq.n	800f8ce <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	699a      	ldr	r2, [r3, #24]
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	f042 0220 	orr.w	r2, r2, #32
 800f8cc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f8d4:	b2db      	uxtb	r3, r3
 800f8d6:	2b03      	cmp	r3, #3
 800f8d8:	d014      	beq.n	800f904 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f8da:	68fb      	ldr	r3, [r7, #12]
 800f8dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d00f      	beq.n	800f904 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8ea:	f043 0204 	orr.w	r2, r3, #4
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	699a      	ldr	r2, [r3, #24]
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f902:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d00f      	beq.n	800f92e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f914:	f043 0201 	orr.w	r2, r3, #1
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	699a      	ldr	r2, [r3, #24]
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f92c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f934:	2b00      	cmp	r3, #0
 800f936:	d00f      	beq.n	800f958 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f93e:	f043 0208 	orr.w	r2, r3, #8
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	699a      	ldr	r2, [r3, #24]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f956:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	2200      	movs	r2, #0
 800f95c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2200      	movs	r2, #0
 800f964:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f968:	bf00      	nop
 800f96a:	3714      	adds	r7, #20
 800f96c:	46bd      	mov	sp, r7
 800f96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f972:	4770      	bx	lr
 800f974:	fffffc90 	.word	0xfffffc90

0800f978 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b084      	sub	sp, #16
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	60b9      	str	r1, [r7, #8]
 800f982:	603b      	str	r3, [r7, #0]
 800f984:	4613      	mov	r3, r2
 800f986:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f988:	e010      	b.n	800f9ac <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f98a:	f7f4 f9c1 	bl	8003d10 <HAL_GetTick>
 800f98e:	4602      	mov	r2, r0
 800f990:	69bb      	ldr	r3, [r7, #24]
 800f992:	1ad3      	subs	r3, r2, r3
 800f994:	683a      	ldr	r2, [r7, #0]
 800f996:	429a      	cmp	r2, r3
 800f998:	d803      	bhi.n	800f9a2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f99a:	683b      	ldr	r3, [r7, #0]
 800f99c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9a0:	d102      	bne.n	800f9a8 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d101      	bne.n	800f9ac <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f9a8:	2303      	movs	r3, #3
 800f9aa:	e00f      	b.n	800f9cc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	695a      	ldr	r2, [r3, #20]
 800f9b2:	68bb      	ldr	r3, [r7, #8]
 800f9b4:	4013      	ands	r3, r2
 800f9b6:	68ba      	ldr	r2, [r7, #8]
 800f9b8:	429a      	cmp	r2, r3
 800f9ba:	bf0c      	ite	eq
 800f9bc:	2301      	moveq	r3, #1
 800f9be:	2300      	movne	r3, #0
 800f9c0:	b2db      	uxtb	r3, r3
 800f9c2:	461a      	mov	r2, r3
 800f9c4:	79fb      	ldrb	r3, [r7, #7]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d0df      	beq.n	800f98a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f9ca:	2300      	movs	r3, #0
}
 800f9cc:	4618      	mov	r0, r3
 800f9ce:	3710      	adds	r7, #16
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}

0800f9d4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800f9d4:	b480      	push	{r7}
 800f9d6:	b085      	sub	sp, #20
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9e0:	095b      	lsrs	r3, r3, #5
 800f9e2:	3301      	adds	r3, #1
 800f9e4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	68db      	ldr	r3, [r3, #12]
 800f9ea:	3301      	adds	r3, #1
 800f9ec:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	3307      	adds	r3, #7
 800f9f2:	08db      	lsrs	r3, r3, #3
 800f9f4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f9f6:	68bb      	ldr	r3, [r7, #8]
 800f9f8:	68fa      	ldr	r2, [r7, #12]
 800f9fa:	fb02 f303 	mul.w	r3, r2, r3
}
 800f9fe:	4618      	mov	r0, r3
 800fa00:	3714      	adds	r7, #20
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr

0800fa0a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fa0a:	b580      	push	{r7, lr}
 800fa0c:	b082      	sub	sp, #8
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d101      	bne.n	800fa1c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fa18:	2301      	movs	r3, #1
 800fa1a:	e049      	b.n	800fab0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fa22:	b2db      	uxtb	r3, r3
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d106      	bne.n	800fa36 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fa30:	6878      	ldr	r0, [r7, #4]
 800fa32:	f7f3 fdd7 	bl	80035e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	2202      	movs	r2, #2
 800fa3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	681a      	ldr	r2, [r3, #0]
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	3304      	adds	r3, #4
 800fa46:	4619      	mov	r1, r3
 800fa48:	4610      	mov	r0, r2
 800fa4a:	f000 ff29 	bl	80108a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	2201      	movs	r2, #1
 800fa52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2201      	movs	r2, #1
 800fa5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	2201      	movs	r2, #1
 800fa62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	2201      	movs	r2, #1
 800fa6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2201      	movs	r2, #1
 800fa72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2201      	movs	r2, #1
 800fa7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	2201      	movs	r2, #1
 800fa82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2201      	movs	r2, #1
 800fa8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	2201      	movs	r2, #1
 800fa92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	2201      	movs	r2, #1
 800fa9a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2201      	movs	r2, #1
 800faa2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2201      	movs	r2, #1
 800faaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800faae:	2300      	movs	r3, #0
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3708      	adds	r7, #8
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}

0800fab8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b082      	sub	sp, #8
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d101      	bne.n	800faca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800fac6:	2301      	movs	r3, #1
 800fac8:	e049      	b.n	800fb5e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d106      	bne.n	800fae4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2200      	movs	r2, #0
 800fada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800fade:	6878      	ldr	r0, [r7, #4]
 800fae0:	f7f3 fbea 	bl	80032b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2202      	movs	r2, #2
 800fae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681a      	ldr	r2, [r3, #0]
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	3304      	adds	r3, #4
 800faf4:	4619      	mov	r1, r3
 800faf6:	4610      	mov	r0, r2
 800faf8:	f000 fed2 	bl	80108a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	2201      	movs	r2, #1
 800fb00:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	2201      	movs	r2, #1
 800fb08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2201      	movs	r2, #1
 800fb10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2201      	movs	r2, #1
 800fb18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	2201      	movs	r2, #1
 800fb20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2201      	movs	r2, #1
 800fb28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2201      	movs	r2, #1
 800fb30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2201      	movs	r2, #1
 800fb38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	2201      	movs	r2, #1
 800fb40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2201      	movs	r2, #1
 800fb48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2201      	movs	r2, #1
 800fb50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	2201      	movs	r2, #1
 800fb58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800fb5c:	2300      	movs	r3, #0
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3708      	adds	r7, #8
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
	...

0800fb68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b084      	sub	sp, #16
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d109      	bne.n	800fb8c <HAL_TIM_PWM_Start+0x24>
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fb7e:	b2db      	uxtb	r3, r3
 800fb80:	2b01      	cmp	r3, #1
 800fb82:	bf14      	ite	ne
 800fb84:	2301      	movne	r3, #1
 800fb86:	2300      	moveq	r3, #0
 800fb88:	b2db      	uxtb	r3, r3
 800fb8a:	e03c      	b.n	800fc06 <HAL_TIM_PWM_Start+0x9e>
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	2b04      	cmp	r3, #4
 800fb90:	d109      	bne.n	800fba6 <HAL_TIM_PWM_Start+0x3e>
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fb98:	b2db      	uxtb	r3, r3
 800fb9a:	2b01      	cmp	r3, #1
 800fb9c:	bf14      	ite	ne
 800fb9e:	2301      	movne	r3, #1
 800fba0:	2300      	moveq	r3, #0
 800fba2:	b2db      	uxtb	r3, r3
 800fba4:	e02f      	b.n	800fc06 <HAL_TIM_PWM_Start+0x9e>
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	2b08      	cmp	r3, #8
 800fbaa:	d109      	bne.n	800fbc0 <HAL_TIM_PWM_Start+0x58>
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fbb2:	b2db      	uxtb	r3, r3
 800fbb4:	2b01      	cmp	r3, #1
 800fbb6:	bf14      	ite	ne
 800fbb8:	2301      	movne	r3, #1
 800fbba:	2300      	moveq	r3, #0
 800fbbc:	b2db      	uxtb	r3, r3
 800fbbe:	e022      	b.n	800fc06 <HAL_TIM_PWM_Start+0x9e>
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	2b0c      	cmp	r3, #12
 800fbc4:	d109      	bne.n	800fbda <HAL_TIM_PWM_Start+0x72>
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fbcc:	b2db      	uxtb	r3, r3
 800fbce:	2b01      	cmp	r3, #1
 800fbd0:	bf14      	ite	ne
 800fbd2:	2301      	movne	r3, #1
 800fbd4:	2300      	moveq	r3, #0
 800fbd6:	b2db      	uxtb	r3, r3
 800fbd8:	e015      	b.n	800fc06 <HAL_TIM_PWM_Start+0x9e>
 800fbda:	683b      	ldr	r3, [r7, #0]
 800fbdc:	2b10      	cmp	r3, #16
 800fbde:	d109      	bne.n	800fbf4 <HAL_TIM_PWM_Start+0x8c>
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fbe6:	b2db      	uxtb	r3, r3
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	bf14      	ite	ne
 800fbec:	2301      	movne	r3, #1
 800fbee:	2300      	moveq	r3, #0
 800fbf0:	b2db      	uxtb	r3, r3
 800fbf2:	e008      	b.n	800fc06 <HAL_TIM_PWM_Start+0x9e>
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	2b01      	cmp	r3, #1
 800fbfe:	bf14      	ite	ne
 800fc00:	2301      	movne	r3, #1
 800fc02:	2300      	moveq	r3, #0
 800fc04:	b2db      	uxtb	r3, r3
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d001      	beq.n	800fc0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800fc0a:	2301      	movs	r3, #1
 800fc0c:	e0ab      	b.n	800fd66 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d104      	bne.n	800fc1e <HAL_TIM_PWM_Start+0xb6>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2202      	movs	r2, #2
 800fc18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800fc1c:	e023      	b.n	800fc66 <HAL_TIM_PWM_Start+0xfe>
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	2b04      	cmp	r3, #4
 800fc22:	d104      	bne.n	800fc2e <HAL_TIM_PWM_Start+0xc6>
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2202      	movs	r2, #2
 800fc28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800fc2c:	e01b      	b.n	800fc66 <HAL_TIM_PWM_Start+0xfe>
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	2b08      	cmp	r3, #8
 800fc32:	d104      	bne.n	800fc3e <HAL_TIM_PWM_Start+0xd6>
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2202      	movs	r2, #2
 800fc38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800fc3c:	e013      	b.n	800fc66 <HAL_TIM_PWM_Start+0xfe>
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	2b0c      	cmp	r3, #12
 800fc42:	d104      	bne.n	800fc4e <HAL_TIM_PWM_Start+0xe6>
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	2202      	movs	r2, #2
 800fc48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800fc4c:	e00b      	b.n	800fc66 <HAL_TIM_PWM_Start+0xfe>
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	2b10      	cmp	r3, #16
 800fc52:	d104      	bne.n	800fc5e <HAL_TIM_PWM_Start+0xf6>
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2202      	movs	r2, #2
 800fc58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800fc5c:	e003      	b.n	800fc66 <HAL_TIM_PWM_Start+0xfe>
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2202      	movs	r2, #2
 800fc62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681b      	ldr	r3, [r3, #0]
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	6839      	ldr	r1, [r7, #0]
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f001 f992 	bl	8010f98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	4a3d      	ldr	r2, [pc, #244]	; (800fd70 <HAL_TIM_PWM_Start+0x208>)
 800fc7a:	4293      	cmp	r3, r2
 800fc7c:	d013      	beq.n	800fca6 <HAL_TIM_PWM_Start+0x13e>
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	4a3c      	ldr	r2, [pc, #240]	; (800fd74 <HAL_TIM_PWM_Start+0x20c>)
 800fc84:	4293      	cmp	r3, r2
 800fc86:	d00e      	beq.n	800fca6 <HAL_TIM_PWM_Start+0x13e>
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	681b      	ldr	r3, [r3, #0]
 800fc8c:	4a3a      	ldr	r2, [pc, #232]	; (800fd78 <HAL_TIM_PWM_Start+0x210>)
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d009      	beq.n	800fca6 <HAL_TIM_PWM_Start+0x13e>
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	4a39      	ldr	r2, [pc, #228]	; (800fd7c <HAL_TIM_PWM_Start+0x214>)
 800fc98:	4293      	cmp	r3, r2
 800fc9a:	d004      	beq.n	800fca6 <HAL_TIM_PWM_Start+0x13e>
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	4a37      	ldr	r2, [pc, #220]	; (800fd80 <HAL_TIM_PWM_Start+0x218>)
 800fca2:	4293      	cmp	r3, r2
 800fca4:	d101      	bne.n	800fcaa <HAL_TIM_PWM_Start+0x142>
 800fca6:	2301      	movs	r3, #1
 800fca8:	e000      	b.n	800fcac <HAL_TIM_PWM_Start+0x144>
 800fcaa:	2300      	movs	r3, #0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d007      	beq.n	800fcc0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800fcbe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	681b      	ldr	r3, [r3, #0]
 800fcc4:	4a2a      	ldr	r2, [pc, #168]	; (800fd70 <HAL_TIM_PWM_Start+0x208>)
 800fcc6:	4293      	cmp	r3, r2
 800fcc8:	d02c      	beq.n	800fd24 <HAL_TIM_PWM_Start+0x1bc>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fcd2:	d027      	beq.n	800fd24 <HAL_TIM_PWM_Start+0x1bc>
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	4a2a      	ldr	r2, [pc, #168]	; (800fd84 <HAL_TIM_PWM_Start+0x21c>)
 800fcda:	4293      	cmp	r3, r2
 800fcdc:	d022      	beq.n	800fd24 <HAL_TIM_PWM_Start+0x1bc>
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	4a29      	ldr	r2, [pc, #164]	; (800fd88 <HAL_TIM_PWM_Start+0x220>)
 800fce4:	4293      	cmp	r3, r2
 800fce6:	d01d      	beq.n	800fd24 <HAL_TIM_PWM_Start+0x1bc>
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	4a27      	ldr	r2, [pc, #156]	; (800fd8c <HAL_TIM_PWM_Start+0x224>)
 800fcee:	4293      	cmp	r3, r2
 800fcf0:	d018      	beq.n	800fd24 <HAL_TIM_PWM_Start+0x1bc>
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	4a1f      	ldr	r2, [pc, #124]	; (800fd74 <HAL_TIM_PWM_Start+0x20c>)
 800fcf8:	4293      	cmp	r3, r2
 800fcfa:	d013      	beq.n	800fd24 <HAL_TIM_PWM_Start+0x1bc>
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	681b      	ldr	r3, [r3, #0]
 800fd00:	4a23      	ldr	r2, [pc, #140]	; (800fd90 <HAL_TIM_PWM_Start+0x228>)
 800fd02:	4293      	cmp	r3, r2
 800fd04:	d00e      	beq.n	800fd24 <HAL_TIM_PWM_Start+0x1bc>
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	4a1b      	ldr	r2, [pc, #108]	; (800fd78 <HAL_TIM_PWM_Start+0x210>)
 800fd0c:	4293      	cmp	r3, r2
 800fd0e:	d009      	beq.n	800fd24 <HAL_TIM_PWM_Start+0x1bc>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	4a1f      	ldr	r2, [pc, #124]	; (800fd94 <HAL_TIM_PWM_Start+0x22c>)
 800fd16:	4293      	cmp	r3, r2
 800fd18:	d004      	beq.n	800fd24 <HAL_TIM_PWM_Start+0x1bc>
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	4a1e      	ldr	r2, [pc, #120]	; (800fd98 <HAL_TIM_PWM_Start+0x230>)
 800fd20:	4293      	cmp	r3, r2
 800fd22:	d115      	bne.n	800fd50 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	689a      	ldr	r2, [r3, #8]
 800fd2a:	4b1c      	ldr	r3, [pc, #112]	; (800fd9c <HAL_TIM_PWM_Start+0x234>)
 800fd2c:	4013      	ands	r3, r2
 800fd2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	2b06      	cmp	r3, #6
 800fd34:	d015      	beq.n	800fd62 <HAL_TIM_PWM_Start+0x1fa>
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd3c:	d011      	beq.n	800fd62 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	681a      	ldr	r2, [r3, #0]
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	f042 0201 	orr.w	r2, r2, #1
 800fd4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd4e:	e008      	b.n	800fd62 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	681a      	ldr	r2, [r3, #0]
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	f042 0201 	orr.w	r2, r2, #1
 800fd5e:	601a      	str	r2, [r3, #0]
 800fd60:	e000      	b.n	800fd64 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fd64:	2300      	movs	r3, #0
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	3710      	adds	r7, #16
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	bd80      	pop	{r7, pc}
 800fd6e:	bf00      	nop
 800fd70:	40010000 	.word	0x40010000
 800fd74:	40010400 	.word	0x40010400
 800fd78:	40014000 	.word	0x40014000
 800fd7c:	40014400 	.word	0x40014400
 800fd80:	40014800 	.word	0x40014800
 800fd84:	40000400 	.word	0x40000400
 800fd88:	40000800 	.word	0x40000800
 800fd8c:	40000c00 	.word	0x40000c00
 800fd90:	40001800 	.word	0x40001800
 800fd94:	4000e000 	.word	0x4000e000
 800fd98:	4000e400 	.word	0x4000e400
 800fd9c:	00010007 	.word	0x00010007

0800fda0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800fda0:	b580      	push	{r7, lr}
 800fda2:	b086      	sub	sp, #24
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	60f8      	str	r0, [r7, #12]
 800fda8:	60b9      	str	r1, [r7, #8]
 800fdaa:	607a      	str	r2, [r7, #4]
 800fdac:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800fdae:	2300      	movs	r3, #0
 800fdb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d109      	bne.n	800fdcc <HAL_TIM_PWM_Start_DMA+0x2c>
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fdbe:	b2db      	uxtb	r3, r3
 800fdc0:	2b02      	cmp	r3, #2
 800fdc2:	bf0c      	ite	eq
 800fdc4:	2301      	moveq	r3, #1
 800fdc6:	2300      	movne	r3, #0
 800fdc8:	b2db      	uxtb	r3, r3
 800fdca:	e03c      	b.n	800fe46 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fdcc:	68bb      	ldr	r3, [r7, #8]
 800fdce:	2b04      	cmp	r3, #4
 800fdd0:	d109      	bne.n	800fde6 <HAL_TIM_PWM_Start_DMA+0x46>
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fdd8:	b2db      	uxtb	r3, r3
 800fdda:	2b02      	cmp	r3, #2
 800fddc:	bf0c      	ite	eq
 800fdde:	2301      	moveq	r3, #1
 800fde0:	2300      	movne	r3, #0
 800fde2:	b2db      	uxtb	r3, r3
 800fde4:	e02f      	b.n	800fe46 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	2b08      	cmp	r3, #8
 800fdea:	d109      	bne.n	800fe00 <HAL_TIM_PWM_Start_DMA+0x60>
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fdf2:	b2db      	uxtb	r3, r3
 800fdf4:	2b02      	cmp	r3, #2
 800fdf6:	bf0c      	ite	eq
 800fdf8:	2301      	moveq	r3, #1
 800fdfa:	2300      	movne	r3, #0
 800fdfc:	b2db      	uxtb	r3, r3
 800fdfe:	e022      	b.n	800fe46 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fe00:	68bb      	ldr	r3, [r7, #8]
 800fe02:	2b0c      	cmp	r3, #12
 800fe04:	d109      	bne.n	800fe1a <HAL_TIM_PWM_Start_DMA+0x7a>
 800fe06:	68fb      	ldr	r3, [r7, #12]
 800fe08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fe0c:	b2db      	uxtb	r3, r3
 800fe0e:	2b02      	cmp	r3, #2
 800fe10:	bf0c      	ite	eq
 800fe12:	2301      	moveq	r3, #1
 800fe14:	2300      	movne	r3, #0
 800fe16:	b2db      	uxtb	r3, r3
 800fe18:	e015      	b.n	800fe46 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	2b10      	cmp	r3, #16
 800fe1e:	d109      	bne.n	800fe34 <HAL_TIM_PWM_Start_DMA+0x94>
 800fe20:	68fb      	ldr	r3, [r7, #12]
 800fe22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fe26:	b2db      	uxtb	r3, r3
 800fe28:	2b02      	cmp	r3, #2
 800fe2a:	bf0c      	ite	eq
 800fe2c:	2301      	moveq	r3, #1
 800fe2e:	2300      	movne	r3, #0
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	e008      	b.n	800fe46 <HAL_TIM_PWM_Start_DMA+0xa6>
 800fe34:	68fb      	ldr	r3, [r7, #12]
 800fe36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fe3a:	b2db      	uxtb	r3, r3
 800fe3c:	2b02      	cmp	r3, #2
 800fe3e:	bf0c      	ite	eq
 800fe40:	2301      	moveq	r3, #1
 800fe42:	2300      	movne	r3, #0
 800fe44:	b2db      	uxtb	r3, r3
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d001      	beq.n	800fe4e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 800fe4a:	2302      	movs	r3, #2
 800fe4c:	e1ba      	b.n	80101c4 <HAL_TIM_PWM_Start_DMA+0x424>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d109      	bne.n	800fe68 <HAL_TIM_PWM_Start_DMA+0xc8>
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800fe5a:	b2db      	uxtb	r3, r3
 800fe5c:	2b01      	cmp	r3, #1
 800fe5e:	bf0c      	ite	eq
 800fe60:	2301      	moveq	r3, #1
 800fe62:	2300      	movne	r3, #0
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	e03c      	b.n	800fee2 <HAL_TIM_PWM_Start_DMA+0x142>
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	2b04      	cmp	r3, #4
 800fe6c:	d109      	bne.n	800fe82 <HAL_TIM_PWM_Start_DMA+0xe2>
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800fe74:	b2db      	uxtb	r3, r3
 800fe76:	2b01      	cmp	r3, #1
 800fe78:	bf0c      	ite	eq
 800fe7a:	2301      	moveq	r3, #1
 800fe7c:	2300      	movne	r3, #0
 800fe7e:	b2db      	uxtb	r3, r3
 800fe80:	e02f      	b.n	800fee2 <HAL_TIM_PWM_Start_DMA+0x142>
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	2b08      	cmp	r3, #8
 800fe86:	d109      	bne.n	800fe9c <HAL_TIM_PWM_Start_DMA+0xfc>
 800fe88:	68fb      	ldr	r3, [r7, #12]
 800fe8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fe8e:	b2db      	uxtb	r3, r3
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	bf0c      	ite	eq
 800fe94:	2301      	moveq	r3, #1
 800fe96:	2300      	movne	r3, #0
 800fe98:	b2db      	uxtb	r3, r3
 800fe9a:	e022      	b.n	800fee2 <HAL_TIM_PWM_Start_DMA+0x142>
 800fe9c:	68bb      	ldr	r3, [r7, #8]
 800fe9e:	2b0c      	cmp	r3, #12
 800fea0:	d109      	bne.n	800feb6 <HAL_TIM_PWM_Start_DMA+0x116>
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800fea8:	b2db      	uxtb	r3, r3
 800feaa:	2b01      	cmp	r3, #1
 800feac:	bf0c      	ite	eq
 800feae:	2301      	moveq	r3, #1
 800feb0:	2300      	movne	r3, #0
 800feb2:	b2db      	uxtb	r3, r3
 800feb4:	e015      	b.n	800fee2 <HAL_TIM_PWM_Start_DMA+0x142>
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	2b10      	cmp	r3, #16
 800feba:	d109      	bne.n	800fed0 <HAL_TIM_PWM_Start_DMA+0x130>
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fec2:	b2db      	uxtb	r3, r3
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	bf0c      	ite	eq
 800fec8:	2301      	moveq	r3, #1
 800feca:	2300      	movne	r3, #0
 800fecc:	b2db      	uxtb	r3, r3
 800fece:	e008      	b.n	800fee2 <HAL_TIM_PWM_Start_DMA+0x142>
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fed6:	b2db      	uxtb	r3, r3
 800fed8:	2b01      	cmp	r3, #1
 800feda:	bf0c      	ite	eq
 800fedc:	2301      	moveq	r3, #1
 800fede:	2300      	movne	r3, #0
 800fee0:	b2db      	uxtb	r3, r3
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d034      	beq.n	800ff50 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d002      	beq.n	800fef2 <HAL_TIM_PWM_Start_DMA+0x152>
 800feec:	887b      	ldrh	r3, [r7, #2]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d101      	bne.n	800fef6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 800fef2:	2301      	movs	r3, #1
 800fef4:	e166      	b.n	80101c4 <HAL_TIM_PWM_Start_DMA+0x424>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d104      	bne.n	800ff06 <HAL_TIM_PWM_Start_DMA+0x166>
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	2202      	movs	r2, #2
 800ff00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ff04:	e026      	b.n	800ff54 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	2b04      	cmp	r3, #4
 800ff0a:	d104      	bne.n	800ff16 <HAL_TIM_PWM_Start_DMA+0x176>
 800ff0c:	68fb      	ldr	r3, [r7, #12]
 800ff0e:	2202      	movs	r2, #2
 800ff10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ff14:	e01e      	b.n	800ff54 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	2b08      	cmp	r3, #8
 800ff1a:	d104      	bne.n	800ff26 <HAL_TIM_PWM_Start_DMA+0x186>
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	2202      	movs	r2, #2
 800ff20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ff24:	e016      	b.n	800ff54 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ff26:	68bb      	ldr	r3, [r7, #8]
 800ff28:	2b0c      	cmp	r3, #12
 800ff2a:	d104      	bne.n	800ff36 <HAL_TIM_PWM_Start_DMA+0x196>
 800ff2c:	68fb      	ldr	r3, [r7, #12]
 800ff2e:	2202      	movs	r2, #2
 800ff30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ff34:	e00e      	b.n	800ff54 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ff36:	68bb      	ldr	r3, [r7, #8]
 800ff38:	2b10      	cmp	r3, #16
 800ff3a:	d104      	bne.n	800ff46 <HAL_TIM_PWM_Start_DMA+0x1a6>
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	2202      	movs	r2, #2
 800ff40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ff44:	e006      	b.n	800ff54 <HAL_TIM_PWM_Start_DMA+0x1b4>
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	2202      	movs	r2, #2
 800ff4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ff4e:	e001      	b.n	800ff54 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 800ff50:	2301      	movs	r3, #1
 800ff52:	e137      	b.n	80101c4 <HAL_TIM_PWM_Start_DMA+0x424>
  }

  switch (Channel)
 800ff54:	68bb      	ldr	r3, [r7, #8]
 800ff56:	2b0c      	cmp	r3, #12
 800ff58:	f200 80ae 	bhi.w	80100b8 <HAL_TIM_PWM_Start_DMA+0x318>
 800ff5c:	a201      	add	r2, pc, #4	; (adr r2, 800ff64 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 800ff5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff62:	bf00      	nop
 800ff64:	0800ff99 	.word	0x0800ff99
 800ff68:	080100b9 	.word	0x080100b9
 800ff6c:	080100b9 	.word	0x080100b9
 800ff70:	080100b9 	.word	0x080100b9
 800ff74:	0800ffe1 	.word	0x0800ffe1
 800ff78:	080100b9 	.word	0x080100b9
 800ff7c:	080100b9 	.word	0x080100b9
 800ff80:	080100b9 	.word	0x080100b9
 800ff84:	08010029 	.word	0x08010029
 800ff88:	080100b9 	.word	0x080100b9
 800ff8c:	080100b9 	.word	0x080100b9
 800ff90:	080100b9 	.word	0x080100b9
 800ff94:	08010071 	.word	0x08010071
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff9c:	4a8b      	ldr	r2, [pc, #556]	; (80101cc <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ff9e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffa4:	4a8a      	ldr	r2, [pc, #552]	; (80101d0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800ffa6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffac:	4a89      	ldr	r2, [pc, #548]	; (80101d4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800ffae:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800ffb4:	6879      	ldr	r1, [r7, #4]
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	3334      	adds	r3, #52	; 0x34
 800ffbc:	461a      	mov	r2, r3
 800ffbe:	887b      	ldrh	r3, [r7, #2]
 800ffc0:	f7f5 fec4 	bl	8005d4c <HAL_DMA_Start_IT>
 800ffc4:	4603      	mov	r3, r0
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d001      	beq.n	800ffce <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800ffca:	2301      	movs	r3, #1
 800ffcc:	e0fa      	b.n	80101c4 <HAL_TIM_PWM_Start_DMA+0x424>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800ffce:	68fb      	ldr	r3, [r7, #12]
 800ffd0:	681b      	ldr	r3, [r3, #0]
 800ffd2:	68da      	ldr	r2, [r3, #12]
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ffdc:	60da      	str	r2, [r3, #12]
      break;
 800ffde:	e06e      	b.n	80100be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffe4:	4a79      	ldr	r2, [pc, #484]	; (80101cc <HAL_TIM_PWM_Start_DMA+0x42c>)
 800ffe6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffec:	4a78      	ldr	r2, [pc, #480]	; (80101d0 <HAL_TIM_PWM_Start_DMA+0x430>)
 800ffee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fff4:	4a77      	ldr	r2, [pc, #476]	; (80101d4 <HAL_TIM_PWM_Start_DMA+0x434>)
 800fff6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800fffc:	6879      	ldr	r1, [r7, #4]
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	3338      	adds	r3, #56	; 0x38
 8010004:	461a      	mov	r2, r3
 8010006:	887b      	ldrh	r3, [r7, #2]
 8010008:	f7f5 fea0 	bl	8005d4c <HAL_DMA_Start_IT>
 801000c:	4603      	mov	r3, r0
 801000e:	2b00      	cmp	r3, #0
 8010010:	d001      	beq.n	8010016 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8010012:	2301      	movs	r3, #1
 8010014:	e0d6      	b.n	80101c4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	68da      	ldr	r2, [r3, #12]
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8010024:	60da      	str	r2, [r3, #12]
      break;
 8010026:	e04a      	b.n	80100be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010028:	68fb      	ldr	r3, [r7, #12]
 801002a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801002c:	4a67      	ldr	r2, [pc, #412]	; (80101cc <HAL_TIM_PWM_Start_DMA+0x42c>)
 801002e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010034:	4a66      	ldr	r2, [pc, #408]	; (80101d0 <HAL_TIM_PWM_Start_DMA+0x430>)
 8010036:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801003c:	4a65      	ldr	r2, [pc, #404]	; (80101d4 <HAL_TIM_PWM_Start_DMA+0x434>)
 801003e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8010044:	6879      	ldr	r1, [r7, #4]
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	333c      	adds	r3, #60	; 0x3c
 801004c:	461a      	mov	r2, r3
 801004e:	887b      	ldrh	r3, [r7, #2]
 8010050:	f7f5 fe7c 	bl	8005d4c <HAL_DMA_Start_IT>
 8010054:	4603      	mov	r3, r0
 8010056:	2b00      	cmp	r3, #0
 8010058:	d001      	beq.n	801005e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 801005a:	2301      	movs	r3, #1
 801005c:	e0b2      	b.n	80101c4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 801005e:	68fb      	ldr	r3, [r7, #12]
 8010060:	681b      	ldr	r3, [r3, #0]
 8010062:	68da      	ldr	r2, [r3, #12]
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801006c:	60da      	str	r2, [r3, #12]
      break;
 801006e:	e026      	b.n	80100be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010074:	4a55      	ldr	r2, [pc, #340]	; (80101cc <HAL_TIM_PWM_Start_DMA+0x42c>)
 8010076:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801007c:	4a54      	ldr	r2, [pc, #336]	; (80101d0 <HAL_TIM_PWM_Start_DMA+0x430>)
 801007e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010084:	4a53      	ldr	r2, [pc, #332]	; (80101d4 <HAL_TIM_PWM_Start_DMA+0x434>)
 8010086:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801008c:	6879      	ldr	r1, [r7, #4]
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	3340      	adds	r3, #64	; 0x40
 8010094:	461a      	mov	r2, r3
 8010096:	887b      	ldrh	r3, [r7, #2]
 8010098:	f7f5 fe58 	bl	8005d4c <HAL_DMA_Start_IT>
 801009c:	4603      	mov	r3, r0
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d001      	beq.n	80100a6 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80100a2:	2301      	movs	r3, #1
 80100a4:	e08e      	b.n	80101c4 <HAL_TIM_PWM_Start_DMA+0x424>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	681b      	ldr	r3, [r3, #0]
 80100aa:	68da      	ldr	r2, [r3, #12]
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80100b4:	60da      	str	r2, [r3, #12]
      break;
 80100b6:	e002      	b.n	80100be <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 80100b8:	2301      	movs	r3, #1
 80100ba:	75fb      	strb	r3, [r7, #23]
      break;
 80100bc:	bf00      	nop
  }

  if (status == HAL_OK)
 80100be:	7dfb      	ldrb	r3, [r7, #23]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d17e      	bne.n	80101c2 <HAL_TIM_PWM_Start_DMA+0x422>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	681b      	ldr	r3, [r3, #0]
 80100c8:	2201      	movs	r2, #1
 80100ca:	68b9      	ldr	r1, [r7, #8]
 80100cc:	4618      	mov	r0, r3
 80100ce:	f000 ff63 	bl	8010f98 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	4a40      	ldr	r2, [pc, #256]	; (80101d8 <HAL_TIM_PWM_Start_DMA+0x438>)
 80100d8:	4293      	cmp	r3, r2
 80100da:	d013      	beq.n	8010104 <HAL_TIM_PWM_Start_DMA+0x364>
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	4a3e      	ldr	r2, [pc, #248]	; (80101dc <HAL_TIM_PWM_Start_DMA+0x43c>)
 80100e2:	4293      	cmp	r3, r2
 80100e4:	d00e      	beq.n	8010104 <HAL_TIM_PWM_Start_DMA+0x364>
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	4a3d      	ldr	r2, [pc, #244]	; (80101e0 <HAL_TIM_PWM_Start_DMA+0x440>)
 80100ec:	4293      	cmp	r3, r2
 80100ee:	d009      	beq.n	8010104 <HAL_TIM_PWM_Start_DMA+0x364>
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	4a3b      	ldr	r2, [pc, #236]	; (80101e4 <HAL_TIM_PWM_Start_DMA+0x444>)
 80100f6:	4293      	cmp	r3, r2
 80100f8:	d004      	beq.n	8010104 <HAL_TIM_PWM_Start_DMA+0x364>
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	4a3a      	ldr	r2, [pc, #232]	; (80101e8 <HAL_TIM_PWM_Start_DMA+0x448>)
 8010100:	4293      	cmp	r3, r2
 8010102:	d101      	bne.n	8010108 <HAL_TIM_PWM_Start_DMA+0x368>
 8010104:	2301      	movs	r3, #1
 8010106:	e000      	b.n	801010a <HAL_TIM_PWM_Start_DMA+0x36a>
 8010108:	2300      	movs	r3, #0
 801010a:	2b00      	cmp	r3, #0
 801010c:	d007      	beq.n	801011e <HAL_TIM_PWM_Start_DMA+0x37e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801011c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	681b      	ldr	r3, [r3, #0]
 8010122:	4a2d      	ldr	r2, [pc, #180]	; (80101d8 <HAL_TIM_PWM_Start_DMA+0x438>)
 8010124:	4293      	cmp	r3, r2
 8010126:	d02c      	beq.n	8010182 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	681b      	ldr	r3, [r3, #0]
 801012c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010130:	d027      	beq.n	8010182 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	681b      	ldr	r3, [r3, #0]
 8010136:	4a2d      	ldr	r2, [pc, #180]	; (80101ec <HAL_TIM_PWM_Start_DMA+0x44c>)
 8010138:	4293      	cmp	r3, r2
 801013a:	d022      	beq.n	8010182 <HAL_TIM_PWM_Start_DMA+0x3e2>
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	4a2b      	ldr	r2, [pc, #172]	; (80101f0 <HAL_TIM_PWM_Start_DMA+0x450>)
 8010142:	4293      	cmp	r3, r2
 8010144:	d01d      	beq.n	8010182 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	4a2a      	ldr	r2, [pc, #168]	; (80101f4 <HAL_TIM_PWM_Start_DMA+0x454>)
 801014c:	4293      	cmp	r3, r2
 801014e:	d018      	beq.n	8010182 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	4a21      	ldr	r2, [pc, #132]	; (80101dc <HAL_TIM_PWM_Start_DMA+0x43c>)
 8010156:	4293      	cmp	r3, r2
 8010158:	d013      	beq.n	8010182 <HAL_TIM_PWM_Start_DMA+0x3e2>
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	681b      	ldr	r3, [r3, #0]
 801015e:	4a26      	ldr	r2, [pc, #152]	; (80101f8 <HAL_TIM_PWM_Start_DMA+0x458>)
 8010160:	4293      	cmp	r3, r2
 8010162:	d00e      	beq.n	8010182 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	4a1d      	ldr	r2, [pc, #116]	; (80101e0 <HAL_TIM_PWM_Start_DMA+0x440>)
 801016a:	4293      	cmp	r3, r2
 801016c:	d009      	beq.n	8010182 <HAL_TIM_PWM_Start_DMA+0x3e2>
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	4a22      	ldr	r2, [pc, #136]	; (80101fc <HAL_TIM_PWM_Start_DMA+0x45c>)
 8010174:	4293      	cmp	r3, r2
 8010176:	d004      	beq.n	8010182 <HAL_TIM_PWM_Start_DMA+0x3e2>
 8010178:	68fb      	ldr	r3, [r7, #12]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	4a20      	ldr	r2, [pc, #128]	; (8010200 <HAL_TIM_PWM_Start_DMA+0x460>)
 801017e:	4293      	cmp	r3, r2
 8010180:	d115      	bne.n	80101ae <HAL_TIM_PWM_Start_DMA+0x40e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010182:	68fb      	ldr	r3, [r7, #12]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	689a      	ldr	r2, [r3, #8]
 8010188:	4b1e      	ldr	r3, [pc, #120]	; (8010204 <HAL_TIM_PWM_Start_DMA+0x464>)
 801018a:	4013      	ands	r3, r2
 801018c:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801018e:	693b      	ldr	r3, [r7, #16]
 8010190:	2b06      	cmp	r3, #6
 8010192:	d015      	beq.n	80101c0 <HAL_TIM_PWM_Start_DMA+0x420>
 8010194:	693b      	ldr	r3, [r7, #16]
 8010196:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801019a:	d011      	beq.n	80101c0 <HAL_TIM_PWM_Start_DMA+0x420>
      {
        __HAL_TIM_ENABLE(htim);
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	f042 0201 	orr.w	r2, r2, #1
 80101aa:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101ac:	e008      	b.n	80101c0 <HAL_TIM_PWM_Start_DMA+0x420>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	681a      	ldr	r2, [r3, #0]
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	681b      	ldr	r3, [r3, #0]
 80101b8:	f042 0201 	orr.w	r2, r2, #1
 80101bc:	601a      	str	r2, [r3, #0]
 80101be:	e000      	b.n	80101c2 <HAL_TIM_PWM_Start_DMA+0x422>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80101c0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80101c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80101c4:	4618      	mov	r0, r3
 80101c6:	3718      	adds	r7, #24
 80101c8:	46bd      	mov	sp, r7
 80101ca:	bd80      	pop	{r7, pc}
 80101cc:	0801078f 	.word	0x0801078f
 80101d0:	08010837 	.word	0x08010837
 80101d4:	080106fd 	.word	0x080106fd
 80101d8:	40010000 	.word	0x40010000
 80101dc:	40010400 	.word	0x40010400
 80101e0:	40014000 	.word	0x40014000
 80101e4:	40014400 	.word	0x40014400
 80101e8:	40014800 	.word	0x40014800
 80101ec:	40000400 	.word	0x40000400
 80101f0:	40000800 	.word	0x40000800
 80101f4:	40000c00 	.word	0x40000c00
 80101f8:	40001800 	.word	0x40001800
 80101fc:	4000e000 	.word	0x4000e000
 8010200:	4000e400 	.word	0x4000e400
 8010204:	00010007 	.word	0x00010007

08010208 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b082      	sub	sp, #8
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	691b      	ldr	r3, [r3, #16]
 8010216:	f003 0302 	and.w	r3, r3, #2
 801021a:	2b02      	cmp	r3, #2
 801021c:	d122      	bne.n	8010264 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	68db      	ldr	r3, [r3, #12]
 8010224:	f003 0302 	and.w	r3, r3, #2
 8010228:	2b02      	cmp	r3, #2
 801022a:	d11b      	bne.n	8010264 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	f06f 0202 	mvn.w	r2, #2
 8010234:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2201      	movs	r2, #1
 801023a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	699b      	ldr	r3, [r3, #24]
 8010242:	f003 0303 	and.w	r3, r3, #3
 8010246:	2b00      	cmp	r3, #0
 8010248:	d003      	beq.n	8010252 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801024a:	6878      	ldr	r0, [r7, #4]
 801024c:	f000 fa24 	bl	8010698 <HAL_TIM_IC_CaptureCallback>
 8010250:	e005      	b.n	801025e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f000 fa16 	bl	8010684 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010258:	6878      	ldr	r0, [r7, #4]
 801025a:	f000 fa27 	bl	80106ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	2200      	movs	r2, #0
 8010262:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	691b      	ldr	r3, [r3, #16]
 801026a:	f003 0304 	and.w	r3, r3, #4
 801026e:	2b04      	cmp	r3, #4
 8010270:	d122      	bne.n	80102b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	68db      	ldr	r3, [r3, #12]
 8010278:	f003 0304 	and.w	r3, r3, #4
 801027c:	2b04      	cmp	r3, #4
 801027e:	d11b      	bne.n	80102b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	f06f 0204 	mvn.w	r2, #4
 8010288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2202      	movs	r2, #2
 801028e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	699b      	ldr	r3, [r3, #24]
 8010296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801029a:	2b00      	cmp	r3, #0
 801029c:	d003      	beq.n	80102a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801029e:	6878      	ldr	r0, [r7, #4]
 80102a0:	f000 f9fa 	bl	8010698 <HAL_TIM_IC_CaptureCallback>
 80102a4:	e005      	b.n	80102b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80102a6:	6878      	ldr	r0, [r7, #4]
 80102a8:	f000 f9ec 	bl	8010684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f000 f9fd 	bl	80106ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	2200      	movs	r2, #0
 80102b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	691b      	ldr	r3, [r3, #16]
 80102be:	f003 0308 	and.w	r3, r3, #8
 80102c2:	2b08      	cmp	r3, #8
 80102c4:	d122      	bne.n	801030c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	68db      	ldr	r3, [r3, #12]
 80102cc:	f003 0308 	and.w	r3, r3, #8
 80102d0:	2b08      	cmp	r3, #8
 80102d2:	d11b      	bne.n	801030c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	f06f 0208 	mvn.w	r2, #8
 80102dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2204      	movs	r2, #4
 80102e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	69db      	ldr	r3, [r3, #28]
 80102ea:	f003 0303 	and.w	r3, r3, #3
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d003      	beq.n	80102fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80102f2:	6878      	ldr	r0, [r7, #4]
 80102f4:	f000 f9d0 	bl	8010698 <HAL_TIM_IC_CaptureCallback>
 80102f8:	e005      	b.n	8010306 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f000 f9c2 	bl	8010684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f000 f9d3 	bl	80106ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	2200      	movs	r2, #0
 801030a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	691b      	ldr	r3, [r3, #16]
 8010312:	f003 0310 	and.w	r3, r3, #16
 8010316:	2b10      	cmp	r3, #16
 8010318:	d122      	bne.n	8010360 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801031a:	687b      	ldr	r3, [r7, #4]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	68db      	ldr	r3, [r3, #12]
 8010320:	f003 0310 	and.w	r3, r3, #16
 8010324:	2b10      	cmp	r3, #16
 8010326:	d11b      	bne.n	8010360 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	f06f 0210 	mvn.w	r2, #16
 8010330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2208      	movs	r2, #8
 8010336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	69db      	ldr	r3, [r3, #28]
 801033e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010342:	2b00      	cmp	r3, #0
 8010344:	d003      	beq.n	801034e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010346:	6878      	ldr	r0, [r7, #4]
 8010348:	f000 f9a6 	bl	8010698 <HAL_TIM_IC_CaptureCallback>
 801034c:	e005      	b.n	801035a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	f000 f998 	bl	8010684 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	f000 f9a9 	bl	80106ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	2200      	movs	r2, #0
 801035e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	691b      	ldr	r3, [r3, #16]
 8010366:	f003 0301 	and.w	r3, r3, #1
 801036a:	2b01      	cmp	r3, #1
 801036c:	d10e      	bne.n	801038c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	68db      	ldr	r3, [r3, #12]
 8010374:	f003 0301 	and.w	r3, r3, #1
 8010378:	2b01      	cmp	r3, #1
 801037a:	d107      	bne.n	801038c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	f06f 0201 	mvn.w	r2, #1
 8010384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010386:	6878      	ldr	r0, [r7, #4]
 8010388:	f000 f972 	bl	8010670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	691b      	ldr	r3, [r3, #16]
 8010392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010396:	2b80      	cmp	r3, #128	; 0x80
 8010398:	d10e      	bne.n	80103b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	68db      	ldr	r3, [r3, #12]
 80103a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103a4:	2b80      	cmp	r3, #128	; 0x80
 80103a6:	d107      	bne.n	80103b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80103b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80103b2:	6878      	ldr	r0, [r7, #4]
 80103b4:	f000 febc 	bl	8011130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	691b      	ldr	r3, [r3, #16]
 80103be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103c6:	d10e      	bne.n	80103e6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	68db      	ldr	r3, [r3, #12]
 80103ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80103d2:	2b80      	cmp	r3, #128	; 0x80
 80103d4:	d107      	bne.n	80103e6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80103de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80103e0:	6878      	ldr	r0, [r7, #4]
 80103e2:	f000 feaf 	bl	8011144 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	691b      	ldr	r3, [r3, #16]
 80103ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103f0:	2b40      	cmp	r3, #64	; 0x40
 80103f2:	d10e      	bne.n	8010412 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	68db      	ldr	r3, [r3, #12]
 80103fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103fe:	2b40      	cmp	r3, #64	; 0x40
 8010400:	d107      	bne.n	8010412 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801040a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f000 f961 	bl	80106d4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	691b      	ldr	r3, [r3, #16]
 8010418:	f003 0320 	and.w	r3, r3, #32
 801041c:	2b20      	cmp	r3, #32
 801041e:	d10e      	bne.n	801043e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8010420:	687b      	ldr	r3, [r7, #4]
 8010422:	681b      	ldr	r3, [r3, #0]
 8010424:	68db      	ldr	r3, [r3, #12]
 8010426:	f003 0320 	and.w	r3, r3, #32
 801042a:	2b20      	cmp	r3, #32
 801042c:	d107      	bne.n	801043e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	f06f 0220 	mvn.w	r2, #32
 8010436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f000 fe6f 	bl	801111c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801043e:	bf00      	nop
 8010440:	3708      	adds	r7, #8
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
	...

08010448 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	b086      	sub	sp, #24
 801044c:	af00      	add	r7, sp, #0
 801044e:	60f8      	str	r0, [r7, #12]
 8010450:	60b9      	str	r1, [r7, #8]
 8010452:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8010454:	2300      	movs	r3, #0
 8010456:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801045e:	2b01      	cmp	r3, #1
 8010460:	d101      	bne.n	8010466 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8010462:	2302      	movs	r3, #2
 8010464:	e0ff      	b.n	8010666 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	2201      	movs	r2, #1
 801046a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	2b14      	cmp	r3, #20
 8010472:	f200 80f0 	bhi.w	8010656 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8010476:	a201      	add	r2, pc, #4	; (adr r2, 801047c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8010478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801047c:	080104d1 	.word	0x080104d1
 8010480:	08010657 	.word	0x08010657
 8010484:	08010657 	.word	0x08010657
 8010488:	08010657 	.word	0x08010657
 801048c:	08010511 	.word	0x08010511
 8010490:	08010657 	.word	0x08010657
 8010494:	08010657 	.word	0x08010657
 8010498:	08010657 	.word	0x08010657
 801049c:	08010553 	.word	0x08010553
 80104a0:	08010657 	.word	0x08010657
 80104a4:	08010657 	.word	0x08010657
 80104a8:	08010657 	.word	0x08010657
 80104ac:	08010593 	.word	0x08010593
 80104b0:	08010657 	.word	0x08010657
 80104b4:	08010657 	.word	0x08010657
 80104b8:	08010657 	.word	0x08010657
 80104bc:	080105d5 	.word	0x080105d5
 80104c0:	08010657 	.word	0x08010657
 80104c4:	08010657 	.word	0x08010657
 80104c8:	08010657 	.word	0x08010657
 80104cc:	08010615 	.word	0x08010615
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	68b9      	ldr	r1, [r7, #8]
 80104d6:	4618      	mov	r0, r3
 80104d8:	f000 fa88 	bl	80109ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	699a      	ldr	r2, [r3, #24]
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	f042 0208 	orr.w	r2, r2, #8
 80104ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	699a      	ldr	r2, [r3, #24]
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	f022 0204 	bic.w	r2, r2, #4
 80104fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	6999      	ldr	r1, [r3, #24]
 8010502:	68bb      	ldr	r3, [r7, #8]
 8010504:	691a      	ldr	r2, [r3, #16]
 8010506:	68fb      	ldr	r3, [r7, #12]
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	430a      	orrs	r2, r1
 801050c:	619a      	str	r2, [r3, #24]
      break;
 801050e:	e0a5      	b.n	801065c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	68b9      	ldr	r1, [r7, #8]
 8010516:	4618      	mov	r0, r3
 8010518:	f000 faf8 	bl	8010b0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	681b      	ldr	r3, [r3, #0]
 8010520:	699a      	ldr	r2, [r3, #24]
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801052a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	699a      	ldr	r2, [r3, #24]
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801053a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	6999      	ldr	r1, [r3, #24]
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	691b      	ldr	r3, [r3, #16]
 8010546:	021a      	lsls	r2, r3, #8
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	430a      	orrs	r2, r1
 801054e:	619a      	str	r2, [r3, #24]
      break;
 8010550:	e084      	b.n	801065c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	68b9      	ldr	r1, [r7, #8]
 8010558:	4618      	mov	r0, r3
 801055a:	f000 fb61 	bl	8010c20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	69da      	ldr	r2, [r3, #28]
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	f042 0208 	orr.w	r2, r2, #8
 801056c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	69da      	ldr	r2, [r3, #28]
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	f022 0204 	bic.w	r2, r2, #4
 801057c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	69d9      	ldr	r1, [r3, #28]
 8010584:	68bb      	ldr	r3, [r7, #8]
 8010586:	691a      	ldr	r2, [r3, #16]
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	430a      	orrs	r2, r1
 801058e:	61da      	str	r2, [r3, #28]
      break;
 8010590:	e064      	b.n	801065c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	68b9      	ldr	r1, [r7, #8]
 8010598:	4618      	mov	r0, r3
 801059a:	f000 fbc9 	bl	8010d30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	69da      	ldr	r2, [r3, #28]
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80105ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	69da      	ldr	r2, [r3, #28]
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80105bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	69d9      	ldr	r1, [r3, #28]
 80105c4:	68bb      	ldr	r3, [r7, #8]
 80105c6:	691b      	ldr	r3, [r3, #16]
 80105c8:	021a      	lsls	r2, r3, #8
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	430a      	orrs	r2, r1
 80105d0:	61da      	str	r2, [r3, #28]
      break;
 80105d2:	e043      	b.n	801065c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	68b9      	ldr	r1, [r7, #8]
 80105da:	4618      	mov	r0, r3
 80105dc:	f000 fc12 	bl	8010e04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	681b      	ldr	r3, [r3, #0]
 80105ea:	f042 0208 	orr.w	r2, r2, #8
 80105ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	f022 0204 	bic.w	r2, r2, #4
 80105fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	691a      	ldr	r2, [r3, #16]
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	430a      	orrs	r2, r1
 8010610:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010612:	e023      	b.n	801065c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	68b9      	ldr	r1, [r7, #8]
 801061a:	4618      	mov	r0, r3
 801061c:	f000 fc56 	bl	8010ecc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801062e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	681b      	ldr	r3, [r3, #0]
 8010634:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801063e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010646:	68bb      	ldr	r3, [r7, #8]
 8010648:	691b      	ldr	r3, [r3, #16]
 801064a:	021a      	lsls	r2, r3, #8
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	430a      	orrs	r2, r1
 8010652:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8010654:	e002      	b.n	801065c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8010656:	2301      	movs	r3, #1
 8010658:	75fb      	strb	r3, [r7, #23]
      break;
 801065a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	2200      	movs	r2, #0
 8010660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8010664:	7dfb      	ldrb	r3, [r7, #23]
}
 8010666:	4618      	mov	r0, r3
 8010668:	3718      	adds	r7, #24
 801066a:	46bd      	mov	sp, r7
 801066c:	bd80      	pop	{r7, pc}
 801066e:	bf00      	nop

08010670 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010670:	b480      	push	{r7}
 8010672:	b083      	sub	sp, #12
 8010674:	af00      	add	r7, sp, #0
 8010676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8010678:	bf00      	nop
 801067a:	370c      	adds	r7, #12
 801067c:	46bd      	mov	sp, r7
 801067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010682:	4770      	bx	lr

08010684 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8010684:	b480      	push	{r7}
 8010686:	b083      	sub	sp, #12
 8010688:	af00      	add	r7, sp, #0
 801068a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801068c:	bf00      	nop
 801068e:	370c      	adds	r7, #12
 8010690:	46bd      	mov	sp, r7
 8010692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010696:	4770      	bx	lr

08010698 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8010698:	b480      	push	{r7}
 801069a:	b083      	sub	sp, #12
 801069c:	af00      	add	r7, sp, #0
 801069e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80106a0:	bf00      	nop
 80106a2:	370c      	adds	r7, #12
 80106a4:	46bd      	mov	sp, r7
 80106a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106aa:	4770      	bx	lr

080106ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80106ac:	b480      	push	{r7}
 80106ae:	b083      	sub	sp, #12
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80106b4:	bf00      	nop
 80106b6:	370c      	adds	r7, #12
 80106b8:	46bd      	mov	sp, r7
 80106ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106be:	4770      	bx	lr

080106c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80106c0:	b480      	push	{r7}
 80106c2:	b083      	sub	sp, #12
 80106c4:	af00      	add	r7, sp, #0
 80106c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80106c8:	bf00      	nop
 80106ca:	370c      	adds	r7, #12
 80106cc:	46bd      	mov	sp, r7
 80106ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d2:	4770      	bx	lr

080106d4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80106d4:	b480      	push	{r7}
 80106d6:	b083      	sub	sp, #12
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80106dc:	bf00      	nop
 80106de:	370c      	adds	r7, #12
 80106e0:	46bd      	mov	sp, r7
 80106e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e6:	4770      	bx	lr

080106e8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80106e8:	b480      	push	{r7}
 80106ea:	b083      	sub	sp, #12
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80106f0:	bf00      	nop
 80106f2:	370c      	adds	r7, #12
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr

080106fc <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b084      	sub	sp, #16
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010708:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801070e:	687a      	ldr	r2, [r7, #4]
 8010710:	429a      	cmp	r2, r3
 8010712:	d107      	bne.n	8010724 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	2201      	movs	r2, #1
 8010718:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	2201      	movs	r2, #1
 801071e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010722:	e02a      	b.n	801077a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010728:	687a      	ldr	r2, [r7, #4]
 801072a:	429a      	cmp	r2, r3
 801072c:	d107      	bne.n	801073e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2202      	movs	r2, #2
 8010732:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8010734:	68fb      	ldr	r3, [r7, #12]
 8010736:	2201      	movs	r2, #1
 8010738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801073c:	e01d      	b.n	801077a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010742:	687a      	ldr	r2, [r7, #4]
 8010744:	429a      	cmp	r2, r3
 8010746:	d107      	bne.n	8010758 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	2204      	movs	r2, #4
 801074c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 801074e:	68fb      	ldr	r3, [r7, #12]
 8010750:	2201      	movs	r2, #1
 8010752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010756:	e010      	b.n	801077a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010758:	68fb      	ldr	r3, [r7, #12]
 801075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801075c:	687a      	ldr	r2, [r7, #4]
 801075e:	429a      	cmp	r2, r3
 8010760:	d107      	bne.n	8010772 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	2208      	movs	r2, #8
 8010766:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	2201      	movs	r2, #1
 801076c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010770:	e003      	b.n	801077a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8010772:	68fb      	ldr	r3, [r7, #12]
 8010774:	2201      	movs	r2, #1
 8010776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 801077a:	68f8      	ldr	r0, [r7, #12]
 801077c:	f7ff ffb4 	bl	80106e8 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	2200      	movs	r2, #0
 8010784:	771a      	strb	r2, [r3, #28]
}
 8010786:	bf00      	nop
 8010788:	3710      	adds	r7, #16
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}

0801078e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 801078e:	b580      	push	{r7, lr}
 8010790:	b084      	sub	sp, #16
 8010792:	af00      	add	r7, sp, #0
 8010794:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010796:	687b      	ldr	r3, [r7, #4]
 8010798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801079a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107a0:	687a      	ldr	r2, [r7, #4]
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d10b      	bne.n	80107be <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	2201      	movs	r2, #1
 80107aa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	69db      	ldr	r3, [r3, #28]
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d136      	bne.n	8010822 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	2201      	movs	r2, #1
 80107b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80107bc:	e031      	b.n	8010822 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107c2:	687a      	ldr	r2, [r7, #4]
 80107c4:	429a      	cmp	r2, r3
 80107c6:	d10b      	bne.n	80107e0 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	2202      	movs	r2, #2
 80107cc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	69db      	ldr	r3, [r3, #28]
 80107d2:	2b00      	cmp	r3, #0
 80107d4:	d125      	bne.n	8010822 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	2201      	movs	r2, #1
 80107da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80107de:	e020      	b.n	8010822 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107e4:	687a      	ldr	r2, [r7, #4]
 80107e6:	429a      	cmp	r2, r3
 80107e8:	d10b      	bne.n	8010802 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	2204      	movs	r2, #4
 80107ee:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	69db      	ldr	r3, [r3, #28]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d114      	bne.n	8010822 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	2201      	movs	r2, #1
 80107fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010800:	e00f      	b.n	8010822 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010806:	687a      	ldr	r2, [r7, #4]
 8010808:	429a      	cmp	r2, r3
 801080a:	d10a      	bne.n	8010822 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	2208      	movs	r2, #8
 8010810:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	69db      	ldr	r3, [r3, #28]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d103      	bne.n	8010822 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	2201      	movs	r2, #1
 801081e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010822:	68f8      	ldr	r0, [r7, #12]
 8010824:	f7ff ff42 	bl	80106ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	2200      	movs	r2, #0
 801082c:	771a      	strb	r2, [r3, #28]
}
 801082e:	bf00      	nop
 8010830:	3710      	adds	r7, #16
 8010832:	46bd      	mov	sp, r7
 8010834:	bd80      	pop	{r7, pc}

08010836 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010836:	b580      	push	{r7, lr}
 8010838:	b084      	sub	sp, #16
 801083a:	af00      	add	r7, sp, #0
 801083c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010842:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8010844:	68fb      	ldr	r3, [r7, #12]
 8010846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010848:	687a      	ldr	r2, [r7, #4]
 801084a:	429a      	cmp	r2, r3
 801084c:	d103      	bne.n	8010856 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	2201      	movs	r2, #1
 8010852:	771a      	strb	r2, [r3, #28]
 8010854:	e019      	b.n	801088a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801085a:	687a      	ldr	r2, [r7, #4]
 801085c:	429a      	cmp	r2, r3
 801085e:	d103      	bne.n	8010868 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010860:	68fb      	ldr	r3, [r7, #12]
 8010862:	2202      	movs	r2, #2
 8010864:	771a      	strb	r2, [r3, #28]
 8010866:	e010      	b.n	801088a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801086c:	687a      	ldr	r2, [r7, #4]
 801086e:	429a      	cmp	r2, r3
 8010870:	d103      	bne.n	801087a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	2204      	movs	r2, #4
 8010876:	771a      	strb	r2, [r3, #28]
 8010878:	e007      	b.n	801088a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801087e:	687a      	ldr	r2, [r7, #4]
 8010880:	429a      	cmp	r2, r3
 8010882:	d102      	bne.n	801088a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010884:	68fb      	ldr	r3, [r7, #12]
 8010886:	2208      	movs	r2, #8
 8010888:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 801088a:	68f8      	ldr	r0, [r7, #12]
 801088c:	f7ff ff18 	bl	80106c0 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	2200      	movs	r2, #0
 8010894:	771a      	strb	r2, [r3, #28]
}
 8010896:	bf00      	nop
 8010898:	3710      	adds	r7, #16
 801089a:	46bd      	mov	sp, r7
 801089c:	bd80      	pop	{r7, pc}
	...

080108a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80108a0:	b480      	push	{r7}
 80108a2:	b085      	sub	sp, #20
 80108a4:	af00      	add	r7, sp, #0
 80108a6:	6078      	str	r0, [r7, #4]
 80108a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	681b      	ldr	r3, [r3, #0]
 80108ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	4a44      	ldr	r2, [pc, #272]	; (80109c4 <TIM_Base_SetConfig+0x124>)
 80108b4:	4293      	cmp	r3, r2
 80108b6:	d013      	beq.n	80108e0 <TIM_Base_SetConfig+0x40>
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80108be:	d00f      	beq.n	80108e0 <TIM_Base_SetConfig+0x40>
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	4a41      	ldr	r2, [pc, #260]	; (80109c8 <TIM_Base_SetConfig+0x128>)
 80108c4:	4293      	cmp	r3, r2
 80108c6:	d00b      	beq.n	80108e0 <TIM_Base_SetConfig+0x40>
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	4a40      	ldr	r2, [pc, #256]	; (80109cc <TIM_Base_SetConfig+0x12c>)
 80108cc:	4293      	cmp	r3, r2
 80108ce:	d007      	beq.n	80108e0 <TIM_Base_SetConfig+0x40>
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	4a3f      	ldr	r2, [pc, #252]	; (80109d0 <TIM_Base_SetConfig+0x130>)
 80108d4:	4293      	cmp	r3, r2
 80108d6:	d003      	beq.n	80108e0 <TIM_Base_SetConfig+0x40>
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	4a3e      	ldr	r2, [pc, #248]	; (80109d4 <TIM_Base_SetConfig+0x134>)
 80108dc:	4293      	cmp	r3, r2
 80108de:	d108      	bne.n	80108f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80108e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80108e8:	683b      	ldr	r3, [r7, #0]
 80108ea:	685b      	ldr	r3, [r3, #4]
 80108ec:	68fa      	ldr	r2, [r7, #12]
 80108ee:	4313      	orrs	r3, r2
 80108f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	4a33      	ldr	r2, [pc, #204]	; (80109c4 <TIM_Base_SetConfig+0x124>)
 80108f6:	4293      	cmp	r3, r2
 80108f8:	d027      	beq.n	801094a <TIM_Base_SetConfig+0xaa>
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010900:	d023      	beq.n	801094a <TIM_Base_SetConfig+0xaa>
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	4a30      	ldr	r2, [pc, #192]	; (80109c8 <TIM_Base_SetConfig+0x128>)
 8010906:	4293      	cmp	r3, r2
 8010908:	d01f      	beq.n	801094a <TIM_Base_SetConfig+0xaa>
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	4a2f      	ldr	r2, [pc, #188]	; (80109cc <TIM_Base_SetConfig+0x12c>)
 801090e:	4293      	cmp	r3, r2
 8010910:	d01b      	beq.n	801094a <TIM_Base_SetConfig+0xaa>
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	4a2e      	ldr	r2, [pc, #184]	; (80109d0 <TIM_Base_SetConfig+0x130>)
 8010916:	4293      	cmp	r3, r2
 8010918:	d017      	beq.n	801094a <TIM_Base_SetConfig+0xaa>
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	4a2d      	ldr	r2, [pc, #180]	; (80109d4 <TIM_Base_SetConfig+0x134>)
 801091e:	4293      	cmp	r3, r2
 8010920:	d013      	beq.n	801094a <TIM_Base_SetConfig+0xaa>
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	4a2c      	ldr	r2, [pc, #176]	; (80109d8 <TIM_Base_SetConfig+0x138>)
 8010926:	4293      	cmp	r3, r2
 8010928:	d00f      	beq.n	801094a <TIM_Base_SetConfig+0xaa>
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	4a2b      	ldr	r2, [pc, #172]	; (80109dc <TIM_Base_SetConfig+0x13c>)
 801092e:	4293      	cmp	r3, r2
 8010930:	d00b      	beq.n	801094a <TIM_Base_SetConfig+0xaa>
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	4a2a      	ldr	r2, [pc, #168]	; (80109e0 <TIM_Base_SetConfig+0x140>)
 8010936:	4293      	cmp	r3, r2
 8010938:	d007      	beq.n	801094a <TIM_Base_SetConfig+0xaa>
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	4a29      	ldr	r2, [pc, #164]	; (80109e4 <TIM_Base_SetConfig+0x144>)
 801093e:	4293      	cmp	r3, r2
 8010940:	d003      	beq.n	801094a <TIM_Base_SetConfig+0xaa>
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	4a28      	ldr	r2, [pc, #160]	; (80109e8 <TIM_Base_SetConfig+0x148>)
 8010946:	4293      	cmp	r3, r2
 8010948:	d108      	bne.n	801095c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8010952:	683b      	ldr	r3, [r7, #0]
 8010954:	68db      	ldr	r3, [r3, #12]
 8010956:	68fa      	ldr	r2, [r7, #12]
 8010958:	4313      	orrs	r3, r2
 801095a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8010962:	683b      	ldr	r3, [r7, #0]
 8010964:	695b      	ldr	r3, [r3, #20]
 8010966:	4313      	orrs	r3, r2
 8010968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	68fa      	ldr	r2, [r7, #12]
 801096e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8010970:	683b      	ldr	r3, [r7, #0]
 8010972:	689a      	ldr	r2, [r3, #8]
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	681a      	ldr	r2, [r3, #0]
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	4a10      	ldr	r2, [pc, #64]	; (80109c4 <TIM_Base_SetConfig+0x124>)
 8010984:	4293      	cmp	r3, r2
 8010986:	d00f      	beq.n	80109a8 <TIM_Base_SetConfig+0x108>
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	4a12      	ldr	r2, [pc, #72]	; (80109d4 <TIM_Base_SetConfig+0x134>)
 801098c:	4293      	cmp	r3, r2
 801098e:	d00b      	beq.n	80109a8 <TIM_Base_SetConfig+0x108>
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	4a11      	ldr	r2, [pc, #68]	; (80109d8 <TIM_Base_SetConfig+0x138>)
 8010994:	4293      	cmp	r3, r2
 8010996:	d007      	beq.n	80109a8 <TIM_Base_SetConfig+0x108>
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	4a10      	ldr	r2, [pc, #64]	; (80109dc <TIM_Base_SetConfig+0x13c>)
 801099c:	4293      	cmp	r3, r2
 801099e:	d003      	beq.n	80109a8 <TIM_Base_SetConfig+0x108>
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	4a0f      	ldr	r2, [pc, #60]	; (80109e0 <TIM_Base_SetConfig+0x140>)
 80109a4:	4293      	cmp	r3, r2
 80109a6:	d103      	bne.n	80109b0 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	691a      	ldr	r2, [r3, #16]
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	2201      	movs	r2, #1
 80109b4:	615a      	str	r2, [r3, #20]
}
 80109b6:	bf00      	nop
 80109b8:	3714      	adds	r7, #20
 80109ba:	46bd      	mov	sp, r7
 80109bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c0:	4770      	bx	lr
 80109c2:	bf00      	nop
 80109c4:	40010000 	.word	0x40010000
 80109c8:	40000400 	.word	0x40000400
 80109cc:	40000800 	.word	0x40000800
 80109d0:	40000c00 	.word	0x40000c00
 80109d4:	40010400 	.word	0x40010400
 80109d8:	40014000 	.word	0x40014000
 80109dc:	40014400 	.word	0x40014400
 80109e0:	40014800 	.word	0x40014800
 80109e4:	4000e000 	.word	0x4000e000
 80109e8:	4000e400 	.word	0x4000e400

080109ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80109ec:	b480      	push	{r7}
 80109ee:	b087      	sub	sp, #28
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
 80109f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	6a1b      	ldr	r3, [r3, #32]
 80109fa:	f023 0201 	bic.w	r2, r3, #1
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6a1b      	ldr	r3, [r3, #32]
 8010a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	685b      	ldr	r3, [r3, #4]
 8010a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	699b      	ldr	r3, [r3, #24]
 8010a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8010a14:	68fa      	ldr	r2, [r7, #12]
 8010a16:	4b37      	ldr	r3, [pc, #220]	; (8010af4 <TIM_OC1_SetConfig+0x108>)
 8010a18:	4013      	ands	r3, r2
 8010a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	f023 0303 	bic.w	r3, r3, #3
 8010a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	68fa      	ldr	r2, [r7, #12]
 8010a2a:	4313      	orrs	r3, r2
 8010a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8010a2e:	697b      	ldr	r3, [r7, #20]
 8010a30:	f023 0302 	bic.w	r3, r3, #2
 8010a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8010a36:	683b      	ldr	r3, [r7, #0]
 8010a38:	689b      	ldr	r3, [r3, #8]
 8010a3a:	697a      	ldr	r2, [r7, #20]
 8010a3c:	4313      	orrs	r3, r2
 8010a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	4a2d      	ldr	r2, [pc, #180]	; (8010af8 <TIM_OC1_SetConfig+0x10c>)
 8010a44:	4293      	cmp	r3, r2
 8010a46:	d00f      	beq.n	8010a68 <TIM_OC1_SetConfig+0x7c>
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	4a2c      	ldr	r2, [pc, #176]	; (8010afc <TIM_OC1_SetConfig+0x110>)
 8010a4c:	4293      	cmp	r3, r2
 8010a4e:	d00b      	beq.n	8010a68 <TIM_OC1_SetConfig+0x7c>
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	4a2b      	ldr	r2, [pc, #172]	; (8010b00 <TIM_OC1_SetConfig+0x114>)
 8010a54:	4293      	cmp	r3, r2
 8010a56:	d007      	beq.n	8010a68 <TIM_OC1_SetConfig+0x7c>
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	4a2a      	ldr	r2, [pc, #168]	; (8010b04 <TIM_OC1_SetConfig+0x118>)
 8010a5c:	4293      	cmp	r3, r2
 8010a5e:	d003      	beq.n	8010a68 <TIM_OC1_SetConfig+0x7c>
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	4a29      	ldr	r2, [pc, #164]	; (8010b08 <TIM_OC1_SetConfig+0x11c>)
 8010a64:	4293      	cmp	r3, r2
 8010a66:	d10c      	bne.n	8010a82 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	f023 0308 	bic.w	r3, r3, #8
 8010a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8010a70:	683b      	ldr	r3, [r7, #0]
 8010a72:	68db      	ldr	r3, [r3, #12]
 8010a74:	697a      	ldr	r2, [r7, #20]
 8010a76:	4313      	orrs	r3, r2
 8010a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8010a7a:	697b      	ldr	r3, [r7, #20]
 8010a7c:	f023 0304 	bic.w	r3, r3, #4
 8010a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	4a1c      	ldr	r2, [pc, #112]	; (8010af8 <TIM_OC1_SetConfig+0x10c>)
 8010a86:	4293      	cmp	r3, r2
 8010a88:	d00f      	beq.n	8010aaa <TIM_OC1_SetConfig+0xbe>
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	4a1b      	ldr	r2, [pc, #108]	; (8010afc <TIM_OC1_SetConfig+0x110>)
 8010a8e:	4293      	cmp	r3, r2
 8010a90:	d00b      	beq.n	8010aaa <TIM_OC1_SetConfig+0xbe>
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	4a1a      	ldr	r2, [pc, #104]	; (8010b00 <TIM_OC1_SetConfig+0x114>)
 8010a96:	4293      	cmp	r3, r2
 8010a98:	d007      	beq.n	8010aaa <TIM_OC1_SetConfig+0xbe>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	4a19      	ldr	r2, [pc, #100]	; (8010b04 <TIM_OC1_SetConfig+0x118>)
 8010a9e:	4293      	cmp	r3, r2
 8010aa0:	d003      	beq.n	8010aaa <TIM_OC1_SetConfig+0xbe>
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	4a18      	ldr	r2, [pc, #96]	; (8010b08 <TIM_OC1_SetConfig+0x11c>)
 8010aa6:	4293      	cmp	r3, r2
 8010aa8:	d111      	bne.n	8010ace <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8010aaa:	693b      	ldr	r3, [r7, #16]
 8010aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8010ab2:	693b      	ldr	r3, [r7, #16]
 8010ab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8010aba:	683b      	ldr	r3, [r7, #0]
 8010abc:	695b      	ldr	r3, [r3, #20]
 8010abe:	693a      	ldr	r2, [r7, #16]
 8010ac0:	4313      	orrs	r3, r2
 8010ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	699b      	ldr	r3, [r3, #24]
 8010ac8:	693a      	ldr	r2, [r7, #16]
 8010aca:	4313      	orrs	r3, r2
 8010acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	693a      	ldr	r2, [r7, #16]
 8010ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	68fa      	ldr	r2, [r7, #12]
 8010ad8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8010ada:	683b      	ldr	r3, [r7, #0]
 8010adc:	685a      	ldr	r2, [r3, #4]
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	697a      	ldr	r2, [r7, #20]
 8010ae6:	621a      	str	r2, [r3, #32]
}
 8010ae8:	bf00      	nop
 8010aea:	371c      	adds	r7, #28
 8010aec:	46bd      	mov	sp, r7
 8010aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af2:	4770      	bx	lr
 8010af4:	fffeff8f 	.word	0xfffeff8f
 8010af8:	40010000 	.word	0x40010000
 8010afc:	40010400 	.word	0x40010400
 8010b00:	40014000 	.word	0x40014000
 8010b04:	40014400 	.word	0x40014400
 8010b08:	40014800 	.word	0x40014800

08010b0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010b0c:	b480      	push	{r7}
 8010b0e:	b087      	sub	sp, #28
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
 8010b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	6a1b      	ldr	r3, [r3, #32]
 8010b1a:	f023 0210 	bic.w	r2, r3, #16
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	6a1b      	ldr	r3, [r3, #32]
 8010b26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	685b      	ldr	r3, [r3, #4]
 8010b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	699b      	ldr	r3, [r3, #24]
 8010b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8010b34:	68fa      	ldr	r2, [r7, #12]
 8010b36:	4b34      	ldr	r3, [pc, #208]	; (8010c08 <TIM_OC2_SetConfig+0xfc>)
 8010b38:	4013      	ands	r3, r2
 8010b3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010b42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	021b      	lsls	r3, r3, #8
 8010b4a:	68fa      	ldr	r2, [r7, #12]
 8010b4c:	4313      	orrs	r3, r2
 8010b4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8010b50:	697b      	ldr	r3, [r7, #20]
 8010b52:	f023 0320 	bic.w	r3, r3, #32
 8010b56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8010b58:	683b      	ldr	r3, [r7, #0]
 8010b5a:	689b      	ldr	r3, [r3, #8]
 8010b5c:	011b      	lsls	r3, r3, #4
 8010b5e:	697a      	ldr	r2, [r7, #20]
 8010b60:	4313      	orrs	r3, r2
 8010b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	4a29      	ldr	r2, [pc, #164]	; (8010c0c <TIM_OC2_SetConfig+0x100>)
 8010b68:	4293      	cmp	r3, r2
 8010b6a:	d003      	beq.n	8010b74 <TIM_OC2_SetConfig+0x68>
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	4a28      	ldr	r2, [pc, #160]	; (8010c10 <TIM_OC2_SetConfig+0x104>)
 8010b70:	4293      	cmp	r3, r2
 8010b72:	d10d      	bne.n	8010b90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8010b74:	697b      	ldr	r3, [r7, #20]
 8010b76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	68db      	ldr	r3, [r3, #12]
 8010b80:	011b      	lsls	r3, r3, #4
 8010b82:	697a      	ldr	r2, [r7, #20]
 8010b84:	4313      	orrs	r3, r2
 8010b86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	4a1e      	ldr	r2, [pc, #120]	; (8010c0c <TIM_OC2_SetConfig+0x100>)
 8010b94:	4293      	cmp	r3, r2
 8010b96:	d00f      	beq.n	8010bb8 <TIM_OC2_SetConfig+0xac>
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	4a1d      	ldr	r2, [pc, #116]	; (8010c10 <TIM_OC2_SetConfig+0x104>)
 8010b9c:	4293      	cmp	r3, r2
 8010b9e:	d00b      	beq.n	8010bb8 <TIM_OC2_SetConfig+0xac>
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	4a1c      	ldr	r2, [pc, #112]	; (8010c14 <TIM_OC2_SetConfig+0x108>)
 8010ba4:	4293      	cmp	r3, r2
 8010ba6:	d007      	beq.n	8010bb8 <TIM_OC2_SetConfig+0xac>
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	4a1b      	ldr	r2, [pc, #108]	; (8010c18 <TIM_OC2_SetConfig+0x10c>)
 8010bac:	4293      	cmp	r3, r2
 8010bae:	d003      	beq.n	8010bb8 <TIM_OC2_SetConfig+0xac>
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	4a1a      	ldr	r2, [pc, #104]	; (8010c1c <TIM_OC2_SetConfig+0x110>)
 8010bb4:	4293      	cmp	r3, r2
 8010bb6:	d113      	bne.n	8010be0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010bbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010bc0:	693b      	ldr	r3, [r7, #16]
 8010bc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8010bc8:	683b      	ldr	r3, [r7, #0]
 8010bca:	695b      	ldr	r3, [r3, #20]
 8010bcc:	009b      	lsls	r3, r3, #2
 8010bce:	693a      	ldr	r2, [r7, #16]
 8010bd0:	4313      	orrs	r3, r2
 8010bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010bd4:	683b      	ldr	r3, [r7, #0]
 8010bd6:	699b      	ldr	r3, [r3, #24]
 8010bd8:	009b      	lsls	r3, r3, #2
 8010bda:	693a      	ldr	r2, [r7, #16]
 8010bdc:	4313      	orrs	r3, r2
 8010bde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	693a      	ldr	r2, [r7, #16]
 8010be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	68fa      	ldr	r2, [r7, #12]
 8010bea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8010bec:	683b      	ldr	r3, [r7, #0]
 8010bee:	685a      	ldr	r2, [r3, #4]
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	697a      	ldr	r2, [r7, #20]
 8010bf8:	621a      	str	r2, [r3, #32]
}
 8010bfa:	bf00      	nop
 8010bfc:	371c      	adds	r7, #28
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c04:	4770      	bx	lr
 8010c06:	bf00      	nop
 8010c08:	feff8fff 	.word	0xfeff8fff
 8010c0c:	40010000 	.word	0x40010000
 8010c10:	40010400 	.word	0x40010400
 8010c14:	40014000 	.word	0x40014000
 8010c18:	40014400 	.word	0x40014400
 8010c1c:	40014800 	.word	0x40014800

08010c20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010c20:	b480      	push	{r7}
 8010c22:	b087      	sub	sp, #28
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
 8010c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	6a1b      	ldr	r3, [r3, #32]
 8010c2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	6a1b      	ldr	r3, [r3, #32]
 8010c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	685b      	ldr	r3, [r3, #4]
 8010c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	69db      	ldr	r3, [r3, #28]
 8010c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8010c48:	68fa      	ldr	r2, [r7, #12]
 8010c4a:	4b33      	ldr	r3, [pc, #204]	; (8010d18 <TIM_OC3_SetConfig+0xf8>)
 8010c4c:	4013      	ands	r3, r2
 8010c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	f023 0303 	bic.w	r3, r3, #3
 8010c56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	681b      	ldr	r3, [r3, #0]
 8010c5c:	68fa      	ldr	r2, [r7, #12]
 8010c5e:	4313      	orrs	r3, r2
 8010c60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8010c62:	697b      	ldr	r3, [r7, #20]
 8010c64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8010c68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8010c6a:	683b      	ldr	r3, [r7, #0]
 8010c6c:	689b      	ldr	r3, [r3, #8]
 8010c6e:	021b      	lsls	r3, r3, #8
 8010c70:	697a      	ldr	r2, [r7, #20]
 8010c72:	4313      	orrs	r3, r2
 8010c74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	4a28      	ldr	r2, [pc, #160]	; (8010d1c <TIM_OC3_SetConfig+0xfc>)
 8010c7a:	4293      	cmp	r3, r2
 8010c7c:	d003      	beq.n	8010c86 <TIM_OC3_SetConfig+0x66>
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	4a27      	ldr	r2, [pc, #156]	; (8010d20 <TIM_OC3_SetConfig+0x100>)
 8010c82:	4293      	cmp	r3, r2
 8010c84:	d10d      	bne.n	8010ca2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8010c86:	697b      	ldr	r3, [r7, #20]
 8010c88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010c8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8010c8e:	683b      	ldr	r3, [r7, #0]
 8010c90:	68db      	ldr	r3, [r3, #12]
 8010c92:	021b      	lsls	r3, r3, #8
 8010c94:	697a      	ldr	r2, [r7, #20]
 8010c96:	4313      	orrs	r3, r2
 8010c98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8010c9a:	697b      	ldr	r3, [r7, #20]
 8010c9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8010ca0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	4a1d      	ldr	r2, [pc, #116]	; (8010d1c <TIM_OC3_SetConfig+0xfc>)
 8010ca6:	4293      	cmp	r3, r2
 8010ca8:	d00f      	beq.n	8010cca <TIM_OC3_SetConfig+0xaa>
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	4a1c      	ldr	r2, [pc, #112]	; (8010d20 <TIM_OC3_SetConfig+0x100>)
 8010cae:	4293      	cmp	r3, r2
 8010cb0:	d00b      	beq.n	8010cca <TIM_OC3_SetConfig+0xaa>
 8010cb2:	687b      	ldr	r3, [r7, #4]
 8010cb4:	4a1b      	ldr	r2, [pc, #108]	; (8010d24 <TIM_OC3_SetConfig+0x104>)
 8010cb6:	4293      	cmp	r3, r2
 8010cb8:	d007      	beq.n	8010cca <TIM_OC3_SetConfig+0xaa>
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	4a1a      	ldr	r2, [pc, #104]	; (8010d28 <TIM_OC3_SetConfig+0x108>)
 8010cbe:	4293      	cmp	r3, r2
 8010cc0:	d003      	beq.n	8010cca <TIM_OC3_SetConfig+0xaa>
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	4a19      	ldr	r2, [pc, #100]	; (8010d2c <TIM_OC3_SetConfig+0x10c>)
 8010cc6:	4293      	cmp	r3, r2
 8010cc8:	d113      	bne.n	8010cf2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8010cca:	693b      	ldr	r3, [r7, #16]
 8010ccc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8010cd2:	693b      	ldr	r3, [r7, #16]
 8010cd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8010cda:	683b      	ldr	r3, [r7, #0]
 8010cdc:	695b      	ldr	r3, [r3, #20]
 8010cde:	011b      	lsls	r3, r3, #4
 8010ce0:	693a      	ldr	r2, [r7, #16]
 8010ce2:	4313      	orrs	r3, r2
 8010ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	699b      	ldr	r3, [r3, #24]
 8010cea:	011b      	lsls	r3, r3, #4
 8010cec:	693a      	ldr	r2, [r7, #16]
 8010cee:	4313      	orrs	r3, r2
 8010cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	693a      	ldr	r2, [r7, #16]
 8010cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	68fa      	ldr	r2, [r7, #12]
 8010cfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8010cfe:	683b      	ldr	r3, [r7, #0]
 8010d00:	685a      	ldr	r2, [r3, #4]
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	697a      	ldr	r2, [r7, #20]
 8010d0a:	621a      	str	r2, [r3, #32]
}
 8010d0c:	bf00      	nop
 8010d0e:	371c      	adds	r7, #28
 8010d10:	46bd      	mov	sp, r7
 8010d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d16:	4770      	bx	lr
 8010d18:	fffeff8f 	.word	0xfffeff8f
 8010d1c:	40010000 	.word	0x40010000
 8010d20:	40010400 	.word	0x40010400
 8010d24:	40014000 	.word	0x40014000
 8010d28:	40014400 	.word	0x40014400
 8010d2c:	40014800 	.word	0x40014800

08010d30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8010d30:	b480      	push	{r7}
 8010d32:	b087      	sub	sp, #28
 8010d34:	af00      	add	r7, sp, #0
 8010d36:	6078      	str	r0, [r7, #4]
 8010d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	6a1b      	ldr	r3, [r3, #32]
 8010d3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6a1b      	ldr	r3, [r3, #32]
 8010d4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	685b      	ldr	r3, [r3, #4]
 8010d50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	69db      	ldr	r3, [r3, #28]
 8010d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8010d58:	68fa      	ldr	r2, [r7, #12]
 8010d5a:	4b24      	ldr	r3, [pc, #144]	; (8010dec <TIM_OC4_SetConfig+0xbc>)
 8010d5c:	4013      	ands	r3, r2
 8010d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010d66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	021b      	lsls	r3, r3, #8
 8010d6e:	68fa      	ldr	r2, [r7, #12]
 8010d70:	4313      	orrs	r3, r2
 8010d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8010d74:	693b      	ldr	r3, [r7, #16]
 8010d76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8010d7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8010d7c:	683b      	ldr	r3, [r7, #0]
 8010d7e:	689b      	ldr	r3, [r3, #8]
 8010d80:	031b      	lsls	r3, r3, #12
 8010d82:	693a      	ldr	r2, [r7, #16]
 8010d84:	4313      	orrs	r3, r2
 8010d86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	4a19      	ldr	r2, [pc, #100]	; (8010df0 <TIM_OC4_SetConfig+0xc0>)
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d00f      	beq.n	8010db0 <TIM_OC4_SetConfig+0x80>
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	4a18      	ldr	r2, [pc, #96]	; (8010df4 <TIM_OC4_SetConfig+0xc4>)
 8010d94:	4293      	cmp	r3, r2
 8010d96:	d00b      	beq.n	8010db0 <TIM_OC4_SetConfig+0x80>
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	4a17      	ldr	r2, [pc, #92]	; (8010df8 <TIM_OC4_SetConfig+0xc8>)
 8010d9c:	4293      	cmp	r3, r2
 8010d9e:	d007      	beq.n	8010db0 <TIM_OC4_SetConfig+0x80>
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	4a16      	ldr	r2, [pc, #88]	; (8010dfc <TIM_OC4_SetConfig+0xcc>)
 8010da4:	4293      	cmp	r3, r2
 8010da6:	d003      	beq.n	8010db0 <TIM_OC4_SetConfig+0x80>
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	4a15      	ldr	r2, [pc, #84]	; (8010e00 <TIM_OC4_SetConfig+0xd0>)
 8010dac:	4293      	cmp	r3, r2
 8010dae:	d109      	bne.n	8010dc4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010db6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8010db8:	683b      	ldr	r3, [r7, #0]
 8010dba:	695b      	ldr	r3, [r3, #20]
 8010dbc:	019b      	lsls	r3, r3, #6
 8010dbe:	697a      	ldr	r2, [r7, #20]
 8010dc0:	4313      	orrs	r3, r2
 8010dc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	697a      	ldr	r2, [r7, #20]
 8010dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	68fa      	ldr	r2, [r7, #12]
 8010dce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8010dd0:	683b      	ldr	r3, [r7, #0]
 8010dd2:	685a      	ldr	r2, [r3, #4]
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	693a      	ldr	r2, [r7, #16]
 8010ddc:	621a      	str	r2, [r3, #32]
}
 8010dde:	bf00      	nop
 8010de0:	371c      	adds	r7, #28
 8010de2:	46bd      	mov	sp, r7
 8010de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de8:	4770      	bx	lr
 8010dea:	bf00      	nop
 8010dec:	feff8fff 	.word	0xfeff8fff
 8010df0:	40010000 	.word	0x40010000
 8010df4:	40010400 	.word	0x40010400
 8010df8:	40014000 	.word	0x40014000
 8010dfc:	40014400 	.word	0x40014400
 8010e00:	40014800 	.word	0x40014800

08010e04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010e04:	b480      	push	{r7}
 8010e06:	b087      	sub	sp, #28
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
 8010e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	6a1b      	ldr	r3, [r3, #32]
 8010e12:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	6a1b      	ldr	r3, [r3, #32]
 8010e1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	685b      	ldr	r3, [r3, #4]
 8010e24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8010e2c:	68fa      	ldr	r2, [r7, #12]
 8010e2e:	4b21      	ldr	r3, [pc, #132]	; (8010eb4 <TIM_OC5_SetConfig+0xb0>)
 8010e30:	4013      	ands	r3, r2
 8010e32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8010e34:	683b      	ldr	r3, [r7, #0]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	68fa      	ldr	r2, [r7, #12]
 8010e3a:	4313      	orrs	r3, r2
 8010e3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8010e44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8010e46:	683b      	ldr	r3, [r7, #0]
 8010e48:	689b      	ldr	r3, [r3, #8]
 8010e4a:	041b      	lsls	r3, r3, #16
 8010e4c:	693a      	ldr	r2, [r7, #16]
 8010e4e:	4313      	orrs	r3, r2
 8010e50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	4a18      	ldr	r2, [pc, #96]	; (8010eb8 <TIM_OC5_SetConfig+0xb4>)
 8010e56:	4293      	cmp	r3, r2
 8010e58:	d00f      	beq.n	8010e7a <TIM_OC5_SetConfig+0x76>
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	4a17      	ldr	r2, [pc, #92]	; (8010ebc <TIM_OC5_SetConfig+0xb8>)
 8010e5e:	4293      	cmp	r3, r2
 8010e60:	d00b      	beq.n	8010e7a <TIM_OC5_SetConfig+0x76>
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	4a16      	ldr	r2, [pc, #88]	; (8010ec0 <TIM_OC5_SetConfig+0xbc>)
 8010e66:	4293      	cmp	r3, r2
 8010e68:	d007      	beq.n	8010e7a <TIM_OC5_SetConfig+0x76>
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	4a15      	ldr	r2, [pc, #84]	; (8010ec4 <TIM_OC5_SetConfig+0xc0>)
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	d003      	beq.n	8010e7a <TIM_OC5_SetConfig+0x76>
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	4a14      	ldr	r2, [pc, #80]	; (8010ec8 <TIM_OC5_SetConfig+0xc4>)
 8010e76:	4293      	cmp	r3, r2
 8010e78:	d109      	bne.n	8010e8e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010e80:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	695b      	ldr	r3, [r3, #20]
 8010e86:	021b      	lsls	r3, r3, #8
 8010e88:	697a      	ldr	r2, [r7, #20]
 8010e8a:	4313      	orrs	r3, r2
 8010e8c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	697a      	ldr	r2, [r7, #20]
 8010e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	68fa      	ldr	r2, [r7, #12]
 8010e98:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8010e9a:	683b      	ldr	r3, [r7, #0]
 8010e9c:	685a      	ldr	r2, [r3, #4]
 8010e9e:	687b      	ldr	r3, [r7, #4]
 8010ea0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	693a      	ldr	r2, [r7, #16]
 8010ea6:	621a      	str	r2, [r3, #32]
}
 8010ea8:	bf00      	nop
 8010eaa:	371c      	adds	r7, #28
 8010eac:	46bd      	mov	sp, r7
 8010eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb2:	4770      	bx	lr
 8010eb4:	fffeff8f 	.word	0xfffeff8f
 8010eb8:	40010000 	.word	0x40010000
 8010ebc:	40010400 	.word	0x40010400
 8010ec0:	40014000 	.word	0x40014000
 8010ec4:	40014400 	.word	0x40014400
 8010ec8:	40014800 	.word	0x40014800

08010ecc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8010ecc:	b480      	push	{r7}
 8010ece:	b087      	sub	sp, #28
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
 8010ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	6a1b      	ldr	r3, [r3, #32]
 8010eda:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	6a1b      	ldr	r3, [r3, #32]
 8010ee6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	685b      	ldr	r3, [r3, #4]
 8010eec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8010ef4:	68fa      	ldr	r2, [r7, #12]
 8010ef6:	4b22      	ldr	r3, [pc, #136]	; (8010f80 <TIM_OC6_SetConfig+0xb4>)
 8010ef8:	4013      	ands	r3, r2
 8010efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	021b      	lsls	r3, r3, #8
 8010f02:	68fa      	ldr	r2, [r7, #12]
 8010f04:	4313      	orrs	r3, r2
 8010f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8010f08:	693b      	ldr	r3, [r7, #16]
 8010f0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010f0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8010f10:	683b      	ldr	r3, [r7, #0]
 8010f12:	689b      	ldr	r3, [r3, #8]
 8010f14:	051b      	lsls	r3, r3, #20
 8010f16:	693a      	ldr	r2, [r7, #16]
 8010f18:	4313      	orrs	r3, r2
 8010f1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	4a19      	ldr	r2, [pc, #100]	; (8010f84 <TIM_OC6_SetConfig+0xb8>)
 8010f20:	4293      	cmp	r3, r2
 8010f22:	d00f      	beq.n	8010f44 <TIM_OC6_SetConfig+0x78>
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	4a18      	ldr	r2, [pc, #96]	; (8010f88 <TIM_OC6_SetConfig+0xbc>)
 8010f28:	4293      	cmp	r3, r2
 8010f2a:	d00b      	beq.n	8010f44 <TIM_OC6_SetConfig+0x78>
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	4a17      	ldr	r2, [pc, #92]	; (8010f8c <TIM_OC6_SetConfig+0xc0>)
 8010f30:	4293      	cmp	r3, r2
 8010f32:	d007      	beq.n	8010f44 <TIM_OC6_SetConfig+0x78>
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	4a16      	ldr	r2, [pc, #88]	; (8010f90 <TIM_OC6_SetConfig+0xc4>)
 8010f38:	4293      	cmp	r3, r2
 8010f3a:	d003      	beq.n	8010f44 <TIM_OC6_SetConfig+0x78>
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	4a15      	ldr	r2, [pc, #84]	; (8010f94 <TIM_OC6_SetConfig+0xc8>)
 8010f40:	4293      	cmp	r3, r2
 8010f42:	d109      	bne.n	8010f58 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	695b      	ldr	r3, [r3, #20]
 8010f50:	029b      	lsls	r3, r3, #10
 8010f52:	697a      	ldr	r2, [r7, #20]
 8010f54:	4313      	orrs	r3, r2
 8010f56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	697a      	ldr	r2, [r7, #20]
 8010f5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	68fa      	ldr	r2, [r7, #12]
 8010f62:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8010f64:	683b      	ldr	r3, [r7, #0]
 8010f66:	685a      	ldr	r2, [r3, #4]
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	693a      	ldr	r2, [r7, #16]
 8010f70:	621a      	str	r2, [r3, #32]
}
 8010f72:	bf00      	nop
 8010f74:	371c      	adds	r7, #28
 8010f76:	46bd      	mov	sp, r7
 8010f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f7c:	4770      	bx	lr
 8010f7e:	bf00      	nop
 8010f80:	feff8fff 	.word	0xfeff8fff
 8010f84:	40010000 	.word	0x40010000
 8010f88:	40010400 	.word	0x40010400
 8010f8c:	40014000 	.word	0x40014000
 8010f90:	40014400 	.word	0x40014400
 8010f94:	40014800 	.word	0x40014800

08010f98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8010f98:	b480      	push	{r7}
 8010f9a:	b087      	sub	sp, #28
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	60f8      	str	r0, [r7, #12]
 8010fa0:	60b9      	str	r1, [r7, #8]
 8010fa2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8010fa4:	68bb      	ldr	r3, [r7, #8]
 8010fa6:	f003 031f 	and.w	r3, r3, #31
 8010faa:	2201      	movs	r2, #1
 8010fac:	fa02 f303 	lsl.w	r3, r2, r3
 8010fb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	6a1a      	ldr	r2, [r3, #32]
 8010fb6:	697b      	ldr	r3, [r7, #20]
 8010fb8:	43db      	mvns	r3, r3
 8010fba:	401a      	ands	r2, r3
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	6a1a      	ldr	r2, [r3, #32]
 8010fc4:	68bb      	ldr	r3, [r7, #8]
 8010fc6:	f003 031f 	and.w	r3, r3, #31
 8010fca:	6879      	ldr	r1, [r7, #4]
 8010fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8010fd0:	431a      	orrs	r2, r3
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	621a      	str	r2, [r3, #32]
}
 8010fd6:	bf00      	nop
 8010fd8:	371c      	adds	r7, #28
 8010fda:	46bd      	mov	sp, r7
 8010fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe0:	4770      	bx	lr
	...

08010fe4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b085      	sub	sp, #20
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
 8010fec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010ff4:	2b01      	cmp	r3, #1
 8010ff6:	d101      	bne.n	8010ffc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8010ff8:	2302      	movs	r3, #2
 8010ffa:	e077      	b.n	80110ec <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	2201      	movs	r2, #1
 8011000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2202      	movs	r2, #2
 8011008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	685b      	ldr	r3, [r3, #4]
 8011012:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	689b      	ldr	r3, [r3, #8]
 801101a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	4a35      	ldr	r2, [pc, #212]	; (80110f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011022:	4293      	cmp	r3, r2
 8011024:	d004      	beq.n	8011030 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	4a34      	ldr	r2, [pc, #208]	; (80110fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801102c:	4293      	cmp	r3, r2
 801102e:	d108      	bne.n	8011042 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8011036:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011038:	683b      	ldr	r3, [r7, #0]
 801103a:	685b      	ldr	r3, [r3, #4]
 801103c:	68fa      	ldr	r2, [r7, #12]
 801103e:	4313      	orrs	r3, r2
 8011040:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011048:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801104a:	683b      	ldr	r3, [r7, #0]
 801104c:	681b      	ldr	r3, [r3, #0]
 801104e:	68fa      	ldr	r2, [r7, #12]
 8011050:	4313      	orrs	r3, r2
 8011052:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	68fa      	ldr	r2, [r7, #12]
 801105a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	4a25      	ldr	r2, [pc, #148]	; (80110f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8011062:	4293      	cmp	r3, r2
 8011064:	d02c      	beq.n	80110c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801106e:	d027      	beq.n	80110c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	4a22      	ldr	r2, [pc, #136]	; (8011100 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8011076:	4293      	cmp	r3, r2
 8011078:	d022      	beq.n	80110c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	4a21      	ldr	r2, [pc, #132]	; (8011104 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8011080:	4293      	cmp	r3, r2
 8011082:	d01d      	beq.n	80110c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	4a1f      	ldr	r2, [pc, #124]	; (8011108 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 801108a:	4293      	cmp	r3, r2
 801108c:	d018      	beq.n	80110c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	4a1a      	ldr	r2, [pc, #104]	; (80110fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8011094:	4293      	cmp	r3, r2
 8011096:	d013      	beq.n	80110c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	4a1b      	ldr	r2, [pc, #108]	; (801110c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 801109e:	4293      	cmp	r3, r2
 80110a0:	d00e      	beq.n	80110c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110a2:	687b      	ldr	r3, [r7, #4]
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	4a1a      	ldr	r2, [pc, #104]	; (8011110 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80110a8:	4293      	cmp	r3, r2
 80110aa:	d009      	beq.n	80110c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	681b      	ldr	r3, [r3, #0]
 80110b0:	4a18      	ldr	r2, [pc, #96]	; (8011114 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80110b2:	4293      	cmp	r3, r2
 80110b4:	d004      	beq.n	80110c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	681b      	ldr	r3, [r3, #0]
 80110ba:	4a17      	ldr	r2, [pc, #92]	; (8011118 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 80110bc:	4293      	cmp	r3, r2
 80110be:	d10c      	bne.n	80110da <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80110c0:	68bb      	ldr	r3, [r7, #8]
 80110c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80110c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80110c8:	683b      	ldr	r3, [r7, #0]
 80110ca:	689b      	ldr	r3, [r3, #8]
 80110cc:	68ba      	ldr	r2, [r7, #8]
 80110ce:	4313      	orrs	r3, r2
 80110d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	68ba      	ldr	r2, [r7, #8]
 80110d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	2201      	movs	r2, #1
 80110de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	2200      	movs	r2, #0
 80110e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80110ea:	2300      	movs	r3, #0
}
 80110ec:	4618      	mov	r0, r3
 80110ee:	3714      	adds	r7, #20
 80110f0:	46bd      	mov	sp, r7
 80110f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f6:	4770      	bx	lr
 80110f8:	40010000 	.word	0x40010000
 80110fc:	40010400 	.word	0x40010400
 8011100:	40000400 	.word	0x40000400
 8011104:	40000800 	.word	0x40000800
 8011108:	40000c00 	.word	0x40000c00
 801110c:	40001800 	.word	0x40001800
 8011110:	40014000 	.word	0x40014000
 8011114:	4000e000 	.word	0x4000e000
 8011118:	4000e400 	.word	0x4000e400

0801111c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 801111c:	b480      	push	{r7}
 801111e:	b083      	sub	sp, #12
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8011124:	bf00      	nop
 8011126:	370c      	adds	r7, #12
 8011128:	46bd      	mov	sp, r7
 801112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112e:	4770      	bx	lr

08011130 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8011130:	b480      	push	{r7}
 8011132:	b083      	sub	sp, #12
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8011138:	bf00      	nop
 801113a:	370c      	adds	r7, #12
 801113c:	46bd      	mov	sp, r7
 801113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011142:	4770      	bx	lr

08011144 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8011144:	b480      	push	{r7}
 8011146:	b083      	sub	sp, #12
 8011148:	af00      	add	r7, sp, #0
 801114a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 801114c:	bf00      	nop
 801114e:	370c      	adds	r7, #12
 8011150:	46bd      	mov	sp, r7
 8011152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011156:	4770      	bx	lr

08011158 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d101      	bne.n	801116a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011166:	2301      	movs	r3, #1
 8011168:	e042      	b.n	80111f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011170:	2b00      	cmp	r3, #0
 8011172:	d106      	bne.n	8011182 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	2200      	movs	r2, #0
 8011178:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f7f2 fb17 	bl	80037b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	2224      	movs	r2, #36	; 0x24
 8011186:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 801118a:	687b      	ldr	r3, [r7, #4]
 801118c:	681b      	ldr	r3, [r3, #0]
 801118e:	681a      	ldr	r2, [r3, #0]
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	f022 0201 	bic.w	r2, r2, #1
 8011198:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801119a:	6878      	ldr	r0, [r7, #4]
 801119c:	f000 f82c 	bl	80111f8 <UART_SetConfig>
 80111a0:	4603      	mov	r3, r0
 80111a2:	2b01      	cmp	r3, #1
 80111a4:	d101      	bne.n	80111aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80111a6:	2301      	movs	r3, #1
 80111a8:	e022      	b.n	80111f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d002      	beq.n	80111b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80111b2:	6878      	ldr	r0, [r7, #4]
 80111b4:	f000 fe8c 	bl	8011ed0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	685a      	ldr	r2, [r3, #4]
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80111c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	689a      	ldr	r2, [r3, #8]
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80111d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	681a      	ldr	r2, [r3, #0]
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	f042 0201 	orr.w	r2, r2, #1
 80111e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	f000 ff13 	bl	8012014 <UART_CheckIdleState>
 80111ee:	4603      	mov	r3, r0
}
 80111f0:	4618      	mov	r0, r3
 80111f2:	3708      	adds	r7, #8
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd80      	pop	{r7, pc}

080111f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80111f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80111fc:	b092      	sub	sp, #72	; 0x48
 80111fe:	af00      	add	r7, sp, #0
 8011200:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011202:	2300      	movs	r3, #0
 8011204:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011208:	697b      	ldr	r3, [r7, #20]
 801120a:	689a      	ldr	r2, [r3, #8]
 801120c:	697b      	ldr	r3, [r7, #20]
 801120e:	691b      	ldr	r3, [r3, #16]
 8011210:	431a      	orrs	r2, r3
 8011212:	697b      	ldr	r3, [r7, #20]
 8011214:	695b      	ldr	r3, [r3, #20]
 8011216:	431a      	orrs	r2, r3
 8011218:	697b      	ldr	r3, [r7, #20]
 801121a:	69db      	ldr	r3, [r3, #28]
 801121c:	4313      	orrs	r3, r2
 801121e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011220:	697b      	ldr	r3, [r7, #20]
 8011222:	681b      	ldr	r3, [r3, #0]
 8011224:	681a      	ldr	r2, [r3, #0]
 8011226:	4bbe      	ldr	r3, [pc, #760]	; (8011520 <UART_SetConfig+0x328>)
 8011228:	4013      	ands	r3, r2
 801122a:	697a      	ldr	r2, [r7, #20]
 801122c:	6812      	ldr	r2, [r2, #0]
 801122e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011230:	430b      	orrs	r3, r1
 8011232:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011234:	697b      	ldr	r3, [r7, #20]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	685b      	ldr	r3, [r3, #4]
 801123a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801123e:	697b      	ldr	r3, [r7, #20]
 8011240:	68da      	ldr	r2, [r3, #12]
 8011242:	697b      	ldr	r3, [r7, #20]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	430a      	orrs	r2, r1
 8011248:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	699b      	ldr	r3, [r3, #24]
 801124e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011250:	697b      	ldr	r3, [r7, #20]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	4ab3      	ldr	r2, [pc, #716]	; (8011524 <UART_SetConfig+0x32c>)
 8011256:	4293      	cmp	r3, r2
 8011258:	d004      	beq.n	8011264 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801125a:	697b      	ldr	r3, [r7, #20]
 801125c:	6a1b      	ldr	r3, [r3, #32]
 801125e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011260:	4313      	orrs	r3, r2
 8011262:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011264:	697b      	ldr	r3, [r7, #20]
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	689a      	ldr	r2, [r3, #8]
 801126a:	4baf      	ldr	r3, [pc, #700]	; (8011528 <UART_SetConfig+0x330>)
 801126c:	4013      	ands	r3, r2
 801126e:	697a      	ldr	r2, [r7, #20]
 8011270:	6812      	ldr	r2, [r2, #0]
 8011272:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8011274:	430b      	orrs	r3, r1
 8011276:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8011278:	697b      	ldr	r3, [r7, #20]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801127e:	f023 010f 	bic.w	r1, r3, #15
 8011282:	697b      	ldr	r3, [r7, #20]
 8011284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011286:	697b      	ldr	r3, [r7, #20]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	430a      	orrs	r2, r1
 801128c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	681b      	ldr	r3, [r3, #0]
 8011292:	4aa6      	ldr	r2, [pc, #664]	; (801152c <UART_SetConfig+0x334>)
 8011294:	4293      	cmp	r3, r2
 8011296:	d177      	bne.n	8011388 <UART_SetConfig+0x190>
 8011298:	4ba5      	ldr	r3, [pc, #660]	; (8011530 <UART_SetConfig+0x338>)
 801129a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801129c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80112a0:	2b28      	cmp	r3, #40	; 0x28
 80112a2:	d86d      	bhi.n	8011380 <UART_SetConfig+0x188>
 80112a4:	a201      	add	r2, pc, #4	; (adr r2, 80112ac <UART_SetConfig+0xb4>)
 80112a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112aa:	bf00      	nop
 80112ac:	08011351 	.word	0x08011351
 80112b0:	08011381 	.word	0x08011381
 80112b4:	08011381 	.word	0x08011381
 80112b8:	08011381 	.word	0x08011381
 80112bc:	08011381 	.word	0x08011381
 80112c0:	08011381 	.word	0x08011381
 80112c4:	08011381 	.word	0x08011381
 80112c8:	08011381 	.word	0x08011381
 80112cc:	08011359 	.word	0x08011359
 80112d0:	08011381 	.word	0x08011381
 80112d4:	08011381 	.word	0x08011381
 80112d8:	08011381 	.word	0x08011381
 80112dc:	08011381 	.word	0x08011381
 80112e0:	08011381 	.word	0x08011381
 80112e4:	08011381 	.word	0x08011381
 80112e8:	08011381 	.word	0x08011381
 80112ec:	08011361 	.word	0x08011361
 80112f0:	08011381 	.word	0x08011381
 80112f4:	08011381 	.word	0x08011381
 80112f8:	08011381 	.word	0x08011381
 80112fc:	08011381 	.word	0x08011381
 8011300:	08011381 	.word	0x08011381
 8011304:	08011381 	.word	0x08011381
 8011308:	08011381 	.word	0x08011381
 801130c:	08011369 	.word	0x08011369
 8011310:	08011381 	.word	0x08011381
 8011314:	08011381 	.word	0x08011381
 8011318:	08011381 	.word	0x08011381
 801131c:	08011381 	.word	0x08011381
 8011320:	08011381 	.word	0x08011381
 8011324:	08011381 	.word	0x08011381
 8011328:	08011381 	.word	0x08011381
 801132c:	08011371 	.word	0x08011371
 8011330:	08011381 	.word	0x08011381
 8011334:	08011381 	.word	0x08011381
 8011338:	08011381 	.word	0x08011381
 801133c:	08011381 	.word	0x08011381
 8011340:	08011381 	.word	0x08011381
 8011344:	08011381 	.word	0x08011381
 8011348:	08011381 	.word	0x08011381
 801134c:	08011379 	.word	0x08011379
 8011350:	2301      	movs	r3, #1
 8011352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011356:	e326      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011358:	2304      	movs	r3, #4
 801135a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801135e:	e322      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011360:	2308      	movs	r3, #8
 8011362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011366:	e31e      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011368:	2310      	movs	r3, #16
 801136a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801136e:	e31a      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011370:	2320      	movs	r3, #32
 8011372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011376:	e316      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011378:	2340      	movs	r3, #64	; 0x40
 801137a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801137e:	e312      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011380:	2380      	movs	r3, #128	; 0x80
 8011382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011386:	e30e      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011388:	697b      	ldr	r3, [r7, #20]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	4a69      	ldr	r2, [pc, #420]	; (8011534 <UART_SetConfig+0x33c>)
 801138e:	4293      	cmp	r3, r2
 8011390:	d130      	bne.n	80113f4 <UART_SetConfig+0x1fc>
 8011392:	4b67      	ldr	r3, [pc, #412]	; (8011530 <UART_SetConfig+0x338>)
 8011394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011396:	f003 0307 	and.w	r3, r3, #7
 801139a:	2b05      	cmp	r3, #5
 801139c:	d826      	bhi.n	80113ec <UART_SetConfig+0x1f4>
 801139e:	a201      	add	r2, pc, #4	; (adr r2, 80113a4 <UART_SetConfig+0x1ac>)
 80113a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113a4:	080113bd 	.word	0x080113bd
 80113a8:	080113c5 	.word	0x080113c5
 80113ac:	080113cd 	.word	0x080113cd
 80113b0:	080113d5 	.word	0x080113d5
 80113b4:	080113dd 	.word	0x080113dd
 80113b8:	080113e5 	.word	0x080113e5
 80113bc:	2300      	movs	r3, #0
 80113be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113c2:	e2f0      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80113c4:	2304      	movs	r3, #4
 80113c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ca:	e2ec      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80113cc:	2308      	movs	r3, #8
 80113ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113d2:	e2e8      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80113d4:	2310      	movs	r3, #16
 80113d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113da:	e2e4      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80113dc:	2320      	movs	r3, #32
 80113de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113e2:	e2e0      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80113e4:	2340      	movs	r3, #64	; 0x40
 80113e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113ea:	e2dc      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80113ec:	2380      	movs	r3, #128	; 0x80
 80113ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80113f2:	e2d8      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	681b      	ldr	r3, [r3, #0]
 80113f8:	4a4f      	ldr	r2, [pc, #316]	; (8011538 <UART_SetConfig+0x340>)
 80113fa:	4293      	cmp	r3, r2
 80113fc:	d130      	bne.n	8011460 <UART_SetConfig+0x268>
 80113fe:	4b4c      	ldr	r3, [pc, #304]	; (8011530 <UART_SetConfig+0x338>)
 8011400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011402:	f003 0307 	and.w	r3, r3, #7
 8011406:	2b05      	cmp	r3, #5
 8011408:	d826      	bhi.n	8011458 <UART_SetConfig+0x260>
 801140a:	a201      	add	r2, pc, #4	; (adr r2, 8011410 <UART_SetConfig+0x218>)
 801140c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011410:	08011429 	.word	0x08011429
 8011414:	08011431 	.word	0x08011431
 8011418:	08011439 	.word	0x08011439
 801141c:	08011441 	.word	0x08011441
 8011420:	08011449 	.word	0x08011449
 8011424:	08011451 	.word	0x08011451
 8011428:	2300      	movs	r3, #0
 801142a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801142e:	e2ba      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011430:	2304      	movs	r3, #4
 8011432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011436:	e2b6      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011438:	2308      	movs	r3, #8
 801143a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801143e:	e2b2      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011440:	2310      	movs	r3, #16
 8011442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011446:	e2ae      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011448:	2320      	movs	r3, #32
 801144a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801144e:	e2aa      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011450:	2340      	movs	r3, #64	; 0x40
 8011452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011456:	e2a6      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011458:	2380      	movs	r3, #128	; 0x80
 801145a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801145e:	e2a2      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011460:	697b      	ldr	r3, [r7, #20]
 8011462:	681b      	ldr	r3, [r3, #0]
 8011464:	4a35      	ldr	r2, [pc, #212]	; (801153c <UART_SetConfig+0x344>)
 8011466:	4293      	cmp	r3, r2
 8011468:	d130      	bne.n	80114cc <UART_SetConfig+0x2d4>
 801146a:	4b31      	ldr	r3, [pc, #196]	; (8011530 <UART_SetConfig+0x338>)
 801146c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801146e:	f003 0307 	and.w	r3, r3, #7
 8011472:	2b05      	cmp	r3, #5
 8011474:	d826      	bhi.n	80114c4 <UART_SetConfig+0x2cc>
 8011476:	a201      	add	r2, pc, #4	; (adr r2, 801147c <UART_SetConfig+0x284>)
 8011478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801147c:	08011495 	.word	0x08011495
 8011480:	0801149d 	.word	0x0801149d
 8011484:	080114a5 	.word	0x080114a5
 8011488:	080114ad 	.word	0x080114ad
 801148c:	080114b5 	.word	0x080114b5
 8011490:	080114bd 	.word	0x080114bd
 8011494:	2300      	movs	r3, #0
 8011496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801149a:	e284      	b.n	80119a6 <UART_SetConfig+0x7ae>
 801149c:	2304      	movs	r3, #4
 801149e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114a2:	e280      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80114a4:	2308      	movs	r3, #8
 80114a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114aa:	e27c      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80114ac:	2310      	movs	r3, #16
 80114ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114b2:	e278      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80114b4:	2320      	movs	r3, #32
 80114b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ba:	e274      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80114bc:	2340      	movs	r3, #64	; 0x40
 80114be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114c2:	e270      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80114c4:	2380      	movs	r3, #128	; 0x80
 80114c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80114ca:	e26c      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80114cc:	697b      	ldr	r3, [r7, #20]
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	4a1b      	ldr	r2, [pc, #108]	; (8011540 <UART_SetConfig+0x348>)
 80114d2:	4293      	cmp	r3, r2
 80114d4:	d142      	bne.n	801155c <UART_SetConfig+0x364>
 80114d6:	4b16      	ldr	r3, [pc, #88]	; (8011530 <UART_SetConfig+0x338>)
 80114d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114da:	f003 0307 	and.w	r3, r3, #7
 80114de:	2b05      	cmp	r3, #5
 80114e0:	d838      	bhi.n	8011554 <UART_SetConfig+0x35c>
 80114e2:	a201      	add	r2, pc, #4	; (adr r2, 80114e8 <UART_SetConfig+0x2f0>)
 80114e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114e8:	08011501 	.word	0x08011501
 80114ec:	08011509 	.word	0x08011509
 80114f0:	08011511 	.word	0x08011511
 80114f4:	08011519 	.word	0x08011519
 80114f8:	08011545 	.word	0x08011545
 80114fc:	0801154d 	.word	0x0801154d
 8011500:	2300      	movs	r3, #0
 8011502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011506:	e24e      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011508:	2304      	movs	r3, #4
 801150a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801150e:	e24a      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011510:	2308      	movs	r3, #8
 8011512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011516:	e246      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011518:	2310      	movs	r3, #16
 801151a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801151e:	e242      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011520:	cfff69f3 	.word	0xcfff69f3
 8011524:	58000c00 	.word	0x58000c00
 8011528:	11fff4ff 	.word	0x11fff4ff
 801152c:	40011000 	.word	0x40011000
 8011530:	58024400 	.word	0x58024400
 8011534:	40004400 	.word	0x40004400
 8011538:	40004800 	.word	0x40004800
 801153c:	40004c00 	.word	0x40004c00
 8011540:	40005000 	.word	0x40005000
 8011544:	2320      	movs	r3, #32
 8011546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801154a:	e22c      	b.n	80119a6 <UART_SetConfig+0x7ae>
 801154c:	2340      	movs	r3, #64	; 0x40
 801154e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011552:	e228      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011554:	2380      	movs	r3, #128	; 0x80
 8011556:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801155a:	e224      	b.n	80119a6 <UART_SetConfig+0x7ae>
 801155c:	697b      	ldr	r3, [r7, #20]
 801155e:	681b      	ldr	r3, [r3, #0]
 8011560:	4ab1      	ldr	r2, [pc, #708]	; (8011828 <UART_SetConfig+0x630>)
 8011562:	4293      	cmp	r3, r2
 8011564:	d176      	bne.n	8011654 <UART_SetConfig+0x45c>
 8011566:	4bb1      	ldr	r3, [pc, #708]	; (801182c <UART_SetConfig+0x634>)
 8011568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801156a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801156e:	2b28      	cmp	r3, #40	; 0x28
 8011570:	d86c      	bhi.n	801164c <UART_SetConfig+0x454>
 8011572:	a201      	add	r2, pc, #4	; (adr r2, 8011578 <UART_SetConfig+0x380>)
 8011574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011578:	0801161d 	.word	0x0801161d
 801157c:	0801164d 	.word	0x0801164d
 8011580:	0801164d 	.word	0x0801164d
 8011584:	0801164d 	.word	0x0801164d
 8011588:	0801164d 	.word	0x0801164d
 801158c:	0801164d 	.word	0x0801164d
 8011590:	0801164d 	.word	0x0801164d
 8011594:	0801164d 	.word	0x0801164d
 8011598:	08011625 	.word	0x08011625
 801159c:	0801164d 	.word	0x0801164d
 80115a0:	0801164d 	.word	0x0801164d
 80115a4:	0801164d 	.word	0x0801164d
 80115a8:	0801164d 	.word	0x0801164d
 80115ac:	0801164d 	.word	0x0801164d
 80115b0:	0801164d 	.word	0x0801164d
 80115b4:	0801164d 	.word	0x0801164d
 80115b8:	0801162d 	.word	0x0801162d
 80115bc:	0801164d 	.word	0x0801164d
 80115c0:	0801164d 	.word	0x0801164d
 80115c4:	0801164d 	.word	0x0801164d
 80115c8:	0801164d 	.word	0x0801164d
 80115cc:	0801164d 	.word	0x0801164d
 80115d0:	0801164d 	.word	0x0801164d
 80115d4:	0801164d 	.word	0x0801164d
 80115d8:	08011635 	.word	0x08011635
 80115dc:	0801164d 	.word	0x0801164d
 80115e0:	0801164d 	.word	0x0801164d
 80115e4:	0801164d 	.word	0x0801164d
 80115e8:	0801164d 	.word	0x0801164d
 80115ec:	0801164d 	.word	0x0801164d
 80115f0:	0801164d 	.word	0x0801164d
 80115f4:	0801164d 	.word	0x0801164d
 80115f8:	0801163d 	.word	0x0801163d
 80115fc:	0801164d 	.word	0x0801164d
 8011600:	0801164d 	.word	0x0801164d
 8011604:	0801164d 	.word	0x0801164d
 8011608:	0801164d 	.word	0x0801164d
 801160c:	0801164d 	.word	0x0801164d
 8011610:	0801164d 	.word	0x0801164d
 8011614:	0801164d 	.word	0x0801164d
 8011618:	08011645 	.word	0x08011645
 801161c:	2301      	movs	r3, #1
 801161e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011622:	e1c0      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011624:	2304      	movs	r3, #4
 8011626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801162a:	e1bc      	b.n	80119a6 <UART_SetConfig+0x7ae>
 801162c:	2308      	movs	r3, #8
 801162e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011632:	e1b8      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011634:	2310      	movs	r3, #16
 8011636:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801163a:	e1b4      	b.n	80119a6 <UART_SetConfig+0x7ae>
 801163c:	2320      	movs	r3, #32
 801163e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011642:	e1b0      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011644:	2340      	movs	r3, #64	; 0x40
 8011646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801164a:	e1ac      	b.n	80119a6 <UART_SetConfig+0x7ae>
 801164c:	2380      	movs	r3, #128	; 0x80
 801164e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011652:	e1a8      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011654:	697b      	ldr	r3, [r7, #20]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	4a75      	ldr	r2, [pc, #468]	; (8011830 <UART_SetConfig+0x638>)
 801165a:	4293      	cmp	r3, r2
 801165c:	d130      	bne.n	80116c0 <UART_SetConfig+0x4c8>
 801165e:	4b73      	ldr	r3, [pc, #460]	; (801182c <UART_SetConfig+0x634>)
 8011660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011662:	f003 0307 	and.w	r3, r3, #7
 8011666:	2b05      	cmp	r3, #5
 8011668:	d826      	bhi.n	80116b8 <UART_SetConfig+0x4c0>
 801166a:	a201      	add	r2, pc, #4	; (adr r2, 8011670 <UART_SetConfig+0x478>)
 801166c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011670:	08011689 	.word	0x08011689
 8011674:	08011691 	.word	0x08011691
 8011678:	08011699 	.word	0x08011699
 801167c:	080116a1 	.word	0x080116a1
 8011680:	080116a9 	.word	0x080116a9
 8011684:	080116b1 	.word	0x080116b1
 8011688:	2300      	movs	r3, #0
 801168a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801168e:	e18a      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011690:	2304      	movs	r3, #4
 8011692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011696:	e186      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011698:	2308      	movs	r3, #8
 801169a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801169e:	e182      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80116a0:	2310      	movs	r3, #16
 80116a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116a6:	e17e      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80116a8:	2320      	movs	r3, #32
 80116aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116ae:	e17a      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80116b0:	2340      	movs	r3, #64	; 0x40
 80116b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116b6:	e176      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80116b8:	2380      	movs	r3, #128	; 0x80
 80116ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116be:	e172      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80116c0:	697b      	ldr	r3, [r7, #20]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	4a5b      	ldr	r2, [pc, #364]	; (8011834 <UART_SetConfig+0x63c>)
 80116c6:	4293      	cmp	r3, r2
 80116c8:	d130      	bne.n	801172c <UART_SetConfig+0x534>
 80116ca:	4b58      	ldr	r3, [pc, #352]	; (801182c <UART_SetConfig+0x634>)
 80116cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80116ce:	f003 0307 	and.w	r3, r3, #7
 80116d2:	2b05      	cmp	r3, #5
 80116d4:	d826      	bhi.n	8011724 <UART_SetConfig+0x52c>
 80116d6:	a201      	add	r2, pc, #4	; (adr r2, 80116dc <UART_SetConfig+0x4e4>)
 80116d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116dc:	080116f5 	.word	0x080116f5
 80116e0:	080116fd 	.word	0x080116fd
 80116e4:	08011705 	.word	0x08011705
 80116e8:	0801170d 	.word	0x0801170d
 80116ec:	08011715 	.word	0x08011715
 80116f0:	0801171d 	.word	0x0801171d
 80116f4:	2300      	movs	r3, #0
 80116f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80116fa:	e154      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80116fc:	2304      	movs	r3, #4
 80116fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011702:	e150      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011704:	2308      	movs	r3, #8
 8011706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801170a:	e14c      	b.n	80119a6 <UART_SetConfig+0x7ae>
 801170c:	2310      	movs	r3, #16
 801170e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011712:	e148      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011714:	2320      	movs	r3, #32
 8011716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801171a:	e144      	b.n	80119a6 <UART_SetConfig+0x7ae>
 801171c:	2340      	movs	r3, #64	; 0x40
 801171e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011722:	e140      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011724:	2380      	movs	r3, #128	; 0x80
 8011726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801172a:	e13c      	b.n	80119a6 <UART_SetConfig+0x7ae>
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	4a41      	ldr	r2, [pc, #260]	; (8011838 <UART_SetConfig+0x640>)
 8011732:	4293      	cmp	r3, r2
 8011734:	f040 8082 	bne.w	801183c <UART_SetConfig+0x644>
 8011738:	4b3c      	ldr	r3, [pc, #240]	; (801182c <UART_SetConfig+0x634>)
 801173a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801173c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011740:	2b28      	cmp	r3, #40	; 0x28
 8011742:	d86d      	bhi.n	8011820 <UART_SetConfig+0x628>
 8011744:	a201      	add	r2, pc, #4	; (adr r2, 801174c <UART_SetConfig+0x554>)
 8011746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801174a:	bf00      	nop
 801174c:	080117f1 	.word	0x080117f1
 8011750:	08011821 	.word	0x08011821
 8011754:	08011821 	.word	0x08011821
 8011758:	08011821 	.word	0x08011821
 801175c:	08011821 	.word	0x08011821
 8011760:	08011821 	.word	0x08011821
 8011764:	08011821 	.word	0x08011821
 8011768:	08011821 	.word	0x08011821
 801176c:	080117f9 	.word	0x080117f9
 8011770:	08011821 	.word	0x08011821
 8011774:	08011821 	.word	0x08011821
 8011778:	08011821 	.word	0x08011821
 801177c:	08011821 	.word	0x08011821
 8011780:	08011821 	.word	0x08011821
 8011784:	08011821 	.word	0x08011821
 8011788:	08011821 	.word	0x08011821
 801178c:	08011801 	.word	0x08011801
 8011790:	08011821 	.word	0x08011821
 8011794:	08011821 	.word	0x08011821
 8011798:	08011821 	.word	0x08011821
 801179c:	08011821 	.word	0x08011821
 80117a0:	08011821 	.word	0x08011821
 80117a4:	08011821 	.word	0x08011821
 80117a8:	08011821 	.word	0x08011821
 80117ac:	08011809 	.word	0x08011809
 80117b0:	08011821 	.word	0x08011821
 80117b4:	08011821 	.word	0x08011821
 80117b8:	08011821 	.word	0x08011821
 80117bc:	08011821 	.word	0x08011821
 80117c0:	08011821 	.word	0x08011821
 80117c4:	08011821 	.word	0x08011821
 80117c8:	08011821 	.word	0x08011821
 80117cc:	08011811 	.word	0x08011811
 80117d0:	08011821 	.word	0x08011821
 80117d4:	08011821 	.word	0x08011821
 80117d8:	08011821 	.word	0x08011821
 80117dc:	08011821 	.word	0x08011821
 80117e0:	08011821 	.word	0x08011821
 80117e4:	08011821 	.word	0x08011821
 80117e8:	08011821 	.word	0x08011821
 80117ec:	08011819 	.word	0x08011819
 80117f0:	2301      	movs	r3, #1
 80117f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117f6:	e0d6      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80117f8:	2304      	movs	r3, #4
 80117fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80117fe:	e0d2      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011800:	2308      	movs	r3, #8
 8011802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011806:	e0ce      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011808:	2310      	movs	r3, #16
 801180a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801180e:	e0ca      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011810:	2320      	movs	r3, #32
 8011812:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011816:	e0c6      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011818:	2340      	movs	r3, #64	; 0x40
 801181a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801181e:	e0c2      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011820:	2380      	movs	r3, #128	; 0x80
 8011822:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011826:	e0be      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011828:	40011400 	.word	0x40011400
 801182c:	58024400 	.word	0x58024400
 8011830:	40007800 	.word	0x40007800
 8011834:	40007c00 	.word	0x40007c00
 8011838:	40011800 	.word	0x40011800
 801183c:	697b      	ldr	r3, [r7, #20]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	4aad      	ldr	r2, [pc, #692]	; (8011af8 <UART_SetConfig+0x900>)
 8011842:	4293      	cmp	r3, r2
 8011844:	d176      	bne.n	8011934 <UART_SetConfig+0x73c>
 8011846:	4bad      	ldr	r3, [pc, #692]	; (8011afc <UART_SetConfig+0x904>)
 8011848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801184a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801184e:	2b28      	cmp	r3, #40	; 0x28
 8011850:	d86c      	bhi.n	801192c <UART_SetConfig+0x734>
 8011852:	a201      	add	r2, pc, #4	; (adr r2, 8011858 <UART_SetConfig+0x660>)
 8011854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011858:	080118fd 	.word	0x080118fd
 801185c:	0801192d 	.word	0x0801192d
 8011860:	0801192d 	.word	0x0801192d
 8011864:	0801192d 	.word	0x0801192d
 8011868:	0801192d 	.word	0x0801192d
 801186c:	0801192d 	.word	0x0801192d
 8011870:	0801192d 	.word	0x0801192d
 8011874:	0801192d 	.word	0x0801192d
 8011878:	08011905 	.word	0x08011905
 801187c:	0801192d 	.word	0x0801192d
 8011880:	0801192d 	.word	0x0801192d
 8011884:	0801192d 	.word	0x0801192d
 8011888:	0801192d 	.word	0x0801192d
 801188c:	0801192d 	.word	0x0801192d
 8011890:	0801192d 	.word	0x0801192d
 8011894:	0801192d 	.word	0x0801192d
 8011898:	0801190d 	.word	0x0801190d
 801189c:	0801192d 	.word	0x0801192d
 80118a0:	0801192d 	.word	0x0801192d
 80118a4:	0801192d 	.word	0x0801192d
 80118a8:	0801192d 	.word	0x0801192d
 80118ac:	0801192d 	.word	0x0801192d
 80118b0:	0801192d 	.word	0x0801192d
 80118b4:	0801192d 	.word	0x0801192d
 80118b8:	08011915 	.word	0x08011915
 80118bc:	0801192d 	.word	0x0801192d
 80118c0:	0801192d 	.word	0x0801192d
 80118c4:	0801192d 	.word	0x0801192d
 80118c8:	0801192d 	.word	0x0801192d
 80118cc:	0801192d 	.word	0x0801192d
 80118d0:	0801192d 	.word	0x0801192d
 80118d4:	0801192d 	.word	0x0801192d
 80118d8:	0801191d 	.word	0x0801191d
 80118dc:	0801192d 	.word	0x0801192d
 80118e0:	0801192d 	.word	0x0801192d
 80118e4:	0801192d 	.word	0x0801192d
 80118e8:	0801192d 	.word	0x0801192d
 80118ec:	0801192d 	.word	0x0801192d
 80118f0:	0801192d 	.word	0x0801192d
 80118f4:	0801192d 	.word	0x0801192d
 80118f8:	08011925 	.word	0x08011925
 80118fc:	2301      	movs	r3, #1
 80118fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011902:	e050      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011904:	2304      	movs	r3, #4
 8011906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801190a:	e04c      	b.n	80119a6 <UART_SetConfig+0x7ae>
 801190c:	2308      	movs	r3, #8
 801190e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011912:	e048      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011914:	2310      	movs	r3, #16
 8011916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801191a:	e044      	b.n	80119a6 <UART_SetConfig+0x7ae>
 801191c:	2320      	movs	r3, #32
 801191e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011922:	e040      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011924:	2340      	movs	r3, #64	; 0x40
 8011926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801192a:	e03c      	b.n	80119a6 <UART_SetConfig+0x7ae>
 801192c:	2380      	movs	r3, #128	; 0x80
 801192e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011932:	e038      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011934:	697b      	ldr	r3, [r7, #20]
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	4a71      	ldr	r2, [pc, #452]	; (8011b00 <UART_SetConfig+0x908>)
 801193a:	4293      	cmp	r3, r2
 801193c:	d130      	bne.n	80119a0 <UART_SetConfig+0x7a8>
 801193e:	4b6f      	ldr	r3, [pc, #444]	; (8011afc <UART_SetConfig+0x904>)
 8011940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011942:	f003 0307 	and.w	r3, r3, #7
 8011946:	2b05      	cmp	r3, #5
 8011948:	d826      	bhi.n	8011998 <UART_SetConfig+0x7a0>
 801194a:	a201      	add	r2, pc, #4	; (adr r2, 8011950 <UART_SetConfig+0x758>)
 801194c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011950:	08011969 	.word	0x08011969
 8011954:	08011971 	.word	0x08011971
 8011958:	08011979 	.word	0x08011979
 801195c:	08011981 	.word	0x08011981
 8011960:	08011989 	.word	0x08011989
 8011964:	08011991 	.word	0x08011991
 8011968:	2302      	movs	r3, #2
 801196a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801196e:	e01a      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011970:	2304      	movs	r3, #4
 8011972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011976:	e016      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011978:	2308      	movs	r3, #8
 801197a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801197e:	e012      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011980:	2310      	movs	r3, #16
 8011982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011986:	e00e      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011988:	2320      	movs	r3, #32
 801198a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801198e:	e00a      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011990:	2340      	movs	r3, #64	; 0x40
 8011992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8011996:	e006      	b.n	80119a6 <UART_SetConfig+0x7ae>
 8011998:	2380      	movs	r3, #128	; 0x80
 801199a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801199e:	e002      	b.n	80119a6 <UART_SetConfig+0x7ae>
 80119a0:	2380      	movs	r3, #128	; 0x80
 80119a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	4a55      	ldr	r2, [pc, #340]	; (8011b00 <UART_SetConfig+0x908>)
 80119ac:	4293      	cmp	r3, r2
 80119ae:	f040 80f8 	bne.w	8011ba2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80119b2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80119b6:	2b20      	cmp	r3, #32
 80119b8:	dc46      	bgt.n	8011a48 <UART_SetConfig+0x850>
 80119ba:	2b02      	cmp	r3, #2
 80119bc:	db75      	blt.n	8011aaa <UART_SetConfig+0x8b2>
 80119be:	3b02      	subs	r3, #2
 80119c0:	2b1e      	cmp	r3, #30
 80119c2:	d872      	bhi.n	8011aaa <UART_SetConfig+0x8b2>
 80119c4:	a201      	add	r2, pc, #4	; (adr r2, 80119cc <UART_SetConfig+0x7d4>)
 80119c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80119ca:	bf00      	nop
 80119cc:	08011a4f 	.word	0x08011a4f
 80119d0:	08011aab 	.word	0x08011aab
 80119d4:	08011a57 	.word	0x08011a57
 80119d8:	08011aab 	.word	0x08011aab
 80119dc:	08011aab 	.word	0x08011aab
 80119e0:	08011aab 	.word	0x08011aab
 80119e4:	08011a67 	.word	0x08011a67
 80119e8:	08011aab 	.word	0x08011aab
 80119ec:	08011aab 	.word	0x08011aab
 80119f0:	08011aab 	.word	0x08011aab
 80119f4:	08011aab 	.word	0x08011aab
 80119f8:	08011aab 	.word	0x08011aab
 80119fc:	08011aab 	.word	0x08011aab
 8011a00:	08011aab 	.word	0x08011aab
 8011a04:	08011a77 	.word	0x08011a77
 8011a08:	08011aab 	.word	0x08011aab
 8011a0c:	08011aab 	.word	0x08011aab
 8011a10:	08011aab 	.word	0x08011aab
 8011a14:	08011aab 	.word	0x08011aab
 8011a18:	08011aab 	.word	0x08011aab
 8011a1c:	08011aab 	.word	0x08011aab
 8011a20:	08011aab 	.word	0x08011aab
 8011a24:	08011aab 	.word	0x08011aab
 8011a28:	08011aab 	.word	0x08011aab
 8011a2c:	08011aab 	.word	0x08011aab
 8011a30:	08011aab 	.word	0x08011aab
 8011a34:	08011aab 	.word	0x08011aab
 8011a38:	08011aab 	.word	0x08011aab
 8011a3c:	08011aab 	.word	0x08011aab
 8011a40:	08011aab 	.word	0x08011aab
 8011a44:	08011a9d 	.word	0x08011a9d
 8011a48:	2b40      	cmp	r3, #64	; 0x40
 8011a4a:	d02a      	beq.n	8011aa2 <UART_SetConfig+0x8aa>
 8011a4c:	e02d      	b.n	8011aaa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8011a4e:	f7fa febd 	bl	800c7cc <HAL_RCCEx_GetD3PCLK1Freq>
 8011a52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011a54:	e02f      	b.n	8011ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011a5a:	4618      	mov	r0, r3
 8011a5c:	f7fa fecc 	bl	800c7f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a64:	e027      	b.n	8011ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011a66:	f107 0318 	add.w	r3, r7, #24
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7fb f818 	bl	800caa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011a70:	69fb      	ldr	r3, [r7, #28]
 8011a72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a74:	e01f      	b.n	8011ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011a76:	4b21      	ldr	r3, [pc, #132]	; (8011afc <UART_SetConfig+0x904>)
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	f003 0320 	and.w	r3, r3, #32
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d009      	beq.n	8011a96 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011a82:	4b1e      	ldr	r3, [pc, #120]	; (8011afc <UART_SetConfig+0x904>)
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	08db      	lsrs	r3, r3, #3
 8011a88:	f003 0303 	and.w	r3, r3, #3
 8011a8c:	4a1d      	ldr	r2, [pc, #116]	; (8011b04 <UART_SetConfig+0x90c>)
 8011a8e:	fa22 f303 	lsr.w	r3, r2, r3
 8011a92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011a94:	e00f      	b.n	8011ab6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011a96:	4b1b      	ldr	r3, [pc, #108]	; (8011b04 <UART_SetConfig+0x90c>)
 8011a98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a9a:	e00c      	b.n	8011ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011a9c:	4b1a      	ldr	r3, [pc, #104]	; (8011b08 <UART_SetConfig+0x910>)
 8011a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011aa0:	e009      	b.n	8011ab6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011aa2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011aa8:	e005      	b.n	8011ab6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011aae:	2301      	movs	r3, #1
 8011ab0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011ab4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011ab6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	f000 81ee 	beq.w	8011e9a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011abe:	697b      	ldr	r3, [r7, #20]
 8011ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ac2:	4a12      	ldr	r2, [pc, #72]	; (8011b0c <UART_SetConfig+0x914>)
 8011ac4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011ac8:	461a      	mov	r2, r3
 8011aca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ad0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	685a      	ldr	r2, [r3, #4]
 8011ad6:	4613      	mov	r3, r2
 8011ad8:	005b      	lsls	r3, r3, #1
 8011ada:	4413      	add	r3, r2
 8011adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	d305      	bcc.n	8011aee <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8011ae2:	697b      	ldr	r3, [r7, #20]
 8011ae4:	685b      	ldr	r3, [r3, #4]
 8011ae6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011aea:	429a      	cmp	r2, r3
 8011aec:	d910      	bls.n	8011b10 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8011aee:	2301      	movs	r3, #1
 8011af0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011af4:	e1d1      	b.n	8011e9a <UART_SetConfig+0xca2>
 8011af6:	bf00      	nop
 8011af8:	40011c00 	.word	0x40011c00
 8011afc:	58024400 	.word	0x58024400
 8011b00:	58000c00 	.word	0x58000c00
 8011b04:	03d09000 	.word	0x03d09000
 8011b08:	003d0900 	.word	0x003d0900
 8011b0c:	08018c18 	.word	0x08018c18
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b12:	2200      	movs	r2, #0
 8011b14:	60bb      	str	r3, [r7, #8]
 8011b16:	60fa      	str	r2, [r7, #12]
 8011b18:	697b      	ldr	r3, [r7, #20]
 8011b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b1c:	4ac0      	ldr	r2, [pc, #768]	; (8011e20 <UART_SetConfig+0xc28>)
 8011b1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011b22:	b29b      	uxth	r3, r3
 8011b24:	2200      	movs	r2, #0
 8011b26:	603b      	str	r3, [r7, #0]
 8011b28:	607a      	str	r2, [r7, #4]
 8011b2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011b2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011b32:	f7ee fc55 	bl	80003e0 <__aeabi_uldivmod>
 8011b36:	4602      	mov	r2, r0
 8011b38:	460b      	mov	r3, r1
 8011b3a:	4610      	mov	r0, r2
 8011b3c:	4619      	mov	r1, r3
 8011b3e:	f04f 0200 	mov.w	r2, #0
 8011b42:	f04f 0300 	mov.w	r3, #0
 8011b46:	020b      	lsls	r3, r1, #8
 8011b48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011b4c:	0202      	lsls	r2, r0, #8
 8011b4e:	6979      	ldr	r1, [r7, #20]
 8011b50:	6849      	ldr	r1, [r1, #4]
 8011b52:	0849      	lsrs	r1, r1, #1
 8011b54:	2000      	movs	r0, #0
 8011b56:	460c      	mov	r4, r1
 8011b58:	4605      	mov	r5, r0
 8011b5a:	eb12 0804 	adds.w	r8, r2, r4
 8011b5e:	eb43 0905 	adc.w	r9, r3, r5
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	685b      	ldr	r3, [r3, #4]
 8011b66:	2200      	movs	r2, #0
 8011b68:	469a      	mov	sl, r3
 8011b6a:	4693      	mov	fp, r2
 8011b6c:	4652      	mov	r2, sl
 8011b6e:	465b      	mov	r3, fp
 8011b70:	4640      	mov	r0, r8
 8011b72:	4649      	mov	r1, r9
 8011b74:	f7ee fc34 	bl	80003e0 <__aeabi_uldivmod>
 8011b78:	4602      	mov	r2, r0
 8011b7a:	460b      	mov	r3, r1
 8011b7c:	4613      	mov	r3, r2
 8011b7e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011b86:	d308      	bcc.n	8011b9a <UART_SetConfig+0x9a2>
 8011b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011b8e:	d204      	bcs.n	8011b9a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8011b90:	697b      	ldr	r3, [r7, #20]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b96:	60da      	str	r2, [r3, #12]
 8011b98:	e17f      	b.n	8011e9a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011ba0:	e17b      	b.n	8011e9a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011ba2:	697b      	ldr	r3, [r7, #20]
 8011ba4:	69db      	ldr	r3, [r3, #28]
 8011ba6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011baa:	f040 80bd 	bne.w	8011d28 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8011bae:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011bb2:	2b20      	cmp	r3, #32
 8011bb4:	dc48      	bgt.n	8011c48 <UART_SetConfig+0xa50>
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	db7b      	blt.n	8011cb2 <UART_SetConfig+0xaba>
 8011bba:	2b20      	cmp	r3, #32
 8011bbc:	d879      	bhi.n	8011cb2 <UART_SetConfig+0xaba>
 8011bbe:	a201      	add	r2, pc, #4	; (adr r2, 8011bc4 <UART_SetConfig+0x9cc>)
 8011bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bc4:	08011c4f 	.word	0x08011c4f
 8011bc8:	08011c57 	.word	0x08011c57
 8011bcc:	08011cb3 	.word	0x08011cb3
 8011bd0:	08011cb3 	.word	0x08011cb3
 8011bd4:	08011c5f 	.word	0x08011c5f
 8011bd8:	08011cb3 	.word	0x08011cb3
 8011bdc:	08011cb3 	.word	0x08011cb3
 8011be0:	08011cb3 	.word	0x08011cb3
 8011be4:	08011c6f 	.word	0x08011c6f
 8011be8:	08011cb3 	.word	0x08011cb3
 8011bec:	08011cb3 	.word	0x08011cb3
 8011bf0:	08011cb3 	.word	0x08011cb3
 8011bf4:	08011cb3 	.word	0x08011cb3
 8011bf8:	08011cb3 	.word	0x08011cb3
 8011bfc:	08011cb3 	.word	0x08011cb3
 8011c00:	08011cb3 	.word	0x08011cb3
 8011c04:	08011c7f 	.word	0x08011c7f
 8011c08:	08011cb3 	.word	0x08011cb3
 8011c0c:	08011cb3 	.word	0x08011cb3
 8011c10:	08011cb3 	.word	0x08011cb3
 8011c14:	08011cb3 	.word	0x08011cb3
 8011c18:	08011cb3 	.word	0x08011cb3
 8011c1c:	08011cb3 	.word	0x08011cb3
 8011c20:	08011cb3 	.word	0x08011cb3
 8011c24:	08011cb3 	.word	0x08011cb3
 8011c28:	08011cb3 	.word	0x08011cb3
 8011c2c:	08011cb3 	.word	0x08011cb3
 8011c30:	08011cb3 	.word	0x08011cb3
 8011c34:	08011cb3 	.word	0x08011cb3
 8011c38:	08011cb3 	.word	0x08011cb3
 8011c3c:	08011cb3 	.word	0x08011cb3
 8011c40:	08011cb3 	.word	0x08011cb3
 8011c44:	08011ca5 	.word	0x08011ca5
 8011c48:	2b40      	cmp	r3, #64	; 0x40
 8011c4a:	d02e      	beq.n	8011caa <UART_SetConfig+0xab2>
 8011c4c:	e031      	b.n	8011cb2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011c4e:	f7f8 ff1f 	bl	800aa90 <HAL_RCC_GetPCLK1Freq>
 8011c52:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011c54:	e033      	b.n	8011cbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011c56:	f7f8 ff31 	bl	800aabc <HAL_RCC_GetPCLK2Freq>
 8011c5a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011c5c:	e02f      	b.n	8011cbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011c5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011c62:	4618      	mov	r0, r3
 8011c64:	f7fa fdc8 	bl	800c7f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c6c:	e027      	b.n	8011cbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011c6e:	f107 0318 	add.w	r3, r7, #24
 8011c72:	4618      	mov	r0, r3
 8011c74:	f7fa ff14 	bl	800caa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011c78:	69fb      	ldr	r3, [r7, #28]
 8011c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c7c:	e01f      	b.n	8011cbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011c7e:	4b69      	ldr	r3, [pc, #420]	; (8011e24 <UART_SetConfig+0xc2c>)
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	f003 0320 	and.w	r3, r3, #32
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d009      	beq.n	8011c9e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011c8a:	4b66      	ldr	r3, [pc, #408]	; (8011e24 <UART_SetConfig+0xc2c>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	08db      	lsrs	r3, r3, #3
 8011c90:	f003 0303 	and.w	r3, r3, #3
 8011c94:	4a64      	ldr	r2, [pc, #400]	; (8011e28 <UART_SetConfig+0xc30>)
 8011c96:	fa22 f303 	lsr.w	r3, r2, r3
 8011c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011c9c:	e00f      	b.n	8011cbe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8011c9e:	4b62      	ldr	r3, [pc, #392]	; (8011e28 <UART_SetConfig+0xc30>)
 8011ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ca2:	e00c      	b.n	8011cbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011ca4:	4b61      	ldr	r3, [pc, #388]	; (8011e2c <UART_SetConfig+0xc34>)
 8011ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ca8:	e009      	b.n	8011cbe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011cae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011cb0:	e005      	b.n	8011cbe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011cb6:	2301      	movs	r3, #1
 8011cb8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011cbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	f000 80ea 	beq.w	8011e9a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011cc6:	697b      	ldr	r3, [r7, #20]
 8011cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cca:	4a55      	ldr	r2, [pc, #340]	; (8011e20 <UART_SetConfig+0xc28>)
 8011ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011cd0:	461a      	mov	r2, r3
 8011cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011cd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8011cd8:	005a      	lsls	r2, r3, #1
 8011cda:	697b      	ldr	r3, [r7, #20]
 8011cdc:	685b      	ldr	r3, [r3, #4]
 8011cde:	085b      	lsrs	r3, r3, #1
 8011ce0:	441a      	add	r2, r3
 8011ce2:	697b      	ldr	r3, [r7, #20]
 8011ce4:	685b      	ldr	r3, [r3, #4]
 8011ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8011cea:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cee:	2b0f      	cmp	r3, #15
 8011cf0:	d916      	bls.n	8011d20 <UART_SetConfig+0xb28>
 8011cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011cf8:	d212      	bcs.n	8011d20 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cfc:	b29b      	uxth	r3, r3
 8011cfe:	f023 030f 	bic.w	r3, r3, #15
 8011d02:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d06:	085b      	lsrs	r3, r3, #1
 8011d08:	b29b      	uxth	r3, r3
 8011d0a:	f003 0307 	and.w	r3, r3, #7
 8011d0e:	b29a      	uxth	r2, r3
 8011d10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011d12:	4313      	orrs	r3, r2
 8011d14:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011d16:	697b      	ldr	r3, [r7, #20]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011d1c:	60da      	str	r2, [r3, #12]
 8011d1e:	e0bc      	b.n	8011e9a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011d20:	2301      	movs	r3, #1
 8011d22:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011d26:	e0b8      	b.n	8011e9a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011d28:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011d2c:	2b20      	cmp	r3, #32
 8011d2e:	dc4b      	bgt.n	8011dc8 <UART_SetConfig+0xbd0>
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	f2c0 8087 	blt.w	8011e44 <UART_SetConfig+0xc4c>
 8011d36:	2b20      	cmp	r3, #32
 8011d38:	f200 8084 	bhi.w	8011e44 <UART_SetConfig+0xc4c>
 8011d3c:	a201      	add	r2, pc, #4	; (adr r2, 8011d44 <UART_SetConfig+0xb4c>)
 8011d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d42:	bf00      	nop
 8011d44:	08011dcf 	.word	0x08011dcf
 8011d48:	08011dd7 	.word	0x08011dd7
 8011d4c:	08011e45 	.word	0x08011e45
 8011d50:	08011e45 	.word	0x08011e45
 8011d54:	08011ddf 	.word	0x08011ddf
 8011d58:	08011e45 	.word	0x08011e45
 8011d5c:	08011e45 	.word	0x08011e45
 8011d60:	08011e45 	.word	0x08011e45
 8011d64:	08011def 	.word	0x08011def
 8011d68:	08011e45 	.word	0x08011e45
 8011d6c:	08011e45 	.word	0x08011e45
 8011d70:	08011e45 	.word	0x08011e45
 8011d74:	08011e45 	.word	0x08011e45
 8011d78:	08011e45 	.word	0x08011e45
 8011d7c:	08011e45 	.word	0x08011e45
 8011d80:	08011e45 	.word	0x08011e45
 8011d84:	08011dff 	.word	0x08011dff
 8011d88:	08011e45 	.word	0x08011e45
 8011d8c:	08011e45 	.word	0x08011e45
 8011d90:	08011e45 	.word	0x08011e45
 8011d94:	08011e45 	.word	0x08011e45
 8011d98:	08011e45 	.word	0x08011e45
 8011d9c:	08011e45 	.word	0x08011e45
 8011da0:	08011e45 	.word	0x08011e45
 8011da4:	08011e45 	.word	0x08011e45
 8011da8:	08011e45 	.word	0x08011e45
 8011dac:	08011e45 	.word	0x08011e45
 8011db0:	08011e45 	.word	0x08011e45
 8011db4:	08011e45 	.word	0x08011e45
 8011db8:	08011e45 	.word	0x08011e45
 8011dbc:	08011e45 	.word	0x08011e45
 8011dc0:	08011e45 	.word	0x08011e45
 8011dc4:	08011e37 	.word	0x08011e37
 8011dc8:	2b40      	cmp	r3, #64	; 0x40
 8011dca:	d037      	beq.n	8011e3c <UART_SetConfig+0xc44>
 8011dcc:	e03a      	b.n	8011e44 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011dce:	f7f8 fe5f 	bl	800aa90 <HAL_RCC_GetPCLK1Freq>
 8011dd2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011dd4:	e03c      	b.n	8011e50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011dd6:	f7f8 fe71 	bl	800aabc <HAL_RCC_GetPCLK2Freq>
 8011dda:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011ddc:	e038      	b.n	8011e50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011de2:	4618      	mov	r0, r3
 8011de4:	f7fa fd08 	bl	800c7f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011dec:	e030      	b.n	8011e50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011dee:	f107 0318 	add.w	r3, r7, #24
 8011df2:	4618      	mov	r0, r3
 8011df4:	f7fa fe54 	bl	800caa0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011df8:	69fb      	ldr	r3, [r7, #28]
 8011dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011dfc:	e028      	b.n	8011e50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011dfe:	4b09      	ldr	r3, [pc, #36]	; (8011e24 <UART_SetConfig+0xc2c>)
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	f003 0320 	and.w	r3, r3, #32
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d012      	beq.n	8011e30 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011e0a:	4b06      	ldr	r3, [pc, #24]	; (8011e24 <UART_SetConfig+0xc2c>)
 8011e0c:	681b      	ldr	r3, [r3, #0]
 8011e0e:	08db      	lsrs	r3, r3, #3
 8011e10:	f003 0303 	and.w	r3, r3, #3
 8011e14:	4a04      	ldr	r2, [pc, #16]	; (8011e28 <UART_SetConfig+0xc30>)
 8011e16:	fa22 f303 	lsr.w	r3, r2, r3
 8011e1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011e1c:	e018      	b.n	8011e50 <UART_SetConfig+0xc58>
 8011e1e:	bf00      	nop
 8011e20:	08018c18 	.word	0x08018c18
 8011e24:	58024400 	.word	0x58024400
 8011e28:	03d09000 	.word	0x03d09000
 8011e2c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8011e30:	4b24      	ldr	r3, [pc, #144]	; (8011ec4 <UART_SetConfig+0xccc>)
 8011e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e34:	e00c      	b.n	8011e50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011e36:	4b24      	ldr	r3, [pc, #144]	; (8011ec8 <UART_SetConfig+0xcd0>)
 8011e38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e3a:	e009      	b.n	8011e50 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011e3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011e40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e42:	e005      	b.n	8011e50 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8011e44:	2300      	movs	r3, #0
 8011e46:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011e48:	2301      	movs	r3, #1
 8011e4a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011e4e:	bf00      	nop
    }

    if (pclk != 0U)
 8011e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d021      	beq.n	8011e9a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011e56:	697b      	ldr	r3, [r7, #20]
 8011e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e5a:	4a1c      	ldr	r2, [pc, #112]	; (8011ecc <UART_SetConfig+0xcd4>)
 8011e5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011e60:	461a      	mov	r2, r3
 8011e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e64:	fbb3 f2f2 	udiv	r2, r3, r2
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	685b      	ldr	r3, [r3, #4]
 8011e6c:	085b      	lsrs	r3, r3, #1
 8011e6e:	441a      	add	r2, r3
 8011e70:	697b      	ldr	r3, [r7, #20]
 8011e72:	685b      	ldr	r3, [r3, #4]
 8011e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e78:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e7c:	2b0f      	cmp	r3, #15
 8011e7e:	d909      	bls.n	8011e94 <UART_SetConfig+0xc9c>
 8011e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e86:	d205      	bcs.n	8011e94 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8011e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e8a:	b29a      	uxth	r2, r3
 8011e8c:	697b      	ldr	r3, [r7, #20]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	60da      	str	r2, [r3, #12]
 8011e92:	e002      	b.n	8011e9a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8011e94:	2301      	movs	r3, #1
 8011e96:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8011e9a:	697b      	ldr	r3, [r7, #20]
 8011e9c:	2201      	movs	r2, #1
 8011e9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011ea2:	697b      	ldr	r3, [r7, #20]
 8011ea4:	2201      	movs	r2, #1
 8011ea6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	2200      	movs	r2, #0
 8011eae:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8011eb0:	697b      	ldr	r3, [r7, #20]
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011eb6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011eba:	4618      	mov	r0, r3
 8011ebc:	3748      	adds	r7, #72	; 0x48
 8011ebe:	46bd      	mov	sp, r7
 8011ec0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011ec4:	03d09000 	.word	0x03d09000
 8011ec8:	003d0900 	.word	0x003d0900
 8011ecc:	08018c18 	.word	0x08018c18

08011ed0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011ed0:	b480      	push	{r7}
 8011ed2:	b083      	sub	sp, #12
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011edc:	f003 0301 	and.w	r3, r3, #1
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d00a      	beq.n	8011efa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	685b      	ldr	r3, [r3, #4]
 8011eea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	430a      	orrs	r2, r1
 8011ef8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011efe:	f003 0302 	and.w	r3, r3, #2
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d00a      	beq.n	8011f1c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	685b      	ldr	r3, [r3, #4]
 8011f0c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	430a      	orrs	r2, r1
 8011f1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f20:	f003 0304 	and.w	r3, r3, #4
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d00a      	beq.n	8011f3e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	685b      	ldr	r3, [r3, #4]
 8011f2e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	681b      	ldr	r3, [r3, #0]
 8011f3a:	430a      	orrs	r2, r1
 8011f3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f42:	f003 0308 	and.w	r3, r3, #8
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d00a      	beq.n	8011f60 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	685b      	ldr	r3, [r3, #4]
 8011f50:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	681b      	ldr	r3, [r3, #0]
 8011f5c:	430a      	orrs	r2, r1
 8011f5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f64:	f003 0310 	and.w	r3, r3, #16
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d00a      	beq.n	8011f82 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	689b      	ldr	r3, [r3, #8]
 8011f72:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	430a      	orrs	r2, r1
 8011f80:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f86:	f003 0320 	and.w	r3, r3, #32
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d00a      	beq.n	8011fa4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	689b      	ldr	r3, [r3, #8]
 8011f94:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	681b      	ldr	r3, [r3, #0]
 8011fa0:	430a      	orrs	r2, r1
 8011fa2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d01a      	beq.n	8011fe6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	685b      	ldr	r3, [r3, #4]
 8011fb6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	430a      	orrs	r2, r1
 8011fc4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011fca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011fce:	d10a      	bne.n	8011fe6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	685b      	ldr	r3, [r3, #4]
 8011fd6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	430a      	orrs	r2, r1
 8011fe4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d00a      	beq.n	8012008 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	685b      	ldr	r3, [r3, #4]
 8011ff8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	430a      	orrs	r2, r1
 8012006:	605a      	str	r2, [r3, #4]
  }
}
 8012008:	bf00      	nop
 801200a:	370c      	adds	r7, #12
 801200c:	46bd      	mov	sp, r7
 801200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012012:	4770      	bx	lr

08012014 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8012014:	b580      	push	{r7, lr}
 8012016:	b098      	sub	sp, #96	; 0x60
 8012018:	af02      	add	r7, sp, #8
 801201a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	2200      	movs	r2, #0
 8012020:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8012024:	f7f1 fe74 	bl	8003d10 <HAL_GetTick>
 8012028:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	681b      	ldr	r3, [r3, #0]
 8012030:	f003 0308 	and.w	r3, r3, #8
 8012034:	2b08      	cmp	r3, #8
 8012036:	d12f      	bne.n	8012098 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012038:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801203c:	9300      	str	r3, [sp, #0]
 801203e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012040:	2200      	movs	r2, #0
 8012042:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012046:	6878      	ldr	r0, [r7, #4]
 8012048:	f000 f88e 	bl	8012168 <UART_WaitOnFlagUntilTimeout>
 801204c:	4603      	mov	r3, r0
 801204e:	2b00      	cmp	r3, #0
 8012050:	d022      	beq.n	8012098 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801205a:	e853 3f00 	ldrex	r3, [r3]
 801205e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012062:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012066:	653b      	str	r3, [r7, #80]	; 0x50
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	461a      	mov	r2, r3
 801206e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012070:	647b      	str	r3, [r7, #68]	; 0x44
 8012072:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012074:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012076:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012078:	e841 2300 	strex	r3, r2, [r1]
 801207c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801207e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012080:	2b00      	cmp	r3, #0
 8012082:	d1e6      	bne.n	8012052 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	2220      	movs	r2, #32
 8012088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2200      	movs	r2, #0
 8012090:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012094:	2303      	movs	r3, #3
 8012096:	e063      	b.n	8012160 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	681b      	ldr	r3, [r3, #0]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	f003 0304 	and.w	r3, r3, #4
 80120a2:	2b04      	cmp	r3, #4
 80120a4:	d149      	bne.n	801213a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80120a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80120aa:	9300      	str	r3, [sp, #0]
 80120ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80120ae:	2200      	movs	r2, #0
 80120b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80120b4:	6878      	ldr	r0, [r7, #4]
 80120b6:	f000 f857 	bl	8012168 <UART_WaitOnFlagUntilTimeout>
 80120ba:	4603      	mov	r3, r0
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d03c      	beq.n	801213a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c8:	e853 3f00 	ldrex	r3, [r3]
 80120cc:	623b      	str	r3, [r7, #32]
   return(result);
 80120ce:	6a3b      	ldr	r3, [r7, #32]
 80120d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80120d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	461a      	mov	r2, r3
 80120dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80120de:	633b      	str	r3, [r7, #48]	; 0x30
 80120e0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80120e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80120e6:	e841 2300 	strex	r3, r2, [r1]
 80120ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80120ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d1e6      	bne.n	80120c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	3308      	adds	r3, #8
 80120f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120fa:	693b      	ldr	r3, [r7, #16]
 80120fc:	e853 3f00 	ldrex	r3, [r3]
 8012100:	60fb      	str	r3, [r7, #12]
   return(result);
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	f023 0301 	bic.w	r3, r3, #1
 8012108:	64bb      	str	r3, [r7, #72]	; 0x48
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	3308      	adds	r3, #8
 8012110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012112:	61fa      	str	r2, [r7, #28]
 8012114:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012116:	69b9      	ldr	r1, [r7, #24]
 8012118:	69fa      	ldr	r2, [r7, #28]
 801211a:	e841 2300 	strex	r3, r2, [r1]
 801211e:	617b      	str	r3, [r7, #20]
   return(result);
 8012120:	697b      	ldr	r3, [r7, #20]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d1e5      	bne.n	80120f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	2220      	movs	r2, #32
 801212a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	2200      	movs	r2, #0
 8012132:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012136:	2303      	movs	r3, #3
 8012138:	e012      	b.n	8012160 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801213a:	687b      	ldr	r3, [r7, #4]
 801213c:	2220      	movs	r2, #32
 801213e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	2220      	movs	r2, #32
 8012146:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	2200      	movs	r2, #0
 801214e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2200      	movs	r2, #0
 8012154:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	2200      	movs	r2, #0
 801215a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801215e:	2300      	movs	r3, #0
}
 8012160:	4618      	mov	r0, r3
 8012162:	3758      	adds	r7, #88	; 0x58
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}

08012168 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b084      	sub	sp, #16
 801216c:	af00      	add	r7, sp, #0
 801216e:	60f8      	str	r0, [r7, #12]
 8012170:	60b9      	str	r1, [r7, #8]
 8012172:	603b      	str	r3, [r7, #0]
 8012174:	4613      	mov	r3, r2
 8012176:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012178:	e049      	b.n	801220e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801217a:	69bb      	ldr	r3, [r7, #24]
 801217c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012180:	d045      	beq.n	801220e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012182:	f7f1 fdc5 	bl	8003d10 <HAL_GetTick>
 8012186:	4602      	mov	r2, r0
 8012188:	683b      	ldr	r3, [r7, #0]
 801218a:	1ad3      	subs	r3, r2, r3
 801218c:	69ba      	ldr	r2, [r7, #24]
 801218e:	429a      	cmp	r2, r3
 8012190:	d302      	bcc.n	8012198 <UART_WaitOnFlagUntilTimeout+0x30>
 8012192:	69bb      	ldr	r3, [r7, #24]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d101      	bne.n	801219c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8012198:	2303      	movs	r3, #3
 801219a:	e048      	b.n	801222e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	681b      	ldr	r3, [r3, #0]
 80121a2:	f003 0304 	and.w	r3, r3, #4
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d031      	beq.n	801220e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	69db      	ldr	r3, [r3, #28]
 80121b0:	f003 0308 	and.w	r3, r3, #8
 80121b4:	2b08      	cmp	r3, #8
 80121b6:	d110      	bne.n	80121da <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80121b8:	68fb      	ldr	r3, [r7, #12]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	2208      	movs	r2, #8
 80121be:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80121c0:	68f8      	ldr	r0, [r7, #12]
 80121c2:	f000 f839 	bl	8012238 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	2208      	movs	r2, #8
 80121ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	2200      	movs	r2, #0
 80121d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80121d6:	2301      	movs	r3, #1
 80121d8:	e029      	b.n	801222e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	69db      	ldr	r3, [r3, #28]
 80121e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80121e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80121e8:	d111      	bne.n	801220e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80121f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80121f4:	68f8      	ldr	r0, [r7, #12]
 80121f6:	f000 f81f 	bl	8012238 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80121fa:	68fb      	ldr	r3, [r7, #12]
 80121fc:	2220      	movs	r2, #32
 80121fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	2200      	movs	r2, #0
 8012206:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801220a:	2303      	movs	r3, #3
 801220c:	e00f      	b.n	801222e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	69da      	ldr	r2, [r3, #28]
 8012214:	68bb      	ldr	r3, [r7, #8]
 8012216:	4013      	ands	r3, r2
 8012218:	68ba      	ldr	r2, [r7, #8]
 801221a:	429a      	cmp	r2, r3
 801221c:	bf0c      	ite	eq
 801221e:	2301      	moveq	r3, #1
 8012220:	2300      	movne	r3, #0
 8012222:	b2db      	uxtb	r3, r3
 8012224:	461a      	mov	r2, r3
 8012226:	79fb      	ldrb	r3, [r7, #7]
 8012228:	429a      	cmp	r2, r3
 801222a:	d0a6      	beq.n	801217a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801222c:	2300      	movs	r3, #0
}
 801222e:	4618      	mov	r0, r3
 8012230:	3710      	adds	r7, #16
 8012232:	46bd      	mov	sp, r7
 8012234:	bd80      	pop	{r7, pc}
	...

08012238 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8012238:	b480      	push	{r7}
 801223a:	b095      	sub	sp, #84	; 0x54
 801223c:	af00      	add	r7, sp, #0
 801223e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	681b      	ldr	r3, [r3, #0]
 8012244:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012248:	e853 3f00 	ldrex	r3, [r3]
 801224c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801224e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012250:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012254:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	461a      	mov	r2, r3
 801225c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801225e:	643b      	str	r3, [r7, #64]	; 0x40
 8012260:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012262:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012264:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012266:	e841 2300 	strex	r3, r2, [r1]
 801226a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801226c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801226e:	2b00      	cmp	r3, #0
 8012270:	d1e6      	bne.n	8012240 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	3308      	adds	r3, #8
 8012278:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801227a:	6a3b      	ldr	r3, [r7, #32]
 801227c:	e853 3f00 	ldrex	r3, [r3]
 8012280:	61fb      	str	r3, [r7, #28]
   return(result);
 8012282:	69fa      	ldr	r2, [r7, #28]
 8012284:	4b1e      	ldr	r3, [pc, #120]	; (8012300 <UART_EndRxTransfer+0xc8>)
 8012286:	4013      	ands	r3, r2
 8012288:	64bb      	str	r3, [r7, #72]	; 0x48
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	3308      	adds	r3, #8
 8012290:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012292:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012294:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012296:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801229a:	e841 2300 	strex	r3, r2, [r1]
 801229e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80122a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d1e5      	bne.n	8012272 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80122aa:	2b01      	cmp	r3, #1
 80122ac:	d118      	bne.n	80122e0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	e853 3f00 	ldrex	r3, [r3]
 80122ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80122bc:	68bb      	ldr	r3, [r7, #8]
 80122be:	f023 0310 	bic.w	r3, r3, #16
 80122c2:	647b      	str	r3, [r7, #68]	; 0x44
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	681b      	ldr	r3, [r3, #0]
 80122c8:	461a      	mov	r2, r3
 80122ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122cc:	61bb      	str	r3, [r7, #24]
 80122ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122d0:	6979      	ldr	r1, [r7, #20]
 80122d2:	69ba      	ldr	r2, [r7, #24]
 80122d4:	e841 2300 	strex	r3, r2, [r1]
 80122d8:	613b      	str	r3, [r7, #16]
   return(result);
 80122da:	693b      	ldr	r3, [r7, #16]
 80122dc:	2b00      	cmp	r3, #0
 80122de:	d1e6      	bne.n	80122ae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80122e0:	687b      	ldr	r3, [r7, #4]
 80122e2:	2220      	movs	r2, #32
 80122e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2200      	movs	r2, #0
 80122ec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2200      	movs	r2, #0
 80122f2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80122f4:	bf00      	nop
 80122f6:	3754      	adds	r7, #84	; 0x54
 80122f8:	46bd      	mov	sp, r7
 80122fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122fe:	4770      	bx	lr
 8012300:	effffffe 	.word	0xeffffffe

08012304 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012304:	b480      	push	{r7}
 8012306:	b085      	sub	sp, #20
 8012308:	af00      	add	r7, sp, #0
 801230a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801230c:	687b      	ldr	r3, [r7, #4]
 801230e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012312:	2b01      	cmp	r3, #1
 8012314:	d101      	bne.n	801231a <HAL_UARTEx_DisableFifoMode+0x16>
 8012316:	2302      	movs	r3, #2
 8012318:	e027      	b.n	801236a <HAL_UARTEx_DisableFifoMode+0x66>
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	2201      	movs	r2, #1
 801231e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	2224      	movs	r2, #36	; 0x24
 8012326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	681b      	ldr	r3, [r3, #0]
 8012336:	681a      	ldr	r2, [r3, #0]
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	f022 0201 	bic.w	r2, r2, #1
 8012340:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012348:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	2200      	movs	r2, #0
 801234e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	68fa      	ldr	r2, [r7, #12]
 8012356:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	2220      	movs	r2, #32
 801235c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	2200      	movs	r2, #0
 8012364:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012368:	2300      	movs	r3, #0
}
 801236a:	4618      	mov	r0, r3
 801236c:	3714      	adds	r7, #20
 801236e:	46bd      	mov	sp, r7
 8012370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012374:	4770      	bx	lr

08012376 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012376:	b580      	push	{r7, lr}
 8012378:	b084      	sub	sp, #16
 801237a:	af00      	add	r7, sp, #0
 801237c:	6078      	str	r0, [r7, #4]
 801237e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012386:	2b01      	cmp	r3, #1
 8012388:	d101      	bne.n	801238e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801238a:	2302      	movs	r3, #2
 801238c:	e02d      	b.n	80123ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2201      	movs	r2, #1
 8012392:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	2224      	movs	r2, #36	; 0x24
 801239a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	681b      	ldr	r3, [r3, #0]
 80123a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	681a      	ldr	r2, [r3, #0]
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	f022 0201 	bic.w	r2, r2, #1
 80123b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	681b      	ldr	r3, [r3, #0]
 80123ba:	689b      	ldr	r3, [r3, #8]
 80123bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	683a      	ldr	r2, [r7, #0]
 80123c6:	430a      	orrs	r2, r1
 80123c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f000 f850 	bl	8012470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	68fa      	ldr	r2, [r7, #12]
 80123d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	2220      	movs	r2, #32
 80123dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	2200      	movs	r2, #0
 80123e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80123e8:	2300      	movs	r3, #0
}
 80123ea:	4618      	mov	r0, r3
 80123ec:	3710      	adds	r7, #16
 80123ee:	46bd      	mov	sp, r7
 80123f0:	bd80      	pop	{r7, pc}

080123f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80123f2:	b580      	push	{r7, lr}
 80123f4:	b084      	sub	sp, #16
 80123f6:	af00      	add	r7, sp, #0
 80123f8:	6078      	str	r0, [r7, #4]
 80123fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012402:	2b01      	cmp	r3, #1
 8012404:	d101      	bne.n	801240a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012406:	2302      	movs	r3, #2
 8012408:	e02d      	b.n	8012466 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	2201      	movs	r2, #1
 801240e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	2224      	movs	r2, #36	; 0x24
 8012416:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	681b      	ldr	r3, [r3, #0]
 8012426:	681a      	ldr	r2, [r3, #0]
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	f022 0201 	bic.w	r2, r2, #1
 8012430:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	689b      	ldr	r3, [r3, #8]
 8012438:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	683a      	ldr	r2, [r7, #0]
 8012442:	430a      	orrs	r2, r1
 8012444:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012446:	6878      	ldr	r0, [r7, #4]
 8012448:	f000 f812 	bl	8012470 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801244c:	687b      	ldr	r3, [r7, #4]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	68fa      	ldr	r2, [r7, #12]
 8012452:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	2220      	movs	r2, #32
 8012458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	2200      	movs	r2, #0
 8012460:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012464:	2300      	movs	r3, #0
}
 8012466:	4618      	mov	r0, r3
 8012468:	3710      	adds	r7, #16
 801246a:	46bd      	mov	sp, r7
 801246c:	bd80      	pop	{r7, pc}
	...

08012470 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012470:	b480      	push	{r7}
 8012472:	b085      	sub	sp, #20
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801247c:	2b00      	cmp	r3, #0
 801247e:	d108      	bne.n	8012492 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	2201      	movs	r2, #1
 8012484:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	2201      	movs	r2, #1
 801248c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8012490:	e031      	b.n	80124f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8012492:	2310      	movs	r3, #16
 8012494:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8012496:	2310      	movs	r3, #16
 8012498:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	689b      	ldr	r3, [r3, #8]
 80124a0:	0e5b      	lsrs	r3, r3, #25
 80124a2:	b2db      	uxtb	r3, r3
 80124a4:	f003 0307 	and.w	r3, r3, #7
 80124a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	689b      	ldr	r3, [r3, #8]
 80124b0:	0f5b      	lsrs	r3, r3, #29
 80124b2:	b2db      	uxtb	r3, r3
 80124b4:	f003 0307 	and.w	r3, r3, #7
 80124b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80124ba:	7bbb      	ldrb	r3, [r7, #14]
 80124bc:	7b3a      	ldrb	r2, [r7, #12]
 80124be:	4911      	ldr	r1, [pc, #68]	; (8012504 <UARTEx_SetNbDataToProcess+0x94>)
 80124c0:	5c8a      	ldrb	r2, [r1, r2]
 80124c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80124c6:	7b3a      	ldrb	r2, [r7, #12]
 80124c8:	490f      	ldr	r1, [pc, #60]	; (8012508 <UARTEx_SetNbDataToProcess+0x98>)
 80124ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80124cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80124d0:	b29a      	uxth	r2, r3
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80124d8:	7bfb      	ldrb	r3, [r7, #15]
 80124da:	7b7a      	ldrb	r2, [r7, #13]
 80124dc:	4909      	ldr	r1, [pc, #36]	; (8012504 <UARTEx_SetNbDataToProcess+0x94>)
 80124de:	5c8a      	ldrb	r2, [r1, r2]
 80124e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80124e4:	7b7a      	ldrb	r2, [r7, #13]
 80124e6:	4908      	ldr	r1, [pc, #32]	; (8012508 <UARTEx_SetNbDataToProcess+0x98>)
 80124e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80124ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80124ee:	b29a      	uxth	r2, r3
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80124f6:	bf00      	nop
 80124f8:	3714      	adds	r7, #20
 80124fa:	46bd      	mov	sp, r7
 80124fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012500:	4770      	bx	lr
 8012502:	bf00      	nop
 8012504:	08018c30 	.word	0x08018c30
 8012508:	08018c38 	.word	0x08018c38

0801250c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801250c:	b084      	sub	sp, #16
 801250e:	b480      	push	{r7}
 8012510:	b085      	sub	sp, #20
 8012512:	af00      	add	r7, sp, #0
 8012514:	6078      	str	r0, [r7, #4]
 8012516:	f107 001c 	add.w	r0, r7, #28
 801251a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801251e:	2300      	movs	r3, #0
 8012520:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8012522:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8012524:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8012526:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8012528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 801252a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 801252c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 801252e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8012532:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8012534:	68fa      	ldr	r2, [r7, #12]
 8012536:	4313      	orrs	r3, r2
 8012538:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	685a      	ldr	r2, [r3, #4]
 801253e:	4b07      	ldr	r3, [pc, #28]	; (801255c <SDMMC_Init+0x50>)
 8012540:	4013      	ands	r3, r2
 8012542:	68fa      	ldr	r2, [r7, #12]
 8012544:	431a      	orrs	r2, r3
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801254a:	2300      	movs	r3, #0
}
 801254c:	4618      	mov	r0, r3
 801254e:	3714      	adds	r7, #20
 8012550:	46bd      	mov	sp, r7
 8012552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012556:	b004      	add	sp, #16
 8012558:	4770      	bx	lr
 801255a:	bf00      	nop
 801255c:	ffc02c00 	.word	0xffc02c00

08012560 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8012560:	b480      	push	{r7}
 8012562:	b083      	sub	sp, #12
 8012564:	af00      	add	r7, sp, #0
 8012566:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801256e:	4618      	mov	r0, r3
 8012570:	370c      	adds	r7, #12
 8012572:	46bd      	mov	sp, r7
 8012574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012578:	4770      	bx	lr

0801257a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801257a:	b480      	push	{r7}
 801257c:	b083      	sub	sp, #12
 801257e:	af00      	add	r7, sp, #0
 8012580:	6078      	str	r0, [r7, #4]
 8012582:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8012584:	683b      	ldr	r3, [r7, #0]
 8012586:	681a      	ldr	r2, [r3, #0]
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801258e:	2300      	movs	r3, #0
}
 8012590:	4618      	mov	r0, r3
 8012592:	370c      	adds	r7, #12
 8012594:	46bd      	mov	sp, r7
 8012596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801259a:	4770      	bx	lr

0801259c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 801259c:	b480      	push	{r7}
 801259e:	b083      	sub	sp, #12
 80125a0:	af00      	add	r7, sp, #0
 80125a2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	f043 0203 	orr.w	r2, r3, #3
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80125b0:	2300      	movs	r3, #0
}
 80125b2:	4618      	mov	r0, r3
 80125b4:	370c      	adds	r7, #12
 80125b6:	46bd      	mov	sp, r7
 80125b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125bc:	4770      	bx	lr

080125be <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80125be:	b480      	push	{r7}
 80125c0:	b083      	sub	sp, #12
 80125c2:	af00      	add	r7, sp, #0
 80125c4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	f003 0303 	and.w	r3, r3, #3
}
 80125ce:	4618      	mov	r0, r3
 80125d0:	370c      	adds	r7, #12
 80125d2:	46bd      	mov	sp, r7
 80125d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d8:	4770      	bx	lr
	...

080125dc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80125dc:	b480      	push	{r7}
 80125de:	b085      	sub	sp, #20
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80125e6:	2300      	movs	r3, #0
 80125e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80125ea:	683b      	ldr	r3, [r7, #0]
 80125ec:	681a      	ldr	r2, [r3, #0]
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80125f2:	683b      	ldr	r3, [r7, #0]
 80125f4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80125fa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8012600:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012602:	683b      	ldr	r3, [r7, #0]
 8012604:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8012606:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8012608:	68fa      	ldr	r2, [r7, #12]
 801260a:	4313      	orrs	r3, r2
 801260c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	68da      	ldr	r2, [r3, #12]
 8012612:	4b06      	ldr	r3, [pc, #24]	; (801262c <SDMMC_SendCommand+0x50>)
 8012614:	4013      	ands	r3, r2
 8012616:	68fa      	ldr	r2, [r7, #12]
 8012618:	431a      	orrs	r2, r3
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801261e:	2300      	movs	r3, #0
}
 8012620:	4618      	mov	r0, r3
 8012622:	3714      	adds	r7, #20
 8012624:	46bd      	mov	sp, r7
 8012626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262a:	4770      	bx	lr
 801262c:	fffee0c0 	.word	0xfffee0c0

08012630 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8012630:	b480      	push	{r7}
 8012632:	b083      	sub	sp, #12
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	691b      	ldr	r3, [r3, #16]
 801263c:	b2db      	uxtb	r3, r3
}
 801263e:	4618      	mov	r0, r3
 8012640:	370c      	adds	r7, #12
 8012642:	46bd      	mov	sp, r7
 8012644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012648:	4770      	bx	lr

0801264a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801264a:	b480      	push	{r7}
 801264c:	b085      	sub	sp, #20
 801264e:	af00      	add	r7, sp, #0
 8012650:	6078      	str	r0, [r7, #4]
 8012652:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	3314      	adds	r3, #20
 8012658:	461a      	mov	r2, r3
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	4413      	add	r3, r2
 801265e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	681b      	ldr	r3, [r3, #0]
}
 8012664:	4618      	mov	r0, r3
 8012666:	3714      	adds	r7, #20
 8012668:	46bd      	mov	sp, r7
 801266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266e:	4770      	bx	lr

08012670 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8012670:	b480      	push	{r7}
 8012672:	b085      	sub	sp, #20
 8012674:	af00      	add	r7, sp, #0
 8012676:	6078      	str	r0, [r7, #4]
 8012678:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801267a:	2300      	movs	r3, #0
 801267c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801267e:	683b      	ldr	r3, [r7, #0]
 8012680:	681a      	ldr	r2, [r3, #0]
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8012686:	683b      	ldr	r3, [r7, #0]
 8012688:	685a      	ldr	r2, [r3, #4]
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 801268e:	683b      	ldr	r3, [r7, #0]
 8012690:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8012696:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 801269c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 80126a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 80126a4:	68fa      	ldr	r2, [r7, #12]
 80126a6:	4313      	orrs	r3, r2
 80126a8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80126b2:	68fb      	ldr	r3, [r7, #12]
 80126b4:	431a      	orrs	r2, r3
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80126ba:	2300      	movs	r3, #0

}
 80126bc:	4618      	mov	r0, r3
 80126be:	3714      	adds	r7, #20
 80126c0:	46bd      	mov	sp, r7
 80126c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c6:	4770      	bx	lr

080126c8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80126c8:	b580      	push	{r7, lr}
 80126ca:	b088      	sub	sp, #32
 80126cc:	af00      	add	r7, sp, #0
 80126ce:	6078      	str	r0, [r7, #4]
 80126d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80126d2:	683b      	ldr	r3, [r7, #0]
 80126d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80126d6:	2310      	movs	r3, #16
 80126d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80126da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80126de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80126e0:	2300      	movs	r3, #0
 80126e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80126e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80126e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80126ea:	f107 0308 	add.w	r3, r7, #8
 80126ee:	4619      	mov	r1, r3
 80126f0:	6878      	ldr	r0, [r7, #4]
 80126f2:	f7ff ff73 	bl	80125dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80126f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80126fa:	2110      	movs	r1, #16
 80126fc:	6878      	ldr	r0, [r7, #4]
 80126fe:	f000 fa5f 	bl	8012bc0 <SDMMC_GetCmdResp1>
 8012702:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012704:	69fb      	ldr	r3, [r7, #28]
}
 8012706:	4618      	mov	r0, r3
 8012708:	3720      	adds	r7, #32
 801270a:	46bd      	mov	sp, r7
 801270c:	bd80      	pop	{r7, pc}

0801270e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801270e:	b580      	push	{r7, lr}
 8012710:	b088      	sub	sp, #32
 8012712:	af00      	add	r7, sp, #0
 8012714:	6078      	str	r0, [r7, #4]
 8012716:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012718:	683b      	ldr	r3, [r7, #0]
 801271a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801271c:	2311      	movs	r3, #17
 801271e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012724:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012726:	2300      	movs	r3, #0
 8012728:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801272a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801272e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012730:	f107 0308 	add.w	r3, r7, #8
 8012734:	4619      	mov	r1, r3
 8012736:	6878      	ldr	r0, [r7, #4]
 8012738:	f7ff ff50 	bl	80125dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 801273c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012740:	2111      	movs	r1, #17
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f000 fa3c 	bl	8012bc0 <SDMMC_GetCmdResp1>
 8012748:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801274a:	69fb      	ldr	r3, [r7, #28]
}
 801274c:	4618      	mov	r0, r3
 801274e:	3720      	adds	r7, #32
 8012750:	46bd      	mov	sp, r7
 8012752:	bd80      	pop	{r7, pc}

08012754 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8012754:	b580      	push	{r7, lr}
 8012756:	b088      	sub	sp, #32
 8012758:	af00      	add	r7, sp, #0
 801275a:	6078      	str	r0, [r7, #4]
 801275c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801275e:	683b      	ldr	r3, [r7, #0]
 8012760:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012762:	2312      	movs	r3, #18
 8012764:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012766:	f44f 7380 	mov.w	r3, #256	; 0x100
 801276a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801276c:	2300      	movs	r3, #0
 801276e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012774:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012776:	f107 0308 	add.w	r3, r7, #8
 801277a:	4619      	mov	r1, r3
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f7ff ff2d 	bl	80125dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8012782:	f241 3288 	movw	r2, #5000	; 0x1388
 8012786:	2112      	movs	r1, #18
 8012788:	6878      	ldr	r0, [r7, #4]
 801278a:	f000 fa19 	bl	8012bc0 <SDMMC_GetCmdResp1>
 801278e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012790:	69fb      	ldr	r3, [r7, #28]
}
 8012792:	4618      	mov	r0, r3
 8012794:	3720      	adds	r7, #32
 8012796:	46bd      	mov	sp, r7
 8012798:	bd80      	pop	{r7, pc}

0801279a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801279a:	b580      	push	{r7, lr}
 801279c:	b088      	sub	sp, #32
 801279e:	af00      	add	r7, sp, #0
 80127a0:	6078      	str	r0, [r7, #4]
 80127a2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80127a4:	683b      	ldr	r3, [r7, #0]
 80127a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80127a8:	2318      	movs	r3, #24
 80127aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80127ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80127b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127b2:	2300      	movs	r3, #0
 80127b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80127ba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80127bc:	f107 0308 	add.w	r3, r7, #8
 80127c0:	4619      	mov	r1, r3
 80127c2:	6878      	ldr	r0, [r7, #4]
 80127c4:	f7ff ff0a 	bl	80125dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80127c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80127cc:	2118      	movs	r1, #24
 80127ce:	6878      	ldr	r0, [r7, #4]
 80127d0:	f000 f9f6 	bl	8012bc0 <SDMMC_GetCmdResp1>
 80127d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80127d6:	69fb      	ldr	r3, [r7, #28]
}
 80127d8:	4618      	mov	r0, r3
 80127da:	3720      	adds	r7, #32
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}

080127e0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 80127e0:	b580      	push	{r7, lr}
 80127e2:	b088      	sub	sp, #32
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
 80127e8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80127ee:	2319      	movs	r3, #25
 80127f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80127f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80127f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80127f8:	2300      	movs	r3, #0
 80127fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80127fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012800:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012802:	f107 0308 	add.w	r3, r7, #8
 8012806:	4619      	mov	r1, r3
 8012808:	6878      	ldr	r0, [r7, #4]
 801280a:	f7ff fee7 	bl	80125dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801280e:	f241 3288 	movw	r2, #5000	; 0x1388
 8012812:	2119      	movs	r1, #25
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f000 f9d3 	bl	8012bc0 <SDMMC_GetCmdResp1>
 801281a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801281c:	69fb      	ldr	r3, [r7, #28]
}
 801281e:	4618      	mov	r0, r3
 8012820:	3720      	adds	r7, #32
 8012822:	46bd      	mov	sp, r7
 8012824:	bd80      	pop	{r7, pc}
	...

08012828 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8012828:	b580      	push	{r7, lr}
 801282a:	b088      	sub	sp, #32
 801282c:	af00      	add	r7, sp, #0
 801282e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012830:	2300      	movs	r3, #0
 8012832:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012834:	230c      	movs	r3, #12
 8012836:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012838:	f44f 7380 	mov.w	r3, #256	; 0x100
 801283c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801283e:	2300      	movs	r3, #0
 8012840:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012846:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	68db      	ldr	r3, [r3, #12]
 801284c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8012850:	687b      	ldr	r3, [r7, #4]
 8012852:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	68db      	ldr	r3, [r3, #12]
 8012858:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012860:	f107 0308 	add.w	r3, r7, #8
 8012864:	4619      	mov	r1, r3
 8012866:	6878      	ldr	r0, [r7, #4]
 8012868:	f7ff feb8 	bl	80125dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 801286c:	4a0b      	ldr	r2, [pc, #44]	; (801289c <SDMMC_CmdStopTransfer+0x74>)
 801286e:	210c      	movs	r1, #12
 8012870:	6878      	ldr	r0, [r7, #4]
 8012872:	f000 f9a5 	bl	8012bc0 <SDMMC_GetCmdResp1>
 8012876:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	68db      	ldr	r3, [r3, #12]
 801287c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8012884:	69fb      	ldr	r3, [r7, #28]
 8012886:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801288a:	d101      	bne.n	8012890 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 801288c:	2300      	movs	r3, #0
 801288e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8012890:	69fb      	ldr	r3, [r7, #28]
}
 8012892:	4618      	mov	r0, r3
 8012894:	3720      	adds	r7, #32
 8012896:	46bd      	mov	sp, r7
 8012898:	bd80      	pop	{r7, pc}
 801289a:	bf00      	nop
 801289c:	05f5e100 	.word	0x05f5e100

080128a0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b088      	sub	sp, #32
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
 80128a8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80128aa:	683b      	ldr	r3, [r7, #0]
 80128ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80128ae:	2307      	movs	r3, #7
 80128b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80128b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80128b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80128b8:	2300      	movs	r3, #0
 80128ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80128bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80128c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80128c2:	f107 0308 	add.w	r3, r7, #8
 80128c6:	4619      	mov	r1, r3
 80128c8:	6878      	ldr	r0, [r7, #4]
 80128ca:	f7ff fe87 	bl	80125dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 80128ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80128d2:	2107      	movs	r1, #7
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f000 f973 	bl	8012bc0 <SDMMC_GetCmdResp1>
 80128da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80128dc:	69fb      	ldr	r3, [r7, #28]
}
 80128de:	4618      	mov	r0, r3
 80128e0:	3720      	adds	r7, #32
 80128e2:	46bd      	mov	sp, r7
 80128e4:	bd80      	pop	{r7, pc}

080128e6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 80128e6:	b580      	push	{r7, lr}
 80128e8:	b088      	sub	sp, #32
 80128ea:	af00      	add	r7, sp, #0
 80128ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80128ee:	2300      	movs	r3, #0
 80128f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80128f2:	2300      	movs	r3, #0
 80128f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 80128f6:	2300      	movs	r3, #0
 80128f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80128fa:	2300      	movs	r3, #0
 80128fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80128fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012902:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012904:	f107 0308 	add.w	r3, r7, #8
 8012908:	4619      	mov	r1, r3
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f7ff fe66 	bl	80125dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	f000 fb97 	bl	8013044 <SDMMC_GetCmdError>
 8012916:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012918:	69fb      	ldr	r3, [r7, #28]
}
 801291a:	4618      	mov	r0, r3
 801291c:	3720      	adds	r7, #32
 801291e:	46bd      	mov	sp, r7
 8012920:	bd80      	pop	{r7, pc}

08012922 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8012922:	b580      	push	{r7, lr}
 8012924:	b088      	sub	sp, #32
 8012926:	af00      	add	r7, sp, #0
 8012928:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801292a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801292e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8012930:	2308      	movs	r3, #8
 8012932:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012934:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012938:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801293a:	2300      	movs	r3, #0
 801293c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801293e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012942:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012944:	f107 0308 	add.w	r3, r7, #8
 8012948:	4619      	mov	r1, r3
 801294a:	6878      	ldr	r0, [r7, #4]
 801294c:	f7ff fe46 	bl	80125dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8012950:	6878      	ldr	r0, [r7, #4]
 8012952:	f000 fb29 	bl	8012fa8 <SDMMC_GetCmdResp7>
 8012956:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012958:	69fb      	ldr	r3, [r7, #28]
}
 801295a:	4618      	mov	r0, r3
 801295c:	3720      	adds	r7, #32
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}

08012962 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012962:	b580      	push	{r7, lr}
 8012964:	b088      	sub	sp, #32
 8012966:	af00      	add	r7, sp, #0
 8012968:	6078      	str	r0, [r7, #4]
 801296a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8012970:	2337      	movs	r3, #55	; 0x37
 8012972:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012978:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801297a:	2300      	movs	r3, #0
 801297c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801297e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012982:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012984:	f107 0308 	add.w	r3, r7, #8
 8012988:	4619      	mov	r1, r3
 801298a:	6878      	ldr	r0, [r7, #4]
 801298c:	f7ff fe26 	bl	80125dc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8012990:	f241 3288 	movw	r2, #5000	; 0x1388
 8012994:	2137      	movs	r1, #55	; 0x37
 8012996:	6878      	ldr	r0, [r7, #4]
 8012998:	f000 f912 	bl	8012bc0 <SDMMC_GetCmdResp1>
 801299c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801299e:	69fb      	ldr	r3, [r7, #28]
}
 80129a0:	4618      	mov	r0, r3
 80129a2:	3720      	adds	r7, #32
 80129a4:	46bd      	mov	sp, r7
 80129a6:	bd80      	pop	{r7, pc}

080129a8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b088      	sub	sp, #32
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
 80129b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80129b2:	683b      	ldr	r3, [r7, #0]
 80129b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80129b6:	2329      	movs	r3, #41	; 0x29
 80129b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80129ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80129be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80129c0:	2300      	movs	r3, #0
 80129c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80129c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80129c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80129ca:	f107 0308 	add.w	r3, r7, #8
 80129ce:	4619      	mov	r1, r3
 80129d0:	6878      	ldr	r0, [r7, #4]
 80129d2:	f7ff fe03 	bl	80125dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 80129d6:	6878      	ldr	r0, [r7, #4]
 80129d8:	f000 fa2e 	bl	8012e38 <SDMMC_GetCmdResp3>
 80129dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80129de:	69fb      	ldr	r3, [r7, #28]
}
 80129e0:	4618      	mov	r0, r3
 80129e2:	3720      	adds	r7, #32
 80129e4:	46bd      	mov	sp, r7
 80129e6:	bd80      	pop	{r7, pc}

080129e8 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 80129e8:	b580      	push	{r7, lr}
 80129ea:	b088      	sub	sp, #32
 80129ec:	af00      	add	r7, sp, #0
 80129ee:	6078      	str	r0, [r7, #4]
 80129f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80129f2:	683b      	ldr	r3, [r7, #0]
 80129f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80129f6:	2306      	movs	r3, #6
 80129f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80129fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80129fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a00:	2300      	movs	r3, #0
 8012a02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a08:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a0a:	f107 0308 	add.w	r3, r7, #8
 8012a0e:	4619      	mov	r1, r3
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f7ff fde3 	bl	80125dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8012a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a1a:	2106      	movs	r1, #6
 8012a1c:	6878      	ldr	r0, [r7, #4]
 8012a1e:	f000 f8cf 	bl	8012bc0 <SDMMC_GetCmdResp1>
 8012a22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a24:	69fb      	ldr	r3, [r7, #28]
}
 8012a26:	4618      	mov	r0, r3
 8012a28:	3720      	adds	r7, #32
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}

08012a2e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8012a2e:	b580      	push	{r7, lr}
 8012a30:	b088      	sub	sp, #32
 8012a32:	af00      	add	r7, sp, #0
 8012a34:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8012a36:	2300      	movs	r3, #0
 8012a38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8012a3a:	2333      	movs	r3, #51	; 0x33
 8012a3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012a3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012a42:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a44:	2300      	movs	r3, #0
 8012a46:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a4c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a4e:	f107 0308 	add.w	r3, r7, #8
 8012a52:	4619      	mov	r1, r3
 8012a54:	6878      	ldr	r0, [r7, #4]
 8012a56:	f7ff fdc1 	bl	80125dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8012a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8012a5e:	2133      	movs	r1, #51	; 0x33
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f000 f8ad 	bl	8012bc0 <SDMMC_GetCmdResp1>
 8012a66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012a68:	69fb      	ldr	r3, [r7, #28]
}
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	3720      	adds	r7, #32
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	bd80      	pop	{r7, pc}

08012a72 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8012a72:	b580      	push	{r7, lr}
 8012a74:	b088      	sub	sp, #32
 8012a76:	af00      	add	r7, sp, #0
 8012a78:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8012a7e:	2302      	movs	r3, #2
 8012a80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012a82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012a86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012a88:	2300      	movs	r3, #0
 8012a8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012a8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012a90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012a92:	f107 0308 	add.w	r3, r7, #8
 8012a96:	4619      	mov	r1, r3
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	f7ff fd9f 	bl	80125dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012a9e:	6878      	ldr	r0, [r7, #4]
 8012aa0:	f000 f980 	bl	8012da4 <SDMMC_GetCmdResp2>
 8012aa4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012aa6:	69fb      	ldr	r3, [r7, #28]
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3720      	adds	r7, #32
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}

08012ab0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b088      	sub	sp, #32
 8012ab4:	af00      	add	r7, sp, #0
 8012ab6:	6078      	str	r0, [r7, #4]
 8012ab8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8012aba:	683b      	ldr	r3, [r7, #0]
 8012abc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8012abe:	2309      	movs	r3, #9
 8012ac0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8012ac2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012ac6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012ac8:	2300      	movs	r3, #0
 8012aca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ad0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012ad2:	f107 0308 	add.w	r3, r7, #8
 8012ad6:	4619      	mov	r1, r3
 8012ad8:	6878      	ldr	r0, [r7, #4]
 8012ada:	f7ff fd7f 	bl	80125dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8012ade:	6878      	ldr	r0, [r7, #4]
 8012ae0:	f000 f960 	bl	8012da4 <SDMMC_GetCmdResp2>
 8012ae4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ae6:	69fb      	ldr	r3, [r7, #28]
}
 8012ae8:	4618      	mov	r0, r3
 8012aea:	3720      	adds	r7, #32
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}

08012af0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b088      	sub	sp, #32
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
 8012af8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8012afa:	2300      	movs	r3, #0
 8012afc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8012afe:	2303      	movs	r3, #3
 8012b00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b08:	2300      	movs	r3, #0
 8012b0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b10:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b12:	f107 0308 	add.w	r3, r7, #8
 8012b16:	4619      	mov	r1, r3
 8012b18:	6878      	ldr	r0, [r7, #4]
 8012b1a:	f7ff fd5f 	bl	80125dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8012b1e:	683a      	ldr	r2, [r7, #0]
 8012b20:	2103      	movs	r1, #3
 8012b22:	6878      	ldr	r0, [r7, #4]
 8012b24:	f000 f9c8 	bl	8012eb8 <SDMMC_GetCmdResp6>
 8012b28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b2a:	69fb      	ldr	r3, [r7, #28]
}
 8012b2c:	4618      	mov	r0, r3
 8012b2e:	3720      	adds	r7, #32
 8012b30:	46bd      	mov	sp, r7
 8012b32:	bd80      	pop	{r7, pc}

08012b34 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b088      	sub	sp, #32
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	6078      	str	r0, [r7, #4]
 8012b3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8012b3e:	683b      	ldr	r3, [r7, #0]
 8012b40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8012b42:	230d      	movs	r3, #13
 8012b44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b56:	f107 0308 	add.w	r3, r7, #8
 8012b5a:	4619      	mov	r1, r3
 8012b5c:	6878      	ldr	r0, [r7, #4]
 8012b5e:	f7ff fd3d 	bl	80125dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8012b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8012b66:	210d      	movs	r1, #13
 8012b68:	6878      	ldr	r0, [r7, #4]
 8012b6a:	f000 f829 	bl	8012bc0 <SDMMC_GetCmdResp1>
 8012b6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012b70:	69fb      	ldr	r3, [r7, #28]
}
 8012b72:	4618      	mov	r0, r3
 8012b74:	3720      	adds	r7, #32
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}

08012b7a <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8012b7a:	b580      	push	{r7, lr}
 8012b7c:	b088      	sub	sp, #32
 8012b7e:	af00      	add	r7, sp, #0
 8012b80:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8012b82:	2300      	movs	r3, #0
 8012b84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8012b86:	230d      	movs	r3, #13
 8012b88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8012b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012b8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8012b90:	2300      	movs	r3, #0
 8012b92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8012b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012b98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8012b9a:	f107 0308 	add.w	r3, r7, #8
 8012b9e:	4619      	mov	r1, r3
 8012ba0:	6878      	ldr	r0, [r7, #4]
 8012ba2:	f7ff fd1b 	bl	80125dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8012ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8012baa:	210d      	movs	r1, #13
 8012bac:	6878      	ldr	r0, [r7, #4]
 8012bae:	f000 f807 	bl	8012bc0 <SDMMC_GetCmdResp1>
 8012bb2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012bb4:	69fb      	ldr	r3, [r7, #28]
}
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	3720      	adds	r7, #32
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}
	...

08012bc0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b088      	sub	sp, #32
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	60f8      	str	r0, [r7, #12]
 8012bc8:	460b      	mov	r3, r1
 8012bca:	607a      	str	r2, [r7, #4]
 8012bcc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8012bce:	4b70      	ldr	r3, [pc, #448]	; (8012d90 <SDMMC_GetCmdResp1+0x1d0>)
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	4a70      	ldr	r2, [pc, #448]	; (8012d94 <SDMMC_GetCmdResp1+0x1d4>)
 8012bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8012bd8:	0a5a      	lsrs	r2, r3, #9
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	fb02 f303 	mul.w	r3, r2, r3
 8012be0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012be2:	69fb      	ldr	r3, [r7, #28]
 8012be4:	1e5a      	subs	r2, r3, #1
 8012be6:	61fa      	str	r2, [r7, #28]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d102      	bne.n	8012bf2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012bec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012bf0:	e0c9      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012bf6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8012bf8:	69ba      	ldr	r2, [r7, #24]
 8012bfa:	4b67      	ldr	r3, [pc, #412]	; (8012d98 <SDMMC_GetCmdResp1+0x1d8>)
 8012bfc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d0ef      	beq.n	8012be2 <SDMMC_GetCmdResp1+0x22>
 8012c02:	69bb      	ldr	r3, [r7, #24]
 8012c04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d1ea      	bne.n	8012be2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012c0c:	68fb      	ldr	r3, [r7, #12]
 8012c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c10:	f003 0304 	and.w	r3, r3, #4
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d004      	beq.n	8012c22 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	2204      	movs	r2, #4
 8012c1c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012c1e:	2304      	movs	r3, #4
 8012c20:	e0b1      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012c26:	f003 0301 	and.w	r3, r3, #1
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d004      	beq.n	8012c38 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	2201      	movs	r2, #1
 8012c32:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c34:	2301      	movs	r3, #1
 8012c36:	e0a6      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	4a58      	ldr	r2, [pc, #352]	; (8012d9c <SDMMC_GetCmdResp1+0x1dc>)
 8012c3c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012c3e:	68f8      	ldr	r0, [r7, #12]
 8012c40:	f7ff fcf6 	bl	8012630 <SDMMC_GetCommandResponse>
 8012c44:	4603      	mov	r3, r0
 8012c46:	461a      	mov	r2, r3
 8012c48:	7afb      	ldrb	r3, [r7, #11]
 8012c4a:	4293      	cmp	r3, r2
 8012c4c:	d001      	beq.n	8012c52 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012c4e:	2301      	movs	r3, #1
 8012c50:	e099      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012c52:	2100      	movs	r1, #0
 8012c54:	68f8      	ldr	r0, [r7, #12]
 8012c56:	f7ff fcf8 	bl	801264a <SDMMC_GetResponse>
 8012c5a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8012c5c:	697a      	ldr	r2, [r7, #20]
 8012c5e:	4b50      	ldr	r3, [pc, #320]	; (8012da0 <SDMMC_GetCmdResp1+0x1e0>)
 8012c60:	4013      	ands	r3, r2
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d101      	bne.n	8012c6a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012c66:	2300      	movs	r3, #0
 8012c68:	e08d      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	da02      	bge.n	8012c76 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012c70:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012c74:	e087      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012c76:	697b      	ldr	r3, [r7, #20]
 8012c78:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d001      	beq.n	8012c84 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012c80:	2340      	movs	r3, #64	; 0x40
 8012c82:	e080      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012c84:	697b      	ldr	r3, [r7, #20]
 8012c86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d001      	beq.n	8012c92 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8012c8e:	2380      	movs	r3, #128	; 0x80
 8012c90:	e079      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012c92:	697b      	ldr	r3, [r7, #20]
 8012c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d002      	beq.n	8012ca2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8012c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012ca0:	e071      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012ca2:	697b      	ldr	r3, [r7, #20]
 8012ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	d002      	beq.n	8012cb2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8012cac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012cb0:	e069      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012cb2:	697b      	ldr	r3, [r7, #20]
 8012cb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d002      	beq.n	8012cc2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8012cbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012cc0:	e061      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012cc2:	697b      	ldr	r3, [r7, #20]
 8012cc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d002      	beq.n	8012cd2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8012ccc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012cd0:	e059      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012cd2:	697b      	ldr	r3, [r7, #20]
 8012cd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d002      	beq.n	8012ce2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012cdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012ce0:	e051      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012ce2:	697b      	ldr	r3, [r7, #20]
 8012ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d002      	beq.n	8012cf2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012cec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012cf0:	e049      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d002      	beq.n	8012d02 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8012cfc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012d00:	e041      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8012d02:	697b      	ldr	r3, [r7, #20]
 8012d04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d002      	beq.n	8012d12 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8012d0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012d10:	e039      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8012d12:	697b      	ldr	r3, [r7, #20]
 8012d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d002      	beq.n	8012d22 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8012d1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8012d20:	e031      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8012d22:	697b      	ldr	r3, [r7, #20]
 8012d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d002      	beq.n	8012d32 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8012d2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012d30:	e029      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8012d32:	697b      	ldr	r3, [r7, #20]
 8012d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d002      	beq.n	8012d42 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8012d3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8012d40:	e021      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d002      	beq.n	8012d52 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8012d4c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8012d50:	e019      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d002      	beq.n	8012d62 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8012d5c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012d60:	e011      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012d62:	697b      	ldr	r3, [r7, #20]
 8012d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d002      	beq.n	8012d72 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8012d6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012d70:	e009      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012d72:	697b      	ldr	r3, [r7, #20]
 8012d74:	f003 0308 	and.w	r3, r3, #8
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d002      	beq.n	8012d82 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8012d7c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012d80:	e001      	b.n	8012d86 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012d82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012d86:	4618      	mov	r0, r3
 8012d88:	3720      	adds	r7, #32
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	bd80      	pop	{r7, pc}
 8012d8e:	bf00      	nop
 8012d90:	24000000 	.word	0x24000000
 8012d94:	10624dd3 	.word	0x10624dd3
 8012d98:	00200045 	.word	0x00200045
 8012d9c:	002000c5 	.word	0x002000c5
 8012da0:	fdffe008 	.word	0xfdffe008

08012da4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012da4:	b480      	push	{r7}
 8012da6:	b085      	sub	sp, #20
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012dac:	4b1f      	ldr	r3, [pc, #124]	; (8012e2c <SDMMC_GetCmdResp2+0x88>)
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	4a1f      	ldr	r2, [pc, #124]	; (8012e30 <SDMMC_GetCmdResp2+0x8c>)
 8012db2:	fba2 2303 	umull	r2, r3, r2, r3
 8012db6:	0a5b      	lsrs	r3, r3, #9
 8012db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8012dbc:	fb02 f303 	mul.w	r3, r2, r3
 8012dc0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	1e5a      	subs	r2, r3, #1
 8012dc6:	60fa      	str	r2, [r7, #12]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d102      	bne.n	8012dd2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012dcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012dd0:	e026      	b.n	8012e20 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012dd6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012dd8:	68bb      	ldr	r3, [r7, #8]
 8012dda:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012dde:	2b00      	cmp	r3, #0
 8012de0:	d0ef      	beq.n	8012dc2 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d1ea      	bne.n	8012dc2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012df0:	f003 0304 	and.w	r3, r3, #4
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d004      	beq.n	8012e02 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	2204      	movs	r2, #4
 8012dfc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012dfe:	2304      	movs	r3, #4
 8012e00:	e00e      	b.n	8012e20 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e06:	f003 0301 	and.w	r3, r3, #1
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d004      	beq.n	8012e18 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	2201      	movs	r2, #1
 8012e12:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012e14:	2301      	movs	r3, #1
 8012e16:	e003      	b.n	8012e20 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	4a06      	ldr	r2, [pc, #24]	; (8012e34 <SDMMC_GetCmdResp2+0x90>)
 8012e1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012e1e:	2300      	movs	r3, #0
}
 8012e20:	4618      	mov	r0, r3
 8012e22:	3714      	adds	r7, #20
 8012e24:	46bd      	mov	sp, r7
 8012e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e2a:	4770      	bx	lr
 8012e2c:	24000000 	.word	0x24000000
 8012e30:	10624dd3 	.word	0x10624dd3
 8012e34:	002000c5 	.word	0x002000c5

08012e38 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8012e38:	b480      	push	{r7}
 8012e3a:	b085      	sub	sp, #20
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012e40:	4b1a      	ldr	r3, [pc, #104]	; (8012eac <SDMMC_GetCmdResp3+0x74>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	4a1a      	ldr	r2, [pc, #104]	; (8012eb0 <SDMMC_GetCmdResp3+0x78>)
 8012e46:	fba2 2303 	umull	r2, r3, r2, r3
 8012e4a:	0a5b      	lsrs	r3, r3, #9
 8012e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e50:	fb02 f303 	mul.w	r3, r2, r3
 8012e54:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	1e5a      	subs	r2, r3, #1
 8012e5a:	60fa      	str	r2, [r7, #12]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d102      	bne.n	8012e66 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012e60:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012e64:	e01b      	b.n	8012e9e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e6a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012e6c:	68bb      	ldr	r3, [r7, #8]
 8012e6e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d0ef      	beq.n	8012e56 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012e76:	68bb      	ldr	r3, [r7, #8]
 8012e78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d1ea      	bne.n	8012e56 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e84:	f003 0304 	and.w	r3, r3, #4
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d004      	beq.n	8012e96 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	2204      	movs	r2, #4
 8012e90:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012e92:	2304      	movs	r3, #4
 8012e94:	e003      	b.n	8012e9e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	4a06      	ldr	r2, [pc, #24]	; (8012eb4 <SDMMC_GetCmdResp3+0x7c>)
 8012e9a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8012e9c:	2300      	movs	r3, #0
}
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	3714      	adds	r7, #20
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea8:	4770      	bx	lr
 8012eaa:	bf00      	nop
 8012eac:	24000000 	.word	0x24000000
 8012eb0:	10624dd3 	.word	0x10624dd3
 8012eb4:	002000c5 	.word	0x002000c5

08012eb8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b088      	sub	sp, #32
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	60f8      	str	r0, [r7, #12]
 8012ec0:	460b      	mov	r3, r1
 8012ec2:	607a      	str	r2, [r7, #4]
 8012ec4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012ec6:	4b35      	ldr	r3, [pc, #212]	; (8012f9c <SDMMC_GetCmdResp6+0xe4>)
 8012ec8:	681b      	ldr	r3, [r3, #0]
 8012eca:	4a35      	ldr	r2, [pc, #212]	; (8012fa0 <SDMMC_GetCmdResp6+0xe8>)
 8012ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8012ed0:	0a5b      	lsrs	r3, r3, #9
 8012ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ed6:	fb02 f303 	mul.w	r3, r2, r3
 8012eda:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8012edc:	69fb      	ldr	r3, [r7, #28]
 8012ede:	1e5a      	subs	r2, r3, #1
 8012ee0:	61fa      	str	r2, [r7, #28]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d102      	bne.n	8012eec <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012ee6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012eea:	e052      	b.n	8012f92 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ef0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012ef2:	69bb      	ldr	r3, [r7, #24]
 8012ef4:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d0ef      	beq.n	8012edc <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012efc:	69bb      	ldr	r3, [r7, #24]
 8012efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d1ea      	bne.n	8012edc <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f0a:	f003 0304 	and.w	r3, r3, #4
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d004      	beq.n	8012f1c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	2204      	movs	r2, #4
 8012f16:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012f18:	2304      	movs	r3, #4
 8012f1a:	e03a      	b.n	8012f92 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f20:	f003 0301 	and.w	r3, r3, #1
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d004      	beq.n	8012f32 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	2201      	movs	r2, #1
 8012f2c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012f2e:	2301      	movs	r3, #1
 8012f30:	e02f      	b.n	8012f92 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8012f32:	68f8      	ldr	r0, [r7, #12]
 8012f34:	f7ff fb7c 	bl	8012630 <SDMMC_GetCommandResponse>
 8012f38:	4603      	mov	r3, r0
 8012f3a:	461a      	mov	r2, r3
 8012f3c:	7afb      	ldrb	r3, [r7, #11]
 8012f3e:	4293      	cmp	r3, r2
 8012f40:	d001      	beq.n	8012f46 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8012f42:	2301      	movs	r3, #1
 8012f44:	e025      	b.n	8012f92 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	4a16      	ldr	r2, [pc, #88]	; (8012fa4 <SDMMC_GetCmdResp6+0xec>)
 8012f4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8012f4c:	2100      	movs	r1, #0
 8012f4e:	68f8      	ldr	r0, [r7, #12]
 8012f50:	f7ff fb7b 	bl	801264a <SDMMC_GetResponse>
 8012f54:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8012f56:	697b      	ldr	r3, [r7, #20]
 8012f58:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d106      	bne.n	8012f6e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8012f60:	697b      	ldr	r3, [r7, #20]
 8012f62:	0c1b      	lsrs	r3, r3, #16
 8012f64:	b29a      	uxth	r2, r3
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	e011      	b.n	8012f92 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8012f6e:	697b      	ldr	r3, [r7, #20]
 8012f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d002      	beq.n	8012f7e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012f7c:	e009      	b.n	8012f92 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8012f7e:	697b      	ldr	r3, [r7, #20]
 8012f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d002      	beq.n	8012f8e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f8c:	e001      	b.n	8012f92 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012f8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012f92:	4618      	mov	r0, r3
 8012f94:	3720      	adds	r7, #32
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}
 8012f9a:	bf00      	nop
 8012f9c:	24000000 	.word	0x24000000
 8012fa0:	10624dd3 	.word	0x10624dd3
 8012fa4:	002000c5 	.word	0x002000c5

08012fa8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012fa8:	b480      	push	{r7}
 8012faa:	b085      	sub	sp, #20
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8012fb0:	4b22      	ldr	r3, [pc, #136]	; (801303c <SDMMC_GetCmdResp7+0x94>)
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	4a22      	ldr	r2, [pc, #136]	; (8013040 <SDMMC_GetCmdResp7+0x98>)
 8012fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8012fba:	0a5b      	lsrs	r3, r3, #9
 8012fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8012fc0:	fb02 f303 	mul.w	r3, r2, r3
 8012fc4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	1e5a      	subs	r2, r3, #1
 8012fca:	60fa      	str	r2, [r7, #12]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d102      	bne.n	8012fd6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012fd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012fd4:	e02c      	b.n	8013030 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fda:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012fdc:	68bb      	ldr	r3, [r7, #8]
 8012fde:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d0ef      	beq.n	8012fc6 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8012fe6:	68bb      	ldr	r3, [r7, #8]
 8012fe8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d1ea      	bne.n	8012fc6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012ff4:	f003 0304 	and.w	r3, r3, #4
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d004      	beq.n	8013006 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	2204      	movs	r2, #4
 8013000:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013002:	2304      	movs	r3, #4
 8013004:	e014      	b.n	8013030 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801300a:	f003 0301 	and.w	r3, r3, #1
 801300e:	2b00      	cmp	r3, #0
 8013010:	d004      	beq.n	801301c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	2201      	movs	r2, #1
 8013016:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013018:	2301      	movs	r3, #1
 801301a:	e009      	b.n	8013030 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013024:	2b00      	cmp	r3, #0
 8013026:	d002      	beq.n	801302e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	2240      	movs	r2, #64	; 0x40
 801302c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801302e:	2300      	movs	r3, #0

}
 8013030:	4618      	mov	r0, r3
 8013032:	3714      	adds	r7, #20
 8013034:	46bd      	mov	sp, r7
 8013036:	f85d 7b04 	ldr.w	r7, [sp], #4
 801303a:	4770      	bx	lr
 801303c:	24000000 	.word	0x24000000
 8013040:	10624dd3 	.word	0x10624dd3

08013044 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8013044:	b480      	push	{r7}
 8013046:	b085      	sub	sp, #20
 8013048:	af00      	add	r7, sp, #0
 801304a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801304c:	4b11      	ldr	r3, [pc, #68]	; (8013094 <SDMMC_GetCmdError+0x50>)
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	4a11      	ldr	r2, [pc, #68]	; (8013098 <SDMMC_GetCmdError+0x54>)
 8013052:	fba2 2303 	umull	r2, r3, r2, r3
 8013056:	0a5b      	lsrs	r3, r3, #9
 8013058:	f241 3288 	movw	r2, #5000	; 0x1388
 801305c:	fb02 f303 	mul.w	r3, r2, r3
 8013060:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	1e5a      	subs	r2, r3, #1
 8013066:	60fa      	str	r2, [r7, #12]
 8013068:	2b00      	cmp	r3, #0
 801306a:	d102      	bne.n	8013072 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801306c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013070:	e009      	b.n	8013086 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801307a:	2b00      	cmp	r3, #0
 801307c:	d0f1      	beq.n	8013062 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	4a06      	ldr	r2, [pc, #24]	; (801309c <SDMMC_GetCmdError+0x58>)
 8013082:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8013084:	2300      	movs	r3, #0
}
 8013086:	4618      	mov	r0, r3
 8013088:	3714      	adds	r7, #20
 801308a:	46bd      	mov	sp, r7
 801308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013090:	4770      	bx	lr
 8013092:	bf00      	nop
 8013094:	24000000 	.word	0x24000000
 8013098:	10624dd3 	.word	0x10624dd3
 801309c:	002000c5 	.word	0x002000c5

080130a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80130a0:	b084      	sub	sp, #16
 80130a2:	b580      	push	{r7, lr}
 80130a4:	b084      	sub	sp, #16
 80130a6:	af00      	add	r7, sp, #0
 80130a8:	6078      	str	r0, [r7, #4]
 80130aa:	f107 001c 	add.w	r0, r7, #28
 80130ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80130b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b4:	2b01      	cmp	r3, #1
 80130b6:	d120      	bne.n	80130fa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	68da      	ldr	r2, [r3, #12]
 80130c8:	4b2a      	ldr	r3, [pc, #168]	; (8013174 <USB_CoreInit+0xd4>)
 80130ca:	4013      	ands	r3, r2
 80130cc:	687a      	ldr	r2, [r7, #4]
 80130ce:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	68db      	ldr	r3, [r3, #12]
 80130d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80130dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80130de:	2b01      	cmp	r3, #1
 80130e0:	d105      	bne.n	80130ee <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	68db      	ldr	r3, [r3, #12]
 80130e6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80130ee:	6878      	ldr	r0, [r7, #4]
 80130f0:	f001 faf8 	bl	80146e4 <USB_CoreReset>
 80130f4:	4603      	mov	r3, r0
 80130f6:	73fb      	strb	r3, [r7, #15]
 80130f8:	e01a      	b.n	8013130 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	68db      	ldr	r3, [r3, #12]
 80130fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8013106:	6878      	ldr	r0, [r7, #4]
 8013108:	f001 faec 	bl	80146e4 <USB_CoreReset>
 801310c:	4603      	mov	r3, r0
 801310e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8013110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013112:	2b00      	cmp	r3, #0
 8013114:	d106      	bne.n	8013124 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801311a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	639a      	str	r2, [r3, #56]	; 0x38
 8013122:	e005      	b.n	8013130 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013128:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013132:	2b01      	cmp	r3, #1
 8013134:	d116      	bne.n	8013164 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801313a:	b29a      	uxth	r2, r3
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8013144:	4b0c      	ldr	r3, [pc, #48]	; (8013178 <USB_CoreInit+0xd8>)
 8013146:	4313      	orrs	r3, r2
 8013148:	687a      	ldr	r2, [r7, #4]
 801314a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	689b      	ldr	r3, [r3, #8]
 8013150:	f043 0206 	orr.w	r2, r3, #6
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	689b      	ldr	r3, [r3, #8]
 801315c:	f043 0220 	orr.w	r2, r3, #32
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013164:	7bfb      	ldrb	r3, [r7, #15]
}
 8013166:	4618      	mov	r0, r3
 8013168:	3710      	adds	r7, #16
 801316a:	46bd      	mov	sp, r7
 801316c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013170:	b004      	add	sp, #16
 8013172:	4770      	bx	lr
 8013174:	ffbdffbf 	.word	0xffbdffbf
 8013178:	03ee0000 	.word	0x03ee0000

0801317c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801317c:	b480      	push	{r7}
 801317e:	b087      	sub	sp, #28
 8013180:	af00      	add	r7, sp, #0
 8013182:	60f8      	str	r0, [r7, #12]
 8013184:	60b9      	str	r1, [r7, #8]
 8013186:	4613      	mov	r3, r2
 8013188:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801318a:	79fb      	ldrb	r3, [r7, #7]
 801318c:	2b02      	cmp	r3, #2
 801318e:	d165      	bne.n	801325c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013190:	68bb      	ldr	r3, [r7, #8]
 8013192:	4a41      	ldr	r2, [pc, #260]	; (8013298 <USB_SetTurnaroundTime+0x11c>)
 8013194:	4293      	cmp	r3, r2
 8013196:	d906      	bls.n	80131a6 <USB_SetTurnaroundTime+0x2a>
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	4a40      	ldr	r2, [pc, #256]	; (801329c <USB_SetTurnaroundTime+0x120>)
 801319c:	4293      	cmp	r3, r2
 801319e:	d202      	bcs.n	80131a6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80131a0:	230f      	movs	r3, #15
 80131a2:	617b      	str	r3, [r7, #20]
 80131a4:	e062      	b.n	801326c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80131a6:	68bb      	ldr	r3, [r7, #8]
 80131a8:	4a3c      	ldr	r2, [pc, #240]	; (801329c <USB_SetTurnaroundTime+0x120>)
 80131aa:	4293      	cmp	r3, r2
 80131ac:	d306      	bcc.n	80131bc <USB_SetTurnaroundTime+0x40>
 80131ae:	68bb      	ldr	r3, [r7, #8]
 80131b0:	4a3b      	ldr	r2, [pc, #236]	; (80132a0 <USB_SetTurnaroundTime+0x124>)
 80131b2:	4293      	cmp	r3, r2
 80131b4:	d202      	bcs.n	80131bc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80131b6:	230e      	movs	r3, #14
 80131b8:	617b      	str	r3, [r7, #20]
 80131ba:	e057      	b.n	801326c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80131bc:	68bb      	ldr	r3, [r7, #8]
 80131be:	4a38      	ldr	r2, [pc, #224]	; (80132a0 <USB_SetTurnaroundTime+0x124>)
 80131c0:	4293      	cmp	r3, r2
 80131c2:	d306      	bcc.n	80131d2 <USB_SetTurnaroundTime+0x56>
 80131c4:	68bb      	ldr	r3, [r7, #8]
 80131c6:	4a37      	ldr	r2, [pc, #220]	; (80132a4 <USB_SetTurnaroundTime+0x128>)
 80131c8:	4293      	cmp	r3, r2
 80131ca:	d202      	bcs.n	80131d2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80131cc:	230d      	movs	r3, #13
 80131ce:	617b      	str	r3, [r7, #20]
 80131d0:	e04c      	b.n	801326c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80131d2:	68bb      	ldr	r3, [r7, #8]
 80131d4:	4a33      	ldr	r2, [pc, #204]	; (80132a4 <USB_SetTurnaroundTime+0x128>)
 80131d6:	4293      	cmp	r3, r2
 80131d8:	d306      	bcc.n	80131e8 <USB_SetTurnaroundTime+0x6c>
 80131da:	68bb      	ldr	r3, [r7, #8]
 80131dc:	4a32      	ldr	r2, [pc, #200]	; (80132a8 <USB_SetTurnaroundTime+0x12c>)
 80131de:	4293      	cmp	r3, r2
 80131e0:	d802      	bhi.n	80131e8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80131e2:	230c      	movs	r3, #12
 80131e4:	617b      	str	r3, [r7, #20]
 80131e6:	e041      	b.n	801326c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80131e8:	68bb      	ldr	r3, [r7, #8]
 80131ea:	4a2f      	ldr	r2, [pc, #188]	; (80132a8 <USB_SetTurnaroundTime+0x12c>)
 80131ec:	4293      	cmp	r3, r2
 80131ee:	d906      	bls.n	80131fe <USB_SetTurnaroundTime+0x82>
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	4a2e      	ldr	r2, [pc, #184]	; (80132ac <USB_SetTurnaroundTime+0x130>)
 80131f4:	4293      	cmp	r3, r2
 80131f6:	d802      	bhi.n	80131fe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80131f8:	230b      	movs	r3, #11
 80131fa:	617b      	str	r3, [r7, #20]
 80131fc:	e036      	b.n	801326c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80131fe:	68bb      	ldr	r3, [r7, #8]
 8013200:	4a2a      	ldr	r2, [pc, #168]	; (80132ac <USB_SetTurnaroundTime+0x130>)
 8013202:	4293      	cmp	r3, r2
 8013204:	d906      	bls.n	8013214 <USB_SetTurnaroundTime+0x98>
 8013206:	68bb      	ldr	r3, [r7, #8]
 8013208:	4a29      	ldr	r2, [pc, #164]	; (80132b0 <USB_SetTurnaroundTime+0x134>)
 801320a:	4293      	cmp	r3, r2
 801320c:	d802      	bhi.n	8013214 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801320e:	230a      	movs	r3, #10
 8013210:	617b      	str	r3, [r7, #20]
 8013212:	e02b      	b.n	801326c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	4a26      	ldr	r2, [pc, #152]	; (80132b0 <USB_SetTurnaroundTime+0x134>)
 8013218:	4293      	cmp	r3, r2
 801321a:	d906      	bls.n	801322a <USB_SetTurnaroundTime+0xae>
 801321c:	68bb      	ldr	r3, [r7, #8]
 801321e:	4a25      	ldr	r2, [pc, #148]	; (80132b4 <USB_SetTurnaroundTime+0x138>)
 8013220:	4293      	cmp	r3, r2
 8013222:	d202      	bcs.n	801322a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013224:	2309      	movs	r3, #9
 8013226:	617b      	str	r3, [r7, #20]
 8013228:	e020      	b.n	801326c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801322a:	68bb      	ldr	r3, [r7, #8]
 801322c:	4a21      	ldr	r2, [pc, #132]	; (80132b4 <USB_SetTurnaroundTime+0x138>)
 801322e:	4293      	cmp	r3, r2
 8013230:	d306      	bcc.n	8013240 <USB_SetTurnaroundTime+0xc4>
 8013232:	68bb      	ldr	r3, [r7, #8]
 8013234:	4a20      	ldr	r2, [pc, #128]	; (80132b8 <USB_SetTurnaroundTime+0x13c>)
 8013236:	4293      	cmp	r3, r2
 8013238:	d802      	bhi.n	8013240 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801323a:	2308      	movs	r3, #8
 801323c:	617b      	str	r3, [r7, #20]
 801323e:	e015      	b.n	801326c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013240:	68bb      	ldr	r3, [r7, #8]
 8013242:	4a1d      	ldr	r2, [pc, #116]	; (80132b8 <USB_SetTurnaroundTime+0x13c>)
 8013244:	4293      	cmp	r3, r2
 8013246:	d906      	bls.n	8013256 <USB_SetTurnaroundTime+0xda>
 8013248:	68bb      	ldr	r3, [r7, #8]
 801324a:	4a1c      	ldr	r2, [pc, #112]	; (80132bc <USB_SetTurnaroundTime+0x140>)
 801324c:	4293      	cmp	r3, r2
 801324e:	d202      	bcs.n	8013256 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013250:	2307      	movs	r3, #7
 8013252:	617b      	str	r3, [r7, #20]
 8013254:	e00a      	b.n	801326c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013256:	2306      	movs	r3, #6
 8013258:	617b      	str	r3, [r7, #20]
 801325a:	e007      	b.n	801326c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801325c:	79fb      	ldrb	r3, [r7, #7]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d102      	bne.n	8013268 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013262:	2309      	movs	r3, #9
 8013264:	617b      	str	r3, [r7, #20]
 8013266:	e001      	b.n	801326c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013268:	2309      	movs	r3, #9
 801326a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	68db      	ldr	r3, [r3, #12]
 8013270:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013278:	68fb      	ldr	r3, [r7, #12]
 801327a:	68da      	ldr	r2, [r3, #12]
 801327c:	697b      	ldr	r3, [r7, #20]
 801327e:	029b      	lsls	r3, r3, #10
 8013280:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013284:	431a      	orrs	r2, r3
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801328a:	2300      	movs	r3, #0
}
 801328c:	4618      	mov	r0, r3
 801328e:	371c      	adds	r7, #28
 8013290:	46bd      	mov	sp, r7
 8013292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013296:	4770      	bx	lr
 8013298:	00d8acbf 	.word	0x00d8acbf
 801329c:	00e4e1c0 	.word	0x00e4e1c0
 80132a0:	00f42400 	.word	0x00f42400
 80132a4:	01067380 	.word	0x01067380
 80132a8:	011a499f 	.word	0x011a499f
 80132ac:	01312cff 	.word	0x01312cff
 80132b0:	014ca43f 	.word	0x014ca43f
 80132b4:	016e3600 	.word	0x016e3600
 80132b8:	01a6ab1f 	.word	0x01a6ab1f
 80132bc:	01e84800 	.word	0x01e84800

080132c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80132c0:	b480      	push	{r7}
 80132c2:	b083      	sub	sp, #12
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	689b      	ldr	r3, [r3, #8]
 80132cc:	f043 0201 	orr.w	r2, r3, #1
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80132d4:	2300      	movs	r3, #0
}
 80132d6:	4618      	mov	r0, r3
 80132d8:	370c      	adds	r7, #12
 80132da:	46bd      	mov	sp, r7
 80132dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e0:	4770      	bx	lr

080132e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80132e2:	b480      	push	{r7}
 80132e4:	b083      	sub	sp, #12
 80132e6:	af00      	add	r7, sp, #0
 80132e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	689b      	ldr	r3, [r3, #8]
 80132ee:	f023 0201 	bic.w	r2, r3, #1
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80132f6:	2300      	movs	r3, #0
}
 80132f8:	4618      	mov	r0, r3
 80132fa:	370c      	adds	r7, #12
 80132fc:	46bd      	mov	sp, r7
 80132fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013302:	4770      	bx	lr

08013304 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b084      	sub	sp, #16
 8013308:	af00      	add	r7, sp, #0
 801330a:	6078      	str	r0, [r7, #4]
 801330c:	460b      	mov	r3, r1
 801330e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8013310:	2300      	movs	r3, #0
 8013312:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	68db      	ldr	r3, [r3, #12]
 8013318:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013320:	78fb      	ldrb	r3, [r7, #3]
 8013322:	2b01      	cmp	r3, #1
 8013324:	d115      	bne.n	8013352 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	68db      	ldr	r3, [r3, #12]
 801332a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013332:	2001      	movs	r0, #1
 8013334:	f7f0 fcf8 	bl	8003d28 <HAL_Delay>
      ms++;
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	3301      	adds	r3, #1
 801333c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 801333e:	6878      	ldr	r0, [r7, #4]
 8013340:	f001 f93f 	bl	80145c2 <USB_GetMode>
 8013344:	4603      	mov	r3, r0
 8013346:	2b01      	cmp	r3, #1
 8013348:	d01e      	beq.n	8013388 <USB_SetCurrentMode+0x84>
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	2b31      	cmp	r3, #49	; 0x31
 801334e:	d9f0      	bls.n	8013332 <USB_SetCurrentMode+0x2e>
 8013350:	e01a      	b.n	8013388 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8013352:	78fb      	ldrb	r3, [r7, #3]
 8013354:	2b00      	cmp	r3, #0
 8013356:	d115      	bne.n	8013384 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	68db      	ldr	r3, [r3, #12]
 801335c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013364:	2001      	movs	r0, #1
 8013366:	f7f0 fcdf 	bl	8003d28 <HAL_Delay>
      ms++;
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	3301      	adds	r3, #1
 801336e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8013370:	6878      	ldr	r0, [r7, #4]
 8013372:	f001 f926 	bl	80145c2 <USB_GetMode>
 8013376:	4603      	mov	r3, r0
 8013378:	2b00      	cmp	r3, #0
 801337a:	d005      	beq.n	8013388 <USB_SetCurrentMode+0x84>
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	2b31      	cmp	r3, #49	; 0x31
 8013380:	d9f0      	bls.n	8013364 <USB_SetCurrentMode+0x60>
 8013382:	e001      	b.n	8013388 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013384:	2301      	movs	r3, #1
 8013386:	e005      	b.n	8013394 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	2b32      	cmp	r3, #50	; 0x32
 801338c:	d101      	bne.n	8013392 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801338e:	2301      	movs	r3, #1
 8013390:	e000      	b.n	8013394 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8013392:	2300      	movs	r3, #0
}
 8013394:	4618      	mov	r0, r3
 8013396:	3710      	adds	r7, #16
 8013398:	46bd      	mov	sp, r7
 801339a:	bd80      	pop	{r7, pc}

0801339c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801339c:	b084      	sub	sp, #16
 801339e:	b580      	push	{r7, lr}
 80133a0:	b086      	sub	sp, #24
 80133a2:	af00      	add	r7, sp, #0
 80133a4:	6078      	str	r0, [r7, #4]
 80133a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80133aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80133ae:	2300      	movs	r3, #0
 80133b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80133b6:	2300      	movs	r3, #0
 80133b8:	613b      	str	r3, [r7, #16]
 80133ba:	e009      	b.n	80133d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80133bc:	687a      	ldr	r2, [r7, #4]
 80133be:	693b      	ldr	r3, [r7, #16]
 80133c0:	3340      	adds	r3, #64	; 0x40
 80133c2:	009b      	lsls	r3, r3, #2
 80133c4:	4413      	add	r3, r2
 80133c6:	2200      	movs	r2, #0
 80133c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80133ca:	693b      	ldr	r3, [r7, #16]
 80133cc:	3301      	adds	r3, #1
 80133ce:	613b      	str	r3, [r7, #16]
 80133d0:	693b      	ldr	r3, [r7, #16]
 80133d2:	2b0e      	cmp	r3, #14
 80133d4:	d9f2      	bls.n	80133bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80133d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d11c      	bne.n	8013416 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80133dc:	68fb      	ldr	r3, [r7, #12]
 80133de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80133e2:	685b      	ldr	r3, [r3, #4]
 80133e4:	68fa      	ldr	r2, [r7, #12]
 80133e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80133ea:	f043 0302 	orr.w	r3, r3, #2
 80133ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80133f8:	687b      	ldr	r3, [r7, #4]
 80133fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	681b      	ldr	r3, [r3, #0]
 801340c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	601a      	str	r2, [r3, #0]
 8013414:	e005      	b.n	8013422 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801341a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013428:	461a      	mov	r2, r3
 801342a:	2300      	movs	r3, #0
 801342c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013434:	4619      	mov	r1, r3
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801343c:	461a      	mov	r2, r3
 801343e:	680b      	ldr	r3, [r1, #0]
 8013440:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013444:	2b01      	cmp	r3, #1
 8013446:	d10c      	bne.n	8013462 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801344a:	2b00      	cmp	r3, #0
 801344c:	d104      	bne.n	8013458 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801344e:	2100      	movs	r1, #0
 8013450:	6878      	ldr	r0, [r7, #4]
 8013452:	f000 f965 	bl	8013720 <USB_SetDevSpeed>
 8013456:	e008      	b.n	801346a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013458:	2101      	movs	r1, #1
 801345a:	6878      	ldr	r0, [r7, #4]
 801345c:	f000 f960 	bl	8013720 <USB_SetDevSpeed>
 8013460:	e003      	b.n	801346a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013462:	2103      	movs	r1, #3
 8013464:	6878      	ldr	r0, [r7, #4]
 8013466:	f000 f95b 	bl	8013720 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801346a:	2110      	movs	r1, #16
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	f000 f8f3 	bl	8013658 <USB_FlushTxFifo>
 8013472:	4603      	mov	r3, r0
 8013474:	2b00      	cmp	r3, #0
 8013476:	d001      	beq.n	801347c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8013478:	2301      	movs	r3, #1
 801347a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801347c:	6878      	ldr	r0, [r7, #4]
 801347e:	f000 f91f 	bl	80136c0 <USB_FlushRxFifo>
 8013482:	4603      	mov	r3, r0
 8013484:	2b00      	cmp	r3, #0
 8013486:	d001      	beq.n	801348c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8013488:	2301      	movs	r3, #1
 801348a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013492:	461a      	mov	r2, r3
 8013494:	2300      	movs	r3, #0
 8013496:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801349e:	461a      	mov	r2, r3
 80134a0:	2300      	movs	r3, #0
 80134a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80134aa:	461a      	mov	r2, r3
 80134ac:	2300      	movs	r3, #0
 80134ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80134b0:	2300      	movs	r3, #0
 80134b2:	613b      	str	r3, [r7, #16]
 80134b4:	e043      	b.n	801353e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80134b6:	693b      	ldr	r3, [r7, #16]
 80134b8:	015a      	lsls	r2, r3, #5
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	4413      	add	r3, r2
 80134be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134c2:	681b      	ldr	r3, [r3, #0]
 80134c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80134c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80134cc:	d118      	bne.n	8013500 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80134ce:	693b      	ldr	r3, [r7, #16]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d10a      	bne.n	80134ea <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80134d4:	693b      	ldr	r3, [r7, #16]
 80134d6:	015a      	lsls	r2, r3, #5
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	4413      	add	r3, r2
 80134dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134e0:	461a      	mov	r2, r3
 80134e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80134e6:	6013      	str	r3, [r2, #0]
 80134e8:	e013      	b.n	8013512 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80134ea:	693b      	ldr	r3, [r7, #16]
 80134ec:	015a      	lsls	r2, r3, #5
 80134ee:	68fb      	ldr	r3, [r7, #12]
 80134f0:	4413      	add	r3, r2
 80134f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80134f6:	461a      	mov	r2, r3
 80134f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80134fc:	6013      	str	r3, [r2, #0]
 80134fe:	e008      	b.n	8013512 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013500:	693b      	ldr	r3, [r7, #16]
 8013502:	015a      	lsls	r2, r3, #5
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	4413      	add	r3, r2
 8013508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801350c:	461a      	mov	r2, r3
 801350e:	2300      	movs	r3, #0
 8013510:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013512:	693b      	ldr	r3, [r7, #16]
 8013514:	015a      	lsls	r2, r3, #5
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	4413      	add	r3, r2
 801351a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801351e:	461a      	mov	r2, r3
 8013520:	2300      	movs	r3, #0
 8013522:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013524:	693b      	ldr	r3, [r7, #16]
 8013526:	015a      	lsls	r2, r3, #5
 8013528:	68fb      	ldr	r3, [r7, #12]
 801352a:	4413      	add	r3, r2
 801352c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013530:	461a      	mov	r2, r3
 8013532:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013536:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013538:	693b      	ldr	r3, [r7, #16]
 801353a:	3301      	adds	r3, #1
 801353c:	613b      	str	r3, [r7, #16]
 801353e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013540:	693a      	ldr	r2, [r7, #16]
 8013542:	429a      	cmp	r2, r3
 8013544:	d3b7      	bcc.n	80134b6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013546:	2300      	movs	r3, #0
 8013548:	613b      	str	r3, [r7, #16]
 801354a:	e043      	b.n	80135d4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801354c:	693b      	ldr	r3, [r7, #16]
 801354e:	015a      	lsls	r2, r3, #5
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	4413      	add	r3, r2
 8013554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801355e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013562:	d118      	bne.n	8013596 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8013564:	693b      	ldr	r3, [r7, #16]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d10a      	bne.n	8013580 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801356a:	693b      	ldr	r3, [r7, #16]
 801356c:	015a      	lsls	r2, r3, #5
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	4413      	add	r3, r2
 8013572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013576:	461a      	mov	r2, r3
 8013578:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801357c:	6013      	str	r3, [r2, #0]
 801357e:	e013      	b.n	80135a8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	015a      	lsls	r2, r3, #5
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	4413      	add	r3, r2
 8013588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801358c:	461a      	mov	r2, r3
 801358e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013592:	6013      	str	r3, [r2, #0]
 8013594:	e008      	b.n	80135a8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013596:	693b      	ldr	r3, [r7, #16]
 8013598:	015a      	lsls	r2, r3, #5
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	4413      	add	r3, r2
 801359e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135a2:	461a      	mov	r2, r3
 80135a4:	2300      	movs	r3, #0
 80135a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80135a8:	693b      	ldr	r3, [r7, #16]
 80135aa:	015a      	lsls	r2, r3, #5
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	4413      	add	r3, r2
 80135b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135b4:	461a      	mov	r2, r3
 80135b6:	2300      	movs	r3, #0
 80135b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80135ba:	693b      	ldr	r3, [r7, #16]
 80135bc:	015a      	lsls	r2, r3, #5
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	4413      	add	r3, r2
 80135c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135c6:	461a      	mov	r2, r3
 80135c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80135cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80135ce:	693b      	ldr	r3, [r7, #16]
 80135d0:	3301      	adds	r3, #1
 80135d2:	613b      	str	r3, [r7, #16]
 80135d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135d6:	693a      	ldr	r2, [r7, #16]
 80135d8:	429a      	cmp	r2, r3
 80135da:	d3b7      	bcc.n	801354c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80135e2:	691b      	ldr	r3, [r3, #16]
 80135e4:	68fa      	ldr	r2, [r7, #12]
 80135e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80135ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80135ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	2200      	movs	r2, #0
 80135f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80135fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80135fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013600:	2b00      	cmp	r3, #0
 8013602:	d105      	bne.n	8013610 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	699b      	ldr	r3, [r3, #24]
 8013608:	f043 0210 	orr.w	r2, r3, #16
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	699a      	ldr	r2, [r3, #24]
 8013614:	4b0e      	ldr	r3, [pc, #56]	; (8013650 <USB_DevInit+0x2b4>)
 8013616:	4313      	orrs	r3, r2
 8013618:	687a      	ldr	r2, [r7, #4]
 801361a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801361c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801361e:	2b00      	cmp	r3, #0
 8013620:	d005      	beq.n	801362e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	699b      	ldr	r3, [r3, #24]
 8013626:	f043 0208 	orr.w	r2, r3, #8
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801362e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013630:	2b01      	cmp	r3, #1
 8013632:	d105      	bne.n	8013640 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	699a      	ldr	r2, [r3, #24]
 8013638:	4b06      	ldr	r3, [pc, #24]	; (8013654 <USB_DevInit+0x2b8>)
 801363a:	4313      	orrs	r3, r2
 801363c:	687a      	ldr	r2, [r7, #4]
 801363e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013640:	7dfb      	ldrb	r3, [r7, #23]
}
 8013642:	4618      	mov	r0, r3
 8013644:	3718      	adds	r7, #24
 8013646:	46bd      	mov	sp, r7
 8013648:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801364c:	b004      	add	sp, #16
 801364e:	4770      	bx	lr
 8013650:	803c3800 	.word	0x803c3800
 8013654:	40000004 	.word	0x40000004

08013658 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013658:	b480      	push	{r7}
 801365a:	b085      	sub	sp, #20
 801365c:	af00      	add	r7, sp, #0
 801365e:	6078      	str	r0, [r7, #4]
 8013660:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013662:	2300      	movs	r3, #0
 8013664:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	3301      	adds	r3, #1
 801366a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	4a13      	ldr	r2, [pc, #76]	; (80136bc <USB_FlushTxFifo+0x64>)
 8013670:	4293      	cmp	r3, r2
 8013672:	d901      	bls.n	8013678 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013674:	2303      	movs	r3, #3
 8013676:	e01b      	b.n	80136b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	691b      	ldr	r3, [r3, #16]
 801367c:	2b00      	cmp	r3, #0
 801367e:	daf2      	bge.n	8013666 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013680:	2300      	movs	r3, #0
 8013682:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	019b      	lsls	r3, r3, #6
 8013688:	f043 0220 	orr.w	r2, r3, #32
 801368c:	687b      	ldr	r3, [r7, #4]
 801368e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	3301      	adds	r3, #1
 8013694:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	4a08      	ldr	r2, [pc, #32]	; (80136bc <USB_FlushTxFifo+0x64>)
 801369a:	4293      	cmp	r3, r2
 801369c:	d901      	bls.n	80136a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801369e:	2303      	movs	r3, #3
 80136a0:	e006      	b.n	80136b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	691b      	ldr	r3, [r3, #16]
 80136a6:	f003 0320 	and.w	r3, r3, #32
 80136aa:	2b20      	cmp	r3, #32
 80136ac:	d0f0      	beq.n	8013690 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80136ae:	2300      	movs	r3, #0
}
 80136b0:	4618      	mov	r0, r3
 80136b2:	3714      	adds	r7, #20
 80136b4:	46bd      	mov	sp, r7
 80136b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ba:	4770      	bx	lr
 80136bc:	00030d40 	.word	0x00030d40

080136c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80136c0:	b480      	push	{r7}
 80136c2:	b085      	sub	sp, #20
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80136c8:	2300      	movs	r3, #0
 80136ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	3301      	adds	r3, #1
 80136d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	4a11      	ldr	r2, [pc, #68]	; (801371c <USB_FlushRxFifo+0x5c>)
 80136d6:	4293      	cmp	r3, r2
 80136d8:	d901      	bls.n	80136de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80136da:	2303      	movs	r3, #3
 80136dc:	e018      	b.n	8013710 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	691b      	ldr	r3, [r3, #16]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	daf2      	bge.n	80136cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80136e6:	2300      	movs	r3, #0
 80136e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	2210      	movs	r2, #16
 80136ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	3301      	adds	r3, #1
 80136f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	4a08      	ldr	r2, [pc, #32]	; (801371c <USB_FlushRxFifo+0x5c>)
 80136fa:	4293      	cmp	r3, r2
 80136fc:	d901      	bls.n	8013702 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80136fe:	2303      	movs	r3, #3
 8013700:	e006      	b.n	8013710 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	691b      	ldr	r3, [r3, #16]
 8013706:	f003 0310 	and.w	r3, r3, #16
 801370a:	2b10      	cmp	r3, #16
 801370c:	d0f0      	beq.n	80136f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801370e:	2300      	movs	r3, #0
}
 8013710:	4618      	mov	r0, r3
 8013712:	3714      	adds	r7, #20
 8013714:	46bd      	mov	sp, r7
 8013716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801371a:	4770      	bx	lr
 801371c:	00030d40 	.word	0x00030d40

08013720 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013720:	b480      	push	{r7}
 8013722:	b085      	sub	sp, #20
 8013724:	af00      	add	r7, sp, #0
 8013726:	6078      	str	r0, [r7, #4]
 8013728:	460b      	mov	r3, r1
 801372a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013736:	681a      	ldr	r2, [r3, #0]
 8013738:	78fb      	ldrb	r3, [r7, #3]
 801373a:	68f9      	ldr	r1, [r7, #12]
 801373c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013740:	4313      	orrs	r3, r2
 8013742:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013744:	2300      	movs	r3, #0
}
 8013746:	4618      	mov	r0, r3
 8013748:	3714      	adds	r7, #20
 801374a:	46bd      	mov	sp, r7
 801374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013750:	4770      	bx	lr

08013752 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013752:	b480      	push	{r7}
 8013754:	b087      	sub	sp, #28
 8013756:	af00      	add	r7, sp, #0
 8013758:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801375e:	693b      	ldr	r3, [r7, #16]
 8013760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013764:	689b      	ldr	r3, [r3, #8]
 8013766:	f003 0306 	and.w	r3, r3, #6
 801376a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d102      	bne.n	8013778 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013772:	2300      	movs	r3, #0
 8013774:	75fb      	strb	r3, [r7, #23]
 8013776:	e00a      	b.n	801378e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013778:	68fb      	ldr	r3, [r7, #12]
 801377a:	2b02      	cmp	r3, #2
 801377c:	d002      	beq.n	8013784 <USB_GetDevSpeed+0x32>
 801377e:	68fb      	ldr	r3, [r7, #12]
 8013780:	2b06      	cmp	r3, #6
 8013782:	d102      	bne.n	801378a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013784:	2302      	movs	r3, #2
 8013786:	75fb      	strb	r3, [r7, #23]
 8013788:	e001      	b.n	801378e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801378a:	230f      	movs	r3, #15
 801378c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801378e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013790:	4618      	mov	r0, r3
 8013792:	371c      	adds	r7, #28
 8013794:	46bd      	mov	sp, r7
 8013796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801379a:	4770      	bx	lr

0801379c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801379c:	b480      	push	{r7}
 801379e:	b085      	sub	sp, #20
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
 80137a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	781b      	ldrb	r3, [r3, #0]
 80137ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80137b0:	683b      	ldr	r3, [r7, #0]
 80137b2:	785b      	ldrb	r3, [r3, #1]
 80137b4:	2b01      	cmp	r3, #1
 80137b6:	d139      	bne.n	801382c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80137b8:	68fb      	ldr	r3, [r7, #12]
 80137ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137be:	69da      	ldr	r2, [r3, #28]
 80137c0:	683b      	ldr	r3, [r7, #0]
 80137c2:	781b      	ldrb	r3, [r3, #0]
 80137c4:	f003 030f 	and.w	r3, r3, #15
 80137c8:	2101      	movs	r1, #1
 80137ca:	fa01 f303 	lsl.w	r3, r1, r3
 80137ce:	b29b      	uxth	r3, r3
 80137d0:	68f9      	ldr	r1, [r7, #12]
 80137d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80137d6:	4313      	orrs	r3, r2
 80137d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80137da:	68bb      	ldr	r3, [r7, #8]
 80137dc:	015a      	lsls	r2, r3, #5
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	4413      	add	r3, r2
 80137e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137e6:	681b      	ldr	r3, [r3, #0]
 80137e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d153      	bne.n	8013898 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80137f0:	68bb      	ldr	r3, [r7, #8]
 80137f2:	015a      	lsls	r2, r3, #5
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	4413      	add	r3, r2
 80137f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80137fc:	681a      	ldr	r2, [r3, #0]
 80137fe:	683b      	ldr	r3, [r7, #0]
 8013800:	689b      	ldr	r3, [r3, #8]
 8013802:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013806:	683b      	ldr	r3, [r7, #0]
 8013808:	791b      	ldrb	r3, [r3, #4]
 801380a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801380c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801380e:	68bb      	ldr	r3, [r7, #8]
 8013810:	059b      	lsls	r3, r3, #22
 8013812:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013814:	431a      	orrs	r2, r3
 8013816:	68bb      	ldr	r3, [r7, #8]
 8013818:	0159      	lsls	r1, r3, #5
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	440b      	add	r3, r1
 801381e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013822:	4619      	mov	r1, r3
 8013824:	4b20      	ldr	r3, [pc, #128]	; (80138a8 <USB_ActivateEndpoint+0x10c>)
 8013826:	4313      	orrs	r3, r2
 8013828:	600b      	str	r3, [r1, #0]
 801382a:	e035      	b.n	8013898 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013832:	69da      	ldr	r2, [r3, #28]
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	781b      	ldrb	r3, [r3, #0]
 8013838:	f003 030f 	and.w	r3, r3, #15
 801383c:	2101      	movs	r1, #1
 801383e:	fa01 f303 	lsl.w	r3, r1, r3
 8013842:	041b      	lsls	r3, r3, #16
 8013844:	68f9      	ldr	r1, [r7, #12]
 8013846:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801384a:	4313      	orrs	r3, r2
 801384c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801384e:	68bb      	ldr	r3, [r7, #8]
 8013850:	015a      	lsls	r2, r3, #5
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	4413      	add	r3, r2
 8013856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013860:	2b00      	cmp	r3, #0
 8013862:	d119      	bne.n	8013898 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013864:	68bb      	ldr	r3, [r7, #8]
 8013866:	015a      	lsls	r2, r3, #5
 8013868:	68fb      	ldr	r3, [r7, #12]
 801386a:	4413      	add	r3, r2
 801386c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013870:	681a      	ldr	r2, [r3, #0]
 8013872:	683b      	ldr	r3, [r7, #0]
 8013874:	689b      	ldr	r3, [r3, #8]
 8013876:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801387a:	683b      	ldr	r3, [r7, #0]
 801387c:	791b      	ldrb	r3, [r3, #4]
 801387e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013880:	430b      	orrs	r3, r1
 8013882:	431a      	orrs	r2, r3
 8013884:	68bb      	ldr	r3, [r7, #8]
 8013886:	0159      	lsls	r1, r3, #5
 8013888:	68fb      	ldr	r3, [r7, #12]
 801388a:	440b      	add	r3, r1
 801388c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013890:	4619      	mov	r1, r3
 8013892:	4b05      	ldr	r3, [pc, #20]	; (80138a8 <USB_ActivateEndpoint+0x10c>)
 8013894:	4313      	orrs	r3, r2
 8013896:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013898:	2300      	movs	r3, #0
}
 801389a:	4618      	mov	r0, r3
 801389c:	3714      	adds	r7, #20
 801389e:	46bd      	mov	sp, r7
 80138a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138a4:	4770      	bx	lr
 80138a6:	bf00      	nop
 80138a8:	10008000 	.word	0x10008000

080138ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80138ac:	b480      	push	{r7}
 80138ae:	b085      	sub	sp, #20
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
 80138b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	781b      	ldrb	r3, [r3, #0]
 80138be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	785b      	ldrb	r3, [r3, #1]
 80138c4:	2b01      	cmp	r3, #1
 80138c6:	d161      	bne.n	801398c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80138c8:	68bb      	ldr	r3, [r7, #8]
 80138ca:	015a      	lsls	r2, r3, #5
 80138cc:	68fb      	ldr	r3, [r7, #12]
 80138ce:	4413      	add	r3, r2
 80138d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138d4:	681b      	ldr	r3, [r3, #0]
 80138d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80138da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80138de:	d11f      	bne.n	8013920 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80138e0:	68bb      	ldr	r3, [r7, #8]
 80138e2:	015a      	lsls	r2, r3, #5
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	4413      	add	r3, r2
 80138e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138ec:	681b      	ldr	r3, [r3, #0]
 80138ee:	68ba      	ldr	r2, [r7, #8]
 80138f0:	0151      	lsls	r1, r2, #5
 80138f2:	68fa      	ldr	r2, [r7, #12]
 80138f4:	440a      	add	r2, r1
 80138f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80138fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80138fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013900:	68bb      	ldr	r3, [r7, #8]
 8013902:	015a      	lsls	r2, r3, #5
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	4413      	add	r3, r2
 8013908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	68ba      	ldr	r2, [r7, #8]
 8013910:	0151      	lsls	r1, r2, #5
 8013912:	68fa      	ldr	r2, [r7, #12]
 8013914:	440a      	add	r2, r1
 8013916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801391a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801391e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013926:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013928:	683b      	ldr	r3, [r7, #0]
 801392a:	781b      	ldrb	r3, [r3, #0]
 801392c:	f003 030f 	and.w	r3, r3, #15
 8013930:	2101      	movs	r1, #1
 8013932:	fa01 f303 	lsl.w	r3, r1, r3
 8013936:	b29b      	uxth	r3, r3
 8013938:	43db      	mvns	r3, r3
 801393a:	68f9      	ldr	r1, [r7, #12]
 801393c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013940:	4013      	ands	r3, r2
 8013942:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801394a:	69da      	ldr	r2, [r3, #28]
 801394c:	683b      	ldr	r3, [r7, #0]
 801394e:	781b      	ldrb	r3, [r3, #0]
 8013950:	f003 030f 	and.w	r3, r3, #15
 8013954:	2101      	movs	r1, #1
 8013956:	fa01 f303 	lsl.w	r3, r1, r3
 801395a:	b29b      	uxth	r3, r3
 801395c:	43db      	mvns	r3, r3
 801395e:	68f9      	ldr	r1, [r7, #12]
 8013960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013964:	4013      	ands	r3, r2
 8013966:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013968:	68bb      	ldr	r3, [r7, #8]
 801396a:	015a      	lsls	r2, r3, #5
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	4413      	add	r3, r2
 8013970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013974:	681a      	ldr	r2, [r3, #0]
 8013976:	68bb      	ldr	r3, [r7, #8]
 8013978:	0159      	lsls	r1, r3, #5
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	440b      	add	r3, r1
 801397e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013982:	4619      	mov	r1, r3
 8013984:	4b35      	ldr	r3, [pc, #212]	; (8013a5c <USB_DeactivateEndpoint+0x1b0>)
 8013986:	4013      	ands	r3, r2
 8013988:	600b      	str	r3, [r1, #0]
 801398a:	e060      	b.n	8013a4e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801398c:	68bb      	ldr	r3, [r7, #8]
 801398e:	015a      	lsls	r2, r3, #5
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	4413      	add	r3, r2
 8013994:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801399e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80139a2:	d11f      	bne.n	80139e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80139a4:	68bb      	ldr	r3, [r7, #8]
 80139a6:	015a      	lsls	r2, r3, #5
 80139a8:	68fb      	ldr	r3, [r7, #12]
 80139aa:	4413      	add	r3, r2
 80139ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	68ba      	ldr	r2, [r7, #8]
 80139b4:	0151      	lsls	r1, r2, #5
 80139b6:	68fa      	ldr	r2, [r7, #12]
 80139b8:	440a      	add	r2, r1
 80139ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80139c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80139c4:	68bb      	ldr	r3, [r7, #8]
 80139c6:	015a      	lsls	r2, r3, #5
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	4413      	add	r3, r2
 80139cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	68ba      	ldr	r2, [r7, #8]
 80139d4:	0151      	lsls	r1, r2, #5
 80139d6:	68fa      	ldr	r2, [r7, #12]
 80139d8:	440a      	add	r2, r1
 80139da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80139de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80139e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80139ec:	683b      	ldr	r3, [r7, #0]
 80139ee:	781b      	ldrb	r3, [r3, #0]
 80139f0:	f003 030f 	and.w	r3, r3, #15
 80139f4:	2101      	movs	r1, #1
 80139f6:	fa01 f303 	lsl.w	r3, r1, r3
 80139fa:	041b      	lsls	r3, r3, #16
 80139fc:	43db      	mvns	r3, r3
 80139fe:	68f9      	ldr	r1, [r7, #12]
 8013a00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013a04:	4013      	ands	r3, r2
 8013a06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013a08:	68fb      	ldr	r3, [r7, #12]
 8013a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a0e:	69da      	ldr	r2, [r3, #28]
 8013a10:	683b      	ldr	r3, [r7, #0]
 8013a12:	781b      	ldrb	r3, [r3, #0]
 8013a14:	f003 030f 	and.w	r3, r3, #15
 8013a18:	2101      	movs	r1, #1
 8013a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8013a1e:	041b      	lsls	r3, r3, #16
 8013a20:	43db      	mvns	r3, r3
 8013a22:	68f9      	ldr	r1, [r7, #12]
 8013a24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013a28:	4013      	ands	r3, r2
 8013a2a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	015a      	lsls	r2, r3, #5
 8013a30:	68fb      	ldr	r3, [r7, #12]
 8013a32:	4413      	add	r3, r2
 8013a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a38:	681a      	ldr	r2, [r3, #0]
 8013a3a:	68bb      	ldr	r3, [r7, #8]
 8013a3c:	0159      	lsls	r1, r3, #5
 8013a3e:	68fb      	ldr	r3, [r7, #12]
 8013a40:	440b      	add	r3, r1
 8013a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a46:	4619      	mov	r1, r3
 8013a48:	4b05      	ldr	r3, [pc, #20]	; (8013a60 <USB_DeactivateEndpoint+0x1b4>)
 8013a4a:	4013      	ands	r3, r2
 8013a4c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013a4e:	2300      	movs	r3, #0
}
 8013a50:	4618      	mov	r0, r3
 8013a52:	3714      	adds	r7, #20
 8013a54:	46bd      	mov	sp, r7
 8013a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5a:	4770      	bx	lr
 8013a5c:	ec337800 	.word	0xec337800
 8013a60:	eff37800 	.word	0xeff37800

08013a64 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013a64:	b580      	push	{r7, lr}
 8013a66:	b08a      	sub	sp, #40	; 0x28
 8013a68:	af02      	add	r7, sp, #8
 8013a6a:	60f8      	str	r0, [r7, #12]
 8013a6c:	60b9      	str	r1, [r7, #8]
 8013a6e:	4613      	mov	r3, r2
 8013a70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013a76:	68bb      	ldr	r3, [r7, #8]
 8013a78:	781b      	ldrb	r3, [r3, #0]
 8013a7a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013a7c:	68bb      	ldr	r3, [r7, #8]
 8013a7e:	785b      	ldrb	r3, [r3, #1]
 8013a80:	2b01      	cmp	r3, #1
 8013a82:	f040 8181 	bne.w	8013d88 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013a86:	68bb      	ldr	r3, [r7, #8]
 8013a88:	691b      	ldr	r3, [r3, #16]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d132      	bne.n	8013af4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013a8e:	69bb      	ldr	r3, [r7, #24]
 8013a90:	015a      	lsls	r2, r3, #5
 8013a92:	69fb      	ldr	r3, [r7, #28]
 8013a94:	4413      	add	r3, r2
 8013a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013a9a:	691a      	ldr	r2, [r3, #16]
 8013a9c:	69bb      	ldr	r3, [r7, #24]
 8013a9e:	0159      	lsls	r1, r3, #5
 8013aa0:	69fb      	ldr	r3, [r7, #28]
 8013aa2:	440b      	add	r3, r1
 8013aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013aa8:	4619      	mov	r1, r3
 8013aaa:	4ba5      	ldr	r3, [pc, #660]	; (8013d40 <USB_EPStartXfer+0x2dc>)
 8013aac:	4013      	ands	r3, r2
 8013aae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013ab0:	69bb      	ldr	r3, [r7, #24]
 8013ab2:	015a      	lsls	r2, r3, #5
 8013ab4:	69fb      	ldr	r3, [r7, #28]
 8013ab6:	4413      	add	r3, r2
 8013ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013abc:	691b      	ldr	r3, [r3, #16]
 8013abe:	69ba      	ldr	r2, [r7, #24]
 8013ac0:	0151      	lsls	r1, r2, #5
 8013ac2:	69fa      	ldr	r2, [r7, #28]
 8013ac4:	440a      	add	r2, r1
 8013ac6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013aca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013ace:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013ad0:	69bb      	ldr	r3, [r7, #24]
 8013ad2:	015a      	lsls	r2, r3, #5
 8013ad4:	69fb      	ldr	r3, [r7, #28]
 8013ad6:	4413      	add	r3, r2
 8013ad8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013adc:	691a      	ldr	r2, [r3, #16]
 8013ade:	69bb      	ldr	r3, [r7, #24]
 8013ae0:	0159      	lsls	r1, r3, #5
 8013ae2:	69fb      	ldr	r3, [r7, #28]
 8013ae4:	440b      	add	r3, r1
 8013ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013aea:	4619      	mov	r1, r3
 8013aec:	4b95      	ldr	r3, [pc, #596]	; (8013d44 <USB_EPStartXfer+0x2e0>)
 8013aee:	4013      	ands	r3, r2
 8013af0:	610b      	str	r3, [r1, #16]
 8013af2:	e092      	b.n	8013c1a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013af4:	69bb      	ldr	r3, [r7, #24]
 8013af6:	015a      	lsls	r2, r3, #5
 8013af8:	69fb      	ldr	r3, [r7, #28]
 8013afa:	4413      	add	r3, r2
 8013afc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b00:	691a      	ldr	r2, [r3, #16]
 8013b02:	69bb      	ldr	r3, [r7, #24]
 8013b04:	0159      	lsls	r1, r3, #5
 8013b06:	69fb      	ldr	r3, [r7, #28]
 8013b08:	440b      	add	r3, r1
 8013b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b0e:	4619      	mov	r1, r3
 8013b10:	4b8c      	ldr	r3, [pc, #560]	; (8013d44 <USB_EPStartXfer+0x2e0>)
 8013b12:	4013      	ands	r3, r2
 8013b14:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013b16:	69bb      	ldr	r3, [r7, #24]
 8013b18:	015a      	lsls	r2, r3, #5
 8013b1a:	69fb      	ldr	r3, [r7, #28]
 8013b1c:	4413      	add	r3, r2
 8013b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b22:	691a      	ldr	r2, [r3, #16]
 8013b24:	69bb      	ldr	r3, [r7, #24]
 8013b26:	0159      	lsls	r1, r3, #5
 8013b28:	69fb      	ldr	r3, [r7, #28]
 8013b2a:	440b      	add	r3, r1
 8013b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b30:	4619      	mov	r1, r3
 8013b32:	4b83      	ldr	r3, [pc, #524]	; (8013d40 <USB_EPStartXfer+0x2dc>)
 8013b34:	4013      	ands	r3, r2
 8013b36:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 8013b38:	69bb      	ldr	r3, [r7, #24]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d11a      	bne.n	8013b74 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8013b3e:	68bb      	ldr	r3, [r7, #8]
 8013b40:	691a      	ldr	r2, [r3, #16]
 8013b42:	68bb      	ldr	r3, [r7, #8]
 8013b44:	689b      	ldr	r3, [r3, #8]
 8013b46:	429a      	cmp	r2, r3
 8013b48:	d903      	bls.n	8013b52 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8013b4a:	68bb      	ldr	r3, [r7, #8]
 8013b4c:	689a      	ldr	r2, [r3, #8]
 8013b4e:	68bb      	ldr	r3, [r7, #8]
 8013b50:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013b52:	69bb      	ldr	r3, [r7, #24]
 8013b54:	015a      	lsls	r2, r3, #5
 8013b56:	69fb      	ldr	r3, [r7, #28]
 8013b58:	4413      	add	r3, r2
 8013b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b5e:	691b      	ldr	r3, [r3, #16]
 8013b60:	69ba      	ldr	r2, [r7, #24]
 8013b62:	0151      	lsls	r1, r2, #5
 8013b64:	69fa      	ldr	r2, [r7, #28]
 8013b66:	440a      	add	r2, r1
 8013b68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013b70:	6113      	str	r3, [r2, #16]
 8013b72:	e01b      	b.n	8013bac <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013b74:	69bb      	ldr	r3, [r7, #24]
 8013b76:	015a      	lsls	r2, r3, #5
 8013b78:	69fb      	ldr	r3, [r7, #28]
 8013b7a:	4413      	add	r3, r2
 8013b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b80:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013b82:	68bb      	ldr	r3, [r7, #8]
 8013b84:	6919      	ldr	r1, [r3, #16]
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	689b      	ldr	r3, [r3, #8]
 8013b8a:	440b      	add	r3, r1
 8013b8c:	1e59      	subs	r1, r3, #1
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	689b      	ldr	r3, [r3, #8]
 8013b92:	fbb1 f3f3 	udiv	r3, r1, r3
 8013b96:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013b98:	4b6b      	ldr	r3, [pc, #428]	; (8013d48 <USB_EPStartXfer+0x2e4>)
 8013b9a:	400b      	ands	r3, r1
 8013b9c:	69b9      	ldr	r1, [r7, #24]
 8013b9e:	0148      	lsls	r0, r1, #5
 8013ba0:	69f9      	ldr	r1, [r7, #28]
 8013ba2:	4401      	add	r1, r0
 8013ba4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013ba8:	4313      	orrs	r3, r2
 8013baa:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013bac:	69bb      	ldr	r3, [r7, #24]
 8013bae:	015a      	lsls	r2, r3, #5
 8013bb0:	69fb      	ldr	r3, [r7, #28]
 8013bb2:	4413      	add	r3, r2
 8013bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bb8:	691a      	ldr	r2, [r3, #16]
 8013bba:	68bb      	ldr	r3, [r7, #8]
 8013bbc:	691b      	ldr	r3, [r3, #16]
 8013bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013bc2:	69b9      	ldr	r1, [r7, #24]
 8013bc4:	0148      	lsls	r0, r1, #5
 8013bc6:	69f9      	ldr	r1, [r7, #28]
 8013bc8:	4401      	add	r1, r0
 8013bca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013bce:	4313      	orrs	r3, r2
 8013bd0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013bd2:	68bb      	ldr	r3, [r7, #8]
 8013bd4:	791b      	ldrb	r3, [r3, #4]
 8013bd6:	2b01      	cmp	r3, #1
 8013bd8:	d11f      	bne.n	8013c1a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013bda:	69bb      	ldr	r3, [r7, #24]
 8013bdc:	015a      	lsls	r2, r3, #5
 8013bde:	69fb      	ldr	r3, [r7, #28]
 8013be0:	4413      	add	r3, r2
 8013be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013be6:	691b      	ldr	r3, [r3, #16]
 8013be8:	69ba      	ldr	r2, [r7, #24]
 8013bea:	0151      	lsls	r1, r2, #5
 8013bec:	69fa      	ldr	r2, [r7, #28]
 8013bee:	440a      	add	r2, r1
 8013bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013bf4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013bf8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013bfa:	69bb      	ldr	r3, [r7, #24]
 8013bfc:	015a      	lsls	r2, r3, #5
 8013bfe:	69fb      	ldr	r3, [r7, #28]
 8013c00:	4413      	add	r3, r2
 8013c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c06:	691b      	ldr	r3, [r3, #16]
 8013c08:	69ba      	ldr	r2, [r7, #24]
 8013c0a:	0151      	lsls	r1, r2, #5
 8013c0c:	69fa      	ldr	r2, [r7, #28]
 8013c0e:	440a      	add	r2, r1
 8013c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013c18:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013c1a:	79fb      	ldrb	r3, [r7, #7]
 8013c1c:	2b01      	cmp	r3, #1
 8013c1e:	d14b      	bne.n	8013cb8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013c20:	68bb      	ldr	r3, [r7, #8]
 8013c22:	69db      	ldr	r3, [r3, #28]
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d009      	beq.n	8013c3c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013c28:	69bb      	ldr	r3, [r7, #24]
 8013c2a:	015a      	lsls	r2, r3, #5
 8013c2c:	69fb      	ldr	r3, [r7, #28]
 8013c2e:	4413      	add	r3, r2
 8013c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c34:	461a      	mov	r2, r3
 8013c36:	68bb      	ldr	r3, [r7, #8]
 8013c38:	69db      	ldr	r3, [r3, #28]
 8013c3a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013c3c:	68bb      	ldr	r3, [r7, #8]
 8013c3e:	791b      	ldrb	r3, [r3, #4]
 8013c40:	2b01      	cmp	r3, #1
 8013c42:	d128      	bne.n	8013c96 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013c44:	69fb      	ldr	r3, [r7, #28]
 8013c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c4a:	689b      	ldr	r3, [r3, #8]
 8013c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d110      	bne.n	8013c76 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013c54:	69bb      	ldr	r3, [r7, #24]
 8013c56:	015a      	lsls	r2, r3, #5
 8013c58:	69fb      	ldr	r3, [r7, #28]
 8013c5a:	4413      	add	r3, r2
 8013c5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	69ba      	ldr	r2, [r7, #24]
 8013c64:	0151      	lsls	r1, r2, #5
 8013c66:	69fa      	ldr	r2, [r7, #28]
 8013c68:	440a      	add	r2, r1
 8013c6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013c72:	6013      	str	r3, [r2, #0]
 8013c74:	e00f      	b.n	8013c96 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013c76:	69bb      	ldr	r3, [r7, #24]
 8013c78:	015a      	lsls	r2, r3, #5
 8013c7a:	69fb      	ldr	r3, [r7, #28]
 8013c7c:	4413      	add	r3, r2
 8013c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c82:	681b      	ldr	r3, [r3, #0]
 8013c84:	69ba      	ldr	r2, [r7, #24]
 8013c86:	0151      	lsls	r1, r2, #5
 8013c88:	69fa      	ldr	r2, [r7, #28]
 8013c8a:	440a      	add	r2, r1
 8013c8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013c90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013c94:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013c96:	69bb      	ldr	r3, [r7, #24]
 8013c98:	015a      	lsls	r2, r3, #5
 8013c9a:	69fb      	ldr	r3, [r7, #28]
 8013c9c:	4413      	add	r3, r2
 8013c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ca2:	681b      	ldr	r3, [r3, #0]
 8013ca4:	69ba      	ldr	r2, [r7, #24]
 8013ca6:	0151      	lsls	r1, r2, #5
 8013ca8:	69fa      	ldr	r2, [r7, #28]
 8013caa:	440a      	add	r2, r1
 8013cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013cb4:	6013      	str	r3, [r2, #0]
 8013cb6:	e16a      	b.n	8013f8e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013cb8:	69bb      	ldr	r3, [r7, #24]
 8013cba:	015a      	lsls	r2, r3, #5
 8013cbc:	69fb      	ldr	r3, [r7, #28]
 8013cbe:	4413      	add	r3, r2
 8013cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	69ba      	ldr	r2, [r7, #24]
 8013cc8:	0151      	lsls	r1, r2, #5
 8013cca:	69fa      	ldr	r2, [r7, #28]
 8013ccc:	440a      	add	r2, r1
 8013cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013cd6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	791b      	ldrb	r3, [r3, #4]
 8013cdc:	2b01      	cmp	r3, #1
 8013cde:	d015      	beq.n	8013d0c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8013ce0:	68bb      	ldr	r3, [r7, #8]
 8013ce2:	691b      	ldr	r3, [r3, #16]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	f000 8152 	beq.w	8013f8e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013cea:	69fb      	ldr	r3, [r7, #28]
 8013cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	781b      	ldrb	r3, [r3, #0]
 8013cf6:	f003 030f 	and.w	r3, r3, #15
 8013cfa:	2101      	movs	r1, #1
 8013cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8013d00:	69f9      	ldr	r1, [r7, #28]
 8013d02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013d06:	4313      	orrs	r3, r2
 8013d08:	634b      	str	r3, [r1, #52]	; 0x34
 8013d0a:	e140      	b.n	8013f8e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013d0c:	69fb      	ldr	r3, [r7, #28]
 8013d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d12:	689b      	ldr	r3, [r3, #8]
 8013d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013d18:	2b00      	cmp	r3, #0
 8013d1a:	d117      	bne.n	8013d4c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013d1c:	69bb      	ldr	r3, [r7, #24]
 8013d1e:	015a      	lsls	r2, r3, #5
 8013d20:	69fb      	ldr	r3, [r7, #28]
 8013d22:	4413      	add	r3, r2
 8013d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d28:	681b      	ldr	r3, [r3, #0]
 8013d2a:	69ba      	ldr	r2, [r7, #24]
 8013d2c:	0151      	lsls	r1, r2, #5
 8013d2e:	69fa      	ldr	r2, [r7, #28]
 8013d30:	440a      	add	r2, r1
 8013d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013d3a:	6013      	str	r3, [r2, #0]
 8013d3c:	e016      	b.n	8013d6c <USB_EPStartXfer+0x308>
 8013d3e:	bf00      	nop
 8013d40:	e007ffff 	.word	0xe007ffff
 8013d44:	fff80000 	.word	0xfff80000
 8013d48:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013d4c:	69bb      	ldr	r3, [r7, #24]
 8013d4e:	015a      	lsls	r2, r3, #5
 8013d50:	69fb      	ldr	r3, [r7, #28]
 8013d52:	4413      	add	r3, r2
 8013d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	69ba      	ldr	r2, [r7, #24]
 8013d5c:	0151      	lsls	r1, r2, #5
 8013d5e:	69fa      	ldr	r2, [r7, #28]
 8013d60:	440a      	add	r2, r1
 8013d62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013d6a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	68d9      	ldr	r1, [r3, #12]
 8013d70:	68bb      	ldr	r3, [r7, #8]
 8013d72:	781a      	ldrb	r2, [r3, #0]
 8013d74:	68bb      	ldr	r3, [r7, #8]
 8013d76:	691b      	ldr	r3, [r3, #16]
 8013d78:	b298      	uxth	r0, r3
 8013d7a:	79fb      	ldrb	r3, [r7, #7]
 8013d7c:	9300      	str	r3, [sp, #0]
 8013d7e:	4603      	mov	r3, r0
 8013d80:	68f8      	ldr	r0, [r7, #12]
 8013d82:	f000 f9b9 	bl	80140f8 <USB_WritePacket>
 8013d86:	e102      	b.n	8013f8e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013d88:	69bb      	ldr	r3, [r7, #24]
 8013d8a:	015a      	lsls	r2, r3, #5
 8013d8c:	69fb      	ldr	r3, [r7, #28]
 8013d8e:	4413      	add	r3, r2
 8013d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d94:	691a      	ldr	r2, [r3, #16]
 8013d96:	69bb      	ldr	r3, [r7, #24]
 8013d98:	0159      	lsls	r1, r3, #5
 8013d9a:	69fb      	ldr	r3, [r7, #28]
 8013d9c:	440b      	add	r3, r1
 8013d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013da2:	4619      	mov	r1, r3
 8013da4:	4b7c      	ldr	r3, [pc, #496]	; (8013f98 <USB_EPStartXfer+0x534>)
 8013da6:	4013      	ands	r3, r2
 8013da8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8013daa:	69bb      	ldr	r3, [r7, #24]
 8013dac:	015a      	lsls	r2, r3, #5
 8013dae:	69fb      	ldr	r3, [r7, #28]
 8013db0:	4413      	add	r3, r2
 8013db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013db6:	691a      	ldr	r2, [r3, #16]
 8013db8:	69bb      	ldr	r3, [r7, #24]
 8013dba:	0159      	lsls	r1, r3, #5
 8013dbc:	69fb      	ldr	r3, [r7, #28]
 8013dbe:	440b      	add	r3, r1
 8013dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dc4:	4619      	mov	r1, r3
 8013dc6:	4b75      	ldr	r3, [pc, #468]	; (8013f9c <USB_EPStartXfer+0x538>)
 8013dc8:	4013      	ands	r3, r2
 8013dca:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 8013dcc:	69bb      	ldr	r3, [r7, #24]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d12f      	bne.n	8013e32 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 8013dd2:	68bb      	ldr	r3, [r7, #8]
 8013dd4:	691b      	ldr	r3, [r3, #16]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d003      	beq.n	8013de2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 8013dda:	68bb      	ldr	r3, [r7, #8]
 8013ddc:	689a      	ldr	r2, [r3, #8]
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8013de2:	68bb      	ldr	r3, [r7, #8]
 8013de4:	689a      	ldr	r2, [r3, #8]
 8013de6:	68bb      	ldr	r3, [r7, #8]
 8013de8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8013dea:	69bb      	ldr	r3, [r7, #24]
 8013dec:	015a      	lsls	r2, r3, #5
 8013dee:	69fb      	ldr	r3, [r7, #28]
 8013df0:	4413      	add	r3, r2
 8013df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013df6:	691a      	ldr	r2, [r3, #16]
 8013df8:	68bb      	ldr	r3, [r7, #8]
 8013dfa:	6a1b      	ldr	r3, [r3, #32]
 8013dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013e00:	69b9      	ldr	r1, [r7, #24]
 8013e02:	0148      	lsls	r0, r1, #5
 8013e04:	69f9      	ldr	r1, [r7, #28]
 8013e06:	4401      	add	r1, r0
 8013e08:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013e0c:	4313      	orrs	r3, r2
 8013e0e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013e10:	69bb      	ldr	r3, [r7, #24]
 8013e12:	015a      	lsls	r2, r3, #5
 8013e14:	69fb      	ldr	r3, [r7, #28]
 8013e16:	4413      	add	r3, r2
 8013e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e1c:	691b      	ldr	r3, [r3, #16]
 8013e1e:	69ba      	ldr	r2, [r7, #24]
 8013e20:	0151      	lsls	r1, r2, #5
 8013e22:	69fa      	ldr	r2, [r7, #28]
 8013e24:	440a      	add	r2, r1
 8013e26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013e2e:	6113      	str	r3, [r2, #16]
 8013e30:	e05f      	b.n	8013ef2 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8013e32:	68bb      	ldr	r3, [r7, #8]
 8013e34:	691b      	ldr	r3, [r3, #16]
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d123      	bne.n	8013e82 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013e3a:	69bb      	ldr	r3, [r7, #24]
 8013e3c:	015a      	lsls	r2, r3, #5
 8013e3e:	69fb      	ldr	r3, [r7, #28]
 8013e40:	4413      	add	r3, r2
 8013e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e46:	691a      	ldr	r2, [r3, #16]
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	689b      	ldr	r3, [r3, #8]
 8013e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013e50:	69b9      	ldr	r1, [r7, #24]
 8013e52:	0148      	lsls	r0, r1, #5
 8013e54:	69f9      	ldr	r1, [r7, #28]
 8013e56:	4401      	add	r1, r0
 8013e58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013e5c:	4313      	orrs	r3, r2
 8013e5e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013e60:	69bb      	ldr	r3, [r7, #24]
 8013e62:	015a      	lsls	r2, r3, #5
 8013e64:	69fb      	ldr	r3, [r7, #28]
 8013e66:	4413      	add	r3, r2
 8013e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e6c:	691b      	ldr	r3, [r3, #16]
 8013e6e:	69ba      	ldr	r2, [r7, #24]
 8013e70:	0151      	lsls	r1, r2, #5
 8013e72:	69fa      	ldr	r2, [r7, #28]
 8013e74:	440a      	add	r2, r1
 8013e76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013e7e:	6113      	str	r3, [r2, #16]
 8013e80:	e037      	b.n	8013ef2 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013e82:	68bb      	ldr	r3, [r7, #8]
 8013e84:	691a      	ldr	r2, [r3, #16]
 8013e86:	68bb      	ldr	r3, [r7, #8]
 8013e88:	689b      	ldr	r3, [r3, #8]
 8013e8a:	4413      	add	r3, r2
 8013e8c:	1e5a      	subs	r2, r3, #1
 8013e8e:	68bb      	ldr	r3, [r7, #8]
 8013e90:	689b      	ldr	r3, [r3, #8]
 8013e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8013e96:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	689b      	ldr	r3, [r3, #8]
 8013e9c:	8afa      	ldrh	r2, [r7, #22]
 8013e9e:	fb03 f202 	mul.w	r2, r3, r2
 8013ea2:	68bb      	ldr	r3, [r7, #8]
 8013ea4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013ea6:	69bb      	ldr	r3, [r7, #24]
 8013ea8:	015a      	lsls	r2, r3, #5
 8013eaa:	69fb      	ldr	r3, [r7, #28]
 8013eac:	4413      	add	r3, r2
 8013eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013eb2:	691a      	ldr	r2, [r3, #16]
 8013eb4:	8afb      	ldrh	r3, [r7, #22]
 8013eb6:	04d9      	lsls	r1, r3, #19
 8013eb8:	4b39      	ldr	r3, [pc, #228]	; (8013fa0 <USB_EPStartXfer+0x53c>)
 8013eba:	400b      	ands	r3, r1
 8013ebc:	69b9      	ldr	r1, [r7, #24]
 8013ebe:	0148      	lsls	r0, r1, #5
 8013ec0:	69f9      	ldr	r1, [r7, #28]
 8013ec2:	4401      	add	r1, r0
 8013ec4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013ec8:	4313      	orrs	r3, r2
 8013eca:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8013ecc:	69bb      	ldr	r3, [r7, #24]
 8013ece:	015a      	lsls	r2, r3, #5
 8013ed0:	69fb      	ldr	r3, [r7, #28]
 8013ed2:	4413      	add	r3, r2
 8013ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ed8:	691a      	ldr	r2, [r3, #16]
 8013eda:	68bb      	ldr	r3, [r7, #8]
 8013edc:	6a1b      	ldr	r3, [r3, #32]
 8013ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013ee2:	69b9      	ldr	r1, [r7, #24]
 8013ee4:	0148      	lsls	r0, r1, #5
 8013ee6:	69f9      	ldr	r1, [r7, #28]
 8013ee8:	4401      	add	r1, r0
 8013eea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8013eee:	4313      	orrs	r3, r2
 8013ef0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8013ef2:	79fb      	ldrb	r3, [r7, #7]
 8013ef4:	2b01      	cmp	r3, #1
 8013ef6:	d10d      	bne.n	8013f14 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013ef8:	68bb      	ldr	r3, [r7, #8]
 8013efa:	68db      	ldr	r3, [r3, #12]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d009      	beq.n	8013f14 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013f00:	68bb      	ldr	r3, [r7, #8]
 8013f02:	68d9      	ldr	r1, [r3, #12]
 8013f04:	69bb      	ldr	r3, [r7, #24]
 8013f06:	015a      	lsls	r2, r3, #5
 8013f08:	69fb      	ldr	r3, [r7, #28]
 8013f0a:	4413      	add	r3, r2
 8013f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f10:	460a      	mov	r2, r1
 8013f12:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8013f14:	68bb      	ldr	r3, [r7, #8]
 8013f16:	791b      	ldrb	r3, [r3, #4]
 8013f18:	2b01      	cmp	r3, #1
 8013f1a:	d128      	bne.n	8013f6e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013f1c:	69fb      	ldr	r3, [r7, #28]
 8013f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f22:	689b      	ldr	r3, [r3, #8]
 8013f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d110      	bne.n	8013f4e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013f2c:	69bb      	ldr	r3, [r7, #24]
 8013f2e:	015a      	lsls	r2, r3, #5
 8013f30:	69fb      	ldr	r3, [r7, #28]
 8013f32:	4413      	add	r3, r2
 8013f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	69ba      	ldr	r2, [r7, #24]
 8013f3c:	0151      	lsls	r1, r2, #5
 8013f3e:	69fa      	ldr	r2, [r7, #28]
 8013f40:	440a      	add	r2, r1
 8013f42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013f4a:	6013      	str	r3, [r2, #0]
 8013f4c:	e00f      	b.n	8013f6e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013f4e:	69bb      	ldr	r3, [r7, #24]
 8013f50:	015a      	lsls	r2, r3, #5
 8013f52:	69fb      	ldr	r3, [r7, #28]
 8013f54:	4413      	add	r3, r2
 8013f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	69ba      	ldr	r2, [r7, #24]
 8013f5e:	0151      	lsls	r1, r2, #5
 8013f60:	69fa      	ldr	r2, [r7, #28]
 8013f62:	440a      	add	r2, r1
 8013f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013f6c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013f6e:	69bb      	ldr	r3, [r7, #24]
 8013f70:	015a      	lsls	r2, r3, #5
 8013f72:	69fb      	ldr	r3, [r7, #28]
 8013f74:	4413      	add	r3, r2
 8013f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	69ba      	ldr	r2, [r7, #24]
 8013f7e:	0151      	lsls	r1, r2, #5
 8013f80:	69fa      	ldr	r2, [r7, #28]
 8013f82:	440a      	add	r2, r1
 8013f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013f88:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013f8c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013f8e:	2300      	movs	r3, #0
}
 8013f90:	4618      	mov	r0, r3
 8013f92:	3720      	adds	r7, #32
 8013f94:	46bd      	mov	sp, r7
 8013f96:	bd80      	pop	{r7, pc}
 8013f98:	fff80000 	.word	0xfff80000
 8013f9c:	e007ffff 	.word	0xe007ffff
 8013fa0:	1ff80000 	.word	0x1ff80000

08013fa4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013fa4:	b480      	push	{r7}
 8013fa6:	b087      	sub	sp, #28
 8013fa8:	af00      	add	r7, sp, #0
 8013faa:	6078      	str	r0, [r7, #4]
 8013fac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013fae:	2300      	movs	r3, #0
 8013fb0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013fba:	683b      	ldr	r3, [r7, #0]
 8013fbc:	785b      	ldrb	r3, [r3, #1]
 8013fbe:	2b01      	cmp	r3, #1
 8013fc0:	d14a      	bne.n	8014058 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013fc2:	683b      	ldr	r3, [r7, #0]
 8013fc4:	781b      	ldrb	r3, [r3, #0]
 8013fc6:	015a      	lsls	r2, r3, #5
 8013fc8:	693b      	ldr	r3, [r7, #16]
 8013fca:	4413      	add	r3, r2
 8013fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013fd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013fda:	f040 8086 	bne.w	80140ea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8013fde:	683b      	ldr	r3, [r7, #0]
 8013fe0:	781b      	ldrb	r3, [r3, #0]
 8013fe2:	015a      	lsls	r2, r3, #5
 8013fe4:	693b      	ldr	r3, [r7, #16]
 8013fe6:	4413      	add	r3, r2
 8013fe8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	683a      	ldr	r2, [r7, #0]
 8013ff0:	7812      	ldrb	r2, [r2, #0]
 8013ff2:	0151      	lsls	r1, r2, #5
 8013ff4:	693a      	ldr	r2, [r7, #16]
 8013ff6:	440a      	add	r2, r1
 8013ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ffc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014000:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8014002:	683b      	ldr	r3, [r7, #0]
 8014004:	781b      	ldrb	r3, [r3, #0]
 8014006:	015a      	lsls	r2, r3, #5
 8014008:	693b      	ldr	r3, [r7, #16]
 801400a:	4413      	add	r3, r2
 801400c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	683a      	ldr	r2, [r7, #0]
 8014014:	7812      	ldrb	r2, [r2, #0]
 8014016:	0151      	lsls	r1, r2, #5
 8014018:	693a      	ldr	r2, [r7, #16]
 801401a:	440a      	add	r2, r1
 801401c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014020:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014024:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014026:	68fb      	ldr	r3, [r7, #12]
 8014028:	3301      	adds	r3, #1
 801402a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801402c:	68fb      	ldr	r3, [r7, #12]
 801402e:	f242 7210 	movw	r2, #10000	; 0x2710
 8014032:	4293      	cmp	r3, r2
 8014034:	d902      	bls.n	801403c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8014036:	2301      	movs	r3, #1
 8014038:	75fb      	strb	r3, [r7, #23]
          break;
 801403a:	e056      	b.n	80140ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801403c:	683b      	ldr	r3, [r7, #0]
 801403e:	781b      	ldrb	r3, [r3, #0]
 8014040:	015a      	lsls	r2, r3, #5
 8014042:	693b      	ldr	r3, [r7, #16]
 8014044:	4413      	add	r3, r2
 8014046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014050:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014054:	d0e7      	beq.n	8014026 <USB_EPStopXfer+0x82>
 8014056:	e048      	b.n	80140ea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014058:	683b      	ldr	r3, [r7, #0]
 801405a:	781b      	ldrb	r3, [r3, #0]
 801405c:	015a      	lsls	r2, r3, #5
 801405e:	693b      	ldr	r3, [r7, #16]
 8014060:	4413      	add	r3, r2
 8014062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801406c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014070:	d13b      	bne.n	80140ea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8014072:	683b      	ldr	r3, [r7, #0]
 8014074:	781b      	ldrb	r3, [r3, #0]
 8014076:	015a      	lsls	r2, r3, #5
 8014078:	693b      	ldr	r3, [r7, #16]
 801407a:	4413      	add	r3, r2
 801407c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	683a      	ldr	r2, [r7, #0]
 8014084:	7812      	ldrb	r2, [r2, #0]
 8014086:	0151      	lsls	r1, r2, #5
 8014088:	693a      	ldr	r2, [r7, #16]
 801408a:	440a      	add	r2, r1
 801408c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014090:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014094:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8014096:	683b      	ldr	r3, [r7, #0]
 8014098:	781b      	ldrb	r3, [r3, #0]
 801409a:	015a      	lsls	r2, r3, #5
 801409c:	693b      	ldr	r3, [r7, #16]
 801409e:	4413      	add	r3, r2
 80140a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	683a      	ldr	r2, [r7, #0]
 80140a8:	7812      	ldrb	r2, [r2, #0]
 80140aa:	0151      	lsls	r1, r2, #5
 80140ac:	693a      	ldr	r2, [r7, #16]
 80140ae:	440a      	add	r2, r1
 80140b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80140b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	3301      	adds	r3, #1
 80140be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80140c0:	68fb      	ldr	r3, [r7, #12]
 80140c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80140c6:	4293      	cmp	r3, r2
 80140c8:	d902      	bls.n	80140d0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80140ca:	2301      	movs	r3, #1
 80140cc:	75fb      	strb	r3, [r7, #23]
          break;
 80140ce:	e00c      	b.n	80140ea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80140d0:	683b      	ldr	r3, [r7, #0]
 80140d2:	781b      	ldrb	r3, [r3, #0]
 80140d4:	015a      	lsls	r2, r3, #5
 80140d6:	693b      	ldr	r3, [r7, #16]
 80140d8:	4413      	add	r3, r2
 80140da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80140e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80140e8:	d0e7      	beq.n	80140ba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80140ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80140ec:	4618      	mov	r0, r3
 80140ee:	371c      	adds	r7, #28
 80140f0:	46bd      	mov	sp, r7
 80140f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f6:	4770      	bx	lr

080140f8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80140f8:	b480      	push	{r7}
 80140fa:	b089      	sub	sp, #36	; 0x24
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	60f8      	str	r0, [r7, #12]
 8014100:	60b9      	str	r1, [r7, #8]
 8014102:	4611      	mov	r1, r2
 8014104:	461a      	mov	r2, r3
 8014106:	460b      	mov	r3, r1
 8014108:	71fb      	strb	r3, [r7, #7]
 801410a:	4613      	mov	r3, r2
 801410c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8014112:	68bb      	ldr	r3, [r7, #8]
 8014114:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8014116:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801411a:	2b00      	cmp	r3, #0
 801411c:	d123      	bne.n	8014166 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801411e:	88bb      	ldrh	r3, [r7, #4]
 8014120:	3303      	adds	r3, #3
 8014122:	089b      	lsrs	r3, r3, #2
 8014124:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014126:	2300      	movs	r3, #0
 8014128:	61bb      	str	r3, [r7, #24]
 801412a:	e018      	b.n	801415e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801412c:	79fb      	ldrb	r3, [r7, #7]
 801412e:	031a      	lsls	r2, r3, #12
 8014130:	697b      	ldr	r3, [r7, #20]
 8014132:	4413      	add	r3, r2
 8014134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014138:	461a      	mov	r2, r3
 801413a:	69fb      	ldr	r3, [r7, #28]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014140:	69fb      	ldr	r3, [r7, #28]
 8014142:	3301      	adds	r3, #1
 8014144:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014146:	69fb      	ldr	r3, [r7, #28]
 8014148:	3301      	adds	r3, #1
 801414a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801414c:	69fb      	ldr	r3, [r7, #28]
 801414e:	3301      	adds	r3, #1
 8014150:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014152:	69fb      	ldr	r3, [r7, #28]
 8014154:	3301      	adds	r3, #1
 8014156:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014158:	69bb      	ldr	r3, [r7, #24]
 801415a:	3301      	adds	r3, #1
 801415c:	61bb      	str	r3, [r7, #24]
 801415e:	69ba      	ldr	r2, [r7, #24]
 8014160:	693b      	ldr	r3, [r7, #16]
 8014162:	429a      	cmp	r2, r3
 8014164:	d3e2      	bcc.n	801412c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014166:	2300      	movs	r3, #0
}
 8014168:	4618      	mov	r0, r3
 801416a:	3724      	adds	r7, #36	; 0x24
 801416c:	46bd      	mov	sp, r7
 801416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014172:	4770      	bx	lr

08014174 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014174:	b480      	push	{r7}
 8014176:	b08b      	sub	sp, #44	; 0x2c
 8014178:	af00      	add	r7, sp, #0
 801417a:	60f8      	str	r0, [r7, #12]
 801417c:	60b9      	str	r1, [r7, #8]
 801417e:	4613      	mov	r3, r2
 8014180:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8014186:	68bb      	ldr	r3, [r7, #8]
 8014188:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801418a:	88fb      	ldrh	r3, [r7, #6]
 801418c:	089b      	lsrs	r3, r3, #2
 801418e:	b29b      	uxth	r3, r3
 8014190:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8014192:	88fb      	ldrh	r3, [r7, #6]
 8014194:	f003 0303 	and.w	r3, r3, #3
 8014198:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801419a:	2300      	movs	r3, #0
 801419c:	623b      	str	r3, [r7, #32]
 801419e:	e014      	b.n	80141ca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80141a0:	69bb      	ldr	r3, [r7, #24]
 80141a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80141a6:	681a      	ldr	r2, [r3, #0]
 80141a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141aa:	601a      	str	r2, [r3, #0]
    pDest++;
 80141ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ae:	3301      	adds	r3, #1
 80141b0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80141b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141b4:	3301      	adds	r3, #1
 80141b6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80141b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141ba:	3301      	adds	r3, #1
 80141bc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80141be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141c0:	3301      	adds	r3, #1
 80141c2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80141c4:	6a3b      	ldr	r3, [r7, #32]
 80141c6:	3301      	adds	r3, #1
 80141c8:	623b      	str	r3, [r7, #32]
 80141ca:	6a3a      	ldr	r2, [r7, #32]
 80141cc:	697b      	ldr	r3, [r7, #20]
 80141ce:	429a      	cmp	r2, r3
 80141d0:	d3e6      	bcc.n	80141a0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80141d2:	8bfb      	ldrh	r3, [r7, #30]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	d01e      	beq.n	8014216 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80141d8:	2300      	movs	r3, #0
 80141da:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80141dc:	69bb      	ldr	r3, [r7, #24]
 80141de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80141e2:	461a      	mov	r2, r3
 80141e4:	f107 0310 	add.w	r3, r7, #16
 80141e8:	6812      	ldr	r2, [r2, #0]
 80141ea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80141ec:	693a      	ldr	r2, [r7, #16]
 80141ee:	6a3b      	ldr	r3, [r7, #32]
 80141f0:	b2db      	uxtb	r3, r3
 80141f2:	00db      	lsls	r3, r3, #3
 80141f4:	fa22 f303 	lsr.w	r3, r2, r3
 80141f8:	b2da      	uxtb	r2, r3
 80141fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141fc:	701a      	strb	r2, [r3, #0]
      i++;
 80141fe:	6a3b      	ldr	r3, [r7, #32]
 8014200:	3301      	adds	r3, #1
 8014202:	623b      	str	r3, [r7, #32]
      pDest++;
 8014204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014206:	3301      	adds	r3, #1
 8014208:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 801420a:	8bfb      	ldrh	r3, [r7, #30]
 801420c:	3b01      	subs	r3, #1
 801420e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8014210:	8bfb      	ldrh	r3, [r7, #30]
 8014212:	2b00      	cmp	r3, #0
 8014214:	d1ea      	bne.n	80141ec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8014216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014218:	4618      	mov	r0, r3
 801421a:	372c      	adds	r7, #44	; 0x2c
 801421c:	46bd      	mov	sp, r7
 801421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014222:	4770      	bx	lr

08014224 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014224:	b480      	push	{r7}
 8014226:	b085      	sub	sp, #20
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
 801422c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014232:	683b      	ldr	r3, [r7, #0]
 8014234:	781b      	ldrb	r3, [r3, #0]
 8014236:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014238:	683b      	ldr	r3, [r7, #0]
 801423a:	785b      	ldrb	r3, [r3, #1]
 801423c:	2b01      	cmp	r3, #1
 801423e:	d12c      	bne.n	801429a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014240:	68bb      	ldr	r3, [r7, #8]
 8014242:	015a      	lsls	r2, r3, #5
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	4413      	add	r3, r2
 8014248:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801424c:	681b      	ldr	r3, [r3, #0]
 801424e:	2b00      	cmp	r3, #0
 8014250:	db12      	blt.n	8014278 <USB_EPSetStall+0x54>
 8014252:	68bb      	ldr	r3, [r7, #8]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d00f      	beq.n	8014278 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014258:	68bb      	ldr	r3, [r7, #8]
 801425a:	015a      	lsls	r2, r3, #5
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	4413      	add	r3, r2
 8014260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014264:	681b      	ldr	r3, [r3, #0]
 8014266:	68ba      	ldr	r2, [r7, #8]
 8014268:	0151      	lsls	r1, r2, #5
 801426a:	68fa      	ldr	r2, [r7, #12]
 801426c:	440a      	add	r2, r1
 801426e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014272:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014276:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014278:	68bb      	ldr	r3, [r7, #8]
 801427a:	015a      	lsls	r2, r3, #5
 801427c:	68fb      	ldr	r3, [r7, #12]
 801427e:	4413      	add	r3, r2
 8014280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014284:	681b      	ldr	r3, [r3, #0]
 8014286:	68ba      	ldr	r2, [r7, #8]
 8014288:	0151      	lsls	r1, r2, #5
 801428a:	68fa      	ldr	r2, [r7, #12]
 801428c:	440a      	add	r2, r1
 801428e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014292:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014296:	6013      	str	r3, [r2, #0]
 8014298:	e02b      	b.n	80142f2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801429a:	68bb      	ldr	r3, [r7, #8]
 801429c:	015a      	lsls	r2, r3, #5
 801429e:	68fb      	ldr	r3, [r7, #12]
 80142a0:	4413      	add	r3, r2
 80142a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	db12      	blt.n	80142d2 <USB_EPSetStall+0xae>
 80142ac:	68bb      	ldr	r3, [r7, #8]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d00f      	beq.n	80142d2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80142b2:	68bb      	ldr	r3, [r7, #8]
 80142b4:	015a      	lsls	r2, r3, #5
 80142b6:	68fb      	ldr	r3, [r7, #12]
 80142b8:	4413      	add	r3, r2
 80142ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	68ba      	ldr	r2, [r7, #8]
 80142c2:	0151      	lsls	r1, r2, #5
 80142c4:	68fa      	ldr	r2, [r7, #12]
 80142c6:	440a      	add	r2, r1
 80142c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80142cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80142d0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80142d2:	68bb      	ldr	r3, [r7, #8]
 80142d4:	015a      	lsls	r2, r3, #5
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	4413      	add	r3, r2
 80142da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80142de:	681b      	ldr	r3, [r3, #0]
 80142e0:	68ba      	ldr	r2, [r7, #8]
 80142e2:	0151      	lsls	r1, r2, #5
 80142e4:	68fa      	ldr	r2, [r7, #12]
 80142e6:	440a      	add	r2, r1
 80142e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80142ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80142f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80142f2:	2300      	movs	r3, #0
}
 80142f4:	4618      	mov	r0, r3
 80142f6:	3714      	adds	r7, #20
 80142f8:	46bd      	mov	sp, r7
 80142fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142fe:	4770      	bx	lr

08014300 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014300:	b480      	push	{r7}
 8014302:	b085      	sub	sp, #20
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
 8014308:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801430e:	683b      	ldr	r3, [r7, #0]
 8014310:	781b      	ldrb	r3, [r3, #0]
 8014312:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014314:	683b      	ldr	r3, [r7, #0]
 8014316:	785b      	ldrb	r3, [r3, #1]
 8014318:	2b01      	cmp	r3, #1
 801431a:	d128      	bne.n	801436e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801431c:	68bb      	ldr	r3, [r7, #8]
 801431e:	015a      	lsls	r2, r3, #5
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	4413      	add	r3, r2
 8014324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	68ba      	ldr	r2, [r7, #8]
 801432c:	0151      	lsls	r1, r2, #5
 801432e:	68fa      	ldr	r2, [r7, #12]
 8014330:	440a      	add	r2, r1
 8014332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014336:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801433a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801433c:	683b      	ldr	r3, [r7, #0]
 801433e:	791b      	ldrb	r3, [r3, #4]
 8014340:	2b03      	cmp	r3, #3
 8014342:	d003      	beq.n	801434c <USB_EPClearStall+0x4c>
 8014344:	683b      	ldr	r3, [r7, #0]
 8014346:	791b      	ldrb	r3, [r3, #4]
 8014348:	2b02      	cmp	r3, #2
 801434a:	d138      	bne.n	80143be <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801434c:	68bb      	ldr	r3, [r7, #8]
 801434e:	015a      	lsls	r2, r3, #5
 8014350:	68fb      	ldr	r3, [r7, #12]
 8014352:	4413      	add	r3, r2
 8014354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	68ba      	ldr	r2, [r7, #8]
 801435c:	0151      	lsls	r1, r2, #5
 801435e:	68fa      	ldr	r2, [r7, #12]
 8014360:	440a      	add	r2, r1
 8014362:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801436a:	6013      	str	r3, [r2, #0]
 801436c:	e027      	b.n	80143be <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801436e:	68bb      	ldr	r3, [r7, #8]
 8014370:	015a      	lsls	r2, r3, #5
 8014372:	68fb      	ldr	r3, [r7, #12]
 8014374:	4413      	add	r3, r2
 8014376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	68ba      	ldr	r2, [r7, #8]
 801437e:	0151      	lsls	r1, r2, #5
 8014380:	68fa      	ldr	r2, [r7, #12]
 8014382:	440a      	add	r2, r1
 8014384:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014388:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801438c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801438e:	683b      	ldr	r3, [r7, #0]
 8014390:	791b      	ldrb	r3, [r3, #4]
 8014392:	2b03      	cmp	r3, #3
 8014394:	d003      	beq.n	801439e <USB_EPClearStall+0x9e>
 8014396:	683b      	ldr	r3, [r7, #0]
 8014398:	791b      	ldrb	r3, [r3, #4]
 801439a:	2b02      	cmp	r3, #2
 801439c:	d10f      	bne.n	80143be <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801439e:	68bb      	ldr	r3, [r7, #8]
 80143a0:	015a      	lsls	r2, r3, #5
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	4413      	add	r3, r2
 80143a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	68ba      	ldr	r2, [r7, #8]
 80143ae:	0151      	lsls	r1, r2, #5
 80143b0:	68fa      	ldr	r2, [r7, #12]
 80143b2:	440a      	add	r2, r1
 80143b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80143bc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80143be:	2300      	movs	r3, #0
}
 80143c0:	4618      	mov	r0, r3
 80143c2:	3714      	adds	r7, #20
 80143c4:	46bd      	mov	sp, r7
 80143c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ca:	4770      	bx	lr

080143cc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80143cc:	b480      	push	{r7}
 80143ce:	b085      	sub	sp, #20
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
 80143d4:	460b      	mov	r3, r1
 80143d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80143d8:	687b      	ldr	r3, [r7, #4]
 80143da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	68fa      	ldr	r2, [r7, #12]
 80143e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80143ea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80143ee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80143f6:	681a      	ldr	r2, [r3, #0]
 80143f8:	78fb      	ldrb	r3, [r7, #3]
 80143fa:	011b      	lsls	r3, r3, #4
 80143fc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014400:	68f9      	ldr	r1, [r7, #12]
 8014402:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014406:	4313      	orrs	r3, r2
 8014408:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801440a:	2300      	movs	r3, #0
}
 801440c:	4618      	mov	r0, r3
 801440e:	3714      	adds	r7, #20
 8014410:	46bd      	mov	sp, r7
 8014412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014416:	4770      	bx	lr

08014418 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014418:	b480      	push	{r7}
 801441a:	b085      	sub	sp, #20
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	68fa      	ldr	r2, [r7, #12]
 801442e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014432:	f023 0303 	bic.w	r3, r3, #3
 8014436:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801443e:	685b      	ldr	r3, [r3, #4]
 8014440:	68fa      	ldr	r2, [r7, #12]
 8014442:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014446:	f023 0302 	bic.w	r3, r3, #2
 801444a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801444c:	2300      	movs	r3, #0
}
 801444e:	4618      	mov	r0, r3
 8014450:	3714      	adds	r7, #20
 8014452:	46bd      	mov	sp, r7
 8014454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014458:	4770      	bx	lr

0801445a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801445a:	b480      	push	{r7}
 801445c:	b085      	sub	sp, #20
 801445e:	af00      	add	r7, sp, #0
 8014460:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	68fa      	ldr	r2, [r7, #12]
 8014470:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014474:	f023 0303 	bic.w	r3, r3, #3
 8014478:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801447a:	68fb      	ldr	r3, [r7, #12]
 801447c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014480:	685b      	ldr	r3, [r3, #4]
 8014482:	68fa      	ldr	r2, [r7, #12]
 8014484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014488:	f043 0302 	orr.w	r3, r3, #2
 801448c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801448e:	2300      	movs	r3, #0
}
 8014490:	4618      	mov	r0, r3
 8014492:	3714      	adds	r7, #20
 8014494:	46bd      	mov	sp, r7
 8014496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449a:	4770      	bx	lr

0801449c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801449c:	b480      	push	{r7}
 801449e:	b085      	sub	sp, #20
 80144a0:	af00      	add	r7, sp, #0
 80144a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	695b      	ldr	r3, [r3, #20]
 80144a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	699b      	ldr	r3, [r3, #24]
 80144ae:	68fa      	ldr	r2, [r7, #12]
 80144b0:	4013      	ands	r3, r2
 80144b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80144b4:	68fb      	ldr	r3, [r7, #12]
}
 80144b6:	4618      	mov	r0, r3
 80144b8:	3714      	adds	r7, #20
 80144ba:	46bd      	mov	sp, r7
 80144bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c0:	4770      	bx	lr

080144c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80144c2:	b480      	push	{r7}
 80144c4:	b085      	sub	sp, #20
 80144c6:	af00      	add	r7, sp, #0
 80144c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144d4:	699b      	ldr	r3, [r3, #24]
 80144d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144de:	69db      	ldr	r3, [r3, #28]
 80144e0:	68ba      	ldr	r2, [r7, #8]
 80144e2:	4013      	ands	r3, r2
 80144e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	0c1b      	lsrs	r3, r3, #16
}
 80144ea:	4618      	mov	r0, r3
 80144ec:	3714      	adds	r7, #20
 80144ee:	46bd      	mov	sp, r7
 80144f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144f4:	4770      	bx	lr

080144f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80144f6:	b480      	push	{r7}
 80144f8:	b085      	sub	sp, #20
 80144fa:	af00      	add	r7, sp, #0
 80144fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014502:	68fb      	ldr	r3, [r7, #12]
 8014504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014508:	699b      	ldr	r3, [r3, #24]
 801450a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014512:	69db      	ldr	r3, [r3, #28]
 8014514:	68ba      	ldr	r2, [r7, #8]
 8014516:	4013      	ands	r3, r2
 8014518:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801451a:	68bb      	ldr	r3, [r7, #8]
 801451c:	b29b      	uxth	r3, r3
}
 801451e:	4618      	mov	r0, r3
 8014520:	3714      	adds	r7, #20
 8014522:	46bd      	mov	sp, r7
 8014524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014528:	4770      	bx	lr

0801452a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801452a:	b480      	push	{r7}
 801452c:	b085      	sub	sp, #20
 801452e:	af00      	add	r7, sp, #0
 8014530:	6078      	str	r0, [r7, #4]
 8014532:	460b      	mov	r3, r1
 8014534:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801453a:	78fb      	ldrb	r3, [r7, #3]
 801453c:	015a      	lsls	r2, r3, #5
 801453e:	68fb      	ldr	r3, [r7, #12]
 8014540:	4413      	add	r3, r2
 8014542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014546:	689b      	ldr	r3, [r3, #8]
 8014548:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014550:	695b      	ldr	r3, [r3, #20]
 8014552:	68ba      	ldr	r2, [r7, #8]
 8014554:	4013      	ands	r3, r2
 8014556:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014558:	68bb      	ldr	r3, [r7, #8]
}
 801455a:	4618      	mov	r0, r3
 801455c:	3714      	adds	r7, #20
 801455e:	46bd      	mov	sp, r7
 8014560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014564:	4770      	bx	lr

08014566 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014566:	b480      	push	{r7}
 8014568:	b087      	sub	sp, #28
 801456a:	af00      	add	r7, sp, #0
 801456c:	6078      	str	r0, [r7, #4]
 801456e:	460b      	mov	r3, r1
 8014570:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014576:	697b      	ldr	r3, [r7, #20]
 8014578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801457c:	691b      	ldr	r3, [r3, #16]
 801457e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014580:	697b      	ldr	r3, [r7, #20]
 8014582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014588:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801458a:	78fb      	ldrb	r3, [r7, #3]
 801458c:	f003 030f 	and.w	r3, r3, #15
 8014590:	68fa      	ldr	r2, [r7, #12]
 8014592:	fa22 f303 	lsr.w	r3, r2, r3
 8014596:	01db      	lsls	r3, r3, #7
 8014598:	b2db      	uxtb	r3, r3
 801459a:	693a      	ldr	r2, [r7, #16]
 801459c:	4313      	orrs	r3, r2
 801459e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80145a0:	78fb      	ldrb	r3, [r7, #3]
 80145a2:	015a      	lsls	r2, r3, #5
 80145a4:	697b      	ldr	r3, [r7, #20]
 80145a6:	4413      	add	r3, r2
 80145a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145ac:	689b      	ldr	r3, [r3, #8]
 80145ae:	693a      	ldr	r2, [r7, #16]
 80145b0:	4013      	ands	r3, r2
 80145b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80145b4:	68bb      	ldr	r3, [r7, #8]
}
 80145b6:	4618      	mov	r0, r3
 80145b8:	371c      	adds	r7, #28
 80145ba:	46bd      	mov	sp, r7
 80145bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c0:	4770      	bx	lr

080145c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80145c2:	b480      	push	{r7}
 80145c4:	b083      	sub	sp, #12
 80145c6:	af00      	add	r7, sp, #0
 80145c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	695b      	ldr	r3, [r3, #20]
 80145ce:	f003 0301 	and.w	r3, r3, #1
}
 80145d2:	4618      	mov	r0, r3
 80145d4:	370c      	adds	r7, #12
 80145d6:	46bd      	mov	sp, r7
 80145d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145dc:	4770      	bx	lr
	...

080145e0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80145e0:	b480      	push	{r7}
 80145e2:	b085      	sub	sp, #20
 80145e4:	af00      	add	r7, sp, #0
 80145e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80145e8:	687b      	ldr	r3, [r7, #4]
 80145ea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80145ec:	68fb      	ldr	r3, [r7, #12]
 80145ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145f2:	681a      	ldr	r2, [r3, #0]
 80145f4:	68fb      	ldr	r3, [r7, #12]
 80145f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145fa:	4619      	mov	r1, r3
 80145fc:	4b09      	ldr	r3, [pc, #36]	; (8014624 <USB_ActivateSetup+0x44>)
 80145fe:	4013      	ands	r3, r2
 8014600:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014602:	68fb      	ldr	r3, [r7, #12]
 8014604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014608:	685b      	ldr	r3, [r3, #4]
 801460a:	68fa      	ldr	r2, [r7, #12]
 801460c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014614:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014616:	2300      	movs	r3, #0
}
 8014618:	4618      	mov	r0, r3
 801461a:	3714      	adds	r7, #20
 801461c:	46bd      	mov	sp, r7
 801461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014622:	4770      	bx	lr
 8014624:	fffff800 	.word	0xfffff800

08014628 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014628:	b480      	push	{r7}
 801462a:	b087      	sub	sp, #28
 801462c:	af00      	add	r7, sp, #0
 801462e:	60f8      	str	r0, [r7, #12]
 8014630:	460b      	mov	r3, r1
 8014632:	607a      	str	r2, [r7, #4]
 8014634:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014636:	68fb      	ldr	r3, [r7, #12]
 8014638:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	333c      	adds	r3, #60	; 0x3c
 801463e:	3304      	adds	r3, #4
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014644:	693b      	ldr	r3, [r7, #16]
 8014646:	4a26      	ldr	r2, [pc, #152]	; (80146e0 <USB_EP0_OutStart+0xb8>)
 8014648:	4293      	cmp	r3, r2
 801464a:	d90a      	bls.n	8014662 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801464c:	697b      	ldr	r3, [r7, #20]
 801464e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014658:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801465c:	d101      	bne.n	8014662 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801465e:	2300      	movs	r3, #0
 8014660:	e037      	b.n	80146d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014662:	697b      	ldr	r3, [r7, #20]
 8014664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014668:	461a      	mov	r2, r3
 801466a:	2300      	movs	r3, #0
 801466c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801466e:	697b      	ldr	r3, [r7, #20]
 8014670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014674:	691b      	ldr	r3, [r3, #16]
 8014676:	697a      	ldr	r2, [r7, #20]
 8014678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801467c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014680:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014682:	697b      	ldr	r3, [r7, #20]
 8014684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014688:	691b      	ldr	r3, [r3, #16]
 801468a:	697a      	ldr	r2, [r7, #20]
 801468c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014690:	f043 0318 	orr.w	r3, r3, #24
 8014694:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014696:	697b      	ldr	r3, [r7, #20]
 8014698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801469c:	691b      	ldr	r3, [r3, #16]
 801469e:	697a      	ldr	r2, [r7, #20]
 80146a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80146a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80146aa:	7afb      	ldrb	r3, [r7, #11]
 80146ac:	2b01      	cmp	r3, #1
 80146ae:	d10f      	bne.n	80146d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80146b0:	697b      	ldr	r3, [r7, #20]
 80146b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146b6:	461a      	mov	r2, r3
 80146b8:	687b      	ldr	r3, [r7, #4]
 80146ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80146bc:	697b      	ldr	r3, [r7, #20]
 80146be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	697a      	ldr	r2, [r7, #20]
 80146c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80146ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80146d0:	2300      	movs	r3, #0
}
 80146d2:	4618      	mov	r0, r3
 80146d4:	371c      	adds	r7, #28
 80146d6:	46bd      	mov	sp, r7
 80146d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146dc:	4770      	bx	lr
 80146de:	bf00      	nop
 80146e0:	4f54300a 	.word	0x4f54300a

080146e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80146e4:	b480      	push	{r7}
 80146e6:	b085      	sub	sp, #20
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80146ec:	2300      	movs	r3, #0
 80146ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	3301      	adds	r3, #1
 80146f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	4a13      	ldr	r2, [pc, #76]	; (8014748 <USB_CoreReset+0x64>)
 80146fa:	4293      	cmp	r3, r2
 80146fc:	d901      	bls.n	8014702 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80146fe:	2303      	movs	r3, #3
 8014700:	e01b      	b.n	801473a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	691b      	ldr	r3, [r3, #16]
 8014706:	2b00      	cmp	r3, #0
 8014708:	daf2      	bge.n	80146f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801470a:	2300      	movs	r3, #0
 801470c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	691b      	ldr	r3, [r3, #16]
 8014712:	f043 0201 	orr.w	r2, r3, #1
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801471a:	68fb      	ldr	r3, [r7, #12]
 801471c:	3301      	adds	r3, #1
 801471e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014720:	68fb      	ldr	r3, [r7, #12]
 8014722:	4a09      	ldr	r2, [pc, #36]	; (8014748 <USB_CoreReset+0x64>)
 8014724:	4293      	cmp	r3, r2
 8014726:	d901      	bls.n	801472c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014728:	2303      	movs	r3, #3
 801472a:	e006      	b.n	801473a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	691b      	ldr	r3, [r3, #16]
 8014730:	f003 0301 	and.w	r3, r3, #1
 8014734:	2b01      	cmp	r3, #1
 8014736:	d0f0      	beq.n	801471a <USB_CoreReset+0x36>

  return HAL_OK;
 8014738:	2300      	movs	r3, #0
}
 801473a:	4618      	mov	r0, r3
 801473c:	3714      	adds	r7, #20
 801473e:	46bd      	mov	sp, r7
 8014740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014744:	4770      	bx	lr
 8014746:	bf00      	nop
 8014748:	00030d40 	.word	0x00030d40

0801474c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801474c:	b580      	push	{r7, lr}
 801474e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8014750:	4904      	ldr	r1, [pc, #16]	; (8014764 <MX_FATFS_Init+0x18>)
 8014752:	4805      	ldr	r0, [pc, #20]	; (8014768 <MX_FATFS_Init+0x1c>)
 8014754:	f002 fa80 	bl	8016c58 <FATFS_LinkDriver>
 8014758:	4603      	mov	r3, r0
 801475a:	461a      	mov	r2, r3
 801475c:	4b03      	ldr	r3, [pc, #12]	; (801476c <MX_FATFS_Init+0x20>)
 801475e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8014760:	bf00      	nop
 8014762:	bd80      	pop	{r7, pc}
 8014764:	240016f8 	.word	0x240016f8
 8014768:	08018c40 	.word	0x08018c40
 801476c:	240016f4 	.word	0x240016f4

08014770 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8014770:	b580      	push	{r7, lr}
 8014772:	b082      	sub	sp, #8
 8014774:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8014776:	2300      	movs	r3, #0
 8014778:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 801477a:	f000 f885 	bl	8014888 <BSP_SD_IsDetected>
 801477e:	4603      	mov	r3, r0
 8014780:	2b01      	cmp	r3, #1
 8014782:	d001      	beq.n	8014788 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8014784:	2302      	movs	r3, #2
 8014786:	e012      	b.n	80147ae <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8014788:	480b      	ldr	r0, [pc, #44]	; (80147b8 <BSP_SD_Init+0x48>)
 801478a:	f7f8 ff41 	bl	800d610 <HAL_SD_Init>
 801478e:	4603      	mov	r3, r0
 8014790:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8014792:	79fb      	ldrb	r3, [r7, #7]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d109      	bne.n	80147ac <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8014798:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801479c:	4806      	ldr	r0, [pc, #24]	; (80147b8 <BSP_SD_Init+0x48>)
 801479e:	f7f9 fdf7 	bl	800e390 <HAL_SD_ConfigWideBusOperation>
 80147a2:	4603      	mov	r3, r0
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d001      	beq.n	80147ac <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80147a8:	2301      	movs	r3, #1
 80147aa:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80147ac:	79fb      	ldrb	r3, [r7, #7]
}
 80147ae:	4618      	mov	r0, r3
 80147b0:	3708      	adds	r7, #8
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd80      	pop	{r7, pc}
 80147b6:	bf00      	nop
 80147b8:	24000fc4 	.word	0x24000fc4

080147bc <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80147bc:	b580      	push	{r7, lr}
 80147be:	b086      	sub	sp, #24
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	60f8      	str	r0, [r7, #12]
 80147c4:	60b9      	str	r1, [r7, #8]
 80147c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80147c8:	2300      	movs	r3, #0
 80147ca:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	68ba      	ldr	r2, [r7, #8]
 80147d0:	68f9      	ldr	r1, [r7, #12]
 80147d2:	4806      	ldr	r0, [pc, #24]	; (80147ec <BSP_SD_ReadBlocks_DMA+0x30>)
 80147d4:	f7f9 f83c 	bl	800d850 <HAL_SD_ReadBlocks_DMA>
 80147d8:	4603      	mov	r3, r0
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d001      	beq.n	80147e2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80147de:	2301      	movs	r3, #1
 80147e0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80147e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80147e4:	4618      	mov	r0, r3
 80147e6:	3718      	adds	r7, #24
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}
 80147ec:	24000fc4 	.word	0x24000fc4

080147f0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80147f0:	b580      	push	{r7, lr}
 80147f2:	b086      	sub	sp, #24
 80147f4:	af00      	add	r7, sp, #0
 80147f6:	60f8      	str	r0, [r7, #12]
 80147f8:	60b9      	str	r1, [r7, #8]
 80147fa:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80147fc:	2300      	movs	r3, #0
 80147fe:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	68ba      	ldr	r2, [r7, #8]
 8014804:	68f9      	ldr	r1, [r7, #12]
 8014806:	4806      	ldr	r0, [pc, #24]	; (8014820 <BSP_SD_WriteBlocks_DMA+0x30>)
 8014808:	f7f9 f8ca 	bl	800d9a0 <HAL_SD_WriteBlocks_DMA>
 801480c:	4603      	mov	r3, r0
 801480e:	2b00      	cmp	r3, #0
 8014810:	d001      	beq.n	8014816 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8014812:	2301      	movs	r3, #1
 8014814:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8014816:	7dfb      	ldrb	r3, [r7, #23]
}
 8014818:	4618      	mov	r0, r3
 801481a:	3718      	adds	r7, #24
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}
 8014820:	24000fc4 	.word	0x24000fc4

08014824 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8014824:	b580      	push	{r7, lr}
 8014826:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8014828:	4805      	ldr	r0, [pc, #20]	; (8014840 <BSP_SD_GetCardState+0x1c>)
 801482a:	f7f9 fec3 	bl	800e5b4 <HAL_SD_GetCardState>
 801482e:	4603      	mov	r3, r0
 8014830:	2b04      	cmp	r3, #4
 8014832:	bf14      	ite	ne
 8014834:	2301      	movne	r3, #1
 8014836:	2300      	moveq	r3, #0
 8014838:	b2db      	uxtb	r3, r3
}
 801483a:	4618      	mov	r0, r3
 801483c:	bd80      	pop	{r7, pc}
 801483e:	bf00      	nop
 8014840:	24000fc4 	.word	0x24000fc4

08014844 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8014844:	b580      	push	{r7, lr}
 8014846:	b082      	sub	sp, #8
 8014848:	af00      	add	r7, sp, #0
 801484a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 801484c:	6879      	ldr	r1, [r7, #4]
 801484e:	4803      	ldr	r0, [pc, #12]	; (801485c <BSP_SD_GetCardInfo+0x18>)
 8014850:	f7f9 fd72 	bl	800e338 <HAL_SD_GetCardInfo>
}
 8014854:	bf00      	nop
 8014856:	3708      	adds	r7, #8
 8014858:	46bd      	mov	sp, r7
 801485a:	bd80      	pop	{r7, pc}
 801485c:	24000fc4 	.word	0x24000fc4

08014860 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014860:	b580      	push	{r7, lr}
 8014862:	b082      	sub	sp, #8
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8014868:	f000 f9a0 	bl	8014bac <BSP_SD_WriteCpltCallback>
}
 801486c:	bf00      	nop
 801486e:	3708      	adds	r7, #8
 8014870:	46bd      	mov	sp, r7
 8014872:	bd80      	pop	{r7, pc}

08014874 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8014874:	b580      	push	{r7, lr}
 8014876:	b082      	sub	sp, #8
 8014878:	af00      	add	r7, sp, #0
 801487a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 801487c:	f000 f9a2 	bl	8014bc4 <BSP_SD_ReadCpltCallback>
}
 8014880:	bf00      	nop
 8014882:	3708      	adds	r7, #8
 8014884:	46bd      	mov	sp, r7
 8014886:	bd80      	pop	{r7, pc}

08014888 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8014888:	b580      	push	{r7, lr}
 801488a:	b082      	sub	sp, #8
 801488c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801488e:	2301      	movs	r3, #1
 8014890:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8014892:	f000 f80b 	bl	80148ac <BSP_PlatformIsDetected>
 8014896:	4603      	mov	r3, r0
 8014898:	2b00      	cmp	r3, #0
 801489a:	d101      	bne.n	80148a0 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801489c:	2300      	movs	r3, #0
 801489e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80148a0:	79fb      	ldrb	r3, [r7, #7]
 80148a2:	b2db      	uxtb	r3, r3
}
 80148a4:	4618      	mov	r0, r3
 80148a6:	3708      	adds	r7, #8
 80148a8:	46bd      	mov	sp, r7
 80148aa:	bd80      	pop	{r7, pc}

080148ac <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80148ac:	b580      	push	{r7, lr}
 80148ae:	b082      	sub	sp, #8
 80148b0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80148b2:	2301      	movs	r3, #1
 80148b4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80148b6:	2104      	movs	r1, #4
 80148b8:	4806      	ldr	r0, [pc, #24]	; (80148d4 <BSP_PlatformIsDetected+0x28>)
 80148ba:	f7f3 fccf 	bl	800825c <HAL_GPIO_ReadPin>
 80148be:	4603      	mov	r3, r0
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d001      	beq.n	80148c8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80148c4:	2300      	movs	r3, #0
 80148c6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80148c8:	79fb      	ldrb	r3, [r7, #7]
}
 80148ca:	4618      	mov	r0, r3
 80148cc:	3708      	adds	r7, #8
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd80      	pop	{r7, pc}
 80148d2:	bf00      	nop
 80148d4:	58020400 	.word	0x58020400

080148d8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	b084      	sub	sp, #16
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80148e0:	f7ef fa16 	bl	8003d10 <HAL_GetTick>
 80148e4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80148e6:	e006      	b.n	80148f6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80148e8:	f7ff ff9c 	bl	8014824 <BSP_SD_GetCardState>
 80148ec:	4603      	mov	r3, r0
 80148ee:	2b00      	cmp	r3, #0
 80148f0:	d101      	bne.n	80148f6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80148f2:	2300      	movs	r3, #0
 80148f4:	e009      	b.n	801490a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80148f6:	f7ef fa0b 	bl	8003d10 <HAL_GetTick>
 80148fa:	4602      	mov	r2, r0
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	1ad3      	subs	r3, r2, r3
 8014900:	687a      	ldr	r2, [r7, #4]
 8014902:	429a      	cmp	r2, r3
 8014904:	d8f0      	bhi.n	80148e8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8014906:	f04f 33ff 	mov.w	r3, #4294967295
}
 801490a:	4618      	mov	r0, r3
 801490c:	3710      	adds	r7, #16
 801490e:	46bd      	mov	sp, r7
 8014910:	bd80      	pop	{r7, pc}
	...

08014914 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8014914:	b580      	push	{r7, lr}
 8014916:	b082      	sub	sp, #8
 8014918:	af00      	add	r7, sp, #0
 801491a:	4603      	mov	r3, r0
 801491c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801491e:	4b0b      	ldr	r3, [pc, #44]	; (801494c <SD_CheckStatus+0x38>)
 8014920:	2201      	movs	r2, #1
 8014922:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8014924:	f7ff ff7e 	bl	8014824 <BSP_SD_GetCardState>
 8014928:	4603      	mov	r3, r0
 801492a:	2b00      	cmp	r3, #0
 801492c:	d107      	bne.n	801493e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801492e:	4b07      	ldr	r3, [pc, #28]	; (801494c <SD_CheckStatus+0x38>)
 8014930:	781b      	ldrb	r3, [r3, #0]
 8014932:	b2db      	uxtb	r3, r3
 8014934:	f023 0301 	bic.w	r3, r3, #1
 8014938:	b2da      	uxtb	r2, r3
 801493a:	4b04      	ldr	r3, [pc, #16]	; (801494c <SD_CheckStatus+0x38>)
 801493c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801493e:	4b03      	ldr	r3, [pc, #12]	; (801494c <SD_CheckStatus+0x38>)
 8014940:	781b      	ldrb	r3, [r3, #0]
 8014942:	b2db      	uxtb	r3, r3
}
 8014944:	4618      	mov	r0, r3
 8014946:	3708      	adds	r7, #8
 8014948:	46bd      	mov	sp, r7
 801494a:	bd80      	pop	{r7, pc}
 801494c:	2400000d 	.word	0x2400000d

08014950 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8014950:	b580      	push	{r7, lr}
 8014952:	b082      	sub	sp, #8
 8014954:	af00      	add	r7, sp, #0
 8014956:	4603      	mov	r3, r0
 8014958:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 801495a:	f7ff ff09 	bl	8014770 <BSP_SD_Init>
 801495e:	4603      	mov	r3, r0
 8014960:	2b00      	cmp	r3, #0
 8014962:	d107      	bne.n	8014974 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8014964:	79fb      	ldrb	r3, [r7, #7]
 8014966:	4618      	mov	r0, r3
 8014968:	f7ff ffd4 	bl	8014914 <SD_CheckStatus>
 801496c:	4603      	mov	r3, r0
 801496e:	461a      	mov	r2, r3
 8014970:	4b04      	ldr	r3, [pc, #16]	; (8014984 <SD_initialize+0x34>)
 8014972:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8014974:	4b03      	ldr	r3, [pc, #12]	; (8014984 <SD_initialize+0x34>)
 8014976:	781b      	ldrb	r3, [r3, #0]
 8014978:	b2db      	uxtb	r3, r3
}
 801497a:	4618      	mov	r0, r3
 801497c:	3708      	adds	r7, #8
 801497e:	46bd      	mov	sp, r7
 8014980:	bd80      	pop	{r7, pc}
 8014982:	bf00      	nop
 8014984:	2400000d 	.word	0x2400000d

08014988 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8014988:	b580      	push	{r7, lr}
 801498a:	b082      	sub	sp, #8
 801498c:	af00      	add	r7, sp, #0
 801498e:	4603      	mov	r3, r0
 8014990:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8014992:	79fb      	ldrb	r3, [r7, #7]
 8014994:	4618      	mov	r0, r3
 8014996:	f7ff ffbd 	bl	8014914 <SD_CheckStatus>
 801499a:	4603      	mov	r3, r0
}
 801499c:	4618      	mov	r0, r3
 801499e:	3708      	adds	r7, #8
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd80      	pop	{r7, pc}

080149a4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b086      	sub	sp, #24
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	60b9      	str	r1, [r7, #8]
 80149ac:	607a      	str	r2, [r7, #4]
 80149ae:	603b      	str	r3, [r7, #0]
 80149b0:	4603      	mov	r3, r0
 80149b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80149b4:	2301      	movs	r3, #1
 80149b6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80149b8:	f247 5030 	movw	r0, #30000	; 0x7530
 80149bc:	f7ff ff8c 	bl	80148d8 <SD_CheckStatusWithTimeout>
 80149c0:	4603      	mov	r3, r0
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	da01      	bge.n	80149ca <SD_read+0x26>
  {
    return res;
 80149c6:	7dfb      	ldrb	r3, [r7, #23]
 80149c8:	e03b      	b.n	8014a42 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80149ca:	683a      	ldr	r2, [r7, #0]
 80149cc:	6879      	ldr	r1, [r7, #4]
 80149ce:	68b8      	ldr	r0, [r7, #8]
 80149d0:	f7ff fef4 	bl	80147bc <BSP_SD_ReadBlocks_DMA>
 80149d4:	4603      	mov	r3, r0
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d132      	bne.n	8014a40 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80149da:	4b1c      	ldr	r3, [pc, #112]	; (8014a4c <SD_read+0xa8>)
 80149dc:	2200      	movs	r2, #0
 80149de:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80149e0:	f7ef f996 	bl	8003d10 <HAL_GetTick>
 80149e4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80149e6:	bf00      	nop
 80149e8:	4b18      	ldr	r3, [pc, #96]	; (8014a4c <SD_read+0xa8>)
 80149ea:	681b      	ldr	r3, [r3, #0]
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d108      	bne.n	8014a02 <SD_read+0x5e>
 80149f0:	f7ef f98e 	bl	8003d10 <HAL_GetTick>
 80149f4:	4602      	mov	r2, r0
 80149f6:	693b      	ldr	r3, [r7, #16]
 80149f8:	1ad3      	subs	r3, r2, r3
 80149fa:	f247 522f 	movw	r2, #29999	; 0x752f
 80149fe:	4293      	cmp	r3, r2
 8014a00:	d9f2      	bls.n	80149e8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8014a02:	4b12      	ldr	r3, [pc, #72]	; (8014a4c <SD_read+0xa8>)
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d102      	bne.n	8014a10 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8014a0a:	2301      	movs	r3, #1
 8014a0c:	75fb      	strb	r3, [r7, #23]
 8014a0e:	e017      	b.n	8014a40 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8014a10:	4b0e      	ldr	r3, [pc, #56]	; (8014a4c <SD_read+0xa8>)
 8014a12:	2200      	movs	r2, #0
 8014a14:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014a16:	f7ef f97b 	bl	8003d10 <HAL_GetTick>
 8014a1a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014a1c:	e007      	b.n	8014a2e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014a1e:	f7ff ff01 	bl	8014824 <BSP_SD_GetCardState>
 8014a22:	4603      	mov	r3, r0
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d102      	bne.n	8014a2e <SD_read+0x8a>
          {
            res = RES_OK;
 8014a28:	2300      	movs	r3, #0
 8014a2a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8014a2c:	e008      	b.n	8014a40 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014a2e:	f7ef f96f 	bl	8003d10 <HAL_GetTick>
 8014a32:	4602      	mov	r2, r0
 8014a34:	693b      	ldr	r3, [r7, #16]
 8014a36:	1ad3      	subs	r3, r2, r3
 8014a38:	f247 522f 	movw	r2, #29999	; 0x752f
 8014a3c:	4293      	cmp	r3, r2
 8014a3e:	d9ee      	bls.n	8014a1e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8014a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a42:	4618      	mov	r0, r3
 8014a44:	3718      	adds	r7, #24
 8014a46:	46bd      	mov	sp, r7
 8014a48:	bd80      	pop	{r7, pc}
 8014a4a:	bf00      	nop
 8014a4c:	24001700 	.word	0x24001700

08014a50 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8014a50:	b580      	push	{r7, lr}
 8014a52:	b086      	sub	sp, #24
 8014a54:	af00      	add	r7, sp, #0
 8014a56:	60b9      	str	r1, [r7, #8]
 8014a58:	607a      	str	r2, [r7, #4]
 8014a5a:	603b      	str	r3, [r7, #0]
 8014a5c:	4603      	mov	r3, r0
 8014a5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8014a60:	2301      	movs	r3, #1
 8014a62:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8014a64:	4b24      	ldr	r3, [pc, #144]	; (8014af8 <SD_write+0xa8>)
 8014a66:	2200      	movs	r2, #0
 8014a68:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8014a6a:	f247 5030 	movw	r0, #30000	; 0x7530
 8014a6e:	f7ff ff33 	bl	80148d8 <SD_CheckStatusWithTimeout>
 8014a72:	4603      	mov	r3, r0
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	da01      	bge.n	8014a7c <SD_write+0x2c>
  {
    return res;
 8014a78:	7dfb      	ldrb	r3, [r7, #23]
 8014a7a:	e038      	b.n	8014aee <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8014a7c:	683a      	ldr	r2, [r7, #0]
 8014a7e:	6879      	ldr	r1, [r7, #4]
 8014a80:	68b8      	ldr	r0, [r7, #8]
 8014a82:	f7ff feb5 	bl	80147f0 <BSP_SD_WriteBlocks_DMA>
 8014a86:	4603      	mov	r3, r0
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d12f      	bne.n	8014aec <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8014a8c:	f7ef f940 	bl	8003d10 <HAL_GetTick>
 8014a90:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8014a92:	bf00      	nop
 8014a94:	4b18      	ldr	r3, [pc, #96]	; (8014af8 <SD_write+0xa8>)
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	2b00      	cmp	r3, #0
 8014a9a:	d108      	bne.n	8014aae <SD_write+0x5e>
 8014a9c:	f7ef f938 	bl	8003d10 <HAL_GetTick>
 8014aa0:	4602      	mov	r2, r0
 8014aa2:	693b      	ldr	r3, [r7, #16]
 8014aa4:	1ad3      	subs	r3, r2, r3
 8014aa6:	f247 522f 	movw	r2, #29999	; 0x752f
 8014aaa:	4293      	cmp	r3, r2
 8014aac:	d9f2      	bls.n	8014a94 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8014aae:	4b12      	ldr	r3, [pc, #72]	; (8014af8 <SD_write+0xa8>)
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	d102      	bne.n	8014abc <SD_write+0x6c>
      {
        res = RES_ERROR;
 8014ab6:	2301      	movs	r3, #1
 8014ab8:	75fb      	strb	r3, [r7, #23]
 8014aba:	e017      	b.n	8014aec <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8014abc:	4b0e      	ldr	r3, [pc, #56]	; (8014af8 <SD_write+0xa8>)
 8014abe:	2200      	movs	r2, #0
 8014ac0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8014ac2:	f7ef f925 	bl	8003d10 <HAL_GetTick>
 8014ac6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014ac8:	e007      	b.n	8014ada <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8014aca:	f7ff feab 	bl	8014824 <BSP_SD_GetCardState>
 8014ace:	4603      	mov	r3, r0
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d102      	bne.n	8014ada <SD_write+0x8a>
          {
            res = RES_OK;
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	75fb      	strb	r3, [r7, #23]
            break;
 8014ad8:	e008      	b.n	8014aec <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8014ada:	f7ef f919 	bl	8003d10 <HAL_GetTick>
 8014ade:	4602      	mov	r2, r0
 8014ae0:	693b      	ldr	r3, [r7, #16]
 8014ae2:	1ad3      	subs	r3, r2, r3
 8014ae4:	f247 522f 	movw	r2, #29999	; 0x752f
 8014ae8:	4293      	cmp	r3, r2
 8014aea:	d9ee      	bls.n	8014aca <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8014aec:	7dfb      	ldrb	r3, [r7, #23]
}
 8014aee:	4618      	mov	r0, r3
 8014af0:	3718      	adds	r7, #24
 8014af2:	46bd      	mov	sp, r7
 8014af4:	bd80      	pop	{r7, pc}
 8014af6:	bf00      	nop
 8014af8:	240016fc 	.word	0x240016fc

08014afc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b08c      	sub	sp, #48	; 0x30
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	4603      	mov	r3, r0
 8014b04:	603a      	str	r2, [r7, #0]
 8014b06:	71fb      	strb	r3, [r7, #7]
 8014b08:	460b      	mov	r3, r1
 8014b0a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8014b0c:	2301      	movs	r3, #1
 8014b0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8014b12:	4b25      	ldr	r3, [pc, #148]	; (8014ba8 <SD_ioctl+0xac>)
 8014b14:	781b      	ldrb	r3, [r3, #0]
 8014b16:	b2db      	uxtb	r3, r3
 8014b18:	f003 0301 	and.w	r3, r3, #1
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d001      	beq.n	8014b24 <SD_ioctl+0x28>
 8014b20:	2303      	movs	r3, #3
 8014b22:	e03c      	b.n	8014b9e <SD_ioctl+0xa2>

  switch (cmd)
 8014b24:	79bb      	ldrb	r3, [r7, #6]
 8014b26:	2b03      	cmp	r3, #3
 8014b28:	d834      	bhi.n	8014b94 <SD_ioctl+0x98>
 8014b2a:	a201      	add	r2, pc, #4	; (adr r2, 8014b30 <SD_ioctl+0x34>)
 8014b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014b30:	08014b41 	.word	0x08014b41
 8014b34:	08014b49 	.word	0x08014b49
 8014b38:	08014b61 	.word	0x08014b61
 8014b3c:	08014b7b 	.word	0x08014b7b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8014b40:	2300      	movs	r3, #0
 8014b42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014b46:	e028      	b.n	8014b9a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8014b48:	f107 0308 	add.w	r3, r7, #8
 8014b4c:	4618      	mov	r0, r3
 8014b4e:	f7ff fe79 	bl	8014844 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8014b52:	6a3a      	ldr	r2, [r7, #32]
 8014b54:	683b      	ldr	r3, [r7, #0]
 8014b56:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014b58:	2300      	movs	r3, #0
 8014b5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014b5e:	e01c      	b.n	8014b9a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014b60:	f107 0308 	add.w	r3, r7, #8
 8014b64:	4618      	mov	r0, r3
 8014b66:	f7ff fe6d 	bl	8014844 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8014b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b6c:	b29a      	uxth	r2, r3
 8014b6e:	683b      	ldr	r3, [r7, #0]
 8014b70:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8014b72:	2300      	movs	r3, #0
 8014b74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014b78:	e00f      	b.n	8014b9a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8014b7a:	f107 0308 	add.w	r3, r7, #8
 8014b7e:	4618      	mov	r0, r3
 8014b80:	f7ff fe60 	bl	8014844 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8014b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b86:	0a5a      	lsrs	r2, r3, #9
 8014b88:	683b      	ldr	r3, [r7, #0]
 8014b8a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8014b8c:	2300      	movs	r3, #0
 8014b8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8014b92:	e002      	b.n	8014b9a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8014b94:	2304      	movs	r3, #4
 8014b96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8014b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	3730      	adds	r7, #48	; 0x30
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	bd80      	pop	{r7, pc}
 8014ba6:	bf00      	nop
 8014ba8:	2400000d 	.word	0x2400000d

08014bac <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8014bac:	b480      	push	{r7}
 8014bae:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8014bb0:	4b03      	ldr	r3, [pc, #12]	; (8014bc0 <BSP_SD_WriteCpltCallback+0x14>)
 8014bb2:	2201      	movs	r2, #1
 8014bb4:	601a      	str	r2, [r3, #0]
}
 8014bb6:	bf00      	nop
 8014bb8:	46bd      	mov	sp, r7
 8014bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bbe:	4770      	bx	lr
 8014bc0:	240016fc 	.word	0x240016fc

08014bc4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8014bc4:	b480      	push	{r7}
 8014bc6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8014bc8:	4b03      	ldr	r3, [pc, #12]	; (8014bd8 <BSP_SD_ReadCpltCallback+0x14>)
 8014bca:	2201      	movs	r2, #1
 8014bcc:	601a      	str	r2, [r3, #0]
}
 8014bce:	bf00      	nop
 8014bd0:	46bd      	mov	sp, r7
 8014bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bd6:	4770      	bx	lr
 8014bd8:	24001700 	.word	0x24001700

08014bdc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014bdc:	b580      	push	{r7, lr}
 8014bde:	b084      	sub	sp, #16
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	6078      	str	r0, [r7, #4]
 8014be4:	460b      	mov	r3, r1
 8014be6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014be8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014bec:	f002 fd2a 	bl	8017644 <USBD_static_malloc>
 8014bf0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014bf2:	68fb      	ldr	r3, [r7, #12]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d109      	bne.n	8014c0c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	32b0      	adds	r2, #176	; 0xb0
 8014c02:	2100      	movs	r1, #0
 8014c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014c08:	2302      	movs	r3, #2
 8014c0a:	e0d4      	b.n	8014db6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014c0c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014c10:	2100      	movs	r1, #0
 8014c12:	68f8      	ldr	r0, [r7, #12]
 8014c14:	f002 fda8 	bl	8017768 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c1e:	687b      	ldr	r3, [r7, #4]
 8014c20:	32b0      	adds	r2, #176	; 0xb0
 8014c22:	68f9      	ldr	r1, [r7, #12]
 8014c24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	32b0      	adds	r2, #176	; 0xb0
 8014c32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014c36:	687b      	ldr	r3, [r7, #4]
 8014c38:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	7c1b      	ldrb	r3, [r3, #16]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d138      	bne.n	8014cb6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014c44:	4b5e      	ldr	r3, [pc, #376]	; (8014dc0 <USBD_CDC_Init+0x1e4>)
 8014c46:	7819      	ldrb	r1, [r3, #0]
 8014c48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014c4c:	2202      	movs	r2, #2
 8014c4e:	6878      	ldr	r0, [r7, #4]
 8014c50:	f002 fbd5 	bl	80173fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014c54:	4b5a      	ldr	r3, [pc, #360]	; (8014dc0 <USBD_CDC_Init+0x1e4>)
 8014c56:	781b      	ldrb	r3, [r3, #0]
 8014c58:	f003 020f 	and.w	r2, r3, #15
 8014c5c:	6879      	ldr	r1, [r7, #4]
 8014c5e:	4613      	mov	r3, r2
 8014c60:	009b      	lsls	r3, r3, #2
 8014c62:	4413      	add	r3, r2
 8014c64:	009b      	lsls	r3, r3, #2
 8014c66:	440b      	add	r3, r1
 8014c68:	3324      	adds	r3, #36	; 0x24
 8014c6a:	2201      	movs	r2, #1
 8014c6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014c6e:	4b55      	ldr	r3, [pc, #340]	; (8014dc4 <USBD_CDC_Init+0x1e8>)
 8014c70:	7819      	ldrb	r1, [r3, #0]
 8014c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014c76:	2202      	movs	r2, #2
 8014c78:	6878      	ldr	r0, [r7, #4]
 8014c7a:	f002 fbc0 	bl	80173fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014c7e:	4b51      	ldr	r3, [pc, #324]	; (8014dc4 <USBD_CDC_Init+0x1e8>)
 8014c80:	781b      	ldrb	r3, [r3, #0]
 8014c82:	f003 020f 	and.w	r2, r3, #15
 8014c86:	6879      	ldr	r1, [r7, #4]
 8014c88:	4613      	mov	r3, r2
 8014c8a:	009b      	lsls	r3, r3, #2
 8014c8c:	4413      	add	r3, r2
 8014c8e:	009b      	lsls	r3, r3, #2
 8014c90:	440b      	add	r3, r1
 8014c92:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014c96:	2201      	movs	r2, #1
 8014c98:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014c9a:	4b4b      	ldr	r3, [pc, #300]	; (8014dc8 <USBD_CDC_Init+0x1ec>)
 8014c9c:	781b      	ldrb	r3, [r3, #0]
 8014c9e:	f003 020f 	and.w	r2, r3, #15
 8014ca2:	6879      	ldr	r1, [r7, #4]
 8014ca4:	4613      	mov	r3, r2
 8014ca6:	009b      	lsls	r3, r3, #2
 8014ca8:	4413      	add	r3, r2
 8014caa:	009b      	lsls	r3, r3, #2
 8014cac:	440b      	add	r3, r1
 8014cae:	3326      	adds	r3, #38	; 0x26
 8014cb0:	2210      	movs	r2, #16
 8014cb2:	801a      	strh	r2, [r3, #0]
 8014cb4:	e035      	b.n	8014d22 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014cb6:	4b42      	ldr	r3, [pc, #264]	; (8014dc0 <USBD_CDC_Init+0x1e4>)
 8014cb8:	7819      	ldrb	r1, [r3, #0]
 8014cba:	2340      	movs	r3, #64	; 0x40
 8014cbc:	2202      	movs	r2, #2
 8014cbe:	6878      	ldr	r0, [r7, #4]
 8014cc0:	f002 fb9d 	bl	80173fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014cc4:	4b3e      	ldr	r3, [pc, #248]	; (8014dc0 <USBD_CDC_Init+0x1e4>)
 8014cc6:	781b      	ldrb	r3, [r3, #0]
 8014cc8:	f003 020f 	and.w	r2, r3, #15
 8014ccc:	6879      	ldr	r1, [r7, #4]
 8014cce:	4613      	mov	r3, r2
 8014cd0:	009b      	lsls	r3, r3, #2
 8014cd2:	4413      	add	r3, r2
 8014cd4:	009b      	lsls	r3, r3, #2
 8014cd6:	440b      	add	r3, r1
 8014cd8:	3324      	adds	r3, #36	; 0x24
 8014cda:	2201      	movs	r2, #1
 8014cdc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014cde:	4b39      	ldr	r3, [pc, #228]	; (8014dc4 <USBD_CDC_Init+0x1e8>)
 8014ce0:	7819      	ldrb	r1, [r3, #0]
 8014ce2:	2340      	movs	r3, #64	; 0x40
 8014ce4:	2202      	movs	r2, #2
 8014ce6:	6878      	ldr	r0, [r7, #4]
 8014ce8:	f002 fb89 	bl	80173fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014cec:	4b35      	ldr	r3, [pc, #212]	; (8014dc4 <USBD_CDC_Init+0x1e8>)
 8014cee:	781b      	ldrb	r3, [r3, #0]
 8014cf0:	f003 020f 	and.w	r2, r3, #15
 8014cf4:	6879      	ldr	r1, [r7, #4]
 8014cf6:	4613      	mov	r3, r2
 8014cf8:	009b      	lsls	r3, r3, #2
 8014cfa:	4413      	add	r3, r2
 8014cfc:	009b      	lsls	r3, r3, #2
 8014cfe:	440b      	add	r3, r1
 8014d00:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014d04:	2201      	movs	r2, #1
 8014d06:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014d08:	4b2f      	ldr	r3, [pc, #188]	; (8014dc8 <USBD_CDC_Init+0x1ec>)
 8014d0a:	781b      	ldrb	r3, [r3, #0]
 8014d0c:	f003 020f 	and.w	r2, r3, #15
 8014d10:	6879      	ldr	r1, [r7, #4]
 8014d12:	4613      	mov	r3, r2
 8014d14:	009b      	lsls	r3, r3, #2
 8014d16:	4413      	add	r3, r2
 8014d18:	009b      	lsls	r3, r3, #2
 8014d1a:	440b      	add	r3, r1
 8014d1c:	3326      	adds	r3, #38	; 0x26
 8014d1e:	2210      	movs	r2, #16
 8014d20:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014d22:	4b29      	ldr	r3, [pc, #164]	; (8014dc8 <USBD_CDC_Init+0x1ec>)
 8014d24:	7819      	ldrb	r1, [r3, #0]
 8014d26:	2308      	movs	r3, #8
 8014d28:	2203      	movs	r2, #3
 8014d2a:	6878      	ldr	r0, [r7, #4]
 8014d2c:	f002 fb67 	bl	80173fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014d30:	4b25      	ldr	r3, [pc, #148]	; (8014dc8 <USBD_CDC_Init+0x1ec>)
 8014d32:	781b      	ldrb	r3, [r3, #0]
 8014d34:	f003 020f 	and.w	r2, r3, #15
 8014d38:	6879      	ldr	r1, [r7, #4]
 8014d3a:	4613      	mov	r3, r2
 8014d3c:	009b      	lsls	r3, r3, #2
 8014d3e:	4413      	add	r3, r2
 8014d40:	009b      	lsls	r3, r3, #2
 8014d42:	440b      	add	r3, r1
 8014d44:	3324      	adds	r3, #36	; 0x24
 8014d46:	2201      	movs	r2, #1
 8014d48:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	2200      	movs	r2, #0
 8014d4e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014d58:	687a      	ldr	r2, [r7, #4]
 8014d5a:	33b0      	adds	r3, #176	; 0xb0
 8014d5c:	009b      	lsls	r3, r3, #2
 8014d5e:	4413      	add	r3, r2
 8014d60:	685b      	ldr	r3, [r3, #4]
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014d66:	68fb      	ldr	r3, [r7, #12]
 8014d68:	2200      	movs	r2, #0
 8014d6a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	2200      	movs	r2, #0
 8014d72:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	d101      	bne.n	8014d84 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014d80:	2302      	movs	r3, #2
 8014d82:	e018      	b.n	8014db6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	7c1b      	ldrb	r3, [r3, #16]
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d10a      	bne.n	8014da2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014d8c:	4b0d      	ldr	r3, [pc, #52]	; (8014dc4 <USBD_CDC_Init+0x1e8>)
 8014d8e:	7819      	ldrb	r1, [r3, #0]
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014d96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014d9a:	6878      	ldr	r0, [r7, #4]
 8014d9c:	f002 fc1e 	bl	80175dc <USBD_LL_PrepareReceive>
 8014da0:	e008      	b.n	8014db4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014da2:	4b08      	ldr	r3, [pc, #32]	; (8014dc4 <USBD_CDC_Init+0x1e8>)
 8014da4:	7819      	ldrb	r1, [r3, #0]
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014dac:	2340      	movs	r3, #64	; 0x40
 8014dae:	6878      	ldr	r0, [r7, #4]
 8014db0:	f002 fc14 	bl	80175dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014db4:	2300      	movs	r3, #0
}
 8014db6:	4618      	mov	r0, r3
 8014db8:	3710      	adds	r7, #16
 8014dba:	46bd      	mov	sp, r7
 8014dbc:	bd80      	pop	{r7, pc}
 8014dbe:	bf00      	nop
 8014dc0:	24000097 	.word	0x24000097
 8014dc4:	24000098 	.word	0x24000098
 8014dc8:	24000099 	.word	0x24000099

08014dcc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b082      	sub	sp, #8
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
 8014dd4:	460b      	mov	r3, r1
 8014dd6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014dd8:	4b3a      	ldr	r3, [pc, #232]	; (8014ec4 <USBD_CDC_DeInit+0xf8>)
 8014dda:	781b      	ldrb	r3, [r3, #0]
 8014ddc:	4619      	mov	r1, r3
 8014dde:	6878      	ldr	r0, [r7, #4]
 8014de0:	f002 fb33 	bl	801744a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014de4:	4b37      	ldr	r3, [pc, #220]	; (8014ec4 <USBD_CDC_DeInit+0xf8>)
 8014de6:	781b      	ldrb	r3, [r3, #0]
 8014de8:	f003 020f 	and.w	r2, r3, #15
 8014dec:	6879      	ldr	r1, [r7, #4]
 8014dee:	4613      	mov	r3, r2
 8014df0:	009b      	lsls	r3, r3, #2
 8014df2:	4413      	add	r3, r2
 8014df4:	009b      	lsls	r3, r3, #2
 8014df6:	440b      	add	r3, r1
 8014df8:	3324      	adds	r3, #36	; 0x24
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014dfe:	4b32      	ldr	r3, [pc, #200]	; (8014ec8 <USBD_CDC_DeInit+0xfc>)
 8014e00:	781b      	ldrb	r3, [r3, #0]
 8014e02:	4619      	mov	r1, r3
 8014e04:	6878      	ldr	r0, [r7, #4]
 8014e06:	f002 fb20 	bl	801744a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014e0a:	4b2f      	ldr	r3, [pc, #188]	; (8014ec8 <USBD_CDC_DeInit+0xfc>)
 8014e0c:	781b      	ldrb	r3, [r3, #0]
 8014e0e:	f003 020f 	and.w	r2, r3, #15
 8014e12:	6879      	ldr	r1, [r7, #4]
 8014e14:	4613      	mov	r3, r2
 8014e16:	009b      	lsls	r3, r3, #2
 8014e18:	4413      	add	r3, r2
 8014e1a:	009b      	lsls	r3, r3, #2
 8014e1c:	440b      	add	r3, r1
 8014e1e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014e22:	2200      	movs	r2, #0
 8014e24:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014e26:	4b29      	ldr	r3, [pc, #164]	; (8014ecc <USBD_CDC_DeInit+0x100>)
 8014e28:	781b      	ldrb	r3, [r3, #0]
 8014e2a:	4619      	mov	r1, r3
 8014e2c:	6878      	ldr	r0, [r7, #4]
 8014e2e:	f002 fb0c 	bl	801744a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014e32:	4b26      	ldr	r3, [pc, #152]	; (8014ecc <USBD_CDC_DeInit+0x100>)
 8014e34:	781b      	ldrb	r3, [r3, #0]
 8014e36:	f003 020f 	and.w	r2, r3, #15
 8014e3a:	6879      	ldr	r1, [r7, #4]
 8014e3c:	4613      	mov	r3, r2
 8014e3e:	009b      	lsls	r3, r3, #2
 8014e40:	4413      	add	r3, r2
 8014e42:	009b      	lsls	r3, r3, #2
 8014e44:	440b      	add	r3, r1
 8014e46:	3324      	adds	r3, #36	; 0x24
 8014e48:	2200      	movs	r2, #0
 8014e4a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014e4c:	4b1f      	ldr	r3, [pc, #124]	; (8014ecc <USBD_CDC_DeInit+0x100>)
 8014e4e:	781b      	ldrb	r3, [r3, #0]
 8014e50:	f003 020f 	and.w	r2, r3, #15
 8014e54:	6879      	ldr	r1, [r7, #4]
 8014e56:	4613      	mov	r3, r2
 8014e58:	009b      	lsls	r3, r3, #2
 8014e5a:	4413      	add	r3, r2
 8014e5c:	009b      	lsls	r3, r3, #2
 8014e5e:	440b      	add	r3, r1
 8014e60:	3326      	adds	r3, #38	; 0x26
 8014e62:	2200      	movs	r2, #0
 8014e64:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	32b0      	adds	r2, #176	; 0xb0
 8014e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d01f      	beq.n	8014eb8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e7e:	687a      	ldr	r2, [r7, #4]
 8014e80:	33b0      	adds	r3, #176	; 0xb0
 8014e82:	009b      	lsls	r3, r3, #2
 8014e84:	4413      	add	r3, r2
 8014e86:	685b      	ldr	r3, [r3, #4]
 8014e88:	685b      	ldr	r3, [r3, #4]
 8014e8a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	32b0      	adds	r2, #176	; 0xb0
 8014e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014e9a:	4618      	mov	r0, r3
 8014e9c:	f002 fbe0 	bl	8017660 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	32b0      	adds	r2, #176	; 0xb0
 8014eaa:	2100      	movs	r1, #0
 8014eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	2200      	movs	r2, #0
 8014eb4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014eb8:	2300      	movs	r3, #0
}
 8014eba:	4618      	mov	r0, r3
 8014ebc:	3708      	adds	r7, #8
 8014ebe:	46bd      	mov	sp, r7
 8014ec0:	bd80      	pop	{r7, pc}
 8014ec2:	bf00      	nop
 8014ec4:	24000097 	.word	0x24000097
 8014ec8:	24000098 	.word	0x24000098
 8014ecc:	24000099 	.word	0x24000099

08014ed0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	b086      	sub	sp, #24
 8014ed4:	af00      	add	r7, sp, #0
 8014ed6:	6078      	str	r0, [r7, #4]
 8014ed8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	32b0      	adds	r2, #176	; 0xb0
 8014ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014ee8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8014eea:	2300      	movs	r3, #0
 8014eec:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8014eee:	2300      	movs	r3, #0
 8014ef0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8014ef6:	693b      	ldr	r3, [r7, #16]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d101      	bne.n	8014f00 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8014efc:	2303      	movs	r3, #3
 8014efe:	e0bf      	b.n	8015080 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014f00:	683b      	ldr	r3, [r7, #0]
 8014f02:	781b      	ldrb	r3, [r3, #0]
 8014f04:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d050      	beq.n	8014fae <USBD_CDC_Setup+0xde>
 8014f0c:	2b20      	cmp	r3, #32
 8014f0e:	f040 80af 	bne.w	8015070 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8014f12:	683b      	ldr	r3, [r7, #0]
 8014f14:	88db      	ldrh	r3, [r3, #6]
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d03a      	beq.n	8014f90 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8014f1a:	683b      	ldr	r3, [r7, #0]
 8014f1c:	781b      	ldrb	r3, [r3, #0]
 8014f1e:	b25b      	sxtb	r3, r3
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	da1b      	bge.n	8014f5c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014f2a:	687a      	ldr	r2, [r7, #4]
 8014f2c:	33b0      	adds	r3, #176	; 0xb0
 8014f2e:	009b      	lsls	r3, r3, #2
 8014f30:	4413      	add	r3, r2
 8014f32:	685b      	ldr	r3, [r3, #4]
 8014f34:	689b      	ldr	r3, [r3, #8]
 8014f36:	683a      	ldr	r2, [r7, #0]
 8014f38:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8014f3a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014f3c:	683a      	ldr	r2, [r7, #0]
 8014f3e:	88d2      	ldrh	r2, [r2, #6]
 8014f40:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8014f42:	683b      	ldr	r3, [r7, #0]
 8014f44:	88db      	ldrh	r3, [r3, #6]
 8014f46:	2b07      	cmp	r3, #7
 8014f48:	bf28      	it	cs
 8014f4a:	2307      	movcs	r3, #7
 8014f4c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8014f4e:	693b      	ldr	r3, [r7, #16]
 8014f50:	89fa      	ldrh	r2, [r7, #14]
 8014f52:	4619      	mov	r1, r3
 8014f54:	6878      	ldr	r0, [r7, #4]
 8014f56:	f001 fdb3 	bl	8016ac0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8014f5a:	e090      	b.n	801507e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	785a      	ldrb	r2, [r3, #1]
 8014f60:	693b      	ldr	r3, [r7, #16]
 8014f62:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8014f66:	683b      	ldr	r3, [r7, #0]
 8014f68:	88db      	ldrh	r3, [r3, #6]
 8014f6a:	2b3f      	cmp	r3, #63	; 0x3f
 8014f6c:	d803      	bhi.n	8014f76 <USBD_CDC_Setup+0xa6>
 8014f6e:	683b      	ldr	r3, [r7, #0]
 8014f70:	88db      	ldrh	r3, [r3, #6]
 8014f72:	b2da      	uxtb	r2, r3
 8014f74:	e000      	b.n	8014f78 <USBD_CDC_Setup+0xa8>
 8014f76:	2240      	movs	r2, #64	; 0x40
 8014f78:	693b      	ldr	r3, [r7, #16]
 8014f7a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8014f7e:	6939      	ldr	r1, [r7, #16]
 8014f80:	693b      	ldr	r3, [r7, #16]
 8014f82:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8014f86:	461a      	mov	r2, r3
 8014f88:	6878      	ldr	r0, [r7, #4]
 8014f8a:	f001 fdc5 	bl	8016b18 <USBD_CtlPrepareRx>
      break;
 8014f8e:	e076      	b.n	801507e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014f96:	687a      	ldr	r2, [r7, #4]
 8014f98:	33b0      	adds	r3, #176	; 0xb0
 8014f9a:	009b      	lsls	r3, r3, #2
 8014f9c:	4413      	add	r3, r2
 8014f9e:	685b      	ldr	r3, [r3, #4]
 8014fa0:	689b      	ldr	r3, [r3, #8]
 8014fa2:	683a      	ldr	r2, [r7, #0]
 8014fa4:	7850      	ldrb	r0, [r2, #1]
 8014fa6:	2200      	movs	r2, #0
 8014fa8:	6839      	ldr	r1, [r7, #0]
 8014faa:	4798      	blx	r3
      break;
 8014fac:	e067      	b.n	801507e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014fae:	683b      	ldr	r3, [r7, #0]
 8014fb0:	785b      	ldrb	r3, [r3, #1]
 8014fb2:	2b0b      	cmp	r3, #11
 8014fb4:	d851      	bhi.n	801505a <USBD_CDC_Setup+0x18a>
 8014fb6:	a201      	add	r2, pc, #4	; (adr r2, 8014fbc <USBD_CDC_Setup+0xec>)
 8014fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014fbc:	08014fed 	.word	0x08014fed
 8014fc0:	08015069 	.word	0x08015069
 8014fc4:	0801505b 	.word	0x0801505b
 8014fc8:	0801505b 	.word	0x0801505b
 8014fcc:	0801505b 	.word	0x0801505b
 8014fd0:	0801505b 	.word	0x0801505b
 8014fd4:	0801505b 	.word	0x0801505b
 8014fd8:	0801505b 	.word	0x0801505b
 8014fdc:	0801505b 	.word	0x0801505b
 8014fe0:	0801505b 	.word	0x0801505b
 8014fe4:	08015017 	.word	0x08015017
 8014fe8:	08015041 	.word	0x08015041
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014ff2:	b2db      	uxtb	r3, r3
 8014ff4:	2b03      	cmp	r3, #3
 8014ff6:	d107      	bne.n	8015008 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014ff8:	f107 030a 	add.w	r3, r7, #10
 8014ffc:	2202      	movs	r2, #2
 8014ffe:	4619      	mov	r1, r3
 8015000:	6878      	ldr	r0, [r7, #4]
 8015002:	f001 fd5d 	bl	8016ac0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015006:	e032      	b.n	801506e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015008:	6839      	ldr	r1, [r7, #0]
 801500a:	6878      	ldr	r0, [r7, #4]
 801500c:	f001 fce7 	bl	80169de <USBD_CtlError>
            ret = USBD_FAIL;
 8015010:	2303      	movs	r3, #3
 8015012:	75fb      	strb	r3, [r7, #23]
          break;
 8015014:	e02b      	b.n	801506e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801501c:	b2db      	uxtb	r3, r3
 801501e:	2b03      	cmp	r3, #3
 8015020:	d107      	bne.n	8015032 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015022:	f107 030d 	add.w	r3, r7, #13
 8015026:	2201      	movs	r2, #1
 8015028:	4619      	mov	r1, r3
 801502a:	6878      	ldr	r0, [r7, #4]
 801502c:	f001 fd48 	bl	8016ac0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015030:	e01d      	b.n	801506e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015032:	6839      	ldr	r1, [r7, #0]
 8015034:	6878      	ldr	r0, [r7, #4]
 8015036:	f001 fcd2 	bl	80169de <USBD_CtlError>
            ret = USBD_FAIL;
 801503a:	2303      	movs	r3, #3
 801503c:	75fb      	strb	r3, [r7, #23]
          break;
 801503e:	e016      	b.n	801506e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015046:	b2db      	uxtb	r3, r3
 8015048:	2b03      	cmp	r3, #3
 801504a:	d00f      	beq.n	801506c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801504c:	6839      	ldr	r1, [r7, #0]
 801504e:	6878      	ldr	r0, [r7, #4]
 8015050:	f001 fcc5 	bl	80169de <USBD_CtlError>
            ret = USBD_FAIL;
 8015054:	2303      	movs	r3, #3
 8015056:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8015058:	e008      	b.n	801506c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801505a:	6839      	ldr	r1, [r7, #0]
 801505c:	6878      	ldr	r0, [r7, #4]
 801505e:	f001 fcbe 	bl	80169de <USBD_CtlError>
          ret = USBD_FAIL;
 8015062:	2303      	movs	r3, #3
 8015064:	75fb      	strb	r3, [r7, #23]
          break;
 8015066:	e002      	b.n	801506e <USBD_CDC_Setup+0x19e>
          break;
 8015068:	bf00      	nop
 801506a:	e008      	b.n	801507e <USBD_CDC_Setup+0x1ae>
          break;
 801506c:	bf00      	nop
      }
      break;
 801506e:	e006      	b.n	801507e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015070:	6839      	ldr	r1, [r7, #0]
 8015072:	6878      	ldr	r0, [r7, #4]
 8015074:	f001 fcb3 	bl	80169de <USBD_CtlError>
      ret = USBD_FAIL;
 8015078:	2303      	movs	r3, #3
 801507a:	75fb      	strb	r3, [r7, #23]
      break;
 801507c:	bf00      	nop
  }

  return (uint8_t)ret;
 801507e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015080:	4618      	mov	r0, r3
 8015082:	3718      	adds	r7, #24
 8015084:	46bd      	mov	sp, r7
 8015086:	bd80      	pop	{r7, pc}

08015088 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015088:	b580      	push	{r7, lr}
 801508a:	b084      	sub	sp, #16
 801508c:	af00      	add	r7, sp, #0
 801508e:	6078      	str	r0, [r7, #4]
 8015090:	460b      	mov	r3, r1
 8015092:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801509a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	32b0      	adds	r2, #176	; 0xb0
 80150a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d101      	bne.n	80150b2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80150ae:	2303      	movs	r3, #3
 80150b0:	e065      	b.n	801517e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	32b0      	adds	r2, #176	; 0xb0
 80150bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80150c0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80150c2:	78fb      	ldrb	r3, [r7, #3]
 80150c4:	f003 020f 	and.w	r2, r3, #15
 80150c8:	6879      	ldr	r1, [r7, #4]
 80150ca:	4613      	mov	r3, r2
 80150cc:	009b      	lsls	r3, r3, #2
 80150ce:	4413      	add	r3, r2
 80150d0:	009b      	lsls	r3, r3, #2
 80150d2:	440b      	add	r3, r1
 80150d4:	3318      	adds	r3, #24
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d02f      	beq.n	801513c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80150dc:	78fb      	ldrb	r3, [r7, #3]
 80150de:	f003 020f 	and.w	r2, r3, #15
 80150e2:	6879      	ldr	r1, [r7, #4]
 80150e4:	4613      	mov	r3, r2
 80150e6:	009b      	lsls	r3, r3, #2
 80150e8:	4413      	add	r3, r2
 80150ea:	009b      	lsls	r3, r3, #2
 80150ec:	440b      	add	r3, r1
 80150ee:	3318      	adds	r3, #24
 80150f0:	681a      	ldr	r2, [r3, #0]
 80150f2:	78fb      	ldrb	r3, [r7, #3]
 80150f4:	f003 010f 	and.w	r1, r3, #15
 80150f8:	68f8      	ldr	r0, [r7, #12]
 80150fa:	460b      	mov	r3, r1
 80150fc:	00db      	lsls	r3, r3, #3
 80150fe:	440b      	add	r3, r1
 8015100:	009b      	lsls	r3, r3, #2
 8015102:	4403      	add	r3, r0
 8015104:	3344      	adds	r3, #68	; 0x44
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	fbb2 f1f3 	udiv	r1, r2, r3
 801510c:	fb01 f303 	mul.w	r3, r1, r3
 8015110:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015112:	2b00      	cmp	r3, #0
 8015114:	d112      	bne.n	801513c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8015116:	78fb      	ldrb	r3, [r7, #3]
 8015118:	f003 020f 	and.w	r2, r3, #15
 801511c:	6879      	ldr	r1, [r7, #4]
 801511e:	4613      	mov	r3, r2
 8015120:	009b      	lsls	r3, r3, #2
 8015122:	4413      	add	r3, r2
 8015124:	009b      	lsls	r3, r3, #2
 8015126:	440b      	add	r3, r1
 8015128:	3318      	adds	r3, #24
 801512a:	2200      	movs	r2, #0
 801512c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801512e:	78f9      	ldrb	r1, [r7, #3]
 8015130:	2300      	movs	r3, #0
 8015132:	2200      	movs	r2, #0
 8015134:	6878      	ldr	r0, [r7, #4]
 8015136:	f002 fa30 	bl	801759a <USBD_LL_Transmit>
 801513a:	e01f      	b.n	801517c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801513c:	68bb      	ldr	r3, [r7, #8]
 801513e:	2200      	movs	r2, #0
 8015140:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801514a:	687a      	ldr	r2, [r7, #4]
 801514c:	33b0      	adds	r3, #176	; 0xb0
 801514e:	009b      	lsls	r3, r3, #2
 8015150:	4413      	add	r3, r2
 8015152:	685b      	ldr	r3, [r3, #4]
 8015154:	691b      	ldr	r3, [r3, #16]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d010      	beq.n	801517c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015160:	687a      	ldr	r2, [r7, #4]
 8015162:	33b0      	adds	r3, #176	; 0xb0
 8015164:	009b      	lsls	r3, r3, #2
 8015166:	4413      	add	r3, r2
 8015168:	685b      	ldr	r3, [r3, #4]
 801516a:	691b      	ldr	r3, [r3, #16]
 801516c:	68ba      	ldr	r2, [r7, #8]
 801516e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8015172:	68ba      	ldr	r2, [r7, #8]
 8015174:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8015178:	78fa      	ldrb	r2, [r7, #3]
 801517a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801517c:	2300      	movs	r3, #0
}
 801517e:	4618      	mov	r0, r3
 8015180:	3710      	adds	r7, #16
 8015182:	46bd      	mov	sp, r7
 8015184:	bd80      	pop	{r7, pc}

08015186 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8015186:	b580      	push	{r7, lr}
 8015188:	b084      	sub	sp, #16
 801518a:	af00      	add	r7, sp, #0
 801518c:	6078      	str	r0, [r7, #4]
 801518e:	460b      	mov	r3, r1
 8015190:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	32b0      	adds	r2, #176	; 0xb0
 801519c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151a0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	32b0      	adds	r2, #176	; 0xb0
 80151ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d101      	bne.n	80151b8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80151b4:	2303      	movs	r3, #3
 80151b6:	e01a      	b.n	80151ee <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80151b8:	78fb      	ldrb	r3, [r7, #3]
 80151ba:	4619      	mov	r1, r3
 80151bc:	6878      	ldr	r0, [r7, #4]
 80151be:	f002 fa2e 	bl	801761e <USBD_LL_GetRxDataSize>
 80151c2:	4602      	mov	r2, r0
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80151d0:	687a      	ldr	r2, [r7, #4]
 80151d2:	33b0      	adds	r3, #176	; 0xb0
 80151d4:	009b      	lsls	r3, r3, #2
 80151d6:	4413      	add	r3, r2
 80151d8:	685b      	ldr	r3, [r3, #4]
 80151da:	68db      	ldr	r3, [r3, #12]
 80151dc:	68fa      	ldr	r2, [r7, #12]
 80151de:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80151e2:	68fa      	ldr	r2, [r7, #12]
 80151e4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80151e8:	4611      	mov	r1, r2
 80151ea:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80151ec:	2300      	movs	r3, #0
}
 80151ee:	4618      	mov	r0, r3
 80151f0:	3710      	adds	r7, #16
 80151f2:	46bd      	mov	sp, r7
 80151f4:	bd80      	pop	{r7, pc}

080151f6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80151f6:	b580      	push	{r7, lr}
 80151f8:	b084      	sub	sp, #16
 80151fa:	af00      	add	r7, sp, #0
 80151fc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	32b0      	adds	r2, #176	; 0xb0
 8015208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801520c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	2b00      	cmp	r3, #0
 8015212:	d101      	bne.n	8015218 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015214:	2303      	movs	r3, #3
 8015216:	e025      	b.n	8015264 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801521e:	687a      	ldr	r2, [r7, #4]
 8015220:	33b0      	adds	r3, #176	; 0xb0
 8015222:	009b      	lsls	r3, r3, #2
 8015224:	4413      	add	r3, r2
 8015226:	685b      	ldr	r3, [r3, #4]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d01a      	beq.n	8015262 <USBD_CDC_EP0_RxReady+0x6c>
 801522c:	68fb      	ldr	r3, [r7, #12]
 801522e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8015232:	2bff      	cmp	r3, #255	; 0xff
 8015234:	d015      	beq.n	8015262 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801523c:	687a      	ldr	r2, [r7, #4]
 801523e:	33b0      	adds	r3, #176	; 0xb0
 8015240:	009b      	lsls	r3, r3, #2
 8015242:	4413      	add	r3, r2
 8015244:	685b      	ldr	r3, [r3, #4]
 8015246:	689b      	ldr	r3, [r3, #8]
 8015248:	68fa      	ldr	r2, [r7, #12]
 801524a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801524e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015250:	68fa      	ldr	r2, [r7, #12]
 8015252:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8015256:	b292      	uxth	r2, r2
 8015258:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	22ff      	movs	r2, #255	; 0xff
 801525e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8015262:	2300      	movs	r3, #0
}
 8015264:	4618      	mov	r0, r3
 8015266:	3710      	adds	r7, #16
 8015268:	46bd      	mov	sp, r7
 801526a:	bd80      	pop	{r7, pc}

0801526c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801526c:	b580      	push	{r7, lr}
 801526e:	b086      	sub	sp, #24
 8015270:	af00      	add	r7, sp, #0
 8015272:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015274:	2182      	movs	r1, #130	; 0x82
 8015276:	4818      	ldr	r0, [pc, #96]	; (80152d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015278:	f000 fd4f 	bl	8015d1a <USBD_GetEpDesc>
 801527c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801527e:	2101      	movs	r1, #1
 8015280:	4815      	ldr	r0, [pc, #84]	; (80152d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8015282:	f000 fd4a 	bl	8015d1a <USBD_GetEpDesc>
 8015286:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015288:	2181      	movs	r1, #129	; 0x81
 801528a:	4813      	ldr	r0, [pc, #76]	; (80152d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801528c:	f000 fd45 	bl	8015d1a <USBD_GetEpDesc>
 8015290:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015292:	697b      	ldr	r3, [r7, #20]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d002      	beq.n	801529e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015298:	697b      	ldr	r3, [r7, #20]
 801529a:	2210      	movs	r2, #16
 801529c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801529e:	693b      	ldr	r3, [r7, #16]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d006      	beq.n	80152b2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80152a4:	693b      	ldr	r3, [r7, #16]
 80152a6:	2200      	movs	r2, #0
 80152a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80152ac:	711a      	strb	r2, [r3, #4]
 80152ae:	2200      	movs	r2, #0
 80152b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d006      	beq.n	80152c6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80152b8:	68fb      	ldr	r3, [r7, #12]
 80152ba:	2200      	movs	r2, #0
 80152bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80152c0:	711a      	strb	r2, [r3, #4]
 80152c2:	2200      	movs	r2, #0
 80152c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	2243      	movs	r2, #67	; 0x43
 80152ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80152cc:	4b02      	ldr	r3, [pc, #8]	; (80152d8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80152ce:	4618      	mov	r0, r3
 80152d0:	3718      	adds	r7, #24
 80152d2:	46bd      	mov	sp, r7
 80152d4:	bd80      	pop	{r7, pc}
 80152d6:	bf00      	nop
 80152d8:	24000054 	.word	0x24000054

080152dc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80152dc:	b580      	push	{r7, lr}
 80152de:	b086      	sub	sp, #24
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80152e4:	2182      	movs	r1, #130	; 0x82
 80152e6:	4818      	ldr	r0, [pc, #96]	; (8015348 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80152e8:	f000 fd17 	bl	8015d1a <USBD_GetEpDesc>
 80152ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80152ee:	2101      	movs	r1, #1
 80152f0:	4815      	ldr	r0, [pc, #84]	; (8015348 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80152f2:	f000 fd12 	bl	8015d1a <USBD_GetEpDesc>
 80152f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80152f8:	2181      	movs	r1, #129	; 0x81
 80152fa:	4813      	ldr	r0, [pc, #76]	; (8015348 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80152fc:	f000 fd0d 	bl	8015d1a <USBD_GetEpDesc>
 8015300:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015302:	697b      	ldr	r3, [r7, #20]
 8015304:	2b00      	cmp	r3, #0
 8015306:	d002      	beq.n	801530e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8015308:	697b      	ldr	r3, [r7, #20]
 801530a:	2210      	movs	r2, #16
 801530c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801530e:	693b      	ldr	r3, [r7, #16]
 8015310:	2b00      	cmp	r3, #0
 8015312:	d006      	beq.n	8015322 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015314:	693b      	ldr	r3, [r7, #16]
 8015316:	2200      	movs	r2, #0
 8015318:	711a      	strb	r2, [r3, #4]
 801531a:	2200      	movs	r2, #0
 801531c:	f042 0202 	orr.w	r2, r2, #2
 8015320:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015322:	68fb      	ldr	r3, [r7, #12]
 8015324:	2b00      	cmp	r3, #0
 8015326:	d006      	beq.n	8015336 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015328:	68fb      	ldr	r3, [r7, #12]
 801532a:	2200      	movs	r2, #0
 801532c:	711a      	strb	r2, [r3, #4]
 801532e:	2200      	movs	r2, #0
 8015330:	f042 0202 	orr.w	r2, r2, #2
 8015334:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	2243      	movs	r2, #67	; 0x43
 801533a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801533c:	4b02      	ldr	r3, [pc, #8]	; (8015348 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801533e:	4618      	mov	r0, r3
 8015340:	3718      	adds	r7, #24
 8015342:	46bd      	mov	sp, r7
 8015344:	bd80      	pop	{r7, pc}
 8015346:	bf00      	nop
 8015348:	24000054 	.word	0x24000054

0801534c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b086      	sub	sp, #24
 8015350:	af00      	add	r7, sp, #0
 8015352:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015354:	2182      	movs	r1, #130	; 0x82
 8015356:	4818      	ldr	r0, [pc, #96]	; (80153b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015358:	f000 fcdf 	bl	8015d1a <USBD_GetEpDesc>
 801535c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801535e:	2101      	movs	r1, #1
 8015360:	4815      	ldr	r0, [pc, #84]	; (80153b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015362:	f000 fcda 	bl	8015d1a <USBD_GetEpDesc>
 8015366:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8015368:	2181      	movs	r1, #129	; 0x81
 801536a:	4813      	ldr	r0, [pc, #76]	; (80153b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801536c:	f000 fcd5 	bl	8015d1a <USBD_GetEpDesc>
 8015370:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d002      	beq.n	801537e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8015378:	697b      	ldr	r3, [r7, #20]
 801537a:	2210      	movs	r2, #16
 801537c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801537e:	693b      	ldr	r3, [r7, #16]
 8015380:	2b00      	cmp	r3, #0
 8015382:	d006      	beq.n	8015392 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015384:	693b      	ldr	r3, [r7, #16]
 8015386:	2200      	movs	r2, #0
 8015388:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801538c:	711a      	strb	r2, [r3, #4]
 801538e:	2200      	movs	r2, #0
 8015390:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015392:	68fb      	ldr	r3, [r7, #12]
 8015394:	2b00      	cmp	r3, #0
 8015396:	d006      	beq.n	80153a6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	2200      	movs	r2, #0
 801539c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80153a0:	711a      	strb	r2, [r3, #4]
 80153a2:	2200      	movs	r2, #0
 80153a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	2243      	movs	r2, #67	; 0x43
 80153aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80153ac:	4b02      	ldr	r3, [pc, #8]	; (80153b8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80153ae:	4618      	mov	r0, r3
 80153b0:	3718      	adds	r7, #24
 80153b2:	46bd      	mov	sp, r7
 80153b4:	bd80      	pop	{r7, pc}
 80153b6:	bf00      	nop
 80153b8:	24000054 	.word	0x24000054

080153bc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80153bc:	b480      	push	{r7}
 80153be:	b083      	sub	sp, #12
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	220a      	movs	r2, #10
 80153c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80153ca:	4b03      	ldr	r3, [pc, #12]	; (80153d8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80153cc:	4618      	mov	r0, r3
 80153ce:	370c      	adds	r7, #12
 80153d0:	46bd      	mov	sp, r7
 80153d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d6:	4770      	bx	lr
 80153d8:	24000010 	.word	0x24000010

080153dc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80153dc:	b480      	push	{r7}
 80153de:	b083      	sub	sp, #12
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
 80153e4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80153e6:	683b      	ldr	r3, [r7, #0]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d101      	bne.n	80153f0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80153ec:	2303      	movs	r3, #3
 80153ee:	e009      	b.n	8015404 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80153f6:	687a      	ldr	r2, [r7, #4]
 80153f8:	33b0      	adds	r3, #176	; 0xb0
 80153fa:	009b      	lsls	r3, r3, #2
 80153fc:	4413      	add	r3, r2
 80153fe:	683a      	ldr	r2, [r7, #0]
 8015400:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015402:	2300      	movs	r3, #0
}
 8015404:	4618      	mov	r0, r3
 8015406:	370c      	adds	r7, #12
 8015408:	46bd      	mov	sp, r7
 801540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801540e:	4770      	bx	lr

08015410 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015410:	b480      	push	{r7}
 8015412:	b087      	sub	sp, #28
 8015414:	af00      	add	r7, sp, #0
 8015416:	60f8      	str	r0, [r7, #12]
 8015418:	60b9      	str	r1, [r7, #8]
 801541a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	32b0      	adds	r2, #176	; 0xb0
 8015426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801542a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801542c:	697b      	ldr	r3, [r7, #20]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d101      	bne.n	8015436 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015432:	2303      	movs	r3, #3
 8015434:	e008      	b.n	8015448 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8015436:	697b      	ldr	r3, [r7, #20]
 8015438:	68ba      	ldr	r2, [r7, #8]
 801543a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801543e:	697b      	ldr	r3, [r7, #20]
 8015440:	687a      	ldr	r2, [r7, #4]
 8015442:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8015446:	2300      	movs	r3, #0
}
 8015448:	4618      	mov	r0, r3
 801544a:	371c      	adds	r7, #28
 801544c:	46bd      	mov	sp, r7
 801544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015452:	4770      	bx	lr

08015454 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015454:	b480      	push	{r7}
 8015456:	b085      	sub	sp, #20
 8015458:	af00      	add	r7, sp, #0
 801545a:	6078      	str	r0, [r7, #4]
 801545c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	32b0      	adds	r2, #176	; 0xb0
 8015468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801546c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	2b00      	cmp	r3, #0
 8015472:	d101      	bne.n	8015478 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015474:	2303      	movs	r3, #3
 8015476:	e004      	b.n	8015482 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	683a      	ldr	r2, [r7, #0]
 801547c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8015480:	2300      	movs	r3, #0
}
 8015482:	4618      	mov	r0, r3
 8015484:	3714      	adds	r7, #20
 8015486:	46bd      	mov	sp, r7
 8015488:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548c:	4770      	bx	lr
	...

08015490 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8015490:	b580      	push	{r7, lr}
 8015492:	b084      	sub	sp, #16
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	32b0      	adds	r2, #176	; 0xb0
 80154a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80154a6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80154a8:	2301      	movs	r3, #1
 80154aa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80154ac:	68bb      	ldr	r3, [r7, #8]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d101      	bne.n	80154b6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80154b2:	2303      	movs	r3, #3
 80154b4:	e025      	b.n	8015502 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80154b6:	68bb      	ldr	r3, [r7, #8]
 80154b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d11f      	bne.n	8015500 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80154c0:	68bb      	ldr	r3, [r7, #8]
 80154c2:	2201      	movs	r2, #1
 80154c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80154c8:	4b10      	ldr	r3, [pc, #64]	; (801550c <USBD_CDC_TransmitPacket+0x7c>)
 80154ca:	781b      	ldrb	r3, [r3, #0]
 80154cc:	f003 020f 	and.w	r2, r3, #15
 80154d0:	68bb      	ldr	r3, [r7, #8]
 80154d2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80154d6:	6878      	ldr	r0, [r7, #4]
 80154d8:	4613      	mov	r3, r2
 80154da:	009b      	lsls	r3, r3, #2
 80154dc:	4413      	add	r3, r2
 80154de:	009b      	lsls	r3, r3, #2
 80154e0:	4403      	add	r3, r0
 80154e2:	3318      	adds	r3, #24
 80154e4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80154e6:	4b09      	ldr	r3, [pc, #36]	; (801550c <USBD_CDC_TransmitPacket+0x7c>)
 80154e8:	7819      	ldrb	r1, [r3, #0]
 80154ea:	68bb      	ldr	r3, [r7, #8]
 80154ec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80154f0:	68bb      	ldr	r3, [r7, #8]
 80154f2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80154f6:	6878      	ldr	r0, [r7, #4]
 80154f8:	f002 f84f 	bl	801759a <USBD_LL_Transmit>

    ret = USBD_OK;
 80154fc:	2300      	movs	r3, #0
 80154fe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8015500:	7bfb      	ldrb	r3, [r7, #15]
}
 8015502:	4618      	mov	r0, r3
 8015504:	3710      	adds	r7, #16
 8015506:	46bd      	mov	sp, r7
 8015508:	bd80      	pop	{r7, pc}
 801550a:	bf00      	nop
 801550c:	24000097 	.word	0x24000097

08015510 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8015510:	b580      	push	{r7, lr}
 8015512:	b084      	sub	sp, #16
 8015514:	af00      	add	r7, sp, #0
 8015516:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	32b0      	adds	r2, #176	; 0xb0
 8015522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015526:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	32b0      	adds	r2, #176	; 0xb0
 8015532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d101      	bne.n	801553e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801553a:	2303      	movs	r3, #3
 801553c:	e018      	b.n	8015570 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	7c1b      	ldrb	r3, [r3, #16]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d10a      	bne.n	801555c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015546:	4b0c      	ldr	r3, [pc, #48]	; (8015578 <USBD_CDC_ReceivePacket+0x68>)
 8015548:	7819      	ldrb	r1, [r3, #0]
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f002 f841 	bl	80175dc <USBD_LL_PrepareReceive>
 801555a:	e008      	b.n	801556e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801555c:	4b06      	ldr	r3, [pc, #24]	; (8015578 <USBD_CDC_ReceivePacket+0x68>)
 801555e:	7819      	ldrb	r1, [r3, #0]
 8015560:	68fb      	ldr	r3, [r7, #12]
 8015562:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015566:	2340      	movs	r3, #64	; 0x40
 8015568:	6878      	ldr	r0, [r7, #4]
 801556a:	f002 f837 	bl	80175dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801556e:	2300      	movs	r3, #0
}
 8015570:	4618      	mov	r0, r3
 8015572:	3710      	adds	r7, #16
 8015574:	46bd      	mov	sp, r7
 8015576:	bd80      	pop	{r7, pc}
 8015578:	24000098 	.word	0x24000098

0801557c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801557c:	b580      	push	{r7, lr}
 801557e:	b086      	sub	sp, #24
 8015580:	af00      	add	r7, sp, #0
 8015582:	60f8      	str	r0, [r7, #12]
 8015584:	60b9      	str	r1, [r7, #8]
 8015586:	4613      	mov	r3, r2
 8015588:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801558a:	68fb      	ldr	r3, [r7, #12]
 801558c:	2b00      	cmp	r3, #0
 801558e:	d101      	bne.n	8015594 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015590:	2303      	movs	r3, #3
 8015592:	e01f      	b.n	80155d4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	2200      	movs	r2, #0
 8015598:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	2200      	movs	r2, #0
 80155a0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	2200      	movs	r2, #0
 80155a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80155ac:	68bb      	ldr	r3, [r7, #8]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d003      	beq.n	80155ba <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	68ba      	ldr	r2, [r7, #8]
 80155b6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	2201      	movs	r2, #1
 80155be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	79fa      	ldrb	r2, [r7, #7]
 80155c6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80155c8:	68f8      	ldr	r0, [r7, #12]
 80155ca:	f001 feab 	bl	8017324 <USBD_LL_Init>
 80155ce:	4603      	mov	r3, r0
 80155d0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80155d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80155d4:	4618      	mov	r0, r3
 80155d6:	3718      	adds	r7, #24
 80155d8:	46bd      	mov	sp, r7
 80155da:	bd80      	pop	{r7, pc}

080155dc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80155dc:	b580      	push	{r7, lr}
 80155de:	b084      	sub	sp, #16
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	6078      	str	r0, [r7, #4]
 80155e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80155e6:	2300      	movs	r3, #0
 80155e8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80155ea:	683b      	ldr	r3, [r7, #0]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d101      	bne.n	80155f4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80155f0:	2303      	movs	r3, #3
 80155f2:	e025      	b.n	8015640 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	683a      	ldr	r2, [r7, #0]
 80155f8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	32ae      	adds	r2, #174	; 0xae
 8015606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801560a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801560c:	2b00      	cmp	r3, #0
 801560e:	d00f      	beq.n	8015630 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	32ae      	adds	r2, #174	; 0xae
 801561a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801561e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015620:	f107 020e 	add.w	r2, r7, #14
 8015624:	4610      	mov	r0, r2
 8015626:	4798      	blx	r3
 8015628:	4602      	mov	r2, r0
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8015630:	687b      	ldr	r3, [r7, #4]
 8015632:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015636:	1c5a      	adds	r2, r3, #1
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 801563e:	2300      	movs	r3, #0
}
 8015640:	4618      	mov	r0, r3
 8015642:	3710      	adds	r7, #16
 8015644:	46bd      	mov	sp, r7
 8015646:	bd80      	pop	{r7, pc}

08015648 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015648:	b580      	push	{r7, lr}
 801564a:	b082      	sub	sp, #8
 801564c:	af00      	add	r7, sp, #0
 801564e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015650:	6878      	ldr	r0, [r7, #4]
 8015652:	f001 feb9 	bl	80173c8 <USBD_LL_Start>
 8015656:	4603      	mov	r3, r0
}
 8015658:	4618      	mov	r0, r3
 801565a:	3708      	adds	r7, #8
 801565c:	46bd      	mov	sp, r7
 801565e:	bd80      	pop	{r7, pc}

08015660 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015660:	b480      	push	{r7}
 8015662:	b083      	sub	sp, #12
 8015664:	af00      	add	r7, sp, #0
 8015666:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015668:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801566a:	4618      	mov	r0, r3
 801566c:	370c      	adds	r7, #12
 801566e:	46bd      	mov	sp, r7
 8015670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015674:	4770      	bx	lr

08015676 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015676:	b580      	push	{r7, lr}
 8015678:	b084      	sub	sp, #16
 801567a:	af00      	add	r7, sp, #0
 801567c:	6078      	str	r0, [r7, #4]
 801567e:	460b      	mov	r3, r1
 8015680:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015682:	2300      	movs	r3, #0
 8015684:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801568c:	2b00      	cmp	r3, #0
 801568e:	d009      	beq.n	80156a4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	78fa      	ldrb	r2, [r7, #3]
 801569a:	4611      	mov	r1, r2
 801569c:	6878      	ldr	r0, [r7, #4]
 801569e:	4798      	blx	r3
 80156a0:	4603      	mov	r3, r0
 80156a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80156a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80156a6:	4618      	mov	r0, r3
 80156a8:	3710      	adds	r7, #16
 80156aa:	46bd      	mov	sp, r7
 80156ac:	bd80      	pop	{r7, pc}

080156ae <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80156ae:	b580      	push	{r7, lr}
 80156b0:	b084      	sub	sp, #16
 80156b2:	af00      	add	r7, sp, #0
 80156b4:	6078      	str	r0, [r7, #4]
 80156b6:	460b      	mov	r3, r1
 80156b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80156ba:	2300      	movs	r3, #0
 80156bc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156c4:	685b      	ldr	r3, [r3, #4]
 80156c6:	78fa      	ldrb	r2, [r7, #3]
 80156c8:	4611      	mov	r1, r2
 80156ca:	6878      	ldr	r0, [r7, #4]
 80156cc:	4798      	blx	r3
 80156ce:	4603      	mov	r3, r0
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d001      	beq.n	80156d8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80156d4:	2303      	movs	r3, #3
 80156d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80156d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80156da:	4618      	mov	r0, r3
 80156dc:	3710      	adds	r7, #16
 80156de:	46bd      	mov	sp, r7
 80156e0:	bd80      	pop	{r7, pc}

080156e2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80156e2:	b580      	push	{r7, lr}
 80156e4:	b084      	sub	sp, #16
 80156e6:	af00      	add	r7, sp, #0
 80156e8:	6078      	str	r0, [r7, #4]
 80156ea:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80156f2:	6839      	ldr	r1, [r7, #0]
 80156f4:	4618      	mov	r0, r3
 80156f6:	f001 f938 	bl	801696a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	2201      	movs	r2, #1
 80156fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015708:	461a      	mov	r2, r3
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015716:	f003 031f 	and.w	r3, r3, #31
 801571a:	2b02      	cmp	r3, #2
 801571c:	d01a      	beq.n	8015754 <USBD_LL_SetupStage+0x72>
 801571e:	2b02      	cmp	r3, #2
 8015720:	d822      	bhi.n	8015768 <USBD_LL_SetupStage+0x86>
 8015722:	2b00      	cmp	r3, #0
 8015724:	d002      	beq.n	801572c <USBD_LL_SetupStage+0x4a>
 8015726:	2b01      	cmp	r3, #1
 8015728:	d00a      	beq.n	8015740 <USBD_LL_SetupStage+0x5e>
 801572a:	e01d      	b.n	8015768 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015732:	4619      	mov	r1, r3
 8015734:	6878      	ldr	r0, [r7, #4]
 8015736:	f000 fb65 	bl	8015e04 <USBD_StdDevReq>
 801573a:	4603      	mov	r3, r0
 801573c:	73fb      	strb	r3, [r7, #15]
      break;
 801573e:	e020      	b.n	8015782 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015746:	4619      	mov	r1, r3
 8015748:	6878      	ldr	r0, [r7, #4]
 801574a:	f000 fbcd 	bl	8015ee8 <USBD_StdItfReq>
 801574e:	4603      	mov	r3, r0
 8015750:	73fb      	strb	r3, [r7, #15]
      break;
 8015752:	e016      	b.n	8015782 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801575a:	4619      	mov	r1, r3
 801575c:	6878      	ldr	r0, [r7, #4]
 801575e:	f000 fc2f 	bl	8015fc0 <USBD_StdEPReq>
 8015762:	4603      	mov	r3, r0
 8015764:	73fb      	strb	r3, [r7, #15]
      break;
 8015766:	e00c      	b.n	8015782 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 801576e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015772:	b2db      	uxtb	r3, r3
 8015774:	4619      	mov	r1, r3
 8015776:	6878      	ldr	r0, [r7, #4]
 8015778:	f001 fe86 	bl	8017488 <USBD_LL_StallEP>
 801577c:	4603      	mov	r3, r0
 801577e:	73fb      	strb	r3, [r7, #15]
      break;
 8015780:	bf00      	nop
  }

  return ret;
 8015782:	7bfb      	ldrb	r3, [r7, #15]
}
 8015784:	4618      	mov	r0, r3
 8015786:	3710      	adds	r7, #16
 8015788:	46bd      	mov	sp, r7
 801578a:	bd80      	pop	{r7, pc}

0801578c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801578c:	b580      	push	{r7, lr}
 801578e:	b086      	sub	sp, #24
 8015790:	af00      	add	r7, sp, #0
 8015792:	60f8      	str	r0, [r7, #12]
 8015794:	460b      	mov	r3, r1
 8015796:	607a      	str	r2, [r7, #4]
 8015798:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801579a:	2300      	movs	r3, #0
 801579c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801579e:	7afb      	ldrb	r3, [r7, #11]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d16e      	bne.n	8015882 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80157a4:	68fb      	ldr	r3, [r7, #12]
 80157a6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80157aa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80157b2:	2b03      	cmp	r3, #3
 80157b4:	f040 8098 	bne.w	80158e8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80157b8:	693b      	ldr	r3, [r7, #16]
 80157ba:	689a      	ldr	r2, [r3, #8]
 80157bc:	693b      	ldr	r3, [r7, #16]
 80157be:	68db      	ldr	r3, [r3, #12]
 80157c0:	429a      	cmp	r2, r3
 80157c2:	d913      	bls.n	80157ec <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80157c4:	693b      	ldr	r3, [r7, #16]
 80157c6:	689a      	ldr	r2, [r3, #8]
 80157c8:	693b      	ldr	r3, [r7, #16]
 80157ca:	68db      	ldr	r3, [r3, #12]
 80157cc:	1ad2      	subs	r2, r2, r3
 80157ce:	693b      	ldr	r3, [r7, #16]
 80157d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80157d2:	693b      	ldr	r3, [r7, #16]
 80157d4:	68da      	ldr	r2, [r3, #12]
 80157d6:	693b      	ldr	r3, [r7, #16]
 80157d8:	689b      	ldr	r3, [r3, #8]
 80157da:	4293      	cmp	r3, r2
 80157dc:	bf28      	it	cs
 80157de:	4613      	movcs	r3, r2
 80157e0:	461a      	mov	r2, r3
 80157e2:	6879      	ldr	r1, [r7, #4]
 80157e4:	68f8      	ldr	r0, [r7, #12]
 80157e6:	f001 f9b4 	bl	8016b52 <USBD_CtlContinueRx>
 80157ea:	e07d      	b.n	80158e8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80157f2:	f003 031f 	and.w	r3, r3, #31
 80157f6:	2b02      	cmp	r3, #2
 80157f8:	d014      	beq.n	8015824 <USBD_LL_DataOutStage+0x98>
 80157fa:	2b02      	cmp	r3, #2
 80157fc:	d81d      	bhi.n	801583a <USBD_LL_DataOutStage+0xae>
 80157fe:	2b00      	cmp	r3, #0
 8015800:	d002      	beq.n	8015808 <USBD_LL_DataOutStage+0x7c>
 8015802:	2b01      	cmp	r3, #1
 8015804:	d003      	beq.n	801580e <USBD_LL_DataOutStage+0x82>
 8015806:	e018      	b.n	801583a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8015808:	2300      	movs	r3, #0
 801580a:	75bb      	strb	r3, [r7, #22]
            break;
 801580c:	e018      	b.n	8015840 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801580e:	68fb      	ldr	r3, [r7, #12]
 8015810:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8015814:	b2db      	uxtb	r3, r3
 8015816:	4619      	mov	r1, r3
 8015818:	68f8      	ldr	r0, [r7, #12]
 801581a:	f000 fa64 	bl	8015ce6 <USBD_CoreFindIF>
 801581e:	4603      	mov	r3, r0
 8015820:	75bb      	strb	r3, [r7, #22]
            break;
 8015822:	e00d      	b.n	8015840 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8015824:	68fb      	ldr	r3, [r7, #12]
 8015826:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801582a:	b2db      	uxtb	r3, r3
 801582c:	4619      	mov	r1, r3
 801582e:	68f8      	ldr	r0, [r7, #12]
 8015830:	f000 fa66 	bl	8015d00 <USBD_CoreFindEP>
 8015834:	4603      	mov	r3, r0
 8015836:	75bb      	strb	r3, [r7, #22]
            break;
 8015838:	e002      	b.n	8015840 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801583a:	2300      	movs	r3, #0
 801583c:	75bb      	strb	r3, [r7, #22]
            break;
 801583e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8015840:	7dbb      	ldrb	r3, [r7, #22]
 8015842:	2b00      	cmp	r3, #0
 8015844:	d119      	bne.n	801587a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015846:	68fb      	ldr	r3, [r7, #12]
 8015848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801584c:	b2db      	uxtb	r3, r3
 801584e:	2b03      	cmp	r3, #3
 8015850:	d113      	bne.n	801587a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8015852:	7dba      	ldrb	r2, [r7, #22]
 8015854:	68fb      	ldr	r3, [r7, #12]
 8015856:	32ae      	adds	r2, #174	; 0xae
 8015858:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801585c:	691b      	ldr	r3, [r3, #16]
 801585e:	2b00      	cmp	r3, #0
 8015860:	d00b      	beq.n	801587a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015862:	7dba      	ldrb	r2, [r7, #22]
 8015864:	68fb      	ldr	r3, [r7, #12]
 8015866:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801586a:	7dba      	ldrb	r2, [r7, #22]
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	32ae      	adds	r2, #174	; 0xae
 8015870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015874:	691b      	ldr	r3, [r3, #16]
 8015876:	68f8      	ldr	r0, [r7, #12]
 8015878:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801587a:	68f8      	ldr	r0, [r7, #12]
 801587c:	f001 f97a 	bl	8016b74 <USBD_CtlSendStatus>
 8015880:	e032      	b.n	80158e8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015882:	7afb      	ldrb	r3, [r7, #11]
 8015884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015888:	b2db      	uxtb	r3, r3
 801588a:	4619      	mov	r1, r3
 801588c:	68f8      	ldr	r0, [r7, #12]
 801588e:	f000 fa37 	bl	8015d00 <USBD_CoreFindEP>
 8015892:	4603      	mov	r3, r0
 8015894:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015896:	7dbb      	ldrb	r3, [r7, #22]
 8015898:	2bff      	cmp	r3, #255	; 0xff
 801589a:	d025      	beq.n	80158e8 <USBD_LL_DataOutStage+0x15c>
 801589c:	7dbb      	ldrb	r3, [r7, #22]
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d122      	bne.n	80158e8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158a8:	b2db      	uxtb	r3, r3
 80158aa:	2b03      	cmp	r3, #3
 80158ac:	d117      	bne.n	80158de <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80158ae:	7dba      	ldrb	r2, [r7, #22]
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	32ae      	adds	r2, #174	; 0xae
 80158b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158b8:	699b      	ldr	r3, [r3, #24]
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d00f      	beq.n	80158de <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80158be:	7dba      	ldrb	r2, [r7, #22]
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80158c6:	7dba      	ldrb	r2, [r7, #22]
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	32ae      	adds	r2, #174	; 0xae
 80158cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80158d0:	699b      	ldr	r3, [r3, #24]
 80158d2:	7afa      	ldrb	r2, [r7, #11]
 80158d4:	4611      	mov	r1, r2
 80158d6:	68f8      	ldr	r0, [r7, #12]
 80158d8:	4798      	blx	r3
 80158da:	4603      	mov	r3, r0
 80158dc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80158de:	7dfb      	ldrb	r3, [r7, #23]
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d001      	beq.n	80158e8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80158e4:	7dfb      	ldrb	r3, [r7, #23]
 80158e6:	e000      	b.n	80158ea <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80158e8:	2300      	movs	r3, #0
}
 80158ea:	4618      	mov	r0, r3
 80158ec:	3718      	adds	r7, #24
 80158ee:	46bd      	mov	sp, r7
 80158f0:	bd80      	pop	{r7, pc}

080158f2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80158f2:	b580      	push	{r7, lr}
 80158f4:	b086      	sub	sp, #24
 80158f6:	af00      	add	r7, sp, #0
 80158f8:	60f8      	str	r0, [r7, #12]
 80158fa:	460b      	mov	r3, r1
 80158fc:	607a      	str	r2, [r7, #4]
 80158fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8015900:	7afb      	ldrb	r3, [r7, #11]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d16f      	bne.n	80159e6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	3314      	adds	r3, #20
 801590a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015912:	2b02      	cmp	r3, #2
 8015914:	d15a      	bne.n	80159cc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8015916:	693b      	ldr	r3, [r7, #16]
 8015918:	689a      	ldr	r2, [r3, #8]
 801591a:	693b      	ldr	r3, [r7, #16]
 801591c:	68db      	ldr	r3, [r3, #12]
 801591e:	429a      	cmp	r2, r3
 8015920:	d914      	bls.n	801594c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015922:	693b      	ldr	r3, [r7, #16]
 8015924:	689a      	ldr	r2, [r3, #8]
 8015926:	693b      	ldr	r3, [r7, #16]
 8015928:	68db      	ldr	r3, [r3, #12]
 801592a:	1ad2      	subs	r2, r2, r3
 801592c:	693b      	ldr	r3, [r7, #16]
 801592e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015930:	693b      	ldr	r3, [r7, #16]
 8015932:	689b      	ldr	r3, [r3, #8]
 8015934:	461a      	mov	r2, r3
 8015936:	6879      	ldr	r1, [r7, #4]
 8015938:	68f8      	ldr	r0, [r7, #12]
 801593a:	f001 f8dc 	bl	8016af6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801593e:	2300      	movs	r3, #0
 8015940:	2200      	movs	r2, #0
 8015942:	2100      	movs	r1, #0
 8015944:	68f8      	ldr	r0, [r7, #12]
 8015946:	f001 fe49 	bl	80175dc <USBD_LL_PrepareReceive>
 801594a:	e03f      	b.n	80159cc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801594c:	693b      	ldr	r3, [r7, #16]
 801594e:	68da      	ldr	r2, [r3, #12]
 8015950:	693b      	ldr	r3, [r7, #16]
 8015952:	689b      	ldr	r3, [r3, #8]
 8015954:	429a      	cmp	r2, r3
 8015956:	d11c      	bne.n	8015992 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015958:	693b      	ldr	r3, [r7, #16]
 801595a:	685a      	ldr	r2, [r3, #4]
 801595c:	693b      	ldr	r3, [r7, #16]
 801595e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015960:	429a      	cmp	r2, r3
 8015962:	d316      	bcc.n	8015992 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015964:	693b      	ldr	r3, [r7, #16]
 8015966:	685a      	ldr	r2, [r3, #4]
 8015968:	68fb      	ldr	r3, [r7, #12]
 801596a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801596e:	429a      	cmp	r2, r3
 8015970:	d20f      	bcs.n	8015992 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015972:	2200      	movs	r2, #0
 8015974:	2100      	movs	r1, #0
 8015976:	68f8      	ldr	r0, [r7, #12]
 8015978:	f001 f8bd 	bl	8016af6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801597c:	68fb      	ldr	r3, [r7, #12]
 801597e:	2200      	movs	r2, #0
 8015980:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015984:	2300      	movs	r3, #0
 8015986:	2200      	movs	r2, #0
 8015988:	2100      	movs	r1, #0
 801598a:	68f8      	ldr	r0, [r7, #12]
 801598c:	f001 fe26 	bl	80175dc <USBD_LL_PrepareReceive>
 8015990:	e01c      	b.n	80159cc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015992:	68fb      	ldr	r3, [r7, #12]
 8015994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015998:	b2db      	uxtb	r3, r3
 801599a:	2b03      	cmp	r3, #3
 801599c:	d10f      	bne.n	80159be <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159a4:	68db      	ldr	r3, [r3, #12]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d009      	beq.n	80159be <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	2200      	movs	r2, #0
 80159ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80159b8:	68db      	ldr	r3, [r3, #12]
 80159ba:	68f8      	ldr	r0, [r7, #12]
 80159bc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80159be:	2180      	movs	r1, #128	; 0x80
 80159c0:	68f8      	ldr	r0, [r7, #12]
 80159c2:	f001 fd61 	bl	8017488 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80159c6:	68f8      	ldr	r0, [r7, #12]
 80159c8:	f001 f8e7 	bl	8016b9a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80159cc:	68fb      	ldr	r3, [r7, #12]
 80159ce:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d03a      	beq.n	8015a4c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80159d6:	68f8      	ldr	r0, [r7, #12]
 80159d8:	f7ff fe42 	bl	8015660 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	2200      	movs	r2, #0
 80159e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80159e4:	e032      	b.n	8015a4c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80159e6:	7afb      	ldrb	r3, [r7, #11]
 80159e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80159ec:	b2db      	uxtb	r3, r3
 80159ee:	4619      	mov	r1, r3
 80159f0:	68f8      	ldr	r0, [r7, #12]
 80159f2:	f000 f985 	bl	8015d00 <USBD_CoreFindEP>
 80159f6:	4603      	mov	r3, r0
 80159f8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80159fa:	7dfb      	ldrb	r3, [r7, #23]
 80159fc:	2bff      	cmp	r3, #255	; 0xff
 80159fe:	d025      	beq.n	8015a4c <USBD_LL_DataInStage+0x15a>
 8015a00:	7dfb      	ldrb	r3, [r7, #23]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d122      	bne.n	8015a4c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a06:	68fb      	ldr	r3, [r7, #12]
 8015a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a0c:	b2db      	uxtb	r3, r3
 8015a0e:	2b03      	cmp	r3, #3
 8015a10:	d11c      	bne.n	8015a4c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015a12:	7dfa      	ldrb	r2, [r7, #23]
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	32ae      	adds	r2, #174	; 0xae
 8015a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a1c:	695b      	ldr	r3, [r3, #20]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d014      	beq.n	8015a4c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015a22:	7dfa      	ldrb	r2, [r7, #23]
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015a2a:	7dfa      	ldrb	r2, [r7, #23]
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	32ae      	adds	r2, #174	; 0xae
 8015a30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015a34:	695b      	ldr	r3, [r3, #20]
 8015a36:	7afa      	ldrb	r2, [r7, #11]
 8015a38:	4611      	mov	r1, r2
 8015a3a:	68f8      	ldr	r0, [r7, #12]
 8015a3c:	4798      	blx	r3
 8015a3e:	4603      	mov	r3, r0
 8015a40:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015a42:	7dbb      	ldrb	r3, [r7, #22]
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d001      	beq.n	8015a4c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015a48:	7dbb      	ldrb	r3, [r7, #22]
 8015a4a:	e000      	b.n	8015a4e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015a4c:	2300      	movs	r3, #0
}
 8015a4e:	4618      	mov	r0, r3
 8015a50:	3718      	adds	r7, #24
 8015a52:	46bd      	mov	sp, r7
 8015a54:	bd80      	pop	{r7, pc}

08015a56 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015a56:	b580      	push	{r7, lr}
 8015a58:	b084      	sub	sp, #16
 8015a5a:	af00      	add	r7, sp, #0
 8015a5c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015a5e:	2300      	movs	r3, #0
 8015a60:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	2201      	movs	r2, #1
 8015a66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	2200      	movs	r2, #0
 8015a6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	2200      	movs	r2, #0
 8015a76:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	2200      	movs	r2, #0
 8015a7c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	2200      	movs	r2, #0
 8015a84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d014      	beq.n	8015abc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a98:	685b      	ldr	r3, [r3, #4]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d00e      	beq.n	8015abc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015aa4:	685b      	ldr	r3, [r3, #4]
 8015aa6:	687a      	ldr	r2, [r7, #4]
 8015aa8:	6852      	ldr	r2, [r2, #4]
 8015aaa:	b2d2      	uxtb	r2, r2
 8015aac:	4611      	mov	r1, r2
 8015aae:	6878      	ldr	r0, [r7, #4]
 8015ab0:	4798      	blx	r3
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	2b00      	cmp	r3, #0
 8015ab6:	d001      	beq.n	8015abc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015ab8:	2303      	movs	r3, #3
 8015aba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015abc:	2340      	movs	r3, #64	; 0x40
 8015abe:	2200      	movs	r2, #0
 8015ac0:	2100      	movs	r1, #0
 8015ac2:	6878      	ldr	r0, [r7, #4]
 8015ac4:	f001 fc9b 	bl	80173fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	2201      	movs	r2, #1
 8015acc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	2240      	movs	r2, #64	; 0x40
 8015ad4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015ad8:	2340      	movs	r3, #64	; 0x40
 8015ada:	2200      	movs	r2, #0
 8015adc:	2180      	movs	r1, #128	; 0x80
 8015ade:	6878      	ldr	r0, [r7, #4]
 8015ae0:	f001 fc8d 	bl	80173fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	2201      	movs	r2, #1
 8015ae8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015aea:	687b      	ldr	r3, [r7, #4]
 8015aec:	2240      	movs	r2, #64	; 0x40
 8015aee:	621a      	str	r2, [r3, #32]

  return ret;
 8015af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8015af2:	4618      	mov	r0, r3
 8015af4:	3710      	adds	r7, #16
 8015af6:	46bd      	mov	sp, r7
 8015af8:	bd80      	pop	{r7, pc}

08015afa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015afa:	b480      	push	{r7}
 8015afc:	b083      	sub	sp, #12
 8015afe:	af00      	add	r7, sp, #0
 8015b00:	6078      	str	r0, [r7, #4]
 8015b02:	460b      	mov	r3, r1
 8015b04:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	78fa      	ldrb	r2, [r7, #3]
 8015b0a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015b0c:	2300      	movs	r3, #0
}
 8015b0e:	4618      	mov	r0, r3
 8015b10:	370c      	adds	r7, #12
 8015b12:	46bd      	mov	sp, r7
 8015b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b18:	4770      	bx	lr

08015b1a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015b1a:	b480      	push	{r7}
 8015b1c:	b083      	sub	sp, #12
 8015b1e:	af00      	add	r7, sp, #0
 8015b20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b28:	b2db      	uxtb	r3, r3
 8015b2a:	2b04      	cmp	r3, #4
 8015b2c:	d006      	beq.n	8015b3c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b34:	b2da      	uxtb	r2, r3
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	2204      	movs	r2, #4
 8015b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015b44:	2300      	movs	r3, #0
}
 8015b46:	4618      	mov	r0, r3
 8015b48:	370c      	adds	r7, #12
 8015b4a:	46bd      	mov	sp, r7
 8015b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b50:	4770      	bx	lr

08015b52 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015b52:	b480      	push	{r7}
 8015b54:	b083      	sub	sp, #12
 8015b56:	af00      	add	r7, sp, #0
 8015b58:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b60:	b2db      	uxtb	r3, r3
 8015b62:	2b04      	cmp	r3, #4
 8015b64:	d106      	bne.n	8015b74 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015b6c:	b2da      	uxtb	r2, r3
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015b74:	2300      	movs	r3, #0
}
 8015b76:	4618      	mov	r0, r3
 8015b78:	370c      	adds	r7, #12
 8015b7a:	46bd      	mov	sp, r7
 8015b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b80:	4770      	bx	lr

08015b82 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015b82:	b580      	push	{r7, lr}
 8015b84:	b082      	sub	sp, #8
 8015b86:	af00      	add	r7, sp, #0
 8015b88:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015b90:	b2db      	uxtb	r3, r3
 8015b92:	2b03      	cmp	r3, #3
 8015b94:	d110      	bne.n	8015bb8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d00b      	beq.n	8015bb8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ba6:	69db      	ldr	r3, [r3, #28]
 8015ba8:	2b00      	cmp	r3, #0
 8015baa:	d005      	beq.n	8015bb8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015bb2:	69db      	ldr	r3, [r3, #28]
 8015bb4:	6878      	ldr	r0, [r7, #4]
 8015bb6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015bb8:	2300      	movs	r3, #0
}
 8015bba:	4618      	mov	r0, r3
 8015bbc:	3708      	adds	r7, #8
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	bd80      	pop	{r7, pc}

08015bc2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015bc2:	b580      	push	{r7, lr}
 8015bc4:	b082      	sub	sp, #8
 8015bc6:	af00      	add	r7, sp, #0
 8015bc8:	6078      	str	r0, [r7, #4]
 8015bca:	460b      	mov	r3, r1
 8015bcc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	32ae      	adds	r2, #174	; 0xae
 8015bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d101      	bne.n	8015be4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015be0:	2303      	movs	r3, #3
 8015be2:	e01c      	b.n	8015c1e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015bea:	b2db      	uxtb	r3, r3
 8015bec:	2b03      	cmp	r3, #3
 8015bee:	d115      	bne.n	8015c1c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	32ae      	adds	r2, #174	; 0xae
 8015bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015bfe:	6a1b      	ldr	r3, [r3, #32]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d00b      	beq.n	8015c1c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	32ae      	adds	r2, #174	; 0xae
 8015c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c12:	6a1b      	ldr	r3, [r3, #32]
 8015c14:	78fa      	ldrb	r2, [r7, #3]
 8015c16:	4611      	mov	r1, r2
 8015c18:	6878      	ldr	r0, [r7, #4]
 8015c1a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015c1c:	2300      	movs	r3, #0
}
 8015c1e:	4618      	mov	r0, r3
 8015c20:	3708      	adds	r7, #8
 8015c22:	46bd      	mov	sp, r7
 8015c24:	bd80      	pop	{r7, pc}

08015c26 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015c26:	b580      	push	{r7, lr}
 8015c28:	b082      	sub	sp, #8
 8015c2a:	af00      	add	r7, sp, #0
 8015c2c:	6078      	str	r0, [r7, #4]
 8015c2e:	460b      	mov	r3, r1
 8015c30:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	32ae      	adds	r2, #174	; 0xae
 8015c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d101      	bne.n	8015c48 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015c44:	2303      	movs	r3, #3
 8015c46:	e01c      	b.n	8015c82 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c4e:	b2db      	uxtb	r3, r3
 8015c50:	2b03      	cmp	r3, #3
 8015c52:	d115      	bne.n	8015c80 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	32ae      	adds	r2, #174	; 0xae
 8015c5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d00b      	beq.n	8015c80 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	32ae      	adds	r2, #174	; 0xae
 8015c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c78:	78fa      	ldrb	r2, [r7, #3]
 8015c7a:	4611      	mov	r1, r2
 8015c7c:	6878      	ldr	r0, [r7, #4]
 8015c7e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015c80:	2300      	movs	r3, #0
}
 8015c82:	4618      	mov	r0, r3
 8015c84:	3708      	adds	r7, #8
 8015c86:	46bd      	mov	sp, r7
 8015c88:	bd80      	pop	{r7, pc}

08015c8a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015c8a:	b480      	push	{r7}
 8015c8c:	b083      	sub	sp, #12
 8015c8e:	af00      	add	r7, sp, #0
 8015c90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015c92:	2300      	movs	r3, #0
}
 8015c94:	4618      	mov	r0, r3
 8015c96:	370c      	adds	r7, #12
 8015c98:	46bd      	mov	sp, r7
 8015c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c9e:	4770      	bx	lr

08015ca0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015ca0:	b580      	push	{r7, lr}
 8015ca2:	b084      	sub	sp, #16
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015ca8:	2300      	movs	r3, #0
 8015caa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	2201      	movs	r2, #1
 8015cb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d00e      	beq.n	8015cdc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015cc4:	685b      	ldr	r3, [r3, #4]
 8015cc6:	687a      	ldr	r2, [r7, #4]
 8015cc8:	6852      	ldr	r2, [r2, #4]
 8015cca:	b2d2      	uxtb	r2, r2
 8015ccc:	4611      	mov	r1, r2
 8015cce:	6878      	ldr	r0, [r7, #4]
 8015cd0:	4798      	blx	r3
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d001      	beq.n	8015cdc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015cd8:	2303      	movs	r3, #3
 8015cda:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015cde:	4618      	mov	r0, r3
 8015ce0:	3710      	adds	r7, #16
 8015ce2:	46bd      	mov	sp, r7
 8015ce4:	bd80      	pop	{r7, pc}

08015ce6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015ce6:	b480      	push	{r7}
 8015ce8:	b083      	sub	sp, #12
 8015cea:	af00      	add	r7, sp, #0
 8015cec:	6078      	str	r0, [r7, #4]
 8015cee:	460b      	mov	r3, r1
 8015cf0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015cf2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	370c      	adds	r7, #12
 8015cf8:	46bd      	mov	sp, r7
 8015cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cfe:	4770      	bx	lr

08015d00 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015d00:	b480      	push	{r7}
 8015d02:	b083      	sub	sp, #12
 8015d04:	af00      	add	r7, sp, #0
 8015d06:	6078      	str	r0, [r7, #4]
 8015d08:	460b      	mov	r3, r1
 8015d0a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015d0c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015d0e:	4618      	mov	r0, r3
 8015d10:	370c      	adds	r7, #12
 8015d12:	46bd      	mov	sp, r7
 8015d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d18:	4770      	bx	lr

08015d1a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015d1a:	b580      	push	{r7, lr}
 8015d1c:	b086      	sub	sp, #24
 8015d1e:	af00      	add	r7, sp, #0
 8015d20:	6078      	str	r0, [r7, #4]
 8015d22:	460b      	mov	r3, r1
 8015d24:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015d2e:	2300      	movs	r3, #0
 8015d30:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	885b      	ldrh	r3, [r3, #2]
 8015d36:	b29a      	uxth	r2, r3
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	781b      	ldrb	r3, [r3, #0]
 8015d3c:	b29b      	uxth	r3, r3
 8015d3e:	429a      	cmp	r2, r3
 8015d40:	d920      	bls.n	8015d84 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	781b      	ldrb	r3, [r3, #0]
 8015d46:	b29b      	uxth	r3, r3
 8015d48:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015d4a:	e013      	b.n	8015d74 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015d4c:	f107 030a 	add.w	r3, r7, #10
 8015d50:	4619      	mov	r1, r3
 8015d52:	6978      	ldr	r0, [r7, #20]
 8015d54:	f000 f81b 	bl	8015d8e <USBD_GetNextDesc>
 8015d58:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015d5a:	697b      	ldr	r3, [r7, #20]
 8015d5c:	785b      	ldrb	r3, [r3, #1]
 8015d5e:	2b05      	cmp	r3, #5
 8015d60:	d108      	bne.n	8015d74 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015d62:	697b      	ldr	r3, [r7, #20]
 8015d64:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015d66:	693b      	ldr	r3, [r7, #16]
 8015d68:	789b      	ldrb	r3, [r3, #2]
 8015d6a:	78fa      	ldrb	r2, [r7, #3]
 8015d6c:	429a      	cmp	r2, r3
 8015d6e:	d008      	beq.n	8015d82 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015d70:	2300      	movs	r3, #0
 8015d72:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015d74:	68fb      	ldr	r3, [r7, #12]
 8015d76:	885b      	ldrh	r3, [r3, #2]
 8015d78:	b29a      	uxth	r2, r3
 8015d7a:	897b      	ldrh	r3, [r7, #10]
 8015d7c:	429a      	cmp	r2, r3
 8015d7e:	d8e5      	bhi.n	8015d4c <USBD_GetEpDesc+0x32>
 8015d80:	e000      	b.n	8015d84 <USBD_GetEpDesc+0x6a>
          break;
 8015d82:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015d84:	693b      	ldr	r3, [r7, #16]
}
 8015d86:	4618      	mov	r0, r3
 8015d88:	3718      	adds	r7, #24
 8015d8a:	46bd      	mov	sp, r7
 8015d8c:	bd80      	pop	{r7, pc}

08015d8e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015d8e:	b480      	push	{r7}
 8015d90:	b085      	sub	sp, #20
 8015d92:	af00      	add	r7, sp, #0
 8015d94:	6078      	str	r0, [r7, #4]
 8015d96:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015d9c:	683b      	ldr	r3, [r7, #0]
 8015d9e:	881a      	ldrh	r2, [r3, #0]
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	781b      	ldrb	r3, [r3, #0]
 8015da4:	b29b      	uxth	r3, r3
 8015da6:	4413      	add	r3, r2
 8015da8:	b29a      	uxth	r2, r3
 8015daa:	683b      	ldr	r3, [r7, #0]
 8015dac:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	781b      	ldrb	r3, [r3, #0]
 8015db2:	461a      	mov	r2, r3
 8015db4:	687b      	ldr	r3, [r7, #4]
 8015db6:	4413      	add	r3, r2
 8015db8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015dba:	68fb      	ldr	r3, [r7, #12]
}
 8015dbc:	4618      	mov	r0, r3
 8015dbe:	3714      	adds	r7, #20
 8015dc0:	46bd      	mov	sp, r7
 8015dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dc6:	4770      	bx	lr

08015dc8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015dc8:	b480      	push	{r7}
 8015dca:	b087      	sub	sp, #28
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015dd4:	697b      	ldr	r3, [r7, #20]
 8015dd6:	781b      	ldrb	r3, [r3, #0]
 8015dd8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015dda:	697b      	ldr	r3, [r7, #20]
 8015ddc:	3301      	adds	r3, #1
 8015dde:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015de0:	697b      	ldr	r3, [r7, #20]
 8015de2:	781b      	ldrb	r3, [r3, #0]
 8015de4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015de6:	8a3b      	ldrh	r3, [r7, #16]
 8015de8:	021b      	lsls	r3, r3, #8
 8015dea:	b21a      	sxth	r2, r3
 8015dec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015df0:	4313      	orrs	r3, r2
 8015df2:	b21b      	sxth	r3, r3
 8015df4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015df6:	89fb      	ldrh	r3, [r7, #14]
}
 8015df8:	4618      	mov	r0, r3
 8015dfa:	371c      	adds	r7, #28
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e02:	4770      	bx	lr

08015e04 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e04:	b580      	push	{r7, lr}
 8015e06:	b084      	sub	sp, #16
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	6078      	str	r0, [r7, #4]
 8015e0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015e0e:	2300      	movs	r3, #0
 8015e10:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015e12:	683b      	ldr	r3, [r7, #0]
 8015e14:	781b      	ldrb	r3, [r3, #0]
 8015e16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015e1a:	2b40      	cmp	r3, #64	; 0x40
 8015e1c:	d005      	beq.n	8015e2a <USBD_StdDevReq+0x26>
 8015e1e:	2b40      	cmp	r3, #64	; 0x40
 8015e20:	d857      	bhi.n	8015ed2 <USBD_StdDevReq+0xce>
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d00f      	beq.n	8015e46 <USBD_StdDevReq+0x42>
 8015e26:	2b20      	cmp	r3, #32
 8015e28:	d153      	bne.n	8015ed2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	32ae      	adds	r2, #174	; 0xae
 8015e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015e38:	689b      	ldr	r3, [r3, #8]
 8015e3a:	6839      	ldr	r1, [r7, #0]
 8015e3c:	6878      	ldr	r0, [r7, #4]
 8015e3e:	4798      	blx	r3
 8015e40:	4603      	mov	r3, r0
 8015e42:	73fb      	strb	r3, [r7, #15]
      break;
 8015e44:	e04a      	b.n	8015edc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015e46:	683b      	ldr	r3, [r7, #0]
 8015e48:	785b      	ldrb	r3, [r3, #1]
 8015e4a:	2b09      	cmp	r3, #9
 8015e4c:	d83b      	bhi.n	8015ec6 <USBD_StdDevReq+0xc2>
 8015e4e:	a201      	add	r2, pc, #4	; (adr r2, 8015e54 <USBD_StdDevReq+0x50>)
 8015e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e54:	08015ea9 	.word	0x08015ea9
 8015e58:	08015ebd 	.word	0x08015ebd
 8015e5c:	08015ec7 	.word	0x08015ec7
 8015e60:	08015eb3 	.word	0x08015eb3
 8015e64:	08015ec7 	.word	0x08015ec7
 8015e68:	08015e87 	.word	0x08015e87
 8015e6c:	08015e7d 	.word	0x08015e7d
 8015e70:	08015ec7 	.word	0x08015ec7
 8015e74:	08015e9f 	.word	0x08015e9f
 8015e78:	08015e91 	.word	0x08015e91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015e7c:	6839      	ldr	r1, [r7, #0]
 8015e7e:	6878      	ldr	r0, [r7, #4]
 8015e80:	f000 fa3c 	bl	80162fc <USBD_GetDescriptor>
          break;
 8015e84:	e024      	b.n	8015ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015e86:	6839      	ldr	r1, [r7, #0]
 8015e88:	6878      	ldr	r0, [r7, #4]
 8015e8a:	f000 fbcb 	bl	8016624 <USBD_SetAddress>
          break;
 8015e8e:	e01f      	b.n	8015ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015e90:	6839      	ldr	r1, [r7, #0]
 8015e92:	6878      	ldr	r0, [r7, #4]
 8015e94:	f000 fc0a 	bl	80166ac <USBD_SetConfig>
 8015e98:	4603      	mov	r3, r0
 8015e9a:	73fb      	strb	r3, [r7, #15]
          break;
 8015e9c:	e018      	b.n	8015ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015e9e:	6839      	ldr	r1, [r7, #0]
 8015ea0:	6878      	ldr	r0, [r7, #4]
 8015ea2:	f000 fcad 	bl	8016800 <USBD_GetConfig>
          break;
 8015ea6:	e013      	b.n	8015ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015ea8:	6839      	ldr	r1, [r7, #0]
 8015eaa:	6878      	ldr	r0, [r7, #4]
 8015eac:	f000 fcde 	bl	801686c <USBD_GetStatus>
          break;
 8015eb0:	e00e      	b.n	8015ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015eb2:	6839      	ldr	r1, [r7, #0]
 8015eb4:	6878      	ldr	r0, [r7, #4]
 8015eb6:	f000 fd0d 	bl	80168d4 <USBD_SetFeature>
          break;
 8015eba:	e009      	b.n	8015ed0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015ebc:	6839      	ldr	r1, [r7, #0]
 8015ebe:	6878      	ldr	r0, [r7, #4]
 8015ec0:	f000 fd31 	bl	8016926 <USBD_ClrFeature>
          break;
 8015ec4:	e004      	b.n	8015ed0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015ec6:	6839      	ldr	r1, [r7, #0]
 8015ec8:	6878      	ldr	r0, [r7, #4]
 8015eca:	f000 fd88 	bl	80169de <USBD_CtlError>
          break;
 8015ece:	bf00      	nop
      }
      break;
 8015ed0:	e004      	b.n	8015edc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015ed2:	6839      	ldr	r1, [r7, #0]
 8015ed4:	6878      	ldr	r0, [r7, #4]
 8015ed6:	f000 fd82 	bl	80169de <USBD_CtlError>
      break;
 8015eda:	bf00      	nop
  }

  return ret;
 8015edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ede:	4618      	mov	r0, r3
 8015ee0:	3710      	adds	r7, #16
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	bd80      	pop	{r7, pc}
 8015ee6:	bf00      	nop

08015ee8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b084      	sub	sp, #16
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	6078      	str	r0, [r7, #4]
 8015ef0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015ef2:	2300      	movs	r3, #0
 8015ef4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015ef6:	683b      	ldr	r3, [r7, #0]
 8015ef8:	781b      	ldrb	r3, [r3, #0]
 8015efa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015efe:	2b40      	cmp	r3, #64	; 0x40
 8015f00:	d005      	beq.n	8015f0e <USBD_StdItfReq+0x26>
 8015f02:	2b40      	cmp	r3, #64	; 0x40
 8015f04:	d852      	bhi.n	8015fac <USBD_StdItfReq+0xc4>
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d001      	beq.n	8015f0e <USBD_StdItfReq+0x26>
 8015f0a:	2b20      	cmp	r3, #32
 8015f0c:	d14e      	bne.n	8015fac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f14:	b2db      	uxtb	r3, r3
 8015f16:	3b01      	subs	r3, #1
 8015f18:	2b02      	cmp	r3, #2
 8015f1a:	d840      	bhi.n	8015f9e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015f1c:	683b      	ldr	r3, [r7, #0]
 8015f1e:	889b      	ldrh	r3, [r3, #4]
 8015f20:	b2db      	uxtb	r3, r3
 8015f22:	2b01      	cmp	r3, #1
 8015f24:	d836      	bhi.n	8015f94 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015f26:	683b      	ldr	r3, [r7, #0]
 8015f28:	889b      	ldrh	r3, [r3, #4]
 8015f2a:	b2db      	uxtb	r3, r3
 8015f2c:	4619      	mov	r1, r3
 8015f2e:	6878      	ldr	r0, [r7, #4]
 8015f30:	f7ff fed9 	bl	8015ce6 <USBD_CoreFindIF>
 8015f34:	4603      	mov	r3, r0
 8015f36:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015f38:	7bbb      	ldrb	r3, [r7, #14]
 8015f3a:	2bff      	cmp	r3, #255	; 0xff
 8015f3c:	d01d      	beq.n	8015f7a <USBD_StdItfReq+0x92>
 8015f3e:	7bbb      	ldrb	r3, [r7, #14]
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d11a      	bne.n	8015f7a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015f44:	7bba      	ldrb	r2, [r7, #14]
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	32ae      	adds	r2, #174	; 0xae
 8015f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f4e:	689b      	ldr	r3, [r3, #8]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d00f      	beq.n	8015f74 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015f54:	7bba      	ldrb	r2, [r7, #14]
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015f5c:	7bba      	ldrb	r2, [r7, #14]
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	32ae      	adds	r2, #174	; 0xae
 8015f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015f66:	689b      	ldr	r3, [r3, #8]
 8015f68:	6839      	ldr	r1, [r7, #0]
 8015f6a:	6878      	ldr	r0, [r7, #4]
 8015f6c:	4798      	blx	r3
 8015f6e:	4603      	mov	r3, r0
 8015f70:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015f72:	e004      	b.n	8015f7e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8015f74:	2303      	movs	r3, #3
 8015f76:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8015f78:	e001      	b.n	8015f7e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8015f7a:	2303      	movs	r3, #3
 8015f7c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8015f7e:	683b      	ldr	r3, [r7, #0]
 8015f80:	88db      	ldrh	r3, [r3, #6]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d110      	bne.n	8015fa8 <USBD_StdItfReq+0xc0>
 8015f86:	7bfb      	ldrb	r3, [r7, #15]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d10d      	bne.n	8015fa8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8015f8c:	6878      	ldr	r0, [r7, #4]
 8015f8e:	f000 fdf1 	bl	8016b74 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8015f92:	e009      	b.n	8015fa8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8015f94:	6839      	ldr	r1, [r7, #0]
 8015f96:	6878      	ldr	r0, [r7, #4]
 8015f98:	f000 fd21 	bl	80169de <USBD_CtlError>
          break;
 8015f9c:	e004      	b.n	8015fa8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8015f9e:	6839      	ldr	r1, [r7, #0]
 8015fa0:	6878      	ldr	r0, [r7, #4]
 8015fa2:	f000 fd1c 	bl	80169de <USBD_CtlError>
          break;
 8015fa6:	e000      	b.n	8015faa <USBD_StdItfReq+0xc2>
          break;
 8015fa8:	bf00      	nop
      }
      break;
 8015faa:	e004      	b.n	8015fb6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8015fac:	6839      	ldr	r1, [r7, #0]
 8015fae:	6878      	ldr	r0, [r7, #4]
 8015fb0:	f000 fd15 	bl	80169de <USBD_CtlError>
      break;
 8015fb4:	bf00      	nop
  }

  return ret;
 8015fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8015fb8:	4618      	mov	r0, r3
 8015fba:	3710      	adds	r7, #16
 8015fbc:	46bd      	mov	sp, r7
 8015fbe:	bd80      	pop	{r7, pc}

08015fc0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b084      	sub	sp, #16
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
 8015fc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8015fca:	2300      	movs	r3, #0
 8015fcc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8015fce:	683b      	ldr	r3, [r7, #0]
 8015fd0:	889b      	ldrh	r3, [r3, #4]
 8015fd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015fd4:	683b      	ldr	r3, [r7, #0]
 8015fd6:	781b      	ldrb	r3, [r3, #0]
 8015fd8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015fdc:	2b40      	cmp	r3, #64	; 0x40
 8015fde:	d007      	beq.n	8015ff0 <USBD_StdEPReq+0x30>
 8015fe0:	2b40      	cmp	r3, #64	; 0x40
 8015fe2:	f200 817f 	bhi.w	80162e4 <USBD_StdEPReq+0x324>
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d02a      	beq.n	8016040 <USBD_StdEPReq+0x80>
 8015fea:	2b20      	cmp	r3, #32
 8015fec:	f040 817a 	bne.w	80162e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8015ff0:	7bbb      	ldrb	r3, [r7, #14]
 8015ff2:	4619      	mov	r1, r3
 8015ff4:	6878      	ldr	r0, [r7, #4]
 8015ff6:	f7ff fe83 	bl	8015d00 <USBD_CoreFindEP>
 8015ffa:	4603      	mov	r3, r0
 8015ffc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015ffe:	7b7b      	ldrb	r3, [r7, #13]
 8016000:	2bff      	cmp	r3, #255	; 0xff
 8016002:	f000 8174 	beq.w	80162ee <USBD_StdEPReq+0x32e>
 8016006:	7b7b      	ldrb	r3, [r7, #13]
 8016008:	2b00      	cmp	r3, #0
 801600a:	f040 8170 	bne.w	80162ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801600e:	7b7a      	ldrb	r2, [r7, #13]
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8016016:	7b7a      	ldrb	r2, [r7, #13]
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	32ae      	adds	r2, #174	; 0xae
 801601c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016020:	689b      	ldr	r3, [r3, #8]
 8016022:	2b00      	cmp	r3, #0
 8016024:	f000 8163 	beq.w	80162ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8016028:	7b7a      	ldrb	r2, [r7, #13]
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	32ae      	adds	r2, #174	; 0xae
 801602e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016032:	689b      	ldr	r3, [r3, #8]
 8016034:	6839      	ldr	r1, [r7, #0]
 8016036:	6878      	ldr	r0, [r7, #4]
 8016038:	4798      	blx	r3
 801603a:	4603      	mov	r3, r0
 801603c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801603e:	e156      	b.n	80162ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8016040:	683b      	ldr	r3, [r7, #0]
 8016042:	785b      	ldrb	r3, [r3, #1]
 8016044:	2b03      	cmp	r3, #3
 8016046:	d008      	beq.n	801605a <USBD_StdEPReq+0x9a>
 8016048:	2b03      	cmp	r3, #3
 801604a:	f300 8145 	bgt.w	80162d8 <USBD_StdEPReq+0x318>
 801604e:	2b00      	cmp	r3, #0
 8016050:	f000 809b 	beq.w	801618a <USBD_StdEPReq+0x1ca>
 8016054:	2b01      	cmp	r3, #1
 8016056:	d03c      	beq.n	80160d2 <USBD_StdEPReq+0x112>
 8016058:	e13e      	b.n	80162d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801605a:	687b      	ldr	r3, [r7, #4]
 801605c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016060:	b2db      	uxtb	r3, r3
 8016062:	2b02      	cmp	r3, #2
 8016064:	d002      	beq.n	801606c <USBD_StdEPReq+0xac>
 8016066:	2b03      	cmp	r3, #3
 8016068:	d016      	beq.n	8016098 <USBD_StdEPReq+0xd8>
 801606a:	e02c      	b.n	80160c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801606c:	7bbb      	ldrb	r3, [r7, #14]
 801606e:	2b00      	cmp	r3, #0
 8016070:	d00d      	beq.n	801608e <USBD_StdEPReq+0xce>
 8016072:	7bbb      	ldrb	r3, [r7, #14]
 8016074:	2b80      	cmp	r3, #128	; 0x80
 8016076:	d00a      	beq.n	801608e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016078:	7bbb      	ldrb	r3, [r7, #14]
 801607a:	4619      	mov	r1, r3
 801607c:	6878      	ldr	r0, [r7, #4]
 801607e:	f001 fa03 	bl	8017488 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016082:	2180      	movs	r1, #128	; 0x80
 8016084:	6878      	ldr	r0, [r7, #4]
 8016086:	f001 f9ff 	bl	8017488 <USBD_LL_StallEP>
 801608a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801608c:	e020      	b.n	80160d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801608e:	6839      	ldr	r1, [r7, #0]
 8016090:	6878      	ldr	r0, [r7, #4]
 8016092:	f000 fca4 	bl	80169de <USBD_CtlError>
              break;
 8016096:	e01b      	b.n	80160d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016098:	683b      	ldr	r3, [r7, #0]
 801609a:	885b      	ldrh	r3, [r3, #2]
 801609c:	2b00      	cmp	r3, #0
 801609e:	d10e      	bne.n	80160be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80160a0:	7bbb      	ldrb	r3, [r7, #14]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d00b      	beq.n	80160be <USBD_StdEPReq+0xfe>
 80160a6:	7bbb      	ldrb	r3, [r7, #14]
 80160a8:	2b80      	cmp	r3, #128	; 0x80
 80160aa:	d008      	beq.n	80160be <USBD_StdEPReq+0xfe>
 80160ac:	683b      	ldr	r3, [r7, #0]
 80160ae:	88db      	ldrh	r3, [r3, #6]
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d104      	bne.n	80160be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80160b4:	7bbb      	ldrb	r3, [r7, #14]
 80160b6:	4619      	mov	r1, r3
 80160b8:	6878      	ldr	r0, [r7, #4]
 80160ba:	f001 f9e5 	bl	8017488 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80160be:	6878      	ldr	r0, [r7, #4]
 80160c0:	f000 fd58 	bl	8016b74 <USBD_CtlSendStatus>

              break;
 80160c4:	e004      	b.n	80160d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80160c6:	6839      	ldr	r1, [r7, #0]
 80160c8:	6878      	ldr	r0, [r7, #4]
 80160ca:	f000 fc88 	bl	80169de <USBD_CtlError>
              break;
 80160ce:	bf00      	nop
          }
          break;
 80160d0:	e107      	b.n	80162e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160d8:	b2db      	uxtb	r3, r3
 80160da:	2b02      	cmp	r3, #2
 80160dc:	d002      	beq.n	80160e4 <USBD_StdEPReq+0x124>
 80160de:	2b03      	cmp	r3, #3
 80160e0:	d016      	beq.n	8016110 <USBD_StdEPReq+0x150>
 80160e2:	e04b      	b.n	801617c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80160e4:	7bbb      	ldrb	r3, [r7, #14]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d00d      	beq.n	8016106 <USBD_StdEPReq+0x146>
 80160ea:	7bbb      	ldrb	r3, [r7, #14]
 80160ec:	2b80      	cmp	r3, #128	; 0x80
 80160ee:	d00a      	beq.n	8016106 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80160f0:	7bbb      	ldrb	r3, [r7, #14]
 80160f2:	4619      	mov	r1, r3
 80160f4:	6878      	ldr	r0, [r7, #4]
 80160f6:	f001 f9c7 	bl	8017488 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80160fa:	2180      	movs	r1, #128	; 0x80
 80160fc:	6878      	ldr	r0, [r7, #4]
 80160fe:	f001 f9c3 	bl	8017488 <USBD_LL_StallEP>
 8016102:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016104:	e040      	b.n	8016188 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8016106:	6839      	ldr	r1, [r7, #0]
 8016108:	6878      	ldr	r0, [r7, #4]
 801610a:	f000 fc68 	bl	80169de <USBD_CtlError>
              break;
 801610e:	e03b      	b.n	8016188 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016110:	683b      	ldr	r3, [r7, #0]
 8016112:	885b      	ldrh	r3, [r3, #2]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d136      	bne.n	8016186 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8016118:	7bbb      	ldrb	r3, [r7, #14]
 801611a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801611e:	2b00      	cmp	r3, #0
 8016120:	d004      	beq.n	801612c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8016122:	7bbb      	ldrb	r3, [r7, #14]
 8016124:	4619      	mov	r1, r3
 8016126:	6878      	ldr	r0, [r7, #4]
 8016128:	f001 f9cd 	bl	80174c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801612c:	6878      	ldr	r0, [r7, #4]
 801612e:	f000 fd21 	bl	8016b74 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8016132:	7bbb      	ldrb	r3, [r7, #14]
 8016134:	4619      	mov	r1, r3
 8016136:	6878      	ldr	r0, [r7, #4]
 8016138:	f7ff fde2 	bl	8015d00 <USBD_CoreFindEP>
 801613c:	4603      	mov	r3, r0
 801613e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016140:	7b7b      	ldrb	r3, [r7, #13]
 8016142:	2bff      	cmp	r3, #255	; 0xff
 8016144:	d01f      	beq.n	8016186 <USBD_StdEPReq+0x1c6>
 8016146:	7b7b      	ldrb	r3, [r7, #13]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d11c      	bne.n	8016186 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801614c:	7b7a      	ldrb	r2, [r7, #13]
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8016154:	7b7a      	ldrb	r2, [r7, #13]
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	32ae      	adds	r2, #174	; 0xae
 801615a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801615e:	689b      	ldr	r3, [r3, #8]
 8016160:	2b00      	cmp	r3, #0
 8016162:	d010      	beq.n	8016186 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8016164:	7b7a      	ldrb	r2, [r7, #13]
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	32ae      	adds	r2, #174	; 0xae
 801616a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801616e:	689b      	ldr	r3, [r3, #8]
 8016170:	6839      	ldr	r1, [r7, #0]
 8016172:	6878      	ldr	r0, [r7, #4]
 8016174:	4798      	blx	r3
 8016176:	4603      	mov	r3, r0
 8016178:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801617a:	e004      	b.n	8016186 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801617c:	6839      	ldr	r1, [r7, #0]
 801617e:	6878      	ldr	r0, [r7, #4]
 8016180:	f000 fc2d 	bl	80169de <USBD_CtlError>
              break;
 8016184:	e000      	b.n	8016188 <USBD_StdEPReq+0x1c8>
              break;
 8016186:	bf00      	nop
          }
          break;
 8016188:	e0ab      	b.n	80162e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016190:	b2db      	uxtb	r3, r3
 8016192:	2b02      	cmp	r3, #2
 8016194:	d002      	beq.n	801619c <USBD_StdEPReq+0x1dc>
 8016196:	2b03      	cmp	r3, #3
 8016198:	d032      	beq.n	8016200 <USBD_StdEPReq+0x240>
 801619a:	e097      	b.n	80162cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801619c:	7bbb      	ldrb	r3, [r7, #14]
 801619e:	2b00      	cmp	r3, #0
 80161a0:	d007      	beq.n	80161b2 <USBD_StdEPReq+0x1f2>
 80161a2:	7bbb      	ldrb	r3, [r7, #14]
 80161a4:	2b80      	cmp	r3, #128	; 0x80
 80161a6:	d004      	beq.n	80161b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80161a8:	6839      	ldr	r1, [r7, #0]
 80161aa:	6878      	ldr	r0, [r7, #4]
 80161ac:	f000 fc17 	bl	80169de <USBD_CtlError>
                break;
 80161b0:	e091      	b.n	80162d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80161b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	da0b      	bge.n	80161d2 <USBD_StdEPReq+0x212>
 80161ba:	7bbb      	ldrb	r3, [r7, #14]
 80161bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80161c0:	4613      	mov	r3, r2
 80161c2:	009b      	lsls	r3, r3, #2
 80161c4:	4413      	add	r3, r2
 80161c6:	009b      	lsls	r3, r3, #2
 80161c8:	3310      	adds	r3, #16
 80161ca:	687a      	ldr	r2, [r7, #4]
 80161cc:	4413      	add	r3, r2
 80161ce:	3304      	adds	r3, #4
 80161d0:	e00b      	b.n	80161ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80161d2:	7bbb      	ldrb	r3, [r7, #14]
 80161d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80161d8:	4613      	mov	r3, r2
 80161da:	009b      	lsls	r3, r3, #2
 80161dc:	4413      	add	r3, r2
 80161de:	009b      	lsls	r3, r3, #2
 80161e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80161e4:	687a      	ldr	r2, [r7, #4]
 80161e6:	4413      	add	r3, r2
 80161e8:	3304      	adds	r3, #4
 80161ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80161ec:	68bb      	ldr	r3, [r7, #8]
 80161ee:	2200      	movs	r2, #0
 80161f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80161f2:	68bb      	ldr	r3, [r7, #8]
 80161f4:	2202      	movs	r2, #2
 80161f6:	4619      	mov	r1, r3
 80161f8:	6878      	ldr	r0, [r7, #4]
 80161fa:	f000 fc61 	bl	8016ac0 <USBD_CtlSendData>
              break;
 80161fe:	e06a      	b.n	80162d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016200:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016204:	2b00      	cmp	r3, #0
 8016206:	da11      	bge.n	801622c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016208:	7bbb      	ldrb	r3, [r7, #14]
 801620a:	f003 020f 	and.w	r2, r3, #15
 801620e:	6879      	ldr	r1, [r7, #4]
 8016210:	4613      	mov	r3, r2
 8016212:	009b      	lsls	r3, r3, #2
 8016214:	4413      	add	r3, r2
 8016216:	009b      	lsls	r3, r3, #2
 8016218:	440b      	add	r3, r1
 801621a:	3324      	adds	r3, #36	; 0x24
 801621c:	881b      	ldrh	r3, [r3, #0]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d117      	bne.n	8016252 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016222:	6839      	ldr	r1, [r7, #0]
 8016224:	6878      	ldr	r0, [r7, #4]
 8016226:	f000 fbda 	bl	80169de <USBD_CtlError>
                  break;
 801622a:	e054      	b.n	80162d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801622c:	7bbb      	ldrb	r3, [r7, #14]
 801622e:	f003 020f 	and.w	r2, r3, #15
 8016232:	6879      	ldr	r1, [r7, #4]
 8016234:	4613      	mov	r3, r2
 8016236:	009b      	lsls	r3, r3, #2
 8016238:	4413      	add	r3, r2
 801623a:	009b      	lsls	r3, r3, #2
 801623c:	440b      	add	r3, r1
 801623e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016242:	881b      	ldrh	r3, [r3, #0]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d104      	bne.n	8016252 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8016248:	6839      	ldr	r1, [r7, #0]
 801624a:	6878      	ldr	r0, [r7, #4]
 801624c:	f000 fbc7 	bl	80169de <USBD_CtlError>
                  break;
 8016250:	e041      	b.n	80162d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016252:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016256:	2b00      	cmp	r3, #0
 8016258:	da0b      	bge.n	8016272 <USBD_StdEPReq+0x2b2>
 801625a:	7bbb      	ldrb	r3, [r7, #14]
 801625c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016260:	4613      	mov	r3, r2
 8016262:	009b      	lsls	r3, r3, #2
 8016264:	4413      	add	r3, r2
 8016266:	009b      	lsls	r3, r3, #2
 8016268:	3310      	adds	r3, #16
 801626a:	687a      	ldr	r2, [r7, #4]
 801626c:	4413      	add	r3, r2
 801626e:	3304      	adds	r3, #4
 8016270:	e00b      	b.n	801628a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8016272:	7bbb      	ldrb	r3, [r7, #14]
 8016274:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016278:	4613      	mov	r3, r2
 801627a:	009b      	lsls	r3, r3, #2
 801627c:	4413      	add	r3, r2
 801627e:	009b      	lsls	r3, r3, #2
 8016280:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016284:	687a      	ldr	r2, [r7, #4]
 8016286:	4413      	add	r3, r2
 8016288:	3304      	adds	r3, #4
 801628a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801628c:	7bbb      	ldrb	r3, [r7, #14]
 801628e:	2b00      	cmp	r3, #0
 8016290:	d002      	beq.n	8016298 <USBD_StdEPReq+0x2d8>
 8016292:	7bbb      	ldrb	r3, [r7, #14]
 8016294:	2b80      	cmp	r3, #128	; 0x80
 8016296:	d103      	bne.n	80162a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016298:	68bb      	ldr	r3, [r7, #8]
 801629a:	2200      	movs	r2, #0
 801629c:	601a      	str	r2, [r3, #0]
 801629e:	e00e      	b.n	80162be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80162a0:	7bbb      	ldrb	r3, [r7, #14]
 80162a2:	4619      	mov	r1, r3
 80162a4:	6878      	ldr	r0, [r7, #4]
 80162a6:	f001 f92d 	bl	8017504 <USBD_LL_IsStallEP>
 80162aa:	4603      	mov	r3, r0
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d003      	beq.n	80162b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80162b0:	68bb      	ldr	r3, [r7, #8]
 80162b2:	2201      	movs	r2, #1
 80162b4:	601a      	str	r2, [r3, #0]
 80162b6:	e002      	b.n	80162be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	2200      	movs	r2, #0
 80162bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80162be:	68bb      	ldr	r3, [r7, #8]
 80162c0:	2202      	movs	r2, #2
 80162c2:	4619      	mov	r1, r3
 80162c4:	6878      	ldr	r0, [r7, #4]
 80162c6:	f000 fbfb 	bl	8016ac0 <USBD_CtlSendData>
              break;
 80162ca:	e004      	b.n	80162d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80162cc:	6839      	ldr	r1, [r7, #0]
 80162ce:	6878      	ldr	r0, [r7, #4]
 80162d0:	f000 fb85 	bl	80169de <USBD_CtlError>
              break;
 80162d4:	bf00      	nop
          }
          break;
 80162d6:	e004      	b.n	80162e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80162d8:	6839      	ldr	r1, [r7, #0]
 80162da:	6878      	ldr	r0, [r7, #4]
 80162dc:	f000 fb7f 	bl	80169de <USBD_CtlError>
          break;
 80162e0:	bf00      	nop
      }
      break;
 80162e2:	e005      	b.n	80162f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80162e4:	6839      	ldr	r1, [r7, #0]
 80162e6:	6878      	ldr	r0, [r7, #4]
 80162e8:	f000 fb79 	bl	80169de <USBD_CtlError>
      break;
 80162ec:	e000      	b.n	80162f0 <USBD_StdEPReq+0x330>
      break;
 80162ee:	bf00      	nop
  }

  return ret;
 80162f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80162f2:	4618      	mov	r0, r3
 80162f4:	3710      	adds	r7, #16
 80162f6:	46bd      	mov	sp, r7
 80162f8:	bd80      	pop	{r7, pc}
	...

080162fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80162fc:	b580      	push	{r7, lr}
 80162fe:	b084      	sub	sp, #16
 8016300:	af00      	add	r7, sp, #0
 8016302:	6078      	str	r0, [r7, #4]
 8016304:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016306:	2300      	movs	r3, #0
 8016308:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801630a:	2300      	movs	r3, #0
 801630c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801630e:	2300      	movs	r3, #0
 8016310:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8016312:	683b      	ldr	r3, [r7, #0]
 8016314:	885b      	ldrh	r3, [r3, #2]
 8016316:	0a1b      	lsrs	r3, r3, #8
 8016318:	b29b      	uxth	r3, r3
 801631a:	3b01      	subs	r3, #1
 801631c:	2b0e      	cmp	r3, #14
 801631e:	f200 8152 	bhi.w	80165c6 <USBD_GetDescriptor+0x2ca>
 8016322:	a201      	add	r2, pc, #4	; (adr r2, 8016328 <USBD_GetDescriptor+0x2c>)
 8016324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016328:	08016399 	.word	0x08016399
 801632c:	080163b1 	.word	0x080163b1
 8016330:	080163f1 	.word	0x080163f1
 8016334:	080165c7 	.word	0x080165c7
 8016338:	080165c7 	.word	0x080165c7
 801633c:	08016567 	.word	0x08016567
 8016340:	08016593 	.word	0x08016593
 8016344:	080165c7 	.word	0x080165c7
 8016348:	080165c7 	.word	0x080165c7
 801634c:	080165c7 	.word	0x080165c7
 8016350:	080165c7 	.word	0x080165c7
 8016354:	080165c7 	.word	0x080165c7
 8016358:	080165c7 	.word	0x080165c7
 801635c:	080165c7 	.word	0x080165c7
 8016360:	08016365 	.word	0x08016365
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8016364:	687b      	ldr	r3, [r7, #4]
 8016366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801636a:	69db      	ldr	r3, [r3, #28]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d00b      	beq.n	8016388 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016376:	69db      	ldr	r3, [r3, #28]
 8016378:	687a      	ldr	r2, [r7, #4]
 801637a:	7c12      	ldrb	r2, [r2, #16]
 801637c:	f107 0108 	add.w	r1, r7, #8
 8016380:	4610      	mov	r0, r2
 8016382:	4798      	blx	r3
 8016384:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016386:	e126      	b.n	80165d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016388:	6839      	ldr	r1, [r7, #0]
 801638a:	6878      	ldr	r0, [r7, #4]
 801638c:	f000 fb27 	bl	80169de <USBD_CtlError>
        err++;
 8016390:	7afb      	ldrb	r3, [r7, #11]
 8016392:	3301      	adds	r3, #1
 8016394:	72fb      	strb	r3, [r7, #11]
      break;
 8016396:	e11e      	b.n	80165d6 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	687a      	ldr	r2, [r7, #4]
 80163a2:	7c12      	ldrb	r2, [r2, #16]
 80163a4:	f107 0108 	add.w	r1, r7, #8
 80163a8:	4610      	mov	r0, r2
 80163aa:	4798      	blx	r3
 80163ac:	60f8      	str	r0, [r7, #12]
      break;
 80163ae:	e112      	b.n	80165d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	7c1b      	ldrb	r3, [r3, #16]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d10d      	bne.n	80163d4 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80163c0:	f107 0208 	add.w	r2, r7, #8
 80163c4:	4610      	mov	r0, r2
 80163c6:	4798      	blx	r3
 80163c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80163ca:	68fb      	ldr	r3, [r7, #12]
 80163cc:	3301      	adds	r3, #1
 80163ce:	2202      	movs	r2, #2
 80163d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80163d2:	e100      	b.n	80165d6 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80163da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80163dc:	f107 0208 	add.w	r2, r7, #8
 80163e0:	4610      	mov	r0, r2
 80163e2:	4798      	blx	r3
 80163e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	3301      	adds	r3, #1
 80163ea:	2202      	movs	r2, #2
 80163ec:	701a      	strb	r2, [r3, #0]
      break;
 80163ee:	e0f2      	b.n	80165d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80163f0:	683b      	ldr	r3, [r7, #0]
 80163f2:	885b      	ldrh	r3, [r3, #2]
 80163f4:	b2db      	uxtb	r3, r3
 80163f6:	2b05      	cmp	r3, #5
 80163f8:	f200 80ac 	bhi.w	8016554 <USBD_GetDescriptor+0x258>
 80163fc:	a201      	add	r2, pc, #4	; (adr r2, 8016404 <USBD_GetDescriptor+0x108>)
 80163fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016402:	bf00      	nop
 8016404:	0801641d 	.word	0x0801641d
 8016408:	08016451 	.word	0x08016451
 801640c:	08016485 	.word	0x08016485
 8016410:	080164b9 	.word	0x080164b9
 8016414:	080164ed 	.word	0x080164ed
 8016418:	08016521 	.word	0x08016521
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016422:	685b      	ldr	r3, [r3, #4]
 8016424:	2b00      	cmp	r3, #0
 8016426:	d00b      	beq.n	8016440 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801642e:	685b      	ldr	r3, [r3, #4]
 8016430:	687a      	ldr	r2, [r7, #4]
 8016432:	7c12      	ldrb	r2, [r2, #16]
 8016434:	f107 0108 	add.w	r1, r7, #8
 8016438:	4610      	mov	r0, r2
 801643a:	4798      	blx	r3
 801643c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801643e:	e091      	b.n	8016564 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016440:	6839      	ldr	r1, [r7, #0]
 8016442:	6878      	ldr	r0, [r7, #4]
 8016444:	f000 facb 	bl	80169de <USBD_CtlError>
            err++;
 8016448:	7afb      	ldrb	r3, [r7, #11]
 801644a:	3301      	adds	r3, #1
 801644c:	72fb      	strb	r3, [r7, #11]
          break;
 801644e:	e089      	b.n	8016564 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016450:	687b      	ldr	r3, [r7, #4]
 8016452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016456:	689b      	ldr	r3, [r3, #8]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d00b      	beq.n	8016474 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016462:	689b      	ldr	r3, [r3, #8]
 8016464:	687a      	ldr	r2, [r7, #4]
 8016466:	7c12      	ldrb	r2, [r2, #16]
 8016468:	f107 0108 	add.w	r1, r7, #8
 801646c:	4610      	mov	r0, r2
 801646e:	4798      	blx	r3
 8016470:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016472:	e077      	b.n	8016564 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016474:	6839      	ldr	r1, [r7, #0]
 8016476:	6878      	ldr	r0, [r7, #4]
 8016478:	f000 fab1 	bl	80169de <USBD_CtlError>
            err++;
 801647c:	7afb      	ldrb	r3, [r7, #11]
 801647e:	3301      	adds	r3, #1
 8016480:	72fb      	strb	r3, [r7, #11]
          break;
 8016482:	e06f      	b.n	8016564 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801648a:	68db      	ldr	r3, [r3, #12]
 801648c:	2b00      	cmp	r3, #0
 801648e:	d00b      	beq.n	80164a8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016496:	68db      	ldr	r3, [r3, #12]
 8016498:	687a      	ldr	r2, [r7, #4]
 801649a:	7c12      	ldrb	r2, [r2, #16]
 801649c:	f107 0108 	add.w	r1, r7, #8
 80164a0:	4610      	mov	r0, r2
 80164a2:	4798      	blx	r3
 80164a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80164a6:	e05d      	b.n	8016564 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80164a8:	6839      	ldr	r1, [r7, #0]
 80164aa:	6878      	ldr	r0, [r7, #4]
 80164ac:	f000 fa97 	bl	80169de <USBD_CtlError>
            err++;
 80164b0:	7afb      	ldrb	r3, [r7, #11]
 80164b2:	3301      	adds	r3, #1
 80164b4:	72fb      	strb	r3, [r7, #11]
          break;
 80164b6:	e055      	b.n	8016564 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164be:	691b      	ldr	r3, [r3, #16]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d00b      	beq.n	80164dc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80164c4:	687b      	ldr	r3, [r7, #4]
 80164c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164ca:	691b      	ldr	r3, [r3, #16]
 80164cc:	687a      	ldr	r2, [r7, #4]
 80164ce:	7c12      	ldrb	r2, [r2, #16]
 80164d0:	f107 0108 	add.w	r1, r7, #8
 80164d4:	4610      	mov	r0, r2
 80164d6:	4798      	blx	r3
 80164d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80164da:	e043      	b.n	8016564 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80164dc:	6839      	ldr	r1, [r7, #0]
 80164de:	6878      	ldr	r0, [r7, #4]
 80164e0:	f000 fa7d 	bl	80169de <USBD_CtlError>
            err++;
 80164e4:	7afb      	ldrb	r3, [r7, #11]
 80164e6:	3301      	adds	r3, #1
 80164e8:	72fb      	strb	r3, [r7, #11]
          break;
 80164ea:	e03b      	b.n	8016564 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164f2:	695b      	ldr	r3, [r3, #20]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d00b      	beq.n	8016510 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164fe:	695b      	ldr	r3, [r3, #20]
 8016500:	687a      	ldr	r2, [r7, #4]
 8016502:	7c12      	ldrb	r2, [r2, #16]
 8016504:	f107 0108 	add.w	r1, r7, #8
 8016508:	4610      	mov	r0, r2
 801650a:	4798      	blx	r3
 801650c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801650e:	e029      	b.n	8016564 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016510:	6839      	ldr	r1, [r7, #0]
 8016512:	6878      	ldr	r0, [r7, #4]
 8016514:	f000 fa63 	bl	80169de <USBD_CtlError>
            err++;
 8016518:	7afb      	ldrb	r3, [r7, #11]
 801651a:	3301      	adds	r3, #1
 801651c:	72fb      	strb	r3, [r7, #11]
          break;
 801651e:	e021      	b.n	8016564 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016526:	699b      	ldr	r3, [r3, #24]
 8016528:	2b00      	cmp	r3, #0
 801652a:	d00b      	beq.n	8016544 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801652c:	687b      	ldr	r3, [r7, #4]
 801652e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016532:	699b      	ldr	r3, [r3, #24]
 8016534:	687a      	ldr	r2, [r7, #4]
 8016536:	7c12      	ldrb	r2, [r2, #16]
 8016538:	f107 0108 	add.w	r1, r7, #8
 801653c:	4610      	mov	r0, r2
 801653e:	4798      	blx	r3
 8016540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016542:	e00f      	b.n	8016564 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8016544:	6839      	ldr	r1, [r7, #0]
 8016546:	6878      	ldr	r0, [r7, #4]
 8016548:	f000 fa49 	bl	80169de <USBD_CtlError>
            err++;
 801654c:	7afb      	ldrb	r3, [r7, #11]
 801654e:	3301      	adds	r3, #1
 8016550:	72fb      	strb	r3, [r7, #11]
          break;
 8016552:	e007      	b.n	8016564 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016554:	6839      	ldr	r1, [r7, #0]
 8016556:	6878      	ldr	r0, [r7, #4]
 8016558:	f000 fa41 	bl	80169de <USBD_CtlError>
          err++;
 801655c:	7afb      	ldrb	r3, [r7, #11]
 801655e:	3301      	adds	r3, #1
 8016560:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8016562:	bf00      	nop
      }
      break;
 8016564:	e037      	b.n	80165d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	7c1b      	ldrb	r3, [r3, #16]
 801656a:	2b00      	cmp	r3, #0
 801656c:	d109      	bne.n	8016582 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801656e:	687b      	ldr	r3, [r7, #4]
 8016570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016576:	f107 0208 	add.w	r2, r7, #8
 801657a:	4610      	mov	r0, r2
 801657c:	4798      	blx	r3
 801657e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016580:	e029      	b.n	80165d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8016582:	6839      	ldr	r1, [r7, #0]
 8016584:	6878      	ldr	r0, [r7, #4]
 8016586:	f000 fa2a 	bl	80169de <USBD_CtlError>
        err++;
 801658a:	7afb      	ldrb	r3, [r7, #11]
 801658c:	3301      	adds	r3, #1
 801658e:	72fb      	strb	r3, [r7, #11]
      break;
 8016590:	e021      	b.n	80165d6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	7c1b      	ldrb	r3, [r3, #16]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d10d      	bne.n	80165b6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80165a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165a2:	f107 0208 	add.w	r2, r7, #8
 80165a6:	4610      	mov	r0, r2
 80165a8:	4798      	blx	r3
 80165aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	3301      	adds	r3, #1
 80165b0:	2207      	movs	r2, #7
 80165b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80165b4:	e00f      	b.n	80165d6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80165b6:	6839      	ldr	r1, [r7, #0]
 80165b8:	6878      	ldr	r0, [r7, #4]
 80165ba:	f000 fa10 	bl	80169de <USBD_CtlError>
        err++;
 80165be:	7afb      	ldrb	r3, [r7, #11]
 80165c0:	3301      	adds	r3, #1
 80165c2:	72fb      	strb	r3, [r7, #11]
      break;
 80165c4:	e007      	b.n	80165d6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80165c6:	6839      	ldr	r1, [r7, #0]
 80165c8:	6878      	ldr	r0, [r7, #4]
 80165ca:	f000 fa08 	bl	80169de <USBD_CtlError>
      err++;
 80165ce:	7afb      	ldrb	r3, [r7, #11]
 80165d0:	3301      	adds	r3, #1
 80165d2:	72fb      	strb	r3, [r7, #11]
      break;
 80165d4:	bf00      	nop
  }

  if (err != 0U)
 80165d6:	7afb      	ldrb	r3, [r7, #11]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d11e      	bne.n	801661a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80165dc:	683b      	ldr	r3, [r7, #0]
 80165de:	88db      	ldrh	r3, [r3, #6]
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d016      	beq.n	8016612 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80165e4:	893b      	ldrh	r3, [r7, #8]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d00e      	beq.n	8016608 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80165ea:	683b      	ldr	r3, [r7, #0]
 80165ec:	88da      	ldrh	r2, [r3, #6]
 80165ee:	893b      	ldrh	r3, [r7, #8]
 80165f0:	4293      	cmp	r3, r2
 80165f2:	bf28      	it	cs
 80165f4:	4613      	movcs	r3, r2
 80165f6:	b29b      	uxth	r3, r3
 80165f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80165fa:	893b      	ldrh	r3, [r7, #8]
 80165fc:	461a      	mov	r2, r3
 80165fe:	68f9      	ldr	r1, [r7, #12]
 8016600:	6878      	ldr	r0, [r7, #4]
 8016602:	f000 fa5d 	bl	8016ac0 <USBD_CtlSendData>
 8016606:	e009      	b.n	801661c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8016608:	6839      	ldr	r1, [r7, #0]
 801660a:	6878      	ldr	r0, [r7, #4]
 801660c:	f000 f9e7 	bl	80169de <USBD_CtlError>
 8016610:	e004      	b.n	801661c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016612:	6878      	ldr	r0, [r7, #4]
 8016614:	f000 faae 	bl	8016b74 <USBD_CtlSendStatus>
 8016618:	e000      	b.n	801661c <USBD_GetDescriptor+0x320>
    return;
 801661a:	bf00      	nop
  }
}
 801661c:	3710      	adds	r7, #16
 801661e:	46bd      	mov	sp, r7
 8016620:	bd80      	pop	{r7, pc}
 8016622:	bf00      	nop

08016624 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b084      	sub	sp, #16
 8016628:	af00      	add	r7, sp, #0
 801662a:	6078      	str	r0, [r7, #4]
 801662c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801662e:	683b      	ldr	r3, [r7, #0]
 8016630:	889b      	ldrh	r3, [r3, #4]
 8016632:	2b00      	cmp	r3, #0
 8016634:	d131      	bne.n	801669a <USBD_SetAddress+0x76>
 8016636:	683b      	ldr	r3, [r7, #0]
 8016638:	88db      	ldrh	r3, [r3, #6]
 801663a:	2b00      	cmp	r3, #0
 801663c:	d12d      	bne.n	801669a <USBD_SetAddress+0x76>
 801663e:	683b      	ldr	r3, [r7, #0]
 8016640:	885b      	ldrh	r3, [r3, #2]
 8016642:	2b7f      	cmp	r3, #127	; 0x7f
 8016644:	d829      	bhi.n	801669a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8016646:	683b      	ldr	r3, [r7, #0]
 8016648:	885b      	ldrh	r3, [r3, #2]
 801664a:	b2db      	uxtb	r3, r3
 801664c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016650:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016658:	b2db      	uxtb	r3, r3
 801665a:	2b03      	cmp	r3, #3
 801665c:	d104      	bne.n	8016668 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801665e:	6839      	ldr	r1, [r7, #0]
 8016660:	6878      	ldr	r0, [r7, #4]
 8016662:	f000 f9bc 	bl	80169de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016666:	e01d      	b.n	80166a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	7bfa      	ldrb	r2, [r7, #15]
 801666c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016670:	7bfb      	ldrb	r3, [r7, #15]
 8016672:	4619      	mov	r1, r3
 8016674:	6878      	ldr	r0, [r7, #4]
 8016676:	f000 ff71 	bl	801755c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801667a:	6878      	ldr	r0, [r7, #4]
 801667c:	f000 fa7a 	bl	8016b74 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016680:	7bfb      	ldrb	r3, [r7, #15]
 8016682:	2b00      	cmp	r3, #0
 8016684:	d004      	beq.n	8016690 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	2202      	movs	r2, #2
 801668a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801668e:	e009      	b.n	80166a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	2201      	movs	r2, #1
 8016694:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016698:	e004      	b.n	80166a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801669a:	6839      	ldr	r1, [r7, #0]
 801669c:	6878      	ldr	r0, [r7, #4]
 801669e:	f000 f99e 	bl	80169de <USBD_CtlError>
  }
}
 80166a2:	bf00      	nop
 80166a4:	bf00      	nop
 80166a6:	3710      	adds	r7, #16
 80166a8:	46bd      	mov	sp, r7
 80166aa:	bd80      	pop	{r7, pc}

080166ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b084      	sub	sp, #16
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	6078      	str	r0, [r7, #4]
 80166b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80166b6:	2300      	movs	r3, #0
 80166b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80166ba:	683b      	ldr	r3, [r7, #0]
 80166bc:	885b      	ldrh	r3, [r3, #2]
 80166be:	b2da      	uxtb	r2, r3
 80166c0:	4b4e      	ldr	r3, [pc, #312]	; (80167fc <USBD_SetConfig+0x150>)
 80166c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80166c4:	4b4d      	ldr	r3, [pc, #308]	; (80167fc <USBD_SetConfig+0x150>)
 80166c6:	781b      	ldrb	r3, [r3, #0]
 80166c8:	2b01      	cmp	r3, #1
 80166ca:	d905      	bls.n	80166d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80166cc:	6839      	ldr	r1, [r7, #0]
 80166ce:	6878      	ldr	r0, [r7, #4]
 80166d0:	f000 f985 	bl	80169de <USBD_CtlError>
    return USBD_FAIL;
 80166d4:	2303      	movs	r3, #3
 80166d6:	e08c      	b.n	80167f2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80166d8:	687b      	ldr	r3, [r7, #4]
 80166da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80166de:	b2db      	uxtb	r3, r3
 80166e0:	2b02      	cmp	r3, #2
 80166e2:	d002      	beq.n	80166ea <USBD_SetConfig+0x3e>
 80166e4:	2b03      	cmp	r3, #3
 80166e6:	d029      	beq.n	801673c <USBD_SetConfig+0x90>
 80166e8:	e075      	b.n	80167d6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80166ea:	4b44      	ldr	r3, [pc, #272]	; (80167fc <USBD_SetConfig+0x150>)
 80166ec:	781b      	ldrb	r3, [r3, #0]
 80166ee:	2b00      	cmp	r3, #0
 80166f0:	d020      	beq.n	8016734 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80166f2:	4b42      	ldr	r3, [pc, #264]	; (80167fc <USBD_SetConfig+0x150>)
 80166f4:	781b      	ldrb	r3, [r3, #0]
 80166f6:	461a      	mov	r2, r3
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80166fc:	4b3f      	ldr	r3, [pc, #252]	; (80167fc <USBD_SetConfig+0x150>)
 80166fe:	781b      	ldrb	r3, [r3, #0]
 8016700:	4619      	mov	r1, r3
 8016702:	6878      	ldr	r0, [r7, #4]
 8016704:	f7fe ffb7 	bl	8015676 <USBD_SetClassConfig>
 8016708:	4603      	mov	r3, r0
 801670a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801670c:	7bfb      	ldrb	r3, [r7, #15]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d008      	beq.n	8016724 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016712:	6839      	ldr	r1, [r7, #0]
 8016714:	6878      	ldr	r0, [r7, #4]
 8016716:	f000 f962 	bl	80169de <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	2202      	movs	r2, #2
 801671e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016722:	e065      	b.n	80167f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016724:	6878      	ldr	r0, [r7, #4]
 8016726:	f000 fa25 	bl	8016b74 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801672a:	687b      	ldr	r3, [r7, #4]
 801672c:	2203      	movs	r2, #3
 801672e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016732:	e05d      	b.n	80167f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016734:	6878      	ldr	r0, [r7, #4]
 8016736:	f000 fa1d 	bl	8016b74 <USBD_CtlSendStatus>
      break;
 801673a:	e059      	b.n	80167f0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801673c:	4b2f      	ldr	r3, [pc, #188]	; (80167fc <USBD_SetConfig+0x150>)
 801673e:	781b      	ldrb	r3, [r3, #0]
 8016740:	2b00      	cmp	r3, #0
 8016742:	d112      	bne.n	801676a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	2202      	movs	r2, #2
 8016748:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 801674c:	4b2b      	ldr	r3, [pc, #172]	; (80167fc <USBD_SetConfig+0x150>)
 801674e:	781b      	ldrb	r3, [r3, #0]
 8016750:	461a      	mov	r2, r3
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016756:	4b29      	ldr	r3, [pc, #164]	; (80167fc <USBD_SetConfig+0x150>)
 8016758:	781b      	ldrb	r3, [r3, #0]
 801675a:	4619      	mov	r1, r3
 801675c:	6878      	ldr	r0, [r7, #4]
 801675e:	f7fe ffa6 	bl	80156ae <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8016762:	6878      	ldr	r0, [r7, #4]
 8016764:	f000 fa06 	bl	8016b74 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016768:	e042      	b.n	80167f0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801676a:	4b24      	ldr	r3, [pc, #144]	; (80167fc <USBD_SetConfig+0x150>)
 801676c:	781b      	ldrb	r3, [r3, #0]
 801676e:	461a      	mov	r2, r3
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	685b      	ldr	r3, [r3, #4]
 8016774:	429a      	cmp	r2, r3
 8016776:	d02a      	beq.n	80167ce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	685b      	ldr	r3, [r3, #4]
 801677c:	b2db      	uxtb	r3, r3
 801677e:	4619      	mov	r1, r3
 8016780:	6878      	ldr	r0, [r7, #4]
 8016782:	f7fe ff94 	bl	80156ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8016786:	4b1d      	ldr	r3, [pc, #116]	; (80167fc <USBD_SetConfig+0x150>)
 8016788:	781b      	ldrb	r3, [r3, #0]
 801678a:	461a      	mov	r2, r3
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016790:	4b1a      	ldr	r3, [pc, #104]	; (80167fc <USBD_SetConfig+0x150>)
 8016792:	781b      	ldrb	r3, [r3, #0]
 8016794:	4619      	mov	r1, r3
 8016796:	6878      	ldr	r0, [r7, #4]
 8016798:	f7fe ff6d 	bl	8015676 <USBD_SetClassConfig>
 801679c:	4603      	mov	r3, r0
 801679e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80167a0:	7bfb      	ldrb	r3, [r7, #15]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d00f      	beq.n	80167c6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80167a6:	6839      	ldr	r1, [r7, #0]
 80167a8:	6878      	ldr	r0, [r7, #4]
 80167aa:	f000 f918 	bl	80169de <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	685b      	ldr	r3, [r3, #4]
 80167b2:	b2db      	uxtb	r3, r3
 80167b4:	4619      	mov	r1, r3
 80167b6:	6878      	ldr	r0, [r7, #4]
 80167b8:	f7fe ff79 	bl	80156ae <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	2202      	movs	r2, #2
 80167c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80167c4:	e014      	b.n	80167f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80167c6:	6878      	ldr	r0, [r7, #4]
 80167c8:	f000 f9d4 	bl	8016b74 <USBD_CtlSendStatus>
      break;
 80167cc:	e010      	b.n	80167f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80167ce:	6878      	ldr	r0, [r7, #4]
 80167d0:	f000 f9d0 	bl	8016b74 <USBD_CtlSendStatus>
      break;
 80167d4:	e00c      	b.n	80167f0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80167d6:	6839      	ldr	r1, [r7, #0]
 80167d8:	6878      	ldr	r0, [r7, #4]
 80167da:	f000 f900 	bl	80169de <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80167de:	4b07      	ldr	r3, [pc, #28]	; (80167fc <USBD_SetConfig+0x150>)
 80167e0:	781b      	ldrb	r3, [r3, #0]
 80167e2:	4619      	mov	r1, r3
 80167e4:	6878      	ldr	r0, [r7, #4]
 80167e6:	f7fe ff62 	bl	80156ae <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80167ea:	2303      	movs	r3, #3
 80167ec:	73fb      	strb	r3, [r7, #15]
      break;
 80167ee:	bf00      	nop
  }

  return ret;
 80167f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80167f2:	4618      	mov	r0, r3
 80167f4:	3710      	adds	r7, #16
 80167f6:	46bd      	mov	sp, r7
 80167f8:	bd80      	pop	{r7, pc}
 80167fa:	bf00      	nop
 80167fc:	24001704 	.word	0x24001704

08016800 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016800:	b580      	push	{r7, lr}
 8016802:	b082      	sub	sp, #8
 8016804:	af00      	add	r7, sp, #0
 8016806:	6078      	str	r0, [r7, #4]
 8016808:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801680a:	683b      	ldr	r3, [r7, #0]
 801680c:	88db      	ldrh	r3, [r3, #6]
 801680e:	2b01      	cmp	r3, #1
 8016810:	d004      	beq.n	801681c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016812:	6839      	ldr	r1, [r7, #0]
 8016814:	6878      	ldr	r0, [r7, #4]
 8016816:	f000 f8e2 	bl	80169de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801681a:	e023      	b.n	8016864 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016822:	b2db      	uxtb	r3, r3
 8016824:	2b02      	cmp	r3, #2
 8016826:	dc02      	bgt.n	801682e <USBD_GetConfig+0x2e>
 8016828:	2b00      	cmp	r3, #0
 801682a:	dc03      	bgt.n	8016834 <USBD_GetConfig+0x34>
 801682c:	e015      	b.n	801685a <USBD_GetConfig+0x5a>
 801682e:	2b03      	cmp	r3, #3
 8016830:	d00b      	beq.n	801684a <USBD_GetConfig+0x4a>
 8016832:	e012      	b.n	801685a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	2200      	movs	r2, #0
 8016838:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	3308      	adds	r3, #8
 801683e:	2201      	movs	r2, #1
 8016840:	4619      	mov	r1, r3
 8016842:	6878      	ldr	r0, [r7, #4]
 8016844:	f000 f93c 	bl	8016ac0 <USBD_CtlSendData>
        break;
 8016848:	e00c      	b.n	8016864 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	3304      	adds	r3, #4
 801684e:	2201      	movs	r2, #1
 8016850:	4619      	mov	r1, r3
 8016852:	6878      	ldr	r0, [r7, #4]
 8016854:	f000 f934 	bl	8016ac0 <USBD_CtlSendData>
        break;
 8016858:	e004      	b.n	8016864 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801685a:	6839      	ldr	r1, [r7, #0]
 801685c:	6878      	ldr	r0, [r7, #4]
 801685e:	f000 f8be 	bl	80169de <USBD_CtlError>
        break;
 8016862:	bf00      	nop
}
 8016864:	bf00      	nop
 8016866:	3708      	adds	r7, #8
 8016868:	46bd      	mov	sp, r7
 801686a:	bd80      	pop	{r7, pc}

0801686c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801686c:	b580      	push	{r7, lr}
 801686e:	b082      	sub	sp, #8
 8016870:	af00      	add	r7, sp, #0
 8016872:	6078      	str	r0, [r7, #4]
 8016874:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801687c:	b2db      	uxtb	r3, r3
 801687e:	3b01      	subs	r3, #1
 8016880:	2b02      	cmp	r3, #2
 8016882:	d81e      	bhi.n	80168c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8016884:	683b      	ldr	r3, [r7, #0]
 8016886:	88db      	ldrh	r3, [r3, #6]
 8016888:	2b02      	cmp	r3, #2
 801688a:	d004      	beq.n	8016896 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801688c:	6839      	ldr	r1, [r7, #0]
 801688e:	6878      	ldr	r0, [r7, #4]
 8016890:	f000 f8a5 	bl	80169de <USBD_CtlError>
        break;
 8016894:	e01a      	b.n	80168cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	2201      	movs	r2, #1
 801689a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d005      	beq.n	80168b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	68db      	ldr	r3, [r3, #12]
 80168aa:	f043 0202 	orr.w	r2, r3, #2
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	330c      	adds	r3, #12
 80168b6:	2202      	movs	r2, #2
 80168b8:	4619      	mov	r1, r3
 80168ba:	6878      	ldr	r0, [r7, #4]
 80168bc:	f000 f900 	bl	8016ac0 <USBD_CtlSendData>
      break;
 80168c0:	e004      	b.n	80168cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80168c2:	6839      	ldr	r1, [r7, #0]
 80168c4:	6878      	ldr	r0, [r7, #4]
 80168c6:	f000 f88a 	bl	80169de <USBD_CtlError>
      break;
 80168ca:	bf00      	nop
  }
}
 80168cc:	bf00      	nop
 80168ce:	3708      	adds	r7, #8
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd80      	pop	{r7, pc}

080168d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b082      	sub	sp, #8
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
 80168dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80168de:	683b      	ldr	r3, [r7, #0]
 80168e0:	885b      	ldrh	r3, [r3, #2]
 80168e2:	2b01      	cmp	r3, #1
 80168e4:	d107      	bne.n	80168f6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	2201      	movs	r2, #1
 80168ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80168ee:	6878      	ldr	r0, [r7, #4]
 80168f0:	f000 f940 	bl	8016b74 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80168f4:	e013      	b.n	801691e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80168f6:	683b      	ldr	r3, [r7, #0]
 80168f8:	885b      	ldrh	r3, [r3, #2]
 80168fa:	2b02      	cmp	r3, #2
 80168fc:	d10b      	bne.n	8016916 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80168fe:	683b      	ldr	r3, [r7, #0]
 8016900:	889b      	ldrh	r3, [r3, #4]
 8016902:	0a1b      	lsrs	r3, r3, #8
 8016904:	b29b      	uxth	r3, r3
 8016906:	b2da      	uxtb	r2, r3
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801690e:	6878      	ldr	r0, [r7, #4]
 8016910:	f000 f930 	bl	8016b74 <USBD_CtlSendStatus>
}
 8016914:	e003      	b.n	801691e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8016916:	6839      	ldr	r1, [r7, #0]
 8016918:	6878      	ldr	r0, [r7, #4]
 801691a:	f000 f860 	bl	80169de <USBD_CtlError>
}
 801691e:	bf00      	nop
 8016920:	3708      	adds	r7, #8
 8016922:	46bd      	mov	sp, r7
 8016924:	bd80      	pop	{r7, pc}

08016926 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016926:	b580      	push	{r7, lr}
 8016928:	b082      	sub	sp, #8
 801692a:	af00      	add	r7, sp, #0
 801692c:	6078      	str	r0, [r7, #4]
 801692e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016936:	b2db      	uxtb	r3, r3
 8016938:	3b01      	subs	r3, #1
 801693a:	2b02      	cmp	r3, #2
 801693c:	d80b      	bhi.n	8016956 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801693e:	683b      	ldr	r3, [r7, #0]
 8016940:	885b      	ldrh	r3, [r3, #2]
 8016942:	2b01      	cmp	r3, #1
 8016944:	d10c      	bne.n	8016960 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	2200      	movs	r2, #0
 801694a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801694e:	6878      	ldr	r0, [r7, #4]
 8016950:	f000 f910 	bl	8016b74 <USBD_CtlSendStatus>
      }
      break;
 8016954:	e004      	b.n	8016960 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8016956:	6839      	ldr	r1, [r7, #0]
 8016958:	6878      	ldr	r0, [r7, #4]
 801695a:	f000 f840 	bl	80169de <USBD_CtlError>
      break;
 801695e:	e000      	b.n	8016962 <USBD_ClrFeature+0x3c>
      break;
 8016960:	bf00      	nop
  }
}
 8016962:	bf00      	nop
 8016964:	3708      	adds	r7, #8
 8016966:	46bd      	mov	sp, r7
 8016968:	bd80      	pop	{r7, pc}

0801696a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801696a:	b580      	push	{r7, lr}
 801696c:	b084      	sub	sp, #16
 801696e:	af00      	add	r7, sp, #0
 8016970:	6078      	str	r0, [r7, #4]
 8016972:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016974:	683b      	ldr	r3, [r7, #0]
 8016976:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016978:	68fb      	ldr	r3, [r7, #12]
 801697a:	781a      	ldrb	r2, [r3, #0]
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	3301      	adds	r3, #1
 8016984:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	781a      	ldrb	r2, [r3, #0]
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801698e:	68fb      	ldr	r3, [r7, #12]
 8016990:	3301      	adds	r3, #1
 8016992:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016994:	68f8      	ldr	r0, [r7, #12]
 8016996:	f7ff fa17 	bl	8015dc8 <SWAPBYTE>
 801699a:	4603      	mov	r3, r0
 801699c:	461a      	mov	r2, r3
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	3301      	adds	r3, #1
 80169a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	3301      	adds	r3, #1
 80169ac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80169ae:	68f8      	ldr	r0, [r7, #12]
 80169b0:	f7ff fa0a 	bl	8015dc8 <SWAPBYTE>
 80169b4:	4603      	mov	r3, r0
 80169b6:	461a      	mov	r2, r3
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	3301      	adds	r3, #1
 80169c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	3301      	adds	r3, #1
 80169c6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80169c8:	68f8      	ldr	r0, [r7, #12]
 80169ca:	f7ff f9fd 	bl	8015dc8 <SWAPBYTE>
 80169ce:	4603      	mov	r3, r0
 80169d0:	461a      	mov	r2, r3
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	80da      	strh	r2, [r3, #6]
}
 80169d6:	bf00      	nop
 80169d8:	3710      	adds	r7, #16
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd80      	pop	{r7, pc}

080169de <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169de:	b580      	push	{r7, lr}
 80169e0:	b082      	sub	sp, #8
 80169e2:	af00      	add	r7, sp, #0
 80169e4:	6078      	str	r0, [r7, #4]
 80169e6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80169e8:	2180      	movs	r1, #128	; 0x80
 80169ea:	6878      	ldr	r0, [r7, #4]
 80169ec:	f000 fd4c 	bl	8017488 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80169f0:	2100      	movs	r1, #0
 80169f2:	6878      	ldr	r0, [r7, #4]
 80169f4:	f000 fd48 	bl	8017488 <USBD_LL_StallEP>
}
 80169f8:	bf00      	nop
 80169fa:	3708      	adds	r7, #8
 80169fc:	46bd      	mov	sp, r7
 80169fe:	bd80      	pop	{r7, pc}

08016a00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b086      	sub	sp, #24
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	60f8      	str	r0, [r7, #12]
 8016a08:	60b9      	str	r1, [r7, #8]
 8016a0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016a0c:	2300      	movs	r3, #0
 8016a0e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016a10:	68fb      	ldr	r3, [r7, #12]
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d036      	beq.n	8016a84 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016a1a:	6938      	ldr	r0, [r7, #16]
 8016a1c:	f000 f836 	bl	8016a8c <USBD_GetLen>
 8016a20:	4603      	mov	r3, r0
 8016a22:	3301      	adds	r3, #1
 8016a24:	b29b      	uxth	r3, r3
 8016a26:	005b      	lsls	r3, r3, #1
 8016a28:	b29a      	uxth	r2, r3
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016a2e:	7dfb      	ldrb	r3, [r7, #23]
 8016a30:	68ba      	ldr	r2, [r7, #8]
 8016a32:	4413      	add	r3, r2
 8016a34:	687a      	ldr	r2, [r7, #4]
 8016a36:	7812      	ldrb	r2, [r2, #0]
 8016a38:	701a      	strb	r2, [r3, #0]
  idx++;
 8016a3a:	7dfb      	ldrb	r3, [r7, #23]
 8016a3c:	3301      	adds	r3, #1
 8016a3e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016a40:	7dfb      	ldrb	r3, [r7, #23]
 8016a42:	68ba      	ldr	r2, [r7, #8]
 8016a44:	4413      	add	r3, r2
 8016a46:	2203      	movs	r2, #3
 8016a48:	701a      	strb	r2, [r3, #0]
  idx++;
 8016a4a:	7dfb      	ldrb	r3, [r7, #23]
 8016a4c:	3301      	adds	r3, #1
 8016a4e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016a50:	e013      	b.n	8016a7a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016a52:	7dfb      	ldrb	r3, [r7, #23]
 8016a54:	68ba      	ldr	r2, [r7, #8]
 8016a56:	4413      	add	r3, r2
 8016a58:	693a      	ldr	r2, [r7, #16]
 8016a5a:	7812      	ldrb	r2, [r2, #0]
 8016a5c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016a5e:	693b      	ldr	r3, [r7, #16]
 8016a60:	3301      	adds	r3, #1
 8016a62:	613b      	str	r3, [r7, #16]
    idx++;
 8016a64:	7dfb      	ldrb	r3, [r7, #23]
 8016a66:	3301      	adds	r3, #1
 8016a68:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016a6a:	7dfb      	ldrb	r3, [r7, #23]
 8016a6c:	68ba      	ldr	r2, [r7, #8]
 8016a6e:	4413      	add	r3, r2
 8016a70:	2200      	movs	r2, #0
 8016a72:	701a      	strb	r2, [r3, #0]
    idx++;
 8016a74:	7dfb      	ldrb	r3, [r7, #23]
 8016a76:	3301      	adds	r3, #1
 8016a78:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016a7a:	693b      	ldr	r3, [r7, #16]
 8016a7c:	781b      	ldrb	r3, [r3, #0]
 8016a7e:	2b00      	cmp	r3, #0
 8016a80:	d1e7      	bne.n	8016a52 <USBD_GetString+0x52>
 8016a82:	e000      	b.n	8016a86 <USBD_GetString+0x86>
    return;
 8016a84:	bf00      	nop
  }
}
 8016a86:	3718      	adds	r7, #24
 8016a88:	46bd      	mov	sp, r7
 8016a8a:	bd80      	pop	{r7, pc}

08016a8c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016a8c:	b480      	push	{r7}
 8016a8e:	b085      	sub	sp, #20
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016a94:	2300      	movs	r3, #0
 8016a96:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016a9c:	e005      	b.n	8016aaa <USBD_GetLen+0x1e>
  {
    len++;
 8016a9e:	7bfb      	ldrb	r3, [r7, #15]
 8016aa0:	3301      	adds	r3, #1
 8016aa2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016aa4:	68bb      	ldr	r3, [r7, #8]
 8016aa6:	3301      	adds	r3, #1
 8016aa8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016aaa:	68bb      	ldr	r3, [r7, #8]
 8016aac:	781b      	ldrb	r3, [r3, #0]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d1f5      	bne.n	8016a9e <USBD_GetLen+0x12>
  }

  return len;
 8016ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	3714      	adds	r7, #20
 8016ab8:	46bd      	mov	sp, r7
 8016aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016abe:	4770      	bx	lr

08016ac0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b084      	sub	sp, #16
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	60f8      	str	r0, [r7, #12]
 8016ac8:	60b9      	str	r1, [r7, #8]
 8016aca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	2202      	movs	r2, #2
 8016ad0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016ad4:	68fb      	ldr	r3, [r7, #12]
 8016ad6:	687a      	ldr	r2, [r7, #4]
 8016ad8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	687a      	ldr	r2, [r7, #4]
 8016ade:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	68ba      	ldr	r2, [r7, #8]
 8016ae4:	2100      	movs	r1, #0
 8016ae6:	68f8      	ldr	r0, [r7, #12]
 8016ae8:	f000 fd57 	bl	801759a <USBD_LL_Transmit>

  return USBD_OK;
 8016aec:	2300      	movs	r3, #0
}
 8016aee:	4618      	mov	r0, r3
 8016af0:	3710      	adds	r7, #16
 8016af2:	46bd      	mov	sp, r7
 8016af4:	bd80      	pop	{r7, pc}

08016af6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016af6:	b580      	push	{r7, lr}
 8016af8:	b084      	sub	sp, #16
 8016afa:	af00      	add	r7, sp, #0
 8016afc:	60f8      	str	r0, [r7, #12]
 8016afe:	60b9      	str	r1, [r7, #8]
 8016b00:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	68ba      	ldr	r2, [r7, #8]
 8016b06:	2100      	movs	r1, #0
 8016b08:	68f8      	ldr	r0, [r7, #12]
 8016b0a:	f000 fd46 	bl	801759a <USBD_LL_Transmit>

  return USBD_OK;
 8016b0e:	2300      	movs	r3, #0
}
 8016b10:	4618      	mov	r0, r3
 8016b12:	3710      	adds	r7, #16
 8016b14:	46bd      	mov	sp, r7
 8016b16:	bd80      	pop	{r7, pc}

08016b18 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016b18:	b580      	push	{r7, lr}
 8016b1a:	b084      	sub	sp, #16
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	60f8      	str	r0, [r7, #12]
 8016b20:	60b9      	str	r1, [r7, #8]
 8016b22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016b24:	68fb      	ldr	r3, [r7, #12]
 8016b26:	2203      	movs	r2, #3
 8016b28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016b2c:	68fb      	ldr	r3, [r7, #12]
 8016b2e:	687a      	ldr	r2, [r7, #4]
 8016b30:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	687a      	ldr	r2, [r7, #4]
 8016b38:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	68ba      	ldr	r2, [r7, #8]
 8016b40:	2100      	movs	r1, #0
 8016b42:	68f8      	ldr	r0, [r7, #12]
 8016b44:	f000 fd4a 	bl	80175dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016b48:	2300      	movs	r3, #0
}
 8016b4a:	4618      	mov	r0, r3
 8016b4c:	3710      	adds	r7, #16
 8016b4e:	46bd      	mov	sp, r7
 8016b50:	bd80      	pop	{r7, pc}

08016b52 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016b52:	b580      	push	{r7, lr}
 8016b54:	b084      	sub	sp, #16
 8016b56:	af00      	add	r7, sp, #0
 8016b58:	60f8      	str	r0, [r7, #12]
 8016b5a:	60b9      	str	r1, [r7, #8]
 8016b5c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	68ba      	ldr	r2, [r7, #8]
 8016b62:	2100      	movs	r1, #0
 8016b64:	68f8      	ldr	r0, [r7, #12]
 8016b66:	f000 fd39 	bl	80175dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016b6a:	2300      	movs	r3, #0
}
 8016b6c:	4618      	mov	r0, r3
 8016b6e:	3710      	adds	r7, #16
 8016b70:	46bd      	mov	sp, r7
 8016b72:	bd80      	pop	{r7, pc}

08016b74 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016b74:	b580      	push	{r7, lr}
 8016b76:	b082      	sub	sp, #8
 8016b78:	af00      	add	r7, sp, #0
 8016b7a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	2204      	movs	r2, #4
 8016b80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016b84:	2300      	movs	r3, #0
 8016b86:	2200      	movs	r2, #0
 8016b88:	2100      	movs	r1, #0
 8016b8a:	6878      	ldr	r0, [r7, #4]
 8016b8c:	f000 fd05 	bl	801759a <USBD_LL_Transmit>

  return USBD_OK;
 8016b90:	2300      	movs	r3, #0
}
 8016b92:	4618      	mov	r0, r3
 8016b94:	3708      	adds	r7, #8
 8016b96:	46bd      	mov	sp, r7
 8016b98:	bd80      	pop	{r7, pc}

08016b9a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016b9a:	b580      	push	{r7, lr}
 8016b9c:	b082      	sub	sp, #8
 8016b9e:	af00      	add	r7, sp, #0
 8016ba0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	2205      	movs	r2, #5
 8016ba6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016baa:	2300      	movs	r3, #0
 8016bac:	2200      	movs	r2, #0
 8016bae:	2100      	movs	r1, #0
 8016bb0:	6878      	ldr	r0, [r7, #4]
 8016bb2:	f000 fd13 	bl	80175dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016bb6:	2300      	movs	r3, #0
}
 8016bb8:	4618      	mov	r0, r3
 8016bba:	3708      	adds	r7, #8
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	bd80      	pop	{r7, pc}

08016bc0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8016bc0:	b480      	push	{r7}
 8016bc2:	b087      	sub	sp, #28
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	60f8      	str	r0, [r7, #12]
 8016bc8:	60b9      	str	r1, [r7, #8]
 8016bca:	4613      	mov	r3, r2
 8016bcc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8016bce:	2301      	movs	r3, #1
 8016bd0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8016bd2:	2300      	movs	r3, #0
 8016bd4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8016bd6:	4b1f      	ldr	r3, [pc, #124]	; (8016c54 <FATFS_LinkDriverEx+0x94>)
 8016bd8:	7a5b      	ldrb	r3, [r3, #9]
 8016bda:	b2db      	uxtb	r3, r3
 8016bdc:	2b00      	cmp	r3, #0
 8016bde:	d131      	bne.n	8016c44 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8016be0:	4b1c      	ldr	r3, [pc, #112]	; (8016c54 <FATFS_LinkDriverEx+0x94>)
 8016be2:	7a5b      	ldrb	r3, [r3, #9]
 8016be4:	b2db      	uxtb	r3, r3
 8016be6:	461a      	mov	r2, r3
 8016be8:	4b1a      	ldr	r3, [pc, #104]	; (8016c54 <FATFS_LinkDriverEx+0x94>)
 8016bea:	2100      	movs	r1, #0
 8016bec:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8016bee:	4b19      	ldr	r3, [pc, #100]	; (8016c54 <FATFS_LinkDriverEx+0x94>)
 8016bf0:	7a5b      	ldrb	r3, [r3, #9]
 8016bf2:	b2db      	uxtb	r3, r3
 8016bf4:	4a17      	ldr	r2, [pc, #92]	; (8016c54 <FATFS_LinkDriverEx+0x94>)
 8016bf6:	009b      	lsls	r3, r3, #2
 8016bf8:	4413      	add	r3, r2
 8016bfa:	68fa      	ldr	r2, [r7, #12]
 8016bfc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8016bfe:	4b15      	ldr	r3, [pc, #84]	; (8016c54 <FATFS_LinkDriverEx+0x94>)
 8016c00:	7a5b      	ldrb	r3, [r3, #9]
 8016c02:	b2db      	uxtb	r3, r3
 8016c04:	461a      	mov	r2, r3
 8016c06:	4b13      	ldr	r3, [pc, #76]	; (8016c54 <FATFS_LinkDriverEx+0x94>)
 8016c08:	4413      	add	r3, r2
 8016c0a:	79fa      	ldrb	r2, [r7, #7]
 8016c0c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8016c0e:	4b11      	ldr	r3, [pc, #68]	; (8016c54 <FATFS_LinkDriverEx+0x94>)
 8016c10:	7a5b      	ldrb	r3, [r3, #9]
 8016c12:	b2db      	uxtb	r3, r3
 8016c14:	1c5a      	adds	r2, r3, #1
 8016c16:	b2d1      	uxtb	r1, r2
 8016c18:	4a0e      	ldr	r2, [pc, #56]	; (8016c54 <FATFS_LinkDriverEx+0x94>)
 8016c1a:	7251      	strb	r1, [r2, #9]
 8016c1c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8016c1e:	7dbb      	ldrb	r3, [r7, #22]
 8016c20:	3330      	adds	r3, #48	; 0x30
 8016c22:	b2da      	uxtb	r2, r3
 8016c24:	68bb      	ldr	r3, [r7, #8]
 8016c26:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8016c28:	68bb      	ldr	r3, [r7, #8]
 8016c2a:	3301      	adds	r3, #1
 8016c2c:	223a      	movs	r2, #58	; 0x3a
 8016c2e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8016c30:	68bb      	ldr	r3, [r7, #8]
 8016c32:	3302      	adds	r3, #2
 8016c34:	222f      	movs	r2, #47	; 0x2f
 8016c36:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8016c38:	68bb      	ldr	r3, [r7, #8]
 8016c3a:	3303      	adds	r3, #3
 8016c3c:	2200      	movs	r2, #0
 8016c3e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8016c40:	2300      	movs	r3, #0
 8016c42:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8016c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8016c46:	4618      	mov	r0, r3
 8016c48:	371c      	adds	r7, #28
 8016c4a:	46bd      	mov	sp, r7
 8016c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c50:	4770      	bx	lr
 8016c52:	bf00      	nop
 8016c54:	24001708 	.word	0x24001708

08016c58 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8016c58:	b580      	push	{r7, lr}
 8016c5a:	b082      	sub	sp, #8
 8016c5c:	af00      	add	r7, sp, #0
 8016c5e:	6078      	str	r0, [r7, #4]
 8016c60:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8016c62:	2200      	movs	r2, #0
 8016c64:	6839      	ldr	r1, [r7, #0]
 8016c66:	6878      	ldr	r0, [r7, #4]
 8016c68:	f7ff ffaa 	bl	8016bc0 <FATFS_LinkDriverEx>
 8016c6c:	4603      	mov	r3, r0
}
 8016c6e:	4618      	mov	r0, r3
 8016c70:	3708      	adds	r7, #8
 8016c72:	46bd      	mov	sp, r7
 8016c74:	bd80      	pop	{r7, pc}
	...

08016c78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016c78:	b580      	push	{r7, lr}
 8016c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016c7c:	2201      	movs	r2, #1
 8016c7e:	4913      	ldr	r1, [pc, #76]	; (8016ccc <MX_USB_DEVICE_Init+0x54>)
 8016c80:	4813      	ldr	r0, [pc, #76]	; (8016cd0 <MX_USB_DEVICE_Init+0x58>)
 8016c82:	f7fe fc7b 	bl	801557c <USBD_Init>
 8016c86:	4603      	mov	r3, r0
 8016c88:	2b00      	cmp	r3, #0
 8016c8a:	d001      	beq.n	8016c90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016c8c:	f7eb ff12 	bl	8002ab4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016c90:	4910      	ldr	r1, [pc, #64]	; (8016cd4 <MX_USB_DEVICE_Init+0x5c>)
 8016c92:	480f      	ldr	r0, [pc, #60]	; (8016cd0 <MX_USB_DEVICE_Init+0x58>)
 8016c94:	f7fe fca2 	bl	80155dc <USBD_RegisterClass>
 8016c98:	4603      	mov	r3, r0
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d001      	beq.n	8016ca2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016c9e:	f7eb ff09 	bl	8002ab4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8016ca2:	490d      	ldr	r1, [pc, #52]	; (8016cd8 <MX_USB_DEVICE_Init+0x60>)
 8016ca4:	480a      	ldr	r0, [pc, #40]	; (8016cd0 <MX_USB_DEVICE_Init+0x58>)
 8016ca6:	f7fe fb99 	bl	80153dc <USBD_CDC_RegisterInterface>
 8016caa:	4603      	mov	r3, r0
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	d001      	beq.n	8016cb4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016cb0:	f7eb ff00 	bl	8002ab4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8016cb4:	4806      	ldr	r0, [pc, #24]	; (8016cd0 <MX_USB_DEVICE_Init+0x58>)
 8016cb6:	f7fe fcc7 	bl	8015648 <USBD_Start>
 8016cba:	4603      	mov	r3, r0
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d001      	beq.n	8016cc4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016cc0:	f7eb fef8 	bl	8002ab4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8016cc4:	f7f2 ff30 	bl	8009b28 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016cc8:	bf00      	nop
 8016cca:	bd80      	pop	{r7, pc}
 8016ccc:	240000b0 	.word	0x240000b0
 8016cd0:	24001714 	.word	0x24001714
 8016cd4:	2400001c 	.word	0x2400001c
 8016cd8:	2400009c 	.word	0x2400009c

08016cdc <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8016ce0:	2200      	movs	r2, #0
 8016ce2:	4905      	ldr	r1, [pc, #20]	; (8016cf8 <CDC_Init_HS+0x1c>)
 8016ce4:	4805      	ldr	r0, [pc, #20]	; (8016cfc <CDC_Init_HS+0x20>)
 8016ce6:	f7fe fb93 	bl	8015410 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8016cea:	4905      	ldr	r1, [pc, #20]	; (8016d00 <CDC_Init_HS+0x24>)
 8016cec:	4803      	ldr	r0, [pc, #12]	; (8016cfc <CDC_Init_HS+0x20>)
 8016cee:	f7fe fbb1 	bl	8015454 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016cf2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	bd80      	pop	{r7, pc}
 8016cf8:	240021f0 	.word	0x240021f0
 8016cfc:	24001714 	.word	0x24001714
 8016d00:	240019f0 	.word	0x240019f0

08016d04 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8016d04:	b480      	push	{r7}
 8016d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016d08:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8016d0a:	4618      	mov	r0, r3
 8016d0c:	46bd      	mov	sp, r7
 8016d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d12:	4770      	bx	lr

08016d14 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016d14:	b480      	push	{r7}
 8016d16:	b083      	sub	sp, #12
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	6039      	str	r1, [r7, #0]
 8016d1e:	71fb      	strb	r3, [r7, #7]
 8016d20:	4613      	mov	r3, r2
 8016d22:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8016d24:	79fb      	ldrb	r3, [r7, #7]
 8016d26:	2b23      	cmp	r3, #35	; 0x23
 8016d28:	d84a      	bhi.n	8016dc0 <CDC_Control_HS+0xac>
 8016d2a:	a201      	add	r2, pc, #4	; (adr r2, 8016d30 <CDC_Control_HS+0x1c>)
 8016d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d30:	08016dc1 	.word	0x08016dc1
 8016d34:	08016dc1 	.word	0x08016dc1
 8016d38:	08016dc1 	.word	0x08016dc1
 8016d3c:	08016dc1 	.word	0x08016dc1
 8016d40:	08016dc1 	.word	0x08016dc1
 8016d44:	08016dc1 	.word	0x08016dc1
 8016d48:	08016dc1 	.word	0x08016dc1
 8016d4c:	08016dc1 	.word	0x08016dc1
 8016d50:	08016dc1 	.word	0x08016dc1
 8016d54:	08016dc1 	.word	0x08016dc1
 8016d58:	08016dc1 	.word	0x08016dc1
 8016d5c:	08016dc1 	.word	0x08016dc1
 8016d60:	08016dc1 	.word	0x08016dc1
 8016d64:	08016dc1 	.word	0x08016dc1
 8016d68:	08016dc1 	.word	0x08016dc1
 8016d6c:	08016dc1 	.word	0x08016dc1
 8016d70:	08016dc1 	.word	0x08016dc1
 8016d74:	08016dc1 	.word	0x08016dc1
 8016d78:	08016dc1 	.word	0x08016dc1
 8016d7c:	08016dc1 	.word	0x08016dc1
 8016d80:	08016dc1 	.word	0x08016dc1
 8016d84:	08016dc1 	.word	0x08016dc1
 8016d88:	08016dc1 	.word	0x08016dc1
 8016d8c:	08016dc1 	.word	0x08016dc1
 8016d90:	08016dc1 	.word	0x08016dc1
 8016d94:	08016dc1 	.word	0x08016dc1
 8016d98:	08016dc1 	.word	0x08016dc1
 8016d9c:	08016dc1 	.word	0x08016dc1
 8016da0:	08016dc1 	.word	0x08016dc1
 8016da4:	08016dc1 	.word	0x08016dc1
 8016da8:	08016dc1 	.word	0x08016dc1
 8016dac:	08016dc1 	.word	0x08016dc1
 8016db0:	08016dc1 	.word	0x08016dc1
 8016db4:	08016dc1 	.word	0x08016dc1
 8016db8:	08016dc1 	.word	0x08016dc1
 8016dbc:	08016dc1 	.word	0x08016dc1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016dc0:	bf00      	nop
  }

  return (USBD_OK);
 8016dc2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	370c      	adds	r7, #12
 8016dc8:	46bd      	mov	sp, r7
 8016dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dce:	4770      	bx	lr

08016dd0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016dd0:	b580      	push	{r7, lr}
 8016dd2:	b084      	sub	sp, #16
 8016dd4:	af00      	add	r7, sp, #0
 8016dd6:	6078      	str	r0, [r7, #4]
 8016dd8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8016dda:	6879      	ldr	r1, [r7, #4]
 8016ddc:	480e      	ldr	r0, [pc, #56]	; (8016e18 <CDC_Receive_HS+0x48>)
 8016dde:	f7fe fb39 	bl	8015454 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8016de2:	480d      	ldr	r0, [pc, #52]	; (8016e18 <CDC_Receive_HS+0x48>)
 8016de4:	f7fe fb94 	bl	8015510 <USBD_CDC_ReceivePacket>

  extern uint8_t usbDataBuffer[usbBufferLen];
  extern uint32_t usbBytesReady;

  uint32_t cpyLen = *Len;
 8016de8:	683b      	ldr	r3, [r7, #0]
 8016dea:	681b      	ldr	r3, [r3, #0]
 8016dec:	60fb      	str	r3, [r7, #12]
  /*char debug[250];
  sprintf(debug, "cpyLen: %d\n", cpyLen);
  CDC_Transmit_HS(debug, strlen(debug));*/

  memcpy(usbDataBuffer + usbBytesReady, Buf, cpyLen);
 8016dee:	4b0b      	ldr	r3, [pc, #44]	; (8016e1c <CDC_Receive_HS+0x4c>)
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	4a0b      	ldr	r2, [pc, #44]	; (8016e20 <CDC_Receive_HS+0x50>)
 8016df4:	4413      	add	r3, r2
 8016df6:	68fa      	ldr	r2, [r7, #12]
 8016df8:	6879      	ldr	r1, [r7, #4]
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	f000 fcf0 	bl	80177e0 <memcpy>
  usbBytesReady += cpyLen;
 8016e00:	4b06      	ldr	r3, [pc, #24]	; (8016e1c <CDC_Receive_HS+0x4c>)
 8016e02:	681a      	ldr	r2, [r3, #0]
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	4413      	add	r3, r2
 8016e08:	4a04      	ldr	r2, [pc, #16]	; (8016e1c <CDC_Receive_HS+0x4c>)
 8016e0a:	6013      	str	r3, [r2, #0]
  
  return (USBD_OK);
 8016e0c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8016e0e:	4618      	mov	r0, r3
 8016e10:	3710      	adds	r7, #16
 8016e12:	46bd      	mov	sp, r7
 8016e14:	bd80      	pop	{r7, pc}
 8016e16:	bf00      	nop
 8016e18:	24001714 	.word	0x24001714
 8016e1c:	24000270 	.word	0x24000270
 8016e20:	24000170 	.word	0x24000170

08016e24 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b084      	sub	sp, #16
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]
 8016e2c:	460b      	mov	r3, r1
 8016e2e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016e30:	2300      	movs	r3, #0
 8016e32:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8016e34:	4b0d      	ldr	r3, [pc, #52]	; (8016e6c <CDC_Transmit_HS+0x48>)
 8016e36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016e3a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016e3c:	68bb      	ldr	r3, [r7, #8]
 8016e3e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d001      	beq.n	8016e4a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8016e46:	2301      	movs	r3, #1
 8016e48:	e00b      	b.n	8016e62 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8016e4a:	887b      	ldrh	r3, [r7, #2]
 8016e4c:	461a      	mov	r2, r3
 8016e4e:	6879      	ldr	r1, [r7, #4]
 8016e50:	4806      	ldr	r0, [pc, #24]	; (8016e6c <CDC_Transmit_HS+0x48>)
 8016e52:	f7fe fadd 	bl	8015410 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8016e56:	4805      	ldr	r0, [pc, #20]	; (8016e6c <CDC_Transmit_HS+0x48>)
 8016e58:	f7fe fb1a 	bl	8015490 <USBD_CDC_TransmitPacket>
 8016e5c:	4603      	mov	r3, r0
 8016e5e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8016e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e62:	4618      	mov	r0, r3
 8016e64:	3710      	adds	r7, #16
 8016e66:	46bd      	mov	sp, r7
 8016e68:	bd80      	pop	{r7, pc}
 8016e6a:	bf00      	nop
 8016e6c:	24001714 	.word	0x24001714

08016e70 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016e70:	b480      	push	{r7}
 8016e72:	b087      	sub	sp, #28
 8016e74:	af00      	add	r7, sp, #0
 8016e76:	60f8      	str	r0, [r7, #12]
 8016e78:	60b9      	str	r1, [r7, #8]
 8016e7a:	4613      	mov	r3, r2
 8016e7c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016e7e:	2300      	movs	r3, #0
 8016e80:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8016e82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016e86:	4618      	mov	r0, r3
 8016e88:	371c      	adds	r7, #28
 8016e8a:	46bd      	mov	sp, r7
 8016e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e90:	4770      	bx	lr
	...

08016e94 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e94:	b480      	push	{r7}
 8016e96:	b083      	sub	sp, #12
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	4603      	mov	r3, r0
 8016e9c:	6039      	str	r1, [r7, #0]
 8016e9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016ea0:	683b      	ldr	r3, [r7, #0]
 8016ea2:	2212      	movs	r2, #18
 8016ea4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016ea6:	4b03      	ldr	r3, [pc, #12]	; (8016eb4 <USBD_HS_DeviceDescriptor+0x20>)
}
 8016ea8:	4618      	mov	r0, r3
 8016eaa:	370c      	adds	r7, #12
 8016eac:	46bd      	mov	sp, r7
 8016eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eb2:	4770      	bx	lr
 8016eb4:	240000d0 	.word	0x240000d0

08016eb8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016eb8:	b480      	push	{r7}
 8016eba:	b083      	sub	sp, #12
 8016ebc:	af00      	add	r7, sp, #0
 8016ebe:	4603      	mov	r3, r0
 8016ec0:	6039      	str	r1, [r7, #0]
 8016ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016ec4:	683b      	ldr	r3, [r7, #0]
 8016ec6:	2204      	movs	r2, #4
 8016ec8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016eca:	4b03      	ldr	r3, [pc, #12]	; (8016ed8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016ecc:	4618      	mov	r0, r3
 8016ece:	370c      	adds	r7, #12
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed6:	4770      	bx	lr
 8016ed8:	240000e4 	.word	0x240000e4

08016edc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016edc:	b580      	push	{r7, lr}
 8016ede:	b082      	sub	sp, #8
 8016ee0:	af00      	add	r7, sp, #0
 8016ee2:	4603      	mov	r3, r0
 8016ee4:	6039      	str	r1, [r7, #0]
 8016ee6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016ee8:	79fb      	ldrb	r3, [r7, #7]
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d105      	bne.n	8016efa <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016eee:	683a      	ldr	r2, [r7, #0]
 8016ef0:	4907      	ldr	r1, [pc, #28]	; (8016f10 <USBD_HS_ProductStrDescriptor+0x34>)
 8016ef2:	4808      	ldr	r0, [pc, #32]	; (8016f14 <USBD_HS_ProductStrDescriptor+0x38>)
 8016ef4:	f7ff fd84 	bl	8016a00 <USBD_GetString>
 8016ef8:	e004      	b.n	8016f04 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016efa:	683a      	ldr	r2, [r7, #0]
 8016efc:	4904      	ldr	r1, [pc, #16]	; (8016f10 <USBD_HS_ProductStrDescriptor+0x34>)
 8016efe:	4805      	ldr	r0, [pc, #20]	; (8016f14 <USBD_HS_ProductStrDescriptor+0x38>)
 8016f00:	f7ff fd7e 	bl	8016a00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016f04:	4b02      	ldr	r3, [pc, #8]	; (8016f10 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016f06:	4618      	mov	r0, r3
 8016f08:	3708      	adds	r7, #8
 8016f0a:	46bd      	mov	sp, r7
 8016f0c:	bd80      	pop	{r7, pc}
 8016f0e:	bf00      	nop
 8016f10:	240029f0 	.word	0x240029f0
 8016f14:	08018b48 	.word	0x08018b48

08016f18 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f18:	b580      	push	{r7, lr}
 8016f1a:	b082      	sub	sp, #8
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	4603      	mov	r3, r0
 8016f20:	6039      	str	r1, [r7, #0]
 8016f22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016f24:	683a      	ldr	r2, [r7, #0]
 8016f26:	4904      	ldr	r1, [pc, #16]	; (8016f38 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016f28:	4804      	ldr	r0, [pc, #16]	; (8016f3c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016f2a:	f7ff fd69 	bl	8016a00 <USBD_GetString>
  return USBD_StrDesc;
 8016f2e:	4b02      	ldr	r3, [pc, #8]	; (8016f38 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8016f30:	4618      	mov	r0, r3
 8016f32:	3708      	adds	r7, #8
 8016f34:	46bd      	mov	sp, r7
 8016f36:	bd80      	pop	{r7, pc}
 8016f38:	240029f0 	.word	0x240029f0
 8016f3c:	08018b64 	.word	0x08018b64

08016f40 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b082      	sub	sp, #8
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	4603      	mov	r3, r0
 8016f48:	6039      	str	r1, [r7, #0]
 8016f4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016f4c:	683b      	ldr	r3, [r7, #0]
 8016f4e:	221a      	movs	r2, #26
 8016f50:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016f52:	f000 f843 	bl	8016fdc <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016f56:	4b02      	ldr	r3, [pc, #8]	; (8016f60 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016f58:	4618      	mov	r0, r3
 8016f5a:	3708      	adds	r7, #8
 8016f5c:	46bd      	mov	sp, r7
 8016f5e:	bd80      	pop	{r7, pc}
 8016f60:	240000e8 	.word	0x240000e8

08016f64 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f64:	b580      	push	{r7, lr}
 8016f66:	b082      	sub	sp, #8
 8016f68:	af00      	add	r7, sp, #0
 8016f6a:	4603      	mov	r3, r0
 8016f6c:	6039      	str	r1, [r7, #0]
 8016f6e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016f70:	79fb      	ldrb	r3, [r7, #7]
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d105      	bne.n	8016f82 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016f76:	683a      	ldr	r2, [r7, #0]
 8016f78:	4907      	ldr	r1, [pc, #28]	; (8016f98 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016f7a:	4808      	ldr	r0, [pc, #32]	; (8016f9c <USBD_HS_ConfigStrDescriptor+0x38>)
 8016f7c:	f7ff fd40 	bl	8016a00 <USBD_GetString>
 8016f80:	e004      	b.n	8016f8c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016f82:	683a      	ldr	r2, [r7, #0]
 8016f84:	4904      	ldr	r1, [pc, #16]	; (8016f98 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016f86:	4805      	ldr	r0, [pc, #20]	; (8016f9c <USBD_HS_ConfigStrDescriptor+0x38>)
 8016f88:	f7ff fd3a 	bl	8016a00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016f8c:	4b02      	ldr	r3, [pc, #8]	; (8016f98 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8016f8e:	4618      	mov	r0, r3
 8016f90:	3708      	adds	r7, #8
 8016f92:	46bd      	mov	sp, r7
 8016f94:	bd80      	pop	{r7, pc}
 8016f96:	bf00      	nop
 8016f98:	240029f0 	.word	0x240029f0
 8016f9c:	08018b68 	.word	0x08018b68

08016fa0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016fa0:	b580      	push	{r7, lr}
 8016fa2:	b082      	sub	sp, #8
 8016fa4:	af00      	add	r7, sp, #0
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	6039      	str	r1, [r7, #0]
 8016faa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016fac:	79fb      	ldrb	r3, [r7, #7]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d105      	bne.n	8016fbe <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016fb2:	683a      	ldr	r2, [r7, #0]
 8016fb4:	4907      	ldr	r1, [pc, #28]	; (8016fd4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016fb6:	4808      	ldr	r0, [pc, #32]	; (8016fd8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016fb8:	f7ff fd22 	bl	8016a00 <USBD_GetString>
 8016fbc:	e004      	b.n	8016fc8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016fbe:	683a      	ldr	r2, [r7, #0]
 8016fc0:	4904      	ldr	r1, [pc, #16]	; (8016fd4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016fc2:	4805      	ldr	r0, [pc, #20]	; (8016fd8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016fc4:	f7ff fd1c 	bl	8016a00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016fc8:	4b02      	ldr	r3, [pc, #8]	; (8016fd4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8016fca:	4618      	mov	r0, r3
 8016fcc:	3708      	adds	r7, #8
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	bd80      	pop	{r7, pc}
 8016fd2:	bf00      	nop
 8016fd4:	240029f0 	.word	0x240029f0
 8016fd8:	08018b74 	.word	0x08018b74

08016fdc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016fdc:	b580      	push	{r7, lr}
 8016fde:	b084      	sub	sp, #16
 8016fe0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016fe2:	4b0f      	ldr	r3, [pc, #60]	; (8017020 <Get_SerialNum+0x44>)
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016fe8:	4b0e      	ldr	r3, [pc, #56]	; (8017024 <Get_SerialNum+0x48>)
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016fee:	4b0e      	ldr	r3, [pc, #56]	; (8017028 <Get_SerialNum+0x4c>)
 8016ff0:	681b      	ldr	r3, [r3, #0]
 8016ff2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016ff4:	68fa      	ldr	r2, [r7, #12]
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	4413      	add	r3, r2
 8016ffa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	2b00      	cmp	r3, #0
 8017000:	d009      	beq.n	8017016 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017002:	2208      	movs	r2, #8
 8017004:	4909      	ldr	r1, [pc, #36]	; (801702c <Get_SerialNum+0x50>)
 8017006:	68f8      	ldr	r0, [r7, #12]
 8017008:	f000 f814 	bl	8017034 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801700c:	2204      	movs	r2, #4
 801700e:	4908      	ldr	r1, [pc, #32]	; (8017030 <Get_SerialNum+0x54>)
 8017010:	68b8      	ldr	r0, [r7, #8]
 8017012:	f000 f80f 	bl	8017034 <IntToUnicode>
  }
}
 8017016:	bf00      	nop
 8017018:	3710      	adds	r7, #16
 801701a:	46bd      	mov	sp, r7
 801701c:	bd80      	pop	{r7, pc}
 801701e:	bf00      	nop
 8017020:	1ff1e800 	.word	0x1ff1e800
 8017024:	1ff1e804 	.word	0x1ff1e804
 8017028:	1ff1e808 	.word	0x1ff1e808
 801702c:	240000ea 	.word	0x240000ea
 8017030:	240000fa 	.word	0x240000fa

08017034 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017034:	b480      	push	{r7}
 8017036:	b087      	sub	sp, #28
 8017038:	af00      	add	r7, sp, #0
 801703a:	60f8      	str	r0, [r7, #12]
 801703c:	60b9      	str	r1, [r7, #8]
 801703e:	4613      	mov	r3, r2
 8017040:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017042:	2300      	movs	r3, #0
 8017044:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017046:	2300      	movs	r3, #0
 8017048:	75fb      	strb	r3, [r7, #23]
 801704a:	e027      	b.n	801709c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801704c:	68fb      	ldr	r3, [r7, #12]
 801704e:	0f1b      	lsrs	r3, r3, #28
 8017050:	2b09      	cmp	r3, #9
 8017052:	d80b      	bhi.n	801706c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017054:	68fb      	ldr	r3, [r7, #12]
 8017056:	0f1b      	lsrs	r3, r3, #28
 8017058:	b2da      	uxtb	r2, r3
 801705a:	7dfb      	ldrb	r3, [r7, #23]
 801705c:	005b      	lsls	r3, r3, #1
 801705e:	4619      	mov	r1, r3
 8017060:	68bb      	ldr	r3, [r7, #8]
 8017062:	440b      	add	r3, r1
 8017064:	3230      	adds	r2, #48	; 0x30
 8017066:	b2d2      	uxtb	r2, r2
 8017068:	701a      	strb	r2, [r3, #0]
 801706a:	e00a      	b.n	8017082 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	0f1b      	lsrs	r3, r3, #28
 8017070:	b2da      	uxtb	r2, r3
 8017072:	7dfb      	ldrb	r3, [r7, #23]
 8017074:	005b      	lsls	r3, r3, #1
 8017076:	4619      	mov	r1, r3
 8017078:	68bb      	ldr	r3, [r7, #8]
 801707a:	440b      	add	r3, r1
 801707c:	3237      	adds	r2, #55	; 0x37
 801707e:	b2d2      	uxtb	r2, r2
 8017080:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	011b      	lsls	r3, r3, #4
 8017086:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017088:	7dfb      	ldrb	r3, [r7, #23]
 801708a:	005b      	lsls	r3, r3, #1
 801708c:	3301      	adds	r3, #1
 801708e:	68ba      	ldr	r2, [r7, #8]
 8017090:	4413      	add	r3, r2
 8017092:	2200      	movs	r2, #0
 8017094:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017096:	7dfb      	ldrb	r3, [r7, #23]
 8017098:	3301      	adds	r3, #1
 801709a:	75fb      	strb	r3, [r7, #23]
 801709c:	7dfa      	ldrb	r2, [r7, #23]
 801709e:	79fb      	ldrb	r3, [r7, #7]
 80170a0:	429a      	cmp	r2, r3
 80170a2:	d3d3      	bcc.n	801704c <IntToUnicode+0x18>
  }
}
 80170a4:	bf00      	nop
 80170a6:	bf00      	nop
 80170a8:	371c      	adds	r7, #28
 80170aa:	46bd      	mov	sp, r7
 80170ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b0:	4770      	bx	lr
	...

080170b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80170b4:	b580      	push	{r7, lr}
 80170b6:	b0b2      	sub	sp, #200	; 0xc8
 80170b8:	af00      	add	r7, sp, #0
 80170ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80170bc:	f107 0310 	add.w	r3, r7, #16
 80170c0:	22b8      	movs	r2, #184	; 0xb8
 80170c2:	2100      	movs	r1, #0
 80170c4:	4618      	mov	r0, r3
 80170c6:	f000 fb4f 	bl	8017768 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80170ca:	687b      	ldr	r3, [r7, #4]
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	4a1a      	ldr	r2, [pc, #104]	; (8017138 <HAL_PCD_MspInit+0x84>)
 80170d0:	4293      	cmp	r3, r2
 80170d2:	d12c      	bne.n	801712e <HAL_PCD_MspInit+0x7a>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80170d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80170d8:	f04f 0300 	mov.w	r3, #0
 80170dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80170e0:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80170e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80170e8:	f107 0310 	add.w	r3, r7, #16
 80170ec:	4618      	mov	r0, r3
 80170ee:	f7f3 fcfb 	bl	800aae8 <HAL_RCCEx_PeriphCLKConfig>
 80170f2:	4603      	mov	r3, r0
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d001      	beq.n	80170fc <HAL_PCD_MspInit+0x48>
    {
      Error_Handler();
 80170f8:	f7eb fcdc 	bl	8002ab4 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80170fc:	f7f2 fd14 	bl	8009b28 <HAL_PWREx_EnableUSBVoltageDetector>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8017100:	4b0e      	ldr	r3, [pc, #56]	; (801713c <HAL_PCD_MspInit+0x88>)
 8017102:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017106:	4a0d      	ldr	r2, [pc, #52]	; (801713c <HAL_PCD_MspInit+0x88>)
 8017108:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801710c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8017110:	4b0a      	ldr	r3, [pc, #40]	; (801713c <HAL_PCD_MspInit+0x88>)
 8017112:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8017116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801711a:	60fb      	str	r3, [r7, #12]
 801711c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801711e:	2200      	movs	r2, #0
 8017120:	2100      	movs	r1, #0
 8017122:	204d      	movs	r0, #77	; 0x4d
 8017124:	f7ee fa85 	bl	8005632 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8017128:	204d      	movs	r0, #77	; 0x4d
 801712a:	f7ee fa9c 	bl	8005666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801712e:	bf00      	nop
 8017130:	37c8      	adds	r7, #200	; 0xc8
 8017132:	46bd      	mov	sp, r7
 8017134:	bd80      	pop	{r7, pc}
 8017136:	bf00      	nop
 8017138:	40040000 	.word	0x40040000
 801713c:	58024400 	.word	0x58024400

08017140 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017140:	b580      	push	{r7, lr}
 8017142:	b082      	sub	sp, #8
 8017144:	af00      	add	r7, sp, #0
 8017146:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017148:	687b      	ldr	r3, [r7, #4]
 801714a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8017154:	4619      	mov	r1, r3
 8017156:	4610      	mov	r0, r2
 8017158:	f7fe fac3 	bl	80156e2 <USBD_LL_SetupStage>
}
 801715c:	bf00      	nop
 801715e:	3708      	adds	r7, #8
 8017160:	46bd      	mov	sp, r7
 8017162:	bd80      	pop	{r7, pc}

08017164 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017164:	b580      	push	{r7, lr}
 8017166:	b082      	sub	sp, #8
 8017168:	af00      	add	r7, sp, #0
 801716a:	6078      	str	r0, [r7, #4]
 801716c:	460b      	mov	r3, r1
 801716e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8017176:	78fa      	ldrb	r2, [r7, #3]
 8017178:	6879      	ldr	r1, [r7, #4]
 801717a:	4613      	mov	r3, r2
 801717c:	00db      	lsls	r3, r3, #3
 801717e:	4413      	add	r3, r2
 8017180:	009b      	lsls	r3, r3, #2
 8017182:	440b      	add	r3, r1
 8017184:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8017188:	681a      	ldr	r2, [r3, #0]
 801718a:	78fb      	ldrb	r3, [r7, #3]
 801718c:	4619      	mov	r1, r3
 801718e:	f7fe fafd 	bl	801578c <USBD_LL_DataOutStage>
}
 8017192:	bf00      	nop
 8017194:	3708      	adds	r7, #8
 8017196:	46bd      	mov	sp, r7
 8017198:	bd80      	pop	{r7, pc}

0801719a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801719a:	b580      	push	{r7, lr}
 801719c:	b082      	sub	sp, #8
 801719e:	af00      	add	r7, sp, #0
 80171a0:	6078      	str	r0, [r7, #4]
 80171a2:	460b      	mov	r3, r1
 80171a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80171ac:	78fa      	ldrb	r2, [r7, #3]
 80171ae:	6879      	ldr	r1, [r7, #4]
 80171b0:	4613      	mov	r3, r2
 80171b2:	00db      	lsls	r3, r3, #3
 80171b4:	4413      	add	r3, r2
 80171b6:	009b      	lsls	r3, r3, #2
 80171b8:	440b      	add	r3, r1
 80171ba:	3348      	adds	r3, #72	; 0x48
 80171bc:	681a      	ldr	r2, [r3, #0]
 80171be:	78fb      	ldrb	r3, [r7, #3]
 80171c0:	4619      	mov	r1, r3
 80171c2:	f7fe fb96 	bl	80158f2 <USBD_LL_DataInStage>
}
 80171c6:	bf00      	nop
 80171c8:	3708      	adds	r7, #8
 80171ca:	46bd      	mov	sp, r7
 80171cc:	bd80      	pop	{r7, pc}

080171ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80171ce:	b580      	push	{r7, lr}
 80171d0:	b082      	sub	sp, #8
 80171d2:	af00      	add	r7, sp, #0
 80171d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80171dc:	4618      	mov	r0, r3
 80171de:	f7fe fcd0 	bl	8015b82 <USBD_LL_SOF>
}
 80171e2:	bf00      	nop
 80171e4:	3708      	adds	r7, #8
 80171e6:	46bd      	mov	sp, r7
 80171e8:	bd80      	pop	{r7, pc}

080171ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80171ea:	b580      	push	{r7, lr}
 80171ec:	b084      	sub	sp, #16
 80171ee:	af00      	add	r7, sp, #0
 80171f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80171f2:	2301      	movs	r3, #1
 80171f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	691b      	ldr	r3, [r3, #16]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d102      	bne.n	8017204 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80171fe:	2300      	movs	r3, #0
 8017200:	73fb      	strb	r3, [r7, #15]
 8017202:	e008      	b.n	8017216 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	691b      	ldr	r3, [r3, #16]
 8017208:	2b02      	cmp	r3, #2
 801720a:	d102      	bne.n	8017212 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801720c:	2301      	movs	r3, #1
 801720e:	73fb      	strb	r3, [r7, #15]
 8017210:	e001      	b.n	8017216 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017212:	f7eb fc4f 	bl	8002ab4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801721c:	7bfa      	ldrb	r2, [r7, #15]
 801721e:	4611      	mov	r1, r2
 8017220:	4618      	mov	r0, r3
 8017222:	f7fe fc6a 	bl	8015afa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801722c:	4618      	mov	r0, r3
 801722e:	f7fe fc12 	bl	8015a56 <USBD_LL_Reset>
}
 8017232:	bf00      	nop
 8017234:	3710      	adds	r7, #16
 8017236:	46bd      	mov	sp, r7
 8017238:	bd80      	pop	{r7, pc}
	...

0801723c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801723c:	b580      	push	{r7, lr}
 801723e:	b082      	sub	sp, #8
 8017240:	af00      	add	r7, sp, #0
 8017242:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801724a:	4618      	mov	r0, r3
 801724c:	f7fe fc65 	bl	8015b1a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	681b      	ldr	r3, [r3, #0]
 8017254:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	687a      	ldr	r2, [r7, #4]
 801725c:	6812      	ldr	r2, [r2, #0]
 801725e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017262:	f043 0301 	orr.w	r3, r3, #1
 8017266:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	6a1b      	ldr	r3, [r3, #32]
 801726c:	2b00      	cmp	r3, #0
 801726e:	d005      	beq.n	801727c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017270:	4b04      	ldr	r3, [pc, #16]	; (8017284 <HAL_PCD_SuspendCallback+0x48>)
 8017272:	691b      	ldr	r3, [r3, #16]
 8017274:	4a03      	ldr	r2, [pc, #12]	; (8017284 <HAL_PCD_SuspendCallback+0x48>)
 8017276:	f043 0306 	orr.w	r3, r3, #6
 801727a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801727c:	bf00      	nop
 801727e:	3708      	adds	r7, #8
 8017280:	46bd      	mov	sp, r7
 8017282:	bd80      	pop	{r7, pc}
 8017284:	e000ed00 	.word	0xe000ed00

08017288 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017288:	b580      	push	{r7, lr}
 801728a:	b082      	sub	sp, #8
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017296:	4618      	mov	r0, r3
 8017298:	f7fe fc5b 	bl	8015b52 <USBD_LL_Resume>
}
 801729c:	bf00      	nop
 801729e:	3708      	adds	r7, #8
 80172a0:	46bd      	mov	sp, r7
 80172a2:	bd80      	pop	{r7, pc}

080172a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172a4:	b580      	push	{r7, lr}
 80172a6:	b082      	sub	sp, #8
 80172a8:	af00      	add	r7, sp, #0
 80172aa:	6078      	str	r0, [r7, #4]
 80172ac:	460b      	mov	r3, r1
 80172ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80172b6:	78fa      	ldrb	r2, [r7, #3]
 80172b8:	4611      	mov	r1, r2
 80172ba:	4618      	mov	r0, r3
 80172bc:	f7fe fcb3 	bl	8015c26 <USBD_LL_IsoOUTIncomplete>
}
 80172c0:	bf00      	nop
 80172c2:	3708      	adds	r7, #8
 80172c4:	46bd      	mov	sp, r7
 80172c6:	bd80      	pop	{r7, pc}

080172c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172c8:	b580      	push	{r7, lr}
 80172ca:	b082      	sub	sp, #8
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	6078      	str	r0, [r7, #4]
 80172d0:	460b      	mov	r3, r1
 80172d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80172da:	78fa      	ldrb	r2, [r7, #3]
 80172dc:	4611      	mov	r1, r2
 80172de:	4618      	mov	r0, r3
 80172e0:	f7fe fc6f 	bl	8015bc2 <USBD_LL_IsoINIncomplete>
}
 80172e4:	bf00      	nop
 80172e6:	3708      	adds	r7, #8
 80172e8:	46bd      	mov	sp, r7
 80172ea:	bd80      	pop	{r7, pc}

080172ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172ec:	b580      	push	{r7, lr}
 80172ee:	b082      	sub	sp, #8
 80172f0:	af00      	add	r7, sp, #0
 80172f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80172f4:	687b      	ldr	r3, [r7, #4]
 80172f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80172fa:	4618      	mov	r0, r3
 80172fc:	f7fe fcc5 	bl	8015c8a <USBD_LL_DevConnected>
}
 8017300:	bf00      	nop
 8017302:	3708      	adds	r7, #8
 8017304:	46bd      	mov	sp, r7
 8017306:	bd80      	pop	{r7, pc}

08017308 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017308:	b580      	push	{r7, lr}
 801730a:	b082      	sub	sp, #8
 801730c:	af00      	add	r7, sp, #0
 801730e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017316:	4618      	mov	r0, r3
 8017318:	f7fe fcc2 	bl	8015ca0 <USBD_LL_DevDisconnected>
}
 801731c:	bf00      	nop
 801731e:	3708      	adds	r7, #8
 8017320:	46bd      	mov	sp, r7
 8017322:	bd80      	pop	{r7, pc}

08017324 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017324:	b580      	push	{r7, lr}
 8017326:	b082      	sub	sp, #8
 8017328:	af00      	add	r7, sp, #0
 801732a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	781b      	ldrb	r3, [r3, #0]
 8017330:	2b01      	cmp	r3, #1
 8017332:	d140      	bne.n	80173b6 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8017334:	4a22      	ldr	r2, [pc, #136]	; (80173c0 <USBD_LL_Init+0x9c>)
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	4a20      	ldr	r2, [pc, #128]	; (80173c0 <USBD_LL_Init+0x9c>)
 8017340:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8017344:	4b1e      	ldr	r3, [pc, #120]	; (80173c0 <USBD_LL_Init+0x9c>)
 8017346:	4a1f      	ldr	r2, [pc, #124]	; (80173c4 <USBD_LL_Init+0xa0>)
 8017348:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801734a:	4b1d      	ldr	r3, [pc, #116]	; (80173c0 <USBD_LL_Init+0x9c>)
 801734c:	2209      	movs	r2, #9
 801734e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8017350:	4b1b      	ldr	r3, [pc, #108]	; (80173c0 <USBD_LL_Init+0x9c>)
 8017352:	2202      	movs	r2, #2
 8017354:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8017356:	4b1a      	ldr	r3, [pc, #104]	; (80173c0 <USBD_LL_Init+0x9c>)
 8017358:	2200      	movs	r2, #0
 801735a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801735c:	4b18      	ldr	r3, [pc, #96]	; (80173c0 <USBD_LL_Init+0x9c>)
 801735e:	2202      	movs	r2, #2
 8017360:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8017362:	4b17      	ldr	r3, [pc, #92]	; (80173c0 <USBD_LL_Init+0x9c>)
 8017364:	2200      	movs	r2, #0
 8017366:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8017368:	4b15      	ldr	r3, [pc, #84]	; (80173c0 <USBD_LL_Init+0x9c>)
 801736a:	2200      	movs	r2, #0
 801736c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801736e:	4b14      	ldr	r3, [pc, #80]	; (80173c0 <USBD_LL_Init+0x9c>)
 8017370:	2200      	movs	r2, #0
 8017372:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8017374:	4b12      	ldr	r3, [pc, #72]	; (80173c0 <USBD_LL_Init+0x9c>)
 8017376:	2200      	movs	r2, #0
 8017378:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801737a:	4b11      	ldr	r3, [pc, #68]	; (80173c0 <USBD_LL_Init+0x9c>)
 801737c:	2200      	movs	r2, #0
 801737e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8017380:	4b0f      	ldr	r3, [pc, #60]	; (80173c0 <USBD_LL_Init+0x9c>)
 8017382:	2200      	movs	r2, #0
 8017384:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8017386:	480e      	ldr	r0, [pc, #56]	; (80173c0 <USBD_LL_Init+0x9c>)
 8017388:	f7f1 f8db 	bl	8008542 <HAL_PCD_Init>
 801738c:	4603      	mov	r3, r0
 801738e:	2b00      	cmp	r3, #0
 8017390:	d001      	beq.n	8017396 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8017392:	f7eb fb8f 	bl	8002ab4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8017396:	f44f 7100 	mov.w	r1, #512	; 0x200
 801739a:	4809      	ldr	r0, [pc, #36]	; (80173c0 <USBD_LL_Init+0x9c>)
 801739c:	f7f2 fb49 	bl	8009a32 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80173a0:	2280      	movs	r2, #128	; 0x80
 80173a2:	2100      	movs	r1, #0
 80173a4:	4806      	ldr	r0, [pc, #24]	; (80173c0 <USBD_LL_Init+0x9c>)
 80173a6:	f7f2 fafd 	bl	80099a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80173aa:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80173ae:	2101      	movs	r1, #1
 80173b0:	4803      	ldr	r0, [pc, #12]	; (80173c0 <USBD_LL_Init+0x9c>)
 80173b2:	f7f2 faf7 	bl	80099a4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 80173b6:	2300      	movs	r3, #0
}
 80173b8:	4618      	mov	r0, r3
 80173ba:	3708      	adds	r7, #8
 80173bc:	46bd      	mov	sp, r7
 80173be:	bd80      	pop	{r7, pc}
 80173c0:	24002bf0 	.word	0x24002bf0
 80173c4:	40040000 	.word	0x40040000

080173c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	b084      	sub	sp, #16
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80173d0:	2300      	movs	r3, #0
 80173d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80173d4:	2300      	movs	r3, #0
 80173d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80173de:	4618      	mov	r0, r3
 80173e0:	f7f1 f9d3 	bl	800878a <HAL_PCD_Start>
 80173e4:	4603      	mov	r3, r0
 80173e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80173e8:	7bfb      	ldrb	r3, [r7, #15]
 80173ea:	4618      	mov	r0, r3
 80173ec:	f000 f942 	bl	8017674 <USBD_Get_USB_Status>
 80173f0:	4603      	mov	r3, r0
 80173f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80173f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80173f6:	4618      	mov	r0, r3
 80173f8:	3710      	adds	r7, #16
 80173fa:	46bd      	mov	sp, r7
 80173fc:	bd80      	pop	{r7, pc}

080173fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80173fe:	b580      	push	{r7, lr}
 8017400:	b084      	sub	sp, #16
 8017402:	af00      	add	r7, sp, #0
 8017404:	6078      	str	r0, [r7, #4]
 8017406:	4608      	mov	r0, r1
 8017408:	4611      	mov	r1, r2
 801740a:	461a      	mov	r2, r3
 801740c:	4603      	mov	r3, r0
 801740e:	70fb      	strb	r3, [r7, #3]
 8017410:	460b      	mov	r3, r1
 8017412:	70bb      	strb	r3, [r7, #2]
 8017414:	4613      	mov	r3, r2
 8017416:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017418:	2300      	movs	r3, #0
 801741a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801741c:	2300      	movs	r3, #0
 801741e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017426:	78bb      	ldrb	r3, [r7, #2]
 8017428:	883a      	ldrh	r2, [r7, #0]
 801742a:	78f9      	ldrb	r1, [r7, #3]
 801742c:	f7f1 fed3 	bl	80091d6 <HAL_PCD_EP_Open>
 8017430:	4603      	mov	r3, r0
 8017432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017434:	7bfb      	ldrb	r3, [r7, #15]
 8017436:	4618      	mov	r0, r3
 8017438:	f000 f91c 	bl	8017674 <USBD_Get_USB_Status>
 801743c:	4603      	mov	r3, r0
 801743e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017440:	7bbb      	ldrb	r3, [r7, #14]
}
 8017442:	4618      	mov	r0, r3
 8017444:	3710      	adds	r7, #16
 8017446:	46bd      	mov	sp, r7
 8017448:	bd80      	pop	{r7, pc}

0801744a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801744a:	b580      	push	{r7, lr}
 801744c:	b084      	sub	sp, #16
 801744e:	af00      	add	r7, sp, #0
 8017450:	6078      	str	r0, [r7, #4]
 8017452:	460b      	mov	r3, r1
 8017454:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017456:	2300      	movs	r3, #0
 8017458:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801745a:	2300      	movs	r3, #0
 801745c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017464:	78fa      	ldrb	r2, [r7, #3]
 8017466:	4611      	mov	r1, r2
 8017468:	4618      	mov	r0, r3
 801746a:	f7f1 ff1c 	bl	80092a6 <HAL_PCD_EP_Close>
 801746e:	4603      	mov	r3, r0
 8017470:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017472:	7bfb      	ldrb	r3, [r7, #15]
 8017474:	4618      	mov	r0, r3
 8017476:	f000 f8fd 	bl	8017674 <USBD_Get_USB_Status>
 801747a:	4603      	mov	r3, r0
 801747c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801747e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017480:	4618      	mov	r0, r3
 8017482:	3710      	adds	r7, #16
 8017484:	46bd      	mov	sp, r7
 8017486:	bd80      	pop	{r7, pc}

08017488 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017488:	b580      	push	{r7, lr}
 801748a:	b084      	sub	sp, #16
 801748c:	af00      	add	r7, sp, #0
 801748e:	6078      	str	r0, [r7, #4]
 8017490:	460b      	mov	r3, r1
 8017492:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017494:	2300      	movs	r3, #0
 8017496:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017498:	2300      	movs	r3, #0
 801749a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80174a2:	78fa      	ldrb	r2, [r7, #3]
 80174a4:	4611      	mov	r1, r2
 80174a6:	4618      	mov	r0, r3
 80174a8:	f7f1 ffd6 	bl	8009458 <HAL_PCD_EP_SetStall>
 80174ac:	4603      	mov	r3, r0
 80174ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80174b0:	7bfb      	ldrb	r3, [r7, #15]
 80174b2:	4618      	mov	r0, r3
 80174b4:	f000 f8de 	bl	8017674 <USBD_Get_USB_Status>
 80174b8:	4603      	mov	r3, r0
 80174ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80174be:	4618      	mov	r0, r3
 80174c0:	3710      	adds	r7, #16
 80174c2:	46bd      	mov	sp, r7
 80174c4:	bd80      	pop	{r7, pc}

080174c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80174c6:	b580      	push	{r7, lr}
 80174c8:	b084      	sub	sp, #16
 80174ca:	af00      	add	r7, sp, #0
 80174cc:	6078      	str	r0, [r7, #4]
 80174ce:	460b      	mov	r3, r1
 80174d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174d2:	2300      	movs	r3, #0
 80174d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80174d6:	2300      	movs	r3, #0
 80174d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80174e0:	78fa      	ldrb	r2, [r7, #3]
 80174e2:	4611      	mov	r1, r2
 80174e4:	4618      	mov	r0, r3
 80174e6:	f7f2 f81b 	bl	8009520 <HAL_PCD_EP_ClrStall>
 80174ea:	4603      	mov	r3, r0
 80174ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80174ee:	7bfb      	ldrb	r3, [r7, #15]
 80174f0:	4618      	mov	r0, r3
 80174f2:	f000 f8bf 	bl	8017674 <USBD_Get_USB_Status>
 80174f6:	4603      	mov	r3, r0
 80174f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80174fc:	4618      	mov	r0, r3
 80174fe:	3710      	adds	r7, #16
 8017500:	46bd      	mov	sp, r7
 8017502:	bd80      	pop	{r7, pc}

08017504 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017504:	b480      	push	{r7}
 8017506:	b085      	sub	sp, #20
 8017508:	af00      	add	r7, sp, #0
 801750a:	6078      	str	r0, [r7, #4]
 801750c:	460b      	mov	r3, r1
 801750e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017510:	687b      	ldr	r3, [r7, #4]
 8017512:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017516:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801751c:	2b00      	cmp	r3, #0
 801751e:	da0b      	bge.n	8017538 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017520:	78fb      	ldrb	r3, [r7, #3]
 8017522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017526:	68f9      	ldr	r1, [r7, #12]
 8017528:	4613      	mov	r3, r2
 801752a:	00db      	lsls	r3, r3, #3
 801752c:	4413      	add	r3, r2
 801752e:	009b      	lsls	r3, r3, #2
 8017530:	440b      	add	r3, r1
 8017532:	333e      	adds	r3, #62	; 0x3e
 8017534:	781b      	ldrb	r3, [r3, #0]
 8017536:	e00b      	b.n	8017550 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017538:	78fb      	ldrb	r3, [r7, #3]
 801753a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801753e:	68f9      	ldr	r1, [r7, #12]
 8017540:	4613      	mov	r3, r2
 8017542:	00db      	lsls	r3, r3, #3
 8017544:	4413      	add	r3, r2
 8017546:	009b      	lsls	r3, r3, #2
 8017548:	440b      	add	r3, r1
 801754a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801754e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017550:	4618      	mov	r0, r3
 8017552:	3714      	adds	r7, #20
 8017554:	46bd      	mov	sp, r7
 8017556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801755a:	4770      	bx	lr

0801755c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801755c:	b580      	push	{r7, lr}
 801755e:	b084      	sub	sp, #16
 8017560:	af00      	add	r7, sp, #0
 8017562:	6078      	str	r0, [r7, #4]
 8017564:	460b      	mov	r3, r1
 8017566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017568:	2300      	movs	r3, #0
 801756a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801756c:	2300      	movs	r3, #0
 801756e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017576:	78fa      	ldrb	r2, [r7, #3]
 8017578:	4611      	mov	r1, r2
 801757a:	4618      	mov	r0, r3
 801757c:	f7f1 fe06 	bl	800918c <HAL_PCD_SetAddress>
 8017580:	4603      	mov	r3, r0
 8017582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017584:	7bfb      	ldrb	r3, [r7, #15]
 8017586:	4618      	mov	r0, r3
 8017588:	f000 f874 	bl	8017674 <USBD_Get_USB_Status>
 801758c:	4603      	mov	r3, r0
 801758e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017590:	7bbb      	ldrb	r3, [r7, #14]
}
 8017592:	4618      	mov	r0, r3
 8017594:	3710      	adds	r7, #16
 8017596:	46bd      	mov	sp, r7
 8017598:	bd80      	pop	{r7, pc}

0801759a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801759a:	b580      	push	{r7, lr}
 801759c:	b086      	sub	sp, #24
 801759e:	af00      	add	r7, sp, #0
 80175a0:	60f8      	str	r0, [r7, #12]
 80175a2:	607a      	str	r2, [r7, #4]
 80175a4:	603b      	str	r3, [r7, #0]
 80175a6:	460b      	mov	r3, r1
 80175a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175aa:	2300      	movs	r3, #0
 80175ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175ae:	2300      	movs	r3, #0
 80175b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80175b2:	68fb      	ldr	r3, [r7, #12]
 80175b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80175b8:	7af9      	ldrb	r1, [r7, #11]
 80175ba:	683b      	ldr	r3, [r7, #0]
 80175bc:	687a      	ldr	r2, [r7, #4]
 80175be:	f7f1 ff10 	bl	80093e2 <HAL_PCD_EP_Transmit>
 80175c2:	4603      	mov	r3, r0
 80175c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80175c6:	7dfb      	ldrb	r3, [r7, #23]
 80175c8:	4618      	mov	r0, r3
 80175ca:	f000 f853 	bl	8017674 <USBD_Get_USB_Status>
 80175ce:	4603      	mov	r3, r0
 80175d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80175d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80175d4:	4618      	mov	r0, r3
 80175d6:	3718      	adds	r7, #24
 80175d8:	46bd      	mov	sp, r7
 80175da:	bd80      	pop	{r7, pc}

080175dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b086      	sub	sp, #24
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	60f8      	str	r0, [r7, #12]
 80175e4:	607a      	str	r2, [r7, #4]
 80175e6:	603b      	str	r3, [r7, #0]
 80175e8:	460b      	mov	r3, r1
 80175ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175ec:	2300      	movs	r3, #0
 80175ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175f0:	2300      	movs	r3, #0
 80175f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80175fa:	7af9      	ldrb	r1, [r7, #11]
 80175fc:	683b      	ldr	r3, [r7, #0]
 80175fe:	687a      	ldr	r2, [r7, #4]
 8017600:	f7f1 fe9b 	bl	800933a <HAL_PCD_EP_Receive>
 8017604:	4603      	mov	r3, r0
 8017606:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017608:	7dfb      	ldrb	r3, [r7, #23]
 801760a:	4618      	mov	r0, r3
 801760c:	f000 f832 	bl	8017674 <USBD_Get_USB_Status>
 8017610:	4603      	mov	r3, r0
 8017612:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017614:	7dbb      	ldrb	r3, [r7, #22]
}
 8017616:	4618      	mov	r0, r3
 8017618:	3718      	adds	r7, #24
 801761a:	46bd      	mov	sp, r7
 801761c:	bd80      	pop	{r7, pc}

0801761e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801761e:	b580      	push	{r7, lr}
 8017620:	b082      	sub	sp, #8
 8017622:	af00      	add	r7, sp, #0
 8017624:	6078      	str	r0, [r7, #4]
 8017626:	460b      	mov	r3, r1
 8017628:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017630:	78fa      	ldrb	r2, [r7, #3]
 8017632:	4611      	mov	r1, r2
 8017634:	4618      	mov	r0, r3
 8017636:	f7f1 febc 	bl	80093b2 <HAL_PCD_EP_GetRxCount>
 801763a:	4603      	mov	r3, r0
}
 801763c:	4618      	mov	r0, r3
 801763e:	3708      	adds	r7, #8
 8017640:	46bd      	mov	sp, r7
 8017642:	bd80      	pop	{r7, pc}

08017644 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017644:	b480      	push	{r7}
 8017646:	b083      	sub	sp, #12
 8017648:	af00      	add	r7, sp, #0
 801764a:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801764c:	4b03      	ldr	r3, [pc, #12]	; (801765c <USBD_static_malloc+0x18>)
}
 801764e:	4618      	mov	r0, r3
 8017650:	370c      	adds	r7, #12
 8017652:	46bd      	mov	sp, r7
 8017654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017658:	4770      	bx	lr
 801765a:	bf00      	nop
 801765c:	240030fc 	.word	0x240030fc

08017660 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017660:	b480      	push	{r7}
 8017662:	b083      	sub	sp, #12
 8017664:	af00      	add	r7, sp, #0
 8017666:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8017668:	bf00      	nop
 801766a:	370c      	adds	r7, #12
 801766c:	46bd      	mov	sp, r7
 801766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017672:	4770      	bx	lr

08017674 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017674:	b480      	push	{r7}
 8017676:	b085      	sub	sp, #20
 8017678:	af00      	add	r7, sp, #0
 801767a:	4603      	mov	r3, r0
 801767c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801767e:	2300      	movs	r3, #0
 8017680:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017682:	79fb      	ldrb	r3, [r7, #7]
 8017684:	2b03      	cmp	r3, #3
 8017686:	d817      	bhi.n	80176b8 <USBD_Get_USB_Status+0x44>
 8017688:	a201      	add	r2, pc, #4	; (adr r2, 8017690 <USBD_Get_USB_Status+0x1c>)
 801768a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801768e:	bf00      	nop
 8017690:	080176a1 	.word	0x080176a1
 8017694:	080176a7 	.word	0x080176a7
 8017698:	080176ad 	.word	0x080176ad
 801769c:	080176b3 	.word	0x080176b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80176a0:	2300      	movs	r3, #0
 80176a2:	73fb      	strb	r3, [r7, #15]
    break;
 80176a4:	e00b      	b.n	80176be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80176a6:	2303      	movs	r3, #3
 80176a8:	73fb      	strb	r3, [r7, #15]
    break;
 80176aa:	e008      	b.n	80176be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80176ac:	2301      	movs	r3, #1
 80176ae:	73fb      	strb	r3, [r7, #15]
    break;
 80176b0:	e005      	b.n	80176be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80176b2:	2303      	movs	r3, #3
 80176b4:	73fb      	strb	r3, [r7, #15]
    break;
 80176b6:	e002      	b.n	80176be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80176b8:	2303      	movs	r3, #3
 80176ba:	73fb      	strb	r3, [r7, #15]
    break;
 80176bc:	bf00      	nop
  }
  return usb_status;
 80176be:	7bfb      	ldrb	r3, [r7, #15]
}
 80176c0:	4618      	mov	r0, r3
 80176c2:	3714      	adds	r7, #20
 80176c4:	46bd      	mov	sp, r7
 80176c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ca:	4770      	bx	lr

080176cc <siprintf>:
 80176cc:	b40e      	push	{r1, r2, r3}
 80176ce:	b500      	push	{lr}
 80176d0:	b09c      	sub	sp, #112	; 0x70
 80176d2:	ab1d      	add	r3, sp, #116	; 0x74
 80176d4:	9002      	str	r0, [sp, #8]
 80176d6:	9006      	str	r0, [sp, #24]
 80176d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80176dc:	4809      	ldr	r0, [pc, #36]	; (8017704 <siprintf+0x38>)
 80176de:	9107      	str	r1, [sp, #28]
 80176e0:	9104      	str	r1, [sp, #16]
 80176e2:	4909      	ldr	r1, [pc, #36]	; (8017708 <siprintf+0x3c>)
 80176e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80176e8:	9105      	str	r1, [sp, #20]
 80176ea:	6800      	ldr	r0, [r0, #0]
 80176ec:	9301      	str	r3, [sp, #4]
 80176ee:	a902      	add	r1, sp, #8
 80176f0:	f000 f9d6 	bl	8017aa0 <_svfiprintf_r>
 80176f4:	9b02      	ldr	r3, [sp, #8]
 80176f6:	2200      	movs	r2, #0
 80176f8:	701a      	strb	r2, [r3, #0]
 80176fa:	b01c      	add	sp, #112	; 0x70
 80176fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8017700:	b003      	add	sp, #12
 8017702:	4770      	bx	lr
 8017704:	24000150 	.word	0x24000150
 8017708:	ffff0208 	.word	0xffff0208

0801770c <siscanf>:
 801770c:	b40e      	push	{r1, r2, r3}
 801770e:	b510      	push	{r4, lr}
 8017710:	b09f      	sub	sp, #124	; 0x7c
 8017712:	ac21      	add	r4, sp, #132	; 0x84
 8017714:	f44f 7101 	mov.w	r1, #516	; 0x204
 8017718:	f854 2b04 	ldr.w	r2, [r4], #4
 801771c:	9201      	str	r2, [sp, #4]
 801771e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017722:	9004      	str	r0, [sp, #16]
 8017724:	9008      	str	r0, [sp, #32]
 8017726:	f7e8 fdfd 	bl	8000324 <strlen>
 801772a:	4b0c      	ldr	r3, [pc, #48]	; (801775c <siscanf+0x50>)
 801772c:	9005      	str	r0, [sp, #20]
 801772e:	9009      	str	r0, [sp, #36]	; 0x24
 8017730:	930d      	str	r3, [sp, #52]	; 0x34
 8017732:	480b      	ldr	r0, [pc, #44]	; (8017760 <siscanf+0x54>)
 8017734:	9a01      	ldr	r2, [sp, #4]
 8017736:	6800      	ldr	r0, [r0, #0]
 8017738:	9403      	str	r4, [sp, #12]
 801773a:	2300      	movs	r3, #0
 801773c:	9311      	str	r3, [sp, #68]	; 0x44
 801773e:	9316      	str	r3, [sp, #88]	; 0x58
 8017740:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8017744:	f8ad 301e 	strh.w	r3, [sp, #30]
 8017748:	a904      	add	r1, sp, #16
 801774a:	4623      	mov	r3, r4
 801774c:	f000 fb00 	bl	8017d50 <__ssvfiscanf_r>
 8017750:	b01f      	add	sp, #124	; 0x7c
 8017752:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017756:	b003      	add	sp, #12
 8017758:	4770      	bx	lr
 801775a:	bf00      	nop
 801775c:	08017765 	.word	0x08017765
 8017760:	24000150 	.word	0x24000150

08017764 <__seofread>:
 8017764:	2000      	movs	r0, #0
 8017766:	4770      	bx	lr

08017768 <memset>:
 8017768:	4402      	add	r2, r0
 801776a:	4603      	mov	r3, r0
 801776c:	4293      	cmp	r3, r2
 801776e:	d100      	bne.n	8017772 <memset+0xa>
 8017770:	4770      	bx	lr
 8017772:	f803 1b01 	strb.w	r1, [r3], #1
 8017776:	e7f9      	b.n	801776c <memset+0x4>

08017778 <__errno>:
 8017778:	4b01      	ldr	r3, [pc, #4]	; (8017780 <__errno+0x8>)
 801777a:	6818      	ldr	r0, [r3, #0]
 801777c:	4770      	bx	lr
 801777e:	bf00      	nop
 8017780:	24000150 	.word	0x24000150

08017784 <__libc_init_array>:
 8017784:	b570      	push	{r4, r5, r6, lr}
 8017786:	4d0d      	ldr	r5, [pc, #52]	; (80177bc <__libc_init_array+0x38>)
 8017788:	4c0d      	ldr	r4, [pc, #52]	; (80177c0 <__libc_init_array+0x3c>)
 801778a:	1b64      	subs	r4, r4, r5
 801778c:	10a4      	asrs	r4, r4, #2
 801778e:	2600      	movs	r6, #0
 8017790:	42a6      	cmp	r6, r4
 8017792:	d109      	bne.n	80177a8 <__libc_init_array+0x24>
 8017794:	4d0b      	ldr	r5, [pc, #44]	; (80177c4 <__libc_init_array+0x40>)
 8017796:	4c0c      	ldr	r4, [pc, #48]	; (80177c8 <__libc_init_array+0x44>)
 8017798:	f001 f8fe 	bl	8018998 <_init>
 801779c:	1b64      	subs	r4, r4, r5
 801779e:	10a4      	asrs	r4, r4, #2
 80177a0:	2600      	movs	r6, #0
 80177a2:	42a6      	cmp	r6, r4
 80177a4:	d105      	bne.n	80177b2 <__libc_init_array+0x2e>
 80177a6:	bd70      	pop	{r4, r5, r6, pc}
 80177a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80177ac:	4798      	blx	r3
 80177ae:	3601      	adds	r6, #1
 80177b0:	e7ee      	b.n	8017790 <__libc_init_array+0xc>
 80177b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80177b6:	4798      	blx	r3
 80177b8:	3601      	adds	r6, #1
 80177ba:	e7f2      	b.n	80177a2 <__libc_init_array+0x1e>
 80177bc:	08018dac 	.word	0x08018dac
 80177c0:	08018dac 	.word	0x08018dac
 80177c4:	08018dac 	.word	0x08018dac
 80177c8:	08018db0 	.word	0x08018db0

080177cc <__retarget_lock_acquire_recursive>:
 80177cc:	4770      	bx	lr

080177ce <__retarget_lock_release_recursive>:
 80177ce:	4770      	bx	lr

080177d0 <strcpy>:
 80177d0:	4603      	mov	r3, r0
 80177d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80177d6:	f803 2b01 	strb.w	r2, [r3], #1
 80177da:	2a00      	cmp	r2, #0
 80177dc:	d1f9      	bne.n	80177d2 <strcpy+0x2>
 80177de:	4770      	bx	lr

080177e0 <memcpy>:
 80177e0:	440a      	add	r2, r1
 80177e2:	4291      	cmp	r1, r2
 80177e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80177e8:	d100      	bne.n	80177ec <memcpy+0xc>
 80177ea:	4770      	bx	lr
 80177ec:	b510      	push	{r4, lr}
 80177ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80177f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80177f6:	4291      	cmp	r1, r2
 80177f8:	d1f9      	bne.n	80177ee <memcpy+0xe>
 80177fa:	bd10      	pop	{r4, pc}

080177fc <_free_r>:
 80177fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80177fe:	2900      	cmp	r1, #0
 8017800:	d044      	beq.n	801788c <_free_r+0x90>
 8017802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017806:	9001      	str	r0, [sp, #4]
 8017808:	2b00      	cmp	r3, #0
 801780a:	f1a1 0404 	sub.w	r4, r1, #4
 801780e:	bfb8      	it	lt
 8017810:	18e4      	addlt	r4, r4, r3
 8017812:	f000 f8df 	bl	80179d4 <__malloc_lock>
 8017816:	4a1e      	ldr	r2, [pc, #120]	; (8017890 <_free_r+0x94>)
 8017818:	9801      	ldr	r0, [sp, #4]
 801781a:	6813      	ldr	r3, [r2, #0]
 801781c:	b933      	cbnz	r3, 801782c <_free_r+0x30>
 801781e:	6063      	str	r3, [r4, #4]
 8017820:	6014      	str	r4, [r2, #0]
 8017822:	b003      	add	sp, #12
 8017824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017828:	f000 b8da 	b.w	80179e0 <__malloc_unlock>
 801782c:	42a3      	cmp	r3, r4
 801782e:	d908      	bls.n	8017842 <_free_r+0x46>
 8017830:	6825      	ldr	r5, [r4, #0]
 8017832:	1961      	adds	r1, r4, r5
 8017834:	428b      	cmp	r3, r1
 8017836:	bf01      	itttt	eq
 8017838:	6819      	ldreq	r1, [r3, #0]
 801783a:	685b      	ldreq	r3, [r3, #4]
 801783c:	1949      	addeq	r1, r1, r5
 801783e:	6021      	streq	r1, [r4, #0]
 8017840:	e7ed      	b.n	801781e <_free_r+0x22>
 8017842:	461a      	mov	r2, r3
 8017844:	685b      	ldr	r3, [r3, #4]
 8017846:	b10b      	cbz	r3, 801784c <_free_r+0x50>
 8017848:	42a3      	cmp	r3, r4
 801784a:	d9fa      	bls.n	8017842 <_free_r+0x46>
 801784c:	6811      	ldr	r1, [r2, #0]
 801784e:	1855      	adds	r5, r2, r1
 8017850:	42a5      	cmp	r5, r4
 8017852:	d10b      	bne.n	801786c <_free_r+0x70>
 8017854:	6824      	ldr	r4, [r4, #0]
 8017856:	4421      	add	r1, r4
 8017858:	1854      	adds	r4, r2, r1
 801785a:	42a3      	cmp	r3, r4
 801785c:	6011      	str	r1, [r2, #0]
 801785e:	d1e0      	bne.n	8017822 <_free_r+0x26>
 8017860:	681c      	ldr	r4, [r3, #0]
 8017862:	685b      	ldr	r3, [r3, #4]
 8017864:	6053      	str	r3, [r2, #4]
 8017866:	440c      	add	r4, r1
 8017868:	6014      	str	r4, [r2, #0]
 801786a:	e7da      	b.n	8017822 <_free_r+0x26>
 801786c:	d902      	bls.n	8017874 <_free_r+0x78>
 801786e:	230c      	movs	r3, #12
 8017870:	6003      	str	r3, [r0, #0]
 8017872:	e7d6      	b.n	8017822 <_free_r+0x26>
 8017874:	6825      	ldr	r5, [r4, #0]
 8017876:	1961      	adds	r1, r4, r5
 8017878:	428b      	cmp	r3, r1
 801787a:	bf04      	itt	eq
 801787c:	6819      	ldreq	r1, [r3, #0]
 801787e:	685b      	ldreq	r3, [r3, #4]
 8017880:	6063      	str	r3, [r4, #4]
 8017882:	bf04      	itt	eq
 8017884:	1949      	addeq	r1, r1, r5
 8017886:	6021      	streq	r1, [r4, #0]
 8017888:	6054      	str	r4, [r2, #4]
 801788a:	e7ca      	b.n	8017822 <_free_r+0x26>
 801788c:	b003      	add	sp, #12
 801788e:	bd30      	pop	{r4, r5, pc}
 8017890:	2400345c 	.word	0x2400345c

08017894 <sbrk_aligned>:
 8017894:	b570      	push	{r4, r5, r6, lr}
 8017896:	4e0e      	ldr	r6, [pc, #56]	; (80178d0 <sbrk_aligned+0x3c>)
 8017898:	460c      	mov	r4, r1
 801789a:	6831      	ldr	r1, [r6, #0]
 801789c:	4605      	mov	r5, r0
 801789e:	b911      	cbnz	r1, 80178a6 <sbrk_aligned+0x12>
 80178a0:	f000 ff3a 	bl	8018718 <_sbrk_r>
 80178a4:	6030      	str	r0, [r6, #0]
 80178a6:	4621      	mov	r1, r4
 80178a8:	4628      	mov	r0, r5
 80178aa:	f000 ff35 	bl	8018718 <_sbrk_r>
 80178ae:	1c43      	adds	r3, r0, #1
 80178b0:	d00a      	beq.n	80178c8 <sbrk_aligned+0x34>
 80178b2:	1cc4      	adds	r4, r0, #3
 80178b4:	f024 0403 	bic.w	r4, r4, #3
 80178b8:	42a0      	cmp	r0, r4
 80178ba:	d007      	beq.n	80178cc <sbrk_aligned+0x38>
 80178bc:	1a21      	subs	r1, r4, r0
 80178be:	4628      	mov	r0, r5
 80178c0:	f000 ff2a 	bl	8018718 <_sbrk_r>
 80178c4:	3001      	adds	r0, #1
 80178c6:	d101      	bne.n	80178cc <sbrk_aligned+0x38>
 80178c8:	f04f 34ff 	mov.w	r4, #4294967295
 80178cc:	4620      	mov	r0, r4
 80178ce:	bd70      	pop	{r4, r5, r6, pc}
 80178d0:	24003460 	.word	0x24003460

080178d4 <_malloc_r>:
 80178d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80178d8:	1ccd      	adds	r5, r1, #3
 80178da:	f025 0503 	bic.w	r5, r5, #3
 80178de:	3508      	adds	r5, #8
 80178e0:	2d0c      	cmp	r5, #12
 80178e2:	bf38      	it	cc
 80178e4:	250c      	movcc	r5, #12
 80178e6:	2d00      	cmp	r5, #0
 80178e8:	4607      	mov	r7, r0
 80178ea:	db01      	blt.n	80178f0 <_malloc_r+0x1c>
 80178ec:	42a9      	cmp	r1, r5
 80178ee:	d905      	bls.n	80178fc <_malloc_r+0x28>
 80178f0:	230c      	movs	r3, #12
 80178f2:	603b      	str	r3, [r7, #0]
 80178f4:	2600      	movs	r6, #0
 80178f6:	4630      	mov	r0, r6
 80178f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178fc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80179d0 <_malloc_r+0xfc>
 8017900:	f000 f868 	bl	80179d4 <__malloc_lock>
 8017904:	f8d8 3000 	ldr.w	r3, [r8]
 8017908:	461c      	mov	r4, r3
 801790a:	bb5c      	cbnz	r4, 8017964 <_malloc_r+0x90>
 801790c:	4629      	mov	r1, r5
 801790e:	4638      	mov	r0, r7
 8017910:	f7ff ffc0 	bl	8017894 <sbrk_aligned>
 8017914:	1c43      	adds	r3, r0, #1
 8017916:	4604      	mov	r4, r0
 8017918:	d155      	bne.n	80179c6 <_malloc_r+0xf2>
 801791a:	f8d8 4000 	ldr.w	r4, [r8]
 801791e:	4626      	mov	r6, r4
 8017920:	2e00      	cmp	r6, #0
 8017922:	d145      	bne.n	80179b0 <_malloc_r+0xdc>
 8017924:	2c00      	cmp	r4, #0
 8017926:	d048      	beq.n	80179ba <_malloc_r+0xe6>
 8017928:	6823      	ldr	r3, [r4, #0]
 801792a:	4631      	mov	r1, r6
 801792c:	4638      	mov	r0, r7
 801792e:	eb04 0903 	add.w	r9, r4, r3
 8017932:	f000 fef1 	bl	8018718 <_sbrk_r>
 8017936:	4581      	cmp	r9, r0
 8017938:	d13f      	bne.n	80179ba <_malloc_r+0xe6>
 801793a:	6821      	ldr	r1, [r4, #0]
 801793c:	1a6d      	subs	r5, r5, r1
 801793e:	4629      	mov	r1, r5
 8017940:	4638      	mov	r0, r7
 8017942:	f7ff ffa7 	bl	8017894 <sbrk_aligned>
 8017946:	3001      	adds	r0, #1
 8017948:	d037      	beq.n	80179ba <_malloc_r+0xe6>
 801794a:	6823      	ldr	r3, [r4, #0]
 801794c:	442b      	add	r3, r5
 801794e:	6023      	str	r3, [r4, #0]
 8017950:	f8d8 3000 	ldr.w	r3, [r8]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d038      	beq.n	80179ca <_malloc_r+0xf6>
 8017958:	685a      	ldr	r2, [r3, #4]
 801795a:	42a2      	cmp	r2, r4
 801795c:	d12b      	bne.n	80179b6 <_malloc_r+0xe2>
 801795e:	2200      	movs	r2, #0
 8017960:	605a      	str	r2, [r3, #4]
 8017962:	e00f      	b.n	8017984 <_malloc_r+0xb0>
 8017964:	6822      	ldr	r2, [r4, #0]
 8017966:	1b52      	subs	r2, r2, r5
 8017968:	d41f      	bmi.n	80179aa <_malloc_r+0xd6>
 801796a:	2a0b      	cmp	r2, #11
 801796c:	d917      	bls.n	801799e <_malloc_r+0xca>
 801796e:	1961      	adds	r1, r4, r5
 8017970:	42a3      	cmp	r3, r4
 8017972:	6025      	str	r5, [r4, #0]
 8017974:	bf18      	it	ne
 8017976:	6059      	strne	r1, [r3, #4]
 8017978:	6863      	ldr	r3, [r4, #4]
 801797a:	bf08      	it	eq
 801797c:	f8c8 1000 	streq.w	r1, [r8]
 8017980:	5162      	str	r2, [r4, r5]
 8017982:	604b      	str	r3, [r1, #4]
 8017984:	4638      	mov	r0, r7
 8017986:	f104 060b 	add.w	r6, r4, #11
 801798a:	f000 f829 	bl	80179e0 <__malloc_unlock>
 801798e:	f026 0607 	bic.w	r6, r6, #7
 8017992:	1d23      	adds	r3, r4, #4
 8017994:	1af2      	subs	r2, r6, r3
 8017996:	d0ae      	beq.n	80178f6 <_malloc_r+0x22>
 8017998:	1b9b      	subs	r3, r3, r6
 801799a:	50a3      	str	r3, [r4, r2]
 801799c:	e7ab      	b.n	80178f6 <_malloc_r+0x22>
 801799e:	42a3      	cmp	r3, r4
 80179a0:	6862      	ldr	r2, [r4, #4]
 80179a2:	d1dd      	bne.n	8017960 <_malloc_r+0x8c>
 80179a4:	f8c8 2000 	str.w	r2, [r8]
 80179a8:	e7ec      	b.n	8017984 <_malloc_r+0xb0>
 80179aa:	4623      	mov	r3, r4
 80179ac:	6864      	ldr	r4, [r4, #4]
 80179ae:	e7ac      	b.n	801790a <_malloc_r+0x36>
 80179b0:	4634      	mov	r4, r6
 80179b2:	6876      	ldr	r6, [r6, #4]
 80179b4:	e7b4      	b.n	8017920 <_malloc_r+0x4c>
 80179b6:	4613      	mov	r3, r2
 80179b8:	e7cc      	b.n	8017954 <_malloc_r+0x80>
 80179ba:	230c      	movs	r3, #12
 80179bc:	603b      	str	r3, [r7, #0]
 80179be:	4638      	mov	r0, r7
 80179c0:	f000 f80e 	bl	80179e0 <__malloc_unlock>
 80179c4:	e797      	b.n	80178f6 <_malloc_r+0x22>
 80179c6:	6025      	str	r5, [r4, #0]
 80179c8:	e7dc      	b.n	8017984 <_malloc_r+0xb0>
 80179ca:	605b      	str	r3, [r3, #4]
 80179cc:	deff      	udf	#255	; 0xff
 80179ce:	bf00      	nop
 80179d0:	2400345c 	.word	0x2400345c

080179d4 <__malloc_lock>:
 80179d4:	4801      	ldr	r0, [pc, #4]	; (80179dc <__malloc_lock+0x8>)
 80179d6:	f7ff bef9 	b.w	80177cc <__retarget_lock_acquire_recursive>
 80179da:	bf00      	nop
 80179dc:	24003458 	.word	0x24003458

080179e0 <__malloc_unlock>:
 80179e0:	4801      	ldr	r0, [pc, #4]	; (80179e8 <__malloc_unlock+0x8>)
 80179e2:	f7ff bef4 	b.w	80177ce <__retarget_lock_release_recursive>
 80179e6:	bf00      	nop
 80179e8:	24003458 	.word	0x24003458

080179ec <__ssputs_r>:
 80179ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80179f0:	688e      	ldr	r6, [r1, #8]
 80179f2:	461f      	mov	r7, r3
 80179f4:	42be      	cmp	r6, r7
 80179f6:	680b      	ldr	r3, [r1, #0]
 80179f8:	4682      	mov	sl, r0
 80179fa:	460c      	mov	r4, r1
 80179fc:	4690      	mov	r8, r2
 80179fe:	d82c      	bhi.n	8017a5a <__ssputs_r+0x6e>
 8017a00:	898a      	ldrh	r2, [r1, #12]
 8017a02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017a06:	d026      	beq.n	8017a56 <__ssputs_r+0x6a>
 8017a08:	6965      	ldr	r5, [r4, #20]
 8017a0a:	6909      	ldr	r1, [r1, #16]
 8017a0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017a10:	eba3 0901 	sub.w	r9, r3, r1
 8017a14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017a18:	1c7b      	adds	r3, r7, #1
 8017a1a:	444b      	add	r3, r9
 8017a1c:	106d      	asrs	r5, r5, #1
 8017a1e:	429d      	cmp	r5, r3
 8017a20:	bf38      	it	cc
 8017a22:	461d      	movcc	r5, r3
 8017a24:	0553      	lsls	r3, r2, #21
 8017a26:	d527      	bpl.n	8017a78 <__ssputs_r+0x8c>
 8017a28:	4629      	mov	r1, r5
 8017a2a:	f7ff ff53 	bl	80178d4 <_malloc_r>
 8017a2e:	4606      	mov	r6, r0
 8017a30:	b360      	cbz	r0, 8017a8c <__ssputs_r+0xa0>
 8017a32:	6921      	ldr	r1, [r4, #16]
 8017a34:	464a      	mov	r2, r9
 8017a36:	f7ff fed3 	bl	80177e0 <memcpy>
 8017a3a:	89a3      	ldrh	r3, [r4, #12]
 8017a3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017a44:	81a3      	strh	r3, [r4, #12]
 8017a46:	6126      	str	r6, [r4, #16]
 8017a48:	6165      	str	r5, [r4, #20]
 8017a4a:	444e      	add	r6, r9
 8017a4c:	eba5 0509 	sub.w	r5, r5, r9
 8017a50:	6026      	str	r6, [r4, #0]
 8017a52:	60a5      	str	r5, [r4, #8]
 8017a54:	463e      	mov	r6, r7
 8017a56:	42be      	cmp	r6, r7
 8017a58:	d900      	bls.n	8017a5c <__ssputs_r+0x70>
 8017a5a:	463e      	mov	r6, r7
 8017a5c:	6820      	ldr	r0, [r4, #0]
 8017a5e:	4632      	mov	r2, r6
 8017a60:	4641      	mov	r1, r8
 8017a62:	f000 fe3e 	bl	80186e2 <memmove>
 8017a66:	68a3      	ldr	r3, [r4, #8]
 8017a68:	1b9b      	subs	r3, r3, r6
 8017a6a:	60a3      	str	r3, [r4, #8]
 8017a6c:	6823      	ldr	r3, [r4, #0]
 8017a6e:	4433      	add	r3, r6
 8017a70:	6023      	str	r3, [r4, #0]
 8017a72:	2000      	movs	r0, #0
 8017a74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a78:	462a      	mov	r2, r5
 8017a7a:	f000 fe5d 	bl	8018738 <_realloc_r>
 8017a7e:	4606      	mov	r6, r0
 8017a80:	2800      	cmp	r0, #0
 8017a82:	d1e0      	bne.n	8017a46 <__ssputs_r+0x5a>
 8017a84:	6921      	ldr	r1, [r4, #16]
 8017a86:	4650      	mov	r0, sl
 8017a88:	f7ff feb8 	bl	80177fc <_free_r>
 8017a8c:	230c      	movs	r3, #12
 8017a8e:	f8ca 3000 	str.w	r3, [sl]
 8017a92:	89a3      	ldrh	r3, [r4, #12]
 8017a94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017a98:	81a3      	strh	r3, [r4, #12]
 8017a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8017a9e:	e7e9      	b.n	8017a74 <__ssputs_r+0x88>

08017aa0 <_svfiprintf_r>:
 8017aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aa4:	4698      	mov	r8, r3
 8017aa6:	898b      	ldrh	r3, [r1, #12]
 8017aa8:	061b      	lsls	r3, r3, #24
 8017aaa:	b09d      	sub	sp, #116	; 0x74
 8017aac:	4607      	mov	r7, r0
 8017aae:	460d      	mov	r5, r1
 8017ab0:	4614      	mov	r4, r2
 8017ab2:	d50e      	bpl.n	8017ad2 <_svfiprintf_r+0x32>
 8017ab4:	690b      	ldr	r3, [r1, #16]
 8017ab6:	b963      	cbnz	r3, 8017ad2 <_svfiprintf_r+0x32>
 8017ab8:	2140      	movs	r1, #64	; 0x40
 8017aba:	f7ff ff0b 	bl	80178d4 <_malloc_r>
 8017abe:	6028      	str	r0, [r5, #0]
 8017ac0:	6128      	str	r0, [r5, #16]
 8017ac2:	b920      	cbnz	r0, 8017ace <_svfiprintf_r+0x2e>
 8017ac4:	230c      	movs	r3, #12
 8017ac6:	603b      	str	r3, [r7, #0]
 8017ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8017acc:	e0d0      	b.n	8017c70 <_svfiprintf_r+0x1d0>
 8017ace:	2340      	movs	r3, #64	; 0x40
 8017ad0:	616b      	str	r3, [r5, #20]
 8017ad2:	2300      	movs	r3, #0
 8017ad4:	9309      	str	r3, [sp, #36]	; 0x24
 8017ad6:	2320      	movs	r3, #32
 8017ad8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017adc:	f8cd 800c 	str.w	r8, [sp, #12]
 8017ae0:	2330      	movs	r3, #48	; 0x30
 8017ae2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8017c88 <_svfiprintf_r+0x1e8>
 8017ae6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017aea:	f04f 0901 	mov.w	r9, #1
 8017aee:	4623      	mov	r3, r4
 8017af0:	469a      	mov	sl, r3
 8017af2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017af6:	b10a      	cbz	r2, 8017afc <_svfiprintf_r+0x5c>
 8017af8:	2a25      	cmp	r2, #37	; 0x25
 8017afa:	d1f9      	bne.n	8017af0 <_svfiprintf_r+0x50>
 8017afc:	ebba 0b04 	subs.w	fp, sl, r4
 8017b00:	d00b      	beq.n	8017b1a <_svfiprintf_r+0x7a>
 8017b02:	465b      	mov	r3, fp
 8017b04:	4622      	mov	r2, r4
 8017b06:	4629      	mov	r1, r5
 8017b08:	4638      	mov	r0, r7
 8017b0a:	f7ff ff6f 	bl	80179ec <__ssputs_r>
 8017b0e:	3001      	adds	r0, #1
 8017b10:	f000 80a9 	beq.w	8017c66 <_svfiprintf_r+0x1c6>
 8017b14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b16:	445a      	add	r2, fp
 8017b18:	9209      	str	r2, [sp, #36]	; 0x24
 8017b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8017b1e:	2b00      	cmp	r3, #0
 8017b20:	f000 80a1 	beq.w	8017c66 <_svfiprintf_r+0x1c6>
 8017b24:	2300      	movs	r3, #0
 8017b26:	f04f 32ff 	mov.w	r2, #4294967295
 8017b2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017b2e:	f10a 0a01 	add.w	sl, sl, #1
 8017b32:	9304      	str	r3, [sp, #16]
 8017b34:	9307      	str	r3, [sp, #28]
 8017b36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017b3a:	931a      	str	r3, [sp, #104]	; 0x68
 8017b3c:	4654      	mov	r4, sl
 8017b3e:	2205      	movs	r2, #5
 8017b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b44:	4850      	ldr	r0, [pc, #320]	; (8017c88 <_svfiprintf_r+0x1e8>)
 8017b46:	f7e8 fbfb 	bl	8000340 <memchr>
 8017b4a:	9a04      	ldr	r2, [sp, #16]
 8017b4c:	b9d8      	cbnz	r0, 8017b86 <_svfiprintf_r+0xe6>
 8017b4e:	06d0      	lsls	r0, r2, #27
 8017b50:	bf44      	itt	mi
 8017b52:	2320      	movmi	r3, #32
 8017b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b58:	0711      	lsls	r1, r2, #28
 8017b5a:	bf44      	itt	mi
 8017b5c:	232b      	movmi	r3, #43	; 0x2b
 8017b5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017b62:	f89a 3000 	ldrb.w	r3, [sl]
 8017b66:	2b2a      	cmp	r3, #42	; 0x2a
 8017b68:	d015      	beq.n	8017b96 <_svfiprintf_r+0xf6>
 8017b6a:	9a07      	ldr	r2, [sp, #28]
 8017b6c:	4654      	mov	r4, sl
 8017b6e:	2000      	movs	r0, #0
 8017b70:	f04f 0c0a 	mov.w	ip, #10
 8017b74:	4621      	mov	r1, r4
 8017b76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017b7a:	3b30      	subs	r3, #48	; 0x30
 8017b7c:	2b09      	cmp	r3, #9
 8017b7e:	d94d      	bls.n	8017c1c <_svfiprintf_r+0x17c>
 8017b80:	b1b0      	cbz	r0, 8017bb0 <_svfiprintf_r+0x110>
 8017b82:	9207      	str	r2, [sp, #28]
 8017b84:	e014      	b.n	8017bb0 <_svfiprintf_r+0x110>
 8017b86:	eba0 0308 	sub.w	r3, r0, r8
 8017b8a:	fa09 f303 	lsl.w	r3, r9, r3
 8017b8e:	4313      	orrs	r3, r2
 8017b90:	9304      	str	r3, [sp, #16]
 8017b92:	46a2      	mov	sl, r4
 8017b94:	e7d2      	b.n	8017b3c <_svfiprintf_r+0x9c>
 8017b96:	9b03      	ldr	r3, [sp, #12]
 8017b98:	1d19      	adds	r1, r3, #4
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	9103      	str	r1, [sp, #12]
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	bfbb      	ittet	lt
 8017ba2:	425b      	neglt	r3, r3
 8017ba4:	f042 0202 	orrlt.w	r2, r2, #2
 8017ba8:	9307      	strge	r3, [sp, #28]
 8017baa:	9307      	strlt	r3, [sp, #28]
 8017bac:	bfb8      	it	lt
 8017bae:	9204      	strlt	r2, [sp, #16]
 8017bb0:	7823      	ldrb	r3, [r4, #0]
 8017bb2:	2b2e      	cmp	r3, #46	; 0x2e
 8017bb4:	d10c      	bne.n	8017bd0 <_svfiprintf_r+0x130>
 8017bb6:	7863      	ldrb	r3, [r4, #1]
 8017bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8017bba:	d134      	bne.n	8017c26 <_svfiprintf_r+0x186>
 8017bbc:	9b03      	ldr	r3, [sp, #12]
 8017bbe:	1d1a      	adds	r2, r3, #4
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	9203      	str	r2, [sp, #12]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	bfb8      	it	lt
 8017bc8:	f04f 33ff 	movlt.w	r3, #4294967295
 8017bcc:	3402      	adds	r4, #2
 8017bce:	9305      	str	r3, [sp, #20]
 8017bd0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8017c98 <_svfiprintf_r+0x1f8>
 8017bd4:	7821      	ldrb	r1, [r4, #0]
 8017bd6:	2203      	movs	r2, #3
 8017bd8:	4650      	mov	r0, sl
 8017bda:	f7e8 fbb1 	bl	8000340 <memchr>
 8017bde:	b138      	cbz	r0, 8017bf0 <_svfiprintf_r+0x150>
 8017be0:	9b04      	ldr	r3, [sp, #16]
 8017be2:	eba0 000a 	sub.w	r0, r0, sl
 8017be6:	2240      	movs	r2, #64	; 0x40
 8017be8:	4082      	lsls	r2, r0
 8017bea:	4313      	orrs	r3, r2
 8017bec:	3401      	adds	r4, #1
 8017bee:	9304      	str	r3, [sp, #16]
 8017bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017bf4:	4825      	ldr	r0, [pc, #148]	; (8017c8c <_svfiprintf_r+0x1ec>)
 8017bf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017bfa:	2206      	movs	r2, #6
 8017bfc:	f7e8 fba0 	bl	8000340 <memchr>
 8017c00:	2800      	cmp	r0, #0
 8017c02:	d038      	beq.n	8017c76 <_svfiprintf_r+0x1d6>
 8017c04:	4b22      	ldr	r3, [pc, #136]	; (8017c90 <_svfiprintf_r+0x1f0>)
 8017c06:	bb1b      	cbnz	r3, 8017c50 <_svfiprintf_r+0x1b0>
 8017c08:	9b03      	ldr	r3, [sp, #12]
 8017c0a:	3307      	adds	r3, #7
 8017c0c:	f023 0307 	bic.w	r3, r3, #7
 8017c10:	3308      	adds	r3, #8
 8017c12:	9303      	str	r3, [sp, #12]
 8017c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c16:	4433      	add	r3, r6
 8017c18:	9309      	str	r3, [sp, #36]	; 0x24
 8017c1a:	e768      	b.n	8017aee <_svfiprintf_r+0x4e>
 8017c1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017c20:	460c      	mov	r4, r1
 8017c22:	2001      	movs	r0, #1
 8017c24:	e7a6      	b.n	8017b74 <_svfiprintf_r+0xd4>
 8017c26:	2300      	movs	r3, #0
 8017c28:	3401      	adds	r4, #1
 8017c2a:	9305      	str	r3, [sp, #20]
 8017c2c:	4619      	mov	r1, r3
 8017c2e:	f04f 0c0a 	mov.w	ip, #10
 8017c32:	4620      	mov	r0, r4
 8017c34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c38:	3a30      	subs	r2, #48	; 0x30
 8017c3a:	2a09      	cmp	r2, #9
 8017c3c:	d903      	bls.n	8017c46 <_svfiprintf_r+0x1a6>
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d0c6      	beq.n	8017bd0 <_svfiprintf_r+0x130>
 8017c42:	9105      	str	r1, [sp, #20]
 8017c44:	e7c4      	b.n	8017bd0 <_svfiprintf_r+0x130>
 8017c46:	fb0c 2101 	mla	r1, ip, r1, r2
 8017c4a:	4604      	mov	r4, r0
 8017c4c:	2301      	movs	r3, #1
 8017c4e:	e7f0      	b.n	8017c32 <_svfiprintf_r+0x192>
 8017c50:	ab03      	add	r3, sp, #12
 8017c52:	9300      	str	r3, [sp, #0]
 8017c54:	462a      	mov	r2, r5
 8017c56:	4b0f      	ldr	r3, [pc, #60]	; (8017c94 <_svfiprintf_r+0x1f4>)
 8017c58:	a904      	add	r1, sp, #16
 8017c5a:	4638      	mov	r0, r7
 8017c5c:	f3af 8000 	nop.w
 8017c60:	1c42      	adds	r2, r0, #1
 8017c62:	4606      	mov	r6, r0
 8017c64:	d1d6      	bne.n	8017c14 <_svfiprintf_r+0x174>
 8017c66:	89ab      	ldrh	r3, [r5, #12]
 8017c68:	065b      	lsls	r3, r3, #25
 8017c6a:	f53f af2d 	bmi.w	8017ac8 <_svfiprintf_r+0x28>
 8017c6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017c70:	b01d      	add	sp, #116	; 0x74
 8017c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c76:	ab03      	add	r3, sp, #12
 8017c78:	9300      	str	r3, [sp, #0]
 8017c7a:	462a      	mov	r2, r5
 8017c7c:	4b05      	ldr	r3, [pc, #20]	; (8017c94 <_svfiprintf_r+0x1f4>)
 8017c7e:	a904      	add	r1, sp, #16
 8017c80:	4638      	mov	r0, r7
 8017c82:	f000 fa4b 	bl	801811c <_printf_i>
 8017c86:	e7eb      	b.n	8017c60 <_svfiprintf_r+0x1c0>
 8017c88:	08018c54 	.word	0x08018c54
 8017c8c:	08018c5e 	.word	0x08018c5e
 8017c90:	00000000 	.word	0x00000000
 8017c94:	080179ed 	.word	0x080179ed
 8017c98:	08018c5a 	.word	0x08018c5a

08017c9c <_sungetc_r>:
 8017c9c:	b538      	push	{r3, r4, r5, lr}
 8017c9e:	1c4b      	adds	r3, r1, #1
 8017ca0:	4614      	mov	r4, r2
 8017ca2:	d103      	bne.n	8017cac <_sungetc_r+0x10>
 8017ca4:	f04f 35ff 	mov.w	r5, #4294967295
 8017ca8:	4628      	mov	r0, r5
 8017caa:	bd38      	pop	{r3, r4, r5, pc}
 8017cac:	8993      	ldrh	r3, [r2, #12]
 8017cae:	f023 0320 	bic.w	r3, r3, #32
 8017cb2:	8193      	strh	r3, [r2, #12]
 8017cb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017cb6:	6852      	ldr	r2, [r2, #4]
 8017cb8:	b2cd      	uxtb	r5, r1
 8017cba:	b18b      	cbz	r3, 8017ce0 <_sungetc_r+0x44>
 8017cbc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017cbe:	4293      	cmp	r3, r2
 8017cc0:	dd08      	ble.n	8017cd4 <_sungetc_r+0x38>
 8017cc2:	6823      	ldr	r3, [r4, #0]
 8017cc4:	1e5a      	subs	r2, r3, #1
 8017cc6:	6022      	str	r2, [r4, #0]
 8017cc8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017ccc:	6863      	ldr	r3, [r4, #4]
 8017cce:	3301      	adds	r3, #1
 8017cd0:	6063      	str	r3, [r4, #4]
 8017cd2:	e7e9      	b.n	8017ca8 <_sungetc_r+0xc>
 8017cd4:	4621      	mov	r1, r4
 8017cd6:	f000 fcca 	bl	801866e <__submore>
 8017cda:	2800      	cmp	r0, #0
 8017cdc:	d0f1      	beq.n	8017cc2 <_sungetc_r+0x26>
 8017cde:	e7e1      	b.n	8017ca4 <_sungetc_r+0x8>
 8017ce0:	6921      	ldr	r1, [r4, #16]
 8017ce2:	6823      	ldr	r3, [r4, #0]
 8017ce4:	b151      	cbz	r1, 8017cfc <_sungetc_r+0x60>
 8017ce6:	4299      	cmp	r1, r3
 8017ce8:	d208      	bcs.n	8017cfc <_sungetc_r+0x60>
 8017cea:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017cee:	42a9      	cmp	r1, r5
 8017cf0:	d104      	bne.n	8017cfc <_sungetc_r+0x60>
 8017cf2:	3b01      	subs	r3, #1
 8017cf4:	3201      	adds	r2, #1
 8017cf6:	6023      	str	r3, [r4, #0]
 8017cf8:	6062      	str	r2, [r4, #4]
 8017cfa:	e7d5      	b.n	8017ca8 <_sungetc_r+0xc>
 8017cfc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017d00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017d04:	6363      	str	r3, [r4, #52]	; 0x34
 8017d06:	2303      	movs	r3, #3
 8017d08:	63a3      	str	r3, [r4, #56]	; 0x38
 8017d0a:	4623      	mov	r3, r4
 8017d0c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8017d10:	6023      	str	r3, [r4, #0]
 8017d12:	2301      	movs	r3, #1
 8017d14:	e7dc      	b.n	8017cd0 <_sungetc_r+0x34>

08017d16 <__ssrefill_r>:
 8017d16:	b510      	push	{r4, lr}
 8017d18:	460c      	mov	r4, r1
 8017d1a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017d1c:	b169      	cbz	r1, 8017d3a <__ssrefill_r+0x24>
 8017d1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017d22:	4299      	cmp	r1, r3
 8017d24:	d001      	beq.n	8017d2a <__ssrefill_r+0x14>
 8017d26:	f7ff fd69 	bl	80177fc <_free_r>
 8017d2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017d2c:	6063      	str	r3, [r4, #4]
 8017d2e:	2000      	movs	r0, #0
 8017d30:	6360      	str	r0, [r4, #52]	; 0x34
 8017d32:	b113      	cbz	r3, 8017d3a <__ssrefill_r+0x24>
 8017d34:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8017d36:	6023      	str	r3, [r4, #0]
 8017d38:	bd10      	pop	{r4, pc}
 8017d3a:	6923      	ldr	r3, [r4, #16]
 8017d3c:	6023      	str	r3, [r4, #0]
 8017d3e:	2300      	movs	r3, #0
 8017d40:	6063      	str	r3, [r4, #4]
 8017d42:	89a3      	ldrh	r3, [r4, #12]
 8017d44:	f043 0320 	orr.w	r3, r3, #32
 8017d48:	81a3      	strh	r3, [r4, #12]
 8017d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8017d4e:	e7f3      	b.n	8017d38 <__ssrefill_r+0x22>

08017d50 <__ssvfiscanf_r>:
 8017d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d54:	460c      	mov	r4, r1
 8017d56:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8017d5a:	2100      	movs	r1, #0
 8017d5c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8017d60:	49a6      	ldr	r1, [pc, #664]	; (8017ffc <__ssvfiscanf_r+0x2ac>)
 8017d62:	91a0      	str	r1, [sp, #640]	; 0x280
 8017d64:	f10d 0804 	add.w	r8, sp, #4
 8017d68:	49a5      	ldr	r1, [pc, #660]	; (8018000 <__ssvfiscanf_r+0x2b0>)
 8017d6a:	4fa6      	ldr	r7, [pc, #664]	; (8018004 <__ssvfiscanf_r+0x2b4>)
 8017d6c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8018008 <__ssvfiscanf_r+0x2b8>
 8017d70:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017d74:	4606      	mov	r6, r0
 8017d76:	91a1      	str	r1, [sp, #644]	; 0x284
 8017d78:	9300      	str	r3, [sp, #0]
 8017d7a:	7813      	ldrb	r3, [r2, #0]
 8017d7c:	2b00      	cmp	r3, #0
 8017d7e:	f000 815a 	beq.w	8018036 <__ssvfiscanf_r+0x2e6>
 8017d82:	5cf9      	ldrb	r1, [r7, r3]
 8017d84:	f011 0108 	ands.w	r1, r1, #8
 8017d88:	f102 0501 	add.w	r5, r2, #1
 8017d8c:	d019      	beq.n	8017dc2 <__ssvfiscanf_r+0x72>
 8017d8e:	6863      	ldr	r3, [r4, #4]
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	dd0f      	ble.n	8017db4 <__ssvfiscanf_r+0x64>
 8017d94:	6823      	ldr	r3, [r4, #0]
 8017d96:	781a      	ldrb	r2, [r3, #0]
 8017d98:	5cba      	ldrb	r2, [r7, r2]
 8017d9a:	0712      	lsls	r2, r2, #28
 8017d9c:	d401      	bmi.n	8017da2 <__ssvfiscanf_r+0x52>
 8017d9e:	462a      	mov	r2, r5
 8017da0:	e7eb      	b.n	8017d7a <__ssvfiscanf_r+0x2a>
 8017da2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017da4:	3201      	adds	r2, #1
 8017da6:	9245      	str	r2, [sp, #276]	; 0x114
 8017da8:	6862      	ldr	r2, [r4, #4]
 8017daa:	3301      	adds	r3, #1
 8017dac:	3a01      	subs	r2, #1
 8017dae:	6062      	str	r2, [r4, #4]
 8017db0:	6023      	str	r3, [r4, #0]
 8017db2:	e7ec      	b.n	8017d8e <__ssvfiscanf_r+0x3e>
 8017db4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017db6:	4621      	mov	r1, r4
 8017db8:	4630      	mov	r0, r6
 8017dba:	4798      	blx	r3
 8017dbc:	2800      	cmp	r0, #0
 8017dbe:	d0e9      	beq.n	8017d94 <__ssvfiscanf_r+0x44>
 8017dc0:	e7ed      	b.n	8017d9e <__ssvfiscanf_r+0x4e>
 8017dc2:	2b25      	cmp	r3, #37	; 0x25
 8017dc4:	d012      	beq.n	8017dec <__ssvfiscanf_r+0x9c>
 8017dc6:	469a      	mov	sl, r3
 8017dc8:	6863      	ldr	r3, [r4, #4]
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	f340 8091 	ble.w	8017ef2 <__ssvfiscanf_r+0x1a2>
 8017dd0:	6822      	ldr	r2, [r4, #0]
 8017dd2:	7813      	ldrb	r3, [r2, #0]
 8017dd4:	4553      	cmp	r3, sl
 8017dd6:	f040 812e 	bne.w	8018036 <__ssvfiscanf_r+0x2e6>
 8017dda:	6863      	ldr	r3, [r4, #4]
 8017ddc:	3b01      	subs	r3, #1
 8017dde:	6063      	str	r3, [r4, #4]
 8017de0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017de2:	3201      	adds	r2, #1
 8017de4:	3301      	adds	r3, #1
 8017de6:	6022      	str	r2, [r4, #0]
 8017de8:	9345      	str	r3, [sp, #276]	; 0x114
 8017dea:	e7d8      	b.n	8017d9e <__ssvfiscanf_r+0x4e>
 8017dec:	9141      	str	r1, [sp, #260]	; 0x104
 8017dee:	9143      	str	r1, [sp, #268]	; 0x10c
 8017df0:	7853      	ldrb	r3, [r2, #1]
 8017df2:	2b2a      	cmp	r3, #42	; 0x2a
 8017df4:	bf02      	ittt	eq
 8017df6:	2310      	moveq	r3, #16
 8017df8:	1c95      	addeq	r5, r2, #2
 8017dfa:	9341      	streq	r3, [sp, #260]	; 0x104
 8017dfc:	220a      	movs	r2, #10
 8017dfe:	46aa      	mov	sl, r5
 8017e00:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8017e04:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8017e08:	2b09      	cmp	r3, #9
 8017e0a:	d91c      	bls.n	8017e46 <__ssvfiscanf_r+0xf6>
 8017e0c:	487e      	ldr	r0, [pc, #504]	; (8018008 <__ssvfiscanf_r+0x2b8>)
 8017e0e:	2203      	movs	r2, #3
 8017e10:	f7e8 fa96 	bl	8000340 <memchr>
 8017e14:	b138      	cbz	r0, 8017e26 <__ssvfiscanf_r+0xd6>
 8017e16:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017e18:	eba0 0009 	sub.w	r0, r0, r9
 8017e1c:	2301      	movs	r3, #1
 8017e1e:	4083      	lsls	r3, r0
 8017e20:	4313      	orrs	r3, r2
 8017e22:	9341      	str	r3, [sp, #260]	; 0x104
 8017e24:	4655      	mov	r5, sl
 8017e26:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017e2a:	2b78      	cmp	r3, #120	; 0x78
 8017e2c:	d806      	bhi.n	8017e3c <__ssvfiscanf_r+0xec>
 8017e2e:	2b57      	cmp	r3, #87	; 0x57
 8017e30:	d810      	bhi.n	8017e54 <__ssvfiscanf_r+0x104>
 8017e32:	2b25      	cmp	r3, #37	; 0x25
 8017e34:	d0c7      	beq.n	8017dc6 <__ssvfiscanf_r+0x76>
 8017e36:	d857      	bhi.n	8017ee8 <__ssvfiscanf_r+0x198>
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d065      	beq.n	8017f08 <__ssvfiscanf_r+0x1b8>
 8017e3c:	2303      	movs	r3, #3
 8017e3e:	9347      	str	r3, [sp, #284]	; 0x11c
 8017e40:	230a      	movs	r3, #10
 8017e42:	9342      	str	r3, [sp, #264]	; 0x108
 8017e44:	e076      	b.n	8017f34 <__ssvfiscanf_r+0x1e4>
 8017e46:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017e48:	fb02 1103 	mla	r1, r2, r3, r1
 8017e4c:	3930      	subs	r1, #48	; 0x30
 8017e4e:	9143      	str	r1, [sp, #268]	; 0x10c
 8017e50:	4655      	mov	r5, sl
 8017e52:	e7d4      	b.n	8017dfe <__ssvfiscanf_r+0xae>
 8017e54:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8017e58:	2a20      	cmp	r2, #32
 8017e5a:	d8ef      	bhi.n	8017e3c <__ssvfiscanf_r+0xec>
 8017e5c:	a101      	add	r1, pc, #4	; (adr r1, 8017e64 <__ssvfiscanf_r+0x114>)
 8017e5e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8017e62:	bf00      	nop
 8017e64:	08017f17 	.word	0x08017f17
 8017e68:	08017e3d 	.word	0x08017e3d
 8017e6c:	08017e3d 	.word	0x08017e3d
 8017e70:	08017f75 	.word	0x08017f75
 8017e74:	08017e3d 	.word	0x08017e3d
 8017e78:	08017e3d 	.word	0x08017e3d
 8017e7c:	08017e3d 	.word	0x08017e3d
 8017e80:	08017e3d 	.word	0x08017e3d
 8017e84:	08017e3d 	.word	0x08017e3d
 8017e88:	08017e3d 	.word	0x08017e3d
 8017e8c:	08017e3d 	.word	0x08017e3d
 8017e90:	08017f8b 	.word	0x08017f8b
 8017e94:	08017f71 	.word	0x08017f71
 8017e98:	08017eef 	.word	0x08017eef
 8017e9c:	08017eef 	.word	0x08017eef
 8017ea0:	08017eef 	.word	0x08017eef
 8017ea4:	08017e3d 	.word	0x08017e3d
 8017ea8:	08017f2d 	.word	0x08017f2d
 8017eac:	08017e3d 	.word	0x08017e3d
 8017eb0:	08017e3d 	.word	0x08017e3d
 8017eb4:	08017e3d 	.word	0x08017e3d
 8017eb8:	08017e3d 	.word	0x08017e3d
 8017ebc:	08017f9b 	.word	0x08017f9b
 8017ec0:	08017f69 	.word	0x08017f69
 8017ec4:	08017f0f 	.word	0x08017f0f
 8017ec8:	08017e3d 	.word	0x08017e3d
 8017ecc:	08017e3d 	.word	0x08017e3d
 8017ed0:	08017f97 	.word	0x08017f97
 8017ed4:	08017e3d 	.word	0x08017e3d
 8017ed8:	08017f71 	.word	0x08017f71
 8017edc:	08017e3d 	.word	0x08017e3d
 8017ee0:	08017e3d 	.word	0x08017e3d
 8017ee4:	08017f17 	.word	0x08017f17
 8017ee8:	3b45      	subs	r3, #69	; 0x45
 8017eea:	2b02      	cmp	r3, #2
 8017eec:	d8a6      	bhi.n	8017e3c <__ssvfiscanf_r+0xec>
 8017eee:	2305      	movs	r3, #5
 8017ef0:	e01f      	b.n	8017f32 <__ssvfiscanf_r+0x1e2>
 8017ef2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017ef4:	4621      	mov	r1, r4
 8017ef6:	4630      	mov	r0, r6
 8017ef8:	4798      	blx	r3
 8017efa:	2800      	cmp	r0, #0
 8017efc:	f43f af68 	beq.w	8017dd0 <__ssvfiscanf_r+0x80>
 8017f00:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017f02:	2800      	cmp	r0, #0
 8017f04:	f040 808d 	bne.w	8018022 <__ssvfiscanf_r+0x2d2>
 8017f08:	f04f 30ff 	mov.w	r0, #4294967295
 8017f0c:	e08f      	b.n	801802e <__ssvfiscanf_r+0x2de>
 8017f0e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017f10:	f042 0220 	orr.w	r2, r2, #32
 8017f14:	9241      	str	r2, [sp, #260]	; 0x104
 8017f16:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017f1c:	9241      	str	r2, [sp, #260]	; 0x104
 8017f1e:	2210      	movs	r2, #16
 8017f20:	2b6f      	cmp	r3, #111	; 0x6f
 8017f22:	9242      	str	r2, [sp, #264]	; 0x108
 8017f24:	bf34      	ite	cc
 8017f26:	2303      	movcc	r3, #3
 8017f28:	2304      	movcs	r3, #4
 8017f2a:	e002      	b.n	8017f32 <__ssvfiscanf_r+0x1e2>
 8017f2c:	2300      	movs	r3, #0
 8017f2e:	9342      	str	r3, [sp, #264]	; 0x108
 8017f30:	2303      	movs	r3, #3
 8017f32:	9347      	str	r3, [sp, #284]	; 0x11c
 8017f34:	6863      	ldr	r3, [r4, #4]
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	dd3d      	ble.n	8017fb6 <__ssvfiscanf_r+0x266>
 8017f3a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017f3c:	0659      	lsls	r1, r3, #25
 8017f3e:	d404      	bmi.n	8017f4a <__ssvfiscanf_r+0x1fa>
 8017f40:	6823      	ldr	r3, [r4, #0]
 8017f42:	781a      	ldrb	r2, [r3, #0]
 8017f44:	5cba      	ldrb	r2, [r7, r2]
 8017f46:	0712      	lsls	r2, r2, #28
 8017f48:	d43c      	bmi.n	8017fc4 <__ssvfiscanf_r+0x274>
 8017f4a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017f4c:	2b02      	cmp	r3, #2
 8017f4e:	dc4b      	bgt.n	8017fe8 <__ssvfiscanf_r+0x298>
 8017f50:	466b      	mov	r3, sp
 8017f52:	4622      	mov	r2, r4
 8017f54:	a941      	add	r1, sp, #260	; 0x104
 8017f56:	4630      	mov	r0, r6
 8017f58:	f000 fa02 	bl	8018360 <_scanf_chars>
 8017f5c:	2801      	cmp	r0, #1
 8017f5e:	d06a      	beq.n	8018036 <__ssvfiscanf_r+0x2e6>
 8017f60:	2802      	cmp	r0, #2
 8017f62:	f47f af1c 	bne.w	8017d9e <__ssvfiscanf_r+0x4e>
 8017f66:	e7cb      	b.n	8017f00 <__ssvfiscanf_r+0x1b0>
 8017f68:	2308      	movs	r3, #8
 8017f6a:	9342      	str	r3, [sp, #264]	; 0x108
 8017f6c:	2304      	movs	r3, #4
 8017f6e:	e7e0      	b.n	8017f32 <__ssvfiscanf_r+0x1e2>
 8017f70:	220a      	movs	r2, #10
 8017f72:	e7d5      	b.n	8017f20 <__ssvfiscanf_r+0x1d0>
 8017f74:	4629      	mov	r1, r5
 8017f76:	4640      	mov	r0, r8
 8017f78:	f000 fb40 	bl	80185fc <__sccl>
 8017f7c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017f7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f82:	9341      	str	r3, [sp, #260]	; 0x104
 8017f84:	4605      	mov	r5, r0
 8017f86:	2301      	movs	r3, #1
 8017f88:	e7d3      	b.n	8017f32 <__ssvfiscanf_r+0x1e2>
 8017f8a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f90:	9341      	str	r3, [sp, #260]	; 0x104
 8017f92:	2300      	movs	r3, #0
 8017f94:	e7cd      	b.n	8017f32 <__ssvfiscanf_r+0x1e2>
 8017f96:	2302      	movs	r3, #2
 8017f98:	e7cb      	b.n	8017f32 <__ssvfiscanf_r+0x1e2>
 8017f9a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017f9c:	06c3      	lsls	r3, r0, #27
 8017f9e:	f53f aefe 	bmi.w	8017d9e <__ssvfiscanf_r+0x4e>
 8017fa2:	9b00      	ldr	r3, [sp, #0]
 8017fa4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017fa6:	1d19      	adds	r1, r3, #4
 8017fa8:	9100      	str	r1, [sp, #0]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	07c0      	lsls	r0, r0, #31
 8017fae:	bf4c      	ite	mi
 8017fb0:	801a      	strhmi	r2, [r3, #0]
 8017fb2:	601a      	strpl	r2, [r3, #0]
 8017fb4:	e6f3      	b.n	8017d9e <__ssvfiscanf_r+0x4e>
 8017fb6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017fb8:	4621      	mov	r1, r4
 8017fba:	4630      	mov	r0, r6
 8017fbc:	4798      	blx	r3
 8017fbe:	2800      	cmp	r0, #0
 8017fc0:	d0bb      	beq.n	8017f3a <__ssvfiscanf_r+0x1ea>
 8017fc2:	e79d      	b.n	8017f00 <__ssvfiscanf_r+0x1b0>
 8017fc4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017fc6:	3201      	adds	r2, #1
 8017fc8:	9245      	str	r2, [sp, #276]	; 0x114
 8017fca:	6862      	ldr	r2, [r4, #4]
 8017fcc:	3a01      	subs	r2, #1
 8017fce:	2a00      	cmp	r2, #0
 8017fd0:	6062      	str	r2, [r4, #4]
 8017fd2:	dd02      	ble.n	8017fda <__ssvfiscanf_r+0x28a>
 8017fd4:	3301      	adds	r3, #1
 8017fd6:	6023      	str	r3, [r4, #0]
 8017fd8:	e7b2      	b.n	8017f40 <__ssvfiscanf_r+0x1f0>
 8017fda:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017fdc:	4621      	mov	r1, r4
 8017fde:	4630      	mov	r0, r6
 8017fe0:	4798      	blx	r3
 8017fe2:	2800      	cmp	r0, #0
 8017fe4:	d0ac      	beq.n	8017f40 <__ssvfiscanf_r+0x1f0>
 8017fe6:	e78b      	b.n	8017f00 <__ssvfiscanf_r+0x1b0>
 8017fe8:	2b04      	cmp	r3, #4
 8017fea:	dc0f      	bgt.n	801800c <__ssvfiscanf_r+0x2bc>
 8017fec:	466b      	mov	r3, sp
 8017fee:	4622      	mov	r2, r4
 8017ff0:	a941      	add	r1, sp, #260	; 0x104
 8017ff2:	4630      	mov	r0, r6
 8017ff4:	f000 fa0e 	bl	8018414 <_scanf_i>
 8017ff8:	e7b0      	b.n	8017f5c <__ssvfiscanf_r+0x20c>
 8017ffa:	bf00      	nop
 8017ffc:	08017c9d 	.word	0x08017c9d
 8018000:	08017d17 	.word	0x08017d17
 8018004:	08018ca3 	.word	0x08018ca3
 8018008:	08018c5a 	.word	0x08018c5a
 801800c:	4b0b      	ldr	r3, [pc, #44]	; (801803c <__ssvfiscanf_r+0x2ec>)
 801800e:	2b00      	cmp	r3, #0
 8018010:	f43f aec5 	beq.w	8017d9e <__ssvfiscanf_r+0x4e>
 8018014:	466b      	mov	r3, sp
 8018016:	4622      	mov	r2, r4
 8018018:	a941      	add	r1, sp, #260	; 0x104
 801801a:	4630      	mov	r0, r6
 801801c:	f3af 8000 	nop.w
 8018020:	e79c      	b.n	8017f5c <__ssvfiscanf_r+0x20c>
 8018022:	89a3      	ldrh	r3, [r4, #12]
 8018024:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018028:	bf18      	it	ne
 801802a:	f04f 30ff 	movne.w	r0, #4294967295
 801802e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8018032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018036:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018038:	e7f9      	b.n	801802e <__ssvfiscanf_r+0x2de>
 801803a:	bf00      	nop
 801803c:	00000000 	.word	0x00000000

08018040 <_printf_common>:
 8018040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018044:	4616      	mov	r6, r2
 8018046:	4699      	mov	r9, r3
 8018048:	688a      	ldr	r2, [r1, #8]
 801804a:	690b      	ldr	r3, [r1, #16]
 801804c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018050:	4293      	cmp	r3, r2
 8018052:	bfb8      	it	lt
 8018054:	4613      	movlt	r3, r2
 8018056:	6033      	str	r3, [r6, #0]
 8018058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801805c:	4607      	mov	r7, r0
 801805e:	460c      	mov	r4, r1
 8018060:	b10a      	cbz	r2, 8018066 <_printf_common+0x26>
 8018062:	3301      	adds	r3, #1
 8018064:	6033      	str	r3, [r6, #0]
 8018066:	6823      	ldr	r3, [r4, #0]
 8018068:	0699      	lsls	r1, r3, #26
 801806a:	bf42      	ittt	mi
 801806c:	6833      	ldrmi	r3, [r6, #0]
 801806e:	3302      	addmi	r3, #2
 8018070:	6033      	strmi	r3, [r6, #0]
 8018072:	6825      	ldr	r5, [r4, #0]
 8018074:	f015 0506 	ands.w	r5, r5, #6
 8018078:	d106      	bne.n	8018088 <_printf_common+0x48>
 801807a:	f104 0a19 	add.w	sl, r4, #25
 801807e:	68e3      	ldr	r3, [r4, #12]
 8018080:	6832      	ldr	r2, [r6, #0]
 8018082:	1a9b      	subs	r3, r3, r2
 8018084:	42ab      	cmp	r3, r5
 8018086:	dc26      	bgt.n	80180d6 <_printf_common+0x96>
 8018088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801808c:	1e13      	subs	r3, r2, #0
 801808e:	6822      	ldr	r2, [r4, #0]
 8018090:	bf18      	it	ne
 8018092:	2301      	movne	r3, #1
 8018094:	0692      	lsls	r2, r2, #26
 8018096:	d42b      	bmi.n	80180f0 <_printf_common+0xb0>
 8018098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801809c:	4649      	mov	r1, r9
 801809e:	4638      	mov	r0, r7
 80180a0:	47c0      	blx	r8
 80180a2:	3001      	adds	r0, #1
 80180a4:	d01e      	beq.n	80180e4 <_printf_common+0xa4>
 80180a6:	6823      	ldr	r3, [r4, #0]
 80180a8:	6922      	ldr	r2, [r4, #16]
 80180aa:	f003 0306 	and.w	r3, r3, #6
 80180ae:	2b04      	cmp	r3, #4
 80180b0:	bf02      	ittt	eq
 80180b2:	68e5      	ldreq	r5, [r4, #12]
 80180b4:	6833      	ldreq	r3, [r6, #0]
 80180b6:	1aed      	subeq	r5, r5, r3
 80180b8:	68a3      	ldr	r3, [r4, #8]
 80180ba:	bf0c      	ite	eq
 80180bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80180c0:	2500      	movne	r5, #0
 80180c2:	4293      	cmp	r3, r2
 80180c4:	bfc4      	itt	gt
 80180c6:	1a9b      	subgt	r3, r3, r2
 80180c8:	18ed      	addgt	r5, r5, r3
 80180ca:	2600      	movs	r6, #0
 80180cc:	341a      	adds	r4, #26
 80180ce:	42b5      	cmp	r5, r6
 80180d0:	d11a      	bne.n	8018108 <_printf_common+0xc8>
 80180d2:	2000      	movs	r0, #0
 80180d4:	e008      	b.n	80180e8 <_printf_common+0xa8>
 80180d6:	2301      	movs	r3, #1
 80180d8:	4652      	mov	r2, sl
 80180da:	4649      	mov	r1, r9
 80180dc:	4638      	mov	r0, r7
 80180de:	47c0      	blx	r8
 80180e0:	3001      	adds	r0, #1
 80180e2:	d103      	bne.n	80180ec <_printf_common+0xac>
 80180e4:	f04f 30ff 	mov.w	r0, #4294967295
 80180e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180ec:	3501      	adds	r5, #1
 80180ee:	e7c6      	b.n	801807e <_printf_common+0x3e>
 80180f0:	18e1      	adds	r1, r4, r3
 80180f2:	1c5a      	adds	r2, r3, #1
 80180f4:	2030      	movs	r0, #48	; 0x30
 80180f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80180fa:	4422      	add	r2, r4
 80180fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018104:	3302      	adds	r3, #2
 8018106:	e7c7      	b.n	8018098 <_printf_common+0x58>
 8018108:	2301      	movs	r3, #1
 801810a:	4622      	mov	r2, r4
 801810c:	4649      	mov	r1, r9
 801810e:	4638      	mov	r0, r7
 8018110:	47c0      	blx	r8
 8018112:	3001      	adds	r0, #1
 8018114:	d0e6      	beq.n	80180e4 <_printf_common+0xa4>
 8018116:	3601      	adds	r6, #1
 8018118:	e7d9      	b.n	80180ce <_printf_common+0x8e>
	...

0801811c <_printf_i>:
 801811c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018120:	7e0f      	ldrb	r7, [r1, #24]
 8018122:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018124:	2f78      	cmp	r7, #120	; 0x78
 8018126:	4691      	mov	r9, r2
 8018128:	4680      	mov	r8, r0
 801812a:	460c      	mov	r4, r1
 801812c:	469a      	mov	sl, r3
 801812e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018132:	d807      	bhi.n	8018144 <_printf_i+0x28>
 8018134:	2f62      	cmp	r7, #98	; 0x62
 8018136:	d80a      	bhi.n	801814e <_printf_i+0x32>
 8018138:	2f00      	cmp	r7, #0
 801813a:	f000 80d4 	beq.w	80182e6 <_printf_i+0x1ca>
 801813e:	2f58      	cmp	r7, #88	; 0x58
 8018140:	f000 80c0 	beq.w	80182c4 <_printf_i+0x1a8>
 8018144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801814c:	e03a      	b.n	80181c4 <_printf_i+0xa8>
 801814e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018152:	2b15      	cmp	r3, #21
 8018154:	d8f6      	bhi.n	8018144 <_printf_i+0x28>
 8018156:	a101      	add	r1, pc, #4	; (adr r1, 801815c <_printf_i+0x40>)
 8018158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801815c:	080181b5 	.word	0x080181b5
 8018160:	080181c9 	.word	0x080181c9
 8018164:	08018145 	.word	0x08018145
 8018168:	08018145 	.word	0x08018145
 801816c:	08018145 	.word	0x08018145
 8018170:	08018145 	.word	0x08018145
 8018174:	080181c9 	.word	0x080181c9
 8018178:	08018145 	.word	0x08018145
 801817c:	08018145 	.word	0x08018145
 8018180:	08018145 	.word	0x08018145
 8018184:	08018145 	.word	0x08018145
 8018188:	080182cd 	.word	0x080182cd
 801818c:	080181f5 	.word	0x080181f5
 8018190:	08018287 	.word	0x08018287
 8018194:	08018145 	.word	0x08018145
 8018198:	08018145 	.word	0x08018145
 801819c:	080182ef 	.word	0x080182ef
 80181a0:	08018145 	.word	0x08018145
 80181a4:	080181f5 	.word	0x080181f5
 80181a8:	08018145 	.word	0x08018145
 80181ac:	08018145 	.word	0x08018145
 80181b0:	0801828f 	.word	0x0801828f
 80181b4:	682b      	ldr	r3, [r5, #0]
 80181b6:	1d1a      	adds	r2, r3, #4
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	602a      	str	r2, [r5, #0]
 80181bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80181c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80181c4:	2301      	movs	r3, #1
 80181c6:	e09f      	b.n	8018308 <_printf_i+0x1ec>
 80181c8:	6820      	ldr	r0, [r4, #0]
 80181ca:	682b      	ldr	r3, [r5, #0]
 80181cc:	0607      	lsls	r7, r0, #24
 80181ce:	f103 0104 	add.w	r1, r3, #4
 80181d2:	6029      	str	r1, [r5, #0]
 80181d4:	d501      	bpl.n	80181da <_printf_i+0xbe>
 80181d6:	681e      	ldr	r6, [r3, #0]
 80181d8:	e003      	b.n	80181e2 <_printf_i+0xc6>
 80181da:	0646      	lsls	r6, r0, #25
 80181dc:	d5fb      	bpl.n	80181d6 <_printf_i+0xba>
 80181de:	f9b3 6000 	ldrsh.w	r6, [r3]
 80181e2:	2e00      	cmp	r6, #0
 80181e4:	da03      	bge.n	80181ee <_printf_i+0xd2>
 80181e6:	232d      	movs	r3, #45	; 0x2d
 80181e8:	4276      	negs	r6, r6
 80181ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80181ee:	485a      	ldr	r0, [pc, #360]	; (8018358 <_printf_i+0x23c>)
 80181f0:	230a      	movs	r3, #10
 80181f2:	e012      	b.n	801821a <_printf_i+0xfe>
 80181f4:	682b      	ldr	r3, [r5, #0]
 80181f6:	6820      	ldr	r0, [r4, #0]
 80181f8:	1d19      	adds	r1, r3, #4
 80181fa:	6029      	str	r1, [r5, #0]
 80181fc:	0605      	lsls	r5, r0, #24
 80181fe:	d501      	bpl.n	8018204 <_printf_i+0xe8>
 8018200:	681e      	ldr	r6, [r3, #0]
 8018202:	e002      	b.n	801820a <_printf_i+0xee>
 8018204:	0641      	lsls	r1, r0, #25
 8018206:	d5fb      	bpl.n	8018200 <_printf_i+0xe4>
 8018208:	881e      	ldrh	r6, [r3, #0]
 801820a:	4853      	ldr	r0, [pc, #332]	; (8018358 <_printf_i+0x23c>)
 801820c:	2f6f      	cmp	r7, #111	; 0x6f
 801820e:	bf0c      	ite	eq
 8018210:	2308      	moveq	r3, #8
 8018212:	230a      	movne	r3, #10
 8018214:	2100      	movs	r1, #0
 8018216:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801821a:	6865      	ldr	r5, [r4, #4]
 801821c:	60a5      	str	r5, [r4, #8]
 801821e:	2d00      	cmp	r5, #0
 8018220:	bfa2      	ittt	ge
 8018222:	6821      	ldrge	r1, [r4, #0]
 8018224:	f021 0104 	bicge.w	r1, r1, #4
 8018228:	6021      	strge	r1, [r4, #0]
 801822a:	b90e      	cbnz	r6, 8018230 <_printf_i+0x114>
 801822c:	2d00      	cmp	r5, #0
 801822e:	d04b      	beq.n	80182c8 <_printf_i+0x1ac>
 8018230:	4615      	mov	r5, r2
 8018232:	fbb6 f1f3 	udiv	r1, r6, r3
 8018236:	fb03 6711 	mls	r7, r3, r1, r6
 801823a:	5dc7      	ldrb	r7, [r0, r7]
 801823c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018240:	4637      	mov	r7, r6
 8018242:	42bb      	cmp	r3, r7
 8018244:	460e      	mov	r6, r1
 8018246:	d9f4      	bls.n	8018232 <_printf_i+0x116>
 8018248:	2b08      	cmp	r3, #8
 801824a:	d10b      	bne.n	8018264 <_printf_i+0x148>
 801824c:	6823      	ldr	r3, [r4, #0]
 801824e:	07de      	lsls	r6, r3, #31
 8018250:	d508      	bpl.n	8018264 <_printf_i+0x148>
 8018252:	6923      	ldr	r3, [r4, #16]
 8018254:	6861      	ldr	r1, [r4, #4]
 8018256:	4299      	cmp	r1, r3
 8018258:	bfde      	ittt	le
 801825a:	2330      	movle	r3, #48	; 0x30
 801825c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018260:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018264:	1b52      	subs	r2, r2, r5
 8018266:	6122      	str	r2, [r4, #16]
 8018268:	f8cd a000 	str.w	sl, [sp]
 801826c:	464b      	mov	r3, r9
 801826e:	aa03      	add	r2, sp, #12
 8018270:	4621      	mov	r1, r4
 8018272:	4640      	mov	r0, r8
 8018274:	f7ff fee4 	bl	8018040 <_printf_common>
 8018278:	3001      	adds	r0, #1
 801827a:	d14a      	bne.n	8018312 <_printf_i+0x1f6>
 801827c:	f04f 30ff 	mov.w	r0, #4294967295
 8018280:	b004      	add	sp, #16
 8018282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018286:	6823      	ldr	r3, [r4, #0]
 8018288:	f043 0320 	orr.w	r3, r3, #32
 801828c:	6023      	str	r3, [r4, #0]
 801828e:	4833      	ldr	r0, [pc, #204]	; (801835c <_printf_i+0x240>)
 8018290:	2778      	movs	r7, #120	; 0x78
 8018292:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8018296:	6823      	ldr	r3, [r4, #0]
 8018298:	6829      	ldr	r1, [r5, #0]
 801829a:	061f      	lsls	r7, r3, #24
 801829c:	f851 6b04 	ldr.w	r6, [r1], #4
 80182a0:	d402      	bmi.n	80182a8 <_printf_i+0x18c>
 80182a2:	065f      	lsls	r7, r3, #25
 80182a4:	bf48      	it	mi
 80182a6:	b2b6      	uxthmi	r6, r6
 80182a8:	07df      	lsls	r7, r3, #31
 80182aa:	bf48      	it	mi
 80182ac:	f043 0320 	orrmi.w	r3, r3, #32
 80182b0:	6029      	str	r1, [r5, #0]
 80182b2:	bf48      	it	mi
 80182b4:	6023      	strmi	r3, [r4, #0]
 80182b6:	b91e      	cbnz	r6, 80182c0 <_printf_i+0x1a4>
 80182b8:	6823      	ldr	r3, [r4, #0]
 80182ba:	f023 0320 	bic.w	r3, r3, #32
 80182be:	6023      	str	r3, [r4, #0]
 80182c0:	2310      	movs	r3, #16
 80182c2:	e7a7      	b.n	8018214 <_printf_i+0xf8>
 80182c4:	4824      	ldr	r0, [pc, #144]	; (8018358 <_printf_i+0x23c>)
 80182c6:	e7e4      	b.n	8018292 <_printf_i+0x176>
 80182c8:	4615      	mov	r5, r2
 80182ca:	e7bd      	b.n	8018248 <_printf_i+0x12c>
 80182cc:	682b      	ldr	r3, [r5, #0]
 80182ce:	6826      	ldr	r6, [r4, #0]
 80182d0:	6961      	ldr	r1, [r4, #20]
 80182d2:	1d18      	adds	r0, r3, #4
 80182d4:	6028      	str	r0, [r5, #0]
 80182d6:	0635      	lsls	r5, r6, #24
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	d501      	bpl.n	80182e0 <_printf_i+0x1c4>
 80182dc:	6019      	str	r1, [r3, #0]
 80182de:	e002      	b.n	80182e6 <_printf_i+0x1ca>
 80182e0:	0670      	lsls	r0, r6, #25
 80182e2:	d5fb      	bpl.n	80182dc <_printf_i+0x1c0>
 80182e4:	8019      	strh	r1, [r3, #0]
 80182e6:	2300      	movs	r3, #0
 80182e8:	6123      	str	r3, [r4, #16]
 80182ea:	4615      	mov	r5, r2
 80182ec:	e7bc      	b.n	8018268 <_printf_i+0x14c>
 80182ee:	682b      	ldr	r3, [r5, #0]
 80182f0:	1d1a      	adds	r2, r3, #4
 80182f2:	602a      	str	r2, [r5, #0]
 80182f4:	681d      	ldr	r5, [r3, #0]
 80182f6:	6862      	ldr	r2, [r4, #4]
 80182f8:	2100      	movs	r1, #0
 80182fa:	4628      	mov	r0, r5
 80182fc:	f7e8 f820 	bl	8000340 <memchr>
 8018300:	b108      	cbz	r0, 8018306 <_printf_i+0x1ea>
 8018302:	1b40      	subs	r0, r0, r5
 8018304:	6060      	str	r0, [r4, #4]
 8018306:	6863      	ldr	r3, [r4, #4]
 8018308:	6123      	str	r3, [r4, #16]
 801830a:	2300      	movs	r3, #0
 801830c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018310:	e7aa      	b.n	8018268 <_printf_i+0x14c>
 8018312:	6923      	ldr	r3, [r4, #16]
 8018314:	462a      	mov	r2, r5
 8018316:	4649      	mov	r1, r9
 8018318:	4640      	mov	r0, r8
 801831a:	47d0      	blx	sl
 801831c:	3001      	adds	r0, #1
 801831e:	d0ad      	beq.n	801827c <_printf_i+0x160>
 8018320:	6823      	ldr	r3, [r4, #0]
 8018322:	079b      	lsls	r3, r3, #30
 8018324:	d413      	bmi.n	801834e <_printf_i+0x232>
 8018326:	68e0      	ldr	r0, [r4, #12]
 8018328:	9b03      	ldr	r3, [sp, #12]
 801832a:	4298      	cmp	r0, r3
 801832c:	bfb8      	it	lt
 801832e:	4618      	movlt	r0, r3
 8018330:	e7a6      	b.n	8018280 <_printf_i+0x164>
 8018332:	2301      	movs	r3, #1
 8018334:	4632      	mov	r2, r6
 8018336:	4649      	mov	r1, r9
 8018338:	4640      	mov	r0, r8
 801833a:	47d0      	blx	sl
 801833c:	3001      	adds	r0, #1
 801833e:	d09d      	beq.n	801827c <_printf_i+0x160>
 8018340:	3501      	adds	r5, #1
 8018342:	68e3      	ldr	r3, [r4, #12]
 8018344:	9903      	ldr	r1, [sp, #12]
 8018346:	1a5b      	subs	r3, r3, r1
 8018348:	42ab      	cmp	r3, r5
 801834a:	dcf2      	bgt.n	8018332 <_printf_i+0x216>
 801834c:	e7eb      	b.n	8018326 <_printf_i+0x20a>
 801834e:	2500      	movs	r5, #0
 8018350:	f104 0619 	add.w	r6, r4, #25
 8018354:	e7f5      	b.n	8018342 <_printf_i+0x226>
 8018356:	bf00      	nop
 8018358:	08018c65 	.word	0x08018c65
 801835c:	08018c76 	.word	0x08018c76

08018360 <_scanf_chars>:
 8018360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018364:	4615      	mov	r5, r2
 8018366:	688a      	ldr	r2, [r1, #8]
 8018368:	4680      	mov	r8, r0
 801836a:	460c      	mov	r4, r1
 801836c:	b932      	cbnz	r2, 801837c <_scanf_chars+0x1c>
 801836e:	698a      	ldr	r2, [r1, #24]
 8018370:	2a00      	cmp	r2, #0
 8018372:	bf0c      	ite	eq
 8018374:	2201      	moveq	r2, #1
 8018376:	f04f 32ff 	movne.w	r2, #4294967295
 801837a:	608a      	str	r2, [r1, #8]
 801837c:	6822      	ldr	r2, [r4, #0]
 801837e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8018410 <_scanf_chars+0xb0>
 8018382:	06d1      	lsls	r1, r2, #27
 8018384:	bf5f      	itttt	pl
 8018386:	681a      	ldrpl	r2, [r3, #0]
 8018388:	1d11      	addpl	r1, r2, #4
 801838a:	6019      	strpl	r1, [r3, #0]
 801838c:	6816      	ldrpl	r6, [r2, #0]
 801838e:	2700      	movs	r7, #0
 8018390:	69a0      	ldr	r0, [r4, #24]
 8018392:	b188      	cbz	r0, 80183b8 <_scanf_chars+0x58>
 8018394:	2801      	cmp	r0, #1
 8018396:	d107      	bne.n	80183a8 <_scanf_chars+0x48>
 8018398:	682a      	ldr	r2, [r5, #0]
 801839a:	7811      	ldrb	r1, [r2, #0]
 801839c:	6962      	ldr	r2, [r4, #20]
 801839e:	5c52      	ldrb	r2, [r2, r1]
 80183a0:	b952      	cbnz	r2, 80183b8 <_scanf_chars+0x58>
 80183a2:	2f00      	cmp	r7, #0
 80183a4:	d031      	beq.n	801840a <_scanf_chars+0xaa>
 80183a6:	e022      	b.n	80183ee <_scanf_chars+0x8e>
 80183a8:	2802      	cmp	r0, #2
 80183aa:	d120      	bne.n	80183ee <_scanf_chars+0x8e>
 80183ac:	682b      	ldr	r3, [r5, #0]
 80183ae:	781b      	ldrb	r3, [r3, #0]
 80183b0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80183b4:	071b      	lsls	r3, r3, #28
 80183b6:	d41a      	bmi.n	80183ee <_scanf_chars+0x8e>
 80183b8:	6823      	ldr	r3, [r4, #0]
 80183ba:	06da      	lsls	r2, r3, #27
 80183bc:	bf5e      	ittt	pl
 80183be:	682b      	ldrpl	r3, [r5, #0]
 80183c0:	781b      	ldrbpl	r3, [r3, #0]
 80183c2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80183c6:	682a      	ldr	r2, [r5, #0]
 80183c8:	686b      	ldr	r3, [r5, #4]
 80183ca:	3201      	adds	r2, #1
 80183cc:	602a      	str	r2, [r5, #0]
 80183ce:	68a2      	ldr	r2, [r4, #8]
 80183d0:	3b01      	subs	r3, #1
 80183d2:	3a01      	subs	r2, #1
 80183d4:	606b      	str	r3, [r5, #4]
 80183d6:	3701      	adds	r7, #1
 80183d8:	60a2      	str	r2, [r4, #8]
 80183da:	b142      	cbz	r2, 80183ee <_scanf_chars+0x8e>
 80183dc:	2b00      	cmp	r3, #0
 80183de:	dcd7      	bgt.n	8018390 <_scanf_chars+0x30>
 80183e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80183e4:	4629      	mov	r1, r5
 80183e6:	4640      	mov	r0, r8
 80183e8:	4798      	blx	r3
 80183ea:	2800      	cmp	r0, #0
 80183ec:	d0d0      	beq.n	8018390 <_scanf_chars+0x30>
 80183ee:	6823      	ldr	r3, [r4, #0]
 80183f0:	f013 0310 	ands.w	r3, r3, #16
 80183f4:	d105      	bne.n	8018402 <_scanf_chars+0xa2>
 80183f6:	68e2      	ldr	r2, [r4, #12]
 80183f8:	3201      	adds	r2, #1
 80183fa:	60e2      	str	r2, [r4, #12]
 80183fc:	69a2      	ldr	r2, [r4, #24]
 80183fe:	b102      	cbz	r2, 8018402 <_scanf_chars+0xa2>
 8018400:	7033      	strb	r3, [r6, #0]
 8018402:	6923      	ldr	r3, [r4, #16]
 8018404:	443b      	add	r3, r7
 8018406:	6123      	str	r3, [r4, #16]
 8018408:	2000      	movs	r0, #0
 801840a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801840e:	bf00      	nop
 8018410:	08018ca3 	.word	0x08018ca3

08018414 <_scanf_i>:
 8018414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018418:	4698      	mov	r8, r3
 801841a:	4b74      	ldr	r3, [pc, #464]	; (80185ec <_scanf_i+0x1d8>)
 801841c:	460c      	mov	r4, r1
 801841e:	4682      	mov	sl, r0
 8018420:	4616      	mov	r6, r2
 8018422:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018426:	b087      	sub	sp, #28
 8018428:	ab03      	add	r3, sp, #12
 801842a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801842e:	4b70      	ldr	r3, [pc, #448]	; (80185f0 <_scanf_i+0x1dc>)
 8018430:	69a1      	ldr	r1, [r4, #24]
 8018432:	4a70      	ldr	r2, [pc, #448]	; (80185f4 <_scanf_i+0x1e0>)
 8018434:	2903      	cmp	r1, #3
 8018436:	bf18      	it	ne
 8018438:	461a      	movne	r2, r3
 801843a:	68a3      	ldr	r3, [r4, #8]
 801843c:	9201      	str	r2, [sp, #4]
 801843e:	1e5a      	subs	r2, r3, #1
 8018440:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8018444:	bf88      	it	hi
 8018446:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801844a:	4627      	mov	r7, r4
 801844c:	bf82      	ittt	hi
 801844e:	eb03 0905 	addhi.w	r9, r3, r5
 8018452:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018456:	60a3      	strhi	r3, [r4, #8]
 8018458:	f857 3b1c 	ldr.w	r3, [r7], #28
 801845c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018460:	bf98      	it	ls
 8018462:	f04f 0900 	movls.w	r9, #0
 8018466:	6023      	str	r3, [r4, #0]
 8018468:	463d      	mov	r5, r7
 801846a:	f04f 0b00 	mov.w	fp, #0
 801846e:	6831      	ldr	r1, [r6, #0]
 8018470:	ab03      	add	r3, sp, #12
 8018472:	7809      	ldrb	r1, [r1, #0]
 8018474:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8018478:	2202      	movs	r2, #2
 801847a:	f7e7 ff61 	bl	8000340 <memchr>
 801847e:	b328      	cbz	r0, 80184cc <_scanf_i+0xb8>
 8018480:	f1bb 0f01 	cmp.w	fp, #1
 8018484:	d159      	bne.n	801853a <_scanf_i+0x126>
 8018486:	6862      	ldr	r2, [r4, #4]
 8018488:	b92a      	cbnz	r2, 8018496 <_scanf_i+0x82>
 801848a:	6822      	ldr	r2, [r4, #0]
 801848c:	2308      	movs	r3, #8
 801848e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018492:	6063      	str	r3, [r4, #4]
 8018494:	6022      	str	r2, [r4, #0]
 8018496:	6822      	ldr	r2, [r4, #0]
 8018498:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801849c:	6022      	str	r2, [r4, #0]
 801849e:	68a2      	ldr	r2, [r4, #8]
 80184a0:	1e51      	subs	r1, r2, #1
 80184a2:	60a1      	str	r1, [r4, #8]
 80184a4:	b192      	cbz	r2, 80184cc <_scanf_i+0xb8>
 80184a6:	6832      	ldr	r2, [r6, #0]
 80184a8:	1c51      	adds	r1, r2, #1
 80184aa:	6031      	str	r1, [r6, #0]
 80184ac:	7812      	ldrb	r2, [r2, #0]
 80184ae:	f805 2b01 	strb.w	r2, [r5], #1
 80184b2:	6872      	ldr	r2, [r6, #4]
 80184b4:	3a01      	subs	r2, #1
 80184b6:	2a00      	cmp	r2, #0
 80184b8:	6072      	str	r2, [r6, #4]
 80184ba:	dc07      	bgt.n	80184cc <_scanf_i+0xb8>
 80184bc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80184c0:	4631      	mov	r1, r6
 80184c2:	4650      	mov	r0, sl
 80184c4:	4790      	blx	r2
 80184c6:	2800      	cmp	r0, #0
 80184c8:	f040 8085 	bne.w	80185d6 <_scanf_i+0x1c2>
 80184cc:	f10b 0b01 	add.w	fp, fp, #1
 80184d0:	f1bb 0f03 	cmp.w	fp, #3
 80184d4:	d1cb      	bne.n	801846e <_scanf_i+0x5a>
 80184d6:	6863      	ldr	r3, [r4, #4]
 80184d8:	b90b      	cbnz	r3, 80184de <_scanf_i+0xca>
 80184da:	230a      	movs	r3, #10
 80184dc:	6063      	str	r3, [r4, #4]
 80184de:	6863      	ldr	r3, [r4, #4]
 80184e0:	4945      	ldr	r1, [pc, #276]	; (80185f8 <_scanf_i+0x1e4>)
 80184e2:	6960      	ldr	r0, [r4, #20]
 80184e4:	1ac9      	subs	r1, r1, r3
 80184e6:	f000 f889 	bl	80185fc <__sccl>
 80184ea:	f04f 0b00 	mov.w	fp, #0
 80184ee:	68a3      	ldr	r3, [r4, #8]
 80184f0:	6822      	ldr	r2, [r4, #0]
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d03d      	beq.n	8018572 <_scanf_i+0x15e>
 80184f6:	6831      	ldr	r1, [r6, #0]
 80184f8:	6960      	ldr	r0, [r4, #20]
 80184fa:	f891 c000 	ldrb.w	ip, [r1]
 80184fe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8018502:	2800      	cmp	r0, #0
 8018504:	d035      	beq.n	8018572 <_scanf_i+0x15e>
 8018506:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801850a:	d124      	bne.n	8018556 <_scanf_i+0x142>
 801850c:	0510      	lsls	r0, r2, #20
 801850e:	d522      	bpl.n	8018556 <_scanf_i+0x142>
 8018510:	f10b 0b01 	add.w	fp, fp, #1
 8018514:	f1b9 0f00 	cmp.w	r9, #0
 8018518:	d003      	beq.n	8018522 <_scanf_i+0x10e>
 801851a:	3301      	adds	r3, #1
 801851c:	f109 39ff 	add.w	r9, r9, #4294967295
 8018520:	60a3      	str	r3, [r4, #8]
 8018522:	6873      	ldr	r3, [r6, #4]
 8018524:	3b01      	subs	r3, #1
 8018526:	2b00      	cmp	r3, #0
 8018528:	6073      	str	r3, [r6, #4]
 801852a:	dd1b      	ble.n	8018564 <_scanf_i+0x150>
 801852c:	6833      	ldr	r3, [r6, #0]
 801852e:	3301      	adds	r3, #1
 8018530:	6033      	str	r3, [r6, #0]
 8018532:	68a3      	ldr	r3, [r4, #8]
 8018534:	3b01      	subs	r3, #1
 8018536:	60a3      	str	r3, [r4, #8]
 8018538:	e7d9      	b.n	80184ee <_scanf_i+0xda>
 801853a:	f1bb 0f02 	cmp.w	fp, #2
 801853e:	d1ae      	bne.n	801849e <_scanf_i+0x8a>
 8018540:	6822      	ldr	r2, [r4, #0]
 8018542:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8018546:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801854a:	d1bf      	bne.n	80184cc <_scanf_i+0xb8>
 801854c:	2310      	movs	r3, #16
 801854e:	6063      	str	r3, [r4, #4]
 8018550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018554:	e7a2      	b.n	801849c <_scanf_i+0x88>
 8018556:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801855a:	6022      	str	r2, [r4, #0]
 801855c:	780b      	ldrb	r3, [r1, #0]
 801855e:	f805 3b01 	strb.w	r3, [r5], #1
 8018562:	e7de      	b.n	8018522 <_scanf_i+0x10e>
 8018564:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018568:	4631      	mov	r1, r6
 801856a:	4650      	mov	r0, sl
 801856c:	4798      	blx	r3
 801856e:	2800      	cmp	r0, #0
 8018570:	d0df      	beq.n	8018532 <_scanf_i+0x11e>
 8018572:	6823      	ldr	r3, [r4, #0]
 8018574:	05d9      	lsls	r1, r3, #23
 8018576:	d50d      	bpl.n	8018594 <_scanf_i+0x180>
 8018578:	42bd      	cmp	r5, r7
 801857a:	d909      	bls.n	8018590 <_scanf_i+0x17c>
 801857c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018580:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8018584:	4632      	mov	r2, r6
 8018586:	4650      	mov	r0, sl
 8018588:	4798      	blx	r3
 801858a:	f105 39ff 	add.w	r9, r5, #4294967295
 801858e:	464d      	mov	r5, r9
 8018590:	42bd      	cmp	r5, r7
 8018592:	d028      	beq.n	80185e6 <_scanf_i+0x1d2>
 8018594:	6822      	ldr	r2, [r4, #0]
 8018596:	f012 0210 	ands.w	r2, r2, #16
 801859a:	d113      	bne.n	80185c4 <_scanf_i+0x1b0>
 801859c:	702a      	strb	r2, [r5, #0]
 801859e:	6863      	ldr	r3, [r4, #4]
 80185a0:	9e01      	ldr	r6, [sp, #4]
 80185a2:	4639      	mov	r1, r7
 80185a4:	4650      	mov	r0, sl
 80185a6:	47b0      	blx	r6
 80185a8:	f8d8 3000 	ldr.w	r3, [r8]
 80185ac:	6821      	ldr	r1, [r4, #0]
 80185ae:	1d1a      	adds	r2, r3, #4
 80185b0:	f8c8 2000 	str.w	r2, [r8]
 80185b4:	f011 0f20 	tst.w	r1, #32
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	d00f      	beq.n	80185dc <_scanf_i+0x1c8>
 80185bc:	6018      	str	r0, [r3, #0]
 80185be:	68e3      	ldr	r3, [r4, #12]
 80185c0:	3301      	adds	r3, #1
 80185c2:	60e3      	str	r3, [r4, #12]
 80185c4:	6923      	ldr	r3, [r4, #16]
 80185c6:	1bed      	subs	r5, r5, r7
 80185c8:	445d      	add	r5, fp
 80185ca:	442b      	add	r3, r5
 80185cc:	6123      	str	r3, [r4, #16]
 80185ce:	2000      	movs	r0, #0
 80185d0:	b007      	add	sp, #28
 80185d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80185d6:	f04f 0b00 	mov.w	fp, #0
 80185da:	e7ca      	b.n	8018572 <_scanf_i+0x15e>
 80185dc:	07ca      	lsls	r2, r1, #31
 80185de:	bf4c      	ite	mi
 80185e0:	8018      	strhmi	r0, [r3, #0]
 80185e2:	6018      	strpl	r0, [r3, #0]
 80185e4:	e7eb      	b.n	80185be <_scanf_i+0x1aa>
 80185e6:	2001      	movs	r0, #1
 80185e8:	e7f2      	b.n	80185d0 <_scanf_i+0x1bc>
 80185ea:	bf00      	nop
 80185ec:	08018b84 	.word	0x08018b84
 80185f0:	08018985 	.word	0x08018985
 80185f4:	0801889d 	.word	0x0801889d
 80185f8:	08018c97 	.word	0x08018c97

080185fc <__sccl>:
 80185fc:	b570      	push	{r4, r5, r6, lr}
 80185fe:	780b      	ldrb	r3, [r1, #0]
 8018600:	4604      	mov	r4, r0
 8018602:	2b5e      	cmp	r3, #94	; 0x5e
 8018604:	bf0b      	itete	eq
 8018606:	784b      	ldrbeq	r3, [r1, #1]
 8018608:	1c4a      	addne	r2, r1, #1
 801860a:	1c8a      	addeq	r2, r1, #2
 801860c:	2100      	movne	r1, #0
 801860e:	bf08      	it	eq
 8018610:	2101      	moveq	r1, #1
 8018612:	3801      	subs	r0, #1
 8018614:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8018618:	f800 1f01 	strb.w	r1, [r0, #1]!
 801861c:	42a8      	cmp	r0, r5
 801861e:	d1fb      	bne.n	8018618 <__sccl+0x1c>
 8018620:	b90b      	cbnz	r3, 8018626 <__sccl+0x2a>
 8018622:	1e50      	subs	r0, r2, #1
 8018624:	bd70      	pop	{r4, r5, r6, pc}
 8018626:	f081 0101 	eor.w	r1, r1, #1
 801862a:	54e1      	strb	r1, [r4, r3]
 801862c:	4610      	mov	r0, r2
 801862e:	4602      	mov	r2, r0
 8018630:	f812 5b01 	ldrb.w	r5, [r2], #1
 8018634:	2d2d      	cmp	r5, #45	; 0x2d
 8018636:	d005      	beq.n	8018644 <__sccl+0x48>
 8018638:	2d5d      	cmp	r5, #93	; 0x5d
 801863a:	d016      	beq.n	801866a <__sccl+0x6e>
 801863c:	2d00      	cmp	r5, #0
 801863e:	d0f1      	beq.n	8018624 <__sccl+0x28>
 8018640:	462b      	mov	r3, r5
 8018642:	e7f2      	b.n	801862a <__sccl+0x2e>
 8018644:	7846      	ldrb	r6, [r0, #1]
 8018646:	2e5d      	cmp	r6, #93	; 0x5d
 8018648:	d0fa      	beq.n	8018640 <__sccl+0x44>
 801864a:	42b3      	cmp	r3, r6
 801864c:	dcf8      	bgt.n	8018640 <__sccl+0x44>
 801864e:	3002      	adds	r0, #2
 8018650:	461a      	mov	r2, r3
 8018652:	3201      	adds	r2, #1
 8018654:	4296      	cmp	r6, r2
 8018656:	54a1      	strb	r1, [r4, r2]
 8018658:	dcfb      	bgt.n	8018652 <__sccl+0x56>
 801865a:	1af2      	subs	r2, r6, r3
 801865c:	3a01      	subs	r2, #1
 801865e:	1c5d      	adds	r5, r3, #1
 8018660:	42b3      	cmp	r3, r6
 8018662:	bfa8      	it	ge
 8018664:	2200      	movge	r2, #0
 8018666:	18ab      	adds	r3, r5, r2
 8018668:	e7e1      	b.n	801862e <__sccl+0x32>
 801866a:	4610      	mov	r0, r2
 801866c:	e7da      	b.n	8018624 <__sccl+0x28>

0801866e <__submore>:
 801866e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018672:	460c      	mov	r4, r1
 8018674:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018676:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801867a:	4299      	cmp	r1, r3
 801867c:	d11d      	bne.n	80186ba <__submore+0x4c>
 801867e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018682:	f7ff f927 	bl	80178d4 <_malloc_r>
 8018686:	b918      	cbnz	r0, 8018690 <__submore+0x22>
 8018688:	f04f 30ff 	mov.w	r0, #4294967295
 801868c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018694:	63a3      	str	r3, [r4, #56]	; 0x38
 8018696:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801869a:	6360      	str	r0, [r4, #52]	; 0x34
 801869c:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80186a0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80186a4:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80186a8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80186ac:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80186b0:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80186b4:	6020      	str	r0, [r4, #0]
 80186b6:	2000      	movs	r0, #0
 80186b8:	e7e8      	b.n	801868c <__submore+0x1e>
 80186ba:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80186bc:	0077      	lsls	r7, r6, #1
 80186be:	463a      	mov	r2, r7
 80186c0:	f000 f83a 	bl	8018738 <_realloc_r>
 80186c4:	4605      	mov	r5, r0
 80186c6:	2800      	cmp	r0, #0
 80186c8:	d0de      	beq.n	8018688 <__submore+0x1a>
 80186ca:	eb00 0806 	add.w	r8, r0, r6
 80186ce:	4601      	mov	r1, r0
 80186d0:	4632      	mov	r2, r6
 80186d2:	4640      	mov	r0, r8
 80186d4:	f7ff f884 	bl	80177e0 <memcpy>
 80186d8:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80186dc:	f8c4 8000 	str.w	r8, [r4]
 80186e0:	e7e9      	b.n	80186b6 <__submore+0x48>

080186e2 <memmove>:
 80186e2:	4288      	cmp	r0, r1
 80186e4:	b510      	push	{r4, lr}
 80186e6:	eb01 0402 	add.w	r4, r1, r2
 80186ea:	d902      	bls.n	80186f2 <memmove+0x10>
 80186ec:	4284      	cmp	r4, r0
 80186ee:	4623      	mov	r3, r4
 80186f0:	d807      	bhi.n	8018702 <memmove+0x20>
 80186f2:	1e43      	subs	r3, r0, #1
 80186f4:	42a1      	cmp	r1, r4
 80186f6:	d008      	beq.n	801870a <memmove+0x28>
 80186f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80186fc:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018700:	e7f8      	b.n	80186f4 <memmove+0x12>
 8018702:	4402      	add	r2, r0
 8018704:	4601      	mov	r1, r0
 8018706:	428a      	cmp	r2, r1
 8018708:	d100      	bne.n	801870c <memmove+0x2a>
 801870a:	bd10      	pop	{r4, pc}
 801870c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018710:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018714:	e7f7      	b.n	8018706 <memmove+0x24>
	...

08018718 <_sbrk_r>:
 8018718:	b538      	push	{r3, r4, r5, lr}
 801871a:	4d06      	ldr	r5, [pc, #24]	; (8018734 <_sbrk_r+0x1c>)
 801871c:	2300      	movs	r3, #0
 801871e:	4604      	mov	r4, r0
 8018720:	4608      	mov	r0, r1
 8018722:	602b      	str	r3, [r5, #0]
 8018724:	f7eb f996 	bl	8003a54 <_sbrk>
 8018728:	1c43      	adds	r3, r0, #1
 801872a:	d102      	bne.n	8018732 <_sbrk_r+0x1a>
 801872c:	682b      	ldr	r3, [r5, #0]
 801872e:	b103      	cbz	r3, 8018732 <_sbrk_r+0x1a>
 8018730:	6023      	str	r3, [r4, #0]
 8018732:	bd38      	pop	{r3, r4, r5, pc}
 8018734:	24003454 	.word	0x24003454

08018738 <_realloc_r>:
 8018738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801873c:	4680      	mov	r8, r0
 801873e:	4614      	mov	r4, r2
 8018740:	460e      	mov	r6, r1
 8018742:	b921      	cbnz	r1, 801874e <_realloc_r+0x16>
 8018744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018748:	4611      	mov	r1, r2
 801874a:	f7ff b8c3 	b.w	80178d4 <_malloc_r>
 801874e:	b92a      	cbnz	r2, 801875c <_realloc_r+0x24>
 8018750:	f7ff f854 	bl	80177fc <_free_r>
 8018754:	4625      	mov	r5, r4
 8018756:	4628      	mov	r0, r5
 8018758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801875c:	f000 f914 	bl	8018988 <_malloc_usable_size_r>
 8018760:	4284      	cmp	r4, r0
 8018762:	4607      	mov	r7, r0
 8018764:	d802      	bhi.n	801876c <_realloc_r+0x34>
 8018766:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801876a:	d812      	bhi.n	8018792 <_realloc_r+0x5a>
 801876c:	4621      	mov	r1, r4
 801876e:	4640      	mov	r0, r8
 8018770:	f7ff f8b0 	bl	80178d4 <_malloc_r>
 8018774:	4605      	mov	r5, r0
 8018776:	2800      	cmp	r0, #0
 8018778:	d0ed      	beq.n	8018756 <_realloc_r+0x1e>
 801877a:	42bc      	cmp	r4, r7
 801877c:	4622      	mov	r2, r4
 801877e:	4631      	mov	r1, r6
 8018780:	bf28      	it	cs
 8018782:	463a      	movcs	r2, r7
 8018784:	f7ff f82c 	bl	80177e0 <memcpy>
 8018788:	4631      	mov	r1, r6
 801878a:	4640      	mov	r0, r8
 801878c:	f7ff f836 	bl	80177fc <_free_r>
 8018790:	e7e1      	b.n	8018756 <_realloc_r+0x1e>
 8018792:	4635      	mov	r5, r6
 8018794:	e7df      	b.n	8018756 <_realloc_r+0x1e>
	...

08018798 <_strtol_l.constprop.0>:
 8018798:	2b01      	cmp	r3, #1
 801879a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801879e:	d001      	beq.n	80187a4 <_strtol_l.constprop.0+0xc>
 80187a0:	2b24      	cmp	r3, #36	; 0x24
 80187a2:	d906      	bls.n	80187b2 <_strtol_l.constprop.0+0x1a>
 80187a4:	f7fe ffe8 	bl	8017778 <__errno>
 80187a8:	2316      	movs	r3, #22
 80187aa:	6003      	str	r3, [r0, #0]
 80187ac:	2000      	movs	r0, #0
 80187ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8018898 <_strtol_l.constprop.0+0x100>
 80187b6:	460d      	mov	r5, r1
 80187b8:	462e      	mov	r6, r5
 80187ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80187be:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80187c2:	f017 0708 	ands.w	r7, r7, #8
 80187c6:	d1f7      	bne.n	80187b8 <_strtol_l.constprop.0+0x20>
 80187c8:	2c2d      	cmp	r4, #45	; 0x2d
 80187ca:	d132      	bne.n	8018832 <_strtol_l.constprop.0+0x9a>
 80187cc:	782c      	ldrb	r4, [r5, #0]
 80187ce:	2701      	movs	r7, #1
 80187d0:	1cb5      	adds	r5, r6, #2
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d05b      	beq.n	801888e <_strtol_l.constprop.0+0xf6>
 80187d6:	2b10      	cmp	r3, #16
 80187d8:	d109      	bne.n	80187ee <_strtol_l.constprop.0+0x56>
 80187da:	2c30      	cmp	r4, #48	; 0x30
 80187dc:	d107      	bne.n	80187ee <_strtol_l.constprop.0+0x56>
 80187de:	782c      	ldrb	r4, [r5, #0]
 80187e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80187e4:	2c58      	cmp	r4, #88	; 0x58
 80187e6:	d14d      	bne.n	8018884 <_strtol_l.constprop.0+0xec>
 80187e8:	786c      	ldrb	r4, [r5, #1]
 80187ea:	2310      	movs	r3, #16
 80187ec:	3502      	adds	r5, #2
 80187ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80187f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80187f6:	f04f 0e00 	mov.w	lr, #0
 80187fa:	fbb8 f9f3 	udiv	r9, r8, r3
 80187fe:	4676      	mov	r6, lr
 8018800:	fb03 8a19 	mls	sl, r3, r9, r8
 8018804:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8018808:	f1bc 0f09 	cmp.w	ip, #9
 801880c:	d816      	bhi.n	801883c <_strtol_l.constprop.0+0xa4>
 801880e:	4664      	mov	r4, ip
 8018810:	42a3      	cmp	r3, r4
 8018812:	dd24      	ble.n	801885e <_strtol_l.constprop.0+0xc6>
 8018814:	f1be 3fff 	cmp.w	lr, #4294967295
 8018818:	d008      	beq.n	801882c <_strtol_l.constprop.0+0x94>
 801881a:	45b1      	cmp	r9, r6
 801881c:	d31c      	bcc.n	8018858 <_strtol_l.constprop.0+0xc0>
 801881e:	d101      	bne.n	8018824 <_strtol_l.constprop.0+0x8c>
 8018820:	45a2      	cmp	sl, r4
 8018822:	db19      	blt.n	8018858 <_strtol_l.constprop.0+0xc0>
 8018824:	fb06 4603 	mla	r6, r6, r3, r4
 8018828:	f04f 0e01 	mov.w	lr, #1
 801882c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018830:	e7e8      	b.n	8018804 <_strtol_l.constprop.0+0x6c>
 8018832:	2c2b      	cmp	r4, #43	; 0x2b
 8018834:	bf04      	itt	eq
 8018836:	782c      	ldrbeq	r4, [r5, #0]
 8018838:	1cb5      	addeq	r5, r6, #2
 801883a:	e7ca      	b.n	80187d2 <_strtol_l.constprop.0+0x3a>
 801883c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8018840:	f1bc 0f19 	cmp.w	ip, #25
 8018844:	d801      	bhi.n	801884a <_strtol_l.constprop.0+0xb2>
 8018846:	3c37      	subs	r4, #55	; 0x37
 8018848:	e7e2      	b.n	8018810 <_strtol_l.constprop.0+0x78>
 801884a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801884e:	f1bc 0f19 	cmp.w	ip, #25
 8018852:	d804      	bhi.n	801885e <_strtol_l.constprop.0+0xc6>
 8018854:	3c57      	subs	r4, #87	; 0x57
 8018856:	e7db      	b.n	8018810 <_strtol_l.constprop.0+0x78>
 8018858:	f04f 3eff 	mov.w	lr, #4294967295
 801885c:	e7e6      	b.n	801882c <_strtol_l.constprop.0+0x94>
 801885e:	f1be 3fff 	cmp.w	lr, #4294967295
 8018862:	d105      	bne.n	8018870 <_strtol_l.constprop.0+0xd8>
 8018864:	2322      	movs	r3, #34	; 0x22
 8018866:	6003      	str	r3, [r0, #0]
 8018868:	4646      	mov	r6, r8
 801886a:	b942      	cbnz	r2, 801887e <_strtol_l.constprop.0+0xe6>
 801886c:	4630      	mov	r0, r6
 801886e:	e79e      	b.n	80187ae <_strtol_l.constprop.0+0x16>
 8018870:	b107      	cbz	r7, 8018874 <_strtol_l.constprop.0+0xdc>
 8018872:	4276      	negs	r6, r6
 8018874:	2a00      	cmp	r2, #0
 8018876:	d0f9      	beq.n	801886c <_strtol_l.constprop.0+0xd4>
 8018878:	f1be 0f00 	cmp.w	lr, #0
 801887c:	d000      	beq.n	8018880 <_strtol_l.constprop.0+0xe8>
 801887e:	1e69      	subs	r1, r5, #1
 8018880:	6011      	str	r1, [r2, #0]
 8018882:	e7f3      	b.n	801886c <_strtol_l.constprop.0+0xd4>
 8018884:	2430      	movs	r4, #48	; 0x30
 8018886:	2b00      	cmp	r3, #0
 8018888:	d1b1      	bne.n	80187ee <_strtol_l.constprop.0+0x56>
 801888a:	2308      	movs	r3, #8
 801888c:	e7af      	b.n	80187ee <_strtol_l.constprop.0+0x56>
 801888e:	2c30      	cmp	r4, #48	; 0x30
 8018890:	d0a5      	beq.n	80187de <_strtol_l.constprop.0+0x46>
 8018892:	230a      	movs	r3, #10
 8018894:	e7ab      	b.n	80187ee <_strtol_l.constprop.0+0x56>
 8018896:	bf00      	nop
 8018898:	08018ca3 	.word	0x08018ca3

0801889c <_strtol_r>:
 801889c:	f7ff bf7c 	b.w	8018798 <_strtol_l.constprop.0>

080188a0 <_strtoul_l.constprop.0>:
 80188a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80188a4:	4f36      	ldr	r7, [pc, #216]	; (8018980 <_strtoul_l.constprop.0+0xe0>)
 80188a6:	4686      	mov	lr, r0
 80188a8:	460d      	mov	r5, r1
 80188aa:	4628      	mov	r0, r5
 80188ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 80188b0:	5d3e      	ldrb	r6, [r7, r4]
 80188b2:	f016 0608 	ands.w	r6, r6, #8
 80188b6:	d1f8      	bne.n	80188aa <_strtoul_l.constprop.0+0xa>
 80188b8:	2c2d      	cmp	r4, #45	; 0x2d
 80188ba:	d130      	bne.n	801891e <_strtoul_l.constprop.0+0x7e>
 80188bc:	782c      	ldrb	r4, [r5, #0]
 80188be:	2601      	movs	r6, #1
 80188c0:	1c85      	adds	r5, r0, #2
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	d057      	beq.n	8018976 <_strtoul_l.constprop.0+0xd6>
 80188c6:	2b10      	cmp	r3, #16
 80188c8:	d109      	bne.n	80188de <_strtoul_l.constprop.0+0x3e>
 80188ca:	2c30      	cmp	r4, #48	; 0x30
 80188cc:	d107      	bne.n	80188de <_strtoul_l.constprop.0+0x3e>
 80188ce:	7828      	ldrb	r0, [r5, #0]
 80188d0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80188d4:	2858      	cmp	r0, #88	; 0x58
 80188d6:	d149      	bne.n	801896c <_strtoul_l.constprop.0+0xcc>
 80188d8:	786c      	ldrb	r4, [r5, #1]
 80188da:	2310      	movs	r3, #16
 80188dc:	3502      	adds	r5, #2
 80188de:	f04f 38ff 	mov.w	r8, #4294967295
 80188e2:	2700      	movs	r7, #0
 80188e4:	fbb8 f8f3 	udiv	r8, r8, r3
 80188e8:	fb03 f908 	mul.w	r9, r3, r8
 80188ec:	ea6f 0909 	mvn.w	r9, r9
 80188f0:	4638      	mov	r0, r7
 80188f2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80188f6:	f1bc 0f09 	cmp.w	ip, #9
 80188fa:	d815      	bhi.n	8018928 <_strtoul_l.constprop.0+0x88>
 80188fc:	4664      	mov	r4, ip
 80188fe:	42a3      	cmp	r3, r4
 8018900:	dd23      	ble.n	801894a <_strtoul_l.constprop.0+0xaa>
 8018902:	f1b7 3fff 	cmp.w	r7, #4294967295
 8018906:	d007      	beq.n	8018918 <_strtoul_l.constprop.0+0x78>
 8018908:	4580      	cmp	r8, r0
 801890a:	d31b      	bcc.n	8018944 <_strtoul_l.constprop.0+0xa4>
 801890c:	d101      	bne.n	8018912 <_strtoul_l.constprop.0+0x72>
 801890e:	45a1      	cmp	r9, r4
 8018910:	db18      	blt.n	8018944 <_strtoul_l.constprop.0+0xa4>
 8018912:	fb00 4003 	mla	r0, r0, r3, r4
 8018916:	2701      	movs	r7, #1
 8018918:	f815 4b01 	ldrb.w	r4, [r5], #1
 801891c:	e7e9      	b.n	80188f2 <_strtoul_l.constprop.0+0x52>
 801891e:	2c2b      	cmp	r4, #43	; 0x2b
 8018920:	bf04      	itt	eq
 8018922:	782c      	ldrbeq	r4, [r5, #0]
 8018924:	1c85      	addeq	r5, r0, #2
 8018926:	e7cc      	b.n	80188c2 <_strtoul_l.constprop.0+0x22>
 8018928:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 801892c:	f1bc 0f19 	cmp.w	ip, #25
 8018930:	d801      	bhi.n	8018936 <_strtoul_l.constprop.0+0x96>
 8018932:	3c37      	subs	r4, #55	; 0x37
 8018934:	e7e3      	b.n	80188fe <_strtoul_l.constprop.0+0x5e>
 8018936:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 801893a:	f1bc 0f19 	cmp.w	ip, #25
 801893e:	d804      	bhi.n	801894a <_strtoul_l.constprop.0+0xaa>
 8018940:	3c57      	subs	r4, #87	; 0x57
 8018942:	e7dc      	b.n	80188fe <_strtoul_l.constprop.0+0x5e>
 8018944:	f04f 37ff 	mov.w	r7, #4294967295
 8018948:	e7e6      	b.n	8018918 <_strtoul_l.constprop.0+0x78>
 801894a:	1c7b      	adds	r3, r7, #1
 801894c:	d106      	bne.n	801895c <_strtoul_l.constprop.0+0xbc>
 801894e:	2322      	movs	r3, #34	; 0x22
 8018950:	f8ce 3000 	str.w	r3, [lr]
 8018954:	4638      	mov	r0, r7
 8018956:	b932      	cbnz	r2, 8018966 <_strtoul_l.constprop.0+0xc6>
 8018958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801895c:	b106      	cbz	r6, 8018960 <_strtoul_l.constprop.0+0xc0>
 801895e:	4240      	negs	r0, r0
 8018960:	2a00      	cmp	r2, #0
 8018962:	d0f9      	beq.n	8018958 <_strtoul_l.constprop.0+0xb8>
 8018964:	b107      	cbz	r7, 8018968 <_strtoul_l.constprop.0+0xc8>
 8018966:	1e69      	subs	r1, r5, #1
 8018968:	6011      	str	r1, [r2, #0]
 801896a:	e7f5      	b.n	8018958 <_strtoul_l.constprop.0+0xb8>
 801896c:	2430      	movs	r4, #48	; 0x30
 801896e:	2b00      	cmp	r3, #0
 8018970:	d1b5      	bne.n	80188de <_strtoul_l.constprop.0+0x3e>
 8018972:	2308      	movs	r3, #8
 8018974:	e7b3      	b.n	80188de <_strtoul_l.constprop.0+0x3e>
 8018976:	2c30      	cmp	r4, #48	; 0x30
 8018978:	d0a9      	beq.n	80188ce <_strtoul_l.constprop.0+0x2e>
 801897a:	230a      	movs	r3, #10
 801897c:	e7af      	b.n	80188de <_strtoul_l.constprop.0+0x3e>
 801897e:	bf00      	nop
 8018980:	08018ca3 	.word	0x08018ca3

08018984 <_strtoul_r>:
 8018984:	f7ff bf8c 	b.w	80188a0 <_strtoul_l.constprop.0>

08018988 <_malloc_usable_size_r>:
 8018988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801898c:	1f18      	subs	r0, r3, #4
 801898e:	2b00      	cmp	r3, #0
 8018990:	bfbc      	itt	lt
 8018992:	580b      	ldrlt	r3, [r1, r0]
 8018994:	18c0      	addlt	r0, r0, r3
 8018996:	4770      	bx	lr

08018998 <_init>:
 8018998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801899a:	bf00      	nop
 801899c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801899e:	bc08      	pop	{r3}
 80189a0:	469e      	mov	lr, r3
 80189a2:	4770      	bx	lr

080189a4 <_fini>:
 80189a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189a6:	bf00      	nop
 80189a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189aa:	bc08      	pop	{r3}
 80189ac:	469e      	mov	lr, r3
 80189ae:	4770      	bx	lr
